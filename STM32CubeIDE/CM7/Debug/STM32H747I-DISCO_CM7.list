
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c9a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046d0  0802cc48  0802cc48  0002dc48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0001aaea  08031318  08031318  00032318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000008dc  0804be04  0804be04  0004ce04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0071c300  90000000  90000000  0004f000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000017c  9071c300  9071c300  0076b300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0804c6e0  0804c6e0  0076b47c  2**0
                  CONTENTS
  8 .ARM          00000008  0804c6e0  0804c6e0  0004d6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0804c6e8  0804c6e8  0076b47c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000020  0804c6e8  0804c6e8  0004d6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0804c708  0804c708  0004d708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000002a8  24000000  0804c710  0004e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  240002c0  0804c9b8  0004e2c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  240003c0  0804cab8  0004e3c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00028fd4  240004c0  0804cbb8  0004e4c0  2**2
                  ALLOC
 16 ._user_heap_stack 00002004  24029494  0804cbb8  0004f494  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0076b47c  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  0076c000  2**2
                  ALLOC
 19 .debug_info   00147019  00000000  00000000  0076b4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001fb6d  00000000  00000000  008b24c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00031dd3  00000000  00000000  008d2030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 000046a0  00000000  00000000  00903e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00006cf2  00000000  00000000  009084a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0005b8d4  00000000  00000000  0090f19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   00095e89  00000000  00000000  0096aa6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    00205c2c  00000000  00000000  00a008f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      000000c2  00000000  00000000  00c06523  2**0
                  CONTENTS, READONLY
 28 .debug_frame  0000ca3c  00000000  00000000  00c065e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000008d  00000000  00000000  00c13024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240004c0 	.word	0x240004c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802cc2c 	.word	0x0802cc2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240004c4 	.word	0x240004c4
 80002dc:	0802cc2c 	.word	0x0802cc2c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <_ZN14CalculatorTask7OnEventE10EEventType12UMessageData12EEventClient.part.0>:
	}
}

CalculatorTask::CalculatorTask() : event_bus(EventBusManager(queueToCalculator, EVENT_CLIENT_CALCULATOR)) {}

void CalculatorTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
 80009f8:	b530      	push	{r4, r5, lr}
 80009fa:	b089      	sub	sp, #36	@ 0x24
 80009fc:	4604      	mov	r4, r0
 80009fe:	460d      	mov	r5, r1
	{
		case ASYNC_REQUEST_CALCULATE:
			UMessageData replyMessage;
			for(int i = 0; i < 16; i++)
			{
				replyMessage.calculation_request[i] = 1;
 8000a00:	2210      	movs	r2, #16
 8000a02:	ab04      	add	r3, sp, #16
 8000a04:	2101      	movs	r1, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f02a fd5c 	bl	802b4c4 <memset>
			}
//			Calculator::calculate(msg.calculation_request, result);
			event_bus.send(ASYNC_COMPLETED_CALCULATE, replyMessage, eventSender);
 8000a0c:	aa08      	add	r2, sp, #32
 8000a0e:	9502      	str	r5, [sp, #8]
				replyMessage.calculation_request[i] = 1;
 8000a10:	4603      	mov	r3, r0
			event_bus.send(ASYNC_COMPLETED_CALCULATE, replyMessage, eventSender);
 8000a12:	e912 0003 	ldmdb	r2, {r0, r1}
 8000a16:	e88d 0003 	stmia.w	sp, {r0, r1}
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	cb0c      	ldmia	r3, {r2, r3}
 8000a20:	f000 f892 	bl	8000b48 <_ZN15EventBusManager4sendE10EEventType12UMessageData12EEventClient>
			break;
		default:
			break;
	}
}
 8000a24:	b009      	add	sp, #36	@ 0x24
 8000a26:	bd30      	pop	{r4, r5, pc}

08000a28 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 8000a28:	2a01      	cmp	r2, #1
 8000a2a:	d102      	bne.n	8000a32 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8000a2c:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 8000a2e:	2000      	movs	r0, #0
 8000a30:	4770      	bx	lr
	  switch (__op)
 8000a32:	2a02      	cmp	r2, #2
 8000a34:	d005      	beq.n	8000a42 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1a>
 8000a36:	2a03      	cmp	r2, #3
 8000a38:	d0f9      	beq.n	8000a2e <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d1f7      	bne.n	8000a2e <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
	      __dest._M_access<const type_info*>() = nullptr;
 8000a3e:	6002      	str	r2, [r0, #0]
	      break;
 8000a40:	e7f5      	b.n	8000a2e <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8000a42:	680b      	ldr	r3, [r1, #0]
 8000a44:	6003      	str	r3, [r0, #0]
	  }
 8000a46:	e7f2      	b.n	8000a2e <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>

08000a48 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_>:
	switch(event)
 8000a48:	780a      	ldrb	r2, [r1, #0]
 8000a4a:	2a02      	cmp	r2, #2
 8000a4c:	d103      	bne.n	8000a56 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN14CalculatorTask7processEvEUlS0_S1_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_+0xe>
 8000a4e:	7819      	ldrb	r1, [r3, #0]
 8000a50:	6800      	ldr	r0, [r0, #0]
 8000a52:	f7ff bfd1 	b.w	80009f8 <_ZN14CalculatorTask7OnEventE10EEventType12UMessageData12EEventClient.part.0>
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 8000a56:	4770      	bx	lr

08000a58 <_ZN14CalculatorTaskC1Ev>:
CalculatorTask::CalculatorTask() : event_bus(EventBusManager(queueToCalculator, EVENT_CLIENT_CALCULATOR)) {}
 8000a58:	4a06      	ldr	r2, [pc, #24]	@ (8000a74 <_ZN14CalculatorTaskC1Ev+0x1c>)
 8000a5a:	6811      	ldr	r1, [r2, #0]
      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
      : _Function_base() { }
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	e9c0 2200 	strd	r2, r2, [r0]
 8000a62:	e9c0 2202 	strd	r2, r2, [r0, #8]
	 */
	typedef std::function<void(EEventType, UMessageData, EEventClient eventSender)> OnEventFunction;

	EventBusManager(QueueHandle_t queueSelf, EEventClient senderSelf)
					 : queue_self(queueSelf),
					   sender_self(senderSelf){};
 8000a66:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <_ZN14CalculatorTaskC1Ev+0x20>)
					 : queue_self(queueSelf),
 8000a68:	6101      	str	r1, [r0, #16]
					   sender_self(senderSelf){};
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	6142      	str	r2, [r0, #20]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	7602      	strb	r2, [r0, #24]
 8000a72:	4770      	bx	lr
 8000a74:	240004e8 	.word	0x240004e8
 8000a78:	240004ec 	.word	0x240004ec

08000a7c <_ZN14CalculatorTask7processEv>:

void CalculatorTask::process()
{
 8000a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8000a7e:	2300      	movs	r3, #0
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8000a80:	4669      	mov	r1, sp
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8000a82:	e9cd 0300 	strd	r0, r3, [sp]

	  if (_My_handler::_M_not_empty_function(__f))
	    {
	      _My_handler::_M_init_functor(_M_functor,
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <_ZN14CalculatorTask7processEv+0x28>)
 8000a88:	9303      	str	r3, [sp, #12]
	      _M_manager = &_My_handler::_M_manager;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <_ZN14CalculatorTask7processEv+0x2c>)
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	f000 f88d 	bl	8000bac <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>
      if (_M_manager)
 8000a92:	9b02      	ldr	r3, [sp, #8]
 8000a94:	b11b      	cbz	r3, 8000a9e <_ZN14CalculatorTask7processEv+0x22>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000a96:	4669      	mov	r1, sp
 8000a98:	2203      	movs	r2, #3
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	4798      	blx	r3
}
 8000a9e:	b005      	add	sp, #20
 8000aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000aa4:	08000a49 	.word	0x08000a49
 8000aa8:	08000a29 	.word	0x08000a29

08000aac <StartTask_Calculator>:
{
 8000aac:	b500      	push	{lr}
 8000aae:	b089      	sub	sp, #36	@ 0x24
	CalculatorTask calculatorTaskInstance;
 8000ab0:	a801      	add	r0, sp, #4
 8000ab2:	f7ff ffd1 	bl	8000a58 <_ZN14CalculatorTaskC1Ev>
		calculatorTaskInstance.process();
 8000ab6:	a801      	add	r0, sp, #4
 8000ab8:	f7ff ffe0 	bl	8000a7c <_ZN14CalculatorTask7processEv>
		osDelay(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f010 f9c4 	bl	8010e4a <osDelay>
	for(;;)
 8000ac2:	e7f8      	b.n	8000ab6 <StartTask_Calculator+0xa>

08000ac4 <_ZN10LogPrinter8instanceEv>:
extern osMutexId_t printMutexHandle;

LogPrinter::LogPrinter() : mutexHandle(printMutexHandle) {}

LogPrinter& LogPrinter::instance()
{
 8000ac4:	b510      	push	{r4, lr}
    static LogPrinter inst;
 8000ac6:	4c09      	ldr	r4, [pc, #36]	@ (8000aec <_ZN10LogPrinter8instanceEv+0x28>)
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	f3bf 8f5b 	dmb	ish
 8000ace:	07db      	lsls	r3, r3, #31
 8000ad0:	d40a      	bmi.n	8000ae8 <_ZN10LogPrinter8instanceEv+0x24>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f028 ff52 	bl	802997c <__cxa_guard_acquire>
 8000ad8:	b130      	cbz	r0, 8000ae8 <_ZN10LogPrinter8instanceEv+0x24>
LogPrinter::LogPrinter() : mutexHandle(printMutexHandle) {}
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <_ZN10LogPrinter8instanceEv+0x2c>)
    static LogPrinter inst;
 8000adc:	4620      	mov	r0, r4
LogPrinter::LogPrinter() : mutexHandle(printMutexHandle) {}
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <_ZN10LogPrinter8instanceEv+0x30>)
 8000ae2:	601a      	str	r2, [r3, #0]
    static LogPrinter inst;
 8000ae4:	f028 ff56 	bl	8029994 <__cxa_guard_release>
    return inst;
}
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <_ZN10LogPrinter8instanceEv+0x30>)
 8000aea:	bd10      	pop	{r4, pc}
 8000aec:	240004dc 	.word	0x240004dc
 8000af0:	24000524 	.word	0x24000524
 8000af4:	240004e0 	.word	0x240004e0

08000af8 <_ZN10LogPrinter10printDebugEPKcz>:

void LogPrinter::printDebug(const char* format, ...)
{
 8000af8:	b40e      	push	{r1, r2, r3}
 8000afa:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
    osMutexAcquire(mutexHandle, portMAX_DELAY);
    va_list args;
    va_start(args, format); // Initialize args
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 8000afc:	4e10      	ldr	r6, [pc, #64]	@ (8000b40 <_ZN10LogPrinter10printDebugEPKcz+0x48>)
{
 8000afe:	ad07      	add	r5, sp, #28
 8000b00:	4604      	mov	r4, r0
    osMutexAcquire(mutexHandle, portMAX_DELAY);
 8000b02:	f04f 31ff 	mov.w	r1, #4294967295
 8000b06:	6800      	ldr	r0, [r0, #0]
{
 8000b08:	f855 7b04 	ldr.w	r7, [r5], #4
    osMutexAcquire(mutexHandle, portMAX_DELAY);
 8000b0c:	f010 f9de 	bl	8010ecc <osMutexAcquire>
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 8000b10:	6833      	ldr	r3, [r6, #0]
 8000b12:	462a      	mov	r2, r5
 8000b14:	4639      	mov	r1, r7
 8000b16:	6898      	ldr	r0, [r3, #8]
    va_start(args, format); // Initialize args
 8000b18:	9501      	str	r5, [sp, #4]
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 8000b1a:	f02a f85d 	bl	802abd8 <vfiprintf>
    fprintf(stdout, "\r\n");
 8000b1e:	6833      	ldr	r3, [r6, #0]
 8000b20:	4808      	ldr	r0, [pc, #32]	@ (8000b44 <_ZN10LogPrinter10printDebugEPKcz+0x4c>)
 8000b22:	6899      	ldr	r1, [r3, #8]
 8000b24:	f02a fbb6 	bl	802b294 <fputs>
    fflush(stdout);
 8000b28:	6833      	ldr	r3, [r6, #0]
 8000b2a:	6898      	ldr	r0, [r3, #8]
 8000b2c:	f02a fa98 	bl	802b060 <fflush>
    va_end(args); // Clean up the va_list
    osMutexRelease(mutexHandle);
 8000b30:	6820      	ldr	r0, [r4, #0]
 8000b32:	f010 f9ee 	bl	8010f12 <osMutexRelease>
}
 8000b36:	b002      	add	sp, #8
 8000b38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000b3c:	b003      	add	sp, #12
 8000b3e:	4770      	bx	lr
 8000b40:	240000e8 	.word	0x240000e8
 8000b44:	0802cc88 	.word	0x0802cc88

08000b48 <_ZN15EventBusManager4sendE10EEventType12UMessageData12EEventClient>:
#include "EventBusManager.h"
#include "Logger.h"

bool EventBusManager::send(EEventType event, UMessageData message, EEventClient eventReceiver)
{
 8000b48:	b082      	sub	sp, #8
 8000b4a:	b570      	push	{r4, r5, r6, lr}
 8000b4c:	4605      	mov	r5, r0
 8000b4e:	b086      	sub	sp, #24
	if(queue_backend)
 8000b50:	696c      	ldr	r4, [r5, #20]
{
 8000b52:	a80a      	add	r0, sp, #40	@ 0x28
 8000b54:	e880 000c 	stmia.w	r0, {r2, r3}
	if(queue_backend)
 8000b58:	b31c      	cbz	r4, 8000ba2 <_ZN15EventBusManager4sendE10EEventType12UMessageData12EEventClient+0x5a>
	{
		SMessage msg = {event, message, sender_self, eventReceiver};
 8000b5a:	f88d 1000 	strb.w	r1, [sp]
 8000b5e:	ae01      	add	r6, sp, #4
 8000b60:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8000b62:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000b66:	7e2b      	ldrb	r3, [r5, #24]
		BaseType_t ret = xQueueSend(queue_backend, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 8000b68:	220a      	movs	r2, #10
 8000b6a:	4669      	mov	r1, sp
 8000b6c:	4620      	mov	r0, r4
		SMessage msg = {event, message, sender_self, eventReceiver};
 8000b6e:	f88d 3014 	strb.w	r3, [sp, #20]
 8000b72:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 8000b76:	f88d 3015 	strb.w	r3, [sp, #21]
		BaseType_t ret = xQueueSend(queue_backend, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f010 ff99 	bl	8011ab2 <xQueueGenericSend>
 8000b80:	4604      	mov	r4, r0
		LOG_DEBUG("Bus Manager msg sent, result[%d}, event[%d]", ret, msg.event_type);
 8000b82:	f7ff ff9f 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 8000b86:	f89d 3000 	ldrb.w	r3, [sp]
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	4906      	ldr	r1, [pc, #24]	@ (8000ba8 <_ZN15EventBusManager4sendE10EEventType12UMessageData12EEventClient+0x60>)
 8000b8e:	f7ff ffb3 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
		if( ret != pdPASS)
 8000b92:	1e63      	subs	r3, r4, #1
 8000b94:	4258      	negs	r0, r3
 8000b96:	4158      	adcs	r0, r3
			return false;
		}
		return true;
	}
	return false;
}
 8000b98:	b006      	add	sp, #24
 8000b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	4770      	bx	lr
	return false;
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	e7f8      	b.n	8000b98 <_ZN15EventBusManager4sendE10EEventType12UMessageData12EEventClient+0x50>
 8000ba6:	bf00      	nop
 8000ba8:	0802cc8b 	.word	0x0802cc8b

08000bac <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>:

void EventBusManager::receive(OnEventFunction on_event_function)
{
	if(queue_self)
 8000bac:	6903      	ldr	r3, [r0, #16]
{
 8000bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	b08c      	sub	sp, #48	@ 0x30
 8000bb6:	460c      	mov	r4, r1
	if(queue_self)
 8000bb8:	b14b      	cbz	r3, 8000bce <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x22>
		SMessage msg;
		BaseType_t ret = pdTRUE;

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
		{
			LOG_DEBUG("Bus Manager msg received, result[%d}, event[%d]", ret, msg.event_type);
 8000bba:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8000c18 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x6c>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	a906      	add	r1, sp, #24
 8000bc2:	6930      	ldr	r0, [r6, #16]
 8000bc4:	f011 f926 	bl	8011e14 <xQueueReceive>
 8000bc8:	2801      	cmp	r0, #1
 8000bca:	4605      	mov	r5, r0
 8000bcc:	d002      	beq.n	8000bd4 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x28>
			on_event_function(msg.event_type, msg.message_data, msg.event_sender);
		}
	}
}
 8000bce:	b00c      	add	sp, #48	@ 0x30
 8000bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_DEBUG("Bus Manager msg received, result[%d}, event[%d]", ret, msg.event_type);
 8000bd4:	f7ff ff76 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 8000bd8:	462a      	mov	r2, r5
 8000bda:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000bde:	4641      	mov	r1, r8
 8000be0:	f7ff ff8a 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
			on_event_function(msg.event_type, msg.message_data, msg.event_sender);
 8000be4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000be8:	ad02      	add	r5, sp, #8
 8000bea:	f89d 702c 	ldrb.w	r7, [sp, #44]	@ 0x2c
 8000bee:	f88d 3006 	strb.w	r3, [sp, #6]
 8000bf2:	ab07      	add	r3, sp, #28
 8000bf4:	f88d 7007 	strb.w	r7, [sp, #7]
    bool _M_empty() const { return !_M_manager; }
 8000bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bfa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
 8000bfe:	68a3      	ldr	r3, [r4, #8]
 8000c00:	b90b      	cbnz	r3, 8000c06 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x5a>
	  __throw_bad_function_call();
 8000c02:	f028 ff9e 	bl	8029b42 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8000c06:	68e7      	ldr	r7, [r4, #12]
 8000c08:	f10d 0307 	add.w	r3, sp, #7
 8000c0c:	462a      	mov	r2, r5
 8000c0e:	f10d 0106 	add.w	r1, sp, #6
 8000c12:	4620      	mov	r0, r4
 8000c14:	47b8      	blx	r7
 8000c16:	e7d2      	b.n	8000bbe <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x12>
 8000c18:	0802ccb7 	.word	0x0802ccb7

08000c1c <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000c1c:	4901      	ldr	r1, [pc, #4]	@ (8000c24 <vApplicationIdleHook+0x8>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f011 be2a 	b.w	8012878 <vTaskSetApplicationTaskTag>
 8000c24:	08002b41 	.word	0x08002b41

08000c28 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2c:	224c      	movs	r2, #76	@ 0x4c
 8000c2e:	2100      	movs	r1, #0
 8000c30:	a809      	add	r0, sp, #36	@ 0x24
 8000c32:	f02a fc47 	bl	802b4c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c36:	2220      	movs	r2, #32
 8000c38:	2100      	movs	r1, #0
 8000c3a:	a801      	add	r0, sp, #4
 8000c3c:	f02a fc42 	bl	802b4c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c40:	2004      	movs	r0, #4
 8000c42:	f00d fa6d 	bl	800e120 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c46:	2300      	movs	r3, #0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <_Z18SystemClock_Configv+0xbc>)
 8000c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c4e:	f022 0201 	bic.w	r2, r2, #1
 8000c52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <_Z18SystemClock_Configv+0xc0>)
 8000c5e:	699a      	ldr	r2, [r3, #24]
 8000c60:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000c64:	619a      	str	r2, [r3, #24]
 8000c66:	699a      	ldr	r2, [r3, #24]
 8000c68:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000c6c:	9200      	str	r2, [sp, #0]
 8000c6e:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c70:	699a      	ldr	r2, [r3, #24]
 8000c72:	0491      	lsls	r1, r2, #18
 8000c74:	d5fc      	bpl.n	8000c70 <_Z18SystemClock_Configv+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7a:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c7e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c82:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c86:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c92:	23a0      	movs	r3, #160	@ 0xa0
 8000c94:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c98:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c9e:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ca2:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ca6:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f00d fd38 	bl	800e71c <HAL_RCC_OscConfig>
 8000cac:	b108      	cbz	r0, 8000cb2 <_Z18SystemClock_Configv+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <_Z18SystemClock_Configv+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb4:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cbe:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cc4:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cc8:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ccc:	f00e f8c2 	bl	800ee54 <HAL_RCC_ClockConfig>
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	b108      	cbz	r0, 8000cd8 <_Z18SystemClock_Configv+0xb0>
 8000cd4:	b672      	cpsid	i
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <_Z18SystemClock_Configv+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000cd8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cdc:	f00d ffca 	bl	800ec74 <HAL_RCC_MCOConfig>
}
 8000ce0:	b01d      	add	sp, #116	@ 0x74
 8000ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce4:	58000400 	.word	0x58000400
 8000ce8:	58024800 	.word	0x58024800

08000cec <main>:
{
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cf6:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cf8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000cfa:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cfc:	f02a fbe2 	bl	802b4c4 <memset>
  HAL_MPU_Disable();
 8000d00:	f00a fbde 	bl	800b4c0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000d04:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000d08:	4bbe      	ldr	r3, [pc, #760]	@ (8001004 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d0a:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0c:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d10:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000d12:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d16:	f00a fbf1 	bl	800b4fc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000d1a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d1c:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d1e:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000d22:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d26:	f00a fbe9 	bl	800b4fc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d2a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d2c:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d2e:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d32:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000d36:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000d3a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000d3c:	2318      	movs	r3, #24
 8000d3e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d42:	f00a fbdb 	bl	800b4fc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000d46:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d48:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000d4a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000d4e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000d52:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000d54:	2312      	movs	r3, #18
 8000d56:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d60:	f00a fbcc 	bl	800b4fc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000d64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d68:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000d6a:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000d6e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000d70:	2311      	movs	r3, #17
 8000d72:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d76:	f00a fbc1 	bl	800b4fc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000d7a:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d7c:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d7e:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000d82:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000d86:	4ba0      	ldr	r3, [pc, #640]	@ (8001008 <main+0x31c>)
 8000d88:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000d8a:	230e      	movs	r3, #14
 8000d8c:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d90:	f00a fbb4 	bl	800b4fc <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d94:	4628      	mov	r0, r5
 8000d96:	f00a fba1 	bl	800b4dc <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d9a:	4b9c      	ldr	r3, [pc, #624]	@ (800100c <main+0x320>)
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000da2:	d111      	bne.n	8000dc8 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000da4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000da8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dac:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000dbe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dc4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000dc8:	4a90      	ldr	r2, [pc, #576]	@ (800100c <main+0x320>)
 8000dca:	6953      	ldr	r3, [r2, #20]
 8000dcc:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000dd0:	d123      	bne.n	8000e1a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000dd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dda:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dde:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000de2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000de6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000dea:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dec:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000df0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000df2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000df6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000df8:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000dfc:	d2f9      	bcs.n	8000df2 <main+0x106>
    } while(sets-- != 0U);
 8000dfe:	3b20      	subs	r3, #32
 8000e00:	f113 0f20 	cmn.w	r3, #32
 8000e04:	d1f2      	bne.n	8000dec <main+0x100>
 8000e06:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e0a:	6953      	ldr	r3, [r2, #20]
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e16:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000e1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e1e:	4d7c      	ldr	r5, [pc, #496]	@ (8001010 <main+0x324>)
 8000e20:	682c      	ldr	r4, [r5, #0]
 8000e22:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000e26:	f000 8335 	beq.w	8001494 <main+0x7a8>
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	d2f8      	bcs.n	8000e20 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2e:	b672      	cpsid	i
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <main+0x144>
 8000e32:	b672      	cpsid	i
 8000e34:	e7fe      	b.n	8000e34 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000e36:	4877      	ldr	r0, [pc, #476]	@ (8001014 <main+0x328>)
 8000e38:	4a77      	ldr	r2, [pc, #476]	@ (8001018 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e3a:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000e3c:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000e3e:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000e42:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e46:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e4a:	f00d fa87 	bl	800e35c <HAL_QSPI_Init>
 8000e4e:	b108      	cbz	r0, 8000e54 <main+0x168>
 8000e50:	b672      	cpsid	i
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000e54:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000e58:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000e5a:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000e5e:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000e62:	f009 fe0d 	bl	800aa80 <BSP_QSPI_Init>
 8000e66:	b108      	cbz	r0, 8000e6c <main+0x180>
 8000e68:	b672      	cpsid	i
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000e6c:	f009 fdb4 	bl	800a9d8 <BSP_QSPI_EnableMemoryMappedMode>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b108      	cbz	r0, 8000e78 <main+0x18c>
 8000e74:	b672      	cpsid	i
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000e78:	4868      	ldr	r0, [pc, #416]	@ (800101c <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000e7a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e7e:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8001028 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 8000e82:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000e86:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e8a:	f00a fbc4 	bl	800b616 <HAL_DMA2D_Init>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	b108      	cbz	r0, 8000e96 <main+0x1aa>
 8000e92:	b672      	cpsid	i
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000e96:	4602      	mov	r2, r0
 8000e98:	4639      	mov	r1, r7
 8000e9a:	4861      	ldr	r0, [pc, #388]	@ (8001020 <main+0x334>)
 8000e9c:	f00b fa9e 	bl	800c3dc <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000ea0:	2014      	movs	r0, #20
 8000ea2:	f00a fa91 	bl	800b3c8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000ea6:	4639      	mov	r1, r7
 8000ea8:	462a      	mov	r2, r5
 8000eaa:	485d      	ldr	r0, [pc, #372]	@ (8001020 <main+0x334>)
 8000eac:	f00b fa96 	bl	800c3dc <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000eb0:	200a      	movs	r0, #10
 8000eb2:	f00a fa89 	bl	800b3c8 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000eb6:	2224      	movs	r2, #36	@ 0x24
 8000eb8:	4621      	mov	r1, r4
 8000eba:	a817      	add	r0, sp, #92	@ 0x5c
 8000ebc:	f02a fb02 	bl	802b4c4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000ec0:	2218      	movs	r2, #24
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	a811      	add	r0, sp, #68	@ 0x44
 8000ec6:	f02a fafd 	bl	802b4c4 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000eca:	2234      	movs	r2, #52	@ 0x34
 8000ecc:	4621      	mov	r1, r4
 8000ece:	a82d      	add	r0, sp, #180	@ 0xb4
 8000ed0:	f02a faf8 	bl	802b4c4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	222c      	movs	r2, #44	@ 0x2c
 8000ed8:	a820      	add	r0, sp, #128	@ 0x80
 8000eda:	f02a faf3 	bl	802b4c4 <memset>
  hdsi.Instance = DSI;
 8000ede:	4f51      	ldr	r7, [pc, #324]	@ (8001024 <main+0x338>)
 8000ee0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000ee4:	a90e      	add	r1, sp, #56	@ 0x38
 8000ee6:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000ee8:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000eea:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 8000eee:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000ef0:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000ef4:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000ef8:	f00a fcda 	bl	800b8b0 <HAL_DSI_Init>
 8000efc:	b108      	cbz	r0, 8000f02 <main+0x216>
 8000efe:	b672      	cpsid	i
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000f02:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000f06:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000f0a:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000f0e:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 8000f12:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000f14:	a917      	add	r1, sp, #92	@ 0x5c
 8000f16:	4638      	mov	r0, r7
 8000f18:	f00a ff36 	bl	800bd88 <HAL_DSI_ConfigHostTimeouts>
 8000f1c:	b108      	cbz	r0, 8000f22 <main+0x236>
 8000f1e:	b672      	cpsid	i
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000f22:	2321      	movs	r3, #33	@ 0x21
 8000f24:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000f26:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000f28:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000f2a:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000f2e:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000f30:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000f34:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000f36:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000f3a:	f00a fee8 	bl	800bd0e <HAL_DSI_ConfigPhyTimer>
 8000f3e:	b108      	cbz	r0, 8000f44 <main+0x258>
 8000f40:	b672      	cpsid	i
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000f44:	2104      	movs	r1, #4
 8000f46:	4837      	ldr	r0, [pc, #220]	@ (8001024 <main+0x338>)
 8000f48:	f00a fed0 	bl	800bcec <HAL_DSI_ConfigFlowControl>
 8000f4c:	b108      	cbz	r0, 8000f52 <main+0x266>
 8000f4e:	b672      	cpsid	i
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000f52:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000f56:	4833      	ldr	r0, [pc, #204]	@ (8001024 <main+0x338>)
 8000f58:	f00b f89f 	bl	800c09a <HAL_DSI_SetLowPowerRXFilter>
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	b108      	cbz	r0, 8000f64 <main+0x278>
 8000f60:	b672      	cpsid	i
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000f64:	482f      	ldr	r0, [pc, #188]	@ (8001024 <main+0x338>)
 8000f66:	f00a fc40 	bl	800b7ea <HAL_DSI_ConfigErrorMonitor>
 8000f6a:	b108      	cbz	r0, 8000f70 <main+0x284>
 8000f6c:	b672      	cpsid	i
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f74:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000f78:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000f7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000f80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000f84:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000f88:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000f8c:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000f90:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000f94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000f98:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000f9c:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa4:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fac:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000fb0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000fb4:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000fb6:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000fba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000fbe:	4819      	ldr	r0, [pc, #100]	@ (8001024 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000fc0:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000fc4:	f00a fe5e 	bl	800bc84 <HAL_DSI_ConfigCommand>
 8000fc8:	b108      	cbz	r0, 8000fce <main+0x2e2>
 8000fca:	b672      	cpsid	i
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000fd4:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000fd6:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000fd8:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000fda:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000fdc:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000fe0:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000fe2:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000fe6:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000fe8:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000fec:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000ff0:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ff4:	480b      	ldr	r0, [pc, #44]	@ (8001024 <main+0x338>)
 8000ff6:	f00a fdd3 	bl	800bba0 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	b1b0      	cbz	r0, 800102c <main+0x340>
 8000ffe:	b672      	cpsid	i
  while (1)
 8001000:	e7fe      	b.n	8001000 <main+0x314>
 8001002:	bf00      	nop
 8001004:	0300001b 	.word	0x0300001b
 8001008:	10040000 	.word	0x10040000
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	58024400 	.word	0x58024400
 8001014:	24000600 	.word	0x24000600
 8001018:	52005000 	.word	0x52005000
 800101c:	24000840 	.word	0x24000840
 8001020:	58021800 	.word	0x58021800
 8001024:	24000824 	.word	0x24000824
 8001028:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800102c:	487a      	ldr	r0, [pc, #488]	@ (8001218 <main+0x52c>)
 800102e:	f00a fda6 	bl	800bb7e <HAL_DSI_SetGenericVCID>
 8001032:	4604      	mov	r4, r0
 8001034:	b108      	cbz	r0, 800103a <main+0x34e>
 8001036:	b672      	cpsid	i
  while (1)
 8001038:	e7fe      	b.n	8001038 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800103a:	2234      	movs	r2, #52	@ 0x34
 800103c:	4601      	mov	r1, r0
 800103e:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8001040:	4d76      	ldr	r5, [pc, #472]	@ (800121c <main+0x530>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001042:	f02a fa3f 	bl	802b4c4 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001046:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 8001284 <main+0x598>
 800104a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 800104e:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8001052:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001056:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8001058:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 800105a:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 800105e:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001062:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001066:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 800106a:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 800106e:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8001072:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8001076:	f240 1893 	movw	r8, #403	@ 0x193
 800107a:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 800107e:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8001082:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001086:	f00c fd1b 	bl	800dac0 <HAL_LTDC_Init>
 800108a:	4602      	mov	r2, r0
 800108c:	b108      	cbz	r0, 8001092 <main+0x3a6>
 800108e:	b672      	cpsid	i
  while (1)
 8001090:	e7fe      	b.n	8001090 <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8001092:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8001094:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8001096:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 800109a:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 800109e:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 80010a2:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 80010a4:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 80010a8:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010ac:	2107      	movs	r1, #7
 80010ae:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80010b2:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 80010b6:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010ba:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 80010bc:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010c0:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80010c2:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010c6:	f00c fdc7 	bl	800dc58 <HAL_LTDC_ConfigLayer>
 80010ca:	4604      	mov	r4, r0
 80010cc:	b108      	cbz	r0, 80010d2 <main+0x3e6>
 80010ce:	b672      	cpsid	i
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 80010d2:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 80010d4:	4850      	ldr	r0, [pc, #320]	@ (8001218 <main+0x52c>)
  __HAL_LTDC_DISABLE(&hltdc);
 80010d6:	6993      	ldr	r3, [r2, #24]
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 80010de:	f00a feb9 	bl	800be54 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 80010e2:	494f      	ldr	r1, [pc, #316]	@ (8001220 <main+0x534>)
  IOCtx.GetTick     = BSP_GetTick;
 80010e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001224 <main+0x538>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 80010e6:	4850      	ldr	r0, [pc, #320]	@ (8001228 <main+0x53c>)
  IOCtx.GetTick     = BSP_GetTick;
 80010e8:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <main+0x540>)
  IOCtx.Address     = 0;
 80010ec:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 80010ee:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 80010f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001230 <main+0x544>)
 80010f2:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 80010f4:	f009 fa68 	bl	800a5c8 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 80010f8:	4632      	mov	r2, r6
 80010fa:	4621      	mov	r1, r4
 80010fc:	484a      	ldr	r0, [pc, #296]	@ (8001228 <main+0x53c>)
 80010fe:	f008 fed3 	bl	8009ea8 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8001102:	2328      	movs	r3, #40	@ 0x28
 8001104:	2215      	movs	r2, #21
 8001106:	4621      	mov	r1, r4
 8001108:	4843      	ldr	r0, [pc, #268]	@ (8001218 <main+0x52c>)
 800110a:	9400      	str	r4, [sp, #0]
 800110c:	f00a fed5 	bl	800beba <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8001110:	a92d      	add	r1, sp, #180	@ 0xb4
 8001112:	4841      	ldr	r0, [pc, #260]	@ (8001218 <main+0x52c>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8001114:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8001116:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800111a:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800111e:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8001122:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8001126:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800112a:	f00a fdab 	bl	800bc84 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 800112e:	4622      	mov	r2, r4
 8001130:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001134:	4628      	mov	r0, r5
 8001136:	f00c fdbd 	bl	800dcb4 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 800113a:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 800113c:	483d      	ldr	r0, [pc, #244]	@ (8001234 <main+0x548>)
  __HAL_LTDC_ENABLE(&hltdc);
 800113e:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001140:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8001148:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <main+0x54c>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800114a:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 800114c:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800114e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001152:	f00a f9ff 	bl	800b554 <HAL_CRC_Init>
 8001156:	b108      	cbz	r0, 800115c <main+0x470>
 8001158:	b672      	cpsid	i
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0x46e>
  hjpeg.Instance = JPEG;
 800115c:	4837      	ldr	r0, [pc, #220]	@ (800123c <main+0x550>)
 800115e:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <main+0x554>)
 8001160:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001162:	f00b fe95 	bl	800ce90 <HAL_JPEG_Init>
 8001166:	b108      	cbz	r0, 800116c <main+0x480>
 8001168:	b672      	cpsid	i
  while (1)
 800116a:	e7fe      	b.n	800116a <main+0x47e>
  huart1.Instance = USART1;
 800116c:	4c35      	ldr	r4, [pc, #212]	@ (8001244 <main+0x558>)
  huart1.Init.BaudRate = 115200;
 800116e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001172:	4935      	ldr	r1, [pc, #212]	@ (8001248 <main+0x55c>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001174:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001176:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8001178:	e9c4 1300 	strd	r1, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117c:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117e:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001184:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001188:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118c:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001190:	f00f fc93 	bl	8010aba <HAL_UART_Init>
 8001194:	4601      	mov	r1, r0
 8001196:	b108      	cbz	r0, 800119c <main+0x4b0>
 8001198:	b672      	cpsid	i
  while (1)
 800119a:	e7fe      	b.n	800119a <main+0x4ae>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119c:	4620      	mov	r0, r4
 800119e:	f00f fcfa 	bl	8010b96 <HAL_UARTEx_SetTxFifoThreshold>
 80011a2:	4601      	mov	r1, r0
 80011a4:	b108      	cbz	r0, 80011aa <main+0x4be>
 80011a6:	b672      	cpsid	i
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011aa:	4620      	mov	r0, r4
 80011ac:	f00f fd13 	bl	8010bd6 <HAL_UARTEx_SetRxFifoThreshold>
 80011b0:	b108      	cbz	r0, 80011b6 <main+0x4ca>
 80011b2:	b672      	cpsid	i
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <main+0x4c8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011b6:	4620      	mov	r0, r4
 80011b8:	f00f fcd2 	bl	8010b60 <HAL_UARTEx_DisableFifoMode>
 80011bc:	4604      	mov	r4, r0
 80011be:	b108      	cbz	r0, 80011c4 <main+0x4d8>
 80011c0:	b672      	cpsid	i
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <main+0x4d6>
  MX_TouchGFX_Init();
 80011c4:	f001 f868 	bl	8002298 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80011c8:	f001 f865 	bl	8002296 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 80011cc:	f00f fdca 	bl	8010d64 <osKernelInitialize>
  printMutexHandle = osMutexNew(&printMutex_attributes);
 80011d0:	481e      	ldr	r0, [pc, #120]	@ (800124c <main+0x560>)
 80011d2:	f00f fe46 	bl	8010e62 <osMutexNew>
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <main+0x564>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80011d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <main+0x568>)
 80011da:	4621      	mov	r1, r4
  printMutexHandle = osMutexNew(&printMutex_attributes);
 80011dc:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80011de:	481e      	ldr	r0, [pc, #120]	@ (8001258 <main+0x56c>)
 80011e0:	f00f fdec 	bl	8010dbc <osThreadNew>
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <main+0x570>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80011e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001260 <main+0x574>)
 80011e8:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80011ea:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80011ec:	481d      	ldr	r0, [pc, #116]	@ (8001264 <main+0x578>)
 80011ee:	f00f fde5 	bl	8010dbc <osThreadNew>
 80011f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <main+0x57c>)
  Task_EventMgrHandle = osThreadNew(StartTask_EventMgr, NULL, &Task_EventMgr_attributes);
 80011f4:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <main+0x580>)
 80011f6:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80011f8:	6018      	str	r0, [r3, #0]
  Task_EventMgrHandle = osThreadNew(StartTask_EventMgr, NULL, &Task_EventMgr_attributes);
 80011fa:	481d      	ldr	r0, [pc, #116]	@ (8001270 <main+0x584>)
 80011fc:	f00f fdde 	bl	8010dbc <osThreadNew>
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <main+0x588>)
  Task_CalculatorHandle = osThreadNew(StartTask_Calculator, NULL, &Task_Calculator_attributes);
 8001202:	4a1d      	ldr	r2, [pc, #116]	@ (8001278 <main+0x58c>)
 8001204:	4621      	mov	r1, r4
  Task_EventMgrHandle = osThreadNew(StartTask_EventMgr, NULL, &Task_EventMgr_attributes);
 8001206:	6018      	str	r0, [r3, #0]
  Task_CalculatorHandle = osThreadNew(StartTask_Calculator, NULL, &Task_Calculator_attributes);
 8001208:	481c      	ldr	r0, [pc, #112]	@ (800127c <main+0x590>)
 800120a:	f00f fdd7 	bl	8010dbc <osThreadNew>
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <main+0x594>)
 8001210:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001212:	f00f fdb9 	bl	8010d88 <osKernelStart>
  while (1)
 8001216:	e7fe      	b.n	8001216 <main+0x52a>
 8001218:	24000824 	.word	0x24000824
 800121c:	2400064c 	.word	0x2400064c
 8001220:	240004f4 	.word	0x240004f4
 8001224:	0800a9a9 	.word	0x0800a9a9
 8001228:	24000504 	.word	0x24000504
 800122c:	08002841 	.word	0x08002841
 8001230:	08002879 	.word	0x08002879
 8001234:	240008a8 	.word	0x240008a8
 8001238:	58024c00 	.word	0x58024c00
 800123c:	240007cc 	.word	0x240007cc
 8001240:	52003000 	.word	0x52003000
 8001244:	2400056c 	.word	0x2400056c
 8001248:	40011000 	.word	0x40011000
 800124c:	0802cd28 	.word	0x0802cd28
 8001250:	24000524 	.word	0x24000524
 8001254:	0802cda4 	.word	0x0802cda4
 8001258:	080022a7 	.word	0x080022a7
 800125c:	24000534 	.word	0x24000534
 8001260:	0802cd80 	.word	0x0802cd80
 8001264:	080043f9 	.word	0x080043f9
 8001268:	24000530 	.word	0x24000530
 800126c:	0802cd5c 	.word	0x0802cd5c
 8001270:	080021d1 	.word	0x080021d1
 8001274:	2400052c 	.word	0x2400052c
 8001278:	0802cd38 	.word	0x0802cd38
 800127c:	08000aad 	.word	0x08000aad
 8001280:	24000528 	.word	0x24000528
 8001284:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	2214      	movs	r2, #20
 800128a:	2100      	movs	r1, #0
 800128c:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f02a f918 	bl	802b4c4 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001294:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800129e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80012a2:	488d      	ldr	r0, [pc, #564]	@ (80014d8 <main+0x7ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	f04f 0900 	mov.w	r9, #0
 80012a8:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012aa:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80012ba:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c0:	9304      	str	r3, [sp, #16]
 80012c2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80012d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	9305      	str	r3, [sp, #20]
 80012da:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80012e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80012e8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80012ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f0:	9306      	str	r3, [sp, #24]
 80012f2:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001300:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	9307      	str	r3, [sp, #28]
 800130a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001314:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001318:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800131c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001320:	9308      	str	r3, [sp, #32]
 8001322:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001324:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001330:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	9309      	str	r3, [sp, #36]	@ 0x24
 800133a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800133c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001340:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001344:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001348:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800134c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001350:	930a      	str	r3, [sp, #40]	@ 0x28
 8001352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001360:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800136a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001378:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	930c      	str	r3, [sp, #48]	@ 0x30
 8001382:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001384:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001388:	f043 0320 	orr.w	r3, r3, #32
 800138c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001390:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	930d      	str	r3, [sp, #52]	@ 0x34
 800139a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800139c:	f00b f81e 	bl	800c3dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2108      	movs	r1, #8
 80013a4:	484d      	ldr	r0, [pc, #308]	@ (80014dc <main+0x7f0>)
 80013a6:	f00b f819 	bl	800c3dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b0:	484b      	ldr	r0, [pc, #300]	@ (80014e0 <main+0x7f4>)
 80013b2:	f00b f813 	bl	800c3dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013ba:	a92d      	add	r1, sp, #180	@ 0xb4
 80013bc:	4846      	ldr	r0, [pc, #280]	@ (80014d8 <main+0x7ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013c6:	f00a fe7f 	bl	800c0c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	a92d      	add	r1, sp, #180	@ 0xb4
 80013cc:	4845      	ldr	r0, [pc, #276]	@ (80014e4 <main+0x7f8>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013ce:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f00a fe75 	bl	800c0c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80013de:	a92d      	add	r1, sp, #180	@ 0xb4
 80013e0:	483e      	ldr	r0, [pc, #248]	@ (80014dc <main+0x7f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f00a fe6d 	bl	800c0c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80013ee:	a92d      	add	r1, sp, #180	@ 0xb4
 80013f0:	483b      	ldr	r0, [pc, #236]	@ (80014e0 <main+0x7f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f00a fe65 	bl	800c0c8 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013fe:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001402:	464a      	mov	r2, r9
 8001404:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001406:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001408:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800140a:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 800140e:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8001412:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001416:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001418:	402b      	ands	r3, r5
 800141a:	9303      	str	r3, [sp, #12]
 800141c:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 800141e:	f009 fffd 	bl	800b41c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001422:	207a      	movs	r0, #122	@ 0x7a
 8001424:	f00a f82c 	bl	800b480 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8001428:	4a2f      	ldr	r2, [pc, #188]	@ (80014e8 <main+0x7fc>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800142a:	4830      	ldr	r0, [pc, #192]	@ (80014ec <main+0x800>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800142c:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001436:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800143a:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <main+0x804>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800143c:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001440:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001444:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8001446:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800144a:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800144e:	2320      	movs	r3, #32
 8001450:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001454:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001458:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001464:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8001466:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 800146a:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 800146e:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001472:	f00e fde9 	bl	8010048 <HAL_SDRAM_Init>
 8001476:	4681      	mov	r9, r0
 8001478:	2800      	cmp	r0, #0
 800147a:	f47f acda 	bne.w	8000e32 <main+0x146>
  BSP_SDRAM_DeInit(0);
 800147e:	f009 fcb9 	bl	800adf4 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001482:	4648      	mov	r0, r9
 8001484:	f009 fd04 	bl	800ae90 <BSP_SDRAM_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2800      	cmp	r0, #0
 800148c:	f43f acd3 	beq.w	8000e36 <main+0x14a>
 8001490:	b672      	cpsid	i
  while (1)
 8001492:	e7fe      	b.n	8001492 <main+0x7a6>
  HAL_Init();
 8001494:	f009 ff58 	bl	800b348 <HAL_Init>
  SystemClock_Config();
 8001498:	f7ff fbc6 	bl	8000c28 <_Z18SystemClock_Configv>
__HAL_RCC_HSEM_CLK_ENABLE();
 800149c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 80014a0:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 80014a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014a6:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80014aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 80014b6:	f00a ff9f 	bl	800c3f8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 80014ba:	4621      	mov	r1, r4
 80014bc:	4620      	mov	r0, r4
 80014be:	f00a ffa9 	bl	800c414 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80014c2:	4c0c      	ldr	r4, [pc, #48]	@ (80014f4 <main+0x808>)
timeout = 0xFFFF;
 80014c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80014c8:	6822      	ldr	r2, [r4, #0]
 80014ca:	0412      	lsls	r2, r2, #16
 80014cc:	f53f aedc 	bmi.w	8001288 <main+0x59c>
 80014d0:	3b01      	subs	r3, #1
 80014d2:	d2f9      	bcs.n	80014c8 <main+0x7dc>
 80014d4:	b672      	cpsid	i
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <main+0x7ea>
 80014d8:	58022400 	.word	0x58022400
 80014dc:	58021800 	.word	0x58021800
 80014e0:	58021400 	.word	0x58021400
 80014e4:	58020000 	.word	0x58020000
 80014e8:	52004000 	.word	0x52004000
 80014ec:	24000538 	.word	0x24000538
 80014f0:	52004140 	.word	0x52004140
 80014f4:	58024400 	.word	0x58024400

080014f8 <__io_putchar>:
{
 80014f8:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80014fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
{
 80014fe:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001500:	2201      	movs	r2, #1
 8001502:	a901      	add	r1, sp, #4
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <__io_putchar+0x1c>)
 8001506:	f00f fa28 	bl	801095a <HAL_UART_Transmit>
}
 800150a:	9801      	ldr	r0, [sp, #4]
 800150c:	b003      	add	sp, #12
 800150e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001512:	bf00      	nop
 8001514:	2400056c 	.word	0x2400056c

08001518 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001518:	6802      	ldr	r2, [r0, #0]
 800151a:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800151c:	429a      	cmp	r2, r3
 800151e:	d101      	bne.n	8001524 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001520:	f009 bf40 	b.w	800b3a4 <HAL_IncTick>
}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40001000 	.word	0x40001000

0800152c <Error_Handler>:
 800152c:	b672      	cpsid	i
  while (1)
 800152e:	e7fe      	b.n	800152e <Error_Handler+0x2>

08001530 <_GLOBAL__sub_I_hcrc>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001530:	b508      	push	{r3, lr}
QueueHandle_t queueToFrontend = xQueueCreate(64, sizeof(SMessage));
 8001532:	2200      	movs	r2, #0
 8001534:	2118      	movs	r1, #24
 8001536:	2040      	movs	r0, #64	@ 0x40
 8001538:	f010 fa54 	bl	80119e4 <xQueueGenericCreate>
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <_GLOBAL__sub_I_hcrc+0x3c>)
QueueHandle_t queueToBackend = xQueueCreate(8, sizeof(SMessage));
 800153e:	2200      	movs	r2, #0
 8001540:	2118      	movs	r1, #24
QueueHandle_t queueToFrontend = xQueueCreate(64, sizeof(SMessage));
 8001542:	6018      	str	r0, [r3, #0]
QueueHandle_t queueToBackend = xQueueCreate(8, sizeof(SMessage));
 8001544:	2008      	movs	r0, #8
 8001546:	f010 fa4d 	bl	80119e4 <xQueueGenericCreate>
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <_GLOBAL__sub_I_hcrc+0x40>)
QueueHandle_t queueToCalculator = xQueueCreate(2, sizeof(SMessage));
 800154c:	2200      	movs	r2, #0
 800154e:	2118      	movs	r1, #24
QueueHandle_t queueToBackend = xQueueCreate(8, sizeof(SMessage));
 8001550:	6018      	str	r0, [r3, #0]
QueueHandle_t queueToCalculator = xQueueCreate(2, sizeof(SMessage));
 8001552:	2002      	movs	r0, #2
 8001554:	f010 fa46 	bl	80119e4 <xQueueGenericCreate>
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <_GLOBAL__sub_I_hcrc+0x44>)
QueueHandle_t queueToProxyDaemon = xQueueCreate(16, sizeof(SMessage));
 800155a:	2200      	movs	r2, #0
 800155c:	2118      	movs	r1, #24
QueueHandle_t queueToCalculator = xQueueCreate(2, sizeof(SMessage));
 800155e:	6018      	str	r0, [r3, #0]
QueueHandle_t queueToProxyDaemon = xQueueCreate(16, sizeof(SMessage));
 8001560:	2010      	movs	r0, #16
 8001562:	f010 fa3f 	bl	80119e4 <xQueueGenericCreate>
 8001566:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <_GLOBAL__sub_I_hcrc+0x48>)
 8001568:	6018      	str	r0, [r3, #0]
}
 800156a:	bd08      	pop	{r3, pc}
 800156c:	240004f0 	.word	0x240004f0
 8001570:	240004ec 	.word	0x240004ec
 8001574:	240004e8 	.word	0x240004e8
 8001578:	240004e4 	.word	0x240004e4

0800157c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_MspInit+0x2c>)
{
 800157e:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001580:	210f      	movs	r1, #15
 8001582:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800158a:	f042 0202 	orr.w	r2, r2, #2
 800158e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001592:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015a2:	f009 bf3b 	b.w	800b41c <HAL_NVIC_SetPriority>
 80015a6:	bf00      	nop
 80015a8:	58024400 	.word	0x58024400

080015ac <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80015ac:	6802      	ldr	r2, [r0, #0]
{
 80015ae:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <HAL_CRC_MspInit+0x2c>)
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d10d      	bne.n	80015d2 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015b6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80015ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80015be:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80015c2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80015d2:	b002      	add	sp, #8
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	58024c00 	.word	0x58024c00

080015dc <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_DMA2D_MspInit+0x40>)
{
 80015de:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80015e0:	6802      	ldr	r2, [r0, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d117      	bne.n	8001616 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80015e8:	2107      	movs	r1, #7
 80015ea:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80015ec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80015f0:	f042 0210 	orr.w	r2, r2, #16
 80015f4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80015f8:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80015fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001606:	f009 ff09 	bl	800b41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800160a:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800160c:	b003      	add	sp, #12
 800160e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001612:	f009 bf35 	b.w	800b480 <HAL_NVIC_EnableIRQ>
}
 8001616:	b003      	add	sp, #12
 8001618:	f85d fb04 	ldr.w	pc, [sp], #4
 800161c:	52001000 	.word	0x52001000
 8001620:	58024400 	.word	0x58024400

08001624 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001624:	b510      	push	{r4, lr}
 8001626:	b0ba      	sub	sp, #232	@ 0xe8
 8001628:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	2214      	movs	r2, #20
 800162c:	2100      	movs	r1, #0
 800162e:	a803      	add	r0, sp, #12
 8001630:	f029 ff48 	bl	802b4c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001634:	22c8      	movs	r2, #200	@ 0xc8
 8001636:	2100      	movs	r1, #0
 8001638:	a808      	add	r0, sp, #32
 800163a:	f029 ff43 	bl	802b4c4 <memset>
  if(hdsi->Instance==DSI)
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001644:	d138      	bne.n	80016b8 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001646:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800164a:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800164e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001652:	f00d fe85 	bl	800f360 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	b108      	cbz	r0, 800165c <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001658:	f7ff ff68 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001660:	a903      	add	r1, sp, #12
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001664:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001668:	f042 0210 	orr.w	r2, r2, #16
 800166c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001670:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001674:	f002 0210 	and.w	r2, r2, #16
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800167c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001684:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800169c:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80016a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016a4:	f00a fd10 	bl	800c0c8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 80016a8:	207b      	movs	r0, #123	@ 0x7b
 80016aa:	4622      	mov	r2, r4
 80016ac:	2107      	movs	r1, #7
 80016ae:	f009 feb5 	bl	800b41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80016b2:	207b      	movs	r0, #123	@ 0x7b
 80016b4:	f009 fee4 	bl	800b480 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 80016b8:	b03a      	add	sp, #232	@ 0xe8
 80016ba:	bd10      	pop	{r4, pc}
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58022400 	.word	0x58022400

080016c4 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80016c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80016c6:	4b3c      	ldr	r3, [pc, #240]	@ (80017b8 <HAL_JPEG_MspInit+0xf4>)
{
 80016c8:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80016ca:	6802      	ldr	r2, [r0, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d170      	bne.n	80017b2 <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80016d0:	4b3a      	ldr	r3, [pc, #232]	@ (80017bc <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80016d2:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80016d4:	4c3a      	ldr	r4, [pc, #232]	@ (80017c0 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80016d6:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80016da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80016de:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80017cc <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80016e2:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80016e4:	f042 0220 	orr.w	r2, r2, #32
 80016e8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80016ec:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80016ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80016fa:	2311      	movs	r3, #17
 80016fc:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001706:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800170a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800170c:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800170e:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001712:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001716:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800171a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800171e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001722:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001726:	f00c fb30 	bl	800dd8a <HAL_MDMA_Init>
 800172a:	b108      	cbz	r0, 8001730 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 800172c:	f7ff fefe 	bl	800152c <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001730:	2200      	movs	r2, #0
 8001732:	4823      	ldr	r0, [pc, #140]	@ (80017c0 <HAL_JPEG_MspInit+0xfc>)
 8001734:	4611      	mov	r1, r2
 8001736:	f00c fbb6 	bl	800dea6 <HAL_MDMA_ConfigPostRequestMask>
 800173a:	b108      	cbz	r0, 8001740 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 800173c:	f7ff fef6 	bl	800152c <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001740:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001742:	2313      	movs	r3, #19
 8001744:	4a1f      	ldr	r2, [pc, #124]	@ (80017c4 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001746:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001748:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 800174a:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800174e:	4c1e      	ldr	r4, [pc, #120]	@ (80017c8 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001750:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	22c0      	movs	r2, #192	@ 0xc0
 8001758:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800175c:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800175e:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001760:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001764:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001768:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 800176c:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 8001770:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001774:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001776:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 800177a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800177e:	f00c fb04 	bl	800dd8a <HAL_MDMA_Init>
 8001782:	b108      	cbz	r0, 8001788 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001784:	f7ff fed2 	bl	800152c <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001788:	2200      	movs	r2, #0
 800178a:	480f      	ldr	r0, [pc, #60]	@ (80017c8 <HAL_JPEG_MspInit+0x104>)
 800178c:	4611      	mov	r1, r2
 800178e:	f00c fb8a 	bl	800dea6 <HAL_MDMA_ConfigPostRequestMask>
 8001792:	b108      	cbz	r0, 8001798 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001794:	f7ff feca 	bl	800152c <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001798:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80017a0:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80017a2:	f009 fe3b 	bl	800b41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80017a6:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 80017a8:	b003      	add	sp, #12
 80017aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80017ae:	f009 be67 	b.w	800b480 <HAL_NVIC_EnableIRQ>
}
 80017b2:	b003      	add	sp, #12
 80017b4:	bd30      	pop	{r4, r5, pc}
 80017b6:	bf00      	nop
 80017b8:	52003000 	.word	0x52003000
 80017bc:	58024400 	.word	0x58024400
 80017c0:	24000760 	.word	0x24000760
 80017c4:	520001c0 	.word	0x520001c0
 80017c8:	240006f4 	.word	0x240006f4
 80017cc:	52000200 	.word	0x52000200

080017d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	b0b4      	sub	sp, #208	@ 0xd0
 80017d4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d6:	22c8      	movs	r2, #200	@ 0xc8
 80017d8:	2100      	movs	r1, #0
 80017da:	a802      	add	r0, sp, #8
 80017dc:	f029 fe72 	bl	802b4c4 <memset>
  if(hltdc->Instance==LTDC)
 80017e0:	6822      	ldr	r2, [r4, #0]
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <HAL_LTDC_MspInit+0x74>)
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d12b      	bne.n	8001840 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80017ec:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80017ee:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f0:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80017f6:	23a1      	movs	r3, #161	@ 0xa1
 80017f8:	2205      	movs	r2, #5
 80017fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017fe:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001800:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001804:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001808:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180c:	f00d fda8 	bl	800f360 <HAL_RCCEx_PeriphCLKConfig>
 8001810:	b108      	cbz	r0, 8001816 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001812:	f7ff fe8b 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001818:	2058      	movs	r0, #88	@ 0x58
 800181a:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 800181c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001820:	f042 0208 	orr.w	r2, r2, #8
 8001824:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001828:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 800182a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001836:	f009 fdf1 	bl	800b41c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800183a:	2058      	movs	r0, #88	@ 0x58
 800183c:	f009 fe20 	bl	800b480 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001840:	b034      	add	sp, #208	@ 0xd0
 8001842:	bd10      	pop	{r4, pc}
 8001844:	50001000 	.word	0x50001000
 8001848:	58024400 	.word	0x58024400

0800184c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184e:	b0bf      	sub	sp, #252	@ 0xfc
 8001850:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	2214      	movs	r2, #20
 8001854:	2100      	movs	r1, #0
 8001856:	a807      	add	r0, sp, #28
 8001858:	f029 fe34 	bl	802b4c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185c:	22c8      	movs	r2, #200	@ 0xc8
 800185e:	2100      	movs	r1, #0
 8001860:	a80c      	add	r0, sp, #48	@ 0x30
 8001862:	f029 fe2f 	bl	802b4c4 <memset>
  if(hqspi->Instance==QUADSPI)
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <HAL_QSPI_MspInit+0x16c>)
 800186a:	429a      	cmp	r2, r3
 800186c:	f040 80a1 	bne.w	80019b2 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001874:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001876:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001878:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	f00d fd70 	bl	800f360 <HAL_RCCEx_PeriphCLKConfig>
 8001880:	b108      	cbz	r0, 8001886 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 8001882:	f7ff fe53 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001886:	4b4d      	ldr	r3, [pc, #308]	@ (80019bc <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800188c:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800188e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001892:	a907      	add	r1, sp, #28
 8001894:	484a      	ldr	r0, [pc, #296]	@ (80019c0 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001896:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001898:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800189c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80018a0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80018a4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80018a8:	9201      	str	r2, [sp, #4]
 80018aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80018b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018bc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80018c0:	9202      	str	r2, [sp, #8]
 80018c2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018c8:	f042 0220 	orr.w	r2, r2, #32
 80018cc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80018d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018d4:	f002 0220 	and.w	r2, r2, #32
 80018d8:	9203      	str	r2, [sp, #12]
 80018da:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018e4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80018e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018ec:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80018f0:	9204      	str	r2, [sp, #16]
 80018f2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018f8:	f042 0202 	orr.w	r2, r2, #2
 80018fc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001900:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001904:	f002 0202 	and.w	r2, r2, #2
 8001908:	9205      	str	r2, [sp, #20]
 800190a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800190c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001910:	f042 0208 	orr.w	r2, r2, #8
 8001914:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	9306      	str	r3, [sp, #24]
 8001922:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001928:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001930:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001932:	f00a fbc9 	bl	800c0c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001936:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001938:	a907      	add	r1, sp, #28
 800193a:	4821      	ldr	r0, [pc, #132]	@ (80019c0 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800193c:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001946:	f00a fbbf 	bl	800c0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800194a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800194c:	a907      	add	r1, sp, #28
 800194e:	481d      	ldr	r0, [pc, #116]	@ (80019c4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001950:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800195a:	f00a fbb5 	bl	800c0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800195e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001962:	a907      	add	r1, sp, #28
 8001964:	4817      	ldr	r0, [pc, #92]	@ (80019c4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001966:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001970:	f00a fbaa 	bl	800c0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001974:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001976:	a907      	add	r1, sp, #28
 8001978:	4813      	ldr	r0, [pc, #76]	@ (80019c8 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800197a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001984:	f00a fba0 	bl	800c0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001988:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	a907      	add	r1, sp, #28
 800198c:	480f      	ldr	r0, [pc, #60]	@ (80019cc <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800198e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f00a fb96 	bl	800c0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800199c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a0:	a907      	add	r1, sp, #28
 80019a2:	480b      	ldr	r0, [pc, #44]	@ (80019d0 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019a4:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ae:	f00a fb8b 	bl	800c0c8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80019b2:	b03f      	add	sp, #252	@ 0xfc
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	52005000 	.word	0x52005000
 80019bc:	58024400 	.word	0x58024400
 80019c0:	58021800 	.word	0x58021800
 80019c4:	58021400 	.word	0x58021400
 80019c8:	58021c00 	.word	0x58021c00
 80019cc:	58020400 	.word	0x58020400
 80019d0:	58020c00 	.word	0x58020c00

080019d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b510      	push	{r4, lr}
 80019d6:	b0ba      	sub	sp, #232	@ 0xe8
 80019d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	2214      	movs	r2, #20
 80019dc:	2100      	movs	r1, #0
 80019de:	a803      	add	r0, sp, #12
 80019e0:	f029 fd70 	bl	802b4c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e4:	22c8      	movs	r2, #200	@ 0xc8
 80019e6:	2100      	movs	r1, #0
 80019e8:	a808      	add	r0, sp, #32
 80019ea:	f029 fd6b 	bl	802b4c4 <memset>
  if(huart->Instance==USART1)
 80019ee:	6822      	ldr	r2, [r4, #0]
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d130      	bne.n	8001a58 <HAL_UART_MspInit+0x84>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019f6:	2201      	movs	r2, #1
 80019f8:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fa:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	f00d fcae 	bl	800f360 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	b108      	cbz	r0, 8001a0a <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8001a06:	f7ff fd91 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	a903      	add	r1, sp, #12
 8001a0e:	4815      	ldr	r0, [pc, #84]	@ (8001a64 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a10:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001a14:	f042 0210 	orr.w	r2, r2, #16
 8001a18:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001a1c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001a20:	f002 0210 	and.w	r2, r2, #16
 8001a24:	9201      	str	r2, [sp, #4]
 8001a26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a50:	2307      	movs	r3, #7
 8001a52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f00a fb38 	bl	800c0c8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a58:	b03a      	add	sp, #232	@ 0xe8
 8001a5a:	bd10      	pop	{r4, pc}
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	58024400 	.word	0x58024400
 8001a64:	58020000 	.word	0x58020000

08001a68 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2214      	movs	r2, #20
 8001a70:	a801      	add	r0, sp, #4
 8001a72:	f029 fd27 	bl	802b4c4 <memset>
  if (FMC_Initialized) {
 8001a76:	4b3f      	ldr	r3, [pc, #252]	@ (8001b74 <HAL_SDRAM_MspInit+0x10c>)
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	2900      	cmp	r1, #0
 8001a7c:	d177      	bne.n	8001b6e <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 8001a7e:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a80:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001a82:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a84:	22c0      	movs	r2, #192	@ 0xc0
 8001a86:	f029 fd1d 	bl	802b4c4 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001a8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a8e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a90:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001a92:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a96:	f00d fc63 	bl	800f360 <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	b108      	cbz	r0, 8001aa0 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001a9c:	f7ff fd46 	bl	800152c <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001aa0:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2600      	movs	r6, #0
 8001aa6:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001aa8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aac:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001aae:	a901      	add	r1, sp, #4
 8001ab0:	4832      	ldr	r0, [pc, #200]	@ (8001b7c <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ab2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ab6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001aba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001abe:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ad4:	f00a faf8 	bl	800c0c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ad8:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	a901      	add	r1, sp, #4
 8001adc:	4828      	ldr	r0, [pc, #160]	@ (8001b80 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ade:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	f00a faee 	bl	800c0c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001aec:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af0:	a901      	add	r1, sp, #4
 8001af2:	4824      	ldr	r0, [pc, #144]	@ (8001b84 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001af4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afe:	f00a fae3 	bl	800c0c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001b02:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b06:	a901      	add	r1, sp, #4
 8001b08:	481f      	ldr	r0, [pc, #124]	@ (8001b88 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b0a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b14:	f00a fad8 	bl	800c0c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001b18:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b1c:	a901      	add	r1, sp, #4
 8001b1e:	481b      	ldr	r0, [pc, #108]	@ (8001b8c <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b20:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2a:	f00a facd 	bl	800c0c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001b2e:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b32:	a901      	add	r1, sp, #4
 8001b34:	4816      	ldr	r0, [pc, #88]	@ (8001b90 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b36:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b40:	f00a fac2 	bl	800c0c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001b44:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b48:	a901      	add	r1, sp, #4
 8001b4a:	4812      	ldr	r0, [pc, #72]	@ (8001b94 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b4c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b56:	f00a fab7 	bl	800c0c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	a901      	add	r1, sp, #4
 8001b5e:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b60:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f00a faad 	bl	800c0c8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b6e:	b039      	add	sp, #228	@ 0xe4
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	240008d0 	.word	0x240008d0
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	58022000 	.word	0x58022000
 8001b80:	58020400 	.word	0x58020400
 8001b84:	58021000 	.word	0x58021000
 8001b88:	58021c00 	.word	0x58021c00
 8001b8c:	58021800 	.word	0x58021800
 8001b90:	58020c00 	.word	0x58020c00
 8001b94:	58021400 	.word	0x58021400
 8001b98:	58020800 	.word	0x58020800

08001b9c <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <HAL_SDRAM_MspDeInit+0x6c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001ba0:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 8001ba2:	bb82      	cbnz	r2, 8001c06 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001ba6:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001ba8:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001bac:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 8001bae:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001bb0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001bb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bb8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001bbc:	f00a fb6c 	bl	800c298 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001bc0:	2160      	movs	r1, #96	@ 0x60
 8001bc2:	4814      	ldr	r0, [pc, #80]	@ (8001c14 <HAL_SDRAM_MspDeInit+0x78>)
 8001bc4:	f00a fb68 	bl	800c298 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001bc8:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001bcc:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <HAL_SDRAM_MspDeInit+0x7c>)
 8001bce:	f00a fb63 	bl	800c298 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001bd2:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001bd6:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <HAL_SDRAM_MspDeInit+0x80>)
 8001bd8:	f00a fb5e 	bl	800c298 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001bdc:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001be0:	480f      	ldr	r0, [pc, #60]	@ (8001c20 <HAL_SDRAM_MspDeInit+0x84>)
 8001be2:	f00a fb59 	bl	800c298 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001be6:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001bea:	480e      	ldr	r0, [pc, #56]	@ (8001c24 <HAL_SDRAM_MspDeInit+0x88>)
 8001bec:	f00a fb54 	bl	800c298 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001bf0:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <HAL_SDRAM_MspDeInit+0x8c>)
 8001bf6:	f00a fb4f 	bl	800c298 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	480b      	ldr	r0, [pc, #44]	@ (8001c2c <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001c02:	f00a bb49 	b.w	800c298 <HAL_GPIO_DeInit>
}
 8001c06:	bd10      	pop	{r4, pc}
 8001c08:	240008cc 	.word	0x240008cc
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58022000 	.word	0x58022000
 8001c14:	58020400 	.word	0x58020400
 8001c18:	58021000 	.word	0x58021000
 8001c1c:	58021c00 	.word	0x58021c00
 8001c20:	58021800 	.word	0x58021800
 8001c24:	58020c00 	.word	0x58020c00
 8001c28:	58021400 	.word	0x58021400
 8001c2c:	58020800 	.word	0x58020800

08001c30 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c30:	280f      	cmp	r0, #15
{
 8001c32:	b510      	push	{r4, lr}
 8001c34:	4604      	mov	r4, r0
 8001c36:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c38:	d902      	bls.n	8001c40 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001c3a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001c3c:	b00a      	add	sp, #40	@ 0x28
 8001c3e:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c40:	4601      	mov	r1, r0
 8001c42:	2200      	movs	r2, #0
 8001c44:	2036      	movs	r0, #54	@ 0x36
 8001c46:	f009 fbe9 	bl	800b41c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c4a:	2036      	movs	r0, #54	@ 0x36
 8001c4c:	f009 fc18 	bl	800b480 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c52:	4669      	mov	r1, sp
 8001c54:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 8001c56:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_InitTick+0x88>)
 8001c5a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001c5e:	f042 0210 	orr.w	r2, r2, #16
 8001c62:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c72:	f00d fa5b 	bl	800f12c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c76:	9b07      	ldr	r3, [sp, #28]
 8001c78:	b9c3      	cbnz	r3, 8001cac <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c7a:	f00d fa33 	bl	800f0e4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001c7e:	4c0f      	ldr	r4, [pc, #60]	@ (8001cbc <HAL_InitTick+0x8c>)
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_InitTick+0x90>)
 8001c82:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c84:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001c88:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_InitTick+0x94>)
 8001c8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c90:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001c92:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c94:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c96:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001c98:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c9c:	f00e fbca 	bl	8010434 <HAL_TIM_Base_Init>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d1ca      	bne.n	8001c3a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f00e fa77 	bl	8010198 <HAL_TIM_Base_Start_IT>
 8001caa:	e7c7      	b.n	8001c3c <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cac:	f00d fa1a 	bl	800f0e4 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	0040      	lsls	r0, r0, #1
 8001cb2:	e7e4      	b.n	8001c7e <HAL_InitTick+0x4e>
 8001cb4:	24000074 	.word	0x24000074
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	240008d4 	.word	0x240008d4
 8001cc0:	40001000 	.word	0x40001000
 8001cc4:	000f4240 	.word	0x000f4240

08001cc8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <NMI_Handler>

08001cca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler>

08001ccc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler>

08001cce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <BusFault_Handler>

08001cd0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler>

08001cd2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	4770      	bx	lr

08001cd4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cd4:	4801      	ldr	r0, [pc, #4]	@ (8001cdc <TIM6_DAC_IRQHandler+0x8>)
 8001cd6:	f00e baa1 	b.w	801021c <HAL_TIM_IRQHandler>
 8001cda:	bf00      	nop
 8001cdc:	240008d4 	.word	0x240008d4

08001ce0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ce0:	4801      	ldr	r0, [pc, #4]	@ (8001ce8 <LTDC_IRQHandler+0x8>)
 8001ce2:	f00b bf5c 	b.w	800db9e <HAL_LTDC_IRQHandler>
 8001ce6:	bf00      	nop
 8001ce8:	2400064c 	.word	0x2400064c

08001cec <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001cec:	4801      	ldr	r0, [pc, #4]	@ (8001cf4 <DMA2D_IRQHandler+0x8>)
 8001cee:	f009 bcd1 	b.w	800b694 <HAL_DMA2D_IRQHandler>
 8001cf2:	bf00      	nop
 8001cf4:	24000840 	.word	0x24000840

08001cf8 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001cf8:	4801      	ldr	r0, [pc, #4]	@ (8001d00 <JPEG_IRQHandler+0x8>)
 8001cfa:	f00b be01 	b.w	800d900 <HAL_JPEG_IRQHandler>
 8001cfe:	bf00      	nop
 8001d00:	240007cc 	.word	0x240007cc

08001d04 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MDMA_IRQHandler+0x14>)
{
 8001d06:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001d08:	f00c f952 	bl	800dfb0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001d12:	f00c b94d 	b.w	800dfb0 <HAL_MDMA_IRQHandler>
 8001d16:	bf00      	nop
 8001d18:	240006f4 	.word	0x240006f4
 8001d1c:	24000760 	.word	0x24000760

08001d20 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001d20:	4801      	ldr	r0, [pc, #4]	@ (8001d28 <DSI_IRQHandler+0x8>)
 8001d22:	f009 beba 	b.w	800ba9a <HAL_DSI_IRQHandler>
 8001d26:	bf00      	nop
 8001d28:	24000824 	.word	0x24000824

08001d2c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	4770      	bx	lr

08001d30 <_kill>:

int _kill(int pid, int sig)
{
 8001d30:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d32:	f029 fc7f 	bl	802b634 <__errno>
 8001d36:	2316      	movs	r3, #22
 8001d38:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3e:	bd08      	pop	{r3, pc}

08001d40 <_exit>:

void _exit (int status)
{
 8001d40:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d42:	f029 fc77 	bl	802b634 <__errno>
 8001d46:	2316      	movs	r3, #22
 8001d48:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001d4a:	e7fe      	b.n	8001d4a <_exit+0xa>

08001d4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	460d      	mov	r5, r1
 8001d50:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	460e      	mov	r6, r1
 8001d54:	1b73      	subs	r3, r6, r5
 8001d56:	429c      	cmp	r4, r3
 8001d58:	dc01      	bgt.n	8001d5e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001d5e:	f3af 8000 	nop.w
 8001d62:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	e7f5      	b.n	8001d54 <_read+0x8>

08001d68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	460d      	mov	r5, r1
 8001d6c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	460e      	mov	r6, r1
 8001d70:	1b73      	subs	r3, r6, r5
 8001d72:	429c      	cmp	r4, r3
 8001d74:	dc01      	bgt.n	8001d7a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001d76:	4620      	mov	r0, r4
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001d7a:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001d7e:	f7ff fbbb 	bl	80014f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	e7f5      	b.n	8001d70 <_write+0x8>

08001d84 <_close>:

int _close(int file)
{
	return -1;
}
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	4770      	bx	lr

08001d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001d8e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001d90:	604b      	str	r3, [r1, #4]
}
 8001d92:	4770      	bx	lr

08001d94 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d94:	2001      	movs	r0, #1
 8001d96:	4770      	bx	lr

08001d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d98:	2000      	movs	r0, #0
 8001d9a:	4770      	bx	lr

08001d9c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dcc <_sbrk+0x30>)
{
 8001d9e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001da0:	6811      	ldr	r1, [r2, #0]
{
 8001da2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001da4:	b909      	cbnz	r1, 8001daa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001da6:	490a      	ldr	r1, [pc, #40]	@ (8001dd0 <_sbrk+0x34>)
 8001da8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	6810      	ldr	r0, [r2, #0]
 8001dac:	4909      	ldr	r1, [pc, #36]	@ (8001dd4 <_sbrk+0x38>)
 8001dae:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd8 <_sbrk+0x3c>)
 8001db0:	4403      	add	r3, r0
 8001db2:	1b09      	subs	r1, r1, r4
 8001db4:	428b      	cmp	r3, r1
 8001db6:	d906      	bls.n	8001dc6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001db8:	f029 fc3c 	bl	802b634 <__errno>
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001dc4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001dc6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001dc8:	e7fc      	b.n	8001dc4 <_sbrk+0x28>
 8001dca:	bf00      	nop
 8001dcc:	24000920 	.word	0x24000920
 8001dd0:	24029498 	.word	0x24029498
 8001dd4:	24080000 	.word	0x24080000
 8001dd8:	00001000 	.word	0x00001000

08001ddc <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8001ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001de0:	e9d0 9a00 	ldrd	r9, sl, [r0]
 8001de4:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
 8001de6:	4680      	mov	r8, r0
 8001de8:	ebaa 0409 	sub.w	r4, sl, r9
 8001dec:	468b      	mov	fp, r1
 8001dee:	4615      	mov	r5, r2
 8001df0:	10e4      	asrs	r4, r4, #3
 8001df2:	435c      	muls	r4, r3
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8001df4:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 8001df6:	429c      	cmp	r4, r3
 8001df8:	d102      	bne.n	8001e00 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8001dfa:	4826      	ldr	r0, [pc, #152]	@ (8001e94 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 8001dfc:	f027 fe9e 	bl	8029b3c <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001e00:	45ca      	cmp	sl, r9
 8001e02:	bf14      	ite	ne
 8001e04:	4622      	movne	r2, r4
 8001e06:	2201      	moveq	r2, #1
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001e08:	eba1 0609 	sub.w	r6, r1, r9
 8001e0c:	18a4      	adds	r4, r4, r2

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001e0e:	d238      	bcs.n	8001e82 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001e10:	b3cc      	cbz	r4, 8001e86 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001e12:	429c      	cmp	r4, r3
 8001e14:	bf28      	it	cs
 8001e16:	461c      	movcs	r4, r3
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001e18:	2018      	movs	r0, #24
 8001e1a:	4360      	muls	r0, r4
 8001e1c:	f027 fdbd 	bl	802999a <_Znwj>
 8001e20:	4607      	mov	r7, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001e22:	eb07 0c06 	add.w	ip, r7, r6
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001e2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e32:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001e36:	dd04      	ble.n	8001e42 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001e38:	4632      	mov	r2, r6
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	4638      	mov	r0, r7
 8001e3e:	f029 fb27 	bl	802b490 <memmove>
      ptrdiff_t __count = __last - __first;
 8001e42:	ebaa 0a0b 	sub.w	sl, sl, fp
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8001e46:	3618      	adds	r6, #24
      if (__count > 0)
 8001e48:	f1ba 0f00 	cmp.w	sl, #0
 8001e4c:	443e      	add	r6, r7
 8001e4e:	dd04      	ble.n	8001e5a <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001e50:	4652      	mov	r2, sl
 8001e52:	4659      	mov	r1, fp
 8001e54:	4630      	mov	r0, r6
 8001e56:	f029 fc1a 	bl	802b68e <memcpy>
	}
      return __result + __count;
 8001e5a:	4456      	add	r6, sl
	if (__p)
 8001e5c:	f1b9 0f00 	cmp.w	r9, #0
 8001e60:	d006      	beq.n	8001e70 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8001e62:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001e66:	4648      	mov	r0, r9
 8001e68:	eba1 0109 	sub.w	r1, r1, r9
 8001e6c:	f027 fd84 	bl	8029978 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001e70:	2318      	movs	r3, #24
      this->_M_impl._M_finish = __new_finish;
 8001e72:	e9c8 7600 	strd	r7, r6, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001e76:	fb03 7704 	mla	r7, r3, r4, r7
 8001e7a:	f8c8 7008 	str.w	r7, [r8, #8]
    }
 8001e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e82:	461c      	mov	r4, r3
 8001e84:	e7c8      	b.n	8001e18 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001e86:	4627      	mov	r7, r4
 8001e88:	e7cb      	b.n	8001e22 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8001e8a:	bf00      	nop
 8001e8c:	aaaaaaab 	.word	0xaaaaaaab
 8001e90:	05555555 	.word	0x05555555
 8001e94:	0802cdc8 	.word	0x0802cdc8

08001e98 <_ZN16EventManagerTask7receiveEv>:
{
	send(receive());
}

std::vector<SMessage> EventManagerTask::receive()
{
 8001e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	4606      	mov	r6, r0
	SMessage msg;

	BaseType_t ret = pdTRUE;
	do
	{
		ret = xQueueReceive(queueToBackend, &(msg), static_cast<TickType_t>(0));
 8001ea2:	4f1e      	ldr	r7, [pc, #120]	@ (8001f1c <_ZN16EventManagerTask7receiveEv+0x84>)
 8001ea4:	6083      	str	r3, [r0, #8]
 8001ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	a902      	add	r1, sp, #8
 8001eae:	6838      	ldr	r0, [r7, #0]
 8001eb0:	f00f ffb0 	bl	8011e14 <xQueueReceive>
		if(ret == pdTRUE)
 8001eb4:	2801      	cmp	r0, #1
 8001eb6:	6875      	ldr	r5, [r6, #4]
 8001eb8:	d009      	beq.n	8001ece <_ZN16EventManagerTask7receiveEv+0x36>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001eba:	6834      	ldr	r4, [r6, #0]
		{
			receivedMessages.push_back(msg);
		}
	}while(ret == pdTRUE);

	if(receivedMessages.size() > 0)
 8001ebc:	42a5      	cmp	r5, r4
 8001ebe:	d002      	beq.n	8001ec6 <_ZN16EventManagerTask7receiveEv+0x2e>
	{
		for(auto msg : receivedMessages)
		{
			LOG_DEBUG("EVENT_MANAGER: Received message. r[%d], s[%d], e[%d]", msg.event_receiver, msg.event_sender, msg.event_type);
 8001ec0:	4f17      	ldr	r7, [pc, #92]	@ (8001f20 <_ZN16EventManagerTask7receiveEv+0x88>)
		for(auto msg : receivedMessages)
 8001ec2:	42a5      	cmp	r5, r4
 8001ec4:	d118      	bne.n	8001ef8 <_ZN16EventManagerTask7receiveEv+0x60>
		}
	}

	return receivedMessages;
}
 8001ec6:	4630      	mov	r0, r6
 8001ec8:	b008      	add	sp, #32
 8001eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001ece:	68b3      	ldr	r3, [r6, #8]
 8001ed0:	429d      	cmp	r5, r3
 8001ed2:	d00b      	beq.n	8001eec <_ZN16EventManagerTask7receiveEv+0x54>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001ed4:	462c      	mov	r4, r5
 8001ed6:	ad02      	add	r5, sp, #8
 8001ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001edc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ee0:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
 8001ee4:	6873      	ldr	r3, [r6, #4]
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	6073      	str	r3, [r6, #4]
 8001eea:	e7de      	b.n	8001eaa <_ZN16EventManagerTask7receiveEv+0x12>
	  _M_realloc_insert(end(), __x);
 8001eec:	aa02      	add	r2, sp, #8
 8001eee:	4629      	mov	r1, r5
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f7ff ff73 	bl	8001ddc <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8001ef6:	e7d8      	b.n	8001eaa <_ZN16EventManagerTask7receiveEv+0x12>
		for(auto msg : receivedMessages)
 8001ef8:	f894 a000 	ldrb.w	sl, [r4]
 8001efc:	3418      	adds	r4, #24
 8001efe:	f814 9c04 	ldrb.w	r9, [r4, #-4]
 8001f02:	f814 8c03 	ldrb.w	r8, [r4, #-3]
			LOG_DEBUG("EVENT_MANAGER: Received message. r[%d], s[%d], e[%d]", msg.event_receiver, msg.event_sender, msg.event_type);
 8001f06:	f7fe fddd 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	4639      	mov	r1, r7
 8001f0e:	4642      	mov	r2, r8
 8001f10:	f8cd a000 	str.w	sl, [sp]
 8001f14:	f7fe fdf0 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
	return *this;
 8001f18:	e7d3      	b.n	8001ec2 <_ZN16EventManagerTask7receiveEv+0x2a>
 8001f1a:	bf00      	nop
 8001f1c:	240004ec 	.word	0x240004ec
 8001f20:	0802cde2 	.word	0x0802cde2

08001f24 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
	  : _M_t(__t),
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
	  { }

	~_Auto_node()
 8001f24:	b510      	push	{r4, lr}
 8001f26:	4604      	mov	r4, r0
	{
	  if (_M_node)
 8001f28:	6840      	ldr	r0, [r0, #4]
 8001f2a:	b110      	cbz	r0, 8001f32 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0xe>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001f2c:	2118      	movs	r1, #24
 8001f2e:	f027 fd23 	bl	8029978 <_ZdlPvj>
	    _M_t._M_drop_node(_M_node);
	}
 8001f32:	4620      	mov	r0, r4
 8001f34:	bd10      	pop	{r4, pc}

08001f36 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f38:	4616      	mov	r6, r2
 8001f3a:	4604      	mov	r4, r0
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001f3c:	688b      	ldr	r3, [r1, #8]
      { return &this->_M_impl._M_header; }
 8001f3e:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
 8001f40:	2201      	movs	r2, #1
      while (__x != 0)
 8001f42:	b93b      	cbnz	r3, 8001f54 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x1e>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
 8001f44:	b1f2      	cbz	r2, 8001f84 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x4e>
	{
	  if (__j == begin())
 8001f46:	68ca      	ldr	r2, [r1, #12]
 8001f48:	42aa      	cmp	r2, r5
 8001f4a:	d10f      	bne.n	8001f6c <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x36>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001f4c:	e9c4 3500 	strd	r3, r5, [r4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
 8001f50:	4620      	mov	r0, r4
 8001f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f54:	7c1a      	ldrb	r2, [r3, #16]
 8001f56:	7835      	ldrb	r5, [r6, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001f58:	e9d3 7002 	ldrd	r7, r0, [r3, #8]
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f5c:	4295      	cmp	r5, r2
 8001f5e:	461d      	mov	r5, r3
 8001f60:	bf35      	itete	cc
 8001f62:	2201      	movcc	r2, #1
 8001f64:	2200      	movcs	r2, #0
 8001f66:	463b      	movcc	r3, r7
 8001f68:	4603      	movcs	r3, r0
 8001f6a:	e7ea      	b.n	8001f42 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc>
	_M_node = _Rb_tree_decrement(_M_node);
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f027 fd7f 	bl	8029a70 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f72:	7833      	ldrb	r3, [r6, #0]
 8001f74:	7c02      	ldrb	r2, [r0, #16]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	d3e6      	bcc.n	8001f4c <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x16>
      : first(__a), second(__b) { }
 8001f7e:	e9c4 0300 	strd	r0, r3, [r4]
 8001f82:	e7e5      	b.n	8001f50 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x1a>
 8001f84:	4628      	mov	r0, r5
 8001f86:	e7f4      	b.n	8001f72 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x3c>

08001f88 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8001f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8001f8a:	e9d0 6500 	ldrd	r6, r5, [r0]
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8001f8e:	ab02      	add	r3, sp, #8
 8001f90:	4604      	mov	r4, r0
 8001f92:	e903 0006 	stmdb	r3, {r1, r2}
      { return &this->_M_impl._M_header; }
 8001f96:	1d33      	adds	r3, r6, #4
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    -> iterator
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
 8001f98:	b991      	cbnz	r1, 8001fc0 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E+0x38>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d010      	beq.n	8001fc0 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E+0x38>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001f9e:	7c28      	ldrb	r0, [r5, #16]
 8001fa0:	7c11      	ldrb	r1, [r2, #16]
 8001fa2:	4288      	cmp	r0, r1
 8001fa4:	bf2c      	ite	cs
 8001fa6:	2000      	movcs	r0, #0
 8001fa8:	2001      	movcc	r0, #1
						      _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001faa:	4629      	mov	r1, r5
 8001fac:	f027 fd62 	bl	8029a74 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
 8001fb0:	6973      	ldr	r3, [r6, #20]
	}
 8001fb2:	4628      	mov	r0, r5
      ++_M_impl._M_node_count;
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	6173      	str	r3, [r6, #20]
	  _M_node = nullptr;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6063      	str	r3, [r4, #4]
	}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
			    || _M_impl._M_key_compare(_S_key(__z),
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	e7f2      	b.n	8001faa <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E+0x22>

08001fc4 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fc8:	461f      	mov	r7, r3
      { return &this->_M_impl._M_header; }
 8001fca:	1d0b      	adds	r3, r1, #4
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001fcc:	4604      	mov	r4, r0
 8001fce:	460e      	mov	r6, r1
      if (__pos._M_node == _M_end())
 8001fd0:	429a      	cmp	r2, r3
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001fd2:	4615      	mov	r5, r2
      if (__pos._M_node == _M_end())
 8001fd4:	d111      	bne.n	8001ffa <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x36>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001fd6:	694b      	ldr	r3, [r1, #20]
 8001fd8:	b13b      	cbz	r3, 8001fea <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x26>
 8001fda:	690b      	ldr	r3, [r1, #16]
 8001fdc:	7839      	ldrb	r1, [r7, #0]
 8001fde:	7c1a      	ldrb	r2, [r3, #16]
 8001fe0:	4291      	cmp	r1, r2
 8001fe2:	d902      	bls.n	8001fea <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x26>
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6022      	str	r2, [r4, #0]
 8001fe8:	e010      	b.n	800200c <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x48>
	    return _M_get_insert_unique_pos(__k);
 8001fea:	463a      	mov	r2, r7
 8001fec:	4631      	mov	r1, r6
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff ffa1 	bl	8001f36 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
    }
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 8001ffa:	f897 8000 	ldrb.w	r8, [r7]
 8001ffe:	7c13      	ldrb	r3, [r2, #16]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8002000:	4543      	cmp	r3, r8
 8002002:	d913      	bls.n	800202c <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
	  if (__pos._M_node == _M_leftmost()) // begin()
 8002004:	68cb      	ldr	r3, [r1, #12]
 8002006:	4293      	cmp	r3, r2
 8002008:	d102      	bne.n	8002010 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x4c>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800200a:	6003      	str	r3, [r0, #0]
      : first(__a), second(__b) { }
 800200c:	6063      	str	r3, [r4, #4]
 800200e:	e7f1      	b.n	8001ff4 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x30>
	_M_node = _Rb_tree_decrement(_M_node);
 8002010:	4610      	mov	r0, r2
 8002012:	f027 fd2d 	bl	8029a70 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8002016:	7c03      	ldrb	r3, [r0, #16]
 8002018:	4543      	cmp	r3, r8
 800201a:	d2e6      	bcs.n	8001fea <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x26>
	      if (_S_right(__before._M_node) == 0)
 800201c:	68c3      	ldr	r3, [r0, #12]
 800201e:	b913      	cbnz	r3, 8002026 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x62>
 8002020:	6023      	str	r3, [r4, #0]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002022:	6060      	str	r0, [r4, #4]
 8002024:	e7e6      	b.n	8001ff4 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x30>
 8002026:	6025      	str	r5, [r4, #0]
      : first(__a), second(__b) { }
 8002028:	6065      	str	r5, [r4, #4]
 800202a:	e7e3      	b.n	8001ff4 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x30>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800202c:	d20e      	bcs.n	800204c <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x88>
	  if (__pos._M_node == _M_rightmost())
 800202e:	690b      	ldr	r3, [r1, #16]
 8002030:	4293      	cmp	r3, r2
 8002032:	d0d7      	beq.n	8001fe4 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20>
	_M_node = _Rb_tree_increment(_M_node);
 8002034:	4610      	mov	r0, r2
 8002036:	f027 fd19 	bl	8029a6c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800203a:	7c03      	ldrb	r3, [r0, #16]
 800203c:	4543      	cmp	r3, r8
 800203e:	d9d4      	bls.n	8001fea <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x26>
	      if (_S_right(__pos._M_node) == 0)
 8002040:	68eb      	ldr	r3, [r5, #12]
 8002042:	b90b      	cbnz	r3, 8002048 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x84>
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	e7ef      	b.n	8002028 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x64>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002048:	6020      	str	r0, [r4, #0]
 800204a:	e7ea      	b.n	8002022 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x5e>
      : first(__a), second(__b) { }
 800204c:	2300      	movs	r3, #0
 800204e:	6022      	str	r2, [r4, #0]
 8002050:	e7dc      	b.n	800200c <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x48>

08002052 <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8002052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002054:	4617      	mov	r7, r2
      { return &this->_M_impl._M_header; }
 8002056:	1d02      	adds	r2, r0, #4
 8002058:	b085      	sub	sp, #20
 800205a:	4604      	mov	r4, r0
 800205c:	460e      	mov	r6, r1
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800205e:	6883      	ldr	r3, [r0, #8]
      { return &this->_M_impl._M_header; }
 8002060:	4615      	mov	r5, r2
      while (__x != 0)
 8002062:	bb13      	cbnz	r3, 80020aa <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0+0x58>
		auto&& [__a, __v] = pair<_Args&...>(__args...);
		if constexpr (__usable_key<decltype(__a)>)
		  {
		    const key_type& __k = __a;
		    iterator __i = lower_bound(__k);
		    if (__i == end() || key_comp()(__k, (*__i).first))
 8002064:	42aa      	cmp	r2, r5
 8002066:	d003      	beq.n	8002070 <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0+0x1e>
 8002068:	7832      	ldrb	r2, [r6, #0]
 800206a:	7c2b      	ldrb	r3, [r5, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d21a      	bcs.n	80020a6 <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0+0x54>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002070:	2018      	movs	r0, #24
	  : _M_t(__t),
 8002072:	9400      	str	r4, [sp, #0]
 8002074:	f027 fc91 	bl	802999a <_Znwj>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002078:	7832      	ldrb	r2, [r6, #0]
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 800207a:	ae02      	add	r6, sp, #8
 800207c:	f100 0310 	add.w	r3, r0, #16
 8002080:	7402      	strb	r2, [r0, #16]
 8002082:	4621      	mov	r1, r4
 8002084:	683a      	ldr	r2, [r7, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8002086:	9001      	str	r0, [sp, #4]
 8002088:	6142      	str	r2, [r0, #20]
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 800208a:	462a      	mov	r2, r5
 800208c:	4630      	mov	r0, r6
 800208e:	f7ff ff99 	bl	8001fc4 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8002092:	9b03      	ldr	r3, [sp, #12]
 8002094:	b123      	cbz	r3, 80020a0 <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0+0x4e>
	  return __z._M_insert(__res);
 8002096:	4668      	mov	r0, sp
 8002098:	e896 0006 	ldmia.w	r6, {r1, r2}
 800209c:	f7ff ff74 	bl	8001f88 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
	return iterator(__res.first);
      }
 80020a0:	4668      	mov	r0, sp
 80020a2:	f7ff ff3f 	bl	8001f24 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
	}
 80020a6:	b005      	add	sp, #20
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80020aa:	f893 e010 	ldrb.w	lr, [r3, #16]
 80020ae:	f896 c000 	ldrb.w	ip, [r6]
      { return static_cast<_Link_type>(__x->_M_right); }
 80020b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
	  __x = _S_right(__x);
 80020b6:	45e6      	cmp	lr, ip
 80020b8:	bf2a      	itet	cs
 80020ba:	461d      	movcs	r5, r3
 80020bc:	460b      	movcc	r3, r1
 80020be:	4603      	movcs	r3, r0
 80020c0:	e7cf      	b.n	8002062 <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0+0x10>
	...

080020c4 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerTask::send(const std::vector<SMessage>& messages)
{
 80020c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020c8:	4606      	mov	r6, r0
 80020ca:	b08b      	sub	sp, #44	@ 0x2c
      { return &this->_M_impl._M_header; }
 80020cc:	f100 0804 	add.w	r8, r0, #4
 80020d0:	e9d1 7900 	ldrd	r7, r9, [r1]
	for(auto msg : messages)
 80020d4:	45b9      	cmp	r9, r7
 80020d6:	d102      	bne.n	80020de <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0x1a>
					LOG_DEBUG("[FATAL] Could not send message. e[%d], r[%d]", msg.event_type, msg.event_receiver);
				}
			}
		}
	}
}
 80020d8:	b00b      	add	sp, #44	@ 0x2c
 80020da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for(auto msg : messages)
 80020de:	463d      	mov	r5, r7
 80020e0:	ac04      	add	r4, sp, #16
 80020e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80020e6:	68b3      	ldr	r3, [r6, #8]
 80020e8:	e895 0003 	ldmia.w	r5, {r0, r1}
      { return &this->_M_impl._M_header; }
 80020ec:	461a      	mov	r2, r3
 80020ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80020f2:	4641      	mov	r1, r8
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 80020f4:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
      while (__x != 0)
 80020f8:	2a00      	cmp	r2, #0
 80020fa:	d13b      	bne.n	8002174 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0xb0>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80020fc:	4588      	cmp	r8, r1
 80020fe:	d037      	beq.n	8002170 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0xac>
	      || _M_impl._M_key_compare(__k,
 8002100:	7c0a      	ldrb	r2, [r1, #16]
 8002102:	42aa      	cmp	r2, r5
 8002104:	d834      	bhi.n	8002170 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0xac>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002106:	4644      	mov	r4, r8
      while (__x != 0)
 8002108:	2b00      	cmp	r3, #0
 800210a:	d13d      	bne.n	8002188 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0xc4>
	if (__i == end() || key_comp()(__k, (*__i).first))
 800210c:	45a0      	cmp	r8, r4
 800210e:	d002      	beq.n	8002116 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0x52>
 8002110:	7c23      	ldrb	r3, [r4, #16]
 8002112:	42ab      	cmp	r3, r5
 8002114:	d91a      	bls.n	800214c <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0x88>
 8002116:	2018      	movs	r0, #24
	  : _M_t(__t),
 8002118:	9600      	str	r6, [sp, #0]
 800211a:	f027 fc3e 	bl	802999a <_Znwj>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800211e:	2200      	movs	r2, #0
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002120:	7405      	strb	r5, [r0, #16]
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8002122:	ad02      	add	r5, sp, #8
 8002124:	f100 0310 	add.w	r3, r0, #16
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002128:	6142      	str	r2, [r0, #20]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 800212a:	9001      	str	r0, [sp, #4]
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 800212c:	4622      	mov	r2, r4
 800212e:	4631      	mov	r1, r6
 8002130:	4628      	mov	r0, r5
 8002132:	f7ff ff47 	bl	8001fc4 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8002136:	9b03      	ldr	r3, [sp, #12]
 8002138:	b37b      	cbz	r3, 800219a <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0xd6>
	  return __z._M_insert(__res);
 800213a:	4668      	mov	r0, sp
 800213c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002140:	f7ff ff22 	bl	8001f88 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8002144:	4604      	mov	r4, r0
      }
 8002146:	4668      	mov	r0, sp
 8002148:	f7ff feec 	bl	8001f24 <_ZNSt8_Rb_treeIN16EventManagerTask11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
			QueueHandle_t targetQueue = queue_handles[eventReceiver];
 800214c:	6960      	ldr	r0, [r4, #20]
			if(targetQueue)
 800214e:	b178      	cbz	r0, 8002170 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0xac>
				if(xQueueSend(targetQueue, static_cast<void*>(&msg), static_cast<TickType_t>(10)) != pdTRUE)
 8002150:	2300      	movs	r3, #0
 8002152:	220a      	movs	r2, #10
 8002154:	a904      	add	r1, sp, #16
 8002156:	f00f fcac 	bl	8011ab2 <xQueueGenericSend>
 800215a:	2801      	cmp	r0, #1
 800215c:	d008      	beq.n	8002170 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0xac>
					LOG_DEBUG("[FATAL] Could not send message. e[%d], r[%d]", msg.event_type, msg.event_receiver);
 800215e:	f7fe fcb1 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 8002162:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8002166:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800216a:	490d      	ldr	r1, [pc, #52]	@ (80021a0 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0xdc>)
 800216c:	f7fe fcc4 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
      operator++() _GLIBCXX_NOEXCEPT
 8002170:	3718      	adds	r7, #24
	return *this;
 8002172:	e7af      	b.n	80020d4 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0x10>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8002174:	f892 c010 	ldrb.w	ip, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
 8002178:	e9d2 4002 	ldrd	r4, r0, [r2, #8]
	  __x = _S_right(__x);
 800217c:	45ac      	cmp	ip, r5
 800217e:	bf2a      	itet	cs
 8002180:	4611      	movcs	r1, r2
 8002182:	4602      	movcc	r2, r0
 8002184:	4622      	movcs	r2, r4
 8002186:	e7b7      	b.n	80020f8 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0x34>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8002188:	7c18      	ldrb	r0, [r3, #16]
      { return static_cast<_Link_type>(__x->_M_right); }
 800218a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
	  __x = _S_right(__x);
 800218e:	42a8      	cmp	r0, r5
 8002190:	bf2a      	itet	cs
 8002192:	461c      	movcs	r4, r3
 8002194:	4613      	movcc	r3, r2
 8002196:	460b      	movcs	r3, r1
 8002198:	e7b6      	b.n	8002108 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0x44>
	return iterator(__res.first);
 800219a:	9c02      	ldr	r4, [sp, #8]
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800219c:	e7d3      	b.n	8002146 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE+0x82>
 800219e:	bf00      	nop
 80021a0:	0802ce17 	.word	0x0802ce17

080021a4 <_ZN16EventManagerTask7processEv>:
{
 80021a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021a6:	4604      	mov	r4, r0
	send(receive());
 80021a8:	4601      	mov	r1, r0
 80021aa:	a801      	add	r0, sp, #4
 80021ac:	f7ff fe74 	bl	8001e98 <_ZN16EventManagerTask7receiveEv>
 80021b0:	4620      	mov	r0, r4
 80021b2:	a901      	add	r1, sp, #4
 80021b4:	f7ff ff86 	bl	80020c4 <_ZN16EventManagerTask4sendERKSt6vectorI8SMessageSaIS1_EE>
	_M_deallocate(_M_impl._M_start,
 80021b8:	9801      	ldr	r0, [sp, #4]
	if (__p)
 80021ba:	b130      	cbz	r0, 80021ca <_ZN16EventManagerTask7processEv+0x26>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80021bc:	9903      	ldr	r1, [sp, #12]
 80021be:	1a09      	subs	r1, r1, r0
}
 80021c0:	b004      	add	sp, #16
 80021c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021c6:	f027 bbd7 	b.w	8029978 <_ZdlPvj>
 80021ca:	b004      	add	sp, #16
 80021cc:	bd10      	pop	{r4, pc}
	...

080021d0 <StartTask_EventMgr>:
{
 80021d0:	b500      	push	{lr}
 80021d2:	b089      	sub	sp, #36	@ 0x24
      _M_header._M_color = _S_red;
 80021d4:	2201      	movs	r2, #1
 80021d6:	2400      	movs	r4, #0
      _M_header._M_left = &_M_header;
 80021d8:	ab03      	add	r3, sp, #12
	queue_handles.emplace(eventClient, queueHandle);
 80021da:	f10d 0103 	add.w	r1, sp, #3
 80021de:	a802      	add	r0, sp, #8
 80021e0:	f88d 2003 	strb.w	r2, [sp, #3]
 80021e4:	aa01      	add	r2, sp, #4
      _M_header._M_color = _S_red;
 80021e6:	f88d 400c 	strb.w	r4, [sp, #12]
      _M_header._M_parent = 0;
 80021ea:	9404      	str	r4, [sp, #16]
      _M_node_count = 0;
 80021ec:	9407      	str	r4, [sp, #28]
      _M_header._M_right = &_M_header;
 80021ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
	eventManagerInstance.addQueue(EventManagerTask::EVENT_QUEUE_CALCULATOR, queueToCalculator);
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <StartTask_EventMgr+0x68>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	9301      	str	r3, [sp, #4]
	queue_handles.emplace(eventClient, queueHandle);
 80021f8:	f7ff ff2b 	bl	8002052 <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0>
	eventManagerInstance.addQueue(EventManagerTask::EVENT_QUEUE_FRONTEND, queueToFrontend);
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <StartTask_EventMgr+0x6c>)
	queue_handles.emplace(eventClient, queueHandle);
 80021fe:	aa01      	add	r2, sp, #4
 8002200:	f10d 0103 	add.w	r1, sp, #3
 8002204:	a802      	add	r0, sp, #8
	eventManagerInstance.addQueue(EventManagerTask::EVENT_QUEUE_FRONTEND, queueToFrontend);
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f88d 4003 	strb.w	r4, [sp, #3]
 800220c:	9301      	str	r3, [sp, #4]
	queue_handles.emplace(eventClient, queueHandle);
 800220e:	f7ff ff20 	bl	8002052 <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0>
	eventManagerInstance.addQueue(EventManagerTask::EVENT_QUEUE_DAEMON, queueToProxyDaemon);
 8002212:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <StartTask_EventMgr+0x70>)
 8002214:	2202      	movs	r2, #2
	queue_handles.emplace(eventClient, queueHandle);
 8002216:	f10d 0103 	add.w	r1, sp, #3
 800221a:	a802      	add	r0, sp, #8
	eventManagerInstance.addQueue(EventManagerTask::EVENT_QUEUE_DAEMON, queueToProxyDaemon);
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f88d 2003 	strb.w	r2, [sp, #3]
	queue_handles.emplace(eventClient, queueHandle);
 8002222:	aa01      	add	r2, sp, #4
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	f7ff ff14 	bl	8002052 <_ZNSt3mapIN16EventManagerTask11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_.isra.0>
		eventManagerInstance.process();
 800222a:	a802      	add	r0, sp, #8
 800222c:	f7ff ffba 	bl	80021a4 <_ZN16EventManagerTask7processEv>
		osDelay(1);
 8002230:	2001      	movs	r0, #1
 8002232:	f00e fe0a 	bl	8010e4a <osDelay>
	for(;;)
 8002236:	e7f8      	b.n	800222a <StartTask_EventMgr+0x5a>
 8002238:	240004e8 	.word	0x240004e8
 800223c:	240004f0 	.word	0x240004f0
 8002240:	240004e4 	.word	0x240004e4

08002244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800227c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002248:	f009 f80e 	bl	800b268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480c      	ldr	r0, [pc, #48]	@ (8002280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800224e:	490d      	ldr	r1, [pc, #52]	@ (8002284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002250:	4a0d      	ldr	r2, [pc, #52]	@ (8002288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002264:	4c0a      	ldr	r4, [pc, #40]	@ (8002290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f029 f9e5 	bl	802b640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002276:	f7fe fd39 	bl	8000cec <main>
  bx  lr
 800227a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800227c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002280:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002284:	240002a8 	.word	0x240002a8
  ldr r2, =_sidata
 8002288:	0804c710 	.word	0x0804c710
  ldr r2, =_sbss
 800228c:	240004c0 	.word	0x240004c0
  ldr r4, =_ebss
 8002290:	24029494 	.word	0x24029494

08002294 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC3_IRQHandler>

08002296 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8002296:	4770      	bx	lr

08002298 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8002298:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800229a:	f001 fd23 	bl	8003ce4 <touchgfx_components_init>
    touchgfx_init();
}
 800229e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 80022a2:	f001 bca5 	b.w	8003bf0 <touchgfx_init>

080022a6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 80022a6:	f001 bd1f 	b.w	8003ce8 <touchgfx_taskEntry>

080022aa <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80022aa:	6840      	ldr	r0, [r0, #4]
    }
 80022ac:	4770      	bx	lr

080022ae <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80022ae:	6041      	str	r1, [r0, #4]
    }
 80022b0:	4770      	bx	lr

080022b2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80022b2:	1a52      	subs	r2, r2, r1
 80022b4:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80022b8:	fbb2 f0f3 	udiv	r0, r2, r3
 80022bc:	4770      	bx	lr
	...

080022c0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80022c0:	4b02      	ldr	r3, [pc, #8]	@ (80022cc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80022c2:	68c0      	ldr	r0, [r0, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80022c8:	4358      	muls	r0, r3
 80022ca:	4770      	bx	lr
 80022cc:	24000924 	.word	0x24000924

080022d0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80022d0:	4770      	bx	lr
	...

080022d4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80022d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80022d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80022dc:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80022de:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022ee:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80022fa:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80022fc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fe:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8002300:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002302:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8002306:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8002308:	2101      	movs	r1, #1
 800230a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 800230c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	2210      	movs	r2, #16
 8002310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002314:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 800231e:	4a0e      	ldr	r2, [pc, #56]	@ (8002358 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	b983      	cbnz	r3, 8002346 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8002324:	f00c febc 	bl	800f0a0 <HAL_RCC_GetHCLKFreq>
 8002328:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800232a:	f00c fcf1 	bl	800ed10 <HAL_RCC_GetSysClockFreq>
 800232e:	fbb0 f0f4 	udiv	r0, r0, r4
 8002332:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8002334:	4807      	ldr	r0, [pc, #28]	@ (8002354 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8002336:	f00e f87d 	bl	8010434 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800233a:	4806      	ldr	r0, [pc, #24]	@ (8002354 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800233c:	b003      	add	sp, #12
 800233e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8002342:	f00d beef 	b.w	8010124 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8002346:	f00c fecd 	bl	800f0e4 <HAL_RCC_GetPCLK1Freq>
 800234a:	0044      	lsls	r4, r0, #1
 800234c:	e7ed      	b.n	800232a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800234e:	bf00      	nop
 8002350:	58024400 	.word	0x58024400
 8002354:	24000924 	.word	0x24000924
 8002358:	0802fd5c 	.word	0x0802fd5c

0800235c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800235c:	b510      	push	{r4, lr}
 800235e:	4604      	mov	r4, r0
 8002360:	2110      	movs	r1, #16
 8002362:	f027 fb09 	bl	8029978 <_ZdlPvj>
 8002366:	4620      	mov	r0, r4
 8002368:	bd10      	pop	{r4, pc}

0800236a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800236a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800236c:	6803      	ldr	r3, [r0, #0]
{
 800236e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8002370:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8002372:	b131      	cbz	r1, 8002382 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8002374:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8002376:	4798      	blx	r3
 8002378:	6863      	ldr	r3, [r4, #4]
 800237a:	1b5b      	subs	r3, r3, r5
 800237c:	4403      	add	r3, r0
 800237e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8002380:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8002382:	4798      	blx	r3
 8002384:	60a0      	str	r0, [r4, #8]
}
 8002386:	e7fb      	b.n	8002380 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08002388 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002388:	4770      	bx	lr
	...

0800238c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8002390:	460f      	mov	r7, r1
 8002392:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8002394:	781d      	ldrb	r5, [r3, #0]
 8002396:	b915      	cbnz	r5, 800239e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8002398:	2500      	movs	r5, #0
}
 800239a:	4628      	mov	r0, r5
 800239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800239e:	4c07      	ldr	r4, [pc, #28]	@ (80023bc <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 80023a0:	2000      	movs	r0, #0
 80023a2:	4621      	mov	r1, r4
 80023a4:	f008 ff04 	bl	800b1b0 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f4      	beq.n	8002398 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 80023ae:	6863      	ldr	r3, [r4, #4]
 80023b0:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 80023b2:	68a3      	ldr	r3, [r4, #8]
 80023b4:	6033      	str	r3, [r6, #0]
            return true;
 80023b6:	e7f0      	b.n	800239a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 80023b8:	24000980 	.word	0x24000980
 80023bc:	24000970 	.word	0x24000970

080023c0 <_ZN20STM32TouchControllerD0Ev>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	4604      	mov	r4, r0
 80023c4:	2104      	movs	r1, #4
 80023c6:	f027 fad7 	bl	8029978 <_ZdlPvj>
 80023ca:	4620      	mov	r0, r4
 80023cc:	bd10      	pop	{r4, pc}
	...

080023d0 <_ZN20STM32TouchController4initEv>:
{
 80023d0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80023d4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80023d8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80023da:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80023dc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80023e0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80023e4:	230c      	movs	r3, #12
 80023e6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80023ea:	f008 fe51 	bl	800b090 <BSP_TS_Init>
 80023ee:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <_ZN20STM32TouchController4initEv+0x40>)
 80023f0:	b910      	cbnz	r0, 80023f8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
}
 80023f6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1fb      	bne.n	80023f6 <_ZN20STM32TouchController4initEv+0x26>
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <_ZN20STM32TouchController4initEv+0x44>)
 8002400:	212e      	movs	r1, #46	@ 0x2e
 8002402:	4a05      	ldr	r2, [pc, #20]	@ (8002418 <_ZN20STM32TouchController4initEv+0x48>)
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <_ZN20STM32TouchController4initEv+0x4c>)
 8002406:	f027 ff0b 	bl	802a220 <__assert_func>
 800240a:	bf00      	nop
 800240c:	2400097c 	.word	0x2400097c
 8002410:	24000980 	.word	0x24000980
 8002414:	0802ce6c 	.word	0x0802ce6c
 8002418:	0802ce7f 	.word	0x0802ce7f
 800241c:	0802cea9 	.word	0x0802cea9

08002420 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8002420:	2803      	cmp	r0, #3
 8002422:	d825      	bhi.n	8002470 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8002424:	e8df f000 	tbb	[pc, r0]
 8002428:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800242e:	2108      	movs	r1, #8
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	fab2 f282 	clz	r2, r2
 8002436:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8002438:	480f      	ldr	r0, [pc, #60]	@ (8002478 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800243a:	f009 bfcf 	b.w	800c3dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8002440:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	0952      	lsrs	r2, r2, #5
 800244c:	e7f4      	b.n	8002438 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8002450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	fab2 f282 	clz	r2, r2
 800245a:	0952      	lsrs	r2, r2, #5
 800245c:	e7ec      	b.n	8002438 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800245e:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8002460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002464:	4805      	ldr	r0, [pc, #20]	@ (800247c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	0952      	lsrs	r2, r2, #5
 800246e:	e7e4      	b.n	800243a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	24000984 	.word	0x24000984
 8002478:	58022400 	.word	0x58022400
 800247c:	58021400 	.word	0x58021400

08002480 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8002480:	2803      	cmp	r0, #3
 8002482:	d825      	bhi.n	80024d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8002484:	e8df f000 	tbb	[pc, r0]
 8002488:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800248e:	2108      	movs	r1, #8
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	3a00      	subs	r2, #0
 8002494:	bf18      	it	ne
 8002496:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8002498:	480f      	ldr	r0, [pc, #60]	@ (80024d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800249a:	f009 bf9f 	b.w	800c3dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800249e:	4b0d      	ldr	r3, [pc, #52]	@ (80024d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80024a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	3a00      	subs	r2, #0
 80024a8:	bf18      	it	ne
 80024aa:	2201      	movne	r2, #1
 80024ac:	e7f4      	b.n	8002498 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80024b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	3a00      	subs	r2, #0
 80024b8:	bf18      	it	ne
 80024ba:	2201      	movne	r2, #1
 80024bc:	e7ec      	b.n	8002498 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80024c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024c4:	4805      	ldr	r0, [pc, #20]	@ (80024dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	3a00      	subs	r2, #0
 80024ca:	bf18      	it	ne
 80024cc:	2201      	movne	r2, #1
 80024ce:	e7e4      	b.n	800249a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	24000984 	.word	0x24000984
 80024d8:	58022400 	.word	0x58022400
 80024dc:	58021400 	.word	0x58021400

080024e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80024e0:	2803      	cmp	r0, #3
 80024e2:	d811      	bhi.n	8002508 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80024e4:	e8df f000 	tbb	[pc, r0]
 80024e8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80024ec:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80024ee:	4807      	ldr	r0, [pc, #28]	@ (800250c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80024f0:	f009 bf79 	b.w	800c3e6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80024f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024f8:	e7f9      	b.n	80024ee <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80024fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024fe:	e7f6      	b.n	80024ee <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8002506:	e7f3      	b.n	80024f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	58022400 	.word	0x58022400
 8002510:	58021400 	.word	0x58021400

08002514 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8002514:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8002516:	2803      	cmp	r0, #3
 8002518:	d815      	bhi.n	8002546 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 800251a:	e8df f000 	tbb	[pc, r0]
 800251e:	0a02      	.short	0x0a02
 8002520:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002522:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002524:	4809      	ldr	r0, [pc, #36]	@ (800254c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002526:	f009 ff53 	bl	800c3d0 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800252a:	1e43      	subs	r3, r0, #1
 800252c:	4258      	negs	r0, r3
 800252e:	4158      	adcs	r0, r3
 8002530:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002536:	e7f5      	b.n	8002524 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800253c:	e7f2      	b.n	8002524 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800253e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002542:	4803      	ldr	r0, [pc, #12]	@ (8002550 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8002544:	e7ef      	b.n	8002526 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8002546:	2000      	movs	r0, #0
 8002548:	e7ef      	b.n	800252a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 800254a:	bf00      	nop
 800254c:	58022400 	.word	0x58022400
 8002550:	58021400 	.word	0x58021400

08002554 <_ZN8touchgfx4GPIO4initEv>:
{
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	4d08      	ldr	r5, [pc, #32]	@ (8002578 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8002558:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800255a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 800255c:	b2e0      	uxtb	r0, r4
 800255e:	f7ff ffd9 	bl	8002514 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8002562:	b118      	cbz	r0, 800256c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8002568:	bf18      	it	ne
 800256a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 800256c:	3401      	adds	r4, #1
 800256e:	3504      	adds	r5, #4
 8002570:	2c05      	cmp	r4, #5
 8002572:	d1f3      	bne.n	800255c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8002574:	bd70      	pop	{r4, r5, r6, pc}
 8002576:	bf00      	nop
 8002578:	24000984 	.word	0x24000984

0800257c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 800257c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 800257e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8002582:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8002586:	4770      	bx	lr

08002588 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8002588:	2000      	movs	r0, #0
 800258a:	4770      	bx	lr

0800258c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800258c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800258e:	3900      	subs	r1, #0
 8002590:	4b02      	ldr	r3, [pc, #8]	@ (800259c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8002592:	bf18      	it	ne
 8002594:	2101      	movne	r1, #1
 8002596:	7019      	strb	r1, [r3, #0]
    }
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	2402876f 	.word	0x2402876f

080025a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80025a0:	2000      	movs	r0, #0
 80025a2:	4770      	bx	lr

080025a4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80025a4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80025a6:	b10b      	cbz	r3, 80025ac <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80025a8:	4608      	mov	r0, r1
 80025aa:	4718      	bx	r3
        }
    }
 80025ac:	4770      	bx	lr

080025ae <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80025ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80025b2:	4770      	bx	lr

080025b4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80025b4:	6840      	ldr	r0, [r0, #4]
 80025b6:	6803      	ldr	r3, [r0, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	4718      	bx	r3

080025bc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 80025bc:	4b01      	ldr	r3, [pc, #4]	@ (80025c4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	240009a8 	.word	0x240009a8

080025c8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80025c8:	4770      	bx	lr

080025ca <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80025ca:	f001 bc8a 	b.w	8003ee2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

080025ce <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 80025ce:	f001 bc19 	b.w	8003e04 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080025d2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 80025d2:	f001 bdeb 	b.w	80041ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

080025d6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 80025d6:	f001 bddd 	b.w	8004194 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

080025dc <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 80025dc:	b510      	push	{r4, lr}
 80025de:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 80025e0:	f001 fda0 	bl	8004124 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 80025e4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 80025e8:	b113      	cbz	r3, 80025f0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 80025ea:	4b02      	ldr	r3, [pc, #8]	@ (80025f4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
    }
}
 80025f0:	bd10      	pop	{r4, pc}
 80025f2:	bf00      	nop
 80025f4:	2400000c 	.word	0x2400000c

080025f8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80025f8:	f001 bc0c 	b.w	8003e14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

080025fc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80025fc:	b510      	push	{r4, lr}
 80025fe:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002600:	f012 fe18 	bl	8015234 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	4620      	mov	r0, r4
 8002608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 800260c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8002610:	4718      	bx	r3

08002612 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8002612:	b510      	push	{r4, lr}
 8002614:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8002616:	f012 f9a3 	bl	8014960 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 800261a:	6860      	ldr	r0, [r4, #4]
 800261c:	6803      	ldr	r3, [r0, #0]
    }
 800261e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4718      	bx	r3

08002626 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8002626:	f012 b870 	b.w	801470a <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800262a <_ZN11TouchGFXHALD0Ev>:
 800262a:	b510      	push	{r4, lr}
 800262c:	4604      	mov	r4, r0
 800262e:	217c      	movs	r1, #124	@ 0x7c
 8002630:	f027 f9a2 	bl	8029978 <_ZdlPvj>
 8002634:	4620      	mov	r0, r4
 8002636:	bd10      	pop	{r4, pc}

08002638 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8002638:	4b02      	ldr	r3, [pc, #8]	@ (8002644 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800263e:	f012 b8a1 	b.w	8014784 <_ZN8touchgfx3HAL10beginFrameEv>
 8002642:	bf00      	nop
 8002644:	2400000c 	.word	0x2400000c

08002648 <_ZN11TouchGFXHAL10initializeEv>:
{
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4604      	mov	r4, r0
    mcuInstr.init();
 800264c:	4d06      	ldr	r5, [pc, #24]	@ (8002668 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 800264e:	f001 fc09 	bl	8003e64 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8002652:	2300      	movs	r3, #0
    mcuInstr.init();
 8002654:	4628      	mov	r0, r5
 8002656:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 800265a:	f7ff fe3b 	bl	80022d4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 800265e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8002660:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8002662:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	24000998 	.word	0x24000998

0800266c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 800266c:	6803      	ldr	r3, [r0, #0]
{
 800266e:	4604      	mov	r4, r0
 8002670:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8002672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002676:	4798      	blx	r3
    enableInterrupts();
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	4620      	mov	r0, r4
 800267c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800267e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8002680:	f000 ff5c 	bl	800353c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	4620      	mov	r0, r4
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 800268c:	2100      	movs	r1, #0
 800268e:	2329      	movs	r3, #41	@ 0x29
 8002690:	2215      	movs	r2, #21
 8002692:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8002694:	9100      	str	r1, [sp, #0]
 8002696:	f009 fc10 	bl	800beba <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 800269a:	f000 ff4f 	bl	800353c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	4620      	mov	r0, r4
 80026a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a4:	4798      	blx	r3
    for (;;)
 80026a6:	e7f8      	b.n	800269a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80026a8:	24000824 	.word	0x24000824

080026ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80026ac:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80026b0:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80026b2:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80026b4:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80026b8:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80026ba:	428c      	cmp	r4, r1
 80026bc:	d009      	beq.n	80026d2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80026be:	b93a      	cbnz	r2, 80026d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80026c0:	490a      	ldr	r1, [pc, #40]	@ (80026ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026c2:	4a0b      	ldr	r2, [pc, #44]	@ (80026f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80026c4:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026c6:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80026c8:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80026ca:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026cc:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80026ce:	701a      	strb	r2, [r3, #0]
        }
    }
 80026d0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80026d2:	2a00      	cmp	r2, #0
 80026d4:	d0fc      	beq.n	80026d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026d6:	4a06      	ldr	r2, [pc, #24]	@ (80026f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80026d8:	4904      	ldr	r1, [pc, #16]	@ (80026ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026da:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80026dc:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026de:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80026e0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80026e2:	2200      	movs	r2, #0
 80026e4:	e7f3      	b.n	80026ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80026e6:	bf00      	nop
 80026e8:	24028768 	.word	0x24028768
 80026ec:	24028766 	.word	0x24028766
 80026f0:	24028764 	.word	0x24028764

080026f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80026f4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	428b      	cmp	r3, r1
 80026fc:	d803      	bhi.n	8002706 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80026fe:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	4293      	cmp	r3, r2
 8002704:	d905      	bls.n	8002712 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002708:	219e      	movs	r1, #158	@ 0x9e
 800270a:	4a07      	ldr	r2, [pc, #28]	@ (8002728 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800270c:	4807      	ldr	r0, [pc, #28]	@ (800272c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800270e:	f027 fd87 	bl	802a220 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002712:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002714:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002716:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002718:	801a      	strh	r2, [r3, #0]
    }
 800271a:	bd08      	pop	{r3, pc}
 800271c:	24028764 	.word	0x24028764
 8002720:	24028766 	.word	0x24028766
 8002724:	0802cf30 	.word	0x0802cf30
 8002728:	0802cf93 	.word	0x0802cf93
 800272c:	0802cfd6 	.word	0x0802cfd6
 8002730:	2402876a 	.word	0x2402876a
 8002734:	2402876c 	.word	0x2402876c

08002738 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8002738:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 800273a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 800273e:	b118      	cbz	r0, 8002748 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8002740:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8002742:	6803      	ldr	r3, [r0, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4718      	bx	r3
    }
 8002748:	4770      	bx	lr
	...

0800274c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	460d      	mov	r5, r1
 8002750:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8002752:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8002754:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002756:	b935      	cbnz	r5, 8002766 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8002758:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800275a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 800275e:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8002760:	480a      	ldr	r0, [pc, #40]	@ (800278c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8002762:	f027 fd5d 	bl	802a220 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002766:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800276a:	3a00      	subs	r2, #0
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800276e:	bf18      	it	ne
 8002770:	2201      	movne	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002774:	6803      	ldr	r3, [r0, #0]
}
 8002776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800277a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800277e:	4718      	bx	r3
 8002780:	240009a8 	.word	0x240009a8
 8002784:	0802d029 	.word	0x0802d029
 8002788:	0802d061 	.word	0x0802d061
 800278c:	0802cfd6 	.word	0x0802cfd6
 8002790:	2402876e 	.word	0x2402876e

08002794 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8002794:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8002798:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800279a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 800279e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 80027a0:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 80027a4:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 80027a6:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 80027a8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80027ac:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80027ae:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 80027b0:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 80027b4:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 80027b6:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 80027ba:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80027bc:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 80027be:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 80027c2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80027c6:	4a16      	ldr	r2, [pc, #88]	@ (8002820 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80027c8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80027cc:	3520      	adds	r5, #32
          buttonController(0),
 80027ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 80027d2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 80027d6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 80027da:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 80027de:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80027e2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 80027e6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80027ea:	6782      	str	r2, [r0, #120]	@ 0x78
 80027ec:	b2ad      	uxth	r5, r5
        instance = this;
 80027ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80027f0:	42b5      	cmp	r5, r6
        instance = this;
 80027f2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80027f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002828 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 80027f6:	8015      	strh	r5, [r2, #0]
 80027f8:	4a0c      	ldr	r2, [pc, #48]	@ (800282c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 80027fa:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80027fc:	bf28      	it	cs
 80027fe:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002800:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002802:	bf38      	it	cc
 8002804:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002806:	8016      	strh	r6, [r2, #0]
 8002808:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800280a:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800280e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002810:	4a09      	ldr	r2, [pc, #36]	@ (8002838 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8002812:	7013      	strb	r3, [r2, #0]
 8002814:	4b09      	ldr	r3, [pc, #36]	@ (800283c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8002816:	6003      	str	r3, [r0, #0]
}
 8002818:	bd70      	pop	{r4, r5, r6, pc}
 800281a:	bf00      	nop
 800281c:	01000001 	.word	0x01000001
 8002820:	01010000 	.word	0x01010000
 8002824:	24028770 	.word	0x24028770
 8002828:	24028764 	.word	0x24028764
 800282c:	2402876a 	.word	0x2402876a
 8002830:	24028766 	.word	0x24028766
 8002834:	2402876c 	.word	0x2402876c
 8002838:	24028768 	.word	0x24028768
 800283c:	0802d0b8 	.word	0x0802d0b8

08002840 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002840:	2b01      	cmp	r3, #1
    {
 8002842:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002844:	d80e      	bhi.n	8002864 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	2215      	movs	r2, #21
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	460b      	mov	r3, r1
 800284e:	4601      	mov	r1, r0
 8002850:	4808      	ldr	r0, [pc, #32]	@ (8002874 <DSI_IO_Write+0x34>)
 8002852:	f009 fb32 	bl	800beba <HAL_DSI_ShortWrite>
 8002856:	b118      	cbz	r0, 8002860 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002858:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 800285c:	b002      	add	sp, #8
 800285e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8002860:	2000      	movs	r0, #0
 8002862:	e7fb      	b.n	800285c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002864:	e9cd 1200 	strd	r1, r2, [sp]
 8002868:	4601      	mov	r1, r0
 800286a:	2239      	movs	r2, #57	@ 0x39
 800286c:	4801      	ldr	r0, [pc, #4]	@ (8002874 <DSI_IO_Write+0x34>)
 800286e:	f009 fb35 	bl	800bedc <HAL_DSI_LongWrite>
 8002872:	e7f0      	b.n	8002856 <DSI_IO_Write+0x16>
 8002874:	24000824 	.word	0x24000824

08002878 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8002878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800287a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800287e:	2106      	movs	r1, #6
 8002880:	9100      	str	r1, [sp, #0]
 8002882:	4601      	mov	r1, r0
 8002884:	4805      	ldr	r0, [pc, #20]	@ (800289c <DSI_IO_Read+0x24>)
 8002886:	f009 fb89 	bl	800bf9c <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 800288a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 800288c:	bf14      	ite	ne
 800288e:	f06f 0007 	mvnne.w	r0, #7
 8002892:	2000      	moveq	r0, #0
 8002894:	b005      	add	sp, #20
 8002896:	f85d fb04 	ldr.w	pc, [sp], #4
 800289a:	bf00      	nop
 800289c:	24000824 	.word	0x24000824

080028a0 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80028a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80028a2:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80028a6:	4c0b      	ldr	r4, [pc, #44]	@ (80028d4 <LCD_ReqTear+0x34>)
 80028a8:	2239      	movs	r2, #57	@ 0x39
 80028aa:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80028ac:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80028b0:	ab03      	add	r3, sp, #12
 80028b2:	4620      	mov	r0, r4
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	2344      	movs	r3, #68	@ 0x44
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2302      	movs	r3, #2
 80028bc:	f009 fb0e 	bl	800bedc <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80028c0:	2100      	movs	r1, #0
 80028c2:	2335      	movs	r3, #53	@ 0x35
 80028c4:	2215      	movs	r2, #21
 80028c6:	4620      	mov	r0, r4
 80028c8:	9100      	str	r1, [sp, #0]
 80028ca:	f009 faf6 	bl	800beba <HAL_DSI_ShortWrite>
    }
 80028ce:	b004      	add	sp, #16
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	bf00      	nop
 80028d4:	24000824 	.word	0x24000824

080028d8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80028d8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 80028da:	f7ff ffe1 	bl	80028a0 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80028de:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 80028e0:	2202      	movs	r2, #2
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80028e8:	2201      	movs	r2, #1
 80028ea:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80028ee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80028fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80028fe:	f042 0202 	orr.w	r2, r2, #2
 8002902:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8002906:	2203      	movs	r2, #3
 8002908:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 800290a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800290c:	bd08      	pop	{r3, pc}
 800290e:	bf00      	nop
 8002910:	24000824 	.word	0x24000824
 8002914:	50001000 	.word	0x50001000

08002918 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002918:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <LCD_ReqEnable+0x20>)
    {
 800291a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 800291c:	7819      	ldrb	r1, [r3, #0]
 800291e:	b939      	cbnz	r1, 8002930 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002920:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8002922:	4806      	ldr	r0, [pc, #24]	@ (800293c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002924:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8002926:	2329      	movs	r3, #41	@ 0x29
 8002928:	2215      	movs	r2, #21
 800292a:	9100      	str	r1, [sp, #0]
 800292c:	f009 fac5 	bl	800beba <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002930:	b003      	add	sp, #12
 8002932:	f85d fb04 	ldr.w	pc, [sp], #4
 8002936:	bf00      	nop
 8002938:	24000994 	.word	0x24000994
 800293c:	24000824 	.word	0x24000824

08002940 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8002942:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	232a      	movs	r3, #42	@ 0x2a
 8002948:	2239      	movs	r2, #57	@ 0x39
 800294a:	2100      	movs	r1, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2304      	movs	r3, #4
 8002950:	4803      	ldr	r0, [pc, #12]	@ (8002960 <LCD_SetUpdateRegionLeft+0x20>)
 8002952:	f009 fac3 	bl	800bedc <HAL_DSI_LongWrite>
    }
 8002956:	b003      	add	sp, #12
 8002958:	f85d fb04 	ldr.w	pc, [sp], #4
 800295c:	24000008 	.word	0x24000008
 8002960:	24000824 	.word	0x24000824

08002964 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8002966:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	232a      	movs	r3, #42	@ 0x2a
 800296c:	2239      	movs	r2, #57	@ 0x39
 800296e:	2100      	movs	r1, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2304      	movs	r3, #4
 8002974:	4803      	ldr	r0, [pc, #12]	@ (8002984 <LCD_SetUpdateRegionRight+0x20>)
 8002976:	f009 fab1 	bl	800bedc <HAL_DSI_LongWrite>
    }
 800297a:	b003      	add	sp, #12
 800297c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002980:	24000004 	.word	0x24000004
 8002984:	24000824 	.word	0x24000824

08002988 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8002988:	b538      	push	{r3, r4, r5, lr}
        return instance;
 800298a:	4d14      	ldr	r5, [pc, #80]	@ (80029dc <HAL_DSI_TearingEffectCallback+0x54>)
 800298c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800298e:	2000      	movs	r0, #0
 8002990:	f7ff fd46 	bl	8002420 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8002994:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8002996:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800299a:	3301      	adds	r3, #1
 800299c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80029a0:	f000 fdc0 	bl	8003524 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80029a4:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 80029a6:	682a      	ldr	r2, [r5, #0]
 80029a8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80029b0:	b173      	cbz	r3, 80029d0 <HAL_DSI_TearingEffectCallback+0x48>
 80029b2:	4d0c      	ldr	r5, [pc, #48]	@ (80029e4 <HAL_DSI_TearingEffectCallback+0x5c>)
 80029b4:	782b      	ldrb	r3, [r5, #0]
 80029b6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80029ba:	b94b      	cbnz	r3, 80029d0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_DSI_TearingEffectCallback+0x60>)
 80029be:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80029c0:	f7ff ffbe 	bl	8002940 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80029c4:	4620      	mov	r0, r4
 80029c6:	f009 fa68 	bl	800be9a <HAL_DSI_Refresh>
            displayRefreshing = true;
 80029ca:	2301      	movs	r3, #1
 80029cc:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80029ce:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80029d0:	2000      	movs	r0, #0
    }
 80029d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80029d6:	f7ff bd53 	b.w	8002480 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80029da:	bf00      	nop
 80029dc:	24028770 	.word	0x24028770
 80029e0:	2400000c 	.word	0x2400000c
 80029e4:	240009b0 	.word	0x240009b0
 80029e8:	240009ac 	.word	0x240009ac

080029ec <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 80029ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 80029f0:	4e48      	ldr	r6, [pc, #288]	@ (8002b14 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 80029f2:	b085      	sub	sp, #20
 80029f4:	4604      	mov	r4, r0
        if (displayRefreshing)
 80029f6:	7833      	ldrb	r3, [r6, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8088 	beq.w	8002b0e <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 80029fe:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002b38 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8002a02:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8002b3c <HAL_DSI_EndOfRefreshCallback+0x150>
 8002a06:	f8d9 5000 	ldr.w	r5, [r9]
 8002a0a:	4f43      	ldr	r7, [pc, #268]	@ (8002b18 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8002a0c:	2d00      	cmp	r5, #0
 8002a0e:	d13e      	bne.n	8002a8e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002a10:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002a12:	4e42      	ldr	r6, [pc, #264]	@ (8002b1c <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8002a14:	f008 fcd8 	bl	800b3c8 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	9500      	str	r5, [sp, #0]
 8002a1c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002a20:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002a22:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002a26:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002a2a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002a2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002a32:	f002 0208 	and.w	r2, r2, #8
 8002a36:	9200      	str	r2, [sp, #0]
 8002a38:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002a3a:	f8d8 2000 	ldr.w	r2, [r8]
 8002a3e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002a42:	4837      	ldr	r0, [pc, #220]	@ (8002b20 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002a44:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8002a46:	4e37      	ldr	r6, [pc, #220]	@ (8002b24 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002a48:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8002a4a:	4837      	ldr	r0, [pc, #220]	@ (8002b28 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002a4c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002a50:	4836      	ldr	r0, [pc, #216]	@ (8002b2c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002a52:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002a56:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002a58:	f041 0101 	orr.w	r1, r1, #1
 8002a5c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002a5e:	9501      	str	r5, [sp, #4]
 8002a60:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002a64:	f042 0208 	orr.w	r2, r2, #8
 8002a68:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002a6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8002a78:	f7ff ff74 	bl	8002964 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8002a7c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8002a7e:	4620      	mov	r0, r4
                updateRegion = 1;
 8002a80:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8002a84:	b005      	add	sp, #20
 8002a86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8002a8a:	f009 ba06 	b.w	800be9a <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8002a92:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002a94:	9502      	str	r5, [sp, #8]
 8002a96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8002a9a:	4c25      	ldr	r4, [pc, #148]	@ (8002b30 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002a9c:	f022 0208 	bic.w	r2, r2, #8
 8002aa0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002aa4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002aa8:	f002 0208 	and.w	r2, r2, #8
 8002aac:	9202      	str	r2, [sp, #8]
 8002aae:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8002ab0:	f8d8 2000 	ldr.w	r2, [r8]
 8002ab4:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8002ab8:	4819      	ldr	r0, [pc, #100]	@ (8002b20 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002aba:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8002abc:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8002ac0:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8002ac2:	4819      	ldr	r0, [pc, #100]	@ (8002b28 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002ac4:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8002ac8:	4818      	ldr	r0, [pc, #96]	@ (8002b2c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002aca:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002ace:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002ad0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002ad2:	f041 0101 	orr.w	r1, r1, #1
 8002ad6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002ad8:	9503      	str	r5, [sp, #12]
 8002ada:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002ade:	f042 0208 	orr.w	r2, r2, #8
 8002ae2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002ae6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	9303      	str	r3, [sp, #12]
 8002af0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002af2:	f7ff fcc5 	bl	8002480 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8002af6:	f7ff ff0f 	bl	8002918 <LCD_ReqEnable>
        return instance;
 8002afa:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8002afc:	7035      	strb	r5, [r6, #0]
 8002afe:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8002b00:	b128      	cbz	r0, 8002b0e <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8002b02:	6803      	ldr	r3, [r0, #0]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
    }
 8002b06:	b005      	add	sp, #20
 8002b08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b0c:	4718      	bx	r3
 8002b0e:	b005      	add	sp, #20
 8002b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b14:	240009b0 	.word	0x240009b0
 8002b18:	240009a8 	.word	0x240009a8
 8002b1c:	01b201e2 	.word	0x01b201e2
 8002b20:	50001000 	.word	0x50001000
 8002b24:	019201e3 	.word	0x019201e3
 8002b28:	01920003 	.word	0x01920003
 8002b2c:	09c004b3 	.word	0x09c004b3
 8002b30:	019201e2 	.word	0x019201e2
 8002b34:	24028770 	.word	0x24028770
 8002b38:	240009ac 	.word	0x240009ac
 8002b3c:	2400064c 	.word	0x2400064c

08002b40 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002b40:	4601      	mov	r1, r0
 8002b42:	b508      	push	{r3, lr}
        return instance;
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <IdleTaskHook+0x14>)
 8002b46:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002b48:	b101      	cbz	r1, 8002b4c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8002b4a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002b4c:	f012 fb8c 	bl	8015268 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002b50:	2001      	movs	r0, #1
 8002b52:	bd08      	pop	{r3, pc}
 8002b54:	24028770 	.word	0x24028770

08002b58 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	4a02      	ldr	r2, [pc, #8]	@ (8002b6c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002b62:	601a      	str	r2, [r3, #0]

}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	24000998 	.word	0x24000998
 8002b6c:	0802ce4c 	.word	0x0802ce4c

08002b70 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002b70:	6940      	ldr	r0, [r0, #20]
 8002b72:	4770      	bx	lr

08002b74 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002b74:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002b78:	4770      	bx	lr

08002b7a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8002b7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b7c:	b923      	cbnz	r3, 8002b88 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8002b7e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002b80:	3800      	subs	r0, #0
 8002b82:	bf18      	it	ne
 8002b84:	2001      	movne	r0, #1
 8002b86:	4770      	bx	lr
 8002b88:	2001      	movs	r0, #1
}
 8002b8a:	4770      	bx	lr

08002b8c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002b8c:	6880      	ldr	r0, [r0, #8]
 8002b8e:	4770      	bx	lr

08002b90 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002b90:	4770      	bx	lr

08002b92 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002b92:	3004      	adds	r0, #4
{
 8002b94:	b510      	push	{r4, lr}
 8002b96:	460c      	mov	r4, r1
    *data = videoInfo;
 8002b98:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b9e:	bd10      	pop	{r4, pc}

08002ba0 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002ba0:	4770      	bx	lr
	...

08002ba4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002ba4:	b508      	push	{r3, lr}
    assert(0);
 8002ba6:	4a03      	ldr	r2, [pc, #12]	@ (8002bb4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002ba8:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 8002bac:	4b02      	ldr	r3, [pc, #8]	@ (8002bb8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8002bae:	4803      	ldr	r0, [pc, #12]	@ (8002bbc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002bb0:	f027 fb36 	bl	802a220 <__assert_func>
 8002bb4:	0802d188 	.word	0x0802d188
 8002bb8:	0802f7db 	.word	0x0802f7db
 8002bbc:	0802d1e3 	.word	0x0802d1e3

08002bc0 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	2148      	movs	r1, #72	@ 0x48
 8002bc6:	f026 fed7 	bl	8029978 <_ZdlPvj>
 8002bca:	4620      	mov	r0, r4
 8002bcc:	bd10      	pop	{r4, pc}
	...

08002bd0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002bd0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c0c <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002bd4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 8002bd6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002bd8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002bda:	6003      	str	r3, [r0, #0]
 8002bdc:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8002bde:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002be2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002be6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002bea:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002bee:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8002bf2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8002bf6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002bfa:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f00e f9a6 	bl	8010f50 <osSemaphoreNew>
 8002c04:	4b02      	ldr	r3, [pc, #8]	@ (8002c10 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 8002c06:	6018      	str	r0, [r3, #0]
}
 8002c08:	4620      	mov	r0, r4
 8002c0a:	bd10      	pop	{r4, pc}
 8002c0c:	0802d434 	.word	0x0802d434
 8002c10:	240009d0 	.word	0x240009d0

08002c14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002c14:	b410      	push	{r4}
 8002c16:	460c      	mov	r4, r1
 8002c18:	4611      	mov	r1, r2
 8002c1a:	461a      	mov	r2, r3
    if (reader != 0)
 8002c1c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002c1e:	b13b      	cbz	r3, 8002c30 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002c20:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002c22:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002c24:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002c26:	4420      	add	r0, r4
}
 8002c28:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002c2c:	f028 bc52 	b.w	802b4d4 <strncmp>
        src = (const char*)movieData + offset;
 8002c30:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002c32:	e7f8      	b.n	8002c26 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002c34:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002c36:	b510      	push	{r4, lr}
    if (reader != 0)
 8002c38:	b173      	cbz	r3, 8002c58 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002c3a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002c3c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002c3e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002c40:	1853      	adds	r3, r2, r1
 8002c42:	5c52      	ldrb	r2, [r2, r1]
 8002c44:	7898      	ldrb	r0, [r3, #2]
 8002c46:	785c      	ldrb	r4, [r3, #1]
 8002c48:	0400      	lsls	r0, r0, #16
 8002c4a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002c4e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002c50:	78db      	ldrb	r3, [r3, #3]
 8002c52:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002c56:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002c58:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8002c5a:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002c5c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002c5e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002c60:	7898      	ldrb	r0, [r3, #2]
 8002c62:	0400      	lsls	r0, r0, #16
 8002c64:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002c68:	e7f1      	b.n	8002c4e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

08002c6a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002c6a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002c6c:	b143      	cbz	r3, 8002c80 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002c6e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002c70:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002c72:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002c74:	185a      	adds	r2, r3, r1
 8002c76:	5c58      	ldrb	r0, [r3, r1]
 8002c78:	7852      	ldrb	r2, [r2, #1]
 8002c7a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002c7e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002c80:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002c82:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002c84:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002c86:	7853      	ldrb	r3, [r2, #1]
 8002c88:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002c8c:	4770      	bx	lr
	...

08002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	4604      	mov	r4, r0
    if (reader != 0)
 8002c94:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002c96:	460d      	mov	r5, r1
 8002c98:	4616      	mov	r6, r2
    if (reader != 0)
 8002c9a:	b1d8      	cbz	r0, 8002cd4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002c9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d208      	bcs.n	8002cb4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002ca2:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002ca6:	219e      	movs	r1, #158	@ 0x9e
 8002ca8:	480d      	ldr	r0, [pc, #52]	@ (8002ce0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002caa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 8002cae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002cb0:	f027 fab6 	bl	802a220 <__assert_func>
        reader->seek(offset);
 8002cb4:	6803      	ldr	r3, [r0, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002cba:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002cbc:	4632      	mov	r2, r6
 8002cbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002cc0:	6803      	ldr	r3, [r0, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	4798      	blx	r3
 8002cc6:	b910      	cbnz	r0, 8002cce <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002cc8:	230d      	movs	r3, #13
 8002cca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 8002cce:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002cd0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002cd4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002cd6:	4408      	add	r0, r1
 8002cd8:	e7fb      	b.n	8002cd2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 8002cda:	bf00      	nop
 8002cdc:	0802d26f 	.word	0x0802d26f
 8002ce0:	0802d1e3 	.word	0x0802d1e3
 8002ce4:	0802d25c 	.word	0x0802d25c

08002ce8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002cec:	6943      	ldr	r3, [r0, #20]
{
 8002cee:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002cf0:	b92b      	cbnz	r3, 8002cfe <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002cf2:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002cf4:	21e4      	movs	r1, #228	@ 0xe4
 8002cf6:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002cf8:	4822      	ldr	r0, [pc, #136]	@ (8002d84 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002cfa:	f027 fa91 	bl	802a220 <__assert_func>
    readData(currentMovieOffset, 8);
 8002cfe:	2208      	movs	r2, #8
 8002d00:	6981      	ldr	r1, [r0, #24]
 8002d02:	f7ff ffc5 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002d06:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002d08:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002d0c:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002d10:	3104      	adds	r1, #4
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7ff ff8e 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002d18:	69a3      	ldr	r3, [r4, #24]
 8002d1a:	4418      	add	r0, r3
 8002d1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d1e:	f100 0208 	add.w	r2, r0, #8
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d306      	bcc.n	8002d34 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002d26:	2301      	movs	r3, #1
    return false;
 8002d28:	2000      	movs	r0, #0
    frameNumber = 1;
 8002d2a:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002d2c:	6a23      	ldr	r3, [r4, #32]
 8002d2e:	61a3      	str	r3, [r4, #24]
}
 8002d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002d34:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d36:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	4620      	mov	r0, r4
        frameNumber++;
 8002d3e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d40:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002d44:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d46:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002d48:	f7ff ffa2 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002d4c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002d50:	4620      	mov	r0, r4
 8002d52:	4649      	mov	r1, r9
 8002d54:	f7ff ff89 	bl	8002c6a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d58:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002d5c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f7ff ff83 	bl	8002c6a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002d64:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d68:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7ff ff62 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002d70:	45b0      	cmp	r8, r6
 8002d72:	d1d1      	bne.n	8002d18 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002d74:	42bd      	cmp	r5, r7
 8002d76:	d1cf      	bne.n	8002d18 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002d78:	2001      	movs	r0, #1
 8002d7a:	e7d9      	b.n	8002d30 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002d7c:	0802d2b1 	.word	0x0802d2b1
 8002d80:	0802d2fa 	.word	0x0802d2fa
 8002d84:	0802d1e3 	.word	0x0802d1e3

08002d88 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002d88:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002d8a:	6803      	ldr	r3, [r0, #0]
 8002d8c:	bf38      	it	cc
 8002d8e:	2101      	movcc	r1, #1
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002d92:	b570      	push	{r4, r5, r6, lr}
 8002d94:	460d      	mov	r5, r1
 8002d96:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002d98:	4798      	blx	r3
 8002d9a:	42a8      	cmp	r0, r5
 8002d9c:	d204      	bcs.n	8002da8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	4620      	mov	r0, r4
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	4798      	blx	r3
 8002da6:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002da8:	1e6b      	subs	r3, r5, #1
 8002daa:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002dac:	2210      	movs	r2, #16
 8002dae:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002db0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002db4:	f106 0108 	add.w	r1, r6, #8
 8002db8:	f7ff ff6a 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002dbc:	f106 0110 	add.w	r1, r6, #16
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7ff ff37 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002dc6:	6a23      	ldr	r3, [r4, #32]
 8002dc8:	3b04      	subs	r3, #4
 8002dca:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002dcc:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002dd4:	2100      	movs	r1, #0
    readData(0, 72);
 8002dd6:	2248      	movs	r2, #72	@ 0x48
{
 8002dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ddc:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 8002dde:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002de0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002de4:	f7ff ff54 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002de8:	69a6      	ldr	r6, [r4, #24]
 8002dea:	2304      	movs	r3, #4
 8002dec:	4a63      	ldr	r2, [pc, #396]	@ (8002f7c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002dee:	4631      	mov	r1, r6
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff ff0f 	bl	8002c14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002df6:	b148      	cbz	r0, 8002e0c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002df8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002dfa:	4a61      	ldr	r2, [pc, #388]	@ (8002f80 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002dfc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 8002e00:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002e04:	4b5f      	ldr	r3, [pc, #380]	@ (8002f84 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002e06:	4860      	ldr	r0, [pc, #384]	@ (8002f88 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002e08:	f027 fa0a 	bl	802a220 <__assert_func>
    currentMovieOffset += 8;
 8002e0c:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002e10:	2304      	movs	r3, #4
 8002e12:	4a5e      	ldr	r2, [pc, #376]	@ (8002f8c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002e14:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002e16:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002e18:	f7ff fefc 	bl	8002c14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002e1c:	b138      	cbz	r0, 8002e2e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002e1e:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002e20:	4a57      	ldr	r2, [pc, #348]	@ (8002f80 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002e22:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002e26:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 8002e2a:	4b59      	ldr	r3, [pc, #356]	@ (8002f90 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002e2c:	e7eb      	b.n	8002e06 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002e2e:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002e32:	2304      	movs	r3, #4
 8002e34:	4a57      	ldr	r2, [pc, #348]	@ (8002f94 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002e36:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002e38:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002e3a:	f7ff feeb 	bl	8002c14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002e3e:	4607      	mov	r7, r0
 8002e40:	b138      	cbz	r0, 8002e52 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002e42:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002e44:	4a4e      	ldr	r2, [pc, #312]	@ (8002f80 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002e46:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002e4a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002e4e:	4b52      	ldr	r3, [pc, #328]	@ (8002f98 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002e50:	e7d9      	b.n	8002e06 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002e52:	f106 0110 	add.w	r1, r6, #16
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7ff feec 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	b920      	cbnz	r0, 8002e6a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002e60:	4b4e      	ldr	r3, [pc, #312]	@ (8002f9c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002e62:	f240 1141 	movw	r1, #321	@ 0x141
 8002e66:	4a46      	ldr	r2, [pc, #280]	@ (8002f80 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002e68:	e7cd      	b.n	8002e06 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 8002e6a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8002e6e:	2304      	movs	r3, #4
 8002e70:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002e72:	4620      	mov	r0, r4
 8002e74:	4641      	mov	r1, r8
 8002e76:	f7ff fecd 	bl	8002c14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d049      	beq.n	8002f12 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002e7e:	2306      	movs	r3, #6
 8002e80:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002e84:	2304      	movs	r3, #4
 8002e86:	4a47      	ldr	r2, [pc, #284]	@ (8002fa4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002e88:	f106 0118 	add.w	r1, r6, #24
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7ff fec1 	bl	8002c14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d03f      	beq.n	8002f16 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002e96:	2307      	movs	r3, #7
 8002e98:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002e9c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002e9e:	4f42      	ldr	r7, [pc, #264]	@ (8002fa8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002ea0:	220c      	movs	r2, #12
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f7ff fef3 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002eaa:	f105 0608 	add.w	r6, r5, #8
 8002eae:	2304      	movs	r3, #4
 8002eb0:	463a      	mov	r2, r7
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	4631      	mov	r1, r6
 8002eb6:	f7ff fead 	bl	8002c14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002eba:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d048      	beq.n	8002f54 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d148      	bne.n	8002f58 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002ec6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002ec8:	42ab      	cmp	r3, r5
 8002eca:	d849      	bhi.n	8002f60 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002ecc:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002ed0:	3504      	adds	r5, #4
 8002ed2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002ed4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	f7ff feac 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002edc:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002ede:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002ee0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7ff fea6 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002ee8:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002eea:	2204      	movs	r2, #4
 8002eec:	4620      	mov	r0, r4
 8002eee:	4631      	mov	r1, r6
 8002ef0:	f7ff fece 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8002fac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002ef8:	4631      	mov	r1, r6
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7ff fe8a 	bl	8002c14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d138      	bne.n	8002f76 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002f04:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002f06:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002f08:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002f0a:	69a3      	ldr	r3, [r4, #24]
 8002f0c:	6223      	str	r3, [r4, #32]
}
 8002f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002f12:	2701      	movs	r7, #1
 8002f14:	e7b6      	b.n	8002e84 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8002f16:	2f00      	cmp	r7, #0
 8002f18:	d0c0      	beq.n	8002e9c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002f1a:	f106 0120 	add.w	r1, r6, #32
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff fe88 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002f24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002f28:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002f2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f30:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002f32:	4620      	mov	r0, r4
 8002f34:	f7ff fe7e 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002f38:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002f3c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff fe78 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002f44:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002f48:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f7ff fe72 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002f50:	6120      	str	r0, [r4, #16]
 8002f52:	e7a3      	b.n	8002e9c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0b9      	beq.n	8002ecc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002f58:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002f5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002f5e:	e7d6      	b.n	8002f0e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002f60:	1d29      	adds	r1, r5, #4
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff fe66 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002f68:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	4629      	mov	r1, r5
 8002f70:	f7ff fe8e 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002f74:	e799      	b.n	8002eaa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002f76:	230b      	movs	r3, #11
 8002f78:	e7ef      	b.n	8002f5a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002f7a:	bf00      	nop
 8002f7c:	0802d32d 	.word	0x0802d32d
 8002f80:	0802d34b 	.word	0x0802d34b
 8002f84:	0802d332 	.word	0x0802d332
 8002f88:	0802d1e3 	.word	0x0802d1e3
 8002f8c:	0802d378 	.word	0x0802d378
 8002f90:	0802d37d 	.word	0x0802d37d
 8002f94:	0802d395 	.word	0x0802d395
 8002f98:	0802d39a 	.word	0x0802d39a
 8002f9c:	0802d3b0 	.word	0x0802d3b0
 8002fa0:	0802d3bc 	.word	0x0802d3bc
 8002fa4:	0802d3c1 	.word	0x0802d3c1
 8002fa8:	0802d3c6 	.word	0x0802d3c6
 8002fac:	0802d3cb 	.word	0x0802d3cb

08002fb0 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002fb0:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002fb8:	f7ff bf0c 	b.w	8002dd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08002fbc <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002fbc:	b510      	push	{r4, lr}
    movieData = 0;
 8002fbe:	2300      	movs	r3, #0
{
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4608      	mov	r0, r1
    movieData = 0;
 8002fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002fc6:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002fc8:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4798      	blx	r3
 8002fce:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002fd0:	4620      	mov	r0, r4
}
 8002fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002fd6:	f7ff befd 	b.w	8002dd4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08002fdc <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 8002fde:	4c14      	ldr	r4, [pc, #80]	@ (8003030 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8002fe0:	4d14      	ldr	r5, [pc, #80]	@ (8003034 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 8002fe2:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <JPEG_Decode_DMA+0x5c>)
 8002fe8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8002fea:	4b14      	ldr	r3, [pc, #80]	@ (800303c <JPEG_Decode_DMA+0x60>)
 8002fec:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 8002fee:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 8002ff0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002ff2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002ff4:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <JPEG_Decode_DMA+0x68>)
 8002ff6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <JPEG_Decode_DMA+0x6c>)
 8002ffa:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002ffc:	4b13      	ldr	r3, [pc, #76]	@ (800304c <JPEG_Decode_DMA+0x70>)
 8002ffe:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8003000:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8003002:	682a      	ldr	r2, [r5, #0]
 8003004:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8003008:	701c      	strb	r4, [r3, #0]
 800300a:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 800300c:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8003010:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8003014:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003018:	4a0e      	ldr	r2, [pc, #56]	@ (8003054 <JPEG_Decode_DMA+0x78>)
 800301a:	68d2      	ldr	r2, [r2, #12]
 800301c:	436a      	muls	r2, r5
 800301e:	9200      	str	r2, [sp, #0]
 8003020:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f00a f8e1 	bl	800d1ec <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800302a:	4620      	mov	r0, r4
 800302c:	b003      	add	sp, #12
 800302e:	bd30      	pop	{r4, r5, pc}
 8003030:	24009ffc 	.word	0x24009ffc
 8003034:	24009fd8 	.word	0x24009fd8
 8003038:	24009fe8 	.word	0x24009fe8
 800303c:	240009cc 	.word	0x240009cc
 8003040:	24009ff8 	.word	0x24009ff8
 8003044:	24009ff0 	.word	0x24009ff0
 8003048:	24009ff4 	.word	0x24009ff4
 800304c:	240009d4 	.word	0x240009d4
 8003050:	24000010 	.word	0x24000010
 8003054:	240009b4 	.word	0x240009b4

08003058 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8003058:	684b      	ldr	r3, [r1, #4]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d115      	bne.n	800308a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800305e:	68cb      	ldr	r3, [r1, #12]
 8003060:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8003062:	bf1e      	ittt	ne
 8003064:	f023 030f 	bicne.w	r3, r3, #15
 8003068:	3310      	addne	r3, #16
 800306a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800306c:	688b      	ldr	r3, [r1, #8]
 800306e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8003070:	bf1e      	ittt	ne
 8003072:	f023 030f 	bicne.w	r3, r3, #15
 8003076:	3310      	addne	r3, #16
 8003078:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800307a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800307c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800307e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8003080:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8003082:	4353      	muls	r3, r2
 8003084:	4a0e      	ldr	r2, [pc, #56]	@ (80030c0 <HAL_JPEG_InfoReadyCallback+0x68>)
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800308a:	2b02      	cmp	r3, #2
 800308c:	d10e      	bne.n	80030ac <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800308e:	68cb      	ldr	r3, [r1, #12]
 8003090:	071a      	lsls	r2, r3, #28
 8003092:	d003      	beq.n	800309c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8003094:	f023 030f 	bic.w	r3, r3, #15
 8003098:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800309a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800309c:	688b      	ldr	r3, [r1, #8]
 800309e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80030a0:	bf1e      	ittt	ne
 80030a2:	f023 0307 	bicne.w	r3, r3, #7
 80030a6:	3308      	addne	r3, #8
 80030a8:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80030aa:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1fc      	bne.n	80030aa <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80030b0:	68cb      	ldr	r3, [r1, #12]
 80030b2:	0758      	lsls	r0, r3, #29
 80030b4:	d0f2      	beq.n	800309c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80030b6:	f023 0307 	bic.w	r3, r3, #7
 80030ba:	3308      	adds	r3, #8
 80030bc:	e7ed      	b.n	800309a <HAL_JPEG_InfoReadyCallback+0x42>
 80030be:	bf00      	nop
 80030c0:	24009fe0 	.word	0x24009fe0

080030c4 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80030c4:	4a0b      	ldr	r2, [pc, #44]	@ (80030f4 <HAL_JPEG_GetDataCallback+0x30>)
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	440b      	add	r3, r1
    {
 80030ca:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80030cc:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80030ce:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <HAL_JPEG_GetDataCallback+0x34>)
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d20c      	bcs.n	80030f0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80030d6:	4c09      	ldr	r4, [pc, #36]	@ (80030fc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80030d8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80030da:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80030dc:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80030e0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80030e2:	bf28      	it	cs
 80030e4:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80030e8:	6021      	str	r1, [r4, #0]
        }
    }
 80030ea:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80030ec:	f00a b8e0 	b.w	800d2b0 <HAL_JPEG_ConfigInputBuffer>
    }
 80030f0:	bc30      	pop	{r4, r5}
 80030f2:	4770      	bx	lr
 80030f4:	24009ff8 	.word	0x24009ff8
 80030f8:	24009ff4 	.word	0x24009ff4
 80030fc:	24009ff0 	.word	0x24009ff0

08003100 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8003102:	4c20      	ldr	r4, [pc, #128]	@ (8003184 <HAL_JPEG_DataReadyCallback+0x84>)
 8003104:	2101      	movs	r1, #1
 8003106:	4d20      	ldr	r5, [pc, #128]	@ (8003188 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8003108:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800310a:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 800310c:	4f1f      	ldr	r7, [pc, #124]	@ (800318c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8003118:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <HAL_JPEG_DataReadyCallback+0x90>)
 800311c:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8003124:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	440a      	add	r2, r1
 800312c:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d901      	bls.n	800313e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	5ceb      	ldrb	r3, [r5, r3]
 8003144:	b133      	cbz	r3, 8003154 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8003146:	2102      	movs	r1, #2
 8003148:	4630      	mov	r0, r6
 800314a:	f00a f883 	bl	800d254 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800314e:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <HAL_JPEG_DataReadyCallback+0x94>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8003154:	6822      	ldr	r2, [r4, #0]
 8003156:	4630      	mov	r0, r6
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800315e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003162:	6869      	ldr	r1, [r5, #4]
 8003164:	435a      	muls	r2, r3
 8003166:	f00a f8a6 	bl	800d2b6 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <HAL_JPEG_DataReadyCallback+0x98>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	7a1a      	ldrb	r2, [r3, #8]
 8003170:	b93a      	cbnz	r2, 8003182 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8003172:	7a9b      	ldrb	r3, [r3, #10]
 8003174:	b92b      	cbnz	r3, 8003182 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_JPEG_DataReadyCallback+0x9c>)
 8003178:	6818      	ldr	r0, [r3, #0]
        }
    }
 800317a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800317e:	f00d bf5d 	b.w	801103c <osSemaphoreRelease>
    }
 8003182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003184:	24009fd8 	.word	0x24009fd8
 8003188:	24000010 	.word	0x24000010
 800318c:	240009b4 	.word	0x240009b4
 8003190:	240009d4 	.word	0x240009d4
 8003194:	24009fe8 	.word	0x24009fe8
 8003198:	24009fdc 	.word	0x24009fdc
 800319c:	240009d0 	.word	0x240009d0

080031a0 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 80031a0:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 80031a2:	e7fe      	b.n	80031a2 <HAL_JPEG_ErrorCallback+0x2>

080031a4 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 80031a4:	4b01      	ldr	r3, [pc, #4]	@ (80031ac <HAL_JPEG_DecodeCpltCallback+0x8>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
    }
 80031aa:	4770      	bx	lr
 80031ac:	24009fec 	.word	0x24009fec

080031b0 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 80031b0:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80031b2:	4d16      	ldr	r5, [pc, #88]	@ (800320c <JPEG_OutputHandler+0x5c>)
{
 80031b4:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80031b6:	682b      	ldr	r3, [r5, #0]
 80031b8:	b113      	cbz	r3, 80031c0 <JPEG_OutputHandler+0x10>
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <JPEG_OutputHandler+0x60>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	bb1b      	cbnz	r3, 8003208 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 80031c0:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <JPEG_OutputHandler+0x64>)
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	7a03      	ldrb	r3, [r0, #8]
 80031c6:	b963      	cbnz	r3, 80031e2 <JPEG_OutputHandler+0x32>
 80031c8:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <JPEG_OutputHandler+0x68>)
 80031ca:	4a14      	ldr	r2, [pc, #80]	@ (800321c <JPEG_OutputHandler+0x6c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <JPEG_OutputHandler+0x32>
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <JPEG_OutputHandler+0x60>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	b913      	cbnz	r3, 80031e2 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80031dc:	6803      	ldr	r3, [r0, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80031e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003220 <JPEG_OutputHandler+0x70>)
 80031e4:	6813      	ldr	r3, [r2, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10c      	bne.n	8003204 <JPEG_OutputHandler+0x54>
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <JPEG_OutputHandler+0x74>)
 80031ec:	490b      	ldr	r1, [pc, #44]	@ (800321c <JPEG_OutputHandler+0x6c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	b933      	cbnz	r3, 8003204 <JPEG_OutputHandler+0x54>
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	b923      	cbnz	r3, 8003204 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80031fa:	2102      	movs	r1, #2
 80031fc:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80031fe:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8003200:	f00a fa87 	bl	800d712 <HAL_JPEG_Resume>
        return 1;
 8003204:	2002      	movs	r0, #2
    }

    return 2;
}
 8003206:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8003208:	2001      	movs	r0, #1
 800320a:	e7fc      	b.n	8003206 <JPEG_OutputHandler+0x56>
 800320c:	24009fec 	.word	0x24009fec
 8003210:	240009c8 	.word	0x240009c8
 8003214:	24009fdc 	.word	0x24009fdc
 8003218:	240009cc 	.word	0x240009cc
 800321c:	24000010 	.word	0x24000010
 8003220:	24009fe8 	.word	0x24009fe8
 8003224:	24009fd8 	.word	0x24009fd8

08003228 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4605      	mov	r5, r0
    if (length == 0)
 800322c:	2a00      	cmp	r2, #0
 800322e:	d035      	beq.n	800329c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8003230:	2b00      	cmp	r3, #0
 8003232:	d033      	beq.n	800329c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8003234:	481a      	ldr	r0, [pc, #104]	@ (80032a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8003236:	2403      	movs	r4, #3
 8003238:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800323a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800323c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800323e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8003242:	bf18      	it	ne
 8003244:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8003248:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800324a:	bf18      	it	ne
 800324c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800324e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8003250:	0924      	lsrs	r4, r4, #4
 8003252:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8003254:	692c      	ldr	r4, [r5, #16]
 8003256:	f014 040f 	ands.w	r4, r4, #15
 800325a:	bf18      	it	ne
 800325c:	f1c4 0410 	rsbne	r4, r4, #16
 8003260:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8003262:	4810      	ldr	r0, [pc, #64]	@ (80032a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8003264:	f7ff feba 	bl	8002fdc <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8003268:	4c0f      	ldr	r4, [pc, #60]	@ (80032a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800326a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800326c:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800326e:	4d0d      	ldr	r5, [pc, #52]	@ (80032a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8003270:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8003272:	4628      	mov	r0, r5
 8003274:	f7ff ff9c 	bl	80031b0 <JPEG_OutputHandler>
 8003278:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d105      	bne.n	800328c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8003280:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8003282:	f04f 31ff 	mov.w	r1, #4294967295
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	f00d feac 	bl	8010fe4 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d1ef      	bne.n	8003272 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	4a07      	ldr	r2, [pc, #28]	@ (80032b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8003296:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8003298:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800329a:	6013      	str	r3, [r2, #0]
}
 800329c:	bd70      	pop	{r4, r5, r6, pc}
 800329e:	bf00      	nop
 80032a0:	240009b4 	.word	0x240009b4
 80032a4:	240007cc 	.word	0x240007cc
 80032a8:	24009fe4 	.word	0x24009fe4
 80032ac:	24009fdc 	.word	0x24009fdc
 80032b0:	240009d0 	.word	0x240009d0
 80032b4:	24009fec 	.word	0x24009fec
 80032b8:	240009c8 	.word	0x240009c8

080032bc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80032bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c0:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80032c2:	6943      	ldr	r3, [r0, #20]
{
 80032c4:	b085      	sub	sp, #20
 80032c6:	4604      	mov	r4, r0
 80032c8:	460f      	mov	r7, r1
 80032ca:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80032cc:	b92b      	cbnz	r3, 80032da <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 80032ce:	4b29      	ldr	r3, [pc, #164]	@ (8003374 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80032d0:	21b0      	movs	r1, #176	@ 0xb0
 80032d2:	4a29      	ldr	r2, [pc, #164]	@ (8003378 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80032d4:	4829      	ldr	r0, [pc, #164]	@ (800337c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80032d6:	f026 ffa3 	bl	802a220 <__assert_func>
    readData(currentMovieOffset, 8);
 80032da:	2208      	movs	r2, #8
 80032dc:	6981      	ldr	r1, [r0, #24]
 80032de:	f7ff fcd7 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80032e2:	69a6      	ldr	r6, [r4, #24]
 80032e4:	4620      	mov	r0, r4
 80032e6:	4631      	mov	r1, r6
 80032e8:	f7ff fcbf 	bl	8002c6a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80032ec:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80032ee:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff fcba 	bl	8002c6a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80032f6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80032f8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80032fa:	4620      	mov	r0, r4
 80032fc:	f7ff fc9a 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8003300:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8003304:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8003306:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8003308:	1842      	adds	r2, r0, r1
 800330a:	429a      	cmp	r2, r3
 800330c:	d226      	bcs.n	800335c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800330e:	f243 0330 	movw	r3, #12336	@ 0x3030
 8003312:	459b      	cmp	fp, r3
 8003314:	d117      	bne.n	8003346 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8003316:	f246 3364 	movw	r3, #25444	@ 0x6364
 800331a:	459a      	cmp	sl, r3
 800331c:	d113      	bne.n	8003346 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800331e:	b190      	cbz	r0, 8003346 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8003320:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8003322:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff fcb3 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800332a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800332c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800332e:	462a      	mov	r2, r5
 8003330:	4620      	mov	r0, r4
 8003332:	f8cd 8000 	str.w	r8, [sp]
 8003336:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800333a:	463b      	mov	r3, r7
 800333c:	f7ff ff74 	bl	8003228 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8003340:	6963      	ldr	r3, [r4, #20]
 8003342:	3301      	adds	r3, #1
 8003344:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8003346:	69a3      	ldr	r3, [r4, #24]
 8003348:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800334a:	b905      	cbnz	r5, 800334e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800334c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800334e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8003350:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8003352:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8003356:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8003358:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800335a:	d109      	bne.n	8003370 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800335c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800335e:	2001      	movs	r0, #1
        frameNumber = 1;
 8003360:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8003362:	6a23      	ldr	r3, [r4, #32]
 8003364:	61a3      	str	r3, [r4, #24]
}
 8003366:	f080 0001 	eor.w	r0, r0, #1
 800336a:	b005      	add	sp, #20
 800336c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8003370:	2000      	movs	r0, #0
 8003372:	e7f8      	b.n	8003366 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8003374:	0802d2b1 	.word	0x0802d2b1
 8003378:	0802d3d0 	.word	0x0802d3d0
 800337c:	0802d1e3 	.word	0x0802d1e3

08003380 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8003384:	6981      	ldr	r1, [r0, #24]
{
 8003386:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8003388:	2208      	movs	r2, #8
 800338a:	f7ff fc81 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800338e:	69a7      	ldr	r7, [r4, #24]
 8003390:	4620      	mov	r0, r4
 8003392:	1d39      	adds	r1, r7, #4
 8003394:	f7ff fc4e 	bl	8002c34 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8003398:	f107 0108 	add.w	r1, r7, #8
 800339c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800339e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff fc75 	bl	8002c90 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80033a6:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 80033a8:	b16e      	cbz	r6, 80033c6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80033aa:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80033ac:	4c07      	ldr	r4, [pc, #28]	@ (80033cc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 80033ae:	4d08      	ldr	r5, [pc, #32]	@ (80033d0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80033b0:	4633      	mov	r3, r6
 80033b2:	4807      	ldr	r0, [pc, #28]	@ (80033d0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 80033b4:	f7ff fe12 	bl	8002fdc <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80033b8:	4628      	mov	r0, r5
 80033ba:	f7ff fef9 	bl	80031b0 <JPEG_OutputHandler>
 80033be:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f8      	beq.n	80033b8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 80033c6:	2001      	movs	r0, #1
 80033c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ca:	bf00      	nop
 80033cc:	24009fe4 	.word	0x24009fe4
 80033d0:	240007cc 	.word	0x240007cc

080033d4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80033d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003444 <DMA2D_CopyBuffer+0x70>)
 80033d6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80033da:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80033dc:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80033e0:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80033e2:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033e4:	4e18      	ldr	r6, [pc, #96]	@ (8003448 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80033e6:	4f19      	ldr	r7, [pc, #100]	@ (800344c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80033e8:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80033ec:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80033f0:	434d      	muls	r5, r1
 80033f2:	6911      	ldr	r1, [r2, #16]
 80033f4:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033f8:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80033fa:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033fc:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80033fe:	683f      	ldr	r7, [r7, #0]
 8003400:	68d3      	ldr	r3, [r2, #12]
 8003402:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8003404:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8003406:	45bc      	cmp	ip, r7
 8003408:	d317      	bcc.n	800343a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	f1c2 0210 	rsb	r2, r2, #16
 8003410:	430a      	orrs	r2, r1
 8003412:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8003414:	4a0e      	ldr	r2, [pc, #56]	@ (8003450 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8003416:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 800341a:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800341c:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <DMA2D_CopyBuffer+0x74>)
 8003420:	4421      	add	r1, r4
 8003422:	4429      	add	r1, r5
 8003424:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8003426:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8003428:	2300      	movs	r3, #0
 800342a:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 800342c:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <DMA2D_CopyBuffer+0x80>)
 800342e:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8003430:	6843      	ldr	r3, [r0, #4]
 8003432:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003434:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <DMA2D_CopyBuffer+0x84>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800343a:	f041 0110 	orr.w	r1, r1, #16
 800343e:	6471      	str	r1, [r6, #68]	@ 0x44
 8003440:	e7e8      	b.n	8003414 <DMA2D_CopyBuffer+0x40>
 8003442:	bf00      	nop
 8003444:	240009b4 	.word	0x240009b4
 8003448:	52001000 	.word	0x52001000
 800344c:	24009fe0 	.word	0x24009fe0
 8003450:	24009ffc 	.word	0x24009ffc
 8003454:	ff09000b 	.word	0xff09000b
 8003458:	00012301 	.word	0x00012301

0800345c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800345e:	2200      	movs	r2, #0
 8003460:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8003462:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8003464:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8003466:	3101      	adds	r1, #1
 8003468:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	2901      	cmp	r1, #1
 800346e:	d900      	bls.n	8003472 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8003470:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8003472:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <DMA2D_ExternalJobCompleted+0x38>)
 8003474:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <DMA2D_ExternalJobCompleted+0x3c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68d2      	ldr	r2, [r2, #12]
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	68c2      	ldr	r2, [r0, #12]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8003482:	4b06      	ldr	r3, [pc, #24]	@ (800349c <DMA2D_ExternalJobCompleted+0x40>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <DMA2D_ExternalJobCompleted+0x44>)
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	f00d bdd6 	b.w	801103c <osSemaphoreRelease>
 8003490:	240009cc 	.word	0x240009cc
 8003494:	24009fe0 	.word	0x24009fe0
 8003498:	240009b4 	.word	0x240009b4
 800349c:	240009c8 	.word	0x240009c8
 80034a0:	240009d0 	.word	0x240009d0

080034a4 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80034a4:	2101      	movs	r1, #1
 80034a6:	2200      	movs	r2, #0
{
 80034a8:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80034aa:	4608      	mov	r0, r1
 80034ac:	f00d fd50 	bl	8010f50 <osSemaphoreNew>
 80034b0:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80034b2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80034b4:	b928      	cbnz	r0, 80034c2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80034b6:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80034b8:	2128      	movs	r1, #40	@ 0x28
 80034ba:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80034bc:	480a      	ldr	r0, [pc, #40]	@ (80034e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80034be:	f026 feaf 	bl	802a220 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2104      	movs	r1, #4
 80034c6:	2001      	movs	r0, #1
 80034c8:	f00d fde1 	bl	801108e <osMessageQueueNew>
 80034cc:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80034ce:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80034d0:	b918      	cbnz	r0, 80034da <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80034d2:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80034d4:	212c      	movs	r1, #44	@ 0x2c
 80034d6:	4a03      	ldr	r2, [pc, #12]	@ (80034e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80034d8:	e7f0      	b.n	80034bc <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80034da:	bd08      	pop	{r3, pc}
 80034dc:	2400a004 	.word	0x2400a004
 80034e0:	0802d470 	.word	0x0802d470
 80034e4:	0802d4b9 	.word	0x0802d4b9
 80034e8:	0802d4e8 	.word	0x0802d4e8
 80034ec:	2400a000 	.word	0x2400a000
 80034f0:	0802d557 	.word	0x0802d557

080034f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80034f4:	4b02      	ldr	r3, [pc, #8]	@ (8003500 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80034f6:	f04f 31ff 	mov.w	r1, #4294967295
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	f00d bd72 	b.w	8010fe4 <osSemaphoreAcquire>
 8003500:	2400a004 	.word	0x2400a004

08003504 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8003504:	4b01      	ldr	r3, [pc, #4]	@ (800350c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	f00d bd98 	b.w	801103c <osSemaphoreRelease>
 800350c:	2400a004 	.word	0x2400a004

08003510 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8003510:	4b02      	ldr	r3, [pc, #8]	@ (800351c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8003512:	2100      	movs	r1, #0
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	f00d bd65 	b.w	8010fe4 <osSemaphoreAcquire>
 800351a:	bf00      	nop
 800351c:	2400a004 	.word	0x2400a004

08003520 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8003520:	f7ff bff0 	b.w	8003504 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08003524 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8003524:	2300      	movs	r3, #0
 8003526:	4803      	ldr	r0, [pc, #12]	@ (8003534 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8003528:	4903      	ldr	r1, [pc, #12]	@ (8003538 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800352a:	461a      	mov	r2, r3
 800352c:	6800      	ldr	r0, [r0, #0]
 800352e:	f00d bde9 	b.w	8011104 <osMessageQueuePut>
 8003532:	bf00      	nop
 8003534:	2400a000 	.word	0x2400a000
 8003538:	24000030 	.word	0x24000030

0800353c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800353c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800353e:	2300      	movs	r3, #0
 8003540:	4c07      	ldr	r4, [pc, #28]	@ (8003560 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8003542:	a901      	add	r1, sp, #4
 8003544:	461a      	mov	r2, r3
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	f00d fe0d 	bl	8011166 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	2200      	movs	r2, #0
 8003552:	a901      	add	r1, sp, #4
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	f00d fe06 	bl	8011166 <osMessageQueueGet>
}
 800355a:	b002      	add	sp, #8
 800355c:	bd10      	pop	{r4, pc}
 800355e:	bf00      	nop
 8003560:	2400a000 	.word	0x2400a000

08003564 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8003564:	6803      	ldr	r3, [r0, #0]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	4718      	bx	r3

0800356a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800356a:	2001      	movs	r0, #1
 800356c:	4770      	bx	lr

0800356e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 800356e:	e7fe      	b.n	800356e <DMA2D_XferErrorCallback>

08003570 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8003570:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8003574:	4770      	bx	lr
	...

08003578 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8003578:	b510      	push	{r4, lr}
 800357a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8003584:	f00d fca2 	bl	8010ecc <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8003588:	6860      	ldr	r0, [r4, #4]
 800358a:	6803      	ldr	r3, [r0, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4798      	blx	r3
 8003590:	b978      	cbnz	r0, 80035b2 <_ZN8STM32DMA5startEv+0x3a>
 8003592:	7a63      	ldrb	r3, [r4, #9]
 8003594:	b16b      	cbz	r3, 80035b2 <_ZN8STM32DMA5startEv+0x3a>
 8003596:	7a23      	ldrb	r3, [r4, #8]
 8003598:	b95b      	cbnz	r3, 80035b2 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 800359a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 800359e:	4620      	mov	r0, r4
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 80035a6:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 80035aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 80035ae:	f00d bcb0 	b.w	8010f12 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 80035b2:	490b      	ldr	r1, [pc, #44]	@ (80035e0 <_ZN8STM32DMA5startEv+0x68>)
 80035b4:	4a0b      	ldr	r2, [pc, #44]	@ (80035e4 <_ZN8STM32DMA5startEv+0x6c>)
 80035b6:	680b      	ldr	r3, [r1, #0]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d1f2      	bne.n	80035a6 <_ZN8STM32DMA5startEv+0x2e>
 80035c0:	7a20      	ldrb	r0, [r4, #8]
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d1ef      	bne.n	80035a6 <_ZN8STM32DMA5startEv+0x2e>
 80035c6:	7aa0      	ldrb	r0, [r4, #10]
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d1ec      	bne.n	80035a6 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80035cc:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 80035ce:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80035d2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 80035d6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80035d8:	f7ff fefc 	bl	80033d4 <DMA2D_CopyBuffer>
    }
 80035dc:	e7e3      	b.n	80035a6 <_ZN8STM32DMA5startEv+0x2e>
 80035de:	bf00      	nop
 80035e0:	240009cc 	.word	0x240009cc
 80035e4:	24000010 	.word	0x24000010

080035e8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035ee:	6003      	str	r3, [r0, #0]
 80035f0:	4b04      	ldr	r3, [pc, #16]	@ (8003604 <_ZN8STM32DMAD1Ev+0x1c>)
 80035f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80035f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80035fa:	f3bf 8f6f 	isb	sy
}
 80035fe:	4770      	bx	lr
 8003600:	0802d718 	.word	0x0802d718
 8003604:	e000e100 	.word	0xe000e100

08003608 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8003608:	b510      	push	{r4, lr}
 800360a:	4604      	mov	r4, r0
}
 800360c:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8003610:	f7ff ffea 	bl	80035e8 <_ZN8STM32DMAD1Ev>
 8003614:	4620      	mov	r0, r4
 8003616:	f026 f9af 	bl	8029978 <_ZdlPvj>
 800361a:	4620      	mov	r0, r4
 800361c:	bd10      	pop	{r4, pc}
	...

08003620 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003620:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8003622:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003624:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003628:	f042 0210 	orr.w	r2, r2, #16
 800362c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8003630:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003634:	f002 0210 	and.w	r2, r2, #16
 8003638:	9201      	str	r2, [sp, #4]
 800363a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800363c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800363e:	f042 0210 	orr.w	r2, r2, #16
 8003642:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003644:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003646:	f022 0210 	bic.w	r2, r2, #16
 800364a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <_ZN8STM32DMA10initializeEv+0x48>)
 800364e:	4a07      	ldr	r2, [pc, #28]	@ (800366c <_ZN8STM32DMA10initializeEv+0x4c>)
 8003650:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8003652:	4a07      	ldr	r2, [pc, #28]	@ (8003670 <_ZN8STM32DMA10initializeEv+0x50>)
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003656:	4b07      	ldr	r3, [pc, #28]	@ (8003674 <_ZN8STM32DMA10initializeEv+0x54>)
 8003658:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800365c:	609a      	str	r2, [r3, #8]
}
 800365e:	b002      	add	sp, #8
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400
 8003668:	24000840 	.word	0x24000840
 800366c:	080038bd 	.word	0x080038bd
 8003670:	0800356f 	.word	0x0800356f
 8003674:	e000e100 	.word	0xe000e100

08003678 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8003678:	b508      	push	{r3, lr}
    switch (format)
 800367a:	280a      	cmp	r0, #10
 800367c:	d809      	bhi.n	8003692 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 800367e:	e8df f000 	tbb	[pc, r0]
 8003682:	1006      	.short	0x1006
 8003684:	0808080e 	.word	0x0808080e
 8003688:	10101008 	.word	0x10101008
 800368c:	10          	.byte	0x10
 800368d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800368e:	2002      	movs	r0, #2
}
 8003690:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8003694:	2191      	movs	r1, #145	@ 0x91
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003698:	4805      	ldr	r0, [pc, #20]	@ (80036b0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800369a:	f026 fdc1 	bl	802a220 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800369e:	2000      	movs	r0, #0
 80036a0:	e7f6      	b.n	8003690 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 80036a2:	2001      	movs	r0, #1
    return dma2dColorMode;
 80036a4:	e7f4      	b.n	8003690 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80036a6:	bf00      	nop
 80036a8:	0802d599 	.word	0x0802d599
 80036ac:	0802d5b4 	.word	0x0802d5b4
 80036b0:	0802d5ff 	.word	0x0802d5ff

080036b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80036b8:	7f88      	ldrb	r0, [r1, #30]
 80036ba:	f7ff ffdd 	bl	8003678 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80036be:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80036c0:	8aa5      	ldrh	r5, [r4, #20]
 80036c2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80036c4:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80036c6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80036ca:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80036ce:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80036d0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80036d2:	1b52      	subs	r2, r2, r5
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80036d6:	6825      	ldr	r5, [r4, #0]
 80036d8:	2d08      	cmp	r5, #8
 80036da:	d10e      	bne.n	80036fa <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80036dc:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80036de:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80036e0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80036e2:	4a0a      	ldr	r2, [pc, #40]	@ (800370c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80036e4:	7f20      	ldrb	r0, [r4, #28]
 80036e6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80036ea:	61da      	str	r2, [r3, #28]
        return color;
 80036ec:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80036ee:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 80036f0:	4a07      	ldr	r2, [pc, #28]	@ (8003710 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80036f2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80036f4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 80036f6:	601a      	str	r2, [r3, #0]
    }
}
 80036f8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80036fa:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80036fc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80036fe:	611a      	str	r2, [r3, #16]
 8003700:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003702:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003704:	4a03      	ldr	r2, [pc, #12]	@ (8003714 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8003706:	e7f6      	b.n	80036f6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8003708:	52001000 	.word	0x52001000
 800370c:	00010009 	.word	0x00010009
 8003710:	00022301 	.word	0x00022301
 8003714:	00032301 	.word	0x00032301

08003718 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8003718:	b508      	push	{r3, lr}
    switch (format)
 800371a:	280b      	cmp	r0, #11
 800371c:	d80b      	bhi.n	8003736 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 800371e:	e8df f000 	tbb	[pc, r0]
 8003722:	1206      	.short	0x1206
 8003724:	0a0a0a10 	.word	0x0a0a0a10
 8003728:	0808080a 	.word	0x0808080a
 800372c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800372e:	2002      	movs	r0, #2
}
 8003730:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8003732:	2005      	movs	r0, #5
        break;
 8003734:	e7fc      	b.n	8003730 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8003736:	4b05      	ldr	r3, [pc, #20]	@ (800374c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003738:	2170      	movs	r1, #112	@ 0x70
 800373a:	4a05      	ldr	r2, [pc, #20]	@ (8003750 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800373c:	4805      	ldr	r0, [pc, #20]	@ (8003754 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 800373e:	f026 fd6f 	bl	802a220 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003742:	2000      	movs	r0, #0
 8003744:	e7f4      	b.n	8003730 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8003746:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003748:	e7f2      	b.n	8003730 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800374a:	bf00      	nop
 800374c:	0802d599 	.word	0x0802d599
 8003750:	0802d66c 	.word	0x0802d66c
 8003754:	0802d5ff 	.word	0x0802d5ff

08003758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800375c:	7f4f      	ldrb	r7, [r1, #29]
{
 800375e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003760:	4638      	mov	r0, r7
 8003762:	f7ff ffd9 	bl	8003718 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003766:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800376a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800376c:	4628      	mov	r0, r5
 800376e:	f7ff ffd3 	bl	8003718 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8003772:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003774:	4628      	mov	r0, r5
 8003776:	f7ff ff7f 	bl	8003678 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800377a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 800377e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003782:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003786:	4b45      	ldr	r3, [pc, #276]	@ (800389c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003788:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800378a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800378c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800378e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003790:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003792:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003796:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003798:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800379c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80037a2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80037a6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80037a8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80037aa:	f8d9 4000 	ldr.w	r4, [r9]
 80037ae:	f899 201c 	ldrb.w	r2, [r9, #28]
 80037b2:	2c80      	cmp	r4, #128	@ 0x80
 80037b4:	d022      	beq.n	80037fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80037b6:	d80f      	bhi.n	80037d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80037b8:	2c20      	cmp	r4, #32
 80037ba:	d066      	beq.n	800388a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80037bc:	2c40      	cmp	r4, #64	@ 0x40
 80037be:	d064      	beq.n	800388a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80037c0:	2c04      	cmp	r4, #4
 80037c2:	d05c      	beq.n	800387e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80037c4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80037c8:	4b34      	ldr	r3, [pc, #208]	@ (800389c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80037ca:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80037cc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80037d0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80037d2:	d060      	beq.n	8003896 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80037d4:	4a32      	ldr	r2, [pc, #200]	@ (80038a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80037d6:	e03f      	b.n	8003858 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80037d8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80037dc:	d004      	beq.n	80037e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80037de:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80037e2:	d1ef      	bne.n	80037c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80037e4:	482f      	ldr	r0, [pc, #188]	@ (80038a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 80037e6:	e000      	b.n	80037ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80037e8:	482f      	ldr	r0, [pc, #188]	@ (80038a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80037ea:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 80037ee:	61da      	str	r2, [r3, #28]
 80037f0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80037f4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80037f6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80037f8:	6159      	str	r1, [r3, #20]
 80037fa:	e02c      	b.n	8003856 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80037fc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003800:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003804:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003808:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800380a:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800380c:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800380e:	1d21      	adds	r1, r4, #4
 8003810:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8003812:	7821      	ldrb	r1, [r4, #0]
 8003814:	b141      	cbz	r1, 8003828 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003816:	2901      	cmp	r1, #1
 8003818:	d021      	beq.n	800385e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800381a:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 800381c:	f240 110b 	movw	r1, #267	@ 0x10b
 8003820:	4a23      	ldr	r2, [pc, #140]	@ (80038b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8003822:	4824      	ldr	r0, [pc, #144]	@ (80038b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003824:	f026 fcfc 	bl	802a220 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	8861      	ldrh	r1, [r4, #2]
 800382c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003830:	3901      	subs	r1, #1
 8003832:	f022 0210 	bic.w	r2, r2, #16
 8003836:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800383a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 800383c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800383e:	4b17      	ldr	r3, [pc, #92]	@ (800389c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003840:	69d9      	ldr	r1, [r3, #28]
 8003842:	f041 0120 	orr.w	r1, r1, #32
 8003846:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003848:	69d9      	ldr	r1, [r3, #28]
 800384a:	0689      	lsls	r1, r1, #26
 800384c:	d4fc      	bmi.n	8003848 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800384e:	2110      	movs	r1, #16
 8003850:	6099      	str	r1, [r3, #8]
            if (blend)
 8003852:	2a00      	cmp	r2, #0
 8003854:	d0be      	beq.n	80037d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003856:	4a18      	ldr	r2, [pc, #96]	@ (80038b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003858:	601a      	str	r2, [r3, #0]
}
 800385a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800385e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003860:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003862:	8860      	ldrh	r0, [r4, #2]
 8003864:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8003868:	bf18      	it	ne
 800386a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800386c:	3801      	subs	r0, #1
 800386e:	f021 0110 	bic.w	r1, r1, #16
 8003872:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003876:	f041 0110 	orr.w	r1, r1, #16
 800387a:	61d9      	str	r1, [r3, #28]
                break;
 800387c:	e7df      	b.n	800383e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800387e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8003882:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003886:	61da      	str	r2, [r3, #28]
 8003888:	e7b5      	b.n	80037f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 800388a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 800388e:	4b03      	ldr	r3, [pc, #12]	@ (800389c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003890:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003894:	e7f7      	b.n	8003886 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003896:	f242 3201 	movw	r2, #8961	@ 0x2301
 800389a:	e7dd      	b.n	8003858 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 800389c:	52001000 	.word	0x52001000
 80038a0:	00012301 	.word	0x00012301
 80038a4:	00020009 	.word	0x00020009
 80038a8:	0002000a 	.word	0x0002000a
 80038ac:	0802d6b6 	.word	0x0802d6b6
 80038b0:	0802d6d0 	.word	0x0802d6d0
 80038b4:	0802d5ff 	.word	0x0802d5ff
 80038b8:	00022301 	.word	0x00022301

080038bc <DMA2D_XferCpltCallback>:
 80038bc:	4b02      	ldr	r3, [pc, #8]	@ (80038c8 <DMA2D_XferCpltCallback+0xc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80038c2:	6803      	ldr	r3, [r0, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4718      	bx	r3
 80038c8:	24028770 	.word	0x24028770

080038cc <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 80038cc:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 80038d4:	b9d3      	cbnz	r3, 800390c <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 80038d6:	6803      	ldr	r3, [r0, #0]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 80038dc:	4919      	ldr	r1, [pc, #100]	@ (8003944 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 80038de:	4a1a      	ldr	r2, [pc, #104]	@ (8003948 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 80038e0:	680b      	ldr	r3, [r1, #0]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	5cd3      	ldrb	r3, [r2, r3]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d12a      	bne.n	8003940 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80038ea:	4818      	ldr	r0, [pc, #96]	@ (800394c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 80038ec:	6800      	ldr	r0, [r0, #0]
 80038ee:	bb38      	cbnz	r0, 8003940 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80038f0:	7a20      	ldrb	r0, [r4, #8]
 80038f2:	bb28      	cbnz	r0, 8003940 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80038f4:	7aa0      	ldrb	r0, [r4, #10]
 80038f6:	bb18      	cbnz	r0, 8003940 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80038f8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 80038fa:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 80038fe:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003900:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003908:	f7ff bd64 	b.w	80033d4 <DMA2D_CopyBuffer>
        if (isRunning)
 800390c:	7a03      	ldrb	r3, [r0, #8]
 800390e:	b143      	cbz	r3, 8003922 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003910:	2300      	movs	r3, #0
 8003912:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800391a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800391e:	f7ff fd9d 	bl	800345c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8003922:	6860      	ldr	r0, [r4, #4]
 8003924:	6803      	ldr	r3, [r0, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4798      	blx	r3
 800392a:	b948      	cbnz	r0, 8003940 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800392c:	7a63      	ldrb	r3, [r4, #9]
 800392e:	b13b      	cbz	r3, 8003940 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003930:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8003932:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8003936:	4620      	mov	r0, r4
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 800393e:	4718      	bx	r3
    }
 8003940:	bd10      	pop	{r4, pc}
 8003942:	bf00      	nop
 8003944:	240009cc 	.word	0x240009cc
 8003948:	24000010 	.word	0x24000010
 800394c:	240009c8 	.word	0x240009c8

08003950 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003954:	4b0e      	ldr	r3, [pc, #56]	@ (8003990 <_ZN8STM32DMAC1Ev+0x40>)
 8003956:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003958:	2600      	movs	r6, #0
 800395a:	4625      	mov	r5, r4
 800395c:	2260      	movs	r2, #96	@ 0x60
 800395e:	6060      	str	r0, [r4, #4]
 8003960:	7226      	strb	r6, [r4, #8]
 8003962:	7266      	strb	r6, [r4, #9]
 8003964:	f845 3b20 	str.w	r3, [r5], #32
 8003968:	4629      	mov	r1, r5
 800396a:	f011 fdc1 	bl	80154f0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800396e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8003972:	60ee      	str	r6, [r5, #12]
 8003974:	3524      	adds	r5, #36	@ 0x24
 8003976:	429d      	cmp	r5, r3
 8003978:	d1fb      	bne.n	8003972 <_ZN8STM32DMAC1Ev+0x22>
 800397a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 800397e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003980:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8003984:	f00d fa6d 	bl	8010e62 <osMutexNew>
 8003988:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 800398c:	4620      	mov	r0, r4
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	0802d718 	.word	0x0802d718

08003994 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003994:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	07d2      	lsls	r2, r2, #31
 800399a:	d4fc      	bmi.n	8003996 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800399c:	2223      	movs	r2, #35	@ 0x23
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	52001000 	.word	0x52001000

080039a8 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80039a8:	4a0b      	ldr	r2, [pc, #44]	@ (80039d8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80039aa:	6953      	ldr	r3, [r2, #20]
 80039ac:	03db      	lsls	r3, r3, #15
 80039ae:	d511      	bpl.n	80039d4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80039b0:	2900      	cmp	r1, #0
 80039b2:	dd0f      	ble.n	80039d4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80039b4:	f000 031f 	and.w	r3, r0, #31
 80039b8:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80039ba:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80039be:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80039c0:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80039c4:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80039c6:	1a0b      	subs	r3, r1, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dcf9      	bgt.n	80039c0 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 80039cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039d0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 80039dc:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80039de:	4c10      	ldr	r4, [pc, #64]	@ (8003a20 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 80039e0:	6825      	ldr	r5, [r4, #0]
 80039e2:	07ed      	lsls	r5, r5, #31
 80039e4:	d4fc      	bmi.n	80039e0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80039e6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80039e8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 80039ea:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80039ec:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80039ee:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80039f2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80039f6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80039f8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80039fa:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 80039fc:	d00c      	beq.n	8003a18 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80039fe:	4909      	ldr	r1, [pc, #36]	@ (8003a24 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003a00:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003a04:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003a06:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8003a0a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003a0e:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003a10:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8003a12:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003a14:	6023      	str	r3, [r4, #0]
    }
}
 8003a16:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003a18:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003a1a:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003a1c:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003a1e:	e7f9      	b.n	8003a14 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003a20:	52001000 	.word	0x52001000
 8003a24:	00010009 	.word	0x00010009
 8003a28:	00020001 	.word	0x00020001
 8003a2c:	00030001 	.word	0x00030001

08003a30 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003a30:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003a32:	4c0e      	ldr	r4, [pc, #56]	@ (8003a6c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003a34:	6825      	ldr	r5, [r4, #0]
 8003a36:	07ed      	lsls	r5, r5, #31
 8003a38:	d4fc      	bmi.n	8003a34 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a3a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003a3c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8003a3e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a40:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003a42:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003a46:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003a4a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003a4c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003a4e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003a50:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8003a52:	d007      	beq.n	8003a64 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003a54:	4a06      	ldr	r2, [pc, #24]	@ (8003a70 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8003a56:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8003a5a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003a5c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003a5e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003a60:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003a62:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003a64:	4b03      	ldr	r3, [pc, #12]	@ (8003a74 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8003a66:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003a68:	6025      	str	r5, [r4, #0]
}
 8003a6a:	e7fa      	b.n	8003a62 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8003a6c:	52001000 	.word	0x52001000
 8003a70:	00020001 	.word	0x00020001
 8003a74:	ff020001 	.word	0xff020001

08003a78 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003a78:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003a7a:	4c0b      	ldr	r4, [pc, #44]	@ (8003aa8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8003a7c:	6825      	ldr	r5, [r4, #0]
 8003a7e:	07ed      	lsls	r5, r5, #31
 8003a80:	d4fc      	bmi.n	8003a7c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a82:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003a84:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003a86:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a88:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003a8a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003a90:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003a92:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003a94:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003a96:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003a98:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003a9a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003a9c:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003a9e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003aa0:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003aa2:	6023      	str	r3, [r4, #0]
}
 8003aa4:	bd30      	pop	{r4, r5, pc}
 8003aa6:	bf00      	nop
 8003aa8:	52001000 	.word	0x52001000
 8003aac:	00020001 	.word	0x00020001

08003ab0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	4770      	bx	lr

08003ab4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8003ab4:	200c      	movs	r0, #12
 8003ab6:	4770      	bx	lr

08003ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8003ab8:	230c      	movs	r3, #12
 8003aba:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003abe:	3008      	adds	r0, #8
 8003ac0:	4770      	bx	lr

08003ac2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003ac8:	3008      	adds	r0, #8
 8003aca:	4770      	bx	lr

08003acc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003acc:	2001      	movs	r0, #1
 8003ace:	4770      	bx	lr

08003ad0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003ad0:	f243 407c 	movw	r0, #13436	@ 0x347c
 8003ad4:	4770      	bx	lr

08003ad6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003ad6:	f243 437c 	movw	r3, #13436	@ 0x347c
 8003ada:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003ade:	3008      	adds	r0, #8
 8003ae0:	4770      	bx	lr

08003ae2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003ae2:	f243 437c 	movw	r3, #13436	@ 0x347c
 8003ae6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003aea:	3008      	adds	r0, #8
 8003aec:	4770      	bx	lr

08003aee <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003aee:	2001      	movs	r0, #1
 8003af0:	4770      	bx	lr

08003af2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003af2:	2010      	movs	r0, #16
 8003af4:	4770      	bx	lr

08003af6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003af6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003afa:	3008      	adds	r0, #8
 8003afc:	4770      	bx	lr

08003afe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003afe:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003b02:	3008      	adds	r0, #8
 8003b04:	4770      	bx	lr

08003b06 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenScreenNoTransition();
 8003b06:	4608      	mov	r0, r1
 8003b08:	f004 bc26 	b.w	8008358 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>

08003b0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003b0c:	4b03      	ldr	r3, [pc, #12]	@ (8003b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003b0e:	b510      	push	{r4, lr}
 8003b10:	4604      	mov	r4, r0
 8003b12:	6003      	str	r3, [r0, #0]
 8003b14:	f00f fb1f 	bl	8013156 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003b18:	4620      	mov	r0, r4
 8003b1a:	bd10      	pop	{r4, pc}
 8003b1c:	0802d7d0 	.word	0x0802d7d0

08003b20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003b20:	b510      	push	{r4, lr}
 8003b22:	4604      	mov	r4, r0
 8003b24:	f7ff fff2 	bl	8003b0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003b28:	2114      	movs	r1, #20
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f025 ff24 	bl	8029978 <_ZdlPvj>
 8003b30:	4620      	mov	r0, r4
 8003b32:	bd10      	pop	{r4, pc}

08003b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003b34:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003b36:	b510      	push	{r4, lr}
 8003b38:	4604      	mov	r4, r0
 8003b3a:	6003      	str	r3, [r0, #0]
 8003b3c:	f00f fb0b 	bl	8013156 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003b40:	4620      	mov	r0, r4
 8003b42:	bd10      	pop	{r4, pc}
 8003b44:	0802d79c 	.word	0x0802d79c

08003b48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	f7ff fff2 	bl	8003b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003b50:	f243 4184 	movw	r1, #13444	@ 0x3484
 8003b54:	4620      	mov	r0, r4
 8003b56:	f025 ff0f 	bl	8029978 <_ZdlPvj>
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	bd10      	pop	{r4, pc}
	...

08003b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003b62:	b510      	push	{r4, lr}
 8003b64:	4604      	mov	r4, r0
 8003b66:	6003      	str	r3, [r0, #0]
 8003b68:	f00f faf5 	bl	8013156 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	bd10      	pop	{r4, pc}
 8003b70:	0802d768 	.word	0x0802d768

08003b74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003b74:	b510      	push	{r4, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	f7ff fff2 	bl	8003b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003b7c:	2118      	movs	r1, #24
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f025 fefa 	bl	8029978 <_ZdlPvj>
 8003b84:	4620      	mov	r0, r4
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003b88:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <_ZN12FrontendHeapD1Ev+0x3c>)
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	6003      	str	r3, [r0, #0]
      if (_M_manager)
 8003b8e:	f500 5340 	add.w	r3, r0, #12288	@ 0x3000
 8003b92:	4604      	mov	r4, r0
 8003b94:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8003b98:	b12b      	cbz	r3, 8003ba6 <_ZN12FrontendHeapD1Ev+0x1e>
    class function<_Res(_ArgTypes...)>
 8003b9a:	f500 5153 	add.w	r1, r0, #13504	@ 0x34c0
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8003b9e:	2203      	movs	r2, #3
    class function<_Res(_ArgTypes...)>
 8003ba0:	3108      	adds	r1, #8
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	4798      	blx	r3
 8003ba6:	f504 5052 	add.w	r0, r4, #13440	@ 0x3480
 8003baa:	3030      	adds	r0, #48	@ 0x30
 8003bac:	f7ff ffae 	bl	8003b0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003bb0:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003bb4:	f7ff ffbe 	bl	8003b34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003bb8:	f104 0014 	add.w	r0, r4, #20
 8003bbc:	f7ff ffd0 	bl	8003b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	bd10      	pop	{r4, pc}
 8003bc4:	0802d804 	.word	0x0802d804

08003bc8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003bc8:	b508      	push	{r3, lr}
 8003bca:	4802      	ldr	r0, [pc, #8]	@ (8003bd4 <__tcf_0+0xc>)
 8003bcc:	f7ff ffdc 	bl	8003b88 <_ZN12FrontendHeapD1Ev>
 8003bd0:	bd08      	pop	{r3, pc}
 8003bd2:	bf00      	nop
 8003bd4:	2400aec0 	.word	0x2400aec0

08003bd8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	4604      	mov	r4, r0
 8003bdc:	f7ff ffd4 	bl	8003b88 <_ZN12FrontendHeapD1Ev>
 8003be0:	f44f 5159 	mov.w	r1, #13888	@ 0x3640
 8003be4:	4620      	mov	r0, r4
 8003be6:	f025 fec7 	bl	8029978 <_ZdlPvj>
 8003bea:	4620      	mov	r0, r4
 8003bec:	bd10      	pop	{r4, pc}
	...

08003bf0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003bf4:	f000 fc5c 	bl	80044b0 <_ZN14BitmapDatabase11getInstanceEv>
 8003bf8:	2400      	movs	r4, #0
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	f000 fc5c 	bl	80044b8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003c00:	4623      	mov	r3, r4
 8003c02:	4601      	mov	r1, r0
 8003c04:	4622      	mov	r2, r4
 8003c06:	4628      	mov	r0, r5
 8003c08:	9400      	str	r4, [sp, #0]
 8003c0a:	f01b f887 	bl	801ed1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003c0e:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <touchgfx_init+0xbc>)
 8003c10:	4a27      	ldr	r2, [pc, #156]	@ (8003cb0 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003c12:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003c14:	4d27      	ldr	r5, [pc, #156]	@ (8003cb4 <touchgfx_init+0xc4>)
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f005 fa44 	bl	80090a4 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003c1c:	4b26      	ldr	r3, [pc, #152]	@ (8003cb8 <touchgfx_init+0xc8>)
 8003c1e:	4a27      	ldr	r2, [pc, #156]	@ (8003cbc <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003c20:	4827      	ldr	r0, [pc, #156]	@ (8003cc0 <touchgfx_init+0xd0>)
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	f01a ff26 	bl	801ea74 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	f3bf 8f5b 	dmb	ish
 8003c2e:	07db      	lsls	r3, r3, #31
 8003c30:	d436      	bmi.n	8003ca0 <touchgfx_init+0xb0>
 8003c32:	4628      	mov	r0, r5
 8003c34:	f025 fea2 	bl	802997c <__cxa_guard_acquire>
 8003c38:	b390      	cbz	r0, 8003ca0 <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003c3a:	4c22      	ldr	r4, [pc, #136]	@ (8003cc4 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 8003c3c:	4f22      	ldr	r7, [pc, #136]	@ (8003cc8 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003c3e:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 8003c40:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003c44:	f107 0634 	add.w	r6, r7, #52	@ 0x34
          screenStorage(scr),
 8003c48:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8003c4c:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003c4e:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003c50:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003c54:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003c56:	6126      	str	r6, [r4, #16]
 8003c58:	f00f fa7e 	bl	8013158 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd0 <touchgfx_init+0xe0>)
 8003c5e:	4640      	mov	r0, r8
 8003c60:	6163      	str	r3, [r4, #20]
 8003c62:	f00f fa79 	bl	8013158 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003c66:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <touchgfx_init+0xe4>)
 8003c68:	4638      	mov	r0, r7
 8003c6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c6c:	f00f fa74 	bl	8013158 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003c70:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8003c74:	4a18      	ldr	r2, [pc, #96]	@ (8003cd8 <touchgfx_init+0xe8>)
 8003c76:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
 8003c7a:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
 8003c7e:	f005 fcc3 	bl	8009608 <_ZN5ModelC1Ev>
 8003c82:	4622      	mov	r2, r4
 8003c84:	f107 0114 	add.w	r1, r7, #20
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f005 fc41 	bl	8009510 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f004 fb62 	bl	8008358 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 8003c94:	4811      	ldr	r0, [pc, #68]	@ (8003cdc <touchgfx_init+0xec>)
 8003c96:	f026 fae1 	bl	802a25c <atexit>
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	f025 fe7a 	bl	8029994 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003ca0:	480f      	ldr	r0, [pc, #60]	@ (8003ce0 <touchgfx_init+0xf0>)
}
 8003ca2:	b002      	add	sp, #8
 8003ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8003ca8:	f7fe bcce 	b.w	8002648 <_ZN11TouchGFXHAL10initializeEv>
 8003cac:	240287d4 	.word	0x240287d4
 8003cb0:	2400a084 	.word	0x2400a084
 8003cb4:	2400aebc 	.word	0x2400aebc
 8003cb8:	2400a0a4 	.word	0x2400a0a4
 8003cbc:	2400a088 	.word	0x2400a088
 8003cc0:	24000034 	.word	0x24000034
 8003cc4:	2400aec0 	.word	0x2400aec0
 8003cc8:	2400e370 	.word	0x2400e370
 8003ccc:	0802d804 	.word	0x0802d804
 8003cd0:	0802d768 	.word	0x0802d768
 8003cd4:	0802d79c 	.word	0x0802d79c
 8003cd8:	0802d7d0 	.word	0x0802d7d0
 8003cdc:	08003bc9 	.word	0x08003bc9
 8003ce0:	2400a008 	.word	0x2400a008

08003ce4 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003ce4:	4770      	bx	lr
	...

08003ce8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003ce8:	4801      	ldr	r0, [pc, #4]	@ (8003cf0 <touchgfx_taskEntry+0x8>)
 8003cea:	f7fe bcbf 	b.w	800266c <_ZN11TouchGFXHAL9taskEntryEv>
 8003cee:	bf00      	nop
 8003cf0:	2400a008 	.word	0x2400a008

08003cf4 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 8003cf6:	4c0e      	ldr	r4, [pc, #56]	@ (8003d30 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d34 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8003cfa:	4e0f      	ldr	r6, [pc, #60]	@ (8003d38 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8003cfc:	4620      	mov	r0, r4
static LCD24bpp display;
 8003cfe:	4d0f      	ldr	r5, [pc, #60]	@ (8003d3c <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003d00:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003d02:	f7ff fe25 	bl	8003950 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003d06:	4628      	mov	r0, r5
 8003d08:	f01e feaa 	bl	8022a60 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003d0c:	480c      	ldr	r0, [pc, #48]	@ (8003d40 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8003d0e:	f018 fb67 	bl	801c3e0 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003d12:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003d16:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4809      	ldr	r0, [pc, #36]	@ (8003d44 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003d1e:	e9cd 3200 	strd	r3, r2, [sp]
 8003d22:	4633      	mov	r3, r6
 8003d24:	462a      	mov	r2, r5
 8003d26:	f7fe fd35 	bl	8002794 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8003d2a:	b002      	add	sp, #8
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	bf00      	nop
 8003d30:	2400a110 	.word	0x2400a110
 8003d34:	0802cf20 	.word	0x0802cf20
 8003d38:	2400aeb8 	.word	0x2400aeb8
 8003d3c:	2400a0a4 	.word	0x2400a0a4
 8003d40:	2400a088 	.word	0x2400a088
 8003d44:	2400a008 	.word	0x2400a008

08003d48 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003d48:	4801      	ldr	r0, [pc, #4]	@ (8003d50 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003d4a:	f7ff bc4d 	b.w	80035e8 <_ZN8STM32DMAD1Ev>
 8003d4e:	bf00      	nop
 8003d50:	2400a110 	.word	0x2400a110

08003d54 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003d54:	2000      	movs	r0, #0
 8003d56:	4770      	bx	lr

08003d58 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003d58:	8081      	strh	r1, [r0, #4]
    }
 8003d5a:	4770      	bx	lr

08003d5c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003d5c:	80c1      	strh	r1, [r0, #6]
    }
 8003d5e:	4770      	bx	lr

08003d60 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003d60:	8101      	strh	r1, [r0, #8]
    }
 8003d62:	4770      	bx	lr

08003d64 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003d64:	8141      	strh	r1, [r0, #10]
    }
 8003d66:	4770      	bx	lr

08003d68 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003d68:	4770      	bx	lr

08003d6a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003d6a:	4770      	bx	lr

08003d6c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003d6c:	4770      	bx	lr

08003d6e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003d6e:	4770      	bx	lr

08003d70 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003d70:	4770      	bx	lr

08003d72 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003d72:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003d74:	88c4      	ldrh	r4, [r0, #6]
 8003d76:	6803      	ldr	r3, [r0, #0]
 8003d78:	1b12      	subs	r2, r2, r4
 8003d7a:	8884      	ldrh	r4, [r0, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	1b09      	subs	r1, r1, r4
 8003d80:	b212      	sxth	r2, r2
    }
 8003d82:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003d86:	b209      	sxth	r1, r1
 8003d88:	4718      	bx	r3

08003d8a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003d8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d8e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295
 8003d94:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003d9a:	6010      	str	r0, [r2, #0]
    }
 8003d9c:	4770      	bx	lr

08003d9e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003d9e:	2000      	movs	r0, #0
 8003da0:	4770      	bx	lr

08003da2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003da2:	888b      	ldrh	r3, [r1, #4]
 8003da4:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003da6:	2001      	movs	r0, #1
 8003da8:	4770      	bx	lr

08003daa <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8003daa:	4770      	bx	lr

08003dac <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003dac:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003db0:	4770      	bx	lr

08003db2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003db2:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003db6:	4770      	bx	lr

08003db8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003db8:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8003dba:	b510      	push	{r4, lr}
        return rect.width;
 8003dbc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003dc0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003dc4:	8002      	strh	r2, [r0, #0]
 8003dc6:	8042      	strh	r2, [r0, #2]
 8003dc8:	8084      	strh	r4, [r0, #4]
 8003dca:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003dcc:	bd10      	pop	{r4, pc}

08003dce <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	8002      	strh	r2, [r0, #0]
 8003dd2:	8042      	strh	r2, [r0, #2]
 8003dd4:	8082      	strh	r2, [r0, #4]
 8003dd6:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003dd8:	4770      	bx	lr

08003dda <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 8003dda:	7701      	strb	r1, [r0, #28]
    }
 8003ddc:	4770      	bx	lr

08003dde <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8003dde:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003de2:	4770      	bx	lr

08003de4 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003de4:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8003de8:	4770      	bx	lr

08003dea <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 8003dea:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 8003dee:	4770      	bx	lr

08003df0 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003df0:	2001      	movs	r0, #1
 8003df2:	4770      	bx	lr

08003df4 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003df4:	3098      	adds	r0, #152	@ 0x98
 8003df6:	4770      	bx	lr

08003df8 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8003df8:	308c      	adds	r0, #140	@ 0x8c
 8003dfa:	4770      	bx	lr

08003dfc <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8003dfc:	3084      	adds	r0, #132	@ 0x84
 8003dfe:	4770      	bx	lr

08003e00 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003e00:	4770      	bx	lr
	...

08003e04 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e04:	4b02      	ldr	r3, [pc, #8]	@ (8003e10 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8003e06:	2290      	movs	r2, #144	@ 0x90
 8003e08:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003e14:	4770      	bx	lr

08003e16 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8003e16:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8003e18:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003e1c:	4770      	bx	lr

08003e1e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003e1e:	4770      	bx	lr

08003e20 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003e20:	4770      	bx	lr

08003e22 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003e22:	4770      	bx	lr

08003e24 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003e24:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003e28:	4611      	mov	r1, r2
 8003e2a:	6840      	ldr	r0, [r0, #4]
 8003e2c:	6803      	ldr	r3, [r0, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4718      	bx	r3

08003e32 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003e32:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003e36:	4770      	bx	lr

08003e38 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	212c      	movs	r1, #44	@ 0x2c
 8003e3e:	f025 fd9b 	bl	8029978 <_ZdlPvj>
 8003e42:	4620      	mov	r0, r4
 8003e44:	bd10      	pop	{r4, pc}

08003e46 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003e46:	b510      	push	{r4, lr}
 8003e48:	4604      	mov	r4, r0
 8003e4a:	2148      	movs	r1, #72	@ 0x48
 8003e4c:	f025 fd94 	bl	8029978 <_ZdlPvj>
 8003e50:	4620      	mov	r0, r4
 8003e52:	bd10      	pop	{r4, pc}

08003e54 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003e54:	b510      	push	{r4, lr}
 8003e56:	4604      	mov	r4, r0
 8003e58:	21bc      	movs	r1, #188	@ 0xbc
 8003e5a:	f025 fd8d 	bl	8029978 <_ZdlPvj>
 8003e5e:	4620      	mov	r0, r4
 8003e60:	bd10      	pop	{r4, pc}
	...

08003e64 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4604      	mov	r4, r0
    HAL::initialize();
 8003e68:	f010 fca5 	bl	80147b6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003e70:	f017 f93e 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 8003e74:	4601      	mov	r1, r0
 8003e76:	4620      	mov	r0, r4
 8003e78:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	4908      	ldr	r1, [pc, #32]	@ (8003ea0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003e84:	2300      	movs	r3, #0
 8003e86:	461a      	mov	r2, r3
 8003e88:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	4a05      	ldr	r2, [pc, #20]	@ (8003ea4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003e8e:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003e90:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003e92:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003e94:	4a05      	ldr	r2, [pc, #20]	@ (8003eac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003e98:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003e9a:	4a05      	ldr	r2, [pc, #20]	@ (8003eb0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003e9c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	d0119400 	.word	0xd0119400
 8003ea4:	2400e608 	.word	0x2400e608
 8003ea8:	2400e5c0 	.word	0x2400e5c0
 8003eac:	d0000000 	.word	0xd0000000
 8003eb0:	00119400 	.word	0x00119400

08003eb4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 8003eba:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec0:	f00d f804 	bl	8010ecc <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003ec4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003ec6:	f00d f824 	bl	8010f12 <osMutexRelease>
        streams[handle].isActive = false;
 8003eca:	2324      	movs	r3, #36	@ 0x24
 8003ecc:	fb03 4505 	mla	r5, r3, r5, r4
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8003ed6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003eda:	b90b      	cbnz	r3, 8003ee0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003edc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ede:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003ee0:	bd38      	pop	{r3, r4, r5, pc}

08003ee2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003ee2:	f010 bc18 	b.w	8014716 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08003ee6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8003ee6:	f010 bd7a 	b.w	80149de <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8003eea:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003eee:	b112      	cbz	r2, 8003ef6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003ef0:	6803      	ldr	r3, [r0, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	4718      	bx	r3
    }
 8003ef6:	4770      	bx	lr

08003ef8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003ef8:	4a12      	ldr	r2, [pc, #72]	@ (8003f44 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8003efa:	6953      	ldr	r3, [r2, #20]
 8003efc:	03db      	lsls	r3, r3, #15
{
 8003efe:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003f00:	d51e      	bpl.n	8003f40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003f02:	2300      	movs	r3, #0
 8003f04:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003f08:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003f0c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003f10:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003f14:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003f18:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003f1c:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003f1e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003f22:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003f24:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003f28:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003f2a:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003f2e:	d2f9      	bcs.n	8003f24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003f30:	3b20      	subs	r3, #32
 8003f32:	f113 0f20 	cmn.w	r3, #32
 8003f36:	d1f2      	bne.n	8003f1e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003f38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f3c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003f40:	bd70      	pop	{r4, r5, r6, pc}
 8003f42:	bf00      	nop
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003f48:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003f4a:	b131      	cbz	r1, 8003f5a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003f4c:	4b04      	ldr	r3, [pc, #16]	@ (8003f60 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003f4e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003f52:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003f54:	4804      	ldr	r0, [pc, #16]	@ (8003f68 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003f56:	f026 f963 	bl	802a220 <__assert_func>
    }
 8003f5a:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003f5e:	bd08      	pop	{r3, pc}
 8003f60:	0802d810 	.word	0x0802d810
 8003f64:	0802d824 	.word	0x0802d824
 8003f68:	0802d9ae 	.word	0x0802d9ae

08003f6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003f6c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003f6e:	b131      	cbz	r1, 8003f7e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003f70:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003f72:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003f76:	4a06      	ldr	r2, [pc, #24]	@ (8003f90 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003f78:	4806      	ldr	r0, [pc, #24]	@ (8003f94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003f7a:	f026 f951 	bl	802a220 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003f7e:	6840      	ldr	r0, [r0, #4]
 8003f80:	4611      	mov	r1, r2
 8003f82:	6803      	ldr	r3, [r0, #0]
    }
 8003f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	4718      	bx	r3
 8003f8c:	0802d810 	.word	0x0802d810
 8003f90:	0802d9f8 	.word	0x0802d9f8
 8003f94:	0802d9ae 	.word	0x0802d9ae

08003f98 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003f98:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003f9a:	b129      	cbz	r1, 8003fa8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003f9c:	4b03      	ldr	r3, [pc, #12]	@ (8003fac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003f9e:	2179      	movs	r1, #121	@ 0x79
 8003fa0:	4a03      	ldr	r2, [pc, #12]	@ (8003fb0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003fa2:	4804      	ldr	r0, [pc, #16]	@ (8003fb4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003fa4:	f026 f93c 	bl	802a220 <__assert_func>
    }
 8003fa8:	68c0      	ldr	r0, [r0, #12]
 8003faa:	bd08      	pop	{r3, pc}
 8003fac:	0802d810 	.word	0x0802d810
 8003fb0:	0802dba6 	.word	0x0802dba6
 8003fb4:	0802d9ae 	.word	0x0802d9ae

08003fb8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003fbc:	b129      	cbz	r1, 8003fca <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8003fbe:	4b19      	ldr	r3, [pc, #100]	@ (8004024 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003fc0:	21a2      	movs	r1, #162	@ 0xa2
 8003fc2:	4a19      	ldr	r2, [pc, #100]	@ (8004028 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003fc4:	4819      	ldr	r0, [pc, #100]	@ (800402c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8003fc6:	f026 f92b 	bl	802a220 <__assert_func>
        switch (cmd)
 8003fca:	2a05      	cmp	r2, #5
 8003fcc:	d815      	bhi.n	8003ffa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003fce:	e8df f002 	tbb	[pc, r2]
 8003fd2:	1103      	.short	0x1103
 8003fd4:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8003fd8:	6840      	ldr	r0, [r0, #4]
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	4798      	blx	r3
 8003fe0:	b158      	cbz	r0, 8003ffa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8003fe8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8003fec:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8003fee:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003ff2:	e002      	b.n	8003ffa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 8003ffa:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003ffc:	6203      	str	r3, [r0, #32]
 8003ffe:	e7f5      	b.n	8003fec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8004000:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8004002:	2301      	movs	r3, #1
 8004004:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8004008:	e7f0      	b.n	8003fec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800400a:	2300      	movs	r3, #0
 800400c:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8004010:	2301      	movs	r3, #1
 8004012:	6203      	str	r3, [r0, #32]
            break;
 8004014:	e7f1      	b.n	8003ffa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8004016:	3b00      	subs	r3, #0
 8004018:	bf18      	it	ne
 800401a:	2301      	movne	r3, #1
 800401c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8004020:	e7eb      	b.n	8003ffa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8004022:	bf00      	nop
 8004024:	0802d810 	.word	0x0802d810
 8004028:	0802dd5b 	.word	0x0802dd5b
 800402c:	0802d9ae 	.word	0x0802d9ae

08004030 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8004030:	b510      	push	{r4, lr}
 8004032:	460c      	mov	r4, r1
 8004034:	4611      	mov	r1, r2
 8004036:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8004038:	b12c      	cbz	r4, 8004046 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800403a:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 800403c:	2190      	movs	r1, #144	@ 0x90
 800403e:	4a06      	ldr	r2, [pc, #24]	@ (8004058 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8004040:	4806      	ldr	r0, [pc, #24]	@ (800405c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8004042:	f026 f8ed 	bl	802a220 <__assert_func>
        stream.frameNumber = 0;
 8004046:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8004048:	6840      	ldr	r0, [r0, #4]
 800404a:	6803      	ldr	r3, [r0, #0]
    }
 800404c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	4718      	bx	r3
 8004054:	0802d810 	.word	0x0802d810
 8004058:	0802df2f 	.word	0x0802df2f
 800405c:	0802d9ae 	.word	0x0802d9ae

08004060 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8004060:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8004062:	b129      	cbz	r1, 8004070 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8004064:	4b05      	ldr	r3, [pc, #20]	@ (800407c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8004066:	2182      	movs	r1, #130	@ 0x82
 8004068:	4a05      	ldr	r2, [pc, #20]	@ (8004080 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800406a:	4806      	ldr	r0, [pc, #24]	@ (8004084 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 800406c:	f026 f8d8 	bl	802a220 <__assert_func>
        stream.tickCount = 0;
 8004070:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8004074:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8004078:	bd08      	pop	{r3, pc}
 800407a:	bf00      	nop
 800407c:	0802d810 	.word	0x0802d810
 8004080:	0802e10a 	.word	0x0802e10a
 8004084:	0802d9ae 	.word	0x0802d9ae

08004088 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8004088:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 800408c:	b510      	push	{r4, lr}
 800408e:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8004090:	b153      	cbz	r3, 80040a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8004092:	f04f 31ff 	mov.w	r1, #4294967295
 8004096:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8004098:	f00c ff18 	bl	8010ecc <osMutexAcquire>
            firstDrawThisFrame = false;
 800409c:	2300      	movs	r3, #0
 800409e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80040a8:	bd10      	pop	{r4, pc}

080040aa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80040aa:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80040ae:	b11a      	cbz	r2, 80040b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80040b0:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80040b4:	b102      	cbz	r2, 80040b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80040b6:	6018      	str	r0, [r3, #0]
        }
    }
 80040b8:	4770      	bx	lr
	...

080040bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80040bc:	b510      	push	{r4, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80040c2:	b129      	cbz	r1, 80040d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80040c4:	4b13      	ldr	r3, [pc, #76]	@ (8004114 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80040c6:	21d0      	movs	r1, #208	@ 0xd0
 80040c8:	4a13      	ldr	r2, [pc, #76]	@ (8004118 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80040ca:	4814      	ldr	r0, [pc, #80]	@ (800411c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80040cc:	f026 f8a8 	bl	802a220 <__assert_func>
        if (stream.isPlaying)
 80040d0:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80040d4:	b133      	cbz	r3, 80040e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80040d6:	4b12      	ldr	r3, [pc, #72]	@ (8004120 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80040de:	6963      	ldr	r3, [r4, #20]
 80040e0:	4413      	add	r3, r2
 80040e2:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80040e4:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80040e8:	b90b      	cbnz	r3, 80040ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80040ea:	2001      	movs	r0, #1
    }
 80040ec:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80040f2:	6803      	ldr	r3, [r0, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80040f8:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80040fa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80040fe:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8004102:	2800      	cmp	r0, #0
 8004104:	d1f1      	bne.n	80040ea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8004106:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ee      	bne.n	80040ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800410e:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8004112:	e7eb      	b.n	80040ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8004114:	0802d810 	.word	0x0802d810
 8004118:	0802e2c6 	.word	0x0802e2c6
 800411c:	0802d9ae 	.word	0x0802d9ae
 8004120:	24028770 	.word	0x24028770

08004124 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8004124:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8004126:	4c1a      	ldr	r4, [pc, #104]	@ (8004190 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8004128:	4605      	mov	r5, r0
    HAL::endFrame();
 800412a:	f010 fb37 	bl	801479c <_ZN8touchgfx3HAL8endFrameEv>
 800412e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8004132:	b913      	cbnz	r3, 800413a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8004134:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8004138:	b1ab      	cbz	r3, 8004166 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800413a:	69e1      	ldr	r1, [r4, #28]
 800413c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8004140:	4353      	muls	r3, r2
 8004142:	6922      	ldr	r2, [r4, #16]
 8004144:	434a      	muls	r2, r1
 8004146:	4293      	cmp	r3, r2
 8004148:	d30d      	bcc.n	8004166 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800414a:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800414e:	b138      	cbz	r0, 8004160 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8004156:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8004158:	bf98      	it	ls
 800415a:	f102 32ff 	addls.w	r2, r2, #4294967295
 800415e:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8004160:	2301      	movs	r3, #1
 8004162:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8004166:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8004168:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800416a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800416e:	f00c ff65 	bl	801103c <osSemaphoreRelease>
        if (uiHasMutex)
 8004172:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004176:	b12b      	cbz	r3, 8004184 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8004178:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800417a:	f00c feca 	bl	8010f12 <osMutexRelease>
            uiHasMutex = false;
 800417e:	2300      	movs	r3, #0
 8004180:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8004184:	6868      	ldr	r0, [r5, #4]
 8004186:	6803      	ldr	r3, [r0, #0]
}
 8004188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	4718      	bx	r3
 8004190:	2400e5c0 	.word	0x2400e5c0

08004194 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004194:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8004196:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800419a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800419e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80041a2:	f3bf 8f6f 	isb	sy
}
 80041a6:	4770      	bx	lr
 80041a8:	e000e100 	.word	0xe000e100

080041ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ac:	4b02      	ldr	r3, [pc, #8]	@ (80041b8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80041ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e100 	.word	0xe000e100

080041bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80041c0:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 80041c4:	b9d8      	cbnz	r0, 80041fe <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80041c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80041ca:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80041cc:	2501      	movs	r5, #1
                streams[i] = Stream();
 80041ce:	60d8      	str	r0, [r3, #12]
 80041d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80041d2:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80041d6:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80041d8:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80041dc:	6158      	str	r0, [r3, #20]
 80041de:	6198      	str	r0, [r3, #24]
 80041e0:	61d8      	str	r0, [r3, #28]
 80041e2:	6218      	str	r0, [r3, #32]
 80041e4:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80041e6:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80041e8:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80041ec:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80041f0:	443c      	add	r4, r7
 80041f2:	42a2      	cmp	r2, r4
 80041f4:	d90a      	bls.n	800420c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80041f8:	2152      	movs	r1, #82	@ 0x52
 80041fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004228 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80041fc:	e003      	b.n	8004206 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80041fe:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8004200:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8004204:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8004206:	480b      	ldr	r0, [pc, #44]	@ (8004234 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8004208:	f026 f80a 	bl	802a220 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 800420c:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 800420e:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8004210:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8004214:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8004218:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 800421a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 800421e:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8004220:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8004222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004224:	0802e61e 	.word	0x0802e61e
 8004228:	0802e659 	.word	0x0802e659
 800422c:	0802e467 	.word	0x0802e467
 8004230:	0802e497 	.word	0x0802e497
 8004234:	0802d9ae 	.word	0x0802d9ae

08004238 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8004238:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800423a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800423c:	4e12      	ldr	r6, [pc, #72]	@ (8004288 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800423e:	4604      	mov	r4, r0
 8004240:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8004242:	4b12      	ldr	r3, [pc, #72]	@ (800428c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8004244:	6003      	str	r3, [r0, #0]
 8004246:	6833      	ldr	r3, [r6, #0]
 8004248:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800424c:	b10a      	cbz	r2, 8004252 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800424e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004250:	b900      	cbnz	r0, 8004254 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8004252:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8004254:	6803      	ldr	r3, [r0, #0]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	4798      	blx	r3
 800425a:	1e43      	subs	r3, r0, #1
 800425c:	425d      	negs	r5, r3
 800425e:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8004260:	6833      	ldr	r3, [r6, #0]
 8004262:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8004264:	b130      	cbz	r0, 8004274 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8004266:	6803      	ldr	r3, [r0, #0]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	4798      	blx	r3
 800426c:	2801      	cmp	r0, #1
 800426e:	bf08      	it	eq
 8004270:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8004274:	b92d      	cbnz	r5, 8004282 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8004278:	2127      	movs	r1, #39	@ 0x27
 800427a:	4a06      	ldr	r2, [pc, #24]	@ (8004294 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 800427c:	4806      	ldr	r0, [pc, #24]	@ (8004298 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 800427e:	f025 ffcf 	bl	802a220 <__assert_func>
    }
 8004282:	4620      	mov	r0, r4
 8004284:	bd70      	pop	{r4, r5, r6, pc}
 8004286:	bf00      	nop
 8004288:	24028770 	.word	0x24028770
 800428c:	0802e90c 	.word	0x0802e90c
 8004290:	0802e7fc 	.word	0x0802e7fc
 8004294:	0802e85a 	.word	0x0802e85a
 8004298:	0802e893 	.word	0x0802e893

0800429c <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 800429c:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 800429e:	4e24      	ldr	r6, [pc, #144]	@ (8004330 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 80042a0:	6835      	ldr	r5, [r6, #0]
 80042a2:	f3bf 8f5b 	dmb	ish
 80042a6:	f015 0501 	ands.w	r5, r5, #1
 80042aa:	d13f      	bne.n	800432c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 80042ac:	4630      	mov	r0, r6
 80042ae:	f025 fb65 	bl	802997c <__cxa_guard_acquire>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d03a      	beq.n	800432c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 80042b6:	4c1f      	ldr	r4, [pc, #124]	@ (8004334 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80042b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004338 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 80042ba:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80042be:	6125      	str	r5, [r4, #16]
 80042c0:	84e5      	strh	r5, [r4, #38]	@ 0x26
 80042c2:	62a5      	str	r5, [r4, #40]	@ 0x28
 80042c4:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 80042c6:	e9c4 3500 	strd	r3, r5, [r4]
 80042ca:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80042ce:	f018 fae6 	bl	801c89e <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 80042d2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042d6:	f012 fc91 	bl	8016bfc <_ZN8touchgfx12CanvasWidgetC1Ev>
 80042da:	4b18      	ldr	r3, [pc, #96]	@ (800433c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80042dc:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 80042de:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80042e0:	4b17      	ldr	r3, [pc, #92]	@ (8004340 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 80042e2:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80042e6:	f7ff ffa7 	bl	8004238 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80042ea:	4b16      	ldr	r3, [pc, #88]	@ (8004344 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80042ec:	4816      	ldr	r0, [pc, #88]	@ (8004348 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80042ee:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80042f2:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80042f4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80042f8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80042fc:	2364      	movs	r3, #100	@ 0x64
 80042fe:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8004302:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8004306:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 800430a:	2300      	movs	r3, #0
 800430c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8004310:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8004314:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8004318:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 800431e:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8004322:	f025 ff9b 	bl	802a25c <atexit>
 8004326:	4630      	mov	r0, r6
 8004328:	f025 fb34 	bl	8029994 <__cxa_guard_release>
}
 800432c:	4801      	ldr	r0, [pc, #4]	@ (8004334 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	2400e500 	.word	0x2400e500
 8004334:	2400e504 	.word	0x2400e504
 8004338:	08030388 	.word	0x08030388
 800433c:	0802e92c 	.word	0x0802e92c
 8004340:	0802e9a4 	.word	0x0802e9a4
 8004344:	080303d4 	.word	0x080303d4
 8004348:	08003e01 	.word	0x08003e01
 800434c:	0803040c 	.word	0x0803040c

08004350 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8004350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004354:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8004356:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8004358:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 800435c:	f04f 31ff 	mov.w	r1, #4294967295
 8004360:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004362:	f00c fe3f 	bl	8010fe4 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8004366:	f04f 31ff 	mov.w	r1, #4294967295
 800436a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800436c:	f00c fdae 	bl	8010ecc <osMutexAcquire>
                if (stream.doDecode)
 8004370:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8004374:	b343      	cbz	r3, 80043c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8004376:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8004378:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 800437c:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 800437e:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8004382:	f1b8 0f00 	cmp.w	r8, #0
 8004386:	d023      	beq.n	80043d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	4641      	mov	r1, r8
 800438c:	4628      	mov	r0, r5
 800438e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800439a:	9700      	str	r7, [sp, #0]
 800439c:	4628      	mov	r0, r5
 800439e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80043a2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80043a6:	68a1      	ldr	r1, [r4, #8]
 80043a8:	47c0      	blx	r8
                    stream.frameCount++;
 80043aa:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80043ac:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 80043b0:	3301      	adds	r3, #1
 80043b2:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 80043b4:	b1f0      	cbz	r0, 80043f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80043b6:	682b      	ldr	r3, [r5, #0]
 80043b8:	4628      	mov	r0, r5
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	4798      	blx	r3
 80043be:	3801      	subs	r0, #1
                    stream.doDecode = false;
 80043c0:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80043c2:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80043c4:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80043c8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80043ca:	f00c fda2 	bl	8010f12 <osMutexRelease>
        while (1)
 80043ce:	e7c5      	b.n	800435c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80043d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	d0de      	beq.n	8004394 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80043d6:	4628      	mov	r0, r5
 80043d8:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 80043dc:	4798      	blx	r3
 80043de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80043e0:	4401      	add	r1, r0
 80043e2:	4628      	mov	r0, r5
 80043e4:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80043ea:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80043ee:	4413      	add	r3, r2
 80043f0:	6123      	str	r3, [r4, #16]
 80043f2:	e7cf      	b.n	8004394 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80043f4:	2001      	movs	r0, #1
 80043f6:	e7e3      	b.n	80043c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080043f8 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80043f8:	4801      	ldr	r0, [pc, #4]	@ (8004400 <videoTaskFunc+0x8>)
{
 80043fa:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80043fc:	f7ff ffa8 	bl	8004350 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8004400:	2400e5c0 	.word	0x2400e5c0

08004404 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8004404:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8004406:	4814      	ldr	r0, [pc, #80]	@ (8004458 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8004408:	2500      	movs	r5, #0
 800440a:	f7fe fbe1 	bl	8002bd0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800440e:	4c13      	ldr	r4, [pc, #76]	@ (800445c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8004410:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8004412:	462a      	mov	r2, r5
 8004414:	4629      	mov	r1, r5
 8004416:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 800441e:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8004420:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8004422:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8004424:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8004428:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 800442c:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8004430:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8004434:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8004438:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800443c:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8004440:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8004444:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8004448:	f00c fd82 	bl	8010f50 <osSemaphoreNew>
 800444c:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 800444e:	4628      	mov	r0, r5
 8004450:	f00c fd07 	bl	8010e62 <osMutexNew>
 8004454:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	2400e608 	.word	0x2400e608
 800445c:	2400e5c0 	.word	0x2400e5c0
 8004460:	0802e9f0 	.word	0x0802e9f0

08004464 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_21_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004464:	4770      	bx	lr

08004466 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8004466:	b508      	push	{r3, lr}
    switch (typography)
 8004468:	2904      	cmp	r1, #4
 800446a:	d818      	bhi.n	800449e <_ZN23ApplicationFontProvider7getFontEt+0x38>
 800446c:	e8df f001 	tbb	[pc, r1]
 8004470:	0f0b0703 	.word	0x0f0b0703
 8004474:	13          	.byte	0x13
 8004475:	00          	.byte	0x00
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8004476:	f004 fe61 	bl	800913c <_ZN17TypedTextDatabase8getFontsEv>
 800447a:	6800      	ldr	r0, [r0, #0]
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
    default:
        return 0;
    }
}
 800447c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800447e:	f004 fe5d 	bl	800913c <_ZN17TypedTextDatabase8getFontsEv>
 8004482:	6840      	ldr	r0, [r0, #4]
 8004484:	e7fa      	b.n	800447c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8004486:	f004 fe59 	bl	800913c <_ZN17TypedTextDatabase8getFontsEv>
 800448a:	6880      	ldr	r0, [r0, #8]
 800448c:	e7f6      	b.n	800447c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800448e:	f004 fe55 	bl	800913c <_ZN17TypedTextDatabase8getFontsEv>
 8004492:	68c0      	ldr	r0, [r0, #12]
 8004494:	e7f2      	b.n	800447c <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8004496:	f004 fe51 	bl	800913c <_ZN17TypedTextDatabase8getFontsEv>
 800449a:	6900      	ldr	r0, [r0, #16]
 800449c:	e7ee      	b.n	800447c <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 800449e:	2000      	movs	r0, #0
 80044a0:	e7ec      	b.n	800447c <_ZN23ApplicationFontProvider7getFontEt+0x16>

080044a2 <_ZN23ApplicationFontProviderD0Ev>:
 80044a2:	b510      	push	{r4, lr}
 80044a4:	4604      	mov	r4, r0
 80044a6:	2104      	movs	r1, #4
 80044a8:	f025 fa66 	bl	8029978 <_ZdlPvj>
 80044ac:	4620      	mov	r0, r4
 80044ae:	bd10      	pop	{r4, pc}

080044b0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80044b0:	4800      	ldr	r0, [pc, #0]	@ (80044b4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80044b2:	4770      	bx	lr
 80044b4:	0802ea40 	.word	0x0802ea40

080044b8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80044b8:	200e      	movs	r0, #14
 80044ba:	4770      	bx	lr

080044bc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80044bc:	b513      	push	{r0, r1, r4, lr}
 80044be:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80044c0:	b151      	cbz	r1, 80044d8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80044c2:	6803      	ldr	r3, [r0, #0]
 80044c4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80044c6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80044c8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80044cc:	689c      	ldr	r4, [r3, #8]
 80044ce:	f10d 0303 	add.w	r3, sp, #3
 80044d2:	47a0      	blx	r4
        return glyph;
    }
 80044d4:	b002      	add	sp, #8
 80044d6:	bd10      	pop	{r4, pc}
            return 0;
 80044d8:	4608      	mov	r0, r1
 80044da:	e7fb      	b.n	80044d4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080044dc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80044dc:	89c0      	ldrh	r0, [r0, #14]
 80044de:	4770      	bx	lr

080044e0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80044e0:	8a00      	ldrh	r0, [r0, #16]
 80044e2:	4770      	bx	lr

080044e4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80044e4:	88c0      	ldrh	r0, [r0, #6]
 80044e6:	4770      	bx	lr

080044e8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80044e8:	8880      	ldrh	r0, [r0, #4]
 80044ea:	4770      	bx	lr

080044ec <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80044ec:	7a80      	ldrb	r0, [r0, #10]
    }
 80044ee:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80044f2:	4770      	bx	lr

080044f4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80044f4:	7a80      	ldrb	r0, [r0, #10]
    }
 80044f6:	09c0      	lsrs	r0, r0, #7
 80044f8:	4770      	bx	lr

080044fa <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80044fa:	2000      	movs	r0, #0
 80044fc:	4770      	bx	lr
	...

08004500 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8004500:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004508 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	00000000 	.word	0x00000000

0800450c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800450c:	4770      	bx	lr

0800450e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800450e:	4770      	bx	lr

08004510 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004510:	4770      	bx	lr

08004512 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004512:	4770      	bx	lr

08004514 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004514:	4770      	bx	lr

08004516 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8004516:	4770      	bx	lr

08004518 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8004518:	b530      	push	{r4, r5, lr}
 800451a:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 800451c:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 800451e:	4604      	mov	r4, r0
        rect.width = width;
 8004520:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8004522:	466d      	mov	r5, sp
 8004524:	4601      	mov	r1, r0
 8004526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800452a:	343c      	adds	r4, #60	@ 0x3c
 800452c:	4628      	mov	r0, r5
 800452e:	4798      	blx	r3
 8004530:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004538:	b005      	add	sp, #20
 800453a:	bd30      	pop	{r4, r5, pc}

0800453c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800453c:	b530      	push	{r4, r5, lr}
 800453e:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004540:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8004542:	4604      	mov	r4, r0
        rect.height = height;
 8004544:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8004546:	466d      	mov	r5, sp
 8004548:	4601      	mov	r1, r0
 800454a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454e:	343c      	adds	r4, #60	@ 0x3c
 8004550:	4628      	mov	r0, r5
 8004552:	4798      	blx	r3
 8004554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800455c:	b005      	add	sp, #20
 800455e:	bd30      	pop	{r4, r5, pc}

08004560 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8004560:	2200      	movs	r2, #0
 8004562:	8002      	strh	r2, [r0, #0]
 8004564:	8042      	strh	r2, [r0, #2]
 8004566:	8082      	strh	r2, [r0, #4]
 8004568:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800456a:	4770      	bx	lr

0800456c <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800456c:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8004570:	4770      	bx	lr

08004572 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8004572:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4604      	mov	r4, r0
        setX(x);
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800457a:	4615      	mov	r5, r2
        setX(x);
 800457c:	4798      	blx	r3
        setBaselineY(baselineY);
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	4620      	mov	r0, r4
 8004582:	4629      	mov	r1, r5
 8004584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8004586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800458a:	4718      	bx	r3

0800458c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800458c:	2000      	movs	r0, #0
 800458e:	4770      	bx	lr

08004590 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004590:	2200      	movs	r2, #0
 8004592:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8004596:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004598:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 800459c:	4770      	bx	lr

0800459e <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 800459e:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80045a0:	4770      	bx	lr

080045a2 <_ZN18CalculatorViewBase18sendToCalculator_0Ev>:
     * Virtual Action Handlers
     */
    virtual void sendToCalculator_0()
    {
        // Override and implement this function in Calculator
    }
 80045a2:	4770      	bx	lr

080045a4 <_ZN18CalculatorViewBase18sendToCalculator_1Ev>:
    virtual void sendToCalculator_1()
    {
        // Override and implement this function in Calculator
    }
 80045a4:	4770      	bx	lr

080045a6 <_ZN18CalculatorViewBase18sendToCalculator_2Ev>:
    virtual void sendToCalculator_2()
    {
        // Override and implement this function in Calculator
    }
 80045a6:	4770      	bx	lr

080045a8 <_ZN18CalculatorViewBase18sendToCalculator_3Ev>:
    virtual void sendToCalculator_3()
    {
        // Override and implement this function in Calculator
    }
 80045a8:	4770      	bx	lr

080045aa <_ZN18CalculatorViewBase18sendToCalculator_4Ev>:
    virtual void sendToCalculator_4()
    {
        // Override and implement this function in Calculator
    }
 80045aa:	4770      	bx	lr

080045ac <_ZN18CalculatorViewBase18sendToCalculator_5Ev>:
    virtual void sendToCalculator_5()
    {
        // Override and implement this function in Calculator
    }
 80045ac:	4770      	bx	lr

080045ae <_ZN18CalculatorViewBase18sendToCalculator_6Ev>:
    virtual void sendToCalculator_6()
    {
        // Override and implement this function in Calculator
    }
 80045ae:	4770      	bx	lr

080045b0 <_ZN18CalculatorViewBase18sendToCalculator_7Ev>:
    virtual void sendToCalculator_7()
    {
        // Override and implement this function in Calculator
    }
 80045b0:	4770      	bx	lr

080045b2 <_ZN18CalculatorViewBase18sendToCalculator_8Ev>:
    virtual void sendToCalculator_8()
    {
        // Override and implement this function in Calculator
    }
 80045b2:	4770      	bx	lr

080045b4 <_ZN18CalculatorViewBase18sendToCalculator_9Ev>:
    virtual void sendToCalculator_9()
    {
        // Override and implement this function in Calculator
    }
 80045b4:	4770      	bx	lr

080045b6 <_ZN18CalculatorViewBase20sendToCalculator_AddEv>:
    virtual void sendToCalculator_Add()
    {
        // Override and implement this function in Calculator
    }
 80045b6:	4770      	bx	lr

080045b8 <_ZN18CalculatorViewBase23sendToCalculator_EqualsEv>:
    virtual void sendToCalculator_Equals()
    {
        // Override and implement this function in Calculator
    }
 80045b8:	4770      	bx	lr

080045ba <_ZN18CalculatorViewBase23sendToCalculator_DeleteEv>:
    virtual void sendToCalculator_Delete()
    {
        // Override and implement this function in Calculator
    }
 80045ba:	4770      	bx	lr

080045bc <_ZN18CalculatorViewBase32sendToCalculator_OpenParenthesisEv>:
    virtual void sendToCalculator_OpenParenthesis()
    {
        // Override and implement this function in Calculator
    }
 80045bc:	4770      	bx	lr

080045be <_ZN18CalculatorViewBase33sendToCalculator_CloseParenthesisEv>:
    virtual void sendToCalculator_CloseParenthesis()
    {
        // Override and implement this function in Calculator
    }
 80045be:	4770      	bx	lr

080045c0 <_ZN18CalculatorViewBase25sendToCalculator_SubtractEv>:
    virtual void sendToCalculator_Subtract()
    {
        // Override and implement this function in Calculator
    }
 80045c0:	4770      	bx	lr

080045c2 <_ZN18CalculatorViewBase25sendToCalculator_MultiplyEv>:
    virtual void sendToCalculator_Multiply()
    {
        // Override and implement this function in Calculator
    }
 80045c2:	4770      	bx	lr

080045c4 <_ZN18CalculatorViewBase23sendToCalculator_DivideEv>:
    virtual void sendToCalculator_Divide()
    {
        // Override and implement this function in Calculator
    }
 80045c4:	4770      	bx	lr

080045c6 <_ZN18CalculatorViewBase22sendToCalculator_CommaEv>:
    virtual void sendToCalculator_Comma()
    {
        // Override and implement this function in Calculator
    }
 80045c6:	4770      	bx	lr

080045c8 <_ZN18CalculatorViewBase22sendToCalculator_ClearEv>:
    virtual void sendToCalculator_Clear()
    {
        // Override and implement this function in Calculator
    }
 80045c8:	4770      	bx	lr

080045ca <_ZN18CalculatorViewBaseD1Ev>:
}

CalculatorViewBase::~CalculatorViewBase()
{

}
 80045ca:	4770      	bx	lr

080045cc <_ZN18CalculatorViewBase11setupScreenEv>:

void CalculatorViewBase::setupScreen()
{

}
 80045cc:	4770      	bx	lr

080045ce <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type, typename T1>
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80045ce:	4770      	bx	lr

080045d0 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED1Ev>:
 * receives a click event.
 *
 * @tparam T specifies the type to extend with the ClickListener behavior.
 */
template <class T>
class ClickListener : public T
 80045d0:	4770      	bx	lr

080045d2 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80045d2:	4770      	bx	lr

080045d4 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
     *
     * @param  t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid
     */
    virtual void execute(T1 t1)
 80045d4:	b430      	push	{r4, r5}
    {
        (pobject->*pmemfun)(t1);
 80045d6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80045d8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80045da:	68c2      	ldr	r2, [r0, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	1055      	asrs	r5, r2, #1
 80045e0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80045e4:	07d2      	lsls	r2, r2, #31
 80045e6:	bf48      	it	mi
 80045e8:	5962      	ldrmi	r2, [r4, r5]
    }
 80045ea:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80045ec:	bf48      	it	mi
 80045ee:	58d3      	ldrmi	r3, [r2, r3]
 80045f0:	4718      	bx	r3

080045f2 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    /**
     * Query if this object is valid.
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
 80045f2:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80045f4:	6840      	ldr	r0, [r0, #4]
 80045f6:	b130      	cbz	r0, 8004606 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	b91a      	cbnz	r2, 8004604 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80045fc:	68d8      	ldr	r0, [r3, #12]
 80045fe:	f000 0001 	and.w	r0, r0, #1
 8004602:	4770      	bx	lr
 8004604:	2001      	movs	r0, #1
    }
 8004606:	4770      	bx	lr

08004608 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004608:	b510      	push	{r4, lr}
 800460a:	4604      	mov	r4, r0
    }
 800460c:	2108      	movs	r1, #8
 800460e:	f025 f9b3 	bl	8029978 <_ZdlPvj>
 8004612:	4620      	mov	r0, r4
 8004614:	bd10      	pop	{r4, pc}

08004616 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004616:	b510      	push	{r4, lr}
 8004618:	4604      	mov	r4, r0
 800461a:	214c      	movs	r1, #76	@ 0x4c
 800461c:	f025 f9ac 	bl	8029978 <_ZdlPvj>
 8004620:	4620      	mov	r0, r4
 8004622:	bd10      	pop	{r4, pc}

08004624 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED0Ev>:
 8004624:	b510      	push	{r4, lr}
 8004626:	4604      	mov	r4, r0
 8004628:	2130      	movs	r1, #48	@ 0x30
 800462a:	f025 f9a5 	bl	8029978 <_ZdlPvj>
 800462e:	4620      	mov	r0, r4
 8004630:	bd10      	pop	{r4, pc}

08004632 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004632:	b510      	push	{r4, lr}
 8004634:	4604      	mov	r4, r0
 8004636:	2110      	movs	r1, #16
 8004638:	f025 f99e 	bl	8029978 <_ZdlPvj>
 800463c:	4620      	mov	r0, r4
 800463e:	bd10      	pop	{r4, pc}

08004640 <_ZN18CalculatorViewBaseD0Ev>:
CalculatorViewBase::~CalculatorViewBase()
 8004640:	b510      	push	{r4, lr}
 8004642:	4604      	mov	r4, r0
}
 8004644:	f240 61ec 	movw	r1, #1772	@ 0x6ec
 8004648:	f025 f996 	bl	8029978 <_ZdlPvj>
 800464c:	4620      	mov	r0, r4
 800464e:	bd10      	pop	{r4, pc}

08004650 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void CalculatorViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
 8004650:	f500 7349 	add.w	r3, r0, #804	@ 0x324
 8004654:	4299      	cmp	r1, r3
{
 8004656:	b570      	push	{r4, r5, r6, lr}
 8004658:	4604      	mov	r4, r0
 800465a:	460d      	mov	r5, r1
    if (&src == &HomeButton)
 800465c:	d103      	bne.n	8004666 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800465e:	f016 fd47 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
 8004662:	f003 fe79 	bl	8008358 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
    if (&src == &CalculatorButton_0)
 8004666:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 800466a:	429d      	cmp	r5, r3
 800466c:	d103      	bne.n	8004676 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //CalculatorButtonClicked_0
        //When CalculatorButton_0 clicked call virtual function
        //Call sendToCalculator_0
        sendToCalculator_0();
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	4620      	mov	r0, r4
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_1)
 8004676:	f504 63b3 	add.w	r3, r4, #1432	@ 0x598
 800467a:	429d      	cmp	r5, r3
 800467c:	d103      	bne.n	8004686 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x36>
    {
        //CalculatorButtonClicked_1
        //When CalculatorButton_1 clicked call virtual function
        //Call sendToCalculator_1
        sendToCalculator_1();
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	4620      	mov	r0, r4
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_2)
 8004686:	f504 63aa 	add.w	r3, r4, #1360	@ 0x550
 800468a:	429d      	cmp	r5, r3
 800468c:	d103      	bne.n	8004696 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
    {
        //CalculatorButtonClicked_2
        //When CalculatorButton_2 clicked call virtual function
        //Call sendToCalculator_2
        sendToCalculator_2();
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	4620      	mov	r0, r4
 8004692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004694:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_3)
 8004696:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 800469a:	429d      	cmp	r5, r3
 800469c:	d103      	bne.n	80046a6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
    {
        //CalculatorButtonClicked_3
        //When CalculatorButton_3 clicked call virtual function
        //Call sendToCalculator_3
        sendToCalculator_3();
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	4620      	mov	r0, r4
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_4)
 80046a6:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 80046aa:	429d      	cmp	r5, r3
 80046ac:	d103      	bne.n	80046b6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
    {
        //CalculatorButtonClicked_4
        //When CalculatorButton_4 clicked call virtual function
        //Call sendToCalculator_4
        sendToCalculator_4();
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	4620      	mov	r0, r4
 80046b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_5)
 80046b6:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 80046ba:	429d      	cmp	r5, r3
 80046bc:	d103      	bne.n	80046c6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x76>
    {
        //CalculatorButtonClicked_5
        //When CalculatorButton_5 clicked call virtual function
        //Call sendToCalculator_5
        sendToCalculator_5();
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	4620      	mov	r0, r4
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_6)
 80046c6:	f504 6386 	add.w	r3, r4, #1072	@ 0x430
 80046ca:	429d      	cmp	r5, r3
 80046cc:	d103      	bne.n	80046d6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x86>
    {
        //CalculatorButtonClicked_6
        //When CalculatorButton_6 clicked call virtual function
        //Call sendToCalculator_6
        sendToCalculator_6();
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	4620      	mov	r0, r4
 80046d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_7)
 80046d6:	f504 737a 	add.w	r3, r4, #1000	@ 0x3e8
 80046da:	429d      	cmp	r5, r3
 80046dc:	d103      	bne.n	80046e6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x96>
    {
        //CalculatorButtonClicked_7
        //When CalculatorButton_7 clicked call virtual function
        //Call sendToCalculator_7
        sendToCalculator_7();
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	4620      	mov	r0, r4
 80046e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_8)
 80046e6:	f504 7368 	add.w	r3, r4, #928	@ 0x3a0
 80046ea:	429d      	cmp	r5, r3
 80046ec:	d103      	bne.n	80046f6 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa6>
    {
        //CalculatorButtonClicked_8
        //When CalculatorButton_8 clicked call virtual function
        //Call sendToCalculator_8
        sendToCalculator_8();
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	4620      	mov	r0, r4
 80046f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f4:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_9)
 80046f6:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 80046fa:	429d      	cmp	r5, r3
 80046fc:	d103      	bne.n	8004706 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb6>
    {
        //CalculatorButtonClicked_9
        //When CalculatorButton_9 clicked call virtual function
        //Call sendToCalculator_9
        sendToCalculator_9();
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	4620      	mov	r0, r4
 8004702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004704:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Add)
 8004706:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 800470a:	429d      	cmp	r5, r3
 800470c:	d103      	bne.n	8004716 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc6>
    {
        //CalculatorButtonClicked_Add
        //When CalculatorButton_Add clicked call virtual function
        //Call sendToCalculator_Add
        sendToCalculator_Add();
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	4620      	mov	r0, r4
 8004712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004714:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Equals)
 8004716:	f504 63bc 	add.w	r3, r4, #1504	@ 0x5e0
 800471a:	429d      	cmp	r5, r3
 800471c:	d103      	bne.n	8004726 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
    {
        //CalculatorButtonClicked_Equals
        //When CalculatorButton_Equals clicked call virtual function
        //Call sendToCalculator_Equals
        sendToCalculator_Equals();
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	4620      	mov	r0, r4
 8004722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004724:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Delete)
 8004726:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 800472a:	429d      	cmp	r5, r3
 800472c:	d103      	bne.n	8004736 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe6>
    {
        //CalculatorButtonClicked_Delete
        //When CalculatorButton_Delete clicked call virtual function
        //Call sendToCalculator_Delete
        sendToCalculator_Delete();
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	4620      	mov	r0, r4
 8004732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004734:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_OpenParenthesis)
 8004736:	f104 03b4 	add.w	r3, r4, #180	@ 0xb4
 800473a:	429d      	cmp	r5, r3
 800473c:	d103      	bne.n	8004746 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf6>
    {
        //CalculatorButtonClicked_OpenParenthesis
        //When CalculatorButton_OpenParenthesis clicked call virtual function
        //Call sendToCalculator_OpenParenthesis
        sendToCalculator_OpenParenthesis();
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	4620      	mov	r0, r4
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_CloseParenthesis)
 8004746:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 800474a:	429d      	cmp	r5, r3
 800474c:	d103      	bne.n	8004756 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x106>
    {
        //CalculatorButtonClicked_CloseParenthesis
        //When CalculatorButton_CloseParenthesis clicked call virtual function
        //Call sendToCalculator_CloseParenthesis
        sendToCalculator_CloseParenthesis();
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	4620      	mov	r0, r4
 8004752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004754:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Subtract)
 8004756:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 800475a:	429d      	cmp	r5, r3
 800475c:	d103      	bne.n	8004766 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x116>
    {
        //CalculatorButtonClicked_Subtract
        //When CalculatorButton_Subtract clicked call virtual function
        //Call sendToCalculator_Subtract
        sendToCalculator_Subtract();
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	4620      	mov	r0, r4
 8004762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004764:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Multiply)
 8004766:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 800476a:	429d      	cmp	r5, r3
 800476c:	d103      	bne.n	8004776 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x126>
    {
        //CalculatorButtonClicked_Multiply
        //When CalculatorButton_Multiply clicked call virtual function
        //Call sendToCalculator_Multiply
        sendToCalculator_Multiply();
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	4620      	mov	r0, r4
 8004772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004774:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Divide)
 8004776:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 800477a:	429d      	cmp	r5, r3
 800477c:	d103      	bne.n	8004786 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x136>
    {
        //CalculatorButtonClicked_Divide
        //When CalculatorButton_Divide clicked call virtual function
        //Call sendToCalculator_Divide
        sendToCalculator_Divide();
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	4620      	mov	r0, r4
 8004782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004784:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Comma)
 8004786:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 800478a:	429d      	cmp	r5, r3
 800478c:	d103      	bne.n	8004796 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x146>
    {
        //CalculatorButtonClicked_Comma
        //When CalculatorButton_Comma clicked call virtual function
        //Call sendToCalculator_Comma
        sendToCalculator_Comma();
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	4620      	mov	r0, r4
 8004792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004794:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Clear)
 8004796:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
 800479a:	429d      	cmp	r5, r3
 800479c:	d105      	bne.n	80047aa <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x15a>
    {
        //CalculatorButtonClicked_Clear
        //When CalculatorButton_Clear clicked call virtual function
        //Call sendToCalculator_Clear
        sendToCalculator_Clear();
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	4620      	mov	r0, r4
 80047a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    }
}
 80047a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        sendToCalculator_Clear();
 80047a8:	4718      	bx	r3
}
 80047aa:	bd70      	pop	{r4, r5, r6, pc}

080047ac <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 80047ac:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 80047ae:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80047b2:	b10b      	cbz	r3, 80047b8 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 80047b4:	f7ff fb99 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 80047b8:	bd08      	pop	{r3, pc}

080047ba <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80047ba:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80047bc:	f7ff fb95 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80047c0:	bd08      	pop	{r3, pc}

080047c2 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE>:
     * Ensures that the clickEvent is propagated to the super class T and to the clickAction
     * listener.
     *
     * @param  event Information about the click.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80047c2:	b570      	push	{r4, r5, r6, lr}
 80047c4:	4604      	mov	r4, r0
    {
        T::handleClickEvent(event);
        if (clickAction && clickAction->isValid())
 80047c6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
 80047c8:	460d      	mov	r5, r1
        if (clickAction && clickAction->isValid())
 80047ca:	b158      	cbz	r0, 80047e4 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
 80047cc:	6803      	ldr	r3, [r0, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4798      	blx	r3
 80047d2:	b138      	cbz	r0, 80047e4 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
        {
            clickAction->execute(*this, event);
 80047d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80047d6:	462a      	mov	r2, r5
 80047d8:	4621      	mov	r1, r4
 80047da:	6803      	ldr	r3, [r0, #0]
        }
    }
 80047dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            clickAction->execute(*this, event);
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4718      	bx	r3
    }
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080047e8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80047e8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80047ea:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80047ec:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 80047ee:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80047f0:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80047f2:	b28d      	uxth	r5, r1
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	b92b      	cbnz	r3, 8004804 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80047f8:	4b10      	ldr	r3, [pc, #64]	@ (800483c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80047fa:	216c      	movs	r1, #108	@ 0x6c
 80047fc:	4a10      	ldr	r2, [pc, #64]	@ (8004840 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80047fe:	4811      	ldr	r0, [pc, #68]	@ (8004844 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004800:	f025 fd0e 	bl	802a220 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004804:	4910      	ldr	r1, [pc, #64]	@ (8004848 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004806:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004808:	8809      	ldrh	r1, [r1, #0]
 800480a:	4291      	cmp	r1, r2
 800480c:	d803      	bhi.n	8004816 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800480e:	4b0f      	ldr	r3, [pc, #60]	@ (800484c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004810:	216d      	movs	r1, #109	@ 0x6d
 8004812:	4a0b      	ldr	r2, [pc, #44]	@ (8004840 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004814:	e7f3      	b.n	80047fe <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004816:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800481a:	4b0d      	ldr	r3, [pc, #52]	@ (8004850 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004822:	6803      	ldr	r3, [r0, #0]
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	4798      	blx	r3
 8004828:	1a29      	subs	r1, r5, r0
 800482a:	4633      	mov	r3, r6
 800482c:	4620      	mov	r0, r4
 800482e:	b209      	sxth	r1, r1
    }
 8004830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004834:	4718      	bx	r3
 8004836:	bf00      	nop
 8004838:	240287c8 	.word	0x240287c8
 800483c:	0802eb58 	.word	0x0802eb58
 8004840:	0802eb9a 	.word	0x0802eb9a
 8004844:	0802ebd5 	.word	0x0802ebd5
 8004848:	240287cc 	.word	0x240287cc
 800484c:	0802ec2a 	.word	0x0802ec2a
 8004850:	240287d0 	.word	0x240287d0

08004854 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8004854:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8004856:	b570      	push	{r4, r5, r6, lr}
 8004858:	4604      	mov	r4, r0
        setX(x);
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 800485c:	4615      	mov	r5, r2
        setX(x);
 800485e:	4798      	blx	r3
        setY(y);
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8004868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800486c:	4718      	bx	r3

0800486e <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800486e:	b570      	push	{r4, r5, r6, lr}
 8004870:	4604      	mov	r4, r0
 8004872:	461d      	mov	r5, r3
 8004874:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8004878:	f7ff ffec 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	4629      	mov	r1, r5
 8004880:	4620      	mov	r0, r4
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	4798      	blx	r3
        setHeight(height);
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4631      	mov	r1, r6
 800488a:	4620      	mov	r0, r4
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 800488e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8004892:	4718      	bx	r3

08004894 <_ZN8touchgfx6WidgetC1Ev>:
 8004894:	2200      	movs	r2, #0
 8004896:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800489a:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800489e:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80048a2:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80048a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048aa:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80048ac:	4a01      	ldr	r2, [pc, #4]	@ (80048b4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80048ae:	6002      	str	r2, [r0, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	0802ecc0 	.word	0x0802ecc0

080048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 80048ba:	4b19      	ldr	r3, [pc, #100]	@ (8004920 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 80048bc:	4606      	mov	r6, r0
 80048be:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	428b      	cmp	r3, r1
 80048c4:	d92a      	bls.n	800491c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80048c6:	4b17      	ldr	r3, [pc, #92]	@ (8004924 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	b92b      	cbnz	r3, 80048d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 80048cc:	4b16      	ldr	r3, [pc, #88]	@ (8004928 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 80048ce:	216c      	movs	r1, #108	@ 0x6c
 80048d0:	4a16      	ldr	r2, [pc, #88]	@ (800492c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 80048d2:	4817      	ldr	r0, [pc, #92]	@ (8004930 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 80048d4:	f025 fca4 	bl	802a220 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80048d8:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80048dc:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80048e4:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	f004 fc18 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	4607      	mov	r7, r0
 80048f0:	4628      	mov	r0, r5
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	4798      	blx	r3
 80048f6:	682b      	ldr	r3, [r5, #0]
 80048f8:	4604      	mov	r4, r0
 80048fa:	4639      	mov	r1, r7
 80048fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fe:	4628      	mov	r0, r5
 8004900:	4798      	blx	r3
 8004902:	fb14 f400 	smulbb	r4, r4, r0
 8004906:	682b      	ldr	r3, [r5, #0]
 8004908:	4639      	mov	r1, r7
 800490a:	b2a4      	uxth	r4, r4
 800490c:	4628      	mov	r0, r5
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	4798      	blx	r3
 8004912:	1823      	adds	r3, r4, r0
 8004914:	b21b      	sxth	r3, r3
 8004916:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800491a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800491c:	2300      	movs	r3, #0
 800491e:	e7fa      	b.n	8004916 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8004920:	240287cc 	.word	0x240287cc
 8004924:	240287c8 	.word	0x240287c8
 8004928:	0802eb58 	.word	0x0802eb58
 800492c:	0802eb9a 	.word	0x0802eb9a
 8004930:	0802ebd5 	.word	0x0802ebd5
 8004934:	240287d0 	.word	0x240287d0
 8004938:	240287d4 	.word	0x240287d4

0800493c <_ZN18CalculatorViewBaseC1Ev>:
CalculatorViewBase::CalculatorViewBase() :
 800493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004940:	4604      	mov	r4, r0
 8004942:	b09d      	sub	sp, #116	@ 0x74
template <class T>
class View : public Screen
{
public:
    View()
        : presenter(0)
 8004944:	f04f 0900 	mov.w	r9, #0
 8004948:	f018 fb3c 	bl	801cfc4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &CalculatorViewBase::buttonCallbackHandler)
 800494c:	4626      	mov	r6, r4
 800494e:	4bdf      	ldr	r3, [pc, #892]	@ (8004ccc <_ZN18CalculatorViewBaseC1Ev+0x390>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004950:	2226      	movs	r2, #38	@ 0x26
 8004952:	4649      	mov	r1, r9
 8004954:	f8c4 903c 	str.w	r9, [r4, #60]	@ 0x3c
 8004958:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 800495c:	f846 3b40 	str.w	r3, [r6], #64
 8004960:	4630      	mov	r0, r6
 8004962:	f026 fdaf 	bl	802b4c4 <memset>
 8004966:	4630      	mov	r0, r6
 8004968:	f7ff ff94 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
 800496c:	4bd8      	ldr	r3, [pc, #864]	@ (8004cd0 <_ZN18CalculatorViewBaseC1Ev+0x394>)
 800496e:	f104 0ab4 	add.w	sl, r4, #180	@ 0xb4
 8004972:	4658      	mov	r0, fp
 8004974:	6423      	str	r3, [r4, #64]	@ 0x40
 8004976:	23ff      	movs	r3, #255	@ 0xff
        : color(col)
 8004978:	f8c4 9068 	str.w	r9, [r4, #104]	@ 0x68
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800497c:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8004980:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        touchable = touch;
 8004984:	f04f 0701 	mov.w	r7, #1
 8004988:	f014 f82e 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800498c:	4650      	mov	r0, sl
 800498e:	f014 f82b 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004992:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
    CalculatorButton_0.setAction(buttonCallback);
 8004996:	f204 68dc 	addw	r8, r4, #1756	@ 0x6dc
    buttonCallback(this, &CalculatorViewBase::buttonCallbackHandler)
 800499a:	4618      	mov	r0, r3
 800499c:	9303      	str	r3, [sp, #12]
 800499e:	f014 f823 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049a2:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 80049a6:	4618      	mov	r0, r3
 80049a8:	9304      	str	r3, [sp, #16]
 80049aa:	f014 f81d 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049ae:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 80049b2:	4618      	mov	r0, r3
 80049b4:	9305      	str	r3, [sp, #20]
 80049b6:	f014 f817 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049ba:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 80049be:	4618      	mov	r0, r3
 80049c0:	9306      	str	r3, [sp, #24]
 80049c2:	f014 f811 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049c6:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 80049ca:	4618      	mov	r0, r3
 80049cc:	9307      	str	r3, [sp, #28]
 80049ce:	f014 f80b 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049d2:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 80049d6:	4618      	mov	r0, r3
 80049d8:	9308      	str	r3, [sp, #32]
 80049da:	f014 f805 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049de:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 80049e2:	4618      	mov	r0, r3
 80049e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e6:	f013 ffff 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049ea:	f504 733d 	add.w	r3, r4, #756	@ 0x2f4
        : T(), clickAction(0)
 80049ee:	a91a      	add	r1, sp, #104	@ 0x68
 80049f0:	f8ad 5068 	strh.w	r5, [sp, #104]	@ 0x68
 80049f4:	4618      	mov	r0, r3
 80049f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80049f8:	f012 ffe4 	bl	80179c4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80049fc:	4bb5      	ldr	r3, [pc, #724]	@ (8004cd4 <_ZN18CalculatorViewBaseC1Ev+0x398>)
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80049fe:	2226      	movs	r2, #38	@ 0x26
 8004a00:	4649      	mov	r1, r9
 8004a02:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
 8004a06:	f504 7349 	add.w	r3, r4, #804	@ 0x324
 8004a0a:	f884 7318 	strb.w	r7, [r4, #792]	@ 0x318
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f8c4 9320 	str.w	r9, [r4, #800]	@ 0x320
 8004a14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a16:	f026 fd55 	bl	802b4c4 <memset>
 8004a1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004a1c:	f7ff ff3a 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8004a20:	4bad      	ldr	r3, [pc, #692]	@ (8004cd8 <_ZN18CalculatorViewBaseC1Ev+0x39c>)
 8004a22:	f884 7348 	strb.w	r7, [r4, #840]	@ 0x348
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004a26:	1d27      	adds	r7, r4, #4
 8004a28:	f8c4 3324 	str.w	r3, [r4, #804]	@ 0x324
 8004a2c:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8004a30:	f8a4 5352 	strh.w	r5, [r4, #850]	@ 0x352
 8004a34:	4618      	mov	r0, r3
 8004a36:	f8a4 5354 	strh.w	r5, [r4, #852]	@ 0x354
 8004a3a:	f884 5356 	strb.w	r5, [r4, #854]	@ 0x356
 8004a3e:	f8c4 934c 	str.w	r9, [r4, #844]	@ 0x34c
 8004a42:	f884 9350 	strb.w	r9, [r4, #848]	@ 0x350
 8004a46:	930c      	str	r3, [sp, #48]	@ 0x30
 8004a48:	f013 ffce 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004a4c:	f504 7368 	add.w	r3, r4, #928	@ 0x3a0
 8004a50:	4618      	mov	r0, r3
 8004a52:	930d      	str	r3, [sp, #52]	@ 0x34
 8004a54:	f013 ffc8 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004a58:	f504 737a 	add.w	r3, r4, #1000	@ 0x3e8
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a60:	f013 ffc2 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004a64:	f504 6386 	add.w	r3, r4, #1072	@ 0x430
 8004a68:	4618      	mov	r0, r3
 8004a6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a6c:	f013 ffbc 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004a70:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8004a74:	4618      	mov	r0, r3
 8004a76:	9310      	str	r3, [sp, #64]	@ 0x40
 8004a78:	f013 ffb6 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004a7c:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 8004a80:	4618      	mov	r0, r3
 8004a82:	9311      	str	r3, [sp, #68]	@ 0x44
 8004a84:	f013 ffb0 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004a88:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004a90:	f013 ffaa 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004a94:	f504 63aa 	add.w	r3, r4, #1360	@ 0x550
 8004a98:	4618      	mov	r0, r3
 8004a9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004a9c:	f013 ffa4 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004aa0:	f504 63b3 	add.w	r3, r4, #1432	@ 0x598
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	9314      	str	r3, [sp, #80]	@ 0x50
 8004aa8:	f013 ff9e 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004aac:	f504 63bc 	add.w	r3, r4, #1504	@ 0x5e0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	9315      	str	r3, [sp, #84]	@ 0x54
 8004ab4:	f013 ff98 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004ab8:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 8004abc:	4618      	mov	r0, r3
 8004abe:	9316      	str	r3, [sp, #88]	@ 0x58
 8004ac0:	f013 ff92 	bl	80189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004ac4:	f504 63ce 	add.w	r3, r4, #1648	@ 0x670
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004ac8:	2226      	movs	r2, #38	@ 0x26
 8004aca:	4649      	mov	r1, r9
 8004acc:	4618      	mov	r0, r3
 8004ace:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004ad0:	f026 fcf8 	bl	802b4c4 <memset>
 8004ad4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004ad6:	f7ff fedd 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 8004ada:	4b80      	ldr	r3, [pc, #512]	@ (8004cdc <_ZN18CalculatorViewBaseC1Ev+0x3a0>)
 8004adc:	f8a4 569c 	strh.w	r5, [r4, #1692]	@ 0x69c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ae4:	f8c4 3698 	str.w	r3, [r4, #1688]	@ 0x698
 8004ae8:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
    __background.setPosition(0, 0, 800, 480);
 8004aec:	464a      	mov	r2, r9
 8004aee:	4630      	mov	r0, r6
 8004af0:	f8c4 36a4 	str.w	r3, [r4, #1700]	@ 0x6a4
 8004af4:	4649      	mov	r1, r9
        : TextAreaWithWildcardBase(), wc1(0)
 8004af6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ce0 <_ZN18CalculatorViewBaseC1Ev+0x3a4>)
 8004af8:	f8c4 56b0 	str.w	r5, [r4, #1712]	@ 0x6b0
 8004afc:	f8c4 3670 	str.w	r3, [r4, #1648]	@ 0x670
        : pobject(pObject), pmemfun(pmemfun_1)
 8004b00:	4b78      	ldr	r3, [pc, #480]	@ (8004ce4 <_ZN18CalculatorViewBaseC1Ev+0x3a8>)
        : color(col)
 8004b02:	f8c4 96a0 	str.w	r9, [r4, #1696]	@ 0x6a0
 8004b06:	f8c4 36dc 	str.w	r3, [r4, #1756]	@ 0x6dc
 8004b0a:	4b77      	ldr	r3, [pc, #476]	@ (8004ce8 <_ZN18CalculatorViewBaseC1Ev+0x3ac>)
 8004b0c:	f8a4 96a8 	strh.w	r9, [r4, #1704]	@ 0x6a8
 8004b10:	f8c4 36e4 	str.w	r3, [r4, #1764]	@ 0x6e4
 8004b14:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004b18:	f8c4 96ac 	str.w	r9, [r4, #1708]	@ 0x6ac
              text(0)
 8004b1c:	f8c4 96b4 	str.w	r9, [r4, #1716]	@ 0x6b4
 8004b20:	f8c4 96b8 	str.w	r9, [r4, #1720]	@ 0x6b8
 8004b24:	f8c4 46e0 	str.w	r4, [r4, #1760]	@ 0x6e0
 8004b28:	f8c4 96e8 	str.w	r9, [r4, #1768]	@ 0x6e8
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004b32:	f7ff fe9c 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004b36:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004b40:	2603      	movs	r6, #3
 8004b42:	f00e fce5 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_0.setXY(541, 247);
 8004b46:	4658      	mov	r0, fp
 8004b48:	22f7      	movs	r2, #247	@ 0xf7
 8004b4a:	f240 211d 	movw	r1, #541	@ 0x21d
 8004b4e:	f7ff fe81 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_0.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004b52:	aa1a      	add	r2, sp, #104	@ 0x68
 8004b54:	a919      	add	r1, sp, #100	@ 0x64
 8004b56:	4658      	mov	r0, fp
 8004b58:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004b5c:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004b60:	f013 fcd2 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004b64:	f04f 0308 	mov.w	r3, #8
        updateTextPosition();
 8004b68:	4658      	mov	r0, fp
 8004b6a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8004b6e:	f7ff fea3 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004b72:	4659      	mov	r1, fp
 8004b74:	4638      	mov	r0, r7
        rotation = textRotation;
 8004b76:	f884 60b0 	strb.w	r6, [r4, #176]	@ 0xb0
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004b7a:	f8c4 8094 	str.w	r8, [r4, #148]	@ 0x94
 8004b7e:	f04f 0b04 	mov.w	fp, #4
        colorPressed = col;
 8004b82:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 8004b86:	f00e fcc3 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_OpenParenthesis.setXY(651, 356);
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004b90:	f240 218b 	movw	r1, #651	@ 0x28b
 8004b94:	f7ff fe5e 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
 8004b98:	f04f 0302 	mov.w	r3, #2
    CalculatorButton_OpenParenthesis.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004b9c:	aa1a      	add	r2, sp, #104	@ 0x68
 8004b9e:	a919      	add	r1, sp, #100	@ 0x64
 8004ba0:	4650      	mov	r0, sl
 8004ba2:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004ba6:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004baa:	f013 fcad 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004bae:	2309      	movs	r3, #9
        updateTextPosition();
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	f8a4 30ec 	strh.w	r3, [r4, #236]	@ 0xec
 8004bb6:	f7ff fe7f 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004bba:	4651      	mov	r1, sl
 8004bbc:	4638      	mov	r0, r7
        rotation = textRotation;
 8004bbe:	f884 60f8 	strb.w	r6, [r4, #248]	@ 0xf8
 8004bc2:	f8c4 80dc 	str.w	r8, [r4, #220]	@ 0xdc
 8004bc6:	f04f 0a01 	mov.w	sl, #1
        colorPressed = col;
 8004bca:	e9c4 553c 	strd	r5, r5, [r4, #240]	@ 0xf0
 8004bce:	f00e fc9f 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Clear.setXY(319, 25);
 8004bd2:	2219      	movs	r2, #25
 8004bd4:	f240 113f 	movw	r1, #319	@ 0x13f
 8004bd8:	9803      	ldr	r0, [sp, #12]
 8004bda:	f7ff fe3b 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Clear.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004bde:	aa1a      	add	r2, sp, #104	@ 0x68
 8004be0:	a919      	add	r1, sp, #100	@ 0x64
 8004be2:	9803      	ldr	r0, [sp, #12]
 8004be4:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004be8:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004bec:	f013 fc8c 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004bf0:	f04f 0107 	mov.w	r1, #7
        updateTextPosition();
 8004bf4:	9803      	ldr	r0, [sp, #12]
 8004bf6:	f8a4 1134 	strh.w	r1, [r4, #308]	@ 0x134
 8004bfa:	f7ff fe5d 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004bfe:	9903      	ldr	r1, [sp, #12]
 8004c00:	4638      	mov	r0, r7
        rotation = textRotation;
 8004c02:	f884 6140 	strb.w	r6, [r4, #320]	@ 0x140
 8004c06:	f8c4 8124 	str.w	r8, [r4, #292]	@ 0x124
        colorPressed = col;
 8004c0a:	e9c4 554e 	strd	r5, r5, [r4, #312]	@ 0x138
 8004c0e:	f00e fc7f 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Delete.setXY(208, 25);
 8004c12:	2219      	movs	r2, #25
 8004c14:	21d0      	movs	r1, #208	@ 0xd0
 8004c16:	9804      	ldr	r0, [sp, #16]
 8004c18:	f7ff fe1c 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Delete.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004c1c:	a819      	add	r0, sp, #100	@ 0x64
 8004c1e:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004c22:	f04f 0a05 	mov.w	sl, #5
 8004c26:	aa1a      	add	r2, sp, #104	@ 0x68
 8004c28:	4601      	mov	r1, r0
 8004c2a:	9804      	ldr	r0, [sp, #16]
 8004c2c:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004c30:	f013 fc6a 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004c34:	9804      	ldr	r0, [sp, #16]
 8004c36:	f8a4 a17c 	strh.w	sl, [r4, #380]	@ 0x17c
 8004c3a:	f7ff fe3d 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004c3e:	9904      	ldr	r1, [sp, #16]
 8004c40:	4638      	mov	r0, r7
        rotation = textRotation;
 8004c42:	f884 6188 	strb.w	r6, [r4, #392]	@ 0x188
 8004c46:	f8c4 816c 	str.w	r8, [r4, #364]	@ 0x16c
        colorPressed = col;
 8004c4a:	e9c4 5560 	strd	r5, r5, [r4, #384]	@ 0x180
 8004c4e:	f00e fc5f 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_CloseParenthesis.setXY(651, 247);
 8004c52:	22f7      	movs	r2, #247	@ 0xf7
 8004c54:	f240 218b 	movw	r1, #651	@ 0x28b
 8004c58:	9805      	ldr	r0, [sp, #20]
 8004c5a:	f7ff fdfb 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_CloseParenthesis.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004c5e:	a819      	add	r0, sp, #100	@ 0x64
 8004c60:	f04f 0302 	mov.w	r3, #2
 8004c64:	aa1a      	add	r2, sp, #104	@ 0x68
 8004c66:	4601      	mov	r1, r0
 8004c68:	9805      	ldr	r0, [sp, #20]
 8004c6a:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004c6e:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004c72:	f013 fc49 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004c76:	2306      	movs	r3, #6
        updateTextPosition();
 8004c78:	9805      	ldr	r0, [sp, #20]
 8004c7a:	f8a4 31c4 	strh.w	r3, [r4, #452]	@ 0x1c4
 8004c7e:	f7ff fe1b 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004c82:	9905      	ldr	r1, [sp, #20]
 8004c84:	4638      	mov	r0, r7
        rotation = textRotation;
 8004c86:	f884 61d0 	strb.w	r6, [r4, #464]	@ 0x1d0
 8004c8a:	f8c4 81b4 	str.w	r8, [r4, #436]	@ 0x1b4
        colorPressed = col;
 8004c8e:	e9c4 5572 	strd	r5, r5, [r4, #456]	@ 0x1c8
 8004c92:	f00e fc3d 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Subtract.setXY(541, 25);
 8004c96:	2219      	movs	r2, #25
 8004c98:	f240 211d 	movw	r1, #541	@ 0x21d
 8004c9c:	9806      	ldr	r0, [sp, #24]
 8004c9e:	f7ff fdd9 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Subtract.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004ca2:	a819      	add	r0, sp, #100	@ 0x64
 8004ca4:	f04f 0302 	mov.w	r3, #2
 8004ca8:	aa1a      	add	r2, sp, #104	@ 0x68
 8004caa:	4601      	mov	r1, r0
 8004cac:	9806      	ldr	r0, [sp, #24]
 8004cae:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004cb2:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004cb6:	f013 fc27 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004cba:	230a      	movs	r3, #10
        updateTextPosition();
 8004cbc:	9806      	ldr	r0, [sp, #24]
 8004cbe:	f8a4 320c 	strh.w	r3, [r4, #524]	@ 0x20c
 8004cc2:	f7ff fdf9 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004cc6:	9906      	ldr	r1, [sp, #24]
 8004cc8:	e010      	b.n	8004cec <_ZN18CalculatorViewBaseC1Ev+0x3b0>
 8004cca:	bf00      	nop
 8004ccc:	0802ee54 	.word	0x0802ee54
 8004cd0:	080308ec 	.word	0x080308ec
 8004cd4:	0802edc8 	.word	0x0802edc8
 8004cd8:	08030954 	.word	0x08030954
 8004cdc:	0802ed28 	.word	0x0802ed28
 8004ce0:	0802ed38 	.word	0x0802ed38
 8004ce4:	0802ee3c 	.word	0x0802ee3c
 8004ce8:	08004651 	.word	0x08004651
 8004cec:	4638      	mov	r0, r7
        rotation = textRotation;
 8004cee:	f884 6218 	strb.w	r6, [r4, #536]	@ 0x218
 8004cf2:	f8c4 81fc 	str.w	r8, [r4, #508]	@ 0x1fc
        colorPressed = col;
 8004cf6:	e9c4 5584 	strd	r5, r5, [r4, #528]	@ 0x210
 8004cfa:	f00e fc09 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Add.setXY(430, 25);
 8004cfe:	2219      	movs	r2, #25
 8004d00:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004d04:	9807      	ldr	r0, [sp, #28]
 8004d06:	f7ff fda5 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Add.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004d0a:	a819      	add	r0, sp, #100	@ 0x64
 8004d0c:	f04f 0302 	mov.w	r3, #2
 8004d10:	aa1a      	add	r2, sp, #104	@ 0x68
 8004d12:	4601      	mov	r1, r0
 8004d14:	9807      	ldr	r0, [sp, #28]
 8004d16:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004d1a:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004d1e:	f013 fbf3 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004d22:	220b      	movs	r2, #11
        updateTextPosition();
 8004d24:	9807      	ldr	r0, [sp, #28]
 8004d26:	f8a4 2254 	strh.w	r2, [r4, #596]	@ 0x254
 8004d2a:	f7ff fdc5 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004d2e:	9907      	ldr	r1, [sp, #28]
 8004d30:	4638      	mov	r0, r7
 8004d32:	f8c4 8244 	str.w	r8, [r4, #580]	@ 0x244
        colorPressed = col;
 8004d36:	e9c4 5596 	strd	r5, r5, [r4, #600]	@ 0x258
 8004d3a:	f00e fbe9 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Divide.setXY(651, 25);
 8004d3e:	2219      	movs	r2, #25
 8004d40:	f240 218b 	movw	r1, #651	@ 0x28b
 8004d44:	9808      	ldr	r0, [sp, #32]
 8004d46:	f7ff fd85 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Divide.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004d4a:	a819      	add	r0, sp, #100	@ 0x64
 8004d4c:	f04f 0302 	mov.w	r3, #2
 8004d50:	aa1a      	add	r2, sp, #104	@ 0x68
 8004d52:	4601      	mov	r1, r0
 8004d54:	9808      	ldr	r0, [sp, #32]
 8004d56:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004d5a:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004d5e:	f013 fbd3 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004d62:	220c      	movs	r2, #12
        updateTextPosition();
 8004d64:	9808      	ldr	r0, [sp, #32]
 8004d66:	f8a4 229c 	strh.w	r2, [r4, #668]	@ 0x29c
 8004d6a:	f7ff fda5 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004d6e:	9908      	ldr	r1, [sp, #32]
 8004d70:	4638      	mov	r0, r7
        rotation = textRotation;
 8004d72:	f884 62a8 	strb.w	r6, [r4, #680]	@ 0x2a8
 8004d76:	f8c4 828c 	str.w	r8, [r4, #652]	@ 0x28c
        colorPressed = col;
 8004d7a:	e9c4 55a8 	strd	r5, r5, [r4, #672]	@ 0x2a0
 8004d7e:	f00e fbc7 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Multiply.setXY(651, 140);
 8004d82:	228c      	movs	r2, #140	@ 0x8c
 8004d84:	f240 218b 	movw	r1, #651	@ 0x28b
 8004d88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d8a:	f7ff fd63 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Multiply.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004d8e:	a819      	add	r0, sp, #100	@ 0x64
 8004d90:	f04f 0302 	mov.w	r3, #2
 8004d94:	aa1a      	add	r2, sp, #104	@ 0x68
 8004d96:	4601      	mov	r1, r0
 8004d98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d9a:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004d9e:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004da2:	f013 fbb1 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004da6:	220d      	movs	r2, #13
        updateTextPosition();
 8004da8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004daa:	f8a4 22e4 	strh.w	r2, [r4, #740]	@ 0x2e4
 8004dae:	f7ff fd83 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004db2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004db4:	4638      	mov	r0, r7
        rotation = textRotation;
 8004db6:	f884 62f0 	strb.w	r6, [r4, #752]	@ 0x2f0
 8004dba:	f8c4 82d4 	str.w	r8, [r4, #724]	@ 0x2d4
        colorPressed = col;
 8004dbe:	e9c4 55ba 	strd	r5, r5, [r4, #744]	@ 0x2e8
 8004dc2:	f00e fba5 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ROATATED_ID));
 8004dc6:	a81a      	add	r0, sp, #104	@ 0x68
 8004dc8:	230a      	movs	r3, #10
 8004dca:	4601      	mov	r1, r0
 8004dcc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004dce:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
 8004dd2:	f013 fcd2 	bl	801877a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    HomeIcon.setPosition(23, 16, 55, 55);
 8004dd6:	2337      	movs	r3, #55	@ 0x37
 8004dd8:	2210      	movs	r2, #16
 8004dda:	2117      	movs	r1, #23
 8004ddc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	f7ff fd45 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004de4:	4649      	mov	r1, r9
 8004de6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004de8:	f012 fda7 	bl	801793a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8004dec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004dee:	4638      	mov	r0, r7
 8004df0:	f00e fb8e 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeButton.setXY(20, 14);
 8004df4:	220e      	movs	r2, #14
 8004df6:	2114      	movs	r1, #20
 8004df8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004dfa:	f7ff fd2b 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
 8004dfe:	a819      	add	r0, sp, #100	@ 0x64
 8004e00:	aa1a      	add	r2, sp, #104	@ 0x68
 8004e02:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004e06:	4601      	mov	r1, r0
 8004e08:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004e0a:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 8004e0e:	f013 fb7b 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004e12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e14:	4638      	mov	r0, r7
 8004e16:	f8c4 834c 	str.w	r8, [r4, #844]	@ 0x34c
 8004e1a:	f04f 0a10 	mov.w	sl, #16
 8004e1e:	f00e fb77 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_9.setXY(208, 137);
 8004e22:	2289      	movs	r2, #137	@ 0x89
 8004e24:	21d0      	movs	r1, #208	@ 0xd0
 8004e26:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004e28:	f7ff fd14 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004e2c:	a819      	add	r0, sp, #100	@ 0x64
 8004e2e:	aa1a      	add	r2, sp, #104	@ 0x68
 8004e30:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004e34:	4601      	mov	r1, r0
 8004e36:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004e38:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004e3c:	f013 fb64 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004e40:	2318      	movs	r3, #24
        updateTextPosition();
 8004e42:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004e44:	f8a4 3390 	strh.w	r3, [r4, #912]	@ 0x390
 8004e48:	f7ff fd36 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004e4c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004e4e:	4638      	mov	r0, r7
        rotation = textRotation;
 8004e50:	f884 639c 	strb.w	r6, [r4, #924]	@ 0x39c
 8004e54:	f8c4 8380 	str.w	r8, [r4, #896]	@ 0x380
        colorPressed = col;
 8004e58:	e9c4 55e5 	strd	r5, r5, [r4, #916]	@ 0x394
 8004e5c:	f00e fb58 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_8.setXY(208, 247);
 8004e60:	22f7      	movs	r2, #247	@ 0xf7
 8004e62:	21d0      	movs	r1, #208	@ 0xd0
 8004e64:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e66:	f7ff fcf5 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004e6a:	a819      	add	r0, sp, #100	@ 0x64
 8004e6c:	aa1a      	add	r2, sp, #104	@ 0x68
 8004e6e:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004e72:	4601      	mov	r1, r0
 8004e74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e76:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004e7a:	f013 fb45 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004e7e:	2317      	movs	r3, #23
        updateTextPosition();
 8004e80:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e82:	f8a4 33d8 	strh.w	r3, [r4, #984]	@ 0x3d8
 8004e86:	f7ff fd17 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004e8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004e8c:	4638      	mov	r0, r7
        rotation = textRotation;
 8004e8e:	f884 63e4 	strb.w	r6, [r4, #996]	@ 0x3e4
 8004e92:	f8c4 83c8 	str.w	r8, [r4, #968]	@ 0x3c8
        colorPressed = col;
 8004e96:	e9c4 55f7 	strd	r5, r5, [r4, #988]	@ 0x3dc
 8004e9a:	f00e fb39 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_7.setXY(208, 356);
 8004e9e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004ea2:	21d0      	movs	r1, #208	@ 0xd0
 8004ea4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004ea6:	f7ff fcd5 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004eaa:	a819      	add	r0, sp, #100	@ 0x64
 8004eac:	aa1a      	add	r2, sp, #104	@ 0x68
 8004eae:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004eb6:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004eba:	f013 fb25 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004ebe:	2316      	movs	r3, #22
        updateTextPosition();
 8004ec0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004ec2:	f8a4 3420 	strh.w	r3, [r4, #1056]	@ 0x420
 8004ec6:	f7ff fcf7 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004eca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004ecc:	4638      	mov	r0, r7
        color = col;
 8004ece:	f8c4 5424 	str.w	r5, [r4, #1060]	@ 0x424
        colorPressed = col;
 8004ed2:	f8c4 5428 	str.w	r5, [r4, #1064]	@ 0x428
        rotation = textRotation;
 8004ed6:	f884 642c 	strb.w	r6, [r4, #1068]	@ 0x42c
 8004eda:	f8c4 8410 	str.w	r8, [r4, #1040]	@ 0x410
 8004ede:	f00e fb17 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_6.setXY(319, 137);
 8004ee2:	2289      	movs	r2, #137	@ 0x89
 8004ee4:	f240 113f 	movw	r1, #319	@ 0x13f
 8004ee8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004eea:	f7ff fcb3 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004eee:	a819      	add	r0, sp, #100	@ 0x64
 8004ef0:	aa1a      	add	r2, sp, #104	@ 0x68
 8004ef2:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004ef6:	4601      	mov	r1, r0
 8004ef8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004efa:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004efe:	f013 fb03 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004f02:	2315      	movs	r3, #21
        updateTextPosition();
 8004f04:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004f06:	f8a4 3468 	strh.w	r3, [r4, #1128]	@ 0x468
 8004f0a:	f7ff fcd5 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004f0e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f10:	4638      	mov	r0, r7
        color = col;
 8004f12:	f8c4 546c 	str.w	r5, [r4, #1132]	@ 0x46c
        colorPressed = col;
 8004f16:	f8c4 5470 	str.w	r5, [r4, #1136]	@ 0x470
        rotation = textRotation;
 8004f1a:	f884 6474 	strb.w	r6, [r4, #1140]	@ 0x474
 8004f1e:	f8c4 8458 	str.w	r8, [r4, #1112]	@ 0x458
 8004f22:	f00e faf5 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_5.setXY(319, 247);
 8004f26:	22f7      	movs	r2, #247	@ 0xf7
 8004f28:	f240 113f 	movw	r1, #319	@ 0x13f
 8004f2c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004f2e:	f7ff fc91 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004f32:	a819      	add	r0, sp, #100	@ 0x64
 8004f34:	aa1a      	add	r2, sp, #104	@ 0x68
 8004f36:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004f3e:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004f42:	f013 fae1 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004f46:	2314      	movs	r3, #20
        updateTextPosition();
 8004f48:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004f4a:	f8a4 34b0 	strh.w	r3, [r4, #1200]	@ 0x4b0
 8004f4e:	f7ff fcb3 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004f52:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004f54:	4638      	mov	r0, r7
        color = col;
 8004f56:	f8c4 54b4 	str.w	r5, [r4, #1204]	@ 0x4b4
        colorPressed = col;
 8004f5a:	f8c4 54b8 	str.w	r5, [r4, #1208]	@ 0x4b8
        rotation = textRotation;
 8004f5e:	f884 64bc 	strb.w	r6, [r4, #1212]	@ 0x4bc
 8004f62:	f8c4 84a0 	str.w	r8, [r4, #1184]	@ 0x4a0
 8004f66:	f00e fad3 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_4.setXY(319, 356);
 8004f6a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004f6e:	f240 113f 	movw	r1, #319	@ 0x13f
 8004f72:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004f74:	f7ff fc6e 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004f78:	a819      	add	r0, sp, #100	@ 0x64
 8004f7a:	aa1a      	add	r2, sp, #104	@ 0x68
 8004f7c:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004f80:	4601      	mov	r1, r0
 8004f82:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004f84:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004f88:	f013 fabe 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004f8c:	2313      	movs	r3, #19
        updateTextPosition();
 8004f8e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004f90:	f8a4 34f8 	strh.w	r3, [r4, #1272]	@ 0x4f8
 8004f94:	f7ff fc90 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004f98:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004f9a:	4638      	mov	r0, r7
        color = col;
 8004f9c:	f8c4 54fc 	str.w	r5, [r4, #1276]	@ 0x4fc
        colorPressed = col;
 8004fa0:	f8c4 5500 	str.w	r5, [r4, #1280]	@ 0x500
        rotation = textRotation;
 8004fa4:	f884 6504 	strb.w	r6, [r4, #1284]	@ 0x504
 8004fa8:	f8c4 84e8 	str.w	r8, [r4, #1256]	@ 0x4e8
 8004fac:	f00e fab0 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_3.setXY(430, 356);
 8004fb0:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004fb4:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004fb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004fba:	f7ff fc4b 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004fbe:	a819      	add	r0, sp, #100	@ 0x64
 8004fc0:	aa1a      	add	r2, sp, #104	@ 0x68
 8004fc2:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004fca:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004fce:	f013 fa9b 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004fd2:	2312      	movs	r3, #18
        updateTextPosition();
 8004fd4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004fd6:	f8a4 3540 	strh.w	r3, [r4, #1344]	@ 0x540
 8004fda:	f7ff fc6d 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004fde:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8004fe0:	4638      	mov	r0, r7
        color = col;
 8004fe2:	f8c4 5544 	str.w	r5, [r4, #1348]	@ 0x544
        colorPressed = col;
 8004fe6:	f8c4 5548 	str.w	r5, [r4, #1352]	@ 0x548
        rotation = textRotation;
 8004fea:	f884 654c 	strb.w	r6, [r4, #1356]	@ 0x54c
 8004fee:	f8c4 8530 	str.w	r8, [r4, #1328]	@ 0x530
 8004ff2:	f00e fa8d 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_2.setXY(430, 247);
 8004ff6:	22f7      	movs	r2, #247	@ 0xf7
 8004ff8:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004ffc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004ffe:	f7ff fc29 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8005002:	a819      	add	r0, sp, #100	@ 0x64
 8005004:	aa1a      	add	r2, sp, #104	@ 0x68
 8005006:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 800500a:	4601      	mov	r1, r0
 800500c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800500e:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8005012:	f013 fa79 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8005016:	2311      	movs	r3, #17
        updateTextPosition();
 8005018:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800501a:	f8a4 3588 	strh.w	r3, [r4, #1416]	@ 0x588
 800501e:	f7ff fc4b 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8005022:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005024:	4638      	mov	r0, r7
        color = col;
 8005026:	f8c4 558c 	str.w	r5, [r4, #1420]	@ 0x58c
        colorPressed = col;
 800502a:	f8c4 5590 	str.w	r5, [r4, #1424]	@ 0x590
        rotation = textRotation;
 800502e:	f884 6594 	strb.w	r6, [r4, #1428]	@ 0x594
 8005032:	f8c4 8578 	str.w	r8, [r4, #1400]	@ 0x578
 8005036:	f00e fa6b 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_1.setXY(430, 140);
 800503a:	228c      	movs	r2, #140	@ 0x8c
 800503c:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8005040:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005042:	f7ff fc07 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8005046:	a819      	add	r0, sp, #100	@ 0x64
 8005048:	aa1a      	add	r2, sp, #104	@ 0x68
 800504a:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 800504e:	4601      	mov	r1, r0
 8005050:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005052:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8005056:	f013 fa57 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 800505a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800505c:	f8a4 a5d0 	strh.w	sl, [r4, #1488]	@ 0x5d0
 8005060:	f7ff fc2a 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8005064:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8005066:	4638      	mov	r0, r7
        color = col;
 8005068:	f8c4 55d4 	str.w	r5, [r4, #1492]	@ 0x5d4
        colorPressed = col;
 800506c:	f8c4 55d8 	str.w	r5, [r4, #1496]	@ 0x5d8
        rotation = textRotation;
 8005070:	f884 65dc 	strb.w	r6, [r4, #1500]	@ 0x5dc
 8005074:	f8c4 85c0 	str.w	r8, [r4, #1472]	@ 0x5c0
 8005078:	f00e fa4a 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Equals.setXY(541, 140);
 800507c:	228c      	movs	r2, #140	@ 0x8c
 800507e:	f240 211d 	movw	r1, #541	@ 0x21d
 8005082:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005084:	f7ff fbe6 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
 8005088:	f04f 0107 	mov.w	r1, #7
 800508c:	f04f 0208 	mov.w	r2, #8
    CalculatorButton_Equals.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8005090:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005092:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
 8005096:	a919      	add	r1, sp, #100	@ 0x64
 8005098:	f8ad 2068 	strh.w	r2, [sp, #104]	@ 0x68
 800509c:	aa1a      	add	r2, sp, #104	@ 0x68
 800509e:	f013 fa33 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80050a2:	230f      	movs	r3, #15
        updateTextPosition();
 80050a4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80050a6:	f8a4 3618 	strh.w	r3, [r4, #1560]	@ 0x618
 80050aa:	f7ff fc05 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80050ae:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80050b0:	4638      	mov	r0, r7
        color = col;
 80050b2:	f8c4 561c 	str.w	r5, [r4, #1564]	@ 0x61c
        colorPressed = col;
 80050b6:	f8c4 5620 	str.w	r5, [r4, #1568]	@ 0x620
        rotation = textRotation;
 80050ba:	f884 6624 	strb.w	r6, [r4, #1572]	@ 0x624
 80050be:	f8c4 8608 	str.w	r8, [r4, #1544]	@ 0x608
 80050c2:	f00e fa25 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Comma.setXY(541, 356);
 80050c6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80050ca:	f240 211d 	movw	r1, #541	@ 0x21d
 80050ce:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80050d0:	f7ff fbc0 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
 80050d4:	f04f 0302 	mov.w	r3, #2
    CalculatorButton_Comma.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80050d8:	aa1a      	add	r2, sp, #104	@ 0x68
 80050da:	a919      	add	r1, sp, #100	@ 0x64
 80050dc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80050de:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80050e2:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 80050e6:	f013 fa0f 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80050ea:	230e      	movs	r3, #14
        updateTextPosition();
 80050ec:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80050ee:	f8a4 3660 	strh.w	r3, [r4, #1632]	@ 0x660
 80050f2:	f7ff fbe1 	bl	80048b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80050f6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80050f8:	4638      	mov	r0, r7
        color = col;
 80050fa:	f8c4 5664 	str.w	r5, [r4, #1636]	@ 0x664
        colorPressed = col;
 80050fe:	f8c4 5668 	str.w	r5, [r4, #1640]	@ 0x668
        rotation = textRotation;
 8005102:	f884 666c 	strb.w	r6, [r4, #1644]	@ 0x66c
 8005106:	f8c4 8650 	str.w	r8, [r4, #1616]	@ 0x650
 800510a:	f00e fa01 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    TextResult.setPosition(109, 25, 89, 405);
 800510e:	f240 1395 	movw	r3, #405	@ 0x195
 8005112:	2219      	movs	r2, #25
 8005114:	216d      	movs	r1, #109	@ 0x6d
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2359      	movs	r3, #89	@ 0x59
 800511a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800511c:	f7ff fba7 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005120:	4b1d      	ldr	r3, [pc, #116]	@ (8005198 <_ZN18CalculatorViewBaseC1Ev+0x85c>)
        color = newColor;
 8005122:	f8c4 56a0 	str.w	r5, [r4, #1696]	@ 0x6a0
 8005126:	681b      	ldr	r3, [r3, #0]
        boundingArea = calculateBoundingArea();
 8005128:	f8c4 56b0 	str.w	r5, [r4, #1712]	@ 0x6b0
    Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YKNQ).getText());
 800512c:	f204 65bc 	addw	r5, r4, #1724	@ 0x6bc
        linespace = space;
 8005130:	f8a4 96a4 	strh.w	r9, [r4, #1700]	@ 0x6a4
        rotation = textRotation;
 8005134:	f884 66a8 	strb.w	r6, [r4, #1704]	@ 0x6a8
        boundingArea = calculateBoundingArea();
 8005138:	f8c4 96ac 	str.w	r9, [r4, #1708]	@ 0x6ac
 800513c:	f8c4 96b4 	str.w	r9, [r4, #1716]	@ 0x6b4
 8005140:	b92b      	cbnz	r3, 800514e <_ZN18CalculatorViewBaseC1Ev+0x812>
 8005142:	4b16      	ldr	r3, [pc, #88]	@ (800519c <_ZN18CalculatorViewBaseC1Ev+0x860>)
 8005144:	2160      	movs	r1, #96	@ 0x60
 8005146:	4a16      	ldr	r2, [pc, #88]	@ (80051a0 <_ZN18CalculatorViewBaseC1Ev+0x864>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005148:	4816      	ldr	r0, [pc, #88]	@ (80051a4 <_ZN18CalculatorViewBaseC1Ev+0x868>)
 800514a:	f025 f869 	bl	802a220 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 800514e:	4b16      	ldr	r3, [pc, #88]	@ (80051a8 <_ZN18CalculatorViewBaseC1Ev+0x86c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d803      	bhi.n	800515e <_ZN18CalculatorViewBaseC1Ev+0x822>
 8005156:	4b15      	ldr	r3, [pc, #84]	@ (80051ac <_ZN18CalculatorViewBaseC1Ev+0x870>)
 8005158:	2161      	movs	r1, #97	@ 0x61
 800515a:	4a11      	ldr	r2, [pc, #68]	@ (80051a0 <_ZN18CalculatorViewBaseC1Ev+0x864>)
 800515c:	e7f4      	b.n	8005148 <_ZN18CalculatorViewBaseC1Ev+0x80c>
        return texts->getText(typedTextId);
 800515e:	4b14      	ldr	r3, [pc, #80]	@ (80051b0 <_ZN18CalculatorViewBaseC1Ev+0x874>)
 8005160:	2102      	movs	r1, #2
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	f003 ffda 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 8005168:	4a12      	ldr	r2, [pc, #72]	@ (80051b4 <_ZN18CalculatorViewBaseC1Ev+0x878>)
 800516a:	4603      	mov	r3, r0
 800516c:	4651      	mov	r1, sl
 800516e:	4628      	mov	r0, r5
 8005170:	f019 fbf2 	bl	801e958 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8005174:	4b10      	ldr	r3, [pc, #64]	@ (80051b8 <_ZN18CalculatorViewBaseC1Ev+0x87c>)
    TextResult.setTypedText(touchgfx::TypedText(T_TEXTRESULT));
 8005176:	a91a      	add	r1, sp, #104	@ 0x68
 8005178:	9817      	ldr	r0, [sp, #92]	@ 0x5c
        wc1 = value;
 800517a:	f8c4 56b8 	str.w	r5, [r4, #1720]	@ 0x6b8
 800517e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005180:	f8ad 606c 	strh.w	r6, [sp, #108]	@ 0x6c
 8005184:	f013 f962 	bl	801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005188:	4638      	mov	r0, r7
 800518a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800518c:	f00e f9c0 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005190:	4620      	mov	r0, r4
 8005192:	b01d      	add	sp, #116	@ 0x74
 8005194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005198:	240287c8 	.word	0x240287c8
 800519c:	0802eb58 	.word	0x0802eb58
 80051a0:	0802ec68 	.word	0x0802ec68
 80051a4:	0802ebd5 	.word	0x0802ebd5
 80051a8:	240287cc 	.word	0x240287cc
 80051ac:	0802ec2a 	.word	0x0802ec2a
 80051b0:	240287d4 	.word	0x240287d4
 80051b4:	0802ecb3 	.word	0x0802ecb3
 80051b8:	0802ed28 	.word	0x0802ed28

080051bc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80051bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80051be:	4770      	bx	lr

080051c0 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80051c0:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 80051c4:	4770      	bx	lr

080051c6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 80051c6:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80051c8:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 80051ca:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80051cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051d0:	4362      	muls	r2, r4
 80051d2:	4361      	muls	r1, r4
    }
 80051d4:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80051d8:	4718      	bx	r3

080051da <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 80051da:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 80051de:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80051e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 80051e4:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80051e6:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 80051ea:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 80051ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	db1a      	blt.n	800522e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 80051f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051fc:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005200:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005204:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005208:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 800520c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005214:	db1e      	blt.n	8005254 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 8005216:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800521a:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800521e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005222:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005226:	4623      	mov	r3, r4
    }
 8005228:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800522c:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800522e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005232:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005236:	ee17 3a10 	vmov	r3, s14
 800523a:	3b01      	subs	r3, #1
 800523c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005240:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005244:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005248:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800524c:	ee10 1a10 	vmov	r1, s0
 8005250:	4419      	add	r1, r3
 8005252:	e7d9      	b.n	8005208 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8005254:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800525c:	ee17 3a90 	vmov	r3, s15
 8005260:	3b01      	subs	r3, #1
 8005262:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005266:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800526a:	ee70 0a87 	vadd.f32	s1, s1, s14
 800526e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005272:	ee10 2a90 	vmov	r2, s1
 8005276:	441a      	add	r2, r3
 8005278:	e7d5      	b.n	8005226 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

0800527a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800527a:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800527c:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 800527e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005280:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005284:	4362      	muls	r2, r4
    }
 8005286:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800528a:	4718      	bx	r3

0800528c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 800528c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005290:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 8005296:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005298:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800529c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 80052a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80052a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a8:	db0b      	blt.n	80052c2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 80052aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80052ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80052b6:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80052ba:	4623      	mov	r3, r4
    }
 80052bc:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80052c0:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80052c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80052c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ca:	ee17 3a90 	vmov	r3, s15
 80052ce:	3b01      	subs	r3, #1
 80052d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80052d4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80052d8:	ee30 0a07 	vadd.f32	s0, s0, s14
 80052dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80052e0:	ee10 2a10 	vmov	r2, s0
 80052e4:	441a      	add	r2, r3
 80052e6:	e7e8      	b.n	80052ba <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

080052e8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 80052e8:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 80052ea:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 80052ec:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 80052ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052f2:	4362      	muls	r2, r4
 80052f4:	4361      	muls	r1, r4
    }
 80052f6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 80052fa:	4718      	bx	r3

080052fc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 80052fc:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005300:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 8005306:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005308:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800530c:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 8005310:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005318:	db1a      	blt.n	8005350 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 800531a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800531e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005322:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005326:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 800532a:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 800532e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	db1e      	blt.n	8005376 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 8005338:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800533c:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005340:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005344:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005348:	4623      	mov	r3, r4
    }
 800534a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800534e:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005350:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005354:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005358:	ee17 3a10 	vmov	r3, s14
 800535c:	3b01      	subs	r3, #1
 800535e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005362:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005366:	ee30 0a26 	vadd.f32	s0, s0, s13
 800536a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800536e:	ee10 1a10 	vmov	r1, s0
 8005372:	4419      	add	r1, r3
 8005374:	e7d9      	b.n	800532a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8005376:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800537a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537e:	ee17 3a90 	vmov	r3, s15
 8005382:	3b01      	subs	r3, #1
 8005384:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005388:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800538c:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005390:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005394:	ee10 2a90 	vmov	r2, s1
 8005398:	441a      	add	r2, r3
 800539a:	e7d5      	b.n	8005348 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

0800539c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800539c:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800539e:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80053a0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80053a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80053a6:	4362      	muls	r2, r4
    }
 80053a8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80053ac:	4718      	bx	r3

080053ae <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 80053ae:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80053b2:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80053b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 80053b8:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80053ba:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80053be:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 80053c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80053c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ca:	db0b      	blt.n	80053e4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 80053cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80053d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80053d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80053d8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80053dc:	4623      	mov	r3, r4
    }
 80053de:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80053e2:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80053e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80053e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ec:	ee17 3a90 	vmov	r3, s15
 80053f0:	3b01      	subs	r3, #1
 80053f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80053f6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80053fa:	ee30 0a07 	vadd.f32	s0, s0, s14
 80053fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005402:	ee10 2a10 	vmov	r2, s0
 8005406:	441a      	add	r2, r3
 8005408:	e7e8      	b.n	80053dc <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

0800540a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 800540a:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 800540e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8005410:	2b00      	cmp	r3, #0
 8005412:	db07      	blt.n	8005424 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005414:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005418:	fb90 f0f2 	sdiv	r0, r0, r2
 800541c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005420:	1040      	asrs	r0, r0, #1
 8005422:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005424:	f06f 0101 	mvn.w	r1, #1
 8005428:	fb01 2003 	mla	r0, r1, r3, r2
 800542c:	3801      	subs	r0, #1
 800542e:	fb90 f0f2 	sdiv	r0, r0, r2
 8005432:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005436:	1040      	asrs	r0, r0, #1
 8005438:	4240      	negs	r0, r0
    }
 800543a:	4770      	bx	lr

0800543c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 800543c:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 8005440:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8005444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005448:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800544c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005450:	4770      	bx	lr

08005452 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8005452:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8005456:	4770      	bx	lr

08005458 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8005458:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 800545c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 800545e:	2b00      	cmp	r3, #0
 8005460:	db07      	blt.n	8005472 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005462:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005466:	fb90 f0f2 	sdiv	r0, r0, r2
 800546a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800546e:	1040      	asrs	r0, r0, #1
 8005470:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005472:	f06f 0101 	mvn.w	r1, #1
 8005476:	fb01 2003 	mla	r0, r1, r3, r2
 800547a:	3801      	subs	r0, #1
 800547c:	fb90 f0f2 	sdiv	r0, r0, r2
 8005480:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005484:	1040      	asrs	r0, r0, #1
 8005486:	4240      	negs	r0, r0
    }
 8005488:	4770      	bx	lr

0800548a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 800548a:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 800548e:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8005492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005496:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800549a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800549e:	4770      	bx	lr

080054a0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 80054a0:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 80054a4:	4770      	bx	lr

080054a6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 80054a6:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 80054aa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	db07      	blt.n	80054c0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80054b0:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80054b4:	fb90 f0f2 	sdiv	r0, r0, r2
 80054b8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80054bc:	1040      	asrs	r0, r0, #1
 80054be:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80054c0:	f06f 0101 	mvn.w	r1, #1
 80054c4:	fb01 2003 	mla	r0, r1, r3, r2
 80054c8:	3801      	subs	r0, #1
 80054ca:	fb90 f0f2 	sdiv	r0, r0, r2
 80054ce:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80054d2:	1040      	asrs	r0, r0, #1
 80054d4:	4240      	negs	r0, r0
    }
 80054d6:	4770      	bx	lr

080054d8 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 80054d8:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 80054dc:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80054e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80054e8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80054ec:	4770      	bx	lr

080054ee <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 80054ee:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 80054f2:	4770      	bx	lr

080054f4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 80054f4:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 80054f8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	db07      	blt.n	800550e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80054fe:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005502:	fb90 f0f2 	sdiv	r0, r0, r2
 8005506:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800550a:	1040      	asrs	r0, r0, #1
 800550c:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800550e:	f06f 0101 	mvn.w	r1, #1
 8005512:	fb01 2003 	mla	r0, r1, r3, r2
 8005516:	3801      	subs	r0, #1
 8005518:	fb90 f0f2 	sdiv	r0, r0, r2
 800551c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005520:	1040      	asrs	r0, r0, #1
 8005522:	4240      	negs	r0, r0
    }
 8005524:	4770      	bx	lr

08005526 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8005526:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 800552a:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 800552e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005532:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005536:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800553a:	4770      	bx	lr

0800553c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 800553c:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 8005540:	4770      	bx	lr

08005542 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8005542:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 800554c:	460d      	mov	r5, r1
 800554e:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8005550:	4798      	blx	r3
        setScaleY(scale, updateData);
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	4632      	mov	r2, r6
 8005556:	4629      	mov	r1, r5
 8005558:	4620      	mov	r0, r4
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 800555e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8005562:	4718      	bx	r3

08005564 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8005564:	6803      	ldr	r3, [r0, #0]
 8005566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800556a:	4718      	bx	r3

0800556c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 800556c:	6803      	ldr	r3, [r0, #0]
 800556e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005572:	4718      	bx	r3

08005574 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8005574:	6803      	ldr	r3, [r0, #0]
 8005576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800557a:	4718      	bx	r3

0800557c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800557c:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 800557e:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8005580:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8005582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 8005586:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 8005588:	db0e      	blt.n	80055a8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 800558a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800558e:	fb92 f1f4 	sdiv	r1, r2, r4
 8005592:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005596:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8005598:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 800559c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80055a0:	3a01      	subs	r2, #1
 80055a2:	440a      	add	r2, r1
 80055a4:	4249      	negs	r1, r1
 80055a6:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80055a8:	f06f 0101 	mvn.w	r1, #1
 80055ac:	fb01 4102 	mla	r1, r1, r2, r4
 80055b0:	3901      	subs	r1, #1
 80055b2:	fb91 f1f4 	sdiv	r1, r1, r4
 80055b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80055ba:	1049      	asrs	r1, r1, #1
 80055bc:	4249      	negs	r1, r1
 80055be:	e7eb      	b.n	8005598 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

080055c0 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80055c6:	4718      	bx	r3

080055c8 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 80055c8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 80055ca:	6803      	ldr	r3, [r0, #0]
 80055cc:	4351      	muls	r1, r2
 80055ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80055d2:	4718      	bx	r3

080055d4 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 80055d4:	6803      	ldr	r3, [r0, #0]
 80055d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80055da:	4718      	bx	r3

080055dc <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 80055dc:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 80055e0:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80055e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 80055e6:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 80055ea:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80055ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f6:	db08      	blt.n	800560a <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 80055f8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80055fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005600:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005604:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8005608:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800560a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800560e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005612:	ee17 3a90 	vmov	r3, s15
 8005616:	3b01      	subs	r3, #1
 8005618:	ee30 0a47 	vsub.f32	s0, s0, s14
 800561c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005620:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005624:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005628:	ee10 1a10 	vmov	r1, s0
 800562c:	4419      	add	r1, r3
 800562e:	e7eb      	b.n	8005608 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08005630 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8005630:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 8005634:	4770      	bx	lr

08005636 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8005636:	6803      	ldr	r3, [r0, #0]
 8005638:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800563c:	4718      	bx	r3

0800563e <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 800563e:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8005640:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8005642:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 8005646:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8005648:	4798      	blx	r3
        if (i >= 0)
 800564a:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 800564c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 800564e:	db07      	blt.n	8005660 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8005650:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005654:	fb90 f0f3 	sdiv	r0, r0, r3
 8005658:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800565c:	1040      	asrs	r0, r0, #1
    }
 800565e:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005660:	f06f 0201 	mvn.w	r2, #1
 8005664:	fb02 3000 	mla	r0, r2, r0, r3
 8005668:	3801      	subs	r0, #1
 800566a:	fb90 f0f3 	sdiv	r0, r0, r3
 800566e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005672:	1040      	asrs	r0, r0, #1
 8005674:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8005676:	e7f2      	b.n	800565e <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08005678 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8005678:	6803      	ldr	r3, [r0, #0]
 800567a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800567e:	4718      	bx	r3

08005680 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8005680:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8005682:	b510      	push	{r4, lr}
 8005684:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8005686:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800568a:	4798      	blx	r3
 800568c:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8005690:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8005694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005698:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800569c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80056a0:	bd10      	pop	{r4, pc}

080056a2 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 80056a2:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 80056a6:	4770      	bx	lr

080056a8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 80056a8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 80056aa:	6803      	ldr	r3, [r0, #0]
 80056ac:	4351      	muls	r1, r2
 80056ae:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80056b2:	4718      	bx	r3

080056b4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 80056b4:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 80056b8:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80056ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80056be:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 80056c2:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80056c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80056ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ce:	db08      	blt.n	80056e2 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 80056d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80056d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80056d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80056dc:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80056e0:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80056e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80056e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056ea:	ee17 3a90 	vmov	r3, s15
 80056ee:	3b01      	subs	r3, #1
 80056f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80056f4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80056f8:	ee30 0a07 	vadd.f32	s0, s0, s14
 80056fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005700:	ee10 1a10 	vmov	r1, s0
 8005704:	4419      	add	r1, r3
 8005706:	e7eb      	b.n	80056e0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08005708 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8005708:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 800570c:	4770      	bx	lr

0800570e <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 800570e:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8005710:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8005712:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 8005716:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8005718:	4798      	blx	r3
        if (i >= 0)
 800571a:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 800571c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 800571e:	db07      	blt.n	8005730 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8005720:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005724:	fb90 f0f3 	sdiv	r0, r0, r3
 8005728:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800572c:	1040      	asrs	r0, r0, #1
    }
 800572e:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005730:	f06f 0201 	mvn.w	r2, #1
 8005734:	fb02 3000 	mla	r0, r2, r0, r3
 8005738:	3801      	subs	r0, #1
 800573a:	fb90 f0f3 	sdiv	r0, r0, r3
 800573e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005742:	1040      	asrs	r0, r0, #1
 8005744:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8005746:	e7f2      	b.n	800572e <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08005748 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8005748:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 800574a:	b510      	push	{r4, lr}
 800574c:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 800574e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8005752:	4798      	blx	r3
 8005754:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8005758:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800575c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005760:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005764:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005768:	bd10      	pop	{r4, pc}

0800576a <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 800576a:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 800576e:	4770      	bx	lr

08005770 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
 8005770:	4608      	mov	r0, r1
 8005772:	4770      	bx	lr

08005774 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8005774:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8005776:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 8005778:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800577a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 800577e:	b510      	push	{r4, lr}
 8005780:	4604      	mov	r4, r0
        if (i >= 0)
 8005782:	db0e      	blt.n	80057a2 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 8005784:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005788:	fb91 f1f2 	sdiv	r1, r1, r2
 800578c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005790:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8005792:	b209      	sxth	r1, r1
 8005794:	4620      	mov	r0, r4
 8005796:	4798      	blx	r3
 8005798:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 800579c:	fb02 3000 	mla	r0, r2, r0, r3
 80057a0:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80057a2:	f06f 0001 	mvn.w	r0, #1
 80057a6:	fb00 2101 	mla	r1, r0, r1, r2
 80057aa:	3901      	subs	r1, #1
 80057ac:	fb91 f1f2 	sdiv	r1, r1, r2
 80057b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80057b4:	1049      	asrs	r1, r1, #1
 80057b6:	4249      	negs	r1, r1
 80057b8:	e7eb      	b.n	8005792 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080057ba <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80057ba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80057bc:	4770      	bx	lr

080057be <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80057be:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80057c0:	4770      	bx	lr

080057c2 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80057c2:	6803      	ldr	r3, [r0, #0]
 80057c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80057c8:	4718      	bx	r3

080057ca <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80057ca:	6803      	ldr	r3, [r0, #0]
 80057cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80057d0:	4718      	bx	r3

080057d2 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80057d2:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80057d4:	6803      	ldr	r3, [r0, #0]
 80057d6:	4351      	muls	r1, r2
 80057d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80057dc:	4718      	bx	r3

080057de <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80057de:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80057e0:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80057e2:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80057e6:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80057e8:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 80057ec:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80057f0:	4798      	blx	r3
 80057f2:	462b      	mov	r3, r5
 80057f4:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80057f8:	4620      	mov	r0, r4
    }
 80057fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80057fe:	4718      	bx	r3

08005800 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (this->dataCounter - this->usedCapacity) + index;
 8005800:	f8d0 3148 	ldr.w	r3, [r0, #328]	@ 0x148
 8005804:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8005808:	4419      	add	r1, r3
    }
 800580a:	1a08      	subs	r0, r1, r0
 800580c:	4770      	bx	lr

0800580e <_ZN16DiagnoseViewBase11setupScreenEv>:
}

void DiagnoseViewBase::setupScreen()
{

}
 800580e:	4770      	bx	lr

08005810 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005810:	4770      	bx	lr

08005812 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
 * be created as new values are added.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
 8005812:	4770      	bx	lr

08005814 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8005814:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8005816:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8005818:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800581a:	68c2      	ldr	r2, [r0, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	1055      	asrs	r5, r2, #1
 8005820:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005824:	07d2      	lsls	r2, r2, #31
 8005826:	bf48      	it	mi
 8005828:	5962      	ldrmi	r2, [r4, r5]
    }
 800582a:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800582c:	bf48      	it	mi
 800582e:	58d3      	ldrmi	r3, [r2, r3]
 8005830:	4718      	bx	r3

08005832 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8005832:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8005834:	6840      	ldr	r0, [r0, #4]
 8005836:	b130      	cbz	r0, 8005846 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	b91a      	cbnz	r2, 8005844 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800583c:	68d8      	ldr	r0, [r3, #12]
 800583e:	f000 0001 	and.w	r0, r0, #1
 8005842:	4770      	bx	lr
 8005844:	2001      	movs	r0, #1
    }
 8005846:	4770      	bx	lr

08005848 <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 8005848:	b510      	push	{r4, lr}
 800584a:	4604      	mov	r4, r0
 800584c:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8005850:	f024 f892 	bl	8029978 <_ZdlPvj>
 8005854:	4620      	mov	r0, r4
 8005856:	bd10      	pop	{r4, pc}

08005858 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005858:	b510      	push	{r4, lr}
 800585a:	4604      	mov	r4, r0
 800585c:	2110      	movs	r1, #16
 800585e:	f024 f88b 	bl	8029978 <_ZdlPvj>
 8005862:	4620      	mov	r0, r4
 8005864:	bd10      	pop	{r4, pc}
	...

08005868 <_ZN16DiagnoseViewBaseD1Ev>:
DiagnoseViewBase::~DiagnoseViewBase()
 8005868:	4b03      	ldr	r3, [pc, #12]	@ (8005878 <_ZN16DiagnoseViewBaseD1Ev+0x10>)
 800586a:	b510      	push	{r4, lr}
 800586c:	4604      	mov	r4, r0
 800586e:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8005870:	f013 ff70 	bl	8019754 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8005874:	4620      	mov	r0, r4
 8005876:	bd10      	pop	{r4, pc}
 8005878:	0802f1b4 	.word	0x0802f1b4

0800587c <_ZN16DiagnoseViewBaseD0Ev>:
DiagnoseViewBase::~DiagnoseViewBase()
 800587c:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <_ZN16DiagnoseViewBaseD0Ev+0x1c>)
 800587e:	b510      	push	{r4, lr}
 8005880:	4604      	mov	r4, r0
 8005882:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8005884:	f013 ff66 	bl	8019754 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8005888:	f243 417c 	movw	r1, #13436	@ 0x347c
 800588c:	4620      	mov	r0, r4
 800588e:	f024 f873 	bl	8029978 <_ZdlPvj>
 8005892:	4620      	mov	r0, r4
 8005894:	bd10      	pop	{r4, pc}
 8005896:	bf00      	nop
 8005898:	0802f1b4 	.word	0x0802f1b4

0800589c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 800589c:	b508      	push	{r3, lr}
        if (alpha > 0)
 800589e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80058a2:	b10b      	cbz	r3, 80058a8 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80058a4:	f7fe fb21 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80058a8:	bd08      	pop	{r3, pc}
	...

080058ac <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80058ac:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80058ae:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 80058b0:	db03      	blt.n	80058ba <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 80058b2:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 80058b6:	4294      	cmp	r4, r2
 80058b8:	dc06      	bgt.n	80058c8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 80058ba:	4b08      	ldr	r3, [pc, #32]	@ (80058dc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 80058bc:	f240 6139 	movw	r1, #1593	@ 0x639
 80058c0:	4a07      	ldr	r2, [pc, #28]	@ (80058e0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 80058c2:	4808      	ldr	r0, [pc, #32]	@ (80058e4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 80058c4:	f024 fcac 	bl	802a220 <__assert_func>
        return yValues[dataIndex(index)];
 80058c8:	6803      	ldr	r3, [r0, #0]
 80058ca:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 80058ce:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80058d2:	4798      	blx	r3
    }
 80058d4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop
 80058dc:	0802eed0 	.word	0x0802eed0
 80058e0:	0802eef3 	.word	0x0802eef3
 80058e4:	0802ef42 	.word	0x0802ef42

080058e8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80058e8:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 80058ea:	b510      	push	{r4, lr}
 80058ec:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 80058ee:	db03      	blt.n	80058f8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 80058f0:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 80058f4:	429a      	cmp	r2, r3
 80058f6:	dc06      	bgt.n	8005906 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 80058f8:	4b07      	ldr	r3, [pc, #28]	@ (8005918 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 80058fa:	f240 6133 	movw	r1, #1587	@ 0x633
 80058fe:	4a07      	ldr	r2, [pc, #28]	@ (800591c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8005900:	4807      	ldr	r0, [pc, #28]	@ (8005920 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8005902:	f024 fc8d 	bl	802a220 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 8005906:	6803      	ldr	r3, [r0, #0]
 8005908:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800590c:	4798      	blx	r3
 800590e:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8005912:	fb02 3000 	mla	r0, r2, r0, r3
 8005916:	bd10      	pop	{r4, pc}
 8005918:	0802eed0 	.word	0x0802eed0
 800591c:	0802efad 	.word	0x0802efad
 8005920:	0802ef42 	.word	0x0802ef42

08005924 <_ZN16DiagnoseViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void DiagnoseViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
 8005924:	f200 409c 	addw	r0, r0, #1180	@ 0x49c
 8005928:	4288      	cmp	r0, r1
{
 800592a:	b508      	push	{r3, lr}
    if (&src == &HomeButton)
 800592c:	d105      	bne.n	800593a <_ZN16DiagnoseViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~DiagnoseViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800592e:	f015 fbdf 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
}
 8005932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoMainScreenScreenNoTransition();
 8005936:	f002 bd0f 	b.w	8008358 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
}
 800593a:	bd08      	pop	{r3, pc}

0800593c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800593c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800593e:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8005940:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8005942:	f017 f989 	bl	801cc58 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8005946:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8005948:	462a      	mov	r2, r5
 800594a:	9901      	ldr	r1, [sp, #4]
 800594c:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8005950:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8005954:	db04      	blt.n	8005960 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8005956:	f017 f99e 	bl	801cc96 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 800595a:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 800595c:	b003      	add	sp, #12
 800595e:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8005960:	f017 f999 	bl	801cc96 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8005964:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 8005966:	e7f9      	b.n	800595c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08005968 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8005968:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800596a:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800596e:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8005970:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 8005974:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 8005978:	4423      	add	r3, r4
 800597a:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 800597c:	b22d      	sxth	r5, r5
 800597e:	442c      	add	r4, r5
 8005980:	1e69      	subs	r1, r5, #1
 8005982:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 8005986:	3c01      	subs	r4, #1
 8005988:	1ad2      	subs	r2, r2, r3
 800598a:	1af0      	subs	r0, r6, r3
 800598c:	f7ff ffd6 	bl	800593c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8005990:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8005994:	bd70      	pop	{r4, r5, r6, pc}

08005996 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8005996:	b538      	push	{r3, r4, r5, lr}
 8005998:	4604      	mov	r4, r0
 800599a:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800599c:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 80059a0:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 80059a4:	440b      	add	r3, r1
 80059a6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80059aa:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 80059ac:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 80059b0:	b209      	sxth	r1, r1
 80059b2:	1a12      	subs	r2, r2, r0
 80059b4:	1a28      	subs	r0, r5, r0
 80059b6:	3901      	subs	r1, #1
 80059b8:	f7ff ffc0 	bl	800593c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 80059bc:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 80059c0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80059c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080059c8 <_ZN16DiagnoseViewBaseC1Ev>:
DiagnoseViewBase::DiagnoseViewBase() :
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	4604      	mov	r4, r0
 80059ce:	b091      	sub	sp, #68	@ 0x44
 80059d0:	2600      	movs	r6, #0
 80059d2:	f017 faf7 	bl	801cfc4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &DiagnoseViewBase::buttonCallbackHandler)
 80059d6:	46a2      	mov	sl, r4
 80059d8:	4be5      	ldr	r3, [pc, #916]	@ (8005d70 <_ZN16DiagnoseViewBaseC1Ev+0x3a8>)
        : Widget(), alpha(255), color(0)
 80059da:	2226      	movs	r2, #38	@ 0x26
 80059dc:	4631      	mov	r1, r6
 80059de:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80059e0:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 80059e4:	f84a 3b40 	str.w	r3, [sl], #64
 80059e8:	4650      	mov	r0, sl
 80059ea:	f025 fd6b 	bl	802b4c4 <memset>
 80059ee:	4650      	mov	r0, sl
 80059f0:	f7fe ff50 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
 80059f4:	4bdf      	ldr	r3, [pc, #892]	@ (8005d74 <_ZN16DiagnoseViewBaseC1Ev+0x3ac>)
 80059f6:	f504 7982 	add.w	r9, r4, #260	@ 0x104
 80059fa:	4640      	mov	r0, r8
 80059fc:	6423      	str	r3, [r4, #64]	@ 0x40
 80059fe:	23ff      	movs	r3, #255	@ 0xff
        : color(col)
 8005a00:	66a6      	str	r6, [r4, #104]	@ 0x68
 8005a02:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8005a06:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8005a0a:	f504 75be 	add.w	r5, r4, #380	@ 0x17c
 8005a0e:	f00d fcbd 	bl	801338c <_ZN8touchgfx12DigitalClockC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005a12:	2226      	movs	r2, #38	@ 0x26
 8005a14:	4631      	mov	r1, r6
 8005a16:	4648      	mov	r0, r9
 8005a18:	f025 fd54 	bl	802b4c4 <memset>
 8005a1c:	4648      	mov	r0, r9
 8005a1e:	f7fe ff39 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
 8005a22:	4bd5      	ldr	r3, [pc, #852]	@ (8005d78 <_ZN16DiagnoseViewBaseC1Ev+0x3b0>)
 8005a24:	f504 72a6 	add.w	r2, r4, #332	@ 0x14c
 8005a28:	a90e      	add	r1, sp, #56	@ 0x38
 8005a2a:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
 8005a2e:	f04f 0b01 	mov.w	fp, #1
 8005a32:	4bd2      	ldr	r3, [pc, #840]	@ (8005d7c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
 8005a34:	4610      	mov	r0, r2
 8005a36:	f8a4 7130 	strh.w	r7, [r4, #304]	@ 0x130
 8005a3a:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 8005a3e:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8005a42:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
 8005a46:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4e:	f8a4 613c 	strh.w	r6, [r4, #316]	@ 0x13c
 8005a52:	f8c4 6140 	str.w	r6, [r4, #320]	@ 0x140
 8005a56:	9203      	str	r2, [sp, #12]
 8005a58:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
              text(0)
 8005a5c:	e9c4 3651 	strd	r3, r6, [r4, #324]	@ 0x144
 8005a60:	f011 ffb0 	bl	80179c4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005a64:	4bc6      	ldr	r3, [pc, #792]	@ (8005d80 <_ZN16DiagnoseViewBaseC1Ev+0x3b8>)
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8005a66:	2164      	movs	r1, #100	@ 0x64
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8005a6e:	f8c4 6178 	str.w	r6, [r4, #376]	@ 0x178
 8005a72:	f884 b170 	strb.w	fp, [r4, #368]	@ 0x170
 8005a76:	f011 fc61 	bl	801733c <_ZN8touchgfx17AbstractDataGraphC1Es>
 8005a7a:	4bc2      	ldr	r3, [pc, #776]	@ (8005d84 <_ZN16DiagnoseViewBaseC1Ev+0x3bc>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	2263      	movs	r2, #99	@ 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8005a80:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
{
public:
    GraphWrapAndClear()
        : GraphWrapAndClearData(CAPACITY, y)
 8005a84:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8005a88:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8005a8a:	e9c4 36b0 	strd	r3, r6, [r4, #704]	@ 0x2c0
 8005a8e:	e9c4 b6ae 	strd	fp, r6, [r4, #696]	@ 0x2b8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8005a92:	f7ff fb98 	bl	80051c6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8005a96:	f504 628b 	add.w	r2, r4, #1112	@ 0x458
 8005a9a:	4bbb      	ldr	r3, [pc, #748]	@ (8005d88 <_ZN16DiagnoseViewBaseC1Ev+0x3c0>)
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	9206      	str	r2, [sp, #24]
 8005aa0:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
 8005aa4:	f011 f8aa 	bl	8016bfc <_ZN8touchgfx12CanvasWidgetC1Ev>
 8005aa8:	f504 6191 	add.w	r1, r4, #1160	@ 0x488
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8005aac:	4bb7      	ldr	r3, [pc, #732]	@ (8005d8c <_ZN16DiagnoseViewBaseC1Ev+0x3c4>)
 8005aae:	f04f 0202 	mov.w	r2, #2
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	9107      	str	r1, [sp, #28]
 8005ab6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
 8005aba:	f884 2484 	strb.w	r2, [r4, #1156]	@ 0x484
 8005abe:	f7fe fbbb 	bl	8004238 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8005ac2:	4bb3      	ldr	r3, [pc, #716]	@ (8005d90 <_ZN16DiagnoseViewBaseC1Ev+0x3c8>)
 8005ac4:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
        : Widget(), action(), pressed(false)
 8005ac8:	2226      	movs	r2, #38	@ 0x26
 8005aca:	f8c4 3488 	str.w	r3, [r4, #1160]	@ 0x488
 8005ace:	3324      	adds	r3, #36	@ 0x24
 8005ad0:	9104      	str	r1, [sp, #16]
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	f8c4 3490 	str.w	r3, [r4, #1168]	@ 0x490
 8005ad8:	9804      	ldr	r0, [sp, #16]
 8005ada:	f8c4 6494 	str.w	r6, [r4, #1172]	@ 0x494
 8005ade:	f025 fcf1 	bl	802b4c4 <memset>
 8005ae2:	9804      	ldr	r0, [sp, #16]
 8005ae4:	f7fe fed6 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
 8005ae8:	f504 619a 	add.w	r1, r4, #1232	@ 0x4d0
 8005aec:	4ba9      	ldr	r3, [pc, #676]	@ (8005d94 <_ZN16DiagnoseViewBaseC1Ev+0x3cc>)
 8005aee:	4608      	mov	r0, r1
 8005af0:	f8a4 74ca 	strh.w	r7, [r4, #1226]	@ 0x4ca
 8005af4:	f8c4 349c 	str.w	r3, [r4, #1180]	@ 0x49c
 8005af8:	f8a4 74cc 	strh.w	r7, [r4, #1228]	@ 0x4cc
 8005afc:	f884 74ce 	strb.w	r7, [r4, #1230]	@ 0x4ce
 8005b00:	1d27      	adds	r7, r4, #4
 8005b02:	f8c4 64c4 	str.w	r6, [r4, #1220]	@ 0x4c4
 8005b06:	f884 64c8 	strb.w	r6, [r4, #1224]	@ 0x4c8
 8005b0a:	f884 b4c0 	strb.w	fp, [r4, #1216]	@ 0x4c0
 8005b0e:	9105      	str	r1, [sp, #20]
 8005b10:	f00e faa8 	bl	8014064 <_ZN8touchgfx19ScrollableContainerC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8005b14:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8005b18:	4a9f      	ldr	r2, [pc, #636]	@ (8005d98 <_ZN16DiagnoseViewBaseC1Ev+0x3d0>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8005b1a:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8005b1e:	f204 508c 	addw	r0, r4, #1420	@ 0x58c
 8005b22:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
 8005b26:	4a9d      	ldr	r2, [pc, #628]	@ (8005d9c <_ZN16DiagnoseViewBaseC1Ev+0x3d4>)
 8005b28:	f8c3 4470 	str.w	r4, [r3, #1136]	@ 0x470
 8005b2c:	f8c3 2474 	str.w	r2, [r3, #1140]	@ 0x474
 8005b30:	f8c3 6478 	str.w	r6, [r3, #1144]	@ 0x478
 8005b34:	f013 fe04 	bl	8019740 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8005b38:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	4650      	mov	r0, sl
 8005b40:	4631      	mov	r1, r6
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005b48:	f7fe fe91 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8005b4c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8005b50:	4651      	mov	r1, sl
 8005b52:	4638      	mov	r0, r7
 8005b54:	66a3      	str	r3, [r4, #104]	@ 0x68
 8005b56:	f00d fcdb 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    DiagnoseClock.setPosition(529, 12, 256, 72);
 8005b5a:	2348      	movs	r3, #72	@ 0x48
 8005b5c:	f8df a258 	ldr.w	sl, [pc, #600]	@ 8005db8 <_ZN16DiagnoseViewBaseC1Ev+0x3f0>
 8005b60:	220c      	movs	r2, #12
 8005b62:	4640      	mov	r0, r8
 8005b64:	f240 2111 	movw	r1, #529	@ 0x211
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b6e:	f7fe fe7e 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    DiagnoseClock.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8005b72:	4640      	mov	r0, r8
 8005b74:	4651      	mov	r1, sl
 8005b76:	f00d fb47 	bl	8013208 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 8005b7a:	4b80      	ldr	r3, [pc, #512]	@ (8005d7c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
    DiagnoseClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RGBC));
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	a90e      	add	r1, sp, #56	@ 0x38
 8005b80:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b82:	231b      	movs	r3, #27
 8005b84:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8005b88:	f00d fb51 	bl	801322e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    DiagnoseClock.displayLeadingZeroForHourIndicator(true);
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	4659      	mov	r1, fp
 8005b90:	f00d fc4a 	bl	8013428 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    DiagnoseClock.setTime24Hour(10, 10, 0);
 8005b94:	220a      	movs	r2, #10
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 8005b96:	2303      	movs	r3, #3
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 8005ba0:	4633      	mov	r3, r6
 8005ba2:	f00d fc44 	bl	801342e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8005baa:	f10d 0820 	add.w	r8, sp, #32
 8005bae:	f00d fcaf 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    DiagnoseTitile.setPosition(0, 12, 800, 62);
 8005bb2:	233e      	movs	r3, #62	@ 0x3e
 8005bb4:	220c      	movs	r2, #12
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4648      	mov	r0, r9
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005bc0:	f7fe fe55 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	4640      	mov	r0, r8
        color = newColor;
 8005bc8:	f8c4 a134 	str.w	sl, [r4, #308]	@ 0x134
        linespace = space;
 8005bcc:	f8a4 6138 	strh.w	r6, [r4, #312]	@ 0x138
        boundingArea = calculateBoundingArea();
 8005bd0:	f012 f9a2 	bl	8017f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005bd4:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 8005bd8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005bdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005be0:	4b66      	ldr	r3, [pc, #408]	@ (8005d7c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
    DiagnoseTitile.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HCE1));
 8005be2:	a90e      	add	r1, sp, #56	@ 0x38
 8005be4:	4648      	mov	r0, r9
 8005be6:	930e      	str	r3, [sp, #56]	@ 0x38
 8005be8:	231c      	movs	r3, #28
 8005bea:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8005bee:	f012 fc2d 	bl	801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	f00d fc8b 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bfa:	2309      	movs	r3, #9
    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
 8005bfc:	a90e      	add	r1, sp, #56	@ 0x38
 8005bfe:	9803      	ldr	r0, [sp, #12]
 8005c00:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8005c04:	f012 fdb9 	bl	801877a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    HomeIcon.setPosition(23, 16, 55, 55);
 8005c08:	2337      	movs	r3, #55	@ 0x37
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	2117      	movs	r1, #23
 8005c0e:	9803      	ldr	r0, [sp, #12]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	f7fe fe2c 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005c16:	4631      	mov	r1, r6
 8005c18:	9803      	ldr	r0, [sp, #12]
 8005c1a:	f011 fe8e 	bl	801793a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8005c1e:	9903      	ldr	r1, [sp, #12]
 8005c20:	4638      	mov	r0, r7
 8005c22:	f00d fc75 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(391, 133, 322, 264);
 8005c26:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005c2a:	2285      	movs	r2, #133	@ 0x85
 8005c2c:	f240 1187 	movw	r1, #391	@ 0x187
 8005c30:	4628      	mov	r0, r5
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 8005c38:	f7fe fe19 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	4659      	mov	r1, fp
 8005c40:	4628      	mov	r0, r5
 8005c42:	f7ff fc7e 	bl	8005542 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8005c46:	4633      	mov	r3, r6
 8005c48:	4632      	mov	r2, r6
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	9600      	str	r6, [sp, #0]
 8005c50:	f011 fb25 	bl	801729e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8005c54:	4633      	mov	r3, r6
 8005c56:	4632      	mov	r2, r6
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	9600      	str	r6, [sp, #0]
 8005c5e:	f011 fa45 	bl	80170ec <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8005c62:	2264      	movs	r2, #100	@ 0x64
 8005c64:	4631      	mov	r1, r6
 8005c66:	4628      	mov	r0, r5
 8005c68:	f7ff fb3e 	bl	80052e8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8005c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8005da0 <_ZN16DiagnoseViewBaseC1Ev+0x3d8>)
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8005c6e:	f04f 0202 	mov.w	r2, #2
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8005c72:	9906      	ldr	r1, [sp, #24]
 8005c74:	f8c4 3494 	str.w	r3, [r4, #1172]	@ 0x494
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8005c78:	f249 7314 	movw	r3, #38676	@ 0x9714
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f884 2484 	strb.w	r2, [r4, #1156]	@ 0x484
 8005c82:	f8a4 3498 	strh.w	r3, [r4, #1176]	@ 0x498
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8005c86:	23c5      	movs	r3, #197	@ 0xc5
 8005c88:	f884 349a 	strb.w	r3, [r4, #1178]	@ 0x49a
        canvasPainter = &painter;
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
 8005c92:	f011 fa36 	bl	8017102 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8005c96:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c9a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005da4 <_ZN16DiagnoseViewBaseC1Ev+0x3dc>
 8005c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cae:	f2c1 82d4 	blt.w	800725a <_ZN16DiagnoseViewBaseC1Ev+0x1892>
            return (int)(fs + 0.5f);
 8005cb2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cbe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f011 fbf7 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005cc8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ccc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005da8 <_ZN16DiagnoseViewBaseC1Ev+0x3e0>
 8005cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce0:	f2c1 82cf 	blt.w	8007282 <_ZN16DiagnoseViewBaseC1Ev+0x18ba>
            return (int)(fs + 0.5f);
 8005ce4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cf0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f011 fbde 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005cfa:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005cfe:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005dac <_ZN16DiagnoseViewBaseC1Ev+0x3e4>
 8005d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d06:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d12:	f2c1 82ca 	blt.w	80072aa <_ZN16DiagnoseViewBaseC1Ev+0x18e2>
            return (int)(fs + 0.5f);
 8005d16:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d22:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d26:	4628      	mov	r0, r5
 8005d28:	f011 fbc5 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d2c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d30:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005db0 <_ZN16DiagnoseViewBaseC1Ev+0x3e8>
 8005d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d38:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d44:	f2c1 82c5 	blt.w	80072d2 <_ZN16DiagnoseViewBaseC1Ev+0x190a>
            return (int)(fs + 0.5f);
 8005d48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d54:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f011 fbac 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d5e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d62:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005db4 <_ZN16DiagnoseViewBaseC1Ev+0x3ec>
 8005d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d6e:	e04b      	b.n	8005e08 <_ZN16DiagnoseViewBaseC1Ev+0x440>
 8005d70:	0802f1b4 	.word	0x0802f1b4
 8005d74:	080308ec 	.word	0x080308ec
 8005d78:	0803085c 	.word	0x0803085c
 8005d7c:	0802ed28 	.word	0x0802ed28
 8005d80:	0802edc8 	.word	0x0802edc8
 8005d84:	080304a4 	.word	0x080304a4
 8005d88:	0802f004 	.word	0x0802f004
 8005d8c:	0803076c 	.word	0x0803076c
 8005d90:	080303d4 	.word	0x080303d4
 8005d94:	08030954 	.word	0x08030954
 8005d98:	0802f19c 	.word	0x0802f19c
 8005d9c:	08005925 	.word	0x08005925
 8005da0:	ff1497c5 	.word	0xff1497c5
 8005da4:	42977c6e 	.word	0x42977c6e
 8005da8:	42896904 	.word	0x42896904
 8005dac:	4260f242 	.word	0x4260f242
 8005db0:	42219ceb 	.word	0x42219ceb
 8005db4:	41c1580b 	.word	0x41c1580b
 8005db8:	ffa3baff 	.word	0xffa3baff
 8005dbc:	412b3abd 	.word	0x412b3abd
 8005dc0:	4028ee39 	.word	0x4028ee39
 8005dc4:	3fbb0111 	.word	0x3fbb0111
 8005dc8:	40e4c02f 	.word	0x40e4c02f
 8005dcc:	4191a071 	.word	0x4191a071
 8005dd0:	42001183 	.word	0x42001183
 8005dd4:	4236064a 	.word	0x4236064a
 8005dd8:	425f6b59 	.word	0x425f6b59
 8005ddc:	4274bdec 	.word	0x4274bdec
 8005de0:	4273f7a5 	.word	0x4273f7a5
 8005de4:	4260ece7 	.word	0x4260ece7
 8005de8:	42443795 	.word	0x42443795
 8005dec:	4228f3d0 	.word	0x4228f3d0
 8005df0:	4219ddfc 	.word	0x4219ddfc
 8005df4:	421e8856 	.word	0x421e8856
 8005df8:	423958f2 	.word	0x423958f2
 8005dfc:	4266cf1d 	.word	0x4266cf1d
 8005e00:	428f1fe1 	.word	0x428f1fe1
 8005e04:	42a9edc2 	.word	0x42a9edc2
        if (fs >= 0)
 8005e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e10:	f2c1 8273 	blt.w	80072fa <_ZN16DiagnoseViewBaseC1Ev+0x1932>
            return (int)(fs + 0.5f);
 8005e14:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e20:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e24:	4628      	mov	r0, r5
 8005e26:	f011 fb46 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e2a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e2e:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 8005dbc <_ZN16DiagnoseViewBaseC1Ev+0x3f4>
 8005e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e36:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e42:	f2c1 826e 	blt.w	8007322 <_ZN16DiagnoseViewBaseC1Ev+0x195a>
            return (int)(fs + 0.5f);
 8005e46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e52:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e56:	4628      	mov	r0, r5
 8005e58:	f011 fb2d 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e5c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e60:	ed1f 7a29 	vldr	s14, [pc, #-164]	@ 8005dc0 <_ZN16DiagnoseViewBaseC1Ev+0x3f8>
 8005e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e68:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e74:	f2c1 8269 	blt.w	800734a <_ZN16DiagnoseViewBaseC1Ev+0x1982>
            return (int)(fs + 0.5f);
 8005e78:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e84:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e88:	4628      	mov	r0, r5
 8005e8a:	f011 fb14 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e8e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e92:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 8005dc4 <_ZN16DiagnoseViewBaseC1Ev+0x3fc>
 8005e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea6:	f2c1 8264 	blt.w	8007372 <_ZN16DiagnoseViewBaseC1Ev+0x19aa>
            return (int)(fs + 0.5f);
 8005eaa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005eae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005eb6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f011 fafb 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ec0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ec4:	ed1f 7a40 	vldr	s14, [pc, #-256]	@ 8005dc8 <_ZN16DiagnoseViewBaseC1Ev+0x400>
 8005ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed8:	f2c1 825f 	blt.w	800739a <_ZN16DiagnoseViewBaseC1Ev+0x19d2>
            return (int)(fs + 0.5f);
 8005edc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ee8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005eec:	4628      	mov	r0, r5
 8005eee:	f011 fae2 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ef2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ef6:	ed1f 7a4b 	vldr	s14, [pc, #-300]	@ 8005dcc <_ZN16DiagnoseViewBaseC1Ev+0x404>
 8005efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005efe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0a:	f2c1 825a 	blt.w	80073c2 <_ZN16DiagnoseViewBaseC1Ev+0x19fa>
            return (int)(fs + 0.5f);
 8005f0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f1a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f011 fac9 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f24:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f28:	ed1f 7a57 	vldr	s14, [pc, #-348]	@ 8005dd0 <_ZN16DiagnoseViewBaseC1Ev+0x408>
 8005f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f30:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3c:	f2c1 8255 	blt.w	80073ea <_ZN16DiagnoseViewBaseC1Ev+0x1a22>
            return (int)(fs + 0.5f);
 8005f40:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f4c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f50:	4628      	mov	r0, r5
 8005f52:	f011 fab0 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f56:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f5a:	ed1f 7a62 	vldr	s14, [pc, #-392]	@ 8005dd4 <_ZN16DiagnoseViewBaseC1Ev+0x40c>
 8005f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f62:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6e:	f2c1 8250 	blt.w	8007412 <_ZN16DiagnoseViewBaseC1Ev+0x1a4a>
            return (int)(fs + 0.5f);
 8005f72:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f7e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f82:	4628      	mov	r0, r5
 8005f84:	f011 fa97 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f88:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f8c:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8005dd8 <_ZN16DiagnoseViewBaseC1Ev+0x410>
 8005f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f94:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa0:	f2c1 824b 	blt.w	800743a <_ZN16DiagnoseViewBaseC1Ev+0x1a72>
            return (int)(fs + 0.5f);
 8005fa4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fb0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f011 fa7e 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005fba:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005fbe:	ed1f 7a79 	vldr	s14, [pc, #-484]	@ 8005ddc <_ZN16DiagnoseViewBaseC1Ev+0x414>
 8005fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd2:	f2c1 8246 	blt.w	8007462 <_ZN16DiagnoseViewBaseC1Ev+0x1a9a>
            return (int)(fs + 0.5f);
 8005fd6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fe2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f011 fa65 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005fec:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ff0:	ed1f 7a85 	vldr	s14, [pc, #-532]	@ 8005de0 <_ZN16DiagnoseViewBaseC1Ev+0x418>
 8005ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006004:	f2c1 8241 	blt.w	800748a <_ZN16DiagnoseViewBaseC1Ev+0x1ac2>
            return (int)(fs + 0.5f);
 8006008:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800600c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006014:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006018:	4628      	mov	r0, r5
 800601a:	f011 fa4c 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800601e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006022:	ed1f 7a90 	vldr	s14, [pc, #-576]	@ 8005de4 <_ZN16DiagnoseViewBaseC1Ev+0x41c>
 8006026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800602a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800602e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006036:	f2c1 823c 	blt.w	80074b2 <_ZN16DiagnoseViewBaseC1Ev+0x1aea>
            return (int)(fs + 0.5f);
 800603a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800603e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006046:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800604a:	4628      	mov	r0, r5
 800604c:	f011 fa33 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006050:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006054:	ed1f 7a9c 	vldr	s14, [pc, #-624]	@ 8005de8 <_ZN16DiagnoseViewBaseC1Ev+0x420>
 8006058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800605c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006068:	f2c1 8237 	blt.w	80074da <_ZN16DiagnoseViewBaseC1Ev+0x1b12>
            return (int)(fs + 0.5f);
 800606c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006070:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006078:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800607c:	4628      	mov	r0, r5
 800607e:	f011 fa1a 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006082:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006086:	ed1f 7aa7 	vldr	s14, [pc, #-668]	@ 8005dec <_ZN16DiagnoseViewBaseC1Ev+0x424>
 800608a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800608e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609a:	f2c1 8232 	blt.w	8007502 <_ZN16DiagnoseViewBaseC1Ev+0x1b3a>
            return (int)(fs + 0.5f);
 800609e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060aa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060ae:	4628      	mov	r0, r5
 80060b0:	f011 fa01 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060b4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80060b8:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 8005df0 <_ZN16DiagnoseViewBaseC1Ev+0x428>
 80060bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060c0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80060c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060cc:	f2c1 822d 	blt.w	800752a <_ZN16DiagnoseViewBaseC1Ev+0x1b62>
            return (int)(fs + 0.5f);
 80060d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060dc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060e0:	4628      	mov	r0, r5
 80060e2:	f011 f9e8 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060e6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80060ea:	ed1f 7abe 	vldr	s14, [pc, #-760]	@ 8005df4 <_ZN16DiagnoseViewBaseC1Ev+0x42c>
 80060ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060f2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80060f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fe:	f2c1 8228 	blt.w	8007552 <_ZN16DiagnoseViewBaseC1Ev+0x1b8a>
            return (int)(fs + 0.5f);
 8006102:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800610a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800610e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006112:	4628      	mov	r0, r5
 8006114:	f011 f9cf 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006118:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800611c:	ed1f 7aca 	vldr	s14, [pc, #-808]	@ 8005df8 <_ZN16DiagnoseViewBaseC1Ev+0x430>
 8006120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006124:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006130:	f2c1 8223 	blt.w	800757a <_ZN16DiagnoseViewBaseC1Ev+0x1bb2>
            return (int)(fs + 0.5f);
 8006134:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006138:	ee77 7a87 	vadd.f32	s15, s15, s14
 800613c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006140:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006144:	4628      	mov	r0, r5
 8006146:	f011 f9b6 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800614a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800614e:	ed1f 7ad5 	vldr	s14, [pc, #-852]	@ 8005dfc <_ZN16DiagnoseViewBaseC1Ev+0x434>
 8006152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006156:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800615a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800615e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006162:	f2c1 821e 	blt.w	80075a2 <_ZN16DiagnoseViewBaseC1Ev+0x1bda>
            return (int)(fs + 0.5f);
 8006166:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800616a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800616e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006172:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006176:	4628      	mov	r0, r5
 8006178:	f011 f99d 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800617c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006180:	ed1f 7ae1 	vldr	s14, [pc, #-900]	@ 8005e00 <_ZN16DiagnoseViewBaseC1Ev+0x438>
 8006184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006188:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800618c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006194:	f2c1 8219 	blt.w	80075ca <_ZN16DiagnoseViewBaseC1Ev+0x1c02>
            return (int)(fs + 0.5f);
 8006198:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800619c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061a4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061a8:	4628      	mov	r0, r5
 80061aa:	f011 f984 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061ae:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80061b2:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 8005e04 <_ZN16DiagnoseViewBaseC1Ev+0x43c>
 80061b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c6:	f2c1 8214 	blt.w	80075f2 <_ZN16DiagnoseViewBaseC1Ev+0x1c2a>
            return (int)(fs + 0.5f);
 80061ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061d6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061da:	4628      	mov	r0, r5
 80061dc:	f011 f96b 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061e0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80061e4:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 80065b4 <_ZN16DiagnoseViewBaseC1Ev+0xbec>
 80061e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f8:	f2c1 820f 	blt.w	800761a <_ZN16DiagnoseViewBaseC1Ev+0x1c52>
            return (int)(fs + 0.5f);
 80061fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006208:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800620c:	4628      	mov	r0, r5
 800620e:	f011 f952 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006212:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006216:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 80065b8 <_ZN16DiagnoseViewBaseC1Ev+0xbf0>
 800621a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800621e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622a:	f2c1 820a 	blt.w	8007642 <_ZN16DiagnoseViewBaseC1Ev+0x1c7a>
            return (int)(fs + 0.5f);
 800622e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006232:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800623a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800623e:	4628      	mov	r0, r5
 8006240:	f011 f939 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006244:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006248:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80065bc <_ZN16DiagnoseViewBaseC1Ev+0xbf4>
 800624c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006250:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625c:	f2c1 8205 	blt.w	800766a <_ZN16DiagnoseViewBaseC1Ev+0x1ca2>
            return (int)(fs + 0.5f);
 8006260:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800626c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006270:	4628      	mov	r0, r5
 8006272:	f011 f920 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006276:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800627a:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 80065c0 <_ZN16DiagnoseViewBaseC1Ev+0xbf8>
 800627e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006282:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628e:	f2c1 8200 	blt.w	8007692 <_ZN16DiagnoseViewBaseC1Ev+0x1cca>
            return (int)(fs + 0.5f);
 8006292:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800629a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800629e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80062a2:	4628      	mov	r0, r5
 80062a4:	f011 f907 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80062a8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80062ac:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 80065c4 <_ZN16DiagnoseViewBaseC1Ev+0xbfc>
 80062b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80062b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c0:	f2c1 81fb 	blt.w	80076ba <_ZN16DiagnoseViewBaseC1Ev+0x1cf2>
            return (int)(fs + 0.5f);
 80062c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062d0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80062d4:	4628      	mov	r0, r5
 80062d6:	f011 f8ee 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80062da:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80062de:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80065c8 <_ZN16DiagnoseViewBaseC1Ev+0xc00>
 80062e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80062ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f2:	f2c1 81f6 	blt.w	80076e2 <_ZN16DiagnoseViewBaseC1Ev+0x1d1a>
            return (int)(fs + 0.5f);
 80062f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006302:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006306:	4628      	mov	r0, r5
 8006308:	f011 f8d5 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800630c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006310:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80065cc <_ZN16DiagnoseViewBaseC1Ev+0xc04>
 8006314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006318:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800631c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	f2c1 81f1 	blt.w	800770a <_ZN16DiagnoseViewBaseC1Ev+0x1d42>
            return (int)(fs + 0.5f);
 8006328:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800632c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006334:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006338:	4628      	mov	r0, r5
 800633a:	f011 f8bc 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800633e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006342:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 80065d0 <_ZN16DiagnoseViewBaseC1Ev+0xc08>
 8006346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800634a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800634e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006356:	f2c1 81ec 	blt.w	8007732 <_ZN16DiagnoseViewBaseC1Ev+0x1d6a>
            return (int)(fs + 0.5f);
 800635a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800635e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006366:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800636a:	4628      	mov	r0, r5
 800636c:	f011 f8a3 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006370:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006374:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80065d4 <_ZN16DiagnoseViewBaseC1Ev+0xc0c>
 8006378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006388:	f2c1 81e7 	blt.w	800775a <_ZN16DiagnoseViewBaseC1Ev+0x1d92>
            return (int)(fs + 0.5f);
 800638c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006398:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800639c:	4628      	mov	r0, r5
 800639e:	f011 f88a 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063a2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80063a6:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80065d8 <_ZN16DiagnoseViewBaseC1Ev+0xc10>
 80063aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ba:	f2c1 81e2 	blt.w	8007782 <_ZN16DiagnoseViewBaseC1Ev+0x1dba>
            return (int)(fs + 0.5f);
 80063be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063ca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063ce:	4628      	mov	r0, r5
 80063d0:	f011 f871 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063d4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80063d8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80065dc <_ZN16DiagnoseViewBaseC1Ev+0xc14>
 80063dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ec:	f2c1 81dd 	blt.w	80077aa <_ZN16DiagnoseViewBaseC1Ev+0x1de2>
            return (int)(fs + 0.5f);
 80063f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063fc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006400:	4628      	mov	r0, r5
 8006402:	f011 f858 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006406:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800640a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80065e0 <_ZN16DiagnoseViewBaseC1Ev+0xc18>
 800640e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006412:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800641a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641e:	f2c1 81d8 	blt.w	80077d2 <_ZN16DiagnoseViewBaseC1Ev+0x1e0a>
            return (int)(fs + 0.5f);
 8006422:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800642a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800642e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006432:	4628      	mov	r0, r5
 8006434:	f011 f83f 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006438:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800643c:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80065e4 <_ZN16DiagnoseViewBaseC1Ev+0xc1c>
 8006440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006444:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800644c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006450:	f2c1 81d3 	blt.w	80077fa <_ZN16DiagnoseViewBaseC1Ev+0x1e32>
            return (int)(fs + 0.5f);
 8006454:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800645c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006460:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006464:	4628      	mov	r0, r5
 8006466:	f011 f826 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800646a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800646e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80065e8 <_ZN16DiagnoseViewBaseC1Ev+0xc20>
 8006472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006476:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800647a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800647e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006482:	f2c1 81ce 	blt.w	8007822 <_ZN16DiagnoseViewBaseC1Ev+0x1e5a>
            return (int)(fs + 0.5f);
 8006486:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800648a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800648e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006492:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006496:	4628      	mov	r0, r5
 8006498:	f011 f80d 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800649c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80064a0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80065ec <_ZN16DiagnoseViewBaseC1Ev+0xc24>
 80064a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064a8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80064ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	f2c1 81c9 	blt.w	800784a <_ZN16DiagnoseViewBaseC1Ev+0x1e82>
            return (int)(fs + 0.5f);
 80064b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064c4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80064c8:	4628      	mov	r0, r5
 80064ca:	f010 fff4 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80064ce:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80064d2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80065f0 <_ZN16DiagnoseViewBaseC1Ev+0xc28>
 80064d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80064de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e6:	f2c1 81c4 	blt.w	8007872 <_ZN16DiagnoseViewBaseC1Ev+0x1eaa>
            return (int)(fs + 0.5f);
 80064ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80064fa:	4628      	mov	r0, r5
 80064fc:	f010 ffdb 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006500:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006504:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80065f4 <_ZN16DiagnoseViewBaseC1Ev+0xc2c>
 8006508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800650c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006518:	f2c1 81bf 	blt.w	800789a <_ZN16DiagnoseViewBaseC1Ev+0x1ed2>
            return (int)(fs + 0.5f);
 800651c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006528:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800652c:	4628      	mov	r0, r5
 800652e:	f010 ffc2 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006532:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006536:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80065f8 <_ZN16DiagnoseViewBaseC1Ev+0xc30>
 800653a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800653e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654a:	f2c1 81ba 	blt.w	80078c2 <_ZN16DiagnoseViewBaseC1Ev+0x1efa>
            return (int)(fs + 0.5f);
 800654e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800655a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800655e:	4628      	mov	r0, r5
 8006560:	f010 ffa9 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006564:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006568:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80065fc <_ZN16DiagnoseViewBaseC1Ev+0xc34>
 800656c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006570:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657c:	f2c1 81b5 	blt.w	80078ea <_ZN16DiagnoseViewBaseC1Ev+0x1f22>
            return (int)(fs + 0.5f);
 8006580:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800658c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006590:	4628      	mov	r0, r5
 8006592:	f010 ff90 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006596:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800659a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006600 <_ZN16DiagnoseViewBaseC1Ev+0xc38>
 800659e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80065a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ae:	f2c1 81b0 	blt.w	8007912 <_ZN16DiagnoseViewBaseC1Ev+0x1f4a>
 80065b2:	e04d      	b.n	8006650 <_ZN16DiagnoseViewBaseC1Ev+0xc88>
 80065b4:	42bdc083 	.word	0x42bdc083
 80065b8:	42c5d585 	.word	0x42c5d585
 80065bc:	42bfe1a1 	.word	0x42bfe1a1
 80065c0:	42aca41f 	.word	0x42aca41f
 80065c4:	428fbf28 	.word	0x428fbf28
 80065c8:	425dbdf6 	.word	0x425dbdf6
 80065cc:	4220c971 	.word	0x4220c971
 80065d0:	41e79e30 	.word	0x41e79e30
 80065d4:	41bba58a 	.word	0x41bba58a
 80065d8:	41c03ddf 	.word	0x41c03ddf
 80065dc:	41ec3b01 	.word	0x41ec3b01
 80065e0:	4216a066 	.word	0x4216a066
 80065e4:	423647a4 	.word	0x423647a4
 80065e8:	424a6d26 	.word	0x424a6d26
 80065ec:	424bddc7 	.word	0x424bddc7
 80065f0:	4238b3be 	.word	0x4238b3be
 80065f4:	4214dd41 	.word	0x4214dd41
 80065f8:	41d25c19 	.word	0x41d25c19
 80065fc:	41826af2 	.word	0x41826af2
 8006600:	412184c0 	.word	0x412184c0
 8006604:	411c803f 	.word	0x411c803f
 8006608:	4181733e 	.word	0x4181733e
 800660c:	41e4c438 	.word	0x41e4c438
 8006610:	4233c65c 	.word	0x4233c65c
 8006614:	4278ee70 	.word	0x4278ee70
 8006618:	429a8141 	.word	0x429a8141
 800661c:	42aea312 	.word	0x42aea312
 8006620:	42b5c855 	.word	0x42b5c855
 8006624:	42afd4b1 	.word	0x42afd4b1
 8006628:	429f9a06 	.word	0x429f9a06
 800662c:	428a19ce 	.word	0x428a19ce
 8006630:	426a8187 	.word	0x426a8187
 8006634:	424cd9b6 	.word	0x424cd9b6
 8006638:	4242344c 	.word	0x4242344c
 800663c:	424c13d3 	.word	0x424c13d3
 8006640:	426631d4 	.word	0x426631d4
 8006644:	4283ced6 	.word	0x4283ced6
 8006648:	4292837e 	.word	0x4292837e
 800664c:	4299d153 	.word	0x4299d153
            return (int)(fs + 0.5f);
 8006650:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800665c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006660:	4628      	mov	r0, r5
 8006662:	f010 ff28 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006666:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800666a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 8006604 <_ZN16DiagnoseViewBaseC1Ev+0xc3c>
 800666e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006672:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006676:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	f2c1 815c 	blt.w	800793a <_ZN16DiagnoseViewBaseC1Ev+0x1f72>
            return (int)(fs + 0.5f);
 8006682:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006686:	ee77 7a87 	vadd.f32	s15, s15, s14
 800668a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800668e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006692:	4628      	mov	r0, r5
 8006694:	f010 ff0f 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006698:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800669c:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 8006608 <_ZN16DiagnoseViewBaseC1Ev+0xc40>
 80066a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80066a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b0:	f2c1 8157 	blt.w	8007962 <_ZN16DiagnoseViewBaseC1Ev+0x1f9a>
            return (int)(fs + 0.5f);
 80066b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066c0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80066c4:	4628      	mov	r0, r5
 80066c6:	f010 fef6 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80066ca:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80066ce:	ed1f 7a31 	vldr	s14, [pc, #-196]	@ 800660c <_ZN16DiagnoseViewBaseC1Ev+0xc44>
 80066d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066d6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80066da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e2:	f2c1 8152 	blt.w	800798a <_ZN16DiagnoseViewBaseC1Ev+0x1fc2>
            return (int)(fs + 0.5f);
 80066e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066f2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80066f6:	4628      	mov	r0, r5
 80066f8:	f010 fedd 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80066fc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006700:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8006610 <_ZN16DiagnoseViewBaseC1Ev+0xc48>
 8006704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006708:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800670c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006714:	f2c1 814d 	blt.w	80079b2 <_ZN16DiagnoseViewBaseC1Ev+0x1fea>
            return (int)(fs + 0.5f);
 8006718:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800671c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006724:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006728:	4628      	mov	r0, r5
 800672a:	f010 fec4 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800672e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006732:	ed1f 7a48 	vldr	s14, [pc, #-288]	@ 8006614 <_ZN16DiagnoseViewBaseC1Ev+0xc4c>
 8006736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800673a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800673e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006746:	f2c1 8148 	blt.w	80079da <_ZN16DiagnoseViewBaseC1Ev+0x2012>
            return (int)(fs + 0.5f);
 800674a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800674e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006756:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800675a:	4628      	mov	r0, r5
 800675c:	f010 feab 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006760:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006764:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 8006618 <_ZN16DiagnoseViewBaseC1Ev+0xc50>
 8006768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800676c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006778:	f2c1 8143 	blt.w	8007a02 <_ZN16DiagnoseViewBaseC1Ev+0x203a>
            return (int)(fs + 0.5f);
 800677c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006788:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800678c:	4628      	mov	r0, r5
 800678e:	f010 fe92 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006792:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006796:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 800661c <_ZN16DiagnoseViewBaseC1Ev+0xc54>
 800679a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800679e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80067a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067aa:	f2c1 813e 	blt.w	8007a2a <_ZN16DiagnoseViewBaseC1Ev+0x2062>
            return (int)(fs + 0.5f);
 80067ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80067b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067ba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80067be:	4628      	mov	r0, r5
 80067c0:	f010 fe79 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80067c4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80067c8:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 8006620 <_ZN16DiagnoseViewBaseC1Ev+0xc58>
 80067cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80067d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067dc:	f2c1 8139 	blt.w	8007a52 <_ZN16DiagnoseViewBaseC1Ev+0x208a>
            return (int)(fs + 0.5f);
 80067e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80067e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067ec:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80067f0:	4628      	mov	r0, r5
 80067f2:	f010 fe60 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80067f6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80067fa:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 8006624 <_ZN16DiagnoseViewBaseC1Ev+0xc5c>
 80067fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006802:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800680a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680e:	f2c1 8134 	blt.w	8007a7a <_ZN16DiagnoseViewBaseC1Ev+0x20b2>
            return (int)(fs + 0.5f);
 8006812:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800681a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800681e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006822:	4628      	mov	r0, r5
 8006824:	f010 fe47 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006828:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800682c:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8006628 <_ZN16DiagnoseViewBaseC1Ev+0xc60>
 8006830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006834:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	f2c1 812f 	blt.w	8007aa2 <_ZN16DiagnoseViewBaseC1Ev+0x20da>
            return (int)(fs + 0.5f);
 8006844:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800684c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006850:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006854:	4628      	mov	r0, r5
 8006856:	f010 fe2e 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800685a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800685e:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 800662c <_ZN16DiagnoseViewBaseC1Ev+0xc64>
 8006862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006866:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800686a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006872:	f2c1 812a 	blt.w	8007aca <_ZN16DiagnoseViewBaseC1Ev+0x2102>
            return (int)(fs + 0.5f);
 8006876:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800687a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800687e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006882:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006886:	4628      	mov	r0, r5
 8006888:	f010 fe15 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800688c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006890:	ed1f 7a99 	vldr	s14, [pc, #-612]	@ 8006630 <_ZN16DiagnoseViewBaseC1Ev+0xc68>
 8006894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006898:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800689c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a4:	f2c1 8125 	blt.w	8007af2 <_ZN16DiagnoseViewBaseC1Ev+0x212a>
            return (int)(fs + 0.5f);
 80068a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068b4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80068b8:	4628      	mov	r0, r5
 80068ba:	f010 fdfc 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80068be:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80068c2:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 8006634 <_ZN16DiagnoseViewBaseC1Ev+0xc6c>
 80068c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068ca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80068ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d6:	f2c1 8120 	blt.w	8007b1a <_ZN16DiagnoseViewBaseC1Ev+0x2152>
            return (int)(fs + 0.5f);
 80068da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80068ea:	4628      	mov	r0, r5
 80068ec:	f010 fde3 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80068f0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80068f4:	ed1f 7ab0 	vldr	s14, [pc, #-704]	@ 8006638 <_ZN16DiagnoseViewBaseC1Ev+0xc70>
 80068f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068fc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006900:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006908:	f2c1 811b 	blt.w	8007b42 <_ZN16DiagnoseViewBaseC1Ev+0x217a>
            return (int)(fs + 0.5f);
 800690c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006918:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800691c:	4628      	mov	r0, r5
 800691e:	f010 fdca 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006922:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006926:	ed1f 7abb 	vldr	s14, [pc, #-748]	@ 800663c <_ZN16DiagnoseViewBaseC1Ev+0xc74>
 800692a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800692e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693a:	f2c1 8116 	blt.w	8007b6a <_ZN16DiagnoseViewBaseC1Ev+0x21a2>
            return (int)(fs + 0.5f);
 800693e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800694a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800694e:	4628      	mov	r0, r5
 8006950:	f010 fdb1 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006954:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006958:	ed1f 7ac7 	vldr	s14, [pc, #-796]	@ 8006640 <_ZN16DiagnoseViewBaseC1Ev+0xc78>
 800695c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006960:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696c:	f2c1 8111 	blt.w	8007b92 <_ZN16DiagnoseViewBaseC1Ev+0x21ca>
            return (int)(fs + 0.5f);
 8006970:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800697c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006980:	4628      	mov	r0, r5
 8006982:	f010 fd98 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006986:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800698a:	ed1f 7ad2 	vldr	s14, [pc, #-840]	@ 8006644 <_ZN16DiagnoseViewBaseC1Ev+0xc7c>
 800698e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006992:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800699a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699e:	f2c1 810c 	blt.w	8007bba <_ZN16DiagnoseViewBaseC1Ev+0x21f2>
            return (int)(fs + 0.5f);
 80069a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80069a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069ae:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80069b2:	4628      	mov	r0, r5
 80069b4:	f010 fd7f 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80069b8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80069bc:	ed1f 7ade 	vldr	s14, [pc, #-888]	@ 8006648 <_ZN16DiagnoseViewBaseC1Ev+0xc80>
 80069c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069c4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80069c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d0:	f2c1 8107 	blt.w	8007be2 <_ZN16DiagnoseViewBaseC1Ev+0x221a>
            return (int)(fs + 0.5f);
 80069d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80069d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069e0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80069e4:	4628      	mov	r0, r5
 80069e6:	f010 fd66 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80069ea:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80069ee:	ed1f 7ae9 	vldr	s14, [pc, #-932]	@ 800664c <_ZN16DiagnoseViewBaseC1Ev+0xc84>
 80069f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069f6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80069fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a02:	f2c1 8102 	blt.w	8007c0a <_ZN16DiagnoseViewBaseC1Ev+0x2242>
            return (int)(fs + 0.5f);
 8006a06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a12:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a16:	4628      	mov	r0, r5
 8006a18:	f010 fd4d 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a1c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006a20:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 8006df0 <_ZN16DiagnoseViewBaseC1Ev+0x1428>
 8006a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a28:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a34:	f2c1 80fd 	blt.w	8007c32 <_ZN16DiagnoseViewBaseC1Ev+0x226a>
            return (int)(fs + 0.5f);
 8006a38:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a44:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f010 fd34 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a4e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006a52:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 8006df4 <_ZN16DiagnoseViewBaseC1Ev+0x142c>
 8006a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a66:	f2c1 80f8 	blt.w	8007c5a <_ZN16DiagnoseViewBaseC1Ev+0x2292>
            return (int)(fs + 0.5f);
 8006a6a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a76:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f010 fd1b 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a80:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006a84:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8006df8 <_ZN16DiagnoseViewBaseC1Ev+0x1430>
 8006a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a98:	f2c1 80f3 	blt.w	8007c82 <_ZN16DiagnoseViewBaseC1Ev+0x22ba>
            return (int)(fs + 0.5f);
 8006a9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006aac:	4628      	mov	r0, r5
 8006aae:	f010 fd02 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ab2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006ab6:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8006dfc <_ZN16DiagnoseViewBaseC1Ev+0x1434>
 8006aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006abe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aca:	f2c1 80ee 	blt.w	8007caa <_ZN16DiagnoseViewBaseC1Ev+0x22e2>
            return (int)(fs + 0.5f);
 8006ace:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ada:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f010 fce9 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ae4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006ae8:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8006e00 <_ZN16DiagnoseViewBaseC1Ev+0x1438>
 8006aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006af0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006af4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afc:	f2c1 80e9 	blt.w	8007cd2 <_ZN16DiagnoseViewBaseC1Ev+0x230a>
            return (int)(fs + 0.5f);
 8006b00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b0c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b10:	4628      	mov	r0, r5
 8006b12:	f010 fcd0 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b16:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006b1a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8006e04 <_ZN16DiagnoseViewBaseC1Ev+0x143c>
 8006b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b22:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2e:	f2c1 80e4 	blt.w	8007cfa <_ZN16DiagnoseViewBaseC1Ev+0x2332>
            return (int)(fs + 0.5f);
 8006b32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b3e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b42:	4628      	mov	r0, r5
 8006b44:	f010 fcb7 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b48:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006b4c:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8006e08 <_ZN16DiagnoseViewBaseC1Ev+0x1440>
 8006b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b54:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b60:	f2c1 80df 	blt.w	8007d22 <_ZN16DiagnoseViewBaseC1Ev+0x235a>
            return (int)(fs + 0.5f);
 8006b64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b70:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b74:	4628      	mov	r0, r5
 8006b76:	f010 fc9e 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b7a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006b7e:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8006e0c <_ZN16DiagnoseViewBaseC1Ev+0x1444>
 8006b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b86:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b92:	f2c1 80da 	blt.w	8007d4a <_ZN16DiagnoseViewBaseC1Ev+0x2382>
            return (int)(fs + 0.5f);
 8006b96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ba2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f010 fc85 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006bac:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006bb0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006e10 <_ZN16DiagnoseViewBaseC1Ev+0x1448>
 8006bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc4:	f2c1 80d5 	blt.w	8007d72 <_ZN16DiagnoseViewBaseC1Ev+0x23aa>
            return (int)(fs + 0.5f);
 8006bc8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bd4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f010 fc6c 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006bde:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006be2:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8006e14 <_ZN16DiagnoseViewBaseC1Ev+0x144c>
 8006be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf6:	f2c1 80d0 	blt.w	8007d9a <_ZN16DiagnoseViewBaseC1Ev+0x23d2>
            return (int)(fs + 0.5f);
 8006bfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006bfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c06:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f010 fc53 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c10:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006c14:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006e18 <_ZN16DiagnoseViewBaseC1Ev+0x1450>
 8006c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c28:	f2c1 80cb 	blt.w	8007dc2 <_ZN16DiagnoseViewBaseC1Ev+0x23fa>
            return (int)(fs + 0.5f);
 8006c2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c38:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f010 fc3a 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c42:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006c46:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8006e1c <_ZN16DiagnoseViewBaseC1Ev+0x1454>
 8006c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5a:	f2c1 80c6 	blt.w	8007dea <_ZN16DiagnoseViewBaseC1Ev+0x2422>
            return (int)(fs + 0.5f);
 8006c5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006c62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c6a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f010 fc21 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c74:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006c78:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8006e20 <_ZN16DiagnoseViewBaseC1Ev+0x1458>
 8006c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c80:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8c:	f2c1 80c1 	blt.w	8007e12 <_ZN16DiagnoseViewBaseC1Ev+0x244a>
            return (int)(fs + 0.5f);
 8006c90:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006c94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c9c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f010 fc08 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ca6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006caa:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006e24 <_ZN16DiagnoseViewBaseC1Ev+0x145c>
 8006cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006cb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cbe:	f2c1 80bc 	blt.w	8007e3a <_ZN16DiagnoseViewBaseC1Ev+0x2472>
            return (int)(fs + 0.5f);
 8006cc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f010 fbef 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006cd8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006cdc:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006e28 <_ZN16DiagnoseViewBaseC1Ev+0x1460>
 8006ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ce8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf0:	f2c1 80b7 	blt.w	8007e62 <_ZN16DiagnoseViewBaseC1Ev+0x249a>
            return (int)(fs + 0.5f);
 8006cf4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d00:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d04:	4628      	mov	r0, r5
 8006d06:	f010 fbd6 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d0a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006d0e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8006e2c <_ZN16DiagnoseViewBaseC1Ev+0x1464>
 8006d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d16:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d22:	f2c1 80b2 	blt.w	8007e8a <_ZN16DiagnoseViewBaseC1Ev+0x24c2>
            return (int)(fs + 0.5f);
 8006d26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d32:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d36:	4628      	mov	r0, r5
 8006d38:	f010 fbbd 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d3c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006d40:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006e30 <_ZN16DiagnoseViewBaseC1Ev+0x1468>
 8006d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d48:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d54:	f2c1 80ad 	blt.w	8007eb2 <_ZN16DiagnoseViewBaseC1Ev+0x24ea>
            return (int)(fs + 0.5f);
 8006d58:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d64:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f010 fba4 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d6e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006d72:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006e34 <_ZN16DiagnoseViewBaseC1Ev+0x146c>
 8006d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d86:	f2c1 80a8 	blt.w	8007eda <_ZN16DiagnoseViewBaseC1Ev+0x2512>
            return (int)(fs + 0.5f);
 8006d8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d96:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f010 fb8b 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006da0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006da4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006e38 <_ZN16DiagnoseViewBaseC1Ev+0x1470>
 8006da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db8:	f2c1 80a3 	blt.w	8007f02 <_ZN16DiagnoseViewBaseC1Ev+0x253a>
            return (int)(fs + 0.5f);
 8006dbc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006dc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dc8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f010 fb72 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006dd2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006dd6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006e3c <_ZN16DiagnoseViewBaseC1Ev+0x1474>
 8006dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dde:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dea:	f2c1 809e 	blt.w	8007f2a <_ZN16DiagnoseViewBaseC1Ev+0x2562>
 8006dee:	e049      	b.n	8006e84 <_ZN16DiagnoseViewBaseC1Ev+0x14bc>
 8006df0:	4295fa02 	.word	0x4295fa02
 8006df4:	4285e50c 	.word	0x4285e50c
 8006df8:	4256f26f 	.word	0x4256f26f
 8006dfc:	42167451 	.word	0x42167451
 8006e00:	41ad0597 	.word	0x41ad0597
 8006e04:	410e92d7 	.word	0x410e92d7
 8006e08:	3ff86e6e 	.word	0x3ff86e6e
 8006e0c:	3ffaf599 	.word	0x3ffaf599
 8006e10:	410b128e 	.word	0x410b128e
 8006e14:	41a35230 	.word	0x41a35230
 8006e18:	42099166 	.word	0x42099166
 8006e1c:	423e2093 	.word	0x423e2093
 8006e20:	426489ab 	.word	0x426489ab
 8006e24:	42761f9c 	.word	0x42761f9c
 8006e28:	4271dbd0 	.word	0x4271dbd0
 8006e2c:	425c7cf8 	.word	0x425c7cf8
 8006e30:	423f37ee 	.word	0x423f37ee
 8006e34:	42254e0a 	.word	0x42254e0a
 8006e38:	42192202 	.word	0x42192202
 8006e3c:	422183b0 	.word	0x422183b0
 8006e40:	423fde06 	.word	0x423fde06
 8006e44:	426fbac7 	.word	0x426fbac7
 8006e48:	4293ddf2 	.word	0x4293ddf2
 8006e4c:	42ade74e 	.word	0x42ade74e
 8006e50:	42c007bb 	.word	0x42c007bb
 8006e54:	42c5d556 	.word	0x42c5d556
 8006e58:	42bd8271 	.word	0x42bd8271
 8006e5c:	42a8528b 	.word	0x42a8528b
 8006e60:	428a52fd 	.word	0x428a52fd
 8006e64:	4252d134 	.word	0x4252d134
 8006e68:	4217da1a 	.word	0x4217da1a
 8006e6c:	41dcc932 	.word	0x41dcc932
 8006e70:	41b921ff 	.word	0x41b921ff
 8006e74:	41c54a38 	.word	0x41c54a38
 8006e78:	41f649c0 	.word	0x41f649c0
 8006e7c:	421c52f7 	.word	0x421c52f7
 8006e80:	423ab963 	.word	0x423ab963
            return (int)(fs + 0.5f);
 8006e84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e90:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e94:	4628      	mov	r0, r5
 8006e96:	f010 fb0e 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e9a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006e9e:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 8006e40 <_ZN16DiagnoseViewBaseC1Ev+0x1478>
 8006ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	f2c1 804e 	blt.w	8007f52 <_ZN16DiagnoseViewBaseC1Ev+0x258a>
            return (int)(fs + 0.5f);
 8006eb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006eba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ec2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f010 faf5 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ecc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006ed0:	ed1f 7a24 	vldr	s14, [pc, #-144]	@ 8006e44 <_ZN16DiagnoseViewBaseC1Ev+0x147c>
 8006ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006edc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee4:	f2c1 8049 	blt.w	8007f7a <_ZN16DiagnoseViewBaseC1Ev+0x25b2>
            return (int)(fs + 0.5f);
 8006ee8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ef4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f010 fadc 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006efe:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006f02:	ed1f 7a2f 	vldr	s14, [pc, #-188]	@ 8006e48 <_ZN16DiagnoseViewBaseC1Ev+0x1480>
 8006f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f16:	f2c1 8044 	blt.w	8007fa2 <_ZN16DiagnoseViewBaseC1Ev+0x25da>
            return (int)(fs + 0.5f);
 8006f1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f26:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f010 fac3 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f30:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006f34:	ed1f 7a3b 	vldr	s14, [pc, #-236]	@ 8006e4c <_ZN16DiagnoseViewBaseC1Ev+0x1484>
 8006f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f48:	f2c1 803f 	blt.w	8007fca <_ZN16DiagnoseViewBaseC1Ev+0x2602>
            return (int)(fs + 0.5f);
 8006f4c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f58:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f010 faaa 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f62:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006f66:	ed1f 7a46 	vldr	s14, [pc, #-280]	@ 8006e50 <_ZN16DiagnoseViewBaseC1Ev+0x1488>
 8006f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7a:	f2c1 803a 	blt.w	8007ff2 <_ZN16DiagnoseViewBaseC1Ev+0x262a>
            return (int)(fs + 0.5f);
 8006f7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f8a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f010 fa91 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f94:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006f98:	ed1f 7a52 	vldr	s14, [pc, #-328]	@ 8006e54 <_ZN16DiagnoseViewBaseC1Ev+0x148c>
 8006f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006fa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fac:	f2c1 8035 	blt.w	800801a <_ZN16DiagnoseViewBaseC1Ev+0x2652>
            return (int)(fs + 0.5f);
 8006fb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fbc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f010 fa78 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006fc6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006fca:	ed1f 7a5d 	vldr	s14, [pc, #-372]	@ 8006e58 <_ZN16DiagnoseViewBaseC1Ev+0x1490>
 8006fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fde:	f2c1 8030 	blt.w	8008042 <_ZN16DiagnoseViewBaseC1Ev+0x267a>
            return (int)(fs + 0.5f);
 8006fe2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006fe6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f010 fa5f 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ff8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006ffc:	ed1f 7a69 	vldr	s14, [pc, #-420]	@ 8006e5c <_ZN16DiagnoseViewBaseC1Ev+0x1494>
 8007000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007004:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800700c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007010:	f2c1 802b 	blt.w	800806a <_ZN16DiagnoseViewBaseC1Ev+0x26a2>
            return (int)(fs + 0.5f);
 8007014:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800701c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007020:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007024:	4628      	mov	r0, r5
 8007026:	f010 fa46 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800702a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800702e:	ed1f 7a74 	vldr	s14, [pc, #-464]	@ 8006e60 <_ZN16DiagnoseViewBaseC1Ev+0x1498>
 8007032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007036:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800703a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800703e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007042:	f2c1 8026 	blt.w	8008092 <_ZN16DiagnoseViewBaseC1Ev+0x26ca>
            return (int)(fs + 0.5f);
 8007046:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800704a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800704e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007052:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007056:	4628      	mov	r0, r5
 8007058:	f010 fa2d 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800705c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8007060:	ed1f 7a80 	vldr	s14, [pc, #-512]	@ 8006e64 <_ZN16DiagnoseViewBaseC1Ev+0x149c>
 8007064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007068:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800706c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007074:	f2c1 8021 	blt.w	80080ba <_ZN16DiagnoseViewBaseC1Ev+0x26f2>
            return (int)(fs + 0.5f);
 8007078:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800707c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007084:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007088:	4628      	mov	r0, r5
 800708a:	f010 fa14 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800708e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8007092:	ed1f 7a8b 	vldr	s14, [pc, #-556]	@ 8006e68 <_ZN16DiagnoseViewBaseC1Ev+0x14a0>
 8007096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800709a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800709e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a6:	f2c1 801c 	blt.w	80080e2 <_ZN16DiagnoseViewBaseC1Ev+0x271a>
            return (int)(fs + 0.5f);
 80070aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80070ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070b6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80070ba:	4628      	mov	r0, r5
 80070bc:	f010 f9fb 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80070c0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80070c4:	ed1f 7a97 	vldr	s14, [pc, #-604]	@ 8006e6c <_ZN16DiagnoseViewBaseC1Ev+0x14a4>
 80070c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80070d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d8:	f2c1 8017 	blt.w	800810a <_ZN16DiagnoseViewBaseC1Ev+0x2742>
            return (int)(fs + 0.5f);
 80070dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80070e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80070ec:	4628      	mov	r0, r5
 80070ee:	f010 f9e2 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80070f2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80070f6:	ed1f 7aa2 	vldr	s14, [pc, #-648]	@ 8006e70 <_ZN16DiagnoseViewBaseC1Ev+0x14a8>
 80070fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710a:	f2c1 8012 	blt.w	8008132 <_ZN16DiagnoseViewBaseC1Ev+0x276a>
            return (int)(fs + 0.5f);
 800710e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800711a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800711e:	4628      	mov	r0, r5
 8007120:	f010 f9c9 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007124:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8007128:	ed1f 7aae 	vldr	s14, [pc, #-696]	@ 8006e74 <_ZN16DiagnoseViewBaseC1Ev+0x14ac>
 800712c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007130:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713c:	f2c1 800d 	blt.w	800815a <_ZN16DiagnoseViewBaseC1Ev+0x2792>
            return (int)(fs + 0.5f);
 8007140:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800714c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007150:	4628      	mov	r0, r5
 8007152:	f010 f9b0 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007156:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800715a:	ed1f 7ab9 	vldr	s14, [pc, #-740]	@ 8006e78 <_ZN16DiagnoseViewBaseC1Ev+0x14b0>
 800715e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007162:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800716a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716e:	f2c1 8008 	blt.w	8008182 <_ZN16DiagnoseViewBaseC1Ev+0x27ba>
            return (int)(fs + 0.5f);
 8007172:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007176:	ee77 7a87 	vadd.f32	s15, s15, s14
 800717a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800717e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007182:	4628      	mov	r0, r5
 8007184:	f010 f997 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007188:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800718c:	ed1f 7ac5 	vldr	s14, [pc, #-788]	@ 8006e7c <_ZN16DiagnoseViewBaseC1Ev+0x14b4>
 8007190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007194:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a0:	f2c1 8003 	blt.w	80081aa <_ZN16DiagnoseViewBaseC1Ev+0x27e2>
            return (int)(fs + 0.5f);
 80071a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80071a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071b0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80071b4:	4628      	mov	r0, r5
 80071b6:	f010 f97e 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80071ba:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80071be:	ed1f 7ad0 	vldr	s14, [pc, #-832]	@ 8006e80 <_ZN16DiagnoseViewBaseC1Ev+0x14b8>
 80071c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80071ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d2:	f2c0 87fe 	blt.w	80081d2 <_ZN16DiagnoseViewBaseC1Ev+0x280a>
            return (int)(fs + 0.5f);
 80071d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80071da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071e2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80071e6:	4628      	mov	r0, r5
 80071e8:	f010 f965 	bl	80174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80071ec:	4629      	mov	r1, r5
 80071ee:	4638      	mov	r0, r7
 80071f0:	f00c f98e 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeButton.setXY(20, 14);
 80071f4:	9804      	ldr	r0, [sp, #16]
 80071f6:	220e      	movs	r2, #14
 80071f8:	2114      	movs	r1, #20
 80071fa:	f7fd fb2b 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
 80071fe:	2305      	movs	r3, #5
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
 8007200:	aa0e      	add	r2, sp, #56	@ 0x38
 8007202:	a90d      	add	r1, sp, #52	@ 0x34
 8007204:	9804      	ldr	r0, [sp, #16]
 8007206:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800720a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800720e:	f011 f97b 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    HomeButton.setAction(buttonCallback);
 8007212:	f504 5351 	add.w	r3, r4, #13376	@ 0x3440
 8007216:	9904      	ldr	r1, [sp, #16]
 8007218:	4638      	mov	r0, r7
 800721a:	332c      	adds	r3, #44	@ 0x2c
        action = &callback;
 800721c:	f8c4 34c4 	str.w	r3, [r4, #1220]	@ 0x4c4
 8007220:	f00c f976 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scrollableContainer1.setPosition(0, 94, 307, 386);
 8007224:	f44f 73c1 	mov.w	r3, #386	@ 0x182
 8007228:	225e      	movs	r2, #94	@ 0x5e
 800722a:	9805      	ldr	r0, [sp, #20]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	2100      	movs	r1, #0
 8007230:	f240 1333 	movw	r3, #307	@ 0x133
 8007234:	f7fd fb1b 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer1.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007238:	9805      	ldr	r0, [sp, #20]
 800723a:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 800723e:	f00d fa4d 	bl	80146dc <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>
    scrollableContainer1.setScrollbarsAlpha(255);
 8007242:	9805      	ldr	r0, [sp, #20]
 8007244:	21ff      	movs	r1, #255	@ 0xff
 8007246:	f00d fa4e 	bl	80146e6 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>
 800724a:	4638      	mov	r0, r7
 800724c:	9905      	ldr	r1, [sp, #20]
 800724e:	f00c f95f 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007252:	4620      	mov	r0, r4
 8007254:	b011      	add	sp, #68	@ 0x44
 8007256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800725a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800725e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007262:	ee17 3a10 	vmov	r3, s14
 8007266:	3b01      	subs	r3, #1
 8007268:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800726c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007278:	ee17 1a90 	vmov	r1, s15
 800727c:	4419      	add	r1, r3
 800727e:	f7fe bd20 	b.w	8005cc2 <_ZN16DiagnoseViewBaseC1Ev+0x2fa>
 8007282:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007286:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800728a:	ee17 3a10 	vmov	r3, s14
 800728e:	3b01      	subs	r3, #1
 8007290:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007294:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072a0:	ee17 1a90 	vmov	r1, s15
 80072a4:	4419      	add	r1, r3
 80072a6:	f7fe bd25 	b.w	8005cf4 <_ZN16DiagnoseViewBaseC1Ev+0x32c>
 80072aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072b2:	ee17 3a10 	vmov	r3, s14
 80072b6:	3b01      	subs	r3, #1
 80072b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072bc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072c8:	ee17 1a90 	vmov	r1, s15
 80072cc:	4419      	add	r1, r3
 80072ce:	f7fe bd2a 	b.w	8005d26 <_ZN16DiagnoseViewBaseC1Ev+0x35e>
 80072d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072da:	ee17 3a10 	vmov	r3, s14
 80072de:	3b01      	subs	r3, #1
 80072e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072e4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072f0:	ee17 1a90 	vmov	r1, s15
 80072f4:	4419      	add	r1, r3
 80072f6:	f7fe bd2f 	b.w	8005d58 <_ZN16DiagnoseViewBaseC1Ev+0x390>
 80072fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007302:	ee17 3a10 	vmov	r3, s14
 8007306:	3b01      	subs	r3, #1
 8007308:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800730c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007318:	ee17 1a90 	vmov	r1, s15
 800731c:	4419      	add	r1, r3
 800731e:	f7fe bd81 	b.w	8005e24 <_ZN16DiagnoseViewBaseC1Ev+0x45c>
 8007322:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007326:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800732a:	ee17 3a10 	vmov	r3, s14
 800732e:	3b01      	subs	r3, #1
 8007330:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007334:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007340:	ee17 1a90 	vmov	r1, s15
 8007344:	4419      	add	r1, r3
 8007346:	f7fe bd86 	b.w	8005e56 <_ZN16DiagnoseViewBaseC1Ev+0x48e>
 800734a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800734e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007352:	ee17 3a10 	vmov	r3, s14
 8007356:	3b01      	subs	r3, #1
 8007358:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800735c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007368:	ee17 1a90 	vmov	r1, s15
 800736c:	4419      	add	r1, r3
 800736e:	f7fe bd8b 	b.w	8005e88 <_ZN16DiagnoseViewBaseC1Ev+0x4c0>
 8007372:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007376:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800737a:	ee17 3a10 	vmov	r3, s14
 800737e:	3b01      	subs	r3, #1
 8007380:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007384:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007390:	ee17 1a90 	vmov	r1, s15
 8007394:	4419      	add	r1, r3
 8007396:	f7fe bd90 	b.w	8005eba <_ZN16DiagnoseViewBaseC1Ev+0x4f2>
 800739a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800739e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073a2:	ee17 3a10 	vmov	r3, s14
 80073a6:	3b01      	subs	r3, #1
 80073a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073ac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073b8:	ee17 1a90 	vmov	r1, s15
 80073bc:	4419      	add	r1, r3
 80073be:	f7fe bd95 	b.w	8005eec <_ZN16DiagnoseViewBaseC1Ev+0x524>
 80073c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073ca:	ee17 3a10 	vmov	r3, s14
 80073ce:	3b01      	subs	r3, #1
 80073d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073d4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073e0:	ee17 1a90 	vmov	r1, s15
 80073e4:	4419      	add	r1, r3
 80073e6:	f7fe bd9a 	b.w	8005f1e <_ZN16DiagnoseViewBaseC1Ev+0x556>
 80073ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073f2:	ee17 3a10 	vmov	r3, s14
 80073f6:	3b01      	subs	r3, #1
 80073f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073fc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007408:	ee17 1a90 	vmov	r1, s15
 800740c:	4419      	add	r1, r3
 800740e:	f7fe bd9f 	b.w	8005f50 <_ZN16DiagnoseViewBaseC1Ev+0x588>
 8007412:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007416:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800741a:	ee17 3a10 	vmov	r3, s14
 800741e:	3b01      	subs	r3, #1
 8007420:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007424:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007430:	ee17 1a90 	vmov	r1, s15
 8007434:	4419      	add	r1, r3
 8007436:	f7fe bda4 	b.w	8005f82 <_ZN16DiagnoseViewBaseC1Ev+0x5ba>
 800743a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800743e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007442:	ee17 3a10 	vmov	r3, s14
 8007446:	3b01      	subs	r3, #1
 8007448:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800744c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007458:	ee17 1a90 	vmov	r1, s15
 800745c:	4419      	add	r1, r3
 800745e:	f7fe bda9 	b.w	8005fb4 <_ZN16DiagnoseViewBaseC1Ev+0x5ec>
 8007462:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007466:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800746a:	ee17 3a10 	vmov	r3, s14
 800746e:	3b01      	subs	r3, #1
 8007470:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007474:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007480:	ee17 1a90 	vmov	r1, s15
 8007484:	4419      	add	r1, r3
 8007486:	f7fe bdae 	b.w	8005fe6 <_ZN16DiagnoseViewBaseC1Ev+0x61e>
 800748a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800748e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007492:	ee17 3a10 	vmov	r3, s14
 8007496:	3b01      	subs	r3, #1
 8007498:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800749c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074a8:	ee17 1a90 	vmov	r1, s15
 80074ac:	4419      	add	r1, r3
 80074ae:	f7fe bdb3 	b.w	8006018 <_ZN16DiagnoseViewBaseC1Ev+0x650>
 80074b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074ba:	ee17 3a10 	vmov	r3, s14
 80074be:	3b01      	subs	r3, #1
 80074c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074c4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074d0:	ee17 1a90 	vmov	r1, s15
 80074d4:	4419      	add	r1, r3
 80074d6:	f7fe bdb8 	b.w	800604a <_ZN16DiagnoseViewBaseC1Ev+0x682>
 80074da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074e2:	ee17 3a10 	vmov	r3, s14
 80074e6:	3b01      	subs	r3, #1
 80074e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074ec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f8:	ee17 1a90 	vmov	r1, s15
 80074fc:	4419      	add	r1, r3
 80074fe:	f7fe bdbd 	b.w	800607c <_ZN16DiagnoseViewBaseC1Ev+0x6b4>
 8007502:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007506:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800750a:	ee17 3a10 	vmov	r3, s14
 800750e:	3b01      	subs	r3, #1
 8007510:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007514:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007520:	ee17 1a90 	vmov	r1, s15
 8007524:	4419      	add	r1, r3
 8007526:	f7fe bdc2 	b.w	80060ae <_ZN16DiagnoseViewBaseC1Ev+0x6e6>
 800752a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800752e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007532:	ee17 3a10 	vmov	r3, s14
 8007536:	3b01      	subs	r3, #1
 8007538:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800753c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007548:	ee17 1a90 	vmov	r1, s15
 800754c:	4419      	add	r1, r3
 800754e:	f7fe bdc7 	b.w	80060e0 <_ZN16DiagnoseViewBaseC1Ev+0x718>
 8007552:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007556:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800755a:	ee17 3a10 	vmov	r3, s14
 800755e:	3b01      	subs	r3, #1
 8007560:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007564:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007570:	ee17 1a90 	vmov	r1, s15
 8007574:	4419      	add	r1, r3
 8007576:	f7fe bdcc 	b.w	8006112 <_ZN16DiagnoseViewBaseC1Ev+0x74a>
 800757a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800757e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007582:	ee17 3a10 	vmov	r3, s14
 8007586:	3b01      	subs	r3, #1
 8007588:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800758c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007598:	ee17 1a90 	vmov	r1, s15
 800759c:	4419      	add	r1, r3
 800759e:	f7fe bdd1 	b.w	8006144 <_ZN16DiagnoseViewBaseC1Ev+0x77c>
 80075a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075a6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075aa:	ee17 3a10 	vmov	r3, s14
 80075ae:	3b01      	subs	r3, #1
 80075b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075b4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075c0:	ee17 1a90 	vmov	r1, s15
 80075c4:	4419      	add	r1, r3
 80075c6:	f7fe bdd6 	b.w	8006176 <_ZN16DiagnoseViewBaseC1Ev+0x7ae>
 80075ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075d2:	ee17 3a10 	vmov	r3, s14
 80075d6:	3b01      	subs	r3, #1
 80075d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075dc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075e8:	ee17 1a90 	vmov	r1, s15
 80075ec:	4419      	add	r1, r3
 80075ee:	f7fe bddb 	b.w	80061a8 <_ZN16DiagnoseViewBaseC1Ev+0x7e0>
 80075f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075fa:	ee17 3a10 	vmov	r3, s14
 80075fe:	3b01      	subs	r3, #1
 8007600:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007604:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007610:	ee17 1a90 	vmov	r1, s15
 8007614:	4419      	add	r1, r3
 8007616:	f7fe bde0 	b.w	80061da <_ZN16DiagnoseViewBaseC1Ev+0x812>
 800761a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800761e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007622:	ee17 3a10 	vmov	r3, s14
 8007626:	3b01      	subs	r3, #1
 8007628:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800762c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007638:	ee17 1a90 	vmov	r1, s15
 800763c:	4419      	add	r1, r3
 800763e:	f7fe bde5 	b.w	800620c <_ZN16DiagnoseViewBaseC1Ev+0x844>
 8007642:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007646:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800764a:	ee17 3a10 	vmov	r3, s14
 800764e:	3b01      	subs	r3, #1
 8007650:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007654:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007660:	ee17 1a90 	vmov	r1, s15
 8007664:	4419      	add	r1, r3
 8007666:	f7fe bdea 	b.w	800623e <_ZN16DiagnoseViewBaseC1Ev+0x876>
 800766a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800766e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007672:	ee17 3a10 	vmov	r3, s14
 8007676:	3b01      	subs	r3, #1
 8007678:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800767c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007688:	ee17 1a90 	vmov	r1, s15
 800768c:	4419      	add	r1, r3
 800768e:	f7fe bdef 	b.w	8006270 <_ZN16DiagnoseViewBaseC1Ev+0x8a8>
 8007692:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007696:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800769a:	ee17 3a10 	vmov	r3, s14
 800769e:	3b01      	subs	r3, #1
 80076a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076a4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80076a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b0:	ee17 1a90 	vmov	r1, s15
 80076b4:	4419      	add	r1, r3
 80076b6:	f7fe bdf4 	b.w	80062a2 <_ZN16DiagnoseViewBaseC1Ev+0x8da>
 80076ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80076be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80076c2:	ee17 3a10 	vmov	r3, s14
 80076c6:	3b01      	subs	r3, #1
 80076c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076cc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80076d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076d8:	ee17 1a90 	vmov	r1, s15
 80076dc:	4419      	add	r1, r3
 80076de:	f7fe bdf9 	b.w	80062d4 <_ZN16DiagnoseViewBaseC1Ev+0x90c>
 80076e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80076e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80076ea:	ee17 3a10 	vmov	r3, s14
 80076ee:	3b01      	subs	r3, #1
 80076f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076f4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80076f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007700:	ee17 1a90 	vmov	r1, s15
 8007704:	4419      	add	r1, r3
 8007706:	f7fe bdfe 	b.w	8006306 <_ZN16DiagnoseViewBaseC1Ev+0x93e>
 800770a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800770e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007712:	ee17 3a10 	vmov	r3, s14
 8007716:	3b01      	subs	r3, #1
 8007718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800771c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007728:	ee17 1a90 	vmov	r1, s15
 800772c:	4419      	add	r1, r3
 800772e:	f7fe be03 	b.w	8006338 <_ZN16DiagnoseViewBaseC1Ev+0x970>
 8007732:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007736:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800773a:	ee17 3a10 	vmov	r3, s14
 800773e:	3b01      	subs	r3, #1
 8007740:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007744:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007750:	ee17 1a90 	vmov	r1, s15
 8007754:	4419      	add	r1, r3
 8007756:	f7fe be08 	b.w	800636a <_ZN16DiagnoseViewBaseC1Ev+0x9a2>
 800775a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800775e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007762:	ee17 3a10 	vmov	r3, s14
 8007766:	3b01      	subs	r3, #1
 8007768:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800776c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007778:	ee17 1a90 	vmov	r1, s15
 800777c:	4419      	add	r1, r3
 800777e:	f7fe be0d 	b.w	800639c <_ZN16DiagnoseViewBaseC1Ev+0x9d4>
 8007782:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007786:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800778a:	ee17 3a10 	vmov	r3, s14
 800778e:	3b01      	subs	r3, #1
 8007790:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007794:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077a0:	ee17 1a90 	vmov	r1, s15
 80077a4:	4419      	add	r1, r3
 80077a6:	f7fe be12 	b.w	80063ce <_ZN16DiagnoseViewBaseC1Ev+0xa06>
 80077aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80077ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80077b2:	ee17 3a10 	vmov	r3, s14
 80077b6:	3b01      	subs	r3, #1
 80077b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077bc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80077c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077c8:	ee17 1a90 	vmov	r1, s15
 80077cc:	4419      	add	r1, r3
 80077ce:	f7fe be17 	b.w	8006400 <_ZN16DiagnoseViewBaseC1Ev+0xa38>
 80077d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80077d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80077da:	ee17 3a10 	vmov	r3, s14
 80077de:	3b01      	subs	r3, #1
 80077e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077e4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80077e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077f0:	ee17 1a90 	vmov	r1, s15
 80077f4:	4419      	add	r1, r3
 80077f6:	f7fe be1c 	b.w	8006432 <_ZN16DiagnoseViewBaseC1Ev+0xa6a>
 80077fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80077fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007802:	ee17 3a10 	vmov	r3, s14
 8007806:	3b01      	subs	r3, #1
 8007808:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800780c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007818:	ee17 1a90 	vmov	r1, s15
 800781c:	4419      	add	r1, r3
 800781e:	f7fe be21 	b.w	8006464 <_ZN16DiagnoseViewBaseC1Ev+0xa9c>
 8007822:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007826:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800782a:	ee17 3a10 	vmov	r3, s14
 800782e:	3b01      	subs	r3, #1
 8007830:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007834:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007840:	ee17 1a90 	vmov	r1, s15
 8007844:	4419      	add	r1, r3
 8007846:	f7fe be26 	b.w	8006496 <_ZN16DiagnoseViewBaseC1Ev+0xace>
 800784a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800784e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007852:	ee17 3a10 	vmov	r3, s14
 8007856:	3b01      	subs	r3, #1
 8007858:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800785c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007868:	ee17 1a90 	vmov	r1, s15
 800786c:	4419      	add	r1, r3
 800786e:	f7fe be2b 	b.w	80064c8 <_ZN16DiagnoseViewBaseC1Ev+0xb00>
 8007872:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007876:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800787a:	ee17 3a10 	vmov	r3, s14
 800787e:	3b01      	subs	r3, #1
 8007880:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007884:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007890:	ee17 1a90 	vmov	r1, s15
 8007894:	4419      	add	r1, r3
 8007896:	f7fe be30 	b.w	80064fa <_ZN16DiagnoseViewBaseC1Ev+0xb32>
 800789a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800789e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80078a2:	ee17 3a10 	vmov	r3, s14
 80078a6:	3b01      	subs	r3, #1
 80078a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80078ac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80078b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078b8:	ee17 1a90 	vmov	r1, s15
 80078bc:	4419      	add	r1, r3
 80078be:	f7fe be35 	b.w	800652c <_ZN16DiagnoseViewBaseC1Ev+0xb64>
 80078c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80078ca:	ee17 3a10 	vmov	r3, s14
 80078ce:	3b01      	subs	r3, #1
 80078d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80078d4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80078d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078e0:	ee17 1a90 	vmov	r1, s15
 80078e4:	4419      	add	r1, r3
 80078e6:	f7fe be3a 	b.w	800655e <_ZN16DiagnoseViewBaseC1Ev+0xb96>
 80078ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80078f2:	ee17 3a10 	vmov	r3, s14
 80078f6:	3b01      	subs	r3, #1
 80078f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80078fc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007908:	ee17 1a90 	vmov	r1, s15
 800790c:	4419      	add	r1, r3
 800790e:	f7fe be3f 	b.w	8006590 <_ZN16DiagnoseViewBaseC1Ev+0xbc8>
 8007912:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007916:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800791a:	ee17 3a10 	vmov	r3, s14
 800791e:	3b01      	subs	r3, #1
 8007920:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007924:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007930:	ee17 1a90 	vmov	r1, s15
 8007934:	4419      	add	r1, r3
 8007936:	f7fe be93 	b.w	8006660 <_ZN16DiagnoseViewBaseC1Ev+0xc98>
 800793a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800793e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007942:	ee17 3a10 	vmov	r3, s14
 8007946:	3b01      	subs	r3, #1
 8007948:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800794c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007958:	ee17 1a90 	vmov	r1, s15
 800795c:	4419      	add	r1, r3
 800795e:	f7fe be98 	b.w	8006692 <_ZN16DiagnoseViewBaseC1Ev+0xcca>
 8007962:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007966:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800796a:	ee17 3a10 	vmov	r3, s14
 800796e:	3b01      	subs	r3, #1
 8007970:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007974:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007980:	ee17 1a90 	vmov	r1, s15
 8007984:	4419      	add	r1, r3
 8007986:	f7fe be9d 	b.w	80066c4 <_ZN16DiagnoseViewBaseC1Ev+0xcfc>
 800798a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800798e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007992:	ee17 3a10 	vmov	r3, s14
 8007996:	3b01      	subs	r3, #1
 8007998:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800799c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80079a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079a8:	ee17 1a90 	vmov	r1, s15
 80079ac:	4419      	add	r1, r3
 80079ae:	f7fe bea2 	b.w	80066f6 <_ZN16DiagnoseViewBaseC1Ev+0xd2e>
 80079b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80079b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80079ba:	ee17 3a10 	vmov	r3, s14
 80079be:	3b01      	subs	r3, #1
 80079c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079c4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80079c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079d0:	ee17 1a90 	vmov	r1, s15
 80079d4:	4419      	add	r1, r3
 80079d6:	f7fe bea7 	b.w	8006728 <_ZN16DiagnoseViewBaseC1Ev+0xd60>
 80079da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80079de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80079e2:	ee17 3a10 	vmov	r3, s14
 80079e6:	3b01      	subs	r3, #1
 80079e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079ec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80079f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079f8:	ee17 1a90 	vmov	r1, s15
 80079fc:	4419      	add	r1, r3
 80079fe:	f7fe beac 	b.w	800675a <_ZN16DiagnoseViewBaseC1Ev+0xd92>
 8007a02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007a0a:	ee17 3a10 	vmov	r3, s14
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a14:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a20:	ee17 1a90 	vmov	r1, s15
 8007a24:	4419      	add	r1, r3
 8007a26:	f7fe beb1 	b.w	800678c <_ZN16DiagnoseViewBaseC1Ev+0xdc4>
 8007a2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a2e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007a32:	ee17 3a10 	vmov	r3, s14
 8007a36:	3b01      	subs	r3, #1
 8007a38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a3c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a48:	ee17 1a90 	vmov	r1, s15
 8007a4c:	4419      	add	r1, r3
 8007a4e:	f7fe beb6 	b.w	80067be <_ZN16DiagnoseViewBaseC1Ev+0xdf6>
 8007a52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007a5a:	ee17 3a10 	vmov	r3, s14
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a64:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a70:	ee17 1a90 	vmov	r1, s15
 8007a74:	4419      	add	r1, r3
 8007a76:	f7fe bebb 	b.w	80067f0 <_ZN16DiagnoseViewBaseC1Ev+0xe28>
 8007a7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007a82:	ee17 3a10 	vmov	r3, s14
 8007a86:	3b01      	subs	r3, #1
 8007a88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a8c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a98:	ee17 1a90 	vmov	r1, s15
 8007a9c:	4419      	add	r1, r3
 8007a9e:	f7fe bec0 	b.w	8006822 <_ZN16DiagnoseViewBaseC1Ev+0xe5a>
 8007aa2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007aa6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007aaa:	ee17 3a10 	vmov	r3, s14
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ab4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ac0:	ee17 1a90 	vmov	r1, s15
 8007ac4:	4419      	add	r1, r3
 8007ac6:	f7fe bec5 	b.w	8006854 <_ZN16DiagnoseViewBaseC1Ev+0xe8c>
 8007aca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007ace:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007ad2:	ee17 3a10 	vmov	r3, s14
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007adc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ae8:	ee17 1a90 	vmov	r1, s15
 8007aec:	4419      	add	r1, r3
 8007aee:	f7fe beca 	b.w	8006886 <_ZN16DiagnoseViewBaseC1Ev+0xebe>
 8007af2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007af6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007afa:	ee17 3a10 	vmov	r3, s14
 8007afe:	3b01      	subs	r3, #1
 8007b00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b04:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b10:	ee17 1a90 	vmov	r1, s15
 8007b14:	4419      	add	r1, r3
 8007b16:	f7fe becf 	b.w	80068b8 <_ZN16DiagnoseViewBaseC1Ev+0xef0>
 8007b1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b1e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007b22:	ee17 3a10 	vmov	r3, s14
 8007b26:	3b01      	subs	r3, #1
 8007b28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b2c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007b30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b38:	ee17 1a90 	vmov	r1, s15
 8007b3c:	4419      	add	r1, r3
 8007b3e:	f7fe bed4 	b.w	80068ea <_ZN16DiagnoseViewBaseC1Ev+0xf22>
 8007b42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b46:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007b4a:	ee17 3a10 	vmov	r3, s14
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b54:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b60:	ee17 1a90 	vmov	r1, s15
 8007b64:	4419      	add	r1, r3
 8007b66:	f7fe bed9 	b.w	800691c <_ZN16DiagnoseViewBaseC1Ev+0xf54>
 8007b6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b6e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007b72:	ee17 3a10 	vmov	r3, s14
 8007b76:	3b01      	subs	r3, #1
 8007b78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b7c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b88:	ee17 1a90 	vmov	r1, s15
 8007b8c:	4419      	add	r1, r3
 8007b8e:	f7fe bede 	b.w	800694e <_ZN16DiagnoseViewBaseC1Ev+0xf86>
 8007b92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b96:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007b9a:	ee17 3a10 	vmov	r3, s14
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ba4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bb0:	ee17 1a90 	vmov	r1, s15
 8007bb4:	4419      	add	r1, r3
 8007bb6:	f7fe bee3 	b.w	8006980 <_ZN16DiagnoseViewBaseC1Ev+0xfb8>
 8007bba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007bbe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007bc2:	ee17 3a10 	vmov	r3, s14
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007bcc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bd8:	ee17 1a90 	vmov	r1, s15
 8007bdc:	4419      	add	r1, r3
 8007bde:	f7fe bee8 	b.w	80069b2 <_ZN16DiagnoseViewBaseC1Ev+0xfea>
 8007be2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007be6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007bea:	ee17 3a10 	vmov	r3, s14
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007bf4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c00:	ee17 1a90 	vmov	r1, s15
 8007c04:	4419      	add	r1, r3
 8007c06:	f7fe beed 	b.w	80069e4 <_ZN16DiagnoseViewBaseC1Ev+0x101c>
 8007c0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007c0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007c12:	ee17 3a10 	vmov	r3, s14
 8007c16:	3b01      	subs	r3, #1
 8007c18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c1c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c28:	ee17 1a90 	vmov	r1, s15
 8007c2c:	4419      	add	r1, r3
 8007c2e:	f7fe bef2 	b.w	8006a16 <_ZN16DiagnoseViewBaseC1Ev+0x104e>
 8007c32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007c36:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007c3a:	ee17 3a10 	vmov	r3, s14
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c44:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c50:	ee17 1a90 	vmov	r1, s15
 8007c54:	4419      	add	r1, r3
 8007c56:	f7fe bef7 	b.w	8006a48 <_ZN16DiagnoseViewBaseC1Ev+0x1080>
 8007c5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007c5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007c62:	ee17 3a10 	vmov	r3, s14
 8007c66:	3b01      	subs	r3, #1
 8007c68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c6c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c78:	ee17 1a90 	vmov	r1, s15
 8007c7c:	4419      	add	r1, r3
 8007c7e:	f7fe befc 	b.w	8006a7a <_ZN16DiagnoseViewBaseC1Ev+0x10b2>
 8007c82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007c86:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007c8a:	ee17 3a10 	vmov	r3, s14
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c94:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ca0:	ee17 1a90 	vmov	r1, s15
 8007ca4:	4419      	add	r1, r3
 8007ca6:	f7fe bf01 	b.w	8006aac <_ZN16DiagnoseViewBaseC1Ev+0x10e4>
 8007caa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007cae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007cb2:	ee17 3a10 	vmov	r3, s14
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007cbc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cc8:	ee17 1a90 	vmov	r1, s15
 8007ccc:	4419      	add	r1, r3
 8007cce:	f7fe bf06 	b.w	8006ade <_ZN16DiagnoseViewBaseC1Ev+0x1116>
 8007cd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007cd6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007cda:	ee17 3a10 	vmov	r3, s14
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ce4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cf0:	ee17 1a90 	vmov	r1, s15
 8007cf4:	4419      	add	r1, r3
 8007cf6:	f7fe bf0b 	b.w	8006b10 <_ZN16DiagnoseViewBaseC1Ev+0x1148>
 8007cfa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007cfe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007d02:	ee17 3a10 	vmov	r3, s14
 8007d06:	3b01      	subs	r3, #1
 8007d08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d0c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d18:	ee17 1a90 	vmov	r1, s15
 8007d1c:	4419      	add	r1, r3
 8007d1e:	f7fe bf10 	b.w	8006b42 <_ZN16DiagnoseViewBaseC1Ev+0x117a>
 8007d22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d26:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007d2a:	ee17 3a10 	vmov	r3, s14
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d34:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d40:	ee17 1a90 	vmov	r1, s15
 8007d44:	4419      	add	r1, r3
 8007d46:	f7fe bf15 	b.w	8006b74 <_ZN16DiagnoseViewBaseC1Ev+0x11ac>
 8007d4a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d4e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007d52:	ee17 3a10 	vmov	r3, s14
 8007d56:	3b01      	subs	r3, #1
 8007d58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d5c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d68:	ee17 1a90 	vmov	r1, s15
 8007d6c:	4419      	add	r1, r3
 8007d6e:	f7fe bf1a 	b.w	8006ba6 <_ZN16DiagnoseViewBaseC1Ev+0x11de>
 8007d72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d76:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007d7a:	ee17 3a10 	vmov	r3, s14
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d84:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d90:	ee17 1a90 	vmov	r1, s15
 8007d94:	4419      	add	r1, r3
 8007d96:	f7fe bf1f 	b.w	8006bd8 <_ZN16DiagnoseViewBaseC1Ev+0x1210>
 8007d9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d9e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007da2:	ee17 3a10 	vmov	r3, s14
 8007da6:	3b01      	subs	r3, #1
 8007da8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007dac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db8:	ee17 1a90 	vmov	r1, s15
 8007dbc:	4419      	add	r1, r3
 8007dbe:	f7fe bf24 	b.w	8006c0a <_ZN16DiagnoseViewBaseC1Ev+0x1242>
 8007dc2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007dc6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007dca:	ee17 3a10 	vmov	r3, s14
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007dd4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007de0:	ee17 1a90 	vmov	r1, s15
 8007de4:	4419      	add	r1, r3
 8007de6:	f7fe bf29 	b.w	8006c3c <_ZN16DiagnoseViewBaseC1Ev+0x1274>
 8007dea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007dee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007df2:	ee17 3a10 	vmov	r3, s14
 8007df6:	3b01      	subs	r3, #1
 8007df8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007dfc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e08:	ee17 1a90 	vmov	r1, s15
 8007e0c:	4419      	add	r1, r3
 8007e0e:	f7fe bf2e 	b.w	8006c6e <_ZN16DiagnoseViewBaseC1Ev+0x12a6>
 8007e12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007e1a:	ee17 3a10 	vmov	r3, s14
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e24:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e30:	ee17 1a90 	vmov	r1, s15
 8007e34:	4419      	add	r1, r3
 8007e36:	f7fe bf33 	b.w	8006ca0 <_ZN16DiagnoseViewBaseC1Ev+0x12d8>
 8007e3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e3e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007e42:	ee17 3a10 	vmov	r3, s14
 8007e46:	3b01      	subs	r3, #1
 8007e48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e4c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e58:	ee17 1a90 	vmov	r1, s15
 8007e5c:	4419      	add	r1, r3
 8007e5e:	f7fe bf38 	b.w	8006cd2 <_ZN16DiagnoseViewBaseC1Ev+0x130a>
 8007e62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007e6a:	ee17 3a10 	vmov	r3, s14
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e74:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e80:	ee17 1a90 	vmov	r1, s15
 8007e84:	4419      	add	r1, r3
 8007e86:	f7fe bf3d 	b.w	8006d04 <_ZN16DiagnoseViewBaseC1Ev+0x133c>
 8007e8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e8e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007e92:	ee17 3a10 	vmov	r3, s14
 8007e96:	3b01      	subs	r3, #1
 8007e98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e9c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ea8:	ee17 1a90 	vmov	r1, s15
 8007eac:	4419      	add	r1, r3
 8007eae:	f7fe bf42 	b.w	8006d36 <_ZN16DiagnoseViewBaseC1Ev+0x136e>
 8007eb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007eb6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007eba:	ee17 3a10 	vmov	r3, s14
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ec4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ed0:	ee17 1a90 	vmov	r1, s15
 8007ed4:	4419      	add	r1, r3
 8007ed6:	f7fe bf47 	b.w	8006d68 <_ZN16DiagnoseViewBaseC1Ev+0x13a0>
 8007eda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007ede:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007ee2:	ee17 3a10 	vmov	r3, s14
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007eec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ef8:	ee17 1a90 	vmov	r1, s15
 8007efc:	4419      	add	r1, r3
 8007efe:	f7fe bf4c 	b.w	8006d9a <_ZN16DiagnoseViewBaseC1Ev+0x13d2>
 8007f02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f0a:	ee17 3a10 	vmov	r3, s14
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f14:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f20:	ee17 1a90 	vmov	r1, s15
 8007f24:	4419      	add	r1, r3
 8007f26:	f7fe bf51 	b.w	8006dcc <_ZN16DiagnoseViewBaseC1Ev+0x1404>
 8007f2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f2e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f32:	ee17 3a10 	vmov	r3, s14
 8007f36:	3b01      	subs	r3, #1
 8007f38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f3c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f48:	ee17 1a90 	vmov	r1, s15
 8007f4c:	4419      	add	r1, r3
 8007f4e:	f7fe bfa1 	b.w	8006e94 <_ZN16DiagnoseViewBaseC1Ev+0x14cc>
 8007f52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f5a:	ee17 3a10 	vmov	r3, s14
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f64:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f70:	ee17 1a90 	vmov	r1, s15
 8007f74:	4419      	add	r1, r3
 8007f76:	f7fe bfa6 	b.w	8006ec6 <_ZN16DiagnoseViewBaseC1Ev+0x14fe>
 8007f7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f82:	ee17 3a10 	vmov	r3, s14
 8007f86:	3b01      	subs	r3, #1
 8007f88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f8c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f98:	ee17 1a90 	vmov	r1, s15
 8007f9c:	4419      	add	r1, r3
 8007f9e:	f7fe bfab 	b.w	8006ef8 <_ZN16DiagnoseViewBaseC1Ev+0x1530>
 8007fa2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fa6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007faa:	ee17 3a10 	vmov	r3, s14
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fb4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fc0:	ee17 1a90 	vmov	r1, s15
 8007fc4:	4419      	add	r1, r3
 8007fc6:	f7fe bfb0 	b.w	8006f2a <_ZN16DiagnoseViewBaseC1Ev+0x1562>
 8007fca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007fd2:	ee17 3a10 	vmov	r3, s14
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fdc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fe8:	ee17 1a90 	vmov	r1, s15
 8007fec:	4419      	add	r1, r3
 8007fee:	f7fe bfb5 	b.w	8006f5c <_ZN16DiagnoseViewBaseC1Ev+0x1594>
 8007ff2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007ff6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007ffa:	ee17 3a10 	vmov	r3, s14
 8007ffe:	3b01      	subs	r3, #1
 8008000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008004:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008010:	ee17 1a90 	vmov	r1, s15
 8008014:	4419      	add	r1, r3
 8008016:	f7fe bfba 	b.w	8006f8e <_ZN16DiagnoseViewBaseC1Ev+0x15c6>
 800801a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800801e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008022:	ee17 3a10 	vmov	r3, s14
 8008026:	3b01      	subs	r3, #1
 8008028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800802c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008038:	ee17 1a90 	vmov	r1, s15
 800803c:	4419      	add	r1, r3
 800803e:	f7fe bfbf 	b.w	8006fc0 <_ZN16DiagnoseViewBaseC1Ev+0x15f8>
 8008042:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008046:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800804a:	ee17 3a10 	vmov	r3, s14
 800804e:	3b01      	subs	r3, #1
 8008050:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008054:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008060:	ee17 1a90 	vmov	r1, s15
 8008064:	4419      	add	r1, r3
 8008066:	f7fe bfc4 	b.w	8006ff2 <_ZN16DiagnoseViewBaseC1Ev+0x162a>
 800806a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800806e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008072:	ee17 3a10 	vmov	r3, s14
 8008076:	3b01      	subs	r3, #1
 8008078:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800807c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008088:	ee17 1a90 	vmov	r1, s15
 800808c:	4419      	add	r1, r3
 800808e:	f7fe bfc9 	b.w	8007024 <_ZN16DiagnoseViewBaseC1Ev+0x165c>
 8008092:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008096:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800809a:	ee17 3a10 	vmov	r3, s14
 800809e:	3b01      	subs	r3, #1
 80080a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080a4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80080a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080b0:	ee17 1a90 	vmov	r1, s15
 80080b4:	4419      	add	r1, r3
 80080b6:	f7fe bfce 	b.w	8007056 <_ZN16DiagnoseViewBaseC1Ev+0x168e>
 80080ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80080c2:	ee17 3a10 	vmov	r3, s14
 80080c6:	3b01      	subs	r3, #1
 80080c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080cc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80080d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080d8:	ee17 1a90 	vmov	r1, s15
 80080dc:	4419      	add	r1, r3
 80080de:	f7fe bfd3 	b.w	8007088 <_ZN16DiagnoseViewBaseC1Ev+0x16c0>
 80080e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80080ea:	ee17 3a10 	vmov	r3, s14
 80080ee:	3b01      	subs	r3, #1
 80080f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080f4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80080f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008100:	ee17 1a90 	vmov	r1, s15
 8008104:	4419      	add	r1, r3
 8008106:	f7fe bfd8 	b.w	80070ba <_ZN16DiagnoseViewBaseC1Ev+0x16f2>
 800810a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800810e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008112:	ee17 3a10 	vmov	r3, s14
 8008116:	3b01      	subs	r3, #1
 8008118:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800811c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008128:	ee17 1a90 	vmov	r1, s15
 800812c:	4419      	add	r1, r3
 800812e:	f7fe bfdd 	b.w	80070ec <_ZN16DiagnoseViewBaseC1Ev+0x1724>
 8008132:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008136:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800813a:	ee17 3a10 	vmov	r3, s14
 800813e:	3b01      	subs	r3, #1
 8008140:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008144:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008150:	ee17 1a90 	vmov	r1, s15
 8008154:	4419      	add	r1, r3
 8008156:	f7fe bfe2 	b.w	800711e <_ZN16DiagnoseViewBaseC1Ev+0x1756>
 800815a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800815e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008162:	ee17 3a10 	vmov	r3, s14
 8008166:	3b01      	subs	r3, #1
 8008168:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800816c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008178:	ee17 1a90 	vmov	r1, s15
 800817c:	4419      	add	r1, r3
 800817e:	f7fe bfe7 	b.w	8007150 <_ZN16DiagnoseViewBaseC1Ev+0x1788>
 8008182:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008186:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800818a:	ee17 3a10 	vmov	r3, s14
 800818e:	3b01      	subs	r3, #1
 8008190:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008194:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081a0:	ee17 1a90 	vmov	r1, s15
 80081a4:	4419      	add	r1, r3
 80081a6:	f7fe bfec 	b.w	8007182 <_ZN16DiagnoseViewBaseC1Ev+0x17ba>
 80081aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081b2:	ee17 3a10 	vmov	r3, s14
 80081b6:	3b01      	subs	r3, #1
 80081b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081bc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80081c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081c8:	ee17 1a90 	vmov	r1, s15
 80081cc:	4419      	add	r1, r3
 80081ce:	f7fe bff1 	b.w	80071b4 <_ZN16DiagnoseViewBaseC1Ev+0x17ec>
 80081d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081da:	ee17 3a10 	vmov	r3, s14
 80081de:	3b01      	subs	r3, #1
 80081e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081e4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80081e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081f0:	ee17 1a90 	vmov	r1, s15
 80081f4:	4419      	add	r1, r3
 80081f6:	f7fe bff6 	b.w	80071e6 <_ZN16DiagnoseViewBaseC1Ev+0x181e>
 80081fa:	bf00      	nop

080081fc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80081fc:	4770      	bx	lr

080081fe <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80081fe:	4770      	bx	lr

08008200 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8008200:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8008204:	6808      	ldr	r0, [r1, #0]
 8008206:	6849      	ldr	r1, [r1, #4]
 8008208:	c303      	stmia	r3!, {r0, r1}
    }
 800820a:	4770      	bx	lr

0800820c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800820c:	4770      	bx	lr

0800820e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800820e:	4770      	bx	lr

08008210 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8008210:	6041      	str	r1, [r0, #4]
    }
 8008212:	4770      	bx	lr

08008214 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8008214:	4770      	bx	lr
	...

08008218 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008218:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800821a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800821e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8008222:	2300      	movs	r3, #0
 8008224:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// MainScreen

void FrontendApplicationBase::gotoMainScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8008228:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800822c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoMainScreenScreenNoTransition();
    }
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	08008655 	.word	0x08008655

08008238 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8008238:	2301      	movs	r3, #1
 800823a:	7203      	strb	r3, [r0, #8]
    }
 800823c:	4770      	bx	lr

0800823e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800823e:	4770      	bx	lr

08008240 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8008240:	4770      	bx	lr

08008242 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8008242:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8008244:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8008246:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8008248:	68c2      	ldr	r2, [r0, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	1054      	asrs	r4, r2, #1
 800824e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8008252:	07d2      	lsls	r2, r2, #31
 8008254:	bf48      	it	mi
 8008256:	590a      	ldrmi	r2, [r1, r4]
    }
 8008258:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800825c:	bf48      	it	mi
 800825e:	58d3      	ldrmi	r3, [r2, r3]
 8008260:	4718      	bx	r3

08008262 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8008262:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8008264:	6840      	ldr	r0, [r0, #4]
 8008266:	b130      	cbz	r0, 8008276 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	b91a      	cbnz	r2, 8008274 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800826c:	68d8      	ldr	r0, [r3, #12]
 800826e:	f000 0001 	and.w	r0, r0, #1
 8008272:	4770      	bx	lr
 8008274:	2001      	movs	r0, #1
    }
 8008276:	4770      	bx	lr

08008278 <_ZN8touchgfx12NoTransitionD0Ev>:
 8008278:	b510      	push	{r4, lr}
 800827a:	4604      	mov	r4, r0
 800827c:	210c      	movs	r1, #12
 800827e:	f021 fb7b 	bl	8029978 <_ZdlPvj>
 8008282:	4620      	mov	r0, r4
 8008284:	bd10      	pop	{r4, pc}

08008286 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008286:	b510      	push	{r4, lr}
 8008288:	4604      	mov	r4, r0
 800828a:	2110      	movs	r1, #16
 800828c:	f021 fb74 	bl	8029978 <_ZdlPvj>
 8008290:	4620      	mov	r0, r4
 8008292:	bd10      	pop	{r4, pc}

08008294 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8008294:	b510      	push	{r4, lr}
 8008296:	4604      	mov	r4, r0
 8008298:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800829c:	f021 fb6c 	bl	8029978 <_ZdlPvj>
 80082a0:	4620      	mov	r0, r4
 80082a2:	bd10      	pop	{r4, pc}

080082a4 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80082a4:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80082a6:	f012 ff23 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 80082aa:	6803      	ldr	r3, [r0, #0]
    }
 80082ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80082b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b2:	4718      	bx	r3

080082b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80082b4:	b510      	push	{r4, lr}
 80082b6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80082b8:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80082bc:	b158      	cbz	r0, 80082d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80082be:	6803      	ldr	r3, [r0, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	4798      	blx	r3
 80082c4:	b138      	cbz	r0, 80082d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80082c6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80082ca:	6803      	ldr	r3, [r0, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 80082d6:	bd10      	pop	{r4, pc}

080082d8 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80082d8:	4b04      	ldr	r3, [pc, #16]	@ (80082ec <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80082e0:	b10a      	cbz	r2, 80082e6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80082e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80082e4:	b900      	cbnz	r0, 80082e8 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80082e6:	6898      	ldr	r0, [r3, #8]
    }
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	24028770 	.word	0x24028770

080082f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	4617      	mov	r7, r2
 80082f4:	4604      	mov	r4, r0
 80082f6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80082f8:	f013 f80a 	bl	801b310 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80082fc:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 80082fe:	2500      	movs	r5, #0
        instance = this;
 8008300:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8008302:	4629      	mov	r1, r5
      model(m)
 8008304:	4b11      	ldr	r3, [pc, #68]	@ (800834c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8008306:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8008308:	4b11      	ldr	r3, [pc, #68]	@ (8008350 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800830a:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 800830e:	4b11      	ldr	r3, [pc, #68]	@ (8008354 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8008316:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8008318:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 800831c:	689b      	ldr	r3, [r3, #8]
      model(m)
 800831e:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8008322:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8008324:	4628      	mov	r0, r5
 8008326:	f000 febd 	bl	80090a4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800832a:	f7ff ffd5 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 800832e:	f01b fc98 	bl	8023c62 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8008332:	f7ff ffd1 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 8008336:	f01b fd0b 	bl	8023d50 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800833a:	f7ff ffcd 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 800833e:	f01b fd13 	bl	8023d68 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8008342:	4620      	mov	r0, r4
 8008344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008346:	bf00      	nop
 8008348:	240287c4 	.word	0x240287c4
 800834c:	0802f6b0 	.word	0x0802f6b0
 8008350:	0802f698 	.word	0x0802f698
 8008354:	24028770 	.word	0x24028770

08008358 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008358:	4b06      	ldr	r3, [pc, #24]	@ (8008374 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv+0x1c>)
 800835a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800835e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8008362:	2300      	movs	r3, #0
 8008364:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8008368:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800836c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	08008655 	.word	0x08008655

08008378 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv>:
 8008378:	4b06      	ldr	r3, [pc, #24]	@ (8008394 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv+0x1c>)
 800837a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800837e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8008382:	2300      	movs	r3, #0
 8008384:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Diagnose

void FrontendApplicationBase::gotoDiagnoseScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoDiagnoseScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8008388:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800838c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	08008509 	.word	0x08008509

08008398 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv>:
 8008398:	4b06      	ldr	r3, [pc, #24]	@ (80083b4 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv+0x1c>)
 800839a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800839e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80083a2:	2300      	movs	r3, #0
 80083a4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Calculator

void FrontendApplicationBase::gotoCalculatorScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCalculatorScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80083a8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80083ac:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	080083c1 	.word	0x080083c1

080083b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80083b8:	6803      	ldr	r3, [r0, #0]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083bc:	4718      	bx	r3
	...

080083c0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoCalculatorScreenNoTransitionImpl()
{
 80083c0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<CalculatorView, CalculatorPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80083c4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80083c8:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80083ca:	68b0      	ldr	r0, [r6, #8]
 80083cc:	6803      	ldr	r3, [r0, #0]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	4798      	blx	r3
 80083d2:	f5b0 6fde 	cmp.w	r0, #1776	@ 0x6f0
 80083d6:	d205      	bcs.n	80083e4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x24>
 80083d8:	4b43      	ldr	r3, [pc, #268]	@ (80084e8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x128>)
 80083da:	21a3      	movs	r1, #163	@ 0xa3
 80083dc:	4a43      	ldr	r2, [pc, #268]	@ (80084ec <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80083de:	4844      	ldr	r0, [pc, #272]	@ (80084f0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
 80083e0:	f021 ff1e 	bl	802a220 <__assert_func>
 80083e4:	6870      	ldr	r0, [r6, #4]
 80083e6:	6803      	ldr	r3, [r0, #0]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	4798      	blx	r3
 80083ec:	280f      	cmp	r0, #15
 80083ee:	d803      	bhi.n	80083f8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x38>
 80083f0:	4b40      	ldr	r3, [pc, #256]	@ (80084f4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x134>)
 80083f2:	21a4      	movs	r1, #164	@ 0xa4
 80083f4:	4a3d      	ldr	r2, [pc, #244]	@ (80084ec <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x12c>)
 80083f6:	e7f2      	b.n	80083de <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80083f8:	68f0      	ldr	r0, [r6, #12]
 80083fa:	6803      	ldr	r3, [r0, #0]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	4798      	blx	r3
 8008400:	280b      	cmp	r0, #11
 8008402:	d803      	bhi.n	800840c <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x4c>
 8008404:	4b3c      	ldr	r3, [pc, #240]	@ (80084f8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x138>)
 8008406:	21a5      	movs	r1, #165	@ 0xa5
 8008408:	4a38      	ldr	r2, [pc, #224]	@ (80084ec <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x12c>)
 800840a:	e7e8      	b.n	80083de <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 800840c:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8008500 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8008410:	f012 fe6e 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8008414:	3004      	adds	r0, #4
 8008416:	f012 fea9 	bl	801b16c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800841a:	f8d9 0000 	ldr.w	r0, [r9]
 800841e:	b110      	cbz	r0, 8008426 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8008420:	6803      	ldr	r3, [r0, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	4798      	blx	r3
    if (*currentTrans)
 8008426:	f8d9 0000 	ldr.w	r0, [r9]
 800842a:	b110      	cbz	r0, 8008432 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 800842c:	6803      	ldr	r3, [r0, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4798      	blx	r3
    if (*currentScreen)
 8008432:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8008504 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x144>
 8008436:	f8d8 0000 	ldr.w	r0, [r8]
 800843a:	b110      	cbz	r0, 8008442 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 800843c:	6803      	ldr	r3, [r0, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	4798      	blx	r3
    if (*currentPresenter)
 8008442:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8008446:	b110      	cbz	r0, 800844e <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8008448:	6803      	ldr	r3, [r0, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	4798      	blx	r3
    if (*currentScreen)
 800844e:	f8d8 0000 	ldr.w	r0, [r8]
 8008452:	b110      	cbz	r0, 800845a <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8008454:	6803      	ldr	r3, [r0, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4798      	blx	r3
    if (*currentPresenter)
 800845a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800845e:	b110      	cbz	r0, 8008466 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8008460:	6803      	ldr	r3, [r0, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008466:	2100      	movs	r1, #0
 8008468:	68f0      	ldr	r0, [r6, #12]
 800846a:	f7ff ffa5 	bl	80083b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 800846e:	f04f 0b00 	mov.w	fp, #0
 8008472:	4b22      	ldr	r3, [pc, #136]	@ (80084fc <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x13c>)
 8008474:	4604      	mov	r4, r0
 8008476:	f8c0 b004 	str.w	fp, [r0, #4]
 800847a:	4659      	mov	r1, fp
 800847c:	f880 b008 	strb.w	fp, [r0, #8]
 8008480:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008482:	68b0      	ldr	r0, [r6, #8]
 8008484:	6803      	ldr	r3, [r0, #0]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	4798      	blx	r3
 800848a:	4605      	mov	r5, r0
 800848c:	f000 feea 	bl	8009264 <_ZN14CalculatorViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008490:	6870      	ldr	r0, [r6, #4]
 8008492:	4659      	mov	r1, fp
 8008494:	6803      	ldr	r3, [r0, #0]
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	4798      	blx	r3
 800849a:	4606      	mov	r6, r0
 800849c:	4629      	mov	r1, r5
 800849e:	f000 fe8f 	bl	80091c0 <_ZN19CalculatorPresenterC1ER14CalculatorView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 80084a2:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80084a4:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80084a8:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80084aa:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80084ae:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80084b2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80084b6:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80084b8:	f8c6 a008 	str.w	sl, [r6, #8]
 80084bc:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80084be:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80084c0:	4798      	blx	r3
    newPresenter->activate();
 80084c2:	6833      	ldr	r3, [r6, #0]
 80084c4:	4630      	mov	r0, r6
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80084ca:	4621      	mov	r1, r4
 80084cc:	4628      	mov	r0, r5
 80084ce:	f014 ff25 	bl	801d31c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	4620      	mov	r0, r4
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	4798      	blx	r3
    newTransition->invalidate();
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	4620      	mov	r0, r4
 80084de:	695b      	ldr	r3, [r3, #20]
}
 80084e0:	b001      	add	sp, #4
 80084e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e6:	4718      	bx	r3
 80084e8:	0802f1e0 	.word	0x0802f1e0
 80084ec:	0802f26e 	.word	0x0802f26e
 80084f0:	0802f346 	.word	0x0802f346
 80084f4:	0802f39b 	.word	0x0802f39b
 80084f8:	0802f43e 	.word	0x0802f43e
 80084fc:	0802f704 	.word	0x0802f704
 8008500:	240287b8 	.word	0x240287b8
 8008504:	240287b4 	.word	0x240287b4

08008508 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv>:
{
 8008508:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<DiagnoseView, DiagnosePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800850c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8008510:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8008512:	68b0      	ldr	r0, [r6, #8]
 8008514:	6803      	ldr	r3, [r0, #0]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	4798      	blx	r3
 800851a:	f243 437b 	movw	r3, #13435	@ 0x347b
 800851e:	4298      	cmp	r0, r3
 8008520:	d805      	bhi.n	800852e <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x26>
 8008522:	4b44      	ldr	r3, [pc, #272]	@ (8008634 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x12c>)
 8008524:	21a3      	movs	r1, #163	@ 0xa3
 8008526:	4a44      	ldr	r2, [pc, #272]	@ (8008638 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008528:	4844      	ldr	r0, [pc, #272]	@ (800863c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x134>)
 800852a:	f021 fe79 	bl	802a220 <__assert_func>
 800852e:	6870      	ldr	r0, [r6, #4]
 8008530:	6803      	ldr	r3, [r0, #0]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	4798      	blx	r3
 8008536:	280f      	cmp	r0, #15
 8008538:	d803      	bhi.n	8008542 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x3a>
 800853a:	4b41      	ldr	r3, [pc, #260]	@ (8008640 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x138>)
 800853c:	21a4      	movs	r1, #164	@ 0xa4
 800853e:	4a3e      	ldr	r2, [pc, #248]	@ (8008638 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
 8008540:	e7f2      	b.n	8008528 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008542:	68f0      	ldr	r0, [r6, #12]
 8008544:	6803      	ldr	r3, [r0, #0]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	4798      	blx	r3
 800854a:	280b      	cmp	r0, #11
 800854c:	d803      	bhi.n	8008556 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x4e>
 800854e:	4b3d      	ldr	r3, [pc, #244]	@ (8008644 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x13c>)
 8008550:	21a5      	movs	r1, #165	@ 0xa5
 8008552:	4a39      	ldr	r2, [pc, #228]	@ (8008638 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
 8008554:	e7e8      	b.n	8008528 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8008556:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 800864c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 800855a:	f012 fdc9 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 800855e:	3004      	adds	r0, #4
 8008560:	f012 fe04 	bl	801b16c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8008564:	f8d9 0000 	ldr.w	r0, [r9]
 8008568:	b110      	cbz	r0, 8008570 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 800856a:	6803      	ldr	r3, [r0, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	4798      	blx	r3
    if (*currentTrans)
 8008570:	f8d9 0000 	ldr.w	r0, [r9]
 8008574:	b110      	cbz	r0, 800857c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8008576:	6803      	ldr	r3, [r0, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4798      	blx	r3
    if (*currentScreen)
 800857c:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8008650 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x148>
 8008580:	f8d8 0000 	ldr.w	r0, [r8]
 8008584:	b110      	cbz	r0, 800858c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	4798      	blx	r3
    if (*currentPresenter)
 800858c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8008590:	b110      	cbz	r0, 8008598 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8008592:	6803      	ldr	r3, [r0, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4798      	blx	r3
    if (*currentScreen)
 8008598:	f8d8 0000 	ldr.w	r0, [r8]
 800859c:	b110      	cbz	r0, 80085a4 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 800859e:	6803      	ldr	r3, [r0, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4798      	blx	r3
    if (*currentPresenter)
 80085a4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80085a8:	b110      	cbz	r0, 80085b0 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80085aa:	6803      	ldr	r3, [r0, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80085b0:	2100      	movs	r1, #0
 80085b2:	68f0      	ldr	r0, [r6, #12]
 80085b4:	f7ff ff00 	bl	80083b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80085b8:	f04f 0b00 	mov.w	fp, #0
 80085bc:	4b22      	ldr	r3, [pc, #136]	@ (8008648 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x140>)
 80085be:	4604      	mov	r4, r0
 80085c0:	f8c0 b004 	str.w	fp, [r0, #4]
 80085c4:	4659      	mov	r1, fp
 80085c6:	f880 b008 	strb.w	fp, [r0, #8]
 80085ca:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80085cc:	68b0      	ldr	r0, [r6, #8]
 80085ce:	6803      	ldr	r3, [r0, #0]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d2:	4798      	blx	r3
 80085d4:	4605      	mov	r5, r0
 80085d6:	f000 ff7b 	bl	80094d0 <_ZN12DiagnoseViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80085da:	6870      	ldr	r0, [r6, #4]
 80085dc:	4659      	mov	r1, fp
 80085de:	6803      	ldr	r3, [r0, #0]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e2:	4798      	blx	r3
 80085e4:	4606      	mov	r6, r0
 80085e6:	4629      	mov	r1, r5
 80085e8:	f000 ff50 	bl	800948c <_ZN17DiagnosePresenterC1ER12DiagnoseView>
    model->bind(newPresenter);
 80085ec:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80085ee:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80085f2:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80085f4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80085f8:	f8c8 5000 	str.w	r5, [r8]
 80085fc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	f8c6 a008 	str.w	sl, [r6, #8]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800860a:	4798      	blx	r3
    newPresenter->activate();
 800860c:	6833      	ldr	r3, [r6, #0]
 800860e:	4630      	mov	r0, r6
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8008614:	4621      	mov	r1, r4
 8008616:	4628      	mov	r0, r5
 8008618:	f014 fe80 	bl	801d31c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	4620      	mov	r0, r4
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	4798      	blx	r3
    newTransition->invalidate();
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	4620      	mov	r0, r4
 8008628:	695b      	ldr	r3, [r3, #20]
}
 800862a:	b001      	add	sp, #4
 800862c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	4718      	bx	r3
 8008632:	bf00      	nop
 8008634:	0802f1e0 	.word	0x0802f1e0
 8008638:	0802f4e1 	.word	0x0802f4e1
 800863c:	0802f346 	.word	0x0802f346
 8008640:	0802f39b 	.word	0x0802f39b
 8008644:	0802f43e 	.word	0x0802f43e
 8008648:	0802f704 	.word	0x0802f704
 800864c:	240287b8 	.word	0x240287b8
 8008650:	240287b4 	.word	0x240287b4

08008654 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv>:
{
 8008654:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MainScreenView, MainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008658:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 800865c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800865e:	68b0      	ldr	r0, [r6, #8]
 8008660:	6803      	ldr	r3, [r0, #0]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	4798      	blx	r3
 8008666:	f5b0 7f67 	cmp.w	r0, #924	@ 0x39c
 800866a:	d205      	bcs.n	8008678 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x24>
 800866c:	4b43      	ldr	r3, [pc, #268]	@ (800877c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x128>)
 800866e:	21a3      	movs	r1, #163	@ 0xa3
 8008670:	4a43      	ldr	r2, [pc, #268]	@ (8008780 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008672:	4844      	ldr	r0, [pc, #272]	@ (8008784 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x130>)
 8008674:	f021 fdd4 	bl	802a220 <__assert_func>
 8008678:	6870      	ldr	r0, [r6, #4]
 800867a:	6803      	ldr	r3, [r0, #0]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	4798      	blx	r3
 8008680:	280f      	cmp	r0, #15
 8008682:	d803      	bhi.n	800868c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x38>
 8008684:	4b40      	ldr	r3, [pc, #256]	@ (8008788 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x134>)
 8008686:	21a4      	movs	r1, #164	@ 0xa4
 8008688:	4a3d      	ldr	r2, [pc, #244]	@ (8008780 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
 800868a:	e7f2      	b.n	8008672 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800868c:	68f0      	ldr	r0, [r6, #12]
 800868e:	6803      	ldr	r3, [r0, #0]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	4798      	blx	r3
 8008694:	280b      	cmp	r0, #11
 8008696:	d803      	bhi.n	80086a0 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x4c>
 8008698:	4b3c      	ldr	r3, [pc, #240]	@ (800878c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x138>)
 800869a:	21a5      	movs	r1, #165	@ 0xa5
 800869c:	4a38      	ldr	r2, [pc, #224]	@ (8008780 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
 800869e:	e7e8      	b.n	8008672 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80086a0:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8008794 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 80086a4:	f012 fd24 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 80086a8:	3004      	adds	r0, #4
 80086aa:	f012 fd5f 	bl	801b16c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80086ae:	f8d9 0000 	ldr.w	r0, [r9]
 80086b2:	b110      	cbz	r0, 80086ba <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80086b4:	6803      	ldr	r3, [r0, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4798      	blx	r3
    if (*currentTrans)
 80086ba:	f8d9 0000 	ldr.w	r0, [r9]
 80086be:	b110      	cbz	r0, 80086c6 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80086c0:	6803      	ldr	r3, [r0, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4798      	blx	r3
    if (*currentScreen)
 80086c6:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8008798 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x144>
 80086ca:	f8d8 0000 	ldr.w	r0, [r8]
 80086ce:	b110      	cbz	r0, 80086d6 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80086d0:	6803      	ldr	r3, [r0, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	4798      	blx	r3
    if (*currentPresenter)
 80086d6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80086da:	b110      	cbz	r0, 80086e2 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80086dc:	6803      	ldr	r3, [r0, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4798      	blx	r3
    if (*currentScreen)
 80086e2:	f8d8 0000 	ldr.w	r0, [r8]
 80086e6:	b110      	cbz	r0, 80086ee <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80086e8:	6803      	ldr	r3, [r0, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4798      	blx	r3
    if (*currentPresenter)
 80086ee:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80086f2:	b110      	cbz	r0, 80086fa <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80086f4:	6803      	ldr	r3, [r0, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80086fa:	2100      	movs	r1, #0
 80086fc:	68f0      	ldr	r0, [r6, #12]
 80086fe:	f7ff fe5b 	bl	80083b8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8008702:	f04f 0b00 	mov.w	fp, #0
 8008706:	4b22      	ldr	r3, [pc, #136]	@ (8008790 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x13c>)
 8008708:	4604      	mov	r4, r0
 800870a:	f8c0 b004 	str.w	fp, [r0, #4]
 800870e:	4659      	mov	r1, fp
 8008710:	f880 b008 	strb.w	fp, [r0, #8]
 8008714:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008716:	68b0      	ldr	r0, [r6, #8]
 8008718:	6803      	ldr	r3, [r0, #0]
 800871a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871c:	4798      	blx	r3
 800871e:	4605      	mov	r5, r0
 8008720:	f000 ff3a 	bl	8009598 <_ZN14MainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008724:	6870      	ldr	r0, [r6, #4]
 8008726:	4659      	mov	r1, fp
 8008728:	6803      	ldr	r3, [r0, #0]
 800872a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872c:	4798      	blx	r3
 800872e:	4606      	mov	r6, r0
 8008730:	4629      	mov	r1, r5
 8008732:	f000 ff0f 	bl	8009554 <_ZN19MainScreenPresenterC1ER14MainScreenView>
    model->bind(newPresenter);
 8008736:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8008738:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 800873c:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 800873e:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8008742:	f8c8 5000 	str.w	r5, [r8]
 8008746:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	f8c6 a008 	str.w	sl, [r6, #8]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8008754:	4798      	blx	r3
    newPresenter->activate();
 8008756:	6833      	ldr	r3, [r6, #0]
 8008758:	4630      	mov	r0, r6
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800875e:	4621      	mov	r1, r4
 8008760:	4628      	mov	r0, r5
 8008762:	f014 fddb 	bl	801d31c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	4620      	mov	r0, r4
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	4798      	blx	r3
    newTransition->invalidate();
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	4620      	mov	r0, r4
 8008772:	695b      	ldr	r3, [r3, #20]
}
 8008774:	b001      	add	sp, #4
 8008776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877a:	4718      	bx	r3
 800877c:	0802f1e0 	.word	0x0802f1e0
 8008780:	0802f5b5 	.word	0x0802f5b5
 8008784:	0802f346 	.word	0x0802f346
 8008788:	0802f39b 	.word	0x0802f39b
 800878c:	0802f43e 	.word	0x0802f43e
 8008790:	0802f704 	.word	0x0802f704
 8008794:	240287b8 	.word	0x240287b8
 8008798:	240287b4 	.word	0x240287b4

0800879c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800879c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800879e:	4770      	bx	lr

080087a0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80087a0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80087a2:	4770      	bx	lr

080087a4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80087a4:	4770      	bx	lr

080087a6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80087a6:	888b      	ldrh	r3, [r1, #4]
 80087a8:	69c0      	ldr	r0, [r0, #28]
 80087aa:	0adb      	lsrs	r3, r3, #11
 80087ac:	680a      	ldr	r2, [r1, #0]
 80087ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80087b2:	4410      	add	r0, r2
 80087b4:	4770      	bx	lr

080087b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80087b6:	b510      	push	{r4, lr}
 80087b8:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80087ba:	b1ba      	cbz	r2, 80087ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80087bc:	7b10      	ldrb	r0, [r2, #12]
 80087be:	b168      	cbz	r0, 80087dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80087c0:	7b53      	ldrb	r3, [r2, #13]
 80087c2:	7ad2      	ldrb	r2, [r2, #11]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80087ca:	431a      	orrs	r2, r3
 80087cc:	6a23      	ldr	r3, [r4, #32]
 80087ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80087d2:	881a      	ldrh	r2, [r3, #0]
 80087d4:	428a      	cmp	r2, r1
 80087d6:	d102      	bne.n	80087de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80087d8:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80087dc:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80087de:	d805      	bhi.n	80087ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80087e0:	3801      	subs	r0, #1
 80087e2:	3304      	adds	r3, #4
 80087e4:	b280      	uxth	r0, r0
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d1f3      	bne.n	80087d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80087ea:	e7f7      	b.n	80087dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80087ec:	2000      	movs	r0, #0
 80087ee:	e7f5      	b.n	80087dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080087f0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	212c      	movs	r1, #44	@ 0x2c
 80087f6:	f021 f8bf 	bl	8029978 <_ZdlPvj>
 80087fa:	4620      	mov	r0, r4
 80087fc:	bd10      	pop	{r4, pc}
	...

08008800 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8008800:	b530      	push	{r4, r5, lr}
 8008802:	b08b      	sub	sp, #44	@ 0x2c
 8008804:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8008806:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800880a:	9508      	str	r5, [sp, #32]
 800880c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8008810:	9507      	str	r5, [sp, #28]
 8008812:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8008816:	9506      	str	r5, [sp, #24]
 8008818:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 800881c:	9505      	str	r5, [sp, #20]
 800881e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8008822:	9504      	str	r5, [sp, #16]
 8008824:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8008828:	9503      	str	r5, [sp, #12]
 800882a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800882e:	9502      	str	r5, [sp, #8]
 8008830:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8008834:	9501      	str	r5, [sp, #4]
 8008836:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800883a:	9500      	str	r5, [sp, #0]
 800883c:	f014 f8ec 	bl	801ca18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008840:	4b06      	ldr	r3, [pc, #24]	@ (800885c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8008842:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8008844:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8008846:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008848:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800884a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800884c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800884e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008850:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8008852:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008854:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8008856:	b00b      	add	sp, #44	@ 0x2c
 8008858:	bd30      	pop	{r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	0802f728 	.word	0x0802f728

08008860 <_ZN18MainScreenViewBaseD1Ev>:
}

MainScreenViewBase::~MainScreenViewBase()
{

}
 8008860:	4770      	bx	lr

08008862 <_ZN18MainScreenViewBase11setupScreenEv>:

void MainScreenViewBase::setupScreen()
{

}
 8008862:	4770      	bx	lr

08008864 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008864:	4770      	bx	lr

08008866 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008866:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8008868:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800886a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800886c:	68c2      	ldr	r2, [r0, #12]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	1055      	asrs	r5, r2, #1
 8008872:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008876:	07d2      	lsls	r2, r2, #31
 8008878:	bf48      	it	mi
 800887a:	5962      	ldrmi	r2, [r4, r5]
    }
 800887c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800887e:	bf48      	it	mi
 8008880:	58d3      	ldrmi	r3, [r2, r3]
 8008882:	4718      	bx	r3

08008884 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8008884:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8008886:	6840      	ldr	r0, [r0, #4]
 8008888:	b130      	cbz	r0, 8008898 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	b91a      	cbnz	r2, 8008896 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800888e:	68d8      	ldr	r0, [r3, #12]
 8008890:	f000 0001 	and.w	r0, r0, #1
 8008894:	4770      	bx	lr
 8008896:	2001      	movs	r0, #1
    }
 8008898:	4770      	bx	lr

0800889a <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800889a:	b510      	push	{r4, lr}
 800889c:	4604      	mov	r4, r0
 800889e:	2110      	movs	r1, #16
 80088a0:	f021 f86a 	bl	8029978 <_ZdlPvj>
 80088a4:	4620      	mov	r0, r4
 80088a6:	bd10      	pop	{r4, pc}

080088a8 <_ZN18MainScreenViewBaseD0Ev>:
MainScreenViewBase::~MainScreenViewBase()
 80088a8:	b510      	push	{r4, lr}
 80088aa:	4604      	mov	r4, r0
}
 80088ac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80088b0:	f021 f862 	bl	8029978 <_ZdlPvj>
 80088b4:	4620      	mov	r0, r4
 80088b6:	bd10      	pop	{r4, pc}

080088b8 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80088b8:	b538      	push	{r3, r4, r5, lr}
    if (&src == &SwitchToDiagnose)
 80088ba:	f500 7314 	add.w	r3, r0, #592	@ 0x250
{
 80088be:	4604      	mov	r4, r0
 80088c0:	460d      	mov	r5, r1
    if (&src == &SwitchToDiagnose)
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d103      	bne.n	80088ce <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~MainScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80088c6:	f012 fc13 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //SwitchToDiagnose
        //When SwitchToDiagnose clicked change screen to Diagnose
        //Go to Diagnose with no screen transition
        application().gotoDiagnoseScreenNoTransition();
 80088ca:	f7ff fd55 	bl	8008378 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv>
    }
    if (&src == &SwitchToCalculator)
 80088ce:	f504 742c 	add.w	r4, r4, #688	@ 0x2b0
 80088d2:	42a5      	cmp	r5, r4
 80088d4:	d105      	bne.n	80088e2 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>
 80088d6:	f012 fc0b 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When SwitchToCalculator clicked change screen to Calculator
        //Go to Calculator with no screen transition
        application().gotoCalculatorScreenNoTransition();
    }
}
 80088da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        application().gotoCalculatorScreenNoTransition();
 80088de:	f7ff bd5b 	b.w	8008398 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv>
}
 80088e2:	bd38      	pop	{r3, r4, r5, pc}

080088e4 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80088e8:	2226      	movs	r2, #38	@ 0x26
 80088ea:	2100      	movs	r1, #0
 80088ec:	f022 fdea 	bl	802b4c4 <memset>
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7fb ffcf 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
 80088f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008920 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 80088f8:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 80088fc:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	4b08      	ldr	r3, [pc, #32]	@ (8008924 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8008902:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008904:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008908:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800890a:	2300      	movs	r3, #0
 800890c:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8008910:	f04f 32ff 	mov.w	r2, #4294967295
 8008914:	8723      	strh	r3, [r4, #56]	@ 0x38
 8008916:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8008918:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 800891c:	bd10      	pop	{r4, pc}
 800891e:	bf00      	nop
 8008920:	0803085c 	.word	0x0803085c
 8008924:	0802ed28 	.word	0x0802ed28

08008928 <_ZN8touchgfx6ButtonC1Ev>:
    Button()
 8008928:	b510      	push	{r4, lr}
 800892a:	4604      	mov	r4, r0
        : Widget(), action(), pressed(false)
 800892c:	2226      	movs	r2, #38	@ 0x26
 800892e:	2100      	movs	r1, #0
 8008930:	f022 fdc8 	bl	802b4c4 <memset>
 8008934:	4620      	mov	r0, r4
 8008936:	f7fb ffad 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
 800893a:	2300      	movs	r3, #0
    {
    }
 800893c:	4620      	mov	r0, r4
 800893e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008940:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8008944:	2301      	movs	r3, #1
 8008946:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        : AbstractButton(), up(), down(), alpha(255)
 800894a:	4b04      	ldr	r3, [pc, #16]	@ (800895c <_ZN8touchgfx6ButtonC1Ev+0x34>)
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008952:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8008954:	8623      	strh	r3, [r4, #48]	@ 0x30
 8008956:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
 800895a:	bd10      	pop	{r4, pc}
 800895c:	08030954 	.word	0x08030954

08008960 <_ZN18MainScreenViewBaseC1Ev>:
MainScreenViewBase::MainScreenViewBase() :
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	4604      	mov	r4, r0
 8008966:	b093      	sub	sp, #76	@ 0x4c
        : presenter(0)
 8008968:	2500      	movs	r5, #0
 800896a:	f014 fb2b 	bl	801cfc4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler)
 800896e:	46a0      	mov	r8, r4
 8008970:	4bde      	ldr	r3, [pc, #888]	@ (8008cec <_ZN18MainScreenViewBaseC1Ev+0x38c>)
        : Widget(), alpha(255), color(0)
 8008972:	2226      	movs	r2, #38	@ 0x26
 8008974:	4629      	mov	r1, r5
 8008976:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8008978:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 800897c:	f848 3b40 	str.w	r3, [r8], #64
 8008980:	4640      	mov	r0, r8
 8008982:	f022 fd9f 	bl	802b4c4 <memset>
 8008986:	4640      	mov	r0, r8
 8008988:	f7fb ff84 	bl	8004894 <_ZN8touchgfx6WidgetC1Ev>
 800898c:	4bd8      	ldr	r3, [pc, #864]	@ (8008cf0 <_ZN18MainScreenViewBaseC1Ev+0x390>)
 800898e:	f104 0698 	add.w	r6, r4, #152	@ 0x98
 8008992:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8008996:	6423      	str	r3, [r4, #64]	@ 0x40
 8008998:	23ff      	movs	r3, #255	@ 0xff
 800899a:	a910      	add	r1, sp, #64	@ 0x40
 800899c:	f504 7b98 	add.w	fp, r4, #304	@ 0x130
 80089a0:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 80089a4:	4648      	mov	r0, r9
        : color(col)
 80089a6:	66a5      	str	r5, [r4, #104]	@ 0x68
 80089a8:	f504 7abc 	add.w	sl, r4, #376	@ 0x178
 80089ac:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80089b0:	f00f f808 	bl	80179c4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80089b4:	4630      	mov	r0, r6
 80089b6:	f00a fce9 	bl	801338c <_ZN8touchgfx12DigitalClockC1Ev>
 80089ba:	4658      	mov	r0, fp
 80089bc:	f7ff ff92 	bl	80088e4 <_ZN8touchgfx8TextAreaC1Ev>
 80089c0:	4650      	mov	r0, sl
 80089c2:	f7ff ff8f 	bl	80088e4 <_ZN8touchgfx8TextAreaC1Ev>
 80089c6:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 80089ca:	4618      	mov	r0, r3
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	f7ff ff89 	bl	80088e4 <_ZN8touchgfx8TextAreaC1Ev>
 80089d2:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 80089d6:	4618      	mov	r0, r3
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	f7ff ff83 	bl	80088e4 <_ZN8touchgfx8TextAreaC1Ev>
 80089de:	f504 7314 	add.w	r3, r4, #592	@ 0x250
 80089e2:	4618      	mov	r0, r3
 80089e4:	9307      	str	r3, [sp, #28]
 80089e6:	f7ff ff9f 	bl	8008928 <_ZN8touchgfx6ButtonC1Ev>
 80089ea:	f504 7321 	add.w	r3, r4, #644	@ 0x284
 80089ee:	a910      	add	r1, sp, #64	@ 0x40
 80089f0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80089f4:	4618      	mov	r0, r3
 80089f6:	9304      	str	r3, [sp, #16]
 80089f8:	f00e ffe4 	bl	80179c4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80089fc:	f504 732c 	add.w	r3, r4, #688	@ 0x2b0
 8008a00:	4618      	mov	r0, r3
 8008a02:	9308      	str	r3, [sp, #32]
 8008a04:	f7ff ff90 	bl	8008928 <_ZN8touchgfx6ButtonC1Ev>
 8008a08:	f504 7339 	add.w	r3, r4, #740	@ 0x2e4
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	9305      	str	r3, [sp, #20]
 8008a10:	f7ff ff68 	bl	80088e4 <_ZN8touchgfx8TextAreaC1Ev>
 8008a14:	f504 734b 	add.w	r3, r4, #812	@ 0x32c
 8008a18:	a910      	add	r1, sp, #64	@ 0x40
 8008a1a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8008a1e:	4618      	mov	r0, r3
 8008a20:	9306      	str	r3, [sp, #24]
 8008a22:	f00e ffcf 	bl	80179c4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8008a26:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8008a2a:	1d27      	adds	r7, r4, #4
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a30:	f7ff ff7a 	bl	8008928 <_ZN8touchgfx6ButtonC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8008a34:	4baf      	ldr	r3, [pc, #700]	@ (8008cf4 <_ZN18MainScreenViewBaseC1Ev+0x394>)
    __background.setPosition(0, 0, 800, 480);
 8008a36:	462a      	mov	r2, r5
 8008a38:	4629      	mov	r1, r5
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	e9c4 34e3 	strd	r3, r4, [r4, #908]	@ 0x38c
 8008a40:	4bad      	ldr	r3, [pc, #692]	@ (8008cf8 <_ZN18MainScreenViewBaseC1Ev+0x398>)
 8008a42:	e9c4 35e5 	strd	r3, r5, [r4, #916]	@ 0x394
 8008a46:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8008a50:	f7fb ff0d 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8008a54:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8008a58:	4641      	mov	r1, r8
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	66a3      	str	r3, [r4, #104]	@ 0x68
 8008a5e:	f00a fd57 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008a62:	230c      	movs	r3, #12
    DiagnoseIcon.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_CROPPED_ID));
 8008a64:	a910      	add	r1, sp, #64	@ 0x40
 8008a66:	4648      	mov	r0, r9
 8008a68:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008a6c:	f00f fe85 	bl	801877a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    DiagnoseIcon.setPosition(56, 112, 164, 164);
 8008a70:	23a4      	movs	r3, #164	@ 0xa4
 8008a72:	2270      	movs	r2, #112	@ 0x70
 8008a74:	4648      	mov	r0, r9
 8008a76:	2138      	movs	r1, #56	@ 0x38
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	f7fb fef8 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    DiagnoseIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4648      	mov	r0, r9
 8008a82:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 8008cfc <_ZN18MainScreenViewBaseC1Ev+0x39c>
 8008a86:	f00e ff58 	bl	801793a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f8df 9270 	ldr.w	r9, [pc, #624]	@ 8008d00 <_ZN18MainScreenViewBaseC1Ev+0x3a0>
 8008a92:	f00a fd3d 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MainScreenClock.setPosition(597, 18, 187, 51);
 8008a96:	2333      	movs	r3, #51	@ 0x33
 8008a98:	2212      	movs	r2, #18
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	f240 2155 	movw	r1, #597	@ 0x255
 8008aa2:	23bb      	movs	r3, #187	@ 0xbb
 8008aa4:	f7fb fee3 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    MainScreenClock.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f00a fbac 	bl	8013208 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 8008ab0:	231d      	movs	r3, #29
    MainScreenClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NI1A));
 8008ab2:	a910      	add	r1, sp, #64	@ 0x40
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8008aba:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008abe:	f00a fbb6 	bl	801322e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    MainScreenClock.displayLeadingZeroForHourIndicator(true);
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	f00a fcaf 	bl	8013428 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    MainScreenClock.setTime24Hour(10, 10, 0);
 8008aca:	220a      	movs	r2, #10
 8008acc:	2303      	movs	r3, #3
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	f884 30c7 	strb.w	r3, [r4, #199]	@ 0xc7
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	f00a fca9 	bl	801342e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 8008adc:	4631      	mov	r1, r6
 8008ade:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8008ae0:	ae0a      	add	r6, sp, #40	@ 0x28
 8008ae2:	f00a fd15 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Diagnose.setPosition(81, 286, 114, 33);
 8008ae6:	2321      	movs	r3, #33	@ 0x21
 8008ae8:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 8008aec:	4658      	mov	r0, fp
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2151      	movs	r1, #81	@ 0x51
 8008af2:	2372      	movs	r3, #114	@ 0x72
 8008af4:	f7fb febb 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8008af8:	4659      	mov	r1, fp
 8008afa:	4630      	mov	r0, r6
        color = newColor;
 8008afc:	f8c4 9160 	str.w	r9, [r4, #352]	@ 0x160
        linespace = space;
 8008b00:	f8a4 5164 	strh.w	r5, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
 8008b04:	f00f fa08 	bl	8017f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008b08:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 8008b0c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008b10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b14:	2319      	movs	r3, #25
    Text_Diagnose.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6UML));
 8008b16:	a910      	add	r1, sp, #64	@ 0x40
 8008b18:	4658      	mov	r0, fp
 8008b1a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008b1e:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8008b22:	f00f fc93 	bl	801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008b26:	4659      	mov	r1, fp
    Text_Calculator.setPosition(317, 289, 114, 26);
 8008b28:	f04f 0b1a 	mov.w	fp, #26
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f00a fcef 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008b32:	2372      	movs	r3, #114	@ 0x72
 8008b34:	f240 1221 	movw	r2, #289	@ 0x121
 8008b38:	4650      	mov	r0, sl
 8008b3a:	f240 113d 	movw	r1, #317	@ 0x13d
 8008b3e:	f8cd b000 	str.w	fp, [sp]
 8008b42:	f7fb fe94 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8008b46:	4651      	mov	r1, sl
 8008b48:	4630      	mov	r0, r6
        color = newColor;
 8008b4a:	f8c4 91a8 	str.w	r9, [r4, #424]	@ 0x1a8
        linespace = space;
 8008b4e:	f8a4 51ac 	strh.w	r5, [r4, #428]	@ 0x1ac
        boundingArea = calculateBoundingArea();
 8008b52:	f00f f9e1 	bl	8017f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008b56:	f504 73da 	add.w	r3, r4, #436	@ 0x1b4
 8008b5a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008b5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b62:	2304      	movs	r3, #4
    Text_Calculator.setTypedText(touchgfx::TypedText(T___SINGLEUSE_10PZ));
 8008b64:	a910      	add	r1, sp, #64	@ 0x40
 8008b66:	4650      	mov	r0, sl
 8008b68:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008b6c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8008b70:	f00f fc6c 	bl	801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008b74:	4651      	mov	r1, sl
 8008b76:	4638      	mov	r0, r7
 8008b78:	f00a fcca 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Manipulator.setPosition(530, 289, 134, 26);
 8008b7c:	2386      	movs	r3, #134	@ 0x86
 8008b7e:	f240 1221 	movw	r2, #289	@ 0x121
 8008b82:	9802      	ldr	r0, [sp, #8]
 8008b84:	f240 2112 	movw	r1, #530	@ 0x212
 8008b88:	f8cd b000 	str.w	fp, [sp]
 8008b8c:	f7fb fe6f 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8008b90:	9902      	ldr	r1, [sp, #8]
 8008b92:	4630      	mov	r0, r6
        color = newColor;
 8008b94:	f8c4 91f0 	str.w	r9, [r4, #496]	@ 0x1f0
        linespace = space;
 8008b98:	f8a4 51f4 	strh.w	r5, [r4, #500]	@ 0x1f4
    SwitchToDiagnose.setAction(buttonCallback);
 8008b9c:	f504 7a63 	add.w	sl, r4, #908	@ 0x38c
        boundingArea = calculateBoundingArea();
 8008ba0:	f00f f9ba 	bl	8017f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008ba4:	f504 73fe 	add.w	r3, r4, #508	@ 0x1fc
 8008ba8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008bac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Text_Manipulator.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CDWB));
 8008bb0:	a910      	add	r1, sp, #64	@ 0x40
 8008bb2:	9802      	ldr	r0, [sp, #8]
 8008bb4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008bb8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8008bbc:	f00f fc46 	bl	801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008bc0:	9902      	ldr	r1, [sp, #8]
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	f00a fca4 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MainTitle.setPosition(47, 18, 384, 51);
 8008bc8:	2333      	movs	r3, #51	@ 0x33
 8008bca:	2212      	movs	r2, #18
 8008bcc:	9803      	ldr	r0, [sp, #12]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	212f      	movs	r1, #47	@ 0x2f
 8008bd2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8008bd6:	f7fb fe4a 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8008bda:	9903      	ldr	r1, [sp, #12]
 8008bdc:	4630      	mov	r0, r6
        color = newColor;
 8008bde:	f8c4 9238 	str.w	r9, [r4, #568]	@ 0x238
        linespace = space;
 8008be2:	f8a4 523c 	strh.w	r5, [r4, #572]	@ 0x23c
        boundingArea = calculateBoundingArea();
 8008be6:	f00f f997 	bl	8017f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008bea:	f504 7311 	add.w	r3, r4, #580	@ 0x244
 8008bee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008bf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    MainTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HFBR));
 8008bf6:	a910      	add	r1, sp, #64	@ 0x40
 8008bf8:	9803      	ldr	r0, [sp, #12]
 8008bfa:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008bfe:	f8ad b044 	strh.w	fp, [sp, #68]	@ 0x44
 8008c02:	f00f fc23 	bl	801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008c06:	9903      	ldr	r1, [sp, #12]
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f00a fc81 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToDiagnose.setXY(50, 107);
 8008c0e:	9807      	ldr	r0, [sp, #28]
 8008c10:	226b      	movs	r2, #107	@ 0x6b
 8008c12:	2132      	movs	r1, #50	@ 0x32
 8008c14:	f7fb fe1e 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToDiagnose.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 8008c18:	aa10      	add	r2, sp, #64	@ 0x40
 8008c1a:	a90f      	add	r1, sp, #60	@ 0x3c
 8008c1c:	9807      	ldr	r0, [sp, #28]
 8008c1e:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 8008c22:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8008c26:	f00f fc6f 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008c2a:	9907      	ldr	r1, [sp, #28]
 8008c2c:	4638      	mov	r0, r7
        action = &callback;
 8008c2e:	f8c4 a278 	str.w	sl, [r4, #632]	@ 0x278
 8008c32:	f00a fc6d 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008c36:	2306      	movs	r3, #6
    CalculatorIcon.setBitmap(touchgfx::Bitmap(BITMAP_CALCULATOR_LOGO_ID));
 8008c38:	a910      	add	r1, sp, #64	@ 0x40
 8008c3a:	9804      	ldr	r0, [sp, #16]
 8008c3c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008c40:	f00f fd9b 	bl	801877a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    CalculatorIcon.setPosition(289, 112, 164, 164);
 8008c44:	23a4      	movs	r3, #164	@ 0xa4
 8008c46:	2270      	movs	r2, #112	@ 0x70
 8008c48:	9804      	ldr	r0, [sp, #16]
 8008c4a:	f240 1121 	movw	r1, #289	@ 0x121
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	f7fb fe0d 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    CalculatorIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8008c54:	4629      	mov	r1, r5
 8008c56:	9804      	ldr	r0, [sp, #16]
 8008c58:	f00e fe6f 	bl	801793a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008c5c:	9904      	ldr	r1, [sp, #16]
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f00a fc56 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToCalculator.setXY(283, 107);
 8008c64:	9808      	ldr	r0, [sp, #32]
 8008c66:	226b      	movs	r2, #107	@ 0x6b
 8008c68:	f240 111b 	movw	r1, #283	@ 0x11b
 8008c6c:	f7fb fdf2 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToCalculator.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 8008c70:	aa10      	add	r2, sp, #64	@ 0x40
 8008c72:	a90f      	add	r1, sp, #60	@ 0x3c
 8008c74:	9808      	ldr	r0, [sp, #32]
 8008c76:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 8008c7a:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8008c7e:	f00f fc43 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008c82:	9908      	ldr	r1, [sp, #32]
 8008c84:	4638      	mov	r0, r7
 8008c86:	f8c4 a2d8 	str.w	sl, [r4, #728]	@ 0x2d8
 8008c8a:	f00a fc41 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Temperature.setPosition(463, 18, 101, 51);
 8008c8e:	2333      	movs	r3, #51	@ 0x33
 8008c90:	2212      	movs	r2, #18
 8008c92:	9805      	ldr	r0, [sp, #20]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8008c9a:	2365      	movs	r3, #101	@ 0x65
 8008c9c:	f7fb fde7 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8008ca0:	9905      	ldr	r1, [sp, #20]
 8008ca2:	4630      	mov	r0, r6
        color = newColor;
 8008ca4:	f8c4 9314 	str.w	r9, [r4, #788]	@ 0x314
        linespace = space;
 8008ca8:	f8a4 5318 	strh.w	r5, [r4, #792]	@ 0x318
        boundingArea = calculateBoundingArea();
 8008cac:	f00f f934 	bl	8017f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008cb0:	f504 7348 	add.w	r3, r4, #800	@ 0x320
 8008cb4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008cb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008cbc:	2301      	movs	r3, #1
    Text_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EH0R));
 8008cbe:	a910      	add	r1, sp, #64	@ 0x40
 8008cc0:	9805      	ldr	r0, [sp, #20]
 8008cc2:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8008cc6:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008cca:	f00f fbbf 	bl	801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008cce:	9905      	ldr	r1, [sp, #20]
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f00a fc1d 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008cd6:	230d      	movs	r3, #13
    ManipulatorIcon.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_MANIPULATOR_ID));
 8008cd8:	a910      	add	r1, sp, #64	@ 0x40
 8008cda:	9806      	ldr	r0, [sp, #24]
 8008cdc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008ce0:	f00f fd4b 	bl	801877a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    ManipulatorIcon.setPosition(513, 112, 169, 164);
 8008ce4:	23a4      	movs	r3, #164	@ 0xa4
 8008ce6:	2270      	movs	r2, #112	@ 0x70
 8008ce8:	e00c      	b.n	8008d04 <_ZN18MainScreenViewBaseC1Ev+0x3a4>
 8008cea:	bf00      	nop
 8008cec:	0802f7a8 	.word	0x0802f7a8
 8008cf0:	080308ec 	.word	0x080308ec
 8008cf4:	0802f790 	.word	0x0802f790
 8008cf8:	080088b9 	.word	0x080088b9
 8008cfc:	0802ed28 	.word	0x0802ed28
 8008d00:	ffa3baff 	.word	0xffa3baff
 8008d04:	9806      	ldr	r0, [sp, #24]
 8008d06:	f240 2101 	movw	r1, #513	@ 0x201
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	23a9      	movs	r3, #169	@ 0xa9
 8008d0e:	f7fb fdae 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
    ManipulatorIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8008d12:	4629      	mov	r1, r5
 8008d14:	9806      	ldr	r0, [sp, #24]
 8008d16:	f00e fe10 	bl	801793a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008d1a:	9906      	ldr	r1, [sp, #24]
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f00a fbf7 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToManipulator.setXY(509, 107);
 8008d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d24:	226b      	movs	r2, #107	@ 0x6b
 8008d26:	f240 11fd 	movw	r1, #509	@ 0x1fd
 8008d2a:	f7fb fd93 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToManipulator.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 8008d2e:	aa10      	add	r2, sp, #64	@ 0x40
 8008d30:	a90f      	add	r1, sp, #60	@ 0x3c
 8008d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d34:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 8008d38:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8008d3c:	f00f fbe4 	bl	8018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008d40:	4638      	mov	r0, r7
 8008d42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d44:	f00a fbe4 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008d48:	4620      	mov	r0, r4
 8008d4a:	b013      	add	sp, #76	@ 0x4c
 8008d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d50 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008d50:	4770      	bx	lr
	...

08008d54 <_Z23getFont_verdana_10_4bppv>:
{
 8008d54:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008d56:	4d17      	ldr	r5, [pc, #92]	@ (8008db4 <_Z23getFont_verdana_10_4bppv+0x60>)
{
 8008d58:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008d5a:	682c      	ldr	r4, [r5, #0]
 8008d5c:	f3bf 8f5b 	dmb	ish
 8008d60:	f014 0401 	ands.w	r4, r4, #1
 8008d64:	d122      	bne.n	8008dac <_Z23getFont_verdana_10_4bppv+0x58>
 8008d66:	4628      	mov	r0, r5
 8008d68:	f020 fe08 	bl	802997c <__cxa_guard_acquire>
 8008d6c:	b1f0      	cbz	r0, 8008dac <_Z23getFont_verdana_10_4bppv+0x58>
 8008d6e:	233f      	movs	r3, #63	@ 0x3f
 8008d70:	2204      	movs	r2, #4
 8008d72:	4911      	ldr	r1, [pc, #68]	@ (8008db8 <_Z23getFont_verdana_10_4bppv+0x64>)
 8008d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d76:	4b11      	ldr	r3, [pc, #68]	@ (8008dbc <_Z23getFont_verdana_10_4bppv+0x68>)
 8008d78:	4811      	ldr	r0, [pc, #68]	@ (8008dc0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8008d7a:	9308      	str	r3, [sp, #32]
 8008d7c:	4b11      	ldr	r3, [pc, #68]	@ (8008dc4 <_Z23getFont_verdana_10_4bppv+0x70>)
 8008d7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	2301      	movs	r3, #1
 8008d84:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	9301      	str	r3, [sp, #4]
 8008d8c:	230a      	movs	r3, #10
 8008d8e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	22bf      	movs	r2, #191	@ 0xbf
 8008d96:	230c      	movs	r3, #12
 8008d98:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008d9c:	f7ff fd30 	bl	8008800 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008da0:	4809      	ldr	r0, [pc, #36]	@ (8008dc8 <_Z23getFont_verdana_10_4bppv+0x74>)
 8008da2:	f021 fa5b 	bl	802a25c <atexit>
 8008da6:	4628      	mov	r0, r5
 8008da8:	f020 fdf4 	bl	8029994 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8008dac:	4804      	ldr	r0, [pc, #16]	@ (8008dc0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8008dae:	b00f      	add	sp, #60	@ 0x3c
 8008db0:	bd30      	pop	{r4, r5, pc}
 8008db2:	bf00      	nop
 8008db4:	2400e650 	.word	0x2400e650
 8008db8:	08049424 	.word	0x08049424
 8008dbc:	0804be04 	.word	0x0804be04
 8008dc0:	2400e654 	.word	0x2400e654
 8008dc4:	0804c6cc 	.word	0x0804c6cc
 8008dc8:	08008d51 	.word	0x08008d51

08008dcc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008dcc:	4770      	bx	lr
	...

08008dd0 <_Z23getFont_verdana_20_4bppv>:
{
 8008dd0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008dd2:	4d17      	ldr	r5, [pc, #92]	@ (8008e30 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8008dd4:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008dd6:	682c      	ldr	r4, [r5, #0]
 8008dd8:	f3bf 8f5b 	dmb	ish
 8008ddc:	f014 0401 	ands.w	r4, r4, #1
 8008de0:	d122      	bne.n	8008e28 <_Z23getFont_verdana_20_4bppv+0x58>
 8008de2:	4628      	mov	r0, r5
 8008de4:	f020 fdca 	bl	802997c <__cxa_guard_acquire>
 8008de8:	b1f0      	cbz	r0, 8008e28 <_Z23getFont_verdana_20_4bppv+0x58>
 8008dea:	233f      	movs	r3, #63	@ 0x3f
 8008dec:	22bf      	movs	r2, #191	@ 0xbf
 8008dee:	4911      	ldr	r1, [pc, #68]	@ (8008e34 <_Z23getFont_verdana_20_4bppv+0x64>)
 8008df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df2:	4b11      	ldr	r3, [pc, #68]	@ (8008e38 <_Z23getFont_verdana_20_4bppv+0x68>)
 8008df4:	4811      	ldr	r0, [pc, #68]	@ (8008e3c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8008df6:	9308      	str	r3, [sp, #32]
 8008df8:	4b11      	ldr	r3, [pc, #68]	@ (8008e40 <_Z23getFont_verdana_20_4bppv+0x70>)
 8008dfa:	940a      	str	r4, [sp, #40]	@ 0x28
 8008dfc:	9307      	str	r3, [sp, #28]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	9401      	str	r4, [sp, #4]
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008e08:	2304      	movs	r3, #4
 8008e0a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8008e0e:	2314      	movs	r3, #20
 8008e10:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	2319      	movs	r3, #25
 8008e18:	f7ff fcf2 	bl	8008800 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008e1c:	4809      	ldr	r0, [pc, #36]	@ (8008e44 <_Z23getFont_verdana_20_4bppv+0x74>)
 8008e1e:	f021 fa1d 	bl	802a25c <atexit>
 8008e22:	4628      	mov	r0, r5
 8008e24:	f020 fdb6 	bl	8029994 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8008e28:	4804      	ldr	r0, [pc, #16]	@ (8008e3c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8008e2a:	b00f      	add	sp, #60	@ 0x3c
 8008e2c:	bd30      	pop	{r4, r5, pc}
 8008e2e:	bf00      	nop
 8008e30:	2400e680 	.word	0x2400e680
 8008e34:	08049e98 	.word	0x08049e98
 8008e38:	0804be38 	.word	0x0804be38
 8008e3c:	2400e684 	.word	0x2400e684
 8008e40:	0804c6d0 	.word	0x0804c6d0
 8008e44:	08008dcd 	.word	0x08008dcd

08008e48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_21_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_21_4bpp();

touchgfx::GeneratedFont& getFont_verdana_21_4bpp()
{
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 8008e48:	4770      	bx	lr
	...

08008e4c <_Z23getFont_verdana_21_4bppv>:
{
 8008e4c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 8008e4e:	4d17      	ldr	r5, [pc, #92]	@ (8008eac <_Z23getFont_verdana_21_4bppv+0x60>)
{
 8008e50:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 8008e52:	682c      	ldr	r4, [r5, #0]
 8008e54:	f3bf 8f5b 	dmb	ish
 8008e58:	f014 0401 	ands.w	r4, r4, #1
 8008e5c:	d123      	bne.n	8008ea6 <_Z23getFont_verdana_21_4bppv+0x5a>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f020 fd8c 	bl	802997c <__cxa_guard_acquire>
 8008e64:	b1f8      	cbz	r0, 8008ea6 <_Z23getFont_verdana_21_4bppv+0x5a>
 8008e66:	233f      	movs	r3, #63	@ 0x3f
 8008e68:	2202      	movs	r2, #2
 8008e6a:	4911      	ldr	r1, [pc, #68]	@ (8008eb0 <_Z23getFont_verdana_21_4bppv+0x64>)
 8008e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e6e:	4b11      	ldr	r3, [pc, #68]	@ (8008eb4 <_Z23getFont_verdana_21_4bppv+0x68>)
 8008e70:	4811      	ldr	r0, [pc, #68]	@ (8008eb8 <_Z23getFont_verdana_21_4bppv+0x6c>)
 8008e72:	9308      	str	r3, [sp, #32]
 8008e74:	4b11      	ldr	r3, [pc, #68]	@ (8008ebc <_Z23getFont_verdana_21_4bppv+0x70>)
 8008e76:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e78:	9307      	str	r3, [sp, #28]
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	2204      	movs	r2, #4
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	2315      	movs	r3, #21
 8008e88:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	22bf      	movs	r2, #191	@ 0xbf
 8008e90:	2319      	movs	r3, #25
 8008e92:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008e96:	f7ff fcb3 	bl	8008800 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008e9a:	4809      	ldr	r0, [pc, #36]	@ (8008ec0 <_Z23getFont_verdana_21_4bppv+0x74>)
 8008e9c:	f021 f9de 	bl	802a25c <atexit>
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f020 fd77 	bl	8029994 <__cxa_guard_release>
    return verdana_21_4bpp;
}
 8008ea6:	4804      	ldr	r0, [pc, #16]	@ (8008eb8 <_Z23getFont_verdana_21_4bppv+0x6c>)
 8008ea8:	b00f      	add	sp, #60	@ 0x3c
 8008eaa:	bd30      	pop	{r4, r5, pc}
 8008eac:	2400e6b0 	.word	0x2400e6b0
 8008eb0:	0804a90c 	.word	0x0804a90c
 8008eb4:	0804c04c 	.word	0x0804c04c
 8008eb8:	2400e6b4 	.word	0x2400e6b4
 8008ebc:	0804c6d4 	.word	0x0804c6d4
 8008ec0:	08008e49 	.word	0x08008e49

08008ec4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8008ec4:	4770      	bx	lr
	...

08008ec8 <_Z23getFont_verdana_30_4bppv>:
{
 8008ec8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8008eca:	4d16      	ldr	r5, [pc, #88]	@ (8008f24 <_Z23getFont_verdana_30_4bppv+0x5c>)
{
 8008ecc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8008ece:	682c      	ldr	r4, [r5, #0]
 8008ed0:	f3bf 8f5b 	dmb	ish
 8008ed4:	f014 0401 	ands.w	r4, r4, #1
 8008ed8:	d120      	bne.n	8008f1c <_Z23getFont_verdana_30_4bppv+0x54>
 8008eda:	4628      	mov	r0, r5
 8008edc:	f020 fd4e 	bl	802997c <__cxa_guard_acquire>
 8008ee0:	b1e0      	cbz	r0, 8008f1c <_Z23getFont_verdana_30_4bppv+0x54>
 8008ee2:	233f      	movs	r3, #63	@ 0x3f
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	4910      	ldr	r1, [pc, #64]	@ (8008f28 <_Z23getFont_verdana_30_4bppv+0x60>)
 8008ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eea:	4b10      	ldr	r3, [pc, #64]	@ (8008f2c <_Z23getFont_verdana_30_4bppv+0x64>)
 8008eec:	4810      	ldr	r0, [pc, #64]	@ (8008f30 <_Z23getFont_verdana_30_4bppv+0x68>)
 8008eee:	9308      	str	r3, [sp, #32]
 8008ef0:	4b10      	ldr	r3, [pc, #64]	@ (8008f34 <_Z23getFont_verdana_30_4bppv+0x6c>)
 8008ef2:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ef4:	9405      	str	r4, [sp, #20]
 8008ef6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8008efa:	2304      	movs	r3, #4
 8008efc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8008f00:	231e      	movs	r3, #30
 8008f02:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8008f0c:	f7ff fc78 	bl	8008800 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008f10:	4809      	ldr	r0, [pc, #36]	@ (8008f38 <_Z23getFont_verdana_30_4bppv+0x70>)
 8008f12:	f021 f9a3 	bl	802a25c <atexit>
 8008f16:	4628      	mov	r0, r5
 8008f18:	f020 fd3c 	bl	8029994 <__cxa_guard_release>
    return verdana_30_4bpp;
}
 8008f1c:	4804      	ldr	r0, [pc, #16]	@ (8008f30 <_Z23getFont_verdana_30_4bppv+0x68>)
 8008f1e:	b00f      	add	sp, #60	@ 0x3c
 8008f20:	bd30      	pop	{r4, r5, pc}
 8008f22:	bf00      	nop
 8008f24:	2400e6e0 	.word	0x2400e6e0
 8008f28:	0804b380 	.word	0x0804b380
 8008f2c:	0804c2c4 	.word	0x0804c2c4
 8008f30:	2400e6e4 	.word	0x2400e6e4
 8008f34:	0804c6d8 	.word	0x0804c6d8
 8008f38:	08008ec5 	.word	0x08008ec5

08008f3c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008f3c:	4770      	bx	lr
	...

08008f40 <_Z23getFont_verdana_40_4bppv>:
{
 8008f40:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008f42:	4d17      	ldr	r5, [pc, #92]	@ (8008fa0 <_Z23getFont_verdana_40_4bppv+0x60>)
{
 8008f44:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008f46:	682c      	ldr	r4, [r5, #0]
 8008f48:	f3bf 8f5b 	dmb	ish
 8008f4c:	f014 0401 	ands.w	r4, r4, #1
 8008f50:	d123      	bne.n	8008f9a <_Z23getFont_verdana_40_4bppv+0x5a>
 8008f52:	4628      	mov	r0, r5
 8008f54:	f020 fd12 	bl	802997c <__cxa_guard_acquire>
 8008f58:	b1f8      	cbz	r0, 8008f9a <_Z23getFont_verdana_40_4bppv+0x5a>
 8008f5a:	233f      	movs	r3, #63	@ 0x3f
 8008f5c:	2204      	movs	r2, #4
 8008f5e:	4911      	ldr	r1, [pc, #68]	@ (8008fa4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8008f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f62:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <_Z23getFont_verdana_40_4bppv+0x68>)
 8008f64:	4811      	ldr	r0, [pc, #68]	@ (8008fac <_Z23getFont_verdana_40_4bppv+0x6c>)
 8008f66:	9308      	str	r3, [sp, #32]
 8008f68:	4b11      	ldr	r3, [pc, #68]	@ (8008fb0 <_Z23getFont_verdana_40_4bppv+0x70>)
 8008f6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f6c:	9307      	str	r3, [sp, #28]
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008f74:	2301      	movs	r3, #1
 8008f76:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8008f7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f7e:	2328      	movs	r3, #40	@ 0x28
 8008f80:	22bf      	movs	r2, #191	@ 0xbf
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	2330      	movs	r3, #48	@ 0x30
 8008f86:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008f8a:	f7ff fc39 	bl	8008800 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008f8e:	4809      	ldr	r0, [pc, #36]	@ (8008fb4 <_Z23getFont_verdana_40_4bppv+0x74>)
 8008f90:	f021 f964 	bl	802a25c <atexit>
 8008f94:	4628      	mov	r0, r5
 8008f96:	f020 fcfd 	bl	8029994 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8008f9a:	4804      	ldr	r0, [pc, #16]	@ (8008fac <_Z23getFont_verdana_40_4bppv+0x6c>)
 8008f9c:	b00f      	add	sp, #60	@ 0x3c
 8008f9e:	bd30      	pop	{r4, r5, pc}
 8008fa0:	2400e710 	.word	0x2400e710
 8008fa4:	0804b390 	.word	0x0804b390
 8008fa8:	0804c2c8 	.word	0x0804c2c8
 8008fac:	2400e714 	.word	0x2400e714
 8008fb0:	0804c6dc 	.word	0x0804c6dc
 8008fb4:	08008f3d 	.word	0x08008f3d

08008fb8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8008fb8:	2000      	movs	r0, #0
 8008fba:	4770      	bx	lr

08008fbc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	4770      	bx	lr

08008fc0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008fc0:	b40e      	push	{r1, r2, r3}
 8008fc2:	b503      	push	{r0, r1, lr}
 8008fc4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008fc6:	2100      	movs	r1, #0
{
 8008fc8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8008fcc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008fce:	f013 f827 	bl	801c020 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8008fd2:	b002      	add	sp, #8
 8008fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fd8:	b003      	add	sp, #12
 8008fda:	4770      	bx	lr

08008fdc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008fdc:	b40c      	push	{r2, r3}
 8008fde:	b507      	push	{r0, r1, r2, lr}
 8008fe0:	ab04      	add	r3, sp, #16
 8008fe2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8008fe6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008fe8:	f013 f81a 	bl	801c020 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8008fec:	b003      	add	sp, #12
 8008fee:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ff2:	b002      	add	sp, #8
 8008ff4:	4770      	bx	lr
	...

08008ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8008ff8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8008ffe:	b373      	cbz	r3, 800905e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009000:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8009002:	b92b      	cbnz	r3, 8009010 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8009004:	4b18      	ldr	r3, [pc, #96]	@ (8009068 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8009006:	21c5      	movs	r1, #197	@ 0xc5
 8009008:	4a18      	ldr	r2, [pc, #96]	@ (800906c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800900a:	4819      	ldr	r0, [pc, #100]	@ (8009070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800900c:	f021 f908 	bl	802a220 <__assert_func>
            return buffer[pos];
 8009010:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8009012:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009016:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8009018:	b30b      	cbz	r3, 800905e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800901a:	f014 fee3 	bl	801dde4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800901e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8009020:	2b01      	cmp	r3, #1
 8009022:	d803      	bhi.n	800902c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8009024:	4b13      	ldr	r3, [pc, #76]	@ (8009074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8009026:	21cb      	movs	r1, #203	@ 0xcb
 8009028:	4a13      	ldr	r2, [pc, #76]	@ (8009078 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800902a:	e7ee      	b.n	800900a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800902c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800902e:	f640 103f 	movw	r0, #2367	@ 0x93f
 8009032:	1c53      	adds	r3, r2, #1
 8009034:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8009036:	2b09      	cmp	r3, #9
 8009038:	4619      	mov	r1, r3
 800903a:	bf88      	it	hi
 800903c:	f1a3 010a 	subhi.w	r1, r3, #10
 8009040:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8009044:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8009046:	4281      	cmp	r1, r0
 8009048:	d109      	bne.n	800905e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800904a:	2b0a      	cmp	r3, #10
 800904c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009050:	bf28      	it	cs
 8009052:	2300      	movcs	r3, #0
            return buffer[pos];
 8009054:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8009056:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800905a:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 800905c:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800905e:	4620      	mov	r0, r4
}
 8009060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8009064:	f014 bdc0 	b.w	801dbe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009068:	0802f7d4 	.word	0x0802f7d4
 800906c:	0802f7dd 	.word	0x0802f7dd
 8009070:	0802f888 	.word	0x0802f888
 8009074:	0802f8e0 	.word	0x0802f8e0
 8009078:	0802f8ee 	.word	0x0802f8ee

0800907c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800907c:	f014 bd7d 	b.w	801db7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08009080 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8009080:	b510      	push	{r4, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	ac02      	add	r4, sp, #8
 8009086:	e884 0006 	stmia.w	r4, {r1, r2}
 800908a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 800908c:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800908e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8009090:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	9b08      	ldr	r3, [sp, #32]
 800909a:	f011 fbf1 	bl	801a880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800909e:	b006      	add	sp, #24
 80090a0:	bd10      	pop	{r4, pc}
	...

080090a4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80090a4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80090a6:	bb18      	cbnz	r0, 80090f0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80090a8:	4b12      	ldr	r3, [pc, #72]	@ (80090f4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80090aa:	4813      	ldr	r0, [pc, #76]	@ (80090f8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80090ac:	681c      	ldr	r4, [r3, #0]
 80090ae:	4913      	ldr	r1, [pc, #76]	@ (80090fc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80090b0:	b1b4      	cbz	r4, 80090e0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80090b2:	6822      	ldr	r2, [r4, #0]
 80090b4:	4422      	add	r2, r4
 80090b6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80090b8:	6862      	ldr	r2, [r4, #4]
 80090ba:	4422      	add	r2, r4
 80090bc:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80090be:	68a2      	ldr	r2, [r4, #8]
 80090c0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80090c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009100 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80090c8:	f000 f838 	bl	800913c <_ZN17TypedTextDatabase8getFontsEv>
 80090cc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80090ce:	f000 f833 	bl	8009138 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80090d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80090d4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80090d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009108 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80090d8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80090da:	4b0c      	ldr	r3, [pc, #48]	@ (800910c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80090dc:	8018      	strh	r0, [r3, #0]
    }
}
 80090de:	e007      	b.n	80090f0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80090e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009110 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80090e2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80090e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009114 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80090e6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80090e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009118 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80090ea:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80090ec:	2c00      	cmp	r4, #0
 80090ee:	d1e8      	bne.n	80090c2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	bf00      	nop
 80090f4:	2400e74c 	.word	0x2400e74c
 80090f8:	2400e744 	.word	0x2400e744
 80090fc:	2400e740 	.word	0x2400e740
 8009100:	2400e748 	.word	0x2400e748
 8009104:	240287c8 	.word	0x240287c8
 8009108:	240287d0 	.word	0x240287d0
 800910c:	240287cc 	.word	0x240287cc
 8009110:	9071c378 	.word	0x9071c378
 8009114:	9071c300 	.word	0x9071c300
 8009118:	9071c43c 	.word	0x9071c43c

0800911c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800911c:	4b04      	ldr	r3, [pc, #16]	@ (8009130 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8009124:	4b03      	ldr	r3, [pc, #12]	@ (8009134 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8009126:	681b      	ldr	r3, [r3, #0]
}
 8009128:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	2400e740 	.word	0x2400e740
 8009134:	2400e744 	.word	0x2400e744

08009138 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8009138:	201e      	movs	r0, #30
 800913a:	4770      	bx	lr

0800913c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800913c:	4800      	ldr	r0, [pc, #0]	@ (8009140 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800913e:	4770      	bx	lr
 8009140:	2400e750 	.word	0x2400e750

08009144 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdana_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009144:	b510      	push	{r4, lr}
};
 8009146:	4c08      	ldr	r4, [pc, #32]	@ (8009168 <_GLOBAL__sub_I_touchgfx_fonts+0x24>)
    &(getFont_verdana_20_4bpp()),
 8009148:	f7ff fe42 	bl	8008dd0 <_Z23getFont_verdana_20_4bppv>
};
 800914c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800914e:	f7ff fef7 	bl	8008f40 <_Z23getFont_verdana_40_4bppv>
};
 8009152:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8009154:	f7ff fdfe 	bl	8008d54 <_Z23getFont_verdana_10_4bppv>
};
 8009158:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_21_4bpp()),
 800915a:	f7ff fe77 	bl	8008e4c <_Z23getFont_verdana_21_4bppv>
};
 800915e:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_30_4bpp())
 8009160:	f7ff feb2 	bl	8008ec8 <_Z23getFont_verdana_30_4bppv>
};
 8009164:	6120      	str	r0, [r4, #16]
} // namespace TypedTextDatabase
 8009166:	bd10      	pop	{r4, pc}
 8009168:	2400e750 	.word	0x2400e750

0800916c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800916c:	b510      	push	{r4, lr}
    pointArray = 0;
 800916e:	2400      	movs	r4, #0
 8009170:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8009172:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8009174:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8009176:	601c      	str	r4, [r3, #0]
}
 8009178:	bd10      	pop	{r4, pc}

0800917a <_ZN19CalculatorPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~CalculatorPresenter() {}
 800917a:	4770      	bx	lr

0800917c <_ZThn4_N19CalculatorPresenterD1Ev>:
 800917c:	3804      	subs	r0, #4
 800917e:	4770      	bx	lr

08009180 <_ZN19CalculatorPresenter10deactivateEv>:
}

void CalculatorPresenter::activate()
{

}
 8009180:	4770      	bx	lr

08009182 <_ZN19CalculatorPresenterD0Ev>:
 8009182:	b510      	push	{r4, lr}
 8009184:	4604      	mov	r4, r0
 8009186:	2110      	movs	r1, #16
 8009188:	f020 fbf6 	bl	8029978 <_ZdlPvj>
 800918c:	4620      	mov	r0, r4
 800918e:	bd10      	pop	{r4, pc}

08009190 <_ZThn4_N19CalculatorPresenterD0Ev>:
 8009190:	f1a0 0004 	sub.w	r0, r0, #4
 8009194:	e7f5      	b.n	8009182 <_ZN19CalculatorPresenterD0Ev>

08009196 <_ZN19CalculatorPresenter7OnEventE10EEventType12UMessageData12EEventClient>:
{
	return model->sendEvent(ASYNC_REQUEST_CALCULATE, request, EVENT_CLIENT_CALCULATOR);
}

void CalculatorPresenter::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
{
 8009196:	b082      	sub	sp, #8
	switch(event)
 8009198:	2903      	cmp	r1, #3
{
 800919a:	b508      	push	{r3, lr}
 800919c:	f10d 0c08 	add.w	ip, sp, #8
 80091a0:	e88c 000c 	stmia.w	ip, {r2, r3}
	switch(event)
 80091a4:	d103      	bne.n	80091ae <_ZN19CalculatorPresenter7OnEventE10EEventType12UMessageData12EEventClient+0x18>
	{
		case ASYNC_COMPLETED_CALCULATE:
			view.setCalculationResult(msg.calculation_result);
 80091a6:	4661      	mov	r1, ip
 80091a8:	68c0      	ldr	r0, [r0, #12]
 80091aa:	f000 f86b 	bl	8009284 <_ZN14CalculatorView20setCalculationResultEPh>
			break;
		default:
			break;
	}
}
 80091ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80091b2:	b002      	add	sp, #8
 80091b4:	4770      	bx	lr

080091b6 <_ZThn4_N19CalculatorPresenter7OnEventE10EEventType12UMessageData12EEventClient>:

    void OnEvent(EEventType event, UMessageData msg, EEventClient eventSender) override;
 80091b6:	f1a0 0004 	sub.w	r0, r0, #4
 80091ba:	f7ff bfec 	b.w	8009196 <_ZN19CalculatorPresenter7OnEventE10EEventType12UMessageData12EEventClient>
	...

080091c0 <_ZN19CalculatorPresenterC1ER14CalculatorView>:
    ModelListener() : model(0) {}
 80091c0:	2200      	movs	r2, #0
    : view(v)
 80091c2:	60c1      	str	r1, [r0, #12]
 80091c4:	6082      	str	r2, [r0, #8]
 80091c6:	4a02      	ldr	r2, [pc, #8]	@ (80091d0 <_ZN19CalculatorPresenterC1ER14CalculatorView+0x10>)
 80091c8:	6002      	str	r2, [r0, #0]
 80091ca:	321c      	adds	r2, #28
 80091cc:	6042      	str	r2, [r0, #4]
}
 80091ce:	4770      	bx	lr
 80091d0:	0802f9c8 	.word	0x0802f9c8

080091d4 <_ZN19CalculatorPresenter22sendCalculationRequestE12UMessageData>:
{
 80091d4:	b084      	sub	sp, #16
 80091d6:	b530      	push	{r4, r5, lr}
 80091d8:	b085      	sub	sp, #20
 80091da:	4605      	mov	r5, r0
 80091dc:	ac09      	add	r4, sp, #36	@ 0x24
 80091de:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	return model->sendEvent(ASYNC_REQUEST_CALCULATE, request, EVENT_CLIENT_CALCULATOR);
 80091e2:	2301      	movs	r3, #1
 80091e4:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	@ 0x2c
 80091e8:	9302      	str	r3, [sp, #8]
 80091ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 80091ee:	2102      	movs	r1, #2
 80091f0:	68a8      	ldr	r0, [r5, #8]
 80091f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80091f6:	f000 fa1d 	bl	8009634 <_ZN5Model9sendEventE10EEventType12UMessageData12EEventClient>
}
 80091fa:	b005      	add	sp, #20
 80091fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009200:	b004      	add	sp, #16
 8009202:	4770      	bx	lr

08009204 <_ZN14CalculatorView14tearDownScreenEv>:
}

void CalculatorView::tearDownScreen()
{
    CalculatorViewBase::tearDownScreen();
}
 8009204:	4770      	bx	lr

08009206 <_ZN14CalculatorView23sendToCalculator_EqualsEv>:

void CalculatorView::sendToCalculator_Equals()
{
 8009206:	b530      	push	{r4, r5, lr}
 8009208:	b087      	sub	sp, #28
 800920a:	4604      	mov	r4, r0
	UMessageData request;
	for(int i = 0; i < 16; i++)
	{
		request.calculation_request[i] = 0;
 800920c:	2210      	movs	r2, #16
 800920e:	2100      	movs	r1, #0
 8009210:	ad02      	add	r5, sp, #8
 8009212:	4628      	mov	r0, r5
 8009214:	f022 f956 	bl	802b4c4 <memset>
	}
	Unicode::toUTF8(TextResultBuffer, request.calculation_request, char_counter);
 8009218:	f8b4 26ec 	ldrh.w	r2, [r4, #1772]	@ 0x6ec
 800921c:	4629      	mov	r1, r5
 800921e:	f204 60bc 	addw	r0, r4, #1724	@ 0x6bc
 8009222:	f015 fbe5 	bl	801e9f0 <_ZN8touchgfx7Unicode6toUTF8EPKtPht>
	presenter->sendCalculationRequest(request);
 8009226:	9b05      	ldr	r3, [sp, #20]
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800922c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8009230:	f7ff ffd0 	bl	80091d4 <_ZN19CalculatorPresenter22sendCalculationRequestE12UMessageData>
}
 8009234:	b007      	add	sp, #28
 8009236:	bd30      	pop	{r4, r5, pc}

08009238 <_ZN14CalculatorViewD1Ev>:

class CalculatorView : public CalculatorViewBase
{
public:
    CalculatorView();
    virtual ~CalculatorView() {}
 8009238:	4b03      	ldr	r3, [pc, #12]	@ (8009248 <_ZN14CalculatorViewD1Ev+0x10>)
 800923a:	b510      	push	{r4, lr}
 800923c:	4604      	mov	r4, r0
 800923e:	6003      	str	r3, [r0, #0]
 8009240:	f7fb f9c3 	bl	80045ca <_ZN18CalculatorViewBaseD1Ev>
 8009244:	4620      	mov	r0, r4
 8009246:	bd10      	pop	{r4, pc}
 8009248:	0802fa58 	.word	0x0802fa58

0800924c <_ZN14CalculatorViewD0Ev>:
 800924c:	b510      	push	{r4, lr}
 800924e:	4604      	mov	r4, r0
 8009250:	f7ff fff2 	bl	8009238 <_ZN14CalculatorViewD1Ev>
 8009254:	f44f 61de 	mov.w	r1, #1776	@ 0x6f0
 8009258:	4620      	mov	r0, r4
 800925a:	f020 fb8d 	bl	8029978 <_ZdlPvj>
 800925e:	4620      	mov	r0, r4
 8009260:	bd10      	pop	{r4, pc}
	...

08009264 <_ZN14CalculatorViewC1Ev>:
CalculatorView::CalculatorView()
 8009264:	b510      	push	{r4, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	f7fb fb68 	bl	800493c <_ZN18CalculatorViewBaseC1Ev>
 800926c:	4b03      	ldr	r3, [pc, #12]	@ (800927c <_ZN14CalculatorViewC1Ev+0x18>)
}
 800926e:	4620      	mov	r0, r4
CalculatorView::CalculatorView()
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	2300      	movs	r3, #0
 8009274:	f8c4 36ec 	str.w	r3, [r4, #1772]	@ 0x6ec
}
 8009278:	bd10      	pop	{r4, pc}
 800927a:	bf00      	nop
 800927c:	0802fa58 	.word	0x0802fa58

08009280 <_ZN14CalculatorView11setupScreenEv>:
    CalculatorViewBase::setupScreen();
 8009280:	f7fb b9a4 	b.w	80045cc <_ZN18CalculatorViewBase11setupScreenEv>

08009284 <_ZN14CalculatorView20setCalculationResultEPh>:

void CalculatorView::setCalculationResult(unsigned char result[])
{
 8009284:	b510      	push	{r4, lr}
 8009286:	4604      	mov	r4, r0
	touchgfx::Unicode::fromUTF8(result, TextResultBuffer, TEXTRESULT_SIZE);
 8009288:	2210      	movs	r2, #16
{
 800928a:	4608      	mov	r0, r1
	touchgfx::Unicode::fromUTF8(result, TextResultBuffer, TEXTRESULT_SIZE);
 800928c:	f204 61bc 	addw	r1, r4, #1724	@ 0x6bc
 8009290:	f015 fb6f 	bl	801e972 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt>
//	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", result);
	TextResult.invalidate();
 8009294:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
	//TODO dodaj flage ze po wyniku kalkulacji dodanie kolejnego znaku zeruje bufor;
}
 8009298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TextResult.invalidate();
 800929c:	f012 bfeb 	b.w	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>

080092a0 <_ZN14CalculatorView7addCharEc>:

bool CalculatorView::addChar(char character)
{
	if(char_counter > TEXTRESULT_SIZE - 1)
 80092a0:	f8d0 36ec 	ldr.w	r3, [r0, #1772]	@ 0x6ec
 80092a4:	2b0f      	cmp	r3, #15
{
 80092a6:	b570      	push	{r4, r5, r6, lr}
 80092a8:	4604      	mov	r4, r0
 80092aa:	b088      	sub	sp, #32
 80092ac:	460d      	mov	r5, r1
	if(char_counter > TEXTRESULT_SIZE - 1)
 80092ae:	dc3c      	bgt.n	800932a <_ZN14CalculatorView7addCharEc+0x8a>
	{
		return false;
	}
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80092b0:	f204 66bc 	addw	r6, r4, #1724	@ 0x6bc
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 80092b4:	2220      	movs	r2, #32
 80092b6:	2100      	movs	r1, #0
 80092b8:	4668      	mov	r0, sp
 80092ba:	f022 f903 	bl	802b4c4 <memset>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80092be:	2210      	movs	r2, #16
 80092c0:	4631      	mov	r1, r6
 80092c2:	4668      	mov	r0, sp
 80092c4:	f014 ffd7 	bl	801e276 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	new_buf[char_counter] = character;
 80092c8:	f8d4 36ec 	ldr.w	r3, [r4, #1772]	@ 0x6ec
 80092cc:	aa08      	add	r2, sp, #32
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80092ce:	2110      	movs	r1, #16
 80092d0:	4630      	mov	r0, r6
	new_buf[char_counter] = character;
 80092d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80092d6:	4a16      	ldr	r2, [pc, #88]	@ (8009330 <_ZN14CalculatorView7addCharEc+0x90>)
	new_buf[char_counter] = character;
 80092d8:	f823 5c20 	strh.w	r5, [r3, #-32]
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80092dc:	466b      	mov	r3, sp
 80092de:	f015 fb3b 	bl	801e958 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TextResult.invalidate();
 80092e2:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 80092e6:	f012 ffc6 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter++;
 80092ea:	f8d4 36ec 	ldr.w	r3, [r4, #1772]	@ 0x6ec
 80092ee:	3301      	adds	r3, #1
 80092f0:	f8c4 36ec 	str.w	r3, [r4, #1772]	@ 0x6ec
	LOG_DEBUG("sizeof double: %d", sizeof(double));
 80092f4:	f7f7 fbe6 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 80092f8:	2208      	movs	r2, #8
 80092fa:	490e      	ldr	r1, [pc, #56]	@ (8009334 <_ZN14CalculatorView7addCharEc+0x94>)
 80092fc:	f7f7 fbfc 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
	LOG_DEBUG("sizeof float: %d", sizeof(float));
 8009300:	f7f7 fbe0 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 8009304:	2204      	movs	r2, #4
 8009306:	490c      	ldr	r1, [pc, #48]	@ (8009338 <_ZN14CalculatorView7addCharEc+0x98>)
 8009308:	f7f7 fbf6 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
	LOG_DEBUG("sizeof int: %d", sizeof(int));
 800930c:	f7f7 fbda 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 8009310:	2204      	movs	r2, #4
 8009312:	490a      	ldr	r1, [pc, #40]	@ (800933c <_ZN14CalculatorView7addCharEc+0x9c>)
 8009314:	f7f7 fbf0 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
	LOG_DEBUG("sizeof char: %d", sizeof(char));
 8009318:	f7f7 fbd4 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 800931c:	2201      	movs	r2, #1
 800931e:	4908      	ldr	r1, [pc, #32]	@ (8009340 <_ZN14CalculatorView7addCharEc+0xa0>)
 8009320:	f7f7 fbea 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
	return true;
 8009324:	2001      	movs	r0, #1
}
 8009326:	b008      	add	sp, #32
 8009328:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 800932a:	2000      	movs	r0, #0
 800932c:	e7fb      	b.n	8009326 <_ZN14CalculatorView7addCharEc+0x86>
 800932e:	bf00      	nop
 8009330:	0802ecb3 	.word	0x0802ecb3
 8009334:	0802f9f0 	.word	0x0802f9f0
 8009338:	0802fa02 	.word	0x0802fa02
 800933c:	0802fa13 	.word	0x0802fa13
 8009340:	0802fa22 	.word	0x0802fa22

08009344 <_ZN14CalculatorView18sendToCalculator_0Ev>:
	char_counter = 0;
}

void CalculatorView::sendToCalculator_0()
{
	addChar('0');
 8009344:	2130      	movs	r1, #48	@ 0x30
 8009346:	f7ff bfab 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

0800934a <_ZN14CalculatorView18sendToCalculator_1Ev>:
}

void CalculatorView::sendToCalculator_1()
{
	addChar('1');
 800934a:	2131      	movs	r1, #49	@ 0x31
 800934c:	f7ff bfa8 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009350 <_ZN14CalculatorView18sendToCalculator_2Ev>:
}

void CalculatorView::sendToCalculator_2()
{
	addChar('2');
 8009350:	2132      	movs	r1, #50	@ 0x32
 8009352:	f7ff bfa5 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009356 <_ZN14CalculatorView18sendToCalculator_3Ev>:
}

void CalculatorView::sendToCalculator_3()
{
	addChar('3');
 8009356:	2133      	movs	r1, #51	@ 0x33
 8009358:	f7ff bfa2 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

0800935c <_ZN14CalculatorView18sendToCalculator_4Ev>:
}

void CalculatorView::sendToCalculator_4()
{
	addChar('4');
 800935c:	2134      	movs	r1, #52	@ 0x34
 800935e:	f7ff bf9f 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009362 <_ZN14CalculatorView18sendToCalculator_5Ev>:
}

void CalculatorView::sendToCalculator_5()
{
	addChar('5');
 8009362:	2135      	movs	r1, #53	@ 0x35
 8009364:	f7ff bf9c 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009368 <_ZN14CalculatorView18sendToCalculator_6Ev>:
}

void CalculatorView::sendToCalculator_6()
{
	addChar('6');
 8009368:	2136      	movs	r1, #54	@ 0x36
 800936a:	f7ff bf99 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

0800936e <_ZN14CalculatorView18sendToCalculator_7Ev>:
}

void CalculatorView::sendToCalculator_7()
{
	addChar('7');
 800936e:	2137      	movs	r1, #55	@ 0x37
 8009370:	f7ff bf96 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009374 <_ZN14CalculatorView18sendToCalculator_8Ev>:
}

void CalculatorView::sendToCalculator_8()
{
	addChar('8');
 8009374:	2138      	movs	r1, #56	@ 0x38
 8009376:	f7ff bf93 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

0800937a <_ZN14CalculatorView18sendToCalculator_9Ev>:
}

void CalculatorView::sendToCalculator_9()
{
	addChar('9');
 800937a:	2139      	movs	r1, #57	@ 0x39
 800937c:	f7ff bf90 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009380 <_ZN14CalculatorView20sendToCalculator_AddEv>:
}

void CalculatorView::sendToCalculator_Add()
{
	addChar('+');
 8009380:	212b      	movs	r1, #43	@ 0x2b
 8009382:	f7ff bf8d 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009386 <_ZN14CalculatorView32sendToCalculator_OpenParenthesisEv>:
	removeLastChar();
}

void CalculatorView::sendToCalculator_OpenParenthesis()
{
	addChar('(');
 8009386:	2128      	movs	r1, #40	@ 0x28
 8009388:	f7ff bf8a 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

0800938c <_ZN14CalculatorView33sendToCalculator_CloseParenthesisEv>:
}

void CalculatorView::sendToCalculator_CloseParenthesis()
{
	addChar(')');
 800938c:	2129      	movs	r1, #41	@ 0x29
 800938e:	f7ff bf87 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009392 <_ZN14CalculatorView25sendToCalculator_SubtractEv>:
}

void CalculatorView::sendToCalculator_Subtract()
{
	addChar('-');
 8009392:	212d      	movs	r1, #45	@ 0x2d
 8009394:	f7ff bf84 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

08009398 <_ZN14CalculatorView25sendToCalculator_MultiplyEv>:
}

void CalculatorView::sendToCalculator_Multiply()
{
	addChar('*');
 8009398:	212a      	movs	r1, #42	@ 0x2a
 800939a:	f7ff bf81 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

0800939e <_ZN14CalculatorView23sendToCalculator_DivideEv>:
}

void CalculatorView::sendToCalculator_Divide()
{
	addChar('/');
 800939e:	212f      	movs	r1, #47	@ 0x2f
 80093a0:	f7ff bf7e 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>

080093a4 <_ZN14CalculatorView22sendToCalculator_CommaEv>:
}

void CalculatorView::sendToCalculator_Comma()
{
	addChar(',');
 80093a4:	212c      	movs	r1, #44	@ 0x2c
 80093a6:	f7ff bf7b 	b.w	80092a0 <_ZN14CalculatorView7addCharEc>
	...

080093ac <_ZN14CalculatorView14removeLastCharEv>:
	if(char_counter < 1)
 80093ac:	f8d0 36ec 	ldr.w	r3, [r0, #1772]	@ 0x6ec
 80093b0:	2b00      	cmp	r3, #0
{
 80093b2:	b530      	push	{r4, r5, lr}
 80093b4:	4604      	mov	r4, r0
 80093b6:	b089      	sub	sp, #36	@ 0x24
	if(char_counter < 1)
 80093b8:	dd2d      	ble.n	8009416 <_ZN14CalculatorView14removeLastCharEv+0x6a>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80093ba:	f204 65bc 	addw	r5, r4, #1724	@ 0x6bc
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 80093be:	2220      	movs	r2, #32
 80093c0:	2100      	movs	r1, #0
 80093c2:	4668      	mov	r0, sp
 80093c4:	f022 f87e 	bl	802b4c4 <memset>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80093c8:	2210      	movs	r2, #16
 80093ca:	4629      	mov	r1, r5
 80093cc:	4668      	mov	r0, sp
 80093ce:	f014 ff52 	bl	801e276 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	new_buf[char_counter-1] = '\0';
 80093d2:	f8d4 36ec 	ldr.w	r3, [r4, #1772]	@ 0x6ec
 80093d6:	aa08      	add	r2, sp, #32
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80093d8:	2110      	movs	r1, #16
	new_buf[char_counter-1] = '\0';
 80093da:	3b01      	subs	r3, #1
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80093dc:	4628      	mov	r0, r5
	new_buf[char_counter-1] = '\0';
 80093de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80093e2:	2200      	movs	r2, #0
 80093e4:	f823 2c20 	strh.w	r2, [r3, #-32]
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 80093e8:	466b      	mov	r3, sp
 80093ea:	4a0c      	ldr	r2, [pc, #48]	@ (800941c <_ZN14CalculatorView14removeLastCharEv+0x70>)
 80093ec:	f015 fab4 	bl	801e958 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TextResult.invalidate();
 80093f0:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 80093f4:	f012 ff3f 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter--;
 80093f8:	f8d4 36ec 	ldr.w	r3, [r4, #1772]	@ 0x6ec
 80093fc:	3b01      	subs	r3, #1
 80093fe:	f8c4 36ec 	str.w	r3, [r4, #1772]	@ 0x6ec
	LOG_DEBUG("Calculator; char_count: %d", char_counter);
 8009402:	f7f7 fb5f 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 8009406:	f8d4 26ec 	ldr.w	r2, [r4, #1772]	@ 0x6ec
 800940a:	4905      	ldr	r1, [pc, #20]	@ (8009420 <_ZN14CalculatorView14removeLastCharEv+0x74>)
 800940c:	f7f7 fb74 	bl	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
	return true;
 8009410:	2001      	movs	r0, #1
}
 8009412:	b009      	add	sp, #36	@ 0x24
 8009414:	bd30      	pop	{r4, r5, pc}
		return false;
 8009416:	2000      	movs	r0, #0
 8009418:	e7fb      	b.n	8009412 <_ZN14CalculatorView14removeLastCharEv+0x66>
 800941a:	bf00      	nop
 800941c:	0802ecb3 	.word	0x0802ecb3
 8009420:	0802fa32 	.word	0x0802fa32

08009424 <_ZN14CalculatorView23sendToCalculator_DeleteEv>:
	removeLastChar();
 8009424:	f7ff bfc2 	b.w	80093ac <_ZN14CalculatorView14removeLastCharEv>

08009428 <_ZN14CalculatorView9clearTextEv>:
{
 8009428:	b510      	push	{r4, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	4604      	mov	r4, r0
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 800942e:	2220      	movs	r2, #32
 8009430:	2100      	movs	r1, #0
 8009432:	4668      	mov	r0, sp
 8009434:	f022 f846 	bl	802b4c4 <memset>
	touchgfx::Unicode::strncpy(TextResultBuffer, new_buf, TEXTRESULT_SIZE);
 8009438:	2210      	movs	r2, #16
 800943a:	4669      	mov	r1, sp
 800943c:	f204 60bc 	addw	r0, r4, #1724	@ 0x6bc
 8009440:	f014 ff19 	bl	801e276 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	TextResult.invalidate();
 8009444:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8009448:	f012 ff15 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	f8c4 36ec 	str.w	r3, [r4, #1772]	@ 0x6ec
}
 8009452:	b008      	add	sp, #32
 8009454:	bd10      	pop	{r4, pc}

08009456 <_ZN14CalculatorView22sendToCalculator_ClearEv>:
}

void CalculatorView::sendToCalculator_Clear()
{
	clearText();
 8009456:	f7ff bfe7 	b.w	8009428 <_ZN14CalculatorView9clearTextEv>

0800945a <_ZN17DiagnosePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~DiagnosePresenter() {}
 800945a:	4770      	bx	lr

0800945c <_ZThn4_N17DiagnosePresenterD1Ev>:
 800945c:	3804      	subs	r0, #4
 800945e:	4770      	bx	lr

08009460 <_ZN17DiagnosePresenter10deactivateEv>:
}

void DiagnosePresenter::activate()
{

}
 8009460:	4770      	bx	lr

08009462 <_ZN17DiagnosePresenter7OnEventE10EEventType12UMessageData12EEventClient>:
{

}

void DiagnosePresenter::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
{
 8009462:	b082      	sub	sp, #8
 8009464:	e88d 000c 	stmia.w	sp, {r2, r3}

}
 8009468:	b002      	add	sp, #8
 800946a:	4770      	bx	lr

0800946c <_ZN17DiagnosePresenterD0Ev>:
 800946c:	b510      	push	{r4, lr}
 800946e:	4604      	mov	r4, r0
 8009470:	2110      	movs	r1, #16
 8009472:	f020 fa81 	bl	8029978 <_ZdlPvj>
 8009476:	4620      	mov	r0, r4
 8009478:	bd10      	pop	{r4, pc}

0800947a <_ZThn4_N17DiagnosePresenterD0Ev>:
 800947a:	f1a0 0004 	sub.w	r0, r0, #4
 800947e:	e7f5      	b.n	800946c <_ZN17DiagnosePresenterD0Ev>

08009480 <_ZThn4_N17DiagnosePresenter7OnEventE10EEventType12UMessageData12EEventClient>:

    void OnEvent(EEventType event, UMessageData msg, EEventClient eventSender) override;
 8009480:	b082      	sub	sp, #8
 8009482:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009486:	b002      	add	sp, #8
 8009488:	4770      	bx	lr
	...

0800948c <_ZN17DiagnosePresenterC1ER12DiagnoseView>:
 800948c:	2200      	movs	r2, #0
    : view(v)
 800948e:	60c1      	str	r1, [r0, #12]
 8009490:	6082      	str	r2, [r0, #8]
 8009492:	4a02      	ldr	r2, [pc, #8]	@ (800949c <_ZN17DiagnosePresenterC1ER12DiagnoseView+0x10>)
 8009494:	6002      	str	r2, [r0, #0]
 8009496:	321c      	adds	r2, #28
 8009498:	6042      	str	r2, [r0, #4]
}
 800949a:	4770      	bx	lr
 800949c:	0802fadc 	.word	0x0802fadc

080094a0 <_ZN12DiagnoseView14tearDownScreenEv>:
}

void DiagnoseView::tearDownScreen()
{
    DiagnoseViewBase::tearDownScreen();
}
 80094a0:	4770      	bx	lr
	...

080094a4 <_ZN12DiagnoseViewD1Ev>:

class DiagnoseView : public DiagnoseViewBase
{
public:
    DiagnoseView();
    virtual ~DiagnoseView() {}
 80094a4:	4b03      	ldr	r3, [pc, #12]	@ (80094b4 <_ZN12DiagnoseViewD1Ev+0x10>)
 80094a6:	b510      	push	{r4, lr}
 80094a8:	4604      	mov	r4, r0
 80094aa:	6003      	str	r3, [r0, #0]
 80094ac:	f7fc f9dc 	bl	8005868 <_ZN16DiagnoseViewBaseD1Ev>
 80094b0:	4620      	mov	r0, r4
 80094b2:	bd10      	pop	{r4, pc}
 80094b4:	0802fb0c 	.word	0x0802fb0c

080094b8 <_ZN12DiagnoseViewD0Ev>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4604      	mov	r4, r0
 80094bc:	f7ff fff2 	bl	80094a4 <_ZN12DiagnoseViewD1Ev>
 80094c0:	f243 417c 	movw	r1, #13436	@ 0x347c
 80094c4:	4620      	mov	r0, r4
 80094c6:	f020 fa57 	bl	8029978 <_ZdlPvj>
 80094ca:	4620      	mov	r0, r4
 80094cc:	bd10      	pop	{r4, pc}
	...

080094d0 <_ZN12DiagnoseViewC1Ev>:
DiagnoseView::DiagnoseView()
 80094d0:	b510      	push	{r4, lr}
 80094d2:	4604      	mov	r4, r0
 80094d4:	f7fc fa78 	bl	80059c8 <_ZN16DiagnoseViewBaseC1Ev>
 80094d8:	4b01      	ldr	r3, [pc, #4]	@ (80094e0 <_ZN12DiagnoseViewC1Ev+0x10>)
}
 80094da:	4620      	mov	r0, r4
DiagnoseView::DiagnoseView()
 80094dc:	6023      	str	r3, [r4, #0]
}
 80094de:	bd10      	pop	{r4, pc}
 80094e0:	0802fb0c 	.word	0x0802fb0c

080094e4 <_ZN12DiagnoseView11setupScreenEv>:
    DiagnoseViewBase::setupScreen();
 80094e4:	f7fc b993 	b.w	800580e <_ZN16DiagnoseViewBase11setupScreenEv>

080094e8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80094e8:	4770      	bx	lr

080094ea <_ZN19FrontendApplicationD0Ev>:
 80094ea:	b510      	push	{r4, lr}
 80094ec:	4604      	mov	r4, r0
 80094ee:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80094f2:	f020 fa41 	bl	8029978 <_ZdlPvj>
 80094f6:	4620      	mov	r0, r4
 80094f8:	bd10      	pop	{r4, pc}

080094fa <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80094fa:	b510      	push	{r4, lr}
 80094fc:	4604      	mov	r4, r0
    {
        model.tick();
 80094fe:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8009502:	f000 f8b1 	bl	8009668 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8009506:	4620      	mov	r0, r4
    }
 8009508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800950c:	f011 be8c 	b.w	801b228 <_ZN8touchgfx11Application15handleTickEventEv>

08009510 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009510:	b510      	push	{r4, lr}
 8009512:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8009514:	f7fe feec 	bl	80082f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009518:	4b01      	ldr	r3, [pc, #4]	@ (8009520 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800951a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 800951c:	6023      	str	r3, [r4, #0]
}
 800951e:	bd10      	pop	{r4, pc}
 8009520:	0802fb40 	.word	0x0802fb40

08009524 <_ZN19MainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainScreenPresenter() {}
 8009524:	4770      	bx	lr

08009526 <_ZThn4_N19MainScreenPresenterD1Ev>:
 8009526:	3804      	subs	r0, #4
 8009528:	4770      	bx	lr

0800952a <_ZN19MainScreenPresenter10deactivateEv>:
}

void MainScreenPresenter::activate()
{

}
 800952a:	4770      	bx	lr

0800952c <_ZN19MainScreenPresenter7OnEventE10EEventType12UMessageData12EEventClient>:
{

}

void MainScreenPresenter::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
{
 800952c:	b082      	sub	sp, #8
 800952e:	e88d 000c 	stmia.w	sp, {r2, r3}

}
 8009532:	b002      	add	sp, #8
 8009534:	4770      	bx	lr

08009536 <_ZN19MainScreenPresenterD0Ev>:
 8009536:	b510      	push	{r4, lr}
 8009538:	4604      	mov	r4, r0
 800953a:	2110      	movs	r1, #16
 800953c:	f020 fa1c 	bl	8029978 <_ZdlPvj>
 8009540:	4620      	mov	r0, r4
 8009542:	bd10      	pop	{r4, pc}

08009544 <_ZThn4_N19MainScreenPresenterD0Ev>:
 8009544:	f1a0 0004 	sub.w	r0, r0, #4
 8009548:	e7f5      	b.n	8009536 <_ZN19MainScreenPresenterD0Ev>

0800954a <_ZThn4_N19MainScreenPresenter7OnEventE10EEventType12UMessageData12EEventClient>:

    void OnEvent(EEventType event, UMessageData msg, EEventClient eventSender) override;
 800954a:	b082      	sub	sp, #8
 800954c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009550:	b002      	add	sp, #8
 8009552:	4770      	bx	lr

08009554 <_ZN19MainScreenPresenterC1ER14MainScreenView>:
 8009554:	2200      	movs	r2, #0
    : view(v)
 8009556:	60c1      	str	r1, [r0, #12]
 8009558:	6082      	str	r2, [r0, #8]
 800955a:	4a02      	ldr	r2, [pc, #8]	@ (8009564 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x10>)
 800955c:	6002      	str	r2, [r0, #0]
 800955e:	321c      	adds	r2, #28
 8009560:	6042      	str	r2, [r0, #4]
}
 8009562:	4770      	bx	lr
 8009564:	0802fb94 	.word	0x0802fb94

08009568 <_ZN14MainScreenView14tearDownScreenEv>:
}

void MainScreenView::tearDownScreen()
{
    MainScreenViewBase::tearDownScreen();
}
 8009568:	4770      	bx	lr
	...

0800956c <_ZN14MainScreenViewD1Ev>:

class MainScreenView : public MainScreenViewBase
{
public:
    MainScreenView();
    virtual ~MainScreenView() {}
 800956c:	4b03      	ldr	r3, [pc, #12]	@ (800957c <_ZN14MainScreenViewD1Ev+0x10>)
 800956e:	b510      	push	{r4, lr}
 8009570:	4604      	mov	r4, r0
 8009572:	6003      	str	r3, [r0, #0]
 8009574:	f7ff f974 	bl	8008860 <_ZN18MainScreenViewBaseD1Ev>
 8009578:	4620      	mov	r0, r4
 800957a:	bd10      	pop	{r4, pc}
 800957c:	0802fbc4 	.word	0x0802fbc4

08009580 <_ZN14MainScreenViewD0Ev>:
 8009580:	b510      	push	{r4, lr}
 8009582:	4604      	mov	r4, r0
 8009584:	f7ff fff2 	bl	800956c <_ZN14MainScreenViewD1Ev>
 8009588:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800958c:	4620      	mov	r0, r4
 800958e:	f020 f9f3 	bl	8029978 <_ZdlPvj>
 8009592:	4620      	mov	r0, r4
 8009594:	bd10      	pop	{r4, pc}
	...

08009598 <_ZN14MainScreenViewC1Ev>:
MainScreenView::MainScreenView()
 8009598:	b510      	push	{r4, lr}
 800959a:	4604      	mov	r4, r0
 800959c:	f7ff f9e0 	bl	8008960 <_ZN18MainScreenViewBaseC1Ev>
 80095a0:	4b01      	ldr	r3, [pc, #4]	@ (80095a8 <_ZN14MainScreenViewC1Ev+0x10>)
}
 80095a2:	4620      	mov	r0, r4
MainScreenView::MainScreenView()
 80095a4:	6023      	str	r3, [r4, #0]
}
 80095a6:	bd10      	pop	{r4, pc}
 80095a8:	0802fbc4 	.word	0x0802fbc4

080095ac <_ZN14MainScreenView11setupScreenEv>:
    MainScreenViewBase::setupScreen();
 80095ac:	f7ff b959 	b.w	8008862 <_ZN18MainScreenViewBase11setupScreenEv>

080095b0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN5Model4tickEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	switch (__op)
 80095b0:	2a01      	cmp	r2, #1
 80095b2:	d102      	bne.n	80095ba <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN5Model4tickEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80095b4:	6001      	str	r1, [r0, #0]
      }
 80095b6:	2000      	movs	r0, #0
 80095b8:	4770      	bx	lr
	  switch (__op)
 80095ba:	2a02      	cmp	r2, #2
 80095bc:	d005      	beq.n	80095ca <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN5Model4tickEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1a>
 80095be:	2a03      	cmp	r2, #3
 80095c0:	d0f9      	beq.n	80095b6 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN5Model4tickEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	d1f7      	bne.n	80095b6 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN5Model4tickEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
	      __dest._M_access<const type_info*>() = nullptr;
 80095c6:	6002      	str	r2, [r0, #0]
	      break;
 80095c8:	e7f5      	b.n	80095b6 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN5Model4tickEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80095ca:	680b      	ldr	r3, [r1, #0]
 80095cc:	6003      	str	r3, [r0, #0]
	  }
 80095ce:	e7f2      	b.n	80095b6 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN5Model4tickEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>

080095d0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN5Model4tickEvEUlS0_S1_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80095d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d2:	b089      	sub	sp, #36	@ 0x24
 80095d4:	780e      	ldrb	r6, [r1, #0]
 80095d6:	6805      	ldr	r5, [r0, #0]
 80095d8:	f893 c000 	ldrb.w	ip, [r3]
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80095dc:	ac04      	add	r4, sp, #16

void Model::tick()
{
	if(modelListener)
	{
		event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->modelListener->OnEvent(event, msg, eventSender);});
 80095de:	682d      	ldr	r5, [r5, #0]
 80095e0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80095e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80095e6:	ab08      	add	r3, sp, #32
 80095e8:	682f      	ldr	r7, [r5, #0]
 80095ea:	f8cd c008 	str.w	ip, [sp, #8]
 80095ee:	e913 0003 	ldmdb	r3, {r0, r1}
 80095f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80095f6:	4631      	mov	r1, r6
 80095f8:	4628      	mov	r0, r5
 80095fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80095fe:	68bc      	ldr	r4, [r7, #8]
 8009600:	47a0      	blx	r4
      }
 8009602:	b009      	add	sp, #36	@ 0x24
 8009604:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009608 <_ZN5ModelC1Ev>:
Model::Model() : modelListener(0), event_bus(EventBusManager(queueToFrontend, EVENT_CLIENT_FRONTEND))
 8009608:	2200      	movs	r2, #0
 800960a:	4601      	mov	r1, r0
 800960c:	b510      	push	{r4, lr}
 800960e:	f841 2b04 	str.w	r2, [r1], #4
 8009612:	4c06      	ldr	r4, [pc, #24]	@ (800962c <_ZN5ModelC1Ev+0x24>)
      : _Function_base() { }
 8009614:	6042      	str	r2, [r0, #4]
 8009616:	6824      	ldr	r4, [r4, #0]
 8009618:	e9c1 2201 	strd	r2, r2, [r1, #4]
 800961c:	4904      	ldr	r1, [pc, #16]	@ (8009630 <_ZN5ModelC1Ev+0x28>)
 800961e:	7702      	strb	r2, [r0, #28]
 8009620:	6809      	ldr	r1, [r1, #0]
					 : queue_self(queueSelf),
 8009622:	e9c0 2404 	strd	r2, r4, [r0, #16]
					   sender_self(senderSelf){};
 8009626:	6181      	str	r1, [r0, #24]
}
 8009628:	bd10      	pop	{r4, pc}
 800962a:	bf00      	nop
 800962c:	240004f0 	.word	0x240004f0
 8009630:	240004ec 	.word	0x240004ec

08009634 <_ZN5Model9sendEventE10EEventType12UMessageData12EEventClient>:
{
 8009634:	b082      	sub	sp, #8
 8009636:	b530      	push	{r4, r5, lr}
 8009638:	b085      	sub	sp, #20
 800963a:	460d      	mov	r5, r1
 800963c:	4604      	mov	r4, r0
 800963e:	a908      	add	r1, sp, #32
 8009640:	e881 000c 	stmia.w	r1, {r2, r3}
	return event_bus.send(event, message, eventReceiver);
 8009644:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8009648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	ab08      	add	r3, sp, #32
 8009650:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009654:	4629      	mov	r1, r5
 8009656:	1d20      	adds	r0, r4, #4
 8009658:	cb0c      	ldmia	r3, {r2, r3}
 800965a:	f7f7 fa75 	bl	8000b48 <_ZN15EventBusManager4sendE10EEventType12UMessageData12EEventClient>
}
 800965e:	b005      	add	sp, #20
 8009660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009664:	b002      	add	sp, #8
 8009666:	4770      	bx	lr

08009668 <_ZN5Model4tickEv>:
{
 8009668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(modelListener)
 800966a:	6803      	ldr	r3, [r0, #0]
 800966c:	b19b      	cbz	r3, 8009696 <_ZN5Model4tickEv+0x2e>
	: _Function_base()
 800966e:	2300      	movs	r3, #0
		event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->modelListener->OnEvent(event, msg, eventSender);});
 8009670:	4669      	mov	r1, sp
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8009672:	e9cd 0300 	strd	r0, r3, [sp]
	      _M_invoker = &_My_handler::_M_invoke;
 8009676:	4b0c      	ldr	r3, [pc, #48]	@ (80096a8 <_ZN5Model4tickEv+0x40>)
 8009678:	3004      	adds	r0, #4
 800967a:	9303      	str	r3, [sp, #12]
	      _M_manager = &_My_handler::_M_manager;
 800967c:	4b0b      	ldr	r3, [pc, #44]	@ (80096ac <_ZN5Model4tickEv+0x44>)
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	f7f7 fa94 	bl	8000bac <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>
      if (_M_manager)
 8009684:	9b02      	ldr	r3, [sp, #8]
 8009686:	b11b      	cbz	r3, 8009690 <_ZN5Model4tickEv+0x28>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8009688:	4669      	mov	r1, sp
 800968a:	2203      	movs	r2, #3
 800968c:	4608      	mov	r0, r1
 800968e:	4798      	blx	r3
	}
	else
	{
		LOG_DEBUG("ModelListener is not set.");
	}
}
 8009690:	b005      	add	sp, #20
 8009692:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_DEBUG("ModelListener is not set.");
 8009696:	f7f7 fa15 	bl	8000ac4 <_ZN10LogPrinter8instanceEv>
 800969a:	4905      	ldr	r1, [pc, #20]	@ (80096b0 <_ZN5Model4tickEv+0x48>)
}
 800969c:	b005      	add	sp, #20
 800969e:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_DEBUG("ModelListener is not set.");
 80096a2:	f7f7 ba29 	b.w	8000af8 <_ZN10LogPrinter10printDebugEPKcz>
 80096a6:	bf00      	nop
 80096a8:	080095d1 	.word	0x080095d1
 80096ac:	080095b1 	.word	0x080095b1
 80096b0:	0802fbf0 	.word	0x0802fbf0

080096b4 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80096b4:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80096b6:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80096ba:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80096bc:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80096be:	2302      	movs	r3, #2
 80096c0:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80096c2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80096c6:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80096ca:	4770      	bx	lr

080096cc <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80096cc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80096d0:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80096d2:	bf04      	itt	eq
 80096d4:	2300      	moveq	r3, #0
 80096d6:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 80096da:	2000      	movs	r0, #0
 80096dc:	4770      	bx	lr

080096de <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80096de:	2000      	movs	r0, #0
 80096e0:	4770      	bx	lr

080096e2 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80096e2:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80096e4:	6904      	ldr	r4, [r0, #16]
 80096e6:	8900      	ldrh	r0, [r0, #8]
 80096e8:	46a4      	mov	ip, r4
}
 80096ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80096ee:	4760      	bx	ip

080096f0 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80096f0:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80096f2:	68c4      	ldr	r4, [r0, #12]
 80096f4:	8900      	ldrh	r0, [r0, #8]
 80096f6:	46a4      	mov	ip, r4
}
 80096f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80096fc:	4760      	bx	ip

080096fe <FT6X06_GestureConfig>:
{
 80096fe:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8009700:	f100 0518 	add.w	r5, r0, #24
{
 8009704:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8009706:	7809      	ldrb	r1, [r1, #0]
 8009708:	4628      	mov	r0, r5
 800970a:	f000 f911 	bl	8009930 <ft6x06_radian_value>
 800970e:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8009710:	7931      	ldrb	r1, [r6, #4]
 8009712:	4628      	mov	r0, r5
 8009714:	f000 f918 	bl	8009948 <ft6x06_offset_left_right>
 8009718:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800971a:	7a31      	ldrb	r1, [r6, #8]
 800971c:	4628      	mov	r0, r5
 800971e:	f000 f91f 	bl	8009960 <ft6x06_offset_up_down>
 8009722:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8009724:	7b31      	ldrb	r1, [r6, #12]
 8009726:	4628      	mov	r0, r5
 8009728:	f000 f926 	bl	8009978 <ft6x06_disatnce_left_right>
 800972c:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800972e:	7c31      	ldrb	r1, [r6, #16]
 8009730:	4628      	mov	r0, r5
 8009732:	f000 f92d 	bl	8009990 <ft6x06_distance_up_down>
 8009736:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8009738:	7d31      	ldrb	r1, [r6, #20]
 800973a:	4628      	mov	r0, r5
 800973c:	f000 f934 	bl	80099a8 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8009740:	42c4      	cmn	r4, r0
}
 8009742:	bf14      	ite	ne
 8009744:	f04f 30ff 	movne.w	r0, #4294967295
 8009748:	2000      	moveq	r0, #0
 800974a:	bd70      	pop	{r4, r5, r6, pc}

0800974c <FT6X06_ReadID>:
{
 800974c:	b513      	push	{r0, r1, r4, lr}
 800974e:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8009750:	3018      	adds	r0, #24
 8009752:	f10d 0107 	add.w	r1, sp, #7
 8009756:	f000 f93f 	bl	80099d8 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 800975a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800975e:	6023      	str	r3, [r4, #0]
}
 8009760:	b002      	add	sp, #8
 8009762:	bd10      	pop	{r4, pc}

08009764 <FT6X06_GetState>:
{
 8009764:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009766:	f100 0518 	add.w	r5, r0, #24
{
 800976a:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800976c:	a901      	add	r1, sp, #4
 800976e:	4628      	mov	r0, r5
 8009770:	f000 f8d1 	bl	8009916 <ft6x06_td_status>
 8009774:	bb08      	cbnz	r0, 80097ba <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8009776:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800977a:	2b02      	cmp	r3, #2
 800977c:	bf98      	it	ls
 800977e:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8009780:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8009782:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8009784:	2103      	movs	r1, #3
 8009786:	4628      	mov	r0, r5
 8009788:	eb0d 0203 	add.w	r2, sp, r3
 800978c:	f000 f8b0 	bl	80098f0 <ft6x06_read_reg>
 8009790:	b9b0      	cbnz	r0, 80097c0 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009792:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009796:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80097a0:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80097a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80097a6:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80097a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80097ac:	021b      	lsls	r3, r3, #8
 80097ae:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60a3      	str	r3, [r4, #8]
}
 80097b6:	b003      	add	sp, #12
 80097b8:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80097ba:	f04f 30ff 	mov.w	r0, #4294967295
 80097be:	e7df      	b.n	8009780 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80097c4:	e7f7      	b.n	80097b6 <FT6X06_GetState+0x52>

080097c6 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80097c6:	3018      	adds	r0, #24
 80097c8:	f000 b8a0 	b.w	800990c <ft6x06_gest_id>

080097cc <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80097cc:	2101      	movs	r1, #1
 80097ce:	3018      	adds	r0, #24
 80097d0:	f000 b8f6 	b.w	80099c0 <ft6x06_g_mode>

080097d4 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80097d4:	2100      	movs	r1, #0
 80097d6:	3018      	adds	r0, #24
 80097d8:	f000 b8f2 	b.w	80099c0 <ft6x06_g_mode>

080097dc <FT6X06_Init>:
{
 80097dc:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 80097de:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80097e2:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80097e4:	b96b      	cbnz	r3, 8009802 <FT6X06_Init+0x26>
    pObj->IO.Init();
 80097e6:	6803      	ldr	r3, [r0, #0]
 80097e8:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff fff2 	bl	80097d4 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 80097f0:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80097f2:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 80097f6:	bf18      	it	ne
 80097f8:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80097fa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 80097fe:	4240      	negs	r0, r0
}
 8009800:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8009802:	2000      	movs	r0, #0
  return ret;
 8009804:	e7fc      	b.n	8009800 <FT6X06_Init+0x24>

08009806 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8009806:	2000      	movs	r0, #0
 8009808:	4770      	bx	lr

0800980a <FT6X06_GetMultiTouchState>:
{
 800980a:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800980c:	f100 0518 	add.w	r5, r0, #24
{
 8009810:	b085      	sub	sp, #20
 8009812:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009814:	4628      	mov	r0, r5
 8009816:	a901      	add	r1, sp, #4
 8009818:	f000 f87d 	bl	8009916 <ft6x06_td_status>
 800981c:	2800      	cmp	r0, #0
 800981e:	d145      	bne.n	80098ac <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8009820:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8009824:	2b02      	cmp	r3, #2
 8009826:	bf98      	it	ls
 8009828:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800982a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800982c:	230c      	movs	r3, #12
 800982e:	aa01      	add	r2, sp, #4
 8009830:	2103      	movs	r1, #3
 8009832:	4628      	mov	r0, r5
 8009834:	f000 f85c 	bl	80098f0 <ft6x06_read_reg>
 8009838:	2800      	cmp	r0, #0
 800983a:	d13a      	bne.n	80098b2 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800983c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009840:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8009844:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8009846:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009848:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800984c:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800984e:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8009850:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009854:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009858:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800985a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800985e:	021b      	lsls	r3, r3, #8
 8009860:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009864:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009866:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800986a:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 800986c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009870:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8009872:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8009876:	091b      	lsrs	r3, r3, #4
 8009878:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800987a:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800987c:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800987e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8009882:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009884:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8009886:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800988a:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800988c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009890:	021b      	lsls	r3, r3, #8
 8009892:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009896:	430b      	orrs	r3, r1
 8009898:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 800989a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800989e:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80098a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80098a4:	091b      	lsrs	r3, r3, #4
 80098a6:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80098a8:	b005      	add	sp, #20
 80098aa:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295
 80098b0:	e7bb      	b.n	800982a <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80098b2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80098b6:	e7f7      	b.n	80098a8 <FT6X06_GetMultiTouchState+0x9e>

080098b8 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80098b8:	b190      	cbz	r0, 80098e0 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80098ba:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80098bc:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80098be:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80098c0:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80098c2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80098c4:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80098c6:	68ca      	ldr	r2, [r1, #12]
 80098c8:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80098ca:	690a      	ldr	r2, [r1, #16]
 80098cc:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80098ce:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80098d0:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80098d2:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80098d4:	4a04      	ldr	r2, [pc, #16]	@ (80098e8 <FT6X06_RegisterBusIO+0x30>)
 80098d6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80098d8:	4a04      	ldr	r2, [pc, #16]	@ (80098ec <FT6X06_RegisterBusIO+0x34>)
 80098da:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80098dc:	b103      	cbz	r3, 80098e0 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80098de:	4718      	bx	r3
}
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	080096e3 	.word	0x080096e3
 80098ec:	080096f1 	.word	0x080096f1

080098f0 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80098f0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80098f2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80098f6:	46a4      	mov	ip, r4
}
 80098f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80098fc:	4760      	bx	ip

080098fe <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80098fe:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8009900:	6804      	ldr	r4, [r0, #0]
 8009902:	6880      	ldr	r0, [r0, #8]
 8009904:	46a4      	mov	ip, r4
}
 8009906:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800990a:	4760      	bx	ip

0800990c <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800990c:	2301      	movs	r3, #1
{
 800990e:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8009910:	4619      	mov	r1, r3
 8009912:	f7ff bfed 	b.w	80098f0 <ft6x06_read_reg>

08009916 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8009916:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8009918:	460a      	mov	r2, r1
{
 800991a:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800991c:	2301      	movs	r3, #1
 800991e:	2102      	movs	r1, #2
 8009920:	f7ff ffe6 	bl	80098f0 <ft6x06_read_reg>
  
  if(ret == 0)
 8009924:	b918      	cbnz	r0, 800992e <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8009926:	7823      	ldrb	r3, [r4, #0]
 8009928:	f003 030f 	and.w	r3, r3, #15
 800992c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800992e:	bd10      	pop	{r4, pc}

08009930 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009930:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8009932:	2301      	movs	r3, #1
{
 8009934:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8009938:	f10d 0207 	add.w	r2, sp, #7
 800993c:	2191      	movs	r1, #145	@ 0x91
 800993e:	f7ff ffde 	bl	80098fe <ft6x06_write_reg>
}
 8009942:	b003      	add	sp, #12
 8009944:	f85d fb04 	ldr.w	pc, [sp], #4

08009948 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009948:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800994a:	2301      	movs	r3, #1
{
 800994c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8009950:	f10d 0207 	add.w	r2, sp, #7
 8009954:	2192      	movs	r1, #146	@ 0x92
 8009956:	f7ff ffd2 	bl	80098fe <ft6x06_write_reg>
}
 800995a:	b003      	add	sp, #12
 800995c:	f85d fb04 	ldr.w	pc, [sp], #4

08009960 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009960:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8009962:	2301      	movs	r3, #1
{
 8009964:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8009968:	f10d 0207 	add.w	r2, sp, #7
 800996c:	2193      	movs	r1, #147	@ 0x93
 800996e:	f7ff ffc6 	bl	80098fe <ft6x06_write_reg>
}
 8009972:	b003      	add	sp, #12
 8009974:	f85d fb04 	ldr.w	pc, [sp], #4

08009978 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009978:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800997a:	2301      	movs	r3, #1
{
 800997c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8009980:	f10d 0207 	add.w	r2, sp, #7
 8009984:	2194      	movs	r1, #148	@ 0x94
 8009986:	f7ff ffba 	bl	80098fe <ft6x06_write_reg>
}
 800998a:	b003      	add	sp, #12
 800998c:	f85d fb04 	ldr.w	pc, [sp], #4

08009990 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009990:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8009992:	2301      	movs	r3, #1
{
 8009994:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8009998:	f10d 0207 	add.w	r2, sp, #7
 800999c:	2195      	movs	r1, #149	@ 0x95
 800999e:	f7ff ffae 	bl	80098fe <ft6x06_write_reg>
}
 80099a2:	b003      	add	sp, #12
 80099a4:	f85d fb04 	ldr.w	pc, [sp], #4

080099a8 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80099a8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80099aa:	2301      	movs	r3, #1
{
 80099ac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80099b0:	f10d 0207 	add.w	r2, sp, #7
 80099b4:	2196      	movs	r1, #150	@ 0x96
 80099b6:	f7ff ffa2 	bl	80098fe <ft6x06_write_reg>
}
 80099ba:	b003      	add	sp, #12
 80099bc:	f85d fb04 	ldr.w	pc, [sp], #4

080099c0 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80099c0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80099c2:	2301      	movs	r3, #1
{
 80099c4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80099c8:	f10d 0207 	add.w	r2, sp, #7
 80099cc:	21a4      	movs	r1, #164	@ 0xa4
 80099ce:	f7ff ff96 	bl	80098fe <ft6x06_write_reg>
}
 80099d2:	b003      	add	sp, #12
 80099d4:	f85d fb04 	ldr.w	pc, [sp], #4

080099d8 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80099d8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 80099da:	2301      	movs	r3, #1
 80099dc:	21a8      	movs	r1, #168	@ 0xa8
 80099de:	f7ff bf87 	b.w	80098f0 <ft6x06_read_reg>
	...

080099e4 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80099e4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80099e6:	2201      	movs	r2, #1
 80099e8:	4b07      	ldr	r3, [pc, #28]	@ (8009a08 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80099ea:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80099ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80099f0:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80099f2:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80099f4:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80099f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099fa:	f006 fb5b 	bl	80100b4 <HAL_SDRAM_SendCommand>
 80099fe:	3800      	subs	r0, #0
 8009a00:	bf18      	it	ne
 8009a02:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009a04:	4240      	negs	r0, r0
 8009a06:	bd08      	pop	{r3, pc}
 8009a08:	2400e764 	.word	0x2400e764

08009a0c <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8009a0c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8009a0e:	2202      	movs	r2, #2
 8009a10:	4b08      	ldr	r3, [pc, #32]	@ (8009a34 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8009a12:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8009a16:	2101      	movs	r1, #1
 8009a18:	2200      	movs	r2, #0
 8009a1a:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a22:	4619      	mov	r1, r3
 8009a24:	f006 fb46 	bl	80100b4 <HAL_SDRAM_SendCommand>
 8009a28:	3800      	subs	r0, #0
 8009a2a:	bf18      	it	ne
 8009a2c:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009a2e:	4240      	negs	r0, r0
 8009a30:	bd08      	pop	{r3, pc}
 8009a32:	bf00      	nop
 8009a34:	2400e764 	.word	0x2400e764

08009a38 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8009a38:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009a3a:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8009a3e:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009a40:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8009a42:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8009a44:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8009a46:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8009a48:	6991      	ldr	r1, [r2, #24]
 8009a4a:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009a4c:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8009a4e:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009a50:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8009a52:	4907      	ldr	r1, [pc, #28]	@ (8009a70 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8009a54:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8009a56:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8009a58:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8009a5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009a5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a62:	f006 fb27 	bl	80100b4 <HAL_SDRAM_SendCommand>
 8009a66:	3800      	subs	r0, #0
 8009a68:	bf18      	it	ne
 8009a6a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009a6c:	4240      	negs	r0, r0
 8009a6e:	bd10      	pop	{r4, pc}
 8009a70:	2400e764 	.word	0x2400e764

08009a74 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8009a74:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8009a76:	4b08      	ldr	r3, [pc, #32]	@ (8009a98 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8009a78:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8009a7c:	2108      	movs	r1, #8
 8009a7e:	2200      	movs	r2, #0
 8009a80:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009a84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f006 fb13 	bl	80100b4 <HAL_SDRAM_SendCommand>
 8009a8e:	3800      	subs	r0, #0
 8009a90:	bf18      	it	ne
 8009a92:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009a94:	4240      	negs	r0, r0
 8009a96:	bd08      	pop	{r3, pc}
 8009a98:	2400e764 	.word	0x2400e764

08009a9c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8009a9c:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8009a9e:	f006 fb28 	bl	80100f2 <HAL_SDRAM_ProgramRefreshRate>
 8009aa2:	3800      	subs	r0, #0
 8009aa4:	bf18      	it	ne
 8009aa6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009aa8:	4240      	negs	r0, r0
 8009aaa:	bd08      	pop	{r3, pc}

08009aac <IS42S32800J_Init>:
{
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8009ab0:	6809      	ldr	r1, [r1, #0]
{
 8009ab2:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8009ab4:	f7ff ff96 	bl	80099e4 <IS42S32800J_ClockEnable>
 8009ab8:	b110      	cbz	r0, 8009ac0 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009abe:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8009ac0:	f001 fc7c 	bl	800b3bc <HAL_GetTick>
 8009ac4:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8009ac6:	f001 fc79 	bl	800b3bc <HAL_GetTick>
 8009aca:	4286      	cmp	r6, r0
 8009acc:	d0fb      	beq.n	8009ac6 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8009ace:	6821      	ldr	r1, [r4, #0]
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f7ff ff9b 	bl	8009a0c <IS42S32800J_Precharge>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d1ef      	bne.n	8009aba <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8009ada:	4628      	mov	r0, r5
 8009adc:	e9d4 1200 	ldrd	r1, r2, [r4]
 8009ae0:	f7ff ffc8 	bl	8009a74 <IS42S32800J_RefreshMode>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d1e8      	bne.n	8009aba <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4628      	mov	r0, r5
 8009aec:	f7ff ffa4 	bl	8009a38 <IS42S32800J_ModeRegConfig>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1e2      	bne.n	8009aba <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8009af4:	68a1      	ldr	r1, [r4, #8]
 8009af6:	4628      	mov	r0, r5
 8009af8:	f7ff ffd0 	bl	8009a9c <IS42S32800J_RefreshRate>
 8009afc:	3800      	subs	r0, #0
 8009afe:	bf18      	it	ne
 8009b00:	2001      	movne	r0, #1
 8009b02:	4240      	negs	r0, r0
  return ret;
 8009b04:	e7db      	b.n	8009abe <IS42S32800J_Init+0x12>

08009b06 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8009b06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009b0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8009b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8009b12:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8009b16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009b1a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8009b1e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b22:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8009b24:	2000      	movs	r0, #0
 8009b26:	4770      	bx	lr

08009b28 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009b28:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009b2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8009b2e:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009b30:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009b34:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009b36:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009b38:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8009b3a:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009b3c:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009b3e:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8009b40:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b42:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009b44:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8009b46:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009b48:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8009b4a:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b4c:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009b4e:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009b52:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8009b56:	2310      	movs	r3, #16
 8009b58:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009b5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009b5e:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8009b60:	f240 1301 	movw	r3, #257	@ 0x101
 8009b64:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b6a:	f004 fd44 	bl	800e5f6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8009b6e:	2800      	cmp	r0, #0

}
 8009b70:	bf14      	ite	ne
 8009b72:	f06f 0004 	mvnne.w	r0, #4
 8009b76:	2000      	moveq	r0, #0
 8009b78:	b015      	add	sp, #84	@ 0x54
 8009b7a:	f85d fb04 	ldr.w	pc, [sp], #4

08009b7e <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009b7e:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b80:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8009b84:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009b86:	bf08      	it	eq
 8009b88:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8009b8c:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009b8e:	bf18      	it	ne
 8009b90:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8009b94:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b96:	a906      	add	r1, sp, #24
{
 8009b98:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009b9a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8009b9c:	2306      	movs	r3, #6
 8009b9e:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009ba0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009ba2:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8009ba6:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8009ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009baa:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009bac:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bb0:	f004 fc20 	bl	800e3f4 <HAL_QSPI_Command>
 8009bb4:	bb20      	cbnz	r0, 8009c00 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8009bb6:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8009bba:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8009bbc:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8009bbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009bc2:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bc4:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8009bc6:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8009bca:	f04f 0310 	mov.w	r3, #16
 8009bce:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8009bd2:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bd6:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8009bd8:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8009bdc:	bf14      	ite	ne
 8009bde:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8009be2:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009be6:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8009be8:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009bee:	f004 fd02 	bl	800e5f6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	bf14      	ite	ne
 8009bf6:	f06f 0004 	mvnne.w	r0, #4
 8009bfa:	2000      	moveq	r0, #0
}
 8009bfc:	b015      	add	sp, #84	@ 0x54
 8009bfe:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8009c00:	f06f 0001 	mvn.w	r0, #1
 8009c04:	e7fa      	b.n	8009bfc <MT25TL01G_WriteEnable+0x7e>

08009c06 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009c06:	2903      	cmp	r1, #3
{
 8009c08:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009c0a:	bf08      	it	eq
 8009c0c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8009c10:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009c12:	bf18      	it	ne
 8009c14:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8009c18:	4604      	mov	r4, r0
 8009c1a:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009c1c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8009c1e:	23b7      	movs	r3, #183	@ 0xb7
 8009c20:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009c22:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009c24:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009c28:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8009c2a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009c2c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009c2e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8009c32:	f7ff ffa4 	bl	8009b7e <MT25TL01G_WriteEnable>
 8009c36:	b118      	cbz	r0, 8009c40 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8009c38:	f06f 0001 	mvn.w	r0, #1
}
 8009c3c:	b00f      	add	sp, #60	@ 0x3c
 8009c3e:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c44:	4669      	mov	r1, sp
 8009c46:	4620      	mov	r0, r4
 8009c48:	f004 fbd4 	bl	800e3f4 <HAL_QSPI_Command>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d1f3      	bne.n	8009c38 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8009c50:	4629      	mov	r1, r5
 8009c52:	4620      	mov	r0, r4
 8009c54:	f7ff ff68 	bl	8009b28 <MT25TL01G_AutoPollingMemReady>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d0ef      	beq.n	8009c3c <MT25TL01G_Enter4BytesAddressMode+0x36>
 8009c5c:	e7ec      	b.n	8009c38 <MT25TL01G_Enter4BytesAddressMode+0x32>

08009c5e <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8009c5e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8009c64:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c66:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009c6a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009c6c:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c6e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009c70:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009c72:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009c74:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009c78:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8009c7a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009c7c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009c7e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c82:	f004 fbb7 	bl	800e3f4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8009c86:	2800      	cmp	r0, #0
}
 8009c88:	bf14      	ite	ne
 8009c8a:	f06f 0001 	mvnne.w	r0, #1
 8009c8e:	2000      	moveq	r0, #0
 8009c90:	b00f      	add	sp, #60	@ 0x3c
 8009c92:	f85d fb04 	ldr.w	pc, [sp], #4

08009c96 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8009c96:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8009c9c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009ca2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8009ca4:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ca6:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8009ca8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009caa:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009cac:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009cb0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8009cb2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009cb4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009cb6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009cba:	f004 fb9b 	bl	800e3f4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8009cbe:	2800      	cmp	r0, #0
}
 8009cc0:	bf14      	ite	ne
 8009cc2:	f06f 0001 	mvnne.w	r0, #1
 8009cc6:	2000      	moveq	r0, #0
 8009cc8:	b00f      	add	sp, #60	@ 0x3c
 8009cca:	f85d fb04 	ldr.w	pc, [sp], #4

08009cce <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009cce:	b500      	push	{lr}
 8009cd0:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8009cd2:	2903      	cmp	r1, #3
 8009cd4:	d80e      	bhi.n	8009cf4 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8009cd6:	e8df f001 	tbb	[pc, r1]
 8009cda:	2902      	.short	0x2902
 8009cdc:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009cde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ce2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8009ce4:	230e      	movs	r3, #14
 8009ce6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cec:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009cf2:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8009cf4:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009cf6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009cfa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009cfe:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8009d00:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009d06:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009d08:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009d0a:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009d0e:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009d10:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009d12:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8009d14:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009d18:	f004 fcbe 	bl	800e698 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8009d1c:	2800      	cmp	r0, #0
}
 8009d1e:	bf14      	ite	ne
 8009d20:	f06f 0005 	mvnne.w	r0, #5
 8009d24:	2000      	moveq	r0, #0
 8009d26:	b011      	add	sp, #68	@ 0x44
 8009d28:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d30:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8009d32:	233d      	movs	r3, #61	@ 0x3d
 8009d34:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d3a:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009d3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d40:	e7d7      	b.n	8009cf2 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009d42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d46:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8009d48:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009d4a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009d4c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009d50:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009d52:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8009d56:	e7cc      	b.n	8009cf2 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009d58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009d5c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009d5e:	23ed      	movs	r3, #237	@ 0xed
 8009d60:	e7f3      	b.n	8009d4a <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08009d62 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009d62:	b500      	push	{lr}
 8009d64:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8009d66:	2903      	cmp	r1, #3
 8009d68:	d80e      	bhi.n	8009d88 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8009d6a:	e8df f001 	tbb	[pc, r1]
 8009d6e:	2502      	.short	0x2502
 8009d70:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009d72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d76:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8009d78:	230c      	movs	r3, #12
 8009d7a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009d7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d80:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009d82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009d86:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8009d88:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009d8a:	466a      	mov	r2, sp
 8009d8c:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8009d8e:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009d90:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8009d94:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009d96:	2300      	movs	r3, #0
 8009d98:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009d9c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8009da0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009da4:	f004 fc78 	bl	800e698 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8009da8:	2800      	cmp	r0, #0
}
 8009daa:	bf14      	ite	ne
 8009dac:	f06f 0005 	mvnne.w	r0, #5
 8009db0:	2000      	moveq	r0, #0
 8009db2:	b011      	add	sp, #68	@ 0x44
 8009db4:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dbc:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8009dbe:	23bc      	movs	r3, #188	@ 0xbc
 8009dc0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8009dc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009dc6:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009dc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009dcc:	e7db      	b.n	8009d86 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dd2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8009dd4:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8009dd6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009dd8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009ddc:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009dde:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8009de2:	e7d0      	b.n	8009d86 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009de4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009de8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8009dea:	23eb      	movs	r3, #235	@ 0xeb
 8009dec:	e7f3      	b.n	8009dd6 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08009dee <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009dee:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009df0:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8009df4:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009df6:	bf18      	it	ne
 8009df8:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8009dfc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009dfe:	bf08      	it	eq
 8009e00:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e04:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009e06:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8009e08:	2366      	movs	r3, #102	@ 0x66
 8009e0a:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009e0c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009e0e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009e12:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8009e14:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009e16:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009e18:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e1c:	f004 faea 	bl	800e3f4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8009e20:	2800      	cmp	r0, #0
}
 8009e22:	bf14      	ite	ne
 8009e24:	f06f 0001 	mvnne.w	r0, #1
 8009e28:	2000      	moveq	r0, #0
 8009e2a:	b00f      	add	sp, #60	@ 0x3c
 8009e2c:	f85d fb04 	ldr.w	pc, [sp], #4

08009e30 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009e30:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e32:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8009e36:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009e38:	bf18      	it	ne
 8009e3a:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8009e3e:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009e40:	bf08      	it	eq
 8009e42:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e46:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009e48:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8009e4a:	2399      	movs	r3, #153	@ 0x99
 8009e4c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009e4e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009e50:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009e54:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8009e56:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009e58:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009e5a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e5e:	f004 fac9 	bl	800e3f4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8009e62:	2800      	cmp	r0, #0
}
 8009e64:	bf14      	ite	ne
 8009e66:	f06f 0001 	mvnne.w	r0, #1
 8009e6a:	2000      	moveq	r0, #0
 8009e6c:	b00f      	add	sp, #60	@ 0x3c
 8009e6e:	f85d fb04 	ldr.w	pc, [sp], #4

08009e72 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8009e72:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009e74:	6884      	ldr	r4, [r0, #8]
 8009e76:	8800      	ldrh	r0, [r0, #0]
 8009e78:	46a4      	mov	ip, r4
}
 8009e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009e7e:	4760      	bx	ip

08009e80 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009e80:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009e82:	6844      	ldr	r4, [r0, #4]
 8009e84:	8800      	ldrh	r0, [r0, #0]
 8009e86:	46a4      	mov	ip, r4
}
 8009e88:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009e8c:	4760      	bx	ip

08009e8e <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8009e8e:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8009e90:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8009e92:	4604      	mov	r4, r0
 8009e94:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8009e96:	4798      	blx	r3
 8009e98:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	4798      	blx	r3
 8009e9e:	1b83      	subs	r3, r0, r6
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	d3fa      	bcc.n	8009e9a <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8009ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ea8 <OTM8009A_Init>:
{
 8009ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009eac:	2300      	movs	r3, #0
 8009eae:	f100 0510 	add.w	r5, r0, #16
{
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	460e      	mov	r6, r1
 8009eb6:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4ade      	ldr	r2, [pc, #888]	@ (800a234 <OTM8009A_Init+0x38c>)
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f000 fb99 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8009ec2:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009ec4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8009ec6:	4adc      	ldr	r2, [pc, #880]	@ (800a238 <OTM8009A_Init+0x390>)
 8009ec8:	21ff      	movs	r1, #255	@ 0xff
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f000 fb92 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009ed0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8009ed2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009ed4:	4ad9      	ldr	r2, [pc, #868]	@ (800a23c <OTM8009A_Init+0x394>)
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f000 fb8b 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8009ede:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009ee0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8009ee2:	4ad7      	ldr	r2, [pc, #860]	@ (800a240 <OTM8009A_Init+0x398>)
 8009ee4:	21ff      	movs	r1, #255	@ 0xff
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 fb84 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009eec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8009eee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009ef0:	4ad2      	ldr	r2, [pc, #840]	@ (800a23c <OTM8009A_Init+0x394>)
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f000 fb7d 	bl	800a5f4 <otm8009a_write_reg>
 8009efa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8009efc:	2300      	movs	r3, #0
 8009efe:	4ad1      	ldr	r2, [pc, #836]	@ (800a244 <OTM8009A_Init+0x39c>)
 8009f00:	21c4      	movs	r1, #196	@ 0xc4
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 fb76 	bl	800a5f4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009f08:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8009f0a:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	f7ff ffbe 	bl	8009e8e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8009f12:	2300      	movs	r3, #0
 8009f14:	4acc      	ldr	r2, [pc, #816]	@ (800a248 <OTM8009A_Init+0x3a0>)
 8009f16:	4628      	mov	r0, r5
 8009f18:	4619      	mov	r1, r3
 8009f1a:	f000 fb6b 	bl	800a5f4 <otm8009a_write_reg>
 8009f1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009f20:	2300      	movs	r3, #0
 8009f22:	4aca      	ldr	r2, [pc, #808]	@ (800a24c <OTM8009A_Init+0x3a4>)
 8009f24:	21c4      	movs	r1, #196	@ 0xc4
 8009f26:	4628      	mov	r0, r5
 8009f28:	f000 fb64 	bl	800a5f4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009f2c:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009f2e:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7ff ffac 	bl	8009e8e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8009f36:	2300      	movs	r3, #0
 8009f38:	4ac5      	ldr	r2, [pc, #788]	@ (800a250 <OTM8009A_Init+0x3a8>)
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	f000 fb59 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009f42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8009f44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009f46:	4ac3      	ldr	r2, [pc, #780]	@ (800a254 <OTM8009A_Init+0x3ac>)
 8009f48:	21c5      	movs	r1, #197	@ 0xc5
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 fb52 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009f50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009f52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009f54:	4ac0      	ldr	r2, [pc, #768]	@ (800a258 <OTM8009A_Init+0x3b0>)
 8009f56:	4619      	mov	r1, r3
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 fb4b 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009f5e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009f60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009f62:	4abe      	ldr	r2, [pc, #760]	@ (800a25c <OTM8009A_Init+0x3b4>)
 8009f64:	21c5      	movs	r1, #197	@ 0xc5
 8009f66:	4628      	mov	r0, r5
 8009f68:	f000 fb44 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009f6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009f6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009f70:	4abb      	ldr	r2, [pc, #748]	@ (800a260 <OTM8009A_Init+0x3b8>)
 8009f72:	4619      	mov	r1, r3
 8009f74:	4628      	mov	r0, r5
 8009f76:	f000 fb3d 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009f7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009f7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009f7e:	4ab9      	ldr	r2, [pc, #740]	@ (800a264 <OTM8009A_Init+0x3bc>)
 8009f80:	21c0      	movs	r1, #192	@ 0xc0
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 fb36 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009f8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f8c:	4aa9      	ldr	r2, [pc, #676]	@ (800a234 <OTM8009A_Init+0x38c>)
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4628      	mov	r0, r5
 8009f92:	f000 fb2f 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009f96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009f9a:	4ab3      	ldr	r2, [pc, #716]	@ (800a268 <OTM8009A_Init+0x3c0>)
 8009f9c:	21d9      	movs	r1, #217	@ 0xd9
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 fb28 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009fa4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009fa6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009fa8:	4ab0      	ldr	r2, [pc, #704]	@ (800a26c <OTM8009A_Init+0x3c4>)
 8009faa:	4619      	mov	r1, r3
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 fb21 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009fb2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009fb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009fb6:	4aae      	ldr	r2, [pc, #696]	@ (800a270 <OTM8009A_Init+0x3c8>)
 8009fb8:	21c1      	movs	r1, #193	@ 0xc1
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f000 fb1a 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009fc0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009fc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009fc4:	4aab      	ldr	r2, [pc, #684]	@ (800a274 <OTM8009A_Init+0x3cc>)
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f000 fb13 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009fce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009fd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009fd2:	4aa9      	ldr	r2, [pc, #676]	@ (800a278 <OTM8009A_Init+0x3d0>)
 8009fd4:	21c5      	movs	r1, #197	@ 0xc5
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f000 fb0c 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009fdc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009fde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009fe0:	4aa6      	ldr	r2, [pc, #664]	@ (800a27c <OTM8009A_Init+0x3d4>)
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f000 fb05 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009fea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009fec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009fee:	4a9b      	ldr	r2, [pc, #620]	@ (800a25c <OTM8009A_Init+0x3b4>)
 8009ff0:	21c5      	movs	r1, #197	@ 0xc5
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 fafe 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009ff8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009ffa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009ffc:	4a8d      	ldr	r2, [pc, #564]	@ (800a234 <OTM8009A_Init+0x38c>)
 8009ffe:	4619      	mov	r1, r3
 800a000:	4628      	mov	r0, r5
 800a002:	f000 faf7 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800a006:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a008:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800a00a:	4a9d      	ldr	r2, [pc, #628]	@ (800a280 <OTM8009A_Init+0x3d8>)
 800a00c:	21d8      	movs	r1, #216	@ 0xd8
 800a00e:	4628      	mov	r0, r5
 800a010:	f000 faf0 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800a014:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800a016:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800a018:	4a9a      	ldr	r2, [pc, #616]	@ (800a284 <OTM8009A_Init+0x3dc>)
 800a01a:	4619      	mov	r1, r3
 800a01c:	4628      	mov	r0, r5
 800a01e:	f000 fae9 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800a022:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800a024:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800a026:	4a98      	ldr	r2, [pc, #608]	@ (800a288 <OTM8009A_Init+0x3e0>)
 800a028:	21c5      	movs	r1, #197	@ 0xc5
 800a02a:	4628      	mov	r0, r5
 800a02c:	f000 fae2 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800a030:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800a032:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800a034:	4a95      	ldr	r2, [pc, #596]	@ (800a28c <OTM8009A_Init+0x3e4>)
 800a036:	4619      	mov	r1, r3
 800a038:	4628      	mov	r0, r5
 800a03a:	f000 fadb 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800a03e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800a040:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800a042:	4a93      	ldr	r2, [pc, #588]	@ (800a290 <OTM8009A_Init+0x3e8>)
 800a044:	21c0      	movs	r1, #192	@ 0xc0
 800a046:	4628      	mov	r0, r5
 800a048:	f000 fad4 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800a04c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800a04e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800a050:	4a90      	ldr	r2, [pc, #576]	@ (800a294 <OTM8009A_Init+0x3ec>)
 800a052:	4619      	mov	r1, r3
 800a054:	4628      	mov	r0, r5
 800a056:	f000 facd 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800a05a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800a05c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800a05e:	4a8e      	ldr	r2, [pc, #568]	@ (800a298 <OTM8009A_Init+0x3f0>)
 800a060:	21c5      	movs	r1, #197	@ 0xc5
 800a062:	4628      	mov	r0, r5
 800a064:	f000 fac6 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800a068:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800a06a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800a06c:	4a8b      	ldr	r2, [pc, #556]	@ (800a29c <OTM8009A_Init+0x3f4>)
 800a06e:	4619      	mov	r1, r3
 800a070:	4628      	mov	r0, r5
 800a072:	f000 fabf 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800a076:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800a078:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800a07a:	4a89      	ldr	r2, [pc, #548]	@ (800a2a0 <OTM8009A_Init+0x3f8>)
 800a07c:	21c4      	movs	r1, #196	@ 0xc4
 800a07e:	4628      	mov	r0, r5
 800a080:	f000 fab8 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800a084:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800a086:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800a088:	4a78      	ldr	r2, [pc, #480]	@ (800a26c <OTM8009A_Init+0x3c4>)
 800a08a:	4619      	mov	r1, r3
 800a08c:	4628      	mov	r0, r5
 800a08e:	f000 fab1 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800a092:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800a094:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800a096:	4a83      	ldr	r2, [pc, #524]	@ (800a2a4 <OTM8009A_Init+0x3fc>)
 800a098:	21c1      	movs	r1, #193	@ 0xc1
 800a09a:	4628      	mov	r0, r5
 800a09c:	f000 faaa 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800a0a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800a0a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800a0a4:	4a80      	ldr	r2, [pc, #512]	@ (800a2a8 <OTM8009A_Init+0x400>)
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f000 faa3 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800a0ae:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800a0b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800a0b2:	4a7e      	ldr	r2, [pc, #504]	@ (800a2ac <OTM8009A_Init+0x404>)
 800a0b4:	21b3      	movs	r1, #179	@ 0xb3
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f000 fa9c 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a0bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800a0be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a0c0:	4a5e      	ldr	r2, [pc, #376]	@ (800a23c <OTM8009A_Init+0x394>)
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f000 fa95 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800a0ca:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a0cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800a0ce:	4a78      	ldr	r2, [pc, #480]	@ (800a2b0 <OTM8009A_Init+0x408>)
 800a0d0:	21ce      	movs	r1, #206	@ 0xce
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 fa8e 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a0d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800a0da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a0dc:	4a75      	ldr	r2, [pc, #468]	@ (800a2b4 <OTM8009A_Init+0x40c>)
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f000 fa87 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800a0e6:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a0e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800a0ea:	4a73      	ldr	r2, [pc, #460]	@ (800a2b8 <OTM8009A_Init+0x410>)
 800a0ec:	21ce      	movs	r1, #206	@ 0xce
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f000 fa80 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a0f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800a0f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a0f8:	4a70      	ldr	r2, [pc, #448]	@ (800a2bc <OTM8009A_Init+0x414>)
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 fa79 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800a102:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a104:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800a106:	4a6e      	ldr	r2, [pc, #440]	@ (800a2c0 <OTM8009A_Init+0x418>)
 800a108:	21ce      	movs	r1, #206	@ 0xce
 800a10a:	4628      	mov	r0, r5
 800a10c:	f000 fa72 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a110:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800a112:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a114:	4a6b      	ldr	r2, [pc, #428]	@ (800a2c4 <OTM8009A_Init+0x41c>)
 800a116:	4619      	mov	r1, r3
 800a118:	4628      	mov	r0, r5
 800a11a:	f000 fa6b 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800a11e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a120:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800a122:	4a69      	ldr	r2, [pc, #420]	@ (800a2c8 <OTM8009A_Init+0x420>)
 800a124:	21cf      	movs	r1, #207	@ 0xcf
 800a126:	4628      	mov	r0, r5
 800a128:	f000 fa64 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a12c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800a12e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a130:	4a66      	ldr	r2, [pc, #408]	@ (800a2cc <OTM8009A_Init+0x424>)
 800a132:	4619      	mov	r1, r3
 800a134:	4628      	mov	r0, r5
 800a136:	f000 fa5d 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800a13a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a13c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800a13e:	4a64      	ldr	r2, [pc, #400]	@ (800a2d0 <OTM8009A_Init+0x428>)
 800a140:	21cf      	movs	r1, #207	@ 0xcf
 800a142:	4628      	mov	r0, r5
 800a144:	f000 fa56 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a148:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800a14a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a14c:	4a3b      	ldr	r2, [pc, #236]	@ (800a23c <OTM8009A_Init+0x394>)
 800a14e:	4619      	mov	r1, r3
 800a150:	4628      	mov	r0, r5
 800a152:	f000 fa4f 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800a156:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a158:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800a15a:	4a5e      	ldr	r2, [pc, #376]	@ (800a2d4 <OTM8009A_Init+0x42c>)
 800a15c:	21cb      	movs	r1, #203	@ 0xcb
 800a15e:	4628      	mov	r0, r5
 800a160:	f000 fa48 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800a164:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800a166:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800a168:	4a5b      	ldr	r2, [pc, #364]	@ (800a2d8 <OTM8009A_Init+0x430>)
 800a16a:	4619      	mov	r1, r3
 800a16c:	4628      	mov	r0, r5
 800a16e:	f000 fa41 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800a172:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800a174:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800a176:	4a59      	ldr	r2, [pc, #356]	@ (800a2dc <OTM8009A_Init+0x434>)
 800a178:	21cb      	movs	r1, #203	@ 0xcb
 800a17a:	4628      	mov	r0, r5
 800a17c:	f000 fa3a 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a180:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800a182:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a184:	4a4b      	ldr	r2, [pc, #300]	@ (800a2b4 <OTM8009A_Init+0x40c>)
 800a186:	4619      	mov	r1, r3
 800a188:	4628      	mov	r0, r5
 800a18a:	f000 fa33 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800a18e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a190:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800a192:	4a53      	ldr	r2, [pc, #332]	@ (800a2e0 <OTM8009A_Init+0x438>)
 800a194:	21cb      	movs	r1, #203	@ 0xcb
 800a196:	4628      	mov	r0, r5
 800a198:	f000 fa2c 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a19c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800a19e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a1a0:	4a46      	ldr	r2, [pc, #280]	@ (800a2bc <OTM8009A_Init+0x414>)
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 fa25 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800a1aa:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a1ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800a1ae:	4a4d      	ldr	r2, [pc, #308]	@ (800a2e4 <OTM8009A_Init+0x43c>)
 800a1b0:	21cb      	movs	r1, #203	@ 0xcb
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 fa1e 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a1b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800a1ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a1bc:	4a41      	ldr	r2, [pc, #260]	@ (800a2c4 <OTM8009A_Init+0x41c>)
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f000 fa17 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800a1c6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a1c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800a1ca:	4a47      	ldr	r2, [pc, #284]	@ (800a2e8 <OTM8009A_Init+0x440>)
 800a1cc:	21cb      	movs	r1, #203	@ 0xcb
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f000 fa10 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a1d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800a1d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a1d8:	4a3c      	ldr	r2, [pc, #240]	@ (800a2cc <OTM8009A_Init+0x424>)
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f000 fa09 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800a1e2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a1e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800a1e6:	4a41      	ldr	r2, [pc, #260]	@ (800a2ec <OTM8009A_Init+0x444>)
 800a1e8:	21cb      	movs	r1, #203	@ 0xcb
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f000 fa02 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800a1f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800a1f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800a1f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a2f0 <OTM8009A_Init+0x448>)
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 f9fb 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800a1fe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800a200:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800a202:	4a3c      	ldr	r2, [pc, #240]	@ (800a2f4 <OTM8009A_Init+0x44c>)
 800a204:	21cb      	movs	r1, #203	@ 0xcb
 800a206:	4628      	mov	r0, r5
 800a208:	f000 f9f4 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800a20c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800a20e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800a210:	4a39      	ldr	r2, [pc, #228]	@ (800a2f8 <OTM8009A_Init+0x450>)
 800a212:	4619      	mov	r1, r3
 800a214:	4628      	mov	r0, r5
 800a216:	f000 f9ed 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800a21a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800a21c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800a21e:	4a37      	ldr	r2, [pc, #220]	@ (800a2fc <OTM8009A_Init+0x454>)
 800a220:	21cb      	movs	r1, #203	@ 0xcb
 800a222:	4628      	mov	r0, r5
 800a224:	f000 f9e6 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a228:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800a22a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a22c:	4a03      	ldr	r2, [pc, #12]	@ (800a23c <OTM8009A_Init+0x394>)
 800a22e:	4619      	mov	r1, r3
 800a230:	4628      	mov	r0, r5
 800a232:	e065      	b.n	800a300 <OTM8009A_Init+0x458>
 800a234:	0802fd17 	.word	0x0802fd17
 800a238:	0802fd13 	.word	0x0802fd13
 800a23c:	0802fd18 	.word	0x0802fd18
 800a240:	0802fd11 	.word	0x0802fd11
 800a244:	0802fd19 	.word	0x0802fd19
 800a248:	0802fd1a 	.word	0x0802fd1a
 800a24c:	0802fd1b 	.word	0x0802fd1b
 800a250:	0802fd1c 	.word	0x0802fd1c
 800a254:	0802fd1d 	.word	0x0802fd1d
 800a258:	0802fd1e 	.word	0x0802fd1e
 800a25c:	0802fd1f 	.word	0x0802fd1f
 800a260:	0802fd20 	.word	0x0802fd20
 800a264:	0802fd21 	.word	0x0802fd21
 800a268:	0802fd22 	.word	0x0802fd22
 800a26c:	0802fd25 	.word	0x0802fd25
 800a270:	0802fd26 	.word	0x0802fd26
 800a274:	0802fd27 	.word	0x0802fd27
 800a278:	0802fd28 	.word	0x0802fd28
 800a27c:	0802fd29 	.word	0x0802fd29
 800a280:	0802fd0f 	.word	0x0802fd0f
 800a284:	0802fd2a 	.word	0x0802fd2a
 800a288:	0802fd2b 	.word	0x0802fd2b
 800a28c:	0802fd2c 	.word	0x0802fd2c
 800a290:	0802fd2d 	.word	0x0802fd2d
 800a294:	0802fd2e 	.word	0x0802fd2e
 800a298:	0802fd2f 	.word	0x0802fd2f
 800a29c:	0802fd23 	.word	0x0802fd23
 800a2a0:	0802fd30 	.word	0x0802fd30
 800a2a4:	0802fd31 	.word	0x0802fd31
 800a2a8:	0802fd32 	.word	0x0802fd32
 800a2ac:	0802fd0d 	.word	0x0802fd0d
 800a2b0:	0802fd07 	.word	0x0802fd07
 800a2b4:	0802fd33 	.word	0x0802fd33
 800a2b8:	0802fcf9 	.word	0x0802fcf9
 800a2bc:	0802fd34 	.word	0x0802fd34
 800a2c0:	0802fceb 	.word	0x0802fceb
 800a2c4:	0802fd35 	.word	0x0802fd35
 800a2c8:	0802fce1 	.word	0x0802fce1
 800a2cc:	0802fd36 	.word	0x0802fd36
 800a2d0:	0802fd43 	.word	0x0802fd43
 800a2d4:	0802fcd7 	.word	0x0802fcd7
 800a2d8:	0802fd37 	.word	0x0802fd37
 800a2dc:	0802fcc8 	.word	0x0802fcc8
 800a2e0:	0802fcb9 	.word	0x0802fcb9
 800a2e4:	0802fcaf 	.word	0x0802fcaf
 800a2e8:	0802fca0 	.word	0x0802fca0
 800a2ec:	0802fc91 	.word	0x0802fc91
 800a2f0:	0802fd38 	.word	0x0802fd38
 800a2f4:	0802fc87 	.word	0x0802fc87
 800a2f8:	0802fd39 	.word	0x0802fd39
 800a2fc:	0802fc7d 	.word	0x0802fc7d
 800a300:	f000 f978 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800a304:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a306:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800a308:	4a8e      	ldr	r2, [pc, #568]	@ (800a544 <OTM8009A_Init+0x69c>)
 800a30a:	21cc      	movs	r1, #204	@ 0xcc
 800a30c:	4628      	mov	r0, r5
 800a30e:	f000 f971 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800a312:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800a314:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800a316:	4a8c      	ldr	r2, [pc, #560]	@ (800a548 <OTM8009A_Init+0x6a0>)
 800a318:	4619      	mov	r1, r3
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 f96a 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800a320:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800a322:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800a324:	4a89      	ldr	r2, [pc, #548]	@ (800a54c <OTM8009A_Init+0x6a4>)
 800a326:	21cc      	movs	r1, #204	@ 0xcc
 800a328:	4628      	mov	r0, r5
 800a32a:	f000 f963 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a32e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800a330:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a332:	4a87      	ldr	r2, [pc, #540]	@ (800a550 <OTM8009A_Init+0x6a8>)
 800a334:	4619      	mov	r1, r3
 800a336:	4628      	mov	r0, r5
 800a338:	f000 f95c 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800a33c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a33e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800a340:	4a84      	ldr	r2, [pc, #528]	@ (800a554 <OTM8009A_Init+0x6ac>)
 800a342:	21cc      	movs	r1, #204	@ 0xcc
 800a344:	4628      	mov	r0, r5
 800a346:	f000 f955 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a34a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800a34c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a34e:	4a82      	ldr	r2, [pc, #520]	@ (800a558 <OTM8009A_Init+0x6b0>)
 800a350:	4619      	mov	r1, r3
 800a352:	4628      	mov	r0, r5
 800a354:	f000 f94e 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800a358:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a35a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800a35c:	4a7f      	ldr	r2, [pc, #508]	@ (800a55c <OTM8009A_Init+0x6b4>)
 800a35e:	21cc      	movs	r1, #204	@ 0xcc
 800a360:	4628      	mov	r0, r5
 800a362:	f000 f947 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a366:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800a368:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a36a:	4a7d      	ldr	r2, [pc, #500]	@ (800a560 <OTM8009A_Init+0x6b8>)
 800a36c:	4619      	mov	r1, r3
 800a36e:	4628      	mov	r0, r5
 800a370:	f000 f940 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800a374:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a376:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800a378:	4a7a      	ldr	r2, [pc, #488]	@ (800a564 <OTM8009A_Init+0x6bc>)
 800a37a:	21cc      	movs	r1, #204	@ 0xcc
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 f939 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a382:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800a384:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a386:	4a78      	ldr	r2, [pc, #480]	@ (800a568 <OTM8009A_Init+0x6c0>)
 800a388:	4619      	mov	r1, r3
 800a38a:	4628      	mov	r0, r5
 800a38c:	f000 f932 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800a390:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a392:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800a394:	4a75      	ldr	r2, [pc, #468]	@ (800a56c <OTM8009A_Init+0x6c4>)
 800a396:	21cc      	movs	r1, #204	@ 0xcc
 800a398:	4628      	mov	r0, r5
 800a39a:	f000 f92b 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800a39e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800a3a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800a3a2:	4a73      	ldr	r2, [pc, #460]	@ (800a570 <OTM8009A_Init+0x6c8>)
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 f924 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800a3ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800a3ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800a3b0:	4a70      	ldr	r2, [pc, #448]	@ (800a574 <OTM8009A_Init+0x6cc>)
 800a3b2:	21c5      	movs	r1, #197	@ 0xc5
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f000 f91d 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800a3ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800a3bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800a3be:	4a6e      	ldr	r2, [pc, #440]	@ (800a578 <OTM8009A_Init+0x6d0>)
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 f916 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800a3c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800a3ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800a3cc:	4a6b      	ldr	r2, [pc, #428]	@ (800a57c <OTM8009A_Init+0x6d4>)
 800a3ce:	21f5      	movs	r1, #245	@ 0xf5
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f000 f90f 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800a3d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800a3d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800a3da:	4a69      	ldr	r2, [pc, #420]	@ (800a580 <OTM8009A_Init+0x6d8>)
 800a3dc:	4619      	mov	r1, r3
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f000 f908 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800a3e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800a3e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800a3e8:	4a66      	ldr	r2, [pc, #408]	@ (800a584 <OTM8009A_Init+0x6dc>)
 800a3ea:	21c6      	movs	r1, #198	@ 0xc6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 f901 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a3f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800a3f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a3f6:	4a64      	ldr	r2, [pc, #400]	@ (800a588 <OTM8009A_Init+0x6e0>)
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f000 f8fa 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800a400:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a402:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800a404:	4a61      	ldr	r2, [pc, #388]	@ (800a58c <OTM8009A_Init+0x6e4>)
 800a406:	21ff      	movs	r1, #255	@ 0xff
 800a408:	4628      	mov	r0, r5
 800a40a:	f000 f8f3 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a40e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800a410:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a412:	4a5d      	ldr	r2, [pc, #372]	@ (800a588 <OTM8009A_Init+0x6e0>)
 800a414:	4619      	mov	r1, r3
 800a416:	4628      	mov	r0, r5
 800a418:	f000 f8ec 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a41c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a41e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a420:	4a59      	ldr	r2, [pc, #356]	@ (800a588 <OTM8009A_Init+0x6e0>)
 800a422:	4619      	mov	r1, r3
 800a424:	4628      	mov	r0, r5
 800a426:	f000 f8e5 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800a42a:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a42c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800a42e:	4a58      	ldr	r2, [pc, #352]	@ (800a590 <OTM8009A_Init+0x6e8>)
 800a430:	21e1      	movs	r1, #225	@ 0xe1
 800a432:	4628      	mov	r0, r5
 800a434:	f000 f8de 	bl	800a5f4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a438:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800a43a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a43c:	4a52      	ldr	r2, [pc, #328]	@ (800a588 <OTM8009A_Init+0x6e0>)
 800a43e:	4619      	mov	r1, r3
 800a440:	4628      	mov	r0, r5
 800a442:	f000 f8d7 	bl	800a5f4 <otm8009a_write_reg>
 800a446:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800a448:	2310      	movs	r3, #16
 800a44a:	4a52      	ldr	r2, [pc, #328]	@ (800a594 <OTM8009A_Init+0x6ec>)
 800a44c:	21e2      	movs	r1, #226	@ 0xe2
 800a44e:	4628      	mov	r0, r5
 800a450:	f000 f8d0 	bl	800a5f4 <otm8009a_write_reg>
 800a454:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800a456:	2300      	movs	r3, #0
 800a458:	4a4f      	ldr	r2, [pc, #316]	@ (800a598 <OTM8009A_Init+0x6f0>)
 800a45a:	2111      	movs	r1, #17
 800a45c:	4628      	mov	r0, r5
 800a45e:	f000 f8c9 	bl	800a5f4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800a462:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800a464:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800a466:	4638      	mov	r0, r7
 800a468:	f7ff fd11 	bl	8009e8e <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 800a46c:	4f4b      	ldr	r7, [pc, #300]	@ (800a59c <OTM8009A_Init+0x6f4>)
 800a46e:	2e00      	cmp	r6, #0
 800a470:	d061      	beq.n	800a536 <OTM8009A_Init+0x68e>
 800a472:	2e02      	cmp	r6, #2
 800a474:	d107      	bne.n	800a486 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800a476:	2300      	movs	r3, #0
 800a478:	4a49      	ldr	r2, [pc, #292]	@ (800a5a0 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800a47a:	213a      	movs	r1, #58	@ 0x3a
 800a47c:	4628      	mov	r0, r5
 800a47e:	f000 f8b9 	bl	800a5f4 <otm8009a_write_reg>
 800a482:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800a484:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800a486:	f1b8 0f01 	cmp.w	r8, #1
 800a48a:	d157      	bne.n	800a53c <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800a48c:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800a48e:	f10d 0207 	add.w	r2, sp, #7
 800a492:	2136      	movs	r1, #54	@ 0x36
 800a494:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800a496:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800a49a:	2300      	movs	r3, #0
 800a49c:	f000 f8aa 	bl	800a5f4 <otm8009a_write_reg>
 800a4a0:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800a4a2:	2304      	movs	r3, #4
 800a4a4:	4a3f      	ldr	r2, [pc, #252]	@ (800a5a4 <OTM8009A_Init+0x6fc>)
 800a4a6:	212a      	movs	r1, #42	@ 0x2a
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f000 f8a3 	bl	800a5f4 <otm8009a_write_reg>
 800a4ae:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800a4b0:	2304      	movs	r3, #4
 800a4b2:	4a3d      	ldr	r2, [pc, #244]	@ (800a5a8 <OTM8009A_Init+0x700>)
 800a4b4:	212b      	movs	r1, #43	@ 0x2b
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f000 f89c 	bl	800a5f4 <otm8009a_write_reg>
 800a4bc:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800a4be:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800a4c2:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4a39      	ldr	r2, [pc, #228]	@ (800a5ac <OTM8009A_Init+0x704>)
 800a4c8:	2151      	movs	r1, #81	@ 0x51
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 f892 	bl	800a5f4 <otm8009a_write_reg>
 800a4d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800a4d2:	4633      	mov	r3, r6
 800a4d4:	4a36      	ldr	r2, [pc, #216]	@ (800a5b0 <OTM8009A_Init+0x708>)
 800a4d6:	2153      	movs	r1, #83	@ 0x53
 800a4d8:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800a4da:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800a4dc:	f000 f88a 	bl	800a5f4 <otm8009a_write_reg>
 800a4e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800a4e2:	4633      	mov	r3, r6
 800a4e4:	4a33      	ldr	r2, [pc, #204]	@ (800a5b4 <OTM8009A_Init+0x70c>)
 800a4e6:	2155      	movs	r1, #85	@ 0x55
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f000 f883 	bl	800a5f4 <otm8009a_write_reg>
 800a4ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800a4f0:	4633      	mov	r3, r6
 800a4f2:	4a31      	ldr	r2, [pc, #196]	@ (800a5b8 <OTM8009A_Init+0x710>)
 800a4f4:	215e      	movs	r1, #94	@ 0x5e
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f000 f87c 	bl	800a5f4 <otm8009a_write_reg>
 800a4fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800a4fe:	4633      	mov	r3, r6
 800a500:	4a2e      	ldr	r2, [pc, #184]	@ (800a5bc <OTM8009A_Init+0x714>)
 800a502:	2129      	movs	r1, #41	@ 0x29
 800a504:	4628      	mov	r0, r5
 800a506:	f000 f875 	bl	800a5f4 <otm8009a_write_reg>
 800a50a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a50c:	4633      	mov	r3, r6
 800a50e:	4631      	mov	r1, r6
 800a510:	4a1d      	ldr	r2, [pc, #116]	@ (800a588 <OTM8009A_Init+0x6e0>)
 800a512:	4628      	mov	r0, r5
 800a514:	f000 f86e 	bl	800a5f4 <otm8009a_write_reg>
 800a518:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800a51a:	4633      	mov	r3, r6
 800a51c:	4a28      	ldr	r2, [pc, #160]	@ (800a5c0 <OTM8009A_Init+0x718>)
 800a51e:	212c      	movs	r1, #44	@ 0x2c
 800a520:	4628      	mov	r0, r5
 800a522:	f000 f867 	bl	800a5f4 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800a526:	42c4      	cmn	r4, r0
}
 800a528:	bf14      	ite	ne
 800a52a:	f04f 30ff 	movne.w	r0, #4294967295
 800a52e:	4630      	moveq	r0, r6
 800a530:	b002      	add	sp, #8
 800a532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800a536:	4633      	mov	r3, r6
 800a538:	4a22      	ldr	r2, [pc, #136]	@ (800a5c4 <OTM8009A_Init+0x71c>)
 800a53a:	e79e      	b.n	800a47a <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800a53c:	2300      	movs	r3, #0
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	e7bf      	b.n	800a4c2 <OTM8009A_Init+0x61a>
 800a542:	bf00      	nop
 800a544:	0802fc73 	.word	0x0802fc73
 800a548:	0802fd37 	.word	0x0802fd37
 800a54c:	0802fc64 	.word	0x0802fc64
 800a550:	0802fd33 	.word	0x0802fd33
 800a554:	0802fc55 	.word	0x0802fc55
 800a558:	0802fd34 	.word	0x0802fd34
 800a55c:	0802fc4b 	.word	0x0802fc4b
 800a560:	0802fd35 	.word	0x0802fd35
 800a564:	0802fc3c 	.word	0x0802fc3c
 800a568:	0802fd36 	.word	0x0802fd36
 800a56c:	0802fc2d 	.word	0x0802fc2d
 800a570:	0802fd23 	.word	0x0802fd23
 800a574:	0802fd44 	.word	0x0802fd44
 800a578:	0802fd45 	.word	0x0802fd45
 800a57c:	0802fd46 	.word	0x0802fd46
 800a580:	0802fd47 	.word	0x0802fd47
 800a584:	0802fd48 	.word	0x0802fd48
 800a588:	0802fd17 	.word	0x0802fd17
 800a58c:	0802fc2a 	.word	0x0802fc2a
 800a590:	0802fc1a 	.word	0x0802fc1a
 800a594:	0802fc0a 	.word	0x0802fc0a
 800a598:	0802fd3a 	.word	0x0802fd3a
 800a59c:	2400e774 	.word	0x2400e774
 800a5a0:	0802fd3b 	.word	0x0802fd3b
 800a5a4:	0802fd4d 	.word	0x0802fd4d
 800a5a8:	0802fd49 	.word	0x0802fd49
 800a5ac:	0802fd3d 	.word	0x0802fd3d
 800a5b0:	0802fd3e 	.word	0x0802fd3e
 800a5b4:	0802fd3f 	.word	0x0802fd3f
 800a5b8:	0802fd40 	.word	0x0802fd40
 800a5bc:	0802fd41 	.word	0x0802fd41
 800a5c0:	0802fd42 	.word	0x0802fd42
 800a5c4:	0802fd3c 	.word	0x0802fd3c

0800a5c8 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 800a5c8:	b160      	cbz	r0, 800a5e4 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a5ca:	684b      	ldr	r3, [r1, #4]
 800a5cc:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a5ce:	688b      	ldr	r3, [r1, #8]
 800a5d0:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800a5d2:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800a5d4:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800a5d6:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800a5d8:	4b04      	ldr	r3, [pc, #16]	@ (800a5ec <OTM8009A_RegisterBusIO+0x24>)
 800a5da:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800a5dc:	4b04      	ldr	r3, [pc, #16]	@ (800a5f0 <OTM8009A_RegisterBusIO+0x28>)
 800a5de:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	08009e73 	.word	0x08009e73
 800a5f0:	08009e81 	.word	0x08009e81

0800a5f4 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800a5f4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800a5f6:	6804      	ldr	r4, [r0, #0]
 800a5f8:	6880      	ldr	r0, [r0, #8]
 800a5fa:	46a4      	mov	ip, r4
}
 800a5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800a600:	4760      	bx	ip
	...

0800a604 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800a604:	4a10      	ldr	r2, [pc, #64]	@ (800a648 <BSP_I2C4_DeInit+0x44>)
{
 800a606:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800a608:	6813      	ldr	r3, [r2, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800a60e:	b10b      	cbz	r3, 800a614 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800a610:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800a612:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800a614:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a618:	480c      	ldr	r0, [pc, #48]	@ (800a64c <BSP_I2C4_DeInit+0x48>)
 800a61a:	f001 fe3d 	bl	800c298 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800a61e:	480b      	ldr	r0, [pc, #44]	@ (800a64c <BSP_I2C4_DeInit+0x48>)
 800a620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a624:	f001 fe38 	bl	800c298 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800a628:	4a09      	ldr	r2, [pc, #36]	@ (800a650 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a62a:	480a      	ldr	r0, [pc, #40]	@ (800a654 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800a62c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800a630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a634:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a638:	f002 f87e 	bl	800c738 <HAL_I2C_DeInit>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d0e7      	beq.n	800a610 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800a640:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800a644:	e7e5      	b.n	800a612 <BSP_I2C4_DeInit+0xe>
 800a646:	bf00      	nop
 800a648:	2400f1d8 	.word	0x2400f1d8
 800a64c:	58020c00 	.word	0x58020c00
 800a650:	58024400 	.word	0x58024400
 800a654:	2400e780 	.word	0x2400e780

0800a658 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a658:	2300      	movs	r3, #0
 800a65a:	2201      	movs	r2, #1
{
 800a65c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800a65e:	6041      	str	r1, [r0, #4]
{
 800a660:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a662:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a664:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800a668:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a66c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800a670:	f002 f80c 	bl	800c68c <HAL_I2C_Init>
 800a674:	4601      	mov	r1, r0
 800a676:	b108      	cbz	r0, 800a67c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 800a678:	2001      	movs	r0, #1
}
 800a67a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800a67c:	4620      	mov	r0, r4
 800a67e:	f002 fa32 	bl	800cae6 <HAL_I2CEx_ConfigAnalogFilter>
 800a682:	4601      	mov	r1, r0
 800a684:	2800      	cmp	r0, #0
 800a686:	d1f7      	bne.n	800a678 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800a688:	4620      	mov	r0, r4
 800a68a:	f002 fa52 	bl	800cb32 <HAL_I2CEx_ConfigDigitalFilter>
 800a68e:	3800      	subs	r0, #0
 800a690:	bf18      	it	ne
 800a692:	2001      	movne	r0, #1
 800a694:	e7f1      	b.n	800a67a <MX_I2C4_Init+0x22>
	...

0800a698 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 800a698:	4ba1      	ldr	r3, [pc, #644]	@ (800a920 <BSP_I2C4_Init+0x288>)
 800a69a:	48a2      	ldr	r0, [pc, #648]	@ (800a924 <BSP_I2C4_Init+0x28c>)
{
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 800a6a0:	6003      	str	r3, [r0, #0]
{
 800a6a2:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 800a6a4:	4ba0      	ldr	r3, [pc, #640]	@ (800a928 <BSP_I2C4_Init+0x290>)
 800a6a6:	681c      	ldr	r4, [r3, #0]
 800a6a8:	b11c      	cbz	r4, 800a6b2 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800a6aa:	2000      	movs	r0, #0
}
 800a6ac:	b013      	add	sp, #76	@ 0x4c
 800a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800a6b6:	f002 fa11 	bl	800cadc <HAL_I2C_GetState>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d1f5      	bne.n	800a6aa <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a6be:	4d9b      	ldr	r5, [pc, #620]	@ (800a92c <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a6c0:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a6c4:	2702      	movs	r7, #2
 800a6c6:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a6c8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a6cc:	a90d      	add	r1, sp, #52	@ 0x34
 800a6ce:	4898      	ldr	r0, [pc, #608]	@ (800a930 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a6d0:	f043 0308 	orr.w	r3, r3, #8
 800a6d4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800a6d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800a6dc:	f003 0308 	and.w	r3, r3, #8
 800a6e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a6e4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800a6e8:	f043 0308 	orr.w	r3, r3, #8
 800a6ec:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800a6f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a6f4:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a6f6:	f003 0308 	and.w	r3, r3, #8
 800a6fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a6fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a702:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a706:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a70a:	f001 fcdd 	bl	800c0c8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800a70e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a712:	a90d      	add	r1, sp, #52	@ 0x34
 800a714:	4886      	ldr	r0, [pc, #536]	@ (800a930 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800a716:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a718:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a71c:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a720:	f001 fcd2 	bl	800c0c8 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800a724:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800a728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a72c:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 800a730:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800a734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a738:	930c      	str	r3, [sp, #48]	@ 0x30
 800a73a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 800a73c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800a740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a744:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 800a748:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800a74c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a750:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a754:	f004 fcd8 	bl	800f108 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800a758:	2800      	cmp	r0, #0
 800a75a:	d06f      	beq.n	800a83c <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a75c:	4b75      	ldr	r3, [pc, #468]	@ (800a934 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 800a75e:	4622      	mov	r2, r4
 800a760:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 800a762:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a766:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a76a:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 800a93c <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a76e:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a772:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a776:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 800a77a:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a77c:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a780:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 800a784:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 800a788:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 800a78c:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a78e:	4b6a      	ldr	r3, [pc, #424]	@ (800a938 <BSP_I2C4_Init+0x2a0>)
 800a790:	681b      	ldr	r3, [r3, #0]
{
 800a792:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a794:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800a798:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800a79c:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800a7a0:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800a7a4:	d35d      	bcc.n	800a862 <BSP_I2C4_Init+0x1ca>
 800a7a6:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a7a8:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800a7aa:	9d00      	ldr	r5, [sp, #0]
 800a7ac:	42bd      	cmp	r5, r7
 800a7ae:	d852      	bhi.n	800a856 <BSP_I2C4_Init+0x1be>
 800a7b0:	42be      	cmp	r6, r7
 800a7b2:	d350      	bcc.n	800a856 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 800a7b4:	4591      	cmp	r9, r2
 800a7b6:	d04e      	beq.n	800a856 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a7b8:	2514      	movs	r5, #20
 800a7ba:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 800a7be:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a7c0:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a7c2:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a7c6:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a7c8:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a7cc:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a7d0:	d93e      	bls.n	800a850 <BSP_I2C4_Init+0x1b8>
 800a7d2:	4a59      	ldr	r2, [pc, #356]	@ (800a938 <BSP_I2C4_Init+0x2a0>)
 800a7d4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a7d6:	4b58      	ldr	r3, [pc, #352]	@ (800a938 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a7d8:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 800a7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e0:	4956      	ldr	r1, [pc, #344]	@ (800a93c <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a7e2:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a7e4:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a7e6:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a7e8:	0043      	lsls	r3, r0, #1
 800a7ea:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 800a7ee:	e9cd 2501 	strd	r2, r5, [sp, #4]
 800a7f2:	f10b 0b01 	add.w	fp, fp, #1
 800a7f6:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 800a7fa:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 800a7fe:	9508      	str	r5, [sp, #32]
 800a800:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a802:	9b05      	ldr	r3, [sp, #20]
 800a804:	429f      	cmp	r7, r3
 800a806:	d138      	bne.n	800a87a <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a80c:	d816      	bhi.n	800a83c <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a80e:	2114      	movs	r1, #20
 800a810:	9a01      	ldr	r2, [sp, #4]
 800a812:	4b4a      	ldr	r3, [pc, #296]	@ (800a93c <BSP_I2C4_Init+0x2a4>)
 800a814:	434a      	muls	r2, r1
 800a816:	1899      	adds	r1, r3, r2
 800a818:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800a81a:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a81c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a820:	684b      	ldr	r3, [r1, #4]
 800a822:	051b      	lsls	r3, r3, #20
 800a824:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a828:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a82a:	688b      	ldr	r3, [r1, #8]
 800a82c:	041b      	lsls	r3, r3, #16
 800a82e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a832:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800a834:	68cb      	ldr	r3, [r1, #12]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a83a:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a83c:	4621      	mov	r1, r4
 800a83e:	4839      	ldr	r0, [pc, #228]	@ (800a924 <BSP_I2C4_Init+0x28c>)
 800a840:	f7ff ff0a 	bl	800a658 <MX_I2C4_Init>
 800a844:	2800      	cmp	r0, #0
 800a846:	f43f af30 	beq.w	800a6aa <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 800a84a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800a84e:	e72d      	b.n	800a6ac <BSP_I2C4_Init+0x14>
 800a850:	4691      	mov	r9, r2
 800a852:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a856:	f10e 0e01 	add.w	lr, lr, #1
 800a85a:	440f      	add	r7, r1
 800a85c:	f1be 0f10 	cmp.w	lr, #16
 800a860:	d1a3      	bne.n	800a7aa <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a862:	f1bc 0f10 	cmp.w	ip, #16
 800a866:	4488      	add	r8, r1
 800a868:	d196      	bne.n	800a798 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a86a:	3201      	adds	r2, #1
 800a86c:	4401      	add	r1, r0
 800a86e:	2a10      	cmp	r2, #16
 800a870:	d18f      	bne.n	800a792 <BSP_I2C4_Init+0xfa>
 800a872:	f1ba 0f00 	cmp.w	sl, #0
 800a876:	d1ac      	bne.n	800a7d2 <BSP_I2C4_Init+0x13a>
 800a878:	e7ad      	b.n	800a7d6 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a87a:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a87c:	f04f 0c00 	mov.w	ip, #0
 800a880:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a882:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a886:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a888:	441d      	add	r5, r3
 800a88a:	441e      	add	r6, r3
 800a88c:	9503      	str	r5, [sp, #12]
 800a88e:	ebab 0503 	sub.w	r5, fp, r3
 800a892:	9607      	str	r6, [sp, #28]
 800a894:	006d      	lsls	r5, r5, #1
 800a896:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a898:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a89a:	f240 5214 	movw	r2, #1300	@ 0x514
 800a89e:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a8a2:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a8a6:	4295      	cmp	r5, r2
 800a8a8:	d92f      	bls.n	800a90a <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a8aa:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a8ae:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800a8b2:	d22a      	bcs.n	800a90a <BSP_I2C4_Init+0x272>
 800a8b4:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a8b6:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a8ba:	f8dd 9000 	ldr.w	r9, [sp]
 800a8be:	442e      	add	r6, r5
 800a8c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a8c4:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 800a8c8:	f240 4212 	movw	r2, #1042	@ 0x412
 800a8cc:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800a8d0:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a8d4:	4592      	cmp	sl, r2
 800a8d6:	d811      	bhi.n	800a8fc <BSP_I2C4_Init+0x264>
 800a8d8:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 800a8dc:	d30e      	bcc.n	800a8fc <BSP_I2C4_Init+0x264>
 800a8de:	4580      	cmp	r8, r0
 800a8e0:	d90c      	bls.n	800a8fc <BSP_I2C4_Init+0x264>
              error = -error;
 800a8e2:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800a8e6:	bf28      	it	cs
 800a8e8:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800a8ea:	9a02      	ldr	r2, [sp, #8]
 800a8ec:	4592      	cmp	sl, r2
 800a8ee:	d205      	bcs.n	800a8fc <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 800a8f0:	9a04      	ldr	r2, [sp, #16]
 800a8f2:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800a8f4:	9a06      	ldr	r2, [sp, #24]
 800a8f6:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 800a8fa:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a8fc:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 800a900:	4498      	add	r8, r3
 800a902:	441e      	add	r6, r3
 800a904:	eba9 0903 	sub.w	r9, r9, r3
 800a908:	d1dc      	bne.n	800a8c4 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a90a:	9a00      	ldr	r2, [sp, #0]
 800a90c:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800a910:	441d      	add	r5, r3
 800a912:	eba2 0203 	sub.w	r2, r2, r3
 800a916:	9200      	str	r2, [sp, #0]
 800a918:	d1bf      	bne.n	800a89a <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a91a:	3701      	adds	r7, #1
 800a91c:	3114      	adds	r1, #20
 800a91e:	e770      	b.n	800a802 <BSP_I2C4_Init+0x16a>
 800a920:	58001c00 	.word	0x58001c00
 800a924:	2400e780 	.word	0x2400e780
 800a928:	2400f1d8 	.word	0x2400f1d8
 800a92c:	58024400 	.word	0x58024400
 800a930:	58020c00 	.word	0x58020c00
 800a934:	3b9aca00 	.word	0x3b9aca00
 800a938:	2400e7d4 	.word	0x2400e7d4
 800a93c:	2400e7d8 	.word	0x2400e7d8

0800a940 <BSP_I2C4_WriteReg>:
{
 800a940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a942:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800a946:	9200      	str	r2, [sp, #0]
 800a948:	460a      	mov	r2, r1
 800a94a:	4601      	mov	r1, r0
 800a94c:	4808      	ldr	r0, [pc, #32]	@ (800a970 <BSP_I2C4_WriteReg+0x30>)
 800a94e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a952:	2301      	movs	r3, #1
 800a954:	f001 ff0a 	bl	800c76c <HAL_I2C_Mem_Write>
 800a958:	b140      	cbz	r0, 800a96c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a95a:	4805      	ldr	r0, [pc, #20]	@ (800a970 <BSP_I2C4_WriteReg+0x30>)
 800a95c:	f002 f8c1 	bl	800cae2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a960:	2804      	cmp	r0, #4
 800a962:	bf14      	ite	ne
 800a964:	f06f 0003 	mvnne.w	r0, #3
 800a968:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800a96c:	b004      	add	sp, #16
 800a96e:	bd10      	pop	{r4, pc}
 800a970:	2400e780 	.word	0x2400e780

0800a974 <BSP_I2C4_ReadReg>:
{
 800a974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a976:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800a97a:	9200      	str	r2, [sp, #0]
 800a97c:	460a      	mov	r2, r1
 800a97e:	4601      	mov	r1, r0
 800a980:	4808      	ldr	r0, [pc, #32]	@ (800a9a4 <BSP_I2C4_ReadReg+0x30>)
 800a982:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a986:	2301      	movs	r3, #1
 800a988:	f001 ffca 	bl	800c920 <HAL_I2C_Mem_Read>
 800a98c:	b140      	cbz	r0, 800a9a0 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a98e:	4805      	ldr	r0, [pc, #20]	@ (800a9a4 <BSP_I2C4_ReadReg+0x30>)
 800a990:	f002 f8a7 	bl	800cae2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a994:	2804      	cmp	r0, #4
 800a996:	bf14      	ite	ne
 800a998:	f06f 0003 	mvnne.w	r0, #3
 800a99c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800a9a0:	b004      	add	sp, #16
 800a9a2:	bd10      	pop	{r4, pc}
 800a9a4:	2400e780 	.word	0x2400e780

0800a9a8 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800a9a8:	f000 bd08 	b.w	800b3bc <HAL_GetTick>

0800a9ac <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800a9ac:	4a09      	ldr	r2, [pc, #36]	@ (800a9d4 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a9ae:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 800a9b2:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800a9b4:	684a      	ldr	r2, [r1, #4]
 800a9b6:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800a9bc:	688a      	ldr	r2, [r1, #8]
 800a9be:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800a9c0:	680a      	ldr	r2, [r1, #0]
 800a9c2:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800a9ca:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800a9cc:	68ca      	ldr	r2, [r1, #12]
 800a9ce:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800a9d0:	f003 bcc4 	b.w	800e35c <HAL_QSPI_Init>
 800a9d4:	52005000 	.word	0x52005000

0800a9d8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800a9d8:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a9da:	b988      	cbnz	r0, 800aa00 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a9dc:	4c0a      	ldr	r4, [pc, #40]	@ (800aa08 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800a9de:	480b      	ldr	r0, [pc, #44]	@ (800aa0c <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a9e0:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a9e2:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a9e4:	b94b      	cbnz	r3, 800a9fa <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a9e6:	f7ff f9bc 	bl	8009d62 <MT25TL01G_EnableMemoryMappedModeSTR>
 800a9ea:	b110      	cbz	r0, 800a9f2 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9ec:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800a9f0:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a9f2:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800a9f4:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a9f6:	7023      	strb	r3, [r4, #0]
 800a9f8:	e7fa      	b.n	800a9f0 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a9fa:	f7ff f968 	bl	8009cce <MT25TL01G_EnableMemoryMappedModeDTR>
 800a9fe:	e7f4      	b.n	800a9ea <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 800aa00:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800aa04:	e7f4      	b.n	800a9f0 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800aa06:	bf00      	nop
 800aa08:	2400f1dc 	.word	0x2400f1dc
 800aa0c:	24000600 	.word	0x24000600

0800aa10 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	460c      	mov	r4, r1
 800aa14:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800aa16:	bb30      	cbnz	r0, 800aa66 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800aa18:	4d17      	ldr	r5, [pc, #92]	@ (800aa78 <BSP_QSPI_ConfigFlash+0x68>)
 800aa1a:	782b      	ldrb	r3, [r5, #0]
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d025      	beq.n	800aa6c <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800aa20:	fab2 f382 	clz	r3, r2
 800aa24:	4e15      	ldr	r6, [pc, #84]	@ (800aa7c <BSP_QSPI_ConfigFlash+0x6c>)
 800aa26:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800aa28:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800aa2a:	011b      	lsls	r3, r3, #4
 800aa2c:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800aa2e:	f003 fc95 	bl	800e35c <HAL_QSPI_Init>
 800aa32:	b9f0      	cbnz	r0, 800aa72 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800aa34:	786b      	ldrb	r3, [r5, #1]
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d10f      	bne.n	800aa5a <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800aa3a:	2c03      	cmp	r4, #3
 800aa3c:	d105      	bne.n	800aa4a <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800aa3e:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800aa40:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800aa42:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800aa44:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800aa46:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 800aa48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f7ff f923 	bl	8009c96 <MT25TL01G_ExitQPIMode>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d0f4      	beq.n	800aa3e <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa54:	f06f 0004 	mvn.w	r0, #4
 800aa58:	e7f6      	b.n	800aa48 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 800aa5a:	2c03      	cmp	r4, #3
 800aa5c:	d1ef      	bne.n	800aa3e <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7ff f8fd 	bl	8009c5e <MT25TL01G_EnterQPIMode>
 800aa64:	e7f4      	b.n	800aa50 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 800aa66:	f06f 0001 	mvn.w	r0, #1
 800aa6a:	e7ed      	b.n	800aa48 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800aa6c:	f06f 0019 	mvn.w	r0, #25
 800aa70:	e7ea      	b.n	800aa48 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800aa72:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800aa76:	e7e7      	b.n	800aa48 <BSP_QSPI_ConfigFlash+0x38>
 800aa78:	2400f1dc 	.word	0x2400f1dc
 800aa7c:	24000600 	.word	0x24000600

0800aa80 <BSP_QSPI_Init>:
{
 800aa80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa84:	460c      	mov	r4, r1
 800aa86:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	f040 81ac 	bne.w	800ade6 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800aa8e:	4d03      	ldr	r5, [pc, #12]	@ (800aa9c <BSP_QSPI_Init+0x1c>)
 800aa90:	782f      	ldrb	r7, [r5, #0]
 800aa92:	b12f      	cbz	r7, 800aaa0 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 800aa94:	2000      	movs	r0, #0
}
 800aa96:	b024      	add	sp, #144	@ 0x90
 800aa98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9c:	2400f1dc 	.word	0x2400f1dc
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800aaa0:	4bc3      	ldr	r3, [pc, #780]	@ (800adb0 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800aaa2:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800aaa6:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800aaa8:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 800aaaa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800aaae:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800aab2:	48c0      	ldr	r0, [pc, #768]	@ (800adb4 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800aab4:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 800aab8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aabc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800aac0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800aac4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800aac8:	9201      	str	r2, [sp, #4]
 800aaca:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800aacc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800aace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aad2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800aad4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800aad6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800aada:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800aadc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aae0:	f042 0202 	orr.w	r2, r2, #2
 800aae4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800aae8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aaec:	f002 0202 	and.w	r2, r2, #2
 800aaf0:	9202      	str	r2, [sp, #8]
 800aaf2:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800aaf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aaf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aafc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ab00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab04:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800ab08:	9203      	str	r2, [sp, #12]
 800ab0a:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800ab0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab10:	f042 0208 	orr.w	r2, r2, #8
 800ab14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ab18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab1c:	f002 0208 	and.w	r2, r2, #8
 800ab20:	9204      	str	r2, [sp, #16]
 800ab22:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800ab24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab28:	f042 0220 	orr.w	r2, r2, #32
 800ab2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ab30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab34:	f002 0220 	and.w	r2, r2, #32
 800ab38:	9205      	str	r2, [sp, #20]
 800ab3a:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800ab3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab40:	f042 0220 	orr.w	r2, r2, #32
 800ab44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ab48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab4c:	f002 0220 	and.w	r2, r2, #32
 800ab50:	9206      	str	r2, [sp, #24]
 800ab52:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800ab54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab58:	f042 0220 	orr.w	r2, r2, #32
 800ab5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ab60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab64:	f002 0220 	and.w	r2, r2, #32
 800ab68:	9207      	str	r2, [sp, #28]
 800ab6a:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800ab6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ab78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab7c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800ab80:	9208      	str	r2, [sp, #32]
 800ab82:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800ab84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ab8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800ab90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ab94:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800ab98:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800ab9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aba0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aba4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800aba8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800abac:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800abb0:	920a      	str	r2, [sp, #40]	@ 0x28
 800abb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800abb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800abb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abbc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800abc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800abc4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800abc8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800abca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800abcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800abd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abd4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800abd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe0:	930c      	str	r3, [sp, #48]	@ 0x30
 800abe2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800abe4:	2302      	movs	r3, #2
 800abe6:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800abea:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800abec:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800abee:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800abf2:	f001 fa69 	bl	800c0c8 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800abf6:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800abf8:	a916      	add	r1, sp, #88	@ 0x58
 800abfa:	486f      	ldr	r0, [pc, #444]	@ (800adb8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800abfc:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800abfe:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800ac02:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800ac06:	f001 fa5f 	bl	800c0c8 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800ac0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800ac0e:	a916      	add	r1, sp, #88	@ 0x58
 800ac10:	486a      	ldr	r0, [pc, #424]	@ (800adbc <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800ac12:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800ac14:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800ac16:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800ac18:	f001 fa56 	bl	800c0c8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800ac1c:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800ac1e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800ac22:	4867      	ldr	r0, [pc, #412]	@ (800adc0 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800ac24:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800ac28:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800ac2a:	f001 fa4d 	bl	800c0c8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800ac2e:	a916      	add	r1, sp, #88	@ 0x58
 800ac30:	4864      	ldr	r0, [pc, #400]	@ (800adc4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800ac32:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800ac36:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800ac3a:	f001 fa45 	bl	800c0c8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800ac3e:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800ac40:	a916      	add	r1, sp, #88	@ 0x58
 800ac42:	485f      	ldr	r0, [pc, #380]	@ (800adc0 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800ac44:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800ac46:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800ac48:	f001 fa3e 	bl	800c0c8 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800ac4c:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800ac4e:	a916      	add	r1, sp, #88	@ 0x58
 800ac50:	485c      	ldr	r0, [pc, #368]	@ (800adc4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800ac52:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800ac54:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800ac56:	f001 fa37 	bl	800c0c8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800ac5a:	a916      	add	r1, sp, #88	@ 0x58
 800ac5c:	4856      	ldr	r0, [pc, #344]	@ (800adb8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800ac5e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800ac62:	f001 fa31 	bl	800c0c8 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800ac66:	a916      	add	r1, sp, #88	@ 0x58
 800ac68:	4856      	ldr	r0, [pc, #344]	@ (800adc4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800ac6a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800ac6e:	f001 fa2b 	bl	800c0c8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800ac72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800ac76:	a916      	add	r1, sp, #88	@ 0x58
 800ac78:	484f      	ldr	r0, [pc, #316]	@ (800adb8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800ac7a:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800ac7c:	f001 fa24 	bl	800c0c8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800ac80:	463a      	mov	r2, r7
 800ac82:	210f      	movs	r1, #15
 800ac84:	205c      	movs	r0, #92	@ 0x5c
 800ac86:	f000 fbc9 	bl	800b41c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800ac8a:	205c      	movs	r0, #92	@ 0x5c
 800ac8c:	f000 fbf8 	bl	800b480 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800ac90:	a811      	add	r0, sp, #68	@ 0x44
 800ac92:	f7fe ff38 	bl	8009b06 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800ac96:	7863      	ldrb	r3, [r4, #1]
 800ac98:	4a4b      	ldr	r2, [pc, #300]	@ (800adc8 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800ac9a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800ac9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aca2:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aca4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aca6:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800acaa:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 800acae:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800acb2:	a90d      	add	r1, sp, #52	@ 0x34
 800acb4:	4845      	ldr	r0, [pc, #276]	@ (800adcc <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800acb6:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800acb8:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800acba:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800acbc:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800acbe:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800acc0:	f7ff fe74 	bl	800a9ac <MX_QSPI_Init>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f040 8091 	bne.w	800adec <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800acca:	2103      	movs	r1, #3
 800accc:	483f      	ldr	r0, [pc, #252]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800acce:	f7ff f88e 	bl	8009dee <MT25TL01G_ResetEnable>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	f040 8084 	bne.w	800ade0 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800acd8:	2103      	movs	r1, #3
 800acda:	483c      	ldr	r0, [pc, #240]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800acdc:	f7ff f8a8 	bl	8009e30 <MT25TL01G_ResetMemory>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d17d      	bne.n	800ade0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ace4:	7869      	ldrb	r1, [r5, #1]
 800ace6:	4839      	ldr	r0, [pc, #228]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800ace8:	f7fe ff1e 	bl	8009b28 <MT25TL01G_AutoPollingMemReady>
 800acec:	4601      	mov	r1, r0
 800acee:	2800      	cmp	r0, #0
 800acf0:	d176      	bne.n	800ade0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800acf2:	4836      	ldr	r0, [pc, #216]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800acf4:	f7ff f87b 	bl	8009dee <MT25TL01G_ResetEnable>
 800acf8:	4601      	mov	r1, r0
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d170      	bne.n	800ade0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800acfe:	4833      	ldr	r0, [pc, #204]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800ad00:	f7ff f896 	bl	8009e30 <MT25TL01G_ResetMemory>
 800ad04:	4601      	mov	r1, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d16a      	bne.n	800ade0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800ad0a:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800ad0c:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ad0e:	482f      	ldr	r0, [pc, #188]	@ (800adcc <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800ad10:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ad12:	f7fe ff09 	bl	8009b28 <MT25TL01G_AutoPollingMemReady>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d162      	bne.n	800ade0 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ad1a:	7869      	ldrb	r1, [r5, #1]
 800ad1c:	482b      	ldr	r0, [pc, #172]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800ad1e:	f7fe ff72 	bl	8009c06 <MT25TL01G_Enter4BytesAddressMode>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d15c      	bne.n	800ade0 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ad26:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 800ad2a:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800ad2e:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad30:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ad34:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800ad36:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad38:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800ad3a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800ad3c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800ad40:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 800ad42:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ad44:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ad48:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ad4c:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad50:	481e      	ldr	r0, [pc, #120]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800ad52:	f003 fb4f 	bl	800e3f4 <HAL_QSPI_Command>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d142      	bne.n	800ade0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad5e:	f10d 0102 	add.w	r1, sp, #2
 800ad62:	481a      	ldr	r0, [pc, #104]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800ad64:	f003 fbe7 	bl	800e536 <HAL_QSPI_Receive>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d139      	bne.n	800ade0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ad6c:	7869      	ldrb	r1, [r5, #1]
 800ad6e:	4817      	ldr	r0, [pc, #92]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800ad70:	f7fe ff05 	bl	8009b7e <MT25TL01G_WriteEnable>
 800ad74:	bba0      	cbnz	r0, 800ade0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800ad76:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad7c:	a916      	add	r1, sp, #88	@ 0x58
 800ad7e:	4813      	ldr	r0, [pc, #76]	@ (800adcc <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800ad80:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800ad82:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ad86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad8a:	051b      	lsls	r3, r3, #20
 800ad8c:	0d1b      	lsrs	r3, r3, #20
 800ad8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad96:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad9a:	f003 fb2b 	bl	800e3f4 <HAL_QSPI_Command>
 800ad9e:	b9f8      	cbnz	r0, 800ade0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ada0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ada4:	f10d 0102 	add.w	r1, sp, #2
 800ada8:	4808      	ldr	r0, [pc, #32]	@ (800adcc <BSP_QSPI_Init+0x34c>)
 800adaa:	f003 fb68 	bl	800e47e <HAL_QSPI_Transmit>
 800adae:	e00f      	b.n	800add0 <BSP_QSPI_Init+0x350>
 800adb0:	58024400 	.word	0x58024400
 800adb4:	58020400 	.word	0x58020400
 800adb8:	58021800 	.word	0x58021800
 800adbc:	58020c00 	.word	0x58020c00
 800adc0:	58021c00 	.word	0x58021c00
 800adc4:	58021400 	.word	0x58021400
 800adc8:	0802fd54 	.word	0x0802fd54
 800adcc:	24000600 	.word	0x24000600
 800add0:	b930      	cbnz	r0, 800ade0 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800add2:	7862      	ldrb	r2, [r4, #1]
 800add4:	7821      	ldrb	r1, [r4, #0]
 800add6:	f7ff fe1b 	bl	800aa10 <BSP_QSPI_ConfigFlash>
 800adda:	2800      	cmp	r0, #0
 800addc:	f43f ae5a 	beq.w	800aa94 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800ade0:	f06f 0004 	mvn.w	r0, #4
 800ade4:	e657      	b.n	800aa96 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 800ade6:	f06f 0001 	mvn.w	r0, #1
 800adea:	e654      	b.n	800aa96 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800adec:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800adf0:	e651      	b.n	800aa96 <BSP_QSPI_Init+0x16>
 800adf2:	bf00      	nop

0800adf4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800adf4:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800adf6:	4604      	mov	r4, r0
 800adf8:	b970      	cbnz	r0, 800ae18 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800adfa:	4b09      	ldr	r3, [pc, #36]	@ (800ae20 <BSP_SDRAM_DeInit+0x2c>)
 800adfc:	4809      	ldr	r0, [pc, #36]	@ (800ae24 <BSP_SDRAM_DeInit+0x30>)
 800adfe:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800ae00:	f005 f94a 	bl	8010098 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800ae04:	207a      	movs	r0, #122	@ 0x7a
 800ae06:	f000 fb49 	bl	800b49c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800ae0a:	4807      	ldr	r0, [pc, #28]	@ (800ae28 <BSP_SDRAM_DeInit+0x34>)
 800ae0c:	4b07      	ldr	r3, [pc, #28]	@ (800ae2c <BSP_SDRAM_DeInit+0x38>)
 800ae0e:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800ae10:	f003 f82a 	bl	800de68 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800ae14:	4620      	mov	r0, r4
}
 800ae16:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800ae18:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800ae1c:	e7fb      	b.n	800ae16 <BSP_SDRAM_DeInit+0x22>
 800ae1e:	bf00      	nop
 800ae20:	52004140 	.word	0x52004140
 800ae24:	2400f2e0 	.word	0x2400f2e0
 800ae28:	2400f1e8 	.word	0x2400f1e8
 800ae2c:	52000040 	.word	0x52000040

0800ae30 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800ae30:	2201      	movs	r2, #1
 800ae32:	4915      	ldr	r1, [pc, #84]	@ (800ae88 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800ae34:	4b15      	ldr	r3, [pc, #84]	@ (800ae8c <MX_SDRAM_Init+0x5c>)
{
 800ae36:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800ae38:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800ae3c:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800ae3e:	2104      	movs	r1, #4
 800ae40:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800ae42:	2440      	movs	r4, #64	@ 0x40
{
 800ae44:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800ae46:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800ae4a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800ae4e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800ae52:	2200      	movs	r2, #0
 800ae54:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800ae58:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800ae5c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800ae60:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800ae62:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800ae64:	2207      	movs	r2, #7
 800ae66:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 800ae68:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800ae6c:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800ae6e:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800ae70:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800ae74:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800ae78:	f005 f8e6 	bl	8010048 <HAL_SDRAM_Init>
}
 800ae7c:	3800      	subs	r0, #0
 800ae7e:	bf18      	it	ne
 800ae80:	2001      	movne	r0, #1
 800ae82:	b008      	add	sp, #32
 800ae84:	bd10      	pop	{r4, pc}
 800ae86:	bf00      	nop
 800ae88:	52004140 	.word	0x52004140
 800ae8c:	2400f2e0 	.word	0x2400f2e0

0800ae90 <BSP_SDRAM_Init>:
{
 800ae90:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800ae92:	4605      	mov	r5, r0
{
 800ae94:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800ae96:	2800      	cmp	r0, #0
 800ae98:	f040 80dd 	bne.w	800b056 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800ae9c:	4b71      	ldr	r3, [pc, #452]	@ (800b064 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800ae9e:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800aea0:	a909      	add	r1, sp, #36	@ 0x24
 800aea2:	4871      	ldr	r0, [pc, #452]	@ (800b068 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800aea4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800aea8:	4c70      	ldr	r4, [pc, #448]	@ (800b06c <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800aeaa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800aeae:	4e70      	ldr	r6, [pc, #448]	@ (800b070 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800aeb0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800aeb4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800aeb8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800aebc:	9201      	str	r2, [sp, #4]
 800aebe:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800aec0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800aec4:	f042 0201 	orr.w	r2, r2, #1
 800aec8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800aecc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800aed0:	f002 0201 	and.w	r2, r2, #1
 800aed4:	9202      	str	r2, [sp, #8]
 800aed6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aed8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aedc:	f042 0208 	orr.w	r2, r2, #8
 800aee0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800aee4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aee8:	f002 0208 	and.w	r2, r2, #8
 800aeec:	9203      	str	r2, [sp, #12]
 800aeee:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800aef0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aef4:	f042 0210 	orr.w	r2, r2, #16
 800aef8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800aefc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af00:	f002 0210 	and.w	r2, r2, #16
 800af04:	9204      	str	r2, [sp, #16]
 800af06:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800af08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af0c:	f042 0220 	orr.w	r2, r2, #32
 800af10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800af14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af18:	f002 0220 	and.w	r2, r2, #32
 800af1c:	9205      	str	r2, [sp, #20]
 800af1e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800af20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af28:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800af2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af30:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800af34:	9206      	str	r2, [sp, #24]
 800af36:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800af38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800af40:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800af44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af48:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800af4c:	9207      	str	r2, [sp, #28]
 800af4e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800af50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af58:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800af5c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800af5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af66:	9308      	str	r3, [sp, #32]
 800af68:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800af70:	230c      	movs	r3, #12
 800af72:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800af76:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800af7a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800af7c:	f001 f8a4 	bl	800c0c8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800af80:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800af84:	a909      	add	r1, sp, #36	@ 0x24
 800af86:	483b      	ldr	r0, [pc, #236]	@ (800b074 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800af88:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800af8a:	f001 f89d 	bl	800c0c8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800af8e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800af92:	a909      	add	r1, sp, #36	@ 0x24
 800af94:	4838      	ldr	r0, [pc, #224]	@ (800b078 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800af96:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800af98:	f001 f896 	bl	800c0c8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800af9c:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800afa0:	a909      	add	r1, sp, #36	@ 0x24
 800afa2:	4836      	ldr	r0, [pc, #216]	@ (800b07c <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800afa4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800afa6:	f001 f88f 	bl	800c0c8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800afaa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800afae:	a909      	add	r1, sp, #36	@ 0x24
 800afb0:	4833      	ldr	r0, [pc, #204]	@ (800b080 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800afb2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800afb4:	f001 f888 	bl	800c0c8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800afb8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800afbc:	a909      	add	r1, sp, #36	@ 0x24
 800afbe:	4831      	ldr	r0, [pc, #196]	@ (800b084 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800afc0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800afc2:	f001 f881 	bl	800c0c8 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800afc6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800afca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800afce:	f240 2002 	movw	r0, #514	@ 0x202
 800afd2:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800afd6:	6334      	str	r4, [r6, #48]	@ 0x30
 800afd8:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800afda:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800afde:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800afe2:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800afe4:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800afe6:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 800afe8:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800afea:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800afee:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800aff2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800aff6:	4b24      	ldr	r3, [pc, #144]	@ (800b088 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800aff8:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800affa:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800affc:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800b000:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800b004:	f002 ff30 	bl	800de68 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800b008:	4620      	mov	r0, r4
 800b00a:	f002 febe 	bl	800dd8a <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800b00e:	462a      	mov	r2, r5
 800b010:	210f      	movs	r1, #15
 800b012:	207a      	movs	r0, #122	@ 0x7a
 800b014:	f000 fa02 	bl	800b41c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800b018:	207a      	movs	r0, #122	@ 0x7a
 800b01a:	f000 fa31 	bl	800b480 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800b01e:	4630      	mov	r0, r6
 800b020:	f7ff ff06 	bl	800ae30 <MX_SDRAM_Init>
 800b024:	b9d0      	cbnz	r0, 800b05c <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800b026:	4919      	ldr	r1, [pc, #100]	@ (800b08c <BSP_SDRAM_Init+0x1fc>)
 800b028:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800b02a:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800b02e:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800b032:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800b034:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800b038:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800b03a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800b03e:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800b042:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800b044:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800b046:	f7fe fd31 	bl	8009aac <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800b04a:	2800      	cmp	r0, #0
 800b04c:	bf18      	it	ne
 800b04e:	f06f 0004 	mvnne.w	r0, #4
}
 800b052:	b00f      	add	sp, #60	@ 0x3c
 800b054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800b056:	f06f 0001 	mvn.w	r0, #1
 800b05a:	e7fa      	b.n	800b052 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800b060:	e7f7      	b.n	800b052 <BSP_SDRAM_Init+0x1c2>
 800b062:	bf00      	nop
 800b064:	58024400 	.word	0x58024400
 800b068:	58020c00 	.word	0x58020c00
 800b06c:	2400f254 	.word	0x2400f254
 800b070:	2400f2e0 	.word	0x2400f2e0
 800b074:	58021000 	.word	0x58021000
 800b078:	58021400 	.word	0x58021400
 800b07c:	58021800 	.word	0x58021800
 800b080:	58021c00 	.word	0x58021c00
 800b084:	58022000 	.word	0x58022000
 800b088:	52000040 	.word	0x52000040
 800b08c:	2400f2c0 	.word	0x2400f2c0

0800b090 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800b090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b094:	460c      	mov	r4, r1
 800b096:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b098:	4606      	mov	r6, r0
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d15c      	bne.n	800b158 <BSP_TS_Init+0xc8>
 800b09e:	680b      	ldr	r3, [r1, #0]
 800b0a0:	1e5a      	subs	r2, r3, #1
 800b0a2:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800b0a6:	d257      	bcs.n	800b158 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b0a8:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b0aa:	1e51      	subs	r1, r2, #1
 800b0ac:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800b0b0:	d252      	bcs.n	800b158 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	bf28      	it	cs
 800b0b6:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b0b8:	68e2      	ldr	r2, [r4, #12]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d84c      	bhi.n	800b158 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800b0be:	2370      	movs	r3, #112	@ 0x70
 800b0c0:	2254      	movs	r2, #84	@ 0x54
 800b0c2:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800b0c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b19c <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800b0ca:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800b0ce:	4b2e      	ldr	r3, [pc, #184]	@ (800b188 <BSP_TS_Init+0xf8>)
 800b0d0:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b0d2:	4b2e      	ldr	r3, [pc, #184]	@ (800b18c <BSP_TS_Init+0xfc>)
 800b0d4:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800b0d6:	4b2e      	ldr	r3, [pc, #184]	@ (800b190 <BSP_TS_Init+0x100>)
 800b0d8:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800b0da:	4b2e      	ldr	r3, [pc, #184]	@ (800b194 <BSP_TS_Init+0x104>)
 800b0dc:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800b0de:	4b2e      	ldr	r3, [pc, #184]	@ (800b198 <BSP_TS_Init+0x108>)
 800b0e0:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800b0e2:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800b0e6:	a906      	add	r1, sp, #24
 800b0e8:	482c      	ldr	r0, [pc, #176]	@ (800b19c <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800b0ea:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800b0ee:	f7fe fbe3 	bl	80098b8 <FT6X06_RegisterBusIO>
 800b0f2:	b9c0      	cbnz	r0, 800b126 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800b0f4:	4669      	mov	r1, sp
 800b0f6:	4829      	ldr	r0, [pc, #164]	@ (800b19c <BSP_TS_Init+0x10c>)
 800b0f8:	f7fe fb28 	bl	800974c <FT6X06_ReadID>
 800b0fc:	b998      	cbnz	r0, 800b126 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 800b0fe:	9b00      	ldr	r3, [sp, #0]
 800b100:	2b11      	cmp	r3, #17
 800b102:	d110      	bne.n	800b126 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800b104:	a903      	add	r1, sp, #12
 800b106:	4825      	ldr	r0, [pc, #148]	@ (800b19c <BSP_TS_Init+0x10c>)
 800b108:	f7fe fad4 	bl	80096b4 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 800b10c:	4f24      	ldr	r7, [pc, #144]	@ (800b1a0 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800b10e:	4b25      	ldr	r3, [pc, #148]	@ (800b1a4 <BSP_TS_Init+0x114>)
 800b110:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800b1ac <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800b114:	4821      	ldr	r0, [pc, #132]	@ (800b19c <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800b116:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 800b11a:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4798      	blx	r3
 800b122:	4605      	mov	r5, r0
 800b124:	b1d8      	cbz	r0, 800b15e <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 800b126:	b116      	cbz	r6, 800b12e <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 800b128:	f04f 35ff 	mov.w	r5, #4294967295
 800b12c:	e010      	b.n	800b150 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 800b12e:	2601      	movs	r6, #1
 800b130:	e7d7      	b.n	800b0e2 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800b132:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b134:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800b136:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b138:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b13a:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b13c:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b13e:	68e3      	ldr	r3, [r4, #12]
 800b140:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b142:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b144:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b146:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b148:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b14a:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b14c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800b150:	4628      	mov	r0, r5
 800b152:	b00c      	add	sp, #48	@ 0x30
 800b154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b158:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800b15c:	e7f8      	b.n	800b150 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800b15e:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800b160:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800b162:	4e11      	ldr	r6, [pc, #68]	@ (800b1a8 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800b164:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800b166:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800b170:	68e3      	ldr	r3, [r4, #12]
 800b172:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800b174:	f8d8 3000 	ldr.w	r3, [r8]
 800b178:	69db      	ldr	r3, [r3, #28]
 800b17a:	4798      	blx	r3
 800b17c:	2800      	cmp	r0, #0
 800b17e:	dad8      	bge.n	800b132 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b180:	f06f 0504 	mvn.w	r5, #4
 800b184:	e7e4      	b.n	800b150 <BSP_TS_Init+0xc0>
 800b186:	bf00      	nop
 800b188:	0800a699 	.word	0x0800a699
 800b18c:	0800a605 	.word	0x0800a605
 800b190:	0800a975 	.word	0x0800a975
 800b194:	0800a941 	.word	0x0800a941
 800b198:	0800a9a9 	.word	0x0800a9a9
 800b19c:	2400f314 	.word	0x2400f314
 800b1a0:	2400f33c 	.word	0x2400f33c
 800b1a4:	24000038 	.word	0x24000038
 800b1a8:	2400f340 	.word	0x2400f340
 800b1ac:	2400f368 	.word	0x2400f368

0800b1b0 <BSP_TS_GetState>:
{
 800b1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d14d      	bne.n	800b256 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800b1ba:	4b28      	ldr	r3, [pc, #160]	@ (800b25c <BSP_TS_GetState+0xac>)
 800b1bc:	a901      	add	r1, sp, #4
 800b1be:	4a28      	ldr	r2, [pc, #160]	@ (800b260 <BSP_TS_GetState+0xb0>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	6810      	ldr	r0, [r2, #0]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	4798      	blx	r3
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	db41      	blt.n	800b250 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b1cc:	4925      	ldr	r1, [pc, #148]	@ (800b264 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800b1ce:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b1d0:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b1d2:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	d037      	beq.n	800b248 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b1d8:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800b1da:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b1de:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 800b1e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b1e6:	bf1e      	ittt	ne
 800b1e8:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 800b1ea:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 800b1ec:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800b1ee:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800b1f2:	bf1c      	itt	ne
 800b1f4:	f10e 3cff 	addne.w	ip, lr, #4294967295
 800b1f8:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800b1fc:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800b200:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800b202:	bf44      	itt	mi
 800b204:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 800b208:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b20a:	680f      	ldr	r7, [r1, #0]
 800b20c:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b20e:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800b210:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b212:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800b214:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b216:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b21a:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b21e:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b220:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b222:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b224:	bf8c      	ite	hi
 800b226:	eba2 0c05 	subhi.w	ip, r2, r5
 800b22a:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b22e:	4283      	cmp	r3, r0
 800b230:	bf8c      	ite	hi
 800b232:	1a1e      	subhi	r6, r3, r0
 800b234:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800b236:	4567      	cmp	r7, ip
 800b238:	d301      	bcc.n	800b23e <BSP_TS_GetState+0x8e>
 800b23a:	42b7      	cmp	r7, r6
 800b23c:	d205      	bcs.n	800b24a <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800b23e:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800b240:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800b242:	2000      	movs	r0, #0
}
 800b244:	b005      	add	sp, #20
 800b246:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 800b248:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b24a:	e9c4 5001 	strd	r5, r0, [r4, #4]
 800b24e:	e7f8      	b.n	800b242 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b250:	f06f 0004 	mvn.w	r0, #4
 800b254:	e7f6      	b.n	800b244 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800b256:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800b25a:	e7f3      	b.n	800b244 <BSP_TS_GetState+0x94>
 800b25c:	2400f368 	.word	0x2400f368
 800b260:	2400f33c 	.word	0x2400f33c
 800b264:	2400f340 	.word	0x2400f340

0800b268 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b268:	4b2d      	ldr	r3, [pc, #180]	@ (800b320 <SystemInit+0xb8>)
 800b26a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b26e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800b272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800b276:	691a      	ldr	r2, [r3, #16]
 800b278:	f042 0210 	orr.w	r2, r2, #16
 800b27c:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b27e:	4a29      	ldr	r2, [pc, #164]	@ (800b324 <SystemInit+0xbc>)
 800b280:	6813      	ldr	r3, [r2, #0]
 800b282:	f003 030f 	and.w	r3, r3, #15
 800b286:	2b06      	cmp	r3, #6
 800b288:	d805      	bhi.n	800b296 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b28a:	6813      	ldr	r3, [r2, #0]
 800b28c:	f023 030f 	bic.w	r3, r3, #15
 800b290:	f043 0307 	orr.w	r3, r3, #7
 800b294:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b296:	4b24      	ldr	r3, [pc, #144]	@ (800b328 <SystemInit+0xc0>)
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	f042 0201 	orr.w	r2, r2, #1
 800b29e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b2a4:	4a21      	ldr	r2, [pc, #132]	@ (800b32c <SystemInit+0xc4>)
 800b2a6:	6819      	ldr	r1, [r3, #0]
 800b2a8:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b2aa:	491e      	ldr	r1, [pc, #120]	@ (800b324 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800b2ac:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b2ae:	680a      	ldr	r2, [r1, #0]
 800b2b0:	0712      	lsls	r2, r2, #28
 800b2b2:	d505      	bpl.n	800b2c0 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b2b4:	680a      	ldr	r2, [r1, #0]
 800b2b6:	f022 020f 	bic.w	r2, r2, #15
 800b2ba:	f042 0207 	orr.w	r2, r2, #7
 800b2be:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b2c0:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b2c2:	491b      	ldr	r1, [pc, #108]	@ (800b330 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800b2c4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800b2c6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800b2c8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800b2ca:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b2cc:	4919      	ldr	r1, [pc, #100]	@ (800b334 <SystemInit+0xcc>)
 800b2ce:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b2d0:	4919      	ldr	r1, [pc, #100]	@ (800b338 <SystemInit+0xd0>)
 800b2d2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b2d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b2d6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b2d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b2da:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b2dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b2de:	6819      	ldr	r1, [r3, #0]
 800b2e0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800b2e4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b2e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800b2e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b2ec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b2f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b2f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b2f8:	4b10      	ldr	r3, [pc, #64]	@ (800b33c <SystemInit+0xd4>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	0c1b      	lsrs	r3, r3, #16
 800b2fe:	041b      	lsls	r3, r3, #16
 800b300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b304:	d203      	bcs.n	800b30e <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b306:	4b0e      	ldr	r3, [pc, #56]	@ (800b340 <SystemInit+0xd8>)
 800b308:	2201      	movs	r2, #1
 800b30a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b30e:	4b0d      	ldr	r3, [pc, #52]	@ (800b344 <SystemInit+0xdc>)
 800b310:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800b314:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800b316:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b31a:	4b01      	ldr	r3, [pc, #4]	@ (800b320 <SystemInit+0xb8>)
 800b31c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800b31e:	4770      	bx	lr
 800b320:	e000ed00 	.word	0xe000ed00
 800b324:	52002000 	.word	0x52002000
 800b328:	58024400 	.word	0x58024400
 800b32c:	eaf6ed7f 	.word	0xeaf6ed7f
 800b330:	02020200 	.word	0x02020200
 800b334:	01ff0000 	.word	0x01ff0000
 800b338:	01010280 	.word	0x01010280
 800b33c:	5c001000 	.word	0x5c001000
 800b340:	51008000 	.word	0x51008000
 800b344:	52004000 	.word	0x52004000

0800b348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b348:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b34a:	2003      	movs	r0, #3
 800b34c:	f000 f854 	bl	800b3f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b350:	f003 fcde 	bl	800ed10 <HAL_RCC_GetSysClockFreq>
 800b354:	490f      	ldr	r1, [pc, #60]	@ (800b394 <HAL_Init+0x4c>)
 800b356:	4a10      	ldr	r2, [pc, #64]	@ (800b398 <HAL_Init+0x50>)
 800b358:	698b      	ldr	r3, [r1, #24]
 800b35a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b35e:	5cd3      	ldrb	r3, [r2, r3]
 800b360:	f003 031f 	and.w	r3, r3, #31
 800b364:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b366:	698b      	ldr	r3, [r1, #24]
 800b368:	f003 030f 	and.w	r3, r3, #15
 800b36c:	5cd3      	ldrb	r3, [r2, r3]
 800b36e:	4a0b      	ldr	r2, [pc, #44]	@ (800b39c <HAL_Init+0x54>)
 800b370:	f003 031f 	and.w	r3, r3, #31
 800b374:	fa20 f303 	lsr.w	r3, r0, r3
 800b378:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b37a:	4b09      	ldr	r3, [pc, #36]	@ (800b3a0 <HAL_Init+0x58>)
 800b37c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b37e:	2000      	movs	r0, #0
 800b380:	f7f6 fc56 	bl	8001c30 <HAL_InitTick>
 800b384:	4604      	mov	r4, r0
 800b386:	b918      	cbnz	r0, 800b390 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800b388:	f7f6 f8f8 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800b38c:	4620      	mov	r0, r4
 800b38e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b390:	2401      	movs	r4, #1
 800b392:	e7fb      	b.n	800b38c <HAL_Init+0x44>
 800b394:	58024400 	.word	0x58024400
 800b398:	0802fd5c 	.word	0x0802fd5c
 800b39c:	24000068 	.word	0x24000068
 800b3a0:	2400006c 	.word	0x2400006c

0800b3a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800b3a4:	4a03      	ldr	r2, [pc, #12]	@ (800b3b4 <HAL_IncTick+0x10>)
 800b3a6:	4b04      	ldr	r3, [pc, #16]	@ (800b3b8 <HAL_IncTick+0x14>)
 800b3a8:	6811      	ldr	r1, [r2, #0]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	440b      	add	r3, r1
 800b3ae:	6013      	str	r3, [r2, #0]
}
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	2400f36c 	.word	0x2400f36c
 800b3b8:	24000070 	.word	0x24000070

0800b3bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b3bc:	4b01      	ldr	r3, [pc, #4]	@ (800b3c4 <HAL_GetTick+0x8>)
 800b3be:	6818      	ldr	r0, [r3, #0]
}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	2400f36c 	.word	0x2400f36c

0800b3c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b3cc:	f7ff fff6 	bl	800b3bc <HAL_GetTick>
 800b3d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b3d2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800b3d4:	bf1e      	ittt	ne
 800b3d6:	4b04      	ldrne	r3, [pc, #16]	@ (800b3e8 <HAL_Delay+0x20>)
 800b3d8:	781b      	ldrbne	r3, [r3, #0]
 800b3da:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b3dc:	f7ff ffee 	bl	800b3bc <HAL_GetTick>
 800b3e0:	1b43      	subs	r3, r0, r5
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	d3fa      	bcc.n	800b3dc <HAL_Delay+0x14>
  {
  }
}
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	24000070 	.word	0x24000070

0800b3ec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800b3ec:	4b01      	ldr	r3, [pc, #4]	@ (800b3f4 <HAL_GetREVID+0x8>)
 800b3ee:	6818      	ldr	r0, [r3, #0]
}
 800b3f0:	0c00      	lsrs	r0, r0, #16
 800b3f2:	4770      	bx	lr
 800b3f4:	5c001000 	.word	0x5c001000

0800b3f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b3f8:	4907      	ldr	r1, [pc, #28]	@ (800b418 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b3fa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b3fc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b3fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b402:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b406:	0412      	lsls	r2, r2, #16
 800b408:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b40a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b40c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800b414:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b416:	4770      	bx	lr
 800b418:	e000ed00 	.word	0xe000ed00

0800b41c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b41c:	4b16      	ldr	r3, [pc, #88]	@ (800b478 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b41e:	b530      	push	{r4, r5, lr}
 800b420:	68dc      	ldr	r4, [r3, #12]
 800b422:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b426:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b42a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b42c:	2b04      	cmp	r3, #4
 800b42e:	bf28      	it	cs
 800b430:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b432:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b434:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b438:	bf8c      	ite	hi
 800b43a:	3c03      	subhi	r4, #3
 800b43c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b43e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800b442:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b444:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b448:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b44c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b450:	fa03 f304 	lsl.w	r3, r3, r4
 800b454:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b458:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800b45c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800b45e:	db06      	blt.n	800b46e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b460:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800b464:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800b468:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b46c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b46e:	f000 000f 	and.w	r0, r0, #15
 800b472:	4a02      	ldr	r2, [pc, #8]	@ (800b47c <HAL_NVIC_SetPriority+0x60>)
 800b474:	5413      	strb	r3, [r2, r0]
 800b476:	e7f9      	b.n	800b46c <HAL_NVIC_SetPriority+0x50>
 800b478:	e000ed00 	.word	0xe000ed00
 800b47c:	e000ed14 	.word	0xe000ed14

0800b480 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b480:	2800      	cmp	r0, #0
 800b482:	db07      	blt.n	800b494 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b484:	2301      	movs	r3, #1
 800b486:	0941      	lsrs	r1, r0, #5
 800b488:	f000 001f 	and.w	r0, r0, #31
 800b48c:	4a02      	ldr	r2, [pc, #8]	@ (800b498 <HAL_NVIC_EnableIRQ+0x18>)
 800b48e:	4083      	lsls	r3, r0
 800b490:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	e000e100 	.word	0xe000e100

0800b49c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b49c:	2800      	cmp	r0, #0
 800b49e:	db0c      	blt.n	800b4ba <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4a0:	0943      	lsrs	r3, r0, #5
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f000 001f 	and.w	r0, r0, #31
 800b4a8:	4904      	ldr	r1, [pc, #16]	@ (800b4bc <HAL_NVIC_DisableIRQ+0x20>)
 800b4aa:	3320      	adds	r3, #32
 800b4ac:	4082      	lsls	r2, r0
 800b4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b4b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b4b6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800b4ba:	4770      	bx	lr
 800b4bc:	e000e100 	.word	0xe000e100

0800b4c0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800b4c0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b4c4:	4b04      	ldr	r3, [pc, #16]	@ (800b4d8 <HAL_MPU_Disable+0x18>)
 800b4c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b4cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	e000ed00 	.word	0xe000ed00

0800b4dc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b4dc:	4b06      	ldr	r3, [pc, #24]	@ (800b4f8 <HAL_MPU_Enable+0x1c>)
 800b4de:	f040 0001 	orr.w	r0, r0, #1
 800b4e2:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b4e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b4ec:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b4ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b4f2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b4f6:	4770      	bx	lr
 800b4f8:	e000ed00 	.word	0xe000ed00

0800b4fc <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b4fc:	7843      	ldrb	r3, [r0, #1]
 800b4fe:	4a14      	ldr	r2, [pc, #80]	@ (800b550 <HAL_MPU_ConfigRegion+0x54>)
 800b500:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b504:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800b508:	f023 0301 	bic.w	r3, r3, #1
 800b50c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b510:	6843      	ldr	r3, [r0, #4]
 800b512:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b516:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b518:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b51a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b51c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b520:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b522:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b524:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b526:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b52a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b52c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b530:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b532:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b536:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b53c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b53e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b542:	7a01      	ldrb	r1, [r0, #8]
 800b544:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b548:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	e000ed00 	.word	0xe000ed00

0800b554 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b554:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b556:	4604      	mov	r4, r0
 800b558:	b908      	cbnz	r0, 800b55e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800b55a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800b55c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b55e:	7f43      	ldrb	r3, [r0, #29]
 800b560:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b564:	b913      	cbnz	r3, 800b56c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800b566:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800b568:	f7f6 f820 	bl	80015ac <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b56c:	2302      	movs	r3, #2
 800b56e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b570:	7923      	ldrb	r3, [r4, #4]
 800b572:	b9e3      	cbnz	r3, 800b5ae <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	4a13      	ldr	r2, [pc, #76]	@ (800b5c4 <HAL_CRC_Init+0x70>)
 800b578:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b57a:	689a      	ldr	r2, [r3, #8]
 800b57c:	f022 0218 	bic.w	r2, r2, #24
 800b580:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b582:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b584:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b586:	b9d2      	cbnz	r2, 800b5be <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b588:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b58c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800b58e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b590:	689a      	ldr	r2, [r3, #8]
 800b592:	6961      	ldr	r1, [r4, #20]
 800b594:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800b598:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b59a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b59c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b59e:	689a      	ldr	r2, [r3, #8]
 800b5a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800b5ac:	e7d6      	b.n	800b55c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b5ae:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f000 f808 	bl	800b5c8 <HAL_CRCEx_Polynomial_Set>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d0e2      	beq.n	800b582 <HAL_CRC_Init+0x2e>
 800b5bc:	e7cd      	b.n	800b55a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b5be:	6922      	ldr	r2, [r4, #16]
 800b5c0:	e7e4      	b.n	800b58c <HAL_CRC_Init+0x38>
 800b5c2:	bf00      	nop
 800b5c4:	04c11db7 	.word	0x04c11db7

0800b5c8 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800b5c8:	07cb      	lsls	r3, r1, #31
{
 800b5ca:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800b5cc:	d50d      	bpl.n	800b5ea <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b5ce:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	d31d      	bcc.n	800b610 <HAL_CRCEx_Polynomial_Set+0x48>
 800b5d4:	fa21 f403 	lsr.w	r4, r1, r3
 800b5d8:	07e4      	lsls	r4, r4, #31
 800b5da:	d5f9      	bpl.n	800b5d0 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800b5dc:	2a10      	cmp	r2, #16
 800b5de:	d013      	beq.n	800b608 <HAL_CRCEx_Polynomial_Set+0x40>
 800b5e0:	2a10      	cmp	r2, #16
 800b5e2:	d804      	bhi.n	800b5ee <HAL_CRCEx_Polynomial_Set+0x26>
 800b5e4:	b13a      	cbz	r2, 800b5f6 <HAL_CRCEx_Polynomial_Set+0x2e>
 800b5e6:	2a08      	cmp	r2, #8
 800b5e8:	d010      	beq.n	800b60c <HAL_CRCEx_Polynomial_Set+0x44>
 800b5ea:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800b5ec:	e00b      	b.n	800b606 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800b5ee:	2a18      	cmp	r2, #24
 800b5f0:	d1fb      	bne.n	800b5ea <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800b5f2:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800b5f4:	d8f9      	bhi.n	800b5ea <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b5f6:	6800      	ldr	r0, [r0, #0]
 800b5f8:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b5fa:	6883      	ldr	r3, [r0, #8]
 800b5fc:	f023 0318 	bic.w	r3, r3, #24
 800b600:	4313      	orrs	r3, r2
 800b602:	6083      	str	r3, [r0, #8]
 800b604:	2000      	movs	r0, #0
}
 800b606:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800b608:	2b07      	cmp	r3, #7
 800b60a:	e7f3      	b.n	800b5f4 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 800b60c:	2b0f      	cmp	r3, #15
 800b60e:	e7f1      	b.n	800b5f4 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 800b610:	2a10      	cmp	r2, #16
 800b612:	d1e5      	bne.n	800b5e0 <HAL_CRCEx_Polynomial_Set+0x18>
 800b614:	e7e9      	b.n	800b5ea <HAL_CRCEx_Polynomial_Set+0x22>

0800b616 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b616:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b618:	4604      	mov	r4, r0
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d036      	beq.n	800b68c <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b61e:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800b622:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b626:	b91b      	cbnz	r3, 800b630 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b628:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b62c:	f7f5 ffd6 	bl	80015dc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b630:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b632:	69e0      	ldr	r0, [r4, #28]
 800b634:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b636:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b63e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b640:	6819      	ldr	r1, [r3, #0]
 800b642:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800b646:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800b64a:	430a      	orrs	r2, r1
 800b64c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b64e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b650:	68a2      	ldr	r2, [r4, #8]
 800b652:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800b656:	4302      	orrs	r2, r0
 800b658:	f021 0101 	bic.w	r1, r1, #1
 800b65c:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b65e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b660:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b664:	0c12      	lsrs	r2, r2, #16
 800b666:	0412      	lsls	r2, r2, #16
 800b668:	430a      	orrs	r2, r1
 800b66a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800b66c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b66e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800b672:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800b676:	0552      	lsls	r2, r2, #21
 800b678:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b67c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800b67e:	430a      	orrs	r2, r1
 800b680:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b682:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b684:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b686:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800b68a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b68c:	2001      	movs	r0, #1
 800b68e:	e7fc      	b.n	800b68a <HAL_DMA2D_Init+0x74>

0800b690 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800b690:	4770      	bx	lr

0800b692 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800b692:	4770      	bx	lr

0800b694 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800b694:	6803      	ldr	r3, [r0, #0]
{
 800b696:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800b698:	685e      	ldr	r6, [r3, #4]
{
 800b69a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800b69c:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b69e:	07f2      	lsls	r2, r6, #31
 800b6a0:	d514      	bpl.n	800b6cc <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800b6a2:	05e9      	lsls	r1, r5, #23
 800b6a4:	d512      	bpl.n	800b6cc <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b6ac:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b6ae:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800b6b0:	f042 0201 	orr.w	r2, r2, #1
 800b6b4:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b6ba:	2304      	movs	r3, #4
 800b6bc:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800b6c6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b6c8:	b103      	cbz	r3, 800b6cc <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800b6ca:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b6cc:	06b2      	lsls	r2, r6, #26
 800b6ce:	d516      	bpl.n	800b6fe <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800b6d0:	04ab      	lsls	r3, r5, #18
 800b6d2:	d514      	bpl.n	800b6fe <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b6dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800b6de:	2220      	movs	r2, #32
 800b6e0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b6e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6e4:	f043 0302 	orr.w	r3, r3, #2
 800b6e8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800b6f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b6f8:	b10b      	cbz	r3, 800b6fe <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800b6fe:	0730      	lsls	r0, r6, #28
 800b700:	d516      	bpl.n	800b730 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800b702:	0529      	lsls	r1, r5, #20
 800b704:	d514      	bpl.n	800b730 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b70e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800b710:	2208      	movs	r2, #8
 800b712:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800b714:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b716:	f043 0304 	orr.w	r3, r3, #4
 800b71a:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b71c:	2304      	movs	r3, #4
 800b71e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800b722:	2300      	movs	r3, #0
 800b724:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800b728:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b72a:	b10b      	cbz	r3, 800b730 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800b72c:	4620      	mov	r0, r4
 800b72e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800b730:	0772      	lsls	r2, r6, #29
 800b732:	d50b      	bpl.n	800b74c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800b734:	056b      	lsls	r3, r5, #21
 800b736:	d509      	bpl.n	800b74c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b738:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b73a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b742:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800b744:	2204      	movs	r2, #4
 800b746:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b748:	f7ff ffa2 	bl	800b690 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800b74c:	07b0      	lsls	r0, r6, #30
 800b74e:	d514      	bpl.n	800b77a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800b750:	05a9      	lsls	r1, r5, #22
 800b752:	d512      	bpl.n	800b77a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b75c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800b75e:	2202      	movs	r2, #2
 800b760:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b762:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b764:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b766:	2301      	movs	r3, #1
 800b768:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800b76c:	2300      	movs	r3, #0
 800b76e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800b772:	6a23      	ldr	r3, [r4, #32]
 800b774:	b10b      	cbz	r3, 800b77a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800b776:	4620      	mov	r0, r4
 800b778:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800b77a:	06f2      	lsls	r2, r6, #27
 800b77c:	d513      	bpl.n	800b7a6 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800b77e:	04eb      	lsls	r3, r5, #19
 800b780:	d511      	bpl.n	800b7a6 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b782:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b784:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b78c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800b78e:	2210      	movs	r2, #16
 800b790:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b794:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b796:	2301      	movs	r3, #1
 800b798:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800b79c:	2300      	movs	r3, #0
 800b79e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b7a2:	f7ff ff76 	bl	800b692 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}

0800b7a8 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 800b7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	460d      	mov	r5, r1
 800b7b0:	4614      	mov	r4, r2
 800b7b2:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800b7b4:	f7ff fe02 	bl	800b3bc <HAL_GetTick>
 800b7b8:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800b7be:	07d2      	lsls	r2, r2, #31
 800b7c0:	d50a      	bpl.n	800b7d8 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b7c2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800b7c6:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 800b7c8:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b7ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b7ce:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800b7d2:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800b7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b7d8:	f7ff fdf0 	bl	800b3bc <HAL_GetTick>
 800b7dc:	eba0 0008 	sub.w	r0, r0, r8
 800b7e0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b7e4:	d9e9      	bls.n	800b7ba <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800b7e6:	2003      	movs	r0, #3
 800b7e8:	e7f4      	b.n	800b7d4 <DSI_ShortWrite.constprop.0+0x2c>

0800b7ea <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b7ea:	7c03      	ldrb	r3, [r0, #16]
{
 800b7ec:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d05b      	beq.n	800b8aa <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800b7f2:	6803      	ldr	r3, [r0, #0]
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b7fa:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800b7fe:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800b800:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800b802:	d507      	bpl.n	800b814 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800b804:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b808:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 800b80c:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 800b810:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800b814:	0788      	lsls	r0, r1, #30
 800b816:	d505      	bpl.n	800b824 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800b818:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b81c:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 800b820:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800b824:	0748      	lsls	r0, r1, #29
 800b826:	d505      	bpl.n	800b834 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800b828:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800b82c:	f040 0001 	orr.w	r0, r0, #1
 800b830:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800b834:	0708      	lsls	r0, r1, #28
 800b836:	d505      	bpl.n	800b844 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800b838:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800b83c:	f040 0002 	orr.w	r0, r0, #2
 800b840:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800b844:	06c8      	lsls	r0, r1, #27
 800b846:	d505      	bpl.n	800b854 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800b848:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800b84c:	f040 000c 	orr.w	r0, r0, #12
 800b850:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800b854:	0688      	lsls	r0, r1, #26
 800b856:	d505      	bpl.n	800b864 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800b858:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800b85c:	f040 0010 	orr.w	r0, r0, #16
 800b860:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800b864:	0648      	lsls	r0, r1, #25
 800b866:	d505      	bpl.n	800b874 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800b868:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800b86c:	f040 0020 	orr.w	r0, r0, #32
 800b870:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800b874:	0608      	lsls	r0, r1, #24
 800b876:	d505      	bpl.n	800b884 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800b878:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800b87c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800b880:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800b884:	05c8      	lsls	r0, r1, #23
 800b886:	d505      	bpl.n	800b894 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800b888:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800b88c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800b890:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800b894:	0589      	lsls	r1, r1, #22
 800b896:	d505      	bpl.n	800b8a4 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800b898:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800b89c:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 800b8a0:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 800b8a8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b8aa:	2002      	movs	r0, #2
}
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <HAL_DSI_Init>:
{
 800b8b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b8b2:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	f000 80ea 	beq.w	800ba90 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800b8bc:	7c43      	ldrb	r3, [r0, #17]
 800b8be:	b90b      	cbnz	r3, 800b8c4 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800b8c0:	f7f5 feb0 	bl	8001624 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800b8d2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800b8d6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800b8da:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800b8de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800b8e6:	f7ff fd69 	bl	800b3bc <HAL_GetTick>
 800b8ea:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800b8ec:	6822      	ldr	r2, [r4, #0]
 800b8ee:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800b8f2:	04d9      	lsls	r1, r3, #19
 800b8f4:	d56e      	bpl.n	800b9d4 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b8f6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800b8fa:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800b8fe:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800b902:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b906:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800b90a:	e9d5 0300 	ldrd	r0, r3, [r5]
 800b90e:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b910:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800b914:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800b916:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800b91a:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b91c:	430b      	orrs	r3, r1
 800b91e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800b922:	2300      	movs	r3, #0
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800b92a:	f043 0301 	orr.w	r3, r3, #1
 800b92e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800b932:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800b936:	f003 0301 	and.w	r3, r3, #1
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800b93e:	f7ff fd43 	bl	800b3c8 <HAL_Delay>
  tickstart = HAL_GetTick();
 800b942:	f7ff fd3b 	bl	800b3bc <HAL_GetTick>
 800b946:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800b94e:	05d2      	lsls	r2, r2, #23
 800b950:	d548      	bpl.n	800b9e4 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 800b952:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b954:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 800b956:	9202      	str	r2, [sp, #8]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	f042 0201 	orr.w	r2, r2, #1
 800b95e:	605a      	str	r2, [r3, #4]
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	f002 0201 	and.w	r2, r2, #1
 800b966:	9202      	str	r2, [sp, #8]
 800b968:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b970:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b976:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b978:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800b97a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b97e:	f042 0202 	orr.w	r2, r2, #2
 800b982:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800b986:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b98a:	f042 0204 	orr.w	r2, r2, #4
 800b98e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800b992:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b996:	f022 0203 	bic.w	r2, r2, #3
 800b99a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b99e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 800b9a8:	f7ff fd08 	bl	800b3bc <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800b9ac:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b9ae:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800b9b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9b4:	079b      	lsls	r3, r3, #30
 800b9b6:	d025      	beq.n	800ba04 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b9be:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800b9c2:	2b94      	cmp	r3, #148	@ 0x94
 800b9c4:	d025      	beq.n	800ba12 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b9c6:	f7ff fcf9 	bl	800b3bc <HAL_GetTick>
 800b9ca:	1b80      	subs	r0, r0, r6
 800b9cc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b9d0:	d9f2      	bls.n	800b9b8 <HAL_DSI_Init+0x108>
 800b9d2:	e014      	b.n	800b9fe <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b9d4:	f7ff fcf2 	bl	800b3bc <HAL_GetTick>
 800b9d8:	1b80      	subs	r0, r0, r6
 800b9da:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b9de:	d985      	bls.n	800b8ec <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800b9e0:	2003      	movs	r0, #3
 800b9e2:	e053      	b.n	800ba8c <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b9e4:	f7ff fcea 	bl	800b3bc <HAL_GetTick>
 800b9e8:	1b80      	subs	r0, r0, r6
 800b9ea:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b9ee:	d9ab      	bls.n	800b948 <HAL_DSI_Init+0x98>
 800b9f0:	e7f6      	b.n	800b9e0 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b9f2:	f7ff fce3 	bl	800b3bc <HAL_GetTick>
 800b9f6:	1b80      	subs	r0, r0, r6
 800b9f8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b9fc:	d902      	bls.n	800ba04 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 800b9fe:	2300      	movs	r3, #0
 800ba00:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800ba02:	e7ed      	b.n	800b9e0 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800ba04:	6823      	ldr	r3, [r4, #0]
 800ba06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ba0a:	f003 0314 	and.w	r3, r3, #20
 800ba0e:	2b14      	cmp	r3, #20
 800ba10:	d1ef      	bne.n	800b9f2 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ba12:	686b      	ldr	r3, [r5, #4]
 800ba14:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800ba18:	4a1e      	ldr	r2, [pc, #120]	@ (800ba94 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 800ba1a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	bf38      	it	cc
 800ba20:	2301      	movcc	r3, #1
 800ba22:	435a      	muls	r2, r3
 800ba24:	68ab      	ldr	r3, [r5, #8]
 800ba26:	f003 0303 	and.w	r3, r3, #3
 800ba2a:	409a      	lsls	r2, r3
 800ba2c:	682b      	ldr	r3, [r5, #0]
 800ba2e:	434b      	muls	r3, r1
 800ba30:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800ba3a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800ba3e:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ba42:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800ba46:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ba48:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ba4a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800ba4e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800ba52:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 800ba56:	9003      	str	r0, [sp, #12]
 800ba58:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 800ba5a:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 800ba5c:	f022 0201 	bic.w	r2, r2, #1
 800ba60:	605a      	str	r2, [r3, #4]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	f002 0201 	and.w	r2, r2, #1
 800ba68:	9203      	str	r2, [sp, #12]
 800ba6a:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800ba6c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ba70:	f022 0203 	bic.w	r2, r2, #3
 800ba74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ba78:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ba7c:	430a      	orrs	r2, r1
 800ba7e:	f042 0201 	orr.w	r2, r2, #1
 800ba82:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 800ba86:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800ba88:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 800ba8a:	7463      	strb	r3, [r4, #17]
}
 800ba8c:	b004      	add	sp, #16
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800ba90:	2001      	movs	r0, #1
 800ba92:	e7fb      	b.n	800ba8c <HAL_DSI_Init+0x1dc>
 800ba94:	003d0900 	.word	0x003d0900

0800ba98 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 800ba98:	4770      	bx	lr

0800ba9a <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800ba9a:	6803      	ldr	r3, [r0, #0]
 800ba9c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800baa0:	07d1      	lsls	r1, r2, #31
{
 800baa2:	b510      	push	{r4, lr}
 800baa4:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800baa6:	d508      	bpl.n	800baba <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800baa8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800baac:	07d2      	lsls	r2, r2, #31
 800baae:	d504      	bpl.n	800baba <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800bab0:	2201      	movs	r2, #1
 800bab2:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800bab6:	f7f6 ff67 	bl	8002988 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800bac0:	0791      	lsls	r1, r2, #30
 800bac2:	d509      	bpl.n	800bad8 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800bac4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800bac8:	0792      	lsls	r2, r2, #30
 800baca:	d505      	bpl.n	800bad8 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800bacc:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800bace:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800bad0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800bad4:	f7f6 ff8a 	bl	80029ec <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800bad8:	69a3      	ldr	r3, [r4, #24]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d04e      	beq.n	800bb7c <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800bade:	6821      	ldr	r1, [r4, #0]
 800bae0:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800bae4:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800bae8:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800baea:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800baee:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800baf2:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800baf4:	b291      	uxth	r1, r2
 800baf6:	b119      	cbz	r1, 800bb00 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800baf8:	6961      	ldr	r1, [r4, #20]
 800bafa:	f041 0101 	orr.w	r1, r1, #1
 800bafe:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800bb00:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800bb04:	d003      	beq.n	800bb0e <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800bb06:	6962      	ldr	r2, [r4, #20]
 800bb08:	f042 0202 	orr.w	r2, r2, #2
 800bb0c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800bb0e:	07d8      	lsls	r0, r3, #31
 800bb10:	d503      	bpl.n	800bb1a <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800bb12:	6962      	ldr	r2, [r4, #20]
 800bb14:	f042 0204 	orr.w	r2, r2, #4
 800bb18:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800bb1a:	0799      	lsls	r1, r3, #30
 800bb1c:	d503      	bpl.n	800bb26 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800bb1e:	6962      	ldr	r2, [r4, #20]
 800bb20:	f042 0208 	orr.w	r2, r2, #8
 800bb24:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800bb26:	f013 0f0c 	tst.w	r3, #12
 800bb2a:	d003      	beq.n	800bb34 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800bb2c:	6962      	ldr	r2, [r4, #20]
 800bb2e:	f042 0210 	orr.w	r2, r2, #16
 800bb32:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800bb34:	06da      	lsls	r2, r3, #27
 800bb36:	d503      	bpl.n	800bb40 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800bb38:	6962      	ldr	r2, [r4, #20]
 800bb3a:	f042 0220 	orr.w	r2, r2, #32
 800bb3e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800bb40:	0698      	lsls	r0, r3, #26
 800bb42:	d503      	bpl.n	800bb4c <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800bb44:	6962      	ldr	r2, [r4, #20]
 800bb46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb4a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800bb4c:	0659      	lsls	r1, r3, #25
 800bb4e:	d503      	bpl.n	800bb58 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800bb50:	6962      	ldr	r2, [r4, #20]
 800bb52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bb56:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800bb58:	061a      	lsls	r2, r3, #24
 800bb5a:	d503      	bpl.n	800bb64 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800bb5c:	6962      	ldr	r2, [r4, #20]
 800bb5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb62:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800bb64:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800bb68:	d003      	beq.n	800bb72 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800bb6a:	6963      	ldr	r3, [r4, #20]
 800bb6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bb70:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800bb72:	6963      	ldr	r3, [r4, #20]
 800bb74:	b113      	cbz	r3, 800bb7c <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800bb76:	4620      	mov	r0, r4
 800bb78:	f7ff ff8e 	bl	800ba98 <HAL_DSI_ErrorCallback>
}
 800bb7c:	bd10      	pop	{r4, pc}

0800bb7e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bb7e:	7c02      	ldrb	r2, [r0, #16]
{
 800bb80:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800bb82:	2a01      	cmp	r2, #1
 800bb84:	d00a      	beq.n	800bb9c <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800bb86:	6802      	ldr	r2, [r0, #0]
 800bb88:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800bb8a:	f020 0003 	bic.w	r0, r0, #3
 800bb8e:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800bb90:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800bb92:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bb94:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800bb96:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 800bb98:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800bb9a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800bb9c:	2002      	movs	r0, #2
}
 800bb9e:	4770      	bx	lr

0800bba0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800bba0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bba2:	7c03      	ldrb	r3, [r0, #16]
{
 800bba4:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d069      	beq.n	800bc7e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800bbaa:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800bbac:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800bbae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbb0:	f042 0201 	orr.w	r2, r2, #1
 800bbb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800bbb6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800bbba:	f022 0201 	bic.w	r2, r2, #1
 800bbbe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800bbc2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800bbc6:	f042 0201 	orr.w	r2, r2, #1
 800bbca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800bbce:	68da      	ldr	r2, [r3, #12]
 800bbd0:	f022 0203 	bic.w	r2, r2, #3
 800bbd4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	4302      	orrs	r2, r0
 800bbda:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800bbdc:	695a      	ldr	r2, [r3, #20]
 800bbde:	f022 0207 	bic.w	r2, r2, #7
 800bbe2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800bbe4:	6958      	ldr	r0, [r3, #20]
 800bbe6:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800bbea:	432a      	orrs	r2, r5
 800bbec:	694d      	ldr	r5, [r1, #20]
 800bbee:	432a      	orrs	r2, r5
 800bbf0:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800bbf2:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800bbf4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800bbf6:	691a      	ldr	r2, [r3, #16]
 800bbf8:	f022 020f 	bic.w	r2, r2, #15
 800bbfc:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800bbfe:	691a      	ldr	r2, [r3, #16]
 800bc00:	4302      	orrs	r2, r0
 800bc02:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800bc04:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800bc08:	f022 020e 	bic.w	r2, r2, #14
 800bc0c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800bc10:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800bc14:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800bc18:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800bc1a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800bc1e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bc20:	0c12      	lsrs	r2, r2, #16
 800bc22:	0412      	lsls	r2, r2, #16
 800bc24:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800bc26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bc28:	4302      	orrs	r2, r0
 800bc2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800bc2c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800bc30:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800bc34:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800bc38:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800bc3c:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800bc40:	432a      	orrs	r2, r5
 800bc42:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800bc44:	432a      	orrs	r2, r5
 800bc46:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800bc48:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800bc4a:	432a      	orrs	r2, r5
 800bc4c:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bc4e:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800bc50:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800bc54:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800bc56:	f022 0201 	bic.w	r2, r2, #1
 800bc5a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800bc5c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800bc62:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800bc66:	f042 0201 	orr.w	r2, r2, #1
 800bc6a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800bc6e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800bc72:	f042 0202 	orr.w	r2, r2, #2
 800bc76:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800bc7a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800bc7c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800bc7e:	2002      	movs	r0, #2
 800bc80:	e7fc      	b.n	800bc7c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800bc84 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800bc84:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bc86:	7c03      	ldrb	r3, [r0, #16]
{
 800bc88:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d029      	beq.n	800bce2 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800bc8e:	6800      	ldr	r0, [r0, #0]
 800bc90:	4b15      	ldr	r3, [pc, #84]	@ (800bce8 <HAL_DSI_ConfigCommand+0x64>)
 800bc92:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800bc94:	4023      	ands	r3, r4
 800bc96:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800bc98:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800bc9a:	e9d1 3500 	ldrd	r3, r5, [r1]
 800bc9e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800bca0:	688d      	ldr	r5, [r1, #8]
 800bca2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800bca4:	68cd      	ldr	r5, [r1, #12]
 800bca6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800bca8:	690d      	ldr	r5, [r1, #16]
 800bcaa:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800bcac:	694d      	ldr	r5, [r1, #20]
 800bcae:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800bcb0:	698d      	ldr	r5, [r1, #24]
 800bcb2:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800bcb4:	69cd      	ldr	r5, [r1, #28]
 800bcb6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800bcb8:	6a0d      	ldr	r5, [r1, #32]
 800bcba:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800bcbc:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800bcbe:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800bcc0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800bcc2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800bcc4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800bcc6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 800bcc8:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800bcca:	4323      	orrs	r3, r4
 800bccc:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800bcce:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800bcd0:	f023 0302 	bic.w	r3, r3, #2
 800bcd4:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800bcd6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bcdc:	2000      	movs	r0, #0
 800bcde:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 800bce0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800bce2:	2002      	movs	r0, #2
 800bce4:	e7fc      	b.n	800bce0 <HAL_DSI_ConfigCommand+0x5c>
 800bce6:	bf00      	nop
 800bce8:	fef080ff 	.word	0xfef080ff

0800bcec <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bcec:	7c02      	ldrb	r2, [r0, #16]
{
 800bcee:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800bcf0:	2a01      	cmp	r2, #1
 800bcf2:	d00a      	beq.n	800bd0a <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800bcf4:	6802      	ldr	r2, [r0, #0]
 800bcf6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800bcf8:	f020 001f 	bic.w	r0, r0, #31
 800bcfc:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800bcfe:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800bd00:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bd02:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800bd04:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800bd06:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800bd08:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800bd0a:	2002      	movs	r0, #2
}
 800bd0c:	4770      	bx	lr

0800bd0e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800bd0e:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bd10:	7c03      	ldrb	r3, [r0, #16]
{
 800bd12:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d034      	beq.n	800bd82 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800bd18:	e9d1 0300 	ldrd	r0, r3, [r1]
 800bd1c:	4298      	cmp	r0, r3
 800bd1e:	bf38      	it	cc
 800bd20:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800bd28:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800bd2c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800bd30:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800bd34:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800bd38:	4302      	orrs	r2, r0
 800bd3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800bd3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800bd42:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800bd46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800bd4a:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800bd4e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800bd52:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800bd54:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800bd58:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800bd5a:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800bd5c:	432a      	orrs	r2, r5
 800bd5e:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bd60:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800bd62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800bd66:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800bd6a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800bd6e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800bd72:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800bd76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800bd7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800bd7e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800bd80:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800bd82:	2002      	movs	r0, #2
 800bd84:	e7fc      	b.n	800bd80 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800bd88 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800bd88:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bd8a:	7c03      	ldrb	r3, [r0, #16]
{
 800bd8c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d05b      	beq.n	800be4a <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800bd92:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800bd94:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800bd96:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800bd98:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800bd9a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800bd9e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800bda6:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800bda8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800bdaa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800bdac:	b292      	uxth	r2, r2
 800bdae:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800bdb0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800bdb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800bdb6:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800bdb8:	4a25      	ldr	r2, [pc, #148]	@ (800be50 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800bdba:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800bdbc:	4010      	ands	r0, r2
 800bdbe:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800bdc0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800bdc2:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800bdc4:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800bdc6:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800bdc8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bdca:	4010      	ands	r0, r2
 800bdcc:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800bdce:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bdd0:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800bdd2:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800bdd4:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800bdd6:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bdda:	4010      	ands	r0, r2
 800bddc:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800bde0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bde4:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800bde6:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800bde8:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800bdec:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800bdf0:	4010      	ands	r0, r2
 800bdf2:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800bdf6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800bdfa:	4328      	orrs	r0, r5
 800bdfc:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800be00:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800be04:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800be08:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800be0c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800be10:	698d      	ldr	r5, [r1, #24]
 800be12:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800be14:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800be16:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800be18:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800be1c:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800be20:	4010      	ands	r0, r2
 800be22:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800be26:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800be2a:	4328      	orrs	r0, r5
 800be2c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800be30:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 800be34:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800be36:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800be38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800be3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800be40:	430a      	orrs	r2, r1
 800be42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800be46:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800be48:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800be4a:	2002      	movs	r0, #2
 800be4c:	e7fc      	b.n	800be48 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800be4e:	bf00      	nop
 800be50:	ffff0000 	.word	0xffff0000

0800be54 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800be54:	7c03      	ldrb	r3, [r0, #16]
{
 800be56:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d01c      	beq.n	800be96 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800be5c:	6802      	ldr	r2, [r0, #0]
 800be5e:	2300      	movs	r3, #0
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	6851      	ldr	r1, [r2, #4]
 800be64:	f041 0101 	orr.w	r1, r1, #1
 800be68:	6051      	str	r1, [r2, #4]
 800be6a:	6851      	ldr	r1, [r2, #4]
 800be6c:	f001 0101 	and.w	r1, r1, #1
 800be70:	9100      	str	r1, [sp, #0]
 800be72:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800be7a:	f041 0108 	orr.w	r1, r1, #8
 800be7e:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800be82:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800be86:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800be88:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800be8a:	f002 0208 	and.w	r2, r2, #8
 800be8e:	9201      	str	r2, [sp, #4]
 800be90:	9a01      	ldr	r2, [sp, #4]
}
 800be92:	b002      	add	sp, #8
 800be94:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800be96:	2002      	movs	r0, #2
 800be98:	e7fb      	b.n	800be92 <HAL_DSI_Start+0x3e>

0800be9a <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800be9a:	7c02      	ldrb	r2, [r0, #16]
{
 800be9c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800be9e:	2a01      	cmp	r2, #1
 800bea0:	d009      	beq.n	800beb6 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800bea2:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bea4:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800bea6:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800beaa:	f042 0204 	orr.w	r2, r2, #4
 800beae:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800beb2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800beb4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800beb6:	2002      	movs	r0, #2
}
 800beb8:	4770      	bx	lr

0800beba <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800beba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800bebc:	7c05      	ldrb	r5, [r0, #16]
{
 800bebe:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800bec0:	2d01      	cmp	r5, #1
 800bec2:	d009      	beq.n	800bed8 <HAL_DSI_ShortWrite+0x1e>
 800bec4:	2501      	movs	r5, #1
 800bec6:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800bec8:	9d06      	ldr	r5, [sp, #24]
 800beca:	9500      	str	r5, [sp, #0]
 800becc:	f7ff fc6c 	bl	800b7a8 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bed0:	2300      	movs	r3, #0
 800bed2:	7423      	strb	r3, [r4, #16]

  return status;
}
 800bed4:	b003      	add	sp, #12
 800bed6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800bed8:	2002      	movs	r0, #2
 800beda:	e7fb      	b.n	800bed4 <HAL_DSI_ShortWrite+0x1a>

0800bedc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800bedc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800bee2:	7c03      	ldrb	r3, [r0, #16]
{
 800bee4:	4606      	mov	r6, r0
 800bee6:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800bee8:	2b01      	cmp	r3, #1
{
 800beea:	4615      	mov	r5, r2
 800beec:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 800bef0:	d052      	beq.n	800bf98 <HAL_DSI_LongWrite+0xbc>
 800bef2:	2301      	movs	r3, #1
 800bef4:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800bef6:	f7ff fa61 	bl	800b3bc <HAL_GetTick>
 800befa:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800befc:	6832      	ldr	r2, [r6, #0]
 800befe:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800bf00:	f013 0a01 	ands.w	sl, r3, #1
 800bf04:	d019      	beq.n	800bf3a <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800bf06:	2c03      	cmp	r4, #3
 800bf08:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800bf0a:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800bf0e:	bf28      	it	cs
 800bf10:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800bf12:	4283      	cmp	r3, r0
 800bf14:	d11d      	bne.n	800bf52 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800bf16:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 800bf18:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800bf1a:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800bf1e:	bb10      	cbnz	r0, 800bf66 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800bf20:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bf22:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 800bf26:	0223      	lsls	r3, r4, #8
 800bf28:	0224      	lsls	r4, r4, #8
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 800bf30:	431d      	orrs	r5, r3
 800bf32:	4325      	orrs	r5, r4
 800bf34:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bf36:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 800bf38:	e009      	b.n	800bf4e <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800bf3a:	f7ff fa3f 	bl	800b3bc <HAL_GetTick>
 800bf3e:	eba0 000b 	sub.w	r0, r0, fp
 800bf42:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800bf46:	d9d9      	bls.n	800befc <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800bf48:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800bf4a:	f886 a010 	strb.w	sl, [r6, #16]
}
 800bf4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800bf52:	f818 1003 	ldrb.w	r1, [r8, r3]
 800bf56:	3301      	adds	r3, #1
 800bf58:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800bf5c:	fa01 f10c 	lsl.w	r1, r1, ip
 800bf60:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800bf64:	e7d5      	b.n	800bf12 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800bf66:	2804      	cmp	r0, #4
    fifoword = 0U;
 800bf68:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800bf6c:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800bf6e:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800bf70:	bf28      	it	cs
 800bf72:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800bf76:	f813 8001 	ldrb.w	r8, [r3, r1]
 800bf7a:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800bf7e:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800bf80:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800bf84:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800bf86:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800bf8a:	d1f4      	bne.n	800bf76 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 800bf8c:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800bf90:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800bf92:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800bf96:	e7c2      	b.n	800bf1e <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800bf98:	2002      	movs	r0, #2
 800bf9a:	e7d8      	b.n	800bf4e <HAL_DSI_LongWrite+0x72>

0800bf9c <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800bf9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfa0:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800bfa2:	7c03      	ldrb	r3, [r0, #16]
{
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800bfa8:	2b01      	cmp	r3, #1
{
 800bfaa:	4617      	mov	r7, r2
 800bfac:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800bfb0:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 800bfb4:	d06f      	beq.n	800c096 <HAL_DSI_Read+0xfa>
 800bfb6:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800bfb8:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800bfba:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800bfbc:	d90d      	bls.n	800bfda <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800bfbe:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800bfc2:	2237      	movs	r2, #55	@ 0x37
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	b2f3      	uxtb	r3, r6
 800bfc8:	f7ff fbee 	bl	800b7a8 <DSI_ShortWrite.constprop.0>
 800bfcc:	b128      	cbz	r0, 800bfda <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800bfce:	2300      	movs	r3, #0

      return HAL_ERROR;
 800bfd0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800bfd2:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800bfd4:	b003      	add	sp, #12
 800bfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800bfda:	f1b9 0f06 	cmp.w	r9, #6
 800bfde:	d10f      	bne.n	800c000 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bfe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800bfe2:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bfe4:	021b      	lsls	r3, r3, #8
 800bfe6:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800bfea:	f043 0306 	orr.w	r3, r3, #6
 800bfee:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800bff0:	f7ff f9e4 	bl	800b3bc <HAL_GetTick>
 800bff4:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800bff6:	2e00      	cmp	r6, #0
 800bff8:	dc27      	bgt.n	800c04a <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800bffa:	2000      	movs	r0, #0
 800bffc:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800bffe:	e7e9      	b.n	800bfd4 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800c000:	f1b9 0f04 	cmp.w	r9, #4
 800c004:	d105      	bne.n	800c012 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c006:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800c008:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c00a:	f044 0404 	orr.w	r4, r4, #4
 800c00e:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800c010:	e7ee      	b.n	800bff0 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800c012:	f1b9 0f14 	cmp.w	r9, #20
 800c016:	d108      	bne.n	800c02a <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800c018:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c01c:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800c01e:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c020:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800c024:	f044 0414 	orr.w	r4, r4, #20
 800c028:	e7f1      	b.n	800c00e <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800c02a:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 800c02e:	d1ce      	bne.n	800bfce <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800c030:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c034:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800c036:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c038:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800c03c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c040:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800c044:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 800c048:	e7e1      	b.n	800c00e <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800c04a:	682a      	ldr	r2, [r5, #0]
 800c04c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800c04e:	f013 0310 	ands.w	r3, r3, #16
 800c052:	d10d      	bne.n	800c070 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800c054:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800c056:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800c058:	4632      	mov	r2, r6
 800c05a:	bf28      	it	cs
 800c05c:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800c05e:	00d9      	lsls	r1, r3, #3
 800c060:	fa20 f101 	lsr.w	r1, r0, r1
 800c064:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800c066:	3301      	adds	r3, #1
 800c068:	429a      	cmp	r2, r3
 800c06a:	d1f8      	bne.n	800c05e <HAL_DSI_Read+0xc2>
        pdata++;
 800c06c:	4417      	add	r7, r2
        datasize--;
 800c06e:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c070:	f7ff f9a4 	bl	800b3bc <HAL_GetTick>
 800c074:	1b00      	subs	r0, r0, r4
 800c076:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800c07a:	d903      	bls.n	800c084 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800c07c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800c07e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800c080:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800c082:	e7a7      	b.n	800bfd4 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800c088:	0652      	lsls	r2, r2, #25
 800c08a:	d4b4      	bmi.n	800bff6 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800c08c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c090:	069b      	lsls	r3, r3, #26
 800c092:	d49c      	bmi.n	800bfce <HAL_DSI_Read+0x32>
 800c094:	e7af      	b.n	800bff6 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800c096:	2002      	movs	r0, #2
 800c098:	e79c      	b.n	800bfd4 <HAL_DSI_Read+0x38>

0800c09a <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c09a:	7c02      	ldrb	r2, [r0, #16]
{
 800c09c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800c09e:	2a01      	cmp	r2, #1
 800c0a0:	d00f      	beq.n	800c0c2 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800c0a2:	6802      	ldr	r2, [r0, #0]
 800c0a4:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800c0a8:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800c0ac:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800c0b0:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800c0b4:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c0b8:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800c0ba:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800c0be:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800c0c0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c0c2:	2002      	movs	r0, #2
}
 800c0c4:	4770      	bx	lr
	...

0800c0c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800c0cc:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0ce:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800c294 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c0d2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c0d6:	680a      	ldr	r2, [r1, #0]
 800c0d8:	fa32 f503 	lsrs.w	r5, r2, r3
 800c0dc:	d102      	bne.n	800c0e4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800c0de:	b003      	add	sp, #12
 800c0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c0e4:	2501      	movs	r5, #1
 800c0e6:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800c0ea:	ea18 0202 	ands.w	r2, r8, r2
 800c0ee:	f000 80bb 	beq.w	800c268 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c0f2:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c0f4:	2703      	movs	r7, #3
 800c0f6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c0fa:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c0fe:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c102:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c104:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c108:	2f01      	cmp	r7, #1
 800c10a:	d834      	bhi.n	800c176 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800c10c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c10e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c112:	68cf      	ldr	r7, [r1, #12]
 800c114:	fa07 f70e 	lsl.w	r7, r7, lr
 800c118:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800c11c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800c11e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c120:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c124:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800c128:	409f      	lsls	r7, r3
 800c12a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800c12e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800c130:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c132:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c134:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c138:	688f      	ldr	r7, [r1, #8]
 800c13a:	fa07 f70e 	lsl.w	r7, r7, lr
 800c13e:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800c142:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c144:	d119      	bne.n	800c17a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800c146:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c14a:	f003 0a07 	and.w	sl, r3, #7
 800c14e:	f04f 0b0f 	mov.w	fp, #15
 800c152:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800c156:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800c15a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c15e:	fa0b fb0a 	lsl.w	fp, fp, sl
 800c162:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c166:	690f      	ldr	r7, [r1, #16]
 800c168:	fa07 f70a 	lsl.w	r7, r7, sl
 800c16c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 800c170:	f8c8 7020 	str.w	r7, [r8, #32]
 800c174:	e001      	b.n	800c17a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c176:	2d03      	cmp	r5, #3
 800c178:	d1da      	bne.n	800c130 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800c17a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c17c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c180:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c184:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c188:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800c18c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c18e:	d06b      	beq.n	800c268 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c190:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 800c194:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c198:	f003 0c03 	and.w	ip, r3, #3
 800c19c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1a0:	f045 0502 	orr.w	r5, r5, #2
 800c1a4:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c1a8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1ac:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 800c1b0:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800c1b4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c1b8:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1bc:	f005 0502 	and.w	r5, r5, #2
 800c1c0:	9501      	str	r5, [sp, #4]
 800c1c2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800c1c4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c1c6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c1ca:	4d31      	ldr	r5, [pc, #196]	@ (800c290 <HAL_GPIO_Init+0x1c8>)
 800c1cc:	42a8      	cmp	r0, r5
 800c1ce:	d04d      	beq.n	800c26c <HAL_GPIO_Init+0x1a4>
 800c1d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c1d4:	42a8      	cmp	r0, r5
 800c1d6:	d04b      	beq.n	800c270 <HAL_GPIO_Init+0x1a8>
 800c1d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c1dc:	42a8      	cmp	r0, r5
 800c1de:	d049      	beq.n	800c274 <HAL_GPIO_Init+0x1ac>
 800c1e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c1e4:	42a8      	cmp	r0, r5
 800c1e6:	d047      	beq.n	800c278 <HAL_GPIO_Init+0x1b0>
 800c1e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c1ec:	42a8      	cmp	r0, r5
 800c1ee:	d045      	beq.n	800c27c <HAL_GPIO_Init+0x1b4>
 800c1f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c1f4:	42a8      	cmp	r0, r5
 800c1f6:	d043      	beq.n	800c280 <HAL_GPIO_Init+0x1b8>
 800c1f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c1fc:	42a8      	cmp	r0, r5
 800c1fe:	d041      	beq.n	800c284 <HAL_GPIO_Init+0x1bc>
 800c200:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c204:	42a8      	cmp	r0, r5
 800c206:	d03f      	beq.n	800c288 <HAL_GPIO_Init+0x1c0>
 800c208:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c20c:	42a8      	cmp	r0, r5
 800c20e:	d03d      	beq.n	800c28c <HAL_GPIO_Init+0x1c4>
 800c210:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c214:	42a8      	cmp	r0, r5
 800c216:	bf14      	ite	ne
 800c218:	250a      	movne	r5, #10
 800c21a:	2509      	moveq	r5, #9
 800c21c:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c220:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c224:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c228:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800c22a:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800c22e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800c230:	bf0c      	ite	eq
 800c232:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800c234:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c236:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 800c23a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800c23c:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800c23e:	bf0c      	ite	eq
 800c240:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800c242:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c244:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 800c248:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800c24a:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800c24e:	bf0c      	ite	eq
 800c250:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800c252:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c254:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800c256:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800c25a:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800c25e:	bf54      	ite	pl
 800c260:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800c262:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800c264:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 800c268:	3301      	adds	r3, #1
 800c26a:	e734      	b.n	800c0d6 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c26c:	2500      	movs	r5, #0
 800c26e:	e7d5      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c270:	2501      	movs	r5, #1
 800c272:	e7d3      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c274:	2502      	movs	r5, #2
 800c276:	e7d1      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c278:	2503      	movs	r5, #3
 800c27a:	e7cf      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c27c:	2504      	movs	r5, #4
 800c27e:	e7cd      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c280:	2505      	movs	r5, #5
 800c282:	e7cb      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c284:	2506      	movs	r5, #6
 800c286:	e7c9      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c288:	2507      	movs	r5, #7
 800c28a:	e7c7      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c28c:	2508      	movs	r5, #8
 800c28e:	e7c5      	b.n	800c21c <HAL_GPIO_Init+0x154>
 800c290:	58020000 	.word	0x58020000
 800c294:	58024400 	.word	0x58024400

0800c298 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800c29c:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800c29e:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c2a2:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c2a6:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800c2aa:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800c2ae:	fa31 f302 	lsrs.w	r3, r1, r2
 800c2b2:	d101      	bne.n	800c2b8 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800c2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800c2b8:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 800c2bc:	ea1c 0601 	ands.w	r6, ip, r1
 800c2c0:	d070      	beq.n	800c3a4 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c2c2:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c2c6:	f002 0703 	and.w	r7, r2, #3
 800c2ca:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 800c2ce:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c2d0:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c2d4:	fa08 f907 	lsl.w	r9, r8, r7
 800c2d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800c2dc:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c2e0:	4b3a      	ldr	r3, [pc, #232]	@ (800c3cc <HAL_GPIO_DeInit+0x134>)
 800c2e2:	4298      	cmp	r0, r3
 800c2e4:	d060      	beq.n	800c3a8 <HAL_GPIO_DeInit+0x110>
 800c2e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2ea:	4298      	cmp	r0, r3
 800c2ec:	d05e      	beq.n	800c3ac <HAL_GPIO_DeInit+0x114>
 800c2ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2f2:	4298      	cmp	r0, r3
 800c2f4:	d05c      	beq.n	800c3b0 <HAL_GPIO_DeInit+0x118>
 800c2f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2fa:	4298      	cmp	r0, r3
 800c2fc:	d05a      	beq.n	800c3b4 <HAL_GPIO_DeInit+0x11c>
 800c2fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c302:	4298      	cmp	r0, r3
 800c304:	d058      	beq.n	800c3b8 <HAL_GPIO_DeInit+0x120>
 800c306:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c30a:	4298      	cmp	r0, r3
 800c30c:	d056      	beq.n	800c3bc <HAL_GPIO_DeInit+0x124>
 800c30e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c312:	4298      	cmp	r0, r3
 800c314:	d054      	beq.n	800c3c0 <HAL_GPIO_DeInit+0x128>
 800c316:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c31a:	4298      	cmp	r0, r3
 800c31c:	d052      	beq.n	800c3c4 <HAL_GPIO_DeInit+0x12c>
 800c31e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c322:	4298      	cmp	r0, r3
 800c324:	d050      	beq.n	800c3c8 <HAL_GPIO_DeInit+0x130>
 800c326:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c32a:	4298      	cmp	r0, r3
 800c32c:	bf0c      	ite	eq
 800c32e:	2309      	moveq	r3, #9
 800c330:	230a      	movne	r3, #10
 800c332:	40bb      	lsls	r3, r7
 800c334:	4573      	cmp	r3, lr
 800c336:	d117      	bne.n	800c368 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800c338:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c33c:	ea23 0306 	bic.w	r3, r3, r6
 800c340:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800c344:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c348:	ea23 0306 	bic.w	r3, r3, r6
 800c34c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800c350:	6863      	ldr	r3, [r4, #4]
 800c352:	ea23 0306 	bic.w	r3, r3, r6
 800c356:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	ea23 0306 	bic.w	r3, r3, r6
 800c35e:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c360:	68ab      	ldr	r3, [r5, #8]
 800c362:	ea23 0309 	bic.w	r3, r3, r9
 800c366:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c368:	0053      	lsls	r3, r2, #1
 800c36a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c36c:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c36e:	fa0b f303 	lsl.w	r3, fp, r3
 800c372:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c376:	431d      	orrs	r5, r3
 800c378:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c37a:	f002 0507 	and.w	r5, r2, #7
 800c37e:	6a37      	ldr	r7, [r6, #32]
 800c380:	00ad      	lsls	r5, r5, #2
 800c382:	fa08 f505 	lsl.w	r5, r8, r5
 800c386:	ea27 0705 	bic.w	r7, r7, r5
 800c38a:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c38c:	68c5      	ldr	r5, [r0, #12]
 800c38e:	ea25 0503 	bic.w	r5, r5, r3
 800c392:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c394:	6845      	ldr	r5, [r0, #4]
 800c396:	ea25 050c 	bic.w	r5, r5, ip
 800c39a:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c39c:	6885      	ldr	r5, [r0, #8]
 800c39e:	ea25 0303 	bic.w	r3, r5, r3
 800c3a2:	6083      	str	r3, [r0, #8]
    position++;
 800c3a4:	3201      	adds	r2, #1
 800c3a6:	e782      	b.n	800c2ae <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e7c2      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e7c0      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	e7be      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	e7bc      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3b8:	2304      	movs	r3, #4
 800c3ba:	e7ba      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3bc:	2305      	movs	r3, #5
 800c3be:	e7b8      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3c0:	2306      	movs	r3, #6
 800c3c2:	e7b6      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3c4:	2307      	movs	r3, #7
 800c3c6:	e7b4      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3c8:	2308      	movs	r3, #8
 800c3ca:	e7b2      	b.n	800c332 <HAL_GPIO_DeInit+0x9a>
 800c3cc:	58020000 	.word	0x58020000

0800c3d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c3d0:	6903      	ldr	r3, [r0, #16]
 800c3d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800c3d4:	bf14      	ite	ne
 800c3d6:	2001      	movne	r0, #1
 800c3d8:	2000      	moveq	r0, #0
 800c3da:	4770      	bx	lr

0800c3dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c3dc:	b10a      	cbz	r2, 800c3e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c3de:	6181      	str	r1, [r0, #24]
  }
}
 800c3e0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c3e2:	0409      	lsls	r1, r1, #16
 800c3e4:	e7fb      	b.n	800c3de <HAL_GPIO_WritePin+0x2>

0800c3e6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c3e6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c3e8:	ea01 0203 	and.w	r2, r1, r3
 800c3ec:	ea21 0103 	bic.w	r1, r1, r3
 800c3f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c3f4:	6181      	str	r1, [r0, #24]
}
 800c3f6:	4770      	bx	lr

0800c3f8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800c3f8:	4b04      	ldr	r3, [pc, #16]	@ (800c40c <HAL_HSEM_FastTake+0x14>)
 800c3fa:	3020      	adds	r0, #32
 800c3fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800c400:	4b03      	ldr	r3, [pc, #12]	@ (800c410 <HAL_HSEM_FastTake+0x18>)
 800c402:	1ac0      	subs	r0, r0, r3
 800c404:	bf18      	it	ne
 800c406:	2001      	movne	r0, #1
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	58026400 	.word	0x58026400
 800c410:	80000300 	.word	0x80000300

0800c414 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800c414:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800c418:	4b01      	ldr	r3, [pc, #4]	@ (800c420 <HAL_HSEM_Release+0xc>)
 800c41a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800c41e:	4770      	bx	lr
 800c420:	58026400 	.word	0x58026400

0800c424 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c424:	6803      	ldr	r3, [r0, #0]
 800c426:	699a      	ldr	r2, [r3, #24]
 800c428:	0791      	lsls	r1, r2, #30
 800c42a:	d501      	bpl.n	800c430 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c42c:	2200      	movs	r2, #0
 800c42e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c430:	699a      	ldr	r2, [r3, #24]
 800c432:	07d2      	lsls	r2, r2, #31
 800c434:	d403      	bmi.n	800c43e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c436:	699a      	ldr	r2, [r3, #24]
 800c438:	f042 0201 	orr.w	r2, r2, #1
 800c43c:	619a      	str	r2, [r3, #24]
  }
}
 800c43e:	4770      	bx	lr

0800c440 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c440:	b530      	push	{r4, r5, lr}
 800c442:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c444:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c448:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c44a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800c44c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c44e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800c452:	4a05      	ldr	r2, [pc, #20]	@ (800c468 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c454:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800c456:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c45a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800c45e:	ea20 0002 	bic.w	r0, r0, r2
 800c462:	4303      	orrs	r3, r0
 800c464:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c466:	bd30      	pop	{r4, r5, pc}
 800c468:	03ff63ff 	.word	0x03ff63ff

0800c46c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800c46c:	6803      	ldr	r3, [r0, #0]
{
 800c46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800c472:	699c      	ldr	r4, [r3, #24]
{
 800c474:	4605      	mov	r5, r0
 800c476:	460f      	mov	r7, r1
 800c478:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c47a:	f014 0410 	ands.w	r4, r4, #16
 800c47e:	d06f      	beq.n	800c560 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800c480:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c482:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800c484:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c486:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c488:	682b      	ldr	r3, [r5, #0]
 800c48a:	699a      	ldr	r2, [r3, #24]
 800c48c:	0690      	lsls	r0, r2, #26
 800c48e:	d461      	bmi.n	800c554 <I2C_IsErrorOccurred+0xe8>
 800c490:	f1b8 0f00 	cmp.w	r8, #0
 800c494:	d035      	beq.n	800c502 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800c496:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800c49a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800c49c:	682e      	ldr	r6, [r5, #0]
 800c49e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c4a0:	05d9      	lsls	r1, r3, #23
 800c4a2:	d505      	bpl.n	800c4b0 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c4a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800c4a8:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800c4ac:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c4ae:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c4b0:	055a      	lsls	r2, r3, #21
 800c4b2:	d505      	bpl.n	800c4c0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c4b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800c4b8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800c4bc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c4be:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c4c0:	059b      	lsls	r3, r3, #22
 800c4c2:	d54f      	bpl.n	800c564 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c4c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800c4c8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c4cc:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7ff ffa8 	bl	800c424 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800c4d4:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800c4d6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800c4d8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800c4dc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800c4e0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800c4e4:	f023 0301 	bic.w	r3, r3, #1
 800c4e8:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800c4ea:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800c4ec:	4323      	orrs	r3, r4
 800c4ee:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c4f0:	2320      	movs	r3, #32
 800c4f2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800c4fc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800c500:	e032      	b.n	800c568 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800c502:	1c7a      	adds	r2, r7, #1
 800c504:	d0c1      	beq.n	800c48a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c506:	f7fe ff59 	bl	800b3bc <HAL_GetTick>
 800c50a:	1b80      	subs	r0, r0, r6
 800c50c:	42b8      	cmp	r0, r7
 800c50e:	d801      	bhi.n	800c514 <I2C_IsErrorOccurred+0xa8>
 800c510:	2f00      	cmp	r7, #0
 800c512:	d1b9      	bne.n	800c488 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800c518:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c51c:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800c51e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c520:	0400      	lsls	r0, r0, #16
 800c522:	d50a      	bpl.n	800c53a <I2C_IsErrorOccurred+0xce>
 800c524:	0449      	lsls	r1, r1, #17
 800c526:	d408      	bmi.n	800c53a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800c528:	2a20      	cmp	r2, #32
 800c52a:	d006      	beq.n	800c53a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c532:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800c534:	f7fe ff42 	bl	800b3bc <HAL_GetTick>
 800c538:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c53a:	682b      	ldr	r3, [r5, #0]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	069b      	lsls	r3, r3, #26
 800c540:	d4a2      	bmi.n	800c488 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c542:	f7fe ff3b 	bl	800b3bc <HAL_GetTick>
 800c546:	1b80      	subs	r0, r0, r6
 800c548:	2819      	cmp	r0, #25
 800c54a:	d9f6      	bls.n	800c53a <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c54c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800c54e:	f04f 0801 	mov.w	r8, #1
 800c552:	e799      	b.n	800c488 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800c554:	f1b8 0f00 	cmp.w	r8, #0
 800c558:	d19d      	bne.n	800c496 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c55a:	2220      	movs	r2, #32
 800c55c:	61da      	str	r2, [r3, #28]
 800c55e:	e79a      	b.n	800c496 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800c560:	4620      	mov	r0, r4
 800c562:	e79b      	b.n	800c49c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800c564:	2800      	cmp	r0, #0
 800c566:	d1b2      	bne.n	800c4ce <I2C_IsErrorOccurred+0x62>
}
 800c568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c56c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	4604      	mov	r4, r0
 800c570:	460d      	mov	r5, r1
 800c572:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	079b      	lsls	r3, r3, #30
 800c57a:	d501      	bpl.n	800c580 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800c57c:	2000      	movs	r0, #0
 800c57e:	e01f      	b.n	800c5c0 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c580:	4632      	mov	r2, r6
 800c582:	4629      	mov	r1, r5
 800c584:	4620      	mov	r0, r4
 800c586:	f7ff ff71 	bl	800c46c <I2C_IsErrorOccurred>
 800c58a:	b9c0      	cbnz	r0, 800c5be <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800c58c:	1c6a      	adds	r2, r5, #1
 800c58e:	d0f1      	beq.n	800c574 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c590:	f7fe ff14 	bl	800b3bc <HAL_GetTick>
 800c594:	1b80      	subs	r0, r0, r6
 800c596:	42a8      	cmp	r0, r5
 800c598:	d801      	bhi.n	800c59e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	d1ea      	bne.n	800c574 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	f013 0302 	ands.w	r3, r3, #2
 800c5a6:	d1e5      	bne.n	800c574 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c5a8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800c5aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c5ae:	f042 0220 	orr.w	r2, r2, #32
 800c5b2:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c5b4:	2220      	movs	r2, #32
 800c5b6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800c5be:	2001      	movs	r0, #1
}
 800c5c0:	bd70      	pop	{r4, r5, r6, pc}

0800c5c2 <I2C_WaitOnFlagUntilTimeout>:
{
 800c5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	460f      	mov	r7, r1
 800c5ce:	4616      	mov	r6, r2
 800c5d0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	ea37 0303 	bics.w	r3, r7, r3
 800c5da:	bf0c      	ite	eq
 800c5dc:	2301      	moveq	r3, #1
 800c5de:	2300      	movne	r3, #0
 800c5e0:	42b3      	cmp	r3, r6
 800c5e2:	d001      	beq.n	800c5e8 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	e025      	b.n	800c634 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5e8:	4642      	mov	r2, r8
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f7ff ff3d 	bl	800c46c <I2C_IsErrorOccurred>
 800c5f2:	b9f0      	cbnz	r0, 800c632 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 800c5f4:	1c6b      	adds	r3, r5, #1
 800c5f6:	d0ec      	beq.n	800c5d2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5f8:	f7fe fee0 	bl	800b3bc <HAL_GetTick>
 800c5fc:	eba0 0008 	sub.w	r0, r0, r8
 800c600:	42a8      	cmp	r0, r5
 800c602:	d801      	bhi.n	800c608 <I2C_WaitOnFlagUntilTimeout+0x46>
 800c604:	2d00      	cmp	r5, #0
 800c606:	d1e4      	bne.n	800c5d2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c608:	6823      	ldr	r3, [r4, #0]
 800c60a:	699b      	ldr	r3, [r3, #24]
 800c60c:	ea37 0303 	bics.w	r3, r7, r3
 800c610:	bf0c      	ite	eq
 800c612:	2301      	moveq	r3, #1
 800c614:	2300      	movne	r3, #0
 800c616:	42b3      	cmp	r3, r6
 800c618:	d1db      	bne.n	800c5d2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c61a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c61c:	f043 0320 	orr.w	r3, r3, #32
 800c620:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c622:	2320      	movs	r3, #32
 800c624:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c628:	2300      	movs	r3, #0
 800c62a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800c62e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800c632:	2001      	movs	r0, #1
}
 800c634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c638 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	4604      	mov	r4, r0
 800c63c:	460d      	mov	r5, r1
 800c63e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	069b      	lsls	r3, r3, #26
 800c646:	d501      	bpl.n	800c64c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800c648:	2000      	movs	r0, #0
 800c64a:	e01d      	b.n	800c688 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c64c:	4632      	mov	r2, r6
 800c64e:	4629      	mov	r1, r5
 800c650:	4620      	mov	r0, r4
 800c652:	f7ff ff0b 	bl	800c46c <I2C_IsErrorOccurred>
 800c656:	b9b0      	cbnz	r0, 800c686 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c658:	f7fe feb0 	bl	800b3bc <HAL_GetTick>
 800c65c:	1b80      	subs	r0, r0, r6
 800c65e:	42a8      	cmp	r0, r5
 800c660:	d801      	bhi.n	800c666 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800c662:	2d00      	cmp	r5, #0
 800c664:	d1ec      	bne.n	800c640 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	f013 0320 	ands.w	r3, r3, #32
 800c66e:	d1e7      	bne.n	800c640 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c670:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800c672:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c676:	f042 0220 	orr.w	r2, r2, #32
 800c67a:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c67c:	2220      	movs	r2, #32
 800c67e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c682:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800c686:	2001      	movs	r0, #1
}
 800c688:	bd70      	pop	{r4, r5, r6, pc}

0800c68a <HAL_I2C_MspInit>:
}
 800c68a:	4770      	bx	lr

0800c68c <HAL_I2C_Init>:
{
 800c68c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800c68e:	4604      	mov	r4, r0
 800c690:	2800      	cmp	r0, #0
 800c692:	d04e      	beq.n	800c732 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c694:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800c698:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c69c:	b91b      	cbnz	r3, 800c6a6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800c69e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800c6a2:	f7ff fff2 	bl	800c68a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c6a6:	2324      	movs	r3, #36	@ 0x24
 800c6a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800c6ac:	6823      	ldr	r3, [r4, #0]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	f022 0201 	bic.w	r2, r2, #1
 800c6b4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c6b6:	6862      	ldr	r2, [r4, #4]
 800c6b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c6bc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c6be:	689a      	ldr	r2, [r3, #8]
 800c6c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c6c4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c6c6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c6ca:	2901      	cmp	r1, #1
 800c6cc:	d106      	bne.n	800c6dc <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c6ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c6d2:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c6da:	e007      	b.n	800c6ec <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c6dc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c6e0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c6e2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c6e4:	d1f6      	bne.n	800c6d4 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c6ec:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c6ee:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800c6f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c6fa:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c6fc:	68da      	ldr	r2, [r3, #12]
 800c6fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c702:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c704:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800c708:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c70a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c70c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c710:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c712:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800c716:	430a      	orrs	r2, r1
 800c718:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	f042 0201 	orr.w	r2, r2, #1
 800c720:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800c722:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c724:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c726:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c72a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c72c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800c730:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c732:	2001      	movs	r0, #1
 800c734:	e7fc      	b.n	800c730 <HAL_I2C_Init+0xa4>

0800c736 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800c736:	4770      	bx	lr

0800c738 <HAL_I2C_DeInit>:
{
 800c738:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800c73a:	4604      	mov	r4, r0
 800c73c:	b198      	cbz	r0, 800c766 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800c73e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c740:	2324      	movs	r3, #36	@ 0x24
 800c742:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800c746:	6813      	ldr	r3, [r2, #0]
 800c748:	f023 0301 	bic.w	r3, r3, #1
 800c74c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800c74e:	f7ff fff2 	bl	800c736 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c752:	2000      	movs	r0, #0
 800c754:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800c756:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800c75a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c75e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c760:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800c764:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c766:	2001      	movs	r0, #1
 800c768:	e7fc      	b.n	800c764 <HAL_I2C_DeInit+0x2c>
	...

0800c76c <HAL_I2C_Mem_Write>:
{
 800c76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c770:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c772:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800c776:	4604      	mov	r4, r0
 800c778:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c77a:	2b20      	cmp	r3, #32
{
 800c77c:	4616      	mov	r6, r2
 800c77e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800c782:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c786:	f040 80c6 	bne.w	800c916 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800c78a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c78c:	b113      	cbz	r3, 800c794 <HAL_I2C_Mem_Write+0x28>
 800c78e:	f1ba 0f00 	cmp.w	sl, #0
 800c792:	d106      	bne.n	800c7a2 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c798:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800c79a:	2001      	movs	r0, #1
}
 800c79c:	b003      	add	sp, #12
 800c79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800c7a2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	f000 80b5 	beq.w	800c916 <HAL_I2C_Mem_Write+0x1aa>
 800c7ac:	f04f 0b01 	mov.w	fp, #1
 800c7b0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800c7b4:	f7fe fe02 	bl	800b3bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c7b8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800c7ba:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c7bc:	9000      	str	r0, [sp, #0]
 800c7be:	465a      	mov	r2, fp
 800c7c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f7ff fefc 	bl	800c5c2 <I2C_WaitOnFlagUntilTimeout>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d1e5      	bne.n	800c79a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c7ce:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800c7d0:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c7d2:	fa5f f289 	uxtb.w	r2, r9
 800c7d6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c7d8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c7dc:	2340      	movs	r3, #64	@ 0x40
 800c7de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800c7e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7e4:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c7e6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800c7e8:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c7ea:	4b4c      	ldr	r3, [pc, #304]	@ (800c91c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800c7ec:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c7f6:	f7ff fe23 	bl	800c440 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4641      	mov	r1, r8
 800c7fe:	4620      	mov	r0, r4
 800c800:	f7ff feb4 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c804:	bb18      	cbnz	r0, 800c84e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c806:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c80a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c80c:	d115      	bne.n	800c83a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c80e:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c810:	2200      	movs	r2, #0
 800c812:	2180      	movs	r1, #128	@ 0x80
 800c814:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c816:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c818:	4643      	mov	r3, r8
 800c81a:	9500      	str	r5, [sp, #0]
 800c81c:	f7ff fed1 	bl	800c5c2 <I2C_WaitOnFlagUntilTimeout>
 800c820:	b9a8      	cbnz	r0, 800c84e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c822:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c824:	b29b      	uxth	r3, r3
 800c826:	2bff      	cmp	r3, #255	@ 0xff
 800c828:	d815      	bhi.n	800c856 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800c82a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c82c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800c830:	b292      	uxth	r2, r2
 800c832:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c834:	b2d2      	uxtb	r2, r2
 800c836:	9000      	str	r0, [sp, #0]
 800c838:	e012      	b.n	800c860 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c83a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c83c:	4641      	mov	r1, r8
 800c83e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c840:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c842:	462a      	mov	r2, r5
 800c844:	f7ff fe92 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c848:	b908      	cbnz	r0, 800c84e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	e7df      	b.n	800c80e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800c84e:	2300      	movs	r3, #0
 800c850:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800c854:	e7a1      	b.n	800c79a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c856:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c858:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c85c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c85e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c860:	4639      	mov	r1, r7
 800c862:	4620      	mov	r0, r4
 800c864:	f7ff fdec 	bl	800c440 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c868:	462a      	mov	r2, r5
 800c86a:	4641      	mov	r1, r8
 800c86c:	4620      	mov	r0, r4
 800c86e:	f7ff fe7d 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c872:	2800      	cmp	r0, #0
 800c874:	d191      	bne.n	800c79a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c876:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c878:	6822      	ldr	r2, [r4, #0]
 800c87a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c87e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800c880:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800c882:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800c884:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800c886:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800c888:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800c88a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800c88c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800c88e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c890:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800c892:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c894:	b29b      	uxth	r3, r3
 800c896:	b1b3      	cbz	r3, 800c8c6 <HAL_I2C_Mem_Write+0x15a>
 800c898:	b9aa      	cbnz	r2, 800c8c6 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c89a:	4643      	mov	r3, r8
 800c89c:	2180      	movs	r1, #128	@ 0x80
 800c89e:	4620      	mov	r0, r4
 800c8a0:	9500      	str	r5, [sp, #0]
 800c8a2:	f7ff fe8e 	bl	800c5c2 <I2C_WaitOnFlagUntilTimeout>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	f47f af77 	bne.w	800c79a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	2bff      	cmp	r3, #255	@ 0xff
 800c8b2:	d928      	bls.n	800c906 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8b4:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c8b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8ba:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c8bc:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c8be:	4639      	mov	r1, r7
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f7ff fdbd 	bl	800c440 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800c8c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1cc      	bne.n	800c868 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8ce:	462a      	mov	r2, r5
 800c8d0:	4641      	mov	r1, r8
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f7ff feb0 	bl	800c638 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	f47f af5e 	bne.w	800c79a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	2120      	movs	r1, #32
 800c8e2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800c8ea:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800c8ee:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800c8f2:	f022 0201 	bic.w	r2, r2, #1
 800c8f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c8f8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c8fc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c900:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800c904:	e74a      	b.n	800c79c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800c906:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c908:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c90c:	b292      	uxth	r2, r2
 800c90e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c910:	b2d2      	uxtb	r2, r2
 800c912:	9000      	str	r0, [sp, #0]
 800c914:	e7d3      	b.n	800c8be <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800c916:	2002      	movs	r0, #2
 800c918:	e740      	b.n	800c79c <HAL_I2C_Mem_Write+0x30>
 800c91a:	bf00      	nop
 800c91c:	80002000 	.word	0x80002000

0800c920 <HAL_I2C_Mem_Read>:
{
 800c920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c924:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c926:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800c92a:	4604      	mov	r4, r0
 800c92c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c92e:	2b20      	cmp	r3, #32
{
 800c930:	4616      	mov	r6, r2
 800c932:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800c936:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c93a:	f040 80c9 	bne.w	800cad0 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800c93e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c940:	b113      	cbz	r3, 800c948 <HAL_I2C_Mem_Read+0x28>
 800c942:	f1ba 0f00 	cmp.w	sl, #0
 800c946:	d106      	bne.n	800c956 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c94c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800c94e:	2001      	movs	r0, #1
}
 800c950:	b003      	add	sp, #12
 800c952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800c956:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	f000 80b8 	beq.w	800cad0 <HAL_I2C_Mem_Read+0x1b0>
 800c960:	f04f 0b01 	mov.w	fp, #1
 800c964:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800c968:	f7fe fd28 	bl	800b3bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c96c:	2319      	movs	r3, #25
 800c96e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800c970:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c972:	465a      	mov	r2, fp
 800c974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c978:	4620      	mov	r0, r4
 800c97a:	f7ff fe22 	bl	800c5c2 <I2C_WaitOnFlagUntilTimeout>
 800c97e:	4603      	mov	r3, r0
 800c980:	2800      	cmp	r0, #0
 800c982:	d1e4      	bne.n	800c94e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c984:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800c986:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c988:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c98a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c98e:	2240      	movs	r2, #64	@ 0x40
 800c990:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800c994:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c996:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c998:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800c99a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c99c:	4a4d      	ldr	r2, [pc, #308]	@ (800cad4 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800c99e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c9a2:	9200      	str	r2, [sp, #0]
 800c9a4:	fa5f f289 	uxtb.w	r2, r9
 800c9a8:	f7ff fd4a 	bl	800c440 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9ac:	462a      	mov	r2, r5
 800c9ae:	4641      	mov	r1, r8
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f7ff fddb 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c9b6:	bb20      	cbnz	r0, 800ca02 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c9b8:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c9bc:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c9be:	d116      	bne.n	800c9ee <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c9c0:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	2140      	movs	r1, #64	@ 0x40
 800c9c6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c9c8:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c9ca:	4643      	mov	r3, r8
 800c9cc:	9500      	str	r5, [sp, #0]
 800c9ce:	f7ff fdf8 	bl	800c5c2 <I2C_WaitOnFlagUntilTimeout>
 800c9d2:	b9b0      	cbnz	r0, 800ca02 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c9d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	2bff      	cmp	r3, #255	@ 0xff
 800c9da:	4b3f      	ldr	r3, [pc, #252]	@ (800cad8 <HAL_I2C_Mem_Read+0x1b8>)
 800c9dc:	d815      	bhi.n	800ca0a <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800c9de:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800c9e0:	b292      	uxth	r2, r2
 800c9e2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c9e4:	b2d2      	uxtb	r2, r2
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c9ec:	e012      	b.n	800ca14 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c9ee:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9f0:	4641      	mov	r1, r8
 800c9f2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c9f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9f6:	462a      	mov	r2, r5
 800c9f8:	f7ff fdb8 	bl	800c56c <I2C_WaitOnTXISFlagUntilTimeout>
 800c9fc:	b908      	cbnz	r0, 800ca02 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	e7de      	b.n	800c9c0 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800ca02:	2300      	movs	r3, #0
 800ca04:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800ca08:	e7a1      	b.n	800c94e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca0a:	22ff      	movs	r2, #255	@ 0xff
 800ca0c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ca14:	4639      	mov	r1, r7
 800ca16:	4620      	mov	r0, r4
 800ca18:	f7ff fd12 	bl	800c440 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ca1c:	4643      	mov	r3, r8
 800ca1e:	2200      	movs	r2, #0
 800ca20:	2104      	movs	r1, #4
 800ca22:	4620      	mov	r0, r4
 800ca24:	9500      	str	r5, [sp, #0]
 800ca26:	f7ff fdcc 	bl	800c5c2 <I2C_WaitOnFlagUntilTimeout>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d18f      	bne.n	800c94e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ca34:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800ca36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800ca38:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800ca3a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800ca3c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800ca3e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800ca40:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800ca42:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800ca44:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800ca46:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ca4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	b1b3      	cbz	r3, 800ca80 <HAL_I2C_Mem_Read+0x160>
 800ca52:	b9aa      	cbnz	r2, 800ca80 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ca54:	4643      	mov	r3, r8
 800ca56:	2180      	movs	r1, #128	@ 0x80
 800ca58:	4620      	mov	r0, r4
 800ca5a:	9500      	str	r5, [sp, #0]
 800ca5c:	f7ff fdb1 	bl	800c5c2 <I2C_WaitOnFlagUntilTimeout>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	f47f af74 	bne.w	800c94e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ca66:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	2bff      	cmp	r3, #255	@ 0xff
 800ca6c:	d928      	bls.n	800cac0 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca6e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ca70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca74:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ca76:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7ff fce0 	bl	800c440 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800ca80:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1c9      	bne.n	800ca1c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4641      	mov	r1, r8
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f7ff fdd3 	bl	800c638 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	f47f af5b 	bne.w	800c94e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	2120      	movs	r1, #32
 800ca9c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800ca9e:	685a      	ldr	r2, [r3, #4]
 800caa0:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800caa4:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800caa8:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800caac:	f022 0201 	bic.w	r2, r2, #1
 800cab0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800cab2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800cab6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800caba:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800cabe:	e747      	b.n	800c950 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800cac0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800cac6:	b292      	uxth	r2, r2
 800cac8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800caca:	b2d2      	uxtb	r2, r2
 800cacc:	9000      	str	r0, [sp, #0]
 800cace:	e7d3      	b.n	800ca78 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800cad0:	2002      	movs	r0, #2
 800cad2:	e73d      	b.n	800c950 <HAL_I2C_Mem_Read+0x30>
 800cad4:	80002000 	.word	0x80002000
 800cad8:	80002400 	.word	0x80002400

0800cadc <HAL_I2C_GetState>:
  return hi2c->State;
 800cadc:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800cae0:	4770      	bx	lr

0800cae2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800cae2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800cae4:	4770      	bx	lr

0800cae6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cae6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cae8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800caec:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800caee:	2a20      	cmp	r2, #32
 800caf0:	b2d4      	uxtb	r4, r2
 800caf2:	d11c      	bne.n	800cb2e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800caf4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800caf8:	2a01      	cmp	r2, #1
 800cafa:	d018      	beq.n	800cb2e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cafc:	2224      	movs	r2, #36	@ 0x24
 800cafe:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cb02:	6802      	ldr	r2, [r0, #0]
 800cb04:	6810      	ldr	r0, [r2, #0]
 800cb06:	f020 0001 	bic.w	r0, r0, #1
 800cb0a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cb0c:	6810      	ldr	r0, [r2, #0]
 800cb0e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800cb12:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cb14:	6810      	ldr	r0, [r2, #0]
 800cb16:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb18:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800cb1a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800cb1c:	6811      	ldr	r1, [r2, #0]
 800cb1e:	f041 0101 	orr.w	r1, r1, #1
 800cb22:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800cb24:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800cb28:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800cb2c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800cb2e:	2002      	movs	r0, #2
 800cb30:	e7fc      	b.n	800cb2c <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800cb32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cb32:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb34:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800cb38:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb3a:	2a20      	cmp	r2, #32
 800cb3c:	b2d4      	uxtb	r4, r2
 800cb3e:	d11b      	bne.n	800cb78 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb40:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800cb44:	2a01      	cmp	r2, #1
 800cb46:	d017      	beq.n	800cb78 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cb48:	2224      	movs	r2, #36	@ 0x24
 800cb4a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cb4e:	6802      	ldr	r2, [r0, #0]
 800cb50:	6810      	ldr	r0, [r2, #0]
 800cb52:	f020 0001 	bic.w	r0, r0, #1
 800cb56:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cb58:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cb5a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cb5e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb62:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800cb64:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800cb66:	6811      	ldr	r1, [r2, #0]
 800cb68:	f041 0101 	orr.w	r1, r1, #1
 800cb6c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800cb6e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800cb72:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800cb76:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800cb78:	2002      	movs	r0, #2
 800cb7a:	e7fc      	b.n	800cb76 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800cb7c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800cb7c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800cb7e:	2401      	movs	r4, #1
 800cb80:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800cb82:	2500      	movs	r5, #0
 800cb84:	194e      	adds	r6, r1, r5
 800cb86:	443d      	add	r5, r7
 800cb88:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800cb8a:	42be      	cmp	r6, r7
 800cb8c:	d112      	bne.n	800cbb4 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800cb8e:	2c10      	cmp	r4, #16
 800cb90:	d108      	bne.n	800cba4 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800cb92:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800cb94:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800cb96:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800cb98:	601d      	str	r5, [r3, #0]
  p = 0;
 800cb9a:	4623      	mov	r3, r4
  si = Huffsize[0];
 800cb9c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800cb9e:	5cc8      	ldrb	r0, [r1, r3]
 800cba0:	b9d8      	cbnz	r0, 800cbda <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800cba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800cba4:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800cba6:	3401      	adds	r4, #1
 800cba8:	19ee      	adds	r6, r5, r7
 800cbaa:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800cbae:	d9e9      	bls.n	800cb84 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	e7f6      	b.n	800cba2 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800cbb4:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800cbb8:	e7e7      	b.n	800cb8a <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800cbba:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800cbbe:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800cbc0:	5cc8      	ldrb	r0, [r1, r3]
 800cbc2:	19dc      	adds	r4, r3, r7
 800cbc4:	42a8      	cmp	r0, r5
 800cbc6:	d0f8      	beq.n	800cbba <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800cbc8:	2d1f      	cmp	r5, #31
 800cbca:	d8f1      	bhi.n	800cbb0 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800cbcc:	fa06 f005 	lsl.w	r0, r6, r5
 800cbd0:	42a0      	cmp	r0, r4
 800cbd2:	d9ed      	bls.n	800cbb0 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800cbd4:	0064      	lsls	r4, r4, #1
    si++;
 800cbd6:	3501      	adds	r5, #1
 800cbd8:	e7e1      	b.n	800cb9e <JPEG_Bits_To_SizeCodes+0x22>
 800cbda:	1ae7      	subs	r7, r4, r3
 800cbdc:	e7f0      	b.n	800cbc0 <JPEG_Bits_To_SizeCodes+0x44>

0800cbde <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800cbde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe0:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800cbe4:	460d      	mov	r5, r1
 800cbe6:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800cbe8:	ab01      	add	r3, sp, #4
 800cbea:	aa43      	add	r2, sp, #268	@ 0x10c
 800cbec:	a902      	add	r1, sp, #8
 800cbee:	f7ff ffc5 	bl	800cb7c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800cbf2:	b938      	cbnz	r0, 800cc04 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800cbf4:	9e01      	ldr	r6, [sp, #4]
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	f104 010f 	add.w	r1, r4, #15
 800cbfc:	360f      	adds	r6, #15
 800cbfe:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800cc00:	42a1      	cmp	r1, r4
 800cc02:	d102      	bne.n	800cc0a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800cc04:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800cc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800cc0a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800cc0e:	2e0b      	cmp	r6, #11
 800cc10:	d80a      	bhi.n	800cc28 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800cc12:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800cc16:	f852 cb04 	ldr.w	ip, [r2], #4
 800cc1a:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800cc1e:	f813 7b01 	ldrb.w	r7, [r3], #1
 800cc22:	3f01      	subs	r7, #1
 800cc24:	55af      	strb	r7, [r5, r6]
      k++;
 800cc26:	e7eb      	b.n	800cc00 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800cc28:	2001      	movs	r0, #1
 800cc2a:	e7eb      	b.n	800cc04 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800cc2c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	4608      	mov	r0, r1
 800cc30:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800cc32:	681c      	ldr	r4, [r3, #0]
{
 800cc34:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800cc36:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d125      	bne.n	800cc8a <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800cc3e:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800cc42:	a901      	add	r1, sp, #4
 800cc44:	f7ff ffcb 	bl	800cbde <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800cc48:	b9e8      	cbnz	r0, 800cc86 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800cc4a:	aa01      	add	r2, sp, #4
 800cc4c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800cc50:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800cc54:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800cc56:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800cc58:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800cc5a:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800cc5c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800cc5e:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800cc62:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800cc64:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800cc66:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800cc6a:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800cc6e:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800cc70:	7b13      	ldrb	r3, [r2, #12]
 800cc72:	021b      	lsls	r3, r3, #8
 800cc74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cc78:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800cc7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cc7e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800cc82:	42b4      	cmp	r4, r6
 800cc84:	d1e9      	bne.n	800cc5a <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800cc86:	b011      	add	sp, #68	@ 0x44
 800cc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800cc8a:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d102      	bne.n	800cc98 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800cc92:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800cc96:	e7d4      	b.n	800cc42 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800cc98:	2001      	movs	r0, #1
 800cc9a:	e7f4      	b.n	800cc86 <JPEG_Set_HuffDC_Mem+0x5a>

0800cc9c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800cca0:	6804      	ldr	r4, [r0, #0]
{
 800cca2:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800cca6:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800cca8:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d149      	bne.n	800cd44 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800ccb0:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800ccb4:	466b      	mov	r3, sp
 800ccb6:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800ccba:	a901      	add	r1, sp, #4
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	f7ff ff5d 	bl	800cb7c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d13a      	bne.n	800cd3c <JPEG_Set_HuffAC_Mem+0xa0>
 800ccc6:	9b00      	ldr	r3, [sp, #0]
 800ccc8:	460d      	mov	r5, r1
 800ccca:	f106 0c0f 	add.w	ip, r6, #15
 800ccce:	4617      	mov	r7, r2
 800ccd0:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800ccd2:	f04f 0e0a 	mov.w	lr, #10
 800ccd6:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800ccd8:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800ccda:	4561      	cmp	r1, ip
 800ccdc:	d139      	bne.n	800cd52 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800ccde:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800cce2:	a942      	add	r1, sp, #264	@ 0x108
 800cce4:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800cce8:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800ccea:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800ccec:	6063      	str	r3, [r4, #4]
 800ccee:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800ccf0:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800ccf4:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800ccf8:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800ccfa:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800ccfe:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800cd00:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800cd04:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800cd06:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800cd0a:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800cd0c:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800cd10:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800cd12:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800cd16:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800cd18:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800cd1a:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800cd1e:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800cd22:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800cd24:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800cd28:	021b      	lsls	r3, r3, #8
 800cd2a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cd2e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800cd30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd34:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800cd38:	42b4      	cmp	r4, r6
 800cd3a:	d1e7      	bne.n	800cd0c <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800cd3c:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800cd44:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d10f      	bne.n	800cd6c <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800cd4c:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800cd50:	e7b0      	b.n	800ccb4 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800cd52:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800cd56:	b15b      	cbz	r3, 800cd70 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800cd58:	2bf0      	cmp	r3, #240	@ 0xf0
 800cd5a:	d015      	beq.n	800cd88 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800cd5c:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800cd5e:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800cd62:	3b01      	subs	r3, #1
 800cd64:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800cd68:	2ba1      	cmp	r3, #161	@ 0xa1
 800cd6a:	d902      	bls.n	800cd72 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800cd6c:	2001      	movs	r0, #1
 800cd6e:	e7e5      	b.n	800cd3c <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800cd70:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800cd72:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800cd76:	f857 8b04 	ldr.w	r8, [r7], #4
 800cd7a:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800cd7e:	f815 2b01 	ldrb.w	r2, [r5], #1
 800cd82:	3a01      	subs	r2, #1
 800cd84:	54f2      	strb	r2, [r6, r3]
      k++;
 800cd86:	e7a8      	b.n	800ccda <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800cd88:	23a1      	movs	r3, #161	@ 0xa1
 800cd8a:	e7f2      	b.n	800cd72 <JPEG_Set_HuffAC_Mem+0xd6>

0800cd8c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800cd8c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cd8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800cd92:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cd94:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800cd96:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cd98:	f002 0203 	and.w	r2, r2, #3
 800cd9c:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	bf0c      	ite	eq
 800cda2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800cda6:	f022 0208 	bicne.w	r2, r2, #8
 800cdaa:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	f022 0201 	bic.w	r2, r2, #1
 800cdb2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cdb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdb6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cdba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800cdbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cdc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800cdc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cdca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800cdcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdce:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cdd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	f042 0201 	orr.w	r2, r2, #1
 800cdda:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800cddc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800cdde:	f002 020c 	and.w	r2, r2, #12
 800cde2:	2a08      	cmp	r2, #8
 800cde4:	d104      	bne.n	800cdf0 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800cde6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cde8:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800cdec:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800cdee:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800cdf0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800cdf2:	f002 020c 	and.w	r2, r2, #12
 800cdf6:	2a0c      	cmp	r2, #12
 800cdf8:	d1f9      	bne.n	800cdee <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800cdfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdfc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ce00:	e7f4      	b.n	800cdec <JPEG_Init_Process+0x60>
	...

0800ce04 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ce04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ce06:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800ce08:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800ce0a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ce0c:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800ce0e:	42aa      	cmp	r2, r5
 800ce10:	d313      	bcc.n	800ce3a <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ce12:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800ce14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ce16:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800ce18:	428b      	cmp	r3, r1
 800ce1a:	d30e      	bcc.n	800ce3a <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800ce1c:	4f18      	ldr	r7, [pc, #96]	@ (800ce80 <JPEG_DMA_StartProcess+0x7c>)
 800ce1e:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ce20:	4f18      	ldr	r7, [pc, #96]	@ (800ce84 <JPEG_DMA_StartProcess+0x80>)
 800ce22:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800ce24:	4e18      	ldr	r6, [pc, #96]	@ (800ce88 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ce26:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800ce28:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800ce2a:	4e18      	ldr	r6, [pc, #96]	@ (800ce8c <JPEG_DMA_StartProcess+0x88>)
 800ce2c:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800ce2e:	b105      	cbz	r5, 800ce32 <JPEG_DMA_StartProcess+0x2e>
 800ce30:	b931      	cbnz	r1, 800ce40 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ce32:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ce34:	f043 0304 	orr.w	r3, r3, #4
 800ce38:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800ce3a:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800ce3c:	b003      	add	sp, #12
 800ce3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800ce40:	fbb2 f6f5 	udiv	r6, r2, r5
 800ce44:	fb05 2516 	mls	r5, r5, r6, r2
 800ce48:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ce4a:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800ce4c:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800ce4e:	fbb3 f2f1 	udiv	r2, r3, r1
 800ce52:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ce56:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800ce58:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ce5a:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800ce5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ce5e:	9500      	str	r5, [sp, #0]
 800ce60:	69e2      	ldr	r2, [r4, #28]
 800ce62:	f001 f848 	bl	800def6 <HAL_MDMA_Start_IT>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d1e3      	bne.n	800ce32 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ce6a:	6822      	ldr	r2, [r4, #0]
 800ce6c:	9500      	str	r5, [sp, #0]
 800ce6e:	3240      	adds	r2, #64	@ 0x40
 800ce70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ce72:	69a1      	ldr	r1, [r4, #24]
 800ce74:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ce76:	f001 f83e 	bl	800def6 <HAL_MDMA_Start_IT>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d0de      	beq.n	800ce3c <JPEG_DMA_StartProcess+0x38>
 800ce7e:	e7d8      	b.n	800ce32 <JPEG_DMA_StartProcess+0x2e>
 800ce80:	0800d3c7 	.word	0x0800d3c7
 800ce84:	0800d2bf 	.word	0x0800d2bf
 800ce88:	0800d885 	.word	0x0800d885
 800ce8c:	0800d877 	.word	0x0800d877

0800ce90 <HAL_JPEG_Init>:
{
 800ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800ce92:	4605      	mov	r5, r0
 800ce94:	2800      	cmp	r0, #0
 800ce96:	f000 80f2 	beq.w	800d07e <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800ce9a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800ce9e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800cea2:	b91b      	cbnz	r3, 800ceac <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800cea4:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800cea8:	f7f4 fc0c 	bl	80016c4 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800ceac:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800ceae:	2302      	movs	r3, #2
 800ceb0:	4a86      	ldr	r2, [pc, #536]	@ (800d0cc <HAL_JPEG_Init+0x23c>)
 800ceb2:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800ceb6:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800ceba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cebc:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800cec0:	f043 0301 	orr.w	r3, r3, #1
 800cec4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	f023 0301 	bic.w	r3, r3, #1
 800cecc:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cece:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ced0:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800ced4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800ced6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ced8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800cedc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800cede:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cee4:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800cee6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800cee8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ceec:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800ceee:	4b78      	ldr	r3, [pc, #480]	@ (800d0d0 <HAL_JPEG_Init+0x240>)
 800cef0:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800cef2:	4b78      	ldr	r3, [pc, #480]	@ (800d0d4 <HAL_JPEG_Init+0x244>)
 800cef4:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800cef6:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800cef8:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800cefc:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800cefe:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800cf00:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800cf02:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800cf04:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800cf08:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800cf0a:	4333      	orrs	r3, r6
 800cf0c:	7c56      	ldrb	r6, [r2, #17]
 800cf0e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800cf12:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800cf16:	4281      	cmp	r1, r0
 800cf18:	d1f0      	bne.n	800cefc <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800cf1a:	4b6f      	ldr	r3, [pc, #444]	@ (800d0d8 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800cf1c:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800cf20:	4a6e      	ldr	r2, [pc, #440]	@ (800d0dc <HAL_JPEG_Init+0x24c>)
 800cf22:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800cf26:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800cf2a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800cf2e:	4610      	mov	r0, r2
 800cf30:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800cf32:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800cf36:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800cf3a:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800cf3e:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800cf40:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800cf42:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800cf46:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800cf48:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800cf4c:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800cf50:	ea43 030c 	orr.w	r3, r3, ip
 800cf54:	f890 c011 	ldrb.w	ip, [r0, #17]
 800cf58:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800cf5c:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800cf60:	42be      	cmp	r6, r7
 800cf62:	d1ec      	bne.n	800cf3e <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800cf64:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800cf68:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800cf6c:	0c1b      	lsrs	r3, r3, #16
 800cf6e:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800cf70:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800cf74:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800cf78:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800cf7c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800cf80:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800cf82:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800cf86:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800cf88:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800cf8c:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800cf90:	4333      	orrs	r3, r6
 800cf92:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800cf96:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800cf9a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800cf9e:	4281      	cmp	r1, r0
 800cfa0:	d1ec      	bne.n	800cf7c <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800cfa2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800cfa6:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800cfaa:	4a4d      	ldr	r2, [pc, #308]	@ (800d0e0 <HAL_JPEG_Init+0x250>)
 800cfac:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800cfb0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800cfb2:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800cfb6:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800cfba:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800cfbe:	4013      	ands	r3, r2
  *address = value;
 800cfc0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800cfca:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800cfce:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800cfd2:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800cfd6:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800cfda:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800cfdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800cfe0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800cfe4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800cfe8:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800cfea:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800cfee:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800cff2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800cff6:	4b3b      	ldr	r3, [pc, #236]	@ (800d0e4 <HAL_JPEG_Init+0x254>)
 800cff8:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800cffc:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800d000:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800d004:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800d008:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800d00a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800d00e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800d012:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800d016:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800d018:	4a33      	ldr	r2, [pc, #204]	@ (800d0e8 <HAL_JPEG_Init+0x258>)
 800d01a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800d01e:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800d022:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800d026:	4b31      	ldr	r3, [pc, #196]	@ (800d0ec <HAL_JPEG_Init+0x25c>)
 800d028:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800d02c:	4b30      	ldr	r3, [pc, #192]	@ (800d0f0 <HAL_JPEG_Init+0x260>)
 800d02e:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800d032:	4b30      	ldr	r3, [pc, #192]	@ (800d0f4 <HAL_JPEG_Init+0x264>)
 800d034:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800d038:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800d03c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800d03e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800d042:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800d046:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800d04a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800d04c:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800d050:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800d052:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800d056:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800d05a:	4333      	orrs	r3, r6
 800d05c:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800d060:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800d064:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800d068:	4281      	cmp	r1, r0
 800d06a:	d1ec      	bne.n	800d046 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800d06c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800d070:	491a      	ldr	r1, [pc, #104]	@ (800d0dc <HAL_JPEG_Init+0x24c>)
 800d072:	4628      	mov	r0, r5
 800d074:	f7ff fe12 	bl	800cc9c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800d078:	b118      	cbz	r0, 800d082 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800d07a:	2301      	movs	r3, #1
 800d07c:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800d07e:	2001      	movs	r0, #1
}
 800d080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800d082:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800d086:	4918      	ldr	r1, [pc, #96]	@ (800d0e8 <HAL_JPEG_Init+0x258>)
 800d088:	4628      	mov	r0, r5
 800d08a:	f7ff fe07 	bl	800cc9c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800d08e:	2800      	cmp	r0, #0
 800d090:	d1f3      	bne.n	800d07a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800d092:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800d096:	490d      	ldr	r1, [pc, #52]	@ (800d0cc <HAL_JPEG_Init+0x23c>)
 800d098:	4628      	mov	r0, r5
 800d09a:	f7ff fdc7 	bl	800cc2c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d1eb      	bne.n	800d07a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800d0a2:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800d0a6:	4914      	ldr	r1, [pc, #80]	@ (800d0f8 <HAL_JPEG_Init+0x268>)
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f7ff fdbf 	bl	800cc2c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d1e3      	bne.n	800d07a <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800d0b2:	6863      	ldr	r3, [r4, #4]
 800d0b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0b8:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800d0ba:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800d0bc:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800d0be:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800d0c0:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800d0c4:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800d0c6:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800d0c8:	e7da      	b.n	800d080 <HAL_JPEG_Init+0x1f0>
 800d0ca:	bf00      	nop
 800d0cc:	0802ffac 	.word	0x0802ffac
 800d0d0:	0802fdac 	.word	0x0802fdac
 800d0d4:	0802fd6c 	.word	0x0802fd6c
 800d0d8:	0b0a0908 	.word	0x0b0a0908
 800d0dc:	0802fede 	.word	0x0802fede
 800d0e0:	ffff0000 	.word	0xffff0000
 800d0e4:	09080706 	.word	0x09080706
 800d0e8:	0802fe2c 	.word	0x0802fe2c
 800d0ec:	01000404 	.word	0x01000404
 800d0f0:	05070403 	.word	0x05070403
 800d0f4:	04040201 	.word	0x04040201
 800d0f8:	0802ff90 	.word	0x0802ff90

0800d0fc <HAL_JPEG_GetInfo>:
{
 800d0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800d100:	2800      	cmp	r0, #0
 800d102:	d06f      	beq.n	800d1e4 <HAL_JPEG_GetInfo+0xe8>
 800d104:	2900      	cmp	r1, #0
 800d106:	d06d      	beq.n	800d1e4 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800d108:	6804      	ldr	r4, [r0, #0]
 800d10a:	6863      	ldr	r3, [r4, #4]
 800d10c:	f003 0303 	and.w	r3, r3, #3
 800d110:	2b02      	cmp	r3, #2
 800d112:	d047      	beq.n	800d1a4 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800d114:	6863      	ldr	r3, [r4, #4]
 800d116:	f013 0303 	ands.w	r3, r3, #3
 800d11a:	d005      	beq.n	800d128 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800d11c:	6863      	ldr	r3, [r4, #4]
 800d11e:	f003 0303 	and.w	r3, r3, #3
 800d122:	2b03      	cmp	r3, #3
 800d124:	d15e      	bne.n	800d1e4 <HAL_JPEG_GetInfo+0xe8>
 800d126:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800d128:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800d12a:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800d12c:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800d130:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800d132:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800d134:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800d136:	68e2      	ldr	r2, [r4, #12]
 800d138:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d13c:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800d13e:	d13c      	bne.n	800d1ba <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800d140:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800d142:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800d144:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800d148:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800d14a:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800d14c:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800d14e:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800d152:	d129      	bne.n	800d1a8 <HAL_JPEG_GetInfo+0xac>
 800d154:	4313      	orrs	r3, r2
 800d156:	f013 0f0f 	tst.w	r3, #15
 800d15a:	bf0c      	ite	eq
 800d15c:	2301      	moveq	r3, #1
 800d15e:	2300      	movne	r3, #0
 800d160:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800d162:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800d164:	2300      	movs	r3, #0
 800d166:	3450      	adds	r4, #80	@ 0x50
 800d168:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800d1e8 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800d16c:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800d16e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800d172:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800d176:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800d17a:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800d17e:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800d180:	fa29 f206 	lsr.w	r2, r9, r6
 800d184:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800d186:	2a01      	cmp	r2, #1
 800d188:	d119      	bne.n	800d1be <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800d18a:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800d18c:	3608      	adds	r6, #8
 800d18e:	3701      	adds	r7, #1
 800d190:	2e20      	cmp	r6, #32
 800d192:	d1f5      	bne.n	800d180 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800d194:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800d196:	2d40      	cmp	r5, #64	@ 0x40
 800d198:	d1ed      	bne.n	800d176 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800d19a:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800d19c:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800d19e:	610b      	str	r3, [r1, #16]
}
 800d1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a4:	2310      	movs	r3, #16
 800d1a6:	e7bf      	b.n	800d128 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800d1a8:	2d03      	cmp	r5, #3
 800d1aa:	d106      	bne.n	800d1ba <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	f013 0f0f 	tst.w	r3, #15
 800d1b2:	bf0c      	ite	eq
 800d1b4:	2301      	moveq	r3, #1
 800d1b6:	2300      	movne	r3, #0
 800d1b8:	e7d3      	b.n	800d162 <HAL_JPEG_GetInfo+0x66>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	e7d1      	b.n	800d162 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800d1be:	fb0e fb02 	mul.w	fp, lr, r2
 800d1c2:	f897 a000 	ldrb.w	sl, [r7]
 800d1c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1c8:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800d1cc:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800d1d0:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800d1d2:	bf8b      	itete	hi
 800d1d4:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800d1d8:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800d1dc:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800d1de:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800d1e2:	e7d3      	b.n	800d18c <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	e7db      	b.n	800d1a0 <HAL_JPEG_GetInfo+0xa4>
 800d1e8:	0802fdec 	.word	0x0802fdec

0800d1ec <HAL_JPEG_Decode_DMA>:
{
 800d1ec:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	b348      	cbz	r0, 800d246 <HAL_JPEG_Decode_DMA+0x5a>
 800d1f2:	b341      	cbz	r1, 800d246 <HAL_JPEG_Decode_DMA+0x5a>
 800d1f4:	b33b      	cbz	r3, 800d246 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800d1f6:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800d1fa:	2d01      	cmp	r5, #1
 800d1fc:	d028      	beq.n	800d250 <HAL_JPEG_Decode_DMA+0x64>
 800d1fe:	2501      	movs	r5, #1
 800d200:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800d204:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800d208:	2d01      	cmp	r5, #1
 800d20a:	d11e      	bne.n	800d24a <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800d20c:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800d20e:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800d210:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800d214:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800d216:	f025 050f 	bic.w	r5, r5, #15
 800d21a:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800d21c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800d21e:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800d222:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800d226:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800d228:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800d22a:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800d22c:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800d22e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800d230:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800d232:	f7ff fdab 	bl	800cd8c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800d236:	f7ff fde5 	bl	800ce04 <JPEG_DMA_StartProcess>
 800d23a:	b128      	cbz	r0, 800d248 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800d23c:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800d23e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800d242:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800d246:	2001      	movs	r0, #1
}
 800d248:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800d24a:	2300      	movs	r3, #0
 800d24c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800d250:	2002      	movs	r0, #2
 800d252:	e7f9      	b.n	800d248 <HAL_JPEG_Decode_DMA+0x5c>

0800d254 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800d254:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d256:	f003 030c 	and.w	r3, r3, #12
 800d25a:	2b0c      	cmp	r3, #12
 800d25c:	d10d      	bne.n	800d27a <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800d25e:	07cb      	lsls	r3, r1, #31
 800d260:	d503      	bpl.n	800d26a <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800d262:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d264:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d268:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800d26a:	0789      	lsls	r1, r1, #30
 800d26c:	d503      	bpl.n	800d276 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800d26e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d270:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d274:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800d276:	2000      	movs	r0, #0
 800d278:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800d27a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d27c:	f003 030c 	and.w	r3, r3, #12
 800d280:	2b08      	cmp	r3, #8
 800d282:	d1f8      	bne.n	800d276 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800d284:	f011 0301 	ands.w	r3, r1, #1
 800d288:	d004      	beq.n	800d294 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800d28a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d28c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d290:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800d292:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800d294:	078a      	lsls	r2, r1, #30
 800d296:	d505      	bpl.n	800d2a4 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800d298:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800d29a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800d29e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d2a2:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800d2a4:	6801      	ldr	r1, [r0, #0]
 800d2a6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800d2a8:	ea22 0303 	bic.w	r3, r2, r3
 800d2ac:	630b      	str	r3, [r1, #48]	@ 0x30
 800d2ae:	e7e2      	b.n	800d276 <HAL_JPEG_Pause+0x22>

0800d2b0 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800d2b0:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800d2b2:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800d2b4:	4770      	bx	lr

0800d2b6 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800d2b6:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800d2b8:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800d2ba:	4770      	bx	lr

0800d2bc <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800d2bc:	4770      	bx	lr

0800d2be <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800d2be:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800d2c0:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d2c2:	6803      	ldr	r3, [r0, #0]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	f022 0201 	bic.w	r2, r2, #1
 800d2ca:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d2cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2ce:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800d2d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d2da:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d2dc:	f043 0304 	orr.w	r3, r3, #4
 800d2e0:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800d2e2:	f7f5 ff5d 	bl	80031a0 <HAL_JPEG_ErrorCallback>
}
 800d2e6:	bd08      	pop	{r3, pc}

0800d2e8 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800d2e8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800d2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800d2f0:	b922      	cbnz	r2, 800d2fc <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800d2f2:	2101      	movs	r1, #1
 800d2f4:	f7ff ffae 	bl	800d254 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	e004      	b.n	800d306 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800d2fc:	6a03      	ldr	r3, [r0, #32]
 800d2fe:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800d300:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800d302:	d924      	bls.n	800d34e <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800d304:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800d306:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d308:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800d30c:	d11e      	bne.n	800d34c <JPEG_ReadInputData+0x64>
 800d30e:	b1ea      	cbz	r2, 800d34c <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800d310:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800d314:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800d316:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800d31a:	d827      	bhi.n	800d36c <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800d31c:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800d31e:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800d320:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800d322:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800d324:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800d326:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800d328:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800d32a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800d32e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800d332:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800d334:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800d338:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800d33c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800d340:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800d342:	6a22      	ldr	r2, [r4, #32]
 800d344:	f102 0204 	add.w	r2, r2, #4
 800d348:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800d34a:	d1e8      	bne.n	800d31e <JPEG_ReadInputData+0x36>
}
 800d34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800d34e:	429a      	cmp	r2, r3
 800d350:	d1d2      	bne.n	800d2f8 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800d352:	6a01      	ldr	r1, [r0, #32]
 800d354:	f7f5 feb6 	bl	80030c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800d358:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d35a:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800d35c:	bf84      	itt	hi
 800d35e:	f023 0303 	bichi.w	r3, r3, #3
 800d362:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800d364:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800d366:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800d368:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800d36a:	e7cc      	b.n	800d306 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800d36c:	2a03      	cmp	r2, #3
 800d36e:	d918      	bls.n	800d3a2 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800d370:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800d372:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800d374:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800d376:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800d378:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800d37a:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800d37c:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800d37e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800d382:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800d386:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800d388:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800d38c:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800d390:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800d394:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800d396:	6a22      	ldr	r2, [r4, #32]
 800d398:	f102 0204 	add.w	r2, r2, #4
 800d39c:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800d39e:	d1e8      	bne.n	800d372 <JPEG_ReadInputData+0x8a>
 800d3a0:	e7d4      	b.n	800d34c <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800d3a2:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800d3a4:	6a25      	ldr	r5, [r4, #32]
 800d3a6:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800d3a8:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800d3aa:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800d3ac:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800d3ae:	fa05 f506 	lsl.w	r5, r5, r6
 800d3b2:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800d3b6:	6a25      	ldr	r5, [r4, #32]
 800d3b8:	f105 0501 	add.w	r5, r5, #1
 800d3bc:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800d3be:	d1f1      	bne.n	800d3a4 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800d3c0:	6822      	ldr	r2, [r4, #0]
 800d3c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d3c4:	e7c2      	b.n	800d34c <JPEG_ReadInputData+0x64>

0800d3c6 <JPEG_MDMAInCpltCallback>:
{
 800d3c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800d3c8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d3ca:	6822      	ldr	r2, [r4, #0]
 800d3cc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800d3ce:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800d3d2:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800d3d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d3d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d3da:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800d3de:	041b      	lsls	r3, r3, #16
 800d3e0:	0c1b      	lsrs	r3, r3, #16
 800d3e2:	2b0c      	cmp	r3, #12
 800d3e4:	d11a      	bne.n	800d41c <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800d3e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d3e8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800d3ea:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800d3ec:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800d3ee:	695a      	ldr	r2, [r3, #20]
 800d3f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d3f2:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800d3f6:	1a9b      	subs	r3, r3, r2
 800d3f8:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800d3fa:	6a21      	ldr	r1, [r4, #32]
 800d3fc:	f7f5 fe62 	bl	80030c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800d400:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d402:	42ab      	cmp	r3, r5
 800d404:	d327      	bcc.n	800d456 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800d406:	b95d      	cbnz	r5, 800d420 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d408:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800d40a:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d40c:	f043 0304 	orr.w	r3, r3, #4
 800d410:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800d412:	2306      	movs	r3, #6
 800d414:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800d418:	f7f5 fec2 	bl	80031a0 <HAL_JPEG_ErrorCallback>
}
 800d41c:	b003      	add	sp, #12
 800d41e:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800d420:	fbb3 f2f5 	udiv	r2, r3, r5
 800d424:	fb05 3212 	mls	r2, r5, r2, r3
 800d428:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800d42a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800d42c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800d42e:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800d430:	04db      	lsls	r3, r3, #19
 800d432:	d40a      	bmi.n	800d44a <JPEG_MDMAInCpltCallback+0x84>
 800d434:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d436:	b143      	cbz	r3, 800d44a <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800d438:	2101      	movs	r1, #1
 800d43a:	3240      	adds	r2, #64	@ 0x40
 800d43c:	9100      	str	r1, [sp, #0]
 800d43e:	69a1      	ldr	r1, [r4, #24]
 800d440:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d442:	f000 fd58 	bl	800def6 <HAL_MDMA_Start_IT>
 800d446:	2800      	cmp	r0, #0
 800d448:	d1de      	bne.n	800d408 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800d44a:	6822      	ldr	r2, [r4, #0]
 800d44c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800d44e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d452:	6313      	str	r3, [r2, #48]	@ 0x30
 800d454:	e7e2      	b.n	800d41c <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0e8      	beq.n	800d42c <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800d45a:	079a      	lsls	r2, r3, #30
 800d45c:	d0e6      	beq.n	800d42c <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800d45e:	f023 0303 	bic.w	r3, r3, #3
 800d462:	3304      	adds	r3, #4
 800d464:	e7e1      	b.n	800d42a <JPEG_MDMAInCpltCallback+0x64>

0800d466 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800d466:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800d46a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d46e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800d470:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800d472:	4293      	cmp	r3, r2
 800d474:	d32a      	bcc.n	800d4cc <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800d476:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800d478:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800d47a:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800d47c:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800d47e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800d480:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800d482:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d484:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800d486:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d488:	69e0      	ldr	r0, [r4, #28]
 800d48a:	4428      	add	r0, r5
 800d48c:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800d490:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800d492:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d494:	69e0      	ldr	r0, [r4, #28]
 800d496:	4428      	add	r0, r5
 800d498:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800d49c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800d4a0:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800d4a2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d4a4:	69e0      	ldr	r0, [r4, #28]
 800d4a6:	4428      	add	r0, r5
 800d4a8:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800d4aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d4ac:	f103 0304 	add.w	r3, r3, #4
 800d4b0:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800d4b2:	d1e1      	bne.n	800d478 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800d4b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d4b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d106      	bne.n	800d4ca <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d4bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d4be:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f7f5 fe1d 	bl	8003100 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800d4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800d4cc:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d9fb      	bls.n	800d4ca <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800d4d2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800d4d4:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800d4d6:	1a9b      	subs	r3, r3, r2
 800d4d8:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800d4da:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800d4dc:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800d4de:	d105      	bne.n	800d4ec <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800d4e0:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d4e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d4e4:	429f      	cmp	r7, r3
 800d4e6:	d119      	bne.n	800d51c <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d4e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d4ea:	e7e9      	b.n	800d4c0 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800d4ec:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800d4ee:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800d4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800d4f2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d4f4:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800d4f6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d4f8:	69e1      	ldr	r1, [r4, #28]
 800d4fa:	4429      	add	r1, r5
 800d4fc:	0a1d      	lsrs	r5, r3, #8
 800d4fe:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800d500:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d502:	69e1      	ldr	r1, [r4, #28]
 800d504:	4429      	add	r1, r5
 800d506:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800d508:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800d50a:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800d50c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d50e:	69e1      	ldr	r1, [r4, #28]
 800d510:	4429      	add	r1, r5
 800d512:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800d514:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d516:	3304      	adds	r3, #4
 800d518:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800d51a:	e7de      	b.n	800d4da <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800d51c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800d51e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800d520:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800d522:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800d524:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800d526:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800d528:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800d52a:	d114      	bne.n	800d556 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d52c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d52e:	4620      	mov	r0, r4
 800d530:	f7f5 fde6 	bl	8003100 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800d538:	1d2b      	adds	r3, r5, #4
 800d53a:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800d53c:	2b03      	cmp	r3, #3
 800d53e:	d8c4      	bhi.n	800d4ca <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800d540:	00da      	lsls	r2, r3, #3
 800d542:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d544:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800d546:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800d548:	fa26 f202 	lsr.w	r2, r6, r2
 800d54c:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800d54e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d550:	3201      	adds	r2, #1
 800d552:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800d554:	e7f2      	b.n	800d53c <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800d556:	f002 0303 	and.w	r3, r2, #3
 800d55a:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800d55e:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	fa26 f303 	lsr.w	r3, r6, r3
 800d566:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800d56a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d56c:	3301      	adds	r3, #1
 800d56e:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800d570:	e7d9      	b.n	800d526 <JPEG_StoreOutputData+0xc0>

0800d572 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d572:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d574:	f003 0303 	and.w	r3, r3, #3
 800d578:	2b02      	cmp	r3, #2
{
 800d57a:	b510      	push	{r4, lr}
 800d57c:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d57e:	d114      	bne.n	800d5aa <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800d580:	6803      	ldr	r3, [r0, #0]
 800d582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d584:	065b      	lsls	r3, r3, #25
 800d586:	d510      	bpl.n	800d5aa <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800d588:	1d01      	adds	r1, r0, #4
 800d58a:	f7ff fdb7 	bl	800d0fc <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800d58e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800d590:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800d592:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800d594:	f7f5 fd60 	bl	8003058 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d59c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d5a0:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800d5a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d5a8:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800d5aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d5ac:	04d9      	lsls	r1, r3, #19
 800d5ae:	d407      	bmi.n	800d5c0 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5b4:	0792      	lsls	r2, r2, #30
 800d5b6:	d544      	bpl.n	800d642 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800d5b8:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7ff fe94 	bl	800d2e8 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800d5c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d5c2:	0499      	lsls	r1, r3, #18
 800d5c4:	d407      	bmi.n	800d5d6 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5ca:	0712      	lsls	r2, r2, #28
 800d5cc:	d53e      	bpl.n	800d64c <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800d5ce:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f7ff ff48 	bl	800d466 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800d5d6:	6823      	ldr	r3, [r4, #0]
 800d5d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5da:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800d5de:	2a20      	cmp	r2, #32
 800d5e0:	d13c      	bne.n	800d65c <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	f022 0201 	bic.w	r2, r2, #1
 800d5e8:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800d5ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5ec:	f002 020c 	and.w	r2, r2, #12
 800d5f0:	2a08      	cmp	r2, #8
 800d5f2:	d103      	bne.n	800d5fc <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d5f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5f6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800d5fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800d5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5fe:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800d602:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800d604:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d606:	b133      	cbz	r3, 800d616 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d608:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d60a:	4620      	mov	r0, r4
 800d60c:	69e1      	ldr	r1, [r4, #28]
 800d60e:	f7f5 fd77 	bl	8003100 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800d616:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800d618:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d61a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d61c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d620:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d624:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d626:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800d628:	f04f 0200 	mov.w	r2, #0
 800d62c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800d630:	f04f 0201 	mov.w	r2, #1
 800d634:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d638:	d10d      	bne.n	800d656 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800d63a:	f7f5 fdb3 	bl	80031a4 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800d63e:	2001      	movs	r0, #1
}
 800d640:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800d642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d644:	0758      	lsls	r0, r3, #29
 800d646:	d5bb      	bpl.n	800d5c0 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800d648:	2101      	movs	r1, #1
 800d64a:	e7b6      	b.n	800d5ba <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800d64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d64e:	06db      	lsls	r3, r3, #27
 800d650:	d5c1      	bpl.n	800d5d6 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800d652:	2101      	movs	r1, #1
 800d654:	e7bc      	b.n	800d5d0 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800d656:	f7ff fe31 	bl	800d2bc <HAL_JPEG_EncodeCpltCallback>
 800d65a:	e7f0      	b.n	800d63e <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800d65c:	2000      	movs	r0, #0
 800d65e:	e7ef      	b.n	800d640 <JPEG_Process+0xce>

0800d660 <JPEG_DMA_PollResidualData>:
{
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	4604      	mov	r4, r0
 800d664:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800d666:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800d668:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800d66a:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800d66e:	d122      	bne.n	800d6b6 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800d670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d672:	06d0      	lsls	r0, r2, #27
 800d674:	d51f      	bpl.n	800d6b6 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800d676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800d678:	69e1      	ldr	r1, [r4, #28]
 800d67a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d67c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800d67e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d680:	69e2      	ldr	r2, [r4, #28]
 800d682:	440a      	add	r2, r1
 800d684:	0a19      	lsrs	r1, r3, #8
 800d686:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800d688:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d68a:	69e2      	ldr	r2, [r4, #28]
 800d68c:	440a      	add	r2, r1
 800d68e:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800d690:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800d692:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800d694:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d696:	69e2      	ldr	r2, [r4, #28]
 800d698:	440a      	add	r2, r1
 800d69a:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800d69c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d69e:	3304      	adds	r3, #4
 800d6a0:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800d6a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d6a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d105      	bne.n	800d6b6 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d6aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	69e1      	ldr	r1, [r4, #28]
 800d6b0:	f7f5 fd26 	bl	8003100 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800d6b4:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800d6b6:	3e01      	subs	r6, #1
 800d6b8:	d1d5      	bne.n	800d666 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800d6ba:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800d6bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800d6be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d6c0:	06c9      	lsls	r1, r1, #27
 800d6c2:	d501      	bpl.n	800d6c8 <JPEG_DMA_PollResidualData+0x68>
 800d6c4:	0492      	lsls	r2, r2, #18
 800d6c6:	d420      	bmi.n	800d70a <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	f022 0201 	bic.w	r2, r2, #1
 800d6ce:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800d6d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d6d2:	b133      	cbz	r3, 800d6e2 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d6d4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	69e1      	ldr	r1, [r4, #28]
 800d6da:	f7f5 fd11 	bl	8003100 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800d6e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800d6e4:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d6e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d6e8:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d6ec:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d6f0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d6f2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800d6f4:	f04f 0200 	mov.w	r2, #0
 800d6f8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800d6fc:	f04f 0201 	mov.w	r2, #1
 800d700:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d704:	d102      	bne.n	800d70c <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800d706:	f7f5 fd4d 	bl	80031a4 <HAL_JPEG_DecodeCpltCallback>
}
 800d70a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800d70c:	f7ff fdd6 	bl	800d2bc <HAL_JPEG_EncodeCpltCallback>
}
 800d710:	e7fb      	b.n	800d70a <JPEG_DMA_PollResidualData+0xaa>

0800d712 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800d712:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d714:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800d718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d71a:	4604      	mov	r4, r0
 800d71c:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800d71e:	d014      	beq.n	800d74a <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800d720:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d722:	f003 030c 	and.w	r3, r3, #12
 800d726:	2b0c      	cmp	r3, #12
 800d728:	d146      	bne.n	800d7b8 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800d72a:	07cb      	lsls	r3, r1, #31
 800d72c:	d520      	bpl.n	800d770 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800d72e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d734:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800d736:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800d738:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800d73a:	b941      	cbnz	r1, 800d74e <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d73c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d73e:	f043 0304 	orr.w	r3, r3, #4
 800d742:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800d744:	2306      	movs	r3, #6
 800d746:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800d74a:	2001      	movs	r0, #1
 800d74c:	e01d      	b.n	800d78a <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800d74e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d750:	fbb3 f2f1 	udiv	r2, r3, r1
 800d754:	fb01 3212 	mls	r2, r1, r2, r3
 800d758:	1a9b      	subs	r3, r3, r2
 800d75a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800d75c:	b143      	cbz	r3, 800d770 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800d75e:	6822      	ldr	r2, [r4, #0]
 800d760:	2101      	movs	r1, #1
 800d762:	3240      	adds	r2, #64	@ 0x40
 800d764:	9100      	str	r1, [sp, #0]
 800d766:	69a1      	ldr	r1, [r4, #24]
 800d768:	f000 fbc5 	bl	800def6 <HAL_MDMA_Start_IT>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d1e5      	bne.n	800d73c <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800d770:	07a8      	lsls	r0, r5, #30
 800d772:	d509      	bpl.n	800d788 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800d774:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d776:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d77a:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800d77c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d77e:	0419      	lsls	r1, r3, #16
 800d780:	d505      	bpl.n	800d78e <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800d782:	4620      	mov	r0, r4
 800d784:	f7ff ff6c 	bl	800d660 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800d788:	2000      	movs	r0, #0
}
 800d78a:	b003      	add	sp, #12
 800d78c:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800d78e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800d790:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800d792:	2900      	cmp	r1, #0
 800d794:	d0d2      	beq.n	800d73c <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800d796:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d798:	fbb3 f2f1 	udiv	r2, r3, r1
 800d79c:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800d7a0:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800d7a2:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800d7a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800d7aa:	9200      	str	r2, [sp, #0]
 800d7ac:	69e2      	ldr	r2, [r4, #28]
 800d7ae:	f000 fba2 	bl	800def6 <HAL_MDMA_Start_IT>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d0e8      	beq.n	800d788 <HAL_JPEG_Resume+0x76>
 800d7b6:	e7c1      	b.n	800d73c <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800d7b8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d7ba:	f003 030c 	and.w	r3, r3, #12
 800d7be:	2b08      	cmp	r3, #8
 800d7c0:	d1e2      	bne.n	800d788 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800d7c2:	f011 0301 	ands.w	r3, r1, #1
 800d7c6:	d004      	beq.n	800d7d2 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800d7c8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d7ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7ce:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800d7d0:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800d7d2:	07aa      	lsls	r2, r5, #30
 800d7d4:	d505      	bpl.n	800d7e2 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800d7d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800d7d8:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800d7dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d7e0:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800d7e2:	6821      	ldr	r1, [r4, #0]
 800d7e4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	630b      	str	r3, [r1, #48]	@ 0x30
 800d7ea:	e7cd      	b.n	800d788 <HAL_JPEG_Resume+0x76>

0800d7ec <JPEG_DMA_EndProcess>:
{
 800d7ec:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800d7ee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800d7f0:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800d7f2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800d800:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d802:	429a      	cmp	r2, r3
 800d804:	d105      	bne.n	800d812 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d806:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800d808:	69c1      	ldr	r1, [r0, #28]
 800d80a:	f7f5 fc79 	bl	8003100 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800d816:	f015 0510 	ands.w	r5, r5, #16
 800d81a:	d124      	bne.n	800d866 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800d81c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d81e:	b12b      	cbz	r3, 800d82c <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d822:	4620      	mov	r0, r4
 800d824:	69e1      	ldr	r1, [r4, #28]
 800d826:	f7f5 fc6b 	bl	8003100 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800d82a:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d82c:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800d82e:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d830:	6813      	ldr	r3, [r2, #0]
 800d832:	f023 0301 	bic.w	r3, r3, #1
 800d836:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800d838:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d83a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d83c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d840:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d844:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800d846:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800d848:	f04f 0200 	mov.w	r2, #0
 800d84c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800d850:	f04f 0201 	mov.w	r2, #1
 800d854:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d858:	d102      	bne.n	800d860 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800d85a:	f7f5 fca3 	bl	80031a4 <HAL_JPEG_DecodeCpltCallback>
}
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800d860:	f7ff fd2c 	bl	800d2bc <HAL_JPEG_EncodeCpltCallback>
 800d864:	e7fb      	b.n	800d85e <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800d866:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d868:	049b      	lsls	r3, r3, #18
 800d86a:	d4f8      	bmi.n	800d85e <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800d86c:	4620      	mov	r0, r4
}
 800d86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800d872:	f7ff bef5 	b.w	800d660 <JPEG_DMA_PollResidualData>

0800d876 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800d876:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800d878:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d87a:	041b      	lsls	r3, r3, #16
 800d87c:	d501      	bpl.n	800d882 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800d87e:	f7ff bfb5 	b.w	800d7ec <JPEG_DMA_EndProcess>
}
 800d882:	4770      	bx	lr

0800d884 <JPEG_MDMAOutCpltCallback>:
{
 800d884:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800d886:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d88c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800d890:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800d892:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d894:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800d898:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800d89c:	0412      	lsls	r2, r2, #16
 800d89e:	0c12      	lsrs	r2, r2, #16
 800d8a0:	2a0c      	cmp	r2, #12
 800d8a2:	d125      	bne.n	800d8f0 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a6:	069a      	lsls	r2, r3, #26
 800d8a8:	d424      	bmi.n	800d8f4 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800d8aa:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800d8b0:	695a      	ldr	r2, [r3, #20]
 800d8b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d8b4:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800d8b8:	1a9b      	subs	r3, r3, r2
 800d8ba:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800d8bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d8be:	f7f5 fc1f 	bl	8003100 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800d8c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d8c4:	049b      	lsls	r3, r3, #18
 800d8c6:	d415      	bmi.n	800d8f4 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800d8c8:	6821      	ldr	r1, [r4, #0]
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	3144      	adds	r1, #68	@ 0x44
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d8d2:	69e2      	ldr	r2, [r4, #28]
 800d8d4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800d8d6:	f000 fb0e 	bl	800def6 <HAL_MDMA_Start_IT>
 800d8da:	b158      	cbz	r0, 800d8f4 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d8dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800d8de:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d8e0:	f043 0304 	orr.w	r3, r3, #4
 800d8e4:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800d8e6:	2306      	movs	r3, #6
 800d8e8:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800d8ec:	f7f5 fc58 	bl	80031a0 <HAL_JPEG_ErrorCallback>
}
 800d8f0:	b002      	add	sp, #8
 800d8f2:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800d8f4:	6822      	ldr	r2, [r4, #0]
 800d8f6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800d8f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d8fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d8fe:	e7f7      	b.n	800d8f0 <JPEG_MDMAOutCpltCallback+0x6c>

0800d900 <HAL_JPEG_IRQHandler>:
{
 800d900:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800d902:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800d906:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800d908:	3b03      	subs	r3, #3
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d850      	bhi.n	800d9b0 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800d90e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d910:	f003 030c 	and.w	r3, r3, #12
 800d914:	2b08      	cmp	r3, #8
 800d916:	d103      	bne.n	800d920 <HAL_JPEG_IRQHandler+0x20>
}
 800d918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800d91c:	f7ff be29 	b.w	800d572 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800d920:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d922:	f003 030c 	and.w	r3, r3, #12
 800d926:	2b0c      	cmp	r3, #12
 800d928:	d142      	bne.n	800d9b0 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d92a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d92c:	f003 0303 	and.w	r3, r3, #3
 800d930:	2b02      	cmp	r3, #2
 800d932:	d114      	bne.n	800d95e <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800d934:	6803      	ldr	r3, [r0, #0]
 800d936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d938:	0659      	lsls	r1, r3, #25
 800d93a:	d510      	bpl.n	800d95e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800d93c:	1d01      	adds	r1, r0, #4
 800d93e:	f7ff fbdd 	bl	800d0fc <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800d942:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800d944:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800d946:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800d948:	f7f5 fb86 	bl	8003058 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d954:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800d956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d95c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800d95e:	6823      	ldr	r3, [r4, #0]
 800d960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d962:	0692      	lsls	r2, r2, #26
 800d964:	d524      	bpl.n	800d9b0 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800d966:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800d968:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800d96a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d96e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	f022 0201 	bic.w	r2, r2, #1
 800d976:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d97a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800d97e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800d980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d982:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800d986:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800d988:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d101      	bne.n	800d994 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800d990:	f000 fafa 	bl	800df88 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800d994:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800d996:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d103      	bne.n	800d9a6 <HAL_JPEG_IRQHandler+0xa6>
}
 800d99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800d9a2:	f000 baf1 	b.w	800df88 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800d9a6:	4620      	mov	r0, r4
}
 800d9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800d9ac:	f7ff bf1e 	b.w	800d7ec <JPEG_DMA_EndProcess>
}
 800d9b0:	bd10      	pop	{r4, pc}

0800d9b2 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d9b2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d9b4:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d9b6:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d9ba:	3284      	adds	r2, #132	@ 0x84
 800d9bc:	1883      	adds	r3, r0, r2
{
 800d9be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d9c2:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d9c4:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d9c8:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d9ca:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d9ce:	684c      	ldr	r4, [r1, #4]
 800d9d0:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d9d4:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d9d8:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d9dc:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d9de:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d9e0:	68c5      	ldr	r5, [r0, #12]
 800d9e2:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800d9e6:	443d      	add	r5, r7
 800d9e8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d9ec:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d9ee:	68c6      	ldr	r6, [r0, #12]
 800d9f0:	68cd      	ldr	r5, [r1, #12]
 800d9f2:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800d9f6:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d9f8:	689d      	ldr	r5, [r3, #8]
 800d9fa:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800d9fe:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800da00:	688d      	ldr	r5, [r1, #8]
 800da02:	68c7      	ldr	r7, [r0, #12]
 800da04:	3501      	adds	r5, #1
 800da06:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800da0a:	443d      	add	r5, r7
 800da0c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800da10:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800da12:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800da14:	691d      	ldr	r5, [r3, #16]
 800da16:	f025 0507 	bic.w	r5, r5, #7
 800da1a:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800da1c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800da1e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800da20:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800da24:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800da28:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800da2c:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800da30:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800da34:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800da38:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800da3c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800da3e:	695d      	ldr	r5, [r3, #20]
 800da40:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800da44:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800da46:	694d      	ldr	r5, [r1, #20]
 800da48:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800da4a:	69dd      	ldr	r5, [r3, #28]
 800da4c:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800da50:	f025 0507 	bic.w	r5, r5, #7
 800da54:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800da56:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800da5a:	433d      	orrs	r5, r7
 800da5c:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800da5e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800da60:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800da62:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800da66:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800da68:	b31e      	cbz	r6, 800dab2 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800da6a:	2e01      	cmp	r6, #1
 800da6c:	d023      	beq.n	800dab6 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800da6e:	1eb5      	subs	r5, r6, #2
 800da70:	2d02      	cmp	r5, #2
 800da72:	d922      	bls.n	800daba <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800da74:	2e07      	cmp	r6, #7
 800da76:	bf14      	ite	ne
 800da78:	2501      	movne	r5, #1
 800da7a:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800da7c:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800da7e:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800da82:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800da86:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800da88:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800da8a:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800da8c:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800da8e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800da90:	436e      	muls	r6, r5
 800da92:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800da96:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800da98:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800da9a:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800da9e:	f024 0407 	bic.w	r4, r4, #7
 800daa2:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800daa4:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800daa6:	5883      	ldr	r3, [r0, r2]
 800daa8:	f043 0301 	orr.w	r3, r3, #1
 800daac:	5083      	str	r3, [r0, r2]
}
 800daae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800dab2:	2504      	movs	r5, #4
 800dab4:	e7e2      	b.n	800da7c <LTDC_SetConfig+0xca>
    tmp = 3U;
 800dab6:	2503      	movs	r5, #3
 800dab8:	e7e0      	b.n	800da7c <LTDC_SetConfig+0xca>
    tmp = 2U;
 800daba:	2502      	movs	r5, #2
 800dabc:	e7de      	b.n	800da7c <LTDC_SetConfig+0xca>
	...

0800dac0 <HAL_LTDC_Init>:
{
 800dac0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800dac2:	4604      	mov	r4, r0
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d063      	beq.n	800db90 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800dac8:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800dacc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800dad0:	b91b      	cbnz	r3, 800dada <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800dad2:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800dad6:	f7f3 fe7b 	bl	80017d0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dada:	2302      	movs	r3, #2
 800dadc:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	699a      	ldr	r2, [r3, #24]
 800dae4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800dae8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800daea:	6999      	ldr	r1, [r3, #24]
 800daec:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800daf0:	4302      	orrs	r2, r0
 800daf2:	68e0      	ldr	r0, [r4, #12]
 800daf4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800daf6:	6920      	ldr	r0, [r4, #16]
 800daf8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800dafa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dafc:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800dafe:	4925      	ldr	r1, [pc, #148]	@ (800db94 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800db00:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800db02:	689a      	ldr	r2, [r3, #8]
 800db04:	400a      	ands	r2, r1
 800db06:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800db08:	689a      	ldr	r2, [r3, #8]
 800db0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800db0e:	69a0      	ldr	r0, [r4, #24]
 800db10:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800db12:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800db14:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800db16:	68da      	ldr	r2, [r3, #12]
 800db18:	400a      	ands	r2, r1
 800db1a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800db1c:	68da      	ldr	r2, [r3, #12]
 800db1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800db22:	6a20      	ldr	r0, [r4, #32]
 800db24:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800db26:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800db28:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800db2a:	691a      	ldr	r2, [r3, #16]
 800db2c:	400a      	ands	r2, r1
 800db2e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800db30:	691a      	ldr	r2, [r3, #16]
 800db32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800db36:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800db38:	4302      	orrs	r2, r0
 800db3a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800db3c:	695a      	ldr	r2, [r3, #20]
 800db3e:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800db40:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800db42:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800db44:	695a      	ldr	r2, [r3, #20]
 800db46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800db4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800db4c:	430a      	orrs	r2, r1
 800db4e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800db50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800db52:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800db56:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800db5a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800db5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800db60:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800db62:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800db66:	432a      	orrs	r2, r5
 800db68:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800db6c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800db6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800db72:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800db74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db76:	f042 0206 	orr.w	r2, r2, #6
 800db7a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800db7c:	699a      	ldr	r2, [r3, #24]
 800db7e:	f042 0201 	orr.w	r2, r2, #1
 800db82:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800db84:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800db86:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800db8a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800db90:	2001      	movs	r0, #1
 800db92:	e7fc      	b.n	800db8e <HAL_LTDC_Init+0xce>
 800db94:	f000f800 	.word	0xf000f800

0800db98 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800db98:	4770      	bx	lr

0800db9a <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800db9a:	4770      	bx	lr

0800db9c <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800db9c:	4770      	bx	lr

0800db9e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800db9e:	6803      	ldr	r3, [r0, #0]
{
 800dba0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800dba2:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800dba4:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800dba6:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800dba8:	0772      	lsls	r2, r6, #29
 800dbaa:	d514      	bpl.n	800dbd6 <HAL_LTDC_IRQHandler+0x38>
 800dbac:	0769      	lsls	r1, r5, #29
 800dbae:	d512      	bpl.n	800dbd6 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800dbb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbb2:	f022 0204 	bic.w	r2, r2, #4
 800dbb6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800dbb8:	2204      	movs	r2, #4
 800dbba:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800dbbc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800dbc0:	f043 0301 	orr.w	r3, r3, #1
 800dbc4:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800dbc8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800dbca:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800dbce:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800dbd2:	f7ff ffe1 	bl	800db98 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800dbd6:	07b2      	lsls	r2, r6, #30
 800dbd8:	d516      	bpl.n	800dc08 <HAL_LTDC_IRQHandler+0x6a>
 800dbda:	07ab      	lsls	r3, r5, #30
 800dbdc:	d514      	bpl.n	800dc08 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800dbde:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800dbe0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800dbe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbe4:	f022 0202 	bic.w	r2, r2, #2
 800dbe8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800dbea:	2202      	movs	r2, #2
 800dbec:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800dbee:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800dbf8:	2304      	movs	r3, #4
 800dbfa:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800dbfe:	2300      	movs	r3, #0
 800dc00:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800dc04:	f7ff ffc8 	bl	800db98 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800dc08:	07f0      	lsls	r0, r6, #31
 800dc0a:	d510      	bpl.n	800dc2e <HAL_LTDC_IRQHandler+0x90>
 800dc0c:	07e9      	lsls	r1, r5, #31
 800dc0e:	d50e      	bpl.n	800dc2e <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dc10:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800dc12:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dc14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc16:	f022 0201 	bic.w	r2, r2, #1
 800dc1a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800dc20:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800dc22:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800dc26:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800dc2a:	f7ff ffb6 	bl	800db9a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800dc2e:	0732      	lsls	r2, r6, #28
 800dc30:	d511      	bpl.n	800dc56 <HAL_LTDC_IRQHandler+0xb8>
 800dc32:	072b      	lsls	r3, r5, #28
 800dc34:	d50f      	bpl.n	800dc56 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dc36:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800dc38:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dc3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc3c:	f022 0208 	bic.w	r2, r2, #8
 800dc40:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800dc42:	2208      	movs	r2, #8
 800dc44:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800dc46:	2301      	movs	r3, #1
 800dc48:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800dc52:	f7ff ffa3 	bl	800db9c <HAL_LTDC_ReloadEventCallback>
}
 800dc56:	bd70      	pop	{r4, r5, r6, pc}

0800dc58 <HAL_LTDC_ConfigLayer>:
{
 800dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800dc5c:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800dc60:	4606      	mov	r6, r0
 800dc62:	460f      	mov	r7, r1
 800dc64:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	f04f 0002 	mov.w	r0, #2
 800dc6c:	d01f      	beq.n	800dcae <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dc6e:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800dc70:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dc74:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dc76:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dc7a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800dc7e:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dc82:	3438      	adds	r4, #56	@ 0x38
 800dc84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc90:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800dc92:	4630      	mov	r0, r6
 800dc94:	4662      	mov	r2, ip
 800dc96:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dc98:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800dc9a:	f7ff fe8a 	bl	800d9b2 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800dc9e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800dca0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800dca2:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800dca6:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800dcaa:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800dcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800dcb4 <HAL_LTDC_SetPitch>:
{
 800dcb4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800dcb6:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	f04f 0302 	mov.w	r3, #2
 800dcc0:	d02c      	beq.n	800dd1c <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800dcc2:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dcc4:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800dcc8:	fb04 0402 	mla	r4, r4, r2, r0
 800dccc:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800dcce:	b33c      	cbz	r4, 800dd20 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800dcd0:	2c01      	cmp	r4, #1
 800dcd2:	d027      	beq.n	800dd24 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800dcd4:	1ea5      	subs	r5, r4, #2
 800dcd6:	429d      	cmp	r5, r3
 800dcd8:	d902      	bls.n	800dce0 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800dcda:	2c07      	cmp	r4, #7
 800dcdc:	bf18      	it	ne
 800dcde:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800dce0:	01d2      	lsls	r2, r2, #7
 800dce2:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800dce4:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800dce6:	3284      	adds	r2, #132	@ 0x84
 800dce8:	4422      	add	r2, r4
 800dcea:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800dcec:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800dcf0:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800dcf4:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800dcf6:	4c0c      	ldr	r4, [pc, #48]	@ (800dd28 <HAL_LTDC_SetPitch+0x74>)
 800dcf8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800dcfa:	f045 0501 	orr.w	r5, r5, #1
 800dcfe:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800dd00:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800dd02:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800dd06:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800dd08:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dd0a:	f043 0301 	orr.w	r3, r3, #1
 800dd0e:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800dd10:	2301      	movs	r3, #1
 800dd12:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800dd16:	2300      	movs	r3, #0
 800dd18:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800dd20:	2304      	movs	r3, #4
 800dd22:	e7dd      	b.n	800dce0 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800dd24:	2303      	movs	r3, #3
 800dd26:	e7db      	b.n	800dce0 <HAL_LTDC_SetPitch+0x2c>
 800dd28:	50001000 	.word	0x50001000

0800dd2c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800dd2c:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800dd2e:	6804      	ldr	r4, [r0, #0]
 800dd30:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800dd34:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800dd38:	6965      	ldr	r5, [r4, #20]
 800dd3a:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800dd3e:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800dd42:	ea45 0503 	orr.w	r5, r5, r3
 800dd46:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800dd48:	9d03      	ldr	r5, [sp, #12]
 800dd4a:	6963      	ldr	r3, [r4, #20]
 800dd4c:	f105 35ff 	add.w	r5, r5, #4294967295
 800dd50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd54:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800dd58:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800dd5a:	f04f 031f 	mov.w	r3, #31
 800dd5e:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800dd60:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800dd62:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800dd64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800dd66:	bf0c      	ite	eq
 800dd68:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800dd6c:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800dd70:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800dd74:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800dd76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800dd78:	bf0c      	ite	eq
 800dd7a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800dd7e:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800dd82:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800dd84:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800dd86:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800dd88:	bd30      	pop	{r4, r5, pc}

0800dd8a <HAL_MDMA_Init>:
{
 800dd8a:	b538      	push	{r3, r4, r5, lr}
 800dd8c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800dd8e:	f7fd fb15 	bl	800b3bc <HAL_GetTick>
 800dd92:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800dd94:	2c00      	cmp	r4, #0
 800dd96:	d061      	beq.n	800de5c <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800dd98:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800dd9a:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800dd9c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800dda0:	2302      	movs	r3, #2
 800dda2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800dda6:	68d3      	ldr	r3, [r2, #12]
 800dda8:	f023 0301 	bic.w	r3, r3, #1
 800ddac:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ddae:	6823      	ldr	r3, [r4, #0]
 800ddb0:	68da      	ldr	r2, [r3, #12]
 800ddb2:	07d2      	lsls	r2, r2, #31
 800ddb4:	d448      	bmi.n	800de48 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ddb6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ddbe:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800ddc2:	430a      	orrs	r2, r1
 800ddc4:	69e1      	ldr	r1, [r4, #28]
 800ddc6:	430a      	orrs	r2, r1
 800ddc8:	6a21      	ldr	r1, [r4, #32]
 800ddca:	430a      	orrs	r2, r1
 800ddcc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ddd2:	430a      	orrs	r2, r1
 800ddd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ddd6:	430a      	orrs	r2, r1
 800ddd8:	68a1      	ldr	r1, [r4, #8]
 800ddda:	430a      	orrs	r2, r1
 800dddc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ddde:	3901      	subs	r1, #1
 800dde0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800dde4:	6861      	ldr	r1, [r4, #4]
 800dde6:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ddea:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ddec:	d103      	bne.n	800ddf6 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ddee:	691a      	ldr	r2, [r3, #16]
 800ddf0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800ddf4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ddfa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ddfc:	2a00      	cmp	r2, #0
 800ddfe:	da04      	bge.n	800de0a <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800de00:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800de02:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800de04:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800de08:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800de0a:	b292      	uxth	r2, r2
 800de0c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800de0e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800de10:	2a00      	cmp	r2, #0
 800de12:	da25      	bge.n	800de60 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800de14:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800de16:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800de18:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800de1c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800de1e:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800de20:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800de24:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800de28:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800de2a:	f04f 0200 	mov.w	r2, #0
 800de2e:	d019      	beq.n	800de64 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800de30:	b2c9      	uxtb	r1, r1
 800de32:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800de34:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800de36:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800de38:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800de3a:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800de3c:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800de3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800de42:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800de46:	e00a      	b.n	800de5e <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800de48:	f7fd fab8 	bl	800b3bc <HAL_GetTick>
 800de4c:	1b40      	subs	r0, r0, r5
 800de4e:	2805      	cmp	r0, #5
 800de50:	d9ad      	bls.n	800ddae <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800de52:	2340      	movs	r3, #64	@ 0x40
 800de54:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800de56:	2303      	movs	r3, #3
 800de58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800de5c:	2001      	movs	r0, #1
}
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800de60:	6a18      	ldr	r0, [r3, #32]
 800de62:	e7dd      	b.n	800de20 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800de64:	629a      	str	r2, [r3, #40]	@ 0x28
 800de66:	e7e5      	b.n	800de34 <HAL_MDMA_Init+0xaa>

0800de68 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800de68:	b1d8      	cbz	r0, 800dea2 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800de6a:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800de6c:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800de6e:	68d3      	ldr	r3, [r2, #12]
 800de70:	f023 0301 	bic.w	r3, r3, #1
 800de74:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800de7a:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800de7c:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800de7e:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800de80:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800de82:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800de84:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800de86:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800de88:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800de8a:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800de8c:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800de8e:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800de90:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800de92:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800de96:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800de9a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800de9e:	4618      	mov	r0, r3
 800dea0:	4770      	bx	lr
    return HAL_ERROR;
 800dea2:	2001      	movs	r0, #1
}
 800dea4:	4770      	bx	lr

0800dea6 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800dea6:	4603      	mov	r3, r0
{
 800dea8:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800deaa:	b300      	cbz	r0, 800deee <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800deac:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800deb0:	2801      	cmp	r0, #1
 800deb2:	d01e      	beq.n	800def2 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800deb4:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800deb6:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800deba:	42a5      	cmp	r5, r4
 800debc:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800debe:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800dec2:	d112      	bne.n	800deea <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800dec4:	681c      	ldr	r4, [r3, #0]
 800dec6:	6925      	ldr	r5, [r4, #16]
 800dec8:	006d      	lsls	r5, r5, #1
 800deca:	d407      	bmi.n	800dedc <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800decc:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800dece:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ded0:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800ded2:	b939      	cbnz	r1, 800dee4 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ded4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800ded8:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800deda:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800dee2:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800dee4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dee8:	e7f6      	b.n	800ded8 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800deea:	4620      	mov	r0, r4
 800deec:	e7f6      	b.n	800dedc <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800deee:	2001      	movs	r0, #1
 800def0:	e7f7      	b.n	800dee2 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800def2:	2002      	movs	r0, #2
 800def4:	e7f5      	b.n	800dee2 <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800def6 <HAL_MDMA_Start_IT>:
{
 800def6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800def8:	4604      	mov	r4, r0
 800defa:	2800      	cmp	r0, #0
 800defc:	d042      	beq.n	800df84 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800defe:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800df02:	2d01      	cmp	r5, #1
 800df04:	d03c      	beq.n	800df80 <HAL_MDMA_Start_IT+0x8a>
 800df06:	2501      	movs	r5, #1
 800df08:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800df0c:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800df10:	2d01      	cmp	r5, #1
 800df12:	f04f 0500 	mov.w	r5, #0
 800df16:	d131      	bne.n	800df7c <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800df18:	2602      	movs	r6, #2
 800df1a:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800df1e:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800df20:	6805      	ldr	r5, [r0, #0]
 800df22:	68ee      	ldr	r6, [r5, #12]
 800df24:	f026 0601 	bic.w	r6, r6, #1
 800df28:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800df2a:	9e06      	ldr	r6, [sp, #24]
 800df2c:	9600      	str	r6, [sp, #0]
 800df2e:	f7ff fefd 	bl	800dd2c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800df32:	68eb      	ldr	r3, [r5, #12]
 800df34:	f043 0306 	orr.w	r3, r3, #6
 800df38:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800df3a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800df3c:	b11b      	cbz	r3, 800df46 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800df3e:	68eb      	ldr	r3, [r5, #12]
 800df40:	f043 0310 	orr.w	r3, r3, #16
 800df44:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800df46:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800df48:	b11b      	cbz	r3, 800df52 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800df4a:	68eb      	ldr	r3, [r5, #12]
 800df4c:	f043 0308 	orr.w	r3, r3, #8
 800df50:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800df52:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800df54:	b11b      	cbz	r3, 800df5e <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800df56:	68eb      	ldr	r3, [r5, #12]
 800df58:	f043 0320 	orr.w	r3, r3, #32
 800df5c:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800df5e:	68eb      	ldr	r3, [r5, #12]
 800df60:	f043 0301 	orr.w	r3, r3, #1
 800df64:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800df66:	6863      	ldr	r3, [r4, #4]
 800df68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df6c:	d103      	bne.n	800df76 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800df6e:	68eb      	ldr	r3, [r5, #12]
 800df70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df74:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800df76:	2000      	movs	r0, #0
}
 800df78:	b002      	add	sp, #8
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800df7c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800df80:	2002      	movs	r0, #2
 800df82:	e7f9      	b.n	800df78 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800df84:	2001      	movs	r0, #1
 800df86:	e7f7      	b.n	800df78 <HAL_MDMA_Start_IT+0x82>

0800df88 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800df88:	b128      	cbz	r0, 800df96 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800df8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800df8e:	2b02      	cmp	r3, #2
 800df90:	d003      	beq.n	800df9a <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800df92:	2380      	movs	r3, #128	@ 0x80
 800df94:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800df96:	2001      	movs	r0, #1
 800df98:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800df9a:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800df9c:	2304      	movs	r3, #4
 800df9e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800dfa2:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800dfa4:	68d3      	ldr	r3, [r2, #12]
 800dfa6:	f023 0301 	bic.w	r3, r3, #1
 800dfaa:	60d3      	str	r3, [r2, #12]
}
 800dfac:	4770      	bx	lr
	...

0800dfb0 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800dfb0:	2300      	movs	r3, #0
{
 800dfb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800dfb4:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800dfb6:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800dfba:	4b58      	ldr	r3, [pc, #352]	@ (800e11c <HAL_MDMA_IRQHandler+0x16c>)
{
 800dfbc:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800dfbe:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800dfc0:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800dfc2:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800dfc4:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800dfc6:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800dfca:	3a40      	subs	r2, #64	@ 0x40
 800dfcc:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800dfd0:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800dfd4:	4202      	tst	r2, r0
 800dfd6:	f000 809e 	beq.w	800e116 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	07d1      	lsls	r1, r2, #31
 800dfde:	d529      	bpl.n	800e034 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800dfe0:	68da      	ldr	r2, [r3, #12]
 800dfe2:	0792      	lsls	r2, r2, #30
 800dfe4:	d526      	bpl.n	800e034 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800dfe6:	68da      	ldr	r2, [r3, #12]
 800dfe8:	f022 0202 	bic.w	r2, r2, #2
 800dfec:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800dfee:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800dff0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800dff2:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800dff4:	bf54      	ite	pl
 800dff6:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800dffa:	f041 0102 	orrmi.w	r1, r1, #2
 800dffe:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800e000:	0591      	lsls	r1, r2, #22
 800e002:	d503      	bpl.n	800e00c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800e004:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800e006:	f041 0104 	orr.w	r1, r1, #4
 800e00a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800e00c:	05d0      	lsls	r0, r2, #23
 800e00e:	d503      	bpl.n	800e018 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800e010:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800e012:	f041 0108 	orr.w	r1, r1, #8
 800e016:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800e018:	0551      	lsls	r1, r2, #21
 800e01a:	d503      	bpl.n	800e024 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800e01c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800e01e:	f041 0110 	orr.w	r1, r1, #16
 800e022:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800e024:	0512      	lsls	r2, r2, #20
 800e026:	d503      	bpl.n	800e030 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800e028:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800e02a:	f042 0220 	orr.w	r2, r2, #32
 800e02e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800e030:	2201      	movs	r2, #1
 800e032:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	06d0      	lsls	r0, r2, #27
 800e038:	d508      	bpl.n	800e04c <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800e03a:	68da      	ldr	r2, [r3, #12]
 800e03c:	0691      	lsls	r1, r2, #26
 800e03e:	d505      	bpl.n	800e04c <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800e040:	2210      	movs	r2, #16
 800e042:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800e044:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e046:	b10b      	cbz	r3, 800e04c <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800e048:	4620      	mov	r0, r4
 800e04a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800e04c:	6823      	ldr	r3, [r4, #0]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	0712      	lsls	r2, r2, #28
 800e052:	d508      	bpl.n	800e066 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800e054:	68da      	ldr	r2, [r3, #12]
 800e056:	06d0      	lsls	r0, r2, #27
 800e058:	d505      	bpl.n	800e066 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800e05a:	2208      	movs	r2, #8
 800e05c:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800e05e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e060:	b10b      	cbz	r3, 800e066 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800e062:	4620      	mov	r0, r4
 800e064:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	0751      	lsls	r1, r2, #29
 800e06c:	d508      	bpl.n	800e080 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800e06e:	68da      	ldr	r2, [r3, #12]
 800e070:	0712      	lsls	r2, r2, #28
 800e072:	d505      	bpl.n	800e080 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800e074:	2204      	movs	r2, #4
 800e076:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e078:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e07a:	b10b      	cbz	r3, 800e080 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800e07c:	4620      	mov	r0, r4
 800e07e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	0790      	lsls	r0, r2, #30
 800e086:	d524      	bpl.n	800e0d2 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800e088:	68da      	ldr	r2, [r3, #12]
 800e08a:	0751      	lsls	r1, r2, #29
 800e08c:	d521      	bpl.n	800e0d2 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800e08e:	68da      	ldr	r2, [r3, #12]
 800e090:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800e094:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800e096:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800e09a:	2a04      	cmp	r2, #4
 800e09c:	f04f 0200 	mov.w	r2, #0
 800e0a0:	d10c      	bne.n	800e0bc <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800e0a2:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800e0a4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800e0a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800e0ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d031      	beq.n	800e116 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800e0b2:	4620      	mov	r0, r4
}
 800e0b4:	b003      	add	sp, #12
 800e0b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800e0ba:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800e0bc:	2102      	movs	r1, #2
 800e0be:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800e0c0:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800e0c2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800e0c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800e0ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e0cc:	b10b      	cbz	r3, 800e0d2 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800e0d2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800e0d4:	b1fb      	cbz	r3, 800e116 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800e0d6:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800e0da:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e0de:	2304      	movs	r3, #4
 800e0e0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	68da      	ldr	r2, [r3, #12]
 800e0e8:	f022 0201 	bic.w	r2, r2, #1
 800e0ec:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800e0ee:	9a01      	ldr	r2, [sp, #4]
 800e0f0:	3201      	adds	r2, #1
 800e0f2:	42aa      	cmp	r2, r5
 800e0f4:	9201      	str	r2, [sp, #4]
 800e0f6:	d802      	bhi.n	800e0fe <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800e0f8:	68da      	ldr	r2, [r3, #12]
 800e0fa:	07d2      	lsls	r2, r2, #31
 800e0fc:	d4f7      	bmi.n	800e0ee <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800e0fe:	2200      	movs	r2, #0
 800e100:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e108:	bf4c      	ite	mi
 800e10a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800e10c:	2301      	movpl	r3, #1
 800e10e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800e112:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e114:	e7cb      	b.n	800e0ae <HAL_MDMA_IRQHandler+0xfe>
}
 800e116:	b003      	add	sp, #12
 800e118:	bd30      	pop	{r4, r5, pc}
 800e11a:	bf00      	nop
 800e11c:	2400006c 	.word	0x2400006c

0800e120 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e120:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e122:	4d1c      	ldr	r5, [pc, #112]	@ (800e194 <HAL_PWREx_ConfigSupply+0x74>)
{
 800e124:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e126:	68eb      	ldr	r3, [r5, #12]
 800e128:	f003 0307 	and.w	r3, r3, #7
 800e12c:	2b06      	cmp	r3, #6
 800e12e:	d006      	beq.n	800e13e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e130:	68e8      	ldr	r0, [r5, #12]
 800e132:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800e136:	1b00      	subs	r0, r0, r4
 800e138:	bf18      	it	ne
 800e13a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800e13c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e13e:	68eb      	ldr	r3, [r5, #12]
 800e140:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800e144:	4303      	orrs	r3, r0
 800e146:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800e148:	f7fd f938 	bl	800b3bc <HAL_GetTick>
 800e14c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e14e:	686b      	ldr	r3, [r5, #4]
 800e150:	049a      	lsls	r2, r3, #18
 800e152:	d508      	bpl.n	800e166 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800e154:	f1a4 031d 	sub.w	r3, r4, #29
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d90c      	bls.n	800e176 <HAL_PWREx_ConfigSupply+0x56>
 800e15c:	3c2d      	subs	r4, #45	@ 0x2d
 800e15e:	2c01      	cmp	r4, #1
 800e160:	d909      	bls.n	800e176 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800e162:	2000      	movs	r0, #0
 800e164:	e7ea      	b.n	800e13c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e166:	f7fd f929 	bl	800b3bc <HAL_GetTick>
 800e16a:	1b80      	subs	r0, r0, r6
 800e16c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800e170:	d9ed      	bls.n	800e14e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800e172:	2001      	movs	r0, #1
 800e174:	e7e2      	b.n	800e13c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800e176:	f7fd f921 	bl	800b3bc <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e17a:	4d06      	ldr	r5, [pc, #24]	@ (800e194 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800e17c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e17e:	68eb      	ldr	r3, [r5, #12]
 800e180:	03db      	lsls	r3, r3, #15
 800e182:	d4ee      	bmi.n	800e162 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e184:	f7fd f91a 	bl	800b3bc <HAL_GetTick>
 800e188:	1b00      	subs	r0, r0, r4
 800e18a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800e18e:	d9f6      	bls.n	800e17e <HAL_PWREx_ConfigSupply+0x5e>
 800e190:	e7ef      	b.n	800e172 <HAL_PWREx_ConfigSupply+0x52>
 800e192:	bf00      	nop
 800e194:	58024800 	.word	0x58024800

0800e198 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e19c:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800e19e:	b136      	cbz	r6, 800e1ae <QSPI_Config+0x16>
 800e1a0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800e1a4:	d003      	beq.n	800e1ae <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e1a6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800e1a8:	6804      	ldr	r4, [r0, #0]
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e1ae:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e1b2:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e1b6:	f1ba 0f00 	cmp.w	sl, #0
 800e1ba:	d04c      	beq.n	800e256 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e1bc:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e1be:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e1c0:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800e1c4:	ea4a 0406 	orr.w	r4, sl, r6
 800e1c8:	680b      	ldr	r3, [r1, #0]
 800e1ca:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800e1ce:	ea44 0a02 	orr.w	sl, r4, r2
 800e1d2:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e1d6:	f1be 0f00 	cmp.w	lr, #0
 800e1da:	d024      	beq.n	800e226 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e1dc:	688e      	ldr	r6, [r1, #8]
 800e1de:	ea4a 040e 	orr.w	r4, sl, lr
 800e1e2:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e1e4:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e1e6:	b19f      	cbz	r7, 800e210 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e1e8:	433b      	orrs	r3, r7
 800e1ea:	4303      	orrs	r3, r0
 800e1ec:	68c8      	ldr	r0, [r1, #12]
 800e1ee:	ea43 0309 	orr.w	r3, r3, r9
 800e1f2:	ea43 0308 	orr.w	r3, r3, r8
 800e1f6:	4333      	orrs	r3, r6
 800e1f8:	4303      	orrs	r3, r0
 800e1fa:	ea43 030c 	orr.w	r3, r3, ip
 800e1fe:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e200:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e204:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e206:	d001      	beq.n	800e20c <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e208:	684b      	ldr	r3, [r1, #4]
 800e20a:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800e20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e210:	4303      	orrs	r3, r0
 800e212:	ea43 0309 	orr.w	r3, r3, r9
 800e216:	ea43 0308 	orr.w	r3, r3, r8
 800e21a:	4333      	orrs	r3, r6
 800e21c:	ea43 030c 	orr.w	r3, r3, ip
 800e220:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e222:	616b      	str	r3, [r5, #20]
 800e224:	e7f2      	b.n	800e20c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e226:	b167      	cbz	r7, 800e242 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e228:	433b      	orrs	r3, r7
 800e22a:	4303      	orrs	r3, r0
 800e22c:	68c8      	ldr	r0, [r1, #12]
 800e22e:	ea43 0309 	orr.w	r3, r3, r9
 800e232:	ea43 0308 	orr.w	r3, r3, r8
 800e236:	4303      	orrs	r3, r0
 800e238:	ea43 030c 	orr.w	r3, r3, ip
 800e23c:	ea43 030a 	orr.w	r3, r3, sl
 800e240:	e7de      	b.n	800e200 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e242:	4303      	orrs	r3, r0
 800e244:	ea43 0309 	orr.w	r3, r3, r9
 800e248:	ea43 0408 	orr.w	r4, r3, r8
 800e24c:	ea44 030c 	orr.w	r3, r4, ip
 800e250:	ea43 030a 	orr.w	r3, r3, sl
 800e254:	e7e5      	b.n	800e222 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e256:	f1be 0f00 	cmp.w	lr, #0
 800e25a:	d02c      	beq.n	800e2b6 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e25c:	ea46 050e 	orr.w	r5, r6, lr
 800e260:	688b      	ldr	r3, [r1, #8]
 800e262:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e264:	694e      	ldr	r6, [r1, #20]
 800e266:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e268:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e26a:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e26e:	04b6      	lsls	r6, r6, #18
 800e270:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e272:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e276:	b1a7      	cbz	r7, 800e2a2 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e278:	433b      	orrs	r3, r7
 800e27a:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e27c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e280:	ea43 0308 	orr.w	r3, r3, r8
 800e284:	ea43 030e 	orr.w	r3, r3, lr
 800e288:	ea43 030c 	orr.w	r3, r3, ip
 800e28c:	ea43 0300 	orr.w	r3, r3, r0
 800e290:	ea43 0306 	orr.w	r3, r3, r6
 800e294:	ea43 0305 	orr.w	r3, r3, r5
 800e298:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e29a:	d0b7      	beq.n	800e20c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e29c:	684b      	ldr	r3, [r1, #4]
 800e29e:	61a3      	str	r3, [r4, #24]
 800e2a0:	e7b4      	b.n	800e20c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2a2:	ea43 0308 	orr.w	r3, r3, r8
 800e2a6:	ea43 030e 	orr.w	r3, r3, lr
 800e2aa:	ea43 030c 	orr.w	r3, r3, ip
 800e2ae:	4333      	orrs	r3, r6
 800e2b0:	432b      	orrs	r3, r5
 800e2b2:	6163      	str	r3, [r4, #20]
 800e2b4:	e7aa      	b.n	800e20c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e2b6:	b1d7      	cbz	r7, 800e2ee <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2b8:	ea46 0307 	orr.w	r3, r6, r7
 800e2bc:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800e2be:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e2c0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2c4:	ea43 0302 	orr.w	r3, r3, r2
 800e2c8:	ea43 0304 	orr.w	r3, r3, r4
 800e2cc:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800e2ce:	ea43 0304 	orr.w	r3, r3, r4
 800e2d2:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800e2d4:	ea43 0304 	orr.w	r3, r3, r4
 800e2d8:	68cc      	ldr	r4, [r1, #12]
 800e2da:	ea43 0304 	orr.w	r3, r3, r4
 800e2de:	694c      	ldr	r4, [r1, #20]
 800e2e0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800e2e4:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e2e6:	d091      	beq.n	800e20c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e2e8:	684b      	ldr	r3, [r1, #4]
 800e2ea:	6183      	str	r3, [r0, #24]
 800e2ec:	e78e      	b.n	800e20c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800e2ee:	2e00      	cmp	r6, #0
 800e2f0:	d08c      	beq.n	800e20c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2f2:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800e2f4:	6800      	ldr	r0, [r0, #0]
 800e2f6:	4333      	orrs	r3, r6
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800e300:	4313      	orrs	r3, r2
 800e302:	694a      	ldr	r2, [r1, #20]
 800e304:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800e308:	6143      	str	r3, [r0, #20]
}
 800e30a:	e77f      	b.n	800e20c <QSPI_Config+0x74>

0800e30c <QSPI_WaitFlagStateUntilTimeout>:
{
 800e30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e310:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e314:	4604      	mov	r4, r0
 800e316:	460e      	mov	r6, r1
 800e318:	4615      	mov	r5, r2
 800e31a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e31c:	6822      	ldr	r2, [r4, #0]
 800e31e:	6893      	ldr	r3, [r2, #8]
 800e320:	4233      	tst	r3, r6
 800e322:	bf14      	ite	ne
 800e324:	2301      	movne	r3, #1
 800e326:	2300      	moveq	r3, #0
 800e328:	42ab      	cmp	r3, r5
 800e32a:	d101      	bne.n	800e330 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800e32c:	2000      	movs	r0, #0
 800e32e:	e012      	b.n	800e356 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800e330:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e334:	d0f3      	beq.n	800e31e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e336:	f7fd f841 	bl	800b3bc <HAL_GetTick>
 800e33a:	1bc0      	subs	r0, r0, r7
 800e33c:	4540      	cmp	r0, r8
 800e33e:	d802      	bhi.n	800e346 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800e340:	f1b8 0f00 	cmp.w	r8, #0
 800e344:	d1ea      	bne.n	800e31c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e346:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e348:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e34a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e34e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e350:	f043 0301 	orr.w	r3, r3, #1
 800e354:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800e356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e35c <HAL_QSPI_Init>:
{
 800e35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e35e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e360:	f7fd f82c 	bl	800b3bc <HAL_GetTick>
 800e364:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800e366:	2c00      	cmp	r4, #0
 800e368:	d03f      	beq.n	800e3ea <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e36a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800e36e:	b92b      	cbnz	r3, 800e37c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800e370:	4620      	mov	r0, r4
 800e372:	f7f3 fa6b 	bl	800184c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800e376:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e37a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e37c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e37e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e380:	68a3      	ldr	r3, [r4, #8]
 800e382:	680a      	ldr	r2, [r1, #0]
 800e384:	3b01      	subs	r3, #1
 800e386:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800e38a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e38e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e390:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e392:	2200      	movs	r2, #0
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	2120      	movs	r1, #32
 800e398:	462b      	mov	r3, r5
 800e39a:	f7ff ffb7 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800e39e:	bb10      	cbnz	r0, 800e3e6 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e3a0:	6822      	ldr	r2, [r4, #0]
 800e3a2:	69e5      	ldr	r5, [r4, #28]
 800e3a4:	68e3      	ldr	r3, [r4, #12]
 800e3a6:	6811      	ldr	r1, [r2, #0]
 800e3a8:	432b      	orrs	r3, r5
 800e3aa:	6a25      	ldr	r5, [r4, #32]
 800e3ac:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800e3b0:	432b      	orrs	r3, r5
 800e3b2:	6865      	ldr	r5, [r4, #4]
 800e3b4:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800e3b8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800e3bc:	430b      	orrs	r3, r1
 800e3be:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e3c0:	6855      	ldr	r5, [r2, #4]
 800e3c2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800e3c6:	430b      	orrs	r3, r1
 800e3c8:	6921      	ldr	r1, [r4, #16]
 800e3ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e3ce:	4908      	ldr	r1, [pc, #32]	@ (800e3f0 <HAL_QSPI_Init+0x94>)
 800e3d0:	4029      	ands	r1, r5
 800e3d2:	430b      	orrs	r3, r1
 800e3d4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800e3d6:	6813      	ldr	r3, [r2, #0]
 800e3d8:	f043 0301 	orr.w	r3, r3, #1
 800e3dc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800e3de:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e3e0:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800e3e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800e3e6:	b003      	add	sp, #12
 800e3e8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	e7fb      	b.n	800e3e6 <HAL_QSPI_Init+0x8a>
 800e3ee:	bf00      	nop
 800e3f0:	ffe0f8fe 	.word	0xffe0f8fe

0800e3f4 <HAL_QSPI_Command>:
{
 800e3f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	468a      	mov	sl, r1
 800e3fc:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800e3fe:	f7fc ffdd 	bl	800b3bc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e402:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800e406:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d036      	beq.n	800e47a <HAL_QSPI_Command+0x86>
 800e40c:	2301      	movs	r3, #1
 800e40e:	2602      	movs	r6, #2
 800e410:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e414:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800e418:	2b01      	cmp	r3, #1
 800e41a:	fa5f f983 	uxtb.w	r9, r3
 800e41e:	d128      	bne.n	800e472 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e420:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e422:	4603      	mov	r3, r0
 800e424:	2120      	movs	r1, #32
 800e426:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e428:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e42a:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e42e:	f8cd 8000 	str.w	r8, [sp]
 800e432:	f7ff ff6b 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800e436:	4605      	mov	r5, r0
 800e438:	b9a0      	cbnz	r0, 800e464 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e43a:	4602      	mov	r2, r0
 800e43c:	4651      	mov	r1, sl
 800e43e:	4620      	mov	r0, r4
 800e440:	f7ff feaa 	bl	800e198 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800e444:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800e448:	b953      	cbnz	r3, 800e460 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e44a:	463b      	mov	r3, r7
 800e44c:	464a      	mov	r2, r9
 800e44e:	4631      	mov	r1, r6
 800e450:	4620      	mov	r0, r4
 800e452:	f8cd 8000 	str.w	r8, [sp]
 800e456:	f7ff ff59 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800e45a:	b960      	cbnz	r0, 800e476 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800e460:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800e464:	2300      	movs	r3, #0
 800e466:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800e46a:	4628      	mov	r0, r5
 800e46c:	b002      	add	sp, #8
 800e46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800e472:	4635      	mov	r5, r6
 800e474:	e7f6      	b.n	800e464 <HAL_QSPI_Command+0x70>
 800e476:	4605      	mov	r5, r0
 800e478:	e7f4      	b.n	800e464 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800e47a:	2502      	movs	r5, #2
 800e47c:	e7f5      	b.n	800e46a <HAL_QSPI_Command+0x76>

0800e47e <HAL_QSPI_Transmit>:
{
 800e47e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e482:	4604      	mov	r4, r0
 800e484:	4688      	mov	r8, r1
 800e486:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800e488:	f7fc ff98 	bl	800b3bc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e48c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800e490:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e492:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800e494:	2b01      	cmp	r3, #1
 800e496:	d04c      	beq.n	800e532 <HAL_QSPI_Transmit+0xb4>
 800e498:	2301      	movs	r3, #1
 800e49a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e49e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	b2d8      	uxtb	r0, r3
 800e4a6:	d142      	bne.n	800e52e <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800e4ac:	f1b8 0f00 	cmp.w	r8, #0
 800e4b0:	d038      	beq.n	800e524 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e4b2:	2312      	movs	r3, #18
 800e4b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e4b8:	692b      	ldr	r3, [r5, #16]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e4be:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800e4c0:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e4c8:	696b      	ldr	r3, [r5, #20]
 800e4ca:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800e4ce:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800e4d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e4d2:	b99b      	cbnz	r3, 800e4fc <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e4d4:	4633      	mov	r3, r6
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	2102      	movs	r1, #2
 800e4da:	4620      	mov	r0, r4
 800e4dc:	9700      	str	r7, [sp, #0]
 800e4de:	f7ff ff15 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800e4e2:	b910      	cbnz	r0, 800e4ea <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e4e4:	6823      	ldr	r3, [r4, #0]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800e4f6:	b002      	add	sp, #8
 800e4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e4fc:	4633      	mov	r3, r6
 800e4fe:	2201      	movs	r2, #1
 800e500:	2104      	movs	r1, #4
 800e502:	4620      	mov	r0, r4
 800e504:	9700      	str	r7, [sp, #0]
 800e506:	f7ff ff01 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d1ed      	bne.n	800e4ea <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e50e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800e516:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e518:	3301      	adds	r3, #1
 800e51a:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800e51c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e51e:	3b01      	subs	r3, #1
 800e520:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e522:	e7d5      	b.n	800e4d0 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e524:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e526:	f043 0308 	orr.w	r3, r3, #8
 800e52a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800e52c:	e7e0      	b.n	800e4f0 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800e52e:	2002      	movs	r0, #2
 800e530:	e7de      	b.n	800e4f0 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800e532:	2002      	movs	r0, #2
 800e534:	e7df      	b.n	800e4f6 <HAL_QSPI_Transmit+0x78>

0800e536 <HAL_QSPI_Receive>:
{
 800e536:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e53a:	4604      	mov	r4, r0
 800e53c:	4617      	mov	r7, r2
 800e53e:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800e540:	f7fc ff3c 	bl	800b3bc <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e544:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800e546:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e548:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800e54a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d04f      	beq.n	800e5f2 <HAL_QSPI_Receive+0xbc>
 800e552:	2301      	movs	r3, #1
 800e554:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e558:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	b2d8      	uxtb	r0, r3
 800e560:	d145      	bne.n	800e5ee <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e562:	2300      	movs	r3, #0
 800e564:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800e566:	f1b8 0f00 	cmp.w	r8, #0
 800e56a:	d03b      	beq.n	800e5e4 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e56c:	2322      	movs	r3, #34	@ 0x22
 800e56e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e572:	692b      	ldr	r3, [r5, #16]
 800e574:	3301      	adds	r3, #1
 800e576:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e578:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800e57a:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e57e:	3301      	adds	r3, #1
 800e580:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e582:	6969      	ldr	r1, [r5, #20]
 800e584:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800e588:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800e58c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e58e:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800e590:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e592:	b99b      	cbnz	r3, 800e5bc <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e594:	4633      	mov	r3, r6
 800e596:	2201      	movs	r2, #1
 800e598:	2102      	movs	r1, #2
 800e59a:	4620      	mov	r0, r4
 800e59c:	9700      	str	r7, [sp, #0]
 800e59e:	f7ff feb5 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800e5a2:	b910      	cbnz	r0, 800e5aa <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e5a4:	6823      	ldr	r3, [r4, #0]
 800e5a6:	2202      	movs	r2, #2
 800e5a8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800e5b6:	b002      	add	sp, #8
 800e5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e5bc:	4633      	mov	r3, r6
 800e5be:	2201      	movs	r2, #1
 800e5c0:	2106      	movs	r1, #6
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	9700      	str	r7, [sp, #0]
 800e5c6:	f7ff fea1 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d1ed      	bne.n	800e5aa <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e5ce:	f895 2020 	ldrb.w	r2, [r5, #32]
 800e5d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e5d4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800e5d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e5d8:	3301      	adds	r3, #1
 800e5da:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800e5dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e5e2:	e7d5      	b.n	800e590 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e5e4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e5e6:	f043 0308 	orr.w	r3, r3, #8
 800e5ea:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800e5ec:	e7e0      	b.n	800e5b0 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800e5ee:	2002      	movs	r0, #2
 800e5f0:	e7de      	b.n	800e5b0 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800e5f2:	2002      	movs	r0, #2
 800e5f4:	e7df      	b.n	800e5b6 <HAL_QSPI_Receive+0x80>

0800e5f6 <HAL_QSPI_AutoPolling>:
{
 800e5f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	461f      	mov	r7, r3
 800e5fe:	4689      	mov	r9, r1
 800e600:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800e602:	f7fc fedb 	bl	800b3bc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e606:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800e60a:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d041      	beq.n	800e694 <HAL_QSPI_AutoPolling+0x9e>
 800e610:	2301      	movs	r3, #1
 800e612:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e616:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	fa5f f883 	uxtb.w	r8, r3
 800e620:	d136      	bne.n	800e690 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e622:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e624:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e626:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e628:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e62a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e62e:	4603      	mov	r3, r0
 800e630:	9700      	str	r7, [sp, #0]
 800e632:	4620      	mov	r0, r4
 800e634:	f7ff fe6a 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800e638:	bb20      	cbnz	r0, 800e684 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e63a:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e63c:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e63e:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e640:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e642:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e644:	686b      	ldr	r3, [r5, #4]
 800e646:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e648:	68ab      	ldr	r3, [r5, #8]
 800e64a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e64c:	6813      	ldr	r3, [r2, #0]
 800e64e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800e652:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e654:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e656:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e65a:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e65c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800e660:	68eb      	ldr	r3, [r5, #12]
 800e662:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e666:	f7ff fd97 	bl	800e198 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800e66a:	4633      	mov	r3, r6
 800e66c:	4642      	mov	r2, r8
 800e66e:	2108      	movs	r1, #8
 800e670:	4620      	mov	r0, r4
 800e672:	9700      	str	r7, [sp, #0]
 800e674:	f7ff fe4a 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800e678:	b920      	cbnz	r0, 800e684 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800e67a:	6823      	ldr	r3, [r4, #0]
 800e67c:	2208      	movs	r2, #8
 800e67e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800e680:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800e684:	2300      	movs	r3, #0
 800e686:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800e68a:	b003      	add	sp, #12
 800e68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800e690:	2002      	movs	r0, #2
 800e692:	e7f7      	b.n	800e684 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800e694:	2002      	movs	r0, #2
 800e696:	e7f8      	b.n	800e68a <HAL_QSPI_AutoPolling+0x94>

0800e698 <HAL_QSPI_MemoryMapped>:
{
 800e698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e69a:	4604      	mov	r4, r0
 800e69c:	4616      	mov	r6, r2
 800e69e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800e6a0:	f7fc fe8c 	bl	800b3bc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e6a4:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800e6a8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800e6aa:	2a01      	cmp	r2, #1
 800e6ac:	d033      	beq.n	800e716 <HAL_QSPI_MemoryMapped+0x7e>
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e6b4:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800e6b8:	2a01      	cmp	r2, #1
 800e6ba:	d12a      	bne.n	800e712 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e6bc:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800e6be:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e6c0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e6c2:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800e6c4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e6c8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e6ca:	9100      	str	r1, [sp, #0]
 800e6cc:	2120      	movs	r1, #32
 800e6ce:	f7ff fe1d 	bl	800e30c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	b9b8      	cbnz	r0, 800e706 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	6872      	ldr	r2, [r6, #4]
 800e6da:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800e6dc:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800e6de:	f020 0008 	bic.w	r0, r0, #8
 800e6e2:	ea40 0002 	orr.w	r0, r0, r2
 800e6e6:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800e6e8:	d107      	bne.n	800e6fa <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800e6ea:	6832      	ldr	r2, [r6, #0]
 800e6ec:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800e6ee:	2210      	movs	r2, #16
 800e6f0:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800e6f8:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800e6fa:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800e6fe:	4639      	mov	r1, r7
 800e700:	4620      	mov	r0, r4
 800e702:	f7ff fd49 	bl	800e198 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800e706:	2300      	movs	r3, #0
 800e708:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800e70c:	4628      	mov	r0, r5
 800e70e:	b003      	add	sp, #12
 800e710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800e712:	2502      	movs	r5, #2
 800e714:	e7f7      	b.n	800e706 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800e716:	2502      	movs	r5, #2
 800e718:	e7f8      	b.n	800e70c <HAL_QSPI_MemoryMapped+0x74>
	...

0800e71c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e71e:	4604      	mov	r4, r0
 800e720:	2800      	cmp	r0, #0
 800e722:	d074      	beq.n	800e80e <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e724:	6803      	ldr	r3, [r0, #0]
 800e726:	07d8      	lsls	r0, r3, #31
 800e728:	d45e      	bmi.n	800e7e8 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	0799      	lsls	r1, r3, #30
 800e72e:	f100 80ad 	bmi.w	800e88c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	06da      	lsls	r2, r3, #27
 800e736:	d527      	bpl.n	800e788 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e738:	4a9c      	ldr	r2, [pc, #624]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
 800e73a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e73c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e73e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e742:	2b08      	cmp	r3, #8
 800e744:	d007      	beq.n	800e756 <HAL_RCC_OscConfig+0x3a>
 800e746:	2b18      	cmp	r3, #24
 800e748:	f040 8103 	bne.w	800e952 <HAL_RCC_OscConfig+0x236>
 800e74c:	f001 0303 	and.w	r3, r1, #3
 800e750:	2b01      	cmp	r3, #1
 800e752:	f040 80fe 	bne.w	800e952 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e756:	6813      	ldr	r3, [r2, #0]
 800e758:	05db      	lsls	r3, r3, #23
 800e75a:	d502      	bpl.n	800e762 <HAL_RCC_OscConfig+0x46>
 800e75c:	69e3      	ldr	r3, [r4, #28]
 800e75e:	2b80      	cmp	r3, #128	@ 0x80
 800e760:	d155      	bne.n	800e80e <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e762:	f7fc fe43 	bl	800b3ec <HAL_GetREVID>
 800e766:	f241 0303 	movw	r3, #4099	@ 0x1003
 800e76a:	6a21      	ldr	r1, [r4, #32]
 800e76c:	4298      	cmp	r0, r3
 800e76e:	4b8f      	ldr	r3, [pc, #572]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
 800e770:	f200 80e8 	bhi.w	800e944 <HAL_RCC_OscConfig+0x228>
 800e774:	685a      	ldr	r2, [r3, #4]
 800e776:	2920      	cmp	r1, #32
 800e778:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800e77c:	bf0c      	ite	eq
 800e77e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800e782:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800e786:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	0719      	lsls	r1, r3, #28
 800e78c:	f100 8123 	bmi.w	800e9d6 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	069a      	lsls	r2, r3, #26
 800e794:	f100 8144 	bmi.w	800ea20 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	075d      	lsls	r5, r3, #29
 800e79c:	d51e      	bpl.n	800e7dc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e79e:	4d84      	ldr	r5, [pc, #528]	@ (800e9b0 <HAL_RCC_OscConfig+0x294>)
 800e7a0:	682b      	ldr	r3, [r5, #0]
 800e7a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e7a6:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e7a8:	f7fc fe08 	bl	800b3bc <HAL_GetTick>
 800e7ac:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e7ae:	682b      	ldr	r3, [r5, #0]
 800e7b0:	05da      	lsls	r2, r3, #23
 800e7b2:	f140 815a 	bpl.w	800ea6a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e7b6:	68a3      	ldr	r3, [r4, #8]
 800e7b8:	4d7c      	ldr	r5, [pc, #496]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	f040 815c 	bne.w	800ea78 <HAL_RCC_OscConfig+0x35c>
 800e7c0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e7c2:	f043 0301 	orr.w	r3, r3, #1
 800e7c6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e7c8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800e7cc:	f7fc fdf6 	bl	800b3bc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e7d0:	4e76      	ldr	r6, [pc, #472]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800e7d2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e7d4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800e7d6:	079b      	lsls	r3, r3, #30
 800e7d8:	f140 8174 	bpl.w	800eac4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e7dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e7de:	2900      	cmp	r1, #0
 800e7e0:	f040 8177 	bne.w	800ead2 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	e02b      	b.n	800e840 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e7e8:	4a70      	ldr	r2, [pc, #448]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
 800e7ea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e7ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e7ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e7f2:	2b10      	cmp	r3, #16
 800e7f4:	d005      	beq.n	800e802 <HAL_RCC_OscConfig+0xe6>
 800e7f6:	2b18      	cmp	r3, #24
 800e7f8:	d10b      	bne.n	800e812 <HAL_RCC_OscConfig+0xf6>
 800e7fa:	f001 0303 	and.w	r3, r1, #3
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d107      	bne.n	800e812 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e802:	6813      	ldr	r3, [r2, #0]
 800e804:	039a      	lsls	r2, r3, #14
 800e806:	d590      	bpl.n	800e72a <HAL_RCC_OscConfig+0xe>
 800e808:	6863      	ldr	r3, [r4, #4]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d18d      	bne.n	800e72a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800e80e:	2001      	movs	r0, #1
 800e810:	e016      	b.n	800e840 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e812:	6863      	ldr	r3, [r4, #4]
 800e814:	4d65      	ldr	r5, [pc, #404]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
 800e816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e81a:	d112      	bne.n	800e842 <HAL_RCC_OscConfig+0x126>
 800e81c:	682b      	ldr	r3, [r5, #0]
 800e81e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e822:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e824:	f7fc fdca 	bl	800b3bc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e828:	4e60      	ldr	r6, [pc, #384]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800e82a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e82c:	6833      	ldr	r3, [r6, #0]
 800e82e:	039b      	lsls	r3, r3, #14
 800e830:	f53f af7b 	bmi.w	800e72a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e834:	f7fc fdc2 	bl	800b3bc <HAL_GetTick>
 800e838:	1b40      	subs	r0, r0, r5
 800e83a:	2864      	cmp	r0, #100	@ 0x64
 800e83c:	d9f6      	bls.n	800e82c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800e83e:	2003      	movs	r0, #3
}
 800e840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e842:	b9a3      	cbnz	r3, 800e86e <HAL_RCC_OscConfig+0x152>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e84a:	602b      	str	r3, [r5, #0]
 800e84c:	682b      	ldr	r3, [r5, #0]
 800e84e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e852:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e854:	f7fc fdb2 	bl	800b3bc <HAL_GetTick>
 800e858:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e85a:	682b      	ldr	r3, [r5, #0]
 800e85c:	039f      	lsls	r7, r3, #14
 800e85e:	f57f af64 	bpl.w	800e72a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e862:	f7fc fdab 	bl	800b3bc <HAL_GetTick>
 800e866:	1b80      	subs	r0, r0, r6
 800e868:	2864      	cmp	r0, #100	@ 0x64
 800e86a:	d9f6      	bls.n	800e85a <HAL_RCC_OscConfig+0x13e>
 800e86c:	e7e7      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e86e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e872:	682b      	ldr	r3, [r5, #0]
 800e874:	d103      	bne.n	800e87e <HAL_RCC_OscConfig+0x162>
 800e876:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e87a:	602b      	str	r3, [r5, #0]
 800e87c:	e7ce      	b.n	800e81c <HAL_RCC_OscConfig+0x100>
 800e87e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e882:	602b      	str	r3, [r5, #0]
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e88a:	e7ca      	b.n	800e822 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e88c:	4947      	ldr	r1, [pc, #284]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
 800e88e:	68e2      	ldr	r2, [r4, #12]
 800e890:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e892:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e894:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800e898:	d003      	beq.n	800e8a2 <HAL_RCC_OscConfig+0x186>
 800e89a:	2b18      	cmp	r3, #24
 800e89c:	d12a      	bne.n	800e8f4 <HAL_RCC_OscConfig+0x1d8>
 800e89e:	0780      	lsls	r0, r0, #30
 800e8a0:	d128      	bne.n	800e8f4 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e8a2:	680b      	ldr	r3, [r1, #0]
 800e8a4:	075b      	lsls	r3, r3, #29
 800e8a6:	d501      	bpl.n	800e8ac <HAL_RCC_OscConfig+0x190>
 800e8a8:	2a00      	cmp	r2, #0
 800e8aa:	d0b0      	beq.n	800e80e <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e8ac:	4d3f      	ldr	r5, [pc, #252]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
 800e8ae:	682b      	ldr	r3, [r5, #0]
 800e8b0:	f023 0319 	bic.w	r3, r3, #25
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e8b8:	f7fc fd80 	bl	800b3bc <HAL_GetTick>
 800e8bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e8be:	682b      	ldr	r3, [r5, #0]
 800e8c0:	075f      	lsls	r7, r3, #29
 800e8c2:	d511      	bpl.n	800e8e8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8c4:	f7fc fd92 	bl	800b3ec <HAL_GetREVID>
 800e8c8:	f241 0303 	movw	r3, #4099	@ 0x1003
 800e8cc:	6922      	ldr	r2, [r4, #16]
 800e8ce:	4298      	cmp	r0, r3
 800e8d0:	686b      	ldr	r3, [r5, #4]
 800e8d2:	d822      	bhi.n	800e91a <HAL_RCC_OscConfig+0x1fe>
 800e8d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e8d8:	2a40      	cmp	r2, #64	@ 0x40
 800e8da:	bf0c      	ite	eq
 800e8dc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800e8e0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800e8e4:	606b      	str	r3, [r5, #4]
 800e8e6:	e724      	b.n	800e732 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e8e8:	f7fc fd68 	bl	800b3bc <HAL_GetTick>
 800e8ec:	1b80      	subs	r0, r0, r6
 800e8ee:	2802      	cmp	r0, #2
 800e8f0:	d9e5      	bls.n	800e8be <HAL_RCC_OscConfig+0x1a2>
 800e8f2:	e7a4      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e8f4:	4d2d      	ldr	r5, [pc, #180]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e8f6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e8f8:	b1a2      	cbz	r2, 800e924 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e8fa:	f023 0319 	bic.w	r3, r3, #25
 800e8fe:	4313      	orrs	r3, r2
 800e900:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e902:	f7fc fd5b 	bl	800b3bc <HAL_GetTick>
 800e906:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	0758      	lsls	r0, r3, #29
 800e90c:	d4da      	bmi.n	800e8c4 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e90e:	f7fc fd55 	bl	800b3bc <HAL_GetTick>
 800e912:	1b80      	subs	r0, r0, r6
 800e914:	2802      	cmp	r0, #2
 800e916:	d9f7      	bls.n	800e908 <HAL_RCC_OscConfig+0x1ec>
 800e918:	e791      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e91a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800e91e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e922:	e7df      	b.n	800e8e4 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800e924:	f023 0301 	bic.w	r3, r3, #1
 800e928:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e92a:	f7fc fd47 	bl	800b3bc <HAL_GetTick>
 800e92e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	0759      	lsls	r1, r3, #29
 800e934:	f57f aefd 	bpl.w	800e732 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e938:	f7fc fd40 	bl	800b3bc <HAL_GetTick>
 800e93c:	1b80      	subs	r0, r0, r6
 800e93e:	2802      	cmp	r0, #2
 800e940:	d9f6      	bls.n	800e930 <HAL_RCC_OscConfig+0x214>
 800e942:	e77c      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e944:	68da      	ldr	r2, [r3, #12]
 800e946:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800e94a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e94e:	60da      	str	r2, [r3, #12]
 800e950:	e71a      	b.n	800e788 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e952:	69e3      	ldr	r3, [r4, #28]
 800e954:	4d15      	ldr	r5, [pc, #84]	@ (800e9ac <HAL_RCC_OscConfig+0x290>)
 800e956:	b36b      	cbz	r3, 800e9b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800e958:	682b      	ldr	r3, [r5, #0]
 800e95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e95e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e960:	f7fc fd2c 	bl	800b3bc <HAL_GetTick>
 800e964:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e966:	682b      	ldr	r3, [r5, #0]
 800e968:	05df      	lsls	r7, r3, #23
 800e96a:	d511      	bpl.n	800e990 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e96c:	f7fc fd3e 	bl	800b3ec <HAL_GetREVID>
 800e970:	f241 0303 	movw	r3, #4099	@ 0x1003
 800e974:	6a22      	ldr	r2, [r4, #32]
 800e976:	4298      	cmp	r0, r3
 800e978:	d810      	bhi.n	800e99c <HAL_RCC_OscConfig+0x280>
 800e97a:	686b      	ldr	r3, [r5, #4]
 800e97c:	2a20      	cmp	r2, #32
 800e97e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800e982:	bf0c      	ite	eq
 800e984:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800e988:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800e98c:	606b      	str	r3, [r5, #4]
 800e98e:	e6fb      	b.n	800e788 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e990:	f7fc fd14 	bl	800b3bc <HAL_GetTick>
 800e994:	1b80      	subs	r0, r0, r6
 800e996:	2802      	cmp	r0, #2
 800e998:	d9e5      	bls.n	800e966 <HAL_RCC_OscConfig+0x24a>
 800e99a:	e750      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e99c:	68eb      	ldr	r3, [r5, #12]
 800e99e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800e9a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e9a6:	60eb      	str	r3, [r5, #12]
 800e9a8:	e6ee      	b.n	800e788 <HAL_RCC_OscConfig+0x6c>
 800e9aa:	bf00      	nop
 800e9ac:	58024400 	.word	0x58024400
 800e9b0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800e9b4:	682b      	ldr	r3, [r5, #0]
 800e9b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e9bc:	f7fc fcfe 	bl	800b3bc <HAL_GetTick>
 800e9c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e9c2:	682b      	ldr	r3, [r5, #0]
 800e9c4:	05d8      	lsls	r0, r3, #23
 800e9c6:	f57f aedf 	bpl.w	800e788 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e9ca:	f7fc fcf7 	bl	800b3bc <HAL_GetTick>
 800e9ce:	1b80      	subs	r0, r0, r6
 800e9d0:	2802      	cmp	r0, #2
 800e9d2:	d9f6      	bls.n	800e9c2 <HAL_RCC_OscConfig+0x2a6>
 800e9d4:	e733      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e9d6:	6963      	ldr	r3, [r4, #20]
 800e9d8:	4da5      	ldr	r5, [pc, #660]	@ (800ec70 <HAL_RCC_OscConfig+0x554>)
 800e9da:	b183      	cbz	r3, 800e9fe <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800e9dc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800e9de:	f043 0301 	orr.w	r3, r3, #1
 800e9e2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800e9e4:	f7fc fcea 	bl	800b3bc <HAL_GetTick>
 800e9e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e9ea:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800e9ec:	079b      	lsls	r3, r3, #30
 800e9ee:	f53f aecf 	bmi.w	800e790 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e9f2:	f7fc fce3 	bl	800b3bc <HAL_GetTick>
 800e9f6:	1b80      	subs	r0, r0, r6
 800e9f8:	2802      	cmp	r0, #2
 800e9fa:	d9f6      	bls.n	800e9ea <HAL_RCC_OscConfig+0x2ce>
 800e9fc:	e71f      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800e9fe:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ea00:	f023 0301 	bic.w	r3, r3, #1
 800ea04:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800ea06:	f7fc fcd9 	bl	800b3bc <HAL_GetTick>
 800ea0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ea0c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ea0e:	079f      	lsls	r7, r3, #30
 800ea10:	f57f aebe 	bpl.w	800e790 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ea14:	f7fc fcd2 	bl	800b3bc <HAL_GetTick>
 800ea18:	1b80      	subs	r0, r0, r6
 800ea1a:	2802      	cmp	r0, #2
 800ea1c:	d9f6      	bls.n	800ea0c <HAL_RCC_OscConfig+0x2f0>
 800ea1e:	e70e      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ea20:	69a3      	ldr	r3, [r4, #24]
 800ea22:	4d93      	ldr	r5, [pc, #588]	@ (800ec70 <HAL_RCC_OscConfig+0x554>)
 800ea24:	b183      	cbz	r3, 800ea48 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800ea26:	682b      	ldr	r3, [r5, #0]
 800ea28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ea2c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ea2e:	f7fc fcc5 	bl	800b3bc <HAL_GetTick>
 800ea32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ea34:	682b      	ldr	r3, [r5, #0]
 800ea36:	0498      	lsls	r0, r3, #18
 800ea38:	f53f aeae 	bmi.w	800e798 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ea3c:	f7fc fcbe 	bl	800b3bc <HAL_GetTick>
 800ea40:	1b80      	subs	r0, r0, r6
 800ea42:	2802      	cmp	r0, #2
 800ea44:	d9f6      	bls.n	800ea34 <HAL_RCC_OscConfig+0x318>
 800ea46:	e6fa      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800ea48:	682b      	ldr	r3, [r5, #0]
 800ea4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea4e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ea50:	f7fc fcb4 	bl	800b3bc <HAL_GetTick>
 800ea54:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ea56:	682b      	ldr	r3, [r5, #0]
 800ea58:	0499      	lsls	r1, r3, #18
 800ea5a:	f57f ae9d 	bpl.w	800e798 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ea5e:	f7fc fcad 	bl	800b3bc <HAL_GetTick>
 800ea62:	1b80      	subs	r0, r0, r6
 800ea64:	2802      	cmp	r0, #2
 800ea66:	d9f6      	bls.n	800ea56 <HAL_RCC_OscConfig+0x33a>
 800ea68:	e6e9      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea6a:	f7fc fca7 	bl	800b3bc <HAL_GetTick>
 800ea6e:	1b80      	subs	r0, r0, r6
 800ea70:	2864      	cmp	r0, #100	@ 0x64
 800ea72:	f67f ae9c 	bls.w	800e7ae <HAL_RCC_OscConfig+0x92>
 800ea76:	e6e2      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea78:	b9b3      	cbnz	r3, 800eaa8 <HAL_RCC_OscConfig+0x38c>
 800ea7a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea7c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea80:	f023 0301 	bic.w	r3, r3, #1
 800ea84:	672b      	str	r3, [r5, #112]	@ 0x70
 800ea86:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ea88:	f023 0304 	bic.w	r3, r3, #4
 800ea8c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800ea8e:	f7fc fc95 	bl	800b3bc <HAL_GetTick>
 800ea92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ea94:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ea96:	0798      	lsls	r0, r3, #30
 800ea98:	f57f aea0 	bpl.w	800e7dc <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea9c:	f7fc fc8e 	bl	800b3bc <HAL_GetTick>
 800eaa0:	1b80      	subs	r0, r0, r6
 800eaa2:	42b8      	cmp	r0, r7
 800eaa4:	d9f6      	bls.n	800ea94 <HAL_RCC_OscConfig+0x378>
 800eaa6:	e6ca      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eaa8:	2b05      	cmp	r3, #5
 800eaaa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800eaac:	d103      	bne.n	800eab6 <HAL_RCC_OscConfig+0x39a>
 800eaae:	f043 0304 	orr.w	r3, r3, #4
 800eab2:	672b      	str	r3, [r5, #112]	@ 0x70
 800eab4:	e684      	b.n	800e7c0 <HAL_RCC_OscConfig+0xa4>
 800eab6:	f023 0301 	bic.w	r3, r3, #1
 800eaba:	672b      	str	r3, [r5, #112]	@ 0x70
 800eabc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800eabe:	f023 0304 	bic.w	r3, r3, #4
 800eac2:	e680      	b.n	800e7c6 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eac4:	f7fc fc7a 	bl	800b3bc <HAL_GetTick>
 800eac8:	1b40      	subs	r0, r0, r5
 800eaca:	42b8      	cmp	r0, r7
 800eacc:	f67f ae82 	bls.w	800e7d4 <HAL_RCC_OscConfig+0xb8>
 800ead0:	e6b5      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ead2:	4d67      	ldr	r5, [pc, #412]	@ (800ec70 <HAL_RCC_OscConfig+0x554>)
 800ead4:	692b      	ldr	r3, [r5, #16]
 800ead6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eada:	2b18      	cmp	r3, #24
 800eadc:	d07a      	beq.n	800ebd4 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800eade:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eae0:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800eae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eae6:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eae8:	d167      	bne.n	800ebba <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800eaea:	f7fc fc67 	bl	800b3bc <HAL_GetTick>
 800eaee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eaf0:	682b      	ldr	r3, [r5, #0]
 800eaf2:	0199      	lsls	r1, r3, #6
 800eaf4:	d45b      	bmi.n	800ebae <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eaf6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800eaf8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800eafa:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800eafe:	f023 0303 	bic.w	r3, r3, #3
 800eb02:	4313      	orrs	r3, r2
 800eb04:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eb06:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800eb0a:	62ab      	str	r3, [r5, #40]	@ 0x28
 800eb0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb0e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800eb10:	3b01      	subs	r3, #1
 800eb12:	3a01      	subs	r2, #1
 800eb14:	025b      	lsls	r3, r3, #9
 800eb16:	0412      	lsls	r2, r2, #16
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800eb22:	3a01      	subs	r2, #1
 800eb24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800eb2c:	3a01      	subs	r2, #1
 800eb2e:	0612      	lsls	r2, r2, #24
 800eb30:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800eb34:	4313      	orrs	r3, r2
 800eb36:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800eb38:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800eb3a:	f023 0301 	bic.w	r3, r3, #1
 800eb3e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800eb40:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800eb42:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800eb44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eb48:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800eb4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800eb50:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800eb52:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800eb54:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800eb56:	f023 030c 	bic.w	r3, r3, #12
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800eb5e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800eb60:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800eb62:	f023 0302 	bic.w	r3, r3, #2
 800eb66:	4313      	orrs	r3, r2
 800eb68:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800eb6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800eb6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb70:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb72:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800eb74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb78:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800eb7a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800eb7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800eb80:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800eb82:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800eb84:	f043 0301 	orr.w	r3, r3, #1
 800eb88:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800eb8a:	682b      	ldr	r3, [r5, #0]
 800eb8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eb90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800eb92:	f7fc fc13 	bl	800b3bc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eb96:	4d36      	ldr	r5, [pc, #216]	@ (800ec70 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800eb98:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eb9a:	682b      	ldr	r3, [r5, #0]
 800eb9c:	019a      	lsls	r2, r3, #6
 800eb9e:	f53f ae21 	bmi.w	800e7e4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eba2:	f7fc fc0b 	bl	800b3bc <HAL_GetTick>
 800eba6:	1b00      	subs	r0, r0, r4
 800eba8:	2802      	cmp	r0, #2
 800ebaa:	d9f6      	bls.n	800eb9a <HAL_RCC_OscConfig+0x47e>
 800ebac:	e647      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebae:	f7fc fc05 	bl	800b3bc <HAL_GetTick>
 800ebb2:	1b80      	subs	r0, r0, r6
 800ebb4:	2802      	cmp	r0, #2
 800ebb6:	d99b      	bls.n	800eaf0 <HAL_RCC_OscConfig+0x3d4>
 800ebb8:	e641      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800ebba:	f7fc fbff 	bl	800b3bc <HAL_GetTick>
 800ebbe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	019b      	lsls	r3, r3, #6
 800ebc4:	f57f ae0e 	bpl.w	800e7e4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebc8:	f7fc fbf8 	bl	800b3bc <HAL_GetTick>
 800ebcc:	1b00      	subs	r0, r0, r4
 800ebce:	2802      	cmp	r0, #2
 800ebd0:	d9f6      	bls.n	800ebc0 <HAL_RCC_OscConfig+0x4a4>
 800ebd2:	e634      	b.n	800e83e <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ebd4:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ebd6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ebd8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ebda:	f43f ae18 	beq.w	800e80e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebde:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ebe2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ebe4:	4281      	cmp	r1, r0
 800ebe6:	f47f ae12 	bne.w	800e80e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ebea:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ebf0:	428a      	cmp	r2, r1
 800ebf2:	f47f ae0c 	bne.w	800e80e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ebf6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ebf8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800ebfc:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ebfe:	4291      	cmp	r1, r2
 800ec00:	f47f ae05 	bne.w	800e80e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ec04:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ec06:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800ec0a:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ec0c:	4291      	cmp	r1, r2
 800ec0e:	f47f adfe 	bne.w	800e80e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ec12:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ec14:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800ec18:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ec1a:	4291      	cmp	r1, r2
 800ec1c:	f47f adf7 	bne.w	800e80e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ec20:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ec22:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ec26:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	f47f adf0 	bne.w	800e80e <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ec2e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ec30:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ec32:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ec36:	429a      	cmp	r2, r3
 800ec38:	f43f add4 	beq.w	800e7e4 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800ec3c:	4d0c      	ldr	r5, [pc, #48]	@ (800ec70 <HAL_RCC_OscConfig+0x554>)
 800ec3e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ec40:	f023 0301 	bic.w	r3, r3, #1
 800ec44:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800ec46:	f7fc fbb9 	bl	800b3bc <HAL_GetTick>
 800ec4a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ec4c:	f7fc fbb6 	bl	800b3bc <HAL_GetTick>
 800ec50:	42b0      	cmp	r0, r6
 800ec52:	d0fb      	beq.n	800ec4c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ec54:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ec56:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800ec58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ec5c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ec60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ec64:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800ec66:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ec68:	f043 0301 	orr.w	r3, r3, #1
 800ec6c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800ec6e:	e5b9      	b.n	800e7e4 <HAL_RCC_OscConfig+0xc8>
 800ec70:	58024400 	.word	0x58024400

0800ec74 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	4c23      	ldr	r4, [pc, #140]	@ (800ed04 <HAL_RCC_MCOConfig+0x90>)
 800ec78:	b088      	sub	sp, #32
 800ec7a:	460e      	mov	r6, r1
 800ec7c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800ec7e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800ec82:	b9f8      	cbnz	r0, 800ecc4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800ec84:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec88:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ec8c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800ec8e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800ec92:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ec96:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800ec98:	f003 0301 	and.w	r3, r3, #1
 800ec9c:	9301      	str	r3, [sp, #4]
 800ec9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eca0:	2302      	movs	r3, #2
 800eca2:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eca6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eca8:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ecac:	4816      	ldr	r0, [pc, #88]	@ (800ed08 <HAL_RCC_MCOConfig+0x94>)
 800ecae:	f7fd fa0b 	bl	800c0c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800ecb2:	6923      	ldr	r3, [r4, #16]
 800ecb4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800ecb8:	ea43 0106 	orr.w	r1, r3, r6
 800ecbc:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800ecbe:	6121      	str	r1, [r4, #16]
  }
}
 800ecc0:	b008      	add	sp, #32
 800ecc2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800ecc4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eccc:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ecce:	480f      	ldr	r0, [pc, #60]	@ (800ed0c <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800ecd0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800ecd4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800ecd8:	f003 0304 	and.w	r3, r3, #4
 800ecdc:	9302      	str	r3, [sp, #8]
 800ecde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ece0:	2302      	movs	r3, #2
 800ece2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ece6:	2300      	movs	r3, #0
 800ece8:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ecec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ecee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ecf0:	f7fd f9ea 	bl	800c0c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800ecf4:	6923      	ldr	r3, [r4, #16]
 800ecf6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800ecfa:	ea43 0106 	orr.w	r1, r3, r6
 800ecfe:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800ed02:	e7dc      	b.n	800ecbe <HAL_RCC_MCOConfig+0x4a>
 800ed04:	58024400 	.word	0x58024400
 800ed08:	58020000 	.word	0x58020000
 800ed0c:	58020800 	.word	0x58020800

0800ed10 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed10:	4b49      	ldr	r3, [pc, #292]	@ (800ee38 <HAL_RCC_GetSysClockFreq+0x128>)
 800ed12:	691a      	ldr	r2, [r3, #16]
 800ed14:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800ed18:	2a10      	cmp	r2, #16
{
 800ed1a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed1c:	f000 8088 	beq.w	800ee30 <HAL_RCC_GetSysClockFreq+0x120>
 800ed20:	2a18      	cmp	r2, #24
 800ed22:	d00c      	beq.n	800ed3e <HAL_RCC_GetSysClockFreq+0x2e>
 800ed24:	2a00      	cmp	r2, #0
 800ed26:	f040 8085 	bne.w	800ee34 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	4843      	ldr	r0, [pc, #268]	@ (800ee3c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ed2e:	f012 0f20 	tst.w	r2, #32
 800ed32:	d003      	beq.n	800ed3c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ed3a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800ed3c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ed3e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ed40:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ed42:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800ed44:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ed48:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ed4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800ed4e:	d0f5      	beq.n	800ed3c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ed50:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ed54:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ed58:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed5c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ed60:	4362      	muls	r2, r4
 800ed62:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800ed66:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ed6c:	ee06 2a90 	vmov	s13, r2
 800ed70:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800ed74:	d04e      	beq.n	800ee14 <HAL_RCC_GetSysClockFreq+0x104>
 800ed76:	2902      	cmp	r1, #2
 800ed78:	d03e      	beq.n	800edf8 <HAL_RCC_GetSysClockFreq+0xe8>
 800ed7a:	2900      	cmp	r1, #0
 800ed7c:	d14a      	bne.n	800ee14 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	0692      	lsls	r2, r2, #26
 800ed82:	d527      	bpl.n	800edd4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed84:	6819      	ldr	r1, [r3, #0]
 800ed86:	4a2d      	ldr	r2, [pc, #180]	@ (800ee3c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ed88:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed8e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed94:	ee07 2a90 	vmov	s15, r2
 800ed98:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800ed9c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800eda0:	ee07 3a10 	vmov	s14, r3
 800eda4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eda8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800edac:	ee37 7a06 	vadd.f32	s14, s14, s12
 800edb0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800edb4:	4b20      	ldr	r3, [pc, #128]	@ (800ee38 <HAL_RCC_GetSysClockFreq+0x128>)
 800edb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edb8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800edbc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800edbe:	ee07 3a10 	vmov	s14, r3
 800edc2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800edc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800edca:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800edce:	ee17 0a90 	vmov	r0, s15
 800edd2:	e7b3      	b.n	800ed3c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edda:	ee07 3a90 	vmov	s15, r3
 800edde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ede2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ede6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800edea:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ee40 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edee:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800edf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800edf6:	e7dd      	b.n	800edb4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edfe:	ee07 3a90 	vmov	s15, r3
 800ee02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee0a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ee0e:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800ee44 <HAL_RCC_GetSysClockFreq+0x134>
 800ee12:	e7ec      	b.n	800edee <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee1a:	ee07 3a90 	vmov	s15, r3
 800ee1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee26:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ee2a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800ee48 <HAL_RCC_GetSysClockFreq+0x138>
 800ee2e:	e7de      	b.n	800edee <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee30:	4806      	ldr	r0, [pc, #24]	@ (800ee4c <HAL_RCC_GetSysClockFreq+0x13c>)
 800ee32:	e783      	b.n	800ed3c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800ee34:	4806      	ldr	r0, [pc, #24]	@ (800ee50 <HAL_RCC_GetSysClockFreq+0x140>)
 800ee36:	e781      	b.n	800ed3c <HAL_RCC_GetSysClockFreq+0x2c>
 800ee38:	58024400 	.word	0x58024400
 800ee3c:	03d09000 	.word	0x03d09000
 800ee40:	4c742400 	.word	0x4c742400
 800ee44:	4bbebc20 	.word	0x4bbebc20
 800ee48:	4a742400 	.word	0x4a742400
 800ee4c:	017d7840 	.word	0x017d7840
 800ee50:	003d0900 	.word	0x003d0900

0800ee54 <HAL_RCC_ClockConfig>:
{
 800ee54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee58:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	b910      	cbnz	r0, 800ee64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800ee5e:	2001      	movs	r0, #1
}
 800ee60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee64:	4a88      	ldr	r2, [pc, #544]	@ (800f088 <HAL_RCC_ClockConfig+0x234>)
 800ee66:	6813      	ldr	r3, [r2, #0]
 800ee68:	f003 030f 	and.w	r3, r3, #15
 800ee6c:	428b      	cmp	r3, r1
 800ee6e:	f0c0 8093 	bcc.w	800ef98 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	075f      	lsls	r7, r3, #29
 800ee76:	f100 809b 	bmi.w	800efb0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee7a:	071e      	lsls	r6, r3, #28
 800ee7c:	d50b      	bpl.n	800ee96 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ee7e:	4983      	ldr	r1, [pc, #524]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800ee80:	6960      	ldr	r0, [r4, #20]
 800ee82:	69ca      	ldr	r2, [r1, #28]
 800ee84:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ee88:	4290      	cmp	r0, r2
 800ee8a:	d904      	bls.n	800ee96 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ee8c:	69ca      	ldr	r2, [r1, #28]
 800ee8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ee92:	4302      	orrs	r2, r0
 800ee94:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee96:	06d8      	lsls	r0, r3, #27
 800ee98:	d50b      	bpl.n	800eeb2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ee9a:	497c      	ldr	r1, [pc, #496]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800ee9c:	69a0      	ldr	r0, [r4, #24]
 800ee9e:	69ca      	ldr	r2, [r1, #28]
 800eea0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800eea4:	4290      	cmp	r0, r2
 800eea6:	d904      	bls.n	800eeb2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eea8:	69ca      	ldr	r2, [r1, #28]
 800eeaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800eeae:	4302      	orrs	r2, r0
 800eeb0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eeb2:	0699      	lsls	r1, r3, #26
 800eeb4:	d50b      	bpl.n	800eece <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800eeb6:	4975      	ldr	r1, [pc, #468]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800eeb8:	69e0      	ldr	r0, [r4, #28]
 800eeba:	6a0a      	ldr	r2, [r1, #32]
 800eebc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800eec0:	4290      	cmp	r0, r2
 800eec2:	d904      	bls.n	800eece <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800eec4:	6a0a      	ldr	r2, [r1, #32]
 800eec6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800eeca:	4302      	orrs	r2, r0
 800eecc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eece:	079a      	lsls	r2, r3, #30
 800eed0:	d50b      	bpl.n	800eeea <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eed2:	496e      	ldr	r1, [pc, #440]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800eed4:	68e0      	ldr	r0, [r4, #12]
 800eed6:	698a      	ldr	r2, [r1, #24]
 800eed8:	f002 020f 	and.w	r2, r2, #15
 800eedc:	4290      	cmp	r0, r2
 800eede:	d904      	bls.n	800eeea <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eee0:	698a      	ldr	r2, [r1, #24]
 800eee2:	f022 020f 	bic.w	r2, r2, #15
 800eee6:	4302      	orrs	r2, r0
 800eee8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eeea:	07df      	lsls	r7, r3, #31
 800eeec:	d46e      	bmi.n	800efcc <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	079e      	lsls	r6, r3, #30
 800eef2:	f100 80a1 	bmi.w	800f038 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eef6:	4964      	ldr	r1, [pc, #400]	@ (800f088 <HAL_RCC_ClockConfig+0x234>)
 800eef8:	680a      	ldr	r2, [r1, #0]
 800eefa:	f002 020f 	and.w	r2, r2, #15
 800eefe:	42aa      	cmp	r2, r5
 800ef00:	f200 80a8 	bhi.w	800f054 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ef04:	0758      	lsls	r0, r3, #29
 800ef06:	f100 80b1 	bmi.w	800f06c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef0a:	0719      	lsls	r1, r3, #28
 800ef0c:	d50b      	bpl.n	800ef26 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ef0e:	495f      	ldr	r1, [pc, #380]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800ef10:	6960      	ldr	r0, [r4, #20]
 800ef12:	69ca      	ldr	r2, [r1, #28]
 800ef14:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ef18:	4290      	cmp	r0, r2
 800ef1a:	d204      	bcs.n	800ef26 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ef1c:	69ca      	ldr	r2, [r1, #28]
 800ef1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ef22:	4302      	orrs	r2, r0
 800ef24:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef26:	06da      	lsls	r2, r3, #27
 800ef28:	d50b      	bpl.n	800ef42 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ef2a:	4958      	ldr	r1, [pc, #352]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800ef2c:	69a0      	ldr	r0, [r4, #24]
 800ef2e:	69ca      	ldr	r2, [r1, #28]
 800ef30:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ef34:	4290      	cmp	r0, r2
 800ef36:	d204      	bcs.n	800ef42 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ef38:	69ca      	ldr	r2, [r1, #28]
 800ef3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ef3e:	4302      	orrs	r2, r0
 800ef40:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ef42:	069b      	lsls	r3, r3, #26
 800ef44:	d50b      	bpl.n	800ef5e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ef46:	4a51      	ldr	r2, [pc, #324]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800ef48:	69e1      	ldr	r1, [r4, #28]
 800ef4a:	6a13      	ldr	r3, [r2, #32]
 800ef4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ef50:	4299      	cmp	r1, r3
 800ef52:	d204      	bcs.n	800ef5e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ef54:	6a13      	ldr	r3, [r2, #32]
 800ef56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef5a:	430b      	orrs	r3, r1
 800ef5c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ef5e:	f7ff fed7 	bl	800ed10 <HAL_RCC_GetSysClockFreq>
 800ef62:	494a      	ldr	r1, [pc, #296]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800ef64:	4a4a      	ldr	r2, [pc, #296]	@ (800f090 <HAL_RCC_ClockConfig+0x23c>)
 800ef66:	698b      	ldr	r3, [r1, #24]
 800ef68:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800ef6c:	5cd3      	ldrb	r3, [r2, r3]
 800ef6e:	f003 031f 	and.w	r3, r3, #31
 800ef72:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ef74:	698b      	ldr	r3, [r1, #24]
 800ef76:	f003 030f 	and.w	r3, r3, #15
 800ef7a:	5cd3      	ldrb	r3, [r2, r3]
 800ef7c:	4a45      	ldr	r2, [pc, #276]	@ (800f094 <HAL_RCC_ClockConfig+0x240>)
 800ef7e:	f003 031f 	and.w	r3, r3, #31
 800ef82:	fa20 f303 	lsr.w	r3, r0, r3
 800ef86:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800ef88:	4b43      	ldr	r3, [pc, #268]	@ (800f098 <HAL_RCC_ClockConfig+0x244>)
 800ef8a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800ef8c:	4b43      	ldr	r3, [pc, #268]	@ (800f09c <HAL_RCC_ClockConfig+0x248>)
}
 800ef8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800ef92:	6818      	ldr	r0, [r3, #0]
 800ef94:	f7f2 be4c 	b.w	8001c30 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef98:	6813      	ldr	r3, [r2, #0]
 800ef9a:	f023 030f 	bic.w	r3, r3, #15
 800ef9e:	430b      	orrs	r3, r1
 800efa0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800efa2:	6813      	ldr	r3, [r2, #0]
 800efa4:	f003 030f 	and.w	r3, r3, #15
 800efa8:	428b      	cmp	r3, r1
 800efaa:	f47f af58 	bne.w	800ee5e <HAL_RCC_ClockConfig+0xa>
 800efae:	e760      	b.n	800ee72 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800efb0:	4936      	ldr	r1, [pc, #216]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800efb2:	6920      	ldr	r0, [r4, #16]
 800efb4:	698a      	ldr	r2, [r1, #24]
 800efb6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800efba:	4290      	cmp	r0, r2
 800efbc:	f67f af5d 	bls.w	800ee7a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800efc0:	698a      	ldr	r2, [r1, #24]
 800efc2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800efc6:	4302      	orrs	r2, r0
 800efc8:	618a      	str	r2, [r1, #24]
 800efca:	e756      	b.n	800ee7a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800efcc:	4b2f      	ldr	r3, [pc, #188]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800efce:	68a1      	ldr	r1, [r4, #8]
 800efd0:	699a      	ldr	r2, [r3, #24]
 800efd2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800efd6:	430a      	orrs	r2, r1
 800efd8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800efda:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800efdc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800efde:	2902      	cmp	r1, #2
 800efe0:	d11d      	bne.n	800f01e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800efe2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800efe6:	f43f af3a 	beq.w	800ee5e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800efea:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800efec:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eff0:	4f26      	ldr	r7, [pc, #152]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800eff2:	f022 0207 	bic.w	r2, r2, #7
 800eff6:	430a      	orrs	r2, r1
 800eff8:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800effa:	f7fc f9df 	bl	800b3bc <HAL_GetTick>
 800effe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	6862      	ldr	r2, [r4, #4]
 800f004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f008:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800f00c:	f43f af6f 	beq.w	800eeee <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f010:	f7fc f9d4 	bl	800b3bc <HAL_GetTick>
 800f014:	1b80      	subs	r0, r0, r6
 800f016:	4540      	cmp	r0, r8
 800f018:	d9f2      	bls.n	800f000 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800f01a:	2003      	movs	r0, #3
 800f01c:	e720      	b.n	800ee60 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f01e:	2903      	cmp	r1, #3
 800f020:	d102      	bne.n	800f028 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f022:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800f026:	e7de      	b.n	800efe6 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f028:	2901      	cmp	r1, #1
 800f02a:	d102      	bne.n	800f032 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f02c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800f030:	e7d9      	b.n	800efe6 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f032:	f012 0f04 	tst.w	r2, #4
 800f036:	e7d6      	b.n	800efe6 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f038:	4914      	ldr	r1, [pc, #80]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800f03a:	68e0      	ldr	r0, [r4, #12]
 800f03c:	698a      	ldr	r2, [r1, #24]
 800f03e:	f002 020f 	and.w	r2, r2, #15
 800f042:	4290      	cmp	r0, r2
 800f044:	f4bf af57 	bcs.w	800eef6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f048:	698a      	ldr	r2, [r1, #24]
 800f04a:	f022 020f 	bic.w	r2, r2, #15
 800f04e:	4302      	orrs	r2, r0
 800f050:	618a      	str	r2, [r1, #24]
 800f052:	e750      	b.n	800eef6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f054:	680a      	ldr	r2, [r1, #0]
 800f056:	f022 020f 	bic.w	r2, r2, #15
 800f05a:	432a      	orrs	r2, r5
 800f05c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f05e:	680a      	ldr	r2, [r1, #0]
 800f060:	f002 020f 	and.w	r2, r2, #15
 800f064:	42aa      	cmp	r2, r5
 800f066:	f47f aefa 	bne.w	800ee5e <HAL_RCC_ClockConfig+0xa>
 800f06a:	e74b      	b.n	800ef04 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f06c:	4907      	ldr	r1, [pc, #28]	@ (800f08c <HAL_RCC_ClockConfig+0x238>)
 800f06e:	6920      	ldr	r0, [r4, #16]
 800f070:	698a      	ldr	r2, [r1, #24]
 800f072:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800f076:	4290      	cmp	r0, r2
 800f078:	f4bf af47 	bcs.w	800ef0a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f07c:	698a      	ldr	r2, [r1, #24]
 800f07e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800f082:	4302      	orrs	r2, r0
 800f084:	618a      	str	r2, [r1, #24]
 800f086:	e740      	b.n	800ef0a <HAL_RCC_ClockConfig+0xb6>
 800f088:	52002000 	.word	0x52002000
 800f08c:	58024400 	.word	0x58024400
 800f090:	0802fd5c 	.word	0x0802fd5c
 800f094:	24000068 	.word	0x24000068
 800f098:	2400006c 	.word	0x2400006c
 800f09c:	24000074 	.word	0x24000074

0800f0a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f0a0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f0a2:	f7ff fe35 	bl	800ed10 <HAL_RCC_GetSysClockFreq>
 800f0a6:	4a0b      	ldr	r2, [pc, #44]	@ (800f0d4 <HAL_RCC_GetHCLKFreq+0x34>)
 800f0a8:	490b      	ldr	r1, [pc, #44]	@ (800f0d8 <HAL_RCC_GetHCLKFreq+0x38>)
 800f0aa:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f0ac:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f0ae:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f0b2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f0b6:	5ccb      	ldrb	r3, [r1, r3]
 800f0b8:	f003 031f 	and.w	r3, r3, #31
 800f0bc:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f0c0:	5c88      	ldrb	r0, [r1, r2]
 800f0c2:	4a06      	ldr	r2, [pc, #24]	@ (800f0dc <HAL_RCC_GetHCLKFreq+0x3c>)
 800f0c4:	f000 001f 	and.w	r0, r0, #31
 800f0c8:	fa23 f000 	lsr.w	r0, r3, r0
 800f0cc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f0ce:	4a04      	ldr	r2, [pc, #16]	@ (800f0e0 <HAL_RCC_GetHCLKFreq+0x40>)
 800f0d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800f0d2:	bd08      	pop	{r3, pc}
 800f0d4:	58024400 	.word	0x58024400
 800f0d8:	0802fd5c 	.word	0x0802fd5c
 800f0dc:	24000068 	.word	0x24000068
 800f0e0:	2400006c 	.word	0x2400006c

0800f0e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f0e4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f0e6:	f7ff ffdb 	bl	800f0a0 <HAL_RCC_GetHCLKFreq>
 800f0ea:	4b05      	ldr	r3, [pc, #20]	@ (800f100 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800f0ec:	4a05      	ldr	r2, [pc, #20]	@ (800f104 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f0ee:	69db      	ldr	r3, [r3, #28]
 800f0f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f0f4:	5cd3      	ldrb	r3, [r2, r3]
 800f0f6:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f0fa:	40d8      	lsrs	r0, r3
 800f0fc:	bd08      	pop	{r3, pc}
 800f0fe:	bf00      	nop
 800f100:	58024400 	.word	0x58024400
 800f104:	0802fd5c 	.word	0x0802fd5c

0800f108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f108:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f10a:	f7ff ffc9 	bl	800f0a0 <HAL_RCC_GetHCLKFreq>
 800f10e:	4b05      	ldr	r3, [pc, #20]	@ (800f124 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800f110:	4a05      	ldr	r2, [pc, #20]	@ (800f128 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f112:	69db      	ldr	r3, [r3, #28]
 800f114:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800f118:	5cd3      	ldrb	r3, [r2, r3]
 800f11a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f11e:	40d8      	lsrs	r0, r3
 800f120:	bd08      	pop	{r3, pc}
 800f122:	bf00      	nop
 800f124:	58024400 	.word	0x58024400
 800f128:	0802fd5c 	.word	0x0802fd5c

0800f12c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800f12c:	233f      	movs	r3, #63	@ 0x3f
 800f12e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f130:	4b11      	ldr	r3, [pc, #68]	@ (800f178 <HAL_RCC_GetClockConfig+0x4c>)
 800f132:	691a      	ldr	r2, [r3, #16]
 800f134:	f002 0207 	and.w	r2, r2, #7
 800f138:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800f13a:	699a      	ldr	r2, [r3, #24]
 800f13c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800f140:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800f142:	699a      	ldr	r2, [r3, #24]
 800f144:	f002 020f 	and.w	r2, r2, #15
 800f148:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800f14a:	699a      	ldr	r2, [r3, #24]
 800f14c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800f150:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800f152:	69da      	ldr	r2, [r3, #28]
 800f154:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800f158:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800f15a:	69da      	ldr	r2, [r3, #28]
 800f15c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800f160:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800f162:	6a1b      	ldr	r3, [r3, #32]
 800f164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f168:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f16a:	4b04      	ldr	r3, [pc, #16]	@ (800f17c <HAL_RCC_GetClockConfig+0x50>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f003 030f 	and.w	r3, r3, #15
 800f172:	600b      	str	r3, [r1, #0]
}
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	58024400 	.word	0x58024400
 800f17c:	52002000 	.word	0x52002000

0800f180 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f182:	4c3a      	ldr	r4, [pc, #232]	@ (800f26c <RCCEx_PLL2_Config+0xec>)
{
 800f184:	4606      	mov	r6, r0
 800f186:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f188:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f18a:	f003 0303 	and.w	r3, r3, #3
 800f18e:	2b03      	cmp	r3, #3
 800f190:	d069      	beq.n	800f266 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f192:	6823      	ldr	r3, [r4, #0]
 800f194:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f198:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f19a:	f7fc f90f 	bl	800b3bc <HAL_GetTick>
 800f19e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f1a0:	6823      	ldr	r3, [r4, #0]
 800f1a2:	011a      	lsls	r2, r3, #4
 800f1a4:	d44b      	bmi.n	800f23e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f1a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f1a8:	6832      	ldr	r2, [r6, #0]
 800f1aa:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800f1ae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800f1b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f1b4:	68b3      	ldr	r3, [r6, #8]
 800f1b6:	68f2      	ldr	r2, [r6, #12]
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	3a01      	subs	r2, #1
 800f1bc:	025b      	lsls	r3, r3, #9
 800f1be:	0412      	lsls	r2, r2, #16
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	6872      	ldr	r2, [r6, #4]
 800f1ca:	3a01      	subs	r2, #1
 800f1cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	6932      	ldr	r2, [r6, #16]
 800f1d4:	3a01      	subs	r2, #1
 800f1d6:	0612      	lsls	r2, r2, #24
 800f1d8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f1e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f1e2:	6972      	ldr	r2, [r6, #20]
 800f1e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f1e8:	4313      	orrs	r3, r2
 800f1ea:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f1ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f1ee:	69b2      	ldr	r2, [r6, #24]
 800f1f0:	f023 0320 	bic.w	r3, r3, #32
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f1f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f1fa:	f023 0310 	bic.w	r3, r3, #16
 800f1fe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f200:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f202:	69f2      	ldr	r2, [r6, #28]
 800f204:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f208:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f20c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f210:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f212:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f214:	f043 0310 	orr.w	r3, r3, #16
 800f218:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f21a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800f21c:	b9b5      	cbnz	r5, 800f24c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f21e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f222:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f224:	4c11      	ldr	r4, [pc, #68]	@ (800f26c <RCCEx_PLL2_Config+0xec>)
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f22c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f22e:	f7fc f8c5 	bl	800b3bc <HAL_GetTick>
 800f232:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f234:	6823      	ldr	r3, [r4, #0]
 800f236:	011b      	lsls	r3, r3, #4
 800f238:	d50f      	bpl.n	800f25a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800f23a:	2000      	movs	r0, #0
 800f23c:	e005      	b.n	800f24a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f23e:	f7fc f8bd 	bl	800b3bc <HAL_GetTick>
 800f242:	1bc0      	subs	r0, r0, r7
 800f244:	2802      	cmp	r0, #2
 800f246:	d9ab      	bls.n	800f1a0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800f248:	2003      	movs	r0, #3
}
 800f24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800f24c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f24e:	bf0c      	ite	eq
 800f250:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f254:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800f258:	e7e3      	b.n	800f222 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f25a:	f7fc f8af 	bl	800b3bc <HAL_GetTick>
 800f25e:	1b40      	subs	r0, r0, r5
 800f260:	2802      	cmp	r0, #2
 800f262:	d9e7      	bls.n	800f234 <RCCEx_PLL2_Config+0xb4>
 800f264:	e7f0      	b.n	800f248 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800f266:	2001      	movs	r0, #1
 800f268:	e7ef      	b.n	800f24a <RCCEx_PLL2_Config+0xca>
 800f26a:	bf00      	nop
 800f26c:	58024400 	.word	0x58024400

0800f270 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f272:	4c3a      	ldr	r4, [pc, #232]	@ (800f35c <RCCEx_PLL3_Config+0xec>)
{
 800f274:	4606      	mov	r6, r0
 800f276:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f278:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f27a:	f003 0303 	and.w	r3, r3, #3
 800f27e:	2b03      	cmp	r3, #3
 800f280:	d069      	beq.n	800f356 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f288:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f28a:	f7fc f897 	bl	800b3bc <HAL_GetTick>
 800f28e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	009a      	lsls	r2, r3, #2
 800f294:	d44b      	bmi.n	800f32e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f296:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f298:	6832      	ldr	r2, [r6, #0]
 800f29a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800f29e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800f2a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f2a4:	68b3      	ldr	r3, [r6, #8]
 800f2a6:	68f2      	ldr	r2, [r6, #12]
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	3a01      	subs	r2, #1
 800f2ac:	025b      	lsls	r3, r3, #9
 800f2ae:	0412      	lsls	r2, r2, #16
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	6872      	ldr	r2, [r6, #4]
 800f2ba:	3a01      	subs	r2, #1
 800f2bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	6932      	ldr	r2, [r6, #16]
 800f2c4:	3a01      	subs	r2, #1
 800f2c6:	0612      	lsls	r2, r2, #24
 800f2c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f2d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f2d2:	6972      	ldr	r2, [r6, #20]
 800f2d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f2dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f2de:	69b2      	ldr	r2, [r6, #24]
 800f2e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f2e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f2ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f2ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f2f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f2f2:	69f2      	ldr	r2, [r6, #28]
 800f2f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f2fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f300:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f302:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f308:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f30a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800f30c:	b9b5      	cbnz	r5, 800f33c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f30e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f312:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f314:	4c11      	ldr	r4, [pc, #68]	@ (800f35c <RCCEx_PLL3_Config+0xec>)
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f31c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f31e:	f7fc f84d 	bl	800b3bc <HAL_GetTick>
 800f322:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f324:	6823      	ldr	r3, [r4, #0]
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	d50f      	bpl.n	800f34a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800f32a:	2000      	movs	r0, #0
 800f32c:	e005      	b.n	800f33a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f32e:	f7fc f845 	bl	800b3bc <HAL_GetTick>
 800f332:	1bc0      	subs	r0, r0, r7
 800f334:	2802      	cmp	r0, #2
 800f336:	d9ab      	bls.n	800f290 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800f338:	2003      	movs	r0, #3
}
 800f33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800f33c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f33e:	bf0c      	ite	eq
 800f340:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f344:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800f348:	e7e3      	b.n	800f312 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f34a:	f7fc f837 	bl	800b3bc <HAL_GetTick>
 800f34e:	1b40      	subs	r0, r0, r5
 800f350:	2802      	cmp	r0, #2
 800f352:	d9e7      	bls.n	800f324 <RCCEx_PLL3_Config+0xb4>
 800f354:	e7f0      	b.n	800f338 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800f356:	2001      	movs	r0, #1
 800f358:	e7ef      	b.n	800f33a <RCCEx_PLL3_Config+0xca>
 800f35a:	bf00      	nop
 800f35c:	58024400 	.word	0x58024400

0800f360 <HAL_RCCEx_PeriphCLKConfig>:
{
 800f360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f364:	6803      	ldr	r3, [r0, #0]
{
 800f366:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f368:	011c      	lsls	r4, r3, #4
 800f36a:	d51e      	bpl.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800f36c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800f36e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f372:	d02a      	beq.n	800f3ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800f374:	d80f      	bhi.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800f376:	b1d3      	cbz	r3, 800f3ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800f378:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f37c:	d01d      	beq.n	800f3ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800f37e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f380:	682b      	ldr	r3, [r5, #0]
 800f382:	05d8      	lsls	r0, r3, #23
 800f384:	d54f      	bpl.n	800f426 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800f386:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800f388:	2b04      	cmp	r3, #4
 800f38a:	d84b      	bhi.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800f38c:	e8df f003 	tbb	[pc, r3]
 800f390:	27443d22 	.word	0x27443d22
 800f394:	27          	.byte	0x27
 800f395:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800f396:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f39a:	d1f0      	bne.n	800f37e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f39c:	4a86      	ldr	r2, [pc, #536]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f39e:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800f3a0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800f3a2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f3a6:	430b      	orrs	r3, r1
 800f3a8:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f3aa:	2600      	movs	r6, #0
 800f3ac:	e7e8      	b.n	800f380 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3ae:	4a82      	ldr	r2, [pc, #520]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f3b0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f3b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f3b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800f3b8:	e7f0      	b.n	800f39c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f3ba:	2102      	movs	r1, #2
 800f3bc:	3008      	adds	r0, #8
 800f3be:	f7ff fedf 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f3c2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d1db      	bne.n	800f380 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800f3c8:	e7e8      	b.n	800f39c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f3ca:	2102      	movs	r1, #2
 800f3cc:	3028      	adds	r0, #40	@ 0x28
 800f3ce:	f7ff ff4f 	bl	800f270 <RCCEx_PLL3_Config>
 800f3d2:	e7f6      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3d4:	4a78      	ldr	r2, [pc, #480]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f3d6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f3d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f3dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800f3de:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800f3e0:	bb1c      	cbnz	r4, 800f42a <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f3e2:	4a75      	ldr	r2, [pc, #468]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f3e4:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800f3e6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800f3e8:	f023 0307 	bic.w	r3, r3, #7
 800f3ec:	430b      	orrs	r3, r1
 800f3ee:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	0599      	lsls	r1, r3, #22
 800f3f4:	d528      	bpl.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800f3f6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800f3f8:	2b80      	cmp	r3, #128	@ 0x80
 800f3fa:	d043      	beq.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800f3fc:	d817      	bhi.n	800f42e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800f3fe:	b3a3      	cbz	r3, 800f46a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800f400:	2b40      	cmp	r3, #64	@ 0x40
 800f402:	d038      	beq.n	800f476 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800f404:	2601      	movs	r6, #1
 800f406:	4634      	mov	r4, r6
 800f408:	e01e      	b.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f40a:	2100      	movs	r1, #0
 800f40c:	f105 0008 	add.w	r0, r5, #8
 800f410:	f7ff feb6 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f414:	4604      	mov	r4, r0
        break;
 800f416:	e7e3      	b.n	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f418:	2100      	movs	r1, #0
 800f41a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f41e:	f7ff ff27 	bl	800f270 <RCCEx_PLL3_Config>
 800f422:	e7f7      	b.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800f424:	2601      	movs	r6, #1
 800f426:	4634      	mov	r4, r6
 800f428:	e7e2      	b.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f42a:	4626      	mov	r6, r4
 800f42c:	e7e0      	b.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800f42e:	2bc0      	cmp	r3, #192	@ 0xc0
 800f430:	d002      	beq.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800f432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f436:	d1e5      	bne.n	800f404 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800f438:	bb54      	cbnz	r4, 800f490 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f43a:	4a5f      	ldr	r2, [pc, #380]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f43c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f43e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800f440:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800f444:	430b      	orrs	r3, r1
 800f446:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f448:	682b      	ldr	r3, [r5, #0]
 800f44a:	055a      	lsls	r2, r3, #21
 800f44c:	d531      	bpl.n	800f4b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800f44e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800f452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f456:	d049      	beq.n	800f4ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800f458:	d81c      	bhi.n	800f494 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d039      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800f45e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f462:	d03c      	beq.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800f464:	2601      	movs	r6, #1
 800f466:	4634      	mov	r4, r6
 800f468:	e023      	b.n	800f4b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f46a:	4a53      	ldr	r2, [pc, #332]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f46c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f46e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f472:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800f474:	e7e0      	b.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f476:	2100      	movs	r1, #0
 800f478:	f105 0008 	add.w	r0, r5, #8
 800f47c:	f7ff fe80 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f480:	4604      	mov	r4, r0
        break;
 800f482:	e7d9      	b.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f484:	2100      	movs	r1, #0
 800f486:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f48a:	f7ff fef1 	bl	800f270 <RCCEx_PLL3_Config>
 800f48e:	e7f7      	b.n	800f480 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800f490:	4626      	mov	r6, r4
 800f492:	e7d9      	b.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800f494:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f498:	d002      	beq.n	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800f49a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f49e:	d1e1      	bne.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800f4a0:	bb54      	cbnz	r4, 800f4f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f4a2:	4a45      	ldr	r2, [pc, #276]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f4a4:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800f4a8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f4aa:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800f4ae:	430b      	orrs	r3, r1
 800f4b0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f4b2:	682b      	ldr	r3, [r5, #0]
 800f4b4:	051b      	lsls	r3, r3, #20
 800f4b6:	d530      	bpl.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800f4b8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800f4bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f4c0:	d045      	beq.n	800f54e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f4c2:	d81b      	bhi.n	800f4fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800f4c4:	b3b3      	cbz	r3, 800f534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f4c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4ca:	d039      	beq.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800f4cc:	2601      	movs	r6, #1
 800f4ce:	4634      	mov	r4, r6
 800f4d0:	e023      	b.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4d2:	4a39      	ldr	r2, [pc, #228]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f4d4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f4d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f4da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800f4dc:	e7e0      	b.n	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f4de:	2100      	movs	r1, #0
 800f4e0:	f105 0008 	add.w	r0, r5, #8
 800f4e4:	f7ff fe4c 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4e8:	4604      	mov	r4, r0
        break;
 800f4ea:	e7d9      	b.n	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f4f2:	f7ff febd 	bl	800f270 <RCCEx_PLL3_Config>
 800f4f6:	e7f7      	b.n	800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800f4f8:	4626      	mov	r6, r4
 800f4fa:	e7da      	b.n	800f4b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800f4fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f500:	d002      	beq.n	800f508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f502:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f506:	d1e1      	bne.n	800f4cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800f508:	bb3c      	cbnz	r4, 800f55a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f50a:	4a2b      	ldr	r2, [pc, #172]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f50c:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800f510:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f512:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800f516:	430b      	orrs	r3, r1
 800f518:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f51a:	682b      	ldr	r3, [r5, #0]
 800f51c:	019f      	lsls	r7, r3, #6
 800f51e:	d528      	bpl.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800f520:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f522:	2b20      	cmp	r3, #32
 800f524:	d03e      	beq.n	800f5a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800f526:	d81a      	bhi.n	800f55e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800f528:	b1db      	cbz	r3, 800f562 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800f52a:	2b10      	cmp	r3, #16
 800f52c:	d034      	beq.n	800f598 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800f52e:	2601      	movs	r6, #1
 800f530:	4634      	mov	r4, r6
 800f532:	e01e      	b.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f534:	4a20      	ldr	r2, [pc, #128]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f536:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f53c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800f53e:	e7e3      	b.n	800f508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f540:	2100      	movs	r1, #0
 800f542:	f105 0008 	add.w	r0, r5, #8
 800f546:	f7ff fe1b 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f54a:	4604      	mov	r4, r0
        break;
 800f54c:	e7dc      	b.n	800f508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f54e:	2100      	movs	r1, #0
 800f550:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f554:	f7ff fe8c 	bl	800f270 <RCCEx_PLL3_Config>
 800f558:	e7f7      	b.n	800f54a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f55a:	4626      	mov	r6, r4
 800f55c:	e7dd      	b.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800f55e:	2b30      	cmp	r3, #48	@ 0x30
 800f560:	d1e5      	bne.n	800f52e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800f562:	bb34      	cbnz	r4, 800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f564:	4a14      	ldr	r2, [pc, #80]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f566:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f568:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800f56a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800f56e:	430b      	orrs	r3, r1
 800f570:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f572:	682b      	ldr	r3, [r5, #0]
 800f574:	04d8      	lsls	r0, r3, #19
 800f576:	d530      	bpl.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800f578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f57a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f57e:	f000 8097 	beq.w	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800f582:	d81b      	bhi.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800f584:	2b00      	cmp	r3, #0
 800f586:	f000 8086 	beq.w	800f696 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800f58a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f58e:	f000 8088 	beq.w	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800f592:	2601      	movs	r6, #1
 800f594:	4634      	mov	r4, r6
 800f596:	e020      	b.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f598:	4a07      	ldr	r2, [pc, #28]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f59a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f59c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f5a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800f5a2:	e7de      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f5a4:	2102      	movs	r1, #2
 800f5a6:	f105 0008 	add.w	r0, r5, #8
 800f5aa:	f7ff fde9 	bl	800f180 <RCCEx_PLL2_Config>
 800f5ae:	4604      	mov	r4, r0
        break;
 800f5b0:	e7d7      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800f5b2:	4626      	mov	r6, r4
 800f5b4:	e7dd      	b.n	800f572 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800f5b6:	bf00      	nop
 800f5b8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800f5bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f5c0:	d002      	beq.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800f5c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f5c6:	d1e4      	bne.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800f5c8:	2c00      	cmp	r4, #0
 800f5ca:	d177      	bne.n	800f6bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f5cc:	4a9e      	ldr	r2, [pc, #632]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f5ce:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800f5d0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800f5d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f5d6:	430b      	orrs	r3, r1
 800f5d8:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f5da:	682b      	ldr	r3, [r5, #0]
 800f5dc:	0499      	lsls	r1, r3, #18
 800f5de:	d50c      	bpl.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800f5e0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800f5e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5e6:	f000 8083 	beq.w	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800f5ea:	d869      	bhi.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d06f      	beq.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800f5f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5f4:	d075      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f5f6:	2601      	movs	r6, #1
 800f5f8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f5fa:	682b      	ldr	r3, [r5, #0]
 800f5fc:	045a      	lsls	r2, r3, #17
 800f5fe:	d50e      	bpl.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800f600:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800f604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f608:	f000 8093 	beq.w	800f732 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800f60c:	d878      	bhi.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d07e      	beq.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800f612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f616:	f000 8085 	beq.w	800f724 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800f61a:	2601      	movs	r6, #1
 800f61c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800f61e:	682b      	ldr	r3, [r5, #0]
 800f620:	015b      	lsls	r3, r3, #5
 800f622:	d515      	bpl.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800f624:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800f626:	b14b      	cbz	r3, 800f63c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800f628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f62c:	f040 8089 	bne.w	800f742 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f630:	2101      	movs	r1, #1
 800f632:	f105 0008 	add.w	r0, r5, #8
 800f636:	f7ff fda3 	bl	800f180 <RCCEx_PLL2_Config>
 800f63a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f63c:	2c00      	cmp	r4, #0
 800f63e:	f040 8083 	bne.w	800f748 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800f642:	4a81      	ldr	r2, [pc, #516]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f644:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800f646:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800f648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f64c:	430b      	orrs	r3, r1
 800f64e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f650:	682b      	ldr	r3, [r5, #0]
 800f652:	041f      	lsls	r7, r3, #16
 800f654:	d511      	bpl.n	800f67a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800f656:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800f658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f65c:	d076      	beq.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800f65e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f662:	d079      	beq.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f664:	2b00      	cmp	r3, #0
 800f666:	d17e      	bne.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800f668:	2c00      	cmp	r4, #0
 800f66a:	d17f      	bne.n	800f76c <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f66c:	4a76      	ldr	r2, [pc, #472]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f66e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800f670:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800f672:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800f676:	430b      	orrs	r3, r1
 800f678:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f67a:	682b      	ldr	r3, [r5, #0]
 800f67c:	01d8      	lsls	r0, r3, #7
 800f67e:	f140 8085 	bpl.w	800f78c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800f682:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800f684:	2b03      	cmp	r3, #3
 800f686:	f200 80e5 	bhi.w	800f854 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800f68a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f68e:	0076      	.short	0x0076
 800f690:	00d50071 	.word	0x00d50071
 800f694:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f696:	4a6c      	ldr	r2, [pc, #432]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f698:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f69a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f69e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800f6a0:	e792      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	f105 0008 	add.w	r0, r5, #8
 800f6a8:	f7ff fd6a 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f6ac:	4604      	mov	r4, r0
        break;
 800f6ae:	e78b      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f6b6:	f7ff fddb 	bl	800f270 <RCCEx_PLL3_Config>
 800f6ba:	e7f7      	b.n	800f6ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800f6bc:	4626      	mov	r6, r4
 800f6be:	e78c      	b.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800f6c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f6c4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800f6c8:	d002      	beq.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800f6ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f6ce:	d192      	bne.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800f6d0:	b9a4      	cbnz	r4, 800f6fc <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f6d2:	4a5d      	ldr	r2, [pc, #372]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f6d4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800f6d6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800f6d8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800f6dc:	430b      	orrs	r3, r1
 800f6de:	6513      	str	r3, [r2, #80]	@ 0x50
 800f6e0:	e78b      	b.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f6e2:	2101      	movs	r1, #1
 800f6e4:	f105 0008 	add.w	r0, r5, #8
 800f6e8:	f7ff fd4a 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f6ec:	4604      	mov	r4, r0
        break;
 800f6ee:	e7ef      	b.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f6f0:	2101      	movs	r1, #1
 800f6f2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f6f6:	f7ff fdbb 	bl	800f270 <RCCEx_PLL3_Config>
 800f6fa:	e7f7      	b.n	800f6ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800f6fc:	4626      	mov	r6, r4
 800f6fe:	e77c      	b.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800f700:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f704:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800f708:	d002      	beq.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800f70a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f70e:	d184      	bne.n	800f61a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800f710:	b9ac      	cbnz	r4, 800f73e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f712:	4a4d      	ldr	r2, [pc, #308]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f714:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800f718:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f71a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800f71e:	430b      	orrs	r3, r1
 800f720:	6593      	str	r3, [r2, #88]	@ 0x58
 800f722:	e77c      	b.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f724:	2101      	movs	r1, #1
 800f726:	f105 0008 	add.w	r0, r5, #8
 800f72a:	f7ff fd29 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f72e:	4604      	mov	r4, r0
        break;
 800f730:	e7ee      	b.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f732:	2101      	movs	r1, #1
 800f734:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f738:	f7ff fd9a 	bl	800f270 <RCCEx_PLL3_Config>
 800f73c:	e7f7      	b.n	800f72e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800f73e:	4626      	mov	r6, r4
 800f740:	e76d      	b.n	800f61e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800f742:	2601      	movs	r6, #1
 800f744:	4634      	mov	r4, r6
 800f746:	e783      	b.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800f748:	4626      	mov	r6, r4
 800f74a:	e781      	b.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f74c:	4a3e      	ldr	r2, [pc, #248]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f74e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f754:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800f756:	e787      	b.n	800f668 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f758:	2101      	movs	r1, #1
 800f75a:	f105 0008 	add.w	r0, r5, #8
 800f75e:	f7ff fd0f 	bl	800f180 <RCCEx_PLL2_Config>
 800f762:	4604      	mov	r4, r0
        break;
 800f764:	e780      	b.n	800f668 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800f766:	2601      	movs	r6, #1
 800f768:	4634      	mov	r4, r6
 800f76a:	e786      	b.n	800f67a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800f76c:	4626      	mov	r6, r4
 800f76e:	e784      	b.n	800f67a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f770:	4a35      	ldr	r2, [pc, #212]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f772:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f778:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800f77a:	2c00      	cmp	r4, #0
 800f77c:	d16d      	bne.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f77e:	4a32      	ldr	r2, [pc, #200]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f780:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800f782:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800f784:	f023 0303 	bic.w	r3, r3, #3
 800f788:	430b      	orrs	r3, r1
 800f78a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f78c:	682b      	ldr	r3, [r5, #0]
 800f78e:	0259      	lsls	r1, r3, #9
 800f790:	d539      	bpl.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f792:	4f2e      	ldr	r7, [pc, #184]	@ (800f84c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f79a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800f79c:	f7fb fe0e 	bl	800b3bc <HAL_GetTick>
 800f7a0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	05da      	lsls	r2, r3, #23
 800f7a6:	d55a      	bpl.n	800f85e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800f7a8:	2c00      	cmp	r4, #0
 800f7aa:	d176      	bne.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f7ac:	4b26      	ldr	r3, [pc, #152]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f7ae:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800f7b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f7b4:	4042      	eors	r2, r0
 800f7b6:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800f7ba:	d00b      	beq.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f7bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800f7be:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f7c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800f7c4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800f7c8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f7ca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f7cc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800f7d0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800f7d2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f7d4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800f7d8:	d04a      	beq.n	800f870 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f7da:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800f7de:	491a      	ldr	r1, [pc, #104]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f7e0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800f7e4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800f7e8:	d153      	bne.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800f7ea:	6908      	ldr	r0, [r1, #16]
 800f7ec:	4a18      	ldr	r2, [pc, #96]	@ (800f850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800f7ee:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800f7f2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800f7f6:	4302      	orrs	r2, r0
 800f7f8:	610a      	str	r2, [r1, #16]
 800f7fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f7fe:	4a12      	ldr	r2, [pc, #72]	@ (800f848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800f800:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800f802:	430b      	orrs	r3, r1
 800f804:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f806:	682b      	ldr	r3, [r5, #0]
 800f808:	07d8      	lsls	r0, r3, #31
 800f80a:	d50a      	bpl.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800f80c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800f810:	2b10      	cmp	r3, #16
 800f812:	d05b      	beq.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800f814:	d843      	bhi.n	800f89e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800f816:	2b00      	cmp	r3, #0
 800f818:	d047      	beq.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800f81a:	2b08      	cmp	r3, #8
 800f81c:	d04f      	beq.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800f81e:	2601      	movs	r6, #1
 800f820:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f822:	682b      	ldr	r3, [r5, #0]
 800f824:	0799      	lsls	r1, r3, #30
 800f826:	d567      	bpl.n	800f8f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f828:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800f82a:	2b05      	cmp	r3, #5
 800f82c:	d87a      	bhi.n	800f924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800f82e:	e8df f003 	tbb	[pc, r3]
 800f832:	555b      	.short	0x555b
 800f834:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f838:	2102      	movs	r1, #2
 800f83a:	f105 0008 	add.w	r0, r5, #8
 800f83e:	f7ff fc9f 	bl	800f180 <RCCEx_PLL2_Config>
 800f842:	4604      	mov	r4, r0
        break;
 800f844:	e799      	b.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f846:	bf00      	nop
 800f848:	58024400 	.word	0x58024400
 800f84c:	58024800 	.word	0x58024800
 800f850:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800f854:	2601      	movs	r6, #1
 800f856:	4634      	mov	r4, r6
 800f858:	e798      	b.n	800f78c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800f85a:	4626      	mov	r6, r4
 800f85c:	e796      	b.n	800f78c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f85e:	f7fb fdad 	bl	800b3bc <HAL_GetTick>
 800f862:	eba0 0008 	sub.w	r0, r0, r8
 800f866:	2864      	cmp	r0, #100	@ 0x64
 800f868:	d99b      	bls.n	800f7a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800f86a:	2603      	movs	r6, #3
 800f86c:	4634      	mov	r4, r6
 800f86e:	e7ca      	b.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800f870:	f7fb fda4 	bl	800b3bc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f874:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800f930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800f878:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f87a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f87e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f882:	079b      	lsls	r3, r3, #30
 800f884:	d4a9      	bmi.n	800f7da <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f886:	f7fb fd99 	bl	800b3bc <HAL_GetTick>
 800f88a:	1bc0      	subs	r0, r0, r7
 800f88c:	4548      	cmp	r0, r9
 800f88e:	d9f6      	bls.n	800f87e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800f890:	e7eb      	b.n	800f86a <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f892:	690a      	ldr	r2, [r1, #16]
 800f894:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800f898:	e7ae      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f89a:	4626      	mov	r6, r4
 800f89c:	e7b3      	b.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800f89e:	f023 0208 	bic.w	r2, r3, #8
 800f8a2:	2a20      	cmp	r2, #32
 800f8a4:	d001      	beq.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800f8a6:	2b18      	cmp	r3, #24
 800f8a8:	d1b9      	bne.n	800f81e <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800f8aa:	b9ac      	cbnz	r4, 800f8d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f8ac:	4a20      	ldr	r2, [pc, #128]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800f8ae:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800f8b2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f8b4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800f8b8:	430b      	orrs	r3, r1
 800f8ba:	6553      	str	r3, [r2, #84]	@ 0x54
 800f8bc:	e7b1      	b.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f8be:	2101      	movs	r1, #1
 800f8c0:	f105 0008 	add.w	r0, r5, #8
 800f8c4:	f7ff fc5c 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8c8:	4604      	mov	r4, r0
        break;
 800f8ca:	e7ee      	b.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8cc:	2101      	movs	r1, #1
 800f8ce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f8d2:	f7ff fccd 	bl	800f270 <RCCEx_PLL3_Config>
 800f8d6:	e7f7      	b.n	800f8c8 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800f8d8:	4626      	mov	r6, r4
 800f8da:	e7a2      	b.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f8dc:	2101      	movs	r1, #1
 800f8de:	f105 0008 	add.w	r0, r5, #8
 800f8e2:	f7ff fc4d 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8e6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f8e8:	b9fc      	cbnz	r4, 800f92a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f8ea:	4a11      	ldr	r2, [pc, #68]	@ (800f930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800f8ec:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800f8ee:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f8f0:	f023 0307 	bic.w	r3, r3, #7
 800f8f4:	430b      	orrs	r3, r1
 800f8f6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f8f8:	682b      	ldr	r3, [r5, #0]
 800f8fa:	075a      	lsls	r2, r3, #29
 800f8fc:	d52b      	bpl.n	800f956 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f8fe:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800f902:	2b05      	cmp	r3, #5
 800f904:	f200 816e 	bhi.w	800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800f908:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f90c:	0014001a 	.word	0x0014001a
 800f910:	001a0166 	.word	0x001a0166
 800f914:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f918:	2101      	movs	r1, #1
 800f91a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f91e:	f7ff fca7 	bl	800f270 <RCCEx_PLL3_Config>
 800f922:	e7e0      	b.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f924:	2601      	movs	r6, #1
 800f926:	4634      	mov	r4, r6
 800f928:	e7e6      	b.n	800f8f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800f92a:	4626      	mov	r6, r4
 800f92c:	e7e4      	b.n	800f8f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800f92e:	bf00      	nop
 800f930:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f934:	2101      	movs	r1, #1
 800f936:	f105 0008 	add.w	r0, r5, #8
 800f93a:	f7ff fc21 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f93e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f940:	2c00      	cmp	r4, #0
 800f942:	f040 8152 	bne.w	800fbea <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f946:	4aaa      	ldr	r2, [pc, #680]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f948:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800f94c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f94e:	f023 0307 	bic.w	r3, r3, #7
 800f952:	430b      	orrs	r3, r1
 800f954:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f956:	682b      	ldr	r3, [r5, #0]
 800f958:	069b      	lsls	r3, r3, #26
 800f95a:	d510      	bpl.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f95c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800f960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f964:	f000 8160 	beq.w	800fc28 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800f968:	f200 8144 	bhi.w	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	f000 814a 	beq.w	800fc06 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800f972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f976:	f000 8150 	beq.w	800fc1a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800f97a:	2601      	movs	r6, #1
 800f97c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	065f      	lsls	r7, r3, #25
 800f982:	d510      	bpl.n	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f984:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800f988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f98c:	f000 816e 	beq.w	800fc6c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800f990:	f200 8152 	bhi.w	800fc38 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 8158 	beq.w	800fc4a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800f99a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f99e:	f000 815e 	beq.w	800fc5e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800f9a2:	2601      	movs	r6, #1
 800f9a4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f9a6:	682b      	ldr	r3, [r5, #0]
 800f9a8:	0618      	lsls	r0, r3, #24
 800f9aa:	d510      	bpl.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f9ac:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800f9b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f9b4:	f000 817c 	beq.w	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800f9b8:	f200 8160 	bhi.w	800fc7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 8166 	beq.w	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800f9c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f9c6:	f000 816c 	beq.w	800fca2 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800f9ca:	2601      	movs	r6, #1
 800f9cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f9ce:	682b      	ldr	r3, [r5, #0]
 800f9d0:	0719      	lsls	r1, r3, #28
 800f9d2:	d514      	bpl.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f9d4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800f9d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f9dc:	d107      	bne.n	800f9ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f9de:	2102      	movs	r1, #2
 800f9e0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f9e4:	f7ff fc44 	bl	800f270 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	bf18      	it	ne
 800f9ec:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f9ee:	4a80      	ldr	r2, [pc, #512]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f9f0:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800f9f4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f9f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800f9fa:	430b      	orrs	r3, r1
 800f9fc:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f9fe:	682b      	ldr	r3, [r5, #0]
 800fa00:	06da      	lsls	r2, r3, #27
 800fa02:	d514      	bpl.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fa04:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800fa08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa0c:	d107      	bne.n	800fa1e <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fa0e:	2102      	movs	r1, #2
 800fa10:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fa14:	f7ff fc2c 	bl	800f270 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	bf18      	it	ne
 800fa1c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fa1e:	4a74      	ldr	r2, [pc, #464]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800fa20:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800fa24:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800fa26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fa2a:	430b      	orrs	r3, r1
 800fa2c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fa2e:	682b      	ldr	r3, [r5, #0]
 800fa30:	031b      	lsls	r3, r3, #12
 800fa32:	d51b      	bpl.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800fa34:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800fa38:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800fa3c:	f000 8140 	beq.w	800fcc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800fa40:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800fa44:	d007      	beq.n	800fa56 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800fa46:	2900      	cmp	r1, #0
 800fa48:	f040 8140 	bne.w	800fccc <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fa4c:	f105 0008 	add.w	r0, r5, #8
 800fa50:	f7ff fb96 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fa54:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800fa56:	2c00      	cmp	r4, #0
 800fa58:	f040 813b 	bne.w	800fcd2 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fa5c:	4a64      	ldr	r2, [pc, #400]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800fa5e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800fa62:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800fa64:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800fa68:	430b      	orrs	r3, r1
 800fa6a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fa6c:	682b      	ldr	r3, [r5, #0]
 800fa6e:	035f      	lsls	r7, r3, #13
 800fa70:	d50f      	bpl.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800fa72:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800fa76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fa7a:	f000 813b 	beq.w	800fcf4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800fa7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fa82:	f000 812d 	beq.w	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800fa86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa8a:	f000 8124 	beq.w	800fcd6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800fa8e:	2601      	movs	r6, #1
 800fa90:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fa92:	682b      	ldr	r3, [r5, #0]
 800fa94:	03d8      	lsls	r0, r3, #15
 800fa96:	d509      	bpl.n	800faac <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800fa98:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f000 8133 	beq.w	800fd06 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800faa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800faa4:	f000 813d 	beq.w	800fd22 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800faa8:	2601      	movs	r6, #1
 800faaa:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800faac:	682b      	ldr	r3, [r5, #0]
 800faae:	0099      	lsls	r1, r3, #2
 800fab0:	d507      	bpl.n	800fac2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fab2:	2102      	movs	r1, #2
 800fab4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fab8:	f7ff fbda 	bl	800f270 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800fabc:	2800      	cmp	r0, #0
 800fabe:	bf18      	it	ne
 800fac0:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fac2:	e9d5 3100 	ldrd	r3, r1, [r5]
 800fac6:	039a      	lsls	r2, r3, #14
 800fac8:	f140 8143 	bpl.w	800fd52 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800facc:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800fad0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800fad4:	f000 813f 	beq.w	800fd56 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800fad8:	f200 812c 	bhi.w	800fd34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800fadc:	2800      	cmp	r0, #0
 800fade:	f000 812f 	beq.w	800fd40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800fae2:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fae4:	02df      	lsls	r7, r3, #11
 800fae6:	d506      	bpl.n	800faf6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fae8:	4841      	ldr	r0, [pc, #260]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800faea:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800faec:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800faee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800faf2:	4332      	orrs	r2, r6
 800faf4:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800faf6:	00de      	lsls	r6, r3, #3
 800faf8:	d507      	bpl.n	800fb0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fafa:	483d      	ldr	r0, [pc, #244]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800fafc:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800fb00:	6902      	ldr	r2, [r0, #16]
 800fb02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fb06:	4332      	orrs	r2, r6
 800fb08:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fb0a:	0298      	lsls	r0, r3, #10
 800fb0c:	d506      	bpl.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fb0e:	4838      	ldr	r0, [pc, #224]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800fb10:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800fb12:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800fb14:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800fb18:	4332      	orrs	r2, r6
 800fb1a:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fb1c:	005a      	lsls	r2, r3, #1
 800fb1e:	d509      	bpl.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fb20:	4a33      	ldr	r2, [pc, #204]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800fb22:	6910      	ldr	r0, [r2, #16]
 800fb24:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800fb28:	6110      	str	r0, [r2, #16]
 800fb2a:	6910      	ldr	r0, [r2, #16]
 800fb2c:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800fb30:	4330      	orrs	r0, r6
 800fb32:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	da06      	bge.n	800fb46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fb38:	482d      	ldr	r0, [pc, #180]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800fb3a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800fb3c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800fb3e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800fb42:	4332      	orrs	r2, r6
 800fb44:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb46:	021f      	lsls	r7, r3, #8
 800fb48:	d507      	bpl.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb4a:	4a29      	ldr	r2, [pc, #164]	@ (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800fb4c:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800fb50:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800fb52:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800fb56:	4303      	orrs	r3, r0
 800fb58:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fb5a:	07ce      	lsls	r6, r1, #31
 800fb5c:	d506      	bpl.n	800fb6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb5e:	2100      	movs	r1, #0
 800fb60:	f105 0008 	add.w	r0, r5, #8
 800fb64:	f7ff fb0c 	bl	800f180 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800fb68:	4607      	mov	r7, r0
 800fb6a:	b900      	cbnz	r0, 800fb6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800fb6c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fb6e:	686b      	ldr	r3, [r5, #4]
 800fb70:	079c      	lsls	r4, r3, #30
 800fb72:	d506      	bpl.n	800fb82 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb74:	2101      	movs	r1, #1
 800fb76:	f105 0008 	add.w	r0, r5, #8
 800fb7a:	f7ff fb01 	bl	800f180 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800fb7e:	4606      	mov	r6, r0
 800fb80:	b900      	cbnz	r0, 800fb84 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800fb82:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fb84:	686b      	ldr	r3, [r5, #4]
 800fb86:	0758      	lsls	r0, r3, #29
 800fb88:	d506      	bpl.n	800fb98 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fb8a:	2102      	movs	r1, #2
 800fb8c:	f105 0008 	add.w	r0, r5, #8
 800fb90:	f7ff faf6 	bl	800f180 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800fb94:	4604      	mov	r4, r0
 800fb96:	b900      	cbnz	r0, 800fb9a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800fb98:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fb9a:	686b      	ldr	r3, [r5, #4]
 800fb9c:	0719      	lsls	r1, r3, #28
 800fb9e:	d506      	bpl.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fba0:	2100      	movs	r1, #0
 800fba2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fba6:	f7ff fb63 	bl	800f270 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800fbaa:	4606      	mov	r6, r0
 800fbac:	b900      	cbnz	r0, 800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800fbae:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fbb0:	686b      	ldr	r3, [r5, #4]
 800fbb2:	06da      	lsls	r2, r3, #27
 800fbb4:	d506      	bpl.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fbb6:	2101      	movs	r1, #1
 800fbb8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fbbc:	f7ff fb58 	bl	800f270 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	b900      	cbnz	r0, 800fbc6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800fbc4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fbc6:	686b      	ldr	r3, [r5, #4]
 800fbc8:	069b      	lsls	r3, r3, #26
 800fbca:	f100 80ca 	bmi.w	800fd62 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800fbce:	1e20      	subs	r0, r4, #0
 800fbd0:	bf18      	it	ne
 800fbd2:	2001      	movne	r0, #1
}
 800fbd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fbd8:	2101      	movs	r1, #1
 800fbda:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fbde:	f7ff fb47 	bl	800f270 <RCCEx_PLL3_Config>
 800fbe2:	e6ac      	b.n	800f93e <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fbe4:	2601      	movs	r6, #1
 800fbe6:	4634      	mov	r4, r6
 800fbe8:	e6b5      	b.n	800f956 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800fbea:	4626      	mov	r6, r4
 800fbec:	e6b3      	b.n	800f956 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800fbee:	bf00      	nop
 800fbf0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fbf4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fbf8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800fbfc:	d003      	beq.n	800fc06 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800fbfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc02:	f47f aeba 	bne.w	800f97a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800fc06:	b9ac      	cbnz	r4, 800fc34 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fc08:	4a5b      	ldr	r2, [pc, #364]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fc0a:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800fc0e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800fc10:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800fc14:	430b      	orrs	r3, r1
 800fc16:	6553      	str	r3, [r2, #84]	@ 0x54
 800fc18:	e6b1      	b.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	f105 0008 	add.w	r0, r5, #8
 800fc20:	f7ff faae 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc24:	4604      	mov	r4, r0
        break;
 800fc26:	e7ee      	b.n	800fc06 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc28:	2102      	movs	r1, #2
 800fc2a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fc2e:	f7ff fb1f 	bl	800f270 <RCCEx_PLL3_Config>
 800fc32:	e7f7      	b.n	800fc24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800fc34:	4626      	mov	r6, r4
 800fc36:	e6a2      	b.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fc38:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800fc3c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800fc40:	d003      	beq.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800fc42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fc46:	f47f aeac 	bne.w	800f9a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800fc4a:	b9ac      	cbnz	r4, 800fc78 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fc4c:	4a4a      	ldr	r2, [pc, #296]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fc4e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800fc52:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800fc54:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800fc58:	430b      	orrs	r3, r1
 800fc5a:	6593      	str	r3, [r2, #88]	@ 0x58
 800fc5c:	e6a3      	b.n	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc5e:	2100      	movs	r1, #0
 800fc60:	f105 0008 	add.w	r0, r5, #8
 800fc64:	f7ff fa8c 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc68:	4604      	mov	r4, r0
        break;
 800fc6a:	e7ee      	b.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc6c:	2102      	movs	r1, #2
 800fc6e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fc72:	f7ff fafd 	bl	800f270 <RCCEx_PLL3_Config>
 800fc76:	e7f7      	b.n	800fc68 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800fc78:	4626      	mov	r6, r4
 800fc7a:	e694      	b.n	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fc7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fc80:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800fc84:	d003      	beq.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800fc86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800fc8a:	f47f ae9e 	bne.w	800f9ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800fc8e:	b9ac      	cbnz	r4, 800fcbc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fc90:	4a39      	ldr	r2, [pc, #228]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fc92:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800fc96:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800fc98:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800fc9c:	430b      	orrs	r3, r1
 800fc9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800fca0:	e695      	b.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fca2:	2100      	movs	r1, #0
 800fca4:	f105 0008 	add.w	r0, r5, #8
 800fca8:	f7ff fa6a 	bl	800f180 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fcac:	4604      	mov	r4, r0
        break;
 800fcae:	e7ee      	b.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fcb0:	2102      	movs	r1, #2
 800fcb2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fcb6:	f7ff fadb 	bl	800f270 <RCCEx_PLL3_Config>
 800fcba:	e7f7      	b.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800fcbc:	4626      	mov	r6, r4
 800fcbe:	e686      	b.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fcc0:	2102      	movs	r1, #2
 800fcc2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fcc6:	f7ff fad3 	bl	800f270 <RCCEx_PLL3_Config>
 800fcca:	e6c3      	b.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800fccc:	2601      	movs	r6, #1
 800fcce:	4634      	mov	r4, r6
 800fcd0:	e6cc      	b.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800fcd2:	4626      	mov	r6, r4
 800fcd4:	e6ca      	b.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fcd6:	4a28      	ldr	r2, [pc, #160]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fcd8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800fcda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fcde:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800fce0:	b97c      	cbnz	r4, 800fd02 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fce2:	4a25      	ldr	r2, [pc, #148]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fce4:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800fce8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800fcea:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800fcee:	430b      	orrs	r3, r1
 800fcf0:	6553      	str	r3, [r2, #84]	@ 0x54
 800fcf2:	e6ce      	b.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fcf4:	2101      	movs	r1, #1
 800fcf6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fcfa:	f7ff fab9 	bl	800f270 <RCCEx_PLL3_Config>
 800fcfe:	4604      	mov	r4, r0
        break;
 800fd00:	e7ee      	b.n	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800fd02:	4626      	mov	r6, r4
 800fd04:	e6c5      	b.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd06:	4a1c      	ldr	r2, [pc, #112]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fd08:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800fd0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fd0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800fd10:	b974      	cbnz	r4, 800fd30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fd12:	4a19      	ldr	r2, [pc, #100]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fd14:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800fd16:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800fd18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fd1c:	430b      	orrs	r3, r1
 800fd1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fd20:	e6c4      	b.n	800faac <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fd22:	2102      	movs	r1, #2
 800fd24:	f105 0008 	add.w	r0, r5, #8
 800fd28:	f7ff fa2a 	bl	800f180 <RCCEx_PLL2_Config>
 800fd2c:	4604      	mov	r4, r0
        break;
 800fd2e:	e7ef      	b.n	800fd10 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800fd30:	4626      	mov	r6, r4
 800fd32:	e6bb      	b.n	800faac <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800fd34:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800fd38:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800fd3c:	f47f aed1 	bne.w	800fae2 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800fd40:	2c00      	cmp	r4, #0
 800fd42:	f47f aecf 	bne.w	800fae4 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fd46:	4c0c      	ldr	r4, [pc, #48]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fd48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fd4a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800fd4e:	4302      	orrs	r2, r0
 800fd50:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800fd52:	4634      	mov	r4, r6
 800fd54:	e6c6      	b.n	800fae4 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd56:	4f08      	ldr	r7, [pc, #32]	@ (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800fd58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd5a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800fd5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800fd60:	e7ee      	b.n	800fd40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd62:	2102      	movs	r1, #2
 800fd64:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800fd68:	f7ff fa82 	bl	800f270 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	f43f af2e 	beq.w	800fbce <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800fd72:	2001      	movs	r0, #1
 800fd74:	e72e      	b.n	800fbd4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800fd76:	bf00      	nop
 800fd78:	58024400 	.word	0x58024400

0800fd7c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800fd7c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fd7e:	f7ff f98f 	bl	800f0a0 <HAL_RCC_GetHCLKFreq>
 800fd82:	4b05      	ldr	r3, [pc, #20]	@ (800fd98 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800fd84:	4a05      	ldr	r2, [pc, #20]	@ (800fd9c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800fd86:	6a1b      	ldr	r3, [r3, #32]
 800fd88:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fd8c:	5cd3      	ldrb	r3, [r2, r3]
 800fd8e:	f003 031f 	and.w	r3, r3, #31
}
 800fd92:	40d8      	lsrs	r0, r3
 800fd94:	bd08      	pop	{r3, pc}
 800fd96:	bf00      	nop
 800fd98:	58024400 	.word	0x58024400
 800fd9c:	0802fd5c 	.word	0x0802fd5c

0800fda0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fda0:	494f      	ldr	r1, [pc, #316]	@ (800fee0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800fda2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fda4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fda6:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fda8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800fdaa:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fdae:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fdb2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800fdb4:	f000 8090 	beq.w	800fed8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fdb8:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fdbc:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fdc0:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdc4:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fdc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fdcc:	4353      	muls	r3, r2
    switch (pllsource)
 800fdce:	2c01      	cmp	r4, #1
 800fdd0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fdd4:	ee06 3a90 	vmov	s13, r3
 800fdd8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800fddc:	d06e      	beq.n	800febc <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800fdde:	2c02      	cmp	r4, #2
 800fde0:	d05e      	beq.n	800fea0 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800fde2:	2c00      	cmp	r4, #0
 800fde4:	d16a      	bne.n	800febc <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fde6:	680b      	ldr	r3, [r1, #0]
 800fde8:	069b      	lsls	r3, r3, #26
 800fdea:	d547      	bpl.n	800fe7c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fdec:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fdee:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fdf0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800fdf4:	4a3b      	ldr	r2, [pc, #236]	@ (800fee4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fdf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fdfa:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fdfc:	ee07 2a90 	vmov	s15, r2
 800fe00:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800fe04:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800fe08:	ee07 3a10 	vmov	s14, r3
 800fe0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe10:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fe14:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fe18:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800fe1c:	4a30      	ldr	r2, [pc, #192]	@ (800fee0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800fe1e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800fe20:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800fe24:	ee07 3a10 	vmov	s14, r3
 800fe28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fe30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fe34:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800fe38:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800fe3c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800fe3e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800fe42:	ee07 3a10 	vmov	s14, r3
 800fe46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe4a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fe4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fe52:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800fe56:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800fe5a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800fe5c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800fe60:	ee06 3a90 	vmov	s13, r3
 800fe64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fe68:	ee76 6a86 	vadd.f32	s13, s13, s12
 800fe6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fe70:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800fe74:	ee17 3a90 	vmov	r3, s15
 800fe78:	6083      	str	r3, [r0, #8]
}
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fe7c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800fe7e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800fee8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800fe82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe86:	ee07 3a90 	vmov	s15, r3
 800fe8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe92:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fe96:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800fe9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800fe9e:	e7bd      	b.n	800fe1c <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fea0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800fea2:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800feec <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800fea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feaa:	ee07 3a90 	vmov	s15, r3
 800feae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800feb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feb6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800feba:	e7ec      	b.n	800fe96 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800febc:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800febe:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800fef0 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800fec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fec6:	ee07 3a90 	vmov	s15, r3
 800feca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fed2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fed6:	e7de      	b.n	800fe96 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fed8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fedc:	e7cc      	b.n	800fe78 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800fede:	bf00      	nop
 800fee0:	58024400 	.word	0x58024400
 800fee4:	03d09000 	.word	0x03d09000
 800fee8:	4c742400 	.word	0x4c742400
 800feec:	4bbebc20 	.word	0x4bbebc20
 800fef0:	4a742400 	.word	0x4a742400

0800fef4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fef4:	494f      	ldr	r1, [pc, #316]	@ (8010034 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800fef6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fef8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fefa:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fefc:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800fefe:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ff02:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ff06:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800ff08:	f000 8090 	beq.w	801002c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ff0c:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ff10:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ff14:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ff18:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ff1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ff20:	4353      	muls	r3, r2
    switch (pllsource)
 800ff22:	2c01      	cmp	r4, #1
 800ff24:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ff28:	ee06 3a90 	vmov	s13, r3
 800ff2c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800ff30:	d06e      	beq.n	8010010 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800ff32:	2c02      	cmp	r4, #2
 800ff34:	d05e      	beq.n	800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800ff36:	2c00      	cmp	r4, #0
 800ff38:	d16a      	bne.n	8010010 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff3a:	680b      	ldr	r3, [r1, #0]
 800ff3c:	069b      	lsls	r3, r3, #26
 800ff3e:	d547      	bpl.n	800ffd0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff40:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ff42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff44:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800ff48:	4a3b      	ldr	r2, [pc, #236]	@ (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ff4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff4e:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ff50:	ee07 2a90 	vmov	s15, r2
 800ff54:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800ff58:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800ff5c:	ee07 3a10 	vmov	s14, r3
 800ff60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff64:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ff68:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ff6c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ff70:	4a30      	ldr	r2, [pc, #192]	@ (8010034 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800ff72:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800ff74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ff78:	ee07 3a10 	vmov	s14, r3
 800ff7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff80:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ff84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ff88:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ff8c:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ff90:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800ff92:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ff96:	ee07 3a10 	vmov	s14, r3
 800ff9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff9e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ffa2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ffa6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ffaa:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ffae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800ffb0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ffb4:	ee06 3a90 	vmov	s13, r3
 800ffb8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ffbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ffc0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ffc4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800ffc8:	ee17 3a90 	vmov	r3, s15
 800ffcc:	6083      	str	r3, [r0, #8]
}
 800ffce:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ffd0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ffd2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 801003c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800ffd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffda:	ee07 3a90 	vmov	s15, r3
 800ffde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffe6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ffea:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800ffee:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800fff2:	e7bd      	b.n	800ff70 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fff4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fff6:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8010040 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800fffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fffe:	ee07 3a90 	vmov	s15, r3
 8010002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801000a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801000e:	e7ec      	b.n	800ffea <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010010:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010012:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8010044 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8010016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801001a:	ee07 3a90 	vmov	s15, r3
 801001e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010026:	ee77 7a86 	vadd.f32	s15, s15, s12
 801002a:	e7de      	b.n	800ffea <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801002c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010030:	e7cc      	b.n	800ffcc <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8010032:	bf00      	nop
 8010034:	58024400 	.word	0x58024400
 8010038:	03d09000 	.word	0x03d09000
 801003c:	4c742400 	.word	0x4c742400
 8010040:	4bbebc20 	.word	0x4bbebc20
 8010044:	4a742400 	.word	0x4a742400

08010048 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801004c:	4604      	mov	r4, r0
 801004e:	b1f0      	cbz	r0, 801008e <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8010050:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010054:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010058:	b91b      	cbnz	r3, 8010062 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801005a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 801005e:	f7f1 fd03 	bl	8001a68 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010062:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8010064:	1d21      	adds	r1, r4, #4
 8010066:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010068:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801006c:	f000 fdd3 	bl	8010c16 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8010070:	6862      	ldr	r2, [r4, #4]
 8010072:	4629      	mov	r1, r5
 8010074:	6820      	ldr	r0, [r4, #0]
 8010076:	f000 fe06 	bl	8010c86 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801007a:	4a06      	ldr	r2, [pc, #24]	@ (8010094 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 801007c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 801007e:	6813      	ldr	r3, [r2, #0]
 8010080:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010084:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010086:	2301      	movs	r3, #1
 8010088:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 801008c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801008e:	2001      	movs	r0, #1
 8010090:	e7fc      	b.n	801008c <HAL_SDRAM_Init+0x44>
 8010092:	bf00      	nop
 8010094:	52004000 	.word	0x52004000

08010098 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8010098:	b510      	push	{r4, lr}
 801009a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 801009c:	f7f1 fd7e 	bl	8001b9c <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 80100a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80100a4:	f000 fe25 	bl	8010cf2 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80100a8:	2000      	movs	r0, #0
 80100aa:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 80100ae:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 80100b2:	bd10      	pop	{r4, pc}

080100b4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80100b4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80100b6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80100ba:	4605      	mov	r5, r0
 80100bc:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80100be:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80100c0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80100c2:	d010      	beq.n	80100e6 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80100c4:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80100c8:	2c01      	cmp	r4, #1
 80100ca:	d110      	bne.n	80100ee <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80100cc:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80100ce:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80100d0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80100d4:	f000 fe1c 	bl	8010d10 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80100d8:	6833      	ldr	r3, [r6, #0]
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d104      	bne.n	80100e8 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80100de:	2305      	movs	r3, #5
 80100e0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80100e4:	2000      	movs	r0, #0
}
 80100e6:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80100e8:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 80100ec:	e7fa      	b.n	80100e4 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80100ee:	2001      	movs	r0, #1
 80100f0:	e7f9      	b.n	80100e6 <HAL_SDRAM_SendCommand+0x32>

080100f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80100f2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80100f4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80100f8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80100fa:	2b02      	cmp	r3, #2
 80100fc:	b2d8      	uxtb	r0, r3
 80100fe:	d00d      	beq.n	801011c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8010100:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010104:	2b01      	cmp	r3, #1
 8010106:	b2dd      	uxtb	r5, r3
 8010108:	d109      	bne.n	801011e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801010a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801010c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801010e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8010112:	f000 fe0f 	bl	8010d34 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8010116:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010118:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 801011c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801011e:	2001      	movs	r0, #1
 8010120:	e7fc      	b.n	801011c <HAL_SDRAM_ProgramRefreshRate+0x2a>

08010122 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010122:	4770      	bx	lr

08010124 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010124:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8010128:	2b01      	cmp	r3, #1
 801012a:	d12f      	bne.n	801018c <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801012c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801012e:	4a18      	ldr	r2, [pc, #96]	@ (8010190 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8010130:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010134:	6803      	ldr	r3, [r0, #0]
 8010136:	4293      	cmp	r3, r2
 8010138:	d01a      	beq.n	8010170 <HAL_TIM_Base_Start+0x4c>
 801013a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801013e:	d017      	beq.n	8010170 <HAL_TIM_Base_Start+0x4c>
 8010140:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8010144:	4293      	cmp	r3, r2
 8010146:	d013      	beq.n	8010170 <HAL_TIM_Base_Start+0x4c>
 8010148:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801014c:	4293      	cmp	r3, r2
 801014e:	d00f      	beq.n	8010170 <HAL_TIM_Base_Start+0x4c>
 8010150:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010154:	4293      	cmp	r3, r2
 8010156:	d00b      	beq.n	8010170 <HAL_TIM_Base_Start+0x4c>
 8010158:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 801015c:	4293      	cmp	r3, r2
 801015e:	d007      	beq.n	8010170 <HAL_TIM_Base_Start+0x4c>
 8010160:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8010164:	4293      	cmp	r3, r2
 8010166:	d003      	beq.n	8010170 <HAL_TIM_Base_Start+0x4c>
 8010168:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 801016c:	4293      	cmp	r3, r2
 801016e:	d107      	bne.n	8010180 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010170:	6899      	ldr	r1, [r3, #8]
 8010172:	4a08      	ldr	r2, [pc, #32]	@ (8010194 <HAL_TIM_Base_Start+0x70>)
 8010174:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010176:	2a06      	cmp	r2, #6
 8010178:	d006      	beq.n	8010188 <HAL_TIM_Base_Start+0x64>
 801017a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801017e:	d003      	beq.n	8010188 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	f042 0201 	orr.w	r2, r2, #1
 8010186:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8010188:	2000      	movs	r0, #0
 801018a:	4770      	bx	lr
    return HAL_ERROR;
 801018c:	2001      	movs	r0, #1
}
 801018e:	4770      	bx	lr
 8010190:	40010000 	.word	0x40010000
 8010194:	00010007 	.word	0x00010007

08010198 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010198:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801019c:	2b01      	cmp	r3, #1
 801019e:	d133      	bne.n	8010208 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101a0:	2302      	movs	r3, #2
 80101a2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80101a6:	6803      	ldr	r3, [r0, #0]
 80101a8:	68da      	ldr	r2, [r3, #12]
 80101aa:	f042 0201 	orr.w	r2, r2, #1
 80101ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80101b0:	4a16      	ldr	r2, [pc, #88]	@ (801020c <HAL_TIM_Base_Start_IT+0x74>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d01a      	beq.n	80101ec <HAL_TIM_Base_Start_IT+0x54>
 80101b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101ba:	d017      	beq.n	80101ec <HAL_TIM_Base_Start_IT+0x54>
 80101bc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d013      	beq.n	80101ec <HAL_TIM_Base_Start_IT+0x54>
 80101c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d00f      	beq.n	80101ec <HAL_TIM_Base_Start_IT+0x54>
 80101cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d00b      	beq.n	80101ec <HAL_TIM_Base_Start_IT+0x54>
 80101d4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80101d8:	4293      	cmp	r3, r2
 80101da:	d007      	beq.n	80101ec <HAL_TIM_Base_Start_IT+0x54>
 80101dc:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d003      	beq.n	80101ec <HAL_TIM_Base_Start_IT+0x54>
 80101e4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d107      	bne.n	80101fc <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101ec:	6899      	ldr	r1, [r3, #8]
 80101ee:	4a08      	ldr	r2, [pc, #32]	@ (8010210 <HAL_TIM_Base_Start_IT+0x78>)
 80101f0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101f2:	2a06      	cmp	r2, #6
 80101f4:	d006      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0x6c>
 80101f6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80101fa:	d003      	beq.n	8010204 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	f042 0201 	orr.w	r2, r2, #1
 8010202:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8010204:	2000      	movs	r0, #0
 8010206:	4770      	bx	lr
    return HAL_ERROR;
 8010208:	2001      	movs	r0, #1
}
 801020a:	4770      	bx	lr
 801020c:	40010000 	.word	0x40010000
 8010210:	00010007 	.word	0x00010007

08010214 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8010214:	4770      	bx	lr

08010216 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8010216:	4770      	bx	lr

08010218 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8010218:	4770      	bx	lr

0801021a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 801021a:	4770      	bx	lr

0801021c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 801021c:	6803      	ldr	r3, [r0, #0]
{
 801021e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8010220:	68dd      	ldr	r5, [r3, #12]
{
 8010222:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 8010224:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010226:	07b2      	lsls	r2, r6, #30
 8010228:	d50d      	bpl.n	8010246 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801022a:	07a9      	lsls	r1, r5, #30
 801022c:	d50b      	bpl.n	8010246 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801022e:	f06f 0202 	mvn.w	r2, #2
 8010232:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010234:	2201      	movs	r2, #1
 8010236:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	079a      	lsls	r2, r3, #30
 801023c:	d075      	beq.n	801032a <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 801023e:	f7ff ffea 	bl	8010216 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010242:	2300      	movs	r3, #0
 8010244:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010246:	0773      	lsls	r3, r6, #29
 8010248:	d510      	bpl.n	801026c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801024a:	0768      	lsls	r0, r5, #29
 801024c:	d50e      	bpl.n	801026c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8010254:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010258:	2202      	movs	r2, #2
 801025a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801025c:	699b      	ldr	r3, [r3, #24]
 801025e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8010262:	d068      	beq.n	8010336 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8010264:	f7ff ffd7 	bl	8010216 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010268:	2300      	movs	r3, #0
 801026a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801026c:	0731      	lsls	r1, r6, #28
 801026e:	d50f      	bpl.n	8010290 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010270:	072a      	lsls	r2, r5, #28
 8010272:	d50d      	bpl.n	8010290 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 801027a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801027c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801027e:	2204      	movs	r2, #4
 8010280:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010282:	69db      	ldr	r3, [r3, #28]
 8010284:	079b      	lsls	r3, r3, #30
 8010286:	d05c      	beq.n	8010342 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8010288:	f7ff ffc5 	bl	8010216 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801028c:	2300      	movs	r3, #0
 801028e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010290:	06f1      	lsls	r1, r6, #27
 8010292:	d510      	bpl.n	80102b6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010294:	06ea      	lsls	r2, r5, #27
 8010296:	d50e      	bpl.n	80102b6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010298:	6823      	ldr	r3, [r4, #0]
 801029a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 801029e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80102a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80102a2:	2208      	movs	r2, #8
 80102a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80102a6:	69db      	ldr	r3, [r3, #28]
 80102a8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80102ac:	d04f      	beq.n	801034e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 80102ae:	f7ff ffb2 	bl	8010216 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102b2:	2300      	movs	r3, #0
 80102b4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80102b6:	07f3      	lsls	r3, r6, #31
 80102b8:	d508      	bpl.n	80102cc <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80102ba:	07e8      	lsls	r0, r5, #31
 80102bc:	d506      	bpl.n	80102cc <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80102c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80102c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80102c8:	f7f1 f926 	bl	8001518 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80102cc:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 80102d0:	d008      	beq.n	80102e4 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80102d2:	0629      	lsls	r1, r5, #24
 80102d4:	d506      	bpl.n	80102e4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80102d6:	6823      	ldr	r3, [r4, #0]
 80102d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 80102dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80102de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80102e0:	f000 f8d9 	bl	8010496 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80102e4:	05f2      	lsls	r2, r6, #23
 80102e6:	d508      	bpl.n	80102fa <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80102e8:	062b      	lsls	r3, r5, #24
 80102ea:	d506      	bpl.n	80102fa <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80102ec:	6823      	ldr	r3, [r4, #0]
 80102ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 80102f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80102f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80102f6:	f000 f8cf 	bl	8010498 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80102fa:	0670      	lsls	r0, r6, #25
 80102fc:	d508      	bpl.n	8010310 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80102fe:	0669      	lsls	r1, r5, #25
 8010300:	d506      	bpl.n	8010310 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010302:	6823      	ldr	r3, [r4, #0]
 8010304:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8010308:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801030a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801030c:	f7ff ff85 	bl	801021a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010310:	06b2      	lsls	r2, r6, #26
 8010312:	d522      	bpl.n	801035a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010314:	06ab      	lsls	r3, r5, #26
 8010316:	d520      	bpl.n	801035a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801031e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010320:	611a      	str	r2, [r3, #16]
}
 8010322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8010326:	f000 b8b5 	b.w	8010494 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801032a:	f7ff ff73 	bl	8010214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801032e:	4620      	mov	r0, r4
 8010330:	f7ff ff72 	bl	8010218 <HAL_TIM_PWM_PulseFinishedCallback>
 8010334:	e785      	b.n	8010242 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010336:	f7ff ff6d 	bl	8010214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801033a:	4620      	mov	r0, r4
 801033c:	f7ff ff6c 	bl	8010218 <HAL_TIM_PWM_PulseFinishedCallback>
 8010340:	e792      	b.n	8010268 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010342:	f7ff ff67 	bl	8010214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010346:	4620      	mov	r0, r4
 8010348:	f7ff ff66 	bl	8010218 <HAL_TIM_PWM_PulseFinishedCallback>
 801034c:	e79e      	b.n	801028c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801034e:	f7ff ff61 	bl	8010214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010352:	4620      	mov	r0, r4
 8010354:	f7ff ff60 	bl	8010218 <HAL_TIM_PWM_PulseFinishedCallback>
 8010358:	e7ab      	b.n	80102b2 <HAL_TIM_IRQHandler+0x96>
}
 801035a:	bd70      	pop	{r4, r5, r6, pc}

0801035c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801035c:	4a33      	ldr	r2, [pc, #204]	@ (801042c <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 801035e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010360:	4290      	cmp	r0, r2
 8010362:	d012      	beq.n	801038a <TIM_Base_SetConfig+0x2e>
 8010364:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8010368:	d00f      	beq.n	801038a <TIM_Base_SetConfig+0x2e>
 801036a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801036e:	4290      	cmp	r0, r2
 8010370:	d00b      	beq.n	801038a <TIM_Base_SetConfig+0x2e>
 8010372:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010376:	4290      	cmp	r0, r2
 8010378:	d007      	beq.n	801038a <TIM_Base_SetConfig+0x2e>
 801037a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801037e:	4290      	cmp	r0, r2
 8010380:	d003      	beq.n	801038a <TIM_Base_SetConfig+0x2e>
 8010382:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8010386:	4290      	cmp	r0, r2
 8010388:	d119      	bne.n	80103be <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 801038a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801038c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8010390:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010392:	4a26      	ldr	r2, [pc, #152]	@ (801042c <TIM_Base_SetConfig+0xd0>)
 8010394:	4290      	cmp	r0, r2
 8010396:	d01d      	beq.n	80103d4 <TIM_Base_SetConfig+0x78>
 8010398:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801039c:	d01a      	beq.n	80103d4 <TIM_Base_SetConfig+0x78>
 801039e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80103a2:	4290      	cmp	r0, r2
 80103a4:	d016      	beq.n	80103d4 <TIM_Base_SetConfig+0x78>
 80103a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80103aa:	4290      	cmp	r0, r2
 80103ac:	d012      	beq.n	80103d4 <TIM_Base_SetConfig+0x78>
 80103ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80103b2:	4290      	cmp	r0, r2
 80103b4:	d00e      	beq.n	80103d4 <TIM_Base_SetConfig+0x78>
 80103b6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80103ba:	4290      	cmp	r0, r2
 80103bc:	d00a      	beq.n	80103d4 <TIM_Base_SetConfig+0x78>
 80103be:	4a1c      	ldr	r2, [pc, #112]	@ (8010430 <TIM_Base_SetConfig+0xd4>)
 80103c0:	4290      	cmp	r0, r2
 80103c2:	d007      	beq.n	80103d4 <TIM_Base_SetConfig+0x78>
 80103c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80103c8:	4290      	cmp	r0, r2
 80103ca:	d003      	beq.n	80103d4 <TIM_Base_SetConfig+0x78>
 80103cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80103d0:	4290      	cmp	r0, r2
 80103d2:	d103      	bne.n	80103dc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103d8:	68ca      	ldr	r2, [r1, #12]
 80103da:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103dc:	694a      	ldr	r2, [r1, #20]
 80103de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80103e2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80103e4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80103e6:	688b      	ldr	r3, [r1, #8]
 80103e8:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103ea:	680b      	ldr	r3, [r1, #0]
 80103ec:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103ee:	4b0f      	ldr	r3, [pc, #60]	@ (801042c <TIM_Base_SetConfig+0xd0>)
 80103f0:	4298      	cmp	r0, r3
 80103f2:	d00f      	beq.n	8010414 <TIM_Base_SetConfig+0xb8>
 80103f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80103f8:	4298      	cmp	r0, r3
 80103fa:	d00b      	beq.n	8010414 <TIM_Base_SetConfig+0xb8>
 80103fc:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8010400:	4298      	cmp	r0, r3
 8010402:	d007      	beq.n	8010414 <TIM_Base_SetConfig+0xb8>
 8010404:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010408:	4298      	cmp	r0, r3
 801040a:	d003      	beq.n	8010414 <TIM_Base_SetConfig+0xb8>
 801040c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010410:	4298      	cmp	r0, r3
 8010412:	d101      	bne.n	8010418 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010414:	690b      	ldr	r3, [r1, #16]
 8010416:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010418:	2301      	movs	r3, #1
 801041a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801041c:	6903      	ldr	r3, [r0, #16]
 801041e:	07db      	lsls	r3, r3, #31
 8010420:	d503      	bpl.n	801042a <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010422:	6903      	ldr	r3, [r0, #16]
 8010424:	f023 0301 	bic.w	r3, r3, #1
 8010428:	6103      	str	r3, [r0, #16]
  }
}
 801042a:	4770      	bx	lr
 801042c:	40010000 	.word	0x40010000
 8010430:	40014000 	.word	0x40014000

08010434 <HAL_TIM_Base_Init>:
{
 8010434:	b510      	push	{r4, lr}
  if (htim == NULL)
 8010436:	4604      	mov	r4, r0
 8010438:	b350      	cbz	r0, 8010490 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 801043a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801043e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8010442:	b91b      	cbnz	r3, 801044c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8010444:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8010448:	f7ff fe6b 	bl	8010122 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 801044c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801044e:	6820      	ldr	r0, [r4, #0]
 8010450:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8010452:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010456:	f7ff ff81 	bl	801035c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801045a:	2301      	movs	r3, #1
  return HAL_OK;
 801045c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801045e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010462:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8010466:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 801046a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801046e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8010472:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801047a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801047e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8010482:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8010486:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 801048a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 801048e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010490:	2001      	movs	r0, #1
 8010492:	e7fc      	b.n	801048e <HAL_TIM_Base_Init+0x5a>

08010494 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8010494:	4770      	bx	lr

08010496 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8010496:	4770      	bx	lr

08010498 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8010498:	4770      	bx	lr
	...

0801049c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801049c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801049e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a0:	e852 3f00 	ldrex	r3, [r2]
 80104a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80104ac:	6802      	ldr	r2, [r0, #0]
 80104ae:	2900      	cmp	r1, #0
 80104b0:	d1f5      	bne.n	801049e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104b2:	4c0f      	ldr	r4, [pc, #60]	@ (80104f0 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b4:	f102 0308 	add.w	r3, r2, #8
 80104b8:	e853 3f00 	ldrex	r3, [r3]
 80104bc:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104be:	f102 0c08 	add.w	ip, r2, #8
 80104c2:	e84c 3100 	strex	r1, r3, [ip]
 80104c6:	2900      	cmp	r1, #0
 80104c8:	d1f4      	bne.n	80104b4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104ca:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d107      	bne.n	80104e0 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d0:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d8:	e842 3100 	strex	r1, r3, [r2]
 80104dc:	2900      	cmp	r1, #0
 80104de:	d1f7      	bne.n	80104d0 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104e0:	2320      	movs	r3, #32
 80104e2:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104e6:	2300      	movs	r3, #0
 80104e8:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104ea:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80104ec:	bd10      	pop	{r4, pc}
 80104ee:	bf00      	nop
 80104f0:	effffffe 	.word	0xeffffffe

080104f4 <UART_SetConfig>:
{
 80104f4:	b530      	push	{r4, r5, lr}
 80104f6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80104f8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80104fa:	69c0      	ldr	r0, [r0, #28]
{
 80104fc:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80104fe:	6921      	ldr	r1, [r4, #16]
 8010500:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010502:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010504:	430a      	orrs	r2, r1
 8010506:	6961      	ldr	r1, [r4, #20]
 8010508:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801050a:	499c      	ldr	r1, [pc, #624]	@ (801077c <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801050c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801050e:	4029      	ands	r1, r5
 8010510:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010512:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010514:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010516:	685a      	ldr	r2, [r3, #4]
 8010518:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 801051c:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801051e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010520:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010522:	4a97      	ldr	r2, [pc, #604]	@ (8010780 <UART_SetConfig+0x28c>)
 8010524:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8010526:	bf1c      	itt	ne
 8010528:	6a22      	ldrne	r2, [r4, #32]
 801052a:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801052c:	689a      	ldr	r2, [r3, #8]
 801052e:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8010532:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8010536:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010538:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801053a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801053c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801053e:	f022 020f 	bic.w	r2, r2, #15
 8010542:	430a      	orrs	r2, r1
 8010544:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010546:	4a8f      	ldr	r2, [pc, #572]	@ (8010784 <UART_SetConfig+0x290>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d128      	bne.n	801059e <UART_SetConfig+0xaa>
 801054c:	4b8e      	ldr	r3, [pc, #568]	@ (8010788 <UART_SetConfig+0x294>)
 801054e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010550:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010554:	2b18      	cmp	r3, #24
 8010556:	f000 812f 	beq.w	80107b8 <UART_SetConfig+0x2c4>
 801055a:	d814      	bhi.n	8010586 <UART_SetConfig+0x92>
 801055c:	2b08      	cmp	r3, #8
 801055e:	f000 8154 	beq.w	801080a <UART_SetConfig+0x316>
 8010562:	2b10      	cmp	r3, #16
 8010564:	f000 8102 	beq.w	801076c <UART_SetConfig+0x278>
 8010568:	2b00      	cmp	r3, #0
 801056a:	f000 80f9 	beq.w	8010760 <UART_SetConfig+0x26c>
 801056e:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010570:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8010574:	f040 80b4 	bne.w	80106e0 <UART_SetConfig+0x1ec>
    switch (clocksource)
 8010578:	2b08      	cmp	r3, #8
 801057a:	d846      	bhi.n	801060a <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801057c:	4668      	mov	r0, sp
 801057e:	f7ff fc0f 	bl	800fda0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010582:	9801      	ldr	r0, [sp, #4]
        break;
 8010584:	e0e9      	b.n	801075a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010586:	2b20      	cmp	r3, #32
 8010588:	f000 80dd 	beq.w	8010746 <UART_SetConfig+0x252>
 801058c:	2b28      	cmp	r3, #40	@ 0x28
 801058e:	d1ee      	bne.n	801056e <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010590:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8010594:	f000 811d 	beq.w	80107d2 <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 8010598:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 801059c:	e0be      	b.n	801071c <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801059e:	4a7b      	ldr	r2, [pc, #492]	@ (801078c <UART_SetConfig+0x298>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d115      	bne.n	80105d0 <UART_SetConfig+0xdc>
 80105a4:	4b78      	ldr	r3, [pc, #480]	@ (8010788 <UART_SetConfig+0x294>)
 80105a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105a8:	f003 0307 	and.w	r3, r3, #7
 80105ac:	2b05      	cmp	r3, #5
 80105ae:	d82c      	bhi.n	801060a <UART_SetConfig+0x116>
 80105b0:	a201      	add	r2, pc, #4	@ (adr r2, 80105b8 <UART_SetConfig+0xc4>)
 80105b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b6:	bf00      	nop
 80105b8:	08010751 	.word	0x08010751
 80105bc:	080106dd 	.word	0x080106dd
 80105c0:	0801076d 	.word	0x0801076d
 80105c4:	080107b9 	.word	0x080107b9
 80105c8:	08010747 	.word	0x08010747
 80105cc:	08010591 	.word	0x08010591
 80105d0:	4a6f      	ldr	r2, [pc, #444]	@ (8010790 <UART_SetConfig+0x29c>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d0e6      	beq.n	80105a4 <UART_SetConfig+0xb0>
 80105d6:	4a6f      	ldr	r2, [pc, #444]	@ (8010794 <UART_SetConfig+0x2a0>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d0e3      	beq.n	80105a4 <UART_SetConfig+0xb0>
 80105dc:	4a6e      	ldr	r2, [pc, #440]	@ (8010798 <UART_SetConfig+0x2a4>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d0e0      	beq.n	80105a4 <UART_SetConfig+0xb0>
 80105e2:	4a6e      	ldr	r2, [pc, #440]	@ (801079c <UART_SetConfig+0x2a8>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d118      	bne.n	801061a <UART_SetConfig+0x126>
 80105e8:	4b67      	ldr	r3, [pc, #412]	@ (8010788 <UART_SetConfig+0x294>)
 80105ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80105f0:	2b18      	cmp	r3, #24
 80105f2:	f000 80e1 	beq.w	80107b8 <UART_SetConfig+0x2c4>
 80105f6:	d80a      	bhi.n	801060e <UART_SetConfig+0x11a>
 80105f8:	2b08      	cmp	r3, #8
 80105fa:	f000 8106 	beq.w	801080a <UART_SetConfig+0x316>
 80105fe:	2b10      	cmp	r3, #16
 8010600:	f000 80b4 	beq.w	801076c <UART_SetConfig+0x278>
 8010604:	2b00      	cmp	r3, #0
 8010606:	f000 80ab 	beq.w	8010760 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 801060a:	2001      	movs	r0, #1
 801060c:	e049      	b.n	80106a2 <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801060e:	2b20      	cmp	r3, #32
 8010610:	f000 8099 	beq.w	8010746 <UART_SetConfig+0x252>
 8010614:	2b28      	cmp	r3, #40	@ 0x28
 8010616:	d0bb      	beq.n	8010590 <UART_SetConfig+0x9c>
 8010618:	e7f7      	b.n	801060a <UART_SetConfig+0x116>
 801061a:	4a61      	ldr	r2, [pc, #388]	@ (80107a0 <UART_SetConfig+0x2ac>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d0c1      	beq.n	80105a4 <UART_SetConfig+0xb0>
 8010620:	4a60      	ldr	r2, [pc, #384]	@ (80107a4 <UART_SetConfig+0x2b0>)
 8010622:	4293      	cmp	r3, r2
 8010624:	d0be      	beq.n	80105a4 <UART_SetConfig+0xb0>
 8010626:	4a56      	ldr	r2, [pc, #344]	@ (8010780 <UART_SetConfig+0x28c>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d1ee      	bne.n	801060a <UART_SetConfig+0x116>
 801062c:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8010630:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8010632:	f003 0307 	and.w	r3, r3, #7
 8010636:	2b05      	cmp	r3, #5
 8010638:	d8e7      	bhi.n	801060a <UART_SetConfig+0x116>
 801063a:	e8df f003 	tbb	[pc, r3]
 801063e:	2b49      	.short	0x2b49
 8010640:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 8010644:	4858      	ldr	r0, [pc, #352]	@ (80107a8 <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010646:	4b59      	ldr	r3, [pc, #356]	@ (80107ac <UART_SetConfig+0x2b8>)
 8010648:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801064a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801064c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010650:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010654:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010658:	4299      	cmp	r1, r3
 801065a:	d8d6      	bhi.n	801060a <UART_SetConfig+0x116>
 801065c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8010660:	d8d3      	bhi.n	801060a <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010662:	2300      	movs	r3, #0
 8010664:	4619      	mov	r1, r3
 8010666:	f7f0 f84f 	bl	8000708 <__aeabi_uldivmod>
 801066a:	462a      	mov	r2, r5
 801066c:	0209      	lsls	r1, r1, #8
 801066e:	086b      	lsrs	r3, r5, #1
 8010670:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8010674:	0200      	lsls	r0, r0, #8
 8010676:	18c0      	adds	r0, r0, r3
 8010678:	f04f 0300 	mov.w	r3, #0
 801067c:	f141 0100 	adc.w	r1, r1, #0
 8010680:	f7f0 f842 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010684:	4b4a      	ldr	r3, [pc, #296]	@ (80107b0 <UART_SetConfig+0x2bc>)
 8010686:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 801068a:	429a      	cmp	r2, r3
 801068c:	d8bd      	bhi.n	801060a <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 801068e:	6823      	ldr	r3, [r4, #0]
 8010690:	60d8      	str	r0, [r3, #12]
 8010692:	e005      	b.n	80106a0 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010694:	4668      	mov	r0, sp
 8010696:	f7ff fb83 	bl	800fda0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801069a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 801069c:	2800      	cmp	r0, #0
 801069e:	d1d2      	bne.n	8010646 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 80106a0:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80106a2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80106a6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80106a8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80106aa:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 80106ae:	b007      	add	sp, #28
 80106b0:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106b2:	a803      	add	r0, sp, #12
 80106b4:	f7ff fc1e 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80106b8:	9804      	ldr	r0, [sp, #16]
        break;
 80106ba:	e7ef      	b.n	801069c <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80106bc:	6813      	ldr	r3, [r2, #0]
 80106be:	483d      	ldr	r0, [pc, #244]	@ (80107b4 <UART_SetConfig+0x2c0>)
 80106c0:	f013 0f20 	tst.w	r3, #32
 80106c4:	d0bf      	beq.n	8010646 <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80106c6:	6813      	ldr	r3, [r2, #0]
 80106c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80106cc:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80106ce:	e7ba      	b.n	8010646 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80106d0:	f7ff fb54 	bl	800fd7c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80106d4:	e7e2      	b.n	801069c <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80106d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80106da:	e7b4      	b.n	8010646 <UART_SetConfig+0x152>
 80106dc:	2304      	movs	r3, #4
 80106de:	e747      	b.n	8010570 <UART_SetConfig+0x7c>
    switch (clocksource)
 80106e0:	2b08      	cmp	r3, #8
 80106e2:	d892      	bhi.n	801060a <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106e4:	4668      	mov	r0, sp
 80106e6:	f7ff fb5b 	bl	800fda0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80106ea:	9801      	ldr	r0, [sp, #4]
        break;
 80106ec:	e001      	b.n	80106f2 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 80106ee:	f7fe fcf9 	bl	800f0e4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d0d4      	beq.n	80106a0 <UART_SetConfig+0x1ac>
 80106f6:	e011      	b.n	801071c <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 80106f8:	f7fe fd06 	bl	800f108 <HAL_RCC_GetPCLK2Freq>
        break;
 80106fc:	e7f9      	b.n	80106f2 <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106fe:	a803      	add	r0, sp, #12
 8010700:	f7ff fbf8 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010704:	9804      	ldr	r0, [sp, #16]
        break;
 8010706:	e7f4      	b.n	80106f2 <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010708:	4b1f      	ldr	r3, [pc, #124]	@ (8010788 <UART_SetConfig+0x294>)
 801070a:	482a      	ldr	r0, [pc, #168]	@ (80107b4 <UART_SetConfig+0x2c0>)
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	f012 0f20 	tst.w	r2, #32
 8010712:	d003      	beq.n	801071c <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801071a:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801071c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801071e:	4b23      	ldr	r3, [pc, #140]	@ (80107ac <UART_SetConfig+0x2b8>)
 8010720:	6862      	ldr	r2, [r4, #4]
 8010722:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8010726:	fbb0 f3f3 	udiv	r3, r0, r3
 801072a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801072e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010732:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8010736:	f1a3 0110 	sub.w	r1, r3, #16
 801073a:	4291      	cmp	r1, r2
 801073c:	f63f af65 	bhi.w	801060a <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010740:	6822      	ldr	r2, [r4, #0]
 8010742:	60d3      	str	r3, [r2, #12]
 8010744:	e7ac      	b.n	80106a0 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010746:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801074a:	4817      	ldr	r0, [pc, #92]	@ (80107a8 <UART_SetConfig+0x2b4>)
 801074c:	d1e6      	bne.n	801071c <UART_SetConfig+0x228>
 801074e:	e040      	b.n	80107d2 <UART_SetConfig+0x2de>
 8010750:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8010754:	d1cb      	bne.n	80106ee <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010756:	f7fe fcc5 	bl	800f0e4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 801075a:	2800      	cmp	r0, #0
 801075c:	d0a0      	beq.n	80106a0 <UART_SetConfig+0x1ac>
 801075e:	e038      	b.n	80107d2 <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010760:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8010764:	d1c8      	bne.n	80106f8 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010766:	f7fe fccf 	bl	800f108 <HAL_RCC_GetPCLK2Freq>
        break;
 801076a:	e7f6      	b.n	801075a <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801076c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8010770:	d1c5      	bne.n	80106fe <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010772:	a803      	add	r0, sp, #12
 8010774:	f7ff fbbe 	bl	800fef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010778:	9804      	ldr	r0, [sp, #16]
        break;
 801077a:	e7ee      	b.n	801075a <UART_SetConfig+0x266>
 801077c:	cfff69f3 	.word	0xcfff69f3
 8010780:	58000c00 	.word	0x58000c00
 8010784:	40011000 	.word	0x40011000
 8010788:	58024400 	.word	0x58024400
 801078c:	40004400 	.word	0x40004400
 8010790:	40004800 	.word	0x40004800
 8010794:	40004c00 	.word	0x40004c00
 8010798:	40005000 	.word	0x40005000
 801079c:	40011400 	.word	0x40011400
 80107a0:	40007800 	.word	0x40007800
 80107a4:	40007c00 	.word	0x40007c00
 80107a8:	003d0900 	.word	0x003d0900
 80107ac:	0802ffc8 	.word	0x0802ffc8
 80107b0:	000ffcff 	.word	0x000ffcff
 80107b4:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80107b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80107bc:	d1a4      	bne.n	8010708 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80107be:	4b15      	ldr	r3, [pc, #84]	@ (8010814 <UART_SetConfig+0x320>)
 80107c0:	4815      	ldr	r0, [pc, #84]	@ (8010818 <UART_SetConfig+0x324>)
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	f012 0f20 	tst.w	r2, #32
 80107c8:	d003      	beq.n	80107d2 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80107d0:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107d2:	4b12      	ldr	r3, [pc, #72]	@ (801081c <UART_SetConfig+0x328>)
 80107d4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80107d6:	6861      	ldr	r1, [r4, #4]
 80107d8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80107dc:	084b      	lsrs	r3, r1, #1
 80107de:	fbb0 f2f2 	udiv	r2, r0, r2
 80107e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107e6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107ea:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107ee:	f1a3 0110 	sub.w	r1, r3, #16
 80107f2:	4291      	cmp	r1, r2
 80107f4:	f63f af09 	bhi.w	801060a <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80107f8:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107fc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8010800:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010802:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8010804:	4313      	orrs	r3, r2
 8010806:	60cb      	str	r3, [r1, #12]
 8010808:	e74a      	b.n	80106a0 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801080a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801080e:	f47f af69 	bne.w	80106e4 <UART_SetConfig+0x1f0>
 8010812:	e6b3      	b.n	801057c <UART_SetConfig+0x88>
 8010814:	58024400 	.word	0x58024400
 8010818:	03d09000 	.word	0x03d09000
 801081c:	0802ffc8 	.word	0x0802ffc8

08010820 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010820:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010822:	071a      	lsls	r2, r3, #28
{
 8010824:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010826:	d506      	bpl.n	8010836 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010828:	6801      	ldr	r1, [r0, #0]
 801082a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801082c:	684a      	ldr	r2, [r1, #4]
 801082e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010832:	4322      	orrs	r2, r4
 8010834:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010836:	07dc      	lsls	r4, r3, #31
 8010838:	d506      	bpl.n	8010848 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801083a:	6801      	ldr	r1, [r0, #0]
 801083c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 801083e:	684a      	ldr	r2, [r1, #4]
 8010840:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8010844:	4322      	orrs	r2, r4
 8010846:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010848:	0799      	lsls	r1, r3, #30
 801084a:	d506      	bpl.n	801085a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801084c:	6801      	ldr	r1, [r0, #0]
 801084e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8010850:	684a      	ldr	r2, [r1, #4]
 8010852:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8010856:	4322      	orrs	r2, r4
 8010858:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801085a:	075a      	lsls	r2, r3, #29
 801085c:	d506      	bpl.n	801086c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801085e:	6801      	ldr	r1, [r0, #0]
 8010860:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8010862:	684a      	ldr	r2, [r1, #4]
 8010864:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010868:	4322      	orrs	r2, r4
 801086a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801086c:	06dc      	lsls	r4, r3, #27
 801086e:	d506      	bpl.n	801087e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010870:	6801      	ldr	r1, [r0, #0]
 8010872:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8010874:	688a      	ldr	r2, [r1, #8]
 8010876:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801087a:	4322      	orrs	r2, r4
 801087c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801087e:	0699      	lsls	r1, r3, #26
 8010880:	d506      	bpl.n	8010890 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010882:	6801      	ldr	r1, [r0, #0]
 8010884:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8010886:	688a      	ldr	r2, [r1, #8]
 8010888:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801088c:	4322      	orrs	r2, r4
 801088e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010890:	065a      	lsls	r2, r3, #25
 8010892:	d510      	bpl.n	80108b6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010894:	6801      	ldr	r1, [r0, #0]
 8010896:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8010898:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801089a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801089e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80108a2:	ea42 0204 	orr.w	r2, r2, r4
 80108a6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80108a8:	d105      	bne.n	80108b6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80108aa:	684a      	ldr	r2, [r1, #4]
 80108ac:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80108ae:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80108b2:	4322      	orrs	r2, r4
 80108b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80108b6:	061b      	lsls	r3, r3, #24
 80108b8:	d506      	bpl.n	80108c8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80108ba:	6802      	ldr	r2, [r0, #0]
 80108bc:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80108be:	6853      	ldr	r3, [r2, #4]
 80108c0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80108c4:	430b      	orrs	r3, r1
 80108c6:	6053      	str	r3, [r2, #4]
}
 80108c8:	bd10      	pop	{r4, pc}

080108ca <UART_WaitOnFlagUntilTimeout>:
{
 80108ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108d2:	4604      	mov	r4, r0
 80108d4:	460d      	mov	r5, r1
 80108d6:	4617      	mov	r7, r2
 80108d8:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108da:	6822      	ldr	r2, [r4, #0]
 80108dc:	69d3      	ldr	r3, [r2, #28]
 80108de:	ea35 0303 	bics.w	r3, r5, r3
 80108e2:	bf0c      	ite	eq
 80108e4:	2301      	moveq	r3, #1
 80108e6:	2300      	movne	r3, #0
 80108e8:	42bb      	cmp	r3, r7
 80108ea:	d001      	beq.n	80108f0 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80108ec:	2000      	movs	r0, #0
 80108ee:	e022      	b.n	8010936 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80108f0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80108f4:	d0f2      	beq.n	80108dc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80108f6:	f7fa fd61 	bl	800b3bc <HAL_GetTick>
 80108fa:	eba0 0008 	sub.w	r0, r0, r8
 80108fe:	4548      	cmp	r0, r9
 8010900:	d829      	bhi.n	8010956 <UART_WaitOnFlagUntilTimeout+0x8c>
 8010902:	f1b9 0f00 	cmp.w	r9, #0
 8010906:	d026      	beq.n	8010956 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010908:	6821      	ldr	r1, [r4, #0]
 801090a:	680b      	ldr	r3, [r1, #0]
 801090c:	075a      	lsls	r2, r3, #29
 801090e:	d5e4      	bpl.n	80108da <UART_WaitOnFlagUntilTimeout+0x10>
 8010910:	2d80      	cmp	r5, #128	@ 0x80
 8010912:	d0e2      	beq.n	80108da <UART_WaitOnFlagUntilTimeout+0x10>
 8010914:	2d40      	cmp	r5, #64	@ 0x40
 8010916:	d0e0      	beq.n	80108da <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010918:	69ce      	ldr	r6, [r1, #28]
 801091a:	f016 0608 	ands.w	r6, r6, #8
 801091e:	d00c      	beq.n	801093a <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010920:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8010922:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010924:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8010926:	f7ff fdb9 	bl	801049c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 801092a:	2300      	movs	r3, #0
          return HAL_ERROR;
 801092c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801092e:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8010932:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8010936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801093a:	69cb      	ldr	r3, [r1, #28]
 801093c:	051b      	lsls	r3, r3, #20
 801093e:	d5cc      	bpl.n	80108da <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010940:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8010944:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010946:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8010948:	f7ff fda8 	bl	801049c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801094c:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 801094e:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010952:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 8010956:	2003      	movs	r0, #3
 8010958:	e7ed      	b.n	8010936 <UART_WaitOnFlagUntilTimeout+0x6c>

0801095a <HAL_UART_Transmit>:
{
 801095a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801095e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8010960:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8010964:	4604      	mov	r4, r0
 8010966:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8010968:	2b20      	cmp	r3, #32
{
 801096a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 801096c:	d146      	bne.n	80109fc <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 801096e:	2900      	cmp	r1, #0
 8010970:	d046      	beq.n	8010a00 <HAL_UART_Transmit+0xa6>
 8010972:	2a00      	cmp	r2, #0
 8010974:	d044      	beq.n	8010a00 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010976:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010978:	2500      	movs	r5, #0
 801097a:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801097e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8010982:	f7fa fd1b 	bl	800b3bc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010986:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8010988:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 801098a:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801098e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8010992:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010996:	d103      	bne.n	80109a0 <HAL_UART_Transmit+0x46>
 8010998:	6923      	ldr	r3, [r4, #16]
 801099a:	b90b      	cbnz	r3, 80109a0 <HAL_UART_Transmit+0x46>
 801099c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 801099e:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80109a0:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80109a4:	464b      	mov	r3, r9
 80109a6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80109aa:	b292      	uxth	r2, r2
 80109ac:	b942      	cbnz	r2, 80109c0 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80109ae:	2140      	movs	r1, #64	@ 0x40
 80109b0:	4620      	mov	r0, r4
 80109b2:	f7ff ff8a 	bl	80108ca <UART_WaitOnFlagUntilTimeout>
 80109b6:	2320      	movs	r3, #32
 80109b8:	b948      	cbnz	r0, 80109ce <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 80109ba:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80109be:	e009      	b.n	80109d4 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80109c0:	2200      	movs	r2, #0
 80109c2:	2180      	movs	r1, #128	@ 0x80
 80109c4:	4620      	mov	r0, r4
 80109c6:	f7ff ff80 	bl	80108ca <UART_WaitOnFlagUntilTimeout>
 80109ca:	b130      	cbz	r0, 80109da <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 80109cc:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80109ce:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80109d0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80109d4:	b003      	add	sp, #12
 80109d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80109da:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80109dc:	b95e      	cbnz	r6, 80109f6 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80109de:	f835 3b02 	ldrh.w	r3, [r5], #2
 80109e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80109e6:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80109e8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80109ec:	3a01      	subs	r2, #1
 80109ee:	b292      	uxth	r2, r2
 80109f0:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 80109f4:	e7d4      	b.n	80109a0 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80109f6:	f816 3b01 	ldrb.w	r3, [r6], #1
 80109fa:	e7f4      	b.n	80109e6 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 80109fc:	2002      	movs	r0, #2
 80109fe:	e7e9      	b.n	80109d4 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 8010a00:	2001      	movs	r0, #1
 8010a02:	e7e7      	b.n	80109d4 <HAL_UART_Transmit+0x7a>

08010a04 <UART_CheckIdleState>:
{
 8010a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a06:	2600      	movs	r6, #0
{
 8010a08:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a0a:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8010a0e:	f7fa fcd5 	bl	800b3bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a12:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8010a14:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	071a      	lsls	r2, r3, #28
 8010a1a:	d51c      	bpl.n	8010a56 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a20:	4632      	mov	r2, r6
 8010a22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	4603      	mov	r3, r0
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	f7ff ff4d 	bl	80108ca <UART_WaitOnFlagUntilTimeout>
 8010a30:	b188      	cbz	r0, 8010a56 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010a32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a34:	e852 3f00 	ldrex	r3, [r2]
 8010a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3c:	e842 3100 	strex	r1, r3, [r2]
 8010a40:	2900      	cmp	r1, #0
 8010a42:	d1f6      	bne.n	8010a32 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8010a44:	2320      	movs	r3, #32
 8010a46:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8010a4a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8010a52:	b002      	add	sp, #8
 8010a54:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a56:	6823      	ldr	r3, [r4, #0]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	075b      	lsls	r3, r3, #29
 8010a5c:	d524      	bpl.n	8010aa8 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a62:	2200      	movs	r2, #0
 8010a64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010a68:	4620      	mov	r0, r4
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	462b      	mov	r3, r5
 8010a6e:	f7ff ff2c 	bl	80108ca <UART_WaitOnFlagUntilTimeout>
 8010a72:	b1c8      	cbz	r0, 8010aa8 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a76:	e852 3f00 	ldrex	r3, [r2]
 8010a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a7e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8010a82:	6822      	ldr	r2, [r4, #0]
 8010a84:	2900      	cmp	r1, #0
 8010a86:	d1f5      	bne.n	8010a74 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a88:	f102 0308 	add.w	r3, r2, #8
 8010a8c:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a94:	f102 0008 	add.w	r0, r2, #8
 8010a98:	e840 3100 	strex	r1, r3, [r0]
 8010a9c:	2900      	cmp	r1, #0
 8010a9e:	d1f3      	bne.n	8010a88 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8010aa0:	2320      	movs	r3, #32
 8010aa2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8010aa6:	e7d0      	b.n	8010a4a <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 8010aa8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010aaa:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8010aac:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010ab0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ab4:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ab6:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8010ab8:	e7c8      	b.n	8010a4c <UART_CheckIdleState+0x48>

08010aba <HAL_UART_Init>:
{
 8010aba:	b510      	push	{r4, lr}
  if (huart == NULL)
 8010abc:	4604      	mov	r4, r0
 8010abe:	b350      	cbz	r0, 8010b16 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8010ac0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8010ac4:	b91b      	cbnz	r3, 8010ace <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8010ac6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8010aca:	f7f0 ff83 	bl	80019d4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8010ace:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8010ad0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010ad2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8010ad6:	6813      	ldr	r3, [r2, #0]
 8010ad8:	f023 0301 	bic.w	r3, r3, #1
 8010adc:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010ade:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010ae0:	b113      	cbz	r3, 8010ae8 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f7ff fe9c 	bl	8010820 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f7ff fd03 	bl	80104f4 <UART_SetConfig>
 8010aee:	2801      	cmp	r0, #1
 8010af0:	d011      	beq.n	8010b16 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010af2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8010af4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010af6:	685a      	ldr	r2, [r3, #4]
 8010af8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010afc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010afe:	689a      	ldr	r2, [r3, #8]
 8010b00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010b04:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	f042 0201 	orr.w	r2, r2, #1
}
 8010b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8010b10:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8010b12:	f7ff bf77 	b.w	8010a04 <UART_CheckIdleState>
}
 8010b16:	2001      	movs	r0, #1
 8010b18:	bd10      	pop	{r4, pc}
	...

08010b1c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010b1c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 8010b1e:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010b20:	b92b      	cbnz	r3, 8010b2e <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8010b22:	2301      	movs	r3, #1
 8010b24:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b28:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b2c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b2e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b30:	4d09      	ldr	r5, [pc, #36]	@ (8010b58 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b32:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b34:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b36:	4c09      	ldr	r4, [pc, #36]	@ (8010b5c <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b38:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b3c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b3e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b40:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b42:	011b      	lsls	r3, r3, #4
 8010b44:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b48:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b4c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b4e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b50:	011b      	lsls	r3, r3, #4
 8010b52:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8010b56:	e7e7      	b.n	8010b28 <UARTEx_SetNbDataToProcess+0xc>
 8010b58:	0802ffe8 	.word	0x0802ffe8
 8010b5c:	0802ffe0 	.word	0x0802ffe0

08010b60 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8010b60:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d014      	beq.n	8010b92 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b68:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010b6a:	2324      	movs	r3, #36	@ 0x24
 8010b6c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b70:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8010b72:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b74:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8010b78:	f023 0301 	bic.w	r3, r3, #1
 8010b7c:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b82:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010b84:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8010b86:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8010b8a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 8010b8e:	4618      	mov	r0, r3
 8010b90:	4770      	bx	lr
  __HAL_LOCK(huart);
 8010b92:	2002      	movs	r0, #2
}
 8010b94:	4770      	bx	lr

08010b96 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8010b96:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8010b98:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8010b9c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d017      	beq.n	8010bd2 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ba2:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010ba4:	2324      	movs	r3, #36	@ 0x24
 8010ba6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010baa:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8010bac:	682b      	ldr	r3, [r5, #0]
 8010bae:	f023 0301 	bic.w	r3, r3, #1
 8010bb2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010bb4:	68ab      	ldr	r3, [r5, #8]
 8010bb6:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8010bba:	4319      	orrs	r1, r3
 8010bbc:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8010bbe:	f7ff ffad 	bl	8010b1c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8010bc2:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bc4:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010bc6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8010bca:	2000      	movs	r0, #0
 8010bcc:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8010bd0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8010bd2:	2002      	movs	r0, #2
 8010bd4:	e7fc      	b.n	8010bd0 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08010bd6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8010bd6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8010bd8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8010bdc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d017      	beq.n	8010c12 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010be2:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010be4:	2324      	movs	r3, #36	@ 0x24
 8010be6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bea:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8010bec:	682b      	ldr	r3, [r5, #0]
 8010bee:	f023 0301 	bic.w	r3, r3, #1
 8010bf2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010bf4:	68ab      	ldr	r3, [r5, #8]
 8010bf6:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8010bfa:	4319      	orrs	r1, r3
 8010bfc:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8010bfe:	f7ff ff8d 	bl	8010b1c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8010c02:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c04:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010c06:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8010c10:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8010c12:	2002      	movs	r0, #2
 8010c14:	e7fc      	b.n	8010c10 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08010c16 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010c1a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8010c1e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8010c22:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8010c26:	ea43 0308 	orr.w	r3, r3, r8
 8010c2a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8010c2e:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010c32:	6809      	ldr	r1, [r1, #0]
 8010c34:	b991      	cbnz	r1, 8010c5c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010c36:	ea43 030e 	orr.w	r3, r3, lr
 8010c3a:	6801      	ldr	r1, [r0, #0]
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8010c42:	ea43 030c 	orr.w	r3, r3, ip
 8010c46:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8010c4a:	433b      	orrs	r3, r7
 8010c4c:	4333      	orrs	r3, r6
 8010c4e:	432b      	orrs	r3, r5
 8010c50:	4323      	orrs	r3, r4
 8010c52:	430b      	orrs	r3, r1
 8010c54:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8010c56:	2000      	movs	r0, #0
 8010c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010c5c:	6801      	ldr	r1, [r0, #0]
 8010c5e:	ea43 030e 	orr.w	r3, r3, lr
 8010c62:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8010c66:	430b      	orrs	r3, r1
 8010c68:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010c6a:	ea42 030c 	orr.w	r3, r2, ip
 8010c6e:	6841      	ldr	r1, [r0, #4]
 8010c70:	433b      	orrs	r3, r7
 8010c72:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8010c76:	4333      	orrs	r3, r6
 8010c78:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8010c7c:	432b      	orrs	r3, r5
 8010c7e:	4323      	orrs	r3, r4
 8010c80:	4313      	orrs	r3, r2
 8010c82:	6043      	str	r3, [r0, #4]
 8010c84:	e7e7      	b.n	8010c56 <FMC_SDRAM_Init+0x40>

08010c86 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010c86:	68cb      	ldr	r3, [r1, #12]
 8010c88:	f103 3cff 	add.w	ip, r3, #4294967295
 8010c8c:	694b      	ldr	r3, [r1, #20]
{
 8010c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010c90:	3b01      	subs	r3, #1
 8010c92:	680f      	ldr	r7, [r1, #0]
 8010c94:	684c      	ldr	r4, [r1, #4]
 8010c96:	688e      	ldr	r6, [r1, #8]
 8010c98:	051b      	lsls	r3, r3, #20
 8010c9a:	690d      	ldr	r5, [r1, #16]
 8010c9c:	3c01      	subs	r4, #1
 8010c9e:	6989      	ldr	r1, [r1, #24]
 8010ca0:	3e01      	subs	r6, #1
 8010ca2:	3d01      	subs	r5, #1
 8010ca4:	3f01      	subs	r7, #1
 8010ca6:	3901      	subs	r1, #1
 8010ca8:	0124      	lsls	r4, r4, #4
 8010caa:	0236      	lsls	r6, r6, #8
 8010cac:	042d      	lsls	r5, r5, #16
 8010cae:	0609      	lsls	r1, r1, #24
 8010cb0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8010cb4:	b95a      	cbnz	r2, 8010cce <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010cb6:	433b      	orrs	r3, r7
 8010cb8:	6882      	ldr	r2, [r0, #8]
 8010cba:	4323      	orrs	r3, r4
 8010cbc:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8010cc0:	4333      	orrs	r3, r6
 8010cc2:	432b      	orrs	r3, r5
 8010cc4:	430b      	orrs	r3, r1
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8010cca:	2000      	movs	r0, #0
 8010ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010cce:	6882      	ldr	r2, [r0, #8]
 8010cd0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8010cd4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8010cd8:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010cda:	ea44 0306 	orr.w	r3, r4, r6
 8010cde:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010ce0:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010ce2:	68c2      	ldr	r2, [r0, #12]
 8010ce4:	432b      	orrs	r3, r5
 8010ce6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8010cea:	430b      	orrs	r3, r1
 8010cec:	4313      	orrs	r3, r2
 8010cee:	60c3      	str	r3, [r0, #12]
 8010cf0:	e7eb      	b.n	8010cca <FMC_SDRAM_Timing_Init+0x44>

08010cf2 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8010cf8:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 8010cfc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 8010d00:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8010d02:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8010d06:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 8010d08:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8010d0a:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8010d0c:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 8010d0e:	4770      	bx	lr

08010d10 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8010d10:	6902      	ldr	r2, [r0, #16]
{
 8010d12:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8010d14:	e9d1 3400 	ldrd	r3, r4, [r1]
 8010d18:	0d92      	lsrs	r2, r2, #22
 8010d1a:	4323      	orrs	r3, r4
 8010d1c:	68cc      	ldr	r4, [r1, #12]
 8010d1e:	0592      	lsls	r2, r2, #22
 8010d20:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8010d24:	4313      	orrs	r3, r2
 8010d26:	688a      	ldr	r2, [r1, #8]
 8010d28:	3a01      	subs	r2, #1
 8010d2a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8010d2e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8010d30:	2000      	movs	r0, #0
 8010d32:	bd10      	pop	{r4, pc}

08010d34 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8010d34:	6943      	ldr	r3, [r0, #20]
 8010d36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8010d3a:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8010d3e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8010d42:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8010d44:	2000      	movs	r0, #0
 8010d46:	4770      	bx	lr

08010d48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010d48:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8010d4a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010d4e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010d50:	f001 ff0e 	bl	8012b70 <xTaskGetSchedulerState>
 8010d54:	2801      	cmp	r0, #1
 8010d56:	d003      	beq.n	8010d60 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8010d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8010d5c:	f000 bc52 	b.w	8011604 <xPortSysTickHandler>
}
 8010d60:	bd08      	pop	{r3, pc}
	...

08010d64 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d64:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d68:	b92b      	cbnz	r3, 8010d76 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8010d6a:	4b06      	ldr	r3, [pc, #24]	@ (8010d84 <osKernelInitialize+0x20>)
 8010d6c:	6818      	ldr	r0, [r3, #0]
 8010d6e:	b928      	cbnz	r0, 8010d7c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010d70:	2201      	movs	r2, #1
 8010d72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010d74:	4770      	bx	lr
    stat = osErrorISR;
 8010d76:	f06f 0005 	mvn.w	r0, #5
 8010d7a:	4770      	bx	lr
    } else {
      stat = osError;
 8010d7c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	2400fa30 	.word	0x2400fa30

08010d88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010d88:	b510      	push	{r4, lr}
 8010d8a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d8e:	b95c      	cbnz	r4, 8010da8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8010d90:	4b08      	ldr	r3, [pc, #32]	@ (8010db4 <osKernelStart+0x2c>)
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	2a01      	cmp	r2, #1
 8010d96:	d10a      	bne.n	8010dae <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d98:	4a07      	ldr	r2, [pc, #28]	@ (8010db8 <osKernelStart+0x30>)
 8010d9a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010d9c:	2202      	movs	r2, #2
 8010d9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010da0:	f001 fd86 	bl	80128b0 <vTaskStartScheduler>
      stat = osOK;
 8010da4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8010da6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8010da8:	f06f 0005 	mvn.w	r0, #5
 8010dac:	e7fb      	b.n	8010da6 <osKernelStart+0x1e>
      stat = osError;
 8010dae:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8010db2:	e7f8      	b.n	8010da6 <osKernelStart+0x1e>
 8010db4:	2400fa30 	.word	0x2400fa30
 8010db8:	e000ed00 	.word	0xe000ed00

08010dbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dbe:	4614      	mov	r4, r2
 8010dc0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010dc2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010dc4:	460b      	mov	r3, r1
  hTask = NULL;
 8010dc6:	9205      	str	r2, [sp, #20]
 8010dc8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8010dcc:	b9ca      	cbnz	r2, 8010e02 <osThreadNew+0x46>
 8010dce:	b1c0      	cbz	r0, 8010e02 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8010dd0:	b36c      	cbz	r4, 8010e2e <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8010dd2:	69a5      	ldr	r5, [r4, #24]
 8010dd4:	2d00      	cmp	r5, #0
 8010dd6:	bf08      	it	eq
 8010dd8:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010dda:	1e69      	subs	r1, r5, #1
 8010ddc:	46ac      	mov	ip, r5
 8010dde:	2937      	cmp	r1, #55	@ 0x37
 8010de0:	d82a      	bhi.n	8010e38 <osThreadNew+0x7c>
 8010de2:	6861      	ldr	r1, [r4, #4]
 8010de4:	07c9      	lsls	r1, r1, #31
 8010de6:	d427      	bmi.n	8010e38 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8010de8:	6966      	ldr	r6, [r4, #20]
 8010dea:	b16e      	cbz	r6, 8010e08 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010dec:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8010dee:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010df0:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8010df4:	b157      	cbz	r7, 8010e0c <osThreadNew+0x50>
 8010df6:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010dfa:	d902      	bls.n	8010e02 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010dfc:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010dfe:	b104      	cbz	r4, 8010e02 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e00:	b9e6      	cbnz	r6, 8010e3c <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010e02:	9805      	ldr	r0, [sp, #20]
}
 8010e04:	b007      	add	sp, #28
 8010e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8010e08:	2280      	movs	r2, #128	@ 0x80
 8010e0a:	e7f0      	b.n	8010dee <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010e0c:	f1be 0f00 	cmp.w	lr, #0
 8010e10:	d1f7      	bne.n	8010e02 <osThreadNew+0x46>
      if (mem == 0) {
 8010e12:	6924      	ldr	r4, [r4, #16]
 8010e14:	2c00      	cmp	r4, #0
 8010e16:	d1f4      	bne.n	8010e02 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010e18:	ac05      	add	r4, sp, #20
 8010e1a:	b292      	uxth	r2, r2
 8010e1c:	e9cd c400 	strd	ip, r4, [sp]
 8010e20:	f001 fbbf 	bl	80125a2 <xTaskCreate>
 8010e24:	2801      	cmp	r0, #1
            hTask = NULL;
 8010e26:	bf1c      	itt	ne
 8010e28:	2300      	movne	r3, #0
 8010e2a:	9305      	strne	r3, [sp, #20]
 8010e2c:	e7e9      	b.n	8010e02 <osThreadNew+0x46>
    name = NULL;
 8010e2e:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8010e30:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8010e34:	2280      	movs	r2, #128	@ 0x80
 8010e36:	e7ef      	b.n	8010e18 <osThreadNew+0x5c>
        return (NULL);
 8010e38:	4610      	mov	r0, r2
 8010e3a:	e7e3      	b.n	8010e04 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e3c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8010e40:	9500      	str	r5, [sp, #0]
 8010e42:	f001 fb76 	bl	8012532 <xTaskCreateStatic>
 8010e46:	9005      	str	r0, [sp, #20]
 8010e48:	e7db      	b.n	8010e02 <osThreadNew+0x46>

08010e4a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010e4a:	b508      	push	{r3, lr}
 8010e4c:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e50:	b922      	cbnz	r2, 8010e5c <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8010e52:	b108      	cbz	r0, 8010e58 <osDelay+0xe>
      vTaskDelay(ticks);
 8010e54:	f001 fcec 	bl	8012830 <vTaskDelay>
    stat = osOK;
 8010e58:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8010e5a:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8010e5c:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8010e60:	e7fb      	b.n	8010e5a <osDelay+0x10>

08010e62 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010e62:	b570      	push	{r4, r5, r6, lr}
 8010e64:	4605      	mov	r5, r0
 8010e66:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8010e6a:	b116      	cbz	r6, 8010e72 <osMutexNew+0x10>
  hMutex = NULL;
 8010e6c:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8010e6e:	4620      	mov	r0, r4
 8010e70:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 8010e72:	b110      	cbz	r0, 8010e7a <osMutexNew+0x18>
      type = attr->attr_bits;
 8010e74:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8010e76:	0733      	lsls	r3, r6, #28
 8010e78:	d4f8      	bmi.n	8010e6c <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010e7a:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8010e7e:	b17d      	cbz	r5, 8010ea0 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010e80:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8010e84:	b151      	cbz	r1, 8010e9c <osMutexNew+0x3a>
 8010e86:	2b4f      	cmp	r3, #79	@ 0x4f
 8010e88:	d9f0      	bls.n	8010e6c <osMutexNew+0xa>
          if (rmtx != 0U) {
 8010e8a:	b1de      	cbz	r6, 8010ec4 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010e8c:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010e8e:	f000 fec2 	bl	8011c16 <xQueueCreateMutexStatic>
 8010e92:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d0e9      	beq.n	8010e6c <osMutexNew+0xa>
          name = attr->name;
 8010e98:	682d      	ldr	r5, [r5, #0]
 8010e9a:	e00a      	b.n	8010eb2 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1e5      	bne.n	8010e6c <osMutexNew+0xa>
            if (rmtx != 0U) {
 8010ea0:	b196      	cbz	r6, 8010ec8 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8010ea2:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 8010ea4:	f000 feeb 	bl	8011c7e <xQueueCreateMutex>
 8010ea8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8010eaa:	2800      	cmp	r0, #0
 8010eac:	d0de      	beq.n	8010e6c <osMutexNew+0xa>
        if (attr != NULL) {
 8010eae:	2d00      	cmp	r5, #0
 8010eb0:	d1f2      	bne.n	8010e98 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f001 f977 	bl	80121a8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010eba:	2e00      	cmp	r6, #0
 8010ebc:	d0d7      	beq.n	8010e6e <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010ebe:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8010ec2:	e7d4      	b.n	8010e6e <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010ec4:	2001      	movs	r0, #1
 8010ec6:	e7e2      	b.n	8010e8e <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 8010ec8:	2001      	movs	r0, #1
 8010eca:	e7eb      	b.n	8010ea4 <osMutexNew+0x42>

08010ecc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4603      	mov	r3, r0
 8010ed0:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010ed2:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8010ed6:	f003 0201 	and.w	r2, r3, #1
 8010eda:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8010ede:	b995      	cbnz	r5, 8010f06 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d913      	bls.n	8010f0c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8010ee4:	b162      	cbz	r2, 8010f00 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010ee6:	f001 f8f0 	bl	80120ca <xQueueTakeMutexRecursive>
 8010eea:	2801      	cmp	r0, #1
 8010eec:	d101      	bne.n	8010ef2 <osMutexAcquire+0x26>
  stat = osOK;
 8010eee:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8010ef0:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 8010ef2:	2c00      	cmp	r4, #0
 8010ef4:	bf14      	ite	ne
 8010ef6:	f06f 0001 	mvnne.w	r0, #1
 8010efa:	f06f 0002 	mvneq.w	r0, #2
 8010efe:	e7f7      	b.n	8010ef0 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010f00:	f001 f826 	bl	8011f50 <xQueueSemaphoreTake>
 8010f04:	e7f1      	b.n	8010eea <osMutexAcquire+0x1e>
    stat = osErrorISR;
 8010f06:	f06f 0005 	mvn.w	r0, #5
 8010f0a:	e7f1      	b.n	8010ef0 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 8010f0c:	f06f 0003 	mvn.w	r0, #3
 8010f10:	e7ee      	b.n	8010ef0 <osMutexAcquire+0x24>

08010f12 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010f12:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010f14:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010f18:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8010f1a:	f002 0301 	and.w	r3, r2, #1
 8010f1e:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8010f22:	b979      	cbnz	r1, 8010f44 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8010f24:	2a01      	cmp	r2, #1
 8010f26:	d910      	bls.n	8010f4a <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8010f28:	b13b      	cbz	r3, 8010f3a <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010f2a:	f000 fe89 	bl	8011c40 <xQueueGiveMutexRecursive>
 8010f2e:	2801      	cmp	r0, #1
  stat = osOK;
 8010f30:	bf0c      	ite	eq
 8010f32:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8010f34:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8010f38:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	f000 fdb8 	bl	8011ab2 <xQueueGenericSend>
 8010f42:	e7f4      	b.n	8010f2e <osMutexRelease+0x1c>
    stat = osErrorISR;
 8010f44:	f06f 0005 	mvn.w	r0, #5
 8010f48:	e7f6      	b.n	8010f38 <osMutexRelease+0x26>
    stat = osErrorParameter;
 8010f4a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8010f4e:	e7f3      	b.n	8010f38 <osMutexRelease+0x26>

08010f50 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f52:	4604      	mov	r4, r0
 8010f54:	460e      	mov	r6, r1
 8010f56:	4615      	mov	r5, r2
 8010f58:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010f5c:	b942      	cbnz	r2, 8010f70 <osSemaphoreNew+0x20>
 8010f5e:	b138      	cbz	r0, 8010f70 <osSemaphoreNew+0x20>
 8010f60:	4288      	cmp	r0, r1
 8010f62:	d305      	bcc.n	8010f70 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8010f64:	b155      	cbz	r5, 8010f7c <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010f66:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8010f6a:	b12b      	cbz	r3, 8010f78 <osSemaphoreNew+0x28>
 8010f6c:	2f4f      	cmp	r7, #79	@ 0x4f
 8010f6e:	d822      	bhi.n	8010fb6 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8010f70:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8010f72:	4620      	mov	r0, r4
 8010f74:	b003      	add	sp, #12
 8010f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010f78:	2f00      	cmp	r7, #0
 8010f7a:	d1f9      	bne.n	8010f70 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8010f7c:	2c01      	cmp	r4, #1
 8010f7e:	d00c      	beq.n	8010f9a <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010f80:	4620      	mov	r0, r4
 8010f82:	4631      	mov	r1, r6
 8010f84:	f000 fd77 	bl	8011a76 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8010f88:	4604      	mov	r4, r0
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d0f0      	beq.n	8010f70 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8010f8e:	b985      	cbnz	r5, 8010fb2 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8010f90:	4629      	mov	r1, r5
 8010f92:	4620      	mov	r0, r4
 8010f94:	f001 f908 	bl	80121a8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8010f98:	e7eb      	b.n	8010f72 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8010f9a:	2203      	movs	r2, #3
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	2001      	movs	r0, #1
 8010fa0:	f000 fd20 	bl	80119e4 <xQueueGenericCreate>
 8010fa4:	e00e      	b.n	8010fc4 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	f000 fd43 	bl	8011a32 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8010fac:	4604      	mov	r4, r0
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d0de      	beq.n	8010f70 <osSemaphoreNew+0x20>
          name = attr->name;
 8010fb2:	682d      	ldr	r5, [r5, #0]
 8010fb4:	e7ec      	b.n	8010f90 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8010fb6:	2801      	cmp	r0, #1
 8010fb8:	d1f5      	bne.n	8010fa6 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010fba:	2103      	movs	r1, #3
 8010fbc:	9100      	str	r1, [sp, #0]
 8010fbe:	4611      	mov	r1, r2
 8010fc0:	f000 fcc2 	bl	8011948 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8010fc4:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	d0d2      	beq.n	8010f70 <osSemaphoreNew+0x20>
 8010fca:	2e00      	cmp	r6, #0
 8010fcc:	d0df      	beq.n	8010f8e <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010fce:	2300      	movs	r3, #0
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	f000 fd6d 	bl	8011ab2 <xQueueGenericSend>
 8010fd8:	2801      	cmp	r0, #1
 8010fda:	d0d8      	beq.n	8010f8e <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f001 f90d 	bl	80121fc <vQueueDelete>
      if (hSemaphore != NULL) {
 8010fe2:	e7c5      	b.n	8010f70 <osSemaphoreNew+0x20>

08010fe4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010fe4:	b513      	push	{r0, r1, r4, lr}
 8010fe6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8010fe8:	b328      	cbz	r0, 8011036 <osSemaphoreAcquire+0x52>
 8010fea:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8010fee:	b1cb      	cbz	r3, 8011024 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8010ff0:	bb09      	cbnz	r1, 8011036 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010ff2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8010ff4:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010ff6:	f001 f889 	bl	801210c <xQueueReceiveFromISR>
 8010ffa:	2801      	cmp	r0, #1
 8010ffc:	d003      	beq.n	8011006 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8010ffe:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8011002:	b002      	add	sp, #8
 8011004:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8011006:	9b01      	ldr	r3, [sp, #4]
 8011008:	b90b      	cbnz	r3, 801100e <osSemaphoreAcquire+0x2a>
  stat = osOK;
 801100a:	2000      	movs	r0, #0
 801100c:	e7f9      	b.n	8011002 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 801100e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011016:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801101a:	f3bf 8f4f 	dsb	sy
 801101e:	f3bf 8f6f 	isb	sy
 8011022:	e7f2      	b.n	801100a <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011024:	f000 ff94 	bl	8011f50 <xQueueSemaphoreTake>
 8011028:	2801      	cmp	r0, #1
 801102a:	d0ee      	beq.n	801100a <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 801102c:	2c00      	cmp	r4, #0
 801102e:	d0e6      	beq.n	8010ffe <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8011030:	f06f 0001 	mvn.w	r0, #1
 8011034:	e7e5      	b.n	8011002 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8011036:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801103a:	e7e2      	b.n	8011002 <osSemaphoreAcquire+0x1e>

0801103c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801103c:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 801103e:	b318      	cbz	r0, 8011088 <osSemaphoreRelease+0x4c>
 8011040:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8011044:	b1cb      	cbz	r3, 801107a <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8011046:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011048:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 801104a:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801104c:	f000 fe91 	bl	8011d72 <xQueueGiveFromISR>
 8011050:	2801      	cmp	r0, #1
 8011052:	d004      	beq.n	801105e <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8011054:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8011058:	b003      	add	sp, #12
 801105a:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 801105e:	9b01      	ldr	r3, [sp, #4]
 8011060:	b14b      	cbz	r3, 8011076 <osSemaphoreRelease+0x3a>
 8011062:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801106a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801106e:	f3bf 8f4f 	dsb	sy
 8011072:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8011076:	2000      	movs	r0, #0
 8011078:	e7ee      	b.n	8011058 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801107a:	461a      	mov	r2, r3
 801107c:	4619      	mov	r1, r3
 801107e:	f000 fd18 	bl	8011ab2 <xQueueGenericSend>
 8011082:	2801      	cmp	r0, #1
 8011084:	d0f7      	beq.n	8011076 <osSemaphoreRelease+0x3a>
 8011086:	e7e5      	b.n	8011054 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8011088:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801108c:	e7e4      	b.n	8011058 <osSemaphoreRelease+0x1c>

0801108e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801108e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011090:	4605      	mov	r5, r0
 8011092:	460e      	mov	r6, r1
 8011094:	4614      	mov	r4, r2
 8011096:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801109a:	b11f      	cbz	r7, 80110a4 <osMessageQueueNew+0x16>
  hQueue = NULL;
 801109c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 801109e:	4628      	mov	r0, r5
 80110a0:	b003      	add	sp, #12
 80110a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d0f9      	beq.n	801109c <osMessageQueueNew+0xe>
 80110a8:	2900      	cmp	r1, #0
 80110aa:	d0f7      	beq.n	801109c <osMessageQueueNew+0xe>
    if (attr != NULL) {
 80110ac:	b1da      	cbz	r2, 80110e6 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80110ae:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 80110b2:	b183      	cbz	r3, 80110d6 <osMessageQueueNew+0x48>
 80110b4:	2a4f      	cmp	r2, #79	@ 0x4f
 80110b6:	d9f1      	bls.n	801109c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80110b8:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80110ba:	2a00      	cmp	r2, #0
 80110bc:	d0ee      	beq.n	801109c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80110be:	434d      	muls	r5, r1
 80110c0:	6966      	ldr	r6, [r4, #20]
 80110c2:	42ae      	cmp	r6, r5
 80110c4:	d3ea      	bcc.n	801109c <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80110c6:	9700      	str	r7, [sp, #0]
 80110c8:	f000 fc3e 	bl	8011948 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80110cc:	4605      	mov	r5, r0
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d0e4      	beq.n	801109c <osMessageQueueNew+0xe>
        name = attr->name;
 80110d2:	6824      	ldr	r4, [r4, #0]
 80110d4:	e011      	b.n	80110fa <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80110d6:	2a00      	cmp	r2, #0
 80110d8:	d1e0      	bne.n	801109c <osMessageQueueNew+0xe>
 80110da:	6923      	ldr	r3, [r4, #16]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1dd      	bne.n	801109c <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80110e0:	6963      	ldr	r3, [r4, #20]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d1da      	bne.n	801109c <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80110e6:	4628      	mov	r0, r5
 80110e8:	2200      	movs	r2, #0
 80110ea:	4631      	mov	r1, r6
 80110ec:	f000 fc7a 	bl	80119e4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80110f0:	4605      	mov	r5, r0
 80110f2:	2800      	cmp	r0, #0
 80110f4:	d0d2      	beq.n	801109c <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80110f6:	2c00      	cmp	r4, #0
 80110f8:	d1eb      	bne.n	80110d2 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80110fa:	4621      	mov	r1, r4
 80110fc:	4628      	mov	r0, r5
 80110fe:	f001 f853 	bl	80121a8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8011102:	e7cc      	b.n	801109e <osMessageQueueNew+0x10>

08011104 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011104:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011106:	461c      	mov	r4, r3
 8011108:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801110c:	b1de      	cbz	r6, 8011146 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801110e:	b338      	cbz	r0, 8011160 <osMessageQueuePut+0x5c>
 8011110:	b331      	cbz	r1, 8011160 <osMessageQueuePut+0x5c>
 8011112:	bb2b      	cbnz	r3, 8011160 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011114:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8011116:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011118:	f000 fdce 	bl	8011cb8 <xQueueGenericSendFromISR>
 801111c:	2801      	cmp	r0, #1
 801111e:	d003      	beq.n	8011128 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8011120:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8011124:	b002      	add	sp, #8
 8011126:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8011128:	9b01      	ldr	r3, [sp, #4]
 801112a:	b90b      	cbnz	r3, 8011130 <osMessageQueuePut+0x2c>
  stat = osOK;
 801112c:	2000      	movs	r0, #0
 801112e:	e7f9      	b.n	8011124 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8011130:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011138:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	f3bf 8f6f 	isb	sy
 8011144:	e7f2      	b.n	801112c <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011146:	b158      	cbz	r0, 8011160 <osMessageQueuePut+0x5c>
 8011148:	b151      	cbz	r1, 8011160 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801114a:	4633      	mov	r3, r6
 801114c:	4622      	mov	r2, r4
 801114e:	f000 fcb0 	bl	8011ab2 <xQueueGenericSend>
 8011152:	2801      	cmp	r0, #1
 8011154:	d0ea      	beq.n	801112c <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8011156:	2c00      	cmp	r4, #0
 8011158:	d0e2      	beq.n	8011120 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 801115a:	f06f 0001 	mvn.w	r0, #1
 801115e:	e7e1      	b.n	8011124 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8011160:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8011164:	e7de      	b.n	8011124 <osMessageQueuePut+0x20>

08011166 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011166:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011168:	461c      	mov	r4, r3
 801116a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801116e:	b1db      	cbz	r3, 80111a8 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011170:	b330      	cbz	r0, 80111c0 <osMessageQueueGet+0x5a>
 8011172:	b329      	cbz	r1, 80111c0 <osMessageQueueGet+0x5a>
 8011174:	bb24      	cbnz	r4, 80111c0 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011176:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8011178:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801117a:	f000 ffc7 	bl	801210c <xQueueReceiveFromISR>
 801117e:	2801      	cmp	r0, #1
 8011180:	d003      	beq.n	801118a <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8011182:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8011186:	b003      	add	sp, #12
 8011188:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 801118a:	9b01      	ldr	r3, [sp, #4]
 801118c:	b90b      	cbnz	r3, 8011192 <osMessageQueueGet+0x2c>
  stat = osOK;
 801118e:	2000      	movs	r0, #0
 8011190:	e7f9      	b.n	8011186 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8011192:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801119a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801119e:	f3bf 8f4f 	dsb	sy
 80111a2:	f3bf 8f6f 	isb	sy
 80111a6:	e7f2      	b.n	801118e <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80111a8:	b150      	cbz	r0, 80111c0 <osMessageQueueGet+0x5a>
 80111aa:	b149      	cbz	r1, 80111c0 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80111ac:	4622      	mov	r2, r4
 80111ae:	f000 fe31 	bl	8011e14 <xQueueReceive>
 80111b2:	2801      	cmp	r0, #1
 80111b4:	d0eb      	beq.n	801118e <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 80111b6:	2c00      	cmp	r4, #0
 80111b8:	d0e3      	beq.n	8011182 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 80111ba:	f06f 0001 	mvn.w	r0, #1
 80111be:	e7e2      	b.n	8011186 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 80111c0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80111c4:	e7df      	b.n	8011186 <osMessageQueueGet+0x20>
	...

080111c8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80111c8:	4b03      	ldr	r3, [pc, #12]	@ (80111d8 <vApplicationGetIdleTaskMemory+0x10>)
 80111ca:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80111cc:	4b03      	ldr	r3, [pc, #12]	@ (80111dc <vApplicationGetIdleTaskMemory+0x14>)
 80111ce:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80111d0:	2380      	movs	r3, #128	@ 0x80
 80111d2:	6013      	str	r3, [r2, #0]
}
 80111d4:	4770      	bx	lr
 80111d6:	bf00      	nop
 80111d8:	2400f9d0 	.word	0x2400f9d0
 80111dc:	2400f7d0 	.word	0x2400f7d0

080111e0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80111e0:	4b03      	ldr	r3, [pc, #12]	@ (80111f0 <vApplicationGetTimerTaskMemory+0x10>)
 80111e2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80111e4:	4b03      	ldr	r3, [pc, #12]	@ (80111f4 <vApplicationGetTimerTaskMemory+0x14>)
 80111e6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80111e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80111ec:	6013      	str	r3, [r2, #0]
}
 80111ee:	4770      	bx	lr
 80111f0:	2400f770 	.word	0x2400f770
 80111f4:	2400f370 	.word	0x2400f370

080111f8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80111f8:	4b10      	ldr	r3, [pc, #64]	@ (801123c <prvInsertBlockIntoFreeList+0x44>)
{
 80111fa:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80111fc:	461a      	mov	r2, r3
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	4283      	cmp	r3, r0
 8011202:	d3fb      	bcc.n	80111fc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011204:	6854      	ldr	r4, [r2, #4]
 8011206:	1911      	adds	r1, r2, r4
 8011208:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801120a:	bf01      	itttt	eq
 801120c:	6841      	ldreq	r1, [r0, #4]
 801120e:	4610      	moveq	r0, r2
 8011210:	1909      	addeq	r1, r1, r4
 8011212:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011214:	6844      	ldr	r4, [r0, #4]
 8011216:	1901      	adds	r1, r0, r4
 8011218:	428b      	cmp	r3, r1
 801121a:	d10c      	bne.n	8011236 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801121c:	4908      	ldr	r1, [pc, #32]	@ (8011240 <prvInsertBlockIntoFreeList+0x48>)
 801121e:	6809      	ldr	r1, [r1, #0]
 8011220:	428b      	cmp	r3, r1
 8011222:	d003      	beq.n	801122c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011224:	6859      	ldr	r1, [r3, #4]
 8011226:	4421      	add	r1, r4
 8011228:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801122a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801122c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801122e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011230:	bf18      	it	ne
 8011232:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011234:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011236:	4619      	mov	r1, r3
 8011238:	e7f8      	b.n	801122c <prvInsertBlockIntoFreeList+0x34>
 801123a:	bf00      	nop
 801123c:	2400fa4c 	.word	0x2400fa4c
 8011240:	2400fa48 	.word	0x2400fa48

08011244 <pvPortMalloc>:
{
 8011244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011248:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801124a:	f001 f9d9 	bl	8012600 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801124e:	4940      	ldr	r1, [pc, #256]	@ (8011350 <pvPortMalloc+0x10c>)
 8011250:	4d40      	ldr	r5, [pc, #256]	@ (8011354 <pvPortMalloc+0x110>)
 8011252:	680b      	ldr	r3, [r1, #0]
 8011254:	b9f3      	cbnz	r3, 8011294 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8011256:	4a40      	ldr	r2, [pc, #256]	@ (8011358 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8011258:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801125a:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801125c:	4e3f      	ldr	r6, [pc, #252]	@ (801135c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801125e:	bf1b      	ittet	ne
 8011260:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011262:	4b3f      	ldrne	r3, [pc, #252]	@ (8011360 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011264:	4b3f      	ldreq	r3, [pc, #252]	@ (8011364 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011266:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 801126a:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801126c:	bf18      	it	ne
 801126e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011270:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011272:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8011274:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011276:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 801127a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801127e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8011280:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011282:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011286:	4b38      	ldr	r3, [pc, #224]	@ (8011368 <pvPortMalloc+0x124>)
 8011288:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801128a:	4b38      	ldr	r3, [pc, #224]	@ (801136c <pvPortMalloc+0x128>)
 801128c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801128e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011292:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011294:	682e      	ldr	r6, [r5, #0]
 8011296:	4226      	tst	r6, r4
 8011298:	d155      	bne.n	8011346 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 801129a:	2c00      	cmp	r4, #0
 801129c:	d046      	beq.n	801132c <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 801129e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80112a2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80112a4:	bf1c      	itt	ne
 80112a6:	f023 0307 	bicne.w	r3, r3, #7
 80112aa:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d04a      	beq.n	8011346 <pvPortMalloc+0x102>
 80112b0:	4f2e      	ldr	r7, [pc, #184]	@ (801136c <pvPortMalloc+0x128>)
 80112b2:	683c      	ldr	r4, [r7, #0]
 80112b4:	429c      	cmp	r4, r3
 80112b6:	d346      	bcc.n	8011346 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 80112b8:	4a28      	ldr	r2, [pc, #160]	@ (801135c <pvPortMalloc+0x118>)
 80112ba:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112bc:	6868      	ldr	r0, [r5, #4]
 80112be:	4298      	cmp	r0, r3
 80112c0:	d204      	bcs.n	80112cc <pvPortMalloc+0x88>
 80112c2:	f8d5 c000 	ldr.w	ip, [r5]
 80112c6:	f1bc 0f00 	cmp.w	ip, #0
 80112ca:	d115      	bne.n	80112f8 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 80112cc:	6809      	ldr	r1, [r1, #0]
 80112ce:	42a9      	cmp	r1, r5
 80112d0:	d039      	beq.n	8011346 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80112d2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80112d4:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80112d8:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80112da:	1ac2      	subs	r2, r0, r3
 80112dc:	2a10      	cmp	r2, #16
 80112de:	d912      	bls.n	8011306 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80112e0:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80112e2:	0741      	lsls	r1, r0, #29
 80112e4:	d00b      	beq.n	80112fe <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80112e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ea:	f383 8811 	msr	BASEPRI, r3
 80112ee:	f3bf 8f6f 	isb	sy
 80112f2:	f3bf 8f4f 	dsb	sy
 80112f6:	e7fe      	b.n	80112f6 <pvPortMalloc+0xb2>
 80112f8:	462a      	mov	r2, r5
 80112fa:	4665      	mov	r5, ip
 80112fc:	e7de      	b.n	80112bc <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80112fe:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011300:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011302:	f7ff ff79 	bl	80111f8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011306:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011308:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801130a:	4917      	ldr	r1, [pc, #92]	@ (8011368 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801130c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801130e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011310:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8011312:	4a17      	ldr	r2, [pc, #92]	@ (8011370 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011314:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 8011316:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8011318:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801131a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 801131c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011320:	bf38      	it	cc
 8011322:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011324:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011328:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 801132a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 801132c:	f001 fa0c 	bl	8012748 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011330:	0763      	lsls	r3, r4, #29
 8011332:	d00a      	beq.n	801134a <pvPortMalloc+0x106>
 8011334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011338:	f383 8811 	msr	BASEPRI, r3
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	e7fe      	b.n	8011344 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 8011346:	2400      	movs	r4, #0
 8011348:	e7f0      	b.n	801132c <pvPortMalloc+0xe8>
}
 801134a:	4620      	mov	r0, r4
 801134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011350:	2400fa48 	.word	0x2400fa48
 8011354:	2400fa34 	.word	0x2400fa34
 8011358:	2400fa54 	.word	0x2400fa54
 801135c:	2400fa4c 	.word	0x2400fa4c
 8011360:	240280f4 	.word	0x240280f4
 8011364:	000186a0 	.word	0x000186a0
 8011368:	2400fa40 	.word	0x2400fa40
 801136c:	2400fa44 	.word	0x2400fa44
 8011370:	2400fa3c 	.word	0x2400fa3c

08011374 <vPortFree>:
{
 8011374:	b510      	push	{r4, lr}
	if( pv != NULL )
 8011376:	4604      	mov	r4, r0
 8011378:	b390      	cbz	r0, 80113e0 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801137a:	4a1a      	ldr	r2, [pc, #104]	@ (80113e4 <vPortFree+0x70>)
 801137c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011380:	6812      	ldr	r2, [r2, #0]
 8011382:	4213      	tst	r3, r2
 8011384:	d108      	bne.n	8011398 <vPortFree+0x24>
 8011386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801138a:	f383 8811 	msr	BASEPRI, r3
 801138e:	f3bf 8f6f 	isb	sy
 8011392:	f3bf 8f4f 	dsb	sy
 8011396:	e7fe      	b.n	8011396 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011398:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801139c:	b141      	cbz	r1, 80113b0 <vPortFree+0x3c>
 801139e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113a2:	f383 8811 	msr	BASEPRI, r3
 80113a6:	f3bf 8f6f 	isb	sy
 80113aa:	f3bf 8f4f 	dsb	sy
 80113ae:	e7fe      	b.n	80113ae <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80113b0:	ea23 0302 	bic.w	r3, r3, r2
 80113b4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80113b8:	f001 f922 	bl	8012600 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113bc:	4a0a      	ldr	r2, [pc, #40]	@ (80113e8 <vPortFree+0x74>)
 80113be:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113c2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113c6:	6811      	ldr	r1, [r2, #0]
 80113c8:	440b      	add	r3, r1
 80113ca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113cc:	f7ff ff14 	bl	80111f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80113d0:	4a06      	ldr	r2, [pc, #24]	@ (80113ec <vPortFree+0x78>)
 80113d2:	6813      	ldr	r3, [r2, #0]
 80113d4:	3301      	adds	r3, #1
}
 80113d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80113da:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80113dc:	f001 b9b4 	b.w	8012748 <xTaskResumeAll>
}
 80113e0:	bd10      	pop	{r4, pc}
 80113e2:	bf00      	nop
 80113e4:	2400fa34 	.word	0x2400fa34
 80113e8:	2400fa44 	.word	0x2400fa44
 80113ec:	2400fa38 	.word	0x2400fa38

080113f0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113f0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80113f4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113f8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113fa:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113fc:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011400:	2300      	movs	r3, #0
 8011402:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011404:	4770      	bx	lr

08011406 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011406:	2300      	movs	r3, #0
 8011408:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801140a:	4770      	bx	lr

0801140c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801140c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801140e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8011410:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011412:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011414:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011416:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8011418:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 801141a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801141c:	3301      	adds	r3, #1
 801141e:	6003      	str	r3, [r0, #0]
}
 8011420:	4770      	bx	lr

08011422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011422:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011424:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011426:	1c63      	adds	r3, r4, #1
 8011428:	d10a      	bne.n	8011440 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801142a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801142c:	685a      	ldr	r2, [r3, #4]
 801142e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011430:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011432:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8011434:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8011436:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8011438:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801143a:	3301      	adds	r3, #1
 801143c:	6003      	str	r3, [r0, #0]
}
 801143e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011440:	f100 0208 	add.w	r2, r0, #8
 8011444:	4613      	mov	r3, r2
 8011446:	6852      	ldr	r2, [r2, #4]
 8011448:	6815      	ldr	r5, [r2, #0]
 801144a:	42a5      	cmp	r5, r4
 801144c:	d9fa      	bls.n	8011444 <vListInsert+0x22>
 801144e:	e7ed      	b.n	801142c <vListInsert+0xa>

08011450 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011450:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011452:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8011456:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011458:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801145a:	6859      	ldr	r1, [r3, #4]
 801145c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801145e:	bf08      	it	eq
 8011460:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011462:	2200      	movs	r2, #0
 8011464:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	3a01      	subs	r2, #1
 801146a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801146c:	6818      	ldr	r0, [r3, #0]
}
 801146e:	4770      	bx	lr

08011470 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011470:	4808      	ldr	r0, [pc, #32]	@ (8011494 <prvPortStartFirstTask+0x24>)
 8011472:	6800      	ldr	r0, [r0, #0]
 8011474:	6800      	ldr	r0, [r0, #0]
 8011476:	f380 8808 	msr	MSP, r0
 801147a:	f04f 0000 	mov.w	r0, #0
 801147e:	f380 8814 	msr	CONTROL, r0
 8011482:	b662      	cpsie	i
 8011484:	b661      	cpsie	f
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	f3bf 8f6f 	isb	sy
 801148e:	df00      	svc	0
 8011490:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011492:	0000      	.short	0x0000
 8011494:	e000ed08 	.word	0xe000ed08

08011498 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011498:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80114a8 <vPortEnableVFP+0x10>
 801149c:	6801      	ldr	r1, [r0, #0]
 801149e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80114a2:	6001      	str	r1, [r0, #0]
 80114a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80114a6:	0000      	.short	0x0000
 80114a8:	e000ed88 	.word	0xe000ed88

080114ac <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80114ac:	2300      	movs	r3, #0
{
 80114ae:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80114b0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80114b2:	4b0d      	ldr	r3, [pc, #52]	@ (80114e8 <prvTaskExitError+0x3c>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	3301      	adds	r3, #1
 80114b8:	d008      	beq.n	80114cc <prvTaskExitError+0x20>
 80114ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114be:	f383 8811 	msr	BASEPRI, r3
 80114c2:	f3bf 8f6f 	isb	sy
 80114c6:	f3bf 8f4f 	dsb	sy
 80114ca:	e7fe      	b.n	80114ca <prvTaskExitError+0x1e>
 80114cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d0:	f383 8811 	msr	BASEPRI, r3
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80114dc:	9b01      	ldr	r3, [sp, #4]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d0fc      	beq.n	80114dc <prvTaskExitError+0x30>
}
 80114e2:	b002      	add	sp, #8
 80114e4:	4770      	bx	lr
 80114e6:	bf00      	nop
 80114e8:	24000078 	.word	0x24000078

080114ec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80114ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80114f0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80114f4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80114f8:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80114fa:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80114fc:	4b03      	ldr	r3, [pc, #12]	@ (801150c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80114fe:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011500:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011502:	f06f 0302 	mvn.w	r3, #2
 8011506:	6203      	str	r3, [r0, #32]
}
 8011508:	4770      	bx	lr
 801150a:	bf00      	nop
 801150c:	080114ad 	.word	0x080114ad

08011510 <SVC_Handler>:
	__asm volatile (
 8011510:	4b07      	ldr	r3, [pc, #28]	@ (8011530 <pxCurrentTCBConst2>)
 8011512:	6819      	ldr	r1, [r3, #0]
 8011514:	6808      	ldr	r0, [r1, #0]
 8011516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801151a:	f380 8809 	msr	PSP, r0
 801151e:	f3bf 8f6f 	isb	sy
 8011522:	f04f 0000 	mov.w	r0, #0
 8011526:	f380 8811 	msr	BASEPRI, r0
 801152a:	4770      	bx	lr
 801152c:	f3af 8000 	nop.w

08011530 <pxCurrentTCBConst2>:
 8011530:	24028634 	.word	0x24028634

08011534 <vPortEnterCritical>:
 8011534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011538:	f383 8811 	msr	BASEPRI, r3
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8011544:	4a0a      	ldr	r2, [pc, #40]	@ (8011570 <vPortEnterCritical+0x3c>)
 8011546:	6813      	ldr	r3, [r2, #0]
 8011548:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801154a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801154c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801154e:	d10e      	bne.n	801156e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011550:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011554:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8011558:	b2db      	uxtb	r3, r3
 801155a:	b143      	cbz	r3, 801156e <vPortEnterCritical+0x3a>
 801155c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011560:	f383 8811 	msr	BASEPRI, r3
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	f3bf 8f4f 	dsb	sy
 801156c:	e7fe      	b.n	801156c <vPortEnterCritical+0x38>
}
 801156e:	4770      	bx	lr
 8011570:	24000078 	.word	0x24000078

08011574 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8011574:	4a08      	ldr	r2, [pc, #32]	@ (8011598 <vPortExitCritical+0x24>)
 8011576:	6813      	ldr	r3, [r2, #0]
 8011578:	b943      	cbnz	r3, 801158c <vPortExitCritical+0x18>
 801157a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801157e:	f383 8811 	msr	BASEPRI, r3
 8011582:	f3bf 8f6f 	isb	sy
 8011586:	f3bf 8f4f 	dsb	sy
 801158a:	e7fe      	b.n	801158a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801158c:	3b01      	subs	r3, #1
 801158e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011590:	b90b      	cbnz	r3, 8011596 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011592:	f383 8811 	msr	BASEPRI, r3
}
 8011596:	4770      	bx	lr
 8011598:	24000078 	.word	0x24000078
 801159c:	00000000 	.word	0x00000000

080115a0 <PendSV_Handler>:
	__asm volatile
 80115a0:	f3ef 8009 	mrs	r0, PSP
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	4b15      	ldr	r3, [pc, #84]	@ (8011600 <pxCurrentTCBConst>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	f01e 0f10 	tst.w	lr, #16
 80115b0:	bf08      	it	eq
 80115b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80115b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ba:	6010      	str	r0, [r2, #0]
 80115bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80115c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80115c4:	f380 8811 	msr	BASEPRI, r0
 80115c8:	f3bf 8f4f 	dsb	sy
 80115cc:	f3bf 8f6f 	isb	sy
 80115d0:	f001 f9bc 	bl	801294c <vTaskSwitchContext>
 80115d4:	f04f 0000 	mov.w	r0, #0
 80115d8:	f380 8811 	msr	BASEPRI, r0
 80115dc:	bc09      	pop	{r0, r3}
 80115de:	6819      	ldr	r1, [r3, #0]
 80115e0:	6808      	ldr	r0, [r1, #0]
 80115e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e6:	f01e 0f10 	tst.w	lr, #16
 80115ea:	bf08      	it	eq
 80115ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80115f0:	f380 8809 	msr	PSP, r0
 80115f4:	f3bf 8f6f 	isb	sy
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop
 80115fc:	f3af 8000 	nop.w

08011600 <pxCurrentTCBConst>:
 8011600:	24028634 	.word	0x24028634

08011604 <xPortSysTickHandler>:
{
 8011604:	b508      	push	{r3, lr}
	__asm volatile
 8011606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801160a:	f383 8811 	msr	BASEPRI, r3
 801160e:	f3bf 8f6f 	isb	sy
 8011612:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8011616:	f001 f801 	bl	801261c <xTaskIncrementTick>
 801161a:	b128      	cbz	r0, 8011628 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801161c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011624:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8011628:	2300      	movs	r3, #0
 801162a:	f383 8811 	msr	BASEPRI, r3
}
 801162e:	bd08      	pop	{r3, pc}

08011630 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011630:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8011634:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011636:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801163a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801163c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801163e:	4b04      	ldr	r3, [pc, #16]	@ (8011650 <vPortSetupTimerInterrupt+0x20>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	fbb3 f3f1 	udiv	r3, r3, r1
 8011646:	3b01      	subs	r3, #1
 8011648:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801164a:	2307      	movs	r3, #7
 801164c:	6113      	str	r3, [r2, #16]
}
 801164e:	4770      	bx	lr
 8011650:	2400006c 	.word	0x2400006c

08011654 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011654:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8011658:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801165a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 801165e:	4a38      	ldr	r2, [pc, #224]	@ (8011740 <xPortStartScheduler+0xec>)
 8011660:	4291      	cmp	r1, r2
 8011662:	d108      	bne.n	8011676 <xPortStartScheduler+0x22>
	__asm volatile
 8011664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011668:	f383 8811 	msr	BASEPRI, r3
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	e7fe      	b.n	8011674 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011676:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801167a:	4b32      	ldr	r3, [pc, #200]	@ (8011744 <xPortStartScheduler+0xf0>)
 801167c:	429a      	cmp	r2, r3
 801167e:	d108      	bne.n	8011692 <xPortStartScheduler+0x3e>
 8011680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011684:	f383 8811 	msr	BASEPRI, r3
 8011688:	f3bf 8f6f 	isb	sy
 801168c:	f3bf 8f4f 	dsb	sy
 8011690:	e7fe      	b.n	8011690 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011692:	4b2d      	ldr	r3, [pc, #180]	@ (8011748 <xPortStartScheduler+0xf4>)
 8011694:	781a      	ldrb	r2, [r3, #0]
 8011696:	b2d2      	uxtb	r2, r2
 8011698:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801169a:	22ff      	movs	r2, #255	@ 0xff
 801169c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801169e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80116a0:	4a2a      	ldr	r2, [pc, #168]	@ (801174c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80116a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80116ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80116b0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80116b2:	2307      	movs	r3, #7
 80116b4:	4a26      	ldr	r2, [pc, #152]	@ (8011750 <xPortStartScheduler+0xfc>)
 80116b6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116b8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80116bc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116be:	0609      	lsls	r1, r1, #24
 80116c0:	d40a      	bmi.n	80116d8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80116c2:	2b03      	cmp	r3, #3
 80116c4:	d011      	beq.n	80116ea <xPortStartScheduler+0x96>
 80116c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ca:	f383 8811 	msr	BASEPRI, r3
 80116ce:	f3bf 8f6f 	isb	sy
 80116d2:	f3bf 8f4f 	dsb	sy
 80116d6:	e7fe      	b.n	80116d6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80116d8:	3b01      	subs	r3, #1
 80116da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80116dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80116e0:	005b      	lsls	r3, r3, #1
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	f88d 3003 	strb.w	r3, [sp, #3]
 80116e8:	e7e6      	b.n	80116b8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80116ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80116ee:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 80116f2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80116f4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80116f6:	9b01      	ldr	r3, [sp, #4]
 80116f8:	4a13      	ldr	r2, [pc, #76]	@ (8011748 <xPortStartScheduler+0xf4>)
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80116fe:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8011702:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011706:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801170a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801170e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011712:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8011716:	f7ff ff8b 	bl	8011630 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801171a:	4b0e      	ldr	r3, [pc, #56]	@ (8011754 <xPortStartScheduler+0x100>)
 801171c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801171e:	f7ff febb 	bl	8011498 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011722:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8011726:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801172a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801172e:	f7ff fe9f 	bl	8011470 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8011732:	f001 f90b 	bl	801294c <vTaskSwitchContext>
}
 8011736:	4628      	mov	r0, r5
	prvTaskExitError();
 8011738:	f7ff feb8 	bl	80114ac <prvTaskExitError>
}
 801173c:	b003      	add	sp, #12
 801173e:	bd30      	pop	{r4, r5, pc}
 8011740:	410fc271 	.word	0x410fc271
 8011744:	410fc270 	.word	0x410fc270
 8011748:	e000e400 	.word	0xe000e400
 801174c:	240280f8 	.word	0x240280f8
 8011750:	240280f4 	.word	0x240280f4
 8011754:	24000078 	.word	0x24000078

08011758 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011758:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801175c:	2b0f      	cmp	r3, #15
 801175e:	d90e      	bls.n	801177e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011760:	4a11      	ldr	r2, [pc, #68]	@ (80117a8 <vPortValidateInterruptPriority+0x50>)
 8011762:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011764:	4a11      	ldr	r2, [pc, #68]	@ (80117ac <vPortValidateInterruptPriority+0x54>)
 8011766:	7812      	ldrb	r2, [r2, #0]
 8011768:	429a      	cmp	r2, r3
 801176a:	d908      	bls.n	801177e <vPortValidateInterruptPriority+0x26>
 801176c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011770:	f383 8811 	msr	BASEPRI, r3
 8011774:	f3bf 8f6f 	isb	sy
 8011778:	f3bf 8f4f 	dsb	sy
 801177c:	e7fe      	b.n	801177c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801177e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011782:	4a0b      	ldr	r2, [pc, #44]	@ (80117b0 <vPortValidateInterruptPriority+0x58>)
 8011784:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8011788:	6812      	ldr	r2, [r2, #0]
 801178a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801178e:	4293      	cmp	r3, r2
 8011790:	d908      	bls.n	80117a4 <vPortValidateInterruptPriority+0x4c>
 8011792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011796:	f383 8811 	msr	BASEPRI, r3
 801179a:	f3bf 8f6f 	isb	sy
 801179e:	f3bf 8f4f 	dsb	sy
 80117a2:	e7fe      	b.n	80117a2 <vPortValidateInterruptPriority+0x4a>
	}
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop
 80117a8:	e000e3f0 	.word	0xe000e3f0
 80117ac:	240280f8 	.word	0x240280f8
 80117b0:	240280f4 	.word	0x240280f4

080117b4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80117b4:	b510      	push	{r4, lr}
 80117b6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80117b8:	f7ff febc 	bl	8011534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80117bc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80117be:	f7ff fed9 	bl	8011574 <vPortExitCritical>

	return xReturn;
}
 80117c2:	fab4 f084 	clz	r0, r4
 80117c6:	0940      	lsrs	r0, r0, #5
 80117c8:	bd10      	pop	{r4, pc}

080117ca <prvCopyDataToQueue>:
{
 80117ca:	b570      	push	{r4, r5, r6, lr}
 80117cc:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80117ce:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 80117d0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117d2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80117d4:	b942      	cbnz	r2, 80117e8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117d6:	6806      	ldr	r6, [r0, #0]
 80117d8:	b99e      	cbnz	r6, 8011802 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80117da:	6880      	ldr	r0, [r0, #8]
 80117dc:	f001 fa16 	bl	8012c0c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80117e0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80117e2:	3501      	adds	r5, #1
 80117e4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80117e6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80117e8:	b96e      	cbnz	r6, 8011806 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80117ea:	6840      	ldr	r0, [r0, #4]
 80117ec:	f019 ff4f 	bl	802b68e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80117f0:	6863      	ldr	r3, [r4, #4]
 80117f2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80117f4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80117f6:	68a2      	ldr	r2, [r4, #8]
 80117f8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80117fa:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80117fc:	bf24      	itt	cs
 80117fe:	6823      	ldrcs	r3, [r4, #0]
 8011800:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8011802:	2000      	movs	r0, #0
 8011804:	e7ed      	b.n	80117e2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011806:	68c0      	ldr	r0, [r0, #12]
 8011808:	f019 ff41 	bl	802b68e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801180c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801180e:	68e3      	ldr	r3, [r4, #12]
 8011810:	4251      	negs	r1, r2
 8011812:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011814:	6822      	ldr	r2, [r4, #0]
 8011816:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011818:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801181a:	bf3e      	ittt	cc
 801181c:	68a3      	ldrcc	r3, [r4, #8]
 801181e:	185b      	addcc	r3, r3, r1
 8011820:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8011822:	2e02      	cmp	r6, #2
 8011824:	d1ed      	bne.n	8011802 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011826:	b10d      	cbz	r5, 801182c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8011828:	3d01      	subs	r5, #1
 801182a:	e7ea      	b.n	8011802 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 801182c:	4628      	mov	r0, r5
 801182e:	e7d8      	b.n	80117e2 <prvCopyDataToQueue+0x18>

08011830 <prvCopyDataFromQueue>:
{
 8011830:	4603      	mov	r3, r0
 8011832:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011834:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8011836:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011838:	b162      	cbz	r2, 8011854 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801183a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801183c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801183e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011840:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011842:	60dc      	str	r4, [r3, #12]
}
 8011844:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011848:	bf24      	itt	cs
 801184a:	6819      	ldrcs	r1, [r3, #0]
 801184c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801184e:	68d9      	ldr	r1, [r3, #12]
 8011850:	f019 bf1d 	b.w	802b68e <memcpy>
}
 8011854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011858:	4770      	bx	lr

0801185a <prvUnlockQueue>:
{
 801185a:	b570      	push	{r4, r5, r6, lr}
 801185c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801185e:	f7ff fe69 	bl	8011534 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8011862:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011866:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 801186a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801186c:	2d00      	cmp	r5, #0
 801186e:	dc14      	bgt.n	801189a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8011870:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011872:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8011876:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801187a:	f7ff fe7b 	bl	8011574 <vPortExitCritical>
	taskENTER_CRITICAL();
 801187e:	f7ff fe59 	bl	8011534 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8011882:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8011886:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011888:	2d00      	cmp	r5, #0
 801188a:	dc12      	bgt.n	80118b2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 801188c:	23ff      	movs	r3, #255	@ 0xff
 801188e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8011892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8011896:	f7ff be6d 	b.w	8011574 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801189a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801189c:	2b00      	cmp	r3, #0
 801189e:	d0e7      	beq.n	8011870 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80118a0:	4630      	mov	r0, r6
 80118a2:	f001 f8cf 	bl	8012a44 <xTaskRemoveFromEventList>
 80118a6:	b108      	cbz	r0, 80118ac <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80118a8:	f001 f956 	bl	8012b58 <vTaskMissedYield>
			--cTxLock;
 80118ac:	3d01      	subs	r5, #1
 80118ae:	b26d      	sxtb	r5, r5
 80118b0:	e7dc      	b.n	801186c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80118b2:	6923      	ldr	r3, [r4, #16]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d0e9      	beq.n	801188c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80118b8:	4630      	mov	r0, r6
 80118ba:	f001 f8c3 	bl	8012a44 <xTaskRemoveFromEventList>
 80118be:	b108      	cbz	r0, 80118c4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80118c0:	f001 f94a 	bl	8012b58 <vTaskMissedYield>
				--cRxLock;
 80118c4:	3d01      	subs	r5, #1
 80118c6:	b26d      	sxtb	r5, r5
 80118c8:	e7de      	b.n	8011888 <prvUnlockQueue+0x2e>

080118ca <xQueueGenericReset>:
{
 80118ca:	b538      	push	{r3, r4, r5, lr}
 80118cc:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80118ce:	4604      	mov	r4, r0
 80118d0:	b940      	cbnz	r0, 80118e4 <xQueueGenericReset+0x1a>
 80118d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118d6:	f383 8811 	msr	BASEPRI, r3
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	e7fe      	b.n	80118e2 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80118e4:	f7ff fe26 	bl	8011534 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118e8:	6822      	ldr	r2, [r4, #0]
 80118ea:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80118ee:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118f0:	434b      	muls	r3, r1
 80118f2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118f4:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118f6:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118f8:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80118fa:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80118fc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118fe:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011900:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8011902:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011906:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 801190a:	b9a5      	cbnz	r5, 8011936 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801190c:	6923      	ldr	r3, [r4, #16]
 801190e:	b173      	cbz	r3, 801192e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011910:	f104 0010 	add.w	r0, r4, #16
 8011914:	f001 f896 	bl	8012a44 <xTaskRemoveFromEventList>
 8011918:	b148      	cbz	r0, 801192e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 801191a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801191e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011922:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 801192e:	f7ff fe21 	bl	8011574 <vPortExitCritical>
}
 8011932:	2001      	movs	r0, #1
 8011934:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011936:	f104 0010 	add.w	r0, r4, #16
 801193a:	f7ff fd59 	bl	80113f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801193e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011942:	f7ff fd55 	bl	80113f0 <vListInitialise>
 8011946:	e7f2      	b.n	801192e <xQueueGenericReset+0x64>

08011948 <xQueueGenericCreateStatic>:
	{
 8011948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801194a:	460d      	mov	r5, r1
 801194c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801194e:	b940      	cbnz	r0, 8011962 <xQueueGenericCreateStatic+0x1a>
 8011950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011954:	f383 8811 	msr	BASEPRI, r3
 8011958:	f3bf 8f6f 	isb	sy
 801195c:	f3bf 8f4f 	dsb	sy
 8011960:	e7fe      	b.n	8011960 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8011962:	b943      	cbnz	r3, 8011976 <xQueueGenericCreateStatic+0x2e>
 8011964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	e7fe      	b.n	8011974 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011976:	b14a      	cbz	r2, 801198c <xQueueGenericCreateStatic+0x44>
 8011978:	b991      	cbnz	r1, 80119a0 <xQueueGenericCreateStatic+0x58>
 801197a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801197e:	f383 8811 	msr	BASEPRI, r3
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	f3bf 8f4f 	dsb	sy
 801198a:	e7fe      	b.n	801198a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801198c:	b141      	cbz	r1, 80119a0 <xQueueGenericCreateStatic+0x58>
 801198e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	e7fe      	b.n	801199e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80119a0:	2350      	movs	r3, #80	@ 0x50
 80119a2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80119a4:	9b01      	ldr	r3, [sp, #4]
 80119a6:	2b50      	cmp	r3, #80	@ 0x50
 80119a8:	d008      	beq.n	80119bc <xQueueGenericCreateStatic+0x74>
 80119aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119ae:	f383 8811 	msr	BASEPRI, r3
 80119b2:	f3bf 8f6f 	isb	sy
 80119b6:	f3bf 8f4f 	dsb	sy
 80119ba:	e7fe      	b.n	80119ba <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80119bc:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80119be:	2d00      	cmp	r5, #0
 80119c0:	bf08      	it	eq
 80119c2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80119c4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80119c6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80119ca:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80119cc:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80119d0:	4620      	mov	r0, r4
 80119d2:	f7ff ff7a 	bl	80118ca <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80119d6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 80119da:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80119dc:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 80119e0:	b003      	add	sp, #12
 80119e2:	bd30      	pop	{r4, r5, pc}

080119e4 <xQueueGenericCreate>:
	{
 80119e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e6:	460d      	mov	r5, r1
 80119e8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80119ea:	4606      	mov	r6, r0
 80119ec:	b940      	cbnz	r0, 8011a00 <xQueueGenericCreate+0x1c>
 80119ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119f2:	f383 8811 	msr	BASEPRI, r3
 80119f6:	f3bf 8f6f 	isb	sy
 80119fa:	f3bf 8f4f 	dsb	sy
 80119fe:	e7fe      	b.n	80119fe <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a00:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011a02:	3050      	adds	r0, #80	@ 0x50
 8011a04:	f7ff fc1e 	bl	8011244 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8011a08:	4604      	mov	r4, r0
 8011a0a:	b170      	cbz	r0, 8011a2a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8011a12:	b165      	cbz	r5, 8011a2e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a14:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011a18:	2101      	movs	r1, #1
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8011a1e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011a22:	f7ff ff52 	bl	80118ca <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8011a26:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011a2e:	4603      	mov	r3, r0
 8011a30:	e7f2      	b.n	8011a18 <xQueueGenericCreate+0x34>

08011a32 <xQueueCreateCountingSemaphoreStatic>:
	{
 8011a32:	b513      	push	{r0, r1, r4, lr}
 8011a34:	4613      	mov	r3, r2
 8011a36:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8011a38:	b940      	cbnz	r0, 8011a4c <xQueueCreateCountingSemaphoreStatic+0x1a>
 8011a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a3e:	f383 8811 	msr	BASEPRI, r3
 8011a42:	f3bf 8f6f 	isb	sy
 8011a46:	f3bf 8f4f 	dsb	sy
 8011a4a:	e7fe      	b.n	8011a4a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011a4c:	4288      	cmp	r0, r1
 8011a4e:	d208      	bcs.n	8011a62 <xQueueCreateCountingSemaphoreStatic+0x30>
 8011a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a54:	f383 8811 	msr	BASEPRI, r3
 8011a58:	f3bf 8f6f 	isb	sy
 8011a5c:	f3bf 8f4f 	dsb	sy
 8011a60:	e7fe      	b.n	8011a60 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011a62:	2202      	movs	r2, #2
 8011a64:	9200      	str	r2, [sp, #0]
 8011a66:	2200      	movs	r2, #0
 8011a68:	4611      	mov	r1, r2
 8011a6a:	f7ff ff6d 	bl	8011948 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8011a6e:	b100      	cbz	r0, 8011a72 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011a70:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8011a72:	b002      	add	sp, #8
 8011a74:	bd10      	pop	{r4, pc}

08011a76 <xQueueCreateCountingSemaphore>:
	{
 8011a76:	b510      	push	{r4, lr}
 8011a78:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8011a7a:	b940      	cbnz	r0, 8011a8e <xQueueCreateCountingSemaphore+0x18>
 8011a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a80:	f383 8811 	msr	BASEPRI, r3
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	f3bf 8f4f 	dsb	sy
 8011a8c:	e7fe      	b.n	8011a8c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011a8e:	4288      	cmp	r0, r1
 8011a90:	d208      	bcs.n	8011aa4 <xQueueCreateCountingSemaphore+0x2e>
 8011a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a96:	f383 8811 	msr	BASEPRI, r3
 8011a9a:	f3bf 8f6f 	isb	sy
 8011a9e:	f3bf 8f4f 	dsb	sy
 8011aa2:	e7fe      	b.n	8011aa2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011aa4:	2202      	movs	r2, #2
 8011aa6:	2100      	movs	r1, #0
 8011aa8:	f7ff ff9c 	bl	80119e4 <xQueueGenericCreate>
		if( xHandle != NULL )
 8011aac:	b100      	cbz	r0, 8011ab0 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011aae:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8011ab0:	bd10      	pop	{r4, pc}

08011ab2 <xQueueGenericSend>:
{
 8011ab2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011ab6:	460f      	mov	r7, r1
 8011ab8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8011aba:	4604      	mov	r4, r0
{
 8011abc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8011abe:	b940      	cbnz	r0, 8011ad2 <xQueueGenericSend+0x20>
 8011ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ac4:	f383 8811 	msr	BASEPRI, r3
 8011ac8:	f3bf 8f6f 	isb	sy
 8011acc:	f3bf 8f4f 	dsb	sy
 8011ad0:	e7fe      	b.n	8011ad0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ad2:	b951      	cbnz	r1, 8011aea <xQueueGenericSend+0x38>
 8011ad4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8011ad6:	b143      	cbz	r3, 8011aea <xQueueGenericSend+0x38>
 8011ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011adc:	f383 8811 	msr	BASEPRI, r3
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	f3bf 8f4f 	dsb	sy
 8011ae8:	e7fe      	b.n	8011ae8 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011aea:	2e02      	cmp	r6, #2
 8011aec:	d10b      	bne.n	8011b06 <xQueueGenericSend+0x54>
 8011aee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d008      	beq.n	8011b06 <xQueueGenericSend+0x54>
 8011af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011af8:	f383 8811 	msr	BASEPRI, r3
 8011afc:	f3bf 8f6f 	isb	sy
 8011b00:	f3bf 8f4f 	dsb	sy
 8011b04:	e7fe      	b.n	8011b04 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b06:	f001 f833 	bl	8012b70 <xTaskGetSchedulerState>
 8011b0a:	4605      	mov	r5, r0
 8011b0c:	b330      	cbz	r0, 8011b5c <xQueueGenericSend+0xaa>
 8011b0e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8011b10:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8011b14:	f7ff fd0e 	bl	8011534 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b18:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011b1a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d301      	bcc.n	8011b24 <xQueueGenericSend+0x72>
 8011b20:	2e02      	cmp	r6, #2
 8011b22:	d127      	bne.n	8011b74 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b24:	4632      	mov	r2, r6
 8011b26:	4639      	mov	r1, r7
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f7ff fe4e 	bl	80117ca <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011b30:	b11b      	cbz	r3, 8011b3a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b32:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011b36:	f000 ff85 	bl	8012a44 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8011b3a:	b148      	cbz	r0, 8011b50 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8011b3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011b50:	f7ff fd10 	bl	8011574 <vPortExitCritical>
				return pdPASS;
 8011b54:	2001      	movs	r0, #1
}
 8011b56:	b004      	add	sp, #16
 8011b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b5c:	9b01      	ldr	r3, [sp, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0d6      	beq.n	8011b10 <xQueueGenericSend+0x5e>
 8011b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b66:	f383 8811 	msr	BASEPRI, r3
 8011b6a:	f3bf 8f6f 	isb	sy
 8011b6e:	f3bf 8f4f 	dsb	sy
 8011b72:	e7fe      	b.n	8011b72 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b74:	9b01      	ldr	r3, [sp, #4]
 8011b76:	b91b      	cbnz	r3, 8011b80 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8011b78:	f7ff fcfc 	bl	8011574 <vPortExitCritical>
					return errQUEUE_FULL;
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	e7ea      	b.n	8011b56 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8011b80:	b915      	cbnz	r5, 8011b88 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b82:	a802      	add	r0, sp, #8
 8011b84:	f000 ffa0 	bl	8012ac8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8011b88:	f7ff fcf4 	bl	8011574 <vPortExitCritical>
		vTaskSuspendAll();
 8011b8c:	f000 fd38 	bl	8012600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b90:	f7ff fcd0 	bl	8011534 <vPortEnterCritical>
 8011b94:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011b98:	2bff      	cmp	r3, #255	@ 0xff
 8011b9a:	d101      	bne.n	8011ba0 <xQueueGenericSend+0xee>
 8011b9c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8011ba0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011ba4:	2bff      	cmp	r3, #255	@ 0xff
 8011ba6:	d101      	bne.n	8011bac <xQueueGenericSend+0xfa>
 8011ba8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8011bac:	f7ff fce2 	bl	8011574 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011bb0:	a901      	add	r1, sp, #4
 8011bb2:	a802      	add	r0, sp, #8
 8011bb4:	f000 ff94 	bl	8012ae0 <xTaskCheckForTimeOut>
 8011bb8:	bb38      	cbnz	r0, 8011c0a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011bba:	f7ff fcbb 	bl	8011534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011bbe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011bc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d10e      	bne.n	8011be4 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8011bc6:	f7ff fcd5 	bl	8011574 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011bca:	9901      	ldr	r1, [sp, #4]
 8011bcc:	f104 0010 	add.w	r0, r4, #16
 8011bd0:	f000 ff00 	bl	80129d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f7ff fe40 	bl	801185a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011bda:	f000 fdb5 	bl	8012748 <xTaskResumeAll>
 8011bde:	b148      	cbz	r0, 8011bf4 <xQueueGenericSend+0x142>
 8011be0:	2501      	movs	r5, #1
 8011be2:	e797      	b.n	8011b14 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8011be4:	f7ff fcc6 	bl	8011574 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011be8:	4620      	mov	r0, r4
 8011bea:	f7ff fe36 	bl	801185a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011bee:	f000 fdab 	bl	8012748 <xTaskResumeAll>
 8011bf2:	e7f5      	b.n	8011be0 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8011bf4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bfc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011c00:	f3bf 8f4f 	dsb	sy
 8011c04:	f3bf 8f6f 	isb	sy
 8011c08:	e7ea      	b.n	8011be0 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f7ff fe25 	bl	801185a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c10:	f000 fd9a 	bl	8012748 <xTaskResumeAll>
			return errQUEUE_FULL;
 8011c14:	e7b2      	b.n	8011b7c <xQueueGenericSend+0xca>

08011c16 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011c16:	2200      	movs	r2, #0
	{
 8011c18:	460b      	mov	r3, r1
 8011c1a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	9000      	str	r0, [sp, #0]
 8011c20:	2001      	movs	r0, #1
 8011c22:	f7ff fe91 	bl	8011948 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8011c26:	4604      	mov	r4, r0
 8011c28:	b138      	cbz	r0, 8011c3a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011c2a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011c30:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011c32:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011c34:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011c36:	f7ff ff3c 	bl	8011ab2 <xQueueGenericSend>
	}
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	b002      	add	sp, #8
 8011c3e:	bd10      	pop	{r4, pc}

08011c40 <xQueueGiveMutexRecursive>:
	{
 8011c40:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8011c42:	4604      	mov	r4, r0
 8011c44:	b940      	cbnz	r0, 8011c58 <xQueueGiveMutexRecursive+0x18>
 8011c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c4a:	f383 8811 	msr	BASEPRI, r3
 8011c4e:	f3bf 8f6f 	isb	sy
 8011c52:	f3bf 8f4f 	dsb	sy
 8011c56:	e7fe      	b.n	8011c56 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011c58:	6885      	ldr	r5, [r0, #8]
 8011c5a:	f000 ff83 	bl	8012b64 <xTaskGetCurrentTaskHandle>
 8011c5e:	4285      	cmp	r5, r0
 8011c60:	d10b      	bne.n	8011c7a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011c62:	68e3      	ldr	r3, [r4, #12]
 8011c64:	3b01      	subs	r3, #1
 8011c66:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011c68:	b10b      	cbz	r3, 8011c6e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 8011c6a:	2001      	movs	r0, #1
	}
 8011c6c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011c6e:	461a      	mov	r2, r3
 8011c70:	4619      	mov	r1, r3
 8011c72:	4620      	mov	r0, r4
 8011c74:	f7ff ff1d 	bl	8011ab2 <xQueueGenericSend>
 8011c78:	e7f7      	b.n	8011c6a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 8011c7a:	2000      	movs	r0, #0
		return xReturn;
 8011c7c:	e7f6      	b.n	8011c6c <xQueueGiveMutexRecursive+0x2c>

08011c7e <xQueueCreateMutex>:
	{
 8011c7e:	b570      	push	{r4, r5, r6, lr}
 8011c80:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011c82:	2050      	movs	r0, #80	@ 0x50
 8011c84:	f7ff fade 	bl	8011244 <pvPortMalloc>
 8011c88:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 8011c8a:	b198      	cbz	r0, 8011cb4 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011c8c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8011c8e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011c90:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011c92:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8011c96:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011c9a:	f7ff fe16 	bl	80118ca <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011c9e:	462b      	mov	r3, r5
 8011ca0:	462a      	mov	r2, r5
 8011ca2:	4629      	mov	r1, r5
 8011ca4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8011ca6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011caa:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011cac:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011cae:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011cb0:	f7ff feff 	bl	8011ab2 <xQueueGenericSend>
	}
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	bd70      	pop	{r4, r5, r6, pc}

08011cb8 <xQueueGenericSendFromISR>:
{
 8011cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cbc:	4689      	mov	r9, r1
 8011cbe:	4617      	mov	r7, r2
 8011cc0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	b940      	cbnz	r0, 8011cd8 <xQueueGenericSendFromISR+0x20>
 8011cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cca:	f383 8811 	msr	BASEPRI, r3
 8011cce:	f3bf 8f6f 	isb	sy
 8011cd2:	f3bf 8f4f 	dsb	sy
 8011cd6:	e7fe      	b.n	8011cd6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011cd8:	b951      	cbnz	r1, 8011cf0 <xQueueGenericSendFromISR+0x38>
 8011cda:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8011cdc:	b143      	cbz	r3, 8011cf0 <xQueueGenericSendFromISR+0x38>
 8011cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ce2:	f383 8811 	msr	BASEPRI, r3
 8011ce6:	f3bf 8f6f 	isb	sy
 8011cea:	f3bf 8f4f 	dsb	sy
 8011cee:	e7fe      	b.n	8011cee <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011cf0:	2e02      	cmp	r6, #2
 8011cf2:	d10b      	bne.n	8011d0c <xQueueGenericSendFromISR+0x54>
 8011cf4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011cf6:	2b01      	cmp	r3, #1
 8011cf8:	d008      	beq.n	8011d0c <xQueueGenericSendFromISR+0x54>
 8011cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cfe:	f383 8811 	msr	BASEPRI, r3
 8011d02:	f3bf 8f6f 	isb	sy
 8011d06:	f3bf 8f4f 	dsb	sy
 8011d0a:	e7fe      	b.n	8011d0a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d0c:	f7ff fd24 	bl	8011758 <vPortValidateInterruptPriority>
	__asm volatile
 8011d10:	f3ef 8811 	mrs	r8, BASEPRI
 8011d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d18:	f383 8811 	msr	BASEPRI, r3
 8011d1c:	f3bf 8f6f 	isb	sy
 8011d20:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d24:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011d26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d301      	bcc.n	8011d30 <xQueueGenericSendFromISR+0x78>
 8011d2c:	2e02      	cmp	r6, #2
 8011d2e:	d11e      	bne.n	8011d6e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d30:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d34:	4632      	mov	r2, r6
 8011d36:	4649      	mov	r1, r9
 8011d38:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d3a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d3c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d3e:	f7ff fd44 	bl	80117ca <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8011d42:	1c6b      	adds	r3, r5, #1
 8011d44:	d10e      	bne.n	8011d64 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011d48:	b13b      	cbz	r3, 8011d5a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d4a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011d4e:	f000 fe79 	bl	8012a44 <xTaskRemoveFromEventList>
 8011d52:	b110      	cbz	r0, 8011d5a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8011d54:	b10f      	cbz	r7, 8011d5a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d56:	2301      	movs	r3, #1
 8011d58:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8011d5a:	2001      	movs	r0, #1
	__asm volatile
 8011d5c:	f388 8811 	msr	BASEPRI, r8
}
 8011d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d64:	3501      	adds	r5, #1
 8011d66:	b26d      	sxtb	r5, r5
 8011d68:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8011d6c:	e7f5      	b.n	8011d5a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8011d6e:	2000      	movs	r0, #0
 8011d70:	e7f4      	b.n	8011d5c <xQueueGenericSendFromISR+0xa4>

08011d72 <xQueueGiveFromISR>:
{
 8011d72:	b570      	push	{r4, r5, r6, lr}
 8011d74:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8011d76:	4604      	mov	r4, r0
 8011d78:	b940      	cbnz	r0, 8011d8c <xQueueGiveFromISR+0x1a>
	__asm volatile
 8011d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d7e:	f383 8811 	msr	BASEPRI, r3
 8011d82:	f3bf 8f6f 	isb	sy
 8011d86:	f3bf 8f4f 	dsb	sy
 8011d8a:	e7fe      	b.n	8011d8a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8011d8c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8011d8e:	b143      	cbz	r3, 8011da2 <xQueueGiveFromISR+0x30>
 8011d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d94:	f383 8811 	msr	BASEPRI, r3
 8011d98:	f3bf 8f6f 	isb	sy
 8011d9c:	f3bf 8f4f 	dsb	sy
 8011da0:	e7fe      	b.n	8011da0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011da2:	6803      	ldr	r3, [r0, #0]
 8011da4:	b953      	cbnz	r3, 8011dbc <xQueueGiveFromISR+0x4a>
 8011da6:	6883      	ldr	r3, [r0, #8]
 8011da8:	b143      	cbz	r3, 8011dbc <xQueueGiveFromISR+0x4a>
 8011daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dae:	f383 8811 	msr	BASEPRI, r3
 8011db2:	f3bf 8f6f 	isb	sy
 8011db6:	f3bf 8f4f 	dsb	sy
 8011dba:	e7fe      	b.n	8011dba <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dbc:	f7ff fccc 	bl	8011758 <vPortValidateInterruptPriority>
	__asm volatile
 8011dc0:	f3ef 8611 	mrs	r6, BASEPRI
 8011dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dc8:	f383 8811 	msr	BASEPRI, r3
 8011dcc:	f3bf 8f6f 	isb	sy
 8011dd0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dd4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011dd6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011dd8:	4293      	cmp	r3, r2
 8011dda:	d919      	bls.n	8011e10 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8011ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011de0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8011de2:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8011de4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011de6:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8011de8:	d10d      	bne.n	8011e06 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011dea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011dec:	b13b      	cbz	r3, 8011dfe <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011dee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011df2:	f000 fe27 	bl	8012a44 <xTaskRemoveFromEventList>
 8011df6:	b110      	cbz	r0, 8011dfe <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8011df8:	b10d      	cbz	r5, 8011dfe <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8011dfe:	2001      	movs	r0, #1
	__asm volatile
 8011e00:	f386 8811 	msr	BASEPRI, r6
}
 8011e04:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011e06:	3301      	adds	r3, #1
 8011e08:	b25b      	sxtb	r3, r3
 8011e0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8011e0e:	e7f6      	b.n	8011dfe <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8011e10:	2000      	movs	r0, #0
 8011e12:	e7f5      	b.n	8011e00 <xQueueGiveFromISR+0x8e>

08011e14 <xQueueReceive>:
{
 8011e14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011e18:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8011e1a:	4604      	mov	r4, r0
{
 8011e1c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8011e1e:	b940      	cbnz	r0, 8011e32 <xQueueReceive+0x1e>
	__asm volatile
 8011e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e24:	f383 8811 	msr	BASEPRI, r3
 8011e28:	f3bf 8f6f 	isb	sy
 8011e2c:	f3bf 8f4f 	dsb	sy
 8011e30:	e7fe      	b.n	8011e30 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e32:	b951      	cbnz	r1, 8011e4a <xQueueReceive+0x36>
 8011e34:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8011e36:	b143      	cbz	r3, 8011e4a <xQueueReceive+0x36>
 8011e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e3c:	f383 8811 	msr	BASEPRI, r3
 8011e40:	f3bf 8f6f 	isb	sy
 8011e44:	f3bf 8f4f 	dsb	sy
 8011e48:	e7fe      	b.n	8011e48 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e4a:	f000 fe91 	bl	8012b70 <xTaskGetSchedulerState>
 8011e4e:	4605      	mov	r5, r0
 8011e50:	b318      	cbz	r0, 8011e9a <xQueueReceive+0x86>
 8011e52:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8011e54:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8011e58:	f7ff fb6c 	bl	8011534 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e5c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e5e:	b347      	cbz	r7, 8011eb2 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e60:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e62:	4631      	mov	r1, r6
 8011e64:	4620      	mov	r0, r4
 8011e66:	f7ff fce3 	bl	8011830 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e6a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e6c:	6923      	ldr	r3, [r4, #16]
 8011e6e:	b173      	cbz	r3, 8011e8e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e70:	f104 0010 	add.w	r0, r4, #16
 8011e74:	f000 fde6 	bl	8012a44 <xTaskRemoveFromEventList>
 8011e78:	b148      	cbz	r0, 8011e8e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8011e7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011e86:	f3bf 8f4f 	dsb	sy
 8011e8a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011e8e:	f7ff fb71 	bl	8011574 <vPortExitCritical>
				return pdPASS;
 8011e92:	2001      	movs	r0, #1
}
 8011e94:	b004      	add	sp, #16
 8011e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e9a:	9b01      	ldr	r3, [sp, #4]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d0d9      	beq.n	8011e54 <xQueueReceive+0x40>
 8011ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ea4:	f383 8811 	msr	BASEPRI, r3
 8011ea8:	f3bf 8f6f 	isb	sy
 8011eac:	f3bf 8f4f 	dsb	sy
 8011eb0:	e7fe      	b.n	8011eb0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011eb2:	9b01      	ldr	r3, [sp, #4]
 8011eb4:	b91b      	cbnz	r3, 8011ebe <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8011eb6:	f7ff fb5d 	bl	8011574 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8011eba:	2000      	movs	r0, #0
 8011ebc:	e7ea      	b.n	8011e94 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8011ebe:	b915      	cbnz	r5, 8011ec6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ec0:	a802      	add	r0, sp, #8
 8011ec2:	f000 fe01 	bl	8012ac8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8011ec6:	f7ff fb55 	bl	8011574 <vPortExitCritical>
		vTaskSuspendAll();
 8011eca:	f000 fb99 	bl	8012600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ece:	f7ff fb31 	bl	8011534 <vPortEnterCritical>
 8011ed2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011ed6:	2bff      	cmp	r3, #255	@ 0xff
 8011ed8:	d101      	bne.n	8011ede <xQueueReceive+0xca>
 8011eda:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8011ede:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011ee2:	2bff      	cmp	r3, #255	@ 0xff
 8011ee4:	d101      	bne.n	8011eea <xQueueReceive+0xd6>
 8011ee6:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8011eea:	f7ff fb43 	bl	8011574 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011eee:	a901      	add	r1, sp, #4
 8011ef0:	a802      	add	r0, sp, #8
 8011ef2:	f000 fdf5 	bl	8012ae0 <xTaskCheckForTimeOut>
 8011ef6:	bb00      	cbnz	r0, 8011f3a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f7ff fc5b 	bl	80117b4 <prvIsQueueEmpty>
 8011efe:	b1b0      	cbz	r0, 8011f2e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011f00:	9901      	ldr	r1, [sp, #4]
 8011f02:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011f06:	f000 fd65 	bl	80129d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	f7ff fca5 	bl	801185a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011f10:	f000 fc1a 	bl	8012748 <xTaskResumeAll>
 8011f14:	b948      	cbnz	r0, 8011f2a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8011f16:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011f22:	f3bf 8f4f 	dsb	sy
 8011f26:	f3bf 8f6f 	isb	sy
 8011f2a:	2501      	movs	r5, #1
 8011f2c:	e794      	b.n	8011e58 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f7ff fc93 	bl	801185a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f34:	f000 fc08 	bl	8012748 <xTaskResumeAll>
 8011f38:	e7f7      	b.n	8011f2a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f7ff fc8d 	bl	801185a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f40:	f000 fc02 	bl	8012748 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f44:	4620      	mov	r0, r4
 8011f46:	f7ff fc35 	bl	80117b4 <prvIsQueueEmpty>
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d0ed      	beq.n	8011f2a <xQueueReceive+0x116>
 8011f4e:	e7b4      	b.n	8011eba <xQueueReceive+0xa6>

08011f50 <xQueueSemaphoreTake>:
{
 8011f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f52:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8011f54:	4604      	mov	r4, r0
{
 8011f56:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8011f58:	b940      	cbnz	r0, 8011f6c <xQueueSemaphoreTake+0x1c>
 8011f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f5e:	f383 8811 	msr	BASEPRI, r3
 8011f62:	f3bf 8f6f 	isb	sy
 8011f66:	f3bf 8f4f 	dsb	sy
 8011f6a:	e7fe      	b.n	8011f6a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8011f6c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8011f6e:	b145      	cbz	r5, 8011f82 <xQueueSemaphoreTake+0x32>
 8011f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f74:	f383 8811 	msr	BASEPRI, r3
 8011f78:	f3bf 8f6f 	isb	sy
 8011f7c:	f3bf 8f4f 	dsb	sy
 8011f80:	e7fe      	b.n	8011f80 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f82:	f000 fdf5 	bl	8012b70 <xTaskGetSchedulerState>
 8011f86:	4606      	mov	r6, r0
 8011f88:	b320      	cbz	r0, 8011fd4 <xQueueSemaphoreTake+0x84>
 8011f8a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8011f8c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8011f8e:	f7ff fad1 	bl	8011534 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011f92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011f94:	b353      	cbz	r3, 8011fec <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011f96:	3b01      	subs	r3, #1
 8011f98:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f9a:	6823      	ldr	r3, [r4, #0]
 8011f9c:	b913      	cbnz	r3, 8011fa4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011f9e:	f000 fec5 	bl	8012d2c <pvTaskIncrementMutexHeldCount>
 8011fa2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fa4:	6923      	ldr	r3, [r4, #16]
 8011fa6:	b173      	cbz	r3, 8011fc6 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fa8:	f104 0010 	add.w	r0, r4, #16
 8011fac:	f000 fd4a 	bl	8012a44 <xTaskRemoveFromEventList>
 8011fb0:	b148      	cbz	r0, 8011fc6 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8011fb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011fbe:	f3bf 8f4f 	dsb	sy
 8011fc2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011fc6:	f7ff fad5 	bl	8011574 <vPortExitCritical>
				return pdPASS;
 8011fca:	2001      	movs	r0, #1
}
 8011fcc:	b005      	add	sp, #20
 8011fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fd0:	4635      	mov	r5, r6
 8011fd2:	e7db      	b.n	8011f8c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011fd4:	9b01      	ldr	r3, [sp, #4]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d0fa      	beq.n	8011fd0 <xQueueSemaphoreTake+0x80>
 8011fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fde:	f383 8811 	msr	BASEPRI, r3
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	f3bf 8f4f 	dsb	sy
 8011fea:	e7fe      	b.n	8011fea <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011fec:	9b01      	ldr	r3, [sp, #4]
 8011fee:	b953      	cbnz	r3, 8012006 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011ff0:	2d00      	cmp	r5, #0
 8011ff2:	d066      	beq.n	80120c2 <xQueueSemaphoreTake+0x172>
 8011ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ff8:	f383 8811 	msr	BASEPRI, r3
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	f3bf 8f4f 	dsb	sy
 8012004:	e7fe      	b.n	8012004 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8012006:	b916      	cbnz	r6, 801200e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012008:	a802      	add	r0, sp, #8
 801200a:	f000 fd5d 	bl	8012ac8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801200e:	f7ff fab1 	bl	8011574 <vPortExitCritical>
		vTaskSuspendAll();
 8012012:	f000 faf5 	bl	8012600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012016:	f7ff fa8d 	bl	8011534 <vPortEnterCritical>
 801201a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801201e:	2bff      	cmp	r3, #255	@ 0xff
 8012020:	d101      	bne.n	8012026 <xQueueSemaphoreTake+0xd6>
 8012022:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8012026:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801202a:	2bff      	cmp	r3, #255	@ 0xff
 801202c:	d101      	bne.n	8012032 <xQueueSemaphoreTake+0xe2>
 801202e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012032:	f7ff fa9f 	bl	8011574 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012036:	a901      	add	r1, sp, #4
 8012038:	a802      	add	r0, sp, #8
 801203a:	f000 fd51 	bl	8012ae0 <xTaskCheckForTimeOut>
 801203e:	bb50      	cbnz	r0, 8012096 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012040:	4620      	mov	r0, r4
 8012042:	f7ff fbb7 	bl	80117b4 <prvIsQueueEmpty>
 8012046:	b300      	cbz	r0, 801208a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	b93b      	cbnz	r3, 801205c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 801204c:	f7ff fa72 	bl	8011534 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012050:	68a0      	ldr	r0, [r4, #8]
 8012052:	f000 fd9d 	bl	8012b90 <xTaskPriorityInherit>
 8012056:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8012058:	f7ff fa8c 	bl	8011574 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801205c:	9901      	ldr	r1, [sp, #4]
 801205e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8012062:	f000 fcb7 	bl	80129d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012066:	4620      	mov	r0, r4
 8012068:	f7ff fbf7 	bl	801185a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801206c:	f000 fb6c 	bl	8012748 <xTaskResumeAll>
 8012070:	b948      	cbnz	r0, 8012086 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8012072:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801207a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	f3bf 8f6f 	isb	sy
 8012086:	2601      	movs	r6, #1
 8012088:	e781      	b.n	8011f8e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 801208a:	4620      	mov	r0, r4
 801208c:	f7ff fbe5 	bl	801185a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012090:	f000 fb5a 	bl	8012748 <xTaskResumeAll>
 8012094:	e7f7      	b.n	8012086 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8012096:	4620      	mov	r0, r4
 8012098:	f7ff fbdf 	bl	801185a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801209c:	f000 fb54 	bl	8012748 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120a0:	4620      	mov	r0, r4
 80120a2:	f7ff fb87 	bl	80117b4 <prvIsQueueEmpty>
 80120a6:	2800      	cmp	r0, #0
 80120a8:	d0ed      	beq.n	8012086 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 80120aa:	b165      	cbz	r5, 80120c6 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 80120ac:	f7ff fa42 	bl	8011534 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80120b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80120b2:	b119      	cbz	r1, 80120bc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80120b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80120b6:	6819      	ldr	r1, [r3, #0]
 80120b8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80120bc:	68a0      	ldr	r0, [r4, #8]
 80120be:	f000 fde7 	bl	8012c90 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80120c2:	f7ff fa57 	bl	8011574 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80120c6:	2000      	movs	r0, #0
 80120c8:	e780      	b.n	8011fcc <xQueueSemaphoreTake+0x7c>

080120ca <xQueueTakeMutexRecursive>:
	{
 80120ca:	b570      	push	{r4, r5, r6, lr}
 80120cc:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 80120ce:	4604      	mov	r4, r0
 80120d0:	b940      	cbnz	r0, 80120e4 <xQueueTakeMutexRecursive+0x1a>
 80120d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d6:	f383 8811 	msr	BASEPRI, r3
 80120da:	f3bf 8f6f 	isb	sy
 80120de:	f3bf 8f4f 	dsb	sy
 80120e2:	e7fe      	b.n	80120e2 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80120e4:	6886      	ldr	r6, [r0, #8]
 80120e6:	f000 fd3d 	bl	8012b64 <xTaskGetCurrentTaskHandle>
 80120ea:	4286      	cmp	r6, r0
 80120ec:	d104      	bne.n	80120f8 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80120ee:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80120f0:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80120f2:	3301      	adds	r3, #1
 80120f4:	60e3      	str	r3, [r4, #12]
	}
 80120f6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80120f8:	4629      	mov	r1, r5
 80120fa:	4620      	mov	r0, r4
 80120fc:	f7ff ff28 	bl	8011f50 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8012100:	2800      	cmp	r0, #0
 8012102:	d0f8      	beq.n	80120f6 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012104:	68e3      	ldr	r3, [r4, #12]
 8012106:	3301      	adds	r3, #1
 8012108:	60e3      	str	r3, [r4, #12]
 801210a:	e7f4      	b.n	80120f6 <xQueueTakeMutexRecursive+0x2c>

0801210c <xQueueReceiveFromISR>:
{
 801210c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012110:	4689      	mov	r9, r1
 8012112:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8012114:	4604      	mov	r4, r0
 8012116:	b940      	cbnz	r0, 801212a <xQueueReceiveFromISR+0x1e>
 8012118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	e7fe      	b.n	8012128 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801212a:	b951      	cbnz	r1, 8012142 <xQueueReceiveFromISR+0x36>
 801212c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801212e:	b143      	cbz	r3, 8012142 <xQueueReceiveFromISR+0x36>
 8012130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012134:	f383 8811 	msr	BASEPRI, r3
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	e7fe      	b.n	8012140 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012142:	f7ff fb09 	bl	8011758 <vPortValidateInterruptPriority>
	__asm volatile
 8012146:	f3ef 8711 	mrs	r7, BASEPRI
 801214a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801214e:	f383 8811 	msr	BASEPRI, r3
 8012152:	f3bf 8f6f 	isb	sy
 8012156:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801215a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801215c:	b30d      	cbz	r5, 80121a2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 801215e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012162:	4649      	mov	r1, r9
 8012164:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012166:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8012168:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801216a:	f7ff fb61 	bl	8011830 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801216e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8012170:	1c73      	adds	r3, r6, #1
 8012172:	d111      	bne.n	8012198 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012174:	6923      	ldr	r3, [r4, #16]
 8012176:	b153      	cbz	r3, 801218e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012178:	f104 0010 	add.w	r0, r4, #16
 801217c:	f000 fc62 	bl	8012a44 <xTaskRemoveFromEventList>
 8012180:	b128      	cbz	r0, 801218e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8012182:	f1b8 0f00 	cmp.w	r8, #0
 8012186:	d002      	beq.n	801218e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012188:	2301      	movs	r3, #1
 801218a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 801218e:	2001      	movs	r0, #1
	__asm volatile
 8012190:	f387 8811 	msr	BASEPRI, r7
}
 8012194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012198:	3601      	adds	r6, #1
 801219a:	b276      	sxtb	r6, r6
 801219c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80121a0:	e7f5      	b.n	801218e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 80121a2:	4628      	mov	r0, r5
 80121a4:	e7f4      	b.n	8012190 <xQueueReceiveFromISR+0x84>
	...

080121a8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80121a8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80121aa:	4a07      	ldr	r2, [pc, #28]	@ (80121c8 <vQueueAddToRegistry+0x20>)
	{
 80121ac:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80121ae:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80121b2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80121b6:	b91d      	cbnz	r5, 80121c0 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80121b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80121bc:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80121be:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80121c0:	3301      	adds	r3, #1
 80121c2:	2b08      	cmp	r3, #8
 80121c4:	d1f3      	bne.n	80121ae <vQueueAddToRegistry+0x6>
 80121c6:	e7fa      	b.n	80121be <vQueueAddToRegistry+0x16>
 80121c8:	240280fc 	.word	0x240280fc

080121cc <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80121cc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80121ce:	4a09      	ldr	r2, [pc, #36]	@ (80121f4 <vQueueUnregisterQueue+0x28>)
	{
 80121d0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80121d2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80121d6:	00dc      	lsls	r4, r3, #3
 80121d8:	4281      	cmp	r1, r0
 80121da:	d106      	bne.n	80121ea <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80121dc:	4a06      	ldr	r2, [pc, #24]	@ (80121f8 <vQueueUnregisterQueue+0x2c>)
 80121de:	2100      	movs	r1, #0
 80121e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80121e4:	4422      	add	r2, r4
 80121e6:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80121e8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80121ea:	3301      	adds	r3, #1
 80121ec:	2b08      	cmp	r3, #8
 80121ee:	d1f0      	bne.n	80121d2 <vQueueUnregisterQueue+0x6>
 80121f0:	e7fa      	b.n	80121e8 <vQueueUnregisterQueue+0x1c>
 80121f2:	bf00      	nop
 80121f4:	24028100 	.word	0x24028100
 80121f8:	240280fc 	.word	0x240280fc

080121fc <vQueueDelete>:
{
 80121fc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80121fe:	b940      	cbnz	r0, 8012212 <vQueueDelete+0x16>
	__asm volatile
 8012200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012204:	f383 8811 	msr	BASEPRI, r3
 8012208:	f3bf 8f6f 	isb	sy
 801220c:	f3bf 8f4f 	dsb	sy
 8012210:	e7fe      	b.n	8012210 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8012212:	f7ff ffdb 	bl	80121cc <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012216:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 801221a:	b91b      	cbnz	r3, 8012224 <vQueueDelete+0x28>
}
 801221c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8012220:	f7ff b8a8 	b.w	8011374 <vPortFree>
}
 8012224:	bd10      	pop	{r4, pc}

08012226 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012226:	b570      	push	{r4, r5, r6, lr}
 8012228:	4604      	mov	r4, r0
 801222a:	460d      	mov	r5, r1
 801222c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801222e:	f7ff f981 	bl	8011534 <vPortEnterCritical>
 8012232:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012236:	2bff      	cmp	r3, #255	@ 0xff
 8012238:	d102      	bne.n	8012240 <vQueueWaitForMessageRestricted+0x1a>
 801223a:	2300      	movs	r3, #0
 801223c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8012240:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012244:	2bff      	cmp	r3, #255	@ 0xff
 8012246:	d102      	bne.n	801224e <vQueueWaitForMessageRestricted+0x28>
 8012248:	2300      	movs	r3, #0
 801224a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801224e:	f7ff f991 	bl	8011574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012252:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012254:	b92b      	cbnz	r3, 8012262 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012256:	4632      	mov	r2, r6
 8012258:	4629      	mov	r1, r5
 801225a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801225e:	f000 fbd3 	bl	8012a08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012262:	4620      	mov	r0, r4
	}
 8012264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8012268:	f7ff baf7 	b.w	801185a <prvUnlockQueue>

0801226c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801226c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012270:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012272:	f7ff f95f 	bl	8011534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012276:	4b2f      	ldr	r3, [pc, #188]	@ (8012334 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8012278:	4e2f      	ldr	r6, [pc, #188]	@ (8012338 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	4f2f      	ldr	r7, [pc, #188]	@ (801233c <prvAddNewTaskToReadyList+0xd0>)
 801227e:	3201      	adds	r2, #1
 8012280:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8012282:	6835      	ldr	r5, [r6, #0]
 8012284:	2d00      	cmp	r5, #0
 8012286:	d14a      	bne.n	801231e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012288:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2b01      	cmp	r3, #1
 801228e:	d11f      	bne.n	80122d0 <prvAddNewTaskToReadyList+0x64>
 8012290:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012292:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012294:	4640      	mov	r0, r8
 8012296:	f7ff f8ab 	bl	80113f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801229a:	f108 0814 	add.w	r8, r8, #20
 801229e:	2d38      	cmp	r5, #56	@ 0x38
 80122a0:	d1f7      	bne.n	8012292 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80122a2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8012364 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80122a6:	4d26      	ldr	r5, [pc, #152]	@ (8012340 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80122a8:	4640      	mov	r0, r8
 80122aa:	f7ff f8a1 	bl	80113f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80122ae:	4628      	mov	r0, r5
 80122b0:	f7ff f89e 	bl	80113f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80122b4:	4823      	ldr	r0, [pc, #140]	@ (8012344 <prvAddNewTaskToReadyList+0xd8>)
 80122b6:	f7ff f89b 	bl	80113f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80122ba:	4823      	ldr	r0, [pc, #140]	@ (8012348 <prvAddNewTaskToReadyList+0xdc>)
 80122bc:	f7ff f898 	bl	80113f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80122c0:	4822      	ldr	r0, [pc, #136]	@ (801234c <prvAddNewTaskToReadyList+0xe0>)
 80122c2:	f7ff f895 	bl	80113f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80122c6:	4b22      	ldr	r3, [pc, #136]	@ (8012350 <prvAddNewTaskToReadyList+0xe4>)
 80122c8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80122cc:	4b21      	ldr	r3, [pc, #132]	@ (8012354 <prvAddNewTaskToReadyList+0xe8>)
 80122ce:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80122d0:	4a21      	ldr	r2, [pc, #132]	@ (8012358 <prvAddNewTaskToReadyList+0xec>)
 80122d2:	6813      	ldr	r3, [r2, #0]
 80122d4:	3301      	adds	r3, #1
 80122d6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80122d8:	4a20      	ldr	r2, [pc, #128]	@ (801235c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80122da:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80122dc:	6811      	ldr	r1, [r2, #0]
 80122de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80122e0:	428b      	cmp	r3, r1
 80122e2:	d900      	bls.n	80122e6 <prvAddNewTaskToReadyList+0x7a>
 80122e4:	6013      	str	r3, [r2, #0]
 80122e6:	2014      	movs	r0, #20
 80122e8:	1d21      	adds	r1, r4, #4
 80122ea:	fb00 7003 	mla	r0, r0, r3, r7
 80122ee:	f7ff f88d 	bl	801140c <vListInsertEnd>
	taskEXIT_CRITICAL();
 80122f2:	f7ff f93f 	bl	8011574 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80122f6:	4b1a      	ldr	r3, [pc, #104]	@ (8012360 <prvAddNewTaskToReadyList+0xf4>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	b173      	cbz	r3, 801231a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80122fc:	6833      	ldr	r3, [r6, #0]
 80122fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012300:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012302:	429a      	cmp	r2, r3
 8012304:	d209      	bcs.n	801231a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8012306:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801230a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801230e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012312:	f3bf 8f4f 	dsb	sy
 8012316:	f3bf 8f6f 	isb	sy
}
 801231a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 801231e:	4b10      	ldr	r3, [pc, #64]	@ (8012360 <prvAddNewTaskToReadyList+0xf4>)
 8012320:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012322:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8012324:	2a00      	cmp	r2, #0
 8012326:	d1d3      	bne.n	80122d0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012328:	6832      	ldr	r2, [r6, #0]
 801232a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801232c:	429a      	cmp	r2, r3
 801232e:	d8cf      	bhi.n	80122d0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8012330:	6034      	str	r4, [r6, #0]
 8012332:	e7cd      	b.n	80122d0 <prvAddNewTaskToReadyList+0x64>
 8012334:	24028160 	.word	0x24028160
 8012338:	24028634 	.word	0x24028634
 801233c:	240281d4 	.word	0x240281d4
 8012340:	240281ac 	.word	0x240281ac
 8012344:	24028190 	.word	0x24028190
 8012348:	2402817c 	.word	0x2402817c
 801234c:	24028164 	.word	0x24028164
 8012350:	240281a8 	.word	0x240281a8
 8012354:	240281a4 	.word	0x240281a4
 8012358:	24028144 	.word	0x24028144
 801235c:	24028158 	.word	0x24028158
 8012360:	24028154 	.word	0x24028154
 8012364:	240281c0 	.word	0x240281c0

08012368 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801236a:	4b15      	ldr	r3, [pc, #84]	@ (80123c0 <prvAddCurrentTaskToDelayedList+0x58>)
{
 801236c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801236e:	4d15      	ldr	r5, [pc, #84]	@ (80123c4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8012370:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8012372:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012374:	6828      	ldr	r0, [r5, #0]
 8012376:	3004      	adds	r0, #4
 8012378:	f7ff f86a 	bl	8011450 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801237c:	1c73      	adds	r3, r6, #1
 801237e:	d107      	bne.n	8012390 <prvAddCurrentTaskToDelayedList+0x28>
 8012380:	b137      	cbz	r7, 8012390 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012382:	6829      	ldr	r1, [r5, #0]
 8012384:	4810      	ldr	r0, [pc, #64]	@ (80123c8 <prvAddCurrentTaskToDelayedList+0x60>)
 8012386:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801238c:	f7ff b83e 	b.w	801140c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012390:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012392:	682b      	ldr	r3, [r5, #0]
 8012394:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012396:	d307      	bcc.n	80123a8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012398:	4b0c      	ldr	r3, [pc, #48]	@ (80123cc <prvAddCurrentTaskToDelayedList+0x64>)
 801239a:	6818      	ldr	r0, [r3, #0]
 801239c:	6829      	ldr	r1, [r5, #0]
}
 801239e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123a2:	3104      	adds	r1, #4
 80123a4:	f7ff b83d 	b.w	8011422 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123a8:	4b09      	ldr	r3, [pc, #36]	@ (80123d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80123aa:	6818      	ldr	r0, [r3, #0]
 80123ac:	6829      	ldr	r1, [r5, #0]
 80123ae:	3104      	adds	r1, #4
 80123b0:	f7ff f837 	bl	8011422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80123b4:	4b07      	ldr	r3, [pc, #28]	@ (80123d4 <prvAddCurrentTaskToDelayedList+0x6c>)
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	42a2      	cmp	r2, r4
 80123ba:	d900      	bls.n	80123be <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80123bc:	601c      	str	r4, [r3, #0]
}
 80123be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123c0:	2402815c 	.word	0x2402815c
 80123c4:	24028634 	.word	0x24028634
 80123c8:	24028164 	.word	0x24028164
 80123cc:	240281a4 	.word	0x240281a4
 80123d0:	240281a8 	.word	0x240281a8
 80123d4:	24028140 	.word	0x24028140

080123d8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123d8:	4a06      	ldr	r2, [pc, #24]	@ (80123f4 <prvResetNextTaskUnblockTime+0x1c>)
 80123da:	6813      	ldr	r3, [r2, #0]
 80123dc:	6819      	ldr	r1, [r3, #0]
 80123de:	4b06      	ldr	r3, [pc, #24]	@ (80123f8 <prvResetNextTaskUnblockTime+0x20>)
 80123e0:	b919      	cbnz	r1, 80123ea <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80123e2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80123e6:	601a      	str	r2, [r3, #0]
}
 80123e8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123ea:	6812      	ldr	r2, [r2, #0]
 80123ec:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80123ee:	68d2      	ldr	r2, [r2, #12]
 80123f0:	6852      	ldr	r2, [r2, #4]
 80123f2:	e7f8      	b.n	80123e6 <prvResetNextTaskUnblockTime+0xe>
 80123f4:	240281a8 	.word	0x240281a8
 80123f8:	24028140 	.word	0x24028140

080123fc <prvDeleteTCB>:
	{
 80123fc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80123fe:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8012402:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012404:	b93b      	cbnz	r3, 8012416 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8012406:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012408:	f7fe ffb4 	bl	8011374 <vPortFree>
				vPortFree( pxTCB );
 801240c:	4620      	mov	r0, r4
	}
 801240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8012412:	f7fe bfaf 	b.w	8011374 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012416:	2b01      	cmp	r3, #1
 8012418:	d0f9      	beq.n	801240e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801241a:	2b02      	cmp	r3, #2
 801241c:	d008      	beq.n	8012430 <prvDeleteTCB+0x34>
 801241e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012422:	f383 8811 	msr	BASEPRI, r3
 8012426:	f3bf 8f6f 	isb	sy
 801242a:	f3bf 8f4f 	dsb	sy
 801242e:	e7fe      	b.n	801242e <prvDeleteTCB+0x32>
	}
 8012430:	bd10      	pop	{r4, pc}
	...

08012434 <prvIdleTask>:
{
 8012434:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012436:	4c14      	ldr	r4, [pc, #80]	@ (8012488 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012438:	4f14      	ldr	r7, [pc, #80]	@ (801248c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 801243a:	4d15      	ldr	r5, [pc, #84]	@ (8012490 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801243c:	6823      	ldr	r3, [r4, #0]
 801243e:	b983      	cbnz	r3, 8012462 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012440:	4b14      	ldr	r3, [pc, #80]	@ (8012494 <prvIdleTask+0x60>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d909      	bls.n	801245c <prvIdleTask+0x28>
				taskYIELD();
 8012448:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801244c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012450:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012454:	f3bf 8f4f 	dsb	sy
 8012458:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 801245c:	f7ee fbde 	bl	8000c1c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012460:	e7eb      	b.n	801243a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8012462:	f7ff f867 	bl	8011534 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801246a:	1d30      	adds	r0, r6, #4
 801246c:	f7fe fff0 	bl	8011450 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012470:	682b      	ldr	r3, [r5, #0]
 8012472:	3b01      	subs	r3, #1
 8012474:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012476:	6823      	ldr	r3, [r4, #0]
 8012478:	3b01      	subs	r3, #1
 801247a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 801247c:	f7ff f87a 	bl	8011574 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8012480:	4630      	mov	r0, r6
 8012482:	f7ff ffbb 	bl	80123fc <prvDeleteTCB>
 8012486:	e7d9      	b.n	801243c <prvIdleTask+0x8>
 8012488:	24028178 	.word	0x24028178
 801248c:	2402817c 	.word	0x2402817c
 8012490:	24028160 	.word	0x24028160
 8012494:	240281d4 	.word	0x240281d4

08012498 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801249c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801249e:	4607      	mov	r7, r0
 80124a0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80124a2:	21a5      	movs	r1, #165	@ 0xa5
 80124a4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80124a6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80124a8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80124aa:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80124ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80124b0:	f019 f808 	bl	802b4c4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80124b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80124b6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80124b8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80124bc:	b3b5      	cbz	r5, 801252c <prvInitialiseNewTask.constprop.0+0x94>
 80124be:	1e6b      	subs	r3, r5, #1
 80124c0:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80124c4:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80124c6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80124ca:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80124ce:	b109      	cbz	r1, 80124d4 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80124d0:	42ab      	cmp	r3, r5
 80124d2:	d1f8      	bne.n	80124c6 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80124d4:	2300      	movs	r3, #0
 80124d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80124da:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80124dc:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80124e0:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80124e2:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80124e4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80124e8:	bf28      	it	cs
 80124ea:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 80124ec:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80124ee:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124f0:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80124f4:	f7fe ff87 	bl	8011406 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80124f8:	f104 0018 	add.w	r0, r4, #24
 80124fc:	f7fe ff83 	bl	8011406 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8012500:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012504:	4642      	mov	r2, r8
 8012506:	4639      	mov	r1, r7
 8012508:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801250a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801250c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801250e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8012510:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012514:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012518:	f7fe ffe8 	bl	80114ec <pxPortInitialiseStack>
 801251c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801251e:	f1b9 0f00 	cmp.w	r9, #0
 8012522:	d001      	beq.n	8012528 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012524:	f8c9 4000 	str.w	r4, [r9]
}
 8012528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801252c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8012530:	e7d3      	b.n	80124da <prvInitialiseNewTask.constprop.0+0x42>

08012532 <xTaskCreateStatic>:
	{
 8012532:	b570      	push	{r4, r5, r6, lr}
 8012534:	b086      	sub	sp, #24
 8012536:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 801253a:	b945      	cbnz	r5, 801254e <xTaskCreateStatic+0x1c>
 801253c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012540:	f383 8811 	msr	BASEPRI, r3
 8012544:	f3bf 8f6f 	isb	sy
 8012548:	f3bf 8f4f 	dsb	sy
 801254c:	e7fe      	b.n	801254c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 801254e:	b944      	cbnz	r4, 8012562 <xTaskCreateStatic+0x30>
 8012550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012554:	f383 8811 	msr	BASEPRI, r3
 8012558:	f3bf 8f6f 	isb	sy
 801255c:	f3bf 8f4f 	dsb	sy
 8012560:	e7fe      	b.n	8012560 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8012562:	2660      	movs	r6, #96	@ 0x60
 8012564:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012566:	9e05      	ldr	r6, [sp, #20]
 8012568:	2e60      	cmp	r6, #96	@ 0x60
 801256a:	d008      	beq.n	801257e <xTaskCreateStatic+0x4c>
 801256c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012570:	f383 8811 	msr	BASEPRI, r3
 8012574:	f3bf 8f6f 	isb	sy
 8012578:	f3bf 8f4f 	dsb	sy
 801257c:	e7fe      	b.n	801257c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801257e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012580:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012582:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012584:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012588:	ad04      	add	r5, sp, #16
 801258a:	9402      	str	r4, [sp, #8]
 801258c:	9501      	str	r5, [sp, #4]
 801258e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012590:	9500      	str	r5, [sp, #0]
 8012592:	f7ff ff81 	bl	8012498 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012596:	4620      	mov	r0, r4
 8012598:	f7ff fe68 	bl	801226c <prvAddNewTaskToReadyList>
	}
 801259c:	9804      	ldr	r0, [sp, #16]
 801259e:	b006      	add	sp, #24
 80125a0:	bd70      	pop	{r4, r5, r6, pc}

080125a2 <xTaskCreate>:
	{
 80125a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125a6:	4607      	mov	r7, r0
 80125a8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80125aa:	0090      	lsls	r0, r2, #2
	{
 80125ac:	4688      	mov	r8, r1
 80125ae:	4616      	mov	r6, r2
 80125b0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80125b2:	f7fe fe47 	bl	8011244 <pvPortMalloc>
			if( pxStack != NULL )
 80125b6:	4605      	mov	r5, r0
 80125b8:	b920      	cbnz	r0, 80125c4 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80125ba:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80125be:	b005      	add	sp, #20
 80125c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80125c4:	2060      	movs	r0, #96	@ 0x60
 80125c6:	f7fe fe3d 	bl	8011244 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80125ca:	4604      	mov	r4, r0
 80125cc:	b198      	cbz	r0, 80125f6 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80125ce:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80125d0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80125d2:	4632      	mov	r2, r6
 80125d4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80125d6:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80125da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125dc:	9002      	str	r0, [sp, #8]
 80125de:	4638      	mov	r0, r7
 80125e0:	9301      	str	r3, [sp, #4]
 80125e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125e4:	9300      	str	r3, [sp, #0]
 80125e6:	464b      	mov	r3, r9
 80125e8:	f7ff ff56 	bl	8012498 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80125ec:	4620      	mov	r0, r4
 80125ee:	f7ff fe3d 	bl	801226c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80125f2:	2001      	movs	r0, #1
 80125f4:	e7e3      	b.n	80125be <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80125f6:	4628      	mov	r0, r5
 80125f8:	f7fe febc 	bl	8011374 <vPortFree>
		if( pxNewTCB != NULL )
 80125fc:	e7dd      	b.n	80125ba <xTaskCreate+0x18>
	...

08012600 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8012600:	4a02      	ldr	r2, [pc, #8]	@ (801260c <vTaskSuspendAll+0xc>)
 8012602:	6813      	ldr	r3, [r2, #0]
 8012604:	3301      	adds	r3, #1
 8012606:	6013      	str	r3, [r2, #0]
}
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop
 801260c:	2402813c 	.word	0x2402813c

08012610 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8012610:	4b01      	ldr	r3, [pc, #4]	@ (8012618 <xTaskGetTickCount+0x8>)
 8012612:	6818      	ldr	r0, [r3, #0]
}
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	2402815c 	.word	0x2402815c

0801261c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801261c:	4b3f      	ldr	r3, [pc, #252]	@ (801271c <xTaskIncrementTick+0x100>)
 801261e:	681b      	ldr	r3, [r3, #0]
{
 8012620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012624:	2b00      	cmp	r3, #0
 8012626:	d172      	bne.n	801270e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012628:	4b3d      	ldr	r3, [pc, #244]	@ (8012720 <xTaskIncrementTick+0x104>)
 801262a:	681c      	ldr	r4, [r3, #0]
 801262c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 801262e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012630:	b9bc      	cbnz	r4, 8012662 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8012632:	4b3c      	ldr	r3, [pc, #240]	@ (8012724 <xTaskIncrementTick+0x108>)
 8012634:	681a      	ldr	r2, [r3, #0]
 8012636:	6812      	ldr	r2, [r2, #0]
 8012638:	b142      	cbz	r2, 801264c <xTaskIncrementTick+0x30>
 801263a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801263e:	f383 8811 	msr	BASEPRI, r3
 8012642:	f3bf 8f6f 	isb	sy
 8012646:	f3bf 8f4f 	dsb	sy
 801264a:	e7fe      	b.n	801264a <xTaskIncrementTick+0x2e>
 801264c:	4a36      	ldr	r2, [pc, #216]	@ (8012728 <xTaskIncrementTick+0x10c>)
 801264e:	6819      	ldr	r1, [r3, #0]
 8012650:	6810      	ldr	r0, [r2, #0]
 8012652:	6018      	str	r0, [r3, #0]
 8012654:	6011      	str	r1, [r2, #0]
 8012656:	4a35      	ldr	r2, [pc, #212]	@ (801272c <xTaskIncrementTick+0x110>)
 8012658:	6813      	ldr	r3, [r2, #0]
 801265a:	3301      	adds	r3, #1
 801265c:	6013      	str	r3, [r2, #0]
 801265e:	f7ff febb 	bl	80123d8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012662:	4d33      	ldr	r5, [pc, #204]	@ (8012730 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8012664:	f04f 0b00 	mov.w	fp, #0
 8012668:	4e32      	ldr	r6, [pc, #200]	@ (8012734 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 801266a:	682b      	ldr	r3, [r5, #0]
 801266c:	4f32      	ldr	r7, [pc, #200]	@ (8012738 <xTaskIncrementTick+0x11c>)
 801266e:	429c      	cmp	r4, r3
 8012670:	d212      	bcs.n	8012698 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012672:	683a      	ldr	r2, [r7, #0]
 8012674:	2114      	movs	r1, #20
 8012676:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012678:	434a      	muls	r2, r1
 801267a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 801267c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 801267e:	4a2f      	ldr	r2, [pc, #188]	@ (801273c <xTaskIncrementTick+0x120>)
 8012680:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8012682:	bf28      	it	cs
 8012684:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8012688:	2a00      	cmp	r2, #0
 801268a:	bf18      	it	ne
 801268c:	f04f 0b01 	movne.w	fp, #1
}
 8012690:	4658      	mov	r0, fp
 8012692:	b003      	add	sp, #12
 8012694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012698:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8012724 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 801269c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8012744 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80126a0:	f8d9 2000 	ldr.w	r2, [r9]
 80126a4:	6812      	ldr	r2, [r2, #0]
 80126a6:	b91a      	cbnz	r2, 80126b0 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126a8:	f04f 32ff 	mov.w	r2, #4294967295
 80126ac:	602a      	str	r2, [r5, #0]
					break;
 80126ae:	e7e0      	b.n	8012672 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126b0:	f8d9 2000 	ldr.w	r2, [r9]
 80126b4:	68d2      	ldr	r2, [r2, #12]
 80126b6:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80126ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80126be:	428c      	cmp	r4, r1
 80126c0:	d201      	bcs.n	80126c6 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80126c2:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80126c4:	e7d5      	b.n	8012672 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126c6:	f108 0304 	add.w	r3, r8, #4
 80126ca:	4618      	mov	r0, r3
 80126cc:	9301      	str	r3, [sp, #4]
 80126ce:	f7fe febf 	bl	8011450 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80126d2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80126d6:	b119      	cbz	r1, 80126e0 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80126d8:	f108 0018 	add.w	r0, r8, #24
 80126dc:	f7fe feb8 	bl	8011450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80126e0:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80126e4:	f8da 1000 	ldr.w	r1, [sl]
 80126e8:	4288      	cmp	r0, r1
 80126ea:	d901      	bls.n	80126f0 <xTaskIncrementTick+0xd4>
 80126ec:	f8ca 0000 	str.w	r0, [sl]
 80126f0:	2314      	movs	r3, #20
 80126f2:	9901      	ldr	r1, [sp, #4]
 80126f4:	fb03 6000 	mla	r0, r3, r0, r6
 80126f8:	f7fe fe88 	bl	801140c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80126fc:	6838      	ldr	r0, [r7, #0]
 80126fe:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8012702:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8012704:	4291      	cmp	r1, r2
 8012706:	bf28      	it	cs
 8012708:	f04f 0b01 	movcs.w	fp, #1
 801270c:	e7c8      	b.n	80126a0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 801270e:	4a0c      	ldr	r2, [pc, #48]	@ (8012740 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8012710:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 8012714:	6813      	ldr	r3, [r2, #0]
 8012716:	3301      	adds	r3, #1
 8012718:	6013      	str	r3, [r2, #0]
 801271a:	e7b9      	b.n	8012690 <xTaskIncrementTick+0x74>
 801271c:	2402813c 	.word	0x2402813c
 8012720:	2402815c 	.word	0x2402815c
 8012724:	240281a8 	.word	0x240281a8
 8012728:	240281a4 	.word	0x240281a4
 801272c:	24028148 	.word	0x24028148
 8012730:	24028140 	.word	0x24028140
 8012734:	240281d4 	.word	0x240281d4
 8012738:	24028634 	.word	0x24028634
 801273c:	2402814c 	.word	0x2402814c
 8012740:	24028150 	.word	0x24028150
 8012744:	24028158 	.word	0x24028158

08012748 <xTaskResumeAll>:
{
 8012748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 801274c:	4c30      	ldr	r4, [pc, #192]	@ (8012810 <xTaskResumeAll+0xc8>)
 801274e:	6823      	ldr	r3, [r4, #0]
 8012750:	b943      	cbnz	r3, 8012764 <xTaskResumeAll+0x1c>
 8012752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012756:	f383 8811 	msr	BASEPRI, r3
 801275a:	f3bf 8f6f 	isb	sy
 801275e:	f3bf 8f4f 	dsb	sy
 8012762:	e7fe      	b.n	8012762 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8012764:	f7fe fee6 	bl	8011534 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8012768:	6823      	ldr	r3, [r4, #0]
 801276a:	3b01      	subs	r3, #1
 801276c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801276e:	6824      	ldr	r4, [r4, #0]
 8012770:	b12c      	cbz	r4, 801277e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8012772:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8012774:	f7fe fefe 	bl	8011574 <vPortExitCritical>
}
 8012778:	4620      	mov	r0, r4
 801277a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801277e:	4b25      	ldr	r3, [pc, #148]	@ (8012814 <xTaskResumeAll+0xcc>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d0f5      	beq.n	8012772 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012786:	4d24      	ldr	r5, [pc, #144]	@ (8012818 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8012788:	4e24      	ldr	r6, [pc, #144]	@ (801281c <xTaskResumeAll+0xd4>)
 801278a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 801282c <xTaskResumeAll+0xe4>
 801278e:	e01d      	b.n	80127cc <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012790:	68eb      	ldr	r3, [r5, #12]
 8012792:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012794:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012796:	f104 0018 	add.w	r0, r4, #24
 801279a:	f7fe fe59 	bl	8011450 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801279e:	4638      	mov	r0, r7
 80127a0:	f7fe fe56 	bl	8011450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80127a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80127a6:	6832      	ldr	r2, [r6, #0]
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d900      	bls.n	80127ae <xTaskResumeAll+0x66>
 80127ac:	6033      	str	r3, [r6, #0]
 80127ae:	2014      	movs	r0, #20
 80127b0:	4639      	mov	r1, r7
 80127b2:	fb00 8003 	mla	r0, r0, r3, r8
 80127b6:	f7fe fe29 	bl	801140c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80127ba:	4b19      	ldr	r3, [pc, #100]	@ (8012820 <xTaskResumeAll+0xd8>)
 80127bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d302      	bcc.n	80127cc <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 80127c6:	4b17      	ldr	r3, [pc, #92]	@ (8012824 <xTaskResumeAll+0xdc>)
 80127c8:	2201      	movs	r2, #1
 80127ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80127cc:	682b      	ldr	r3, [r5, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1de      	bne.n	8012790 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80127d2:	b10c      	cbz	r4, 80127d8 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80127d4:	f7ff fe00 	bl	80123d8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80127d8:	4d13      	ldr	r5, [pc, #76]	@ (8012828 <xTaskResumeAll+0xe0>)
 80127da:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80127dc:	b144      	cbz	r4, 80127f0 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80127de:	4e11      	ldr	r6, [pc, #68]	@ (8012824 <xTaskResumeAll+0xdc>)
 80127e0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80127e2:	f7ff ff1b 	bl	801261c <xTaskIncrementTick>
 80127e6:	b100      	cbz	r0, 80127ea <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 80127e8:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80127ea:	3c01      	subs	r4, #1
 80127ec:	d1f9      	bne.n	80127e2 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 80127ee:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80127f0:	4b0c      	ldr	r3, [pc, #48]	@ (8012824 <xTaskResumeAll+0xdc>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d0bc      	beq.n	8012772 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80127f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80127fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012800:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012804:	f3bf 8f4f 	dsb	sy
 8012808:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801280c:	2401      	movs	r4, #1
 801280e:	e7b1      	b.n	8012774 <xTaskResumeAll+0x2c>
 8012810:	2402813c 	.word	0x2402813c
 8012814:	24028160 	.word	0x24028160
 8012818:	24028190 	.word	0x24028190
 801281c:	24028158 	.word	0x24028158
 8012820:	24028634 	.word	0x24028634
 8012824:	2402814c 	.word	0x2402814c
 8012828:	24028150 	.word	0x24028150
 801282c:	240281d4 	.word	0x240281d4

08012830 <vTaskDelay>:
	{
 8012830:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012832:	b950      	cbnz	r0, 801284a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8012834:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801283c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012840:	f3bf 8f4f 	dsb	sy
 8012844:	f3bf 8f6f 	isb	sy
	}
 8012848:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 801284a:	4b0a      	ldr	r3, [pc, #40]	@ (8012874 <vTaskDelay+0x44>)
 801284c:	6819      	ldr	r1, [r3, #0]
 801284e:	b141      	cbz	r1, 8012862 <vTaskDelay+0x32>
 8012850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012854:	f383 8811 	msr	BASEPRI, r3
 8012858:	f3bf 8f6f 	isb	sy
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	e7fe      	b.n	8012860 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8012862:	f7ff fecd 	bl	8012600 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012866:	f7ff fd7f 	bl	8012368 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801286a:	f7ff ff6d 	bl	8012748 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801286e:	2800      	cmp	r0, #0
 8012870:	d0e0      	beq.n	8012834 <vTaskDelay+0x4>
 8012872:	e7e9      	b.n	8012848 <vTaskDelay+0x18>
 8012874:	2402813c 	.word	0x2402813c

08012878 <vTaskSetApplicationTaskTag>:
	{
 8012878:	b538      	push	{r3, r4, r5, lr}
 801287a:	460d      	mov	r5, r1
		if( xTask == NULL )
 801287c:	4604      	mov	r4, r0
 801287e:	b908      	cbnz	r0, 8012884 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012880:	4b04      	ldr	r3, [pc, #16]	@ (8012894 <vTaskSetApplicationTaskTag+0x1c>)
 8012882:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8012884:	f7fe fe56 	bl	8011534 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8012888:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 801288a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 801288e:	f7fe be71 	b.w	8011574 <vPortExitCritical>
 8012892:	bf00      	nop
 8012894:	24028634 	.word	0x24028634

08012898 <xTaskCallApplicationTaskHook>:
	{
 8012898:	4603      	mov	r3, r0
 801289a:	4608      	mov	r0, r1
		if( xTask == NULL )
 801289c:	b90b      	cbnz	r3, 80128a2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 801289e:	4b03      	ldr	r3, [pc, #12]	@ (80128ac <xTaskCallApplicationTaskHook+0x14>)
 80128a0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 80128a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128a4:	b103      	cbz	r3, 80128a8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 80128a6:	4718      	bx	r3
	}
 80128a8:	4618      	mov	r0, r3
 80128aa:	4770      	bx	lr
 80128ac:	24028634 	.word	0x24028634

080128b0 <vTaskStartScheduler>:
{
 80128b0:	b510      	push	{r4, lr}
 80128b2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80128b4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80128b6:	aa07      	add	r2, sp, #28
 80128b8:	a906      	add	r1, sp, #24
 80128ba:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80128bc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80128c0:	f7fe fc82 	bl	80111c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80128c4:	9b05      	ldr	r3, [sp, #20]
 80128c6:	9a07      	ldr	r2, [sp, #28]
 80128c8:	9302      	str	r3, [sp, #8]
 80128ca:	9b06      	ldr	r3, [sp, #24]
 80128cc:	4919      	ldr	r1, [pc, #100]	@ (8012934 <vTaskStartScheduler+0x84>)
 80128ce:	481a      	ldr	r0, [pc, #104]	@ (8012938 <vTaskStartScheduler+0x88>)
 80128d0:	e9cd 4300 	strd	r4, r3, [sp]
 80128d4:	4623      	mov	r3, r4
 80128d6:	f7ff fe2c 	bl	8012532 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80128da:	b340      	cbz	r0, 801292e <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 80128dc:	f000 fa84 	bl	8012de8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80128e0:	2801      	cmp	r0, #1
 80128e2:	d119      	bne.n	8012918 <vTaskStartScheduler+0x68>
 80128e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128e8:	f383 8811 	msr	BASEPRI, r3
 80128ec:	f3bf 8f6f 	isb	sy
 80128f0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80128f4:	f04f 32ff 	mov.w	r2, #4294967295
 80128f8:	4b10      	ldr	r3, [pc, #64]	@ (801293c <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 80128fa:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 80128fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80128fe:	4b10      	ldr	r3, [pc, #64]	@ (8012940 <vTaskStartScheduler+0x90>)
 8012900:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012902:	4b10      	ldr	r3, [pc, #64]	@ (8012944 <vTaskStartScheduler+0x94>)
 8012904:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8012906:	4b10      	ldr	r3, [pc, #64]	@ (8012948 <vTaskStartScheduler+0x98>)
 8012908:	6818      	ldr	r0, [r3, #0]
 801290a:	f7ff ffc5 	bl	8012898 <xTaskCallApplicationTaskHook>
}
 801290e:	b008      	add	sp, #32
 8012910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8012914:	f7fe be9e 	b.w	8011654 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012918:	3001      	adds	r0, #1
 801291a:	d108      	bne.n	801292e <vTaskStartScheduler+0x7e>
 801291c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012920:	f383 8811 	msr	BASEPRI, r3
 8012924:	f3bf 8f6f 	isb	sy
 8012928:	f3bf 8f4f 	dsb	sy
 801292c:	e7fe      	b.n	801292c <vTaskStartScheduler+0x7c>
}
 801292e:	b008      	add	sp, #32
 8012930:	bd10      	pop	{r4, pc}
 8012932:	bf00      	nop
 8012934:	0802fff0 	.word	0x0802fff0
 8012938:	08012435 	.word	0x08012435
 801293c:	24028140 	.word	0x24028140
 8012940:	24028154 	.word	0x24028154
 8012944:	2402815c 	.word	0x2402815c
 8012948:	24028634 	.word	0x24028634

0801294c <vTaskSwitchContext>:
{
 801294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801294e:	4b1c      	ldr	r3, [pc, #112]	@ (80129c0 <vTaskSwitchContext+0x74>)
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	4b1c      	ldr	r3, [pc, #112]	@ (80129c4 <vTaskSwitchContext+0x78>)
 8012954:	b112      	cbz	r2, 801295c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8012956:	2201      	movs	r2, #1
 8012958:	601a      	str	r2, [r3, #0]
}
 801295a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 801295c:	4c1a      	ldr	r4, [pc, #104]	@ (80129c8 <vTaskSwitchContext+0x7c>)
 801295e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012960:	4e1a      	ldr	r6, [pc, #104]	@ (80129cc <vTaskSwitchContext+0x80>)
 8012962:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8012964:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8012966:	6820      	ldr	r0, [r4, #0]
 8012968:	f7ff ff96 	bl	8012898 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801296c:	6832      	ldr	r2, [r6, #0]
 801296e:	4918      	ldr	r1, [pc, #96]	@ (80129d0 <vTaskSwitchContext+0x84>)
 8012970:	fb07 f302 	mul.w	r3, r7, r2
 8012974:	58cd      	ldr	r5, [r1, r3]
 8012976:	18c8      	adds	r0, r1, r3
 8012978:	b1ad      	cbz	r5, 80129a6 <vTaskSwitchContext+0x5a>
 801297a:	6845      	ldr	r5, [r0, #4]
 801297c:	3308      	adds	r3, #8
 801297e:	686d      	ldr	r5, [r5, #4]
 8012980:	440b      	add	r3, r1
 8012982:	429d      	cmp	r5, r3
 8012984:	6045      	str	r5, [r0, #4]
 8012986:	bf04      	itt	eq
 8012988:	686b      	ldreq	r3, [r5, #4]
 801298a:	6043      	streq	r3, [r0, #4]
 801298c:	2314      	movs	r3, #20
 801298e:	fb03 1102 	mla	r1, r3, r2, r1
 8012992:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8012994:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	6023      	str	r3, [r4, #0]
 801299a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 801299c:	6820      	ldr	r0, [r4, #0]
}
 801299e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 80129a2:	f7ff bf79 	b.w	8012898 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129a6:	b942      	cbnz	r2, 80129ba <vTaskSwitchContext+0x6e>
 80129a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129ac:	f383 8811 	msr	BASEPRI, r3
 80129b0:	f3bf 8f6f 	isb	sy
 80129b4:	f3bf 8f4f 	dsb	sy
 80129b8:	e7fe      	b.n	80129b8 <vTaskSwitchContext+0x6c>
 80129ba:	3a01      	subs	r2, #1
 80129bc:	e7d8      	b.n	8012970 <vTaskSwitchContext+0x24>
 80129be:	bf00      	nop
 80129c0:	2402813c 	.word	0x2402813c
 80129c4:	2402814c 	.word	0x2402814c
 80129c8:	24028634 	.word	0x24028634
 80129cc:	24028158 	.word	0x24028158
 80129d0:	240281d4 	.word	0x240281d4

080129d4 <vTaskPlaceOnEventList>:
{
 80129d4:	b510      	push	{r4, lr}
 80129d6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80129d8:	b940      	cbnz	r0, 80129ec <vTaskPlaceOnEventList+0x18>
 80129da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129de:	f383 8811 	msr	BASEPRI, r3
 80129e2:	f3bf 8f6f 	isb	sy
 80129e6:	f3bf 8f4f 	dsb	sy
 80129ea:	e7fe      	b.n	80129ea <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80129ec:	4b05      	ldr	r3, [pc, #20]	@ (8012a04 <vTaskPlaceOnEventList+0x30>)
 80129ee:	6819      	ldr	r1, [r3, #0]
 80129f0:	3118      	adds	r1, #24
 80129f2:	f7fe fd16 	bl	8011422 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80129f6:	4620      	mov	r0, r4
 80129f8:	2101      	movs	r1, #1
}
 80129fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80129fe:	f7ff bcb3 	b.w	8012368 <prvAddCurrentTaskToDelayedList>
 8012a02:	bf00      	nop
 8012a04:	24028634 	.word	0x24028634

08012a08 <vTaskPlaceOnEventListRestricted>:
	{
 8012a08:	b538      	push	{r3, r4, r5, lr}
 8012a0a:	460d      	mov	r5, r1
 8012a0c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8012a0e:	b940      	cbnz	r0, 8012a22 <vTaskPlaceOnEventListRestricted+0x1a>
 8012a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a14:	f383 8811 	msr	BASEPRI, r3
 8012a18:	f3bf 8f6f 	isb	sy
 8012a1c:	f3bf 8f4f 	dsb	sy
 8012a20:	e7fe      	b.n	8012a20 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012a22:	4b07      	ldr	r3, [pc, #28]	@ (8012a40 <vTaskPlaceOnEventListRestricted+0x38>)
 8012a24:	6819      	ldr	r1, [r3, #0]
 8012a26:	3118      	adds	r1, #24
 8012a28:	f7fe fcf0 	bl	801140c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8012a2c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012a2e:	4621      	mov	r1, r4
 8012a30:	bf0c      	ite	eq
 8012a32:	4628      	moveq	r0, r5
 8012a34:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8012a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012a3c:	f7ff bc94 	b.w	8012368 <prvAddCurrentTaskToDelayedList>
 8012a40:	24028634 	.word	0x24028634

08012a44 <xTaskRemoveFromEventList>:
{
 8012a44:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a46:	68c3      	ldr	r3, [r0, #12]
 8012a48:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8012a4a:	b944      	cbnz	r4, 8012a5e <xTaskRemoveFromEventList+0x1a>
 8012a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a50:	f383 8811 	msr	BASEPRI, r3
 8012a54:	f3bf 8f6f 	isb	sy
 8012a58:	f3bf 8f4f 	dsb	sy
 8012a5c:	e7fe      	b.n	8012a5c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012a5e:	f104 0518 	add.w	r5, r4, #24
 8012a62:	4628      	mov	r0, r5
 8012a64:	f7fe fcf4 	bl	8011450 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a68:	4b11      	ldr	r3, [pc, #68]	@ (8012ab0 <xTaskRemoveFromEventList+0x6c>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	b9d3      	cbnz	r3, 8012aa4 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012a6e:	1d25      	adds	r5, r4, #4
 8012a70:	4628      	mov	r0, r5
 8012a72:	f7fe fced 	bl	8011450 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012a76:	4a0f      	ldr	r2, [pc, #60]	@ (8012ab4 <xTaskRemoveFromEventList+0x70>)
 8012a78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012a7a:	6811      	ldr	r1, [r2, #0]
 8012a7c:	428b      	cmp	r3, r1
 8012a7e:	d900      	bls.n	8012a82 <xTaskRemoveFromEventList+0x3e>
 8012a80:	6013      	str	r3, [r2, #0]
 8012a82:	2014      	movs	r0, #20
 8012a84:	4a0c      	ldr	r2, [pc, #48]	@ (8012ab8 <xTaskRemoveFromEventList+0x74>)
 8012a86:	4629      	mov	r1, r5
 8012a88:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012a8c:	f7fe fcbe 	bl	801140c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a90:	4b0a      	ldr	r3, [pc, #40]	@ (8012abc <xTaskRemoveFromEventList+0x78>)
 8012a92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d906      	bls.n	8012aaa <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8012a9c:	2001      	movs	r0, #1
 8012a9e:	4b08      	ldr	r3, [pc, #32]	@ (8012ac0 <xTaskRemoveFromEventList+0x7c>)
 8012aa0:	6018      	str	r0, [r3, #0]
}
 8012aa2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012aa4:	4629      	mov	r1, r5
 8012aa6:	4807      	ldr	r0, [pc, #28]	@ (8012ac4 <xTaskRemoveFromEventList+0x80>)
 8012aa8:	e7f0      	b.n	8012a8c <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 8012aaa:	2000      	movs	r0, #0
	return xReturn;
 8012aac:	e7f9      	b.n	8012aa2 <xTaskRemoveFromEventList+0x5e>
 8012aae:	bf00      	nop
 8012ab0:	2402813c 	.word	0x2402813c
 8012ab4:	24028158 	.word	0x24028158
 8012ab8:	240281d4 	.word	0x240281d4
 8012abc:	24028634 	.word	0x24028634
 8012ac0:	2402814c 	.word	0x2402814c
 8012ac4:	24028190 	.word	0x24028190

08012ac8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012ac8:	4b03      	ldr	r3, [pc, #12]	@ (8012ad8 <vTaskInternalSetTimeOutState+0x10>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012ace:	4b03      	ldr	r3, [pc, #12]	@ (8012adc <vTaskInternalSetTimeOutState+0x14>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	6043      	str	r3, [r0, #4]
}
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	24028148 	.word	0x24028148
 8012adc:	2402815c 	.word	0x2402815c

08012ae0 <xTaskCheckForTimeOut>:
{
 8012ae0:	b570      	push	{r4, r5, r6, lr}
 8012ae2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8012ae4:	4605      	mov	r5, r0
 8012ae6:	b940      	cbnz	r0, 8012afa <xTaskCheckForTimeOut+0x1a>
 8012ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aec:	f383 8811 	msr	BASEPRI, r3
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	f3bf 8f4f 	dsb	sy
 8012af8:	e7fe      	b.n	8012af8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8012afa:	b941      	cbnz	r1, 8012b0e <xTaskCheckForTimeOut+0x2e>
 8012afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b00:	f383 8811 	msr	BASEPRI, r3
 8012b04:	f3bf 8f6f 	isb	sy
 8012b08:	f3bf 8f4f 	dsb	sy
 8012b0c:	e7fe      	b.n	8012b0c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8012b0e:	f7fe fd11 	bl	8011534 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8012b12:	4b0f      	ldr	r3, [pc, #60]	@ (8012b50 <xTaskCheckForTimeOut+0x70>)
 8012b14:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8012b16:	6823      	ldr	r3, [r4, #0]
 8012b18:	1c5a      	adds	r2, r3, #1
 8012b1a:	d010      	beq.n	8012b3e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012b1c:	480d      	ldr	r0, [pc, #52]	@ (8012b54 <xTaskCheckForTimeOut+0x74>)
 8012b1e:	682e      	ldr	r6, [r5, #0]
 8012b20:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012b22:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012b24:	4286      	cmp	r6, r0
 8012b26:	d001      	beq.n	8012b2c <xTaskCheckForTimeOut+0x4c>
 8012b28:	428a      	cmp	r2, r1
 8012b2a:	d90f      	bls.n	8012b4c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012b2c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012b2e:	4283      	cmp	r3, r0
 8012b30:	d90a      	bls.n	8012b48 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8012b32:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012b34:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8012b36:	4413      	add	r3, r2
 8012b38:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012b3a:	f7ff ffc5 	bl	8012ac8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8012b3e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8012b40:	f7fe fd18 	bl	8011574 <vPortExitCritical>
}
 8012b44:	4620      	mov	r0, r4
 8012b46:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8012b4c:	2401      	movs	r4, #1
 8012b4e:	e7f7      	b.n	8012b40 <xTaskCheckForTimeOut+0x60>
 8012b50:	2402815c 	.word	0x2402815c
 8012b54:	24028148 	.word	0x24028148

08012b58 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8012b58:	4b01      	ldr	r3, [pc, #4]	@ (8012b60 <vTaskMissedYield+0x8>)
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	601a      	str	r2, [r3, #0]
}
 8012b5e:	4770      	bx	lr
 8012b60:	2402814c 	.word	0x2402814c

08012b64 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8012b64:	4b01      	ldr	r3, [pc, #4]	@ (8012b6c <xTaskGetCurrentTaskHandle+0x8>)
 8012b66:	6818      	ldr	r0, [r3, #0]
	}
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	24028634 	.word	0x24028634

08012b70 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8012b70:	4b05      	ldr	r3, [pc, #20]	@ (8012b88 <xTaskGetSchedulerState+0x18>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	b133      	cbz	r3, 8012b84 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b76:	4b05      	ldr	r3, [pc, #20]	@ (8012b8c <xTaskGetSchedulerState+0x1c>)
 8012b78:	6818      	ldr	r0, [r3, #0]
 8012b7a:	fab0 f080 	clz	r0, r0
 8012b7e:	0940      	lsrs	r0, r0, #5
 8012b80:	0040      	lsls	r0, r0, #1
 8012b82:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012b84:	2001      	movs	r0, #1
	}
 8012b86:	4770      	bx	lr
 8012b88:	24028154 	.word	0x24028154
 8012b8c:	2402813c 	.word	0x2402813c

08012b90 <xTaskPriorityInherit>:
	{
 8012b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8012b92:	4604      	mov	r4, r0
 8012b94:	b338      	cbz	r0, 8012be6 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012b96:	4d1a      	ldr	r5, [pc, #104]	@ (8012c00 <xTaskPriorityInherit+0x70>)
 8012b98:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012b9a:	682a      	ldr	r2, [r5, #0]
 8012b9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012b9e:	4293      	cmp	r3, r2
 8012ba0:	d226      	bcs.n	8012bf0 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012ba2:	6982      	ldr	r2, [r0, #24]
 8012ba4:	2a00      	cmp	r2, #0
 8012ba6:	db04      	blt.n	8012bb2 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ba8:	682a      	ldr	r2, [r5, #0]
 8012baa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012bac:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8012bb0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012bb2:	2214      	movs	r2, #20
 8012bb4:	4e13      	ldr	r6, [pc, #76]	@ (8012c04 <xTaskPriorityInherit+0x74>)
 8012bb6:	fb02 6303 	mla	r3, r2, r3, r6
 8012bba:	6962      	ldr	r2, [r4, #20]
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d113      	bne.n	8012be8 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bc0:	1d27      	adds	r7, r4, #4
 8012bc2:	4638      	mov	r0, r7
 8012bc4:	f7fe fc44 	bl	8011450 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012bc8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012bca:	4a0f      	ldr	r2, [pc, #60]	@ (8012c08 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012bce:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012bd2:	428b      	cmp	r3, r1
 8012bd4:	d900      	bls.n	8012bd8 <xTaskPriorityInherit+0x48>
 8012bd6:	6013      	str	r3, [r2, #0]
 8012bd8:	2014      	movs	r0, #20
 8012bda:	4639      	mov	r1, r7
 8012bdc:	fb00 6003 	mla	r0, r0, r3, r6
 8012be0:	f7fe fc14 	bl	801140c <vListInsertEnd>
				xReturn = pdTRUE;
 8012be4:	2001      	movs	r0, #1
	}
 8012be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012be8:	682b      	ldr	r3, [r5, #0]
 8012bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012bee:	e7f9      	b.n	8012be4 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012bf0:	682b      	ldr	r3, [r5, #0]
 8012bf2:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8012bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bf6:	4298      	cmp	r0, r3
 8012bf8:	bf2c      	ite	cs
 8012bfa:	2000      	movcs	r0, #0
 8012bfc:	2001      	movcc	r0, #1
 8012bfe:	e7f2      	b.n	8012be6 <xTaskPriorityInherit+0x56>
 8012c00:	24028634 	.word	0x24028634
 8012c04:	240281d4 	.word	0x240281d4
 8012c08:	24028158 	.word	0x24028158

08012c0c <xTaskPriorityDisinherit>:
	{
 8012c0c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8012c0e:	b908      	cbnz	r0, 8012c14 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8012c10:	2000      	movs	r0, #0
	}
 8012c12:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8012c14:	4b1b      	ldr	r3, [pc, #108]	@ (8012c84 <xTaskPriorityDisinherit+0x78>)
 8012c16:	681c      	ldr	r4, [r3, #0]
 8012c18:	4284      	cmp	r4, r0
 8012c1a:	d008      	beq.n	8012c2e <xTaskPriorityDisinherit+0x22>
 8012c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c20:	f383 8811 	msr	BASEPRI, r3
 8012c24:	f3bf 8f6f 	isb	sy
 8012c28:	f3bf 8f4f 	dsb	sy
 8012c2c:	e7fe      	b.n	8012c2c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8012c2e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8012c30:	b943      	cbnz	r3, 8012c44 <xTaskPriorityDisinherit+0x38>
 8012c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c36:	f383 8811 	msr	BASEPRI, r3
 8012c3a:	f3bf 8f6f 	isb	sy
 8012c3e:	f3bf 8f4f 	dsb	sy
 8012c42:	e7fe      	b.n	8012c42 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012c44:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8012c46:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012c48:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8012c4a:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012c4c:	4291      	cmp	r1, r2
 8012c4e:	d0df      	beq.n	8012c10 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d1dd      	bne.n	8012c10 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c54:	1d25      	adds	r5, r4, #4
 8012c56:	4628      	mov	r0, r5
 8012c58:	f7fe fbfa 	bl	8011450 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012c5c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012c62:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c64:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8012c66:	4a08      	ldr	r2, [pc, #32]	@ (8012c88 <xTaskPriorityDisinherit+0x7c>)
 8012c68:	6811      	ldr	r1, [r2, #0]
 8012c6a:	428b      	cmp	r3, r1
 8012c6c:	d900      	bls.n	8012c70 <xTaskPriorityDisinherit+0x64>
 8012c6e:	6013      	str	r3, [r2, #0]
 8012c70:	4a06      	ldr	r2, [pc, #24]	@ (8012c8c <xTaskPriorityDisinherit+0x80>)
 8012c72:	2014      	movs	r0, #20
 8012c74:	4629      	mov	r1, r5
 8012c76:	fb00 2003 	mla	r0, r0, r3, r2
 8012c7a:	f7fe fbc7 	bl	801140c <vListInsertEnd>
					xReturn = pdTRUE;
 8012c7e:	2001      	movs	r0, #1
		return xReturn;
 8012c80:	e7c7      	b.n	8012c12 <xTaskPriorityDisinherit+0x6>
 8012c82:	bf00      	nop
 8012c84:	24028634 	.word	0x24028634
 8012c88:	24028158 	.word	0x24028158
 8012c8c:	240281d4 	.word	0x240281d4

08012c90 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8012c90:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8012c92:	4604      	mov	r4, r0
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d042      	beq.n	8012d1e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8012c98:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8012c9a:	b942      	cbnz	r2, 8012cae <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8012c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ca0:	f383 8811 	msr	BASEPRI, r3
 8012ca4:	f3bf 8f6f 	isb	sy
 8012ca8:	f3bf 8f4f 	dsb	sy
 8012cac:	e7fe      	b.n	8012cac <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012cae:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012cb0:	4299      	cmp	r1, r3
 8012cb2:	bf38      	it	cc
 8012cb4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012cb6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012cb8:	428b      	cmp	r3, r1
 8012cba:	d030      	beq.n	8012d1e <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012cbc:	2a01      	cmp	r2, #1
 8012cbe:	d12e      	bne.n	8012d1e <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 8012cc0:	4a17      	ldr	r2, [pc, #92]	@ (8012d20 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8012cc2:	6812      	ldr	r2, [r2, #0]
 8012cc4:	4282      	cmp	r2, r0
 8012cc6:	d108      	bne.n	8012cda <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8012cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ccc:	f383 8811 	msr	BASEPRI, r3
 8012cd0:	f3bf 8f6f 	isb	sy
 8012cd4:	f3bf 8f4f 	dsb	sy
 8012cd8:	e7fe      	b.n	8012cd8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012cda:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012cdc:	4d11      	ldr	r5, [pc, #68]	@ (8012d24 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012cde:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012ce0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8012ce4:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012ce6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cea:	bfa8      	it	ge
 8012cec:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012cf0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cf2:	bfa8      	it	ge
 8012cf4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d111      	bne.n	8012d1e <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012cfa:	1d06      	adds	r6, r0, #4
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	f7fe fba7 	bl	8011450 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8012d02:	4a09      	ldr	r2, [pc, #36]	@ (8012d28 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8012d04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012d06:	6811      	ldr	r1, [r2, #0]
 8012d08:	428b      	cmp	r3, r1
 8012d0a:	d900      	bls.n	8012d0e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8012d0c:	6013      	str	r3, [r2, #0]
 8012d0e:	2014      	movs	r0, #20
 8012d10:	4631      	mov	r1, r6
 8012d12:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8012d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8012d1a:	f7fe bb77 	b.w	801140c <vListInsertEnd>
	}
 8012d1e:	bd70      	pop	{r4, r5, r6, pc}
 8012d20:	24028634 	.word	0x24028634
 8012d24:	240281d4 	.word	0x240281d4
 8012d28:	24028158 	.word	0x24028158

08012d2c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8012d2c:	4b04      	ldr	r3, [pc, #16]	@ (8012d40 <pvTaskIncrementMutexHeldCount+0x14>)
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	b11a      	cbz	r2, 8012d3a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8012d32:	6819      	ldr	r1, [r3, #0]
 8012d34:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8012d36:	3201      	adds	r2, #1
 8012d38:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8012d3a:	6818      	ldr	r0, [r3, #0]
	}
 8012d3c:	4770      	bx	lr
 8012d3e:	bf00      	nop
 8012d40:	24028634 	.word	0x24028634

08012d44 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8012d44:	4291      	cmp	r1, r2
{
 8012d46:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012d48:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012d4a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8012d4c:	d80a      	bhi.n	8012d64 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d4e:	1ad2      	subs	r2, r2, r3
 8012d50:	6983      	ldr	r3, [r0, #24]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d20d      	bcs.n	8012d72 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012d56:	1d01      	adds	r1, r0, #4
 8012d58:	4b07      	ldr	r3, [pc, #28]	@ (8012d78 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d5a:	6818      	ldr	r0, [r3, #0]
 8012d5c:	f7fe fb61 	bl	8011422 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8012d60:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8012d62:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d201      	bcs.n	8012d6c <prvInsertTimerInActiveList+0x28>
 8012d68:	4299      	cmp	r1, r3
 8012d6a:	d202      	bcs.n	8012d72 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d6c:	1d01      	adds	r1, r0, #4
 8012d6e:	4b03      	ldr	r3, [pc, #12]	@ (8012d7c <prvInsertTimerInActiveList+0x38>)
 8012d70:	e7f3      	b.n	8012d5a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8012d72:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8012d74:	e7f5      	b.n	8012d62 <prvInsertTimerInActiveList+0x1e>
 8012d76:	bf00      	nop
 8012d78:	24028734 	.word	0x24028734
 8012d7c:	24028738 	.word	0x24028738

08012d80 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8012d82:	4c11      	ldr	r4, [pc, #68]	@ (8012dc8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8012d84:	f7fe fbd6 	bl	8011534 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8012d88:	6825      	ldr	r5, [r4, #0]
 8012d8a:	b9bd      	cbnz	r5, 8012dbc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8012d8c:	4f0f      	ldr	r7, [pc, #60]	@ (8012dcc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8012d8e:	4e10      	ldr	r6, [pc, #64]	@ (8012dd0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8012d90:	4638      	mov	r0, r7
 8012d92:	f7fe fb2d 	bl	80113f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012d96:	4630      	mov	r0, r6
 8012d98:	f7fe fb2a 	bl	80113f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8012dd4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8012dd8 <prvCheckForValidListAndQueue+0x58>)
 8012da0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8012da2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012da4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8012da6:	4b0d      	ldr	r3, [pc, #52]	@ (8012ddc <prvCheckForValidListAndQueue+0x5c>)
 8012da8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012daa:	4b0d      	ldr	r3, [pc, #52]	@ (8012de0 <prvCheckForValidListAndQueue+0x60>)
 8012dac:	9500      	str	r5, [sp, #0]
 8012dae:	f7fe fdcb 	bl	8011948 <xQueueGenericCreateStatic>
 8012db2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012db4:	b110      	cbz	r0, 8012dbc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012db6:	490b      	ldr	r1, [pc, #44]	@ (8012de4 <prvCheckForValidListAndQueue+0x64>)
 8012db8:	f7ff f9f6 	bl	80121a8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8012dbc:	b003      	add	sp, #12
 8012dbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8012dc2:	f7fe bbd7 	b.w	8011574 <vPortExitCritical>
 8012dc6:	bf00      	nop
 8012dc8:	24028730 	.word	0x24028730
 8012dcc:	24028750 	.word	0x24028750
 8012dd0:	2402873c 	.word	0x2402873c
 8012dd4:	24028738 	.word	0x24028738
 8012dd8:	24028688 	.word	0x24028688
 8012ddc:	24028734 	.word	0x24028734
 8012de0:	24028638 	.word	0x24028638
 8012de4:	0802fff5 	.word	0x0802fff5

08012de8 <xTimerCreateTimerTask>:
{
 8012de8:	b510      	push	{r4, lr}
 8012dea:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8012dec:	f7ff ffc8 	bl	8012d80 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8012df0:	4b12      	ldr	r3, [pc, #72]	@ (8012e3c <xTimerCreateTimerTask+0x54>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	b1b3      	cbz	r3, 8012e24 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012df6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012df8:	aa07      	add	r2, sp, #28
 8012dfa:	a906      	add	r1, sp, #24
 8012dfc:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012dfe:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012e02:	f7fe f9ed 	bl	80111e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012e06:	9b05      	ldr	r3, [sp, #20]
 8012e08:	9a07      	ldr	r2, [sp, #28]
 8012e0a:	9302      	str	r3, [sp, #8]
 8012e0c:	9b06      	ldr	r3, [sp, #24]
 8012e0e:	490c      	ldr	r1, [pc, #48]	@ (8012e40 <xTimerCreateTimerTask+0x58>)
 8012e10:	9301      	str	r3, [sp, #4]
 8012e12:	2302      	movs	r3, #2
 8012e14:	480b      	ldr	r0, [pc, #44]	@ (8012e44 <xTimerCreateTimerTask+0x5c>)
 8012e16:	9300      	str	r3, [sp, #0]
 8012e18:	4623      	mov	r3, r4
 8012e1a:	f7ff fb8a 	bl	8012532 <xTaskCreateStatic>
 8012e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8012e48 <xTimerCreateTimerTask+0x60>)
 8012e20:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8012e22:	b940      	cbnz	r0, 8012e36 <xTimerCreateTimerTask+0x4e>
 8012e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8012e34:	e7fe      	b.n	8012e34 <xTimerCreateTimerTask+0x4c>
}
 8012e36:	2001      	movs	r0, #1
 8012e38:	b008      	add	sp, #32
 8012e3a:	bd10      	pop	{r4, pc}
 8012e3c:	24028730 	.word	0x24028730
 8012e40:	0802fffa 	.word	0x0802fffa
 8012e44:	08012f45 	.word	0x08012f45
 8012e48:	2402872c 	.word	0x2402872c

08012e4c <xTimerGenericCommand>:
{
 8012e4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012e4e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8012e50:	4604      	mov	r4, r0
{
 8012e52:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8012e54:	b940      	cbnz	r0, 8012e68 <xTimerGenericCommand+0x1c>
 8012e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e5a:	f383 8811 	msr	BASEPRI, r3
 8012e5e:	f3bf 8f6f 	isb	sy
 8012e62:	f3bf 8f4f 	dsb	sy
 8012e66:	e7fe      	b.n	8012e66 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8012e68:	4d0c      	ldr	r5, [pc, #48]	@ (8012e9c <xTimerGenericCommand+0x50>)
 8012e6a:	6828      	ldr	r0, [r5, #0]
 8012e6c:	b178      	cbz	r0, 8012e8e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012e6e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012e70:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012e72:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012e76:	dc0c      	bgt.n	8012e92 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012e78:	f7ff fe7a 	bl	8012b70 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012e7c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012e7e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012e80:	4669      	mov	r1, sp
 8012e82:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012e84:	bf0c      	ite	eq
 8012e86:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012e88:	461a      	movne	r2, r3
 8012e8a:	f7fe fe12 	bl	8011ab2 <xQueueGenericSend>
}
 8012e8e:	b004      	add	sp, #16
 8012e90:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012e92:	2300      	movs	r3, #0
 8012e94:	4669      	mov	r1, sp
 8012e96:	f7fe ff0f 	bl	8011cb8 <xQueueGenericSendFromISR>
 8012e9a:	e7f8      	b.n	8012e8e <xTimerGenericCommand+0x42>
 8012e9c:	24028730 	.word	0x24028730

08012ea0 <prvSampleTimeNow>:
{
 8012ea0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8012ea4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8012f40 <prvSampleTimeNow+0xa0>
{
 8012ea8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8012eaa:	f7ff fbb1 	bl	8012610 <xTaskGetTickCount>
 8012eae:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8012eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8012eb4:	4283      	cmp	r3, r0
 8012eb6:	d909      	bls.n	8012ecc <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012eb8:	4f1f      	ldr	r7, [pc, #124]	@ (8012f38 <prvSampleTimeNow+0x98>)
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	681a      	ldr	r2, [r3, #0]
 8012ebe:	b96a      	cbnz	r2, 8012edc <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8012ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8012f3c <prvSampleTimeNow+0x9c>)
 8012ec2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012ec4:	6013      	str	r3, [r2, #0]
 8012ec6:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8012ec8:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8012eca:	e000      	b.n	8012ece <prvSampleTimeNow+0x2e>
 8012ecc:	2300      	movs	r3, #0
}
 8012ece:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8012ed0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8012ed2:	f8c8 5000 	str.w	r5, [r8]
}
 8012ed6:	b002      	add	sp, #8
 8012ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012edc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ede:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ee0:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ee4:	f104 0a04 	add.w	sl, r4, #4
 8012ee8:	4650      	mov	r0, sl
 8012eea:	f7fe fab1 	bl	8011450 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012eee:	6a23      	ldr	r3, [r4, #32]
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012ef4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012ef8:	075b      	lsls	r3, r3, #29
 8012efa:	d5de      	bpl.n	8012eba <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012efc:	69a3      	ldr	r3, [r4, #24]
 8012efe:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8012f00:	4599      	cmp	r9, r3
 8012f02:	d206      	bcs.n	8012f12 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012f04:	4651      	mov	r1, sl
 8012f06:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012f08:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012f0a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012f0c:	f7fe fa89 	bl	8011422 <vListInsert>
 8012f10:	e7d3      	b.n	8012eba <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012f12:	2300      	movs	r3, #0
 8012f14:	464a      	mov	r2, r9
 8012f16:	4620      	mov	r0, r4
 8012f18:	4619      	mov	r1, r3
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	f7ff ff96 	bl	8012e4c <xTimerGenericCommand>
				configASSERT( xResult );
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d1ca      	bne.n	8012eba <prvSampleTimeNow+0x1a>
 8012f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f28:	f383 8811 	msr	BASEPRI, r3
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	e7fe      	b.n	8012f34 <prvSampleTimeNow+0x94>
 8012f36:	bf00      	nop
 8012f38:	24028738 	.word	0x24028738
 8012f3c:	24028734 	.word	0x24028734
 8012f40:	24028728 	.word	0x24028728

08012f44 <prvTimerTask>:
{
 8012f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f48:	4d6e      	ldr	r5, [pc, #440]	@ (8013104 <prvTimerTask+0x1c0>)
{
 8012f4a:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f4c:	4e6e      	ldr	r6, [pc, #440]	@ (8013108 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f4e:	682b      	ldr	r3, [r5, #0]
 8012f50:	f8d3 8000 	ldr.w	r8, [r3]
 8012f54:	f1b8 0f00 	cmp.w	r8, #0
 8012f58:	d035      	beq.n	8012fc6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f5a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f5c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f5e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8012f62:	f7ff fb4d 	bl	8012600 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012f66:	a804      	add	r0, sp, #16
 8012f68:	f7ff ff9a 	bl	8012ea0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8012f6c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012f6e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d169      	bne.n	8013048 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012f74:	2c00      	cmp	r4, #0
 8012f76:	d14c      	bne.n	8013012 <prvTimerTask+0xce>
 8012f78:	4540      	cmp	r0, r8
 8012f7a:	d350      	bcc.n	801301e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8012f7c:	f7ff fbe4 	bl	8012748 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f80:	682b      	ldr	r3, [r5, #0]
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012f86:	1d38      	adds	r0, r7, #4
 8012f88:	f7fe fa62 	bl	8011450 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012f8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012f90:	0758      	lsls	r0, r3, #29
 8012f92:	d51a      	bpl.n	8012fca <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012f94:	69b9      	ldr	r1, [r7, #24]
 8012f96:	4643      	mov	r3, r8
 8012f98:	464a      	mov	r2, r9
 8012f9a:	4638      	mov	r0, r7
 8012f9c:	4441      	add	r1, r8
 8012f9e:	f7ff fed1 	bl	8012d44 <prvInsertTimerInActiveList>
 8012fa2:	b1b0      	cbz	r0, 8012fd2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012fa4:	4623      	mov	r3, r4
 8012fa6:	4642      	mov	r2, r8
 8012fa8:	4621      	mov	r1, r4
 8012faa:	4638      	mov	r0, r7
 8012fac:	9400      	str	r4, [sp, #0]
 8012fae:	f7ff ff4d 	bl	8012e4c <xTimerGenericCommand>
			configASSERT( xResult );
 8012fb2:	b970      	cbnz	r0, 8012fd2 <prvTimerTask+0x8e>
 8012fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fb8:	f383 8811 	msr	BASEPRI, r3
 8012fbc:	f3bf 8f6f 	isb	sy
 8012fc0:	f3bf 8f4f 	dsb	sy
 8012fc4:	e7fe      	b.n	8012fc4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012fc6:	2401      	movs	r4, #1
 8012fc8:	e7cb      	b.n	8012f62 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012fca:	f023 0301 	bic.w	r3, r3, #1
 8012fce:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
 8012fd4:	4638      	mov	r0, r7
 8012fd6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012fd8:	2200      	movs	r2, #0
 8012fda:	a904      	add	r1, sp, #16
 8012fdc:	6830      	ldr	r0, [r6, #0]
 8012fde:	f7fe ff19 	bl	8011e14 <xQueueReceive>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d0b3      	beq.n	8012f4e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012fe6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012fe8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	db2f      	blt.n	801304e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012fee:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012ff0:	6963      	ldr	r3, [r4, #20]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d132      	bne.n	801305c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ff6:	a803      	add	r0, sp, #12
 8012ff8:	f7ff ff52 	bl	8012ea0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8012ffc:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ffe:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8013000:	2b09      	cmp	r3, #9
 8013002:	d8e9      	bhi.n	8012fd8 <prvTimerTask+0x94>
 8013004:	e8df f003 	tbb	[pc, r3]
 8013008:	572e2e2e 	.word	0x572e2e2e
 801300c:	2e2e765e 	.word	0x2e2e765e
 8013010:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013012:	4b3e      	ldr	r3, [pc, #248]	@ (801310c <prvTimerTask+0x1c8>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	681c      	ldr	r4, [r3, #0]
 8013018:	fab4 f484 	clz	r4, r4
 801301c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801301e:	4622      	mov	r2, r4
 8013020:	eba8 0109 	sub.w	r1, r8, r9
 8013024:	6830      	ldr	r0, [r6, #0]
 8013026:	f7ff f8fe 	bl	8012226 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801302a:	f7ff fb8d 	bl	8012748 <xTaskResumeAll>
 801302e:	2800      	cmp	r0, #0
 8013030:	d1d2      	bne.n	8012fd8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8013032:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801303a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801303e:	f3bf 8f4f 	dsb	sy
 8013042:	f3bf 8f6f 	isb	sy
 8013046:	e7c7      	b.n	8012fd8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8013048:	f7ff fb7e 	bl	8012748 <xTaskResumeAll>
}
 801304c:	e7c4      	b.n	8012fd8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801304e:	9b05      	ldr	r3, [sp, #20]
 8013050:	9907      	ldr	r1, [sp, #28]
 8013052:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013054:	9b04      	ldr	r3, [sp, #16]
 8013056:	2b00      	cmp	r3, #0
 8013058:	dbbe      	blt.n	8012fd8 <prvTimerTask+0x94>
 801305a:	e7c8      	b.n	8012fee <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801305c:	1d20      	adds	r0, r4, #4
 801305e:	f7fe f9f7 	bl	8011450 <uxListRemove>
 8013062:	e7c8      	b.n	8012ff6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013064:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013068:	4620      	mov	r0, r4
 801306a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801306c:	f043 0301 	orr.w	r3, r3, #1
 8013070:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013074:	9b05      	ldr	r3, [sp, #20]
 8013076:	4419      	add	r1, r3
 8013078:	f7ff fe64 	bl	8012d44 <prvInsertTimerInActiveList>
 801307c:	2800      	cmp	r0, #0
 801307e:	d0ab      	beq.n	8012fd8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013080:	6a23      	ldr	r3, [r4, #32]
 8013082:	4620      	mov	r0, r4
 8013084:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013086:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801308a:	0759      	lsls	r1, r3, #29
 801308c:	d5a4      	bpl.n	8012fd8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801308e:	69a2      	ldr	r2, [r4, #24]
 8013090:	2300      	movs	r3, #0
 8013092:	9905      	ldr	r1, [sp, #20]
 8013094:	4620      	mov	r0, r4
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	440a      	add	r2, r1
 801309a:	4619      	mov	r1, r3
 801309c:	f7ff fed6 	bl	8012e4c <xTimerGenericCommand>
							configASSERT( xResult );
 80130a0:	2800      	cmp	r0, #0
 80130a2:	d199      	bne.n	8012fd8 <prvTimerTask+0x94>
 80130a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130a8:	f383 8811 	msr	BASEPRI, r3
 80130ac:	f3bf 8f6f 	isb	sy
 80130b0:	f3bf 8f4f 	dsb	sy
 80130b4:	e7fe      	b.n	80130b4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80130b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80130ba:	f023 0301 	bic.w	r3, r3, #1
 80130be:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80130c2:	e789      	b.n	8012fd8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80130c4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80130c8:	f043 0301 	orr.w	r3, r3, #1
 80130cc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80130d0:	9905      	ldr	r1, [sp, #20]
 80130d2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80130d4:	b941      	cbnz	r1, 80130e8 <prvTimerTask+0x1a4>
 80130d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130da:	f383 8811 	msr	BASEPRI, r3
 80130de:	f3bf 8f6f 	isb	sy
 80130e2:	f3bf 8f4f 	dsb	sy
 80130e6:	e7fe      	b.n	80130e6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80130e8:	4603      	mov	r3, r0
 80130ea:	4401      	add	r1, r0
 80130ec:	4620      	mov	r0, r4
 80130ee:	f7ff fe29 	bl	8012d44 <prvInsertTimerInActiveList>
					break;
 80130f2:	e771      	b.n	8012fd8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80130f4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80130f8:	079a      	lsls	r2, r3, #30
 80130fa:	d4de      	bmi.n	80130ba <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80130fc:	4620      	mov	r0, r4
 80130fe:	f7fe f939 	bl	8011374 <vPortFree>
 8013102:	e769      	b.n	8012fd8 <prvTimerTask+0x94>
 8013104:	24028738 	.word	0x24028738
 8013108:	24028730 	.word	0x24028730
 801310c:	24028734 	.word	0x24028734

08013110 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013110:	8880      	ldrh	r0, [r0, #4]
 8013112:	4770      	bx	lr

08013114 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	6803      	ldr	r3, [r0, #0]
 8013118:	460c      	mov	r4, r1
 801311a:	2100      	movs	r1, #0
 801311c:	4605      	mov	r5, r0
 801311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013120:	4798      	blx	r3
 8013122:	4606      	mov	r6, r0
 8013124:	682b      	ldr	r3, [r5, #0]
 8013126:	4628      	mov	r0, r5
 8013128:	1ba4      	subs	r4, r4, r6
 801312a:	6a1b      	ldr	r3, [r3, #32]
 801312c:	b2a4      	uxth	r4, r4
 801312e:	4798      	blx	r3
 8013130:	fbb4 f0f0 	udiv	r0, r4, r0
 8013134:	bd70      	pop	{r4, r5, r6, pc}

08013136 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013136:	2300      	movs	r3, #0
 8013138:	8083      	strh	r3, [r0, #4]
 801313a:	4770      	bx	lr

0801313c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801313c:	b510      	push	{r4, lr}
 801313e:	6803      	ldr	r3, [r0, #0]
 8013140:	4604      	mov	r4, r0
 8013142:	8881      	ldrh	r1, [r0, #4]
 8013144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013146:	4798      	blx	r3
 8013148:	88a3      	ldrh	r3, [r4, #4]
 801314a:	3301      	adds	r3, #1
 801314c:	80a3      	strh	r3, [r4, #4]
 801314e:	bd10      	pop	{r4, pc}

08013150 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013150:	6803      	ldr	r3, [r0, #0]
 8013152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013154:	4718      	bx	r3

08013156 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013156:	4770      	bx	lr

08013158 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013158:	4a02      	ldr	r2, [pc, #8]	@ (8013164 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801315a:	6002      	str	r2, [r0, #0]
 801315c:	2200      	movs	r2, #0
 801315e:	8082      	strh	r2, [r0, #4]
 8013160:	4770      	bx	lr
 8013162:	bf00      	nop
 8013164:	0803000c 	.word	0x0803000c

08013168 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 8013168:	f880 102f 	strb.w	r1, [r0, #47]	@ 0x2f
 801316c:	4770      	bx	lr

0801316e <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 801316e:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 8013172:	4770      	bx	lr

08013174 <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 8013174:	b510      	push	{r4, lr}
 8013176:	6803      	ldr	r3, [r0, #0]
 8013178:	4604      	mov	r4, r0
 801317a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801317e:	4798      	blx	r3
 8013180:	b110      	cbz	r0, 8013188 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 8013182:	4620      	mov	r0, r4
 8013184:	f7f0 feb1 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8013188:	bd10      	pop	{r4, pc}

0801318a <_ZN8touchgfx12DigitalClock8setWidthEs>:
 801318a:	b508      	push	{r3, lr}
 801318c:	3034      	adds	r0, #52	@ 0x34
 801318e:	f820 1c2c 	strh.w	r1, [r0, #-44]
 8013192:	f7f1 f9c1 	bl	8004518 <_ZN8touchgfx8TextArea8setWidthEs>
 8013196:	bd08      	pop	{r3, pc}

08013198 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8013198:	b508      	push	{r3, lr}
 801319a:	3034      	adds	r0, #52	@ 0x34
 801319c:	f820 1c2a 	strh.w	r1, [r0, #-42]
 80131a0:	f7f1 f9cc 	bl	800453c <_ZN8touchgfx8TextArea9setHeightEs>
 80131a4:	bd08      	pop	{r3, pc}
	...

080131a8 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 80131a8:	4a11      	ldr	r2, [pc, #68]	@ (80131f0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 80131aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131ae:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80131b2:	4604      	mov	r4, r0
 80131b4:	8812      	ldrh	r2, [r2, #0]
 80131b6:	460d      	mov	r5, r1
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d916      	bls.n	80131ea <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 80131bc:	6802      	ldr	r2, [r0, #0]
 80131be:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 80131c2:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 80131c4:	4a0b      	ldr	r2, [pc, #44]	@ (80131f4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 80131c6:	6812      	ldr	r2, [r2, #0]
 80131c8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80131cc:	4b0a      	ldr	r3, [pc, #40]	@ (80131f8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80131d4:	6803      	ldr	r3, [r0, #0]
 80131d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80131d8:	4798      	blx	r3
 80131da:	1a2a      	subs	r2, r5, r0
 80131dc:	4639      	mov	r1, r7
 80131de:	4620      	mov	r0, r4
 80131e0:	4633      	mov	r3, r6
 80131e2:	b212      	sxth	r2, r2
 80131e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131e8:	4718      	bx	r3
 80131ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ee:	bf00      	nop
 80131f0:	240287cc 	.word	0x240287cc
 80131f4:	240287c8 	.word	0x240287c8
 80131f8:	240287d0 	.word	0x240287d0

080131fc <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 80131fc:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 8013200:	4770      	bx	lr

08013202 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8013202:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 8013206:	4770      	bx	lr

08013208 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8013208:	b508      	push	{r3, lr}
 801320a:	3034      	adds	r0, #52	@ 0x34
 801320c:	6301      	str	r1, [r0, #48]	@ 0x30
 801320e:	f7f0 fe6c 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8013212:	bd08      	pop	{r3, pc}

08013214 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8013214:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8013216:	4770      	bx	lr

08013218 <_ZN8touchgfx12DigitalClockD1Ev>:
 8013218:	4770      	bx	lr

0801321a <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 801321a:	3034      	adds	r0, #52	@ 0x34
 801321c:	f004 bdda 	b.w	8017dd4 <_ZNK8touchgfx8TextArea12getTextWidthEv>

08013220 <_ZN8touchgfx12DigitalClockD0Ev>:
 8013220:	b510      	push	{r4, lr}
 8013222:	4604      	mov	r4, r0
 8013224:	2198      	movs	r1, #152	@ 0x98
 8013226:	f016 fba7 	bl	8029978 <_ZdlPvj>
 801322a:	4620      	mov	r0, r4
 801322c:	bd10      	pop	{r4, pc}

0801322e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 801322e:	b538      	push	{r3, r4, r5, lr}
 8013230:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8013234:	460d      	mov	r5, r1
 8013236:	4620      	mov	r0, r4
 8013238:	f7f0 fe57 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801323c:	4620      	mov	r0, r4
 801323e:	4629      	mov	r1, r5
 8013240:	f005 f904 	bl	801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013244:	4620      	mov	r0, r4
 8013246:	f7f0 fe50 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801324a:	bd38      	pop	{r3, r4, r5, pc}

0801324c <_ZN8touchgfx12DigitalClock11updateClockEv>:
 801324c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013250:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 8013254:	4604      	mov	r4, r0
 8013256:	4630      	mov	r0, r6
 8013258:	f7f0 fe47 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801325c:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8013260:	bb0b      	cbnz	r3, 80132a6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 8013262:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8013266:	4620      	mov	r0, r4
 8013268:	4a40      	ldr	r2, [pc, #256]	@ (801336c <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 801326a:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 801326e:	4d40      	ldr	r5, [pc, #256]	@ (8013370 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8013270:	2b00      	cmp	r3, #0
 8013272:	bf08      	it	eq
 8013274:	4615      	moveq	r5, r2
 8013276:	f000 f928 	bl	80134ca <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 801327a:	4680      	mov	r8, r0
 801327c:	4620      	mov	r0, r4
 801327e:	f000 f937 	bl	80134f0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8013282:	4681      	mov	r9, r0
 8013284:	4620      	mov	r0, r4
 8013286:	f000 f92c 	bl	80134e2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 801328a:	2800      	cmp	r0, #0
 801328c:	462a      	mov	r2, r5
 801328e:	f04f 010c 	mov.w	r1, #12
 8013292:	bf14      	ite	ne
 8013294:	2341      	movne	r3, #65	@ 0x41
 8013296:	2350      	moveq	r3, #80	@ 0x50
 8013298:	4638      	mov	r0, r7
 801329a:	e9cd 9300 	strd	r9, r3, [sp]
 801329e:	4643      	mov	r3, r8
 80132a0:	f00b fb5a 	bl	801e958 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80132a4:	e017      	b.n	80132d6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	d11b      	bne.n	80132e2 <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 80132aa:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80132ae:	4620      	mov	r0, r4
 80132b0:	4a30      	ldr	r2, [pc, #192]	@ (8013374 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 80132b2:	4d31      	ldr	r5, [pc, #196]	@ (8013378 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	bf08      	it	eq
 80132b8:	4615      	moveq	r5, r2
 80132ba:	f000 f903 	bl	80134c4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 80132be:	4607      	mov	r7, r0
 80132c0:	4620      	mov	r0, r4
 80132c2:	f000 f915 	bl	80134f0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80132c6:	462a      	mov	r2, r5
 80132c8:	9000      	str	r0, [sp, #0]
 80132ca:	463b      	mov	r3, r7
 80132cc:	210c      	movs	r1, #12
 80132ce:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80132d2:	f00b fb41 	bl	801e958 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80132d6:	4630      	mov	r0, r6
 80132d8:	f7f0 fe07 	bl	8003eea <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80132dc:	b004      	add	sp, #16
 80132de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	d126      	bne.n	8013334 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 80132e6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80132ea:	4620      	mov	r0, r4
 80132ec:	4a23      	ldr	r2, [pc, #140]	@ (801337c <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 80132ee:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 80132f2:	4d23      	ldr	r5, [pc, #140]	@ (8013380 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	bf08      	it	eq
 80132f8:	4615      	moveq	r5, r2
 80132fa:	f000 f8e6 	bl	80134ca <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 80132fe:	4680      	mov	r8, r0
 8013300:	4620      	mov	r0, r4
 8013302:	f000 f8f5 	bl	80134f0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8013306:	4681      	mov	r9, r0
 8013308:	4620      	mov	r0, r4
 801330a:	f000 f8f4 	bl	80134f6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 801330e:	4682      	mov	sl, r0
 8013310:	4620      	mov	r0, r4
 8013312:	f000 f8e6 	bl	80134e2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8013316:	2800      	cmp	r0, #0
 8013318:	f8cd 9000 	str.w	r9, [sp]
 801331c:	462a      	mov	r2, r5
 801331e:	bf14      	ite	ne
 8013320:	2341      	movne	r3, #65	@ 0x41
 8013322:	2350      	moveq	r3, #80	@ 0x50
 8013324:	210c      	movs	r1, #12
 8013326:	4638      	mov	r0, r7
 8013328:	e9cd a301 	strd	sl, r3, [sp, #4]
 801332c:	4643      	mov	r3, r8
 801332e:	f00b fb13 	bl	801e958 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013332:	e7d0      	b.n	80132d6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8013334:	2b03      	cmp	r3, #3
 8013336:	d1ce      	bne.n	80132d6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8013338:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 801333c:	4620      	mov	r0, r4
 801333e:	4a11      	ldr	r2, [pc, #68]	@ (8013384 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 8013340:	4d11      	ldr	r5, [pc, #68]	@ (8013388 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 8013342:	2b00      	cmp	r3, #0
 8013344:	bf08      	it	eq
 8013346:	4615      	moveq	r5, r2
 8013348:	f000 f8bc 	bl	80134c4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 801334c:	4607      	mov	r7, r0
 801334e:	4620      	mov	r0, r4
 8013350:	f000 f8ce 	bl	80134f0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8013354:	4680      	mov	r8, r0
 8013356:	4620      	mov	r0, r4
 8013358:	f000 f8cd 	bl	80134f6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 801335c:	463b      	mov	r3, r7
 801335e:	462a      	mov	r2, r5
 8013360:	210c      	movs	r1, #12
 8013362:	e9cd 8000 	strd	r8, r0, [sp]
 8013366:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801336a:	e799      	b.n	80132a0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 801336c:	08030038 	.word	0x08030038
 8013370:	08030062 	.word	0x08030062
 8013374:	08030044 	.word	0x08030044
 8013378:	08030082 	.word	0x08030082
 801337c:	0803005f 	.word	0x0803005f
 8013380:	0803004c 	.word	0x0803004c
 8013384:	0803007f 	.word	0x0803007f
 8013388:	08030070 	.word	0x08030070

0801338c <_ZN8touchgfx12DigitalClockC1Ev>:
 801338c:	b510      	push	{r4, lr}
 801338e:	4604      	mov	r4, r0
 8013390:	f000 f87c 	bl	801348c <_ZN8touchgfx13AbstractClockC1Ev>
 8013394:	2201      	movs	r2, #1
 8013396:	4b21      	ldr	r3, [pc, #132]	@ (801341c <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 8013398:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 801339c:	4620      	mov	r0, r4
 801339e:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 80133a2:	4a1f      	ldr	r2, [pc, #124]	@ (8013420 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 80133a4:	6023      	str	r3, [r4, #0]
 80133a6:	2303      	movs	r3, #3
 80133a8:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80133aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80133ae:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 80133b2:	2300      	movs	r3, #0
 80133b4:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 80133b8:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 80133bc:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 80133c0:	4a18      	ldr	r2, [pc, #96]	@ (8013424 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 80133c2:	66a1      	str	r1, [r4, #104]	@ 0x68
 80133c4:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 80133c8:	6362      	str	r2, [r4, #52]	@ 0x34
 80133ca:	4622      	mov	r2, r4
 80133cc:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80133d0:	8723      	strh	r3, [r4, #56]	@ 0x38
 80133d2:	8763      	strh	r3, [r4, #58]	@ 0x3a
 80133d4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 80133d6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80133d8:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 80133dc:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 80133e0:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 80133e4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80133e8:	6523      	str	r3, [r4, #80]	@ 0x50
 80133ea:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 80133ee:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 80133f2:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 80133f6:	6663      	str	r3, [r4, #100]	@ 0x64
 80133f8:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 80133fc:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8013400:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 8013404:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 8013408:	67a3      	str	r3, [r4, #120]	@ 0x78
 801340a:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 801340e:	f822 3f80 	strh.w	r3, [r2, #128]!
 8013412:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8013414:	f000 f87c 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013418:	4620      	mov	r0, r4
 801341a:	bd10      	pop	{r4, pc}
 801341c:	08030094 	.word	0x08030094
 8013420:	0802ed28 	.word	0x0802ed28
 8013424:	0802ed38 	.word	0x0802ed38

08013428 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8013428:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 801342c:	4770      	bx	lr

0801342e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 801342e:	b470      	push	{r4, r5, r6}
 8013430:	2518      	movs	r5, #24
 8013432:	fbb1 f6f5 	udiv	r6, r1, r5
 8013436:	fb06 1115 	mls	r1, r6, r5, r1
 801343a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 801343e:	213c      	movs	r1, #60	@ 0x3c
 8013440:	fbb2 f5f1 	udiv	r5, r2, r1
 8013444:	fb05 2211 	mls	r2, r5, r1, r2
 8013448:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 801344c:	fbb3 f2f1 	udiv	r2, r3, r1
 8013450:	fb02 3311 	mls	r3, r2, r1, r3
 8013454:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 8013458:	6803      	ldr	r3, [r0, #0]
 801345a:	bc70      	pop	{r4, r5, r6}
 801345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013460:	4718      	bx	r3

08013462 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8013462:	b4f0      	push	{r4, r5, r6, r7}
 8013464:	6804      	ldr	r4, [r0, #0]
 8013466:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801346a:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 801346e:	240c      	movs	r4, #12
 8013470:	2e00      	cmp	r6, #0
 8013472:	46ac      	mov	ip, r5
 8013474:	fbb1 f7f4 	udiv	r7, r1, r4
 8013478:	fb07 1114 	mls	r1, r7, r4, r1
 801347c:	bf18      	it	ne
 801347e:	2400      	movne	r4, #0
 8013480:	fa54 f181 	uxtab	r1, r4, r1
 8013484:	bcf0      	pop	{r4, r5, r6, r7}
 8013486:	b2c9      	uxtb	r1, r1
 8013488:	4760      	bx	ip
	...

0801348c <_ZN8touchgfx13AbstractClockC1Ev>:
 801348c:	2101      	movs	r1, #1
 801348e:	2200      	movs	r2, #0
 8013490:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8013494:	490a      	ldr	r1, [pc, #40]	@ (80134c0 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8013496:	8082      	strh	r2, [r0, #4]
 8013498:	80c2      	strh	r2, [r0, #6]
 801349a:	8102      	strh	r2, [r0, #8]
 801349c:	8142      	strh	r2, [r0, #10]
 801349e:	8182      	strh	r2, [r0, #12]
 80134a0:	81c2      	strh	r2, [r0, #14]
 80134a2:	8202      	strh	r2, [r0, #16]
 80134a4:	8242      	strh	r2, [r0, #18]
 80134a6:	61c2      	str	r2, [r0, #28]
 80134a8:	8402      	strh	r2, [r0, #32]
 80134aa:	8442      	strh	r2, [r0, #34]	@ 0x22
 80134ac:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80134b0:	6001      	str	r1, [r0, #0]
 80134b2:	6282      	str	r2, [r0, #40]	@ 0x28
 80134b4:	8582      	strh	r2, [r0, #44]	@ 0x2c
 80134b6:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 80134ba:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80134be:	4770      	bx	lr
 80134c0:	08030154 	.word	0x08030154

080134c4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 80134c4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80134c8:	4770      	bx	lr

080134ca <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 80134ca:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80134ce:	220c      	movs	r2, #12
 80134d0:	f100 030b 	add.w	r3, r0, #11
 80134d4:	fb93 f0f2 	sdiv	r0, r3, r2
 80134d8:	fb02 3010 	mls	r0, r2, r0, r3
 80134dc:	3001      	adds	r0, #1
 80134de:	b2c0      	uxtb	r0, r0
 80134e0:	4770      	bx	lr

080134e2 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 80134e2:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80134e6:	280b      	cmp	r0, #11
 80134e8:	bf8c      	ite	hi
 80134ea:	2000      	movhi	r0, #0
 80134ec:	2001      	movls	r0, #1
 80134ee:	4770      	bx	lr

080134f0 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 80134f0:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80134f4:	4770      	bx	lr

080134f6 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 80134f6:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 80134fa:	4770      	bx	lr

080134fc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80134fc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80134fe:	2000      	movs	r0, #0
 8013500:	b12b      	cbz	r3, 801350e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013502:	b920      	cbnz	r0, 801350e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013504:	1a5a      	subs	r2, r3, r1
 8013506:	699b      	ldr	r3, [r3, #24]
 8013508:	4250      	negs	r0, r2
 801350a:	4150      	adcs	r0, r2
 801350c:	e7f8      	b.n	8013500 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801350e:	4770      	bx	lr

08013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013510:	2300      	movs	r3, #0
 8013512:	6148      	str	r0, [r1, #20]
 8013514:	618b      	str	r3, [r1, #24]
 8013516:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013518:	b913      	cbnz	r3, 8013520 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801351a:	6281      	str	r1, [r0, #40]	@ 0x28
 801351c:	4770      	bx	lr
 801351e:	4613      	mov	r3, r2
 8013520:	699a      	ldr	r2, [r3, #24]
 8013522:	2a00      	cmp	r2, #0
 8013524:	d1fb      	bne.n	801351e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013526:	6199      	str	r1, [r3, #24]
 8013528:	4770      	bx	lr

0801352a <_ZN8touchgfx9Container9removeAllEv>:
 801352a:	2200      	movs	r2, #0
 801352c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801352e:	b123      	cbz	r3, 801353a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013530:	6999      	ldr	r1, [r3, #24]
 8013532:	6281      	str	r1, [r0, #40]	@ 0x28
 8013534:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013538:	e7f8      	b.n	801352c <_ZN8touchgfx9Container9removeAllEv+0x2>
 801353a:	4770      	bx	lr

0801353c <_ZN8touchgfx9Container6unlinkEv>:
 801353c:	2300      	movs	r3, #0
 801353e:	6283      	str	r3, [r0, #40]	@ 0x28
 8013540:	4770      	bx	lr

08013542 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013542:	2200      	movs	r2, #0
 8013544:	8002      	strh	r2, [r0, #0]
 8013546:	8042      	strh	r2, [r0, #2]
 8013548:	8082      	strh	r2, [r0, #4]
 801354a:	80c2      	strh	r2, [r0, #6]
 801354c:	4770      	bx	lr

0801354e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801354e:	b570      	push	{r4, r5, r6, lr}
 8013550:	460d      	mov	r5, r1
 8013552:	4616      	mov	r6, r2
 8013554:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013556:	b13c      	cbz	r4, 8013568 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013558:	6823      	ldr	r3, [r4, #0]
 801355a:	4620      	mov	r0, r4
 801355c:	4632      	mov	r2, r6
 801355e:	4629      	mov	r1, r5
 8013560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013562:	4798      	blx	r3
 8013564:	69a4      	ldr	r4, [r4, #24]
 8013566:	e7f6      	b.n	8013556 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013568:	bd70      	pop	{r4, r5, r6, pc}

0801356a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801356a:	b538      	push	{r3, r4, r5, lr}
 801356c:	460d      	mov	r5, r1
 801356e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013570:	b134      	cbz	r4, 8013580 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013572:	682b      	ldr	r3, [r5, #0]
 8013574:	4621      	mov	r1, r4
 8013576:	4628      	mov	r0, r5
 8013578:	689b      	ldr	r3, [r3, #8]
 801357a:	4798      	blx	r3
 801357c:	69a4      	ldr	r4, [r4, #24]
 801357e:	e7f7      	b.n	8013570 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013580:	bd38      	pop	{r3, r4, r5, pc}

08013582 <_ZN8touchgfx9ContainerD1Ev>:
 8013582:	4770      	bx	lr

08013584 <_ZN8touchgfx9ContainerD0Ev>:
 8013584:	b510      	push	{r4, lr}
 8013586:	4604      	mov	r4, r0
 8013588:	212c      	movs	r1, #44	@ 0x2c
 801358a:	f016 f9f5 	bl	8029978 <_ZdlPvj>
 801358e:	4620      	mov	r0, r4
 8013590:	bd10      	pop	{r4, pc}

08013592 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013592:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013594:	b19b      	cbz	r3, 80135be <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013596:	428b      	cmp	r3, r1
 8013598:	d109      	bne.n	80135ae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801359a:	699a      	ldr	r2, [r3, #24]
 801359c:	2100      	movs	r1, #0
 801359e:	6159      	str	r1, [r3, #20]
 80135a0:	6282      	str	r2, [r0, #40]	@ 0x28
 80135a2:	b902      	cbnz	r2, 80135a6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80135a4:	4770      	bx	lr
 80135a6:	6199      	str	r1, [r3, #24]
 80135a8:	4770      	bx	lr
 80135aa:	4613      	mov	r3, r2
 80135ac:	b13a      	cbz	r2, 80135be <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80135ae:	699a      	ldr	r2, [r3, #24]
 80135b0:	428a      	cmp	r2, r1
 80135b2:	d1fa      	bne.n	80135aa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80135b4:	698a      	ldr	r2, [r1, #24]
 80135b6:	619a      	str	r2, [r3, #24]
 80135b8:	2300      	movs	r3, #0
 80135ba:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80135be:	4770      	bx	lr

080135c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80135c0:	b410      	push	{r4}
 80135c2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80135c4:	4604      	mov	r4, r0
 80135c6:	b92b      	cbnz	r3, 80135d4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80135c8:	6803      	ldr	r3, [r0, #0]
 80135ca:	4611      	mov	r1, r2
 80135cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80135d2:	4718      	bx	r3
 80135d4:	b941      	cbnz	r1, 80135e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80135d6:	6193      	str	r3, [r2, #24]
 80135d8:	6282      	str	r2, [r0, #40]	@ 0x28
 80135da:	6154      	str	r4, [r2, #20]
 80135dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135e0:	4770      	bx	lr
 80135e2:	4603      	mov	r3, r0
 80135e4:	2800      	cmp	r0, #0
 80135e6:	d0f9      	beq.n	80135dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80135e8:	4299      	cmp	r1, r3
 80135ea:	6998      	ldr	r0, [r3, #24]
 80135ec:	d1f9      	bne.n	80135e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80135ee:	6190      	str	r0, [r2, #24]
 80135f0:	618a      	str	r2, [r1, #24]
 80135f2:	e7f2      	b.n	80135da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080135f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80135f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135f8:	461f      	mov	r7, r3
 80135fa:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80135fe:	460d      	mov	r5, r1
 8013600:	4616      	mov	r6, r2
 8013602:	b103      	cbz	r3, 8013606 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013604:	6038      	str	r0, [r7, #0]
 8013606:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013608:	b314      	cbz	r4, 8013650 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801360a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801360e:	b1eb      	cbz	r3, 801364c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013610:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013614:	428d      	cmp	r5, r1
 8013616:	db19      	blt.n	801364c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013618:	b289      	uxth	r1, r1
 801361a:	8923      	ldrh	r3, [r4, #8]
 801361c:	440b      	add	r3, r1
 801361e:	b21b      	sxth	r3, r3
 8013620:	429d      	cmp	r5, r3
 8013622:	da13      	bge.n	801364c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013624:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013628:	4296      	cmp	r6, r2
 801362a:	db0f      	blt.n	801364c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801362c:	b292      	uxth	r2, r2
 801362e:	8963      	ldrh	r3, [r4, #10]
 8013630:	4413      	add	r3, r2
 8013632:	b21b      	sxth	r3, r3
 8013634:	429e      	cmp	r6, r3
 8013636:	da09      	bge.n	801364c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013638:	6823      	ldr	r3, [r4, #0]
 801363a:	1ab2      	subs	r2, r6, r2
 801363c:	1a69      	subs	r1, r5, r1
 801363e:	4620      	mov	r0, r4
 8013640:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8013644:	b212      	sxth	r2, r2
 8013646:	463b      	mov	r3, r7
 8013648:	b209      	sxth	r1, r1
 801364a:	47c0      	blx	r8
 801364c:	69a4      	ldr	r4, [r4, #24]
 801364e:	e7db      	b.n	8013608 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013654 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013658:	4c6d      	ldr	r4, [pc, #436]	@ (8013810 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801365a:	b0a1      	sub	sp, #132	@ 0x84
 801365c:	4606      	mov	r6, r0
 801365e:	6824      	ldr	r4, [r4, #0]
 8013660:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8013662:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8013666:	2400      	movs	r4, #0
 8013668:	9303      	str	r3, [sp, #12]
 801366a:	802c      	strh	r4, [r5, #0]
 801366c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 801366e:	802c      	strh	r4, [r5, #0]
 8013670:	601c      	str	r4, [r3, #0]
 8013672:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013676:	f7ff ffbd 	bl	80135f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801367a:	f1b9 0f03 	cmp.w	r9, #3
 801367e:	f340 80c1 	ble.w	8013804 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8013682:	4631      	mov	r1, r6
 8013684:	a80c      	add	r0, sp, #48	@ 0x30
 8013686:	f008 fe91 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801368a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801368e:	9306      	str	r3, [sp, #24]
 8013690:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013694:	9307      	str	r3, [sp, #28]
 8013696:	9b03      	ldr	r3, [sp, #12]
 8013698:	f8d3 a000 	ldr.w	sl, [r3]
 801369c:	f1ba 0f00 	cmp.w	sl, #0
 80136a0:	f000 80b3 	beq.w	801380a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80136a4:	4651      	mov	r1, sl
 80136a6:	a810      	add	r0, sp, #64	@ 0x40
 80136a8:	f008 fe80 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80136ac:	2002      	movs	r0, #2
 80136ae:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80136b2:	9b01      	ldr	r3, [sp, #4]
 80136b4:	9a06      	ldr	r2, [sp, #24]
 80136b6:	fb91 f1f0 	sdiv	r1, r1, r0
 80136ba:	189d      	adds	r5, r3, r2
 80136bc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80136c0:	9a07      	ldr	r2, [sp, #28]
 80136c2:	4419      	add	r1, r3
 80136c4:	9b02      	ldr	r3, [sp, #8]
 80136c6:	4413      	add	r3, r2
 80136c8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80136cc:	1a6d      	subs	r5, r5, r1
 80136ce:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80136d2:	fb92 f2f0 	sdiv	r2, r2, r0
 80136d6:	440a      	add	r2, r1
 80136d8:	1a9b      	subs	r3, r3, r2
 80136da:	435b      	muls	r3, r3
 80136dc:	fb05 3505 	mla	r5, r5, r5, r3
 80136e0:	4f4c      	ldr	r7, [pc, #304]	@ (8013814 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80136e2:	ac10      	add	r4, sp, #64	@ 0x40
 80136e4:	f1b9 0f0c 	cmp.w	r9, #12
 80136e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80136ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80136ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80136f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136f4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80136f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80136fc:	f04f 0303 	mov.w	r3, #3
 8013700:	bfd8      	it	le
 8013702:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013706:	f04f 0400 	mov.w	r4, #0
 801370a:	f8cd 9000 	str.w	r9, [sp]
 801370e:	bfcc      	ite	gt
 8013710:	4698      	movgt	r8, r3
 8013712:	fb92 f8f3 	sdivle	r8, r2, r3
 8013716:	1c63      	adds	r3, r4, #1
 8013718:	aa10      	add	r2, sp, #64	@ 0x40
 801371a:	f004 0401 	and.w	r4, r4, #1
 801371e:	f04f 0b00 	mov.w	fp, #0
 8013722:	9308      	str	r3, [sp, #32]
 8013724:	9b00      	ldr	r3, [sp, #0]
 8013726:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801372a:	fb93 f3f8 	sdiv	r3, r3, r8
 801372e:	3404      	adds	r4, #4
 8013730:	b29b      	uxth	r3, r3
 8013732:	9304      	str	r3, [sp, #16]
 8013734:	9a04      	ldr	r2, [sp, #16]
 8013736:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801373a:	fb13 f302 	smulbb	r3, r3, r2
 801373e:	9a01      	ldr	r2, [sp, #4]
 8013740:	b29b      	uxth	r3, r3
 8013742:	1899      	adds	r1, r3, r2
 8013744:	9305      	str	r3, [sp, #20]
 8013746:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801374a:	b209      	sxth	r1, r1
 801374c:	4299      	cmp	r1, r3
 801374e:	db4d      	blt.n	80137ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013750:	8932      	ldrh	r2, [r6, #8]
 8013752:	4413      	add	r3, r2
 8013754:	b21b      	sxth	r3, r3
 8013756:	4299      	cmp	r1, r3
 8013758:	da48      	bge.n	80137ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801375a:	9b04      	ldr	r3, [sp, #16]
 801375c:	6827      	ldr	r7, [r4, #0]
 801375e:	fb17 f703 	smulbb	r7, r7, r3
 8013762:	9b02      	ldr	r3, [sp, #8]
 8013764:	b2bf      	uxth	r7, r7
 8013766:	18fa      	adds	r2, r7, r3
 8013768:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801376c:	b212      	sxth	r2, r2
 801376e:	429a      	cmp	r2, r3
 8013770:	db3c      	blt.n	80137ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013772:	8970      	ldrh	r0, [r6, #10]
 8013774:	4403      	add	r3, r0
 8013776:	b21b      	sxth	r3, r3
 8013778:	429a      	cmp	r2, r3
 801377a:	da37      	bge.n	80137ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801377c:	2300      	movs	r3, #0
 801377e:	4630      	mov	r0, r6
 8013780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013782:	ab0b      	add	r3, sp, #44	@ 0x2c
 8013784:	f7ff ff36 	bl	80135f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013788:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801378a:	b37a      	cbz	r2, 80137ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801378c:	4552      	cmp	r2, sl
 801378e:	d02d      	beq.n	80137ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013790:	4611      	mov	r1, r2
 8013792:	a80e      	add	r0, sp, #56	@ 0x38
 8013794:	9209      	str	r2, [sp, #36]	@ 0x24
 8013796:	f008 fe09 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801379a:	f04f 0e02 	mov.w	lr, #2
 801379e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80137a2:	9a06      	ldr	r2, [sp, #24]
 80137a4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80137a8:	9b01      	ldr	r3, [sp, #4]
 80137aa:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80137ae:	4413      	add	r3, r2
 80137b0:	9a07      	ldr	r2, [sp, #28]
 80137b2:	fb91 f1fe 	sdiv	r1, r1, lr
 80137b6:	fb9c fcfe 	sdiv	ip, ip, lr
 80137ba:	4401      	add	r1, r0
 80137bc:	1a58      	subs	r0, r3, r1
 80137be:	9b02      	ldr	r3, [sp, #8]
 80137c0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80137c4:	4413      	add	r3, r2
 80137c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137c8:	448c      	add	ip, r1
 80137ca:	eba3 030c 	sub.w	r3, r3, ip
 80137ce:	435b      	muls	r3, r3
 80137d0:	fb00 3300 	mla	r3, r0, r0, r3
 80137d4:	42ab      	cmp	r3, r5
 80137d6:	d208      	bcs.n	80137ea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80137d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80137da:	461d      	mov	r5, r3
 80137dc:	9803      	ldr	r0, [sp, #12]
 80137de:	6001      	str	r1, [r0, #0]
 80137e0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80137e2:	9805      	ldr	r0, [sp, #20]
 80137e4:	8008      	strh	r0, [r1, #0]
 80137e6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80137e8:	800f      	strh	r7, [r1, #0]
 80137ea:	4692      	mov	sl, r2
 80137ec:	f10b 0b01 	add.w	fp, fp, #1
 80137f0:	3408      	adds	r4, #8
 80137f2:	f1bb 0f04 	cmp.w	fp, #4
 80137f6:	d19d      	bne.n	8013734 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80137f8:	9b00      	ldr	r3, [sp, #0]
 80137fa:	9c08      	ldr	r4, [sp, #32]
 80137fc:	444b      	add	r3, r9
 80137fe:	4544      	cmp	r4, r8
 8013800:	9300      	str	r3, [sp, #0]
 8013802:	d188      	bne.n	8013716 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8013804:	b021      	add	sp, #132	@ 0x84
 8013806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380a:	f04f 35ff 	mov.w	r5, #4294967295
 801380e:	e767      	b.n	80136e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013810:	24028770 	.word	0x24028770
 8013814:	0802cc48 	.word	0x0802cc48

08013818 <_ZN8touchgfx4RectaNERKS0_>:
 8013818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801381c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013820:	888c      	ldrh	r4, [r1, #4]
 8013822:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013826:	443c      	add	r4, r7
 8013828:	b2a4      	uxth	r4, r4
 801382a:	fa0f f884 	sxth.w	r8, r4
 801382e:	45c1      	cmp	r9, r8
 8013830:	da2f      	bge.n	8013892 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013832:	8882      	ldrh	r2, [r0, #4]
 8013834:	444a      	add	r2, r9
 8013836:	b292      	uxth	r2, r2
 8013838:	fa0f fe82 	sxth.w	lr, r2
 801383c:	4577      	cmp	r7, lr
 801383e:	da28      	bge.n	8013892 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013840:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013844:	88cb      	ldrh	r3, [r1, #6]
 8013846:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801384a:	442b      	add	r3, r5
 801384c:	b21b      	sxth	r3, r3
 801384e:	429e      	cmp	r6, r3
 8013850:	da1f      	bge.n	8013892 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013852:	88c3      	ldrh	r3, [r0, #6]
 8013854:	4433      	add	r3, r6
 8013856:	b29b      	uxth	r3, r3
 8013858:	fa0f fc83 	sxth.w	ip, r3
 801385c:	4565      	cmp	r5, ip
 801385e:	da18      	bge.n	8013892 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013860:	454f      	cmp	r7, r9
 8013862:	bfb8      	it	lt
 8013864:	464f      	movlt	r7, r9
 8013866:	42b5      	cmp	r5, r6
 8013868:	bfb8      	it	lt
 801386a:	4635      	movlt	r5, r6
 801386c:	45f0      	cmp	r8, lr
 801386e:	bfd8      	it	le
 8013870:	4622      	movle	r2, r4
 8013872:	1bd2      	subs	r2, r2, r7
 8013874:	8082      	strh	r2, [r0, #4]
 8013876:	884a      	ldrh	r2, [r1, #2]
 8013878:	88c9      	ldrh	r1, [r1, #6]
 801387a:	8007      	strh	r7, [r0, #0]
 801387c:	440a      	add	r2, r1
 801387e:	8045      	strh	r5, [r0, #2]
 8013880:	b292      	uxth	r2, r2
 8013882:	b211      	sxth	r1, r2
 8013884:	458c      	cmp	ip, r1
 8013886:	bfa8      	it	ge
 8013888:	4613      	movge	r3, r2
 801388a:	1b5b      	subs	r3, r3, r5
 801388c:	80c3      	strh	r3, [r0, #6]
 801388e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013892:	2300      	movs	r3, #0
 8013894:	8003      	strh	r3, [r0, #0]
 8013896:	8043      	strh	r3, [r0, #2]
 8013898:	8083      	strh	r3, [r0, #4]
 801389a:	80c3      	strh	r3, [r0, #6]
 801389c:	e7f7      	b.n	801388e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801389e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801389e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	dd06      	ble.n	80138b4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80138a6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80138aa:	2800      	cmp	r0, #0
 80138ac:	bfcc      	ite	gt
 80138ae:	2000      	movgt	r0, #0
 80138b0:	2001      	movle	r0, #1
 80138b2:	4770      	bx	lr
 80138b4:	2001      	movs	r0, #1
 80138b6:	4770      	bx	lr

080138b8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80138b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138bc:	2300      	movs	r3, #0
 80138be:	4604      	mov	r4, r0
 80138c0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80138c2:	8003      	strh	r3, [r0, #0]
 80138c4:	8043      	strh	r3, [r0, #2]
 80138c6:	8083      	strh	r3, [r0, #4]
 80138c8:	80c3      	strh	r3, [r0, #6]
 80138ca:	2d00      	cmp	r5, #0
 80138cc:	d040      	beq.n	8013950 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80138ce:	1d28      	adds	r0, r5, #4
 80138d0:	f7ff ffe5 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 80138d4:	b988      	cbnz	r0, 80138fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80138d6:	4620      	mov	r0, r4
 80138d8:	f7ff ffe1 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 80138dc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80138e0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80138e4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80138e8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80138ec:	b138      	cbz	r0, 80138fe <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80138ee:	8022      	strh	r2, [r4, #0]
 80138f0:	8063      	strh	r3, [r4, #2]
 80138f2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80138f6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80138fa:	69ad      	ldr	r5, [r5, #24]
 80138fc:	e7e5      	b.n	80138ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80138fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013902:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013906:	4290      	cmp	r0, r2
 8013908:	4607      	mov	r7, r0
 801390a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801390e:	460e      	mov	r6, r1
 8013910:	bfa8      	it	ge
 8013912:	4617      	movge	r7, r2
 8013914:	4299      	cmp	r1, r3
 8013916:	4472      	add	r2, lr
 8013918:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801391c:	bfa8      	it	ge
 801391e:	461e      	movge	r6, r3
 8013920:	4440      	add	r0, r8
 8013922:	4471      	add	r1, lr
 8013924:	4463      	add	r3, ip
 8013926:	b200      	sxth	r0, r0
 8013928:	8027      	strh	r7, [r4, #0]
 801392a:	b212      	sxth	r2, r2
 801392c:	8066      	strh	r6, [r4, #2]
 801392e:	b209      	sxth	r1, r1
 8013930:	b21b      	sxth	r3, r3
 8013932:	4290      	cmp	r0, r2
 8013934:	bfac      	ite	ge
 8013936:	ebc7 0200 	rsbge	r2, r7, r0
 801393a:	ebc7 0202 	rsblt	r2, r7, r2
 801393e:	4299      	cmp	r1, r3
 8013940:	bfac      	ite	ge
 8013942:	ebc6 0301 	rsbge	r3, r6, r1
 8013946:	ebc6 0303 	rsblt	r3, r6, r3
 801394a:	80a2      	strh	r2, [r4, #4]
 801394c:	80e3      	strh	r3, [r4, #6]
 801394e:	e7d4      	b.n	80138fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013950:	4620      	mov	r0, r4
 8013952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013956 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013956:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801395a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801395e:	b383      	cbz	r3, 80139c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013960:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013962:	b374      	cbz	r4, 80139c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013964:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013968:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801396c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013970:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013974:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013978:	b303      	cbz	r3, 80139bc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801397a:	4668      	mov	r0, sp
 801397c:	1d21      	adds	r1, r4, #4
 801397e:	f8ad 5000 	strh.w	r5, [sp]
 8013982:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013986:	f8ad 7004 	strh.w	r7, [sp, #4]
 801398a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801398e:	f7ff ff43 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 8013992:	4668      	mov	r0, sp
 8013994:	f7ff ff83 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013998:	b980      	cbnz	r0, 80139bc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801399a:	f8bd 3000 	ldrh.w	r3, [sp]
 801399e:	4669      	mov	r1, sp
 80139a0:	88a2      	ldrh	r2, [r4, #4]
 80139a2:	4620      	mov	r0, r4
 80139a4:	1a9b      	subs	r3, r3, r2
 80139a6:	88e2      	ldrh	r2, [r4, #6]
 80139a8:	f8ad 3000 	strh.w	r3, [sp]
 80139ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80139b0:	1a9b      	subs	r3, r3, r2
 80139b2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80139b6:	6823      	ldr	r3, [r4, #0]
 80139b8:	689b      	ldr	r3, [r3, #8]
 80139ba:	4798      	blx	r3
 80139bc:	69a4      	ldr	r4, [r4, #24]
 80139be:	2c00      	cmp	r4, #0
 80139c0:	d1d8      	bne.n	8013974 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80139c2:	b002      	add	sp, #8
 80139c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080139c8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80139c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80139ca:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80139ce:	460d      	mov	r5, r1
 80139d0:	4616      	mov	r6, r2
 80139d2:	b323      	cbz	r3, 8013a1e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80139d4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80139d6:	b314      	cbz	r4, 8013a1e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80139d8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80139dc:	b1eb      	cbz	r3, 8013a1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80139de:	6828      	ldr	r0, [r5, #0]
 80139e0:	466b      	mov	r3, sp
 80139e2:	6869      	ldr	r1, [r5, #4]
 80139e4:	c303      	stmia	r3!, {r0, r1}
 80139e6:	4668      	mov	r0, sp
 80139e8:	1d21      	adds	r1, r4, #4
 80139ea:	f7ff ff15 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 80139ee:	4668      	mov	r0, sp
 80139f0:	f7ff ff55 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 80139f4:	b988      	cbnz	r0, 8013a1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80139f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80139fa:	4669      	mov	r1, sp
 80139fc:	88a2      	ldrh	r2, [r4, #4]
 80139fe:	4620      	mov	r0, r4
 8013a00:	1a9b      	subs	r3, r3, r2
 8013a02:	88e2      	ldrh	r2, [r4, #6]
 8013a04:	f8ad 3000 	strh.w	r3, [sp]
 8013a08:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013a0c:	1a9b      	subs	r3, r3, r2
 8013a0e:	4632      	mov	r2, r6
 8013a10:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013a14:	6823      	ldr	r3, [r4, #0]
 8013a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013a18:	4798      	blx	r3
 8013a1a:	69a4      	ldr	r4, [r4, #24]
 8013a1c:	e7db      	b.n	80139d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013a1e:	b002      	add	sp, #8
 8013a20:	bd70      	pop	{r4, r5, r6, pc}

08013a22 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013a22:	2000      	movs	r0, #0
 8013a24:	4770      	bx	lr

08013a26 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013a26:	2001      	movs	r0, #1
 8013a28:	4770      	bx	lr

08013a2a <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 8013a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a2c:	6803      	ldr	r3, [r0, #0]
 8013a2e:	4604      	mov	r4, r0
 8013a30:	460e      	mov	r6, r1
 8013a32:	4601      	mov	r1, r0
 8013a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013a38:	4668      	mov	r0, sp
 8013a3a:	4615      	mov	r5, r2
 8013a3c:	4798      	blx	r3
 8013a3e:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8013a42:	b13b      	cbz	r3, 8013a54 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 8013a44:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013a48:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	bfac      	ite	ge
 8013a50:	2300      	movge	r3, #0
 8013a52:	2301      	movlt	r3, #1
 8013a54:	7033      	strb	r3, [r6, #0]
 8013a56:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8013a5a:	b13b      	cbz	r3, 8013a6c <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 8013a5c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013a60:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013a64:	4293      	cmp	r3, r2
 8013a66:	bfac      	ite	ge
 8013a68:	2300      	movge	r3, #0
 8013a6a:	2301      	movlt	r3, #1
 8013a6c:	702b      	strb	r3, [r5, #0]
 8013a6e:	b002      	add	sp, #8
 8013a70:	bd70      	pop	{r4, r5, r6, pc}

08013a72 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 8013a72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a76:	4604      	mov	r4, r0
 8013a78:	460f      	mov	r7, r1
 8013a7a:	4616      	mov	r6, r2
 8013a7c:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 8013a7e:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 8013a82:	f100 0964 	add.w	r9, r0, #100	@ 0x64
 8013a86:	b15d      	cbz	r5, 8013aa0 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 8013a88:	4545      	cmp	r5, r8
 8013a8a:	d007      	beq.n	8013a9c <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8013a8c:	454d      	cmp	r5, r9
 8013a8e:	d005      	beq.n	8013a9c <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8013a90:	682b      	ldr	r3, [r5, #0]
 8013a92:	4632      	mov	r2, r6
 8013a94:	4639      	mov	r1, r7
 8013a96:	4628      	mov	r0, r5
 8013a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a9a:	4798      	blx	r3
 8013a9c:	69ad      	ldr	r5, [r5, #24]
 8013a9e:	e7f2      	b.n	8013a86 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 8013aa0:	f8b4 3098 	ldrh.w	r3, [r4, #152]	@ 0x98
 8013aa4:	441f      	add	r7, r3
 8013aa6:	f8b4 309a 	ldrh.w	r3, [r4, #154]	@ 0x9a
 8013aaa:	441e      	add	r6, r3
 8013aac:	f8a4 7098 	strh.w	r7, [r4, #152]	@ 0x98
 8013ab0:	f8a4 609a 	strh.w	r6, [r4, #154]	@ 0x9a
 8013ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013ab8 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 8013ab8:	4770      	bx	lr

08013aba <_ZN8touchgfx9DragEventD1Ev>:
 8013aba:	4770      	bx	lr

08013abc <_ZN8touchgfx10ClickEventD1Ev>:
 8013abc:	4770      	bx	lr

08013abe <_ZN8touchgfx10ClickEventD0Ev>:
 8013abe:	b510      	push	{r4, lr}
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	210c      	movs	r1, #12
 8013ac4:	f015 ff58 	bl	8029978 <_ZdlPvj>
 8013ac8:	4620      	mov	r0, r4
 8013aca:	bd10      	pop	{r4, pc}

08013acc <_ZN8touchgfx9DragEventD0Ev>:
 8013acc:	b510      	push	{r4, lr}
 8013ace:	4604      	mov	r4, r0
 8013ad0:	2110      	movs	r1, #16
 8013ad2:	f015 ff51 	bl	8029978 <_ZdlPvj>
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	bd10      	pop	{r4, pc}

08013ada <_ZN8touchgfx19ScrollableContainerD0Ev>:
 8013ada:	b510      	push	{r4, lr}
 8013adc:	4604      	mov	r4, r0
 8013ade:	21bc      	movs	r1, #188	@ 0xbc
 8013ae0:	f015 ff4a 	bl	8029978 <_ZdlPvj>
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	bd10      	pop	{r4, pc}

08013ae8 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8013ae8:	b570      	push	{r4, r5, r6, lr}
 8013aea:	b086      	sub	sp, #24
 8013aec:	2300      	movs	r3, #0
 8013aee:	460c      	mov	r4, r1
 8013af0:	4605      	mov	r5, r0
 8013af2:	aa06      	add	r2, sp, #24
 8013af4:	f88d 3002 	strb.w	r3, [sp, #2]
 8013af8:	f10d 0102 	add.w	r1, sp, #2
 8013afc:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8013b00:	6803      	ldr	r3, [r0, #0]
 8013b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013b06:	4798      	blx	r3
 8013b08:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013b0c:	b10b      	cbz	r3, 8013b12 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 8013b0e:	7923      	ldrb	r3, [r4, #4]
 8013b10:	b133      	cbz	r3, 8013b20 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 8013b12:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d068      	beq.n	8013bec <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8013b1a:	7923      	ldrb	r3, [r4, #4]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d165      	bne.n	8013bec <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8013b20:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013b24:	2a00      	cmp	r2, #0
 8013b26:	bfb8      	it	lt
 8013b28:	4252      	neglt	r2, r2
 8013b2a:	b213      	sxth	r3, r2
 8013b2c:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	@ 0x9c
 8013b30:	429a      	cmp	r2, r3
 8013b32:	dc5b      	bgt.n	8013bec <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8013b34:	8eaa      	ldrh	r2, [r5, #52]	@ 0x34
 8013b36:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	@ 0xb8
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	bfa8      	it	ge
 8013b3e:	461a      	movge	r2, r3
 8013b40:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	@ 0xba
 8013b44:	b212      	sxth	r2, r2
 8013b46:	2a05      	cmp	r2, #5
 8013b48:	bfb8      	it	lt
 8013b4a:	2205      	movlt	r2, #5
 8013b4c:	4351      	muls	r1, r2
 8013b4e:	3a04      	subs	r2, #4
 8013b50:	fb91 f1f3 	sdiv	r1, r1, r3
 8013b54:	f8a5 10a8 	strh.w	r1, [r5, #168]	@ 0xa8
 8013b58:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8013b5c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013b60:	b289      	uxth	r1, r1
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013b68:	bfcc      	ite	gt
 8013b6a:	2001      	movgt	r0, #1
 8013b6c:	4618      	movle	r0, r3
 8013b6e:	00d3      	lsls	r3, r2, #3
 8013b70:	fb13 f300 	smulbb	r3, r3, r0
 8013b74:	b21b      	sxth	r3, r3
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f8a5 30ac 	strh.w	r3, [r5, #172]	@ 0xac
 8013b7c:	bfb8      	it	lt
 8013b7e:	425b      	neglt	r3, r3
 8013b80:	b21b      	sxth	r3, r3
 8013b82:	428b      	cmp	r3, r1
 8013b84:	bfa8      	it	ge
 8013b86:	460b      	movge	r3, r1
 8013b88:	4629      	mov	r1, r5
 8013b8a:	f8a5 30a8 	strh.w	r3, [r5, #168]	@ 0xa8
 8013b8e:	7922      	ldrb	r2, [r4, #4]
 8013b90:	682b      	ldr	r3, [r5, #0]
 8013b92:	2a01      	cmp	r2, #1
 8013b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b98:	d12a      	bne.n	8013bf0 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x108>
 8013b9a:	a801      	add	r0, sp, #4
 8013b9c:	4798      	blx	r3
 8013b9e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013ba2:	2601      	movs	r6, #1
 8013ba4:	f8a5 30aa 	strh.w	r3, [r5, #170]	@ 0xaa
 8013ba8:	f885 60b0 	strb.w	r6, [r5, #176]	@ 0xb0
 8013bac:	f007 faa0 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 8013bb0:	4629      	mov	r1, r5
 8013bb2:	3004      	adds	r0, #4
 8013bb4:	f007 fb6a 	bl	801b28c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8013bb8:	7923      	ldrb	r3, [r4, #4]
 8013bba:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 8013bbe:	f885 3036 	strb.w	r3, [r5, #54]	@ 0x36
 8013bc2:	b198      	cbz	r0, 8013bec <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8013bc4:	f895 30b6 	ldrb.w	r3, [r5, #182]	@ 0xb6
 8013bc8:	b983      	cbnz	r3, 8013bec <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8013bca:	4a0c      	ldr	r2, [pc, #48]	@ (8013bfc <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x114>)
 8013bcc:	a903      	add	r1, sp, #12
 8013bce:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013bd2:	9203      	str	r2, [sp, #12]
 8013bd4:	2202      	movs	r2, #2
 8013bd6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013bda:	f88d 2010 	strb.w	r2, [sp, #16]
 8013bde:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013be2:	6803      	ldr	r3, [r0, #0]
 8013be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013be6:	4798      	blx	r3
 8013be8:	f885 60b6 	strb.w	r6, [r5, #182]	@ 0xb6
 8013bec:	b006      	add	sp, #24
 8013bee:	bd70      	pop	{r4, r5, r6, pc}
 8013bf0:	a803      	add	r0, sp, #12
 8013bf2:	4798      	blx	r3
 8013bf4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013bf8:	e7d3      	b.n	8013ba2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8013bfa:	bf00      	nop
 8013bfc:	08030280 	.word	0x08030280

08013c00 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8013c00:	b470      	push	{r4, r5, r6}
 8013c02:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
 8013c06:	461d      	mov	r5, r3
 8013c08:	b11e      	cbz	r6, 8013c12 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8013c0a:	f890 6024 	ldrb.w	r6, [r0, #36]	@ 0x24
 8013c0e:	b116      	cbz	r6, 8013c16 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8013c10:	6028      	str	r0, [r5, #0]
 8013c12:	bc70      	pop	{r4, r5, r6}
 8013c14:	4770      	bx	lr
 8013c16:	bc70      	pop	{r4, r5, r6}
 8013c18:	f7ff bcec 	b.w	80135f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

08013c1c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8013c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c1e:	f890 30b0 	ldrb.w	r3, [r0, #176]	@ 0xb0
 8013c22:	4604      	mov	r4, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d049      	beq.n	8013cbc <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 8013c28:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	@ 0xae
 8013c2c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8013c30:	3001      	adds	r0, #1
 8013c32:	b280      	uxth	r0, r0
 8013c34:	4298      	cmp	r0, r3
 8013c36:	f8a4 00ae 	strh.w	r0, [r4, #174]	@ 0xae
 8013c3a:	d843      	bhi.n	8013cc4 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa8>
 8013c3c:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8013c40:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8013c44:	f009 fb70 	bl	801d328 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013c48:	4605      	mov	r5, r0
 8013c4a:	b282      	uxth	r2, r0
 8013c4c:	f012 0301 	ands.w	r3, r2, #1
 8013c50:	d006      	beq.n	8013c60 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8013c52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013c56:	2800      	cmp	r0, #0
 8013c58:	bfd8      	it	le
 8013c5a:	460b      	movle	r3, r1
 8013c5c:	18d5      	adds	r5, r2, r3
 8013c5e:	b22d      	sxth	r5, r5
 8013c60:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d02b      	beq.n	8013cc0 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa4>
 8013c68:	6823      	ldr	r3, [r4, #0]
 8013c6a:	4621      	mov	r1, r4
 8013c6c:	4668      	mov	r0, sp
 8013c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c72:	4798      	blx	r3
 8013c74:	f8bd 6000 	ldrh.w	r6, [sp]
 8013c78:	1bae      	subs	r6, r5, r6
 8013c7a:	b236      	sxth	r6, r6
 8013c7c:	f894 2036 	ldrb.w	r2, [r4, #54]	@ 0x36
 8013c80:	b14a      	cbz	r2, 8013c96 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 8013c82:	6823      	ldr	r3, [r4, #0]
 8013c84:	4621      	mov	r1, r4
 8013c86:	4668      	mov	r0, sp
 8013c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c8c:	4798      	blx	r3
 8013c8e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013c92:	1aad      	subs	r5, r5, r2
 8013c94:	b22a      	sxth	r2, r5
 8013c96:	6823      	ldr	r3, [r4, #0]
 8013c98:	4631      	mov	r1, r6
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ca0:	4798      	blx	r3
 8013ca2:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0
 8013ca6:	f894 50b0 	ldrb.w	r5, [r4, #176]	@ 0xb0
 8013caa:	b93d      	cbnz	r5, 8013cbc <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 8013cac:	f007 fa20 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	3004      	adds	r0, #4
 8013cb4:	f007 fa41 	bl	801b13a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013cb8:	f8a4 50ae 	strh.w	r5, [r4, #174]	@ 0xae
 8013cbc:	b002      	add	sp, #8
 8013cbe:	bd70      	pop	{r4, r5, r6, pc}
 8013cc0:	2600      	movs	r6, #0
 8013cc2:	e7db      	b.n	8013c7c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
 8013cca:	e7ec      	b.n	8013ca6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

08013ccc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8013ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd0:	b08b      	sub	sp, #44	@ 0x2c
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013cda:	aa0a      	add	r2, sp, #40	@ 0x28
 8013cdc:	f88d 3006 	strb.w	r3, [sp, #6]
 8013ce0:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8013ce4:	460f      	mov	r7, r1
 8013ce6:	f802 3d21 	strb.w	r3, [r2, #-33]!
 8013cea:	6803      	ldr	r3, [r0, #0]
 8013cec:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8013cf0:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8013cf4:	f10d 0106 	add.w	r1, sp, #6
 8013cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013cfc:	4798      	blx	r3
 8013cfe:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8013d02:	2900      	cmp	r1, #0
 8013d04:	d03d      	beq.n	8013d82 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013d06:	42a1      	cmp	r1, r4
 8013d08:	d03b      	beq.n	8013d82 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013d0a:	a802      	add	r0, sp, #8
 8013d0c:	f008 fb4e 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d10:	4621      	mov	r1, r4
 8013d12:	a804      	add	r0, sp, #16
 8013d14:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8013d18:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8013d1c:	f008 fb46 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d20:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013d24:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 8013d28:	eba3 030b 	sub.w	r3, r3, fp
 8013d2c:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8013d30:	88f9      	ldrh	r1, [r7, #6]
 8013d32:	4413      	add	r3, r2
 8013d34:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013d38:	f89d c006 	ldrb.w	ip, [sp, #6]
 8013d3c:	eba2 020a 	sub.w	r2, r2, sl
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	4402      	add	r2, r0
 8013d44:	8938      	ldrh	r0, [r7, #8]
 8013d46:	4419      	add	r1, r3
 8013d48:	b292      	uxth	r2, r2
 8013d4a:	b209      	sxth	r1, r1
 8013d4c:	4410      	add	r0, r2
 8013d4e:	b200      	sxth	r0, r0
 8013d50:	f1bc 0f00 	cmp.w	ip, #0
 8013d54:	f040 808d 	bne.w	8013e72 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 8013d58:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 8013d5c:	4473      	add	r3, lr
 8013d5e:	b21b      	sxth	r3, r3
 8013d60:	f89d e007 	ldrb.w	lr, [sp, #7]
 8013d64:	f1be 0f00 	cmp.w	lr, #0
 8013d68:	f040 80b1 	bne.w	8013ece <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 8013d6c:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 8013d70:	4472      	add	r2, lr
 8013d72:	b212      	sxth	r2, r2
 8013d74:	f1bc 0f00 	cmp.w	ip, #0
 8013d78:	f000 80c8 	beq.w	8013f0c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 8013d7c:	4290      	cmp	r0, r2
 8013d7e:	f040 80ae 	bne.w	8013ede <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8013d82:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 8013d86:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	f040 8099 	bne.w	8013ec2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 8013d90:	897d      	ldrh	r5, [r7, #10]
 8013d92:	89be      	ldrh	r6, [r7, #12]
 8013d94:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 8013d98:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	@ 0xb4
 8013d9c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	@ 0x9e
 8013da0:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	@ 0xa0
 8013da4:	4411      	add	r1, r2
 8013da6:	442a      	add	r2, r5
 8013da8:	449c      	add	ip, r3
 8013daa:	4433      	add	r3, r6
 8013dac:	b292      	uxth	r2, r2
 8013dae:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	b289      	uxth	r1, r1
 8013db6:	fa1f fc8c 	uxth.w	ip, ip
 8013dba:	b215      	sxth	r5, r2
 8013dbc:	b21e      	sxth	r6, r3
 8013dbe:	b15f      	cbz	r7, 8013dd8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 8013dc0:	1a52      	subs	r2, r2, r1
 8013dc2:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	@ 0x9c
 8013dc6:	b212      	sxth	r2, r2
 8013dc8:	2a00      	cmp	r2, #0
 8013dca:	bfb8      	it	lt
 8013dcc:	4252      	neglt	r2, r2
 8013dce:	b212      	sxth	r2, r2
 8013dd0:	4297      	cmp	r7, r2
 8013dd2:	bfac      	ite	ge
 8013dd4:	2700      	movge	r7, #0
 8013dd6:	2701      	movlt	r7, #1
 8013dd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013ddc:	b152      	cbz	r2, 8013df4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 8013dde:	eba3 030c 	sub.w	r3, r3, ip
 8013de2:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	@ 0x9c
 8013de6:	b21b      	sxth	r3, r3
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	bfb8      	it	lt
 8013dec:	425b      	neglt	r3, r3
 8013dee:	b21b      	sxth	r3, r3
 8013df0:	429a      	cmp	r2, r3
 8013df2:	db01      	blt.n	8013df8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8013df4:	2f00      	cmp	r7, #0
 8013df6:	d03e      	beq.n	8013e76 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8013df8:	2701      	movs	r7, #1
 8013dfa:	fa0f f881 	sxth.w	r8, r1
 8013dfe:	fa0f f98c 	sxth.w	r9, ip
 8013e02:	f884 70a3 	strb.w	r7, [r4, #163]	@ 0xa3
 8013e06:	b1a0      	cbz	r0, 8013e32 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8013e08:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8013e0c:	b98b      	cbnz	r3, 8013e32 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8013e0e:	4a41      	ldr	r2, [pc, #260]	@ (8013f14 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8013e10:	a906      	add	r1, sp, #24
 8013e12:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013e16:	9206      	str	r2, [sp, #24]
 8013e18:	2202      	movs	r2, #2
 8013e1a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013e1e:	f88d 201c 	strb.w	r2, [sp, #28]
 8013e22:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013e26:	6803      	ldr	r3, [r0, #0]
 8013e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e2a:	4798      	blx	r3
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 8013e32:	f894 10a4 	ldrb.w	r1, [r4, #164]	@ 0xa4
 8013e36:	b149      	cbz	r1, 8013e4c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013e38:	eba5 0108 	sub.w	r1, r5, r8
 8013e3c:	b209      	sxth	r1, r1
 8013e3e:	b12f      	cbz	r7, 8013e4c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013e40:	2900      	cmp	r1, #0
 8013e42:	dc40      	bgt.n	8013ec6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 8013e44:	bf14      	ite	ne
 8013e46:	f04f 31ff 	movne.w	r1, #4294967295
 8013e4a:	2100      	moveq	r1, #0
 8013e4c:	f894 20a5 	ldrb.w	r2, [r4, #165]	@ 0xa5
 8013e50:	b14a      	cbz	r2, 8013e66 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013e52:	eba6 0609 	sub.w	r6, r6, r9
 8013e56:	b232      	sxth	r2, r6
 8013e58:	b12f      	cbz	r7, 8013e66 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013e5a:	2a00      	cmp	r2, #0
 8013e5c:	dc35      	bgt.n	8013eca <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 8013e5e:	bf14      	ite	ne
 8013e60:	f04f 32ff 	movne.w	r2, #4294967295
 8013e64:	2200      	moveq	r2, #0
 8013e66:	6823      	ldr	r3, [r4, #0]
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013e6e:	4798      	blx	r3
 8013e70:	e024      	b.n	8013ebc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013e72:	460b      	mov	r3, r1
 8013e74:	e774      	b.n	8013d60 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 8013e76:	b308      	cbz	r0, 8013ebc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013e78:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8013e7c:	b9f3      	cbnz	r3, 8013ebc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013e7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013e80:	4620      	mov	r0, r4
 8013e82:	4632      	mov	r2, r6
 8013e84:	4629      	mov	r1, r5
 8013e86:	f843 7d18 	str.w	r7, [r3, #-24]!
 8013e8a:	f7ff fbb3 	bl	80135f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013e8e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8013e92:	9b04      	ldr	r3, [sp, #16]
 8013e94:	4298      	cmp	r0, r3
 8013e96:	d011      	beq.n	8013ebc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013e98:	4b1e      	ldr	r3, [pc, #120]	@ (8013f14 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8013e9a:	a906      	add	r1, sp, #24
 8013e9c:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013ea0:	9306      	str	r3, [sp, #24]
 8013ea2:	2302      	movs	r3, #2
 8013ea4:	f8ad 7020 	strh.w	r7, [sp, #32]
 8013ea8:	f88d 301c 	strb.w	r3, [sp, #28]
 8013eac:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8013eb0:	6803      	ldr	r3, [r0, #0]
 8013eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013eb4:	4798      	blx	r3
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 8013ebc:	b00b      	add	sp, #44	@ 0x2c
 8013ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec2:	2700      	movs	r7, #0
 8013ec4:	e79f      	b.n	8013e06 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 8013ec6:	2101      	movs	r1, #1
 8013ec8:	e7c0      	b.n	8013e4c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013eca:	2201      	movs	r2, #1
 8013ecc:	e7cb      	b.n	8013e66 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013ece:	f1bc 0f00 	cmp.w	ip, #0
 8013ed2:	f47f af56 	bne.w	8013d82 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013ed6:	428b      	cmp	r3, r1
 8013ed8:	f43f af53 	beq.w	8013d82 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013edc:	4602      	mov	r2, r0
 8013ede:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8013f18 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 8013ee2:	f8ad 0020 	strh.w	r0, [sp, #32]
 8013ee6:	f8cd c018 	str.w	ip, [sp, #24]
 8013eea:	f04f 0c00 	mov.w	ip, #0
 8013eee:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8013ef2:	f8ad 101e 	strh.w	r1, [sp, #30]
 8013ef6:	a906      	add	r1, sp, #24
 8013ef8:	f88d c01c 	strb.w	ip, [sp, #28]
 8013efc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013f00:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 8013f04:	6803      	ldr	r3, [r0, #0]
 8013f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013f08:	4798      	blx	r3
 8013f0a:	e73a      	b.n	8013d82 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013f0c:	428b      	cmp	r3, r1
 8013f0e:	f43f af35 	beq.w	8013d7c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 8013f12:	e7e4      	b.n	8013ede <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8013f14:	08030280 	.word	0x08030280
 8013f18:	08030294 	.word	0x08030294

08013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f1e:	4604      	mov	r4, r0
 8013f20:	4608      	mov	r0, r1
 8013f22:	460d      	mov	r5, r1
 8013f24:	f7ff fcbb 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f28:	b978      	cbnz	r0, 8013f4a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	f7ff fcb7 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f30:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013f34:	b150      	cbz	r0, 8013f4c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013f36:	8026      	strh	r6, [r4, #0]
 8013f38:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013f3c:	8063      	strh	r3, [r4, #2]
 8013f3e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013f42:	80a3      	strh	r3, [r4, #4]
 8013f44:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013f48:	80e3      	strh	r3, [r4, #6]
 8013f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f4c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013f50:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013f54:	42b1      	cmp	r1, r6
 8013f56:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013f5a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013f5e:	460f      	mov	r7, r1
 8013f60:	88ed      	ldrh	r5, [r5, #6]
 8013f62:	bfa8      	it	ge
 8013f64:	4637      	movge	r7, r6
 8013f66:	4293      	cmp	r3, r2
 8013f68:	4618      	mov	r0, r3
 8013f6a:	4466      	add	r6, ip
 8013f6c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013f70:	bfa8      	it	ge
 8013f72:	4610      	movge	r0, r2
 8013f74:	442a      	add	r2, r5
 8013f76:	88e5      	ldrh	r5, [r4, #6]
 8013f78:	4461      	add	r1, ip
 8013f7a:	b236      	sxth	r6, r6
 8013f7c:	8027      	strh	r7, [r4, #0]
 8013f7e:	442b      	add	r3, r5
 8013f80:	b209      	sxth	r1, r1
 8013f82:	b212      	sxth	r2, r2
 8013f84:	8060      	strh	r0, [r4, #2]
 8013f86:	b21b      	sxth	r3, r3
 8013f88:	428e      	cmp	r6, r1
 8013f8a:	bfac      	ite	ge
 8013f8c:	ebc7 0106 	rsbge	r1, r7, r6
 8013f90:	ebc7 0101 	rsblt	r1, r7, r1
 8013f94:	429a      	cmp	r2, r3
 8013f96:	bfac      	ite	ge
 8013f98:	ebc0 0202 	rsbge	r2, r0, r2
 8013f9c:	ebc0 0203 	rsblt	r2, r0, r3
 8013fa0:	80a1      	strh	r1, [r4, #4]
 8013fa2:	80e2      	strh	r2, [r4, #6]
 8013fa4:	e7d1      	b.n	8013f4a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08013fa6 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8013fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fa8:	4604      	mov	r4, r0
 8013faa:	2200      	movs	r2, #0
 8013fac:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8013fb0:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8013fb4:	680b      	ldr	r3, [r1, #0]
 8013fb6:	8022      	strh	r2, [r4, #0]
 8013fb8:	8062      	strh	r2, [r4, #2]
 8013fba:	80e0      	strh	r0, [r4, #6]
 8013fbc:	4668      	mov	r0, sp
 8013fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013fc2:	80a5      	strh	r5, [r4, #4]
 8013fc4:	4798      	blx	r3
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	4669      	mov	r1, sp
 8013fca:	f7ff ffa7 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013fce:	4620      	mov	r0, r4
 8013fd0:	b003      	add	sp, #12
 8013fd2:	bd30      	pop	{r4, r5, pc}

08013fd4 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8013fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	4605      	mov	r5, r0
 8013fda:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8013fdc:	f101 0738 	add.w	r7, r1, #56	@ 0x38
 8013fe0:	f101 0664 	add.w	r6, r1, #100	@ 0x64
 8013fe4:	8003      	strh	r3, [r0, #0]
 8013fe6:	8043      	strh	r3, [r0, #2]
 8013fe8:	8083      	strh	r3, [r0, #4]
 8013fea:	80c3      	strh	r3, [r0, #6]
 8013fec:	b164      	cbz	r4, 8014008 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8013fee:	42bc      	cmp	r4, r7
 8013ff0:	d008      	beq.n	8014004 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013ff2:	42b4      	cmp	r4, r6
 8013ff4:	d006      	beq.n	8014004 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013ff6:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013ffa:	b11b      	cbz	r3, 8014004 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013ffc:	1d21      	adds	r1, r4, #4
 8013ffe:	4628      	mov	r0, r5
 8014000:	f7ff ff8c 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014004:	69a4      	ldr	r4, [r4, #24]
 8014006:	e7f1      	b.n	8013fec <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8014008:	4628      	mov	r0, r5
 801400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801400c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 801400c:	b570      	push	{r4, r5, r6, lr}
 801400e:	6803      	ldr	r3, [r0, #0]
 8014010:	4604      	mov	r4, r0
 8014012:	4615      	mov	r5, r2
 8014014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014016:	4798      	blx	r3
 8014018:	6823      	ldr	r3, [r4, #0]
 801401a:	4629      	mov	r1, r5
 801401c:	4620      	mov	r0, r4
 801401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014024:	4718      	bx	r3
	...

08014028 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8014028:	b530      	push	{r4, r5, lr}
 801402a:	2500      	movs	r5, #0
 801402c:	6283      	str	r3, [r0, #40]	@ 0x28
 801402e:	8101      	strh	r1, [r0, #8]
 8014030:	8085      	strh	r5, [r0, #4]
 8014032:	80c5      	strh	r5, [r0, #6]
 8014034:	8185      	strh	r5, [r0, #12]
 8014036:	81c5      	strh	r5, [r0, #14]
 8014038:	8205      	strh	r5, [r0, #16]
 801403a:	8245      	strh	r5, [r0, #18]
 801403c:	61c5      	str	r5, [r0, #28]
 801403e:	8405      	strh	r5, [r0, #32]
 8014040:	8445      	strh	r5, [r0, #34]	@ 0x22
 8014042:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8014046:	8142      	strh	r2, [r0, #10]
 8014048:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801404c:	2501      	movs	r5, #1
 801404e:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 8014052:	4d03      	ldr	r5, [pc, #12]	@ (8014060 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8014054:	6005      	str	r5, [r0, #0]
 8014056:	f89d 500c 	ldrb.w	r5, [sp, #12]
 801405a:	f880 5026 	strb.w	r5, [r0, #38]	@ 0x26
 801405e:	bd30      	pop	{r4, r5, pc}
 8014060:	080308ec 	.word	0x080308ec

08014064 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8014064:	4b2f      	ldr	r3, [pc, #188]	@ (8014124 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8014066:	2278      	movs	r2, #120	@ 0x78
 8014068:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801406a:	6003      	str	r3, [r0, #0]
 801406c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014070:	2500      	movs	r5, #0
 8014072:	2601      	movs	r6, #1
 8014074:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014076:	2111      	movs	r1, #17
 8014078:	f04f 33ff 	mov.w	r3, #4294967295
 801407c:	4604      	mov	r4, r0
 801407e:	8085      	strh	r5, [r0, #4]
 8014080:	80c5      	strh	r5, [r0, #6]
 8014082:	8105      	strh	r5, [r0, #8]
 8014084:	8145      	strh	r5, [r0, #10]
 8014086:	8185      	strh	r5, [r0, #12]
 8014088:	81c5      	strh	r5, [r0, #14]
 801408a:	8205      	strh	r5, [r0, #16]
 801408c:	8245      	strh	r5, [r0, #18]
 801408e:	61c5      	str	r5, [r0, #28]
 8014090:	8405      	strh	r5, [r0, #32]
 8014092:	8445      	strh	r5, [r0, #34]	@ 0x22
 8014094:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8014098:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
 801409c:	6285      	str	r5, [r0, #40]	@ 0x28
 801409e:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 80140a2:	6303      	str	r3, [r0, #48]	@ 0x30
 80140a4:	8681      	strh	r1, [r0, #52]	@ 0x34
 80140a6:	4629      	mov	r1, r5
 80140a8:	f880 5036 	strb.w	r5, [r0, #54]	@ 0x36
 80140ac:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80140b0:	9200      	str	r2, [sp, #0]
 80140b2:	3038      	adds	r0, #56	@ 0x38
 80140b4:	462a      	mov	r2, r5
 80140b6:	f7ff ffb7 	bl	8014028 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 80140ba:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80140be:	462a      	mov	r2, r5
 80140c0:	4629      	mov	r1, r5
 80140c2:	9300      	str	r3, [sp, #0]
 80140c4:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 80140c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80140ca:	f7ff ffad 	bl	8014028 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 80140ce:	2305      	movs	r3, #5
 80140d0:	4620      	mov	r0, r4
 80140d2:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
 80140d6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80140da:	4b13      	ldr	r3, [pc, #76]	@ (8014128 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 80140dc:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 80140e0:	f884 50a2 	strb.w	r5, [r4, #162]	@ 0xa2
 80140e4:	f884 50a3 	strb.w	r5, [r4, #163]	@ 0xa3
 80140e8:	f884 60a4 	strb.w	r6, [r4, #164]	@ 0xa4
 80140ec:	f884 60a5 	strb.w	r6, [r4, #165]	@ 0xa5
 80140f0:	f884 60a6 	strb.w	r6, [r4, #166]	@ 0xa6
 80140f4:	f884 50a7 	strb.w	r5, [r4, #167]	@ 0xa7
 80140f8:	f884 50b0 	strb.w	r5, [r4, #176]	@ 0xb0
 80140fc:	f8a4 50b2 	strh.w	r5, [r4, #178]	@ 0xb2
 8014100:	f8a4 50b4 	strh.w	r5, [r4, #180]	@ 0xb4
 8014104:	f884 50b6 	strb.w	r5, [r4, #182]	@ 0xb6
 8014108:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 801410c:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8014110:	f884 5089 	strb.w	r5, [r4, #137]	@ 0x89
 8014114:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8014118:	e9c4 5524 	strd	r5, r5, [r4, #144]	@ 0x90
 801411c:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 8014120:	b002      	add	sp, #8
 8014122:	bd70      	pop	{r4, r5, r6, pc}
 8014124:	080302a8 	.word	0x080302a8
 8014128:	00010007 	.word	0x00010007

0801412c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 801412c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801412e:	2600      	movs	r6, #0
 8014130:	f891 30a4 	ldrb.w	r3, [r1, #164]	@ 0xa4
 8014134:	4605      	mov	r5, r0
 8014136:	460c      	mov	r4, r1
 8014138:	8006      	strh	r6, [r0, #0]
 801413a:	8046      	strh	r6, [r0, #2]
 801413c:	8086      	strh	r6, [r0, #4]
 801413e:	80c6      	strh	r6, [r0, #6]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d041      	beq.n	80141c8 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8014144:	680b      	ldr	r3, [r1, #0]
 8014146:	4668      	mov	r0, sp
 8014148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801414c:	4798      	blx	r3
 801414e:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8014152:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d039      	beq.n	80141ce <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 801415a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801415e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014162:	429a      	cmp	r2, r3
 8014164:	dd05      	ble.n	8014172 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 8014166:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801416a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801416e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8014172:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014176:	42bb      	cmp	r3, r7
 8014178:	da26      	bge.n	80141c8 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801417a:	f9bd 0000 	ldrsh.w	r0, [sp]
 801417e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014182:	4242      	negs	r2, r0
 8014184:	4438      	add	r0, r7
 8014186:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 801418a:	b200      	sxth	r0, r0
 801418c:	435a      	muls	r2, r3
 801418e:	1b9e      	subs	r6, r3, r6
 8014190:	1ac0      	subs	r0, r0, r3
 8014192:	4343      	muls	r3, r0
 8014194:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8014198:	fb92 f2f7 	sdiv	r2, r2, r7
 801419c:	fb93 f3f7 	sdiv	r3, r3, r7
 80141a0:	4413      	add	r3, r2
 80141a2:	0047      	lsls	r7, r0, #1
 80141a4:	1af3      	subs	r3, r6, r3
 80141a6:	429f      	cmp	r7, r3
 80141a8:	dd05      	ble.n	80141b6 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 80141aa:	1afb      	subs	r3, r7, r3
 80141ac:	4353      	muls	r3, r2
 80141ae:	fb93 f3f6 	sdiv	r3, r3, r6
 80141b2:	1ad2      	subs	r2, r2, r3
 80141b4:	463b      	mov	r3, r7
 80141b6:	b289      	uxth	r1, r1
 80141b8:	8964      	ldrh	r4, [r4, #10]
 80141ba:	80ab      	strh	r3, [r5, #4]
 80141bc:	180e      	adds	r6, r1, r0
 80141be:	4411      	add	r1, r2
 80141c0:	80e8      	strh	r0, [r5, #6]
 80141c2:	1ba4      	subs	r4, r4, r6
 80141c4:	8029      	strh	r1, [r5, #0]
 80141c6:	806c      	strh	r4, [r5, #2]
 80141c8:	4628      	mov	r0, r5
 80141ca:	b003      	add	sp, #12
 80141cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141ce:	461e      	mov	r6, r3
 80141d0:	e7cf      	b.n	8014172 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

080141d2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 80141d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141d4:	2600      	movs	r6, #0
 80141d6:	f891 30a5 	ldrb.w	r3, [r1, #165]	@ 0xa5
 80141da:	4605      	mov	r5, r0
 80141dc:	460c      	mov	r4, r1
 80141de:	8006      	strh	r6, [r0, #0]
 80141e0:	8046      	strh	r6, [r0, #2]
 80141e2:	8086      	strh	r6, [r0, #4]
 80141e4:	80c6      	strh	r6, [r0, #6]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d041      	beq.n	801426e <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 80141ea:	680b      	ldr	r3, [r1, #0]
 80141ec:	4668      	mov	r0, sp
 80141ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141f2:	4798      	blx	r3
 80141f4:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 80141f8:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d039      	beq.n	8014274 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8014200:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014204:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014208:	429a      	cmp	r2, r3
 801420a:	dd05      	ble.n	8014218 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 801420c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014210:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014214:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8014218:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801421c:	42bb      	cmp	r3, r7
 801421e:	da26      	bge.n	801426e <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8014220:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8014224:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014228:	4242      	negs	r2, r0
 801422a:	4438      	add	r0, r7
 801422c:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8014230:	b200      	sxth	r0, r0
 8014232:	435a      	muls	r2, r3
 8014234:	1b9e      	subs	r6, r3, r6
 8014236:	1ac0      	subs	r0, r0, r3
 8014238:	4343      	muls	r3, r0
 801423a:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801423e:	fb92 f2f7 	sdiv	r2, r2, r7
 8014242:	fb93 f3f7 	sdiv	r3, r3, r7
 8014246:	4413      	add	r3, r2
 8014248:	0047      	lsls	r7, r0, #1
 801424a:	1af3      	subs	r3, r6, r3
 801424c:	429f      	cmp	r7, r3
 801424e:	dd05      	ble.n	801425c <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8014250:	1afb      	subs	r3, r7, r3
 8014252:	4353      	muls	r3, r2
 8014254:	fb93 f3f6 	sdiv	r3, r3, r6
 8014258:	1ad2      	subs	r2, r2, r3
 801425a:	463b      	mov	r3, r7
 801425c:	b289      	uxth	r1, r1
 801425e:	8924      	ldrh	r4, [r4, #8]
 8014260:	80a8      	strh	r0, [r5, #4]
 8014262:	180e      	adds	r6, r1, r0
 8014264:	4411      	add	r1, r2
 8014266:	80eb      	strh	r3, [r5, #6]
 8014268:	1ba4      	subs	r4, r4, r6
 801426a:	8069      	strh	r1, [r5, #2]
 801426c:	802c      	strh	r4, [r5, #0]
 801426e:	4628      	mov	r0, r5
 8014270:	b003      	add	sp, #12
 8014272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014274:	461e      	mov	r6, r3
 8014276:	e7cf      	b.n	8014218 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

08014278 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8014278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801427c:	4617      	mov	r7, r2
 801427e:	2200      	movs	r2, #0
 8014280:	4604      	mov	r4, r0
 8014282:	460e      	mov	r6, r1
 8014284:	8002      	strh	r2, [r0, #0]
 8014286:	4698      	mov	r8, r3
 8014288:	8042      	strh	r2, [r0, #2]
 801428a:	8082      	strh	r2, [r0, #4]
 801428c:	80c2      	strh	r2, [r0, #6]
 801428e:	4638      	mov	r0, r7
 8014290:	f7ff fb05 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014294:	4605      	mov	r5, r0
 8014296:	b998      	cbnz	r0, 80142c0 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8014298:	4640      	mov	r0, r8
 801429a:	f7ff fb00 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801429e:	f896 202c 	ldrb.w	r2, [r6, #44]	@ 0x2c
 80142a2:	f896 102d 	ldrb.w	r1, [r6, #45]	@ 0x2d
 80142a6:	b908      	cbnz	r0, 80142ac <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 80142a8:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 80142ac:	8933      	ldrh	r3, [r6, #8]
 80142ae:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 80142b2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80142b6:	8022      	strh	r2, [r4, #0]
 80142b8:	8067      	strh	r7, [r4, #2]
 80142ba:	1b58      	subs	r0, r3, r5
 80142bc:	80e1      	strh	r1, [r4, #6]
 80142be:	80a0      	strh	r0, [r4, #4]
 80142c0:	4620      	mov	r0, r4
 80142c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142c6 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 80142c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ca:	4604      	mov	r4, r0
 80142cc:	2000      	movs	r0, #0
 80142ce:	460f      	mov	r7, r1
 80142d0:	4616      	mov	r6, r2
 80142d2:	8020      	strh	r0, [r4, #0]
 80142d4:	4698      	mov	r8, r3
 80142d6:	8060      	strh	r0, [r4, #2]
 80142d8:	80a0      	strh	r0, [r4, #4]
 80142da:	80e0      	strh	r0, [r4, #6]
 80142dc:	4618      	mov	r0, r3
 80142de:	f7ff fade 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 80142e2:	4605      	mov	r5, r0
 80142e4:	b998      	cbnz	r0, 801430e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 80142e6:	4630      	mov	r0, r6
 80142e8:	f7ff fad9 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 80142ec:	f897 602c 	ldrb.w	r6, [r7, #44]	@ 0x2c
 80142f0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80142f4:	b908      	cbnz	r0, 80142fa <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 80142f6:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 80142fa:	897a      	ldrh	r2, [r7, #10]
 80142fc:	f8b8 3000 	ldrh.w	r3, [r8]
 8014300:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8014304:	8066      	strh	r6, [r4, #2]
 8014306:	8023      	strh	r3, [r4, #0]
 8014308:	1b50      	subs	r0, r2, r5
 801430a:	80a1      	strh	r1, [r4, #4]
 801430c:	80e0      	strh	r0, [r4, #6]
 801430e:	4620      	mov	r0, r4
 8014310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014314 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8014314:	b570      	push	{r4, r5, r6, lr}
 8014316:	b088      	sub	sp, #32
 8014318:	4604      	mov	r4, r0
 801431a:	4601      	mov	r1, r0
 801431c:	4668      	mov	r0, sp
 801431e:	f104 0638 	add.w	r6, r4, #56	@ 0x38
 8014322:	f7ff ff03 	bl	801412c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8014326:	4621      	mov	r1, r4
 8014328:	a802      	add	r0, sp, #8
 801432a:	f7ff ff52 	bl	80141d2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 801432e:	ab02      	add	r3, sp, #8
 8014330:	466a      	mov	r2, sp
 8014332:	4621      	mov	r1, r4
 8014334:	a804      	add	r0, sp, #16
 8014336:	f7ff ff9f 	bl	8014278 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 801433a:	ab02      	add	r3, sp, #8
 801433c:	466a      	mov	r2, sp
 801433e:	4621      	mov	r1, r4
 8014340:	a806      	add	r0, sp, #24
 8014342:	f7ff ffc0 	bl	80142c6 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8014346:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801434a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 801434e:	429a      	cmp	r2, r3
 8014350:	da02      	bge.n	8014358 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8014352:	4630      	mov	r0, r6
 8014354:	f007 ff8f 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014358:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801435c:	f104 0564 	add.w	r5, r4, #100	@ 0x64
 8014360:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	@ 0x68
 8014364:	429a      	cmp	r2, r3
 8014366:	da02      	bge.n	801436e <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8014368:	4628      	mov	r0, r5
 801436a:	f007 ff84 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 801436e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8014372:	f8bd 0000 	ldrh.w	r0, [sp]
 8014376:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801437a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801437e:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 8014380:	4630      	mov	r0, r6
 8014382:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8014384:	f7ff fe42 	bl	801400c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014388:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801438c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8014390:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8014394:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 8014398:	4628      	mov	r0, r5
 801439a:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 801439e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80143a2:	f7ff fe33 	bl	801400c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80143a6:	8922      	ldrh	r2, [r4, #8]
 80143a8:	2300      	movs	r3, #0
 80143aa:	a804      	add	r0, sp, #16
 80143ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80143b0:	8962      	ldrh	r2, [r4, #10]
 80143b2:	f8ad 3010 	strh.w	r3, [sp, #16]
 80143b6:	f8ad 201e 	strh.w	r2, [sp, #30]
 80143ba:	f8ad 301a 	strh.w	r3, [sp, #26]
 80143be:	f7ff fa6e 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 80143c2:	b920      	cbnz	r0, 80143ce <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 80143c4:	6823      	ldr	r3, [r4, #0]
 80143c6:	a904      	add	r1, sp, #16
 80143c8:	4620      	mov	r0, r4
 80143ca:	691b      	ldr	r3, [r3, #16]
 80143cc:	4798      	blx	r3
 80143ce:	a806      	add	r0, sp, #24
 80143d0:	f7ff fa65 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 80143d4:	b920      	cbnz	r0, 80143e0 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 80143d6:	6823      	ldr	r3, [r4, #0]
 80143d8:	a906      	add	r1, sp, #24
 80143da:	4620      	mov	r0, r4
 80143dc:	691b      	ldr	r3, [r3, #16]
 80143de:	4798      	blx	r3
 80143e0:	b008      	add	sp, #32
 80143e2:	bd70      	pop	{r4, r5, r6, pc}

080143e4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 80143e4:	b570      	push	{r4, r5, r6, lr}
 80143e6:	790b      	ldrb	r3, [r1, #4]
 80143e8:	b08a      	sub	sp, #40	@ 0x28
 80143ea:	4604      	mov	r4, r0
 80143ec:	460d      	mov	r5, r1
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d17f      	bne.n	80144f2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10e>
 80143f2:	2201      	movs	r2, #1
 80143f4:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
 80143f8:	f890 20b0 	ldrb.w	r2, [r0, #176]	@ 0xb0
 80143fc:	b14a      	cbz	r2, 8014412 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2e>
 80143fe:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8014402:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
 8014406:	f006 fe73 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 801440a:	4621      	mov	r1, r4
 801440c:	3004      	adds	r0, #4
 801440e:	f006 fe94 	bl	801b13a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8014412:	4623      	mov	r3, r4
 8014414:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014418:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801441c:	f853 0bb4 	ldr.w	r0, [r3], #180
 8014420:	9301      	str	r3, [sp, #4]
 8014422:	f104 03b2 	add.w	r3, r4, #178	@ 0xb2
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 801442c:	6f86      	ldr	r6, [r0, #120]	@ 0x78
 801442e:	4620      	mov	r0, r4
 8014430:	47b0      	blx	r6
 8014432:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8014436:	42a3      	cmp	r3, r4
 8014438:	bf04      	itt	eq
 801443a:	2300      	moveq	r3, #0
 801443c:	f8c4 3090 	streq.w	r3, [r4, #144]	@ 0x90
 8014440:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8014444:	2900      	cmp	r1, #0
 8014446:	d03a      	beq.n	80144be <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8014448:	2600      	movs	r6, #0
 801444a:	a803      	add	r0, sp, #12
 801444c:	f884 60b6 	strb.w	r6, [r4, #182]	@ 0xb6
 8014450:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014454:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 8014458:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801445c:	f8a4 30a0 	strh.w	r3, [r4, #160]	@ 0xa0
 8014460:	f007 ffa4 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014464:	4621      	mov	r1, r4
 8014466:	a805      	add	r0, sp, #20
 8014468:	f007 ffa0 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801446c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014470:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014474:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8014478:	1ad2      	subs	r2, r2, r3
 801447a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801447e:	7929      	ldrb	r1, [r5, #4]
 8014480:	441a      	add	r2, r3
 8014482:	88eb      	ldrh	r3, [r5, #6]
 8014484:	f88d 1020 	strb.w	r1, [sp, #32]
 8014488:	a907      	add	r1, sp, #28
 801448a:	441a      	add	r2, r3
 801448c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014490:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8014494:	1a1b      	subs	r3, r3, r0
 8014496:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 801449a:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 801449e:	4403      	add	r3, r0
 80144a0:	8928      	ldrh	r0, [r5, #8]
 80144a2:	4403      	add	r3, r0
 80144a4:	482f      	ldr	r0, [pc, #188]	@ (8014564 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 80144a6:	9007      	str	r0, [sp, #28]
 80144a8:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80144ac:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80144b0:	6803      	ldr	r3, [r0, #0]
 80144b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144b4:	4798      	blx	r3
 80144b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80144ba:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80144be:	2300      	movs	r3, #0
 80144c0:	f894 20a2 	ldrb.w	r2, [r4, #162]	@ 0xa2
 80144c4:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 80144c8:	b112      	cbz	r2, 80144d0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xec>
 80144ca:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 80144ce:	b90b      	cbnz	r3, 80144d4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xf0>
 80144d0:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 80144d4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80144d8:	b112      	cbz	r2, 80144e0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfc>
 80144da:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 80144de:	b90b      	cbnz	r3, 80144e4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x100>
 80144e0:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 80144e4:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 80144e8:	4620      	mov	r0, r4
 80144ea:	f7ff ff13 	bl	8014314 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80144ee:	b00a      	add	sp, #40	@ 0x28
 80144f0:	bd70      	pop	{r4, r5, r6, pc}
 80144f2:	2b02      	cmp	r3, #2
 80144f4:	d0fb      	beq.n	80144ee <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10a>
 80144f6:	f8d0 1090 	ldr.w	r1, [r0, #144]	@ 0x90
 80144fa:	b361      	cbz	r1, 8014556 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x172>
 80144fc:	a803      	add	r0, sp, #12
 80144fe:	f007 ff55 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014502:	4621      	mov	r1, r4
 8014504:	a805      	add	r0, sp, #20
 8014506:	f007 ff51 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801450a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801450e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014512:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8014516:	1ad2      	subs	r2, r2, r3
 8014518:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801451c:	7929      	ldrb	r1, [r5, #4]
 801451e:	441a      	add	r2, r3
 8014520:	88eb      	ldrh	r3, [r5, #6]
 8014522:	f88d 1020 	strb.w	r1, [sp, #32]
 8014526:	a907      	add	r1, sp, #28
 8014528:	441a      	add	r2, r3
 801452a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801452e:	1a1b      	subs	r3, r3, r0
 8014530:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8014534:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 8014538:	4403      	add	r3, r0
 801453a:	8928      	ldrh	r0, [r5, #8]
 801453c:	4403      	add	r3, r0
 801453e:	4809      	ldr	r0, [pc, #36]	@ (8014564 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8014540:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8014544:	2300      	movs	r3, #0
 8014546:	9007      	str	r0, [sp, #28]
 8014548:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801454c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8014550:	6803      	ldr	r3, [r0, #0]
 8014552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014554:	4798      	blx	r3
 8014556:	2300      	movs	r3, #0
 8014558:	e9c4 3324 	strd	r3, r3, [r4, #144]	@ 0x90
 801455c:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 8014560:	e7ad      	b.n	80144be <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8014562:	bf00      	nop
 8014564:	08030280 	.word	0x08030280

08014568 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8014568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801456a:	4606      	mov	r6, r0
 801456c:	4615      	mov	r5, r2
 801456e:	460c      	mov	r4, r1
 8014570:	b919      	cbnz	r1, 801457a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014572:	b912      	cbnz	r2, 801457a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014574:	2000      	movs	r0, #0
 8014576:	b003      	add	sp, #12
 8014578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801457a:	6833      	ldr	r3, [r6, #0]
 801457c:	4631      	mov	r1, r6
 801457e:	4668      	mov	r0, sp
 8014580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014584:	4798      	blx	r3
 8014586:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801458a:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 801458e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8014592:	4288      	cmp	r0, r1
 8014594:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8014598:	da2c      	bge.n	80145f4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 801459a:	2c00      	cmp	r4, #0
 801459c:	dd20      	ble.n	80145e0 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 801459e:	1913      	adds	r3, r2, r4
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	dd01      	ble.n	80145a8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80145a4:	4252      	negs	r2, r2
 80145a6:	b214      	sxth	r4, r2
 80145a8:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 80145ac:	4297      	cmp	r7, r2
 80145ae:	dd2c      	ble.n	801460a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 80145b0:	2d00      	cmp	r5, #0
 80145b2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80145b6:	dd1f      	ble.n	80145f8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 80145b8:	195a      	adds	r2, r3, r5
 80145ba:	2a00      	cmp	r2, #0
 80145bc:	dd04      	ble.n	80145c8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 80145be:	425b      	negs	r3, r3
 80145c0:	b21d      	sxth	r5, r3
 80145c2:	b90c      	cbnz	r4, 80145c8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 80145c4:	2d00      	cmp	r5, #0
 80145c6:	d0d5      	beq.n	8014574 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 80145c8:	6833      	ldr	r3, [r6, #0]
 80145ca:	462a      	mov	r2, r5
 80145cc:	4621      	mov	r1, r4
 80145ce:	4630      	mov	r0, r6
 80145d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80145d4:	4798      	blx	r3
 80145d6:	4630      	mov	r0, r6
 80145d8:	f7ff fe9c 	bl	8014314 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80145dc:	2001      	movs	r0, #1
 80145de:	e7ca      	b.n	8014576 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 80145e0:	d0e2      	beq.n	80145a8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80145e2:	440a      	add	r2, r1
 80145e4:	b292      	uxth	r2, r2
 80145e6:	fa04 f382 	sxtah	r3, r4, r2
 80145ea:	4283      	cmp	r3, r0
 80145ec:	dadc      	bge.n	80145a8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80145ee:	1a84      	subs	r4, r0, r2
 80145f0:	b224      	sxth	r4, r4
 80145f2:	e7d9      	b.n	80145a8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80145f4:	2400      	movs	r4, #0
 80145f6:	e7d7      	b.n	80145a8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80145f8:	d007      	beq.n	801460a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 80145fa:	443b      	add	r3, r7
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	fa05 f183 	sxtah	r1, r5, r3
 8014602:	4291      	cmp	r1, r2
 8014604:	dae0      	bge.n	80145c8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8014606:	1ad3      	subs	r3, r2, r3
 8014608:	e7da      	b.n	80145c0 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 801460a:	2c00      	cmp	r4, #0
 801460c:	d0b2      	beq.n	8014574 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 801460e:	2500      	movs	r5, #0
 8014610:	e7da      	b.n	80145c8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

08014612 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8014612:	b513      	push	{r0, r1, r4, lr}
 8014614:	6803      	ldr	r3, [r0, #0]
 8014616:	4601      	mov	r1, r0
 8014618:	4604      	mov	r4, r0
 801461a:	4668      	mov	r0, sp
 801461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014620:	4798      	blx	r3
 8014622:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8014626:	f9bd 1000 	ldrsh.w	r1, [sp]
 801462a:	2800      	cmp	r0, #0
 801462c:	dd20      	ble.n	8014670 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 801462e:	4602      	mov	r2, r0
 8014630:	2900      	cmp	r1, #0
 8014632:	dc0e      	bgt.n	8014652 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8014634:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014638:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801463c:	440b      	add	r3, r1
 801463e:	b21b      	sxth	r3, r3
 8014640:	4298      	cmp	r0, r3
 8014642:	dd04      	ble.n	801464e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8014644:	1a1b      	subs	r3, r3, r0
 8014646:	4299      	cmp	r1, r3
 8014648:	bfb8      	it	lt
 801464a:	4619      	movlt	r1, r3
 801464c:	b909      	cbnz	r1, 8014652 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 801464e:	b1f2      	cbz	r2, 801468e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8014650:	2100      	movs	r1, #0
 8014652:	6823      	ldr	r3, [r4, #0]
 8014654:	4252      	negs	r2, r2
 8014656:	4249      	negs	r1, r1
 8014658:	4620      	mov	r0, r4
 801465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801465e:	b212      	sxth	r2, r2
 8014660:	b209      	sxth	r1, r1
 8014662:	4798      	blx	r3
 8014664:	4620      	mov	r0, r4
 8014666:	b002      	add	sp, #8
 8014668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801466c:	f7ff be52 	b.w	8014314 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8014670:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014674:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014678:	4403      	add	r3, r0
 801467a:	b21b      	sxth	r3, r3
 801467c:	429a      	cmp	r2, r3
 801467e:	dd04      	ble.n	801468a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 8014680:	1a9a      	subs	r2, r3, r2
 8014682:	4282      	cmp	r2, r0
 8014684:	bfb8      	it	lt
 8014686:	4602      	movlt	r2, r0
 8014688:	e7d2      	b.n	8014630 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 801468a:	2200      	movs	r2, #0
 801468c:	e7d0      	b.n	8014630 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 801468e:	b002      	add	sp, #8
 8014690:	bd10      	pop	{r4, pc}

08014692 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8014692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014694:	4605      	mov	r5, r0
 8014696:	f100 0638 	add.w	r6, r0, #56	@ 0x38
 801469a:	4604      	mov	r4, r0
 801469c:	460f      	mov	r7, r1
 801469e:	f855 3b64 	ldr.w	r3, [r5], #100
 80146a2:	4631      	mov	r1, r6
 80146a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80146a6:	4798      	blx	r3
 80146a8:	6823      	ldr	r3, [r4, #0]
 80146aa:	4629      	mov	r1, r5
 80146ac:	4620      	mov	r0, r4
 80146ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80146b0:	4798      	blx	r3
 80146b2:	4639      	mov	r1, r7
 80146b4:	4620      	mov	r0, r4
 80146b6:	f7fe ff2b 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80146ba:	4631      	mov	r1, r6
 80146bc:	4620      	mov	r0, r4
 80146be:	f7fe ff27 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80146c2:	4629      	mov	r1, r5
 80146c4:	4620      	mov	r0, r4
 80146c6:	f7fe ff23 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80146ca:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 80146ce:	b123      	cbz	r3, 80146da <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE+0x48>
 80146d0:	4620      	mov	r0, r4
 80146d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80146d6:	f7ff be1d 	b.w	8014314 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80146da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080146dc <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 80146dc:	6301      	str	r1, [r0, #48]	@ 0x30
 80146de:	6601      	str	r1, [r0, #96]	@ 0x60
 80146e0:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 80146e4:	4770      	bx	lr

080146e6 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>:
 80146e6:	f880 102e 	strb.w	r1, [r0, #46]	@ 0x2e
 80146ea:	f880 105e 	strb.w	r1, [r0, #94]	@ 0x5e
 80146ee:	f880 108a 	strb.w	r1, [r0, #138]	@ 0x8a
 80146f2:	4770      	bx	lr

080146f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80146f4:	6803      	ldr	r3, [r0, #0]
 80146f6:	b513      	push	{r0, r1, r4, lr}
 80146f8:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80146fc:	2300      	movs	r3, #0
 80146fe:	e9cd 3300 	strd	r3, r3, [sp]
 8014702:	466b      	mov	r3, sp
 8014704:	47a0      	blx	r4
 8014706:	b002      	add	sp, #8
 8014708:	bd10      	pop	{r4, pc}

0801470a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801470a:	2301      	movs	r3, #1
 801470c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014710:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014714:	4770      	bx	lr

08014716 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014716:	2301      	movs	r3, #1
 8014718:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801471c:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014720:	4770      	bx	lr

08014722 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014722:	6843      	ldr	r3, [r0, #4]
 8014724:	2201      	movs	r2, #1
 8014726:	725a      	strb	r2, [r3, #9]
 8014728:	6840      	ldr	r0, [r0, #4]
 801472a:	6803      	ldr	r3, [r0, #0]
 801472c:	691b      	ldr	r3, [r3, #16]
 801472e:	4718      	bx	r3

08014730 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014730:	6840      	ldr	r0, [r0, #4]
 8014732:	6803      	ldr	r3, [r0, #0]
 8014734:	689b      	ldr	r3, [r3, #8]
 8014736:	4718      	bx	r3

08014738 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014738:	b530      	push	{r4, r5, lr}
 801473a:	b08b      	sub	sp, #44	@ 0x2c
 801473c:	6804      	ldr	r4, [r0, #0]
 801473e:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8014742:	9509      	str	r5, [sp, #36]	@ 0x24
 8014744:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8014748:	9508      	str	r5, [sp, #32]
 801474a:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 801474e:	9507      	str	r5, [sp, #28]
 8014750:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8014754:	9506      	str	r5, [sp, #24]
 8014756:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801475a:	9505      	str	r5, [sp, #20]
 801475c:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8014760:	9504      	str	r5, [sp, #16]
 8014762:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8014766:	9503      	str	r5, [sp, #12]
 8014768:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 801476c:	9502      	str	r5, [sp, #8]
 801476e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8014772:	e9cd 3500 	strd	r3, r5, [sp]
 8014776:	4613      	mov	r3, r2
 8014778:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 801477a:	2200      	movs	r2, #0
 801477c:	47a0      	blx	r4
 801477e:	b00b      	add	sp, #44	@ 0x2c
 8014780:	bd30      	pop	{r4, r5, pc}
	...

08014784 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014784:	4b04      	ldr	r3, [pc, #16]	@ (8014798 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	b123      	cbz	r3, 8014794 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801478a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 801478e:	f080 0001 	eor.w	r0, r0, #1
 8014792:	4770      	bx	lr
 8014794:	2001      	movs	r0, #1
 8014796:	4770      	bx	lr
 8014798:	2402876e 	.word	0x2402876e

0801479c <_ZN8touchgfx3HAL8endFrameEv>:
 801479c:	b510      	push	{r4, lr}
 801479e:	4604      	mov	r4, r0
 80147a0:	6840      	ldr	r0, [r0, #4]
 80147a2:	6803      	ldr	r3, [r0, #0]
 80147a4:	689b      	ldr	r3, [r3, #8]
 80147a6:	4798      	blx	r3
 80147a8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80147ac:	b113      	cbz	r3, 80147b4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80147ae:	2301      	movs	r3, #1
 80147b0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80147b4:	bd10      	pop	{r4, pc}

080147b6 <_ZN8touchgfx3HAL10initializeEv>:
 80147b6:	b510      	push	{r4, lr}
 80147b8:	4604      	mov	r4, r0
 80147ba:	f7ee fe73 	bl	80034a4 <_ZN8touchgfx10OSWrappers10initializeEv>
 80147be:	f7ed fec9 	bl	8002554 <_ZN8touchgfx4GPIO4initEv>
 80147c2:	6860      	ldr	r0, [r4, #4]
 80147c4:	6803      	ldr	r3, [r0, #0]
 80147c6:	68db      	ldr	r3, [r3, #12]
 80147c8:	4798      	blx	r3
 80147ca:	68e0      	ldr	r0, [r4, #12]
 80147cc:	6803      	ldr	r3, [r0, #0]
 80147ce:	689b      	ldr	r3, [r3, #8]
 80147d0:	4798      	blx	r3
 80147d2:	6823      	ldr	r3, [r4, #0]
 80147d4:	4620      	mov	r0, r4
 80147d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147dc:	4718      	bx	r3
	...

080147e0 <_ZN8touchgfx3HAL4tickEv>:
 80147e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80147e2:	6803      	ldr	r3, [r0, #0]
 80147e4:	4604      	mov	r4, r0
 80147e6:	4d5b      	ldr	r5, [pc, #364]	@ (8014954 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80147e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80147ec:	4798      	blx	r3
 80147ee:	2800      	cmp	r0, #0
 80147f0:	f000 8095 	beq.w	801491e <_ZN8touchgfx3HAL4tickEv+0x13e>
 80147f4:	2001      	movs	r0, #1
 80147f6:	2600      	movs	r6, #0
 80147f8:	f7ed fe12 	bl	8002420 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80147fc:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8014800:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8014804:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014808:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 801480c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8014810:	b133      	cbz	r3, 8014820 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014812:	6823      	ldr	r3, [r4, #0]
 8014814:	4620      	mov	r0, r4
 8014816:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801481a:	4798      	blx	r3
 801481c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8014820:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8014824:	2601      	movs	r6, #1
 8014826:	6862      	ldr	r2, [r4, #4]
 8014828:	f083 0301 	eor.w	r3, r3, #1
 801482c:	702e      	strb	r6, [r5, #0]
 801482e:	7253      	strb	r3, [r2, #9]
 8014830:	f006 fc5e 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 8014834:	6803      	ldr	r3, [r0, #0]
 8014836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014838:	4798      	blx	r3
 801483a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801483e:	b90b      	cbnz	r3, 8014844 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014840:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8014844:	f006 fc54 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 8014848:	6803      	ldr	r3, [r0, #0]
 801484a:	695b      	ldr	r3, [r3, #20]
 801484c:	4798      	blx	r3
 801484e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014850:	6803      	ldr	r3, [r0, #0]
 8014852:	691b      	ldr	r3, [r3, #16]
 8014854:	4798      	blx	r3
 8014856:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801485a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 801485e:	3b01      	subs	r3, #1
 8014860:	b2db      	uxtb	r3, r3
 8014862:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014866:	b10a      	cbz	r2, 801486c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014868:	2b00      	cmp	r3, #0
 801486a:	d1eb      	bne.n	8014844 <_ZN8touchgfx3HAL4tickEv+0x64>
 801486c:	4a3a      	ldr	r2, [pc, #232]	@ (8014958 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801486e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014872:	7813      	ldrb	r3, [r2, #0]
 8014874:	3301      	adds	r3, #1
 8014876:	b25b      	sxtb	r3, r3
 8014878:	4299      	cmp	r1, r3
 801487a:	7013      	strb	r3, [r2, #0]
 801487c:	dc10      	bgt.n	80148a0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801487e:	2300      	movs	r3, #0
 8014880:	68e0      	ldr	r0, [r4, #12]
 8014882:	a902      	add	r1, sp, #8
 8014884:	7013      	strb	r3, [r2, #0]
 8014886:	aa03      	add	r2, sp, #12
 8014888:	6803      	ldr	r3, [r0, #0]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	4798      	blx	r3
 801488e:	6823      	ldr	r3, [r4, #0]
 8014890:	2800      	cmp	r0, #0
 8014892:	d050      	beq.n	8014936 <_ZN8touchgfx3HAL4tickEv+0x156>
 8014894:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014898:	4620      	mov	r0, r4
 801489a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801489e:	4798      	blx	r3
 80148a0:	2300      	movs	r3, #0
 80148a2:	6960      	ldr	r0, [r4, #20]
 80148a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80148a8:	b158      	cbz	r0, 80148c2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80148aa:	6803      	ldr	r3, [r0, #0]
 80148ac:	f10d 0107 	add.w	r1, sp, #7
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	4798      	blx	r3
 80148b4:	b128      	cbz	r0, 80148c2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80148b6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80148b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80148bc:	6803      	ldr	r3, [r0, #0]
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	4798      	blx	r3
 80148c2:	f104 001c 	add.w	r0, r4, #28
 80148c6:	f014 fa3b 	bl	8028d40 <_ZN8touchgfx8Gestures4tickEv>
 80148ca:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80148ce:	b30b      	cbz	r3, 8014914 <_ZN8touchgfx3HAL4tickEv+0x134>
 80148d0:	6920      	ldr	r0, [r4, #16]
 80148d2:	6803      	ldr	r3, [r0, #0]
 80148d4:	691b      	ldr	r3, [r3, #16]
 80148d6:	4798      	blx	r3
 80148d8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80148da:	4606      	mov	r6, r0
 80148dc:	b903      	cbnz	r3, 80148e0 <_ZN8touchgfx3HAL4tickEv+0x100>
 80148de:	6760      	str	r0, [r4, #116]	@ 0x74
 80148e0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80148e2:	4a1e      	ldr	r2, [pc, #120]	@ (801495c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80148e4:	1af3      	subs	r3, r6, r3
 80148e6:	4293      	cmp	r3, r2
 80148e8:	d914      	bls.n	8014914 <_ZN8touchgfx3HAL4tickEv+0x134>
 80148ea:	6920      	ldr	r0, [r4, #16]
 80148ec:	6803      	ldr	r3, [r0, #0]
 80148ee:	699b      	ldr	r3, [r3, #24]
 80148f0:	4798      	blx	r3
 80148f2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80148f4:	2264      	movs	r2, #100	@ 0x64
 80148f6:	1af3      	subs	r3, r6, r3
 80148f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80148fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8014900:	2800      	cmp	r0, #0
 8014902:	dc1d      	bgt.n	8014940 <_ZN8touchgfx3HAL4tickEv+0x160>
 8014904:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8014908:	6920      	ldr	r0, [r4, #16]
 801490a:	2100      	movs	r1, #0
 801490c:	6803      	ldr	r3, [r0, #0]
 801490e:	69db      	ldr	r3, [r3, #28]
 8014910:	4798      	blx	r3
 8014912:	6766      	str	r6, [r4, #116]	@ 0x74
 8014914:	f006 fbec 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 8014918:	6803      	ldr	r3, [r0, #0]
 801491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801491c:	4798      	blx	r3
 801491e:	6823      	ldr	r3, [r4, #0]
 8014920:	4620      	mov	r0, r4
 8014922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014926:	4798      	blx	r3
 8014928:	2001      	movs	r0, #1
 801492a:	f7ed fda9 	bl	8002480 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801492e:	2300      	movs	r3, #0
 8014930:	702b      	strb	r3, [r5, #0]
 8014932:	b004      	add	sp, #16
 8014934:	bd70      	pop	{r4, r5, r6, pc}
 8014936:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801493a:	4620      	mov	r0, r4
 801493c:	4798      	blx	r3
 801493e:	e7af      	b.n	80148a0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014940:	2863      	cmp	r0, #99	@ 0x63
 8014942:	bfcb      	itete	gt
 8014944:	2300      	movgt	r3, #0
 8014946:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801494a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 801494e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014952:	e7d9      	b.n	8014908 <_ZN8touchgfx3HAL4tickEv+0x128>
 8014954:	24028774 	.word	0x24028774
 8014958:	24028775 	.word	0x24028775
 801495c:	05f5e100 	.word	0x05f5e100

08014960 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014960:	b510      	push	{r4, lr}
 8014962:	4604      	mov	r4, r0
 8014964:	f7ee fdce 	bl	8003504 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014968:	2200      	movs	r2, #0
 801496a:	6863      	ldr	r3, [r4, #4]
 801496c:	729a      	strb	r2, [r3, #10]
 801496e:	bd10      	pop	{r4, pc}

08014970 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014970:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014972:	301c      	adds	r0, #28
 8014974:	f014 b9e2 	b.w	8028d3c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014978 <_ZN8touchgfx3HAL5touchEll>:
 8014978:	b530      	push	{r4, r5, lr}
 801497a:	b087      	sub	sp, #28
 801497c:	4604      	mov	r4, r0
 801497e:	a804      	add	r0, sp, #16
 8014980:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014984:	f006 f9c6 	bl	801ad14 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014988:	9b04      	ldr	r3, [sp, #16]
 801498a:	a906      	add	r1, sp, #24
 801498c:	a803      	add	r0, sp, #12
 801498e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014992:	9b05      	ldr	r3, [sp, #20]
 8014994:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014998:	f006 fa0e 	bl	801adb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801499c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80149a0:	f104 001c 	add.w	r0, r4, #28
 80149a4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80149a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80149ac:	b189      	cbz	r1, 80149d2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80149ae:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	4613      	mov	r3, r2
 80149b6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80149ba:	462a      	mov	r2, r5
 80149bc:	f014 f9ce 	bl	8028d5c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80149c0:	b128      	cbz	r0, 80149ce <_ZN8touchgfx3HAL5touchEll+0x56>
 80149c2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80149c6:	6623      	str	r3, [r4, #96]	@ 0x60
 80149c8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80149cc:	6663      	str	r3, [r4, #100]	@ 0x64
 80149ce:	b007      	add	sp, #28
 80149d0:	bd30      	pop	{r4, r5, pc}
 80149d2:	f014 fa03 	bl	8028ddc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80149d6:	2301      	movs	r3, #1
 80149d8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80149dc:	e7f1      	b.n	80149c2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080149de <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80149de:	b510      	push	{r4, lr}
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d046      	beq.n	8014a72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80149e4:	ea81 0002 	eor.w	r0, r1, r2
 80149e8:	07c4      	lsls	r4, r0, #31
 80149ea:	d508      	bpl.n	80149fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80149ec:	440b      	add	r3, r1
 80149ee:	3a01      	subs	r2, #1
 80149f0:	428b      	cmp	r3, r1
 80149f2:	d93e      	bls.n	8014a72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80149f4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80149f8:	f801 0b01 	strb.w	r0, [r1], #1
 80149fc:	e7f8      	b.n	80149f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80149fe:	07d0      	lsls	r0, r2, #31
 8014a00:	bf42      	ittt	mi
 8014a02:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014a06:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014a0a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d911      	bls.n	8014a36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014a12:	ea81 0402 	eor.w	r4, r1, r2
 8014a16:	4610      	mov	r0, r2
 8014a18:	07a4      	lsls	r4, r4, #30
 8014a1a:	d022      	beq.n	8014a62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014a1c:	f023 0401 	bic.w	r4, r3, #1
 8014a20:	440c      	add	r4, r1
 8014a22:	428c      	cmp	r4, r1
 8014a24:	4602      	mov	r2, r0
 8014a26:	d904      	bls.n	8014a32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014a28:	8812      	ldrh	r2, [r2, #0]
 8014a2a:	3002      	adds	r0, #2
 8014a2c:	f821 2b02 	strh.w	r2, [r1], #2
 8014a30:	e7f7      	b.n	8014a22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014a32:	f003 0301 	and.w	r3, r3, #1
 8014a36:	f023 0003 	bic.w	r0, r3, #3
 8014a3a:	4408      	add	r0, r1
 8014a3c:	4288      	cmp	r0, r1
 8014a3e:	4614      	mov	r4, r2
 8014a40:	d904      	bls.n	8014a4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014a42:	6824      	ldr	r4, [r4, #0]
 8014a44:	3204      	adds	r2, #4
 8014a46:	f841 4b04 	str.w	r4, [r1], #4
 8014a4a:	e7f7      	b.n	8014a3c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014a4c:	f003 0303 	and.w	r3, r3, #3
 8014a50:	3a01      	subs	r2, #1
 8014a52:	440b      	add	r3, r1
 8014a54:	428b      	cmp	r3, r1
 8014a56:	d90c      	bls.n	8014a72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014a58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014a5c:	f801 0b01 	strb.w	r0, [r1], #1
 8014a60:	e7f8      	b.n	8014a54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014a62:	0790      	lsls	r0, r2, #30
 8014a64:	d0e7      	beq.n	8014a36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014a66:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014a6a:	3b02      	subs	r3, #2
 8014a6c:	f821 0b02 	strh.w	r0, [r1], #2
 8014a70:	e7e1      	b.n	8014a36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014a72:	2001      	movs	r0, #1
 8014a74:	bd10      	pop	{r4, pc}

08014a76 <_ZN8touchgfx3HAL7noTouchEv>:
 8014a76:	b510      	push	{r4, lr}
 8014a78:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	b153      	cbz	r3, 8014a96 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014a80:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8014a84:	2101      	movs	r1, #1
 8014a86:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8014a8a:	301c      	adds	r0, #28
 8014a8c:	f014 f9a6 	bl	8028ddc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014a90:	2300      	movs	r3, #0
 8014a92:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014a96:	bd10      	pop	{r4, pc}

08014a98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a9c:	b085      	sub	sp, #20
 8014a9e:	4604      	mov	r4, r0
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	4699      	mov	r9, r3
 8014aa4:	ad04      	add	r5, sp, #16
 8014aa6:	460f      	mov	r7, r1
 8014aa8:	4690      	mov	r8, r2
 8014aaa:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014aae:	69a0      	ldr	r0, [r4, #24]
 8014ab0:	6806      	ldr	r6, [r0, #0]
 8014ab2:	9501      	str	r5, [sp, #4]
 8014ab4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8014ab8:	9500      	str	r5, [sp, #0]
 8014aba:	6835      	ldr	r5, [r6, #0]
 8014abc:	47a8      	blx	r5
 8014abe:	4d10      	ldr	r5, [pc, #64]	@ (8014b00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014ac0:	4606      	mov	r6, r0
 8014ac2:	f8a5 9000 	strh.w	r9, [r5]
 8014ac6:	f7f3 fc07 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 8014aca:	6803      	ldr	r3, [r0, #0]
 8014acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ace:	4798      	blx	r3
 8014ad0:	b128      	cbz	r0, 8014ade <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8014ad2:	2801      	cmp	r0, #1
 8014ad4:	d00b      	beq.n	8014aee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	b005      	add	sp, #20
 8014ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ade:	882b      	ldrh	r3, [r5, #0]
 8014ae0:	fb08 7203 	mla	r2, r8, r3, r7
 8014ae4:	9b03      	ldr	r3, [sp, #12]
 8014ae6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014aea:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014aec:	e7f3      	b.n	8014ad6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014aee:	882a      	ldrh	r2, [r5, #0]
 8014af0:	9b03      	ldr	r3, [sp, #12]
 8014af2:	fb08 7202 	mla	r2, r8, r2, r7
 8014af6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014afa:	1a9a      	subs	r2, r3, r2
 8014afc:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8014afe:	e7ea      	b.n	8014ad6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014b00:	2402876a 	.word	0x2402876a

08014b04 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b06:	b08b      	sub	sp, #44	@ 0x2c
 8014b08:	4617      	mov	r7, r2
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	460e      	mov	r6, r1
 8014b0e:	461d      	mov	r5, r3
 8014b10:	f7f3 fbe2 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 8014b14:	6803      	ldr	r3, [r0, #0]
 8014b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b18:	4798      	blx	r3
 8014b1a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014b1e:	9007      	str	r0, [sp, #28]
 8014b20:	4631      	mov	r1, r6
 8014b22:	6822      	ldr	r2, [r4, #0]
 8014b24:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014b28:	4b0c      	ldr	r3, [pc, #48]	@ (8014b5c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	881b      	ldrh	r3, [r3, #0]
 8014b2e:	9306      	str	r3, [sp, #24]
 8014b30:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014b34:	9305      	str	r3, [sp, #20]
 8014b36:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8014b3a:	9304      	str	r3, [sp, #16]
 8014b3c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014b40:	9303      	str	r3, [sp, #12]
 8014b42:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014b46:	9302      	str	r3, [sp, #8]
 8014b48:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014b4c:	e9cd 5300 	strd	r5, r3, [sp]
 8014b50:	463b      	mov	r3, r7
 8014b52:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8014b54:	2200      	movs	r2, #0
 8014b56:	47a8      	blx	r5
 8014b58:	b00b      	add	sp, #44	@ 0x2c
 8014b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b5c:	2402876a 	.word	0x2402876a

08014b60 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b64:	4698      	mov	r8, r3
 8014b66:	6803      	ldr	r3, [r0, #0]
 8014b68:	b08b      	sub	sp, #44	@ 0x2c
 8014b6a:	4617      	mov	r7, r2
 8014b6c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8014b6e:	460e      	mov	r6, r1
 8014b70:	4b13      	ldr	r3, [pc, #76]	@ (8014bc0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014b72:	4604      	mov	r4, r0
 8014b74:	f8b3 9000 	ldrh.w	r9, [r3]
 8014b78:	f7f3 fbae 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 8014b7c:	6803      	ldr	r3, [r0, #0]
 8014b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b80:	4798      	blx	r3
 8014b82:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8014b86:	2200      	movs	r2, #0
 8014b88:	4631      	mov	r1, r6
 8014b8a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014b8e:	2302      	movs	r3, #2
 8014b90:	4620      	mov	r0, r4
 8014b92:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8014b96:	2301      	movs	r3, #1
 8014b98:	9305      	str	r3, [sp, #20]
 8014b9a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014b9e:	9304      	str	r3, [sp, #16]
 8014ba0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8014ba4:	9303      	str	r3, [sp, #12]
 8014ba6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014baa:	9302      	str	r3, [sp, #8]
 8014bac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014bb0:	e9cd 8300 	strd	r8, r3, [sp]
 8014bb4:	463b      	mov	r3, r7
 8014bb6:	47a8      	blx	r5
 8014bb8:	b00b      	add	sp, #44	@ 0x2c
 8014bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bbe:	bf00      	nop
 8014bc0:	2402876a 	.word	0x2402876a

08014bc4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8014bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bc8:	4698      	mov	r8, r3
 8014bca:	6803      	ldr	r3, [r0, #0]
 8014bcc:	b087      	sub	sp, #28
 8014bce:	460e      	mov	r6, r1
 8014bd0:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8014bd2:	4617      	mov	r7, r2
 8014bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8014c14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8014bd6:	4604      	mov	r4, r0
 8014bd8:	f8b3 9000 	ldrh.w	r9, [r3]
 8014bdc:	f7f3 fb7c 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 8014be0:	6803      	ldr	r3, [r0, #0]
 8014be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014be4:	4798      	blx	r3
 8014be6:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8014bea:	463a      	mov	r2, r7
 8014bec:	4631      	mov	r1, r6
 8014bee:	f8cd 900c 	str.w	r9, [sp, #12]
 8014bf2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014bf6:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	9302      	str	r3, [sp, #8]
 8014bfe:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8014c02:	9301      	str	r3, [sp, #4]
 8014c04:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8014c08:	9300      	str	r3, [sp, #0]
 8014c0a:	4643      	mov	r3, r8
 8014c0c:	47a8      	blx	r5
 8014c0e:	b007      	add	sp, #28
 8014c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c14:	2402876a 	.word	0x2402876a

08014c18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	4604      	mov	r4, r0
 8014c1e:	b08f      	sub	sp, #60	@ 0x3c
 8014c20:	4610      	mov	r0, r2
 8014c22:	460d      	mov	r5, r1
 8014c24:	4691      	mov	r9, r2
 8014c26:	461e      	mov	r6, r3
 8014c28:	f009 ff3c 	bl	801eaa4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	f000 809d 	beq.w	8014d6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014c32:	6823      	ldr	r3, [r4, #0]
 8014c34:	4620      	mov	r0, r4
 8014c36:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8014dd0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014c3a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8014c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c40:	4798      	blx	r3
 8014c42:	6823      	ldr	r3, [r4, #0]
 8014c44:	4620      	mov	r0, r4
 8014c46:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8014dd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c4c:	4798      	blx	r3
 8014c4e:	f8bb 3000 	ldrh.w	r3, [fp]
 8014c52:	4f5c      	ldr	r7, [pc, #368]	@ (8014dc4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014c54:	9301      	str	r3, [sp, #4]
 8014c56:	f8ba 3000 	ldrh.w	r3, [sl]
 8014c5a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014c5e:	4640      	mov	r0, r8
 8014c60:	9302      	str	r3, [sp, #8]
 8014c62:	883b      	ldrh	r3, [r7, #0]
 8014c64:	9303      	str	r3, [sp, #12]
 8014c66:	4b58      	ldr	r3, [pc, #352]	@ (8014dc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014c68:	881a      	ldrh	r2, [r3, #0]
 8014c6a:	9305      	str	r3, [sp, #20]
 8014c6c:	9204      	str	r2, [sp, #16]
 8014c6e:	f00a f869 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014c72:	8038      	strh	r0, [r7, #0]
 8014c74:	4640      	mov	r0, r8
 8014c76:	f00a f899 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014c7a:	9b05      	ldr	r3, [sp, #20]
 8014c7c:	b280      	uxth	r0, r0
 8014c7e:	8018      	strh	r0, [r3, #0]
 8014c80:	4b52      	ldr	r3, [pc, #328]	@ (8014dcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d174      	bne.n	8014d72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014c88:	883b      	ldrh	r3, [r7, #0]
 8014c8a:	f8aa 0000 	strh.w	r0, [sl]
 8014c8e:	f8ab 3000 	strh.w	r3, [fp]
 8014c92:	4648      	mov	r0, r9
 8014c94:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8014c98:	f009 ff04 	bl	801eaa4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8014ca2:	4611      	mov	r1, r2
 8014ca4:	4628      	mov	r0, r5
 8014ca6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014caa:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014cae:	f7ef fdd1 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8014cb8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014cbc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	dd5c      	ble.n	8014d7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014cc4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	dd58      	ble.n	8014d7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014ccc:	462a      	mov	r2, r5
 8014cce:	ab0a      	add	r3, sp, #40	@ 0x28
 8014cd0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014cd4:	6851      	ldr	r1, [r2, #4]
 8014cd6:	c303      	stmia	r3!, {r0, r1}
 8014cd8:	4631      	mov	r1, r6
 8014cda:	a80a      	add	r0, sp, #40	@ 0x28
 8014cdc:	f7fe fd9c 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 8014ce0:	4b38      	ldr	r3, [pc, #224]	@ (8014dc4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014ce2:	2100      	movs	r1, #0
 8014ce4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ce8:	4b37      	ldr	r3, [pc, #220]	@ (8014dc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014cea:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8014cee:	aa0a      	add	r2, sp, #40	@ 0x28
 8014cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014cf4:	910c      	str	r1, [sp, #48]	@ 0x30
 8014cf6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8014cfa:	ab08      	add	r3, sp, #32
 8014cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d00:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d04:	4618      	mov	r0, r3
 8014d06:	a90c      	add	r1, sp, #48	@ 0x30
 8014d08:	f7fe fd86 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 8014d0c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d13c      	bne.n	8014d8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014d12:	2000      	movs	r0, #0
 8014d14:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8014d18:	2600      	movs	r6, #0
 8014d1a:	696b      	ldr	r3, [r5, #20]
 8014d1c:	a908      	add	r1, sp, #32
 8014d1e:	682a      	ldr	r2, [r5, #0]
 8014d20:	4628      	mov	r0, r5
 8014d22:	9305      	str	r3, [sp, #20]
 8014d24:	616e      	str	r6, [r5, #20]
 8014d26:	6892      	ldr	r2, [r2, #8]
 8014d28:	4790      	blx	r2
 8014d2a:	9b05      	ldr	r3, [sp, #20]
 8014d2c:	4652      	mov	r2, sl
 8014d2e:	4649      	mov	r1, r9
 8014d30:	616b      	str	r3, [r5, #20]
 8014d32:	4628      	mov	r0, r5
 8014d34:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8014d38:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8014d3c:	f7ef fd8a 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
 8014d40:	9a01      	ldr	r2, [sp, #4]
 8014d42:	4b23      	ldr	r3, [pc, #140]	@ (8014dd0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014d44:	4620      	mov	r0, r4
 8014d46:	801a      	strh	r2, [r3, #0]
 8014d48:	9a02      	ldr	r2, [sp, #8]
 8014d4a:	4b22      	ldr	r3, [pc, #136]	@ (8014dd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014d4c:	801a      	strh	r2, [r3, #0]
 8014d4e:	9a03      	ldr	r2, [sp, #12]
 8014d50:	4b1c      	ldr	r3, [pc, #112]	@ (8014dc4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014d52:	801a      	strh	r2, [r3, #0]
 8014d54:	4b1c      	ldr	r3, [pc, #112]	@ (8014dc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014d56:	9a04      	ldr	r2, [sp, #16]
 8014d58:	801a      	strh	r2, [r3, #0]
 8014d5a:	6823      	ldr	r3, [r4, #0]
 8014d5c:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8014d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d62:	4798      	blx	r3
 8014d64:	6823      	ldr	r3, [r4, #0]
 8014d66:	4620      	mov	r0, r4
 8014d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d6a:	4798      	blx	r3
 8014d6c:	b00f      	add	sp, #60	@ 0x3c
 8014d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d72:	883b      	ldrh	r3, [r7, #0]
 8014d74:	f8ab 0000 	strh.w	r0, [fp]
 8014d78:	f8aa 3000 	strh.w	r3, [sl]
 8014d7c:	e789      	b.n	8014c92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014d7e:	462a      	mov	r2, r5
 8014d80:	ab0a      	add	r3, sp, #40	@ 0x28
 8014d82:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014d86:	6851      	ldr	r1, [r2, #4]
 8014d88:	c303      	stmia	r3!, {r0, r1}
 8014d8a:	e7a9      	b.n	8014ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014d8c:	a807      	add	r0, sp, #28
 8014d8e:	f00a f94f 	bl	801f030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014d92:	4606      	mov	r6, r0
 8014d94:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8014d96:	6803      	ldr	r3, [r0, #0]
 8014d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d9a:	4798      	blx	r3
 8014d9c:	4286      	cmp	r6, r0
 8014d9e:	d1b8      	bne.n	8014d12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8014da0:	f7f3 fa9a 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 8014da4:	6803      	ldr	r3, [r0, #0]
 8014da6:	4606      	mov	r6, r0
 8014da8:	a807      	add	r0, sp, #28
 8014daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014dac:	9305      	str	r3, [sp, #20]
 8014dae:	f00a f93f 	bl	801f030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014db2:	9b05      	ldr	r3, [sp, #20]
 8014db4:	4601      	mov	r1, r0
 8014db6:	4630      	mov	r0, r6
 8014db8:	4798      	blx	r3
 8014dba:	f080 0001 	eor.w	r0, r0, #1
 8014dbe:	b2c0      	uxtb	r0, r0
 8014dc0:	e7a8      	b.n	8014d14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8014dc2:	bf00      	nop
 8014dc4:	24028764 	.word	0x24028764
 8014dc8:	24028766 	.word	0x24028766
 8014dcc:	24028768 	.word	0x24028768
 8014dd0:	2402876a 	.word	0x2402876a
 8014dd4:	2402876c 	.word	0x2402876c

08014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8014dd8:	4b07      	ldr	r3, [pc, #28]	@ (8014df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8014dda:	b510      	push	{r4, lr}
 8014ddc:	781b      	ldrb	r3, [r3, #0]
 8014dde:	4604      	mov	r4, r0
 8014de0:	b13b      	cbz	r3, 8014df2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014de2:	6803      	ldr	r3, [r0, #0]
 8014de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014de6:	4798      	blx	r3
 8014de8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014dea:	4283      	cmp	r3, r0
 8014dec:	d101      	bne.n	8014df2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014dee:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8014df0:	bd10      	pop	{r4, pc}
 8014df2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014df4:	e7fc      	b.n	8014df0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014df6:	bf00      	nop
 8014df8:	2402876e 	.word	0x2402876e

08014dfc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e00:	461d      	mov	r5, r3
 8014e02:	b08a      	sub	sp, #40	@ 0x28
 8014e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e08:	4690      	mov	r8, r2
 8014e0a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8014e0e:	2400      	movs	r4, #0
 8014e10:	4607      	mov	r7, r0
 8014e12:	fb06 8505 	mla	r5, r6, r5, r8
 8014e16:	9404      	str	r4, [sp, #16]
 8014e18:	f88d 4020 	strb.w	r4, [sp, #32]
 8014e1c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014e20:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014e24:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014e28:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014e2c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014e30:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014e34:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e38:	f7ff ffce 	bl	8014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014e3c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014e46:	a901      	add	r1, sp, #4
 8014e48:	9505      	str	r5, [sp, #20]
 8014e4a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014e4e:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8014e52:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8014e56:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8014e5a:	6803      	ldr	r3, [r0, #0]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	4798      	blx	r3
 8014e60:	b00a      	add	sp, #40	@ 0x28
 8014e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e66 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e6a:	b08b      	sub	sp, #44	@ 0x2c
 8014e6c:	2400      	movs	r4, #0
 8014e6e:	4691      	mov	r9, r2
 8014e70:	461d      	mov	r5, r3
 8014e72:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8014e76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014e7a:	4688      	mov	r8, r1
 8014e7c:	4607      	mov	r7, r0
 8014e7e:	9404      	str	r4, [sp, #16]
 8014e80:	fb06 9505 	mla	r5, r6, r5, r9
 8014e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014e88:	f7ff ffa6 	bl	8014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014e8c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014e90:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014e9a:	a901      	add	r1, sp, #4
 8014e9c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014ea0:	9505      	str	r5, [sp, #20]
 8014ea2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014ea6:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014eaa:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014eae:	f8cd 8010 	str.w	r8, [sp, #16]
 8014eb2:	f8ad 4020 	strh.w	r4, [sp, #32]
 8014eb6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014eba:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8014ebe:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8014ec2:	6803      	ldr	r3, [r0, #0]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	4798      	blx	r3
 8014ec8:	b00b      	add	sp, #44	@ 0x2c
 8014eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014ed0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ed4:	b08a      	sub	sp, #40	@ 0x28
 8014ed6:	4698      	mov	r8, r3
 8014ed8:	2300      	movs	r3, #0
 8014eda:	4606      	mov	r6, r0
 8014edc:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8014ee0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8014ee4:	2d0b      	cmp	r5, #11
 8014ee6:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8014eea:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8014eee:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8014ef2:	9304      	str	r3, [sp, #16]
 8014ef4:	d137      	bne.n	8014f66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8014ef6:	2380      	movs	r3, #128	@ 0x80
 8014ef8:	f88d 0020 	strb.w	r0, [sp, #32]
 8014efc:	4630      	mov	r0, r6
 8014efe:	9203      	str	r2, [sp, #12]
 8014f00:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014f04:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014f08:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014f0c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014f10:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014f14:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014f18:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f1c:	f7ff ff5c 	bl	8014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f20:	2c0b      	cmp	r4, #11
 8014f22:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8014f26:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014f2a:	bf94      	ite	ls
 8014f2c:	4b19      	ldrls	r3, [pc, #100]	@ (8014f94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014f2e:	2100      	movhi	r1, #0
 8014f30:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8014f34:	bf98      	it	ls
 8014f36:	5d19      	ldrbls	r1, [r3, r4]
 8014f38:	fb02 8307 	mla	r3, r2, r7, r8
 8014f3c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014f40:	10c9      	asrs	r1, r1, #3
 8014f42:	fb01 0003 	mla	r0, r1, r3, r0
 8014f46:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8014f4a:	a901      	add	r1, sp, #4
 8014f4c:	9005      	str	r0, [sp, #20]
 8014f4e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8014f52:	2300      	movs	r3, #0
 8014f54:	6870      	ldr	r0, [r6, #4]
 8014f56:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014f5a:	6803      	ldr	r3, [r0, #0]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	4798      	blx	r3
 8014f60:	b00a      	add	sp, #40	@ 0x28
 8014f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f66:	2d02      	cmp	r5, #2
 8014f68:	d109      	bne.n	8014f7e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8014f6a:	28ff      	cmp	r0, #255	@ 0xff
 8014f6c:	d105      	bne.n	8014f7a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014f6e:	f1bc 0f00 	cmp.w	ip, #0
 8014f72:	bf14      	ite	ne
 8014f74:	2340      	movne	r3, #64	@ 0x40
 8014f76:	2320      	moveq	r3, #32
 8014f78:	e7be      	b.n	8014ef8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f7a:	2340      	movs	r3, #64	@ 0x40
 8014f7c:	e7bc      	b.n	8014ef8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f7e:	28ff      	cmp	r0, #255	@ 0xff
 8014f80:	d105      	bne.n	8014f8e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014f82:	f1bc 0f00 	cmp.w	ip, #0
 8014f86:	bf14      	ite	ne
 8014f88:	2304      	movne	r3, #4
 8014f8a:	2301      	moveq	r3, #1
 8014f8c:	e7b4      	b.n	8014ef8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f8e:	2304      	movs	r3, #4
 8014f90:	e7b2      	b.n	8014ef8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f92:	bf00      	nop
 8014f94:	0803033c 	.word	0x0803033c

08014f98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f9c:	b08b      	sub	sp, #44	@ 0x2c
 8014f9e:	461d      	mov	r5, r3
 8014fa0:	2400      	movs	r4, #0
 8014fa2:	4688      	mov	r8, r1
 8014fa4:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8014fa8:	4693      	mov	fp, r2
 8014faa:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8014fae:	4607      	mov	r7, r0
 8014fb0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8014fb4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8014fb8:	9404      	str	r4, [sp, #16]
 8014fba:	bf14      	ite	ne
 8014fbc:	2308      	movne	r3, #8
 8014fbe:	2302      	moveq	r3, #2
 8014fc0:	fb05 b50a 	mla	r5, r5, sl, fp
 8014fc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014fc8:	f7ff ff06 	bl	8014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014fcc:	2e0b      	cmp	r6, #11
 8014fce:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8014fd2:	a901      	add	r1, sp, #4
 8014fd4:	bf98      	it	ls
 8014fd6:	4b13      	ldrls	r3, [pc, #76]	@ (8015024 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014fd8:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014fdc:	bf98      	it	ls
 8014fde:	5d9c      	ldrbls	r4, [r3, r6]
 8014fe0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8014fe4:	10e4      	asrs	r4, r4, #3
 8014fe6:	f8cd 8010 	str.w	r8, [sp, #16]
 8014fea:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014fee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8014ff2:	fb04 0405 	mla	r4, r4, r5, r0
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	9405      	str	r4, [sp, #20]
 8015000:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015004:	f88d 9020 	strb.w	r9, [sp, #32]
 8015008:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 801500c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015010:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8015014:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8015018:	6803      	ldr	r3, [r0, #0]
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	4798      	blx	r3
 801501e:	b00b      	add	sp, #44	@ 0x2c
 8015020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015024:	0803033c 	.word	0x0803033c

08015028 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801502c:	461e      	mov	r6, r3
 801502e:	4b0a      	ldr	r3, [pc, #40]	@ (8015058 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015030:	460f      	mov	r7, r1
 8015032:	4690      	mov	r8, r2
 8015034:	881d      	ldrh	r5, [r3, #0]
 8015036:	f7f3 f94f 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 801503a:	6803      	ldr	r3, [r0, #0]
 801503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801503e:	4798      	blx	r3
 8015040:	280b      	cmp	r0, #11
 8015042:	bf96      	itet	ls
 8015044:	4b05      	ldrls	r3, [pc, #20]	@ (801505c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015046:	2400      	movhi	r4, #0
 8015048:	5c1c      	ldrbls	r4, [r3, r0]
 801504a:	fb08 7005 	mla	r0, r8, r5, r7
 801504e:	10e4      	asrs	r4, r4, #3
 8015050:	fb04 6000 	mla	r0, r4, r0, r6
 8015054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015058:	2402876a 	.word	0x2402876a
 801505c:	0803033c 	.word	0x0803033c

08015060 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015062:	b08b      	sub	sp, #44	@ 0x2c
 8015064:	461f      	mov	r7, r3
 8015066:	4604      	mov	r4, r0
 8015068:	4616      	mov	r6, r2
 801506a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801506e:	2500      	movs	r5, #0
 8015070:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015074:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015078:	9504      	str	r5, [sp, #16]
 801507a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801507e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015082:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015086:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801508a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801508e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015092:	f88d 3020 	strb.w	r3, [sp, #32]
 8015096:	f7ff fe9f 	bl	8014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801509a:	463a      	mov	r2, r7
 801509c:	4631      	mov	r1, r6
 801509e:	4603      	mov	r3, r0
 80150a0:	4620      	mov	r0, r4
 80150a2:	f7ff ffc1 	bl	8015028 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80150a6:	4b0e      	ldr	r3, [pc, #56]	@ (80150e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80150a8:	9005      	str	r0, [sp, #20]
 80150aa:	881b      	ldrh	r3, [r3, #0]
 80150ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80150b0:	f7f3 f912 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 80150b4:	6803      	ldr	r3, [r0, #0]
 80150b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150b8:	4798      	blx	r3
 80150ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80150bc:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80150c0:	a901      	add	r1, sp, #4
 80150c2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80150c6:	9304      	str	r3, [sp, #16]
 80150c8:	6860      	ldr	r0, [r4, #4]
 80150ca:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80150ce:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80150d2:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80150d6:	6803      	ldr	r3, [r0, #0]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	4798      	blx	r3
 80150dc:	b00b      	add	sp, #44	@ 0x2c
 80150de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150e0:	2402876a 	.word	0x2402876a

080150e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80150e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150e6:	b08d      	sub	sp, #52	@ 0x34
 80150e8:	2501      	movs	r5, #1
 80150ea:	4604      	mov	r4, r0
 80150ec:	466b      	mov	r3, sp
 80150ee:	9503      	str	r5, [sp, #12]
 80150f0:	e883 0006 	stmia.w	r3, {r1, r2}
 80150f4:	2300      	movs	r3, #0
 80150f6:	f8bd 6000 	ldrh.w	r6, [sp]
 80150fa:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80150fe:	9306      	str	r3, [sp, #24]
 8015100:	6803      	ldr	r3, [r0, #0]
 8015102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015104:	4798      	blx	r3
 8015106:	463a      	mov	r2, r7
 8015108:	4631      	mov	r1, r6
 801510a:	4603      	mov	r3, r0
 801510c:	4620      	mov	r0, r4
 801510e:	f7ff ff8b 	bl	8015028 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015112:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015114:	9004      	str	r0, [sp, #16]
 8015116:	9307      	str	r3, [sp, #28]
 8015118:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801511c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015120:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015124:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015128:	4b0e      	ldr	r3, [pc, #56]	@ (8015164 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801512a:	881b      	ldrh	r3, [r3, #0]
 801512c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015130:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015134:	f7f3 f8d0 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 8015138:	6803      	ldr	r3, [r0, #0]
 801513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801513c:	4798      	blx	r3
 801513e:	23ff      	movs	r3, #255	@ 0xff
 8015140:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015144:	a903      	add	r1, sp, #12
 8015146:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801514a:	6860      	ldr	r0, [r4, #4]
 801514c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015150:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015154:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015158:	6803      	ldr	r3, [r0, #0]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	4798      	blx	r3
 801515e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8015160:	b00d      	add	sp, #52	@ 0x34
 8015162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015164:	2402876a 	.word	0x2402876a

08015168 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801516c:	b08c      	sub	sp, #48	@ 0x30
 801516e:	461e      	mov	r6, r3
 8015170:	2300      	movs	r3, #0
 8015172:	4604      	mov	r4, r0
 8015174:	466d      	mov	r5, sp
 8015176:	9306      	str	r3, [sp, #24]
 8015178:	6803      	ldr	r3, [r0, #0]
 801517a:	e885 0006 	stmia.w	r5, {r1, r2}
 801517e:	2501      	movs	r5, #1
 8015180:	f8bd 7000 	ldrh.w	r7, [sp]
 8015184:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015188:	9503      	str	r5, [sp, #12]
 801518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801518c:	4798      	blx	r3
 801518e:	4642      	mov	r2, r8
 8015190:	4639      	mov	r1, r7
 8015192:	4603      	mov	r3, r0
 8015194:	4620      	mov	r0, r4
 8015196:	f7ff ff47 	bl	8015028 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801519a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801519e:	9004      	str	r0, [sp, #16]
 80151a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80151a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80151a8:	9607      	str	r6, [sp, #28]
 80151aa:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80151ae:	4b10      	ldr	r3, [pc, #64]	@ (80151f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80151b0:	881b      	ldrh	r3, [r3, #0]
 80151b2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80151b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80151b8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80151bc:	f7f3 f88c 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 80151c0:	6803      	ldr	r3, [r0, #0]
 80151c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151c4:	4798      	blx	r3
 80151c6:	23ff      	movs	r3, #255	@ 0xff
 80151c8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80151cc:	a903      	add	r1, sp, #12
 80151ce:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80151d2:	6860      	ldr	r0, [r4, #4]
 80151d4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80151d8:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80151dc:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80151e0:	6803      	ldr	r3, [r0, #0]
 80151e2:	685b      	ldr	r3, [r3, #4]
 80151e4:	4798      	blx	r3
 80151e6:	4630      	mov	r0, r6
 80151e8:	b00c      	add	sp, #48	@ 0x30
 80151ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151ee:	bf00      	nop
 80151f0:	2402876a 	.word	0x2402876a

080151f4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80151f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151f6:	b085      	sub	sp, #20
 80151f8:	4605      	mov	r5, r0
 80151fa:	ac02      	add	r4, sp, #8
 80151fc:	e884 0006 	stmia.w	r4, {r1, r2}
 8015200:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015204:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015208:	f7ff fde6 	bl	8014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801520c:	4631      	mov	r1, r6
 801520e:	4603      	mov	r3, r0
 8015210:	463a      	mov	r2, r7
 8015212:	4628      	mov	r0, r5
 8015214:	f7ff ff08 	bl	8015028 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015218:	4a05      	ldr	r2, [pc, #20]	@ (8015230 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801521a:	682b      	ldr	r3, [r5, #0]
 801521c:	8812      	ldrh	r2, [r2, #0]
 801521e:	9200      	str	r2, [sp, #0]
 8015220:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8015222:	4603      	mov	r3, r0
 8015224:	4628      	mov	r0, r5
 8015226:	e894 0006 	ldmia.w	r4, {r1, r2}
 801522a:	47b0      	blx	r6
 801522c:	b005      	add	sp, #20
 801522e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015230:	2402876a 	.word	0x2402876a

08015234 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015234:	b570      	push	{r4, r5, r6, lr}
 8015236:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801523a:	4604      	mov	r4, r0
 801523c:	b19b      	cbz	r3, 8015266 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801523e:	2002      	movs	r0, #2
 8015240:	f7ed f94e 	bl	80024e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015244:	2300      	movs	r3, #0
 8015246:	4620      	mov	r0, r4
 8015248:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801524c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8015250:	6823      	ldr	r3, [r4, #0]
 8015252:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8015256:	f7ff fdbf 	bl	8014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801525a:	4601      	mov	r1, r0
 801525c:	4620      	mov	r0, r4
 801525e:	462b      	mov	r3, r5
 8015260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015264:	4718      	bx	r3
 8015266:	bd70      	pop	{r4, r5, r6, pc}

08015268 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8015268:	b570      	push	{r4, r5, r6, lr}
 801526a:	4605      	mov	r5, r0
 801526c:	460c      	mov	r4, r1
 801526e:	2003      	movs	r0, #3
 8015270:	b149      	cbz	r1, 8015286 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8015272:	f7ed f8d5 	bl	8002420 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015276:	6928      	ldr	r0, [r5, #16]
 8015278:	b168      	cbz	r0, 8015296 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801527a:	6803      	ldr	r3, [r0, #0]
 801527c:	2101      	movs	r1, #1
 801527e:	695b      	ldr	r3, [r3, #20]
 8015280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015284:	4718      	bx	r3
 8015286:	f7ed f8fb 	bl	8002480 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801528a:	6928      	ldr	r0, [r5, #16]
 801528c:	b118      	cbz	r0, 8015296 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801528e:	6803      	ldr	r3, [r0, #0]
 8015290:	4621      	mov	r1, r4
 8015292:	695b      	ldr	r3, [r3, #20]
 8015294:	e7f4      	b.n	8015280 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8015296:	bd70      	pop	{r4, r5, r6, pc}

08015298 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015298:	b538      	push	{r3, r4, r5, lr}
 801529a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801529e:	4604      	mov	r4, r0
 80152a0:	460d      	mov	r5, r1
 80152a2:	428b      	cmp	r3, r1
 80152a4:	d006      	beq.n	80152b4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80152a6:	6803      	ldr	r3, [r0, #0]
 80152a8:	b929      	cbnz	r1, 80152b6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80152aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80152ae:	4798      	blx	r3
 80152b0:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80152b4:	bd38      	pop	{r3, r4, r5, pc}
 80152b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80152ba:	e7f8      	b.n	80152ae <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080152bc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80152bc:	4b0d      	ldr	r3, [pc, #52]	@ (80152f4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80152be:	b510      	push	{r4, lr}
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	4604      	mov	r4, r0
 80152c4:	b95b      	cbnz	r3, 80152de <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80152c6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80152ca:	2b02      	cmp	r3, #2
 80152cc:	d007      	beq.n	80152de <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80152ce:	6840      	ldr	r0, [r0, #4]
 80152d0:	f000 f91a 	bl	8015508 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80152d4:	b118      	cbz	r0, 80152de <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80152d6:	6862      	ldr	r2, [r4, #4]
 80152d8:	7a53      	ldrb	r3, [r2, #9]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d0fc      	beq.n	80152d8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80152de:	f7ee f909 	bl	80034f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80152e2:	4620      	mov	r0, r4
 80152e4:	2100      	movs	r1, #0
 80152e6:	f7ff ffd7 	bl	8015298 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80152ea:	4620      	mov	r0, r4
 80152ec:	f7ff fd74 	bl	8014dd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80152f0:	bd10      	pop	{r4, pc}
 80152f2:	bf00      	nop
 80152f4:	2402876e 	.word	0x2402876e

080152f8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80152f8:	b570      	push	{r4, r5, r6, lr}
 80152fa:	4604      	mov	r4, r0
 80152fc:	6803      	ldr	r3, [r0, #0]
 80152fe:	b919      	cbnz	r1, 8015308 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8015300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015306:	4718      	bx	r3
 8015308:	2200      	movs	r2, #0
 801530a:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 801530e:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8015312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015314:	4798      	blx	r3
 8015316:	6863      	ldr	r3, [r4, #4]
 8015318:	2101      	movs	r1, #1
 801531a:	4605      	mov	r5, r0
 801531c:	4620      	mov	r0, r4
 801531e:	7299      	strb	r1, [r3, #10]
 8015320:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8015324:	f7ff ffb8 	bl	8015298 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015328:	4628      	mov	r0, r5
 801532a:	bd70      	pop	{r4, r5, r6, pc}

0801532c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801532c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015330:	1a13      	subs	r3, r2, r0
 8015332:	4258      	negs	r0, r3
 8015334:	4158      	adcs	r0, r3
 8015336:	4770      	bx	lr

08015338 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015338:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801533c:	1a9b      	subs	r3, r3, r2
 801533e:	2b00      	cmp	r3, #0
 8015340:	bfdc      	itt	le
 8015342:	6882      	ldrle	r2, [r0, #8]
 8015344:	189b      	addle	r3, r3, r2
 8015346:	2b01      	cmp	r3, #1
 8015348:	bfcc      	ite	gt
 801534a:	2000      	movgt	r0, #0
 801534c:	2001      	movle	r0, #1
 801534e:	4770      	bx	lr

08015350 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015350:	6902      	ldr	r2, [r0, #16]
 8015352:	6843      	ldr	r3, [r0, #4]
 8015354:	2024      	movs	r0, #36	@ 0x24
 8015356:	fb00 3002 	mla	r0, r0, r2, r3
 801535a:	4770      	bx	lr

0801535c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801535c:	6803      	ldr	r3, [r0, #0]
 801535e:	691b      	ldr	r3, [r3, #16]
 8015360:	4718      	bx	r3

08015362 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015362:	2301      	movs	r3, #1
 8015364:	b570      	push	{r4, r5, r6, lr}
 8015366:	7203      	strb	r3, [r0, #8]
 8015368:	4604      	mov	r4, r0
 801536a:	6840      	ldr	r0, [r0, #4]
 801536c:	6803      	ldr	r3, [r0, #0]
 801536e:	699b      	ldr	r3, [r3, #24]
 8015370:	4798      	blx	r3
 8015372:	6803      	ldr	r3, [r0, #0]
 8015374:	4605      	mov	r5, r0
 8015376:	2b40      	cmp	r3, #64	@ 0x40
 8015378:	d00c      	beq.n	8015394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801537a:	d810      	bhi.n	801539e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801537c:	2b04      	cmp	r3, #4
 801537e:	d01d      	beq.n	80153bc <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015380:	d804      	bhi.n	801538c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015382:	2b01      	cmp	r3, #1
 8015384:	d006      	beq.n	8015394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015386:	2b02      	cmp	r3, #2
 8015388:	d02c      	beq.n	80153e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801538a:	bd70      	pop	{r4, r5, r6, pc}
 801538c:	2b08      	cmp	r3, #8
 801538e:	d01d      	beq.n	80153cc <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015390:	2b20      	cmp	r3, #32
 8015392:	d1fa      	bne.n	801538a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015394:	6823      	ldr	r3, [r4, #0]
 8015396:	4620      	mov	r0, r4
 8015398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801539a:	4798      	blx	r3
 801539c:	e013      	b.n	80153c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801539e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80153a2:	d0f7      	beq.n	8015394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80153a4:	d804      	bhi.n	80153b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80153a6:	2b80      	cmp	r3, #128	@ 0x80
 80153a8:	d0f4      	beq.n	8015394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80153aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80153ae:	e7f0      	b.n	8015392 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80153b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80153b4:	d0ee      	beq.n	8015394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80153b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80153ba:	e7e5      	b.n	8015388 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80153bc:	6823      	ldr	r3, [r4, #0]
 80153be:	7f01      	ldrb	r1, [r0, #28]
 80153c0:	4620      	mov	r0, r4
 80153c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153c4:	4798      	blx	r3
 80153c6:	6823      	ldr	r3, [r4, #0]
 80153c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153ca:	e006      	b.n	80153da <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80153cc:	6823      	ldr	r3, [r4, #0]
 80153ce:	7f01      	ldrb	r1, [r0, #28]
 80153d0:	4620      	mov	r0, r4
 80153d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153d4:	4798      	blx	r3
 80153d6:	6823      	ldr	r3, [r4, #0]
 80153d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80153da:	4629      	mov	r1, r5
 80153dc:	4620      	mov	r0, r4
 80153de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153e2:	4718      	bx	r3
 80153e4:	6823      	ldr	r3, [r4, #0]
 80153e6:	4620      	mov	r0, r4
 80153e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153ea:	4798      	blx	r3
 80153ec:	e7f3      	b.n	80153d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080153ee <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80153ee:	4770      	bx	lr

080153f0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80153f0:	4770      	bx	lr

080153f2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80153f2:	4770      	bx	lr

080153f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80153f4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80153f8:	b510      	push	{r4, lr}
 80153fa:	1ad2      	subs	r2, r2, r3
 80153fc:	2a00      	cmp	r2, #0
 80153fe:	bfdc      	itt	le
 8015400:	6884      	ldrle	r4, [r0, #8]
 8015402:	1912      	addle	r2, r2, r4
 8015404:	2a01      	cmp	r2, #1
 8015406:	dd16      	ble.n	8015436 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015408:	6842      	ldr	r2, [r0, #4]
 801540a:	2424      	movs	r4, #36	@ 0x24
 801540c:	fb04 2303 	mla	r3, r4, r3, r2
 8015410:	f101 0220 	add.w	r2, r1, #32
 8015414:	f851 4b04 	ldr.w	r4, [r1], #4
 8015418:	4291      	cmp	r1, r2
 801541a:	f843 4b04 	str.w	r4, [r3], #4
 801541e:	d1f9      	bne.n	8015414 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8015420:	780a      	ldrb	r2, [r1, #0]
 8015422:	701a      	strb	r2, [r3, #0]
 8015424:	68c3      	ldr	r3, [r0, #12]
 8015426:	6882      	ldr	r2, [r0, #8]
 8015428:	f3bf 8f5b 	dmb	ish
 801542c:	3301      	adds	r3, #1
 801542e:	429a      	cmp	r2, r3
 8015430:	bfd8      	it	le
 8015432:	1a9b      	suble	r3, r3, r2
 8015434:	60c3      	str	r3, [r0, #12]
 8015436:	bd10      	pop	{r4, pc}

08015438 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015438:	6903      	ldr	r3, [r0, #16]
 801543a:	6882      	ldr	r2, [r0, #8]
 801543c:	f3bf 8f5b 	dmb	ish
 8015440:	3301      	adds	r3, #1
 8015442:	429a      	cmp	r2, r3
 8015444:	bfd8      	it	le
 8015446:	1a9b      	suble	r3, r3, r2
 8015448:	6103      	str	r3, [r0, #16]
 801544a:	4770      	bx	lr

0801544c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801544c:	b570      	push	{r4, r5, r6, lr}
 801544e:	4604      	mov	r4, r0
 8015450:	460e      	mov	r6, r1
 8015452:	6860      	ldr	r0, [r4, #4]
 8015454:	6803      	ldr	r3, [r0, #0]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	4798      	blx	r3
 801545a:	2800      	cmp	r0, #0
 801545c:	d1f9      	bne.n	8015452 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801545e:	4d0d      	ldr	r5, [pc, #52]	@ (8015494 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015460:	6828      	ldr	r0, [r5, #0]
 8015462:	6803      	ldr	r3, [r0, #0]
 8015464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015466:	4798      	blx	r3
 8015468:	f7ee f852 	bl	8003510 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801546c:	6828      	ldr	r0, [r5, #0]
 801546e:	2101      	movs	r1, #1
 8015470:	f7ff ff12 	bl	8015298 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015474:	6860      	ldr	r0, [r4, #4]
 8015476:	4631      	mov	r1, r6
 8015478:	6803      	ldr	r3, [r0, #0]
 801547a:	689b      	ldr	r3, [r3, #8]
 801547c:	4798      	blx	r3
 801547e:	6823      	ldr	r3, [r4, #0]
 8015480:	4620      	mov	r0, r4
 8015482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015484:	4798      	blx	r3
 8015486:	6828      	ldr	r0, [r5, #0]
 8015488:	6803      	ldr	r3, [r0, #0]
 801548a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801548e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015490:	4718      	bx	r3
 8015492:	bf00      	nop
 8015494:	24028770 	.word	0x24028770

08015498 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015498:	b508      	push	{r3, lr}
 801549a:	f7ee f82b 	bl	80034f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801549e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80154a2:	f7ee b82f 	b.w	8003504 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080154a6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80154a6:	b510      	push	{r4, lr}
 80154a8:	4604      	mov	r4, r0
 80154aa:	2114      	movs	r1, #20
 80154ac:	f014 fa64 	bl	8029978 <_ZdlPvj>
 80154b0:	4620      	mov	r0, r4
 80154b2:	bd10      	pop	{r4, pc}

080154b4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80154b4:	b570      	push	{r4, r5, r6, lr}
 80154b6:	4604      	mov	r4, r0
 80154b8:	6840      	ldr	r0, [r0, #4]
 80154ba:	6803      	ldr	r3, [r0, #0]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	4798      	blx	r3
 80154c0:	4605      	mov	r5, r0
 80154c2:	b930      	cbnz	r0, 80154d2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80154c4:	7a23      	ldrb	r3, [r4, #8]
 80154c6:	b123      	cbz	r3, 80154d2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80154c8:	6860      	ldr	r0, [r4, #4]
 80154ca:	6803      	ldr	r3, [r0, #0]
 80154cc:	695b      	ldr	r3, [r3, #20]
 80154ce:	4798      	blx	r3
 80154d0:	7225      	strb	r5, [r4, #8]
 80154d2:	6860      	ldr	r0, [r4, #4]
 80154d4:	6803      	ldr	r3, [r0, #0]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	4798      	blx	r3
 80154da:	b928      	cbnz	r0, 80154e8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80154dc:	6823      	ldr	r3, [r4, #0]
 80154de:	4620      	mov	r0, r4
 80154e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154e6:	4718      	bx	r3
 80154e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154ec:	f7ee b818 	b.w	8003520 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080154f0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80154f0:	b510      	push	{r4, lr}
 80154f2:	6082      	str	r2, [r0, #8]
 80154f4:	2200      	movs	r2, #0
 80154f6:	4c03      	ldr	r4, [pc, #12]	@ (8015504 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80154f8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80154fc:	e9c0 4100 	strd	r4, r1, [r0]
 8015500:	bd10      	pop	{r4, pc}
 8015502:	bf00      	nop
 8015504:	08030350 	.word	0x08030350

08015508 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015508:	6840      	ldr	r0, [r0, #4]
 801550a:	6803      	ldr	r3, [r0, #0]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	4718      	bx	r3

08015510 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8015510:	2300      	movs	r3, #0
 8015512:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8015514:	8503      	strh	r3, [r0, #40]	@ 0x28
 8015516:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8015518:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801551a:	6980      	ldr	r0, [r0, #24]
 801551c:	b110      	cbz	r0, 8015524 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 801551e:	6803      	ldr	r3, [r0, #0]
 8015520:	691b      	ldr	r3, [r3, #16]
 8015522:	4718      	bx	r3
 8015524:	4770      	bx	lr

08015526 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8015526:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 801552a:	4770      	bx	lr

0801552c <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	0e0b      	lsrs	r3, r1, #24
 8015530:	4604      	mov	r4, r0
 8015532:	460d      	mov	r5, r1
 8015534:	7783      	strb	r3, [r0, #30]
 8015536:	6803      	ldr	r3, [r0, #0]
 8015538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801553a:	4798      	blx	r3
 801553c:	6803      	ldr	r3, [r0, #0]
 801553e:	4629      	mov	r1, r5
 8015540:	689b      	ldr	r3, [r3, #8]
 8015542:	4798      	blx	r3
 8015544:	6823      	ldr	r3, [r4, #0]
 8015546:	4620      	mov	r0, r4
 8015548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801554a:	4798      	blx	r3
 801554c:	61a0      	str	r0, [r4, #24]
 801554e:	bd38      	pop	{r3, r4, r5, pc}

08015550 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8015550:	7741      	strb	r1, [r0, #29]
 8015552:	4770      	bx	lr

08015554 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8015554:	b530      	push	{r4, r5, lr}
 8015556:	460d      	mov	r5, r1
 8015558:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 801555c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801555e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015564:	682b      	ldr	r3, [r5, #0]
 8015566:	6023      	str	r3, [r4, #0]
 8015568:	bd30      	pop	{r4, r5, pc}

0801556a <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 801556a:	b538      	push	{r3, r4, r5, lr}
 801556c:	4604      	mov	r4, r0
 801556e:	1d03      	adds	r3, r0, #4
 8015570:	6808      	ldr	r0, [r1, #0]
 8015572:	2500      	movs	r5, #0
 8015574:	6849      	ldr	r1, [r1, #4]
 8015576:	c303      	stmia	r3!, {r0, r1}
 8015578:	6813      	ldr	r3, [r2, #0]
 801557a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801557e:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8015582:	6853      	ldr	r3, [r2, #4]
 8015584:	61a5      	str	r5, [r4, #24]
 8015586:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 801558a:	f007 f97b 	bl	801c884 <_ZN8touchgfx9Matrix3x35resetEv>
 801558e:	23ff      	movs	r3, #255	@ 0xff
 8015590:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8015594:	7763      	strb	r3, [r4, #29]
 8015596:	77a3      	strb	r3, [r4, #30]
 8015598:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801559c:	6323      	str	r3, [r4, #48]	@ 0x30
 801559e:	2301      	movs	r3, #1
 80155a0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80155a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080155a8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 80155a8:	ee70 7a41 	vsub.f32	s15, s0, s2
 80155ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80155b4:	4605      	mov	r5, r0
 80155b6:	ed2d 8b0a 	vpush	{d8-d12}
 80155ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155be:	b086      	sub	sp, #24
 80155c0:	eeb0 ba40 	vmov.f32	s22, s0
 80155c4:	6802      	ldr	r2, [r0, #0]
 80155c6:	eef0 ba60 	vmov.f32	s23, s1
 80155ca:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 80155ce:	eef0 aa41 	vmov.f32	s21, s2
 80155d2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80155d4:	eeb0 aa61 	vmov.f32	s20, s3
 80155d8:	eeb0 ca42 	vmov.f32	s24, s4
 80155dc:	eef0 ca62 	vmov.f32	s25, s5
 80155e0:	d112      	bne.n	8015608 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80155e2:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80155e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80155ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ee:	d10b      	bne.n	8015608 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80155f0:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80155f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80155f6:	3901      	subs	r1, #1
 80155f8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80155fc:	b006      	add	sp, #24
 80155fe:	ecbd 8b0a 	vpop	{d8-d12}
 8015602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015606:	4710      	bx	r2
 8015608:	23ff      	movs	r3, #255	@ 0xff
 801560a:	4628      	mov	r0, r5
 801560c:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8015610:	77ab      	strb	r3, [r5, #30]
 8015612:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8015614:	4798      	blx	r3
 8015616:	eeb0 0a4b 	vmov.f32	s0, s22
 801561a:	eef0 0a6b 	vmov.f32	s1, s23
 801561e:	4604      	mov	r4, r0
 8015620:	4640      	mov	r0, r8
 8015622:	f007 f9de 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015626:	eef0 8a40 	vmov.f32	s17, s0
 801562a:	ed8d 0a00 	vstr	s0, [sp]
 801562e:	eeb0 0a6a 	vmov.f32	s0, s21
 8015632:	eef0 9a60 	vmov.f32	s19, s1
 8015636:	edcd 0a01 	vstr	s1, [sp, #4]
 801563a:	4640      	mov	r0, r8
 801563c:	eef0 0a4a 	vmov.f32	s1, s20
 8015640:	f007 f9cf 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015644:	eef4 8a40 	vcmp.f32	s17, s0
 8015648:	eeb0 8a40 	vmov.f32	s16, s0
 801564c:	ed8d 0a02 	vstr	s0, [sp, #8]
 8015650:	eeb0 9a60 	vmov.f32	s18, s1
 8015654:	edcd 0a03 	vstr	s1, [sp, #12]
 8015658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801565c:	eef4 9a60 	vcmp.f32	s19, s1
 8015660:	bf0c      	ite	eq
 8015662:	2301      	moveq	r3, #1
 8015664:	2300      	movne	r3, #0
 8015666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566a:	eef4 8a40 	vcmp.f32	s17, s0
 801566e:	7463      	strb	r3, [r4, #17]
 8015670:	bf0c      	ite	eq
 8015672:	2301      	moveq	r3, #1
 8015674:	2300      	movne	r3, #0
 8015676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801567a:	74a3      	strb	r3, [r4, #18]
 801567c:	d024      	beq.n	80156c8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801567e:	eef4 9a60 	vcmp.f32	s19, s1
 8015682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015686:	d01f      	beq.n	80156c8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8015688:	ee3a aa6b 	vsub.f32	s20, s20, s23
 801568c:	4640      	mov	r0, r8
 801568e:	ee7a aacb 	vsub.f32	s21, s21, s22
 8015692:	eeb0 0a4b 	vmov.f32	s0, s22
 8015696:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 801569a:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 801569e:	eef0 0a6b 	vmov.f32	s1, s23
 80156a2:	eea7 0acc 	vfms.f32	s0, s15, s24
 80156a6:	eeec 0a87 	vfma.f32	s1, s25, s14
 80156aa:	f007 f99a 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80156ae:	ed8d 0a04 	vstr	s0, [sp, #16]
 80156b2:	ee30 0a68 	vsub.f32	s0, s0, s17
 80156b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80156ba:	edcd 0a05 	vstr	s1, [sp, #20]
 80156be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c2:	d121      	bne.n	8015708 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 80156c4:	2301      	movs	r3, #1
 80156c6:	74a3      	strb	r3, [r4, #18]
 80156c8:	7c63      	ldrb	r3, [r4, #17]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d051      	beq.n	8015772 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 80156ce:	ee39 7a69 	vsub.f32	s14, s18, s19
 80156d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80157c8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80156d6:	eef4 9ac9 	vcmpe.f32	s19, s18
 80156da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80156de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156e2:	edc4 7a08 	vstr	s15, [r4, #32]
 80156e6:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80156ea:	ee17 3a90 	vmov	r3, s15
 80156ee:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 80156f2:	b21a      	sxth	r2, r3
 80156f4:	ee17 3a90 	vmov	r3, s15
 80156f8:	bf48      	it	mi
 80156fa:	8122      	strhmi	r2, [r4, #8]
 80156fc:	b21b      	sxth	r3, r3
 80156fe:	bf56      	itet	pl
 8015700:	80e2      	strhpl	r2, [r4, #6]
 8015702:	80e3      	strhmi	r3, [r4, #6]
 8015704:	8123      	strhpl	r3, [r4, #8]
 8015706:	e02c      	b.n	8015762 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8015708:	ee70 0ae9 	vsub.f32	s1, s1, s19
 801570c:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8015710:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015714:	edc4 7a05 	vstr	s15, [r4, #20]
 8015718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801571c:	d102      	bne.n	8015724 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 801571e:	2301      	movs	r3, #1
 8015720:	7463      	strb	r3, [r4, #17]
 8015722:	e7d1      	b.n	80156c8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8015724:	eeb0 7a69 	vmov.f32	s14, s19
 8015728:	ee39 9a69 	vsub.f32	s18, s18, s19
 801572c:	ee38 8a68 	vsub.f32	s16, s16, s17
 8015730:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8015734:	ed84 7a06 	vstr	s14, [r4, #24]
 8015738:	ee89 7a27 	vdiv.f32	s14, s18, s15
 801573c:	ee38 8a47 	vsub.f32	s16, s16, s14
 8015740:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80157cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8015744:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8015748:	ed84 8a07 	vstr	s16, [r4, #28]
 801574c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015754:	edc4 7a08 	vstr	s15, [r4, #32]
 8015758:	d503      	bpl.n	8015762 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801575a:	eeb1 8a48 	vneg.f32	s16, s16
 801575e:	ed84 8a07 	vstr	s16, [r4, #28]
 8015762:	60e7      	str	r7, [r4, #12]
 8015764:	7426      	strb	r6, [r4, #16]
 8015766:	61ac      	str	r4, [r5, #24]
 8015768:	b006      	add	sp, #24
 801576a:	ecbd 8b0a 	vpop	{d8-d12}
 801576e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015772:	7ca3      	ldrb	r3, [r4, #18]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d0f4      	beq.n	8015762 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8015778:	ee38 7a68 	vsub.f32	s14, s16, s17
 801577c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80157c8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8015780:	eef4 8ac8 	vcmpe.f32	s17, s16
 8015784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801578c:	edc4 7a08 	vstr	s15, [r4, #32]
 8015790:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015794:	ee17 3a90 	vmov	r3, s15
 8015798:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 801579c:	b21a      	sxth	r2, r3
 801579e:	ee17 3a90 	vmov	r3, s15
 80157a2:	bf48      	it	mi
 80157a4:	8122      	strhmi	r2, [r4, #8]
 80157a6:	b21b      	sxth	r3, r3
 80157a8:	bf56      	itet	pl
 80157aa:	80e2      	strhpl	r2, [r4, #6]
 80157ac:	80e3      	strhmi	r3, [r4, #6]
 80157ae:	8123      	strhpl	r3, [r4, #8]
 80157b0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80157b4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80157b8:	1a9b      	subs	r3, r3, r2
 80157ba:	ee07 3a90 	vmov	s15, r3
 80157be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157c2:	edc4 7a07 	vstr	s15, [r4, #28]
 80157c6:	e7cc      	b.n	8015762 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80157c8:	447ffffe 	.word	0x447ffffe
 80157cc:	44800000 	.word	0x44800000

080157d0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80157d0:	b510      	push	{r4, lr}
 80157d2:	ed2d 8b02 	vpush	{d8}
 80157d6:	eef0 8a62 	vmov.f32	s17, s5
 80157da:	2100      	movs	r1, #0
 80157dc:	4604      	mov	r4, r0
 80157de:	eeb0 8a42 	vmov.f32	s16, s4
 80157e2:	f013 fe3b 	bl	802945c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80157e6:	eef0 7a68 	vmov.f32	s15, s17
 80157ea:	6823      	ldr	r3, [r4, #0]
 80157ec:	4620      	mov	r0, r4
 80157ee:	689b      	ldr	r3, [r3, #8]
 80157f0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80157f4:	ee17 2a90 	vmov	r2, s15
 80157f8:	eef0 7a48 	vmov.f32	s15, s16
 80157fc:	ecbd 8b02 	vpop	{d8}
 8015800:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015808:	ee17 1a90 	vmov	r1, s15
 801580c:	4718      	bx	r3

0801580e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 801580e:	b510      	push	{r4, lr}
 8015810:	ed2d 8b02 	vpush	{d8}
 8015814:	eef0 8a63 	vmov.f32	s17, s7
 8015818:	2100      	movs	r1, #0
 801581a:	4604      	mov	r4, r0
 801581c:	eeb0 8a43 	vmov.f32	s16, s6
 8015820:	f013 fede 	bl	80295e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8015824:	eef0 7a68 	vmov.f32	s15, s17
 8015828:	6823      	ldr	r3, [r4, #0]
 801582a:	4620      	mov	r0, r4
 801582c:	689b      	ldr	r3, [r3, #8]
 801582e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015832:	ee17 2a90 	vmov	r2, s15
 8015836:	eef0 7a48 	vmov.f32	s15, s16
 801583a:	ecbd 8b02 	vpop	{d8}
 801583e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015846:	ee17 1a90 	vmov	r1, s15
 801584a:	4718      	bx	r3

0801584c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 801584c:	b513      	push	{r0, r1, r4, lr}
 801584e:	4604      	mov	r4, r0
 8015850:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8015852:	f007 f8c6 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015856:	eef0 7a60 	vmov.f32	s15, s1
 801585a:	4620      	mov	r0, r4
 801585c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015860:	ee17 2a90 	vmov	r2, s15
 8015864:	eef0 7a40 	vmov.f32	s15, s0
 8015868:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801586c:	ee17 1a90 	vmov	r1, s15
 8015870:	b002      	add	sp, #8
 8015872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015876:	f013 bd4b 	b.w	8029310 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801587a:	b513      	push	{r0, r1, r4, lr}
 801587c:	4604      	mov	r4, r0
 801587e:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8015880:	f007 f8af 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015884:	eef0 7a60 	vmov.f32	s15, s1
 8015888:	4620      	mov	r0, r4
 801588a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801588e:	ee17 2a90 	vmov	r2, s15
 8015892:	eef0 7a40 	vmov.f32	s15, s0
 8015896:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801589a:	ee17 1a90 	vmov	r1, s15
 801589e:	b002      	add	sp, #8
 80158a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158a4:	f013 bd81 	b.w	80293aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080158a8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80158a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158aa:	2400      	movs	r4, #0
 80158ac:	9f07      	ldr	r7, [sp, #28]
 80158ae:	f04f 0e01 	mov.w	lr, #1
 80158b2:	4626      	mov	r6, r4
 80158b4:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80158b8:	4463      	add	r3, ip
 80158ba:	4563      	cmp	r3, ip
 80158bc:	d02d      	beq.n	801591a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80158be:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80158c2:	2d06      	cmp	r5, #6
 80158c4:	d8f9      	bhi.n	80158ba <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80158c6:	fa0e f505 	lsl.w	r5, lr, r5
 80158ca:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80158ce:	d10d      	bne.n	80158ec <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80158d0:	f015 0f10 	tst.w	r5, #16
 80158d4:	d117      	bne.n	8015906 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80158d6:	072d      	lsls	r5, r5, #28
 80158d8:	d5ef      	bpl.n	80158ba <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80158da:	3801      	subs	r0, #1
 80158dc:	b91e      	cbnz	r6, 80158e6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80158de:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80158e2:	682d      	ldr	r5, [r5, #0]
 80158e4:	600d      	str	r5, [r1, #0]
 80158e6:	b96c      	cbnz	r4, 8015904 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80158e8:	2601      	movs	r6, #1
 80158ea:	e7e6      	b.n	80158ba <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80158ec:	b926      	cbnz	r6, 80158f8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 80158ee:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 80158f2:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80158f6:	600b      	str	r3, [r1, #0]
 80158f8:	b924      	cbnz	r4, 8015904 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80158fa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80158fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015902:	6013      	str	r3, [r2, #0]
 8015904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015906:	3801      	subs	r0, #1
 8015908:	b91c      	cbnz	r4, 8015912 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801590a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 801590e:	6824      	ldr	r4, [r4, #0]
 8015910:	6014      	str	r4, [r2, #0]
 8015912:	2e00      	cmp	r6, #0
 8015914:	d1f6      	bne.n	8015904 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015916:	2401      	movs	r4, #1
 8015918:	e7cf      	b.n	80158ba <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801591a:	b90e      	cbnz	r6, 8015920 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 801591c:	2300      	movs	r3, #0
 801591e:	600b      	str	r3, [r1, #0]
 8015920:	2c00      	cmp	r4, #0
 8015922:	d1ef      	bne.n	8015904 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015924:	2300      	movs	r3, #0
 8015926:	e7ec      	b.n	8015902 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08015928 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8015928:	b538      	push	{r3, r4, r5, lr}
 801592a:	ed2d 8b0a 	vpush	{d8-d12}
 801592e:	eef0 ba40 	vmov.f32	s23, s0
 8015932:	4604      	mov	r4, r0
 8015934:	eeb0 ca60 	vmov.f32	s24, s1
 8015938:	460d      	mov	r5, r1
 801593a:	eef0 aa41 	vmov.f32	s21, s2
 801593e:	eeb0 ba61 	vmov.f32	s22, s3
 8015942:	eeb0 9a42 	vmov.f32	s18, s4
 8015946:	eef0 9a62 	vmov.f32	s19, s5
 801594a:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801594e:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8015952:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8015956:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801595a:	ee28 8a0a 	vmul.f32	s16, s16, s20
 801595e:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8015962:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8015966:	ee20 0a00 	vmul.f32	s0, s0, s0
 801596a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801596e:	f014 f909 	bl	8029b84 <sqrtf>
 8015972:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8015976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801597a:	d12e      	bne.n	80159da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 801597c:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8015980:	ee39 7acb 	vsub.f32	s14, s19, s22
 8015984:	eeb0 8a6a 	vmov.f32	s16, s21
 8015988:	eef0 8a4b 	vmov.f32	s17, s22
 801598c:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8015990:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8015994:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8015998:	eee7 8aca 	vfms.f32	s17, s15, s20
 801599c:	2d02      	cmp	r5, #2
 801599e:	dc2f      	bgt.n	8015a00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80159a0:	3501      	adds	r5, #1
 80159a2:	eef0 1a4b 	vmov.f32	s3, s22
 80159a6:	eeb0 1a6a 	vmov.f32	s2, s21
 80159aa:	4620      	mov	r0, r4
 80159ac:	4629      	mov	r1, r5
 80159ae:	eef0 2a68 	vmov.f32	s5, s17
 80159b2:	eeb0 2a48 	vmov.f32	s4, s16
 80159b6:	eef0 0a4c 	vmov.f32	s1, s24
 80159ba:	eeb0 0a6b 	vmov.f32	s0, s23
 80159be:	f7ff ffb3 	bl	8015928 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80159c2:	eef0 0a68 	vmov.f32	s1, s17
 80159c6:	eeb0 0a48 	vmov.f32	s0, s16
 80159ca:	4620      	mov	r0, r4
 80159cc:	f7ff ff55 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80159d0:	eeb0 ba68 	vmov.f32	s22, s17
 80159d4:	eef0 aa48 	vmov.f32	s21, s16
 80159d8:	e7b9      	b.n	801594e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80159da:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80159de:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80159e2:	ee78 8acc 	vsub.f32	s17, s17, s24
 80159e6:	ee28 7a27 	vmul.f32	s14, s16, s15
 80159ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80159ee:	ee87 8a00 	vdiv.f32	s16, s14, s0
 80159f2:	eec7 8a80 	vdiv.f32	s17, s15, s0
 80159f6:	ee3b 8a88 	vadd.f32	s16, s23, s16
 80159fa:	ee7c 8a28 	vadd.f32	s17, s24, s17
 80159fe:	e7cd      	b.n	801599c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8015a00:	eef0 0a68 	vmov.f32	s1, s17
 8015a04:	4620      	mov	r0, r4
 8015a06:	eeb0 0a48 	vmov.f32	s0, s16
 8015a0a:	f7ff ff36 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015a0e:	ecbd 8b0a 	vpop	{d8-d12}
 8015a12:	bd38      	pop	{r3, r4, r5, pc}

08015a14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8015a14:	b510      	push	{r4, lr}
 8015a16:	ed2d 8b0a 	vpush	{d8-d12}
 8015a1a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8015a1e:	4604      	mov	r4, r0
 8015a20:	eeb0 ca40 	vmov.f32	s24, s0
 8015a24:	2b02      	cmp	r3, #2
 8015a26:	eeb0 9a60 	vmov.f32	s18, s1
 8015a2a:	eef0 9a41 	vmov.f32	s19, s2
 8015a2e:	eef0 8a61 	vmov.f32	s17, s3
 8015a32:	eeb0 ba42 	vmov.f32	s22, s4
 8015a36:	eef0 ba62 	vmov.f32	s23, s5
 8015a3a:	eeb0 aa43 	vmov.f32	s20, s6
 8015a3e:	eef0 aa63 	vmov.f32	s21, s7
 8015a42:	eeb0 8a44 	vmov.f32	s16, s8
 8015a46:	eef0 ca64 	vmov.f32	s25, s9
 8015a4a:	d12c      	bne.n	8015aa6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8015a4c:	eef0 0a62 	vmov.f32	s1, s5
 8015a50:	eeb0 0a42 	vmov.f32	s0, s4
 8015a54:	f7ff ff11 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015a58:	ee79 9acb 	vsub.f32	s19, s19, s22
 8015a5c:	ee7a caec 	vsub.f32	s25, s21, s25
 8015a60:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8015a64:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8015a68:	ee69 9aac 	vmul.f32	s19, s19, s25
 8015a6c:	ee28 8a88 	vmul.f32	s16, s17, s16
 8015a70:	eef4 9ac8 	vcmpe.f32	s19, s16
 8015a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a78:	db0f      	blt.n	8015a9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8015a7a:	2101      	movs	r1, #1
 8015a7c:	eef0 2a6a 	vmov.f32	s5, s21
 8015a80:	eeb0 2a4a 	vmov.f32	s4, s20
 8015a84:	4620      	mov	r0, r4
 8015a86:	eef0 1a6b 	vmov.f32	s3, s23
 8015a8a:	eeb0 1a4b 	vmov.f32	s2, s22
 8015a8e:	eef0 0a49 	vmov.f32	s1, s18
 8015a92:	eeb0 0a4c 	vmov.f32	s0, s24
 8015a96:	f7ff ff47 	bl	8015928 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8015a9a:	eef0 0a6a 	vmov.f32	s1, s21
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	eeb0 0a4a 	vmov.f32	s0, s20
 8015aa4:	e035      	b.n	8015b12 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8015aa6:	2b01      	cmp	r3, #1
 8015aa8:	d138      	bne.n	8015b1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015aaa:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8015aae:	ee33 6a48 	vsub.f32	s12, s6, s16
 8015ab2:	ee71 7a42 	vsub.f32	s15, s2, s4
 8015ab6:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8015aba:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8015abe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015ac2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aca:	d027      	beq.n	8015b1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015acc:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8015ad0:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8015ad4:	eea4 8a83 	vfma.f32	s16, s9, s6
 8015ad8:	eee1 8a22 	vfma.f32	s17, s2, s5
 8015adc:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8015ae0:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8015ae4:	eee6 7a28 	vfma.f32	s15, s12, s17
 8015ae8:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8015aec:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8015af0:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8015af4:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8015af8:	ee3c ca40 	vsub.f32	s24, s24, s0
 8015afc:	ee39 9a60 	vsub.f32	s18, s18, s1
 8015b00:	ee29 9a09 	vmul.f32	s18, s18, s18
 8015b04:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8015b08:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b10:	db04      	blt.n	8015b1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015b12:	f7ff feb2 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b16:	ecbd 8b0a 	vpop	{d8-d12}
 8015b1a:	bd10      	pop	{r4, pc}
 8015b1c:	eef0 0a6b 	vmov.f32	s1, s23
 8015b20:	4620      	mov	r0, r4
 8015b22:	eeb0 0a4b 	vmov.f32	s0, s22
 8015b26:	f7ff fea8 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b2a:	e7b6      	b.n	8015a9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08015b2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8015b2c:	b510      	push	{r4, lr}
 8015b2e:	ed2d 8b0c 	vpush	{d8-d13}
 8015b32:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8015b36:	4604      	mov	r4, r0
 8015b38:	eeb0 9a40 	vmov.f32	s18, s0
 8015b3c:	eef0 9a60 	vmov.f32	s19, s1
 8015b40:	eef0 aa41 	vmov.f32	s21, s2
 8015b44:	eeb0 ba61 	vmov.f32	s22, s3
 8015b48:	b933      	cbnz	r3, 8015b58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8015b4a:	f7ff fe96 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b4e:	eef0 0a4b 	vmov.f32	s1, s22
 8015b52:	eeb0 0a6a 	vmov.f32	s0, s21
 8015b56:	e015      	b.n	8015b84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8015b58:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015b5c:	2b02      	cmp	r3, #2
 8015b5e:	ee71 8a40 	vsub.f32	s17, s2, s0
 8015b62:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8015b66:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015b6a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015b6e:	d10f      	bne.n	8015b90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8015b70:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8015b74:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015b78:	f7ff fe7f 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b7c:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8015b80:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8015b84:	4620      	mov	r0, r4
 8015b86:	f7ff fe78 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b8a:	ecbd 8b0c 	vpop	{d8-d13}
 8015b8e:	bd10      	pop	{r4, pc}
 8015b90:	f7ff fe73 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b94:	eef0 0a69 	vmov.f32	s1, s19
 8015b98:	eeb0 0a49 	vmov.f32	s0, s18
 8015b9c:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8015ccc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8015ba0:	eeb1 aa68 	vneg.f32	s20, s17
 8015ba4:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8015cd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8015ba8:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015bac:	4620      	mov	r0, r4
 8015bae:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015bb2:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8015cd4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8015bb6:	eddf ca48 	vldr	s25, [pc, #288]	@ 8015cd8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8015bba:	ed9f da48 	vldr	s26, [pc, #288]	@ 8015cdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8015bbe:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8015bc2:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8015bc6:	f7ff fe58 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015bca:	eef0 0a69 	vmov.f32	s1, s19
 8015bce:	eeb0 0a49 	vmov.f32	s0, s18
 8015bd2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8015ce0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015bdc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015be0:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8015be4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015be8:	f7ff fe47 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015bec:	eef0 0a69 	vmov.f32	s1, s19
 8015bf0:	eeb0 0a49 	vmov.f32	s0, s18
 8015bf4:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8015ce4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015bfe:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015c02:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8015c06:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8015c0a:	f7ff fe36 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c0e:	eef0 0a69 	vmov.f32	s1, s19
 8015c12:	eeb0 0a49 	vmov.f32	s0, s18
 8015c16:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8015ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015c20:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015c24:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8015c28:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8015c2c:	f7ff fe25 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c30:	ee79 0a88 	vadd.f32	s1, s19, s16
 8015c34:	ee39 0a28 	vadd.f32	s0, s18, s17
 8015c38:	4620      	mov	r0, r4
 8015c3a:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8015c3e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015c42:	f7ff fe1a 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c46:	eef0 0a69 	vmov.f32	s1, s19
 8015c4a:	eeb0 0a49 	vmov.f32	s0, s18
 8015c4e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8015cec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8015c52:	4620      	mov	r0, r4
 8015c54:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015c58:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015c5c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8015c60:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8015c64:	f7ff fe09 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c68:	eef0 0a69 	vmov.f32	s1, s19
 8015c6c:	eeb0 0a49 	vmov.f32	s0, s18
 8015c70:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8015cf0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8015c74:	4620      	mov	r0, r4
 8015c76:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015c7a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015c7e:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8015c82:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8015c86:	f7ff fdf8 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c8a:	eef0 0a69 	vmov.f32	s1, s19
 8015c8e:	eeb0 0a49 	vmov.f32	s0, s18
 8015c92:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8015cf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8015c96:	4620      	mov	r0, r4
 8015c98:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015c9c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015ca0:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8015ca4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015ca8:	f7ff fde7 	bl	801587a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015cac:	eef0 0a69 	vmov.f32	s1, s19
 8015cb0:	eeb0 0a49 	vmov.f32	s0, s18
 8015cb4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8015cf8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8015cb8:	4620      	mov	r0, r4
 8015cba:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015cbe:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015cc2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8015cc6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8015cca:	e73e      	b.n	8015b4a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8015ccc:	3d23d70a 	.word	0x3d23d70a
 8015cd0:	3e8f5c29 	.word	0x3e8f5c29
 8015cd4:	3f19999a 	.word	0x3f19999a
 8015cd8:	3f4ccccd 	.word	0x3f4ccccd
 8015cdc:	3f75c28f 	.word	0x3f75c28f
 8015ce0:	3e4ccccd 	.word	0x3e4ccccd
 8015ce4:	3ecccccd 	.word	0x3ecccccd
 8015ce8:	3f3851ec 	.word	0x3f3851ec
 8015cec:	3fa3d70a 	.word	0x3fa3d70a
 8015cf0:	3fcccccd 	.word	0x3fcccccd
 8015cf4:	3fe66666 	.word	0x3fe66666
 8015cf8:	3ffae148 	.word	0x3ffae148

08015cfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8015cfc:	b570      	push	{r4, r5, r6, lr}
 8015cfe:	ed2d 8b06 	vpush	{d8-d10}
 8015d02:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8015d06:	eef0 aa40 	vmov.f32	s21, s0
 8015d0a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8015d0e:	4604      	mov	r4, r0
 8015d10:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8015d14:	ee30 9a49 	vsub.f32	s18, s0, s18
 8015d18:	eeb0 aa60 	vmov.f32	s20, s1
 8015d1c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015d20:	eea9 0a09 	vfma.f32	s0, s18, s18
 8015d24:	f013 ff2e 	bl	8029b84 <sqrtf>
 8015d28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d30:	dd36      	ble.n	8015da0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8015d32:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8015d36:	2600      	movs	r6, #0
 8015d38:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8015d3c:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8015d40:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8015d44:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8015d48:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8015d4c:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8015d50:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8015d54:	ee70 9a28 	vadd.f32	s19, s0, s17
 8015d58:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8015d5c:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8015d60:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8015d64:	b1fd      	cbz	r5, 8015da6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8015d66:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8015d6a:	eef0 0a49 	vmov.f32	s1, s18
 8015d6e:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8015d72:	eeb0 0a69 	vmov.f32	s0, s19
 8015d76:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8015d7a:	4620      	mov	r0, r4
 8015d7c:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8015d80:	f7ff fd64 	bl	801584c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8015d84:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8015d88:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8015d8c:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8015d90:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8015d94:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8015d98:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8015d9c:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8015da0:	ecbd 8b06 	vpop	{d8-d10}
 8015da4:	bd70      	pop	{r4, r5, r6, pc}
 8015da6:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8015daa:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8015dae:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8015db2:	b16b      	cbz	r3, 8015dd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8015db4:	eef0 1a49 	vmov.f32	s3, s18
 8015db8:	4620      	mov	r0, r4
 8015dba:	eeb0 1a69 	vmov.f32	s2, s19
 8015dbe:	eef0 0a62 	vmov.f32	s1, s5
 8015dc2:	eeb0 0a42 	vmov.f32	s0, s4
 8015dc6:	f7ff feb1 	bl	8015b2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015dca:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8015dce:	e7db      	b.n	8015d88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8015dd0:	eef0 4a48 	vmov.f32	s9, s16
 8015dd4:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8015dd8:	eeb0 4a68 	vmov.f32	s8, s17
 8015ddc:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8015de0:	eef0 3a49 	vmov.f32	s7, s18
 8015de4:	4620      	mov	r0, r4
 8015de6:	eeb0 3a69 	vmov.f32	s6, s19
 8015dea:	f7ff fe13 	bl	8015a14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8015dee:	e7cb      	b.n	8015d88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08015df0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8015df0:	ee07 2a90 	vmov	s15, r2
 8015df4:	ee07 1a10 	vmov	s14, r1
 8015df8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015dfc:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8015e10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8015e00:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8015e04:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015e08:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015e0c:	f7ff bf76 	b.w	8015cfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015e10:	3d000000 	.word	0x3d000000

08015e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8015e14:	b538      	push	{r3, r4, r5, lr}
 8015e16:	ed2d 8b02 	vpush	{d8}
 8015e1a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8015e1e:	4604      	mov	r4, r0
 8015e20:	b31d      	cbz	r5, 8015e6a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8015e22:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8015e26:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8015e2a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8015e2e:	ee78 8a67 	vsub.f32	s17, s16, s15
 8015e32:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015e36:	eef0 0a68 	vmov.f32	s1, s17
 8015e3a:	f7ff fd07 	bl	801584c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8015e3e:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8015e42:	eef0 1a48 	vmov.f32	s3, s16
 8015e46:	4620      	mov	r0, r4
 8015e48:	eeb0 0a41 	vmov.f32	s0, s2
 8015e4c:	eef0 0a68 	vmov.f32	s1, s17
 8015e50:	f7ff fe6c 	bl	8015b2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015e54:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8015e58:	eef0 1a68 	vmov.f32	s3, s17
 8015e5c:	4620      	mov	r0, r4
 8015e5e:	eef0 0a48 	vmov.f32	s1, s16
 8015e62:	eeb0 0a41 	vmov.f32	s0, s2
 8015e66:	f7ff fe61 	bl	8015b2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	ecbd 8b02 	vpop	{d8}
 8015e70:	bd38      	pop	{r3, r4, r5, pc}

08015e72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8015e72:	b510      	push	{r4, lr}
 8015e74:	ed2d 8b02 	vpush	{d8}
 8015e78:	4604      	mov	r4, r0
 8015e7a:	eeb0 8a40 	vmov.f32	s16, s0
 8015e7e:	eef0 8a60 	vmov.f32	s17, s1
 8015e82:	f7ff ffc7 	bl	8015e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8015e86:	b9d0      	cbnz	r0, 8015ebe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8015e88:	4620      	mov	r0, r4
 8015e8a:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8015e8e:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8015e92:	eef0 0a68 	vmov.f32	s1, s17
 8015e96:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8015e9a:	eeb0 0a48 	vmov.f32	s0, s16
 8015e9e:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8015ea2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8015ea6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8015eaa:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8015eae:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8015eb2:	f7ff fdaf 	bl	8015a14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8015eb6:	2001      	movs	r0, #1
 8015eb8:	ecbd 8b02 	vpop	{d8}
 8015ebc:	bd10      	pop	{r4, pc}
 8015ebe:	2000      	movs	r0, #0
 8015ec0:	e7fa      	b.n	8015eb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08015ec2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8015ec2:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8015ec6:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8015eca:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8015ece:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8015ed2:	f7ff be2b 	b.w	8015b2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08015ed8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8015ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015edc:	b089      	sub	sp, #36	@ 0x24
 8015ede:	461c      	mov	r4, r3
 8015ee0:	4682      	mov	sl, r0
 8015ee2:	4615      	mov	r5, r2
 8015ee4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015ee8:	f10d 0820 	add.w	r8, sp, #32
 8015eec:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015eee:	9304      	str	r3, [sp, #16]
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	9105      	str	r1, [sp, #20]
 8015ef4:	9306      	str	r3, [sp, #24]
 8015ef6:	f848 3d04 	str.w	r3, [r8, #-4]!
 8015efa:	9b04      	ldr	r3, [sp, #16]
 8015efc:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8015f00:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8015f04:	9b05      	ldr	r3, [sp, #20]
 8015f06:	429d      	cmp	r5, r3
 8015f08:	d96d      	bls.n	8015fe6 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8015f0a:	3d01      	subs	r5, #1
 8015f0c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8015f10:	2b06      	cmp	r3, #6
 8015f12:	d8f7      	bhi.n	8015f04 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8015f14:	a201      	add	r2, pc, #4	@ (adr r2, 8015f1c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8015f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f1a:	bf00      	nop
 8015f1c:	08015f3b 	.word	0x08015f3b
 8015f20:	08015f05 	.word	0x08015f05
 8015f24:	08015f39 	.word	0x08015f39
 8015f28:	08015f5d 	.word	0x08015f5d
 8015f2c:	08015f5d 	.word	0x08015f5d
 8015f30:	08015f61 	.word	0x08015f61
 8015f34:	08015fa1 	.word	0x08015fa1
 8015f38:	3c02      	subs	r4, #2
 8015f3a:	4650      	mov	r0, sl
 8015f3c:	9400      	str	r4, [sp, #0]
 8015f3e:	462b      	mov	r3, r5
 8015f40:	4642      	mov	r2, r8
 8015f42:	a906      	add	r1, sp, #24
 8015f44:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8015f48:	f7ff fcae 	bl	80158a8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8015f4c:	eddd 0a07 	vldr	s1, [sp, #28]
 8015f50:	ed9d 0a06 	vldr	s0, [sp, #24]
 8015f54:	4630      	mov	r0, r6
 8015f56:	f7ff fed1 	bl	8015cfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015f5a:	e7d3      	b.n	8015f04 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8015f5c:	3c01      	subs	r4, #1
 8015f5e:	e7ec      	b.n	8015f3a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8015f60:	f1a4 0b04 	sub.w	fp, r4, #4
 8015f64:	3c02      	subs	r4, #2
 8015f66:	4650      	mov	r0, sl
 8015f68:	462b      	mov	r3, r5
 8015f6a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8015f6e:	f8cd b000 	str.w	fp, [sp]
 8015f72:	4642      	mov	r2, r8
 8015f74:	a906      	add	r1, sp, #24
 8015f76:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8015f7a:	f7ff fc95 	bl	80158a8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8015f7e:	eddd 2a07 	vldr	s5, [sp, #28]
 8015f82:	ed9d 2a06 	vldr	s4, [sp, #24]
 8015f86:	4630      	mov	r0, r6
 8015f88:	ed54 1a01 	vldr	s3, [r4, #-4]
 8015f8c:	ed14 1a02 	vldr	s2, [r4, #-8]
 8015f90:	edd4 0a01 	vldr	s1, [r4, #4]
 8015f94:	ed94 0a00 	vldr	s0, [r4]
 8015f98:	f7ff fc1a 	bl	80157d0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8015f9c:	465c      	mov	r4, fp
 8015f9e:	e7b1      	b.n	8015f04 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8015fa0:	f1a4 0b06 	sub.w	fp, r4, #6
 8015fa4:	3c02      	subs	r4, #2
 8015fa6:	4650      	mov	r0, sl
 8015fa8:	462b      	mov	r3, r5
 8015faa:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8015fae:	f8cd b000 	str.w	fp, [sp]
 8015fb2:	4642      	mov	r2, r8
 8015fb4:	a906      	add	r1, sp, #24
 8015fb6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8015fba:	f7ff fc75 	bl	80158a8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8015fbe:	eddd 3a07 	vldr	s7, [sp, #28]
 8015fc2:	ed9d 3a06 	vldr	s6, [sp, #24]
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	ed54 2a03 	vldr	s5, [r4, #-12]
 8015fcc:	ed14 2a04 	vldr	s4, [r4, #-16]
 8015fd0:	ed54 1a01 	vldr	s3, [r4, #-4]
 8015fd4:	ed14 1a02 	vldr	s2, [r4, #-8]
 8015fd8:	edd4 0a01 	vldr	s1, [r4, #4]
 8015fdc:	ed94 0a00 	vldr	s0, [r4]
 8015fe0:	f7ff fc15 	bl	801580e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8015fe4:	e7da      	b.n	8015f9c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8015fe6:	9b04      	ldr	r3, [sp, #16]
 8015fe8:	b113      	cbz	r3, 8015ff0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8015fea:	4630      	mov	r0, r6
 8015fec:	f7ff ff69 	bl	8015ec2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8015ff0:	b009      	add	sp, #36	@ 0x24
 8015ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff6:	bf00      	nop

08015ff8 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8015ff8:	eef0 7a60 	vmov.f32	s15, s1
 8015ffc:	6803      	ldr	r3, [r0, #0]
 8015ffe:	689b      	ldr	r3, [r3, #8]
 8016000:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016004:	ee17 2a90 	vmov	r2, s15
 8016008:	eef0 7a40 	vmov.f32	s15, s0
 801600c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016010:	ee17 1a90 	vmov	r1, s15
 8016014:	4718      	bx	r3
	...

08016018 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8016018:	4b04      	ldr	r3, [pc, #16]	@ (801602c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801601a:	b510      	push	{r4, lr}
 801601c:	4604      	mov	r4, r0
 801601e:	f840 3b14 	str.w	r3, [r0], #20
 8016022:	f002 fd0f 	bl	8018a44 <_ZN8touchgfx7OutlineD1Ev>
 8016026:	4620      	mov	r0, r4
 8016028:	bd10      	pop	{r4, pc}
 801602a:	bf00      	nop
 801602c:	08030e18 	.word	0x08030e18

08016030 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8016030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016034:	ed2d 8b04 	vpush	{d8-d9}
 8016038:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 801603c:	b0b5      	sub	sp, #212	@ 0xd4
 801603e:	4605      	mov	r5, r0
 8016040:	468b      	mov	fp, r1
 8016042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016046:	9206      	str	r2, [sp, #24]
 8016048:	461e      	mov	r6, r3
 801604a:	2400      	movs	r4, #0
 801604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016050:	f240 814f 	bls.w	80162f2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8016054:	23ff      	movs	r3, #255	@ 0xff
 8016056:	1d02      	adds	r2, r0, #4
 8016058:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 80162f8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 801605c:	f04f 0800 	mov.w	r8, #0
 8016060:	9300      	str	r3, [sp, #0]
 8016062:	af08      	add	r7, sp, #32
 8016064:	6981      	ldr	r1, [r0, #24]
 8016066:	a808      	add	r0, sp, #32
 8016068:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801606a:	eef0 9a49 	vmov.f32	s19, s18
 801606e:	f013 f803 	bl	8029078 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016072:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8016076:	4ba1      	ldr	r3, [pc, #644]	@ (80162fc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8016078:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801607c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016080:	2201      	movs	r2, #1
 8016082:	9308      	str	r3, [sp, #32]
 8016084:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8016088:	edd5 6a08 	vldr	s13, [r5, #32]
 801608c:	eeb0 8a49 	vmov.f32	s16, s18
 8016090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016094:	9325      	str	r3, [sp, #148]	@ 0x94
 8016096:	f04f 0300 	mov.w	r3, #0
 801609a:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 801609e:	7f6a      	ldrb	r2, [r5, #29]
 80160a0:	eef0 8a49 	vmov.f32	s17, s18
 80160a4:	bf48      	it	mi
 80160a6:	eef1 7a67 	vnegmi.f32	s15, s15
 80160aa:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 80160ae:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 80160b2:	46c1      	mov	r9, r8
 80160b4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80160b8:	f04f 0a01 	mov.w	sl, #1
 80160bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80160c0:	7fab      	ldrb	r3, [r5, #30]
 80160c2:	942a      	str	r4, [sp, #168]	@ 0xa8
 80160c4:	435a      	muls	r2, r3
 80160c6:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 80160ca:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80160ce:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 80160d2:	1c53      	adds	r3, r2, #1
 80160d4:	942b      	str	r4, [sp, #172]	@ 0xac
 80160d6:	942c      	str	r4, [sp, #176]	@ 0xb0
 80160d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80160dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80160e0:	942d      	str	r4, [sp, #180]	@ 0xb4
 80160e2:	942e      	str	r4, [sp, #184]	@ 0xb8
 80160e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80160e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160ec:	942f      	str	r4, [sp, #188]	@ 0xbc
 80160ee:	9430      	str	r4, [sp, #192]	@ 0xc0
 80160f0:	9431      	str	r4, [sp, #196]	@ 0xc4
 80160f2:	9432      	str	r4, [sp, #200]	@ 0xc8
 80160f4:	9433      	str	r4, [sp, #204]	@ 0xcc
 80160f6:	4644      	mov	r4, r8
 80160f8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80160fc:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8016100:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8016104:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8016108:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 801610c:	9b06      	ldr	r3, [sp, #24]
 801610e:	454b      	cmp	r3, r9
 8016110:	f000 80cc 	beq.w	80162ac <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8016114:	f109 0301 	add.w	r3, r9, #1
 8016118:	9305      	str	r3, [sp, #20]
 801611a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801611e:	2b06      	cmp	r3, #6
 8016120:	d839      	bhi.n	8016196 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016122:	e8df f003 	tbb	[pc, r3]
 8016126:	3b04      	.short	0x3b04
 8016128:	817c6f60 	.word	0x817c6f60
 801612c:	a0          	.byte	0xa0
 801612d:	00          	.byte	0x00
 801612e:	45c1      	cmp	r9, r8
 8016130:	d92b      	bls.n	801618a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8016132:	eef0 0a49 	vmov.f32	s1, s18
 8016136:	4638      	mov	r0, r7
 8016138:	eeb0 0a69 	vmov.f32	s0, s19
 801613c:	f7ff fdde 	bl	8015cfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016140:	4638      	mov	r0, r7
 8016142:	f7ff fe67 	bl	8015e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8016146:	4681      	mov	r9, r0
 8016148:	b9f8      	cbnz	r0, 801618a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801614a:	eef0 0a49 	vmov.f32	s1, s18
 801614e:	4638      	mov	r0, r7
 8016150:	eeb0 0a69 	vmov.f32	s0, s19
 8016154:	f7ff fe8d 	bl	8015e72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8016158:	4628      	mov	r0, r5
 801615a:	4623      	mov	r3, r4
 801615c:	9a05      	ldr	r2, [sp, #20]
 801615e:	4641      	mov	r1, r8
 8016160:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8016164:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8016168:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 801616c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8016170:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8016174:	e9cd b600 	strd	fp, r6, [sp]
 8016178:	f7ff feae 	bl	8015ed8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 801617c:	eef0 0a49 	vmov.f32	s1, s18
 8016180:	eeb0 0a69 	vmov.f32	s0, s19
 8016184:	4638      	mov	r0, r7
 8016186:	f7ff fe74 	bl	8015e72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 801618a:	eeb0 8a49 	vmov.f32	s16, s18
 801618e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016192:	eef0 8a69 	vmov.f32	s17, s19
 8016196:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801619a:	e7b7      	b.n	801610c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 801619c:	45c1      	cmp	r9, r8
 801619e:	d90d      	bls.n	80161bc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80161a0:	4638      	mov	r0, r7
 80161a2:	f7ff fe37 	bl	8015e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80161a6:	b948      	cbnz	r0, 80161bc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80161a8:	4623      	mov	r3, r4
 80161aa:	464a      	mov	r2, r9
 80161ac:	4641      	mov	r1, r8
 80161ae:	4628      	mov	r0, r5
 80161b0:	e9cd a702 	strd	sl, r7, [sp, #8]
 80161b4:	e9cd b600 	strd	fp, r6, [sp]
 80161b8:	f7ff fe8e 	bl	8015ed8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80161bc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80161c0:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80161c4:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80161c8:	3402      	adds	r4, #2
 80161ca:	edd3 8a00 	vldr	s17, [r3]
 80161ce:	46c8      	mov	r8, r9
 80161d0:	ed93 8a01 	vldr	s16, [r3, #4]
 80161d4:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80161d8:	eef0 9a68 	vmov.f32	s19, s17
 80161dc:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 80161e0:	eeb0 9a48 	vmov.f32	s18, s16
 80161e4:	e7d7      	b.n	8016196 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80161e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80161ea:	4638      	mov	r0, r7
 80161ec:	3402      	adds	r4, #2
 80161ee:	edd3 8a00 	vldr	s17, [r3]
 80161f2:	ed93 8a01 	vldr	s16, [r3, #4]
 80161f6:	eeb0 0a68 	vmov.f32	s0, s17
 80161fa:	eef0 0a48 	vmov.f32	s1, s16
 80161fe:	f7ff fd7d 	bl	8015cfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016202:	e7c8      	b.n	8016196 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016204:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016208:	edd3 8a00 	vldr	s17, [r3]
 801620c:	eef0 0a48 	vmov.f32	s1, s16
 8016210:	4638      	mov	r0, r7
 8016212:	eeb0 0a68 	vmov.f32	s0, s17
 8016216:	3401      	adds	r4, #1
 8016218:	f7ff fd70 	bl	8015cfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801621c:	e7bb      	b.n	8016196 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801621e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016222:	ed93 8a00 	vldr	s16, [r3]
 8016226:	e7f1      	b.n	801620c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8016228:	00a3      	lsls	r3, r4, #2
 801622a:	eef0 0a48 	vmov.f32	s1, s16
 801622e:	eeb0 0a68 	vmov.f32	s0, s17
 8016232:	4638      	mov	r0, r7
 8016234:	f103 0208 	add.w	r2, r3, #8
 8016238:	f103 090c 	add.w	r9, r3, #12
 801623c:	4433      	add	r3, r6
 801623e:	3404      	adds	r4, #4
 8016240:	4432      	add	r2, r6
 8016242:	44b1      	add	r9, r6
 8016244:	edd3 1a01 	vldr	s3, [r3, #4]
 8016248:	ed92 2a00 	vldr	s4, [r2]
 801624c:	edd9 2a00 	vldr	s5, [r9]
 8016250:	ed93 1a00 	vldr	s2, [r3]
 8016254:	9207      	str	r2, [sp, #28]
 8016256:	f7ff fabb 	bl	80157d0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801625a:	9a07      	ldr	r2, [sp, #28]
 801625c:	ed99 8a00 	vldr	s16, [r9]
 8016260:	edd2 8a00 	vldr	s17, [r2]
 8016264:	e797      	b.n	8016196 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016266:	00a3      	lsls	r3, r4, #2
 8016268:	eef0 0a48 	vmov.f32	s1, s16
 801626c:	eeb0 0a68 	vmov.f32	s0, s17
 8016270:	4638      	mov	r0, r7
 8016272:	f103 0210 	add.w	r2, r3, #16
 8016276:	f103 0914 	add.w	r9, r3, #20
 801627a:	4433      	add	r3, r6
 801627c:	3406      	adds	r4, #6
 801627e:	4432      	add	r2, r6
 8016280:	44b1      	add	r9, r6
 8016282:	edd3 2a03 	vldr	s5, [r3, #12]
 8016286:	ed92 3a00 	vldr	s6, [r2]
 801628a:	edd9 3a00 	vldr	s7, [r9]
 801628e:	ed93 2a02 	vldr	s4, [r3, #8]
 8016292:	edd3 1a01 	vldr	s3, [r3, #4]
 8016296:	ed93 1a00 	vldr	s2, [r3]
 801629a:	9207      	str	r2, [sp, #28]
 801629c:	f7ff fab7 	bl	801580e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80162a0:	9a07      	ldr	r2, [sp, #28]
 80162a2:	ed99 8a00 	vldr	s16, [r9]
 80162a6:	edd2 8a00 	vldr	s17, [r2]
 80162aa:	e774      	b.n	8016196 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80162ac:	9b06      	ldr	r3, [sp, #24]
 80162ae:	af08      	add	r7, sp, #32
 80162b0:	4543      	cmp	r3, r8
 80162b2:	d90f      	bls.n	80162d4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80162b4:	4638      	mov	r0, r7
 80162b6:	f7ff fdad 	bl	8015e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80162ba:	b958      	cbnz	r0, 80162d4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80162bc:	2301      	movs	r3, #1
 80162be:	9703      	str	r7, [sp, #12]
 80162c0:	f8cd b000 	str.w	fp, [sp]
 80162c4:	4641      	mov	r1, r8
 80162c6:	9a06      	ldr	r2, [sp, #24]
 80162c8:	4628      	mov	r0, r5
 80162ca:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80162ce:	4623      	mov	r3, r4
 80162d0:	f7ff fe02 	bl	8015ed8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80162d4:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80162d8:	4638      	mov	r0, r7
 80162da:	f012 ff61 	bl	80291a0 <_ZN8touchgfx6Canvas6renderEh>
 80162de:	4604      	mov	r4, r0
 80162e0:	4638      	mov	r0, r7
 80162e2:	f7ff fe99 	bl	8016018 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80162e6:	4620      	mov	r0, r4
 80162e8:	b035      	add	sp, #212	@ 0xd4
 80162ea:	ecbd 8b04 	vpop	{d8-d9}
 80162ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f2:	2401      	movs	r4, #1
 80162f4:	e7f7      	b.n	80162e6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 80162f6:	bf00      	nop
 80162f8:	00000000 	.word	0x00000000
 80162fc:	08030374 	.word	0x08030374

08016300 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8016300:	b510      	push	{r4, lr}
 8016302:	4604      	mov	r4, r0
 8016304:	f7ff fe88 	bl	8016018 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8016308:	21b0      	movs	r1, #176	@ 0xb0
 801630a:	4620      	mov	r0, r4
 801630c:	f013 fb34 	bl	8029978 <_ZdlPvj>
 8016310:	4620      	mov	r0, r4
 8016312:	bd10      	pop	{r4, pc}

08016314 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8016314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016318:	4698      	mov	r8, r3
 801631a:	23ff      	movs	r3, #255	@ 0xff
 801631c:	4607      	mov	r7, r0
 801631e:	4689      	mov	r9, r1
 8016320:	4692      	mov	sl, r2
 8016322:	1d02      	adds	r2, r0, #4
 8016324:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8016328:	2400      	movs	r4, #0
 801632a:	44ca      	add	sl, r9
 801632c:	ed2d 8b06 	vpush	{d8-d10}
 8016330:	b0aa      	sub	sp, #168	@ 0xa8
 8016332:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8016538 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8016336:	9300      	str	r3, [sp, #0]
 8016338:	eef0 8a48 	vmov.f32	s17, s16
 801633c:	6981      	ldr	r1, [r0, #24]
 801633e:	a80d      	add	r0, sp, #52	@ 0x34
 8016340:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8016342:	f012 fe99 	bl	8029078 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016346:	7f3b      	ldrb	r3, [r7, #28]
 8016348:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8016538 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801634c:	4628      	mov	r0, r5
 801634e:	1e5a      	subs	r2, r3, #1
 8016350:	eeb0 0a60 	vmov.f32	s0, s1
 8016354:	4253      	negs	r3, r2
 8016356:	4153      	adcs	r3, r2
 8016358:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 801635c:	f006 fb41 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016360:	eeb0 9a40 	vmov.f32	s18, s0
 8016364:	eef0 9a60 	vmov.f32	s19, s1
 8016368:	45ca      	cmp	sl, r9
 801636a:	f000 80cd 	beq.w	8016508 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 801636e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016372:	2b06      	cmp	r3, #6
 8016374:	d8f8      	bhi.n	8016368 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016376:	e8df f003 	tbb	[pc, r3]
 801637a:	0804      	.short	0x0804
 801637c:	58533f2a 	.word	0x58533f2a
 8016380:	8a          	.byte	0x8a
 8016381:	00          	.byte	0x00
 8016382:	a80d      	add	r0, sp, #52	@ 0x34
 8016384:	f012 feea 	bl	802915c <_ZN8touchgfx6Canvas5closeEv>
 8016388:	e7ee      	b.n	8016368 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801638a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801638e:	4628      	mov	r0, r5
 8016390:	ed93 8a01 	vldr	s16, [r3, #4]
 8016394:	edd3 8a00 	vldr	s17, [r3]
 8016398:	eef0 0a48 	vmov.f32	s1, s16
 801639c:	eeb0 0a68 	vmov.f32	s0, s17
 80163a0:	f006 fb1f 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80163a4:	a80d      	add	r0, sp, #52	@ 0x34
 80163a6:	eef0 7a60 	vmov.f32	s15, s1
 80163aa:	eeb0 9a40 	vmov.f32	s18, s0
 80163ae:	eef0 9a60 	vmov.f32	s19, s1
 80163b2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80163b6:	ee17 2a90 	vmov	r2, s15
 80163ba:	eef0 7a40 	vmov.f32	s15, s0
 80163be:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80163c2:	ee17 1a90 	vmov	r1, s15
 80163c6:	f012 ffa3 	bl	8029310 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80163ca:	3402      	adds	r4, #2
 80163cc:	e7cc      	b.n	8016368 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80163ce:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80163d2:	4628      	mov	r0, r5
 80163d4:	edd3 8a00 	vldr	s17, [r3]
 80163d8:	ed93 8a01 	vldr	s16, [r3, #4]
 80163dc:	eeb0 0a68 	vmov.f32	s0, s17
 80163e0:	eef0 0a48 	vmov.f32	s1, s16
 80163e4:	f006 fafd 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80163e8:	a80d      	add	r0, sp, #52	@ 0x34
 80163ea:	eeb0 9a40 	vmov.f32	s18, s0
 80163ee:	eef0 9a60 	vmov.f32	s19, s1
 80163f2:	f7ff fe01 	bl	8015ff8 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80163f6:	e7e8      	b.n	80163ca <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 80163f8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80163fc:	edd3 8a00 	vldr	s17, [r3]
 8016400:	eef0 0a48 	vmov.f32	s1, s16
 8016404:	4628      	mov	r0, r5
 8016406:	eeb0 0a68 	vmov.f32	s0, s17
 801640a:	3401      	adds	r4, #1
 801640c:	f006 fae9 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016410:	a80d      	add	r0, sp, #52	@ 0x34
 8016412:	eef0 9a60 	vmov.f32	s19, s1
 8016416:	eeb0 9a40 	vmov.f32	s18, s0
 801641a:	f7ff fded 	bl	8015ff8 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801641e:	e7a3      	b.n	8016368 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016420:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016424:	ed93 8a00 	vldr	s16, [r3]
 8016428:	e7ea      	b.n	8016400 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801642a:	1ca3      	adds	r3, r4, #2
 801642c:	4628      	mov	r0, r5
 801642e:	3404      	adds	r4, #4
 8016430:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8016434:	ed53 0a01 	vldr	s1, [r3, #-4]
 8016438:	ed13 0a02 	vldr	s0, [r3, #-8]
 801643c:	edd3 8a00 	vldr	s17, [r3]
 8016440:	ed93 8a01 	vldr	s16, [r3, #4]
 8016444:	f006 facd 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016448:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801644c:	eeb0 0a68 	vmov.f32	s0, s17
 8016450:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8016454:	eef0 0a48 	vmov.f32	s1, s16
 8016458:	4628      	mov	r0, r5
 801645a:	f006 fac2 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801645e:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8016462:	eef0 2a60 	vmov.f32	s5, s1
 8016466:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 801646a:	eeb0 2a40 	vmov.f32	s4, s0
 801646e:	a80d      	add	r0, sp, #52	@ 0x34
 8016470:	eeb0 aa40 	vmov.f32	s20, s0
 8016474:	eef0 aa60 	vmov.f32	s21, s1
 8016478:	eeb0 0a49 	vmov.f32	s0, s18
 801647c:	eef0 0a69 	vmov.f32	s1, s19
 8016480:	f7ff f9a6 	bl	80157d0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016484:	eef0 9a6a 	vmov.f32	s19, s21
 8016488:	eeb0 9a4a 	vmov.f32	s18, s20
 801648c:	e76c      	b.n	8016368 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801648e:	1d26      	adds	r6, r4, #4
 8016490:	4628      	mov	r0, r5
 8016492:	3406      	adds	r4, #6
 8016494:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016498:	ed56 0a03 	vldr	s1, [r6, #-12]
 801649c:	ed16 0a04 	vldr	s0, [r6, #-16]
 80164a0:	edd6 8a00 	vldr	s17, [r6]
 80164a4:	ed96 8a01 	vldr	s16, [r6, #4]
 80164a8:	f006 fa9b 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164ac:	ed8d 0a07 	vstr	s0, [sp, #28]
 80164b0:	4628      	mov	r0, r5
 80164b2:	ed16 0a02 	vldr	s0, [r6, #-8]
 80164b6:	edcd 0a08 	vstr	s1, [sp, #32]
 80164ba:	ed56 0a01 	vldr	s1, [r6, #-4]
 80164be:	f006 fa90 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164c2:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80164c6:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80164ca:	eeb0 0a68 	vmov.f32	s0, s17
 80164ce:	eef0 0a48 	vmov.f32	s1, s16
 80164d2:	4628      	mov	r0, r5
 80164d4:	f006 fa85 	bl	801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164d8:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 80164dc:	eeb0 3a40 	vmov.f32	s6, s0
 80164e0:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 80164e4:	eef0 3a60 	vmov.f32	s7, s1
 80164e8:	eddd 1a08 	vldr	s3, [sp, #32]
 80164ec:	eeb0 aa40 	vmov.f32	s20, s0
 80164f0:	ed9d 1a07 	vldr	s2, [sp, #28]
 80164f4:	eef0 aa60 	vmov.f32	s21, s1
 80164f8:	a80d      	add	r0, sp, #52	@ 0x34
 80164fa:	eef0 0a69 	vmov.f32	s1, s19
 80164fe:	eeb0 0a49 	vmov.f32	s0, s18
 8016502:	f7ff f984 	bl	801580e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016506:	e7bd      	b.n	8016484 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8016508:	7f7b      	ldrb	r3, [r7, #29]
 801650a:	a80d      	add	r0, sp, #52	@ 0x34
 801650c:	7fb9      	ldrb	r1, [r7, #30]
 801650e:	4359      	muls	r1, r3
 8016510:	1c4b      	adds	r3, r1, #1
 8016512:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8016516:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801651a:	f012 fe41 	bl	80291a0 <_ZN8touchgfx6Canvas6renderEh>
 801651e:	4b07      	ldr	r3, [pc, #28]	@ (801653c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8016520:	4604      	mov	r4, r0
 8016522:	a812      	add	r0, sp, #72	@ 0x48
 8016524:	930d      	str	r3, [sp, #52]	@ 0x34
 8016526:	f002 fa8d 	bl	8018a44 <_ZN8touchgfx7OutlineD1Ev>
 801652a:	4620      	mov	r0, r4
 801652c:	b02a      	add	sp, #168	@ 0xa8
 801652e:	ecbd 8b06 	vpop	{d8-d10}
 8016532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016536:	bf00      	nop
 8016538:	00000000 	.word	0x00000000
 801653c:	08030e18 	.word	0x08030e18

08016540 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8016540:	b410      	push	{r4}
 8016542:	7f04      	ldrb	r4, [r0, #28]
 8016544:	b11c      	cbz	r4, 801654e <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8016546:	f85d 4b04 	ldr.w	r4, [sp], #4
 801654a:	f7ff bee3 	b.w	8016314 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 801654e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016552:	f7ff bd6d 	b.w	8016030 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08016556 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8016556:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801655a:	4691      	mov	r9, r2
 801655c:	4602      	mov	r2, r0
 801655e:	4606      	mov	r6, r0
 8016560:	4688      	mov	r8, r1
 8016562:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8016566:	469a      	mov	sl, r3
 8016568:	ab02      	add	r3, sp, #8
 801656a:	af02      	add	r7, sp, #8
 801656c:	6851      	ldr	r1, [r2, #4]
 801656e:	c303      	stmia	r3!, {r0, r1}
 8016570:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016574:	2b00      	cmp	r3, #0
 8016576:	dd2f      	ble.n	80165d8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8016578:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 801657c:	2c00      	cmp	r4, #0
 801657e:	dd2b      	ble.n	80165d8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8016580:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016584:	441c      	add	r4, r3
 8016586:	b2a4      	uxth	r4, r4
 8016588:	b225      	sxth	r5, r4
 801658a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801658e:	42ab      	cmp	r3, r5
 8016590:	da22      	bge.n	80165d8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8016592:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016594:	464a      	mov	r2, r9
 8016596:	9701      	str	r7, [sp, #4]
 8016598:	4641      	mov	r1, r8
 801659a:	9300      	str	r3, [sp, #0]
 801659c:	4630      	mov	r0, r6
 801659e:	4653      	mov	r3, sl
 80165a0:	f7ff ffce 	bl	8016540 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80165a4:	b940      	cbnz	r0, 80165b8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80165a6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80165aa:	2b01      	cmp	r3, #1
 80165ac:	d004      	beq.n	80165b8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80165ae:	3301      	adds	r3, #1
 80165b0:	105b      	asrs	r3, r3, #1
 80165b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80165b6:	e7ec      	b.n	8016592 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 80165b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80165bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80165c0:	4413      	add	r3, r2
 80165c2:	b29b      	uxth	r3, r3
 80165c4:	441a      	add	r2, r3
 80165c6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80165ca:	b212      	sxth	r2, r2
 80165cc:	4295      	cmp	r5, r2
 80165ce:	dadc      	bge.n	801658a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80165d0:	1ae3      	subs	r3, r4, r3
 80165d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80165d6:	e7d8      	b.n	801658a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80165d8:	b004      	add	sp, #16
 80165da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080165de <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80165de:	0c0b      	lsrs	r3, r1, #16
 80165e0:	60c1      	str	r1, [r0, #12]
 80165e2:	7481      	strb	r1, [r0, #18]
 80165e4:	7403      	strb	r3, [r0, #16]
 80165e6:	0a0b      	lsrs	r3, r1, #8
 80165e8:	7443      	strb	r3, [r0, #17]
 80165ea:	4770      	bx	lr

080165ec <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80165ec:	f1a0 0008 	sub.w	r0, r0, #8
 80165f0:	e7f5      	b.n	80165de <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

080165f4 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80165f4:	b508      	push	{r3, lr}
 80165f6:	4b05      	ldr	r3, [pc, #20]	@ (801660c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80165f8:	6818      	ldr	r0, [r3, #0]
 80165fa:	6803      	ldr	r3, [r0, #0]
 80165fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016600:	4798      	blx	r3
 8016602:	1e43      	subs	r3, r0, #1
 8016604:	4258      	negs	r0, r3
 8016606:	4158      	adcs	r0, r3
 8016608:	bd08      	pop	{r3, pc}
 801660a:	bf00      	nop
 801660c:	24028770 	.word	0x24028770

08016610 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8016610:	4770      	bx	lr

08016612 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8016612:	3808      	subs	r0, #8
 8016614:	4770      	bx	lr

08016616 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8016616:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801661a:	b410      	push	{r4}
 801661c:	188c      	adds	r4, r1, r2
 801661e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016622:	68c2      	ldr	r2, [r0, #12]
 8016624:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8016628:	4620      	mov	r0, r4
 801662a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801662e:	f7ed b9d5 	b.w	80039dc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08016632 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8016632:	f7ed b9af 	b.w	8003994 <_ZN8touchgfx5paint8tearDownEv>

08016636 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8016636:	b510      	push	{r4, lr}
 8016638:	4604      	mov	r4, r0
 801663a:	2114      	movs	r1, #20
 801663c:	f013 f99c 	bl	8029978 <_ZdlPvj>
 8016640:	4620      	mov	r0, r4
 8016642:	bd10      	pop	{r4, pc}

08016644 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8016644:	f1a0 0008 	sub.w	r0, r0, #8
 8016648:	e7f5      	b.n	8016636 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0801664c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 801664c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016654:	4411      	add	r1, r2
 8016656:	7c42      	ldrb	r2, [r0, #17]
 8016658:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 801665c:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8016660:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8016664:	2a00      	cmp	r2, #0
 8016666:	f000 8084 	beq.w	8016772 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 801666a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801666e:	ed90 7a08 	vldr	s14, [r0, #32]
 8016672:	42a2      	cmp	r2, r4
 8016674:	68c3      	ldr	r3, [r0, #12]
 8016676:	db20      	blt.n	80166ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8016678:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801667c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8016680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016684:	bfc8      	it	gt
 8016686:	2200      	movgt	r2, #0
 8016688:	589a      	ldr	r2, [r3, r2]
 801668a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801668e:	7c03      	ldrb	r3, [r0, #16]
 8016690:	fa5f fc82 	uxtb.w	ip, r2
 8016694:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8016698:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801669c:	440e      	add	r6, r1
 801669e:	b36b      	cbz	r3, 80166fc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80166a0:	2dff      	cmp	r5, #255	@ 0xff
 80166a2:	d12b      	bne.n	80166fc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80166a4:	42b1      	cmp	r1, r6
 80166a6:	f080 8204 	bcs.w	8016ab2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80166aa:	f881 c000 	strb.w	ip, [r1]
 80166ae:	3103      	adds	r1, #3
 80166b0:	f801 7c02 	strb.w	r7, [r1, #-2]
 80166b4:	f801 4c01 	strb.w	r4, [r1, #-1]
 80166b8:	e7f4      	b.n	80166a4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 80166ba:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80166be:	42a7      	cmp	r7, r4
 80166c0:	dc08      	bgt.n	80166d4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 80166c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80166c6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80166ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ce:	bfd8      	it	le
 80166d0:	2200      	movle	r2, #0
 80166d2:	e7d9      	b.n	8016688 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80166d4:	1aa2      	subs	r2, r4, r2
 80166d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80166da:	ee07 2a90 	vmov	s15, r2
 80166de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80166ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166ee:	ee17 2a90 	vmov	r2, s15
 80166f2:	bfd8      	it	le
 80166f4:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 80166f8:	0092      	lsls	r2, r2, #2
 80166fa:	e7c5      	b.n	8016688 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80166fc:	0e12      	lsrs	r2, r2, #24
 80166fe:	4355      	muls	r5, r2
 8016700:	1c6a      	adds	r2, r5, #1
 8016702:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8016706:	122d      	asrs	r5, r5, #8
 8016708:	43e8      	mvns	r0, r5
 801670a:	b2ad      	uxth	r5, r5
 801670c:	fb1c fc05 	smulbb	ip, ip, r5
 8016710:	b2c0      	uxtb	r0, r0
 8016712:	fb17 f705 	smulbb	r7, r7, r5
 8016716:	fb14 f505 	smulbb	r5, r4, r5
 801671a:	fa1f fc8c 	uxth.w	ip, ip
 801671e:	b2bf      	uxth	r7, r7
 8016720:	b2ad      	uxth	r5, r5
 8016722:	428e      	cmp	r6, r1
 8016724:	f101 0303 	add.w	r3, r1, #3
 8016728:	f240 81c3 	bls.w	8016ab2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801672c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8016730:	fb02 c200 	mla	r2, r2, r0, ip
 8016734:	b292      	uxth	r2, r2
 8016736:	1c51      	adds	r1, r2, #1
 8016738:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801673c:	1212      	asrs	r2, r2, #8
 801673e:	f803 2c03 	strb.w	r2, [r3, #-3]
 8016742:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8016746:	fb02 7200 	mla	r2, r2, r0, r7
 801674a:	b292      	uxth	r2, r2
 801674c:	1c51      	adds	r1, r2, #1
 801674e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016752:	1212      	asrs	r2, r2, #8
 8016754:	f803 2c02 	strb.w	r2, [r3, #-2]
 8016758:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801675c:	fb02 5200 	mla	r2, r2, r0, r5
 8016760:	b292      	uxth	r2, r2
 8016762:	1c51      	adds	r1, r2, #1
 8016764:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016768:	4619      	mov	r1, r3
 801676a:	1212      	asrs	r2, r2, #8
 801676c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016770:	e7d7      	b.n	8016722 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8016772:	7c82      	ldrb	r2, [r0, #18]
 8016774:	2a00      	cmp	r2, #0
 8016776:	d047      	beq.n	8016808 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8016778:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801677c:	ee07 2a10 	vmov	s14, r2
 8016780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016784:	ee07 3a90 	vmov	s15, r3
 8016788:	461a      	mov	r2, r3
 801678a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801678e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016796:	f200 808e 	bhi.w	80168b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 801679a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801679e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80167a2:	68c7      	ldr	r7, [r0, #12]
 80167a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80167a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167ac:	ee06 6a90 	vmov	s13, r6
 80167b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80167b4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80167b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167bc:	bf4a      	itet	mi
 80167be:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 80167c2:	4634      	movpl	r4, r6
 80167c4:	ee17 4a90 	vmovmi	r4, s15
 80167c8:	edd0 7a08 	vldr	s15, [r0, #32]
 80167cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80167d0:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80167d4:	448e      	add	lr, r1
 80167d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167da:	bfc8      	it	gt
 80167dc:	2200      	movgt	r2, #0
 80167de:	58bf      	ldr	r7, [r7, r2]
 80167e0:	7c02      	ldrb	r2, [r0, #16]
 80167e2:	fa5f f987 	uxtb.w	r9, r7
 80167e6:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80167ea:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80167ee:	b31a      	cbz	r2, 8016838 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80167f0:	2dff      	cmp	r5, #255	@ 0xff
 80167f2:	d121      	bne.n	8016838 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80167f4:	4571      	cmp	r1, lr
 80167f6:	d25d      	bcs.n	80168b4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80167f8:	f881 9000 	strb.w	r9, [r1]
 80167fc:	3103      	adds	r1, #3
 80167fe:	f801 8c02 	strb.w	r8, [r1, #-2]
 8016802:	f801 cc01 	strb.w	ip, [r1, #-1]
 8016806:	e7f5      	b.n	80167f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8016808:	ee07 4a90 	vmov	s15, r4
 801680c:	ed90 7a06 	vldr	s14, [r0, #24]
 8016810:	edd0 6a05 	vldr	s13, [r0, #20]
 8016814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801681c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016820:	edd0 7a08 	vldr	s15, [r0, #32]
 8016824:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801682c:	bf44      	itt	mi
 801682e:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8016832:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8016836:	e7a5      	b.n	8016784 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8016838:	0e3f      	lsrs	r7, r7, #24
 801683a:	436f      	muls	r7, r5
 801683c:	1c7a      	adds	r2, r7, #1
 801683e:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8016842:	1212      	asrs	r2, r2, #8
 8016844:	ea6f 0a02 	mvn.w	sl, r2
 8016848:	b292      	uxth	r2, r2
 801684a:	fb19 f902 	smulbb	r9, r9, r2
 801684e:	fa5f fa8a 	uxtb.w	sl, sl
 8016852:	fb18 f802 	smulbb	r8, r8, r2
 8016856:	fb1c fc02 	smulbb	ip, ip, r2
 801685a:	fa1f f989 	uxth.w	r9, r9
 801685e:	fa1f f888 	uxth.w	r8, r8
 8016862:	fa1f fc8c 	uxth.w	ip, ip
 8016866:	458e      	cmp	lr, r1
 8016868:	f101 0203 	add.w	r2, r1, #3
 801686c:	d922      	bls.n	80168b4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801686e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8016872:	fb01 910a 	mla	r1, r1, sl, r9
 8016876:	b289      	uxth	r1, r1
 8016878:	1c4f      	adds	r7, r1, #1
 801687a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801687e:	1209      	asrs	r1, r1, #8
 8016880:	f802 1c03 	strb.w	r1, [r2, #-3]
 8016884:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8016888:	fb01 810a 	mla	r1, r1, sl, r8
 801688c:	b289      	uxth	r1, r1
 801688e:	1c4f      	adds	r7, r1, #1
 8016890:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016894:	1209      	asrs	r1, r1, #8
 8016896:	f802 1c02 	strb.w	r1, [r2, #-2]
 801689a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801689e:	fb01 c10a 	mla	r1, r1, sl, ip
 80168a2:	b289      	uxth	r1, r1
 80168a4:	1c4f      	adds	r7, r1, #1
 80168a6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80168aa:	1209      	asrs	r1, r1, #8
 80168ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80168b0:	4611      	mov	r1, r2
 80168b2:	e7d8      	b.n	8016866 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 80168b4:	191a      	adds	r2, r3, r4
 80168b6:	4433      	add	r3, r6
 80168b8:	b21b      	sxth	r3, r3
 80168ba:	4293      	cmp	r3, r2
 80168bc:	f340 80f9 	ble.w	8016ab2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80168c0:	edd0 7a07 	vldr	s15, [r0, #28]
 80168c4:	ee06 2a90 	vmov	s13, r2
 80168c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80168cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80168d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80168d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168d8:	f340 80b0 	ble.w	8016a3c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 80168dc:	ee06 3a10 	vmov	s12, r3
 80168e0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80168e4:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8016ab8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 80168e8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80168ec:	eef4 7ac6 	vcmpe.f32	s15, s12
 80168f0:	ed90 6a08 	vldr	s12, [r0, #32]
 80168f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168f8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80168fc:	bfd6      	itet	le
 80168fe:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8016902:	469c      	movgt	ip, r3
 8016904:	ee17 ca90 	vmovle	ip, s15
 8016908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690c:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8016abc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8016910:	ebac 0202 	sub.w	r2, ip, r2
 8016914:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8016918:	eee6 7a07 	vfma.f32	s15, s12, s14
 801691c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016920:	188c      	adds	r4, r1, r2
 8016922:	7c02      	ldrb	r2, [r0, #16]
 8016924:	b1d2      	cbz	r2, 801695c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8016926:	2dff      	cmp	r5, #255	@ 0xff
 8016928:	d118      	bne.n	801695c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801692a:	42a1      	cmp	r1, r4
 801692c:	d261      	bcs.n	80169f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801692e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016932:	68c6      	ldr	r6, [r0, #12]
 8016934:	3103      	adds	r1, #3
 8016936:	ee17 7a10 	vmov	r7, s14
 801693a:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 801693e:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8016942:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016946:	7856      	ldrb	r6, [r2, #1]
 8016948:	f801 6c02 	strb.w	r6, [r1, #-2]
 801694c:	7892      	ldrb	r2, [r2, #2]
 801694e:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016952:	ed90 7a08 	vldr	s14, [r0, #32]
 8016956:	ee77 7a87 	vadd.f32	s15, s15, s14
 801695a:	e7e6      	b.n	801692a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 801695c:	68c2      	ldr	r2, [r0, #12]
 801695e:	428c      	cmp	r4, r1
 8016960:	f101 0e03 	add.w	lr, r1, #3
 8016964:	d945      	bls.n	80169f2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8016966:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801696a:	ee17 9a10 	vmov	r9, s14
 801696e:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8016972:	f898 7003 	ldrb.w	r7, [r8, #3]
 8016976:	fb07 f605 	mul.w	r6, r7, r5
 801697a:	1c77      	adds	r7, r6, #1
 801697c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8016980:	123f      	asrs	r7, r7, #8
 8016982:	b2b9      	uxth	r1, r7
 8016984:	43ff      	mvns	r7, r7
 8016986:	b2fe      	uxtb	r6, r7
 8016988:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 801698c:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8016990:	fb19 f906 	smulbb	r9, r9, r6
 8016994:	fb07 9701 	mla	r7, r7, r1, r9
 8016998:	b2bf      	uxth	r7, r7
 801699a:	f107 0901 	add.w	r9, r7, #1
 801699e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80169a2:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80169a6:	fb19 f906 	smulbb	r9, r9, r6
 80169aa:	123f      	asrs	r7, r7, #8
 80169ac:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80169b0:	f898 7001 	ldrb.w	r7, [r8, #1]
 80169b4:	fb07 9701 	mla	r7, r7, r1, r9
 80169b8:	b2bf      	uxth	r7, r7
 80169ba:	f107 0901 	add.w	r9, r7, #1
 80169be:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80169c2:	123f      	asrs	r7, r7, #8
 80169c4:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80169c8:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80169cc:	f898 8002 	ldrb.w	r8, [r8, #2]
 80169d0:	fb17 f606 	smulbb	r6, r7, r6
 80169d4:	fb08 6601 	mla	r6, r8, r1, r6
 80169d8:	b2b6      	uxth	r6, r6
 80169da:	1c71      	adds	r1, r6, #1
 80169dc:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80169e0:	4671      	mov	r1, lr
 80169e2:	1236      	asrs	r6, r6, #8
 80169e4:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80169e8:	ed90 7a08 	vldr	s14, [r0, #32]
 80169ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80169f0:	e7b5      	b.n	801695e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80169f2:	4563      	cmp	r3, ip
 80169f4:	dd5d      	ble.n	8016ab2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80169f6:	edd0 7a08 	vldr	s15, [r0, #32]
 80169fa:	eba3 030c 	sub.w	r3, r3, ip
 80169fe:	68c4      	ldr	r4, [r0, #12]
 8016a00:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8016a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a0c:	7c00      	ldrb	r0, [r0, #16]
 8016a0e:	440b      	add	r3, r1
 8016a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a14:	bfd8      	it	le
 8016a16:	2200      	movle	r2, #0
 8016a18:	58a2      	ldr	r2, [r4, r2]
 8016a1a:	b2d4      	uxtb	r4, r2
 8016a1c:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8016a20:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8016a24:	b160      	cbz	r0, 8016a40 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8016a26:	2dff      	cmp	r5, #255	@ 0xff
 8016a28:	d10a      	bne.n	8016a40 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8016a2a:	4299      	cmp	r1, r3
 8016a2c:	d241      	bcs.n	8016ab2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8016a2e:	700c      	strb	r4, [r1, #0]
 8016a30:	3103      	adds	r1, #3
 8016a32:	f801 cc02 	strb.w	ip, [r1, #-2]
 8016a36:	f801 7c01 	strb.w	r7, [r1, #-1]
 8016a3a:	e7f6      	b.n	8016a2a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8016a3c:	4694      	mov	ip, r2
 8016a3e:	e7da      	b.n	80169f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8016a40:	0e12      	lsrs	r2, r2, #24
 8016a42:	436a      	muls	r2, r5
 8016a44:	1c55      	adds	r5, r2, #1
 8016a46:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8016a4a:	122d      	asrs	r5, r5, #8
 8016a4c:	43ee      	mvns	r6, r5
 8016a4e:	b2ad      	uxth	r5, r5
 8016a50:	fb14 f405 	smulbb	r4, r4, r5
 8016a54:	b2f6      	uxtb	r6, r6
 8016a56:	fb1c f005 	smulbb	r0, ip, r5
 8016a5a:	fb17 f505 	smulbb	r5, r7, r5
 8016a5e:	b2a4      	uxth	r4, r4
 8016a60:	b280      	uxth	r0, r0
 8016a62:	b2ad      	uxth	r5, r5
 8016a64:	428b      	cmp	r3, r1
 8016a66:	f101 0203 	add.w	r2, r1, #3
 8016a6a:	d922      	bls.n	8016ab2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8016a6c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8016a70:	fb01 4106 	mla	r1, r1, r6, r4
 8016a74:	b289      	uxth	r1, r1
 8016a76:	1c4f      	adds	r7, r1, #1
 8016a78:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016a7c:	1209      	asrs	r1, r1, #8
 8016a7e:	f802 1c03 	strb.w	r1, [r2, #-3]
 8016a82:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8016a86:	fb01 0106 	mla	r1, r1, r6, r0
 8016a8a:	b289      	uxth	r1, r1
 8016a8c:	1c4f      	adds	r7, r1, #1
 8016a8e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016a92:	1209      	asrs	r1, r1, #8
 8016a94:	f802 1c02 	strb.w	r1, [r2, #-2]
 8016a98:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8016a9c:	fb01 5106 	mla	r1, r1, r6, r5
 8016aa0:	b289      	uxth	r1, r1
 8016aa2:	1c4f      	adds	r7, r1, #1
 8016aa4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016aa8:	1209      	asrs	r1, r1, #8
 8016aaa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016aae:	4611      	mov	r1, r2
 8016ab0:	e7d8      	b.n	8016a64 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8016ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ab6:	bf00      	nop
 8016ab8:	447ffffe 	.word	0x447ffffe
 8016abc:	00000000 	.word	0x00000000

08016ac0 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8016ac0:	4770      	bx	lr

08016ac2 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8016ac2:	4770      	bx	lr

08016ac4 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8016ac4:	b510      	push	{r4, lr}
 8016ac6:	4604      	mov	r4, r0
 8016ac8:	2124      	movs	r1, #36	@ 0x24
 8016aca:	f012 ff55 	bl	8029978 <_ZdlPvj>
 8016ace:	4620      	mov	r0, r4
 8016ad0:	bd10      	pop	{r4, pc}
	...

08016ad4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016ad4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016ad6:	6803      	ldr	r3, [r0, #0]
 8016ad8:	460d      	mov	r5, r1
 8016ada:	4604      	mov	r4, r0
 8016adc:	4601      	mov	r1, r0
 8016ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016ae0:	a802      	add	r0, sp, #8
 8016ae2:	4798      	blx	r3
 8016ae4:	6828      	ldr	r0, [r5, #0]
 8016ae6:	6869      	ldr	r1, [r5, #4]
 8016ae8:	466b      	mov	r3, sp
 8016aea:	c303      	stmia	r3!, {r0, r1}
 8016aec:	4668      	mov	r0, sp
 8016aee:	4619      	mov	r1, r3
 8016af0:	f7fc fe92 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 8016af4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016af6:	b188      	cbz	r0, 8016b1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016af8:	6803      	ldr	r3, [r0, #0]
 8016afa:	1d21      	adds	r1, r4, #4
 8016afc:	68db      	ldr	r3, [r3, #12]
 8016afe:	4798      	blx	r3
 8016b00:	b160      	cbz	r0, 8016b1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016b02:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	dd08      	ble.n	8016b1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016b0a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8016b0e:	2d00      	cmp	r5, #0
 8016b10:	dd04      	ble.n	8016b1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016b12:	4a2b      	ldr	r2, [pc, #172]	@ (8016bc0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8016b14:	7812      	ldrb	r2, [r2, #0]
 8016b16:	b11a      	cbz	r2, 8016b20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8016b18:	2a01      	cmp	r2, #1
 8016b1a:	d029      	beq.n	8016b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8016b1c:	b004      	add	sp, #16
 8016b1e:	bd70      	pop	{r4, r5, r6, pc}
 8016b20:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016b24:	441d      	add	r5, r3
 8016b26:	b2ad      	uxth	r5, r5
 8016b28:	b22e      	sxth	r6, r5
 8016b2a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8016b2e:	42b3      	cmp	r3, r6
 8016b30:	daf4      	bge.n	8016b1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016b32:	6823      	ldr	r3, [r4, #0]
 8016b34:	4669      	mov	r1, sp
 8016b36:	4620      	mov	r0, r4
 8016b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b3a:	4798      	blx	r3
 8016b3c:	b940      	cbnz	r0, 8016b50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8016b3e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8016b42:	2b01      	cmp	r3, #1
 8016b44:	d004      	beq.n	8016b50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8016b46:	3301      	adds	r3, #1
 8016b48:	105b      	asrs	r3, r3, #1
 8016b4a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b4e:	e7f0      	b.n	8016b32 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016b50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016b54:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016b58:	4413      	add	r3, r2
 8016b5a:	b29b      	uxth	r3, r3
 8016b5c:	441a      	add	r2, r3
 8016b5e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016b62:	b212      	sxth	r2, r2
 8016b64:	4296      	cmp	r6, r2
 8016b66:	dae0      	bge.n	8016b2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8016b68:	1aeb      	subs	r3, r5, r3
 8016b6a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b6e:	e7dc      	b.n	8016b2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8016b70:	f8bd 5000 	ldrh.w	r5, [sp]
 8016b74:	441d      	add	r5, r3
 8016b76:	b2ad      	uxth	r5, r5
 8016b78:	b22e      	sxth	r6, r5
 8016b7a:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016b7e:	42b3      	cmp	r3, r6
 8016b80:	dacc      	bge.n	8016b1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016b82:	6823      	ldr	r3, [r4, #0]
 8016b84:	4669      	mov	r1, sp
 8016b86:	4620      	mov	r0, r4
 8016b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b8a:	4798      	blx	r3
 8016b8c:	b940      	cbnz	r0, 8016ba0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8016b8e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016b92:	2b01      	cmp	r3, #1
 8016b94:	d004      	beq.n	8016ba0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8016b96:	3301      	adds	r3, #1
 8016b98:	105b      	asrs	r3, r3, #1
 8016b9a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016b9e:	e7f0      	b.n	8016b82 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8016ba0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016ba4:	f8bd 3000 	ldrh.w	r3, [sp]
 8016ba8:	4413      	add	r3, r2
 8016baa:	b29b      	uxth	r3, r3
 8016bac:	441a      	add	r2, r3
 8016bae:	f8ad 3000 	strh.w	r3, [sp]
 8016bb2:	b212      	sxth	r2, r2
 8016bb4:	4296      	cmp	r6, r2
 8016bb6:	dae0      	bge.n	8016b7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8016bb8:	1aeb      	subs	r3, r5, r3
 8016bba:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016bbe:	e7dc      	b.n	8016b7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8016bc0:	24028768 	.word	0x24028768

08016bc4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016bc6:	6803      	ldr	r3, [r0, #0]
 8016bc8:	4604      	mov	r4, r0
 8016bca:	4601      	mov	r1, r0
 8016bcc:	4668      	mov	r0, sp
 8016bce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016bd0:	4798      	blx	r3
 8016bd2:	2100      	movs	r1, #0
 8016bd4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016bd8:	4668      	mov	r0, sp
 8016bda:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016bde:	9102      	str	r1, [sp, #8]
 8016be0:	a902      	add	r1, sp, #8
 8016be2:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016be6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016bea:	f7fc fe15 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 8016bee:	6823      	ldr	r3, [r4, #0]
 8016bf0:	4669      	mov	r1, sp
 8016bf2:	4620      	mov	r0, r4
 8016bf4:	691b      	ldr	r3, [r3, #16]
 8016bf6:	4798      	blx	r3
 8016bf8:	b004      	add	sp, #16
 8016bfa:	bd10      	pop	{r4, pc}

08016bfc <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016bfc:	2101      	movs	r1, #1
 8016bfe:	2200      	movs	r2, #0
 8016c00:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016c04:	490a      	ldr	r1, [pc, #40]	@ (8016c30 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8016c06:	8082      	strh	r2, [r0, #4]
 8016c08:	6001      	str	r1, [r0, #0]
 8016c0a:	21ff      	movs	r1, #255	@ 0xff
 8016c0c:	80c2      	strh	r2, [r0, #6]
 8016c0e:	8102      	strh	r2, [r0, #8]
 8016c10:	8142      	strh	r2, [r0, #10]
 8016c12:	8182      	strh	r2, [r0, #12]
 8016c14:	81c2      	strh	r2, [r0, #14]
 8016c16:	8202      	strh	r2, [r0, #16]
 8016c18:	8242      	strh	r2, [r0, #18]
 8016c1a:	61c2      	str	r2, [r0, #28]
 8016c1c:	8402      	strh	r2, [r0, #32]
 8016c1e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8016c20:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016c24:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8016c28:	6282      	str	r2, [r0, #40]	@ 0x28
 8016c2a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016c2e:	4770      	bx	lr
 8016c30:	0803042c 	.word	0x0803042c

08016c34 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8016c34:	6301      	str	r1, [r0, #48]	@ 0x30
 8016c36:	4770      	bx	lr

08016c38 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8016c38:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016c3a:	4770      	bx	lr

08016c3c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8016c3c:	6341      	str	r1, [r0, #52]	@ 0x34
 8016c3e:	4770      	bx	lr

08016c40 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8016c40:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8016c42:	4770      	bx	lr

08016c44 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8016c44:	4770      	bx	lr

08016c46 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8016c46:	4608      	mov	r0, r1
 8016c48:	4770      	bx	lr

08016c4a <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8016c4a:	b530      	push	{r4, r5, lr}
 8016c4c:	460d      	mov	r5, r1
 8016c4e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8016c50:	8949      	ldrh	r1, [r1, #10]
 8016c52:	b085      	sub	sp, #20
 8016c54:	4604      	mov	r4, r0
 8016c56:	1ac9      	subs	r1, r1, r3
 8016c58:	6803      	ldr	r3, [r0, #0]
 8016c5a:	f10d 0206 	add.w	r2, sp, #6
 8016c5e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8016c62:	b209      	sxth	r1, r1
 8016c64:	4798      	blx	r3
 8016c66:	b1a0      	cbz	r0, 8016c92 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016c68:	792b      	ldrb	r3, [r5, #4]
 8016c6a:	b993      	cbnz	r3, 8016c92 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016c6c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8016c70:	b178      	cbz	r0, 8016c92 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016c72:	6803      	ldr	r3, [r0, #0]
 8016c74:	68db      	ldr	r3, [r3, #12]
 8016c76:	4798      	blx	r3
 8016c78:	b158      	cbz	r0, 8016c92 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016c7a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8016c7e:	aa02      	add	r2, sp, #8
 8016c80:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8016c84:	4621      	mov	r1, r4
 8016c86:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016c8a:	9503      	str	r5, [sp, #12]
 8016c8c:	6803      	ldr	r3, [r0, #0]
 8016c8e:	689b      	ldr	r3, [r3, #8]
 8016c90:	4798      	blx	r3
 8016c92:	b005      	add	sp, #20
 8016c94:	bd30      	pop	{r4, r5, pc}

08016c96 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8016c96:	428a      	cmp	r2, r1
 8016c98:	bfbc      	itt	lt
 8016c9a:	460b      	movlt	r3, r1
 8016c9c:	4611      	movlt	r1, r2
 8016c9e:	b510      	push	{r4, lr}
 8016ca0:	bfb8      	it	lt
 8016ca2:	461a      	movlt	r2, r3
 8016ca4:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8016ca8:	4604      	mov	r4, r0
 8016caa:	428b      	cmp	r3, r1
 8016cac:	d103      	bne.n	8016cb6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8016cae:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8016cb2:	4293      	cmp	r3, r2
 8016cb4:	d011      	beq.n	8016cda <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8016cb6:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 8016cba:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8016cbe:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 8016cc2:	f005 fad8 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016cc6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016cca:	f005 fad4 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016cce:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cd6:	f005 bace 	b.w	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016cda:	bd10      	pop	{r4, pc}

08016cdc <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8016cdc:	428a      	cmp	r2, r1
 8016cde:	bfbc      	itt	lt
 8016ce0:	460b      	movlt	r3, r1
 8016ce2:	4611      	movlt	r1, r2
 8016ce4:	b510      	push	{r4, lr}
 8016ce6:	bfb8      	it	lt
 8016ce8:	461a      	movlt	r2, r3
 8016cea:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8016cee:	4604      	mov	r4, r0
 8016cf0:	428b      	cmp	r3, r1
 8016cf2:	d103      	bne.n	8016cfc <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8016cf4:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8016cf8:	4293      	cmp	r3, r2
 8016cfa:	d011      	beq.n	8016d20 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8016cfc:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8016d00:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8016d04:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8016d08:	f005 fab5 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016d0c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016d10:	f005 fab1 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016d14:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8016d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d1c:	f005 baab 	b.w	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016d20:	bd10      	pop	{r4, pc}

08016d22 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8016d22:	2300      	movs	r3, #0
 8016d24:	3038      	adds	r0, #56	@ 0x38
 8016d26:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 8016d2a:	f005 baa4 	b.w	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>

08016d2e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8016d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d32:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016d36:	4605      	mov	r5, r0
 8016d38:	460f      	mov	r7, r1
 8016d3a:	4616      	mov	r6, r2
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d03d      	beq.n	8016dbc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016d40:	6803      	ldr	r3, [r0, #0]
 8016d42:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8016d46:	4798      	blx	r3
 8016d48:	682b      	ldr	r3, [r5, #0]
 8016d4a:	b204      	sxth	r4, r0
 8016d4c:	4628      	mov	r0, r5
 8016d4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016d52:	4798      	blx	r3
 8016d54:	b203      	sxth	r3, r0
 8016d56:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 8016d5a:	429c      	cmp	r4, r3
 8016d5c:	bfc4      	itt	gt
 8016d5e:	4622      	movgt	r2, r4
 8016d60:	461c      	movgt	r4, r3
 8016d62:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016d66:	bfc8      	it	gt
 8016d68:	4613      	movgt	r3, r2
 8016d6a:	4284      	cmp	r4, r0
 8016d6c:	da26      	bge.n	8016dbc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016d6e:	4298      	cmp	r0, r3
 8016d70:	bfa8      	it	ge
 8016d72:	4618      	movge	r0, r3
 8016d74:	2800      	cmp	r0, #0
 8016d76:	db21      	blt.n	8016dbc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016d78:	b9ef      	cbnz	r7, 8016db6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 8016d7a:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 8016d7e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016d82:	4619      	mov	r1, r3
 8016d84:	42a0      	cmp	r0, r4
 8016d86:	dd0b      	ble.n	8016da0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 8016d88:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 8016d8c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8016d90:	3401      	adds	r4, #1
 8016d92:	4291      	cmp	r1, r2
 8016d94:	bfa8      	it	ge
 8016d96:	4611      	movge	r1, r2
 8016d98:	4293      	cmp	r3, r2
 8016d9a:	bfb8      	it	lt
 8016d9c:	4613      	movlt	r3, r2
 8016d9e:	e7f1      	b.n	8016d84 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8016da0:	1b89      	subs	r1, r1, r6
 8016da2:	18f2      	adds	r2, r6, r3
 8016da4:	4291      	cmp	r1, r2
 8016da6:	d009      	beq.n	8016dbc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016da8:	682b      	ldr	r3, [r5, #0]
 8016daa:	4628      	mov	r0, r5
 8016dac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016db4:	4718      	bx	r3
 8016db6:	4273      	negs	r3, r6
 8016db8:	4631      	mov	r1, r6
 8016dba:	e7e3      	b.n	8016d84 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8016dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016dc0 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8016dc0:	b530      	push	{r4, r5, lr}
 8016dc2:	790b      	ldrb	r3, [r1, #4]
 8016dc4:	b085      	sub	sp, #20
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	460d      	mov	r5, r1
 8016dca:	2b02      	cmp	r3, #2
 8016dcc:	d020      	beq.n	8016e10 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016dce:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8016dd0:	f10d 0206 	add.w	r2, sp, #6
 8016dd4:	88c9      	ldrh	r1, [r1, #6]
 8016dd6:	1ac9      	subs	r1, r1, r3
 8016dd8:	6803      	ldr	r3, [r0, #0]
 8016dda:	b209      	sxth	r1, r1
 8016ddc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8016de0:	4798      	blx	r3
 8016de2:	b1a8      	cbz	r0, 8016e10 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016de4:	792b      	ldrb	r3, [r5, #4]
 8016de6:	2b01      	cmp	r3, #1
 8016de8:	d812      	bhi.n	8016e10 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016dea:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8016dee:	b178      	cbz	r0, 8016e10 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016df0:	6803      	ldr	r3, [r0, #0]
 8016df2:	68db      	ldr	r3, [r3, #12]
 8016df4:	4798      	blx	r3
 8016df6:	b158      	cbz	r0, 8016e10 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016df8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8016dfc:	aa02      	add	r2, sp, #8
 8016dfe:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8016e02:	4621      	mov	r1, r4
 8016e04:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016e08:	9503      	str	r5, [sp, #12]
 8016e0a:	6803      	ldr	r3, [r0, #0]
 8016e0c:	689b      	ldr	r3, [r3, #8]
 8016e0e:	4798      	blx	r3
 8016e10:	b005      	add	sp, #20
 8016e12:	bd30      	pop	{r4, r5, pc}

08016e14 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8016e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e18:	4604      	mov	r4, r0
 8016e1a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8016e1e:	4690      	mov	r8, r2
 8016e20:	461f      	mov	r7, r3
 8016e22:	9e06      	ldr	r6, [sp, #24]
 8016e24:	b928      	cbnz	r0, 8016e32 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8016e26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e2a:	8033      	strh	r3, [r6, #0]
 8016e2c:	803b      	strh	r3, [r7, #0]
 8016e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e32:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8016e36:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 8016e3a:	1883      	adds	r3, r0, r2
 8016e3c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8016e40:	1ad2      	subs	r2, r2, r3
 8016e42:	b212      	sxth	r2, r2
 8016e44:	2a01      	cmp	r2, #1
 8016e46:	dc07      	bgt.n	8016e58 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8016e48:	2300      	movs	r3, #0
 8016e4a:	803b      	strh	r3, [r7, #0]
 8016e4c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8016e50:	3b01      	subs	r3, #1
 8016e52:	8033      	strh	r3, [r6, #0]
 8016e54:	2001      	movs	r0, #1
 8016e56:	e7ea      	b.n	8016e2e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016e58:	1a08      	subs	r0, r1, r0
 8016e5a:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8016e5e:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8016e62:	0140      	lsls	r0, r0, #5
 8016e64:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016e66:	1a5b      	subs	r3, r3, r1
 8016e68:	d459      	bmi.n	8016f1e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8016e6a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8016e6e:	fb93 f1f5 	sdiv	r1, r3, r5
 8016e72:	2302      	movs	r3, #2
 8016e74:	fb91 f1f3 	sdiv	r1, r1, r3
 8016e78:	3a01      	subs	r2, #1
 8016e7a:	f005 ff0c 	bl	801cc96 <_ZN8touchgfx6muldivElll>
 8016e7e:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8016e82:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 8016e86:	2900      	cmp	r1, #0
 8016e88:	db55      	blt.n	8016f36 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8016e8a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8016e8e:	2502      	movs	r5, #2
 8016e90:	fb93 f3fc 	sdiv	r3, r3, ip
 8016e94:	fb93 f3f5 	sdiv	r3, r3, r5
 8016e98:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8016e9c:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 8016ea0:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 8016ea4:	1a52      	subs	r2, r2, r1
 8016ea6:	eba8 0003 	sub.w	r0, r8, r3
 8016eaa:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8016eae:	d44e      	bmi.n	8016f4e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8016eb0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8016eb4:	fb92 f1fc 	sdiv	r1, r2, ip
 8016eb8:	2202      	movs	r2, #2
 8016eba:	fb91 f1f2 	sdiv	r1, r1, r2
 8016ebe:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8016ec2:	4413      	add	r3, r2
 8016ec4:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8016ec8:	1ad2      	subs	r2, r2, r3
 8016eca:	b212      	sxth	r2, r2
 8016ecc:	3a01      	subs	r2, #1
 8016ece:	f005 fee2 	bl	801cc96 <_ZN8touchgfx6muldivElll>
 8016ed2:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8016ed6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	db44      	blt.n	8016f66 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8016edc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016ee0:	fb93 f3f2 	sdiv	r3, r3, r2
 8016ee4:	2202      	movs	r2, #2
 8016ee6:	fb93 f3f2 	sdiv	r3, r3, r2
 8016eea:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8016eee:	2020      	movs	r0, #32
 8016ef0:	429d      	cmp	r5, r3
 8016ef2:	bfde      	ittt	le
 8016ef4:	461a      	movle	r2, r3
 8016ef6:	462b      	movle	r3, r5
 8016ef8:	4615      	movle	r5, r2
 8016efa:	b21b      	sxth	r3, r3
 8016efc:	2d00      	cmp	r5, #0
 8016efe:	bfaa      	itet	ge
 8016f00:	351f      	addge	r5, #31
 8016f02:	fb95 f5f0 	sdivlt	r5, r5, r0
 8016f06:	116d      	asrge	r5, r5, #5
 8016f08:	fb93 f3f0 	sdiv	r3, r3, r0
 8016f0c:	b22d      	sxth	r5, r5
 8016f0e:	803b      	strh	r3, [r7, #0]
 8016f10:	2d00      	cmp	r5, #0
 8016f12:	8035      	strh	r5, [r6, #0]
 8016f14:	da33      	bge.n	8016f7e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 8016f16:	2000      	movs	r0, #0
 8016f18:	8030      	strh	r0, [r6, #0]
 8016f1a:	8038      	strh	r0, [r7, #0]
 8016f1c:	e787      	b.n	8016e2e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016f1e:	f06f 0101 	mvn.w	r1, #1
 8016f22:	fb01 5303 	mla	r3, r1, r3, r5
 8016f26:	1e59      	subs	r1, r3, #1
 8016f28:	2302      	movs	r3, #2
 8016f2a:	fb91 f1f5 	sdiv	r1, r1, r5
 8016f2e:	fb91 f1f3 	sdiv	r1, r1, r3
 8016f32:	4249      	negs	r1, r1
 8016f34:	e7a0      	b.n	8016e78 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8016f36:	f06f 0301 	mvn.w	r3, #1
 8016f3a:	2502      	movs	r5, #2
 8016f3c:	fb03 c301 	mla	r3, r3, r1, ip
 8016f40:	3b01      	subs	r3, #1
 8016f42:	fb93 f3fc 	sdiv	r3, r3, ip
 8016f46:	fb93 f3f5 	sdiv	r3, r3, r5
 8016f4a:	425b      	negs	r3, r3
 8016f4c:	e7a4      	b.n	8016e98 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8016f4e:	f06f 0101 	mvn.w	r1, #1
 8016f52:	fb01 c202 	mla	r2, r1, r2, ip
 8016f56:	1e51      	subs	r1, r2, #1
 8016f58:	2202      	movs	r2, #2
 8016f5a:	fb91 f1fc 	sdiv	r1, r1, ip
 8016f5e:	fb91 f1f2 	sdiv	r1, r1, r2
 8016f62:	4249      	negs	r1, r1
 8016f64:	e7ab      	b.n	8016ebe <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8016f66:	f06f 0101 	mvn.w	r1, #1
 8016f6a:	fb01 2303 	mla	r3, r1, r3, r2
 8016f6e:	3b01      	subs	r3, #1
 8016f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8016f74:	2202      	movs	r2, #2
 8016f76:	fb93 f3f2 	sdiv	r3, r3, r2
 8016f7a:	425b      	negs	r3, r3
 8016f7c:	e7b5      	b.n	8016eea <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8016f7e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016f82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016f86:	4293      	cmp	r3, r2
 8016f88:	dc05      	bgt.n	8016f96 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 8016f8a:	3b01      	subs	r3, #1
 8016f8c:	2000      	movs	r0, #0
 8016f8e:	b21b      	sxth	r3, r3
 8016f90:	8033      	strh	r3, [r6, #0]
 8016f92:	803b      	strh	r3, [r7, #0]
 8016f94:	e74b      	b.n	8016e2e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016f96:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8016f9a:	803a      	strh	r2, [r7, #0]
 8016f9c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016fa0:	f9b6 2000 	ldrsh.w	r2, [r6]
 8016fa4:	4293      	cmp	r3, r2
 8016fa6:	bfdc      	itt	le
 8016fa8:	f103 33ff 	addle.w	r3, r3, #4294967295
 8016fac:	b21a      	sxthle	r2, r3
 8016fae:	8032      	strh	r2, [r6, #0]
 8016fb0:	e750      	b.n	8016e54 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

08016fb4 <_ZN8touchgfx9ContainerC1Ev>:
 8016fb4:	2101      	movs	r1, #1
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016fbc:	4909      	ldr	r1, [pc, #36]	@ (8016fe4 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8016fbe:	8082      	strh	r2, [r0, #4]
 8016fc0:	80c2      	strh	r2, [r0, #6]
 8016fc2:	8102      	strh	r2, [r0, #8]
 8016fc4:	8142      	strh	r2, [r0, #10]
 8016fc6:	8182      	strh	r2, [r0, #12]
 8016fc8:	81c2      	strh	r2, [r0, #14]
 8016fca:	8202      	strh	r2, [r0, #16]
 8016fcc:	8242      	strh	r2, [r0, #18]
 8016fce:	61c2      	str	r2, [r0, #28]
 8016fd0:	8402      	strh	r2, [r0, #32]
 8016fd2:	8442      	strh	r2, [r0, #34]	@ 0x22
 8016fd4:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016fd8:	6001      	str	r1, [r0, #0]
 8016fda:	6282      	str	r2, [r0, #40]	@ 0x28
 8016fdc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016fe0:	4770      	bx	lr
 8016fe2:	bf00      	nop
 8016fe4:	080301f0 	.word	0x080301f0

08016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8016fe8:	6800      	ldr	r0, [r0, #0]
 8016fea:	2800      	cmp	r0, #0
 8016fec:	bfbd      	ittte	lt
 8016fee:	380f      	sublt	r0, #15
 8016ff0:	2320      	movlt	r3, #32
 8016ff2:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016ff6:	3010      	addge	r0, #16
 8016ff8:	bfa8      	it	ge
 8016ffa:	1140      	asrge	r0, r0, #5
 8016ffc:	4770      	bx	lr

08016ffe <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8016ffe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017002:	4605      	mov	r5, r0
 8017004:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8017008:	4688      	mov	r8, r1
 801700a:	4691      	mov	r9, r2
 801700c:	469a      	mov	sl, r3
 801700e:	b360      	cbz	r0, 801706a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8017010:	2700      	movs	r7, #0
 8017012:	f04f 3bff 	mov.w	fp, #4294967295
 8017016:	b23e      	sxth	r6, r7
 8017018:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 801701c:	42b3      	cmp	r3, r6
 801701e:	dd23      	ble.n	8017068 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8017020:	682b      	ldr	r3, [r5, #0]
 8017022:	4631      	mov	r1, r6
 8017024:	4628      	mov	r0, r5
 8017026:	3701      	adds	r7, #1
 8017028:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801702c:	4798      	blx	r3
 801702e:	9001      	str	r0, [sp, #4]
 8017030:	a801      	add	r0, sp, #4
 8017032:	f7ff ffd9 	bl	8016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017036:	682b      	ldr	r3, [r5, #0]
 8017038:	eba0 0008 	sub.w	r0, r0, r8
 801703c:	4631      	mov	r1, r6
 801703e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017042:	b204      	sxth	r4, r0
 8017044:	4628      	mov	r0, r5
 8017046:	4798      	blx	r3
 8017048:	9001      	str	r0, [sp, #4]
 801704a:	a801      	add	r0, sp, #4
 801704c:	f7ff ffcc 	bl	8016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017050:	eba0 0009 	sub.w	r0, r0, r9
 8017054:	fb10 f000 	smulbb	r0, r0, r0
 8017058:	fb04 0404 	mla	r4, r4, r4, r0
 801705c:	455c      	cmp	r4, fp
 801705e:	bf3c      	itt	cc
 8017060:	f8aa 6000 	strhcc.w	r6, [sl]
 8017064:	46a3      	movcc	fp, r4
 8017066:	e7d6      	b.n	8017016 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8017068:	2001      	movs	r0, #1
 801706a:	b003      	add	sp, #12
 801706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017070 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8017070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017074:	460e      	mov	r6, r1
 8017076:	2100      	movs	r1, #0
 8017078:	4605      	mov	r5, r0
 801707a:	4617      	mov	r7, r2
 801707c:	8011      	strh	r1, [r2, #0]
 801707e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8017082:	b36b      	cbz	r3, 80170e0 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 8017084:	6803      	ldr	r3, [r0, #0]
 8017086:	f10d 0808 	add.w	r8, sp, #8
 801708a:	2401      	movs	r4, #1
 801708c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017090:	4798      	blx	r3
 8017092:	f848 0d04 	str.w	r0, [r8, #-4]!
 8017096:	4640      	mov	r0, r8
 8017098:	f7ff ffa6 	bl	8016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801709c:	b200      	sxth	r0, r0
 801709e:	1b80      	subs	r0, r0, r6
 80170a0:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 80170a4:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 80170a8:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 80170ac:	42a3      	cmp	r3, r4
 80170ae:	dd1b      	ble.n	80170e8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 80170b0:	682b      	ldr	r3, [r5, #0]
 80170b2:	4621      	mov	r1, r4
 80170b4:	4628      	mov	r0, r5
 80170b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80170ba:	4798      	blx	r3
 80170bc:	9001      	str	r0, [sp, #4]
 80170be:	4640      	mov	r0, r8
 80170c0:	f7ff ff92 	bl	8016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80170c4:	b200      	sxth	r0, r0
 80170c6:	1b80      	subs	r0, r0, r6
 80170c8:	2800      	cmp	r0, #0
 80170ca:	bfb8      	it	lt
 80170cc:	4240      	neglt	r0, r0
 80170ce:	4548      	cmp	r0, r9
 80170d0:	bf38      	it	cc
 80170d2:	803c      	strhcc	r4, [r7, #0]
 80170d4:	f104 0401 	add.w	r4, r4, #1
 80170d8:	bf38      	it	cc
 80170da:	4681      	movcc	r9, r0
 80170dc:	b224      	sxth	r4, r4
 80170de:	e7e3      	b.n	80170a8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 80170e0:	4618      	mov	r0, r3
 80170e2:	b003      	add	sp, #12
 80170e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170e8:	2001      	movs	r0, #1
 80170ea:	e7fa      	b.n	80170e2 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

080170ec <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 80170ec:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 80170f0:	f9bd 3000 	ldrsh.w	r3, [sp]
 80170f4:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 80170f8:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 80170fc:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8017100:	4770      	bx	lr

08017102 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8017102:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017104:	4604      	mov	r4, r0
 8017106:	3038      	adds	r0, #56	@ 0x38
 8017108:	460d      	mov	r5, r1
 801710a:	f7fc fa01 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801710e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8017112:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8017116:	4628      	mov	r0, r5
 8017118:	9200      	str	r2, [sp, #0]
 801711a:	2200      	movs	r2, #0
 801711c:	4611      	mov	r1, r2
 801711e:	f7ed fba6 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8017122:	b003      	add	sp, #12
 8017124:	bd30      	pop	{r4, r5, pc}

08017126 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8017126:	b538      	push	{r3, r4, r5, lr}
 8017128:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801712c:	460d      	mov	r5, r1
 801712e:	428b      	cmp	r3, r1
 8017130:	dd08      	ble.n	8017144 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8017132:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8017134:	b134      	cbz	r4, 8017144 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8017136:	6823      	ldr	r3, [r4, #0]
 8017138:	4620      	mov	r0, r4
 801713a:	4629      	mov	r1, r5
 801713c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801713e:	4798      	blx	r3
 8017140:	69a4      	ldr	r4, [r4, #24]
 8017142:	e7f7      	b.n	8017134 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8017144:	bd38      	pop	{r3, r4, r5, pc}

08017146 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8017146:	b570      	push	{r4, r5, r6, lr}
 8017148:	4606      	mov	r6, r0
 801714a:	460d      	mov	r5, r1
 801714c:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 8017150:	b134      	cbz	r4, 8017160 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8017152:	6823      	ldr	r3, [r4, #0]
 8017154:	4620      	mov	r0, r4
 8017156:	4629      	mov	r1, r5
 8017158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801715a:	4798      	blx	r3
 801715c:	69a4      	ldr	r4, [r4, #24]
 801715e:	e7f7      	b.n	8017150 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8017160:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 8017164:	b134      	cbz	r4, 8017174 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8017166:	6823      	ldr	r3, [r4, #0]
 8017168:	4620      	mov	r0, r4
 801716a:	4629      	mov	r1, r5
 801716c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801716e:	4798      	blx	r3
 8017170:	69a4      	ldr	r4, [r4, #24]
 8017172:	e7f7      	b.n	8017164 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8017174:	bd70      	pop	{r4, r5, r6, pc}

08017176 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8017176:	b538      	push	{r3, r4, r5, lr}
 8017178:	4604      	mov	r4, r0
 801717a:	2500      	movs	r5, #0
 801717c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8017180:	42ab      	cmp	r3, r5
 8017182:	db05      	blt.n	8017190 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8017184:	b229      	sxth	r1, r5
 8017186:	4620      	mov	r0, r4
 8017188:	f7ff ffdd 	bl	8017146 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801718c:	3501      	adds	r5, #1
 801718e:	e7f5      	b.n	801717c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8017190:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8017194:	f005 f86f 	bl	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>
 8017198:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 801719c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171a0:	f005 b869 	b.w	801c276 <_ZNK8touchgfx8Drawable10invalidateEv>

080171a4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 80171a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171a6:	4604      	mov	r4, r0
 80171a8:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 80171aa:	b15d      	cbz	r5, 80171c4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 80171ac:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80171b0:	4628      	mov	r0, r5
 80171b2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80171b6:	9200      	str	r2, [sp, #0]
 80171b8:	2200      	movs	r2, #0
 80171ba:	4611      	mov	r1, r2
 80171bc:	f7ed fb57 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 80171c0:	69ad      	ldr	r5, [r5, #24]
 80171c2:	e7f2      	b.n	80171aa <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 80171c4:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 80171c8:	b15d      	cbz	r5, 80171e2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 80171ca:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 80171ce:	4628      	mov	r0, r5
 80171d0:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 80171d4:	9200      	str	r2, [sp, #0]
 80171d6:	2200      	movs	r2, #0
 80171d8:	4611      	mov	r1, r2
 80171da:	f7ed fb48 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 80171de:	69ad      	ldr	r5, [r5, #24]
 80171e0:	e7f2      	b.n	80171c8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 80171e2:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 80171e6:	b15d      	cbz	r5, 8017200 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 80171e8:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 80171ec:	4628      	mov	r0, r5
 80171ee:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 80171f2:	9200      	str	r2, [sp, #0]
 80171f4:	2200      	movs	r2, #0
 80171f6:	4611      	mov	r1, r2
 80171f8:	f7ed fb39 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 80171fc:	69ad      	ldr	r5, [r5, #24]
 80171fe:	e7f2      	b.n	80171e6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8017200:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8017204:	b15d      	cbz	r5, 801721e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8017206:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 801720a:	4628      	mov	r0, r5
 801720c:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8017210:	9200      	str	r2, [sp, #0]
 8017212:	2200      	movs	r2, #0
 8017214:	4611      	mov	r1, r2
 8017216:	f7ed fb2a 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 801721a:	69ad      	ldr	r5, [r5, #24]
 801721c:	e7f2      	b.n	8017204 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 801721e:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8017222:	b15d      	cbz	r5, 801723c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8017224:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8017228:	4628      	mov	r0, r5
 801722a:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 801722e:	9200      	str	r2, [sp, #0]
 8017230:	2200      	movs	r2, #0
 8017232:	4611      	mov	r1, r2
 8017234:	f7ed fb1b 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8017238:	69ad      	ldr	r5, [r5, #24]
 801723a:	e7f2      	b.n	8017222 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 801723c:	6823      	ldr	r3, [r4, #0]
 801723e:	4620      	mov	r0, r4
 8017240:	695b      	ldr	r3, [r3, #20]
 8017242:	b003      	add	sp, #12
 8017244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017248:	4718      	bx	r3

0801724a <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 801724a:	b430      	push	{r4, r5}
 801724c:	b28a      	uxth	r2, r1
 801724e:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8017252:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8017256:	1b15      	subs	r5, r2, r4
 8017258:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 801725c:	8101      	strh	r1, [r0, #8]
 801725e:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8017262:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8017266:	442c      	add	r4, r5
 8017268:	1b12      	subs	r2, r2, r4
 801726a:	bc30      	pop	{r4, r5}
 801726c:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8017270:	f7ff bf98 	b.w	80171a4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08017274 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8017274:	b430      	push	{r4, r5}
 8017276:	b28a      	uxth	r2, r1
 8017278:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 801727c:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 8017280:	1b15      	subs	r5, r2, r4
 8017282:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 8017286:	8141      	strh	r1, [r0, #10]
 8017288:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 801728c:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 8017290:	442c      	add	r4, r5
 8017292:	1b12      	subs	r2, r2, r4
 8017294:	bc30      	pop	{r4, r5}
 8017296:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 801729a:	f7ff bf83 	b.w	80171a4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801729e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 801729e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80172a2:	fa1f fa83 	uxth.w	sl, r3
 80172a6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 80172aa:	4615      	mov	r5, r2
 80172ac:	4699      	mov	r9, r3
 80172ae:	fa1f f887 	uxth.w	r8, r7
 80172b2:	8903      	ldrh	r3, [r0, #8]
 80172b4:	4452      	add	r2, sl
 80172b6:	4604      	mov	r4, r0
 80172b8:	8940      	ldrh	r0, [r0, #10]
 80172ba:	460e      	mov	r6, r1
 80172bc:	1a9b      	subs	r3, r3, r2
 80172be:	eb08 0201 	add.w	r2, r8, r1
 80172c2:	1a80      	subs	r0, r0, r2
 80172c4:	b21b      	sxth	r3, r3
 80172c6:	460a      	mov	r2, r1
 80172c8:	4629      	mov	r1, r5
 80172ca:	b200      	sxth	r0, r0
 80172cc:	9000      	str	r0, [sp, #0]
 80172ce:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80172d2:	f7ed facc 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 80172d6:	2200      	movs	r2, #0
 80172d8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80172dc:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80172e0:	4611      	mov	r1, r2
 80172e2:	9600      	str	r6, [sp, #0]
 80172e4:	f7ed fac3 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 80172e8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80172ec:	2200      	movs	r2, #0
 80172ee:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 80172f2:	9300      	str	r3, [sp, #0]
 80172f4:	462b      	mov	r3, r5
 80172f6:	4611      	mov	r1, r2
 80172f8:	f7ed fab9 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 80172fc:	8921      	ldrh	r1, [r4, #8]
 80172fe:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017302:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8017306:	eba1 010a 	sub.w	r1, r1, sl
 801730a:	2200      	movs	r2, #0
 801730c:	9300      	str	r3, [sp, #0]
 801730e:	464b      	mov	r3, r9
 8017310:	b209      	sxth	r1, r1
 8017312:	f7ed faac 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 8017316:	8962      	ldrh	r2, [r4, #10]
 8017318:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 801731c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017320:	eba2 0208 	sub.w	r2, r2, r8
 8017324:	9700      	str	r7, [sp, #0]
 8017326:	2100      	movs	r1, #0
 8017328:	b212      	sxth	r2, r2
 801732a:	f7ed faa0 	bl	800486e <_ZN8touchgfx8Drawable11setPositionEssss>
 801732e:	4620      	mov	r0, r4
 8017330:	b002      	add	sp, #8
 8017332:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017336:	f7ff bf35 	b.w	80171a4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

0801733c <_ZN8touchgfx17AbstractDataGraphC1Es>:
 801733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017340:	b085      	sub	sp, #20
 8017342:	4604      	mov	r4, r0
 8017344:	2601      	movs	r6, #1
 8017346:	2500      	movs	r5, #0
 8017348:	9103      	str	r1, [sp, #12]
 801734a:	f7ff fe33 	bl	8016fb4 <_ZN8touchgfx9ContainerC1Ev>
 801734e:	4b2c      	ldr	r3, [pc, #176]	@ (8017400 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8017350:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8017354:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8017358:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 801735c:	6023      	str	r3, [r4, #0]
 801735e:	23ff      	movs	r3, #255	@ 0xff
 8017360:	4658      	mov	r0, fp
 8017362:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8017366:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801736a:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 801736e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8017372:	f7ff fe1f 	bl	8016fb4 <_ZN8touchgfx9ContainerC1Ev>
 8017376:	4648      	mov	r0, r9
 8017378:	f7ff fe1c 	bl	8016fb4 <_ZN8touchgfx9ContainerC1Ev>
 801737c:	4640      	mov	r0, r8
 801737e:	f7ff fe19 	bl	8016fb4 <_ZN8touchgfx9ContainerC1Ev>
 8017382:	4650      	mov	r0, sl
 8017384:	f7ff fe16 	bl	8016fb4 <_ZN8touchgfx9ContainerC1Ev>
 8017388:	4638      	mov	r0, r7
 801738a:	f7ff fe13 	bl	8016fb4 <_ZN8touchgfx9ContainerC1Ev>
 801738e:	9903      	ldr	r1, [sp, #12]
 8017390:	4620      	mov	r0, r4
 8017392:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 8017396:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 801739a:	4659      	mov	r1, fp
 801739c:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 80173a0:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 80173a4:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 80173a8:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 80173ac:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 80173b0:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 80173b4:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80173b8:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80173bc:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 80173c0:	f7fc f8a6 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80173c4:	4651      	mov	r1, sl
 80173c6:	4620      	mov	r0, r4
 80173c8:	f7fc f8a2 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80173cc:	4649      	mov	r1, r9
 80173ce:	4620      	mov	r0, r4
 80173d0:	f7fc f89e 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80173d4:	4641      	mov	r1, r8
 80173d6:	4620      	mov	r0, r4
 80173d8:	f7fc f89a 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80173dc:	4639      	mov	r1, r7
 80173de:	4620      	mov	r0, r4
 80173e0:	f7fc f896 	bl	8013510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80173e4:	4620      	mov	r0, r4
 80173e6:	9500      	str	r5, [sp, #0]
 80173e8:	462b      	mov	r3, r5
 80173ea:	462a      	mov	r2, r5
 80173ec:	4629      	mov	r1, r5
 80173ee:	f7ff ff56 	bl	801729e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 80173f2:	4620      	mov	r0, r4
 80173f4:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 80173f8:	b005      	add	sp, #20
 80173fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173fe:	bf00      	nop
 8017400:	0803063c 	.word	0x0803063c

08017404 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8017404:	4291      	cmp	r1, r2
 8017406:	4613      	mov	r3, r2
 8017408:	d003      	beq.n	8017412 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 801740a:	460a      	mov	r2, r1
 801740c:	4619      	mov	r1, r3
 801740e:	f005 bc42 	b.w	801cc96 <_ZN8touchgfx6muldivElll>
 8017412:	4770      	bx	lr

08017414 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8017414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017418:	6803      	ldr	r3, [r0, #0]
 801741a:	460d      	mov	r5, r1
 801741c:	4604      	mov	r4, r0
 801741e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017422:	4798      	blx	r3
 8017424:	42a8      	cmp	r0, r5
 8017426:	4606      	mov	r6, r0
 8017428:	d024      	beq.n	8017474 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 801742a:	6823      	ldr	r3, [r4, #0]
 801742c:	4601      	mov	r1, r0
 801742e:	462a      	mov	r2, r5
 8017430:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8017434:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8017438:	f7ff ffe4 	bl	8017404 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801743c:	4680      	mov	r8, r0
 801743e:	462a      	mov	r2, r5
 8017440:	4631      	mov	r1, r6
 8017442:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8017446:	f7ff ffdd 	bl	8017404 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801744a:	4641      	mov	r1, r8
 801744c:	4602      	mov	r2, r0
 801744e:	4620      	mov	r0, r4
 8017450:	47b8      	blx	r7
 8017452:	462a      	mov	r2, r5
 8017454:	4631      	mov	r1, r6
 8017456:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 801745a:	f7ff ffd3 	bl	8017404 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801745e:	462a      	mov	r2, r5
 8017460:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8017464:	4631      	mov	r1, r6
 8017466:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 801746a:	f7ff ffcb 	bl	8017404 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801746e:	6325      	str	r5, [r4, #48]	@ 0x30
 8017470:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8017474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017478 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8017478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801747c:	4604      	mov	r4, r0
 801747e:	460f      	mov	r7, r1
 8017480:	b1b2      	cbz	r2, 80174b0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8017482:	6803      	ldr	r3, [r0, #0]
 8017484:	2600      	movs	r6, #0
 8017486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801748a:	4798      	blx	r3
 801748c:	4681      	mov	r9, r0
 801748e:	b235      	sxth	r5, r6
 8017490:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8017494:	3601      	adds	r6, #1
 8017496:	42ab      	cmp	r3, r5
 8017498:	dd0a      	ble.n	80174b0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 801749a:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 801749e:	463a      	mov	r2, r7
 80174a0:	4649      	mov	r1, r9
 80174a2:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80174a6:	f7ff ffad 	bl	8017404 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80174aa:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80174ae:	e7ee      	b.n	801748e <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 80174b0:	6367      	str	r7, [r4, #52]	@ 0x34
 80174b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080174b6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 80174b6:	b570      	push	{r4, r5, r6, lr}
 80174b8:	6803      	ldr	r3, [r0, #0]
 80174ba:	4604      	mov	r4, r0
 80174bc:	460d      	mov	r5, r1
 80174be:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80174c2:	4798      	blx	r3
 80174c4:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 80174c8:	4629      	mov	r1, r5
 80174ca:	4620      	mov	r0, r4
 80174cc:	3301      	adds	r3, #1
 80174ce:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80174d2:	6823      	ldr	r3, [r4, #0]
 80174d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174d8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80174dc:	4718      	bx	r3

080174de <_ZN8touchgfx16GraphElementLineD1Ev>:
 80174de:	4770      	bx	lr

080174e0 <_ZN8touchgfx16GraphElementLineD0Ev>:
 80174e0:	b510      	push	{r4, lr}
 80174e2:	4604      	mov	r4, r0
 80174e4:	2130      	movs	r1, #48	@ 0x30
 80174e6:	f012 fa47 	bl	8029978 <_ZdlPvj>
 80174ea:	4620      	mov	r0, r4
 80174ec:	bd10      	pop	{r4, pc}

080174ee <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 80174ee:	6800      	ldr	r0, [r0, #0]
 80174f0:	2800      	cmp	r0, #0
 80174f2:	bfb9      	ittee	lt
 80174f4:	2320      	movlt	r3, #32
 80174f6:	fb90 f0f3 	sdivlt	r0, r0, r3
 80174fa:	301f      	addge	r0, #31
 80174fc:	1140      	asrge	r0, r0, #5
 80174fe:	4770      	bx	lr

08017500 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8017500:	b510      	push	{r4, lr}
 8017502:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8017506:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801750a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801750e:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8017512:	139b      	asrs	r3, r3, #14
 8017514:	13a4      	asrs	r4, r4, #14
 8017516:	429c      	cmp	r4, r3
 8017518:	bfb8      	it	lt
 801751a:	461c      	movlt	r4, r3
 801751c:	2c01      	cmp	r4, #1
 801751e:	dd07      	ble.n	8017530 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8017520:	fb91 f1f4 	sdiv	r1, r1, r4
 8017524:	fb90 f0f4 	sdiv	r0, r0, r4
 8017528:	f7ff ffea 	bl	8017500 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801752c:	4360      	muls	r0, r4
 801752e:	bd10      	pop	{r4, pc}
 8017530:	4340      	muls	r0, r0
 8017532:	fb01 0101 	mla	r1, r1, r1, r0
 8017536:	2000      	movs	r0, #0
 8017538:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 801753c:	bfb4      	ite	lt
 801753e:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 8017542:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 8017546:	18c2      	adds	r2, r0, r3
 8017548:	428a      	cmp	r2, r1
 801754a:	bf9c      	itt	ls
 801754c:	1898      	addls	r0, r3, r2
 801754e:	1a89      	subls	r1, r1, r2
 8017550:	089b      	lsrs	r3, r3, #2
 8017552:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8017556:	d1f6      	bne.n	8017546 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8017558:	e7e9      	b.n	801752e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0801755a <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 801755a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801755c:	9906      	ldr	r1, [sp, #24]
 801755e:	4606      	mov	r6, r0
 8017560:	461c      	mov	r4, r3
 8017562:	2020      	movs	r0, #32
 8017564:	4291      	cmp	r1, r2
 8017566:	bfbc      	itt	lt
 8017568:	9206      	strlt	r2, [sp, #24]
 801756a:	460a      	movlt	r2, r1
 801756c:	9907      	ldr	r1, [sp, #28]
 801756e:	428b      	cmp	r3, r1
 8017570:	bfc4      	itt	gt
 8017572:	460c      	movgt	r4, r1
 8017574:	9307      	strgt	r3, [sp, #28]
 8017576:	fb92 f5f0 	sdiv	r5, r2, r0
 801757a:	fb94 f4f0 	sdiv	r4, r4, r0
 801757e:	a806      	add	r0, sp, #24
 8017580:	f7ff ffb5 	bl	80174ee <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017584:	4607      	mov	r7, r0
 8017586:	a807      	add	r0, sp, #28
 8017588:	f7ff ffb1 	bl	80174ee <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801758c:	1b7a      	subs	r2, r7, r5
 801758e:	1b00      	subs	r0, r0, r4
 8017590:	8035      	strh	r5, [r6, #0]
 8017592:	8074      	strh	r4, [r6, #2]
 8017594:	80f0      	strh	r0, [r6, #6]
 8017596:	4630      	mov	r0, r6
 8017598:	80b2      	strh	r2, [r6, #4]
 801759a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801759c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 801759c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801759e:	9c08      	ldr	r4, [sp, #32]
 80175a0:	2602      	movs	r6, #2
 80175a2:	4605      	mov	r5, r0
 80175a4:	3401      	adds	r4, #1
 80175a6:	fb94 f4f6 	sdiv	r4, r4, r6
 80175aa:	18a6      	adds	r6, r4, r2
 80175ac:	191f      	adds	r7, r3, r4
 80175ae:	1b12      	subs	r2, r2, r4
 80175b0:	1b1b      	subs	r3, r3, r4
 80175b2:	e9cd 6700 	strd	r6, r7, [sp]
 80175b6:	f7ff ffd0 	bl	801755a <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 80175ba:	4628      	mov	r0, r5
 80175bc:	b003      	add	sp, #12
 80175be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175c0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 80175c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175c4:	6943      	ldr	r3, [r0, #20]
 80175c6:	b087      	sub	sp, #28
 80175c8:	4606      	mov	r6, r0
 80175ca:	460d      	mov	r5, r1
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d072      	beq.n	80176b6 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 80175d0:	695c      	ldr	r4, [r3, #20]
 80175d2:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 80175d6:	6823      	ldr	r3, [r4, #0]
 80175d8:	4620      	mov	r0, r4
 80175da:	017f      	lsls	r7, r7, #5
 80175dc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80175e0:	4798      	blx	r3
 80175e2:	6823      	ldr	r3, [r4, #0]
 80175e4:	4680      	mov	r8, r0
 80175e6:	4629      	mov	r1, r5
 80175e8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80175ec:	4620      	mov	r0, r4
 80175ee:	4798      	blx	r3
 80175f0:	9700      	str	r7, [sp, #0]
 80175f2:	4603      	mov	r3, r0
 80175f4:	4642      	mov	r2, r8
 80175f6:	4631      	mov	r1, r6
 80175f8:	a802      	add	r0, sp, #8
 80175fa:	f7ff ffcf 	bl	801759c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80175fe:	2d00      	cmp	r5, #0
 8017600:	dd1b      	ble.n	801763a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8017602:	f105 38ff 	add.w	r8, r5, #4294967295
 8017606:	6823      	ldr	r3, [r4, #0]
 8017608:	4620      	mov	r0, r4
 801760a:	fa0f f888 	sxth.w	r8, r8
 801760e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017612:	4641      	mov	r1, r8
 8017614:	4798      	blx	r3
 8017616:	6823      	ldr	r3, [r4, #0]
 8017618:	4681      	mov	r9, r0
 801761a:	4641      	mov	r1, r8
 801761c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017620:	4620      	mov	r0, r4
 8017622:	4798      	blx	r3
 8017624:	4631      	mov	r1, r6
 8017626:	4603      	mov	r3, r0
 8017628:	9700      	str	r7, [sp, #0]
 801762a:	a804      	add	r0, sp, #16
 801762c:	464a      	mov	r2, r9
 801762e:	f7ff ffb5 	bl	801759c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8017632:	a904      	add	r1, sp, #16
 8017634:	a802      	add	r0, sp, #8
 8017636:	f7fc fc71 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801763a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801763e:	3b01      	subs	r3, #1
 8017640:	429d      	cmp	r5, r3
 8017642:	da19      	bge.n	8017678 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8017644:	3501      	adds	r5, #1
 8017646:	6823      	ldr	r3, [r4, #0]
 8017648:	4620      	mov	r0, r4
 801764a:	b22d      	sxth	r5, r5
 801764c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017650:	4629      	mov	r1, r5
 8017652:	4798      	blx	r3
 8017654:	6823      	ldr	r3, [r4, #0]
 8017656:	4680      	mov	r8, r0
 8017658:	4629      	mov	r1, r5
 801765a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801765e:	4620      	mov	r0, r4
 8017660:	4798      	blx	r3
 8017662:	4631      	mov	r1, r6
 8017664:	4603      	mov	r3, r0
 8017666:	9700      	str	r7, [sp, #0]
 8017668:	a804      	add	r0, sp, #16
 801766a:	4642      	mov	r2, r8
 801766c:	f7ff ff96 	bl	801759c <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8017670:	a904      	add	r1, sp, #16
 8017672:	a802      	add	r0, sp, #8
 8017674:	f7fc fc52 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017678:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 801767c:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8017680:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8017684:	18ca      	adds	r2, r1, r3
 8017686:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 801768a:	f8ad 1012 	strh.w	r1, [sp, #18]
 801768e:	a904      	add	r1, sp, #16
 8017690:	1a9b      	subs	r3, r3, r2
 8017692:	2200      	movs	r2, #0
 8017694:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017698:	a802      	add	r0, sp, #8
 801769a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801769e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80176a2:	f7fc f8b9 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 80176a6:	6833      	ldr	r3, [r6, #0]
 80176a8:	a902      	add	r1, sp, #8
 80176aa:	4630      	mov	r0, r6
 80176ac:	691b      	ldr	r3, [r3, #16]
 80176ae:	4798      	blx	r3
 80176b0:	b007      	add	sp, #28
 80176b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	deff      	udf	#255	@ 0xff

080176ba <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 80176ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176be:	b08b      	sub	sp, #44	@ 0x2c
 80176c0:	461e      	mov	r6, r3
 80176c2:	460f      	mov	r7, r1
 80176c4:	4615      	mov	r5, r2
 80176c6:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 80176ca:	429e      	cmp	r6, r3
 80176cc:	9304      	str	r3, [sp, #16]
 80176ce:	d074      	beq.n	80177ba <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 80176d0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80176d4:	4631      	mov	r1, r6
 80176d6:	4610      	mov	r0, r2
 80176d8:	4634      	mov	r4, r6
 80176da:	015b      	lsls	r3, r3, #5
 80176dc:	9303      	str	r3, [sp, #12]
 80176de:	6813      	ldr	r3, [r2, #0]
 80176e0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80176e4:	4798      	blx	r3
 80176e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80176e8:	f843 0d10 	str.w	r0, [r3, #-16]!
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7ff fc7b 	bl	8016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80176f2:	682b      	ldr	r3, [r5, #0]
 80176f4:	4631      	mov	r1, r6
 80176f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80176fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80176fe:	4628      	mov	r0, r5
 8017700:	4798      	blx	r3
 8017702:	ab0a      	add	r3, sp, #40	@ 0x28
 8017704:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8017708:	4618      	mov	r0, r3
 801770a:	f7ff fc6d 	bl	8016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801770e:	4641      	mov	r1, r8
 8017710:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8017714:	4638      	mov	r0, r7
 8017716:	464a      	mov	r2, r9
 8017718:	f011 fdfa 	bl	8029310 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801771c:	2301      	movs	r3, #1
 801771e:	9300      	str	r3, [sp, #0]
 8017720:	4628      	mov	r0, r5
 8017722:	9b00      	ldr	r3, [sp, #0]
 8017724:	441c      	add	r4, r3
 8017726:	682b      	ldr	r3, [r5, #0]
 8017728:	b224      	sxth	r4, r4
 801772a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801772e:	4621      	mov	r1, r4
 8017730:	4798      	blx	r3
 8017732:	9008      	str	r0, [sp, #32]
 8017734:	a808      	add	r0, sp, #32
 8017736:	f7ff fc57 	bl	8016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801773a:	4621      	mov	r1, r4
 801773c:	0143      	lsls	r3, r0, #5
 801773e:	4628      	mov	r0, r5
 8017740:	9301      	str	r3, [sp, #4]
 8017742:	682b      	ldr	r3, [r5, #0]
 8017744:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017748:	4798      	blx	r3
 801774a:	9009      	str	r0, [sp, #36]	@ 0x24
 801774c:	a809      	add	r0, sp, #36	@ 0x24
 801774e:	f7ff fc4b 	bl	8016fe8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017752:	0143      	lsls	r3, r0, #5
 8017754:	9302      	str	r3, [sp, #8]
 8017756:	9b01      	ldr	r3, [sp, #4]
 8017758:	eba3 0b08 	sub.w	fp, r3, r8
 801775c:	9b02      	ldr	r3, [sp, #8]
 801775e:	eba3 0a09 	sub.w	sl, r3, r9
 8017762:	4658      	mov	r0, fp
 8017764:	4651      	mov	r1, sl
 8017766:	f7ff fecb 	bl	8017500 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801776a:	b320      	cbz	r0, 80177b6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 801776c:	4602      	mov	r2, r0
 801776e:	4651      	mov	r1, sl
 8017770:	9005      	str	r0, [sp, #20]
 8017772:	9803      	ldr	r0, [sp, #12]
 8017774:	f005 fa8f 	bl	801cc96 <_ZN8touchgfx6muldivElll>
 8017778:	2302      	movs	r3, #2
 801777a:	4659      	mov	r1, fp
 801777c:	fb90 faf3 	sdiv	sl, r0, r3
 8017780:	9b05      	ldr	r3, [sp, #20]
 8017782:	9803      	ldr	r0, [sp, #12]
 8017784:	461a      	mov	r2, r3
 8017786:	f005 fa86 	bl	801cc96 <_ZN8touchgfx6muldivElll>
 801778a:	2302      	movs	r3, #2
 801778c:	eba8 010a 	sub.w	r1, r8, sl
 8017790:	fb90 fbf3 	sdiv	fp, r0, r3
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	eb0b 0209 	add.w	r2, fp, r9
 801779a:	4638      	mov	r0, r7
 801779c:	689b      	ldr	r3, [r3, #8]
 801779e:	4798      	blx	r3
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	9a02      	ldr	r2, [sp, #8]
 80177a4:	4638      	mov	r0, r7
 80177a6:	9901      	ldr	r1, [sp, #4]
 80177a8:	689b      	ldr	r3, [r3, #8]
 80177aa:	445a      	add	r2, fp
 80177ac:	eba1 010a 	sub.w	r1, r1, sl
 80177b0:	4798      	blx	r3
 80177b2:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 80177b6:	42a6      	cmp	r6, r4
 80177b8:	db02      	blt.n	80177c0 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 80177ba:	b00b      	add	sp, #44	@ 0x2c
 80177bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177c0:	9b00      	ldr	r3, [sp, #0]
 80177c2:	9a04      	ldr	r2, [sp, #16]
 80177c4:	42a2      	cmp	r2, r4
 80177c6:	bf08      	it	eq
 80177c8:	f04f 33ff 	moveq.w	r3, #4294967295
 80177cc:	e7a7      	b.n	801771e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>
	...

080177d0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 80177d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d4:	6943      	ldr	r3, [r0, #20]
 80177d6:	b0a4      	sub	sp, #144	@ 0x90
 80177d8:	4605      	mov	r5, r0
 80177da:	460f      	mov	r7, r1
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d077      	beq.n	80178d0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 80177e0:	695c      	ldr	r4, [r3, #20]
 80177e2:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80177e6:	2b01      	cmp	r3, #1
 80177e8:	dc04      	bgt.n	80177f4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 80177ea:	2401      	movs	r4, #1
 80177ec:	4620      	mov	r0, r4
 80177ee:	b024      	add	sp, #144	@ 0x90
 80177f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80177f8:	ae24      	add	r6, sp, #144	@ 0x90
 80177fa:	011b      	lsls	r3, r3, #4
 80177fc:	f846 3d74 	str.w	r3, [r6, #-116]!
 8017800:	4630      	mov	r0, r6
 8017802:	f7ff fe74 	bl	80174ee <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017806:	8839      	ldrh	r1, [r7, #0]
 8017808:	88ba      	ldrh	r2, [r7, #4]
 801780a:	b280      	uxth	r0, r0
 801780c:	6823      	ldr	r3, [r4, #0]
 801780e:	440a      	add	r2, r1
 8017810:	1a09      	subs	r1, r1, r0
 8017812:	4402      	add	r2, r0
 8017814:	f10d 000a 	add.w	r0, sp, #10
 8017818:	b209      	sxth	r1, r1
 801781a:	9000      	str	r0, [sp, #0]
 801781c:	b212      	sxth	r2, r2
 801781e:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8017822:	4620      	mov	r0, r4
 8017824:	ab02      	add	r3, sp, #8
 8017826:	47c0      	blx	r8
 8017828:	2800      	cmp	r0, #0
 801782a:	d0de      	beq.n	80177ea <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 801782c:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8017830:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8017834:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8017838:	18ca      	adds	r2, r1, r3
 801783a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 801783e:	f8ad 100e 	strh.w	r1, [sp, #14]
 8017842:	4639      	mov	r1, r7
 8017844:	1a9b      	subs	r3, r3, r2
 8017846:	2200      	movs	r2, #0
 8017848:	f8ad 0010 	strh.w	r0, [sp, #16]
 801784c:	a803      	add	r0, sp, #12
 801784e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017852:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017856:	f7fb ffdf 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 801785a:	4629      	mov	r1, r5
 801785c:	a805      	add	r0, sp, #20
 801785e:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8017860:	f004 fda4 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017864:	682b      	ldr	r3, [r5, #0]
 8017866:	4628      	mov	r0, r5
 8017868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801786a:	4798      	blx	r3
 801786c:	ab03      	add	r3, sp, #12
 801786e:	9000      	str	r0, [sp, #0]
 8017870:	aa05      	add	r2, sp, #20
 8017872:	4639      	mov	r1, r7
 8017874:	4630      	mov	r0, r6
 8017876:	f011 fbff 	bl	8029078 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801787a:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 801787e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017882:	2f00      	cmp	r7, #0
 8017884:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8017888:	dd03      	ble.n	8017892 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 801788a:	42bb      	cmp	r3, r7
 801788c:	da01      	bge.n	8017892 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 801788e:	42ba      	cmp	r2, r7
 8017890:	da11      	bge.n	80178b6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8017892:	9200      	str	r2, [sp, #0]
 8017894:	4622      	mov	r2, r4
 8017896:	4631      	mov	r1, r6
 8017898:	4628      	mov	r0, r5
 801789a:	f7ff ff0e 	bl	80176ba <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801789e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80178a2:	4630      	mov	r0, r6
 80178a4:	f011 fc7c 	bl	80291a0 <_ZN8touchgfx6Canvas6renderEh>
 80178a8:	4b0b      	ldr	r3, [pc, #44]	@ (80178d8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 80178aa:	4604      	mov	r4, r0
 80178ac:	a80c      	add	r0, sp, #48	@ 0x30
 80178ae:	9307      	str	r3, [sp, #28]
 80178b0:	f001 f8c8 	bl	8018a44 <_ZN8touchgfx7OutlineD1Ev>
 80178b4:	e79a      	b.n	80177ec <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 80178b6:	1e7a      	subs	r2, r7, #1
 80178b8:	4631      	mov	r1, r6
 80178ba:	4628      	mov	r0, r5
 80178bc:	b212      	sxth	r2, r2
 80178be:	9200      	str	r2, [sp, #0]
 80178c0:	4622      	mov	r2, r4
 80178c2:	f7ff fefa 	bl	80176ba <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80178c6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80178ca:	9300      	str	r3, [sp, #0]
 80178cc:	463b      	mov	r3, r7
 80178ce:	e7e1      	b.n	8017894 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 80178d0:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 80178d4:	deff      	udf	#255	@ 0xff
 80178d6:	bf00      	nop
 80178d8:	08030e18 	.word	0x08030e18

080178dc <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 80178dc:	b510      	push	{r4, lr}
 80178de:	4604      	mov	r4, r0
 80178e0:	f7ff fc49 	bl	8017176 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 80178e4:	4620      	mov	r0, r4
 80178e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178ea:	f7ff ba1a 	b.w	8016d22 <_ZN8touchgfx17AbstractDataGraph5clearEv>

080178ee <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 80178ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178f0:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 80178f4:	460f      	mov	r7, r1
 80178f6:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 80178fa:	4604      	mov	r4, r0
 80178fc:	1c6b      	adds	r3, r5, #1
 80178fe:	4629      	mov	r1, r5
 8017900:	f8a0 311e 	strh.w	r3, [r0, #286]	@ 0x11e
 8017904:	6803      	ldr	r3, [r0, #0]
 8017906:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801790a:	4798      	blx	r3
 801790c:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8017910:	b915      	cbnz	r5, 8017918 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 8017912:	4620      	mov	r0, r4
 8017914:	f7ff fc2f 	bl	8017176 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8017918:	4620      	mov	r0, r4
 801791a:	4629      	mov	r1, r5
 801791c:	f7ff fc03 	bl	8017126 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8017920:	4628      	mov	r0, r5
 8017922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017924 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 8017924:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	@ 0x11e
 8017928:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 801792c:	4291      	cmp	r1, r2
 801792e:	db03      	blt.n	8017938 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 8017930:	6803      	ldr	r3, [r0, #0]
 8017932:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8017936:	4718      	bx	r3
 8017938:	4770      	bx	lr

0801793a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801793a:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801793e:	4770      	bx	lr

08017940 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8017940:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8017944:	4770      	bx	lr

08017946 <_ZN8touchgfx13ScalableImageD1Ev>:
 8017946:	4770      	bx	lr

08017948 <_ZN8touchgfx13ScalableImageD0Ev>:
 8017948:	b510      	push	{r4, lr}
 801794a:	4604      	mov	r4, r0
 801794c:	212c      	movs	r1, #44	@ 0x2c
 801794e:	f012 f813 	bl	8029978 <_ZdlPvj>
 8017952:	4620      	mov	r0, r4
 8017954:	bd10      	pop	{r4, pc}

08017956 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8017956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017958:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801795c:	b085      	sub	sp, #20
 801795e:	4604      	mov	r4, r0
 8017960:	460d      	mov	r5, r1
 8017962:	2bff      	cmp	r3, #255	@ 0xff
 8017964:	d128      	bne.n	80179b8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8017966:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 801796a:	4668      	mov	r0, sp
 801796c:	4631      	mov	r1, r6
 801796e:	f007 fa51 	bl	801ee14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017972:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8017976:	4630      	mov	r0, r6
 8017978:	f007 f9e4 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801797c:	4287      	cmp	r7, r0
 801797e:	d11b      	bne.n	80179b8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8017980:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8017984:	4630      	mov	r0, r6
 8017986:	f007 fa11 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801798a:	4287      	cmp	r7, r0
 801798c:	d114      	bne.n	80179b8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 801798e:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8017992:	2100      	movs	r1, #0
 8017994:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8017998:	f8ad 300e 	strh.w	r3, [sp, #14]
 801799c:	466b      	mov	r3, sp
 801799e:	9102      	str	r1, [sp, #8]
 80179a0:	f8ad 200c 	strh.w	r2, [sp, #12]
 80179a4:	cb03      	ldmia	r3!, {r0, r1}
 80179a6:	6020      	str	r0, [r4, #0]
 80179a8:	4620      	mov	r0, r4
 80179aa:	6061      	str	r1, [r4, #4]
 80179ac:	4619      	mov	r1, r3
 80179ae:	f7fb ff33 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 80179b2:	4620      	mov	r0, r4
 80179b4:	b005      	add	sp, #20
 80179b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179b8:	2300      	movs	r3, #0
 80179ba:	8023      	strh	r3, [r4, #0]
 80179bc:	8063      	strh	r3, [r4, #2]
 80179be:	80a3      	strh	r3, [r4, #4]
 80179c0:	80e3      	strh	r3, [r4, #6]
 80179c2:	e7f6      	b.n	80179b2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

080179c4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 80179c4:	b538      	push	{r3, r4, r5, lr}
 80179c6:	2300      	movs	r3, #0
 80179c8:	2501      	movs	r5, #1
 80179ca:	4604      	mov	r4, r0
 80179cc:	8083      	strh	r3, [r0, #4]
 80179ce:	80c3      	strh	r3, [r0, #6]
 80179d0:	8103      	strh	r3, [r0, #8]
 80179d2:	8143      	strh	r3, [r0, #10]
 80179d4:	8183      	strh	r3, [r0, #12]
 80179d6:	81c3      	strh	r3, [r0, #14]
 80179d8:	8203      	strh	r3, [r0, #16]
 80179da:	8243      	strh	r3, [r0, #18]
 80179dc:	61c3      	str	r3, [r0, #28]
 80179de:	8403      	strh	r3, [r0, #32]
 80179e0:	8443      	strh	r3, [r0, #34]	@ 0x22
 80179e2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 80179e6:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 80179ea:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80179ee:	4b07      	ldr	r3, [pc, #28]	@ (8017a0c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 80179f0:	6003      	str	r3, [r0, #0]
 80179f2:	880b      	ldrh	r3, [r1, #0]
 80179f4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80179f6:	23ff      	movs	r3, #255	@ 0xff
 80179f8:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80179fc:	f000 febd 	bl	801877a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017a00:	4b03      	ldr	r3, [pc, #12]	@ (8017a10 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8017a02:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8017a06:	4620      	mov	r0, r4
 8017a08:	6023      	str	r3, [r4, #0]
 8017a0a:	bd38      	pop	{r3, r4, r5, pc}
 8017a0c:	080309c8 	.word	0x080309c8
 8017a10:	080307e8 	.word	0x080307e8

08017a14 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8017a14:	4603      	mov	r3, r0
 8017a16:	3026      	adds	r0, #38	@ 0x26
 8017a18:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8017a1c:	b90b      	cbnz	r3, 8017a22 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8017a1e:	f005 b88d 	b.w	801cb3c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8017a22:	f005 b89b 	b.w	801cb5c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08017a28 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8017a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a2c:	4604      	mov	r4, r0
 8017a2e:	b0b3      	sub	sp, #204	@ 0xcc
 8017a30:	469b      	mov	fp, r3
 8017a32:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8017a36:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017a3a:	2500      	movs	r5, #0
 8017a3c:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8017a40:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8017a44:	ab11      	add	r3, sp, #68	@ 0x44
 8017a46:	9206      	str	r2, [sp, #24]
 8017a48:	4618      	mov	r0, r3
 8017a4a:	9511      	str	r5, [sp, #68]	@ 0x44
 8017a4c:	9307      	str	r3, [sp, #28]
 8017a4e:	ad13      	add	r5, sp, #76	@ 0x4c
 8017a50:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 8017a54:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 8017a58:	f7fb fede 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 8017a5c:	9b07      	ldr	r3, [sp, #28]
 8017a5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017a62:	e885 0003 	stmia.w	r5, {r0, r1}
 8017a66:	6821      	ldr	r1, [r4, #0]
 8017a68:	4620      	mov	r0, r4
 8017a6a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8017a6c:	4629      	mov	r1, r5
 8017a6e:	47b0      	blx	r6
 8017a70:	4621      	mov	r1, r4
 8017a72:	a815      	add	r0, sp, #84	@ 0x54
 8017a74:	1d26      	adds	r6, r4, #4
 8017a76:	f004 fc99 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017a7a:	a815      	add	r0, sp, #84	@ 0x54
 8017a7c:	f003 f9ca 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a80:	9b07      	ldr	r3, [sp, #28]
 8017a82:	4631      	mov	r1, r6
 8017a84:	4618      	mov	r0, r3
 8017a86:	f003 fa09 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8017a90:	f003 f9c0 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a94:	4628      	mov	r0, r5
 8017a96:	f007 fa47 	bl	801ef28 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017a9a:	9007      	str	r0, [sp, #28]
 8017a9c:	2800      	cmp	r0, #0
 8017a9e:	f000 80ce 	beq.w	8017c3e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 8017aa2:	f8db 200c 	ldr.w	r2, [fp, #12]
 8017aa6:	a809      	add	r0, sp, #36	@ 0x24
 8017aa8:	f8db 1000 	ldr.w	r1, [fp]
 8017aac:	920c      	str	r2, [sp, #48]	@ 0x30
 8017aae:	f8da 2000 	ldr.w	r2, [sl]
 8017ab2:	9109      	str	r1, [sp, #36]	@ 0x24
 8017ab4:	920d      	str	r2, [sp, #52]	@ 0x34
 8017ab6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8017aba:	f8db 1004 	ldr.w	r1, [fp, #4]
 8017abe:	920e      	str	r2, [sp, #56]	@ 0x38
 8017ac0:	f8da 2008 	ldr.w	r2, [sl, #8]
 8017ac4:	910a      	str	r1, [sp, #40]	@ 0x28
 8017ac6:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017ac8:	f8db 1008 	ldr.w	r1, [fp, #8]
 8017acc:	f8da 200c 	ldr.w	r2, [sl, #12]
 8017ad0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017ad2:	a90d      	add	r1, sp, #52	@ 0x34
 8017ad4:	9210      	str	r2, [sp, #64]	@ 0x40
 8017ad6:	4632      	mov	r2, r6
 8017ad8:	f003 f9c4 	bl	801ae64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017adc:	4632      	mov	r2, r6
 8017ade:	a90e      	add	r1, sp, #56	@ 0x38
 8017ae0:	a80a      	add	r0, sp, #40	@ 0x28
 8017ae2:	f003 f9bf 	bl	801ae64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017ae6:	4632      	mov	r2, r6
 8017ae8:	a90f      	add	r1, sp, #60	@ 0x3c
 8017aea:	a80b      	add	r0, sp, #44	@ 0x2c
 8017aec:	f003 f9ba 	bl	801ae64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017af0:	4632      	mov	r2, r6
 8017af2:	a910      	add	r1, sp, #64	@ 0x40
 8017af4:	a80c      	add	r0, sp, #48	@ 0x30
 8017af6:	f003 f9b5 	bl	801ae64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017afa:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8017afe:	ed97 3a00 	vldr	s6, [r7]
 8017b02:	eef0 6a67 	vmov.f32	s13, s15
 8017b06:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8017b0a:	edd7 4a01 	vldr	s9, [r7, #4]
 8017b0e:	eeb0 7a67 	vmov.f32	s14, s15
 8017b12:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8017b16:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8017b1a:	ed99 2a00 	vldr	s4, [r9]
 8017b1e:	eeb0 6a67 	vmov.f32	s12, s15
 8017b22:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8017b26:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8017b2a:	edd8 2a00 	vldr	s5, [r8]
 8017b2e:	edd9 3a01 	vldr	s7, [r9, #4]
 8017b32:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017b36:	ed98 4a01 	vldr	s8, [r8, #4]
 8017b3a:	ed99 5a02 	vldr	s10, [r9, #8]
 8017b3e:	edd8 5a02 	vldr	s11, [r8, #8]
 8017b42:	ee16 6a10 	vmov	r6, s12
 8017b46:	eeb0 6a67 	vmov.f32	s12, s15
 8017b4a:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8017b4e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8017b52:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017b56:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8017b5a:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8017b5e:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 8017b62:	ee16 0a10 	vmov	r0, s12
 8017b66:	eeb0 6a67 	vmov.f32	s12, s15
 8017b6a:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8017b6e:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 8017b72:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017b76:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 8017b7a:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8017b7e:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 8017b82:	ee16 1a10 	vmov	r1, s12
 8017b86:	eeb0 6a67 	vmov.f32	s12, s15
 8017b8a:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8017b8e:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 8017b92:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017b96:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 8017b9a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8017b9e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8017ba2:	68ff      	ldr	r7, [r7, #12]
 8017ba4:	ee16 2a10 	vmov	r2, s12
 8017ba8:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8017bac:	9624      	str	r6, [sp, #144]	@ 0x90
 8017bae:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017bb2:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8017bb6:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 8017bba:	4628      	mov	r0, r5
 8017bbc:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 8017bc0:	9b06      	ldr	r3, [sp, #24]
 8017bc2:	922d      	str	r2, [sp, #180]	@ 0xb4
 8017bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8017c44 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 8017bc6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8017bc8:	8812      	ldrh	r2, [r2, #0]
 8017bca:	9b07      	ldr	r3, [sp, #28]
 8017bcc:	9218      	str	r2, [sp, #96]	@ 0x60
 8017bce:	9319      	str	r3, [sp, #100]	@ 0x64
 8017bd0:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 8017bd4:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8017bd8:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8017bdc:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8017be0:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8017be4:	9731      	str	r7, [sp, #196]	@ 0xc4
 8017be6:	f007 f9cf 	bl	801ef88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8017bea:	901a      	str	r0, [sp, #104]	@ 0x68
 8017bec:	4628      	mov	r0, r5
 8017bee:	f007 f8a9 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017bf2:	901b      	str	r0, [sp, #108]	@ 0x6c
 8017bf4:	4628      	mov	r0, r5
 8017bf6:	f007 f8d9 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017bfa:	901c      	str	r0, [sp, #112]	@ 0x70
 8017bfc:	4628      	mov	r0, r5
 8017bfe:	f007 f8a1 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c02:	4b11      	ldr	r3, [pc, #68]	@ (8017c48 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8017c04:	901d      	str	r0, [sp, #116]	@ 0x74
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8017c0c:	b10a      	cbz	r2, 8017c12 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 8017c0e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8017c10:	b905      	cbnz	r5, 8017c14 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 8017c12:	689d      	ldr	r5, [r3, #8]
 8017c14:	682b      	ldr	r3, [r5, #0]
 8017c16:	4620      	mov	r0, r4
 8017c18:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8017c1a:	f7ff fefb 	bl	8017a14 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8017c1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017c22:	aa1e      	add	r2, sp, #120	@ 0x78
 8017c24:	a917      	add	r1, sp, #92	@ 0x5c
 8017c26:	9304      	str	r3, [sp, #16]
 8017c28:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017c2c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8017c30:	ab13      	add	r3, sp, #76	@ 0x4c
 8017c32:	4628      	mov	r0, r5
 8017c34:	9301      	str	r3, [sp, #4]
 8017c36:	ab15      	add	r3, sp, #84	@ 0x54
 8017c38:	9300      	str	r3, [sp, #0]
 8017c3a:	ab19      	add	r3, sp, #100	@ 0x64
 8017c3c:	47b0      	blx	r6
 8017c3e:	b033      	add	sp, #204	@ 0xcc
 8017c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c44:	2402876a 	.word	0x2402876a
 8017c48:	24028770 	.word	0x24028770

08017c4c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8017c4c:	b570      	push	{r4, r5, r6, lr}
 8017c4e:	ed2d 8b04 	vpush	{d8-d9}
 8017c52:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8017c56:	b098      	sub	sp, #96	@ 0x60
 8017c58:	4604      	mov	r4, r0
 8017c5a:	460e      	mov	r6, r1
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d065      	beq.n	8017d2c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8017c60:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017c64:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8017c68:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 8017d48 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8017c6c:	ee09 3a10 	vmov	s18, r3
 8017c70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017c74:	4628      	mov	r0, r5
 8017c76:	ee08 3a90 	vmov	s17, r3
 8017c7a:	4b34      	ldr	r3, [pc, #208]	@ (8017d4c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8017c7c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8017c80:	930c      	str	r3, [sp, #48]	@ 0x30
 8017c82:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8017c86:	930d      	str	r3, [sp, #52]	@ 0x34
 8017c88:	930e      	str	r3, [sp, #56]	@ 0x38
 8017c8a:	ee39 9a08 	vadd.f32	s18, s18, s16
 8017c8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017c90:	f007 f858 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c94:	ee07 0a90 	vmov	s15, r0
 8017c98:	4628      	mov	r0, r5
 8017c9a:	ee78 8a88 	vadd.f32	s17, s17, s16
 8017c9e:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8017ca2:	f007 f883 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8017d50 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8017ca8:	ee07 0a90 	vmov	s15, r0
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017cb2:	eef0 7a48 	vmov.f32	s15, s16
 8017cb6:	2b01      	cmp	r3, #1
 8017cb8:	d13c      	bne.n	8017d34 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 8017cba:	eef0 6a69 	vmov.f32	s13, s19
 8017cbe:	ee19 3a90 	vmov	r3, s19
 8017cc2:	eeb0 6a47 	vmov.f32	s12, s14
 8017cc6:	eef0 5a47 	vmov.f32	s11, s14
 8017cca:	eef0 9a48 	vmov.f32	s19, s16
 8017cce:	eeb0 7a48 	vmov.f32	s14, s16
 8017cd2:	9314      	str	r3, [sp, #80]	@ 0x50
 8017cd4:	ab14      	add	r3, sp, #80	@ 0x50
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	4631      	mov	r1, r6
 8017cda:	9303      	str	r3, [sp, #12]
 8017cdc:	ab10      	add	r3, sp, #64	@ 0x40
 8017cde:	4620      	mov	r0, r4
 8017ce0:	edcd 7a04 	vstr	s15, [sp, #16]
 8017ce4:	9302      	str	r3, [sp, #8]
 8017ce6:	ab0c      	add	r3, sp, #48	@ 0x30
 8017ce8:	ed8d 9a05 	vstr	s18, [sp, #20]
 8017cec:	9301      	str	r3, [sp, #4]
 8017cee:	ab08      	add	r3, sp, #32
 8017cf0:	ed8d 9a06 	vstr	s18, [sp, #24]
 8017cf4:	9300      	str	r3, [sp, #0]
 8017cf6:	ab04      	add	r3, sp, #16
 8017cf8:	edcd 7a07 	vstr	s15, [sp, #28]
 8017cfc:	edcd 7a08 	vstr	s15, [sp, #32]
 8017d00:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 8017d04:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 8017d08:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 8017d0c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8017d10:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 8017d14:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8017d18:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8017d1c:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8017d20:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 8017d24:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 8017d28:	f7ff fe7e 	bl	8017a28 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8017d2c:	b018      	add	sp, #96	@ 0x60
 8017d2e:	ecbd 8b04 	vpop	{d8-d9}
 8017d32:	bd70      	pop	{r4, r5, r6, pc}
 8017d34:	eef0 6a47 	vmov.f32	s13, s14
 8017d38:	ee18 3a10 	vmov	r3, s16
 8017d3c:	eef0 5a69 	vmov.f32	s11, s19
 8017d40:	eeb0 6a48 	vmov.f32	s12, s16
 8017d44:	e7c5      	b.n	8017cd2 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 8017d46:	bf00      	nop
 8017d48:	00000000 	.word	0x00000000
 8017d4c:	42c80000 	.word	0x42c80000
 8017d50:	24028768 	.word	0x24028768

08017d54 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8017d54:	2000      	movs	r0, #0
 8017d56:	4770      	bx	lr

08017d58 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017d58:	4b07      	ldr	r3, [pc, #28]	@ (8017d78 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8017d5a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017d5c:	881b      	ldrh	r3, [r3, #0]
 8017d5e:	4293      	cmp	r3, r2
 8017d60:	bf81      	itttt	hi
 8017d62:	4b06      	ldrhi	r3, [pc, #24]	@ (8017d7c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017d64:	681b      	ldrhi	r3, [r3, #0]
 8017d66:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8017d6a:	7858      	ldrbhi	r0, [r3, #1]
 8017d6c:	bf8c      	ite	hi
 8017d6e:	f000 0003 	andhi.w	r0, r0, #3
 8017d72:	2000      	movls	r0, #0
 8017d74:	4770      	bx	lr
 8017d76:	bf00      	nop
 8017d78:	240287cc 	.word	0x240287cc
 8017d7c:	240287c8 	.word	0x240287c8

08017d80 <_ZN8touchgfx8TextAreaD1Ev>:
 8017d80:	4770      	bx	lr
	...

08017d84 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8017d84:	4b11      	ldr	r3, [pc, #68]	@ (8017dcc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8017d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d8a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017d8c:	4604      	mov	r4, r0
 8017d8e:	881b      	ldrh	r3, [r3, #0]
 8017d90:	428b      	cmp	r3, r1
 8017d92:	d918      	bls.n	8017dc6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017d94:	6803      	ldr	r3, [r0, #0]
 8017d96:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8017d98:	4b0d      	ldr	r3, [pc, #52]	@ (8017dd0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017d9a:	6818      	ldr	r0, [r3, #0]
 8017d9c:	f7f1 f9be 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 8017da0:	6823      	ldr	r3, [r4, #0]
 8017da2:	4606      	mov	r6, r0
 8017da4:	4620      	mov	r0, r4
 8017da6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017da8:	4798      	blx	r3
 8017daa:	6823      	ldr	r3, [r4, #0]
 8017dac:	4607      	mov	r7, r0
 8017dae:	4620      	mov	r0, r4
 8017db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017db4:	4798      	blx	r3
 8017db6:	463a      	mov	r2, r7
 8017db8:	4603      	mov	r3, r0
 8017dba:	4631      	mov	r1, r6
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	46ac      	mov	ip, r5
 8017dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017dc4:	4760      	bx	ip
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dcc:	240287cc 	.word	0x240287cc
 8017dd0:	240287d4 	.word	0x240287d4

08017dd4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017dd4:	4b18      	ldr	r3, [pc, #96]	@ (8017e38 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017dd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017dda:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017ddc:	4604      	mov	r4, r0
 8017dde:	881b      	ldrh	r3, [r3, #0]
 8017de0:	428b      	cmp	r3, r1
 8017de2:	d926      	bls.n	8017e32 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017de4:	4b15      	ldr	r3, [pc, #84]	@ (8017e3c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017dec:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017df0:	4b13      	ldr	r3, [pc, #76]	@ (8017e40 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017df2:	7855      	ldrb	r5, [r2, #1]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8017dfa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017dfe:	6833      	ldr	r3, [r6, #0]
 8017e00:	69df      	ldr	r7, [r3, #28]
 8017e02:	4b10      	ldr	r3, [pc, #64]	@ (8017e44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017e04:	6818      	ldr	r0, [r3, #0]
 8017e06:	f7f1 f989 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 8017e0a:	6823      	ldr	r3, [r4, #0]
 8017e0c:	4680      	mov	r8, r0
 8017e0e:	4620      	mov	r0, r4
 8017e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e12:	4798      	blx	r3
 8017e14:	6823      	ldr	r3, [r4, #0]
 8017e16:	4681      	mov	r9, r0
 8017e18:	4620      	mov	r0, r4
 8017e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e1e:	4798      	blx	r3
 8017e20:	464b      	mov	r3, r9
 8017e22:	9000      	str	r0, [sp, #0]
 8017e24:	4642      	mov	r2, r8
 8017e26:	4629      	mov	r1, r5
 8017e28:	4630      	mov	r0, r6
 8017e2a:	47b8      	blx	r7
 8017e2c:	b003      	add	sp, #12
 8017e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e32:	2000      	movs	r0, #0
 8017e34:	e7fa      	b.n	8017e2c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017e36:	bf00      	nop
 8017e38:	240287cc 	.word	0x240287cc
 8017e3c:	240287c8 	.word	0x240287c8
 8017e40:	240287d0 	.word	0x240287d0
 8017e44:	240287d4 	.word	0x240287d4

08017e48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017e48:	b40e      	push	{r1, r2, r3}
 8017e4a:	4b30      	ldr	r3, [pc, #192]	@ (8017f0c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e50:	881a      	ldrh	r2, [r3, #0]
 8017e52:	b09d      	sub	sp, #116	@ 0x74
 8017e54:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8017e56:	4604      	mov	r4, r0
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	d954      	bls.n	8017f06 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017e5c:	aa26      	add	r2, sp, #152	@ 0x98
 8017e5e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8017f10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017e62:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8017f14 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017e66:	9202      	str	r2, [sp, #8]
 8017e68:	f8d9 2000 	ldr.w	r2, [r9]
 8017e6c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017e70:	f8d8 3000 	ldr.w	r3, [r8]
 8017e74:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e7e:	4798      	blx	r3
 8017e80:	4606      	mov	r6, r0
 8017e82:	b207      	sxth	r7, r0
 8017e84:	a803      	add	r0, sp, #12
 8017e86:	f005 fa82 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 8017e8a:	682b      	ldr	r3, [r5, #0]
 8017e8c:	4628      	mov	r0, r5
 8017e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e90:	4798      	blx	r3
 8017e92:	682b      	ldr	r3, [r5, #0]
 8017e94:	4682      	mov	sl, r0
 8017e96:	4628      	mov	r0, r5
 8017e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e9a:	4798      	blx	r3
 8017e9c:	4653      	mov	r3, sl
 8017e9e:	9000      	str	r0, [sp, #0]
 8017ea0:	a803      	add	r0, sp, #12
 8017ea2:	9a02      	ldr	r2, [sp, #8]
 8017ea4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8017ea6:	f005 facd 	bl	801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017eaa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017eac:	f8d9 3000 	ldr.w	r3, [r9]
 8017eb0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8017eb4:	8925      	ldrh	r5, [r4, #8]
 8017eb6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8017eba:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017ebe:	eba5 050c 	sub.w	r5, r5, ip
 8017ec2:	784a      	ldrb	r2, [r1, #1]
 8017ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8017ec8:	b22d      	sxth	r5, r5
 8017eca:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8017ece:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017ed2:	9500      	str	r5, [sp, #0]
 8017ed4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017ed8:	a803      	add	r0, sp, #12
 8017eda:	f002 fca1 	bl	801a820 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017ede:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8017ee2:	b203      	sxth	r3, r0
 8017ee4:	18b9      	adds	r1, r7, r2
 8017ee6:	2900      	cmp	r1, #0
 8017ee8:	dd0b      	ble.n	8017f02 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8017eea:	3b01      	subs	r3, #1
 8017eec:	fb13 f302 	smulbb	r3, r3, r2
 8017ef0:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017ef4:	b21f      	sxth	r7, r3
 8017ef6:	4638      	mov	r0, r7
 8017ef8:	b01d      	add	sp, #116	@ 0x74
 8017efa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017efe:	b003      	add	sp, #12
 8017f00:	4770      	bx	lr
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	dcf7      	bgt.n	8017ef6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017f06:	2700      	movs	r7, #0
 8017f08:	e7f5      	b.n	8017ef6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017f0a:	bf00      	nop
 8017f0c:	240287cc 	.word	0x240287cc
 8017f10:	240287c8 	.word	0x240287c8
 8017f14:	240287d0 	.word	0x240287d0

08017f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017f18:	4bbd      	ldr	r3, [pc, #756]	@ (8018210 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8017f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f1e:	460c      	mov	r4, r1
 8017f20:	881b      	ldrh	r3, [r3, #0]
 8017f22:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8017f24:	b0a9      	sub	sp, #164	@ 0xa4
 8017f26:	4680      	mov	r8, r0
 8017f28:	428b      	cmp	r3, r1
 8017f2a:	d809      	bhi.n	8017f40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8017f32:	6083      	str	r3, [r0, #8]
 8017f34:	e9c0 3200 	strd	r3, r2, [r0]
 8017f38:	4640      	mov	r0, r8
 8017f3a:	b029      	add	sp, #164	@ 0xa4
 8017f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f40:	4eb4      	ldr	r6, [pc, #720]	@ (8018214 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8017f42:	6833      	ldr	r3, [r6, #0]
 8017f44:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017f48:	4bb3      	ldr	r3, [pc, #716]	@ (8018218 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017f50:	4bb2      	ldr	r3, [pc, #712]	@ (801821c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8017f52:	6818      	ldr	r0, [r3, #0]
 8017f54:	f7f1 f8e2 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 8017f58:	682b      	ldr	r3, [r5, #0]
 8017f5a:	4681      	mov	r9, r0
 8017f5c:	4628      	mov	r0, r5
 8017f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f60:	4798      	blx	r3
 8017f62:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8017f64:	b203      	sxth	r3, r0
 8017f66:	4682      	mov	sl, r0
 8017f68:	4407      	add	r7, r0
 8017f6a:	a80f      	add	r0, sp, #60	@ 0x3c
 8017f6c:	9304      	str	r3, [sp, #16]
 8017f6e:	b2bb      	uxth	r3, r7
 8017f70:	9303      	str	r3, [sp, #12]
 8017f72:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	f040 80a5 	bne.w	80180c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8017f7c:	f005 fa07 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 8017f80:	682b      	ldr	r3, [r5, #0]
 8017f82:	4628      	mov	r0, r5
 8017f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f86:	4798      	blx	r3
 8017f88:	682b      	ldr	r3, [r5, #0]
 8017f8a:	4606      	mov	r6, r0
 8017f8c:	4628      	mov	r0, r5
 8017f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f90:	4798      	blx	r3
 8017f92:	6823      	ldr	r3, [r4, #0]
 8017f94:	4607      	mov	r7, r0
 8017f96:	4620      	mov	r0, r4
 8017f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017f9a:	4798      	blx	r3
 8017f9c:	6823      	ldr	r3, [r4, #0]
 8017f9e:	4683      	mov	fp, r0
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017fa6:	4798      	blx	r3
 8017fa8:	463b      	mov	r3, r7
 8017faa:	4649      	mov	r1, r9
 8017fac:	4632      	mov	r2, r6
 8017fae:	2600      	movs	r6, #0
 8017fb0:	e9cd b000 	strd	fp, r0, [sp]
 8017fb4:	a80f      	add	r0, sp, #60	@ 0x3c
 8017fb6:	4637      	mov	r7, r6
 8017fb8:	f005 fa59 	bl	801d46e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017fbc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017fc0:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8018214 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8017fc4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017fc8:	bf0c      	ite	eq
 8017fca:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8017fce:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8017fd2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017fd4:	4629      	mov	r1, r5
 8017fd6:	f8db 3000 	ldr.w	r3, [fp]
 8017fda:	a80f      	add	r0, sp, #60	@ 0x3c
 8017fdc:	3701      	adds	r7, #1
 8017fde:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017fe2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017fe6:	b2bf      	uxth	r7, r7
 8017fe8:	785b      	ldrb	r3, [r3, #1]
 8017fea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017fee:	f002 f91e 	bl	801a22e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017ff2:	9b03      	ldr	r3, [sp, #12]
 8017ff4:	4286      	cmp	r6, r0
 8017ff6:	eba9 0903 	sub.w	r9, r9, r3
 8017ffa:	bfb8      	it	lt
 8017ffc:	4606      	movlt	r6, r0
 8017ffe:	a80f      	add	r0, sp, #60	@ 0x3c
 8018000:	fa0f f989 	sxth.w	r9, r9
 8018004:	b236      	sxth	r6, r6
 8018006:	f005 f9e9 	bl	801d3dc <_ZN8touchgfx12TextProvider11endOfStringEv>
 801800a:	b918      	cbnz	r0, 8018014 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801800c:	7a2b      	ldrb	r3, [r5, #8]
 801800e:	444b      	add	r3, r9
 8018010:	2b00      	cmp	r3, #0
 8018012:	dcde      	bgt.n	8017fd2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8018014:	9b03      	ldr	r3, [sp, #12]
 8018016:	4620      	mov	r0, r4
 8018018:	9a04      	ldr	r2, [sp, #16]
 801801a:	fb13 f707 	smulbb	r7, r3, r7
 801801e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018020:	f895 9009 	ldrb.w	r9, [r5, #9]
 8018024:	1aff      	subs	r7, r7, r3
 8018026:	b2bf      	uxth	r7, r7
 8018028:	b23b      	sxth	r3, r7
 801802a:	429a      	cmp	r2, r3
 801802c:	bfa8      	it	ge
 801802e:	4657      	movge	r7, sl
 8018030:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018034:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8018038:	6823      	ldr	r3, [r4, #0]
 801803a:	444f      	add	r7, r9
 801803c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801803e:	bf08      	it	eq
 8018040:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8018044:	fa1f f987 	uxth.w	r9, r7
 8018048:	bf18      	it	ne
 801804a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801804e:	4798      	blx	r3
 8018050:	2801      	cmp	r0, #1
 8018052:	fa0f f789 	sxth.w	r7, r9
 8018056:	b2b3      	uxth	r3, r6
 8018058:	f000 80e2 	beq.w	8018220 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801805c:	2802      	cmp	r0, #2
 801805e:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8018062:	f000 80e3 	beq.w	801822c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8018066:	7aea      	ldrb	r2, [r5, #11]
 8018068:	b236      	sxth	r6, r6
 801806a:	7b2d      	ldrb	r5, [r5, #12]
 801806c:	1ab6      	subs	r6, r6, r2
 801806e:	442a      	add	r2, r5
 8018070:	fa1f fa86 	uxth.w	sl, r6
 8018074:	4413      	add	r3, r2
 8018076:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801807a:	fa0f fb8a 	sxth.w	fp, sl
 801807e:	b29b      	uxth	r3, r3
 8018080:	2a02      	cmp	r2, #2
 8018082:	b21e      	sxth	r6, r3
 8018084:	f000 80d6 	beq.w	8018234 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8018088:	2a03      	cmp	r2, #3
 801808a:	f000 80de 	beq.w	801824a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801808e:	2a01      	cmp	r2, #1
 8018090:	f040 80e6 	bne.w	8018260 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8018094:	8925      	ldrh	r5, [r4, #8]
 8018096:	4633      	mov	r3, r6
 8018098:	463e      	mov	r6, r7
 801809a:	eba5 0909 	sub.w	r9, r5, r9
 801809e:	461f      	mov	r7, r3
 80180a0:	465d      	mov	r5, fp
 80180a2:	fa0f fb89 	sxth.w	fp, r9
 80180a6:	4b5d      	ldr	r3, [pc, #372]	@ (801821c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80180a8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80180aa:	6818      	ldr	r0, [r3, #0]
 80180ac:	f7f1 f836 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 80180b0:	f8a8 b000 	strh.w	fp, [r8]
 80180b4:	f8a8 5002 	strh.w	r5, [r8, #2]
 80180b8:	f8a8 6004 	strh.w	r6, [r8, #4]
 80180bc:	f8a8 7006 	strh.w	r7, [r8, #6]
 80180c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80180c4:	e738      	b.n	8017f38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80180c6:	f005 f962 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 80180ca:	682b      	ldr	r3, [r5, #0]
 80180cc:	4628      	mov	r0, r5
 80180ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80180d0:	4798      	blx	r3
 80180d2:	682b      	ldr	r3, [r5, #0]
 80180d4:	4607      	mov	r7, r0
 80180d6:	4628      	mov	r0, r5
 80180d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80180da:	4798      	blx	r3
 80180dc:	6823      	ldr	r3, [r4, #0]
 80180de:	4683      	mov	fp, r0
 80180e0:	4620      	mov	r0, r4
 80180e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80180e4:	4798      	blx	r3
 80180e6:	6822      	ldr	r2, [r4, #0]
 80180e8:	9005      	str	r0, [sp, #20]
 80180ea:	4620      	mov	r0, r4
 80180ec:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80180f0:	4790      	blx	r2
 80180f2:	9b05      	ldr	r3, [sp, #20]
 80180f4:	463a      	mov	r2, r7
 80180f6:	4649      	mov	r1, r9
 80180f8:	9001      	str	r0, [sp, #4]
 80180fa:	a80f      	add	r0, sp, #60	@ 0x3c
 80180fc:	9300      	str	r3, [sp, #0]
 80180fe:	465b      	mov	r3, fp
 8018100:	f005 f9b5 	bl	801d46e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018104:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018108:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801810c:	af0f      	add	r7, sp, #60	@ 0x3c
 801810e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8018112:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018116:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8018118:	bf0a      	itet	eq
 801811a:	464a      	moveq	r2, r9
 801811c:	461a      	movne	r2, r3
 801811e:	4699      	moveq	r9, r3
 8018120:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8018124:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8018128:	1ad2      	subs	r2, r2, r3
 801812a:	6833      	ldr	r3, [r6, #0]
 801812c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8018130:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018134:	7859      	ldrb	r1, [r3, #1]
 8018136:	2300      	movs	r3, #0
 8018138:	9707      	str	r7, [sp, #28]
 801813a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801813e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018142:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8018146:	f88d 1020 	strb.w	r1, [sp, #32]
 801814a:	9509      	str	r5, [sp, #36]	@ 0x24
 801814c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018150:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8018154:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8018158:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801815c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8018160:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8018164:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8018168:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801816c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8018170:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8018174:	b350      	cbz	r0, 80181cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018176:	682b      	ldr	r3, [r5, #0]
 8018178:	4628      	mov	r0, r5
 801817a:	695b      	ldr	r3, [r3, #20]
 801817c:	4798      	blx	r3
 801817e:	4607      	mov	r7, r0
 8018180:	b320      	cbz	r0, 80181cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018184:	4639      	mov	r1, r7
 8018186:	6803      	ldr	r3, [r0, #0]
 8018188:	68db      	ldr	r3, [r3, #12]
 801818a:	4798      	blx	r3
 801818c:	4606      	mov	r6, r0
 801818e:	b1e8      	cbz	r0, 80181cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018190:	7b43      	ldrb	r3, [r0, #13]
 8018192:	7a82      	ldrb	r2, [r0, #10]
 8018194:	005b      	lsls	r3, r3, #1
 8018196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801819a:	4313      	orrs	r3, r2
 801819c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80181a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80181a4:	2b06      	cmp	r3, #6
 80181a6:	d111      	bne.n	80181cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80181a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80181aa:	4632      	mov	r2, r6
 80181ac:	4639      	mov	r1, r7
 80181ae:	6803      	ldr	r3, [r0, #0]
 80181b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80181b2:	4798      	blx	r3
 80181b4:	7b73      	ldrb	r3, [r6, #13]
 80181b6:	005b      	lsls	r3, r3, #1
 80181b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80181bc:	7ab3      	ldrb	r3, [r6, #10]
 80181be:	4313      	orrs	r3, r2
 80181c0:	4418      	add	r0, r3
 80181c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80181c6:	4418      	add	r0, r3
 80181c8:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80181cc:	2600      	movs	r6, #0
 80181ce:	4637      	mov	r7, r6
 80181d0:	a806      	add	r0, sp, #24
 80181d2:	3701      	adds	r7, #1
 80181d4:	f002 fa21 	bl	801a61a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80181d8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 80181dc:	9b03      	ldr	r3, [sp, #12]
 80181de:	b2bf      	uxth	r7, r7
 80181e0:	4286      	cmp	r6, r0
 80181e2:	eba9 0903 	sub.w	r9, r9, r3
 80181e6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80181ea:	bfb8      	it	lt
 80181ec:	4606      	movlt	r6, r0
 80181ee:	fa0f f989 	sxth.w	r9, r9
 80181f2:	b236      	sxth	r6, r6
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	f43f af0d 	beq.w	8018014 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80181fa:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 80181fe:	2b00      	cmp	r3, #0
 8018200:	f47f af08 	bne.w	8018014 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018204:	7a2b      	ldrb	r3, [r5, #8]
 8018206:	444b      	add	r3, r9
 8018208:	2b00      	cmp	r3, #0
 801820a:	dce1      	bgt.n	80181d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801820c:	e702      	b.n	8018014 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801820e:	bf00      	nop
 8018210:	240287cc 	.word	0x240287cc
 8018214:	240287c8 	.word	0x240287c8
 8018218:	240287d0 	.word	0x240287d0
 801821c:	240287d4 	.word	0x240287d4
 8018220:	ebaa 0606 	sub.w	r6, sl, r6
 8018224:	2002      	movs	r0, #2
 8018226:	fb96 f6f0 	sdiv	r6, r6, r0
 801822a:	e71c      	b.n	8018066 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801822c:	441e      	add	r6, r3
 801822e:	ebaa 0606 	sub.w	r6, sl, r6
 8018232:	e718      	b.n	8018066 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8018234:	8925      	ldrh	r5, [r4, #8]
 8018236:	1aed      	subs	r5, r5, r3
 8018238:	eba5 050a 	sub.w	r5, r5, sl
 801823c:	fa0f fb85 	sxth.w	fp, r5
 8018240:	8965      	ldrh	r5, [r4, #10]
 8018242:	eba5 0509 	sub.w	r5, r5, r9
 8018246:	b22d      	sxth	r5, r5
 8018248:	e72d      	b.n	80180a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801824a:	8965      	ldrh	r5, [r4, #10]
 801824c:	f04f 0b00 	mov.w	fp, #0
 8018250:	1aed      	subs	r5, r5, r3
 8018252:	4633      	mov	r3, r6
 8018254:	463e      	mov	r6, r7
 8018256:	eba5 050a 	sub.w	r5, r5, sl
 801825a:	461f      	mov	r7, r3
 801825c:	b22d      	sxth	r5, r5
 801825e:	e722      	b.n	80180a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8018260:	2500      	movs	r5, #0
 8018262:	e720      	b.n	80180a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08018264 <_ZN8touchgfx8TextAreaD0Ev>:
 8018264:	b510      	push	{r4, lr}
 8018266:	4604      	mov	r4, r0
 8018268:	2148      	movs	r1, #72	@ 0x48
 801826a:	f011 fb85 	bl	8029978 <_ZdlPvj>
 801826e:	4620      	mov	r0, r4
 8018270:	bd10      	pop	{r4, pc}
	...

08018274 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8018274:	b513      	push	{r0, r1, r4, lr}
 8018276:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801827a:	4604      	mov	r4, r0
 801827c:	b1fb      	cbz	r3, 80182be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801827e:	4b16      	ldr	r3, [pc, #88]	@ (80182d8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8018280:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8018282:	881b      	ldrh	r3, [r3, #0]
 8018284:	428b      	cmp	r3, r1
 8018286:	d91a      	bls.n	80182be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018288:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801828c:	2b00      	cmp	r3, #0
 801828e:	dd16      	ble.n	80182be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018290:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018294:	2b00      	cmp	r3, #0
 8018296:	dd12      	ble.n	80182be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018298:	4b10      	ldr	r3, [pc, #64]	@ (80182dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801829a:	6818      	ldr	r0, [r3, #0]
 801829c:	f7f0 ff3e 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 80182a0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80182a4:	6822      	ldr	r2, [r4, #0]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	db06      	blt.n	80182b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80182aa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	db02      	blt.n	80182b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80182b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80182b4:	4298      	cmp	r0, r3
 80182b6:	d004      	beq.n	80182c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80182b8:	6953      	ldr	r3, [r2, #20]
 80182ba:	4620      	mov	r0, r4
 80182bc:	4798      	blx	r3
 80182be:	b002      	add	sp, #8
 80182c0:	bd10      	pop	{r4, pc}
 80182c2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80182c6:	466b      	mov	r3, sp
 80182c8:	6912      	ldr	r2, [r2, #16]
 80182ca:	c903      	ldmia	r1, {r0, r1}
 80182cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80182d0:	4619      	mov	r1, r3
 80182d2:	4620      	mov	r0, r4
 80182d4:	4790      	blx	r2
 80182d6:	e7f2      	b.n	80182be <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80182d8:	240287cc 	.word	0x240287cc
 80182dc:	240287d4 	.word	0x240287d4

080182e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80182e0:	4b45      	ldr	r3, [pc, #276]	@ (80183f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80182e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182e6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80182e8:	b08e      	sub	sp, #56	@ 0x38
 80182ea:	881b      	ldrh	r3, [r3, #0]
 80182ec:	4604      	mov	r4, r0
 80182ee:	4293      	cmp	r3, r2
 80182f0:	d97e      	bls.n	80183f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80182f2:	6808      	ldr	r0, [r1, #0]
 80182f4:	ab05      	add	r3, sp, #20
 80182f6:	6849      	ldr	r1, [r1, #4]
 80182f8:	4d40      	ldr	r5, [pc, #256]	@ (80183fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80182fa:	c303      	stmia	r3!, {r0, r1}
 80182fc:	4611      	mov	r1, r2
 80182fe:	6828      	ldr	r0, [r5, #0]
 8018300:	f7f0 ff0c 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 8018304:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8018308:	2b00      	cmp	r3, #0
 801830a:	db11      	blt.n	8018330 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801830c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8018310:	2b00      	cmp	r3, #0
 8018312:	db0d      	blt.n	8018330 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018314:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018316:	4298      	cmp	r0, r3
 8018318:	d10a      	bne.n	8018330 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801831a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801831e:	ab09      	add	r3, sp, #36	@ 0x24
 8018320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018324:	e883 0003 	stmia.w	r3, {r0, r1}
 8018328:	4619      	mov	r1, r3
 801832a:	a805      	add	r0, sp, #20
 801832c:	f7fb fa74 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 8018330:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018334:	2b00      	cmp	r3, #0
 8018336:	dd5b      	ble.n	80183f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018338:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801833c:	2b00      	cmp	r3, #0
 801833e:	dd57      	ble.n	80183f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018340:	4f2f      	ldr	r7, [pc, #188]	@ (8018400 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8018342:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801834a:	4b2e      	ldr	r3, [pc, #184]	@ (8018404 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018352:	2e00      	cmp	r6, #0
 8018354:	d04c      	beq.n	80183f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018356:	6823      	ldr	r3, [r4, #0]
 8018358:	4620      	mov	r0, r4
 801835a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801835e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018360:	4798      	blx	r3
 8018362:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8018364:	683b      	ldr	r3, [r7, #0]
 8018366:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 801836a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801836e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8018372:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8018376:	785b      	ldrb	r3, [r3, #1]
 8018378:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 801837c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018380:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018382:	9609      	str	r6, [sp, #36]	@ 0x24
 8018384:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018388:	4b1f      	ldr	r3, [pc, #124]	@ (8018408 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801838a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8018394:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018396:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 801839a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 801839e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80183a2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80183a6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80183aa:	b10a      	cbz	r2, 80183b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80183ac:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80183ae:	b906      	cbnz	r6, 80183b2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80183b0:	689e      	ldr	r6, [r3, #8]
 80183b2:	af07      	add	r7, sp, #28
 80183b4:	4621      	mov	r1, r4
 80183b6:	4638      	mov	r0, r7
 80183b8:	f003 fff8 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80183bc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80183be:	6828      	ldr	r0, [r5, #0]
 80183c0:	f7f0 feac 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 80183c4:	6823      	ldr	r3, [r4, #0]
 80183c6:	4605      	mov	r5, r0
 80183c8:	4620      	mov	r0, r4
 80183ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80183cc:	4798      	blx	r3
 80183ce:	6823      	ldr	r3, [r4, #0]
 80183d0:	4680      	mov	r8, r0
 80183d2:	4620      	mov	r0, r4
 80183d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183d8:	4798      	blx	r3
 80183da:	ab09      	add	r3, sp, #36	@ 0x24
 80183dc:	9501      	str	r5, [sp, #4]
 80183de:	9300      	str	r3, [sp, #0]
 80183e0:	ab05      	add	r3, sp, #20
 80183e2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80183e6:	4630      	mov	r0, r6
 80183e8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80183ec:	f7f0 fe48 	bl	8009080 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80183f0:	b00e      	add	sp, #56	@ 0x38
 80183f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183f6:	bf00      	nop
 80183f8:	240287cc 	.word	0x240287cc
 80183fc:	240287d4 	.word	0x240287d4
 8018400:	240287c8 	.word	0x240287c8
 8018404:	240287d0 	.word	0x240287d0
 8018408:	24028770 	.word	0x24028770

0801840c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801840c:	b538      	push	{r3, r4, r5, lr}
 801840e:	4b0e      	ldr	r3, [pc, #56]	@ (8018448 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8018410:	4604      	mov	r4, r0
 8018412:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8018414:	881b      	ldrh	r3, [r3, #0]
 8018416:	429a      	cmp	r2, r3
 8018418:	d214      	bcs.n	8018444 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801841a:	6803      	ldr	r3, [r0, #0]
 801841c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801841e:	4798      	blx	r3
 8018420:	6823      	ldr	r3, [r4, #0]
 8018422:	4605      	mov	r5, r0
 8018424:	4620      	mov	r0, r4
 8018426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018428:	4798      	blx	r3
 801842a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801842e:	b22d      	sxth	r5, r5
 8018430:	4601      	mov	r1, r0
 8018432:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8018436:	bf06      	itte	eq
 8018438:	4602      	moveq	r2, r0
 801843a:	4629      	moveq	r1, r5
 801843c:	462a      	movne	r2, r5
 801843e:	4620      	mov	r0, r4
 8018440:	f7fb fde4 	bl	801400c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018444:	bd38      	pop	{r3, r4, r5, pc}
 8018446:	bf00      	nop
 8018448:	240287cc 	.word	0x240287cc

0801844c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801844c:	b530      	push	{r4, r5, lr}
 801844e:	888b      	ldrh	r3, [r1, #4]
 8018450:	b085      	sub	sp, #20
 8018452:	4604      	mov	r4, r0
 8018454:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018456:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801845a:	b923      	cbnz	r3, 8018466 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801845c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018460:	b90b      	cbnz	r3, 8018466 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018462:	f7ff ffd3 	bl	801840c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018466:	6823      	ldr	r3, [r4, #0]
 8018468:	466d      	mov	r5, sp
 801846a:	4621      	mov	r1, r4
 801846c:	343c      	adds	r4, #60	@ 0x3c
 801846e:	4628      	mov	r0, r5
 8018470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018474:	4798      	blx	r3
 8018476:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801847a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801847e:	b005      	add	sp, #20
 8018480:	bd30      	pop	{r4, r5, pc}

08018482 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018482:	2300      	movs	r3, #0
 8018484:	8083      	strh	r3, [r0, #4]
 8018486:	80c3      	strh	r3, [r0, #6]
 8018488:	8003      	strh	r3, [r0, #0]
 801848a:	8043      	strh	r3, [r0, #2]
 801848c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8018490:	2bff      	cmp	r3, #255	@ 0xff
 8018492:	bf01      	itttt	eq
 8018494:	890b      	ldrheq	r3, [r1, #8]
 8018496:	8083      	strheq	r3, [r0, #4]
 8018498:	894b      	ldrheq	r3, [r1, #10]
 801849a:	80c3      	strheq	r3, [r0, #6]
 801849c:	4770      	bx	lr
	...

080184a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80184a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80184a2:	4604      	mov	r4, r0
 80184a4:	466b      	mov	r3, sp
 80184a6:	6808      	ldr	r0, [r1, #0]
 80184a8:	6849      	ldr	r1, [r1, #4]
 80184aa:	c303      	stmia	r3!, {r0, r1}
 80184ac:	6823      	ldr	r3, [r4, #0]
 80184ae:	4669      	mov	r1, sp
 80184b0:	4620      	mov	r0, r4
 80184b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184b4:	4798      	blx	r3
 80184b6:	4b08      	ldr	r3, [pc, #32]	@ (80184d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80184be:	b10a      	cbz	r2, 80184c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80184c0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80184c2:	b900      	cbnz	r0, 80184c6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80184c4:	6898      	ldr	r0, [r3, #8]
 80184c6:	6803      	ldr	r3, [r0, #0]
 80184c8:	4669      	mov	r1, sp
 80184ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80184cc:	6a1d      	ldr	r5, [r3, #32]
 80184ce:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80184d2:	47a8      	blx	r5
 80184d4:	b003      	add	sp, #12
 80184d6:	bd30      	pop	{r4, r5, pc}
 80184d8:	24028770 	.word	0x24028770

080184dc <_ZN8touchgfx3BoxD1Ev>:
 80184dc:	4770      	bx	lr

080184de <_ZN8touchgfx3BoxD0Ev>:
 80184de:	b510      	push	{r4, lr}
 80184e0:	4604      	mov	r4, r0
 80184e2:	212c      	movs	r1, #44	@ 0x2c
 80184e4:	f011 fa48 	bl	8029978 <_ZdlPvj>
 80184e8:	4620      	mov	r0, r4
 80184ea:	bd10      	pop	{r4, pc}

080184ec <_ZNK8touchgfx3Box17invalidateContentEv>:
 80184ec:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80184f0:	b12a      	cbz	r2, 80184fe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80184f2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80184f6:	b112      	cbz	r2, 80184fe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80184f8:	6803      	ldr	r3, [r0, #0]
 80184fa:	695b      	ldr	r3, [r3, #20]
 80184fc:	4718      	bx	r3
 80184fe:	4770      	bx	lr

08018500 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8018500:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8018504:	4770      	bx	lr

08018506 <_ZN8touchgfx6ButtonD1Ev>:
 8018506:	4770      	bx	lr

08018508 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8018508:	b570      	push	{r4, r5, r6, lr}
 801850a:	880b      	ldrh	r3, [r1, #0]
 801850c:	4605      	mov	r5, r0
 801850e:	4604      	mov	r4, r0
 8018510:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8018512:	8813      	ldrh	r3, [r2, #0]
 8018514:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018518:	4628      	mov	r0, r5
 801851a:	f006 fc13 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801851e:	4606      	mov	r6, r0
 8018520:	4628      	mov	r0, r5
 8018522:	f006 fc43 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018526:	6823      	ldr	r3, [r4, #0]
 8018528:	4605      	mov	r5, r0
 801852a:	4631      	mov	r1, r6
 801852c:	4620      	mov	r0, r4
 801852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018530:	4798      	blx	r3
 8018532:	6823      	ldr	r3, [r4, #0]
 8018534:	4629      	mov	r1, r5
 8018536:	4620      	mov	r0, r4
 8018538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801853a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801853e:	4718      	bx	r3

08018540 <_ZN8touchgfx6ButtonD0Ev>:
 8018540:	b510      	push	{r4, lr}
 8018542:	4604      	mov	r4, r0
 8018544:	2134      	movs	r1, #52	@ 0x34
 8018546:	f011 fa17 	bl	8029978 <_ZdlPvj>
 801854a:	4620      	mov	r0, r4
 801854c:	bd10      	pop	{r4, pc}

0801854e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801854e:	b510      	push	{r4, lr}
 8018550:	4604      	mov	r4, r0
 8018552:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8018554:	b150      	cbz	r0, 801856c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018556:	6803      	ldr	r3, [r0, #0]
 8018558:	68db      	ldr	r3, [r3, #12]
 801855a:	4798      	blx	r3
 801855c:	b130      	cbz	r0, 801856c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801855e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8018560:	4621      	mov	r1, r4
 8018562:	6803      	ldr	r3, [r0, #0]
 8018564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018568:	689b      	ldr	r3, [r3, #8]
 801856a:	4718      	bx	r3
 801856c:	bd10      	pop	{r4, pc}

0801856e <_ZNK8touchgfx6Button12getSolidRectEv>:
 801856e:	b510      	push	{r4, lr}
 8018570:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8018574:	4604      	mov	r4, r0
 8018576:	2bff      	cmp	r3, #255	@ 0xff
 8018578:	d006      	beq.n	8018588 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801857a:	2300      	movs	r3, #0
 801857c:	8003      	strh	r3, [r0, #0]
 801857e:	8043      	strh	r3, [r0, #2]
 8018580:	8083      	strh	r3, [r0, #4]
 8018582:	80c3      	strh	r3, [r0, #6]
 8018584:	4620      	mov	r0, r4
 8018586:	bd10      	pop	{r4, pc}
 8018588:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801858c:	b11b      	cbz	r3, 8018596 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801858e:	3130      	adds	r1, #48	@ 0x30
 8018590:	f006 fc40 	bl	801ee14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018594:	e7f6      	b.n	8018584 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018596:	312e      	adds	r1, #46	@ 0x2e
 8018598:	e7fa      	b.n	8018590 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801859c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801859c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185a0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80185a4:	b08a      	sub	sp, #40	@ 0x28
 80185a6:	4604      	mov	r4, r0
 80185a8:	4688      	mov	r8, r1
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d066      	beq.n	801867c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80185ae:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80185b0:	a805      	add	r0, sp, #20
 80185b2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80185b6:	f006 fbc5 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80185ba:	4607      	mov	r7, r0
 80185bc:	a805      	add	r0, sp, #20
 80185be:	f006 fbf5 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 80185c2:	f9b8 6000 	ldrsh.w	r6, [r8]
 80185c6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80185ca:	2300      	movs	r3, #0
 80185cc:	4432      	add	r2, r6
 80185ce:	9306      	str	r3, [sp, #24]
 80185d0:	b292      	uxth	r2, r2
 80185d2:	fa0f fc82 	sxth.w	ip, r2
 80185d6:	459c      	cmp	ip, r3
 80185d8:	dd52      	ble.n	8018680 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80185da:	42b7      	cmp	r7, r6
 80185dc:	dd50      	ble.n	8018680 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80185de:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80185e2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80185e6:	442b      	add	r3, r5
 80185e8:	b29b      	uxth	r3, r3
 80185ea:	b219      	sxth	r1, r3
 80185ec:	2900      	cmp	r1, #0
 80185ee:	dd47      	ble.n	8018680 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80185f0:	42a8      	cmp	r0, r5
 80185f2:	dd45      	ble.n	8018680 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80185f4:	4567      	cmp	r7, ip
 80185f6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80185fa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80185fe:	bfb8      	it	lt
 8018600:	b2ba      	uxthlt	r2, r7
 8018602:	4288      	cmp	r0, r1
 8018604:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018608:	bfb8      	it	lt
 801860a:	b283      	uxthlt	r3, r0
 801860c:	1b92      	subs	r2, r2, r6
 801860e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8018612:	1b5b      	subs	r3, r3, r5
 8018614:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018618:	f8ad 301e 	strh.w	r3, [sp, #30]
 801861c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018620:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018624:	429a      	cmp	r2, r3
 8018626:	d026      	beq.n	8018676 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018628:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801862c:	2b00      	cmp	r3, #0
 801862e:	dd22      	ble.n	8018676 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018630:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018634:	2b00      	cmp	r3, #0
 8018636:	dd1e      	ble.n	8018676 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018638:	2300      	movs	r3, #0
 801863a:	a908      	add	r1, sp, #32
 801863c:	4620      	mov	r0, r4
 801863e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8018642:	6823      	ldr	r3, [r4, #0]
 8018644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018646:	4798      	blx	r3
 8018648:	4b0f      	ldr	r3, [pc, #60]	@ (8018688 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018650:	b10a      	cbz	r2, 8018656 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8018652:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8018654:	b900      	cbnz	r0, 8018658 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8018656:	6898      	ldr	r0, [r3, #8]
 8018658:	2501      	movs	r5, #1
 801865a:	6801      	ldr	r1, [r0, #0]
 801865c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8018660:	9502      	str	r5, [sp, #8]
 8018662:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8018666:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801866a:	9401      	str	r4, [sp, #4]
 801866c:	ac06      	add	r4, sp, #24
 801866e:	9400      	str	r4, [sp, #0]
 8018670:	688c      	ldr	r4, [r1, #8]
 8018672:	a905      	add	r1, sp, #20
 8018674:	47a0      	blx	r4
 8018676:	b00a      	add	sp, #40	@ 0x28
 8018678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801867c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801867e:	e797      	b.n	80185b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018680:	2300      	movs	r3, #0
 8018682:	9307      	str	r3, [sp, #28]
 8018684:	e7ca      	b.n	801861c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8018686:	bf00      	nop
 8018688:	24028770 	.word	0x24028770

0801868c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801868c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8018690:	b12a      	cbz	r2, 801869e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8018692:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8018696:	b112      	cbz	r2, 801869e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8018698:	6803      	ldr	r3, [r0, #0]
 801869a:	695b      	ldr	r3, [r3, #20]
 801869c:	4718      	bx	r3
 801869e:	4770      	bx	lr

080186a0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80186a0:	4b30      	ldr	r3, [pc, #192]	@ (8018764 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80186a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186a6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80186a8:	b08d      	sub	sp, #52	@ 0x34
 80186aa:	881b      	ldrh	r3, [r3, #0]
 80186ac:	4604      	mov	r4, r0
 80186ae:	460f      	mov	r7, r1
 80186b0:	4293      	cmp	r3, r2
 80186b2:	d954      	bls.n	801875e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80186b4:	4b2c      	ldr	r3, [pc, #176]	@ (8018768 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80186b6:	6819      	ldr	r1, [r3, #0]
 80186b8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80186bc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80186c0:	4a2a      	ldr	r2, [pc, #168]	@ (801876c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80186c2:	6812      	ldr	r2, [r2, #0]
 80186c4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80186c8:	2900      	cmp	r1, #0
 80186ca:	d048      	beq.n	801875e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80186cc:	785a      	ldrb	r2, [r3, #1]
 80186ce:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80186d2:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80186d6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80186da:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80186de:	4b24      	ldr	r3, [pc, #144]	@ (8018770 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80186e0:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 80186e4:	681a      	ldr	r2, [r3, #0]
 80186e6:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 80186ea:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 80186ee:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 80186f2:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80186f4:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80186f8:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80186fc:	9107      	str	r1, [sp, #28]
 80186fe:	f88d 8020 	strb.w	r8, [sp, #32]
 8018702:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8018706:	9609      	str	r6, [sp, #36]	@ 0x24
 8018708:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 801870c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8018710:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8018714:	b10b      	cbz	r3, 801871a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8018716:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8018718:	b905      	cbnz	r5, 801871c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801871a:	6895      	ldr	r5, [r2, #8]
 801871c:	ae05      	add	r6, sp, #20
 801871e:	4621      	mov	r1, r4
 8018720:	4630      	mov	r0, r6
 8018722:	f003 fe43 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018726:	4b13      	ldr	r3, [pc, #76]	@ (8018774 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8018728:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801872a:	6818      	ldr	r0, [r3, #0]
 801872c:	f7f0 fcf6 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 8018730:	6823      	ldr	r3, [r4, #0]
 8018732:	4680      	mov	r8, r0
 8018734:	4620      	mov	r0, r4
 8018736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018738:	4798      	blx	r3
 801873a:	6823      	ldr	r3, [r4, #0]
 801873c:	4681      	mov	r9, r0
 801873e:	4620      	mov	r0, r4
 8018740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018744:	4798      	blx	r3
 8018746:	ab07      	add	r3, sp, #28
 8018748:	f8cd 8004 	str.w	r8, [sp, #4]
 801874c:	9300      	str	r3, [sp, #0]
 801874e:	463b      	mov	r3, r7
 8018750:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8018754:	4628      	mov	r0, r5
 8018756:	e896 0006 	ldmia.w	r6, {r1, r2}
 801875a:	f7f0 fc91 	bl	8009080 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801875e:	b00d      	add	sp, #52	@ 0x34
 8018760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018764:	240287cc 	.word	0x240287cc
 8018768:	240287c8 	.word	0x240287c8
 801876c:	240287d0 	.word	0x240287d0
 8018770:	24028770 	.word	0x24028770
 8018774:	240287d4 	.word	0x240287d4

08018778 <_ZN8touchgfx5ImageD1Ev>:
 8018778:	4770      	bx	lr

0801877a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801877a:	b570      	push	{r4, r5, r6, lr}
 801877c:	880b      	ldrh	r3, [r1, #0]
 801877e:	460d      	mov	r5, r1
 8018780:	4604      	mov	r4, r0
 8018782:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018784:	4608      	mov	r0, r1
 8018786:	f006 fadd 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801878a:	4606      	mov	r6, r0
 801878c:	4628      	mov	r0, r5
 801878e:	f006 fb0d 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018792:	6823      	ldr	r3, [r4, #0]
 8018794:	4605      	mov	r5, r0
 8018796:	4631      	mov	r1, r6
 8018798:	4620      	mov	r0, r4
 801879a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801879c:	4798      	blx	r3
 801879e:	6823      	ldr	r3, [r4, #0]
 80187a0:	4629      	mov	r1, r5
 80187a2:	4620      	mov	r0, r4
 80187a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80187a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187aa:	4718      	bx	r3

080187ac <_ZN8touchgfx5ImageD0Ev>:
 80187ac:	b510      	push	{r4, lr}
 80187ae:	4604      	mov	r4, r0
 80187b0:	212c      	movs	r1, #44	@ 0x2c
 80187b2:	f011 f8e1 	bl	8029978 <_ZdlPvj>
 80187b6:	4620      	mov	r0, r4
 80187b8:	bd10      	pop	{r4, pc}

080187ba <_ZNK8touchgfx5Image12getSolidRectEv>:
 80187ba:	b510      	push	{r4, lr}
 80187bc:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80187c0:	4604      	mov	r4, r0
 80187c2:	2bff      	cmp	r3, #255	@ 0xff
 80187c4:	d006      	beq.n	80187d4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80187c6:	2300      	movs	r3, #0
 80187c8:	8003      	strh	r3, [r0, #0]
 80187ca:	8043      	strh	r3, [r0, #2]
 80187cc:	8083      	strh	r3, [r0, #4]
 80187ce:	80c3      	strh	r3, [r0, #6]
 80187d0:	4620      	mov	r0, r4
 80187d2:	bd10      	pop	{r4, pc}
 80187d4:	3126      	adds	r1, #38	@ 0x26
 80187d6:	f006 fb1d 	bl	801ee14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80187da:	e7f9      	b.n	80187d0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080187dc <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80187dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187e0:	4604      	mov	r4, r0
 80187e2:	b088      	sub	sp, #32
 80187e4:	2500      	movs	r5, #0
 80187e6:	460f      	mov	r7, r1
 80187e8:	f854 3b26 	ldr.w	r3, [r4], #38
 80187ec:	a904      	add	r1, sp, #16
 80187ee:	4606      	mov	r6, r0
 80187f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80187f6:	4798      	blx	r3
 80187f8:	4620      	mov	r0, r4
 80187fa:	f006 faa3 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80187fe:	4680      	mov	r8, r0
 8018800:	4620      	mov	r0, r4
 8018802:	f006 fad3 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018806:	9506      	str	r5, [sp, #24]
 8018808:	ad06      	add	r5, sp, #24
 801880a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801880e:	4639      	mov	r1, r7
 8018810:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018814:	4628      	mov	r0, r5
 8018816:	f7fa ffff 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 801881a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801881e:	2b00      	cmp	r3, #0
 8018820:	dd19      	ble.n	8018856 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018822:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018826:	2b00      	cmp	r3, #0
 8018828:	dd15      	ble.n	8018856 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801882a:	4b0c      	ldr	r3, [pc, #48]	@ (801885c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018832:	b10a      	cbz	r2, 8018838 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018834:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8018836:	b900      	cbnz	r0, 801883a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8018838:	6898      	ldr	r0, [r3, #8]
 801883a:	2701      	movs	r7, #1
 801883c:	6801      	ldr	r1, [r0, #0]
 801883e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018842:	9702      	str	r7, [sp, #8]
 8018844:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8018848:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801884c:	e9cd 5600 	strd	r5, r6, [sp]
 8018850:	688d      	ldr	r5, [r1, #8]
 8018852:	4621      	mov	r1, r4
 8018854:	47a8      	blx	r5
 8018856:	b008      	add	sp, #32
 8018858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801885c:	24028770 	.word	0x24028770

08018860 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8018860:	4770      	bx	lr

08018862 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8018862:	b510      	push	{r4, lr}
 8018864:	4604      	mov	r4, r0
 8018866:	2148      	movs	r1, #72	@ 0x48
 8018868:	f011 f886 	bl	8029978 <_ZdlPvj>
 801886c:	4620      	mov	r0, r4
 801886e:	bd10      	pop	{r4, pc}

08018870 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8018870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018874:	b08d      	sub	sp, #52	@ 0x34
 8018876:	4604      	mov	r4, r0
 8018878:	460f      	mov	r7, r1
 801887a:	f7ff fe8f 	bl	801859c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801887e:	4a55      	ldr	r2, [pc, #340]	@ (80189d4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8018880:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018882:	8812      	ldrh	r2, [r2, #0]
 8018884:	429a      	cmp	r2, r3
 8018886:	f240 8082 	bls.w	801898e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801888a:	4d53      	ldr	r5, [pc, #332]	@ (80189d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 801888c:	682a      	ldr	r2, [r5, #0]
 801888e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018892:	4b52      	ldr	r3, [pc, #328]	@ (80189dc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801889a:	2200      	movs	r2, #0
 801889c:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 80188a0:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80188a4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80188a8:	2a03      	cmp	r2, #3
 80188aa:	d811      	bhi.n	80188d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80188ac:	e8df f002 	tbb	[pc, r2]
 80188b0:	89727902 	.word	0x89727902
 80188b4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80188b8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80188bc:	1ad2      	subs	r2, r2, r3
 80188be:	2002      	movs	r0, #2
 80188c0:	f8ad 1010 	strh.w	r1, [sp, #16]
 80188c4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80188c8:	fb92 f2f0 	sdiv	r2, r2, r0
 80188cc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80188d0:	f10d 080c 	add.w	r8, sp, #12
 80188d4:	f10d 0914 	add.w	r9, sp, #20
 80188d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80188dc:	e889 0003 	stmia.w	r9, {r0, r1}
 80188e0:	4639      	mov	r1, r7
 80188e2:	4648      	mov	r0, r9
 80188e4:	f7fa ff98 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 80188e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	dd4e      	ble.n	801898e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80188f0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	dd4a      	ble.n	801898e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80188f8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80188fc:	4641      	mov	r1, r8
 80188fe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018902:	4620      	mov	r0, r4
 8018904:	1a9b      	subs	r3, r3, r2
 8018906:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801890a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801890e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018912:	1a9b      	subs	r3, r3, r2
 8018914:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018918:	6823      	ldr	r3, [r4, #0]
 801891a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801891c:	4798      	blx	r3
 801891e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018922:	2b00      	cmp	r3, #0
 8018924:	d053      	beq.n	80189ce <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8018926:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8018928:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 801892a:	682b      	ldr	r3, [r5, #0]
 801892c:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8018930:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018934:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8018938:	785b      	ldrb	r3, [r3, #1]
 801893a:	9209      	str	r2, [sp, #36]	@ 0x24
 801893c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8018940:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018944:	9607      	str	r6, [sp, #28]
 8018946:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 801894a:	2300      	movs	r3, #0
 801894c:	f88d 5020 	strb.w	r5, [sp, #32]
 8018950:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8018954:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8018958:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801895c:	4b20      	ldr	r3, [pc, #128]	@ (80189e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801895e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8018968:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801896c:	b10a      	cbz	r2, 8018972 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801896e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018970:	b904      	cbnz	r4, 8018974 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8018972:	689c      	ldr	r4, [r3, #8]
 8018974:	4b1b      	ldr	r3, [pc, #108]	@ (80189e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8018976:	6818      	ldr	r0, [r3, #0]
 8018978:	f7f0 fbd0 	bl	800911c <_ZNK8touchgfx5Texts7getTextEt>
 801897c:	ab07      	add	r3, sp, #28
 801897e:	9001      	str	r0, [sp, #4]
 8018980:	4620      	mov	r0, r4
 8018982:	9300      	str	r3, [sp, #0]
 8018984:	464b      	mov	r3, r9
 8018986:	e898 0006 	ldmia.w	r8, {r1, r2}
 801898a:	f7f0 fb79 	bl	8009080 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801898e:	b00d      	add	sp, #52	@ 0x34
 8018990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018994:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018998:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801899c:	1ad2      	subs	r2, r2, r3
 801899e:	3201      	adds	r2, #1
 80189a0:	e78d      	b.n	80188be <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80189a2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80189a6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80189aa:	1ad2      	subs	r2, r2, r3
 80189ac:	3201      	adds	r2, #1
 80189ae:	2002      	movs	r0, #2
 80189b0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80189b4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80189b8:	fb92 f2f0 	sdiv	r2, r2, r0
 80189bc:	f8ad 200c 	strh.w	r2, [sp, #12]
 80189c0:	e786      	b.n	80188d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80189c2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80189c6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80189ca:	1ad2      	subs	r2, r2, r3
 80189cc:	e7ef      	b.n	80189ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80189ce:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80189d0:	e7aa      	b.n	8018928 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80189d2:	bf00      	nop
 80189d4:	240287cc 	.word	0x240287cc
 80189d8:	240287c8 	.word	0x240287c8
 80189dc:	240287d0 	.word	0x240287d0
 80189e0:	24028770 	.word	0x24028770
 80189e4:	240287d4 	.word	0x240287d4

080189e8 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80189e8:	2101      	movs	r1, #1
 80189ea:	2200      	movs	r2, #0
 80189ec:	b510      	push	{r4, lr}
 80189ee:	4c13      	ldr	r4, [pc, #76]	@ (8018a3c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80189f0:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80189f4:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80189f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80189fc:	6004      	str	r4, [r0, #0]
 80189fe:	4c10      	ldr	r4, [pc, #64]	@ (8018a40 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8018a00:	8082      	strh	r2, [r0, #4]
 8018a02:	80c2      	strh	r2, [r0, #6]
 8018a04:	8102      	strh	r2, [r0, #8]
 8018a06:	8142      	strh	r2, [r0, #10]
 8018a08:	8182      	strh	r2, [r0, #12]
 8018a0a:	81c2      	strh	r2, [r0, #14]
 8018a0c:	8202      	strh	r2, [r0, #16]
 8018a0e:	8242      	strh	r2, [r0, #18]
 8018a10:	61c2      	str	r2, [r0, #28]
 8018a12:	8402      	strh	r2, [r0, #32]
 8018a14:	8442      	strh	r2, [r0, #34]	@ 0x22
 8018a16:	6282      	str	r2, [r0, #40]	@ 0x28
 8018a18:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8018a1c:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8018a1e:	8601      	strh	r1, [r0, #48]	@ 0x30
 8018a20:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8018a24:	6344      	str	r4, [r0, #52]	@ 0x34
 8018a26:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018a28:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8018a2c:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8018a30:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018a34:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8018a38:	bd10      	pop	{r4, pc}
 8018a3a:	bf00      	nop
 8018a3c:	08030a34 	.word	0x08030a34
 8018a40:	0802ed28 	.word	0x0802ed28

08018a44 <_ZN8touchgfx7OutlineD1Ev>:
 8018a44:	4770      	bx	lr

08018a46 <_ZN8touchgfx7OutlineD0Ev>:
 8018a46:	b510      	push	{r4, lr}
 8018a48:	4604      	mov	r4, r0
 8018a4a:	2130      	movs	r1, #48	@ 0x30
 8018a4c:	f010 ff94 	bl	8029978 <_ZdlPvj>
 8018a50:	4620      	mov	r0, r4
 8018a52:	bd10      	pop	{r4, pc}

08018a54 <_ZN8touchgfx7Outline5resetEv>:
 8018a54:	b510      	push	{r4, lr}
 8018a56:	4604      	mov	r4, r0
 8018a58:	f000 fe86 	bl	8019768 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8018a5c:	60e0      	str	r0, [r4, #12]
 8018a5e:	f000 fe89 	bl	8019774 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8018a62:	68e3      	ldr	r3, [r4, #12]
 8018a64:	08c0      	lsrs	r0, r0, #3
 8018a66:	2200      	movs	r2, #0
 8018a68:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8018a6c:	6123      	str	r3, [r4, #16]
 8018a6e:	3801      	subs	r0, #1
 8018a70:	60a2      	str	r2, [r4, #8]
 8018a72:	6060      	str	r0, [r4, #4]
 8018a74:	8019      	strh	r1, [r3, #0]
 8018a76:	8059      	strh	r1, [r3, #2]
 8018a78:	809a      	strh	r2, [r3, #4]
 8018a7a:	80da      	strh	r2, [r3, #6]
 8018a7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018a7e:	f023 0301 	bic.w	r3, r3, #1
 8018a82:	f043 0302 	orr.w	r3, r3, #2
 8018a86:	6263      	str	r3, [r4, #36]	@ 0x24
 8018a88:	bd10      	pop	{r4, pc}
	...

08018a8c <_ZN8touchgfx7OutlineC1Ev>:
 8018a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8018ab8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8018a8e:	b510      	push	{r4, lr}
 8018a90:	6003      	str	r3, [r0, #0]
 8018a92:	2300      	movs	r3, #0
 8018a94:	4604      	mov	r4, r0
 8018a96:	6243      	str	r3, [r0, #36]	@ 0x24
 8018a98:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8018a9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018aa0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8018aa4:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8018aa8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018aac:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8018ab0:	f7ff ffd0 	bl	8018a54 <_ZN8touchgfx7Outline5resetEv>
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	bd10      	pop	{r4, pc}
 8018ab8:	08030aa8 	.word	0x08030aa8

08018abc <_ZN8touchgfx7Outline10renderLineEiiii>:
 8018abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac0:	b093      	sub	sp, #76	@ 0x4c
 8018ac2:	1156      	asrs	r6, r2, #5
 8018ac4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8018ac6:	9305      	str	r3, [sp, #20]
 8018ac8:	1153      	asrs	r3, r2, #5
 8018aca:	f004 051f 	and.w	r5, r4, #31
 8018ace:	9303      	str	r3, [sp, #12]
 8018ad0:	1163      	asrs	r3, r4, #5
 8018ad2:	9504      	str	r5, [sp, #16]
 8018ad4:	1165      	asrs	r5, r4, #5
 8018ad6:	9306      	str	r3, [sp, #24]
 8018ad8:	f002 031f 	and.w	r3, r2, #31
 8018adc:	42ae      	cmp	r6, r5
 8018ade:	f040 80f4 	bne.w	8018cca <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8018ae2:	9c04      	ldr	r4, [sp, #16]
 8018ae4:	9a05      	ldr	r2, [sp, #20]
 8018ae6:	42a3      	cmp	r3, r4
 8018ae8:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8018aec:	6902      	ldr	r2, [r0, #16]
 8018aee:	d125      	bne.n	8018b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8018af0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8018af4:	459e      	cmp	lr, r3
 8018af6:	d103      	bne.n	8018b00 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8018af8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018afc:	429e      	cmp	r6, r3
 8018afe:	d035      	beq.n	8018b6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018b00:	88d1      	ldrh	r1, [r2, #6]
 8018b02:	8893      	ldrh	r3, [r2, #4]
 8018b04:	430b      	orrs	r3, r1
 8018b06:	d010      	beq.n	8018b2a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018b08:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	db0c      	blt.n	8018b2a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018b10:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018b12:	428b      	cmp	r3, r1
 8018b14:	da09      	bge.n	8018b2a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018b16:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018b1a:	428b      	cmp	r3, r1
 8018b1c:	f103 0301 	add.w	r3, r3, #1
 8018b20:	bf38      	it	cc
 8018b22:	3208      	addcc	r2, #8
 8018b24:	6083      	str	r3, [r0, #8]
 8018b26:	bf38      	it	cc
 8018b28:	6102      	strcc	r2, [r0, #16]
 8018b2a:	6903      	ldr	r3, [r0, #16]
 8018b2c:	9a03      	ldr	r2, [sp, #12]
 8018b2e:	f8a3 e000 	strh.w	lr, [r3]
 8018b32:	805a      	strh	r2, [r3, #2]
 8018b34:	2200      	movs	r2, #0
 8018b36:	809a      	strh	r2, [r3, #4]
 8018b38:	80da      	strh	r2, [r3, #6]
 8018b3a:	e017      	b.n	8018b6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018b3c:	9c05      	ldr	r4, [sp, #20]
 8018b3e:	114e      	asrs	r6, r1, #5
 8018b40:	f001 0c1f 	and.w	ip, r1, #31
 8018b44:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8018b48:	f004 041f 	and.w	r4, r4, #31
 8018b4c:	4576      	cmp	r6, lr
 8018b4e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8018b52:	9402      	str	r4, [sp, #8]
 8018b54:	9c04      	ldr	r4, [sp, #16]
 8018b56:	eba4 0403 	sub.w	r4, r4, r3
 8018b5a:	d10a      	bne.n	8018b72 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8018b5c:	9b02      	ldr	r3, [sp, #8]
 8018b5e:	44a0      	add	r8, r4
 8018b60:	449c      	add	ip, r3
 8018b62:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018b66:	fb04 a40c 	mla	r4, r4, ip, sl
 8018b6a:	80d4      	strh	r4, [r2, #6]
 8018b6c:	b013      	add	sp, #76	@ 0x4c
 8018b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b72:	9d05      	ldr	r5, [sp, #20]
 8018b74:	1a69      	subs	r1, r5, r1
 8018b76:	bf51      	iteee	pl
 8018b78:	f1cc 0520 	rsbpl	r5, ip, #32
 8018b7c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018b80:	4249      	negmi	r1, r1
 8018b82:	2500      	movmi	r5, #0
 8018b84:	bf5d      	ittte	pl
 8018b86:	436c      	mulpl	r4, r5
 8018b88:	2520      	movpl	r5, #32
 8018b8a:	f04f 0901 	movpl.w	r9, #1
 8018b8e:	f04f 39ff 	movmi.w	r9, #4294967295
 8018b92:	9501      	str	r5, [sp, #4]
 8018b94:	9f01      	ldr	r7, [sp, #4]
 8018b96:	444e      	add	r6, r9
 8018b98:	fb94 f5f1 	sdiv	r5, r4, r1
 8018b9c:	fb01 4415 	mls	r4, r1, r5, r4
 8018ba0:	44bc      	add	ip, r7
 8018ba2:	2c00      	cmp	r4, #0
 8018ba4:	bfbc      	itt	lt
 8018ba6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018baa:	1864      	addlt	r4, r4, r1
 8018bac:	44a8      	add	r8, r5
 8018bae:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018bb2:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018bb6:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018bba:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018bbe:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018bc2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8018bc6:	ea58 0202 	orrs.w	r2, r8, r2
 8018bca:	d011      	beq.n	8018bf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018bcc:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018bd0:	f1b8 0f00 	cmp.w	r8, #0
 8018bd4:	db0c      	blt.n	8018bf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018bd6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018bd8:	4590      	cmp	r8, r2
 8018bda:	da09      	bge.n	8018bf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018bdc:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8018be0:	4590      	cmp	r8, r2
 8018be2:	bf3c      	itt	cc
 8018be4:	f10c 0208 	addcc.w	r2, ip, #8
 8018be8:	6102      	strcc	r2, [r0, #16]
 8018bea:	f108 0201 	add.w	r2, r8, #1
 8018bee:	6082      	str	r2, [r0, #8]
 8018bf0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018bf4:	2700      	movs	r7, #0
 8018bf6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018bfa:	45b6      	cmp	lr, r6
 8018bfc:	f8ac 6000 	strh.w	r6, [ip]
 8018c00:	442b      	add	r3, r5
 8018c02:	f8ac 2002 	strh.w	r2, [ip, #2]
 8018c06:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018c0a:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018c0e:	d04b      	beq.n	8018ca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8018c10:	9f04      	ldr	r7, [sp, #16]
 8018c12:	1a64      	subs	r4, r4, r1
 8018c14:	f04f 0a00 	mov.w	sl, #0
 8018c18:	1aff      	subs	r7, r7, r3
 8018c1a:	443d      	add	r5, r7
 8018c1c:	016d      	lsls	r5, r5, #5
 8018c1e:	fb95 f8f1 	sdiv	r8, r5, r1
 8018c22:	fb01 5518 	mls	r5, r1, r8, r5
 8018c26:	2d00      	cmp	r5, #0
 8018c28:	bfbc      	itt	lt
 8018c2a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018c2e:	186d      	addlt	r5, r5, r1
 8018c30:	f108 0701 	add.w	r7, r8, #1
 8018c34:	9703      	str	r7, [sp, #12]
 8018c36:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018c3a:	1964      	adds	r4, r4, r5
 8018c3c:	444e      	add	r6, r9
 8018c3e:	bf54      	ite	pl
 8018c40:	9f03      	ldrpl	r7, [sp, #12]
 8018c42:	4647      	movmi	r7, r8
 8018c44:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018c48:	bf58      	it	pl
 8018c4a:	1a64      	subpl	r4, r4, r1
 8018c4c:	443b      	add	r3, r7
 8018c4e:	44bb      	add	fp, r7
 8018c50:	f8ac b004 	strh.w	fp, [ip, #4]
 8018c54:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018c58:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018c5c:	f8ac b006 	strh.w	fp, [ip, #6]
 8018c60:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018c64:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018c68:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018c6c:	ea5b 0707 	orrs.w	r7, fp, r7
 8018c70:	d011      	beq.n	8018c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018c72:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018c76:	f1bb 0f00 	cmp.w	fp, #0
 8018c7a:	db0c      	blt.n	8018c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018c7c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018c7e:	45bb      	cmp	fp, r7
 8018c80:	da09      	bge.n	8018c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018c82:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018c86:	45bb      	cmp	fp, r7
 8018c88:	bf3c      	itt	cc
 8018c8a:	f10c 0708 	addcc.w	r7, ip, #8
 8018c8e:	6107      	strcc	r7, [r0, #16]
 8018c90:	f10b 0701 	add.w	r7, fp, #1
 8018c94:	6087      	str	r7, [r0, #8]
 8018c96:	6907      	ldr	r7, [r0, #16]
 8018c98:	45b6      	cmp	lr, r6
 8018c9a:	803e      	strh	r6, [r7, #0]
 8018c9c:	807a      	strh	r2, [r7, #2]
 8018c9e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018ca2:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018ca6:	d1c6      	bne.n	8018c36 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8018ca8:	9a04      	ldr	r2, [sp, #16]
 8018caa:	1ad3      	subs	r3, r2, r3
 8018cac:	6902      	ldr	r2, [r0, #16]
 8018cae:	8891      	ldrh	r1, [r2, #4]
 8018cb0:	88d6      	ldrh	r6, [r2, #6]
 8018cb2:	4419      	add	r1, r3
 8018cb4:	8091      	strh	r1, [r2, #4]
 8018cb6:	9902      	ldr	r1, [sp, #8]
 8018cb8:	f101 0c20 	add.w	ip, r1, #32
 8018cbc:	9901      	ldr	r1, [sp, #4]
 8018cbe:	ebac 0c01 	sub.w	ip, ip, r1
 8018cc2:	fb03 630c 	mla	r3, r3, ip, r6
 8018cc6:	80d3      	strh	r3, [r2, #6]
 8018cc8:	e750      	b.n	8018b6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018cca:	9d05      	ldr	r5, [sp, #20]
 8018ccc:	1aa2      	subs	r2, r4, r2
 8018cce:	eba5 0501 	sub.w	r5, r5, r1
 8018cd2:	9202      	str	r2, [sp, #8]
 8018cd4:	9508      	str	r5, [sp, #32]
 8018cd6:	f140 8128 	bpl.w	8018f2a <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8018cda:	9a03      	ldr	r2, [sp, #12]
 8018cdc:	2a00      	cmp	r2, #0
 8018cde:	f6ff af45 	blt.w	8018b6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018ce2:	9a02      	ldr	r2, [sp, #8]
 8018ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8018ce8:	4252      	negs	r2, r2
 8018cea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018cec:	2400      	movs	r4, #0
 8018cee:	9202      	str	r2, [sp, #8]
 8018cf0:	9a06      	ldr	r2, [sp, #24]
 8018cf2:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8018cf6:	9206      	str	r2, [sp, #24]
 8018cf8:	462a      	mov	r2, r5
 8018cfa:	435a      	muls	r2, r3
 8018cfc:	9401      	str	r4, [sp, #4]
 8018cfe:	9c02      	ldr	r4, [sp, #8]
 8018d00:	9d02      	ldr	r5, [sp, #8]
 8018d02:	fb92 f4f4 	sdiv	r4, r2, r4
 8018d06:	fb05 2214 	mls	r2, r5, r4, r2
 8018d0a:	2a00      	cmp	r2, #0
 8018d0c:	9207      	str	r2, [sp, #28]
 8018d0e:	bfbc      	itt	lt
 8018d10:	1952      	addlt	r2, r2, r5
 8018d12:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018d16:	6905      	ldr	r5, [r0, #16]
 8018d18:	bfb8      	it	lt
 8018d1a:	9207      	strlt	r2, [sp, #28]
 8018d1c:	eb04 0901 	add.w	r9, r4, r1
 8018d20:	9a01      	ldr	r2, [sp, #4]
 8018d22:	ea4f 1669 	mov.w	r6, r9, asr #5
 8018d26:	429a      	cmp	r2, r3
 8018d28:	f040 8111 	bne.w	8018f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8018d2c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018d30:	429e      	cmp	r6, r3
 8018d32:	d104      	bne.n	8018d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8018d34:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018d38:	9a03      	ldr	r2, [sp, #12]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d01b      	beq.n	8018d76 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018d3e:	88ea      	ldrh	r2, [r5, #6]
 8018d40:	88ab      	ldrh	r3, [r5, #4]
 8018d42:	4313      	orrs	r3, r2
 8018d44:	d010      	beq.n	8018d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018d46:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018d4a:	2a00      	cmp	r2, #0
 8018d4c:	db0c      	blt.n	8018d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018d4e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018d50:	429a      	cmp	r2, r3
 8018d52:	da09      	bge.n	8018d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018d54:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	f102 0201 	add.w	r2, r2, #1
 8018d5e:	bf38      	it	cc
 8018d60:	3508      	addcc	r5, #8
 8018d62:	6082      	str	r2, [r0, #8]
 8018d64:	bf38      	it	cc
 8018d66:	6105      	strcc	r5, [r0, #16]
 8018d68:	6903      	ldr	r3, [r0, #16]
 8018d6a:	9a03      	ldr	r2, [sp, #12]
 8018d6c:	801e      	strh	r6, [r3, #0]
 8018d6e:	805a      	strh	r2, [r3, #2]
 8018d70:	2200      	movs	r2, #0
 8018d72:	809a      	strh	r2, [r3, #4]
 8018d74:	80da      	strh	r2, [r3, #6]
 8018d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d78:	9a03      	ldr	r2, [sp, #12]
 8018d7a:	6901      	ldr	r1, [r0, #16]
 8018d7c:	441a      	add	r2, r3
 8018d7e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018d82:	42b3      	cmp	r3, r6
 8018d84:	d103      	bne.n	8018d8e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8018d86:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018d8a:	429a      	cmp	r2, r3
 8018d8c:	d01a      	beq.n	8018dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8018d8e:	88cc      	ldrh	r4, [r1, #6]
 8018d90:	888b      	ldrh	r3, [r1, #4]
 8018d92:	4323      	orrs	r3, r4
 8018d94:	d010      	beq.n	8018db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018d96:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018d9a:	2c00      	cmp	r4, #0
 8018d9c:	db0c      	blt.n	8018db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018d9e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018da0:	429c      	cmp	r4, r3
 8018da2:	da09      	bge.n	8018db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018da4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018da8:	429c      	cmp	r4, r3
 8018daa:	f104 0401 	add.w	r4, r4, #1
 8018dae:	bf38      	it	cc
 8018db0:	3108      	addcc	r1, #8
 8018db2:	6084      	str	r4, [r0, #8]
 8018db4:	bf38      	it	cc
 8018db6:	6101      	strcc	r1, [r0, #16]
 8018db8:	6903      	ldr	r3, [r0, #16]
 8018dba:	2100      	movs	r1, #0
 8018dbc:	801e      	strh	r6, [r3, #0]
 8018dbe:	805a      	strh	r2, [r3, #2]
 8018dc0:	8099      	strh	r1, [r3, #4]
 8018dc2:	80d9      	strh	r1, [r3, #6]
 8018dc4:	9b06      	ldr	r3, [sp, #24]
 8018dc6:	4293      	cmp	r3, r2
 8018dc8:	f000 8082 	beq.w	8018ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8018dcc:	9b08      	ldr	r3, [sp, #32]
 8018dce:	9902      	ldr	r1, [sp, #8]
 8018dd0:	015b      	lsls	r3, r3, #5
 8018dd2:	9c02      	ldr	r4, [sp, #8]
 8018dd4:	fb93 f1f1 	sdiv	r1, r3, r1
 8018dd8:	fb04 3311 	mls	r3, r4, r1, r3
 8018ddc:	9103      	str	r1, [sp, #12]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	9308      	str	r3, [sp, #32]
 8018de2:	da04      	bge.n	8018dee <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8018de4:	1e4b      	subs	r3, r1, #1
 8018de6:	9303      	str	r3, [sp, #12]
 8018de8:	9b08      	ldr	r3, [sp, #32]
 8018dea:	4423      	add	r3, r4
 8018dec:	9308      	str	r3, [sp, #32]
 8018dee:	9b07      	ldr	r3, [sp, #28]
 8018df0:	464f      	mov	r7, r9
 8018df2:	9902      	ldr	r1, [sp, #8]
 8018df4:	2600      	movs	r6, #0
 8018df6:	1a5b      	subs	r3, r3, r1
 8018df8:	9307      	str	r3, [sp, #28]
 8018dfa:	9b01      	ldr	r3, [sp, #4]
 8018dfc:	f1c3 0320 	rsb	r3, r3, #32
 8018e00:	930e      	str	r3, [sp, #56]	@ 0x38
 8018e02:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018e04:	9b01      	ldr	r3, [sp, #4]
 8018e06:	1a5b      	subs	r3, r3, r1
 8018e08:	930a      	str	r3, [sp, #40]	@ 0x28
 8018e0a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8018e0e:	185b      	adds	r3, r3, r1
 8018e10:	bf58      	it	pl
 8018e12:	9902      	ldrpl	r1, [sp, #8]
 8018e14:	9307      	str	r3, [sp, #28]
 8018e16:	bf57      	itett	pl
 8018e18:	1a5b      	subpl	r3, r3, r1
 8018e1a:	9903      	ldrmi	r1, [sp, #12]
 8018e1c:	9307      	strpl	r3, [sp, #28]
 8018e1e:	9b03      	ldrpl	r3, [sp, #12]
 8018e20:	bf58      	it	pl
 8018e22:	1c59      	addpl	r1, r3, #1
 8018e24:	2a00      	cmp	r2, #0
 8018e26:	4489      	add	r9, r1
 8018e28:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018e2c:	db2e      	blt.n	8018e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018e2e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018e30:	4293      	cmp	r3, r2
 8018e32:	dd2b      	ble.n	8018e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018e34:	9c01      	ldr	r4, [sp, #4]
 8018e36:	6905      	ldr	r5, [r0, #16]
 8018e38:	46a0      	mov	r8, r4
 8018e3a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018e3c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8018e40:	45a0      	cmp	r8, r4
 8018e42:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8018e46:	f040 814c 	bne.w	80190e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8018e4a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018e4e:	4551      	cmp	r1, sl
 8018e50:	d103      	bne.n	8018e5a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8018e52:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018e56:	4291      	cmp	r1, r2
 8018e58:	d018      	beq.n	8018e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018e5a:	ea5c 010e 	orrs.w	r1, ip, lr
 8018e5e:	d00f      	beq.n	8018e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018e60:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018e64:	2900      	cmp	r1, #0
 8018e66:	db0b      	blt.n	8018e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018e68:	428b      	cmp	r3, r1
 8018e6a:	dd09      	ble.n	8018e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018e6c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8018e70:	4299      	cmp	r1, r3
 8018e72:	f101 0101 	add.w	r1, r1, #1
 8018e76:	bf38      	it	cc
 8018e78:	3508      	addcc	r5, #8
 8018e7a:	6081      	str	r1, [r0, #8]
 8018e7c:	bf38      	it	cc
 8018e7e:	6105      	strcc	r5, [r0, #16]
 8018e80:	6903      	ldr	r3, [r0, #16]
 8018e82:	f8a3 a000 	strh.w	sl, [r3]
 8018e86:	805a      	strh	r2, [r3, #2]
 8018e88:	809e      	strh	r6, [r3, #4]
 8018e8a:	80de      	strh	r6, [r3, #6]
 8018e8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e8e:	6901      	ldr	r1, [r0, #16]
 8018e90:	441a      	add	r2, r3
 8018e92:	88cc      	ldrh	r4, [r1, #6]
 8018e94:	888b      	ldrh	r3, [r1, #4]
 8018e96:	4323      	orrs	r3, r4
 8018e98:	d010      	beq.n	8018ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018e9a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018e9e:	2c00      	cmp	r4, #0
 8018ea0:	db0c      	blt.n	8018ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018ea2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018ea4:	429c      	cmp	r4, r3
 8018ea6:	da09      	bge.n	8018ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018ea8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018eac:	429c      	cmp	r4, r3
 8018eae:	f104 0401 	add.w	r4, r4, #1
 8018eb2:	bf38      	it	cc
 8018eb4:	3108      	addcc	r1, #8
 8018eb6:	6084      	str	r4, [r0, #8]
 8018eb8:	bf38      	it	cc
 8018eba:	6101      	strcc	r1, [r0, #16]
 8018ebc:	6903      	ldr	r3, [r0, #16]
 8018ebe:	464f      	mov	r7, r9
 8018ec0:	f8a3 a000 	strh.w	sl, [r3]
 8018ec4:	805a      	strh	r2, [r3, #2]
 8018ec6:	809e      	strh	r6, [r3, #4]
 8018ec8:	80de      	strh	r6, [r3, #6]
 8018eca:	9b06      	ldr	r3, [sp, #24]
 8018ecc:	4293      	cmp	r3, r2
 8018ece:	d19c      	bne.n	8018e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8018ed0:	9b01      	ldr	r3, [sp, #4]
 8018ed2:	6907      	ldr	r7, [r0, #16]
 8018ed4:	f1c3 0620 	rsb	r6, r3, #32
 8018ed8:	9b05      	ldr	r3, [sp, #20]
 8018eda:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8018ede:	9b04      	ldr	r3, [sp, #16]
 8018ee0:	429e      	cmp	r6, r3
 8018ee2:	f040 81c7 	bne.w	8019274 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8018ee6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018eea:	459e      	cmp	lr, r3
 8018eec:	d104      	bne.n	8018ef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8018eee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	f43f ae3a 	beq.w	8018b6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018ef8:	88f9      	ldrh	r1, [r7, #6]
 8018efa:	88bb      	ldrh	r3, [r7, #4]
 8018efc:	430b      	orrs	r3, r1
 8018efe:	d010      	beq.n	8018f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018f00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	db0c      	blt.n	8018f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018f08:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018f0a:	428b      	cmp	r3, r1
 8018f0c:	da09      	bge.n	8018f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018f0e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018f12:	428b      	cmp	r3, r1
 8018f14:	f103 0301 	add.w	r3, r3, #1
 8018f18:	bf38      	it	cc
 8018f1a:	3708      	addcc	r7, #8
 8018f1c:	6083      	str	r3, [r0, #8]
 8018f1e:	bf38      	it	cc
 8018f20:	6107      	strcc	r7, [r0, #16]
 8018f22:	6903      	ldr	r3, [r0, #16]
 8018f24:	f8a3 e000 	strh.w	lr, [r3]
 8018f28:	e603      	b.n	8018b32 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8018f2a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018f2c:	9c03      	ldr	r4, [sp, #12]
 8018f2e:	42a2      	cmp	r2, r4
 8018f30:	f6ff ae1c 	blt.w	8018b6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018f34:	9c06      	ldr	r4, [sp, #24]
 8018f36:	42a2      	cmp	r2, r4
 8018f38:	9c08      	ldr	r4, [sp, #32]
 8018f3a:	bfbc      	itt	lt
 8018f3c:	3201      	addlt	r2, #1
 8018f3e:	9206      	strlt	r2, [sp, #24]
 8018f40:	f1c3 0220 	rsb	r2, r3, #32
 8018f44:	4362      	muls	r2, r4
 8018f46:	2401      	movs	r4, #1
 8018f48:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018f4a:	2420      	movs	r4, #32
 8018f4c:	e6d6      	b.n	8018cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8018f4e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8018f52:	f009 021f 	and.w	r2, r9, #31
 8018f56:	f001 011f 	and.w	r1, r1, #31
 8018f5a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8018f5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8018f60:	45b0      	cmp	r8, r6
 8018f62:	9a01      	ldr	r2, [sp, #4]
 8018f64:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8018f68:	eba2 0203 	sub.w	r2, r2, r3
 8018f6c:	d108      	bne.n	8018f80 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8018f6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f70:	4496      	add	lr, r2
 8018f72:	4419      	add	r1, r3
 8018f74:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018f78:	fb02 a101 	mla	r1, r2, r1, sl
 8018f7c:	80e9      	strh	r1, [r5, #6]
 8018f7e:	e6fa      	b.n	8018d76 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018f80:	2c00      	cmp	r4, #0
 8018f82:	f2c0 80a7 	blt.w	80190d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8018f86:	2701      	movs	r7, #1
 8018f88:	f1c1 0c20 	rsb	ip, r1, #32
 8018f8c:	970a      	str	r7, [sp, #40]	@ 0x28
 8018f8e:	2720      	movs	r7, #32
 8018f90:	fb02 f20c 	mul.w	r2, r2, ip
 8018f94:	9709      	str	r7, [sp, #36]	@ 0x24
 8018f96:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018f98:	fb92 fcf4 	sdiv	ip, r2, r4
 8018f9c:	fb04 221c 	mls	r2, r4, ip, r2
 8018fa0:	4439      	add	r1, r7
 8018fa2:	2a00      	cmp	r2, #0
 8018fa4:	bfbc      	itt	lt
 8018fa6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8018faa:	1912      	addlt	r2, r2, r4
 8018fac:	fb0c a101 	mla	r1, ip, r1, sl
 8018fb0:	44e6      	add	lr, ip
 8018fb2:	80e9      	strh	r1, [r5, #6]
 8018fb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018fb6:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018fba:	eb08 0501 	add.w	r5, r8, r1
 8018fbe:	6901      	ldr	r1, [r0, #16]
 8018fc0:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8018fc4:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8018fc8:	ea58 070e 	orrs.w	r7, r8, lr
 8018fcc:	d010      	beq.n	8018ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018fce:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8018fd2:	f1be 0f00 	cmp.w	lr, #0
 8018fd6:	db0b      	blt.n	8018ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018fd8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018fda:	45be      	cmp	lr, r7
 8018fdc:	da08      	bge.n	8018ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018fde:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018fe2:	45be      	cmp	lr, r7
 8018fe4:	bf3c      	itt	cc
 8018fe6:	3108      	addcc	r1, #8
 8018fe8:	6101      	strcc	r1, [r0, #16]
 8018fea:	f10e 0101 	add.w	r1, lr, #1
 8018fee:	6081      	str	r1, [r0, #8]
 8018ff0:	6901      	ldr	r1, [r0, #16]
 8018ff2:	f04f 0e00 	mov.w	lr, #0
 8018ff6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8018ffa:	42ae      	cmp	r6, r5
 8018ffc:	800d      	strh	r5, [r1, #0]
 8018ffe:	4463      	add	r3, ip
 8019000:	f8a1 8002 	strh.w	r8, [r1, #2]
 8019004:	f8a1 e004 	strh.w	lr, [r1, #4]
 8019008:	f8a1 e006 	strh.w	lr, [r1, #6]
 801900c:	d053      	beq.n	80190b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801900e:	9901      	ldr	r1, [sp, #4]
 8019010:	1b12      	subs	r2, r2, r4
 8019012:	1ac9      	subs	r1, r1, r3
 8019014:	4461      	add	r1, ip
 8019016:	0149      	lsls	r1, r1, #5
 8019018:	fb91 fef4 	sdiv	lr, r1, r4
 801901c:	fb04 111e 	mls	r1, r4, lr, r1
 8019020:	2900      	cmp	r1, #0
 8019022:	bfbc      	itt	lt
 8019024:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8019028:	1909      	addlt	r1, r1, r4
 801902a:	f10e 0701 	add.w	r7, lr, #1
 801902e:	970d      	str	r7, [sp, #52]	@ 0x34
 8019030:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8019034:	1852      	adds	r2, r2, r1
 8019036:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019038:	bf54      	ite	pl
 801903a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801903e:	46f4      	movmi	ip, lr
 8019040:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8019044:	bf58      	it	pl
 8019046:	1b12      	subpl	r2, r2, r4
 8019048:	4463      	add	r3, ip
 801904a:	443d      	add	r5, r7
 801904c:	44e3      	add	fp, ip
 801904e:	f8aa b004 	strh.w	fp, [sl, #4]
 8019052:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8019056:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801905a:	f8aa b006 	strh.w	fp, [sl, #6]
 801905e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019062:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019066:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801906a:	ea5b 070a 	orrs.w	r7, fp, sl
 801906e:	d014      	beq.n	801909a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019070:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8019074:	f1ba 0f00 	cmp.w	sl, #0
 8019078:	db0f      	blt.n	801909a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801907a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801907c:	45ba      	cmp	sl, r7
 801907e:	da0c      	bge.n	801909a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019080:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8019084:	45ba      	cmp	sl, r7
 8019086:	f10a 0a01 	add.w	sl, sl, #1
 801908a:	bf38      	it	cc
 801908c:	f10c 0c08 	addcc.w	ip, ip, #8
 8019090:	f8c0 a008 	str.w	sl, [r0, #8]
 8019094:	bf38      	it	cc
 8019096:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801909a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801909e:	f04f 0700 	mov.w	r7, #0
 80190a2:	42ae      	cmp	r6, r5
 80190a4:	f8ac 5000 	strh.w	r5, [ip]
 80190a8:	f8ac 8002 	strh.w	r8, [ip, #2]
 80190ac:	f8ac 7004 	strh.w	r7, [ip, #4]
 80190b0:	f8ac 7006 	strh.w	r7, [ip, #6]
 80190b4:	d1bc      	bne.n	8019030 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80190b6:	6904      	ldr	r4, [r0, #16]
 80190b8:	9a01      	ldr	r2, [sp, #4]
 80190ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80190bc:	1ad3      	subs	r3, r2, r3
 80190be:	88a2      	ldrh	r2, [r4, #4]
 80190c0:	3120      	adds	r1, #32
 80190c2:	441a      	add	r2, r3
 80190c4:	80a2      	strh	r2, [r4, #4]
 80190c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80190c8:	1a89      	subs	r1, r1, r2
 80190ca:	88e2      	ldrh	r2, [r4, #6]
 80190cc:	fb03 2301 	mla	r3, r3, r1, r2
 80190d0:	80e3      	strh	r3, [r4, #6]
 80190d2:	e650      	b.n	8018d76 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80190d4:	f04f 37ff 	mov.w	r7, #4294967295
 80190d8:	434a      	muls	r2, r1
 80190da:	4264      	negs	r4, r4
 80190dc:	970a      	str	r7, [sp, #40]	@ 0x28
 80190de:	2700      	movs	r7, #0
 80190e0:	e758      	b.n	8018f94 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80190e2:	ea4f 1867 	mov.w	r8, r7, asr #5
 80190e6:	f009 031f 	and.w	r3, r9, #31
 80190ea:	f007 071f 	and.w	r7, r7, #31
 80190ee:	fa1f fc8c 	uxth.w	ip, ip
 80190f2:	45d0      	cmp	r8, sl
 80190f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80190f6:	fa1f fe8e 	uxth.w	lr, lr
 80190fa:	d10a      	bne.n	8019112 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80190fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190fe:	449c      	add	ip, r3
 8019100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019102:	441f      	add	r7, r3
 8019104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019106:	f8a5 c004 	strh.w	ip, [r5, #4]
 801910a:	fb03 e707 	mla	r7, r3, r7, lr
 801910e:	80ef      	strh	r7, [r5, #6]
 8019110:	e6bc      	b.n	8018e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019112:	2900      	cmp	r1, #0
 8019114:	f2c0 80a6 	blt.w	8019264 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8019118:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801911a:	f1c7 0320 	rsb	r3, r7, #32
 801911e:	4363      	muls	r3, r4
 8019120:	2401      	movs	r4, #1
 8019122:	940d      	str	r4, [sp, #52]	@ 0x34
 8019124:	2420      	movs	r4, #32
 8019126:	940c      	str	r4, [sp, #48]	@ 0x30
 8019128:	fb93 f4f1 	sdiv	r4, r3, r1
 801912c:	fb01 3b14 	mls	fp, r1, r4, r3
 8019130:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019132:	f1bb 0f00 	cmp.w	fp, #0
 8019136:	441f      	add	r7, r3
 8019138:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801913a:	bfbc      	itt	lt
 801913c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8019140:	448b      	addlt	fp, r1
 8019142:	fb04 e707 	mla	r7, r4, r7, lr
 8019146:	44a4      	add	ip, r4
 8019148:	80ef      	strh	r7, [r5, #6]
 801914a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801914e:	eb08 0503 	add.w	r5, r8, r3
 8019152:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019156:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801915a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801915e:	ea5e 0307 	orrs.w	r3, lr, r7
 8019162:	d011      	beq.n	8019188 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019164:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8019168:	f1be 0f00 	cmp.w	lr, #0
 801916c:	db0c      	blt.n	8019188 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801916e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8019170:	45be      	cmp	lr, r7
 8019172:	da09      	bge.n	8019188 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019174:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019178:	45be      	cmp	lr, r7
 801917a:	bf3c      	itt	cc
 801917c:	f10c 0708 	addcc.w	r7, ip, #8
 8019180:	6107      	strcc	r7, [r0, #16]
 8019182:	f10e 0701 	add.w	r7, lr, #1
 8019186:	6087      	str	r7, [r0, #8]
 8019188:	6907      	ldr	r7, [r0, #16]
 801918a:	b213      	sxth	r3, r2
 801918c:	4555      	cmp	r5, sl
 801918e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019190:	807b      	strh	r3, [r7, #2]
 8019192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019194:	803d      	strh	r5, [r7, #0]
 8019196:	80be      	strh	r6, [r7, #4]
 8019198:	eb04 0c03 	add.w	ip, r4, r3
 801919c:	80fe      	strh	r6, [r7, #6]
 801919e:	d050      	beq.n	8019242 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80191a0:	9b01      	ldr	r3, [sp, #4]
 80191a2:	eba3 070c 	sub.w	r7, r3, ip
 80191a6:	ebab 0301 	sub.w	r3, fp, r1
 80191aa:	443c      	add	r4, r7
 80191ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80191ae:	0164      	lsls	r4, r4, #5
 80191b0:	fb94 f8f1 	sdiv	r8, r4, r1
 80191b4:	fb01 4418 	mls	r4, r1, r8, r4
 80191b8:	2c00      	cmp	r4, #0
 80191ba:	bfbc      	itt	lt
 80191bc:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80191c0:	1864      	addlt	r4, r4, r1
 80191c2:	f108 0701 	add.w	r7, r8, #1
 80191c6:	9711      	str	r7, [sp, #68]	@ 0x44
 80191c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191ca:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80191ce:	191b      	adds	r3, r3, r4
 80191d0:	f8be b004 	ldrh.w	fp, [lr, #4]
 80191d4:	bf54      	ite	pl
 80191d6:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80191d8:	4647      	movmi	r7, r8
 80191da:	9309      	str	r3, [sp, #36]	@ 0x24
 80191dc:	bf58      	it	pl
 80191de:	1a5b      	subpl	r3, r3, r1
 80191e0:	44bb      	add	fp, r7
 80191e2:	44bc      	add	ip, r7
 80191e4:	bf58      	it	pl
 80191e6:	9309      	strpl	r3, [sp, #36]	@ 0x24
 80191e8:	f8ae b004 	strh.w	fp, [lr, #4]
 80191ec:	f8be b006 	ldrh.w	fp, [lr, #6]
 80191f0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80191f4:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80191f6:	f8ae b006 	strh.w	fp, [lr, #6]
 80191fa:	443d      	add	r5, r7
 80191fc:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019200:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019204:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8019208:	ea5b 0307 	orrs.w	r3, fp, r7
 801920c:	d011      	beq.n	8019232 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801920e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8019212:	f1bb 0f00 	cmp.w	fp, #0
 8019216:	db0c      	blt.n	8019232 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019218:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801921a:	45bb      	cmp	fp, r7
 801921c:	da09      	bge.n	8019232 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801921e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019222:	45bb      	cmp	fp, r7
 8019224:	bf3c      	itt	cc
 8019226:	f10e 0708 	addcc.w	r7, lr, #8
 801922a:	6107      	strcc	r7, [r0, #16]
 801922c:	f10b 0701 	add.w	r7, fp, #1
 8019230:	6087      	str	r7, [r0, #8]
 8019232:	6907      	ldr	r7, [r0, #16]
 8019234:	4555      	cmp	r5, sl
 8019236:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019238:	803d      	strh	r5, [r7, #0]
 801923a:	807b      	strh	r3, [r7, #2]
 801923c:	80be      	strh	r6, [r7, #4]
 801923e:	80fe      	strh	r6, [r7, #6]
 8019240:	d1c2      	bne.n	80191c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8019242:	9b01      	ldr	r3, [sp, #4]
 8019244:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019246:	eba3 0c0c 	sub.w	ip, r3, ip
 801924a:	6903      	ldr	r3, [r0, #16]
 801924c:	3720      	adds	r7, #32
 801924e:	8899      	ldrh	r1, [r3, #4]
 8019250:	4461      	add	r1, ip
 8019252:	8099      	strh	r1, [r3, #4]
 8019254:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019256:	1a7f      	subs	r7, r7, r1
 8019258:	88d9      	ldrh	r1, [r3, #6]
 801925a:	fb0c 1c07 	mla	ip, ip, r7, r1
 801925e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8019262:	e613      	b.n	8018e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019264:	f04f 34ff 	mov.w	r4, #4294967295
 8019268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801926a:	4249      	negs	r1, r1
 801926c:	940d      	str	r4, [sp, #52]	@ 0x34
 801926e:	2400      	movs	r4, #0
 8019270:	437b      	muls	r3, r7
 8019272:	e758      	b.n	8019126 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8019274:	9905      	ldr	r1, [sp, #20]
 8019276:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801927a:	f009 0c1f 	and.w	ip, r9, #31
 801927e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8019282:	f001 011f 	and.w	r1, r1, #31
 8019286:	45f3      	cmp	fp, lr
 8019288:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801928c:	9102      	str	r1, [sp, #8]
 801928e:	9904      	ldr	r1, [sp, #16]
 8019290:	eba1 0406 	sub.w	r4, r1, r6
 8019294:	d108      	bne.n	80192a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8019296:	9b02      	ldr	r3, [sp, #8]
 8019298:	44a0      	add	r8, r4
 801929a:	449c      	add	ip, r3
 801929c:	f8a7 8004 	strh.w	r8, [r7, #4]
 80192a0:	fb04 a40c 	mla	r4, r4, ip, sl
 80192a4:	80fc      	strh	r4, [r7, #6]
 80192a6:	e461      	b.n	8018b6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80192a8:	9905      	ldr	r1, [sp, #20]
 80192aa:	ebb1 0109 	subs.w	r1, r1, r9
 80192ae:	bf51      	iteee	pl
 80192b0:	f1cc 0520 	rsbpl	r5, ip, #32
 80192b4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80192b8:	4249      	negmi	r1, r1
 80192ba:	2500      	movmi	r5, #0
 80192bc:	bf5d      	ittte	pl
 80192be:	436c      	mulpl	r4, r5
 80192c0:	2520      	movpl	r5, #32
 80192c2:	f04f 0901 	movpl.w	r9, #1
 80192c6:	f04f 39ff 	movmi.w	r9, #4294967295
 80192ca:	9501      	str	r5, [sp, #4]
 80192cc:	9b01      	ldr	r3, [sp, #4]
 80192ce:	fb94 f5f1 	sdiv	r5, r4, r1
 80192d2:	fb01 4415 	mls	r4, r1, r5, r4
 80192d6:	449c      	add	ip, r3
 80192d8:	eb0b 0309 	add.w	r3, fp, r9
 80192dc:	2c00      	cmp	r4, #0
 80192de:	bfbc      	itt	lt
 80192e0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80192e4:	1864      	addlt	r4, r4, r1
 80192e6:	44a8      	add	r8, r5
 80192e8:	fb05 ac0c 	mla	ip, r5, ip, sl
 80192ec:	f8a7 8004 	strh.w	r8, [r7, #4]
 80192f0:	f8a7 c006 	strh.w	ip, [r7, #6]
 80192f4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80192f8:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80192fc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019300:	ea58 0707 	orrs.w	r7, r8, r7
 8019304:	d011      	beq.n	801932a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019306:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801930a:	f1b8 0f00 	cmp.w	r8, #0
 801930e:	db0c      	blt.n	801932a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019310:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8019312:	45b8      	cmp	r8, r7
 8019314:	da09      	bge.n	801932a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019316:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801931a:	45b8      	cmp	r8, r7
 801931c:	bf3c      	itt	cc
 801931e:	f10c 0708 	addcc.w	r7, ip, #8
 8019322:	6107      	strcc	r7, [r0, #16]
 8019324:	f108 0701 	add.w	r7, r8, #1
 8019328:	6087      	str	r7, [r0, #8]
 801932a:	6907      	ldr	r7, [r0, #16]
 801932c:	f04f 0c00 	mov.w	ip, #0
 8019330:	b212      	sxth	r2, r2
 8019332:	459e      	cmp	lr, r3
 8019334:	803b      	strh	r3, [r7, #0]
 8019336:	442e      	add	r6, r5
 8019338:	807a      	strh	r2, [r7, #2]
 801933a:	f8a7 c004 	strh.w	ip, [r7, #4]
 801933e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019342:	d04b      	beq.n	80193dc <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8019344:	9f04      	ldr	r7, [sp, #16]
 8019346:	1a64      	subs	r4, r4, r1
 8019348:	f04f 0a00 	mov.w	sl, #0
 801934c:	1bbf      	subs	r7, r7, r6
 801934e:	443d      	add	r5, r7
 8019350:	016d      	lsls	r5, r5, #5
 8019352:	fb95 f8f1 	sdiv	r8, r5, r1
 8019356:	fb01 5518 	mls	r5, r1, r8, r5
 801935a:	4565      	cmp	r5, ip
 801935c:	bfbc      	itt	lt
 801935e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019362:	186d      	addlt	r5, r5, r1
 8019364:	f108 0701 	add.w	r7, r8, #1
 8019368:	9703      	str	r7, [sp, #12]
 801936a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801936e:	1964      	adds	r4, r4, r5
 8019370:	444b      	add	r3, r9
 8019372:	bf54      	ite	pl
 8019374:	9f03      	ldrpl	r7, [sp, #12]
 8019376:	4647      	movmi	r7, r8
 8019378:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801937c:	bf58      	it	pl
 801937e:	1a64      	subpl	r4, r4, r1
 8019380:	443e      	add	r6, r7
 8019382:	44bb      	add	fp, r7
 8019384:	f8ac b004 	strh.w	fp, [ip, #4]
 8019388:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801938c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019390:	f8ac b006 	strh.w	fp, [ip, #6]
 8019394:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019398:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801939c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80193a0:	ea5b 0707 	orrs.w	r7, fp, r7
 80193a4:	d011      	beq.n	80193ca <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80193a6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80193aa:	f1bb 0f00 	cmp.w	fp, #0
 80193ae:	db0c      	blt.n	80193ca <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80193b0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80193b2:	45bb      	cmp	fp, r7
 80193b4:	da09      	bge.n	80193ca <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80193b6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80193ba:	45bb      	cmp	fp, r7
 80193bc:	bf3c      	itt	cc
 80193be:	f10c 0708 	addcc.w	r7, ip, #8
 80193c2:	6107      	strcc	r7, [r0, #16]
 80193c4:	f10b 0701 	add.w	r7, fp, #1
 80193c8:	6087      	str	r7, [r0, #8]
 80193ca:	6907      	ldr	r7, [r0, #16]
 80193cc:	459e      	cmp	lr, r3
 80193ce:	803b      	strh	r3, [r7, #0]
 80193d0:	807a      	strh	r2, [r7, #2]
 80193d2:	f8a7 a004 	strh.w	sl, [r7, #4]
 80193d6:	f8a7 a006 	strh.w	sl, [r7, #6]
 80193da:	d1c6      	bne.n	801936a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80193dc:	9b04      	ldr	r3, [sp, #16]
 80193de:	1b9e      	subs	r6, r3, r6
 80193e0:	6903      	ldr	r3, [r0, #16]
 80193e2:	889a      	ldrh	r2, [r3, #4]
 80193e4:	4432      	add	r2, r6
 80193e6:	809a      	strh	r2, [r3, #4]
 80193e8:	9a02      	ldr	r2, [sp, #8]
 80193ea:	f102 0c20 	add.w	ip, r2, #32
 80193ee:	9a01      	ldr	r2, [sp, #4]
 80193f0:	ebac 0c02 	sub.w	ip, ip, r2
 80193f4:	88da      	ldrh	r2, [r3, #6]
 80193f6:	fb06 260c 	mla	r6, r6, ip, r2
 80193fa:	80de      	strh	r6, [r3, #6]
 80193fc:	f7ff bbb6 	b.w	8018b6c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08019400 <_ZN8touchgfx7Outline6lineToEii>:
 8019400:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019402:	079b      	lsls	r3, r3, #30
 8019404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019406:	460e      	mov	r6, r1
 8019408:	4615      	mov	r5, r2
 801940a:	d511      	bpl.n	8019430 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801940c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8019410:	ea86 0701 	eor.w	r7, r6, r1
 8019414:	ea85 0302 	eor.w	r3, r5, r2
 8019418:	433b      	orrs	r3, r7
 801941a:	d009      	beq.n	8019430 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801941c:	4633      	mov	r3, r6
 801941e:	9500      	str	r5, [sp, #0]
 8019420:	f7ff fb4c 	bl	8018abc <_ZN8touchgfx7Outline10renderLineEiiii>
 8019424:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019426:	f043 0301 	orr.w	r3, r3, #1
 801942a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801942e:	6243      	str	r3, [r0, #36]	@ 0x24
 8019430:	b003      	add	sp, #12
 8019432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019434 <_ZN8touchgfx7Outline6moveToEii>:
 8019434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019436:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019438:	4615      	mov	r5, r2
 801943a:	4604      	mov	r4, r0
 801943c:	460e      	mov	r6, r1
 801943e:	079a      	lsls	r2, r3, #30
 8019440:	d401      	bmi.n	8019446 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8019442:	f7ff fb07 	bl	8018a54 <_ZN8touchgfx7Outline5resetEv>
 8019446:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019448:	07db      	lsls	r3, r3, #31
 801944a:	d504      	bpl.n	8019456 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801944c:	4620      	mov	r0, r4
 801944e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8019452:	f7ff ffd5 	bl	8019400 <_ZN8touchgfx7Outline6lineToEii>
 8019456:	6923      	ldr	r3, [r4, #16]
 8019458:	1170      	asrs	r0, r6, #5
 801945a:	1169      	asrs	r1, r5, #5
 801945c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019460:	4290      	cmp	r0, r2
 8019462:	d103      	bne.n	801946c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8019464:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019468:	4291      	cmp	r1, r2
 801946a:	d01a      	beq.n	80194a2 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801946c:	88df      	ldrh	r7, [r3, #6]
 801946e:	889a      	ldrh	r2, [r3, #4]
 8019470:	433a      	orrs	r2, r7
 8019472:	d010      	beq.n	8019496 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019474:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019478:	2a00      	cmp	r2, #0
 801947a:	db0c      	blt.n	8019496 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801947c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801947e:	42ba      	cmp	r2, r7
 8019480:	da09      	bge.n	8019496 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019482:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8019486:	42ba      	cmp	r2, r7
 8019488:	f102 0201 	add.w	r2, r2, #1
 801948c:	bf38      	it	cc
 801948e:	3308      	addcc	r3, #8
 8019490:	60a2      	str	r2, [r4, #8]
 8019492:	bf38      	it	cc
 8019494:	6123      	strcc	r3, [r4, #16]
 8019496:	6923      	ldr	r3, [r4, #16]
 8019498:	2200      	movs	r2, #0
 801949a:	8018      	strh	r0, [r3, #0]
 801949c:	8059      	strh	r1, [r3, #2]
 801949e:	809a      	strh	r2, [r3, #4]
 80194a0:	80da      	strh	r2, [r3, #6]
 80194a2:	6166      	str	r6, [r4, #20]
 80194a4:	6225      	str	r5, [r4, #32]
 80194a6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80194aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080194ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80194ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194b0:	b0d0      	sub	sp, #320	@ 0x140
 80194b2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80194b6:	466c      	mov	r4, sp
 80194b8:	4627      	mov	r7, r4
 80194ba:	1a0d      	subs	r5, r1, r0
 80194bc:	f100 0308 	add.w	r3, r0, #8
 80194c0:	2d48      	cmp	r5, #72	@ 0x48
 80194c2:	f340 80d5 	ble.w	8019670 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80194c6:	112d      	asrs	r5, r5, #4
 80194c8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80194cc:	f9b0 9000 	ldrsh.w	r9, [r0]
 80194d0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80194d4:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80194d8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80194dc:	6816      	ldr	r6, [r2, #0]
 80194de:	6006      	str	r6, [r0, #0]
 80194e0:	6856      	ldr	r6, [r2, #4]
 80194e2:	6046      	str	r6, [r0, #4]
 80194e4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80194e8:	f8a2 8002 	strh.w	r8, [r2, #2]
 80194ec:	f8a2 e004 	strh.w	lr, [r2, #4]
 80194f0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80194f4:	f1a1 0208 	sub.w	r2, r1, #8
 80194f8:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80194fc:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8019500:	4565      	cmp	r5, ip
 8019502:	db06      	blt.n	8019512 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8019504:	d119      	bne.n	801953a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8019506:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801950a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801950e:	42ae      	cmp	r6, r5
 8019510:	dd13      	ble.n	801953a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8019512:	460e      	mov	r6, r1
 8019514:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8019518:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801951c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8019520:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8019524:	601d      	str	r5, [r3, #0]
 8019526:	6875      	ldr	r5, [r6, #4]
 8019528:	605d      	str	r5, [r3, #4]
 801952a:	f821 9c08 	strh.w	r9, [r1, #-8]
 801952e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8019532:	f821 8c04 	strh.w	r8, [r1, #-4]
 8019536:	f821 ec02 	strh.w	lr, [r1, #-2]
 801953a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801953e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8019542:	42ae      	cmp	r6, r5
 8019544:	db06      	blt.n	8019554 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8019546:	d116      	bne.n	8019576 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8019548:	f9b0 c000 	ldrsh.w	ip, [r0]
 801954c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8019550:	45ac      	cmp	ip, r5
 8019552:	da10      	bge.n	8019576 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8019554:	681d      	ldr	r5, [r3, #0]
 8019556:	f9b0 8000 	ldrsh.w	r8, [r0]
 801955a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801955e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8019562:	6005      	str	r5, [r0, #0]
 8019564:	685d      	ldr	r5, [r3, #4]
 8019566:	f8a0 8008 	strh.w	r8, [r0, #8]
 801956a:	6045      	str	r5, [r0, #4]
 801956c:	8146      	strh	r6, [r0, #10]
 801956e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8019572:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019576:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801957a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801957e:	4565      	cmp	r5, ip
 8019580:	db06      	blt.n	8019590 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8019582:	d119      	bne.n	80195b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019584:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8019588:	f9b0 5000 	ldrsh.w	r5, [r0]
 801958c:	42ae      	cmp	r6, r5
 801958e:	da13      	bge.n	80195b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019590:	460e      	mov	r6, r1
 8019592:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019596:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801959a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801959e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80195a2:	6005      	str	r5, [r0, #0]
 80195a4:	6875      	ldr	r5, [r6, #4]
 80195a6:	6045      	str	r5, [r0, #4]
 80195a8:	f821 9c08 	strh.w	r9, [r1, #-8]
 80195ac:	f821 cc06 	strh.w	ip, [r1, #-6]
 80195b0:	f821 8c04 	strh.w	r8, [r1, #-4]
 80195b4:	f821 ec02 	strh.w	lr, [r1, #-2]
 80195b8:	3308      	adds	r3, #8
 80195ba:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80195be:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80195c2:	45e6      	cmp	lr, ip
 80195c4:	dbf8      	blt.n	80195b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80195c6:	d105      	bne.n	80195d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80195c8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80195cc:	f9b0 5000 	ldrsh.w	r5, [r0]
 80195d0:	42ae      	cmp	r6, r5
 80195d2:	dbf1      	blt.n	80195b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80195d4:	4615      	mov	r5, r2
 80195d6:	3a08      	subs	r2, #8
 80195d8:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80195dc:	45b4      	cmp	ip, r6
 80195de:	dbf9      	blt.n	80195d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80195e0:	d105      	bne.n	80195ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80195e2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80195e6:	f9b2 6000 	ldrsh.w	r6, [r2]
 80195ea:	45b0      	cmp	r8, r6
 80195ec:	dbf2      	blt.n	80195d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80195ee:	4293      	cmp	r3, r2
 80195f0:	f1a5 0608 	sub.w	r6, r5, #8
 80195f4:	d816      	bhi.n	8019624 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80195f6:	f8d6 c000 	ldr.w	ip, [r6]
 80195fa:	f9b3 a000 	ldrsh.w	sl, [r3]
 80195fe:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8019602:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8019606:	f8c3 c000 	str.w	ip, [r3]
 801960a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801960e:	f8c3 c004 	str.w	ip, [r3, #4]
 8019612:	f825 ac08 	strh.w	sl, [r5, #-8]
 8019616:	f825 ec06 	strh.w	lr, [r5, #-6]
 801961a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801961e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8019622:	e7c9      	b.n	80195b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019624:	f8d6 e000 	ldr.w	lr, [r6]
 8019628:	f9b0 a000 	ldrsh.w	sl, [r0]
 801962c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8019630:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8019634:	f8c0 e000 	str.w	lr, [r0]
 8019638:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801963c:	1a16      	subs	r6, r2, r0
 801963e:	f8c0 e004 	str.w	lr, [r0, #4]
 8019642:	f825 ac08 	strh.w	sl, [r5, #-8]
 8019646:	f825 cc06 	strh.w	ip, [r5, #-6]
 801964a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801964e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8019652:	1acd      	subs	r5, r1, r3
 8019654:	10ed      	asrs	r5, r5, #3
 8019656:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801965a:	bfb5      	itete	lt
 801965c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8019660:	e9c4 3100 	strdge	r3, r1, [r4]
 8019664:	460a      	movlt	r2, r1
 8019666:	4603      	movge	r3, r0
 8019668:	3408      	adds	r4, #8
 801966a:	4618      	mov	r0, r3
 801966c:	4611      	mov	r1, r2
 801966e:	e724      	b.n	80194ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8019670:	4299      	cmp	r1, r3
 8019672:	d927      	bls.n	80196c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8019674:	f1a3 0210 	sub.w	r2, r3, #16
 8019678:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801967c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8019680:	45ac      	cmp	ip, r5
 8019682:	db06      	blt.n	8019692 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8019684:	d11c      	bne.n	80196c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8019686:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801968a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801968e:	42ae      	cmp	r6, r5
 8019690:	da16      	bge.n	80196c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8019692:	4615      	mov	r5, r2
 8019694:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8019698:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801969c:	3a08      	subs	r2, #8
 801969e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80196a2:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80196a6:	6196      	str	r6, [r2, #24]
 80196a8:	42a8      	cmp	r0, r5
 80196aa:	686e      	ldr	r6, [r5, #4]
 80196ac:	f8a2 9010 	strh.w	r9, [r2, #16]
 80196b0:	61d6      	str	r6, [r2, #28]
 80196b2:	f8a2 c012 	strh.w	ip, [r2, #18]
 80196b6:	f8a2 8014 	strh.w	r8, [r2, #20]
 80196ba:	f8a2 e016 	strh.w	lr, [r2, #22]
 80196be:	d1db      	bne.n	8019678 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80196c0:	3308      	adds	r3, #8
 80196c2:	e7d5      	b.n	8019670 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80196c4:	42bc      	cmp	r4, r7
 80196c6:	d903      	bls.n	80196d0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80196c8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80196cc:	3c08      	subs	r4, #8
 80196ce:	e6f4      	b.n	80194ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80196d0:	b050      	add	sp, #320	@ 0x140
 80196d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080196d6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80196d6:	b510      	push	{r4, lr}
 80196d8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80196da:	4604      	mov	r4, r0
 80196dc:	07da      	lsls	r2, r3, #31
 80196de:	d507      	bpl.n	80196f0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80196e0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80196e4:	f7ff fe8c 	bl	8019400 <_ZN8touchgfx7Outline6lineToEii>
 80196e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80196ea:	f023 0301 	bic.w	r3, r3, #1
 80196ee:	6243      	str	r3, [r0, #36]	@ 0x24
 80196f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80196f2:	079b      	lsls	r3, r3, #30
 80196f4:	d521      	bpl.n	801973a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80196f6:	6923      	ldr	r3, [r4, #16]
 80196f8:	88d9      	ldrh	r1, [r3, #6]
 80196fa:	889a      	ldrh	r2, [r3, #4]
 80196fc:	430a      	orrs	r2, r1
 80196fe:	d010      	beq.n	8019722 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019700:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019704:	2a00      	cmp	r2, #0
 8019706:	db0c      	blt.n	8019722 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019708:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801970a:	428a      	cmp	r2, r1
 801970c:	da09      	bge.n	8019722 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801970e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8019712:	4291      	cmp	r1, r2
 8019714:	f102 0201 	add.w	r2, r2, #1
 8019718:	bf88      	it	hi
 801971a:	3308      	addhi	r3, #8
 801971c:	60a2      	str	r2, [r4, #8]
 801971e:	bf88      	it	hi
 8019720:	6123      	strhi	r3, [r4, #16]
 8019722:	68a1      	ldr	r1, [r4, #8]
 8019724:	b129      	cbz	r1, 8019732 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8019726:	6863      	ldr	r3, [r4, #4]
 8019728:	4299      	cmp	r1, r3
 801972a:	d802      	bhi.n	8019732 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801972c:	68e0      	ldr	r0, [r4, #12]
 801972e:	f7ff febd 	bl	80194ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8019732:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019734:	f023 0302 	bic.w	r3, r3, #2
 8019738:	6263      	str	r3, [r4, #36]	@ 0x24
 801973a:	68e0      	ldr	r0, [r4, #12]
 801973c:	bd10      	pop	{r4, pc}
	...

08019740 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8019740:	4b02      	ldr	r3, [pc, #8]	@ (801974c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8019742:	6018      	str	r0, [r3, #0]
 8019744:	4b02      	ldr	r3, [pc, #8]	@ (8019750 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8019746:	6019      	str	r1, [r3, #0]
 8019748:	4770      	bx	lr
 801974a:	bf00      	nop
 801974c:	24028778 	.word	0x24028778
 8019750:	2402877c 	.word	0x2402877c

08019754 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8019754:	2300      	movs	r3, #0
 8019756:	4a02      	ldr	r2, [pc, #8]	@ (8019760 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8019758:	6013      	str	r3, [r2, #0]
 801975a:	4a02      	ldr	r2, [pc, #8]	@ (8019764 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 801975c:	6013      	str	r3, [r2, #0]
 801975e:	4770      	bx	lr
 8019760:	24028778 	.word	0x24028778
 8019764:	2402877c 	.word	0x2402877c

08019768 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8019768:	4b01      	ldr	r3, [pc, #4]	@ (8019770 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801976a:	6818      	ldr	r0, [r3, #0]
 801976c:	4770      	bx	lr
 801976e:	bf00      	nop
 8019770:	24028778 	.word	0x24028778

08019774 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8019774:	4b01      	ldr	r3, [pc, #4]	@ (801977c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8019776:	6818      	ldr	r0, [r3, #0]
 8019778:	4770      	bx	lr
 801977a:	bf00      	nop
 801977c:	2402877c 	.word	0x2402877c

08019780 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019780:	b510      	push	{r4, lr}
 8019782:	6803      	ldr	r3, [r0, #0]
 8019784:	460c      	mov	r4, r1
 8019786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019788:	4798      	blx	r3
 801978a:	1b03      	subs	r3, r0, r4
 801978c:	4258      	negs	r0, r3
 801978e:	4158      	adcs	r0, r3
 8019790:	bd10      	pop	{r4, pc}
	...

08019794 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019794:	4b01      	ldr	r3, [pc, #4]	@ (801979c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019796:	6019      	str	r1, [r3, #0]
 8019798:	4770      	bx	lr
 801979a:	bf00      	nop
 801979c:	24028780 	.word	0x24028780

080197a0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80197a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a4:	4696      	mov	lr, r2
 80197a6:	b097      	sub	sp, #92	@ 0x5c
 80197a8:	4605      	mov	r5, r0
 80197aa:	4614      	mov	r4, r2
 80197ac:	460e      	mov	r6, r1
 80197ae:	461f      	mov	r7, r3
 80197b0:	f10d 0c1c 	add.w	ip, sp, #28
 80197b4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80197b8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80197bc:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80197c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197c8:	f8de 3000 	ldr.w	r3, [lr]
 80197cc:	f104 0e14 	add.w	lr, r4, #20
 80197d0:	f8cc 3000 	str.w	r3, [ip]
 80197d4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80197d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197e0:	f8de 3000 	ldr.w	r3, [lr]
 80197e4:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80197e8:	f8cc 3000 	str.w	r3, [ip]
 80197ec:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80197f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197f8:	f8de 3000 	ldr.w	r3, [lr]
 80197fc:	4631      	mov	r1, r6
 80197fe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019800:	4628      	mov	r0, r5
 8019802:	f8cc 3000 	str.w	r3, [ip]
 8019806:	682b      	ldr	r3, [r5, #0]
 8019808:	9201      	str	r2, [sp, #4]
 801980a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801980c:	f8cd 8008 	str.w	r8, [sp, #8]
 8019810:	9200      	str	r2, [sp, #0]
 8019812:	aa07      	add	r2, sp, #28
 8019814:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019818:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801981c:	463b      	mov	r3, r7
 801981e:	47d8      	blx	fp
 8019820:	46a6      	mov	lr, r4
 8019822:	f10d 0c1c 	add.w	ip, sp, #28
 8019826:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801982a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801982e:	f8de 3000 	ldr.w	r3, [lr]
 8019832:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8019836:	343c      	adds	r4, #60	@ 0x3c
 8019838:	f8cc 3000 	str.w	r3, [ip]
 801983c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019840:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019844:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019848:	f8de 3000 	ldr.w	r3, [lr]
 801984c:	f8cc 3000 	str.w	r3, [ip]
 8019850:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8019854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019856:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801985a:	6823      	ldr	r3, [r4, #0]
 801985c:	4631      	mov	r1, r6
 801985e:	4628      	mov	r0, r5
 8019860:	f8cc 3000 	str.w	r3, [ip]
 8019864:	682b      	ldr	r3, [r5, #0]
 8019866:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801986a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801986c:	f8cd 8008 	str.w	r8, [sp, #8]
 8019870:	9201      	str	r2, [sp, #4]
 8019872:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019874:	9200      	str	r2, [sp, #0]
 8019876:	aa07      	add	r2, sp, #28
 8019878:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801987a:	463b      	mov	r3, r7
 801987c:	47a0      	blx	r4
 801987e:	b017      	add	sp, #92	@ 0x5c
 8019880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019884 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019888:	b08d      	sub	sp, #52	@ 0x34
 801988a:	4688      	mov	r8, r1
 801988c:	f8d3 c000 	ldr.w	ip, [r3]
 8019890:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8019892:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8019896:	680f      	ldr	r7, [r1, #0]
 8019898:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801989c:	eba7 070c 	sub.w	r7, r7, ip
 80198a0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80198a4:	edd3 6a07 	vldr	s13, [r3, #28]
 80198a8:	42bc      	cmp	r4, r7
 80198aa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80198ac:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80198b0:	bfa8      	it	ge
 80198b2:	463c      	movge	r4, r7
 80198b4:	f9b1 9000 	ldrsh.w	r9, [r1]
 80198b8:	f9ba 1000 	ldrsh.w	r1, [sl]
 80198bc:	ee07 4a90 	vmov	s15, r4
 80198c0:	eb09 0e0c 	add.w	lr, r9, ip
 80198c4:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80198c8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80198cc:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80198d0:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80198d4:	4571      	cmp	r1, lr
 80198d6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80198da:	ee65 4a24 	vmul.f32	s9, s10, s9
 80198de:	ee25 5a27 	vmul.f32	s10, s10, s15
 80198e2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80198e6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80198ea:	ee32 1a05 	vadd.f32	s2, s4, s10
 80198ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80198f2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80198f6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80198fa:	ee22 2a07 	vmul.f32	s4, s4, s14
 80198fe:	f340 808c 	ble.w	8019a1a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019902:	eba1 060e 	sub.w	r6, r1, lr
 8019906:	fb96 f5f4 	sdiv	r5, r6, r4
 801990a:	ee07 5a10 	vmov	s14, r5
 801990e:	2d00      	cmp	r5, #0
 8019910:	fb04 6615 	mls	r6, r4, r5, r6
 8019914:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019918:	eea7 0a04 	vfma.f32	s0, s14, s8
 801991c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019920:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019924:	dd12      	ble.n	801994c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019926:	ee70 6a44 	vsub.f32	s13, s0, s8
 801992a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801992e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019932:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801993a:	bf14      	ite	ne
 801993c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019940:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019944:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019948:	ee22 2a07 	vmul.f32	s4, s4, s14
 801994c:	fb05 f204 	mul.w	r2, r5, r4
 8019950:	1abf      	subs	r7, r7, r2
 8019952:	4494      	add	ip, r2
 8019954:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019958:	4411      	add	r1, r2
 801995a:	eb09 020c 	add.w	r2, r9, ip
 801995e:	b209      	sxth	r1, r1
 8019960:	443a      	add	r2, r7
 8019962:	428a      	cmp	r2, r1
 8019964:	bfc4      	itt	gt
 8019966:	eba1 0209 	subgt.w	r2, r1, r9
 801996a:	eba2 070c 	subgt.w	r7, r2, ip
 801996e:	2f00      	cmp	r7, #0
 8019970:	dd50      	ble.n	8019a14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019972:	fb97 f1f4 	sdiv	r1, r7, r4
 8019976:	fb04 7211 	mls	r2, r4, r1, r7
 801997a:	b90a      	cbnz	r2, 8019980 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801997c:	3901      	subs	r1, #1
 801997e:	4622      	mov	r2, r4
 8019980:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019984:	6840      	ldr	r0, [r0, #4]
 8019986:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801998a:	44b6      	add	lr, r6
 801998c:	f8d0 a000 	ldr.w	sl, [r0]
 8019990:	2900      	cmp	r1, #0
 8019992:	bfcc      	ite	gt
 8019994:	46a1      	movgt	r9, r4
 8019996:	4691      	movle	r9, r2
 8019998:	900b      	str	r0, [sp, #44]	@ 0x2c
 801999a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801999c:	fb04 e505 	mla	r5, r4, r5, lr
 80199a0:	eef0 6a42 	vmov.f32	s13, s4
 80199a4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80199a8:	9008      	str	r0, [sp, #32]
 80199aa:	eeb0 7a61 	vmov.f32	s14, s3
 80199ae:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80199b0:	695b      	ldr	r3, [r3, #20]
 80199b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80199b6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80199ba:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80199be:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80199c0:	445b      	add	r3, fp
 80199c2:	9307      	str	r3, [sp, #28]
 80199c4:	ee16 3a90 	vmov	r3, s13
 80199c8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80199cc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80199d0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80199d4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80199d8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80199dc:	ee17 7a90 	vmov	r7, s15
 80199e0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80199e4:	fb97 f7f4 	sdiv	r7, r7, r4
 80199e8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80199ec:	ee17 ca90 	vmov	ip, s15
 80199f0:	fb9c fcf4 	sdiv	ip, ip, r4
 80199f4:	fb0c 3306 	mla	r3, ip, r6, r3
 80199f8:	9302      	str	r3, [sp, #8]
 80199fa:	ee17 3a10 	vmov	r3, s14
 80199fe:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019a02:	fb07 3706 	mla	r7, r7, r6, r3
 8019a06:	eba9 0306 	sub.w	r3, r9, r6
 8019a0a:	e9cd 4700 	strd	r4, r7, [sp]
 8019a0e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019a12:	47a0      	blx	r4
 8019a14:	b00d      	add	sp, #52	@ 0x34
 8019a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a1a:	2500      	movs	r5, #0
 8019a1c:	462e      	mov	r6, r5
 8019a1e:	e799      	b.n	8019954 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a24:	b0db      	sub	sp, #364	@ 0x16c
 8019a26:	461d      	mov	r5, r3
 8019a28:	4614      	mov	r4, r2
 8019a2a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8019a2e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019a30:	4629      	mov	r1, r5
 8019a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8019a34:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8019a38:	9009      	str	r0, [sp, #36]	@ 0x24
 8019a3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019a3c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8019a40:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8019a44:	9310      	str	r3, [sp, #64]	@ 0x40
 8019a46:	6803      	ldr	r3, [r0, #0]
 8019a48:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8019a4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8019a4e:	47b8      	blx	r7
 8019a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a52:	6058      	str	r0, [r3, #4]
 8019a54:	2800      	cmp	r0, #0
 8019a56:	f000 83a1 	beq.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a5a:	682b      	ldr	r3, [r5, #0]
 8019a5c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019a60:	ed94 7a02 	vldr	s14, [r4, #8]
 8019a64:	9314      	str	r3, [sp, #80]	@ 0x50
 8019a66:	686b      	ldr	r3, [r5, #4]
 8019a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8019a6e:	4bc1      	ldr	r3, [pc, #772]	@ (8019d74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019a70:	7819      	ldrb	r1, [r3, #0]
 8019a72:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019a76:	2900      	cmp	r1, #0
 8019a78:	bf16      	itet	ne
 8019a7a:	4619      	movne	r1, r3
 8019a7c:	4611      	moveq	r1, r2
 8019a7e:	4613      	movne	r3, r2
 8019a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a84:	9116      	str	r1, [sp, #88]	@ 0x58
 8019a86:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8019a8a:	f240 8387 	bls.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a8e:	ed94 7a07 	vldr	s14, [r4, #28]
 8019a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a9a:	f240 837f 	bls.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a9e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8019aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aaa:	f240 8377 	bls.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019aae:	6822      	ldr	r2, [r4, #0]
 8019ab0:	4bb1      	ldr	r3, [pc, #708]	@ (8019d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019ab2:	429a      	cmp	r2, r3
 8019ab4:	f2c0 8372 	blt.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ab8:	49b0      	ldr	r1, [pc, #704]	@ (8019d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019aba:	6963      	ldr	r3, [r4, #20]
 8019abc:	428a      	cmp	r2, r1
 8019abe:	f300 836d 	bgt.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ac2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8019ac6:	48ae      	ldr	r0, [pc, #696]	@ (8019d80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019ac8:	33ff      	adds	r3, #255	@ 0xff
 8019aca:	4283      	cmp	r3, r0
 8019acc:	f200 8366 	bhi.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ad0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019ad2:	4dac      	ldr	r5, [pc, #688]	@ (8019d84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019ad4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8019ad8:	33ff      	adds	r3, #255	@ 0xff
 8019ada:	42ab      	cmp	r3, r5
 8019adc:	f200 835e 	bhi.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ae0:	6862      	ldr	r2, [r4, #4]
 8019ae2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8019ae6:	33ff      	adds	r3, #255	@ 0xff
 8019ae8:	4283      	cmp	r3, r0
 8019aea:	f200 8357 	bhi.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019aee:	69a1      	ldr	r1, [r4, #24]
 8019af0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8019af4:	33ff      	adds	r3, #255	@ 0xff
 8019af6:	4283      	cmp	r3, r0
 8019af8:	f200 8350 	bhi.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019afc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019afe:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8019b02:	30ff      	adds	r0, #255	@ 0xff
 8019b04:	42a8      	cmp	r0, r5
 8019b06:	f200 8349 	bhi.w	801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b0a:	428a      	cmp	r2, r1
 8019b0c:	f280 8110 	bge.w	8019d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019b10:	429a      	cmp	r2, r3
 8019b12:	f300 8119 	bgt.w	8019d48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019b16:	4299      	cmp	r1, r3
 8019b18:	f280 811d 	bge.w	8019d56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019b1c:	2502      	movs	r5, #2
 8019b1e:	2701      	movs	r7, #1
 8019b20:	46a9      	mov	r9, r5
 8019b22:	46b8      	mov	r8, r7
 8019b24:	f04f 0a00 	mov.w	sl, #0
 8019b28:	4621      	mov	r1, r4
 8019b2a:	a849      	add	r0, sp, #292	@ 0x124
 8019b2c:	f004 f97a 	bl	801de24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019b30:	4622      	mov	r2, r4
 8019b32:	4653      	mov	r3, sl
 8019b34:	a949      	add	r1, sp, #292	@ 0x124
 8019b36:	f8cd 9000 	str.w	r9, [sp]
 8019b3a:	a819      	add	r0, sp, #100	@ 0x64
 8019b3c:	f004 faa2 	bl	801e084 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b40:	4622      	mov	r2, r4
 8019b42:	4653      	mov	r3, sl
 8019b44:	a949      	add	r1, sp, #292	@ 0x124
 8019b46:	f8cd 8000 	str.w	r8, [sp]
 8019b4a:	a829      	add	r0, sp, #164	@ 0xa4
 8019b4c:	f004 fa9a 	bl	801e084 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b50:	4643      	mov	r3, r8
 8019b52:	4622      	mov	r2, r4
 8019b54:	a949      	add	r1, sp, #292	@ 0x124
 8019b56:	f8cd 9000 	str.w	r9, [sp]
 8019b5a:	a839      	add	r0, sp, #228	@ 0xe4
 8019b5c:	f004 fa92 	bl	801e084 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b60:	42af      	cmp	r7, r5
 8019b62:	af12      	add	r7, sp, #72	@ 0x48
 8019b64:	bfb7      	itett	lt
 8019b66:	2300      	movlt	r3, #0
 8019b68:	2301      	movge	r3, #1
 8019b6a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8019b6c:	ac19      	addlt	r4, sp, #100	@ 0x64
 8019b6e:	bfb1      	iteee	lt
 8019b70:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8019b72:	ad19      	addge	r5, sp, #100	@ 0x64
 8019b74:	930e      	strge	r3, [sp, #56]	@ 0x38
 8019b76:	ac29      	addge	r4, sp, #164	@ 0xa4
 8019b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b7e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019b82:	b928      	cbnz	r0, 8019b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019b84:	4b80      	ldr	r3, [pc, #512]	@ (8019d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019b86:	6818      	ldr	r0, [r3, #0]
 8019b88:	6803      	ldr	r3, [r0, #0]
 8019b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b8c:	4798      	blx	r3
 8019b8e:	6038      	str	r0, [r7, #0]
 8019b90:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019b92:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019b96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019b9a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8019b9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019ba0:	6963      	ldr	r3, [r4, #20]
 8019ba2:	440b      	add	r3, r1
 8019ba4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019ba8:	4408      	add	r0, r1
 8019baa:	b200      	sxth	r0, r0
 8019bac:	4283      	cmp	r3, r0
 8019bae:	900d      	str	r0, [sp, #52]	@ 0x34
 8019bb0:	f280 80dd 	bge.w	8019d6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019bb4:	428b      	cmp	r3, r1
 8019bb6:	da08      	bge.n	8019bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019bb8:	2a00      	cmp	r2, #0
 8019bba:	dd06      	ble.n	8019bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019bbc:	1acb      	subs	r3, r1, r3
 8019bbe:	429a      	cmp	r2, r3
 8019bc0:	f2c0 80e4 	blt.w	8019d8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	f300 80e2 	bgt.w	8019d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019bca:	6967      	ldr	r7, [r4, #20]
 8019bcc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019bd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019bd2:	443b      	add	r3, r7
 8019bd4:	461f      	mov	r7, r3
 8019bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019bd8:	1bdf      	subs	r7, r3, r7
 8019bda:	4297      	cmp	r7, r2
 8019bdc:	bfa8      	it	ge
 8019bde:	4617      	movge	r7, r2
 8019be0:	2f00      	cmp	r7, #0
 8019be2:	f340 8166 	ble.w	8019eb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019be6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019be8:	6829      	ldr	r1, [r5, #0]
 8019bea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019bee:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019bf2:	4411      	add	r1, r2
 8019bf4:	6820      	ldr	r0, [r4, #0]
 8019bf6:	4299      	cmp	r1, r3
 8019bf8:	dd1a      	ble.n	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019bfa:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019bfe:	4402      	add	r2, r0
 8019c00:	440b      	add	r3, r1
 8019c02:	b21b      	sxth	r3, r3
 8019c04:	429a      	cmp	r2, r3
 8019c06:	dc13      	bgt.n	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019c08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019c0a:	a912      	add	r1, sp, #72	@ 0x48
 8019c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	9206      	str	r2, [sp, #24]
 8019c14:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019c16:	9500      	str	r5, [sp, #0]
 8019c18:	9205      	str	r2, [sp, #20]
 8019c1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c1c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019c20:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019c22:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019c26:	aa49      	add	r2, sp, #292	@ 0x124
 8019c28:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019c2c:	4623      	mov	r3, r4
 8019c2e:	47c8      	blx	r9
 8019c30:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019c34:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019c38:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c40:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019c44:	68a1      	ldr	r1, [r4, #8]
 8019c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c4a:	ed94 6a08 	vldr	s12, [r4, #32]
 8019c4e:	edd4 6a07 	vldr	s13, [r4, #28]
 8019c52:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019c56:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019c5a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019c5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019c62:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c66:	441a      	add	r2, r3
 8019c68:	6963      	ldr	r3, [r4, #20]
 8019c6a:	3301      	adds	r3, #1
 8019c6c:	6022      	str	r2, [r4, #0]
 8019c6e:	6163      	str	r3, [r4, #20]
 8019c70:	69a3      	ldr	r3, [r4, #24]
 8019c72:	3b01      	subs	r3, #1
 8019c74:	61a3      	str	r3, [r4, #24]
 8019c76:	6923      	ldr	r3, [r4, #16]
 8019c78:	440b      	add	r3, r1
 8019c7a:	68e1      	ldr	r1, [r4, #12]
 8019c7c:	428b      	cmp	r3, r1
 8019c7e:	6123      	str	r3, [r4, #16]
 8019c80:	db15      	blt.n	8019cae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019c82:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019c86:	3201      	adds	r2, #1
 8019c88:	1a5b      	subs	r3, r3, r1
 8019c8a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019c8e:	6022      	str	r2, [r4, #0]
 8019c90:	6123      	str	r3, [r4, #16]
 8019c92:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c96:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019c9a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c9e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019ca2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019caa:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019cae:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019cb2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019cb6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019cbe:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019cc2:	68a9      	ldr	r1, [r5, #8]
 8019cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019cc8:	ed95 6a08 	vldr	s12, [r5, #32]
 8019ccc:	edd5 6a07 	vldr	s13, [r5, #28]
 8019cd0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019cd4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019cd8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019cdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019ce0:	edc5 6a07 	vstr	s13, [r5, #28]
 8019ce4:	441a      	add	r2, r3
 8019ce6:	696b      	ldr	r3, [r5, #20]
 8019ce8:	3301      	adds	r3, #1
 8019cea:	602a      	str	r2, [r5, #0]
 8019cec:	616b      	str	r3, [r5, #20]
 8019cee:	69ab      	ldr	r3, [r5, #24]
 8019cf0:	3b01      	subs	r3, #1
 8019cf2:	61ab      	str	r3, [r5, #24]
 8019cf4:	692b      	ldr	r3, [r5, #16]
 8019cf6:	440b      	add	r3, r1
 8019cf8:	68e9      	ldr	r1, [r5, #12]
 8019cfa:	428b      	cmp	r3, r1
 8019cfc:	612b      	str	r3, [r5, #16]
 8019cfe:	db15      	blt.n	8019d2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019d00:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019d04:	3201      	adds	r2, #1
 8019d06:	1a5b      	subs	r3, r3, r1
 8019d08:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019d0c:	602a      	str	r2, [r5, #0]
 8019d0e:	612b      	str	r3, [r5, #16]
 8019d10:	edc5 6a07 	vstr	s13, [r5, #28]
 8019d14:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019d18:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019d1c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019d20:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d28:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019d2c:	3f01      	subs	r7, #1
 8019d2e:	e757      	b.n	8019be0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019d30:	4299      	cmp	r1, r3
 8019d32:	dc13      	bgt.n	8019d5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019d34:	429a      	cmp	r2, r3
 8019d36:	da14      	bge.n	8019d62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019d38:	2502      	movs	r5, #2
 8019d3a:	2703      	movs	r7, #3
 8019d3c:	f04f 0800 	mov.w	r8, #0
 8019d40:	46a9      	mov	r9, r5
 8019d42:	f04f 0a01 	mov.w	sl, #1
 8019d46:	e6ef      	b.n	8019b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019d48:	2501      	movs	r5, #1
 8019d4a:	2700      	movs	r7, #0
 8019d4c:	46a9      	mov	r9, r5
 8019d4e:	46b8      	mov	r8, r7
 8019d50:	f04f 0a02 	mov.w	sl, #2
 8019d54:	e6e8      	b.n	8019b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019d56:	2501      	movs	r5, #1
 8019d58:	2702      	movs	r7, #2
 8019d5a:	e6e1      	b.n	8019b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019d5c:	2500      	movs	r5, #0
 8019d5e:	2701      	movs	r7, #1
 8019d60:	e7f4      	b.n	8019d4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019d62:	2702      	movs	r7, #2
 8019d64:	2503      	movs	r5, #3
 8019d66:	f04f 0900 	mov.w	r9, #0
 8019d6a:	46b8      	mov	r8, r7
 8019d6c:	e7e9      	b.n	8019d42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019d6e:	4613      	mov	r3, r2
 8019d70:	e728      	b.n	8019bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019d72:	bf00      	nop
 8019d74:	24028768 	.word	0x24028768
 8019d78:	fffd8f01 	.word	0xfffd8f01
 8019d7c:	00027100 	.word	0x00027100
 8019d80:	0004e1ff 	.word	0x0004e1ff
 8019d84:	0004e1fe 	.word	0x0004e1fe
 8019d88:	24028770 	.word	0x24028770
 8019d8c:	4613      	mov	r3, r2
 8019d8e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8019d90:	469e      	mov	lr, r3
 8019d92:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8019d94:	469c      	mov	ip, r3
 8019d96:	9111      	str	r1, [sp, #68]	@ 0x44
 8019d98:	f04f 0900 	mov.w	r9, #0
 8019d9c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8019da0:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8019da4:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8019da8:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8019dac:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8019db0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019db4:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8019db8:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8019dbc:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8019dc0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8019dc4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8019dc8:	f1bc 0f00 	cmp.w	ip, #0
 8019dcc:	d147      	bne.n	8019e5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019dce:	eb03 0c07 	add.w	ip, r3, r7
 8019dd2:	1ad7      	subs	r7, r2, r3
 8019dd4:	f1b9 0f00 	cmp.w	r9, #0
 8019dd8:	d009      	beq.n	8019dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019dda:	9029      	str	r0, [sp, #164]	@ 0xa4
 8019ddc:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8019de0:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8019de4:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8019de8:	912d      	str	r1, [sp, #180]	@ 0xb4
 8019dea:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8019dee:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019df0:	f04f 0800 	mov.w	r8, #0
 8019df4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8019df8:	9111      	str	r1, [sp, #68]	@ 0x44
 8019dfa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8019dfe:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019e02:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019e06:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019e0a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8019e0e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019e12:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019e16:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019e1a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8019e1e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019e22:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019e26:	f1be 0f00 	cmp.w	lr, #0
 8019e2a:	d031      	beq.n	8019e90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019e2c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019e2e:	4450      	add	r0, sl
 8019e30:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019e34:	4431      	add	r1, r6
 8019e36:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019e3a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019e3e:	4549      	cmp	r1, r9
 8019e40:	db08      	blt.n	8019e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019e42:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019e46:	3001      	adds	r0, #1
 8019e48:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019e4c:	eba1 0109 	sub.w	r1, r1, r9
 8019e50:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019e54:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019e58:	f04f 0801 	mov.w	r8, #1
 8019e5c:	e7e3      	b.n	8019e26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019e5e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019e60:	4450      	add	r0, sl
 8019e62:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019e66:	4431      	add	r1, r6
 8019e68:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019e6c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019e70:	4541      	cmp	r1, r8
 8019e72:	db08      	blt.n	8019e86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019e74:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019e78:	3001      	adds	r0, #1
 8019e7a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019e7e:	eba1 0108 	sub.w	r1, r1, r8
 8019e82:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019e86:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019e8a:	f04f 0901 	mov.w	r9, #1
 8019e8e:	e79b      	b.n	8019dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019e90:	449c      	add	ip, r3
 8019e92:	1aff      	subs	r7, r7, r3
 8019e94:	f1b8 0f00 	cmp.w	r8, #0
 8019e98:	d009      	beq.n	8019eae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019e9a:	9019      	str	r0, [sp, #100]	@ 0x64
 8019e9c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8019ea0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8019ea4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8019ea8:	911d      	str	r1, [sp, #116]	@ 0x74
 8019eaa:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019eae:	1ad2      	subs	r2, r2, r3
 8019eb0:	e68b      	b.n	8019bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019eb4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	f000 80d1 	beq.w	801a05e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019ebc:	ad19      	add	r5, sp, #100	@ 0x64
 8019ebe:	ac39      	add	r4, sp, #228	@ 0xe4
 8019ec0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019ec2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019ec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019eca:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ecc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019ece:	6963      	ldr	r3, [r4, #20]
 8019ed0:	440b      	add	r3, r1
 8019ed2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019ed6:	4408      	add	r0, r1
 8019ed8:	b200      	sxth	r0, r0
 8019eda:	4283      	cmp	r3, r0
 8019edc:	900d      	str	r0, [sp, #52]	@ 0x34
 8019ede:	f280 80c1 	bge.w	801a064 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019ee2:	428b      	cmp	r3, r1
 8019ee4:	da08      	bge.n	8019ef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019ee6:	2a00      	cmp	r2, #0
 8019ee8:	dd06      	ble.n	8019ef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019eea:	1acb      	subs	r3, r1, r3
 8019eec:	429a      	cmp	r2, r3
 8019eee:	f2c0 80bb 	blt.w	801a068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	f300 80b9 	bgt.w	801a06a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019ef8:	6967      	ldr	r7, [r4, #20]
 8019efa:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019efe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019f00:	443b      	add	r3, r7
 8019f02:	461f      	mov	r7, r3
 8019f04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f06:	1bdf      	subs	r7, r3, r7
 8019f08:	4297      	cmp	r7, r2
 8019f0a:	bfa8      	it	ge
 8019f0c:	4617      	movge	r7, r2
 8019f0e:	2f00      	cmp	r7, #0
 8019f10:	f340 813c 	ble.w	801a18c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019f14:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019f16:	6829      	ldr	r1, [r5, #0]
 8019f18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f1c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019f20:	4411      	add	r1, r2
 8019f22:	6820      	ldr	r0, [r4, #0]
 8019f24:	4299      	cmp	r1, r3
 8019f26:	dd1a      	ble.n	8019f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019f28:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019f2c:	4402      	add	r2, r0
 8019f2e:	440b      	add	r3, r1
 8019f30:	b21b      	sxth	r3, r3
 8019f32:	429a      	cmp	r2, r3
 8019f34:	dc13      	bgt.n	8019f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019f36:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019f38:	a912      	add	r1, sp, #72	@ 0x48
 8019f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	9206      	str	r2, [sp, #24]
 8019f42:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019f44:	9500      	str	r5, [sp, #0]
 8019f46:	9205      	str	r2, [sp, #20]
 8019f48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019f4a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019f4e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019f50:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019f54:	aa49      	add	r2, sp, #292	@ 0x124
 8019f56:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019f5a:	4623      	mov	r3, r4
 8019f5c:	47c8      	blx	r9
 8019f5e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019f62:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019f66:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f6e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019f72:	68a1      	ldr	r1, [r4, #8]
 8019f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f78:	ed94 6a08 	vldr	s12, [r4, #32]
 8019f7c:	edd4 6a07 	vldr	s13, [r4, #28]
 8019f80:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019f84:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019f88:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019f8c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019f90:	edc4 6a07 	vstr	s13, [r4, #28]
 8019f94:	441a      	add	r2, r3
 8019f96:	6963      	ldr	r3, [r4, #20]
 8019f98:	3301      	adds	r3, #1
 8019f9a:	6022      	str	r2, [r4, #0]
 8019f9c:	6163      	str	r3, [r4, #20]
 8019f9e:	69a3      	ldr	r3, [r4, #24]
 8019fa0:	3b01      	subs	r3, #1
 8019fa2:	61a3      	str	r3, [r4, #24]
 8019fa4:	6923      	ldr	r3, [r4, #16]
 8019fa6:	440b      	add	r3, r1
 8019fa8:	68e1      	ldr	r1, [r4, #12]
 8019faa:	428b      	cmp	r3, r1
 8019fac:	6123      	str	r3, [r4, #16]
 8019fae:	db15      	blt.n	8019fdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019fb0:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019fb4:	3201      	adds	r2, #1
 8019fb6:	1a5b      	subs	r3, r3, r1
 8019fb8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019fbc:	6022      	str	r2, [r4, #0]
 8019fbe:	6123      	str	r3, [r4, #16]
 8019fc0:	edc4 6a07 	vstr	s13, [r4, #28]
 8019fc4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019fc8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019fcc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019fd0:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019fd8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019fdc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019fe0:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019fe4:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019fec:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019ff0:	68a9      	ldr	r1, [r5, #8]
 8019ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ff6:	ed95 6a08 	vldr	s12, [r5, #32]
 8019ffa:	edd5 6a07 	vldr	s13, [r5, #28]
 8019ffe:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a002:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a006:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a00a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a00e:	edc5 6a07 	vstr	s13, [r5, #28]
 801a012:	441a      	add	r2, r3
 801a014:	696b      	ldr	r3, [r5, #20]
 801a016:	3301      	adds	r3, #1
 801a018:	602a      	str	r2, [r5, #0]
 801a01a:	616b      	str	r3, [r5, #20]
 801a01c:	69ab      	ldr	r3, [r5, #24]
 801a01e:	3b01      	subs	r3, #1
 801a020:	61ab      	str	r3, [r5, #24]
 801a022:	692b      	ldr	r3, [r5, #16]
 801a024:	440b      	add	r3, r1
 801a026:	68e9      	ldr	r1, [r5, #12]
 801a028:	428b      	cmp	r3, r1
 801a02a:	612b      	str	r3, [r5, #16]
 801a02c:	db15      	blt.n	801a05a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a02e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801a032:	3201      	adds	r2, #1
 801a034:	1a5b      	subs	r3, r3, r1
 801a036:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a03a:	602a      	str	r2, [r5, #0]
 801a03c:	612b      	str	r3, [r5, #16]
 801a03e:	edc5 6a07 	vstr	s13, [r5, #28]
 801a042:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801a046:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a04a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a04e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801a052:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a056:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a05a:	3f01      	subs	r7, #1
 801a05c:	e757      	b.n	8019f0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a05e:	ad39      	add	r5, sp, #228	@ 0xe4
 801a060:	ac19      	add	r4, sp, #100	@ 0x64
 801a062:	e72d      	b.n	8019ec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a064:	4613      	mov	r3, r2
 801a066:	e744      	b.n	8019ef2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a068:	4613      	mov	r3, r2
 801a06a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801a06c:	469e      	mov	lr, r3
 801a06e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801a072:	461f      	mov	r7, r3
 801a074:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801a078:	f04f 0900 	mov.w	r9, #0
 801a07c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801a080:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801a084:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801a088:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801a08c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801a090:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801a092:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801a096:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801a09a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801a09e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801a0a2:	960e      	str	r6, [sp, #56]	@ 0x38
 801a0a4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801a0a8:	2f00      	cmp	r7, #0
 801a0aa:	d146      	bne.n	801a13a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a0ac:	449c      	add	ip, r3
 801a0ae:	1ad7      	subs	r7, r2, r3
 801a0b0:	f1b9 0f00 	cmp.w	r9, #0
 801a0b4:	d009      	beq.n	801a0ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a0b6:	9039      	str	r0, [sp, #228]	@ 0xe4
 801a0b8:	913d      	str	r1, [sp, #244]	@ 0xf4
 801a0ba:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801a0be:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801a0c2:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801a0c6:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801a0ca:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801a0cc:	f04f 0800 	mov.w	r8, #0
 801a0d0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801a0d4:	910e      	str	r1, [sp, #56]	@ 0x38
 801a0d6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801a0da:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801a0de:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801a0e2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801a0e6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801a0ea:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801a0ee:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801a0f2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801a0f6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801a0fa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801a0fe:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801a102:	f1be 0f00 	cmp.w	lr, #0
 801a106:	d030      	beq.n	801a16a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a108:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a10a:	4450      	add	r0, sl
 801a10c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a110:	4431      	add	r1, r6
 801a112:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a116:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a11a:	4549      	cmp	r1, r9
 801a11c:	db08      	blt.n	801a130 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a11e:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a122:	3001      	adds	r0, #1
 801a124:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a128:	eba1 0109 	sub.w	r1, r1, r9
 801a12c:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a130:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a134:	f04f 0801 	mov.w	r8, #1
 801a138:	e7e3      	b.n	801a102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a13a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a13c:	4450      	add	r0, sl
 801a13e:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a142:	4431      	add	r1, r6
 801a144:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a148:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a14c:	4541      	cmp	r1, r8
 801a14e:	db08      	blt.n	801a162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a150:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a154:	3001      	adds	r0, #1
 801a156:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a15a:	eba1 0108 	sub.w	r1, r1, r8
 801a15e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a162:	3f01      	subs	r7, #1
 801a164:	f04f 0901 	mov.w	r9, #1
 801a168:	e79e      	b.n	801a0a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a16a:	449c      	add	ip, r3
 801a16c:	1aff      	subs	r7, r7, r3
 801a16e:	f1b8 0f00 	cmp.w	r8, #0
 801a172:	d009      	beq.n	801a188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a174:	9019      	str	r0, [sp, #100]	@ 0x64
 801a176:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801a17a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801a17e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801a182:	911d      	str	r1, [sp, #116]	@ 0x74
 801a184:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801a188:	1ad2      	subs	r2, r2, r3
 801a18a:	e6b5      	b.n	8019ef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	b923      	cbnz	r3, 801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a192:	4b04      	ldr	r3, [pc, #16]	@ (801a1a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a194:	6818      	ldr	r0, [r3, #0]
 801a196:	6803      	ldr	r3, [r0, #0]
 801a198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a19a:	4798      	blx	r3
 801a19c:	b05b      	add	sp, #364	@ 0x16c
 801a19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1a2:	bf00      	nop
 801a1a4:	24028770 	.word	0x24028770

0801a1a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801a1a8:	b570      	push	{r4, r5, r6, lr}
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	2500      	movs	r5, #0
 801a1ae:	9805      	ldr	r0, [sp, #20]
 801a1b0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801a1b4:	6061      	str	r1, [r4, #4]
 801a1b6:	8263      	strh	r3, [r4, #18]
 801a1b8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801a1bc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a1c0:	8025      	strh	r5, [r4, #0]
 801a1c2:	7221      	strb	r1, [r4, #8]
 801a1c4:	7266      	strb	r6, [r4, #9]
 801a1c6:	60e0      	str	r0, [r4, #12]
 801a1c8:	8222      	strh	r2, [r4, #16]
 801a1ca:	82a3      	strh	r3, [r4, #20]
 801a1cc:	82e5      	strh	r5, [r4, #22]
 801a1ce:	8325      	strh	r5, [r4, #24]
 801a1d0:	8365      	strh	r5, [r4, #26]
 801a1d2:	83a5      	strh	r5, [r4, #28]
 801a1d4:	83e5      	strh	r5, [r4, #30]
 801a1d6:	8425      	strh	r5, [r4, #32]
 801a1d8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 801a1dc:	b32e      	cbz	r6, 801a22a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a1de:	6803      	ldr	r3, [r0, #0]
 801a1e0:	695b      	ldr	r3, [r3, #20]
 801a1e2:	4798      	blx	r3
 801a1e4:	4606      	mov	r6, r0
 801a1e6:	b300      	cbz	r0, 801a22a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a1e8:	68e0      	ldr	r0, [r4, #12]
 801a1ea:	4631      	mov	r1, r6
 801a1ec:	6803      	ldr	r3, [r0, #0]
 801a1ee:	68db      	ldr	r3, [r3, #12]
 801a1f0:	4798      	blx	r3
 801a1f2:	4605      	mov	r5, r0
 801a1f4:	b1c8      	cbz	r0, 801a22a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a1f6:	7b43      	ldrb	r3, [r0, #13]
 801a1f8:	7a82      	ldrb	r2, [r0, #10]
 801a1fa:	005b      	lsls	r3, r3, #1
 801a1fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a200:	4313      	orrs	r3, r2
 801a202:	8423      	strh	r3, [r4, #32]
 801a204:	7a63      	ldrb	r3, [r4, #9]
 801a206:	2b06      	cmp	r3, #6
 801a208:	d10f      	bne.n	801a22a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a20a:	68e0      	ldr	r0, [r4, #12]
 801a20c:	462a      	mov	r2, r5
 801a20e:	4631      	mov	r1, r6
 801a210:	6803      	ldr	r3, [r0, #0]
 801a212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a214:	4798      	blx	r3
 801a216:	7b6b      	ldrb	r3, [r5, #13]
 801a218:	005b      	lsls	r3, r3, #1
 801a21a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a21e:	7aab      	ldrb	r3, [r5, #10]
 801a220:	4313      	orrs	r3, r2
 801a222:	4418      	add	r0, r3
 801a224:	8c23      	ldrh	r3, [r4, #32]
 801a226:	4418      	add	r0, r3
 801a228:	8420      	strh	r0, [r4, #32]
 801a22a:	4620      	mov	r0, r4
 801a22c:	bd70      	pop	{r4, r5, r6, pc}

0801a22e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a232:	2400      	movs	r4, #0
 801a234:	b085      	sub	sp, #20
 801a236:	4681      	mov	r9, r0
 801a238:	4688      	mov	r8, r1
 801a23a:	4692      	mov	sl, r2
 801a23c:	469b      	mov	fp, r3
 801a23e:	4627      	mov	r7, r4
 801a240:	4625      	mov	r5, r4
 801a242:	4626      	mov	r6, r4
 801a244:	4554      	cmp	r4, sl
 801a246:	da2a      	bge.n	801a29e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a248:	2300      	movs	r3, #0
 801a24a:	9303      	str	r3, [sp, #12]
 801a24c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a250:	429d      	cmp	r5, r3
 801a252:	d004      	beq.n	801a25e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a254:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a258:	429d      	cmp	r5, r3
 801a25a:	bf18      	it	ne
 801a25c:	462f      	movne	r7, r5
 801a25e:	ab03      	add	r3, sp, #12
 801a260:	4642      	mov	r2, r8
 801a262:	4659      	mov	r1, fp
 801a264:	4648      	mov	r0, r9
 801a266:	f003 fbf3 	bl	801da50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a26a:	4605      	mov	r5, r0
 801a26c:	b1b8      	cbz	r0, 801a29e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a26e:	280a      	cmp	r0, #10
 801a270:	d015      	beq.n	801a29e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a272:	9a03      	ldr	r2, [sp, #12]
 801a274:	b18a      	cbz	r2, 801a29a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a276:	7b50      	ldrb	r0, [r2, #13]
 801a278:	4639      	mov	r1, r7
 801a27a:	7a93      	ldrb	r3, [r2, #10]
 801a27c:	0040      	lsls	r0, r0, #1
 801a27e:	8895      	ldrh	r5, [r2, #4]
 801a280:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a284:	4303      	orrs	r3, r0
 801a286:	4640      	mov	r0, r8
 801a288:	9301      	str	r3, [sp, #4]
 801a28a:	f8d8 3000 	ldr.w	r3, [r8]
 801a28e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a290:	4798      	blx	r3
 801a292:	9b01      	ldr	r3, [sp, #4]
 801a294:	4418      	add	r0, r3
 801a296:	4406      	add	r6, r0
 801a298:	b2b6      	uxth	r6, r6
 801a29a:	3401      	adds	r4, #1
 801a29c:	e7d2      	b.n	801a244 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a29e:	4630      	mov	r0, r6
 801a2a0:	b005      	add	sp, #20
 801a2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a2a6:	2a02      	cmp	r2, #2
 801a2a8:	b530      	push	{r4, r5, lr}
 801a2aa:	d011      	beq.n	801a2d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a2ac:	2a03      	cmp	r2, #3
 801a2ae:	d01c      	beq.n	801a2ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a2b0:	2a01      	cmp	r2, #1
 801a2b2:	d10c      	bne.n	801a2ce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a2b4:	888b      	ldrh	r3, [r1, #4]
 801a2b6:	8801      	ldrh	r1, [r0, #0]
 801a2b8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a2bc:	1a5b      	subs	r3, r3, r1
 801a2be:	8844      	ldrh	r4, [r0, #2]
 801a2c0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a2c4:	1a9b      	subs	r3, r3, r2
 801a2c6:	8004      	strh	r4, [r0, #0]
 801a2c8:	8081      	strh	r1, [r0, #4]
 801a2ca:	8043      	strh	r3, [r0, #2]
 801a2cc:	80c2      	strh	r2, [r0, #6]
 801a2ce:	bd30      	pop	{r4, r5, pc}
 801a2d0:	88cb      	ldrh	r3, [r1, #6]
 801a2d2:	8842      	ldrh	r2, [r0, #2]
 801a2d4:	1a9b      	subs	r3, r3, r2
 801a2d6:	88c2      	ldrh	r2, [r0, #6]
 801a2d8:	1a9b      	subs	r3, r3, r2
 801a2da:	888a      	ldrh	r2, [r1, #4]
 801a2dc:	8801      	ldrh	r1, [r0, #0]
 801a2de:	8043      	strh	r3, [r0, #2]
 801a2e0:	1a52      	subs	r2, r2, r1
 801a2e2:	8881      	ldrh	r1, [r0, #4]
 801a2e4:	1a52      	subs	r2, r2, r1
 801a2e6:	8002      	strh	r2, [r0, #0]
 801a2e8:	e7f1      	b.n	801a2ce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a2ea:	88cb      	ldrh	r3, [r1, #6]
 801a2ec:	8841      	ldrh	r1, [r0, #2]
 801a2ee:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a2f2:	1a5b      	subs	r3, r3, r1
 801a2f4:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a2f8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a2fc:	1a9b      	subs	r3, r3, r2
 801a2fe:	8045      	strh	r5, [r0, #2]
 801a300:	8082      	strh	r2, [r0, #4]
 801a302:	8003      	strh	r3, [r0, #0]
 801a304:	80c4      	strh	r4, [r0, #6]
 801a306:	e7e2      	b.n	801a2ce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30c:	b09f      	sub	sp, #124	@ 0x7c
 801a30e:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a310:	9312      	str	r3, [sp, #72]	@ 0x48
 801a312:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a314:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a316:	8812      	ldrh	r2, [r2, #0]
 801a318:	889b      	ldrh	r3, [r3, #4]
 801a31a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801a31c:	4413      	add	r3, r2
 801a31e:	900e      	str	r0, [sp, #56]	@ 0x38
 801a320:	6828      	ldr	r0, [r5, #0]
 801a322:	b21b      	sxth	r3, r3
 801a324:	9117      	str	r1, [sp, #92]	@ 0x5c
 801a326:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801a32a:	9311      	str	r3, [sp, #68]	@ 0x44
 801a32c:	6803      	ldr	r3, [r0, #0]
 801a32e:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 801a332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a334:	4798      	blx	r3
 801a336:	682b      	ldr	r3, [r5, #0]
 801a338:	9013      	str	r0, [sp, #76]	@ 0x4c
 801a33a:	7b1a      	ldrb	r2, [r3, #12]
 801a33c:	7adb      	ldrb	r3, [r3, #11]
 801a33e:	9215      	str	r2, [sp, #84]	@ 0x54
 801a340:	9316      	str	r3, [sp, #88]	@ 0x58
 801a342:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801a346:	2c00      	cmp	r4, #0
 801a348:	d067      	beq.n	801a41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a34a:	7c2b      	ldrb	r3, [r5, #16]
 801a34c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801a34e:	2b06      	cmp	r3, #6
 801a350:	bf14      	ite	ne
 801a352:	2301      	movne	r3, #1
 801a354:	2302      	moveq	r3, #2
 801a356:	4413      	add	r3, r2
 801a358:	f04f 0900 	mov.w	r9, #0
 801a35c:	9310      	str	r3, [sp, #64]	@ 0x40
 801a35e:	464c      	mov	r4, r9
 801a360:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801a364:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 801a368:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a36a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a36c:	4293      	cmp	r3, r2
 801a36e:	f280 808b 	bge.w	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a372:	2300      	movs	r3, #0
 801a374:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 801a378:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 801a37c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a380:	429c      	cmp	r4, r3
 801a382:	d006      	beq.n	801a392 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 801a384:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a386:	f242 020b 	movw	r2, #8203	@ 0x200b
 801a38a:	4294      	cmp	r4, r2
 801a38c:	bf18      	it	ne
 801a38e:	4623      	movne	r3, r4
 801a390:	930c      	str	r3, [sp, #48]	@ 0x30
 801a392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a394:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801a396:	682a      	ldr	r2, [r5, #0]
 801a398:	428b      	cmp	r3, r1
 801a39a:	db40      	blt.n	801a41e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801a39c:	6813      	ldr	r3, [r2, #0]
 801a39e:	4610      	mov	r0, r2
 801a3a0:	695b      	ldr	r3, [r3, #20]
 801a3a2:	4798      	blx	r3
 801a3a4:	4604      	mov	r4, r0
 801a3a6:	6828      	ldr	r0, [r5, #0]
 801a3a8:	aa1d      	add	r2, sp, #116	@ 0x74
 801a3aa:	4621      	mov	r1, r4
 801a3ac:	6803      	ldr	r3, [r0, #0]
 801a3ae:	689f      	ldr	r7, [r3, #8]
 801a3b0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a3b4:	47b8      	blx	r7
 801a3b6:	901c      	str	r0, [sp, #112]	@ 0x70
 801a3b8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a3bc:	429c      	cmp	r4, r3
 801a3be:	f000 80eb 	beq.w	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a3c2:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a3c6:	429c      	cmp	r4, r3
 801a3c8:	f000 80e6 	beq.w	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a3cc:	2c00      	cmp	r4, #0
 801a3ce:	f000 810d 	beq.w	801a5ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a3d2:	2c0a      	cmp	r4, #10
 801a3d4:	d05e      	beq.n	801a494 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a3d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a3d8:	b36a      	cbz	r2, 801a436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801a3da:	8894      	ldrh	r4, [r2, #4]
 801a3dc:	f1bb 0f00 	cmp.w	fp, #0
 801a3e0:	d03a      	beq.n	801a458 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a3e2:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a3e6:	f1bb 0f01 	cmp.w	fp, #1
 801a3ea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a3ee:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801a3f2:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a3f6:	ea49 0903 	orr.w	r9, r9, r3
 801a3fa:	d133      	bne.n	801a464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 801a3fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a3fe:	eba6 0609 	sub.w	r6, r6, r9
 801a402:	2b00      	cmp	r3, #0
 801a404:	d14d      	bne.n	801a4a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a406:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a408:	eb09 0306 	add.w	r3, r9, r6
 801a40c:	4413      	add	r3, r2
 801a40e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a410:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a414:	4293      	cmp	r3, r2
 801a416:	da4e      	bge.n	801a4b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a418:	e036      	b.n	801a488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a41a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a41c:	e79c      	b.n	801a358 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801a41e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a422:	4659      	mov	r1, fp
 801a424:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a426:	9301      	str	r3, [sp, #4]
 801a428:	ab1d      	add	r3, sp, #116	@ 0x74
 801a42a:	9300      	str	r3, [sp, #0]
 801a42c:	ab1c      	add	r3, sp, #112	@ 0x70
 801a42e:	f003 fb58 	bl	801dae2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a432:	4604      	mov	r4, r0
 801a434:	e7c0      	b.n	801a3b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801a436:	6828      	ldr	r0, [r5, #0]
 801a438:	6803      	ldr	r3, [r0, #0]
 801a43a:	691b      	ldr	r3, [r3, #16]
 801a43c:	4798      	blx	r3
 801a43e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a442:	4298      	cmp	r0, r3
 801a444:	f000 80a8 	beq.w	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a448:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a44c:	4298      	cmp	r0, r3
 801a44e:	f000 80a3 	beq.w	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a452:	f1bb 0f00 	cmp.w	fp, #0
 801a456:	d100      	bne.n	801a45a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801a458:	444e      	add	r6, r9
 801a45a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a45c:	2a00      	cmp	r2, #0
 801a45e:	d1c0      	bne.n	801a3e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801a460:	4691      	mov	r9, r2
 801a462:	e099      	b.n	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a466:	2b00      	cmp	r3, #0
 801a468:	f000 80c2 	beq.w	801a5f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 801a46c:	f1bb 0f00 	cmp.w	fp, #0
 801a470:	d117      	bne.n	801a4a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a472:	6828      	ldr	r0, [r5, #0]
 801a474:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a476:	6803      	ldr	r3, [r0, #0]
 801a478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a47a:	4798      	blx	r3
 801a47c:	4406      	add	r6, r0
 801a47e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a480:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a482:	1af3      	subs	r3, r6, r3
 801a484:	4293      	cmp	r3, r2
 801a486:	dd16      	ble.n	801a4b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a488:	2c00      	cmp	r4, #0
 801a48a:	f000 80af 	beq.w	801a5ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a48e:	2c0a      	cmp	r4, #10
 801a490:	f040 809d 	bne.w	801a5ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 801a494:	240a      	movs	r4, #10
 801a496:	fab4 f084 	clz	r0, r4
 801a49a:	0940      	lsrs	r0, r0, #5
 801a49c:	b01f      	add	sp, #124	@ 0x7c
 801a49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4a2:	6828      	ldr	r0, [r5, #0]
 801a4a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a4a6:	6803      	ldr	r3, [r0, #0]
 801a4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a4aa:	4798      	blx	r3
 801a4ac:	f1bb 0f01 	cmp.w	fp, #1
 801a4b0:	eba6 0600 	sub.w	r6, r6, r0
 801a4b4:	d0a7      	beq.n	801a406 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801a4b6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801a4b8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a4ba:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a4be:	f9b3 8000 	ldrsh.w	r8, [r3]
 801a4c2:	7b43      	ldrb	r3, [r0, #13]
 801a4c4:	4431      	add	r1, r6
 801a4c6:	015b      	lsls	r3, r3, #5
 801a4c8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a4cc:	7983      	ldrb	r3, [r0, #6]
 801a4ce:	4313      	orrs	r3, r2
 801a4d0:	440b      	add	r3, r1
 801a4d2:	4543      	cmp	r3, r8
 801a4d4:	db60      	blt.n	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a4d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a4d8:	4299      	cmp	r1, r3
 801a4da:	da5d      	bge.n	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a4dc:	6828      	ldr	r0, [r5, #0]
 801a4de:	45b0      	cmp	r8, r6
 801a4e0:	6803      	ldr	r3, [r0, #0]
 801a4e2:	bfcc      	ite	gt
 801a4e4:	eba8 0806 	subgt.w	r8, r8, r6
 801a4e8:	f04f 0800 	movle.w	r8, #0
 801a4ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a4ee:	bfc8      	it	gt
 801a4f0:	fa1f f888 	uxthgt.w	r8, r8
 801a4f4:	4798      	blx	r3
 801a4f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a4f8:	7b53      	ldrb	r3, [r2, #13]
 801a4fa:	00d9      	lsls	r1, r3, #3
 801a4fc:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801a500:	7a11      	ldrb	r1, [r2, #8]
 801a502:	4339      	orrs	r1, r7
 801a504:	065f      	lsls	r7, r3, #25
 801a506:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801a508:	bf48      	it	mi
 801a50a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801a50e:	4407      	add	r7, r0
 801a510:	bf48      	it	mi
 801a512:	b209      	sxthmi	r1, r1
 801a514:	1a7f      	subs	r7, r7, r1
 801a516:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801a518:	b2bf      	uxth	r7, r7
 801a51a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a51e:	fa0f fa87 	sxth.w	sl, r7
 801a522:	4551      	cmp	r1, sl
 801a524:	dd3c      	ble.n	801a5a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a526:	011b      	lsls	r3, r3, #4
 801a528:	79d0      	ldrb	r0, [r2, #7]
 801a52a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a52e:	4303      	orrs	r3, r0
 801a530:	449a      	add	sl, r3
 801a532:	4551      	cmp	r1, sl
 801a534:	dc30      	bgt.n	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a536:	1bcf      	subs	r7, r1, r7
 801a538:	468a      	mov	sl, r1
 801a53a:	b23f      	sxth	r7, r7
 801a53c:	9219      	str	r2, [sp, #100]	@ 0x64
 801a53e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a540:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a542:	6828      	ldr	r0, [r5, #0]
 801a544:	2a00      	cmp	r2, #0
 801a546:	d12d      	bne.n	801a5a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801a548:	9318      	str	r3, [sp, #96]	@ 0x60
 801a54a:	b2bf      	uxth	r7, r7
 801a54c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a54e:	6819      	ldr	r1, [r3, #0]
 801a550:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 801a552:	6801      	ldr	r1, [r0, #0]
 801a554:	9314      	str	r3, [sp, #80]	@ 0x50
 801a556:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801a558:	4788      	blx	r1
 801a55a:	79a9      	ldrb	r1, [r5, #6]
 801a55c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a55e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a560:	7ba9      	ldrb	r1, [r5, #14]
 801a562:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a564:	910a      	str	r1, [sp, #40]	@ 0x28
 801a566:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801a56a:	9109      	str	r1, [sp, #36]	@ 0x24
 801a56c:	68a9      	ldr	r1, [r5, #8]
 801a56e:	9306      	str	r3, [sp, #24]
 801a570:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a572:	9205      	str	r2, [sp, #20]
 801a574:	9304      	str	r3, [sp, #16]
 801a576:	f8cd a004 	str.w	sl, [sp, #4]
 801a57a:	e9cd 8702 	strd	r8, r7, [sp, #8]
 801a57e:	44b0      	add	r8, r6
 801a580:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801a582:	fa0f f388 	sxth.w	r3, r8
 801a586:	9300      	str	r3, [sp, #0]
 801a588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a58a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a58e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a590:	681a      	ldr	r2, [r3, #0]
 801a592:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a594:	685b      	ldr	r3, [r3, #4]
 801a596:	47b8      	blx	r7
 801a598:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a59a:	3301      	adds	r3, #1
 801a59c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a59e:	e6e3      	b.n	801a368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 801a5a0:	2700      	movs	r7, #0
 801a5a2:	e7cb      	b.n	801a53c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801a5a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a5a6:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801a5aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a5ac:	f8dc 1000 	ldr.w	r1, [ip]
 801a5b0:	e9cd 6204 	strd	r6, r2, [sp, #16]
 801a5b4:	79aa      	ldrb	r2, [r5, #6]
 801a5b6:	9203      	str	r2, [sp, #12]
 801a5b8:	7baa      	ldrb	r2, [r5, #14]
 801a5ba:	9202      	str	r2, [sp, #8]
 801a5bc:	68aa      	ldr	r2, [r5, #8]
 801a5be:	e9cd 0200 	strd	r0, r2, [sp]
 801a5c2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a5c4:	4660      	mov	r0, ip
 801a5c6:	688f      	ldr	r7, [r1, #8]
 801a5c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a5ca:	47b8      	blx	r7
 801a5cc:	e7e4      	b.n	801a598 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a5ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a5d0:	3501      	adds	r5, #1
 801a5d2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a5d4:	429d      	cmp	r5, r3
 801a5d6:	f6bf af5e 	bge.w	801a496 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a5da:	4659      	mov	r1, fp
 801a5dc:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a5de:	f7ee fd0b 	bl	8008ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a5e2:	4604      	mov	r4, r0
 801a5e4:	b110      	cbz	r0, 801a5ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a5e6:	280a      	cmp	r0, #10
 801a5e8:	d1f2      	bne.n	801a5d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 801a5ea:	e753      	b.n	801a494 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a5ec:	2400      	movs	r4, #0
 801a5ee:	e752      	b.n	801a496 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a5f0:	f1bb 0f00 	cmp.w	fp, #0
 801a5f4:	f43f af43 	beq.w	801a47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a5f8:	e75d      	b.n	801a4b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801a5fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a5fa:	b530      	push	{r4, r5, lr}
 801a5fc:	8ac4      	ldrh	r4, [r0, #22]
 801a5fe:	8b45      	ldrh	r5, [r0, #26]
 801a600:	8343      	strh	r3, [r0, #26]
 801a602:	442c      	add	r4, r5
 801a604:	1ae4      	subs	r4, r4, r3
 801a606:	8b83      	ldrh	r3, [r0, #28]
 801a608:	82c4      	strh	r4, [r0, #22]
 801a60a:	8b04      	ldrh	r4, [r0, #24]
 801a60c:	4422      	add	r2, r4
 801a60e:	440c      	add	r4, r1
 801a610:	1a59      	subs	r1, r3, r1
 801a612:	83c2      	strh	r2, [r0, #30]
 801a614:	8304      	strh	r4, [r0, #24]
 801a616:	8381      	strh	r1, [r0, #28]
 801a618:	bd30      	pop	{r4, r5, pc}

0801a61a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801a61a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a61e:	4604      	mov	r4, r0
 801a620:	8a47      	ldrh	r7, [r0, #18]
 801a622:	68c0      	ldr	r0, [r0, #12]
 801a624:	b085      	sub	sp, #20
 801a626:	6803      	ldr	r3, [r0, #0]
 801a628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a62a:	4798      	blx	r3
 801a62c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801a630:	7a63      	ldrb	r3, [r4, #9]
 801a632:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801a636:	3b01      	subs	r3, #1
 801a638:	42b7      	cmp	r7, r6
 801a63a:	bfac      	ite	ge
 801a63c:	f04f 0900 	movge.w	r9, #0
 801a640:	f04f 0901 	movlt.w	r9, #1
 801a644:	2b05      	cmp	r3, #5
 801a646:	d804      	bhi.n	801a652 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801a648:	e8df f003 	tbb	[pc, r3]
 801a64c:	470f0854 	.word	0x470f0854
 801a650:	4c4c      	.short	0x4c4c
 801a652:	2500      	movs	r5, #0
 801a654:	46a9      	mov	r9, r5
 801a656:	462e      	mov	r6, r5
 801a658:	462f      	mov	r7, r5
 801a65a:	e00e      	b.n	801a67a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a65c:	42b7      	cmp	r7, r6
 801a65e:	f04f 0500 	mov.w	r5, #0
 801a662:	bfb4      	ite	lt
 801a664:	2600      	movlt	r6, #0
 801a666:	2601      	movge	r6, #1
 801a668:	e7f6      	b.n	801a658 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a66a:	42b7      	cmp	r7, r6
 801a66c:	464d      	mov	r5, r9
 801a66e:	f04f 0900 	mov.w	r9, #0
 801a672:	bfb4      	ite	lt
 801a674:	2600      	movlt	r6, #0
 801a676:	2601      	movge	r6, #1
 801a678:	464f      	mov	r7, r9
 801a67a:	f04f 0800 	mov.w	r8, #0
 801a67e:	f8a4 8016 	strh.w	r8, [r4, #22]
 801a682:	f8a4 8018 	strh.w	r8, [r4, #24]
 801a686:	f8cd 8004 	str.w	r8, [sp, #4]
 801a68a:	2300      	movs	r3, #0
 801a68c:	9303      	str	r3, [sp, #12]
 801a68e:	8823      	ldrh	r3, [r4, #0]
 801a690:	2b20      	cmp	r3, #32
 801a692:	d033      	beq.n	801a6fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801a694:	f242 010b 	movw	r1, #8203	@ 0x200b
 801a698:	1a5a      	subs	r2, r3, r1
 801a69a:	f1d2 0a00 	rsbs	sl, r2, #0
 801a69e:	eb4a 0a02 	adc.w	sl, sl, r2
 801a6a2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801a6a6:	4293      	cmp	r3, r2
 801a6a8:	d008      	beq.n	801a6bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a6aa:	428b      	cmp	r3, r1
 801a6ac:	9a01      	ldr	r2, [sp, #4]
 801a6ae:	bf0e      	itee	eq
 801a6b0:	f04f 0a01 	moveq.w	sl, #1
 801a6b4:	461a      	movne	r2, r3
 801a6b6:	f04f 0a00 	movne.w	sl, #0
 801a6ba:	9201      	str	r2, [sp, #4]
 801a6bc:	ab03      	add	r3, sp, #12
 801a6be:	68e2      	ldr	r2, [r4, #12]
 801a6c0:	7a21      	ldrb	r1, [r4, #8]
 801a6c2:	6860      	ldr	r0, [r4, #4]
 801a6c4:	f003 f9c4 	bl	801da50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a6c8:	8020      	strh	r0, [r4, #0]
 801a6ca:	b9d8      	cbnz	r0, 801a704 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801a6cc:	8ba2      	ldrh	r2, [r4, #28]
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	4611      	mov	r1, r2
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	f7ff ff91 	bl	801a5fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a6d8:	e06e      	b.n	801a7b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a6da:	2500      	movs	r5, #0
 801a6dc:	2701      	movs	r7, #1
 801a6de:	46a9      	mov	r9, r5
 801a6e0:	462e      	mov	r6, r5
 801a6e2:	e7ca      	b.n	801a67a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a6e4:	42b7      	cmp	r7, r6
 801a6e6:	f04f 0500 	mov.w	r5, #0
 801a6ea:	bfb4      	ite	lt
 801a6ec:	2700      	movlt	r7, #0
 801a6ee:	2701      	movge	r7, #1
 801a6f0:	462e      	mov	r6, r5
 801a6f2:	e7c2      	b.n	801a67a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a6f4:	2500      	movs	r5, #0
 801a6f6:	2601      	movs	r6, #1
 801a6f8:	46a9      	mov	r9, r5
 801a6fa:	e7ad      	b.n	801a658 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a6fc:	9301      	str	r3, [sp, #4]
 801a6fe:	f04f 0a01 	mov.w	sl, #1
 801a702:	e7db      	b.n	801a6bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a704:	8b63      	ldrh	r3, [r4, #26]
 801a706:	280a      	cmp	r0, #10
 801a708:	f103 0301 	add.w	r3, r3, #1
 801a70c:	8363      	strh	r3, [r4, #26]
 801a70e:	d0dd      	beq.n	801a6cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801a710:	9a03      	ldr	r2, [sp, #12]
 801a712:	bb62      	cbnz	r2, 801a76e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801a714:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a718:	4298      	cmp	r0, r3
 801a71a:	d003      	beq.n	801a724 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a71c:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a720:	4298      	cmp	r0, r3
 801a722:	d1b2      	bne.n	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a724:	8823      	ldrh	r3, [r4, #0]
 801a726:	8ba1      	ldrh	r1, [r4, #28]
 801a728:	2b20      	cmp	r3, #32
 801a72a:	d003      	beq.n	801a734 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801a72c:	f242 000b 	movw	r0, #8203	@ 0x200b
 801a730:	4283      	cmp	r3, r0
 801a732:	d131      	bne.n	801a798 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801a734:	f1ba 0f00 	cmp.w	sl, #0
 801a738:	bf0a      	itet	eq
 801a73a:	4688      	moveq	r8, r1
 801a73c:	4650      	movne	r0, sl
 801a73e:	2001      	moveq	r0, #1
 801a740:	440a      	add	r2, r1
 801a742:	8b23      	ldrh	r3, [r4, #24]
 801a744:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a748:	b292      	uxth	r2, r2
 801a74a:	83a2      	strh	r2, [r4, #28]
 801a74c:	4413      	add	r3, r2
 801a74e:	f1b9 0f00 	cmp.w	r9, #0
 801a752:	d102      	bne.n	801a75a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801a754:	2d00      	cmp	r5, #0
 801a756:	d042      	beq.n	801a7de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801a758:	b300      	cbz	r0, 801a79c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801a75a:	8c21      	ldrh	r1, [r4, #32]
 801a75c:	4419      	add	r1, r3
 801a75e:	458c      	cmp	ip, r1
 801a760:	da37      	bge.n	801a7d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a762:	8ae1      	ldrh	r1, [r4, #22]
 801a764:	2900      	cmp	r1, #0
 801a766:	d034      	beq.n	801a7d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a768:	4563      	cmp	r3, ip
 801a76a:	dd8e      	ble.n	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a76c:	e01d      	b.n	801a7aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801a76e:	8893      	ldrh	r3, [r2, #4]
 801a770:	9901      	ldr	r1, [sp, #4]
 801a772:	8023      	strh	r3, [r4, #0]
 801a774:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801a778:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801a77c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 801a780:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801a784:	ea4b 0b00 	orr.w	fp, fp, r0
 801a788:	68e0      	ldr	r0, [r4, #12]
 801a78a:	6803      	ldr	r3, [r0, #0]
 801a78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a78e:	4798      	blx	r3
 801a790:	eb0b 0200 	add.w	r2, fp, r0
 801a794:	b292      	uxth	r2, r2
 801a796:	e7c5      	b.n	801a724 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a798:	2000      	movs	r0, #0
 801a79a:	e7d1      	b.n	801a740 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801a79c:	4563      	cmp	r3, ip
 801a79e:	f77f af74 	ble.w	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7a2:	8ae3      	ldrh	r3, [r4, #22]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	f43f af70 	beq.w	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7aa:	2301      	movs	r3, #1
 801a7ac:	8c22      	ldrh	r2, [r4, #32]
 801a7ae:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801a7b2:	8be3      	ldrh	r3, [r4, #30]
 801a7b4:	4413      	add	r3, r2
 801a7b6:	83e3      	strh	r3, [r4, #30]
 801a7b8:	68e0      	ldr	r0, [r4, #12]
 801a7ba:	6803      	ldr	r3, [r0, #0]
 801a7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a7be:	4798      	blx	r3
 801a7c0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801a7c4:	4418      	add	r0, r3
 801a7c6:	8a63      	ldrh	r3, [r4, #18]
 801a7c8:	1a18      	subs	r0, r3, r0
 801a7ca:	8260      	strh	r0, [r4, #18]
 801a7cc:	b005      	add	sp, #20
 801a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	4611      	mov	r1, r2
 801a7d6:	4620      	mov	r0, r4
 801a7d8:	f7ff ff0f 	bl	801a5fa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a7dc:	e755      	b.n	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7de:	4563      	cmp	r3, ip
 801a7e0:	dd14      	ble.n	801a80c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801a7e2:	b117      	cbz	r7, 801a7ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801a7e4:	2301      	movs	r3, #1
 801a7e6:	460a      	mov	r2, r1
 801a7e8:	e772      	b.n	801a6d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801a7ea:	2e00      	cmp	r6, #0
 801a7ec:	f43f af4d 	beq.w	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7f0:	2800      	cmp	r0, #0
 801a7f2:	f47f af4a 	bne.w	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a7f6:	f1ba 0f00 	cmp.w	sl, #0
 801a7fa:	d002      	beq.n	801a802 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801a7fc:	2301      	movs	r3, #1
 801a7fe:	4642      	mov	r2, r8
 801a800:	e767      	b.n	801a6d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801a802:	8ae3      	ldrh	r3, [r4, #22]
 801a804:	2b00      	cmp	r3, #0
 801a806:	f43f af40 	beq.w	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a80a:	e7d5      	b.n	801a7b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a80c:	2800      	cmp	r0, #0
 801a80e:	f47f af3c 	bne.w	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a812:	f1ba 0f00 	cmp.w	sl, #0
 801a816:	f43f af38 	beq.w	801a68a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a81a:	2301      	movs	r3, #1
 801a81c:	4642      	mov	r2, r8
 801a81e:	e7da      	b.n	801a7d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801a820 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a820:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a822:	4605      	mov	r5, r0
 801a824:	b08f      	sub	sp, #60	@ 0x3c
 801a826:	4617      	mov	r7, r2
 801a828:	461c      	mov	r4, r3
 801a82a:	460e      	mov	r6, r1
 801a82c:	b1d1      	cbz	r1, 801a864 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	4620      	mov	r0, r4
 801a832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a834:	4798      	blx	r3
 801a836:	4240      	negs	r0, r0
 801a838:	9603      	str	r6, [sp, #12]
 801a83a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a83e:	b200      	sxth	r0, r0
 801a840:	9700      	str	r7, [sp, #0]
 801a842:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a846:	4629      	mov	r1, r5
 801a848:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801a84c:	2401      	movs	r4, #1
 801a84e:	a805      	add	r0, sp, #20
 801a850:	f7ff fcaa 	bl	801a1a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a854:	a805      	add	r0, sp, #20
 801a856:	f7ff fee0 	bl	801a61a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a85a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a85e:	b163      	cbz	r3, 801a87a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801a860:	3401      	adds	r4, #1
 801a862:	e7f7      	b.n	801a854 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a864:	2401      	movs	r4, #1
 801a866:	f003 f9bf 	bl	801dbe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a86a:	280a      	cmp	r0, #10
 801a86c:	4628      	mov	r0, r5
 801a86e:	bf08      	it	eq
 801a870:	3401      	addeq	r4, #1
 801a872:	f003 f9b9 	bl	801dbe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a876:	2800      	cmp	r0, #0
 801a878:	d1f7      	bne.n	801a86a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a87a:	b2a0      	uxth	r0, r4
 801a87c:	b00f      	add	sp, #60	@ 0x3c
 801a87e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a884:	b0e3      	sub	sp, #396	@ 0x18c
 801a886:	461c      	mov	r4, r3
 801a888:	4683      	mov	fp, r0
 801a88a:	4688      	mov	r8, r1
 801a88c:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801a88e:	2b00      	cmp	r3, #0
 801a890:	f000 8112 	beq.w	801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a894:	6823      	ldr	r3, [r4, #0]
 801a896:	2b00      	cmp	r3, #0
 801a898:	f000 810e 	beq.w	801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a89c:	7ba3      	ldrb	r3, [r4, #14]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	f000 810a 	beq.w	801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a8a4:	ad0a      	add	r5, sp, #40	@ 0x28
 801a8a6:	6810      	ldr	r0, [r2, #0]
 801a8a8:	6851      	ldr	r1, [r2, #4]
 801a8aa:	462b      	mov	r3, r5
 801a8ac:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801a8b0:	c303      	stmia	r3!, {r0, r1}
 801a8b2:	2100      	movs	r1, #0
 801a8b4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a8b8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a8bc:	4628      	mov	r0, r5
 801a8be:	910c      	str	r1, [sp, #48]	@ 0x30
 801a8c0:	a90c      	add	r1, sp, #48	@ 0x30
 801a8c2:	79a2      	ldrb	r2, [r4, #6]
 801a8c4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a8c8:	f7ff fced 	bl	801a2a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a8cc:	a90c      	add	r1, sp, #48	@ 0x30
 801a8ce:	79a2      	ldrb	r2, [r4, #6]
 801a8d0:	4608      	mov	r0, r1
 801a8d2:	f7ff fce8 	bl	801a2a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a8d6:	a817      	add	r0, sp, #92	@ 0x5c
 801a8d8:	f002 fd59 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 801a8dc:	6820      	ldr	r0, [r4, #0]
 801a8de:	6803      	ldr	r3, [r0, #0]
 801a8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a8e2:	4798      	blx	r3
 801a8e4:	4606      	mov	r6, r0
 801a8e6:	6820      	ldr	r0, [r4, #0]
 801a8e8:	6803      	ldr	r3, [r0, #0]
 801a8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a8ec:	4798      	blx	r3
 801a8ee:	4633      	mov	r3, r6
 801a8f0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a8f2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a8f4:	9000      	str	r0, [sp, #0]
 801a8f6:	a817      	add	r0, sp, #92	@ 0x5c
 801a8f8:	f002 fda4 	bl	801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a8fc:	6820      	ldr	r0, [r4, #0]
 801a8fe:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a902:	6803      	ldr	r3, [r0, #0]
 801a904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a906:	4798      	blx	r3
 801a908:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a90c:	6823      	ldr	r3, [r4, #0]
 801a90e:	4607      	mov	r7, r0
 801a910:	4406      	add	r6, r0
 801a912:	a830      	add	r0, sp, #192	@ 0xc0
 801a914:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a918:	f002 fd39 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 801a91c:	7c23      	ldrb	r3, [r4, #16]
 801a91e:	b17b      	cbz	r3, 801a940 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a920:	6820      	ldr	r0, [r4, #0]
 801a922:	6803      	ldr	r3, [r0, #0]
 801a924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a926:	4798      	blx	r3
 801a928:	9009      	str	r0, [sp, #36]	@ 0x24
 801a92a:	6820      	ldr	r0, [r4, #0]
 801a92c:	6802      	ldr	r2, [r0, #0]
 801a92e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801a930:	4790      	blx	r2
 801a932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a934:	9000      	str	r0, [sp, #0]
 801a936:	a830      	add	r0, sp, #192	@ 0xc0
 801a938:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a93a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a93c:	f002 fd82 	bl	801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a940:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a944:	a80e      	add	r0, sp, #56	@ 0x38
 801a946:	7be2      	ldrb	r2, [r4, #15]
 801a948:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a94c:	1a8a      	subs	r2, r1, r2
 801a94e:	7c21      	ldrb	r1, [r4, #16]
 801a950:	9103      	str	r1, [sp, #12]
 801a952:	b292      	uxth	r2, r2
 801a954:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a958:	9102      	str	r1, [sp, #8]
 801a95a:	6821      	ldr	r1, [r4, #0]
 801a95c:	9101      	str	r1, [sp, #4]
 801a95e:	7961      	ldrb	r1, [r4, #5]
 801a960:	9100      	str	r1, [sp, #0]
 801a962:	a930      	add	r1, sp, #192	@ 0xc0
 801a964:	f7ff fc20 	bl	801a1a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a968:	2e00      	cmp	r6, #0
 801a96a:	dc5b      	bgt.n	801aa24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801a96c:	af17      	add	r7, sp, #92	@ 0x5c
 801a96e:	f04f 0900 	mov.w	r9, #0
 801a972:	7c23      	ldrb	r3, [r4, #16]
 801a974:	2b00      	cmp	r3, #0
 801a976:	f000 80b1 	beq.w	801aadc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a97a:	a80e      	add	r0, sp, #56	@ 0x38
 801a97c:	f7ff fe4d 	bl	801a61a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a980:	f1ba 0f00 	cmp.w	sl, #0
 801a984:	f000 80a5 	beq.w	801aad2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a988:	7c23      	ldrb	r3, [r4, #16]
 801a98a:	2264      	movs	r2, #100	@ 0x64
 801a98c:	4639      	mov	r1, r7
 801a98e:	a849      	add	r0, sp, #292	@ 0x124
 801a990:	9309      	str	r3, [sp, #36]	@ 0x24
 801a992:	f010 fe7c 	bl	802b68e <memcpy>
 801a996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a998:	2b00      	cmp	r3, #0
 801a99a:	f000 80a7 	beq.w	801aaec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a99e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801a9a2:	7922      	ldrb	r2, [r4, #4]
 801a9a4:	2a01      	cmp	r2, #1
 801a9a6:	f040 808a 	bne.w	801aabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a9aa:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801a9ae:	1ac0      	subs	r0, r0, r3
 801a9b0:	2302      	movs	r3, #2
 801a9b2:	fb90 f0f3 	sdiv	r0, r0, r3
 801a9b6:	b200      	sxth	r0, r0
 801a9b8:	7c23      	ldrb	r3, [r4, #16]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	f000 808b 	beq.w	801aad6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a9c0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801a9c4:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801a9c8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a9cc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a9d0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a9d4:	2100      	movs	r1, #0
 801a9d6:	4410      	add	r0, r2
 801a9d8:	4642      	mov	r2, r8
 801a9da:	b200      	sxth	r0, r0
 801a9dc:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801a9e0:	9000      	str	r0, [sp, #0]
 801a9e2:	4658      	mov	r0, fp
 801a9e4:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801a9e8:	f7ff fc8e 	bl	801a308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a9ec:	2800      	cmp	r0, #0
 801a9ee:	d163      	bne.n	801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a9f0:	b2b2      	uxth	r2, r6
 801a9f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a9f6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a9fa:	4413      	add	r3, r2
 801a9fc:	1a8a      	subs	r2, r1, r2
 801a9fe:	b21b      	sxth	r3, r3
 801aa00:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801aa04:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801aa08:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801aa0c:	2a00      	cmp	r2, #0
 801aa0e:	d153      	bne.n	801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801aa10:	6822      	ldr	r2, [r4, #0]
 801aa12:	8869      	ldrh	r1, [r5, #2]
 801aa14:	7a12      	ldrb	r2, [r2, #8]
 801aa16:	1a9b      	subs	r3, r3, r2
 801aa18:	88ea      	ldrh	r2, [r5, #6]
 801aa1a:	440a      	add	r2, r1
 801aa1c:	b212      	sxth	r2, r2
 801aa1e:	4293      	cmp	r3, r2
 801aa20:	dda7      	ble.n	801a972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801aa22:	e049      	b.n	801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801aa24:	7c23      	ldrb	r3, [r4, #16]
 801aa26:	444f      	add	r7, r9
 801aa28:	b1c3      	cbz	r3, 801aa5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801aa2a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801aa2e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801aa32:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801aa36:	443b      	add	r3, r7
 801aa38:	4293      	cmp	r3, r2
 801aa3a:	da97      	bge.n	801a96c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801aa3c:	a80e      	add	r0, sp, #56	@ 0x38
 801aa3e:	f7ff fdec 	bl	801a61a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801aa42:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801aa46:	3b01      	subs	r3, #1
 801aa48:	b29b      	uxth	r3, r3
 801aa4a:	454b      	cmp	r3, r9
 801aa4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa4e:	d021      	beq.n	801aa94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801aa50:	7961      	ldrb	r1, [r4, #5]
 801aa52:	a817      	add	r0, sp, #92	@ 0x5c
 801aa54:	f7ee fad0 	bl	8008ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aa58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa5a:	e7f4      	b.n	801aa46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801aa5c:	fa1f f986 	uxth.w	r9, r6
 801aa60:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801aa64:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801aa68:	443b      	add	r3, r7
 801aa6a:	4293      	cmp	r3, r2
 801aa6c:	f6bf af7e 	bge.w	801a96c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801aa70:	a817      	add	r0, sp, #92	@ 0x5c
 801aa72:	f003 f8b9 	bl	801dbe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aa76:	b1f8      	cbz	r0, 801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801aa78:	280a      	cmp	r0, #10
 801aa7a:	d1f1      	bne.n	801aa60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801aa7c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801aa80:	444b      	add	r3, r9
 801aa82:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801aa86:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801aa8a:	eba3 0309 	sub.w	r3, r3, r9
 801aa8e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801aa92:	e7e5      	b.n	801aa60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801aa94:	b2b3      	uxth	r3, r6
 801aa96:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801aa9a:	441a      	add	r2, r3
 801aa9c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801aaa0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801aaa4:	1ad3      	subs	r3, r2, r3
 801aaa6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801aaaa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801aaae:	b11b      	cbz	r3, 801aab8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801aab0:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d0ba      	beq.n	801aa2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801aab8:	b063      	add	sp, #396	@ 0x18c
 801aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabe:	2a02      	cmp	r2, #2
 801aac0:	d105      	bne.n	801aace <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801aac2:	7be2      	ldrb	r2, [r4, #15]
 801aac4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801aac8:	1a80      	subs	r0, r0, r2
 801aaca:	1ac0      	subs	r0, r0, r3
 801aacc:	e773      	b.n	801a9b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801aace:	2000      	movs	r0, #0
 801aad0:	e772      	b.n	801a9b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801aad2:	7be0      	ldrb	r0, [r4, #15]
 801aad4:	e770      	b.n	801a9b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801aad6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801aada:	e773      	b.n	801a9c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801aadc:	f1ba 0f00 	cmp.w	sl, #0
 801aae0:	d0f7      	beq.n	801aad2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801aae2:	2264      	movs	r2, #100	@ 0x64
 801aae4:	4639      	mov	r1, r7
 801aae6:	a849      	add	r0, sp, #292	@ 0x124
 801aae8:	f010 fdd1 	bl	802b68e <memcpy>
 801aaec:	2300      	movs	r3, #0
 801aaee:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801aaf2:	6821      	ldr	r1, [r4, #0]
 801aaf4:	a849      	add	r0, sp, #292	@ 0x124
 801aaf6:	f7ff fb9a 	bl	801a22e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801aafa:	b203      	sxth	r3, r0
 801aafc:	e751      	b.n	801a9a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801aafe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801aafe:	2b03      	cmp	r3, #3
 801ab00:	d818      	bhi.n	801ab34 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801ab02:	e8df f003 	tbb	[pc, r3]
 801ab06:	0602      	.short	0x0602
 801ab08:	130d      	.short	0x130d
 801ab0a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ab0e:	1850      	adds	r0, r2, r1
 801ab10:	4770      	bx	lr
 801ab12:	8803      	ldrh	r3, [r0, #0]
 801ab14:	8880      	ldrh	r0, [r0, #4]
 801ab16:	4418      	add	r0, r3
 801ab18:	b200      	sxth	r0, r0
 801ab1a:	1a80      	subs	r0, r0, r2
 801ab1c:	3801      	subs	r0, #1
 801ab1e:	4770      	bx	lr
 801ab20:	8803      	ldrh	r3, [r0, #0]
 801ab22:	8880      	ldrh	r0, [r0, #4]
 801ab24:	4418      	add	r0, r3
 801ab26:	b200      	sxth	r0, r0
 801ab28:	1a40      	subs	r0, r0, r1
 801ab2a:	e7f7      	b.n	801ab1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ab2c:	f9b0 0000 	ldrsh.w	r0, [r0]
 801ab30:	4410      	add	r0, r2
 801ab32:	4770      	bx	lr
 801ab34:	2000      	movs	r0, #0
 801ab36:	4770      	bx	lr

0801ab38 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ab38:	2b03      	cmp	r3, #3
 801ab3a:	d817      	bhi.n	801ab6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801ab3c:	e8df f003 	tbb	[pc, r3]
 801ab40:	10090602 	.word	0x10090602
 801ab44:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801ab48:	1850      	adds	r0, r2, r1
 801ab4a:	4770      	bx	lr
 801ab4c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ab50:	e7fa      	b.n	801ab48 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801ab52:	8843      	ldrh	r3, [r0, #2]
 801ab54:	88c0      	ldrh	r0, [r0, #6]
 801ab56:	4418      	add	r0, r3
 801ab58:	b200      	sxth	r0, r0
 801ab5a:	1a80      	subs	r0, r0, r2
 801ab5c:	3801      	subs	r0, #1
 801ab5e:	4770      	bx	lr
 801ab60:	8843      	ldrh	r3, [r0, #2]
 801ab62:	88c0      	ldrh	r0, [r0, #6]
 801ab64:	4418      	add	r0, r3
 801ab66:	b200      	sxth	r0, r0
 801ab68:	1a40      	subs	r0, r0, r1
 801ab6a:	e7f7      	b.n	801ab5c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	4770      	bx	lr

0801ab70 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ab70:	4b01      	ldr	r3, [pc, #4]	@ (801ab78 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ab72:	2200      	movs	r2, #0
 801ab74:	601a      	str	r2, [r3, #0]
 801ab76:	4770      	bx	lr
 801ab78:	24028780 	.word	0x24028780

0801ab7c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	b1c8      	cbz	r0, 801abb4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ab80:	0c02      	lsrs	r2, r0, #16
 801ab82:	0412      	lsls	r2, r2, #16
 801ab84:	b9a2      	cbnz	r2, 801abb0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ab86:	0403      	lsls	r3, r0, #16
 801ab88:	2010      	movs	r0, #16
 801ab8a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801ab8e:	bf04      	itt	eq
 801ab90:	021b      	lsleq	r3, r3, #8
 801ab92:	3008      	addeq	r0, #8
 801ab94:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801ab98:	bf04      	itt	eq
 801ab9a:	011b      	lsleq	r3, r3, #4
 801ab9c:	3004      	addeq	r0, #4
 801ab9e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801aba2:	bf04      	itt	eq
 801aba4:	009b      	lsleq	r3, r3, #2
 801aba6:	3002      	addeq	r0, #2
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	db04      	blt.n	801abb6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801abac:	3001      	adds	r0, #1
 801abae:	4770      	bx	lr
 801abb0:	2000      	movs	r0, #0
 801abb2:	e7ea      	b.n	801ab8a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801abb4:	2020      	movs	r0, #32
 801abb6:	4770      	bx	lr

0801abb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abbc:	b087      	sub	sp, #28
 801abbe:	460d      	mov	r5, r1
 801abc0:	4616      	mov	r6, r2
 801abc2:	4698      	mov	r8, r3
 801abc4:	4601      	mov	r1, r0
 801abc6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801abca:	b120      	cbz	r0, 801abd6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801abcc:	b11a      	cbz	r2, 801abd6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801abce:	2d1f      	cmp	r5, #31
 801abd0:	d801      	bhi.n	801abd6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801abd2:	2b1f      	cmp	r3, #31
 801abd4:	d904      	bls.n	801abe0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801abd6:	2000      	movs	r0, #0
 801abd8:	6038      	str	r0, [r7, #0]
 801abda:	b007      	add	sp, #28
 801abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abe0:	b97d      	cbnz	r5, 801ac02 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801abe2:	b143      	cbz	r3, 801abf6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801abe4:	4602      	mov	r2, r0
 801abe6:	462b      	mov	r3, r5
 801abe8:	4641      	mov	r1, r8
 801abea:	4630      	mov	r0, r6
 801abec:	e9cd 4700 	strd	r4, r7, [sp]
 801abf0:	f7ff ffe2 	bl	801abb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801abf4:	e7f1      	b.n	801abda <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801abf6:	f04f 33ff 	mov.w	r3, #4294967295
 801abfa:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801abfe:	603b      	str	r3, [r7, #0]
 801ac00:	e7eb      	b.n	801abda <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ac02:	fa32 fa05 	lsrs.w	sl, r2, r5
 801ac06:	d106      	bne.n	801ac16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801ac08:	4346      	muls	r6, r0
 801ac0a:	fbb6 f0f4 	udiv	r0, r6, r4
 801ac0e:	fb04 6610 	mls	r6, r4, r0, r6
 801ac12:	603e      	str	r6, [r7, #0]
 801ac14:	e7e1      	b.n	801abda <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801ac16:	2201      	movs	r2, #1
 801ac18:	fa00 fb05 	lsl.w	fp, r0, r5
 801ac1c:	40aa      	lsls	r2, r5
 801ac1e:	fbbb f9f4 	udiv	r9, fp, r4
 801ac22:	3a01      	subs	r2, #1
 801ac24:	fb0a f309 	mul.w	r3, sl, r9
 801ac28:	fb04 b919 	mls	r9, r4, r9, fp
 801ac2c:	4016      	ands	r6, r2
 801ac2e:	9303      	str	r3, [sp, #12]
 801ac30:	4630      	mov	r0, r6
 801ac32:	f7ff ffa3 	bl	801ab7c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ac36:	462b      	mov	r3, r5
 801ac38:	460a      	mov	r2, r1
 801ac3a:	4601      	mov	r1, r0
 801ac3c:	4630      	mov	r0, r6
 801ac3e:	e9cd 4700 	strd	r4, r7, [sp]
 801ac42:	f7ff ffb9 	bl	801abb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ac46:	4606      	mov	r6, r0
 801ac48:	4648      	mov	r0, r9
 801ac4a:	eb05 0108 	add.w	r1, r5, r8
 801ac4e:	f7ff ff95 	bl	801ab7c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ac52:	ab05      	add	r3, sp, #20
 801ac54:	464a      	mov	r2, r9
 801ac56:	e9cd 4300 	strd	r4, r3, [sp]
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	4650      	mov	r0, sl
 801ac5e:	f7ff ffab 	bl	801abb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ac62:	6839      	ldr	r1, [r7, #0]
 801ac64:	9a05      	ldr	r2, [sp, #20]
 801ac66:	9b03      	ldr	r3, [sp, #12]
 801ac68:	4411      	add	r1, r2
 801ac6a:	fbb1 f2f4 	udiv	r2, r1, r4
 801ac6e:	18d3      	adds	r3, r2, r3
 801ac70:	fb04 1412 	mls	r4, r4, r2, r1
 801ac74:	441e      	add	r6, r3
 801ac76:	603c      	str	r4, [r7, #0]
 801ac78:	4430      	add	r0, r6
 801ac7a:	e7ae      	b.n	801abda <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801ac7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ac7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac80:	b085      	sub	sp, #20
 801ac82:	f1b0 0900 	subs.w	r9, r0, #0
 801ac86:	461d      	mov	r5, r3
 801ac88:	4617      	mov	r7, r2
 801ac8a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ac8c:	bfbb      	ittet	lt
 801ac8e:	f1c9 0900 	rsblt	r9, r9, #0
 801ac92:	f04f 36ff 	movlt.w	r6, #4294967295
 801ac96:	2601      	movge	r6, #1
 801ac98:	6823      	ldrlt	r3, [r4, #0]
 801ac9a:	bfbc      	itt	lt
 801ac9c:	425b      	neglt	r3, r3
 801ac9e:	6023      	strlt	r3, [r4, #0]
 801aca0:	2a00      	cmp	r2, #0
 801aca2:	da04      	bge.n	801acae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801aca4:	6823      	ldr	r3, [r4, #0]
 801aca6:	4257      	negs	r7, r2
 801aca8:	4276      	negs	r6, r6
 801acaa:	425b      	negs	r3, r3
 801acac:	6023      	str	r3, [r4, #0]
 801acae:	2d00      	cmp	r5, #0
 801acb0:	4638      	mov	r0, r7
 801acb2:	bfba      	itte	lt
 801acb4:	426d      	neglt	r5, r5
 801acb6:	f04f 38ff 	movlt.w	r8, #4294967295
 801acba:	f04f 0801 	movge.w	r8, #1
 801acbe:	f7ff ff5d 	bl	801ab7c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801acc2:	ab03      	add	r3, sp, #12
 801acc4:	463a      	mov	r2, r7
 801acc6:	e9cd 5300 	strd	r5, r3, [sp]
 801acca:	4603      	mov	r3, r0
 801accc:	4648      	mov	r0, r9
 801acce:	f7ff ff73 	bl	801abb8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801acd2:	6823      	ldr	r3, [r4, #0]
 801acd4:	9a03      	ldr	r2, [sp, #12]
 801acd6:	4546      	cmp	r6, r8
 801acd8:	441a      	add	r2, r3
 801acda:	fb92 f3f5 	sdiv	r3, r2, r5
 801acde:	4418      	add	r0, r3
 801ace0:	fb05 2313 	mls	r3, r5, r3, r2
 801ace4:	bf18      	it	ne
 801ace6:	4240      	negne	r0, r0
 801ace8:	1c72      	adds	r2, r6, #1
 801acea:	6023      	str	r3, [r4, #0]
 801acec:	d105      	bne.n	801acfa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801acee:	2b00      	cmp	r3, #0
 801acf0:	f1c3 0200 	rsb	r2, r3, #0
 801acf4:	db0b      	blt.n	801ad0e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801acf6:	6022      	str	r2, [r4, #0]
 801acf8:	e006      	b.n	801ad08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801acfa:	2e01      	cmp	r6, #1
 801acfc:	d104      	bne.n	801ad08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	da02      	bge.n	801ad08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ad02:	442b      	add	r3, r5
 801ad04:	3801      	subs	r0, #1
 801ad06:	6023      	str	r3, [r4, #0]
 801ad08:	b005      	add	sp, #20
 801ad0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ad0e:	3801      	subs	r0, #1
 801ad10:	1b52      	subs	r2, r2, r5
 801ad12:	e7f0      	b.n	801acf6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801ad14 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ad14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ad18:	4c1c      	ldr	r4, [pc, #112]	@ (801ad8c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801ad1a:	4605      	mov	r5, r0
 801ad1c:	6807      	ldr	r7, [r0, #0]
 801ad1e:	69a3      	ldr	r3, [r4, #24]
 801ad20:	b92b      	cbnz	r3, 801ad2e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801ad22:	6840      	ldr	r0, [r0, #4]
 801ad24:	e9c5 7000 	strd	r7, r0, [r5]
 801ad28:	b004      	add	sp, #16
 801ad2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad2e:	f04f 0802 	mov.w	r8, #2
 801ad32:	68a2      	ldr	r2, [r4, #8]
 801ad34:	ae04      	add	r6, sp, #16
 801ad36:	6820      	ldr	r0, [r4, #0]
 801ad38:	fb93 f1f8 	sdiv	r1, r3, r8
 801ad3c:	440a      	add	r2, r1
 801ad3e:	69e1      	ldr	r1, [r4, #28]
 801ad40:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ad44:	463a      	mov	r2, r7
 801ad46:	9600      	str	r6, [sp, #0]
 801ad48:	f7ff ff98 	bl	801ac7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ad4c:	69a3      	ldr	r3, [r4, #24]
 801ad4e:	4607      	mov	r7, r0
 801ad50:	686a      	ldr	r2, [r5, #4]
 801ad52:	6a21      	ldr	r1, [r4, #32]
 801ad54:	9600      	str	r6, [sp, #0]
 801ad56:	6860      	ldr	r0, [r4, #4]
 801ad58:	f7ff ff90 	bl	801ac7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ad5c:	69a3      	ldr	r3, [r4, #24]
 801ad5e:	6962      	ldr	r2, [r4, #20]
 801ad60:	4407      	add	r7, r0
 801ad62:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801ad64:	9600      	str	r6, [sp, #0]
 801ad66:	68e0      	ldr	r0, [r4, #12]
 801ad68:	fb93 f8f8 	sdiv	r8, r3, r8
 801ad6c:	4442      	add	r2, r8
 801ad6e:	9203      	str	r2, [sp, #12]
 801ad70:	682a      	ldr	r2, [r5, #0]
 801ad72:	f7ff ff83 	bl	801ac7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ad76:	4680      	mov	r8, r0
 801ad78:	9600      	str	r6, [sp, #0]
 801ad7a:	69a3      	ldr	r3, [r4, #24]
 801ad7c:	686a      	ldr	r2, [r5, #4]
 801ad7e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801ad80:	6920      	ldr	r0, [r4, #16]
 801ad82:	f7ff ff7b 	bl	801ac7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ad86:	4440      	add	r0, r8
 801ad88:	e7cc      	b.n	801ad24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801ad8a:	bf00      	nop
 801ad8c:	24028784 	.word	0x24028784

0801ad90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ad90:	4b07      	ldr	r3, [pc, #28]	@ (801adb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801ad92:	781b      	ldrb	r3, [r3, #0]
 801ad94:	2b01      	cmp	r3, #1
 801ad96:	d109      	bne.n	801adac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801ad98:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ad9c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ada0:	8003      	strh	r3, [r0, #0]
 801ada2:	4b04      	ldr	r3, [pc, #16]	@ (801adb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ada4:	881b      	ldrh	r3, [r3, #0]
 801ada6:	3b01      	subs	r3, #1
 801ada8:	1a9b      	subs	r3, r3, r2
 801adaa:	800b      	strh	r3, [r1, #0]
 801adac:	4770      	bx	lr
 801adae:	bf00      	nop
 801adb0:	24028768 	.word	0x24028768
 801adb4:	24028764 	.word	0x24028764

0801adb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801adb8:	4b07      	ldr	r3, [pc, #28]	@ (801add8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801adba:	b510      	push	{r4, lr}
 801adbc:	781b      	ldrb	r3, [r3, #0]
 801adbe:	2b01      	cmp	r3, #1
 801adc0:	d108      	bne.n	801add4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801adc2:	4b06      	ldr	r3, [pc, #24]	@ (801addc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801adc4:	880c      	ldrh	r4, [r1, #0]
 801adc6:	881b      	ldrh	r3, [r3, #0]
 801adc8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801adcc:	3b01      	subs	r3, #1
 801adce:	1b1b      	subs	r3, r3, r4
 801add0:	8003      	strh	r3, [r0, #0]
 801add2:	800a      	strh	r2, [r1, #0]
 801add4:	bd10      	pop	{r4, pc}
 801add6:	bf00      	nop
 801add8:	24028768 	.word	0x24028768
 801addc:	24028764 	.word	0x24028764

0801ade0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ade0:	4b0a      	ldr	r3, [pc, #40]	@ (801ae0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ade2:	b510      	push	{r4, lr}
 801ade4:	781b      	ldrb	r3, [r3, #0]
 801ade6:	2b01      	cmp	r3, #1
 801ade8:	d10e      	bne.n	801ae08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801adea:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801adee:	8843      	ldrh	r3, [r0, #2]
 801adf0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801adf4:	18ca      	adds	r2, r1, r3
 801adf6:	4b06      	ldr	r3, [pc, #24]	@ (801ae10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801adf8:	8044      	strh	r4, [r0, #2]
 801adfa:	881b      	ldrh	r3, [r3, #0]
 801adfc:	1a9b      	subs	r3, r3, r2
 801adfe:	8003      	strh	r3, [r0, #0]
 801ae00:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ae04:	8081      	strh	r1, [r0, #4]
 801ae06:	80c3      	strh	r3, [r0, #6]
 801ae08:	bd10      	pop	{r4, pc}
 801ae0a:	bf00      	nop
 801ae0c:	24028768 	.word	0x24028768
 801ae10:	24028764 	.word	0x24028764

0801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ae14:	4b08      	ldr	r3, [pc, #32]	@ (801ae38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801ae16:	781b      	ldrb	r3, [r3, #0]
 801ae18:	2b01      	cmp	r3, #1
 801ae1a:	d10c      	bne.n	801ae36 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801ae1c:	8803      	ldrh	r3, [r0, #0]
 801ae1e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801ae22:	8842      	ldrh	r2, [r0, #2]
 801ae24:	8002      	strh	r2, [r0, #0]
 801ae26:	185a      	adds	r2, r3, r1
 801ae28:	4b04      	ldr	r3, [pc, #16]	@ (801ae3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ae2a:	881b      	ldrh	r3, [r3, #0]
 801ae2c:	1a9b      	subs	r3, r3, r2
 801ae2e:	8043      	strh	r3, [r0, #2]
 801ae30:	88c3      	ldrh	r3, [r0, #6]
 801ae32:	80c1      	strh	r1, [r0, #6]
 801ae34:	8083      	strh	r3, [r0, #4]
 801ae36:	4770      	bx	lr
 801ae38:	24028768 	.word	0x24028768
 801ae3c:	24028764 	.word	0x24028764

0801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ae40:	4b07      	ldr	r3, [pc, #28]	@ (801ae60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ae42:	b510      	push	{r4, lr}
 801ae44:	781b      	ldrb	r3, [r3, #0]
 801ae46:	2b01      	cmp	r3, #1
 801ae48:	d108      	bne.n	801ae5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ae4a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ae4e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ae52:	8003      	strh	r3, [r0, #0]
 801ae54:	8893      	ldrh	r3, [r2, #4]
 801ae56:	3b01      	subs	r3, #1
 801ae58:	1b1b      	subs	r3, r3, r4
 801ae5a:	800b      	strh	r3, [r1, #0]
 801ae5c:	bd10      	pop	{r4, pc}
 801ae5e:	bf00      	nop
 801ae60:	24028768 	.word	0x24028768

0801ae64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801ae64:	4b0b      	ldr	r3, [pc, #44]	@ (801ae94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801ae66:	781b      	ldrb	r3, [r3, #0]
 801ae68:	2b01      	cmp	r3, #1
 801ae6a:	d111      	bne.n	801ae90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801ae6c:	680b      	ldr	r3, [r1, #0]
 801ae6e:	ed90 7a00 	vldr	s14, [r0]
 801ae72:	6003      	str	r3, [r0, #0]
 801ae74:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801ae78:	eddf 6a07 	vldr	s13, [pc, #28]	@ 801ae98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801ae7c:	ee07 3a90 	vmov	s15, r3
 801ae80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ae88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae8c:	edc1 7a00 	vstr	s15, [r1]
 801ae90:	4770      	bx	lr
 801ae92:	bf00      	nop
 801ae94:	24028768 	.word	0x24028768
 801ae98:	38d1b717 	.word	0x38d1b717

0801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ae9c:	4b0a      	ldr	r3, [pc, #40]	@ (801aec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ae9e:	460a      	mov	r2, r1
 801aea0:	b510      	push	{r4, lr}
 801aea2:	781b      	ldrb	r3, [r3, #0]
 801aea4:	2b01      	cmp	r3, #1
 801aea6:	d10d      	bne.n	801aec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801aea8:	8881      	ldrh	r1, [r0, #4]
 801aeaa:	8803      	ldrh	r3, [r0, #0]
 801aeac:	440b      	add	r3, r1
 801aeae:	4601      	mov	r1, r0
 801aeb0:	3b01      	subs	r3, #1
 801aeb2:	f821 3b02 	strh.w	r3, [r1], #2
 801aeb6:	f7ff ffc3 	bl	801ae40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801aeba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801aebe:	88c2      	ldrh	r2, [r0, #6]
 801aec0:	80c3      	strh	r3, [r0, #6]
 801aec2:	8082      	strh	r2, [r0, #4]
 801aec4:	bd10      	pop	{r4, pc}
 801aec6:	bf00      	nop
 801aec8:	24028768 	.word	0x24028768

0801aecc <_ZN8touchgfx11Application13requestRedrawEv>:
 801aecc:	4b06      	ldr	r3, [pc, #24]	@ (801aee8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801aece:	2100      	movs	r1, #0
 801aed0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aed4:	4b05      	ldr	r3, [pc, #20]	@ (801aeec <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801aed6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801aeda:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aede:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801aee2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801aee6:	4770      	bx	lr
 801aee8:	24028764 	.word	0x24028764
 801aeec:	24028766 	.word	0x24028766

0801aef0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801aef0:	4b03      	ldr	r3, [pc, #12]	@ (801af00 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801aef2:	6818      	ldr	r0, [r3, #0]
 801aef4:	b110      	cbz	r0, 801aefc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801aef6:	6803      	ldr	r3, [r0, #0]
 801aef8:	699b      	ldr	r3, [r3, #24]
 801aefa:	4718      	bx	r3
 801aefc:	4770      	bx	lr
 801aefe:	bf00      	nop
 801af00:	240287b4 	.word	0x240287b4

0801af04 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801af04:	4770      	bx	lr
	...

0801af08 <_ZN8touchgfx11Application4drawEv>:
 801af08:	4b09      	ldr	r3, [pc, #36]	@ (801af30 <_ZN8touchgfx11Application4drawEv+0x28>)
 801af0a:	b507      	push	{r0, r1, r2, lr}
 801af0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af10:	2100      	movs	r1, #0
 801af12:	4b08      	ldr	r3, [pc, #32]	@ (801af34 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801af14:	9100      	str	r1, [sp, #0]
 801af16:	4669      	mov	r1, sp
 801af18:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af1c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801af20:	f8ad 3006 	strh.w	r3, [sp, #6]
 801af24:	6803      	ldr	r3, [r0, #0]
 801af26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801af28:	4798      	blx	r3
 801af2a:	b003      	add	sp, #12
 801af2c:	f85d fb04 	ldr.w	pc, [sp], #4
 801af30:	24028764 	.word	0x24028764
 801af34:	24028766 	.word	0x24028766

0801af38 <_ZN8touchgfx11Application10invalidateEv>:
 801af38:	4b09      	ldr	r3, [pc, #36]	@ (801af60 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801af3a:	b082      	sub	sp, #8
 801af3c:	2100      	movs	r1, #0
 801af3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af42:	4b08      	ldr	r3, [pc, #32]	@ (801af64 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801af44:	f8ad 2004 	strh.w	r2, [sp, #4]
 801af48:	aa02      	add	r2, sp, #8
 801af4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af4e:	9100      	str	r1, [sp, #0]
 801af50:	f8ad 3006 	strh.w	r3, [sp, #6]
 801af54:	6803      	ldr	r3, [r0, #0]
 801af56:	e912 0006 	ldmdb	r2, {r1, r2}
 801af5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801af5c:	b002      	add	sp, #8
 801af5e:	4718      	bx	r3
 801af60:	24028764 	.word	0x24028764
 801af64:	24028766 	.word	0x24028766

0801af68 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801af68:	4b03      	ldr	r3, [pc, #12]	@ (801af78 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801af6a:	6818      	ldr	r0, [r3, #0]
 801af6c:	b110      	cbz	r0, 801af74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801af6e:	6803      	ldr	r3, [r0, #0]
 801af70:	69db      	ldr	r3, [r3, #28]
 801af72:	4718      	bx	r3
 801af74:	4770      	bx	lr
 801af76:	bf00      	nop
 801af78:	240287b4 	.word	0x240287b4

0801af7c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801af7c:	4b03      	ldr	r3, [pc, #12]	@ (801af8c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801af7e:	6818      	ldr	r0, [r3, #0]
 801af80:	b110      	cbz	r0, 801af88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801af82:	6803      	ldr	r3, [r0, #0]
 801af84:	6a1b      	ldr	r3, [r3, #32]
 801af86:	4718      	bx	r3
 801af88:	4770      	bx	lr
 801af8a:	bf00      	nop
 801af8c:	240287b4 	.word	0x240287b4

0801af90 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801af90:	2300      	movs	r3, #0
 801af92:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801af96:	4770      	bx	lr

0801af98 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801af98:	4b03      	ldr	r3, [pc, #12]	@ (801afa8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801af9a:	6818      	ldr	r0, [r3, #0]
 801af9c:	b110      	cbz	r0, 801afa4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801af9e:	6803      	ldr	r3, [r0, #0]
 801afa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afa2:	4718      	bx	r3
 801afa4:	4770      	bx	lr
 801afa6:	bf00      	nop
 801afa8:	240287b4 	.word	0x240287b4

0801afac <_ZN8touchgfx11ApplicationD1Ev>:
 801afac:	4770      	bx	lr

0801afae <_ZN8touchgfx11ApplicationD0Ev>:
 801afae:	b510      	push	{r4, lr}
 801afb0:	4604      	mov	r4, r0
 801afb2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801afb6:	f00e fcdf 	bl	8029978 <_ZdlPvj>
 801afba:	4620      	mov	r0, r4
 801afbc:	bd10      	pop	{r4, pc}

0801afbe <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801afbe:	b510      	push	{r4, lr}
 801afc0:	f9b1 4000 	ldrsh.w	r4, [r1]
 801afc4:	888a      	ldrh	r2, [r1, #4]
 801afc6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801afca:	4422      	add	r2, r4
 801afcc:	b212      	sxth	r2, r2
 801afce:	4293      	cmp	r3, r2
 801afd0:	da15      	bge.n	801affe <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801afd2:	8882      	ldrh	r2, [r0, #4]
 801afd4:	4413      	add	r3, r2
 801afd6:	b21b      	sxth	r3, r3
 801afd8:	429c      	cmp	r4, r3
 801afda:	da10      	bge.n	801affe <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801afdc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801afe0:	88c9      	ldrh	r1, [r1, #6]
 801afe2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801afe6:	4419      	add	r1, r3
 801afe8:	b209      	sxth	r1, r1
 801afea:	428a      	cmp	r2, r1
 801afec:	da07      	bge.n	801affe <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801afee:	88c0      	ldrh	r0, [r0, #6]
 801aff0:	4410      	add	r0, r2
 801aff2:	b200      	sxth	r0, r0
 801aff4:	4283      	cmp	r3, r0
 801aff6:	bfac      	ite	ge
 801aff8:	2000      	movge	r0, #0
 801affa:	2001      	movlt	r0, #1
 801affc:	bd10      	pop	{r4, pc}
 801affe:	2000      	movs	r0, #0
 801b000:	e7fc      	b.n	801affc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b002 <_ZN8touchgfx4Rect10restrictToEss>:
 801b002:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b006:	2b00      	cmp	r3, #0
 801b008:	b510      	push	{r4, lr}
 801b00a:	da04      	bge.n	801b016 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801b00c:	8884      	ldrh	r4, [r0, #4]
 801b00e:	4423      	add	r3, r4
 801b010:	8083      	strh	r3, [r0, #4]
 801b012:	2300      	movs	r3, #0
 801b014:	8003      	strh	r3, [r0, #0]
 801b016:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b01a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b01e:	1b09      	subs	r1, r1, r4
 801b020:	428b      	cmp	r3, r1
 801b022:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b026:	bfc8      	it	gt
 801b028:	8081      	strhgt	r1, [r0, #4]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	da04      	bge.n	801b038 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801b02e:	88c1      	ldrh	r1, [r0, #6]
 801b030:	440b      	add	r3, r1
 801b032:	80c3      	strh	r3, [r0, #6]
 801b034:	2300      	movs	r3, #0
 801b036:	8043      	strh	r3, [r0, #2]
 801b038:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b03c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b040:	1a52      	subs	r2, r2, r1
 801b042:	4293      	cmp	r3, r2
 801b044:	bfc8      	it	gt
 801b046:	80c2      	strhgt	r2, [r0, #6]
 801b048:	bd10      	pop	{r4, pc}
	...

0801b04c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b04c:	4b10      	ldr	r3, [pc, #64]	@ (801b090 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801b04e:	b510      	push	{r4, lr}
 801b050:	460c      	mov	r4, r1
 801b052:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b056:	4b0f      	ldr	r3, [pc, #60]	@ (801b094 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801b058:	4620      	mov	r0, r4
 801b05a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b05e:	f7ff ffd0 	bl	801b002 <_ZN8touchgfx4Rect10restrictToEss>
 801b062:	4b0d      	ldr	r3, [pc, #52]	@ (801b098 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801b064:	6818      	ldr	r0, [r3, #0]
 801b066:	b190      	cbz	r0, 801b08e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801b068:	6803      	ldr	r3, [r0, #0]
 801b06a:	4621      	mov	r1, r4
 801b06c:	689b      	ldr	r3, [r3, #8]
 801b06e:	4798      	blx	r3
 801b070:	4b0a      	ldr	r3, [pc, #40]	@ (801b09c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b072:	6818      	ldr	r0, [r3, #0]
 801b074:	b118      	cbz	r0, 801b07e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b076:	6803      	ldr	r3, [r0, #0]
 801b078:	4621      	mov	r1, r4
 801b07a:	689b      	ldr	r3, [r3, #8]
 801b07c:	4798      	blx	r3
 801b07e:	4b08      	ldr	r3, [pc, #32]	@ (801b0a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b080:	4621      	mov	r1, r4
 801b082:	6818      	ldr	r0, [r3, #0]
 801b084:	6803      	ldr	r3, [r0, #0]
 801b086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b08a:	69db      	ldr	r3, [r3, #28]
 801b08c:	4718      	bx	r3
 801b08e:	bd10      	pop	{r4, pc}
 801b090:	24028766 	.word	0x24028766
 801b094:	24028764 	.word	0x24028764
 801b098:	240287b4 	.word	0x240287b4
 801b09c:	240287b0 	.word	0x240287b0
 801b0a0:	24028770 	.word	0x24028770

0801b0a4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0a6:	4606      	mov	r6, r0
 801b0a8:	4608      	mov	r0, r1
 801b0aa:	460f      	mov	r7, r1
 801b0ac:	f7f8 fbf7 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0b0:	b9e8      	cbnz	r0, 801b0ee <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b0b2:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b0b6:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b0ba:	42a5      	cmp	r5, r4
 801b0bc:	db17      	blt.n	801b0ee <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b0be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b0c2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b0c6:	429a      	cmp	r2, r3
 801b0c8:	db11      	blt.n	801b0ee <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b0ca:	88b9      	ldrh	r1, [r7, #4]
 801b0cc:	440d      	add	r5, r1
 801b0ce:	88b1      	ldrh	r1, [r6, #4]
 801b0d0:	440c      	add	r4, r1
 801b0d2:	b22d      	sxth	r5, r5
 801b0d4:	b224      	sxth	r4, r4
 801b0d6:	42a5      	cmp	r5, r4
 801b0d8:	dc09      	bgt.n	801b0ee <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b0da:	88f8      	ldrh	r0, [r7, #6]
 801b0dc:	4410      	add	r0, r2
 801b0de:	88f2      	ldrh	r2, [r6, #6]
 801b0e0:	4413      	add	r3, r2
 801b0e2:	b200      	sxth	r0, r0
 801b0e4:	b21b      	sxth	r3, r3
 801b0e6:	4298      	cmp	r0, r3
 801b0e8:	bfcc      	ite	gt
 801b0ea:	2000      	movgt	r0, #0
 801b0ec:	2001      	movle	r0, #1
 801b0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b0f0 <_ZN8touchgfx11Application11getInstanceEv>:
 801b0f0:	4b01      	ldr	r3, [pc, #4]	@ (801b0f8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b0f2:	6818      	ldr	r0, [r3, #0]
 801b0f4:	4770      	bx	lr
 801b0f6:	bf00      	nop
 801b0f8:	240287c4 	.word	0x240287c4

0801b0fc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	b510      	push	{r4, lr}
 801b100:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801b104:	4604      	mov	r4, r0
 801b106:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801b10a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801b10e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801b112:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801b116:	429a      	cmp	r2, r3
 801b118:	d90e      	bls.n	801b138 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801b11a:	18e2      	adds	r2, r4, r3
 801b11c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801b120:	b122      	cbz	r2, 801b12c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801b122:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801b126:	6803      	ldr	r3, [r0, #0]
 801b128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b12a:	4798      	blx	r3
 801b12c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801b130:	3301      	adds	r3, #1
 801b132:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801b136:	e7ea      	b.n	801b10e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801b138:	bd10      	pop	{r4, pc}

0801b13a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801b13a:	b530      	push	{r4, r5, lr}
 801b13c:	2200      	movs	r2, #0
 801b13e:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801b142:	b293      	uxth	r3, r2
 801b144:	429d      	cmp	r5, r3
 801b146:	d90e      	bls.n	801b166 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b148:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801b14c:	428b      	cmp	r3, r1
 801b14e:	d10b      	bne.n	801b168 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b150:	1884      	adds	r4, r0, r2
 801b152:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801b156:	b13b      	cbz	r3, 801b168 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801b158:	3b01      	subs	r3, #1
 801b15a:	b2db      	uxtb	r3, r3
 801b15c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 801b160:	b90b      	cbnz	r3, 801b166 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b162:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b166:	bd30      	pop	{r4, r5, pc}
 801b168:	3201      	adds	r2, #1
 801b16a:	e7ea      	b.n	801b142 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801b16c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801b16c:	2300      	movs	r3, #0
 801b16e:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801b172:	30a4      	adds	r0, #164	@ 0xa4
 801b174:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b178:	f802 3b01 	strb.w	r3, [r2], #1
 801b17c:	4282      	cmp	r2, r0
 801b17e:	d1fb      	bne.n	801b178 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801b180:	4770      	bx	lr
	...

0801b184 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b184:	b570      	push	{r4, r5, r6, lr}
 801b186:	4c0b      	ldr	r4, [pc, #44]	@ (801b1b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b188:	4605      	mov	r5, r0
 801b18a:	460e      	mov	r6, r1
 801b18c:	6820      	ldr	r0, [r4, #0]
 801b18e:	b110      	cbz	r0, 801b196 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801b190:	6803      	ldr	r3, [r0, #0]
 801b192:	695b      	ldr	r3, [r3, #20]
 801b194:	4798      	blx	r3
 801b196:	1d28      	adds	r0, r5, #4
 801b198:	f7ff ffe8 	bl	801b16c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b19c:	6026      	str	r6, [r4, #0]
 801b19e:	6833      	ldr	r3, [r6, #0]
 801b1a0:	4630      	mov	r0, r6
 801b1a2:	68db      	ldr	r3, [r3, #12]
 801b1a4:	4798      	blx	r3
 801b1a6:	682b      	ldr	r3, [r5, #0]
 801b1a8:	4628      	mov	r0, r5
 801b1aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b1ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b1b0:	4718      	bx	r3
 801b1b2:	bf00      	nop
 801b1b4:	240287b4 	.word	0x240287b4

0801b1b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801b1be:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801b1c2:	461a      	mov	r2, r3
 801b1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1c6:	461c      	mov	r4, r3
 801b1c8:	461d      	mov	r5, r3
 801b1ca:	459c      	cmp	ip, r3
 801b1cc:	dd1a      	ble.n	801b204 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801b1ce:	18c6      	adds	r6, r0, r3
 801b1d0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801b1d4:	b16e      	cbz	r6, 801b1f2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801b1d6:	429a      	cmp	r2, r3
 801b1d8:	d008      	beq.n	801b1ec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801b1da:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801b1de:	fa1f fe82 	uxth.w	lr, r2
 801b1e2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801b1e6:	1887      	adds	r7, r0, r2
 801b1e8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801b1ec:	3201      	adds	r2, #1
 801b1ee:	3301      	adds	r3, #1
 801b1f0:	e7eb      	b.n	801b1ca <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801b1f2:	4299      	cmp	r1, r3
 801b1f4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801b1f8:	bfa8      	it	ge
 801b1fa:	3501      	addge	r5, #1
 801b1fc:	429e      	cmp	r6, r3
 801b1fe:	bfc8      	it	gt
 801b200:	3401      	addgt	r4, #1
 801b202:	e7f4      	b.n	801b1ee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801b204:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801b208:	1b49      	subs	r1, r1, r5
 801b20a:	1b1b      	subs	r3, r3, r4
 801b20c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801b210:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801b214:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801b218:	4293      	cmp	r3, r2
 801b21a:	dd03      	ble.n	801b224 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801b21c:	3b01      	subs	r3, #1
 801b21e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801b222:	e7f7      	b.n	801b214 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801b224:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b228 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b228:	b570      	push	{r4, r5, r6, lr}
 801b22a:	4d16      	ldr	r5, [pc, #88]	@ (801b284 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801b22c:	4604      	mov	r4, r0
 801b22e:	6828      	ldr	r0, [r5, #0]
 801b230:	b140      	cbz	r0, 801b244 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b232:	7a03      	ldrb	r3, [r0, #8]
 801b234:	b933      	cbnz	r3, 801b244 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b236:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801b23a:	6803      	ldr	r3, [r0, #0]
 801b23c:	689b      	ldr	r3, [r3, #8]
 801b23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b242:	4718      	bx	r3
 801b244:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801b248:	4e0f      	ldr	r6, [pc, #60]	@ (801b288 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801b24a:	b973      	cbnz	r3, 801b26a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b24c:	b168      	cbz	r0, 801b26a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b24e:	7a03      	ldrb	r3, [r0, #8]
 801b250:	b15b      	cbz	r3, 801b26a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b252:	6830      	ldr	r0, [r6, #0]
 801b254:	b110      	cbz	r0, 801b25c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b256:	6803      	ldr	r3, [r0, #0]
 801b258:	691b      	ldr	r3, [r3, #16]
 801b25a:	4798      	blx	r3
 801b25c:	6828      	ldr	r0, [r5, #0]
 801b25e:	6803      	ldr	r3, [r0, #0]
 801b260:	68db      	ldr	r3, [r3, #12]
 801b262:	4798      	blx	r3
 801b264:	2301      	movs	r3, #1
 801b266:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801b26a:	3404      	adds	r4, #4
 801b26c:	4620      	mov	r0, r4
 801b26e:	f7ff ff45 	bl	801b0fc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801b272:	4620      	mov	r0, r4
 801b274:	f7ff ffa0 	bl	801b1b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b278:	6830      	ldr	r0, [r6, #0]
 801b27a:	b110      	cbz	r0, 801b282 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801b27c:	6803      	ldr	r3, [r0, #0]
 801b27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b280:	e7dd      	b.n	801b23e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b282:	bd70      	pop	{r4, r5, r6, pc}
 801b284:	240287b8 	.word	0x240287b8
 801b288:	240287b4 	.word	0x240287b4

0801b28c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b28e:	2300      	movs	r3, #0
 801b290:	4604      	mov	r4, r0
 801b292:	460d      	mov	r5, r1
 801b294:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 801b298:	4618      	mov	r0, r3
 801b29a:	b29a      	uxth	r2, r3
 801b29c:	4291      	cmp	r1, r2
 801b29e:	d912      	bls.n	801b2c6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801b2a0:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801b2a4:	18e6      	adds	r6, r4, r3
 801b2a6:	42af      	cmp	r7, r5
 801b2a8:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 801b2ac:	d105      	bne.n	801b2ba <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801b2ae:	2aff      	cmp	r2, #255	@ 0xff
 801b2b0:	d002      	beq.n	801b2b8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b2b2:	3201      	adds	r2, #1
 801b2b4:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801b2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2ba:	2a00      	cmp	r2, #0
 801b2bc:	f103 0301 	add.w	r3, r3, #1
 801b2c0:	bf08      	it	eq
 801b2c2:	2001      	moveq	r0, #1
 801b2c4:	e7e9      	b.n	801b29a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801b2c6:	b120      	cbz	r0, 801b2d2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801b2c8:	2920      	cmp	r1, #32
 801b2ca:	d102      	bne.n	801b2d2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801b2cc:	4620      	mov	r0, r4
 801b2ce:	f7ff ff73 	bl	801b1b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b2d2:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801b2d6:	2b1f      	cmp	r3, #31
 801b2d8:	d8ee      	bhi.n	801b2b8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801b2da:	18e2      	adds	r2, r4, r3
 801b2dc:	2101      	movs	r1, #1
 801b2de:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 801b2e2:	185a      	adds	r2, r3, r1
 801b2e4:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801b2e8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801b2ec:	e7e4      	b.n	801b2b8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801b2ee <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801b2f4:	2200      	movs	r2, #0
 801b2f6:	801a      	strh	r2, [r3, #0]
 801b2f8:	3308      	adds	r3, #8
 801b2fa:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b2fe:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b302:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b306:	428b      	cmp	r3, r1
 801b308:	d1f5      	bne.n	801b2f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b30a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801b30e:	4770      	bx	lr

0801b310 <_ZN8touchgfx11ApplicationC1Ev>:
 801b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b312:	4b1d      	ldr	r3, [pc, #116]	@ (801b388 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b314:	4606      	mov	r6, r0
 801b316:	4604      	mov	r4, r0
 801b318:	2500      	movs	r5, #0
 801b31a:	f846 3b04 	str.w	r3, [r6], #4
 801b31e:	22a8      	movs	r2, #168	@ 0xa8
 801b320:	2100      	movs	r1, #0
 801b322:	4630      	mov	r0, r6
 801b324:	f010 f8ce 	bl	802b4c4 <memset>
 801b328:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801b32c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801b330:	4f16      	ldr	r7, [pc, #88]	@ (801b38c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b332:	f7ff ffdc 	bl	801b2ee <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b336:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801b33a:	f7ff ffd8 	bl	801b2ee <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b33e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801b342:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801b346:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801b34a:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801b34e:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801b352:	490f      	ldr	r1, [pc, #60]	@ (801b390 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b354:	480f      	ldr	r0, [pc, #60]	@ (801b394 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b356:	f00d fc7f 	bl	8028c58 <CRC_Lock>
 801b35a:	4b0f      	ldr	r3, [pc, #60]	@ (801b398 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801b35c:	b158      	cbz	r0, 801b376 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801b35e:	801d      	strh	r5, [r3, #0]
 801b360:	2300      	movs	r3, #0
 801b362:	4a0e      	ldr	r2, [pc, #56]	@ (801b39c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801b364:	4630      	mov	r0, r6
 801b366:	6013      	str	r3, [r2, #0]
 801b368:	4a0d      	ldr	r2, [pc, #52]	@ (801b3a0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801b36a:	603b      	str	r3, [r7, #0]
 801b36c:	6013      	str	r3, [r2, #0]
 801b36e:	f7ff fefd 	bl	801b16c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b372:	4620      	mov	r0, r4
 801b374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b376:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b37a:	2002      	movs	r0, #2
 801b37c:	801a      	strh	r2, [r3, #0]
 801b37e:	6038      	str	r0, [r7, #0]
 801b380:	f001 fe58 	bl	801d034 <_ZN8touchgfx6Screen4drawEv>
 801b384:	e7ec      	b.n	801b360 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801b386:	bf00      	nop
 801b388:	08030ab8 	.word	0x08030ab8
 801b38c:	240287b4 	.word	0x240287b4
 801b390:	b5e8b5cd 	.word	0xb5e8b5cd
 801b394:	f407a5c2 	.word	0xf407a5c2
 801b398:	2400007c 	.word	0x2400007c
 801b39c:	240287c4 	.word	0x240287c4
 801b3a0:	240287b8 	.word	0x240287b8

0801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b3a4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801b3a8:	3b01      	subs	r3, #1
 801b3aa:	b29b      	uxth	r3, r3
 801b3ac:	428b      	cmp	r3, r1
 801b3ae:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801b3b2:	b510      	push	{r4, lr}
 801b3b4:	d908      	bls.n	801b3c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b3b6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b3ba:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b3be:	681a      	ldr	r2, [r3, #0]
 801b3c0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b3c4:	685a      	ldr	r2, [r3, #4]
 801b3c6:	6062      	str	r2, [r4, #4]
 801b3c8:	bd10      	pop	{r4, pc}
	...

0801b3cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3d0:	b08f      	sub	sp, #60	@ 0x3c
 801b3d2:	4b8f      	ldr	r3, [pc, #572]	@ (801b610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801b3d4:	4683      	mov	fp, r0
 801b3d6:	ac0a      	add	r4, sp, #40	@ 0x28
 801b3d8:	e884 0006 	stmia.w	r4, {r1, r2}
 801b3dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b3e0:	4620      	mov	r0, r4
 801b3e2:	4b8c      	ldr	r3, [pc, #560]	@ (801b614 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801b3e4:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b3e8:	f7ff fe0b 	bl	801b002 <_ZN8touchgfx4Rect10restrictToEss>
 801b3ec:	4620      	mov	r0, r4
 801b3ee:	f7f8 fa56 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3f2:	2800      	cmp	r0, #0
 801b3f4:	d16a      	bne.n	801b4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b3f6:	9403      	str	r4, [sp, #12]
 801b3f8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b3fc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b400:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801b404:	9301      	str	r3, [sp, #4]
 801b406:	35a4      	adds	r5, #164	@ 0xa4
 801b408:	b15c      	cbz	r4, 801b422 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b40a:	4629      	mov	r1, r5
 801b40c:	9803      	ldr	r0, [sp, #12]
 801b40e:	f7ff fe49 	bl	801b0a4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b412:	3c01      	subs	r4, #1
 801b414:	b118      	cbz	r0, 801b41e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801b416:	b2a1      	uxth	r1, r4
 801b418:	9801      	ldr	r0, [sp, #4]
 801b41a:	f7ff ffc3 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b41e:	3d08      	subs	r5, #8
 801b420:	e7f2      	b.n	801b408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801b422:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801b426:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b42a:	f8cd a010 	str.w	sl, [sp, #16]
 801b42e:	9302      	str	r3, [sp, #8]
 801b430:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b434:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801b438:	9306      	str	r3, [sp, #24]
 801b43a:	445c      	add	r4, fp
 801b43c:	2500      	movs	r5, #0
 801b43e:	4626      	mov	r6, r4
 801b440:	f8cd a014 	str.w	sl, [sp, #20]
 801b444:	462f      	mov	r7, r5
 801b446:	9b05      	ldr	r3, [sp, #20]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d073      	beq.n	801b534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b44c:	9903      	ldr	r1, [sp, #12]
 801b44e:	4630      	mov	r0, r6
 801b450:	f7ff fdb5 	bl	801afbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b454:	b350      	cbz	r0, 801b4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b456:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801b45a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b45e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801b462:	45e6      	cmp	lr, ip
 801b464:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801b468:	db33      	blt.n	801b4d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b46a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b46e:	88b3      	ldrh	r3, [r6, #4]
 801b470:	4472      	add	r2, lr
 801b472:	4463      	add	r3, ip
 801b474:	b212      	sxth	r2, r2
 801b476:	b21b      	sxth	r3, r3
 801b478:	429a      	cmp	r2, r3
 801b47a:	dc2a      	bgt.n	801b4d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b47c:	fa1f f289 	uxth.w	r2, r9
 801b480:	88f3      	ldrh	r3, [r6, #6]
 801b482:	45c8      	cmp	r8, r9
 801b484:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b488:	4413      	add	r3, r2
 801b48a:	fa1f fc88 	uxth.w	ip, r8
 801b48e:	b29b      	uxth	r3, r3
 801b490:	fa0f fe83 	sxth.w	lr, r3
 801b494:	db0f      	blt.n	801b4b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b496:	eba3 030c 	sub.w	r3, r3, ip
 801b49a:	1ac9      	subs	r1, r1, r3
 801b49c:	b209      	sxth	r1, r1
 801b49e:	2900      	cmp	r1, #0
 801b4a0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b4a4:	dd12      	ble.n	801b4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b4a6:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801b4aa:	4605      	mov	r5, r0
 801b4ac:	9b05      	ldr	r3, [sp, #20]
 801b4ae:	3e08      	subs	r6, #8
 801b4b0:	3b01      	subs	r3, #1
 801b4b2:	9305      	str	r3, [sp, #20]
 801b4b4:	e7c7      	b.n	801b446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b4b6:	4461      	add	r1, ip
 801b4b8:	b209      	sxth	r1, r1
 801b4ba:	4571      	cmp	r1, lr
 801b4bc:	dc38      	bgt.n	801b530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b4be:	eba2 020c 	sub.w	r2, r2, ip
 801b4c2:	b212      	sxth	r2, r2
 801b4c4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801b4c8:	2a00      	cmp	r2, #0
 801b4ca:	dcee      	bgt.n	801b4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b4cc:	b00f      	add	sp, #60	@ 0x3c
 801b4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4d2:	45c8      	cmp	r8, r9
 801b4d4:	db2c      	blt.n	801b530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b4d6:	88f3      	ldrh	r3, [r6, #6]
 801b4d8:	4499      	add	r9, r3
 801b4da:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801b4de:	4498      	add	r8, r3
 801b4e0:	fa0f f989 	sxth.w	r9, r9
 801b4e4:	fa0f f888 	sxth.w	r8, r8
 801b4e8:	45c1      	cmp	r9, r8
 801b4ea:	db21      	blt.n	801b530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b4ec:	fa1f f28c 	uxth.w	r2, ip
 801b4f0:	88b3      	ldrh	r3, [r6, #4]
 801b4f2:	45e6      	cmp	lr, ip
 801b4f4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b4f8:	4413      	add	r3, r2
 801b4fa:	fa1f f88e 	uxth.w	r8, lr
 801b4fe:	b29b      	uxth	r3, r3
 801b500:	fa0f f983 	sxth.w	r9, r3
 801b504:	db0a      	blt.n	801b51c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801b506:	eba3 0308 	sub.w	r3, r3, r8
 801b50a:	1ac9      	subs	r1, r1, r3
 801b50c:	b209      	sxth	r1, r1
 801b50e:	2900      	cmp	r1, #0
 801b510:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801b514:	ddda      	ble.n	801b4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b516:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801b51a:	e7c6      	b.n	801b4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b51c:	4441      	add	r1, r8
 801b51e:	b209      	sxth	r1, r1
 801b520:	4549      	cmp	r1, r9
 801b522:	dc05      	bgt.n	801b530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b524:	eba2 0208 	sub.w	r2, r2, r8
 801b528:	b212      	sxth	r2, r2
 801b52a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801b52e:	e7cb      	b.n	801b4c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b530:	4607      	mov	r7, r0
 801b532:	e7bb      	b.n	801b4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b534:	2d00      	cmp	r5, #0
 801b536:	d181      	bne.n	801b43c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801b538:	2f00      	cmp	r7, #0
 801b53a:	f000 81dd 	beq.w	801b8f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b53e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801b542:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801b546:	b2b3      	uxth	r3, r6
 801b548:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801b54c:	9305      	str	r3, [sp, #20]
 801b54e:	9a05      	ldr	r2, [sp, #20]
 801b550:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b554:	4413      	add	r3, r2
 801b556:	b2ba      	uxth	r2, r7
 801b558:	4492      	add	sl, r2
 801b55a:	b29b      	uxth	r3, r3
 801b55c:	fa1f fa8a 	uxth.w	sl, sl
 801b560:	fa0f f883 	sxth.w	r8, r3
 801b564:	fa0f f98a 	sxth.w	r9, sl
 801b568:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b56c:	9b04      	ldr	r3, [sp, #16]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d052      	beq.n	801b618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b572:	9903      	ldr	r1, [sp, #12]
 801b574:	4620      	mov	r0, r4
 801b576:	f7ff fd22 	bl	801afbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b57a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b57e:	b1c0      	cbz	r0, 801b5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b580:	f9b4 e000 	ldrsh.w	lr, [r4]
 801b584:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b588:	4576      	cmp	r6, lr
 801b58a:	dc22      	bgt.n	801b5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b58c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b590:	44f4      	add	ip, lr
 801b592:	fa0f fc8c 	sxth.w	ip, ip
 801b596:	45e0      	cmp	r8, ip
 801b598:	db1b      	blt.n	801b5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b59a:	428f      	cmp	r7, r1
 801b59c:	fa1f fc81 	uxth.w	ip, r1
 801b5a0:	88e1      	ldrh	r1, [r4, #6]
 801b5a2:	dc0d      	bgt.n	801b5c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801b5a4:	ebaa 0c0c 	sub.w	ip, sl, ip
 801b5a8:	f8a4 9002 	strh.w	r9, [r4, #2]
 801b5ac:	eba1 010c 	sub.w	r1, r1, ip
 801b5b0:	80e1      	strh	r1, [r4, #6]
 801b5b2:	4628      	mov	r0, r5
 801b5b4:	9904      	ldr	r1, [sp, #16]
 801b5b6:	3c08      	subs	r4, #8
 801b5b8:	4605      	mov	r5, r0
 801b5ba:	3901      	subs	r1, #1
 801b5bc:	9104      	str	r1, [sp, #16]
 801b5be:	e7d3      	b.n	801b568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801b5c0:	4461      	add	r1, ip
 801b5c2:	b209      	sxth	r1, r1
 801b5c4:	4549      	cmp	r1, r9
 801b5c6:	dcf5      	bgt.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b5c8:	eba2 0c0c 	sub.w	ip, r2, ip
 801b5cc:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b5d0:	e7ef      	b.n	801b5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b5d2:	428f      	cmp	r7, r1
 801b5d4:	dcee      	bgt.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b5d6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801b5da:	4461      	add	r1, ip
 801b5dc:	b209      	sxth	r1, r1
 801b5de:	4589      	cmp	r9, r1
 801b5e0:	dbe8      	blt.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b5e2:	4576      	cmp	r6, lr
 801b5e4:	fa1f fc8e 	uxth.w	ip, lr
 801b5e8:	88a1      	ldrh	r1, [r4, #4]
 801b5ea:	dc07      	bgt.n	801b5fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801b5ec:	eba3 0c0c 	sub.w	ip, r3, ip
 801b5f0:	f8a4 8000 	strh.w	r8, [r4]
 801b5f4:	eba1 010c 	sub.w	r1, r1, ip
 801b5f8:	80a1      	strh	r1, [r4, #4]
 801b5fa:	e7da      	b.n	801b5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b5fc:	4461      	add	r1, ip
 801b5fe:	b209      	sxth	r1, r1
 801b600:	4588      	cmp	r8, r1
 801b602:	dbd7      	blt.n	801b5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b604:	9905      	ldr	r1, [sp, #20]
 801b606:	eba1 0c0c 	sub.w	ip, r1, ip
 801b60a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801b60e:	e7d0      	b.n	801b5b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b610:	24028766 	.word	0x24028766
 801b614:	24028764 	.word	0x24028764
 801b618:	2d00      	cmp	r5, #0
 801b61a:	f000 816d 	beq.w	801b8f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b61e:	9b06      	ldr	r3, [sp, #24]
 801b620:	445b      	add	r3, fp
 801b622:	461c      	mov	r4, r3
 801b624:	9b02      	ldr	r3, [sp, #8]
 801b626:	3301      	adds	r3, #1
 801b628:	f000 8166 	beq.w	801b8f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b62c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801b630:	9803      	ldr	r0, [sp, #12]
 801b632:	4629      	mov	r1, r5
 801b634:	f7ff fd36 	bl	801b0a4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b638:	b120      	cbz	r0, 801b644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801b63a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b63e:	9801      	ldr	r0, [sp, #4]
 801b640:	f7ff feb0 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b644:	9903      	ldr	r1, [sp, #12]
 801b646:	4628      	mov	r0, r5
 801b648:	f7ff fcb9 	bl	801afbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b64c:	2800      	cmp	r0, #0
 801b64e:	f000 809c 	beq.w	801b78a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b652:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801b656:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b65a:	fa1f f189 	uxth.w	r1, r9
 801b65e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b662:	9309      	str	r3, [sp, #36]	@ 0x24
 801b664:	eb01 0c03 	add.w	ip, r1, r3
 801b668:	b283      	uxth	r3, r0
 801b66a:	4548      	cmp	r0, r9
 801b66c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801b670:	fa1f fa8c 	uxth.w	sl, ip
 801b674:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801b678:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801b67c:	eb03 050c 	add.w	r5, r3, ip
 801b680:	b2ad      	uxth	r5, r5
 801b682:	9505      	str	r5, [sp, #20]
 801b684:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801b688:	9504      	str	r5, [sp, #16]
 801b68a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801b68e:	f340 8099 	ble.w	801b7c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801b692:	1a5b      	subs	r3, r3, r1
 801b694:	4596      	cmp	lr, r2
 801b696:	fa0f f08a 	sxth.w	r0, sl
 801b69a:	b29b      	uxth	r3, r3
 801b69c:	b21e      	sxth	r6, r3
 801b69e:	dd2e      	ble.n	801b6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801b6a0:	9f02      	ldr	r7, [sp, #8]
 801b6a2:	fa1f fe8e 	uxth.w	lr, lr
 801b6a6:	b292      	uxth	r2, r2
 801b6a8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801b6ac:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b6b0:	9f04      	ldr	r7, [sp, #16]
 801b6b2:	ebae 0102 	sub.w	r1, lr, r2
 801b6b6:	44a6      	add	lr, r4
 801b6b8:	1a3f      	subs	r7, r7, r0
 801b6ba:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801b6be:	b289      	uxth	r1, r1
 801b6c0:	4402      	add	r2, r0
 801b6c2:	fa0f fe8e 	sxth.w	lr, lr
 801b6c6:	b20d      	sxth	r5, r1
 801b6c8:	b212      	sxth	r2, r2
 801b6ca:	436f      	muls	r7, r5
 801b6cc:	ebae 0202 	sub.w	r2, lr, r2
 801b6d0:	4372      	muls	r2, r6
 801b6d2:	4297      	cmp	r7, r2
 801b6d4:	db09      	blt.n	801b6ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b6d6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801b6da:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801b6de:	449c      	add	ip, r3
 801b6e0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801b6e4:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801b6e8:	e686      	b.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b6ea:	4421      	add	r1, r4
 801b6ec:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801b6f0:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801b6f4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b6f8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b6fc:	e67c      	b.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b6fe:	9f04      	ldr	r7, [sp, #16]
 801b700:	42b8      	cmp	r0, r7
 801b702:	da27      	bge.n	801b754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b704:	9902      	ldr	r1, [sp, #8]
 801b706:	1a3f      	subs	r7, r7, r0
 801b708:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801b70c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801b710:	eb05 010e 	add.w	r1, r5, lr
 801b714:	fa1f f881 	uxth.w	r8, r1
 801b718:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801b71c:	4411      	add	r1, r2
 801b71e:	fa0f f988 	sxth.w	r9, r8
 801b722:	eba2 020e 	sub.w	r2, r2, lr
 801b726:	eba1 0108 	sub.w	r1, r1, r8
 801b72a:	4372      	muls	r2, r6
 801b72c:	b289      	uxth	r1, r1
 801b72e:	fa0f f881 	sxth.w	r8, r1
 801b732:	fb08 f707 	mul.w	r7, r8, r7
 801b736:	42ba      	cmp	r2, r7
 801b738:	dc06      	bgt.n	801b748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801b73a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801b73e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801b742:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801b746:	e7ca      	b.n	801b6de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801b748:	4429      	add	r1, r5
 801b74a:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801b74e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b752:	e651      	b.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b754:	9805      	ldr	r0, [sp, #20]
 801b756:	2d06      	cmp	r5, #6
 801b758:	ebaa 0000 	sub.w	r0, sl, r0
 801b75c:	b280      	uxth	r0, r0
 801b75e:	fa0f fe80 	sxth.w	lr, r0
 801b762:	d817      	bhi.n	801b794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801b764:	9b04      	ldr	r3, [sp, #16]
 801b766:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801b76a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801b76e:	1c6b      	adds	r3, r5, #1
 801b770:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801b774:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801b778:	9b01      	ldr	r3, [sp, #4]
 801b77a:	9801      	ldr	r0, [sp, #4]
 801b77c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b780:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b784:	805a      	strh	r2, [r3, #2]
 801b786:	809e      	strh	r6, [r3, #4]
 801b788:	80d9      	strh	r1, [r3, #6]
 801b78a:	9b02      	ldr	r3, [sp, #8]
 801b78c:	3c08      	subs	r4, #8
 801b78e:	3b01      	subs	r3, #1
 801b790:	9302      	str	r3, [sp, #8]
 801b792:	e747      	b.n	801b624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801b794:	9a02      	ldr	r2, [sp, #8]
 801b796:	45b6      	cmp	lr, r6
 801b798:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b79c:	db0d      	blt.n	801b7ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b79e:	449c      	add	ip, r3
 801b7a0:	445a      	add	r2, fp
 801b7a2:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801b7a6:	fa1f fc8c 	uxth.w	ip, ip
 801b7aa:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801b7ae:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801b7b2:	448c      	add	ip, r1
 801b7b4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801b7b8:	e61e      	b.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b7ba:	445a      	add	r2, fp
 801b7bc:	4484      	add	ip, r0
 801b7be:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801b7c2:	e78f      	b.n	801b6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b7c4:	fa1f f18e 	uxth.w	r1, lr
 801b7c8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801b7cc:	b293      	uxth	r3, r2
 801b7ce:	4596      	cmp	lr, r2
 801b7d0:	eb01 0806 	add.w	r8, r1, r6
 801b7d4:	9306      	str	r3, [sp, #24]
 801b7d6:	fa1f f888 	uxth.w	r8, r8
 801b7da:	9f06      	ldr	r7, [sp, #24]
 801b7dc:	fa0f f388 	sxth.w	r3, r8
 801b7e0:	9307      	str	r3, [sp, #28]
 801b7e2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b7e6:	443b      	add	r3, r7
 801b7e8:	b29b      	uxth	r3, r3
 801b7ea:	9308      	str	r3, [sp, #32]
 801b7ec:	da24      	bge.n	801b838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801b7ee:	9905      	ldr	r1, [sp, #20]
 801b7f0:	eba3 0308 	sub.w	r3, r3, r8
 801b7f4:	eba2 020e 	sub.w	r2, r2, lr
 801b7f8:	eba9 0000 	sub.w	r0, r9, r0
 801b7fc:	ebaa 0401 	sub.w	r4, sl, r1
 801b800:	b29b      	uxth	r3, r3
 801b802:	b2a4      	uxth	r4, r4
 801b804:	b219      	sxth	r1, r3
 801b806:	b225      	sxth	r5, r4
 801b808:	4348      	muls	r0, r1
 801b80a:	436a      	muls	r2, r5
 801b80c:	4282      	cmp	r2, r0
 801b80e:	9a02      	ldr	r2, [sp, #8]
 801b810:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b814:	445a      	add	r2, fp
 801b816:	dc06      	bgt.n	801b826 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801b818:	9b07      	ldr	r3, [sp, #28]
 801b81a:	44a4      	add	ip, r4
 801b81c:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801b820:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801b824:	e75e      	b.n	801b6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b826:	9904      	ldr	r1, [sp, #16]
 801b828:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801b82c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801b830:	4433      	add	r3, r6
 801b832:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b836:	e5df      	b.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b838:	9f06      	ldr	r7, [sp, #24]
 801b83a:	9b04      	ldr	r3, [sp, #16]
 801b83c:	1bc9      	subs	r1, r1, r7
 801b83e:	fa0f f78a 	sxth.w	r7, sl
 801b842:	b289      	uxth	r1, r1
 801b844:	429f      	cmp	r7, r3
 801b846:	fa0f fe81 	sxth.w	lr, r1
 801b84a:	dd23      	ble.n	801b894 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801b84c:	9a05      	ldr	r2, [sp, #20]
 801b84e:	eba9 0000 	sub.w	r0, r9, r0
 801b852:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b856:	ebaa 0202 	sub.w	r2, sl, r2
 801b85a:	9d07      	ldr	r5, [sp, #28]
 801b85c:	fb0e f000 	mul.w	r0, lr, r0
 801b860:	b292      	uxth	r2, r2
 801b862:	eba5 0a03 	sub.w	sl, r5, r3
 801b866:	9b02      	ldr	r3, [sp, #8]
 801b868:	b214      	sxth	r4, r2
 801b86a:	00db      	lsls	r3, r3, #3
 801b86c:	fb04 fa0a 	mul.w	sl, r4, sl
 801b870:	445b      	add	r3, fp
 801b872:	4550      	cmp	r0, sl
 801b874:	db03      	blt.n	801b87e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801b876:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801b87a:	4494      	add	ip, r2
 801b87c:	e732      	b.n	801b6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b87e:	9a04      	ldr	r2, [sp, #16]
 801b880:	4431      	add	r1, r6
 801b882:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801b886:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801b88a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801b88e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b892:	e75c      	b.n	801b74e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801b894:	9b08      	ldr	r3, [sp, #32]
 801b896:	2d06      	cmp	r5, #6
 801b898:	eba3 0308 	sub.w	r3, r3, r8
 801b89c:	b29b      	uxth	r3, r3
 801b89e:	b218      	sxth	r0, r3
 801b8a0:	d813      	bhi.n	801b8ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801b8a2:	9b07      	ldr	r3, [sp, #28]
 801b8a4:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801b8a8:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801b8ac:	1c6b      	adds	r3, r5, #1
 801b8ae:	9901      	ldr	r1, [sp, #4]
 801b8b0:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801b8b4:	9b01      	ldr	r3, [sp, #4]
 801b8b6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801b8ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b8be:	805a      	strh	r2, [r3, #2]
 801b8c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8c2:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b8c6:	809a      	strh	r2, [r3, #4]
 801b8c8:	e75f      	b.n	801b78a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b8ca:	9c02      	ldr	r4, [sp, #8]
 801b8cc:	4570      	cmp	r0, lr
 801b8ce:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b8d2:	db0d      	blt.n	801b8f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801b8d4:	4431      	add	r1, r6
 801b8d6:	9b06      	ldr	r3, [sp, #24]
 801b8d8:	445c      	add	r4, fp
 801b8da:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801b8de:	b289      	uxth	r1, r1
 801b8e0:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801b8e4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b8e8:	4419      	add	r1, r3
 801b8ea:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801b8ee:	e583      	b.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b8f0:	445c      	add	r4, fp
 801b8f2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801b8f6:	e79b      	b.n	801b830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b8f8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b8fc:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801b900:	1e65      	subs	r5, r4, #1
 801b902:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801b906:	b2ad      	uxth	r5, r5
 801b908:	42b5      	cmp	r5, r6
 801b90a:	d044      	beq.n	801b996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b90c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b910:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801b914:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801b918:	4282      	cmp	r2, r0
 801b91a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801b91e:	d11f      	bne.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b920:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801b924:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b928:	459c      	cmp	ip, r3
 801b92a:	d119      	bne.n	801b960 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b92c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801b930:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b934:	19d8      	adds	r0, r3, r7
 801b936:	b200      	sxth	r0, r0
 801b938:	4288      	cmp	r0, r1
 801b93a:	d109      	bne.n	801b950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801b93c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801b940:	4413      	add	r3, r2
 801b942:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801b946:	4629      	mov	r1, r5
 801b948:	9801      	ldr	r0, [sp, #4]
 801b94a:	f7ff fd2b 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b94e:	e003      	b.n	801b958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b950:	4411      	add	r1, r2
 801b952:	b209      	sxth	r1, r1
 801b954:	42b9      	cmp	r1, r7
 801b956:	d0f3      	beq.n	801b940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801b958:	3d01      	subs	r5, #1
 801b95a:	3c08      	subs	r4, #8
 801b95c:	b2ad      	uxth	r5, r5
 801b95e:	e7d3      	b.n	801b908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801b960:	42b9      	cmp	r1, r7
 801b962:	d1f9      	bne.n	801b958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b964:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801b968:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b96c:	4299      	cmp	r1, r3
 801b96e:	d1f3      	bne.n	801b958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b970:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b974:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b978:	181f      	adds	r7, r3, r0
 801b97a:	b23f      	sxth	r7, r7
 801b97c:	42ba      	cmp	r2, r7
 801b97e:	d105      	bne.n	801b98c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801b980:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801b984:	440b      	add	r3, r1
 801b986:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b98a:	e7dc      	b.n	801b946 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801b98c:	440a      	add	r2, r1
 801b98e:	b212      	sxth	r2, r2
 801b990:	4290      	cmp	r0, r2
 801b992:	d1e1      	bne.n	801b958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b994:	e7f6      	b.n	801b984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801b996:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801b99a:	2e07      	cmp	r6, #7
 801b99c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b9a0:	d812      	bhi.n	801b9c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b9a2:	1c75      	adds	r5, r6, #1
 801b9a4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b9a8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801b9ac:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801b9b0:	9d01      	ldr	r5, [sp, #4]
 801b9b2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b9b6:	442c      	add	r4, r5
 801b9b8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801b9bc:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b9c0:	8061      	strh	r1, [r4, #2]
 801b9c2:	80a2      	strh	r2, [r4, #4]
 801b9c4:	80e3      	strh	r3, [r4, #6]
 801b9c6:	e581      	b.n	801b4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b9c8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b9cc:	3e01      	subs	r6, #1
 801b9ce:	445c      	add	r4, fp
 801b9d0:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801b9d4:	f04f 37ff 	mov.w	r7, #4294967295
 801b9d8:	2500      	movs	r5, #0
 801b9da:	9305      	str	r3, [sp, #20]
 801b9dc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b9e0:	1e72      	subs	r2, r6, #1
 801b9e2:	9302      	str	r3, [sp, #8]
 801b9e4:	4691      	mov	r9, r2
 801b9e6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b9ea:	9304      	str	r3, [sp, #16]
 801b9ec:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801b9f0:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b9f4:	6818      	ldr	r0, [r3, #0]
 801b9f6:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b9fa:	9207      	str	r2, [sp, #28]
 801b9fc:	bf16      	itet	ne
 801b9fe:	9905      	ldrne	r1, [sp, #20]
 801ba00:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801ba04:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801ba08:	9306      	str	r3, [sp, #24]
 801ba0a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801ba0e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801ba12:	fb18 f801 	smulbb	r8, r8, r1
 801ba16:	6859      	ldr	r1, [r3, #4]
 801ba18:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ba1c:	4671      	mov	r1, lr
 801ba1e:	a80c      	add	r0, sp, #48	@ 0x30
 801ba20:	f7f8 fa7c 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba24:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801ba28:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801ba2c:	f04f 0c08 	mov.w	ip, #8
 801ba30:	9b04      	ldr	r3, [sp, #16]
 801ba32:	9a02      	ldr	r2, [sp, #8]
 801ba34:	fb10 f001 	smulbb	r0, r0, r1
 801ba38:	fb02 8803 	mla	r8, r2, r3, r8
 801ba3c:	eba0 0108 	sub.w	r1, r0, r8
 801ba40:	fb90 f0fc 	sdiv	r0, r0, ip
 801ba44:	4288      	cmp	r0, r1
 801ba46:	dc20      	bgt.n	801ba8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801ba48:	4551      	cmp	r1, sl
 801ba4a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ba4e:	da03      	bge.n	801ba58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801ba50:	b1d9      	cbz	r1, 801ba8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801ba52:	468a      	mov	sl, r1
 801ba54:	464f      	mov	r7, r9
 801ba56:	4635      	mov	r5, r6
 801ba58:	f109 39ff 	add.w	r9, r9, #4294967295
 801ba5c:	f119 0f02 	cmn.w	r9, #2
 801ba60:	d1c6      	bne.n	801b9f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801ba62:	4616      	mov	r6, r2
 801ba64:	3201      	adds	r2, #1
 801ba66:	f1a4 0408 	sub.w	r4, r4, #8
 801ba6a:	d1b7      	bne.n	801b9dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801ba6c:	9b01      	ldr	r3, [sp, #4]
 801ba6e:	b2ac      	uxth	r4, r5
 801ba70:	00ed      	lsls	r5, r5, #3
 801ba72:	1958      	adds	r0, r3, r5
 801ba74:	1c7b      	adds	r3, r7, #1
 801ba76:	d10b      	bne.n	801ba90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801ba78:	4601      	mov	r1, r0
 801ba7a:	9803      	ldr	r0, [sp, #12]
 801ba7c:	f7f8 fa4e 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba80:	4621      	mov	r1, r4
 801ba82:	9801      	ldr	r0, [sp, #4]
 801ba84:	f7ff fc8e 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ba88:	e4b6      	b.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ba8a:	464f      	mov	r7, r9
 801ba8c:	4635      	mov	r5, r6
 801ba8e:	e7ed      	b.n	801ba6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801ba90:	9b01      	ldr	r3, [sp, #4]
 801ba92:	00ff      	lsls	r7, r7, #3
 801ba94:	445d      	add	r5, fp
 801ba96:	19d9      	adds	r1, r3, r7
 801ba98:	445f      	add	r7, fp
 801ba9a:	f7f8 fa3f 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ba9e:	9b03      	ldr	r3, [sp, #12]
 801baa0:	cb03      	ldmia	r3!, {r0, r1}
 801baa2:	9b03      	ldr	r3, [sp, #12]
 801baa4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801baa8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801baac:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801bab0:	6869      	ldr	r1, [r5, #4]
 801bab2:	c303      	stmia	r3!, {r0, r1}
 801bab4:	e7e4      	b.n	801ba80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801bab6:	bf00      	nop

0801bab8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801babc:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801bac0:	b09b      	sub	sp, #108	@ 0x6c
 801bac2:	4604      	mov	r4, r0
 801bac4:	4630      	mov	r0, r6
 801bac6:	f7f7 feea 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801baca:	4605      	mov	r5, r0
 801bacc:	b948      	cbnz	r0, 801bae2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801bace:	6823      	ldr	r3, [r4, #0]
 801bad0:	4620      	mov	r0, r4
 801bad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bad4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bad8:	4798      	blx	r3
 801bada:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801bade:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801bae2:	4bc5      	ldr	r3, [pc, #788]	@ (801bdf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d03f      	beq.n	801bb6a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801baea:	4dc4      	ldr	r5, [pc, #784]	@ (801bdfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801baec:	4628      	mov	r0, r5
 801baee:	f7f7 fed6 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801baf2:	4606      	mov	r6, r0
 801baf4:	2800      	cmp	r0, #0
 801baf6:	d138      	bne.n	801bb6a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801baf8:	4628      	mov	r0, r5
 801bafa:	f7ff f971 	bl	801ade0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bafe:	6823      	ldr	r3, [r4, #0]
 801bb00:	6829      	ldr	r1, [r5, #0]
 801bb02:	4620      	mov	r0, r4
 801bb04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bb06:	686a      	ldr	r2, [r5, #4]
 801bb08:	4798      	blx	r3
 801bb0a:	802e      	strh	r6, [r5, #0]
 801bb0c:	806e      	strh	r6, [r5, #2]
 801bb0e:	80ae      	strh	r6, [r5, #4]
 801bb10:	80ee      	strh	r6, [r5, #6]
 801bb12:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801bb16:	4dba      	ldr	r5, [pc, #744]	@ (801be00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801bb18:	4640      	mov	r0, r8
 801bb1a:	f7ff fbe8 	bl	801b2ee <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bb1e:	882e      	ldrh	r6, [r5, #0]
 801bb20:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801bb24:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801bb28:	4633      	mov	r3, r6
 801bb2a:	42bb      	cmp	r3, r7
 801bb2c:	d224      	bcs.n	801bb78 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801bb2e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801bb32:	2907      	cmp	r1, #7
 801bb34:	d816      	bhi.n	801bb64 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801bb36:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801bb3a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801bb3e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801bb42:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801bb46:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801bb4a:	1c4a      	adds	r2, r1, #1
 801bb4c:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801bb50:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801bb54:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801bb58:	f8a2 a002 	strh.w	sl, [r2, #2]
 801bb5c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801bb60:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bb64:	3301      	adds	r3, #1
 801bb66:	b29b      	uxth	r3, r3
 801bb68:	e7df      	b.n	801bb2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801bb6a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d1cf      	bne.n	801bb12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801bb72:	b01b      	add	sp, #108	@ 0x6c
 801bb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb78:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801bb7c:	42b3      	cmp	r3, r6
 801bb7e:	d90c      	bls.n	801bb9a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801bb80:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bb84:	6822      	ldr	r2, [r4, #0]
 801bb86:	3601      	adds	r6, #1
 801bb88:	4620      	mov	r0, r4
 801bb8a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801bb8c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801bb90:	b2b6      	uxth	r6, r6
 801bb92:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801bb96:	47b8      	blx	r7
 801bb98:	e7ee      	b.n	801bb78 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801bb9a:	4a9a      	ldr	r2, [pc, #616]	@ (801be04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801bb9c:	6813      	ldr	r3, [r2, #0]
 801bb9e:	4691      	mov	r9, r2
 801bba0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801bba4:	2b01      	cmp	r3, #1
 801bba6:	f040 80e0 	bne.w	801bd6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801bbaa:	8829      	ldrh	r1, [r5, #0]
 801bbac:	2600      	movs	r6, #0
 801bbae:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801bbb2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801bbb6:	33ae      	adds	r3, #174	@ 0xae
 801bbb8:	428f      	cmp	r7, r1
 801bbba:	f103 0308 	add.w	r3, r3, #8
 801bbbe:	dd0a      	ble.n	801bbd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801bbc0:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801bbc4:	3101      	adds	r1, #1
 801bbc6:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801bbca:	4402      	add	r2, r0
 801bbcc:	b212      	sxth	r2, r2
 801bbce:	4296      	cmp	r6, r2
 801bbd0:	bfb8      	it	lt
 801bbd2:	4616      	movlt	r6, r2
 801bbd4:	e7f0      	b.n	801bbb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801bbd6:	4b8c      	ldr	r3, [pc, #560]	@ (801be08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801bbd8:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801be04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801bbdc:	881b      	ldrh	r3, [r3, #0]
 801bbde:	2b0f      	cmp	r3, #15
 801bbe0:	bf8c      	ite	hi
 801bbe2:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801bbe6:	f04f 0b01 	movls.w	fp, #1
 801bbea:	2300      	movs	r3, #0
 801bbec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bbf0:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801bbf4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801bbf8:	4b82      	ldr	r3, [pc, #520]	@ (801be04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801bbfa:	4438      	add	r0, r7
 801bbfc:	b207      	sxth	r7, r0
 801bbfe:	6818      	ldr	r0, [r3, #0]
 801bc00:	42b7      	cmp	r7, r6
 801bc02:	6803      	ldr	r3, [r0, #0]
 801bc04:	f280 8083 	bge.w	801bd0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801bc08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801bc0c:	4798      	blx	r3
 801bc0e:	eb07 030b 	add.w	r3, r7, fp
 801bc12:	4298      	cmp	r0, r3
 801bc14:	da07      	bge.n	801bc26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801bc16:	42b0      	cmp	r0, r6
 801bc18:	da05      	bge.n	801bc26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801bc1a:	4287      	cmp	r7, r0
 801bc1c:	dd6c      	ble.n	801bcf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bc1e:	2f00      	cmp	r7, #0
 801bc20:	dd6a      	ble.n	801bcf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bc22:	4630      	mov	r0, r6
 801bc24:	e004      	b.n	801bc30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801bc26:	4287      	cmp	r7, r0
 801bc28:	dcfb      	bgt.n	801bc22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801bc2a:	42b0      	cmp	r0, r6
 801bc2c:	bfa8      	it	ge
 801bc2e:	4630      	movge	r0, r6
 801bc30:	4b76      	ldr	r3, [pc, #472]	@ (801be0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801bc32:	1bc0      	subs	r0, r0, r7
 801bc34:	2200      	movs	r2, #0
 801bc36:	f8ad 7016 	strh.w	r7, [sp, #22]
 801bc3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc3e:	882f      	ldrh	r7, [r5, #0]
 801bc40:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bc44:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bc48:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bc4c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801bc50:	42bb      	cmp	r3, r7
 801bc52:	d9cd      	bls.n	801bbf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801bc54:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801bc58:	ab07      	add	r3, sp, #28
 801bc5a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801bc5e:	6851      	ldr	r1, [r2, #4]
 801bc60:	c303      	stmia	r3!, {r0, r1}
 801bc62:	a905      	add	r1, sp, #20
 801bc64:	a807      	add	r0, sp, #28
 801bc66:	f7ff f9aa 	bl	801afbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bc6a:	2800      	cmp	r0, #0
 801bc6c:	d04c      	beq.n	801bd08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801bc6e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801bc72:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801bc76:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801bc7a:	4686      	mov	lr, r0
 801bc7c:	4290      	cmp	r0, r2
 801bc7e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801bc82:	4450      	add	r0, sl
 801bc84:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801bc88:	bfb8      	it	lt
 801bc8a:	4696      	movlt	lr, r2
 801bc8c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bc90:	4452      	add	r2, sl
 801bc92:	b280      	uxth	r0, r0
 801bc94:	4299      	cmp	r1, r3
 801bc96:	468c      	mov	ip, r1
 801bc98:	b292      	uxth	r2, r2
 801bc9a:	9302      	str	r3, [sp, #8]
 801bc9c:	bfb8      	it	lt
 801bc9e:	469c      	movlt	ip, r3
 801bca0:	b203      	sxth	r3, r0
 801bca2:	fa0f fa82 	sxth.w	sl, r2
 801bca6:	f8ad e01c 	strh.w	lr, [sp, #28]
 801bcaa:	f8ad c01e 	strh.w	ip, [sp, #30]
 801bcae:	4553      	cmp	r3, sl
 801bcb0:	bfb8      	it	lt
 801bcb2:	4602      	movlt	r2, r0
 801bcb4:	9b02      	ldr	r3, [sp, #8]
 801bcb6:	eba2 020e 	sub.w	r2, r2, lr
 801bcba:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bcbe:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801bcc2:	4411      	add	r1, r2
 801bcc4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bcc8:	4413      	add	r3, r2
 801bcca:	b289      	uxth	r1, r1
 801bccc:	b29b      	uxth	r3, r3
 801bcce:	b208      	sxth	r0, r1
 801bcd0:	b21a      	sxth	r2, r3
 801bcd2:	4290      	cmp	r0, r2
 801bcd4:	bfb8      	it	lt
 801bcd6:	460b      	movlt	r3, r1
 801bcd8:	eba3 030c 	sub.w	r3, r3, ip
 801bcdc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bce0:	a807      	add	r0, sp, #28
 801bce2:	f7f7 fddc 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bce6:	b920      	cbnz	r0, 801bcf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801bce8:	6823      	ldr	r3, [r4, #0]
 801bcea:	a907      	add	r1, sp, #28
 801bcec:	4620      	mov	r0, r4
 801bcee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bcf0:	4798      	blx	r3
 801bcf2:	3701      	adds	r7, #1
 801bcf4:	b2bf      	uxth	r7, r7
 801bcf6:	e7a9      	b.n	801bc4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801bcf8:	f8d9 0000 	ldr.w	r0, [r9]
 801bcfc:	2101      	movs	r1, #1
 801bcfe:	6803      	ldr	r3, [r0, #0]
 801bd00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801bd04:	4798      	blx	r3
 801bd06:	e773      	b.n	801bbf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801bd08:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801bd0c:	e7e8      	b.n	801bce0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801bd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd10:	4798      	blx	r3
 801bd12:	4b3f      	ldr	r3, [pc, #252]	@ (801be10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801bd14:	781b      	ldrb	r3, [r3, #0]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	f43f af2b 	beq.w	801bb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801bd22:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801bd26:	882b      	ldrh	r3, [r5, #0]
 801bd28:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801bd2c:	42ab      	cmp	r3, r5
 801bd2e:	f4bf af20 	bcs.w	801bb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bd32:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801bd36:	2907      	cmp	r1, #7
 801bd38:	d814      	bhi.n	801bd64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801bd3a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801bd3e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801bd42:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801bd46:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801bd4a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801bd4e:	1c4a      	adds	r2, r1, #1
 801bd50:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801bd54:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801bd58:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801bd5c:	f8a2 c002 	strh.w	ip, [r2, #2]
 801bd60:	8097      	strh	r7, [r2, #4]
 801bd62:	80d6      	strh	r6, [r2, #6]
 801bd64:	3301      	adds	r3, #1
 801bd66:	b29b      	uxth	r3, r3
 801bd68:	e7e0      	b.n	801bd2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801bd6a:	2b02      	cmp	r3, #2
 801bd6c:	f040 8133 	bne.w	801bfd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801bd70:	4b28      	ldr	r3, [pc, #160]	@ (801be14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801bd72:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801bd76:	781b      	ldrb	r3, [r3, #0]
 801bd78:	2b01      	cmp	r3, #1
 801bd7a:	f000 8098 	beq.w	801beae <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bd7e:	882a      	ldrh	r2, [r5, #0]
 801bd80:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801bd84:	3201      	adds	r2, #1
 801bd86:	b292      	uxth	r2, r2
 801bd88:	2900      	cmp	r1, #0
 801bd8a:	d0c2      	beq.n	801bd12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bd8c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801bd90:	4694      	mov	ip, r2
 801bd92:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801bd96:	f04f 0900 	mov.w	r9, #0
 801bd9a:	441e      	add	r6, r3
 801bd9c:	b236      	sxth	r6, r6
 801bd9e:	fa1f f38c 	uxth.w	r3, ip
 801bda2:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801bda6:	4299      	cmp	r1, r3
 801bda8:	f240 80be 	bls.w	801bf28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801bdac:	4427      	add	r7, r4
 801bdae:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801bdb2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801bdb6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801bdba:	4283      	cmp	r3, r0
 801bdbc:	f340 80a0 	ble.w	801bf00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801bdc0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801bdc4:	46e1      	mov	r9, ip
 801bdc6:	4406      	add	r6, r0
 801bdc8:	b236      	sxth	r6, r6
 801bdca:	429e      	cmp	r6, r3
 801bdcc:	bfa8      	it	ge
 801bdce:	461e      	movge	r6, r3
 801bdd0:	f10c 0c01 	add.w	ip, ip, #1
 801bdd4:	e7e3      	b.n	801bd9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801bdd6:	d10a      	bne.n	801bdee <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801bdd8:	4562      	cmp	r2, ip
 801bdda:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801bdde:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801bde2:	bfb8      	it	lt
 801bde4:	4662      	movlt	r2, ip
 801bde6:	4288      	cmp	r0, r1
 801bde8:	bfb8      	it	lt
 801bdea:	461f      	movlt	r7, r3
 801bdec:	e086      	b.n	801befc <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801bdee:	428a      	cmp	r2, r1
 801bdf0:	bfb8      	it	lt
 801bdf2:	460a      	movlt	r2, r1
 801bdf4:	e082      	b.n	801befc <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801bdf6:	bf00      	nop
 801bdf8:	240287b0 	.word	0x240287b0
 801bdfc:	240287bc 	.word	0x240287bc
 801be00:	2400007c 	.word	0x2400007c
 801be04:	24028770 	.word	0x24028770
 801be08:	24028766 	.word	0x24028766
 801be0c:	24028764 	.word	0x24028764
 801be10:	2402876e 	.word	0x2402876e
 801be14:	24028768 	.word	0x24028768
 801be18:	19a1      	adds	r1, r4, r6
 801be1a:	ab07      	add	r3, sp, #28
 801be1c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801be20:	6849      	ldr	r1, [r1, #4]
 801be22:	c303      	stmia	r3!, {r0, r1}
 801be24:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801be28:	a807      	add	r0, sp, #28
 801be2a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be2e:	2b13      	cmp	r3, #19
 801be30:	440b      	add	r3, r1
 801be32:	bfd8      	it	le
 801be34:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801be38:	1a9b      	subs	r3, r3, r2
 801be3a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801be3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801be42:	f7fe ffe7 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be46:	a807      	add	r0, sp, #28
 801be48:	f7f7 fd29 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801be4c:	bb78      	cbnz	r0, 801beae <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801be4e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801be52:	4426      	add	r6, r4
 801be54:	f8d9 0000 	ldr.w	r0, [r9]
 801be58:	f1bc 0f14 	cmp.w	ip, #20
 801be5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801be60:	f8d0 e000 	ldr.w	lr, [r0]
 801be64:	bfa8      	it	ge
 801be66:	f04f 0c14 	movge.w	ip, #20
 801be6a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801be6e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801be72:	fa1f fc8c 	uxth.w	ip, ip
 801be76:	f8cd c000 	str.w	ip, [sp]
 801be7a:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801be7e:	47d8      	blx	fp
 801be80:	4683      	mov	fp, r0
 801be82:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801be86:	a807      	add	r0, sp, #28
 801be88:	f7fe ffaa 	bl	801ade0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801be8c:	6823      	ldr	r3, [r4, #0]
 801be8e:	4620      	mov	r0, r4
 801be90:	a907      	add	r1, sp, #28
 801be92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be94:	4798      	blx	r3
 801be96:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801be9a:	eba0 000b 	sub.w	r0, r0, fp
 801be9e:	b200      	sxth	r0, r0
 801bea0:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801bea4:	b918      	cbnz	r0, 801beae <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bea6:	b2b9      	uxth	r1, r7
 801bea8:	4650      	mov	r0, sl
 801beaa:	f7ff fa7b 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801beae:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801beb2:	f1bb 0f00 	cmp.w	fp, #0
 801beb6:	f43f af2c 	beq.w	801bd12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801beba:	882b      	ldrh	r3, [r5, #0]
 801bebc:	2700      	movs	r7, #0
 801bebe:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801bec2:	3301      	adds	r3, #1
 801bec4:	b29b      	uxth	r3, r3
 801bec6:	b299      	uxth	r1, r3
 801bec8:	00fe      	lsls	r6, r7, #3
 801beca:	458b      	cmp	fp, r1
 801becc:	d9a4      	bls.n	801be18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801bece:	4426      	add	r6, r4
 801bed0:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801bed4:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801bed8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801bedc:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801bee0:	4408      	add	r0, r1
 801bee2:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801bee6:	4461      	add	r1, ip
 801bee8:	b200      	sxth	r0, r0
 801beea:	b209      	sxth	r1, r1
 801beec:	4288      	cmp	r0, r1
 801beee:	f6bf af72 	bge.w	801bdd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801bef2:	4584      	cmp	ip, r0
 801bef4:	4662      	mov	r2, ip
 801bef6:	461f      	mov	r7, r3
 801bef8:	bfb8      	it	lt
 801befa:	4602      	movlt	r2, r0
 801befc:	3301      	adds	r3, #1
 801befe:	e7e2      	b.n	801bec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801bf00:	d10e      	bne.n	801bf20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801bf02:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801bf06:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801bf0a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801bf0e:	4473      	add	r3, lr
 801bf10:	b21b      	sxth	r3, r3
 801bf12:	429e      	cmp	r6, r3
 801bf14:	bfa8      	it	ge
 801bf16:	461e      	movge	r6, r3
 801bf18:	4287      	cmp	r7, r0
 801bf1a:	bfb8      	it	lt
 801bf1c:	46e1      	movlt	r9, ip
 801bf1e:	e757      	b.n	801bdd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801bf20:	4286      	cmp	r6, r0
 801bf22:	bfa8      	it	ge
 801bf24:	4606      	movge	r6, r0
 801bf26:	e753      	b.n	801bdd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801bf28:	eb0a 0007 	add.w	r0, sl, r7
 801bf2c:	4427      	add	r7, r4
 801bf2e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801bf32:	f1bb 0f13 	cmp.w	fp, #19
 801bf36:	bfdc      	itt	le
 801bf38:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801bf3c:	445e      	addle	r6, fp
 801bf3e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801bf42:	bfd8      	it	le
 801bf44:	b236      	sxthle	r6, r6
 801bf46:	f7f7 fcaa 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf4a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801bf4e:	2800      	cmp	r0, #0
 801bf50:	f47f af1a 	bne.w	801bd88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801bf54:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801bf58:	fa1f fb8b 	uxth.w	fp, fp
 801bf5c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bf60:	1ab6      	subs	r6, r6, r2
 801bf62:	4829      	ldr	r0, [pc, #164]	@ (801c008 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801bf64:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801bf68:	2e14      	cmp	r6, #20
 801bf6a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801bf6e:	6800      	ldr	r0, [r0, #0]
 801bf70:	bfa8      	it	ge
 801bf72:	2614      	movge	r6, #20
 801bf74:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bf78:	f8ad 201e 	strh.w	r2, [sp, #30]
 801bf7c:	b289      	uxth	r1, r1
 801bf7e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bf82:	b2b6      	uxth	r6, r6
 801bf84:	f8d0 c000 	ldr.w	ip, [r0]
 801bf88:	b292      	uxth	r2, r2
 801bf8a:	455e      	cmp	r6, fp
 801bf8c:	bf94      	ite	ls
 801bf8e:	9600      	strls	r6, [sp, #0]
 801bf90:	f8cd b000 	strhi.w	fp, [sp]
 801bf94:	b29b      	uxth	r3, r3
 801bf96:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801bf9a:	47b0      	blx	r6
 801bf9c:	6823      	ldr	r3, [r4, #0]
 801bf9e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bfa2:	a907      	add	r1, sp, #28
 801bfa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	4798      	blx	r3
 801bfaa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801bfae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801bfb2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801bfb6:	1a5b      	subs	r3, r3, r1
 801bfb8:	440a      	add	r2, r1
 801bfba:	b21b      	sxth	r3, r3
 801bfbc:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801bfc0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	f47f aeda 	bne.w	801bd7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801bfca:	fa1f f189 	uxth.w	r1, r9
 801bfce:	4650      	mov	r0, sl
 801bfd0:	f7ff f9e8 	bl	801b3a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bfd4:	e6d3      	b.n	801bd7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801bfd6:	882e      	ldrh	r6, [r5, #0]
 801bfd8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801bfdc:	42b3      	cmp	r3, r6
 801bfde:	f67f ae98 	bls.w	801bd12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bfe2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801bfe6:	ab07      	add	r3, sp, #28
 801bfe8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801bfec:	6851      	ldr	r1, [r2, #4]
 801bfee:	c303      	stmia	r3!, {r0, r1}
 801bff0:	a807      	add	r0, sp, #28
 801bff2:	f7f7 fc54 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bff6:	b920      	cbnz	r0, 801c002 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801bff8:	6823      	ldr	r3, [r4, #0]
 801bffa:	a907      	add	r1, sp, #28
 801bffc:	4620      	mov	r0, r4
 801bffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c000:	4798      	blx	r3
 801c002:	3601      	adds	r6, #1
 801c004:	b2b6      	uxth	r6, r6
 801c006:	e7e7      	b.n	801bfd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801c008:	24028770 	.word	0x24028770

0801c00c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c00c:	4b03      	ldr	r3, [pc, #12]	@ (801c01c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c00e:	2200      	movs	r2, #0
 801c010:	801a      	strh	r2, [r3, #0]
 801c012:	805a      	strh	r2, [r3, #2]
 801c014:	809a      	strh	r2, [r3, #4]
 801c016:	80da      	strh	r2, [r3, #6]
 801c018:	4770      	bx	lr
 801c01a:	bf00      	nop
 801c01c:	240287bc 	.word	0x240287bc

0801c020 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c024:	b09d      	sub	sp, #116	@ 0x74
 801c026:	4606      	mov	r6, r0
 801c028:	4614      	mov	r4, r2
 801c02a:	468a      	mov	sl, r1
 801c02c:	a803      	add	r0, sp, #12
 801c02e:	461d      	mov	r5, r3
 801c030:	f001 f9ad 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 801c034:	6833      	ldr	r3, [r6, #0]
 801c036:	4630      	mov	r0, r6
 801c038:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801c03c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c03e:	4798      	blx	r3
 801c040:	6833      	ldr	r3, [r6, #0]
 801c042:	4607      	mov	r7, r0
 801c044:	4630      	mov	r0, r6
 801c046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c048:	4798      	blx	r3
 801c04a:	462a      	mov	r2, r5
 801c04c:	2500      	movs	r5, #0
 801c04e:	4621      	mov	r1, r4
 801c050:	9000      	str	r0, [sp, #0]
 801c052:	463b      	mov	r3, r7
 801c054:	462c      	mov	r4, r5
 801c056:	46a9      	mov	r9, r5
 801c058:	46a8      	mov	r8, r5
 801c05a:	a803      	add	r0, sp, #12
 801c05c:	f001 f9f2 	bl	801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c060:	2300      	movs	r3, #0
 801c062:	9302      	str	r3, [sp, #8]
 801c064:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801c068:	429c      	cmp	r4, r3
 801c06a:	d002      	beq.n	801c072 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c06c:	455c      	cmp	r4, fp
 801c06e:	bf18      	it	ne
 801c070:	4625      	movne	r5, r4
 801c072:	ab02      	add	r3, sp, #8
 801c074:	4632      	mov	r2, r6
 801c076:	4651      	mov	r1, sl
 801c078:	a803      	add	r0, sp, #12
 801c07a:	f001 fce9 	bl	801da50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c07e:	4604      	mov	r4, r0
 801c080:	b108      	cbz	r0, 801c086 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c082:	280a      	cmp	r0, #10
 801c084:	d10a      	bne.n	801c09c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c086:	45c1      	cmp	r9, r8
 801c088:	bf38      	it	cc
 801c08a:	46c1      	movcc	r9, r8
 801c08c:	f04f 0800 	mov.w	r8, #0
 801c090:	2c00      	cmp	r4, #0
 801c092:	d1e5      	bne.n	801c060 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c094:	4648      	mov	r0, r9
 801c096:	b01d      	add	sp, #116	@ 0x74
 801c098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c09c:	9a02      	ldr	r2, [sp, #8]
 801c09e:	2a00      	cmp	r2, #0
 801c0a0:	d0de      	beq.n	801c060 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c0a2:	7b57      	ldrb	r7, [r2, #13]
 801c0a4:	4629      	mov	r1, r5
 801c0a6:	6833      	ldr	r3, [r6, #0]
 801c0a8:	007f      	lsls	r7, r7, #1
 801c0aa:	8894      	ldrh	r4, [r2, #4]
 801c0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c0ae:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801c0b2:	7a97      	ldrb	r7, [r2, #10]
 801c0b4:	4307      	orrs	r7, r0
 801c0b6:	4630      	mov	r0, r6
 801c0b8:	4798      	blx	r3
 801c0ba:	4438      	add	r0, r7
 801c0bc:	4480      	add	r8, r0
 801c0be:	fa1f f888 	uxth.w	r8, r8
 801c0c2:	e7e5      	b.n	801c090 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c0c4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c0c4:	b508      	push	{r3, lr}
 801c0c6:	6803      	ldr	r3, [r0, #0]
 801c0c8:	68db      	ldr	r3, [r3, #12]
 801c0ca:	4798      	blx	r3
 801c0cc:	b128      	cbz	r0, 801c0da <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c0ce:	7b43      	ldrb	r3, [r0, #13]
 801c0d0:	7a80      	ldrb	r0, [r0, #10]
 801c0d2:	005b      	lsls	r3, r3, #1
 801c0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c0d8:	4318      	orrs	r0, r3
 801c0da:	bd08      	pop	{r3, pc}

0801c0dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c0dc:	b40e      	push	{r1, r2, r3}
 801c0de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0e0:	b09e      	sub	sp, #120	@ 0x78
 801c0e2:	4605      	mov	r5, r0
 801c0e4:	ab23      	add	r3, sp, #140	@ 0x8c
 801c0e6:	a805      	add	r0, sp, #20
 801c0e8:	f853 4b04 	ldr.w	r4, [r3], #4
 801c0ec:	9303      	str	r3, [sp, #12]
 801c0ee:	f001 f94e 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 801c0f2:	682b      	ldr	r3, [r5, #0]
 801c0f4:	4628      	mov	r0, r5
 801c0f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0f8:	4798      	blx	r3
 801c0fa:	682b      	ldr	r3, [r5, #0]
 801c0fc:	4606      	mov	r6, r0
 801c0fe:	4628      	mov	r0, r5
 801c100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c102:	4798      	blx	r3
 801c104:	4633      	mov	r3, r6
 801c106:	4621      	mov	r1, r4
 801c108:	ae1e      	add	r6, sp, #120	@ 0x78
 801c10a:	2400      	movs	r4, #0
 801c10c:	9000      	str	r0, [sp, #0]
 801c10e:	9a03      	ldr	r2, [sp, #12]
 801c110:	a805      	add	r0, sp, #20
 801c112:	f001 f997 	bl	801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c116:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c11a:	462a      	mov	r2, r5
 801c11c:	4633      	mov	r3, r6
 801c11e:	4621      	mov	r1, r4
 801c120:	a805      	add	r0, sp, #20
 801c122:	f001 fc95 	bl	801da50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c126:	b300      	cbz	r0, 801c16a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c128:	280a      	cmp	r0, #10
 801c12a:	d01a      	beq.n	801c162 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c12c:	9f04      	ldr	r7, [sp, #16]
 801c12e:	b1c7      	cbz	r7, 801c162 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c130:	7b78      	ldrb	r0, [r7, #13]
 801c132:	7a3b      	ldrb	r3, [r7, #8]
 801c134:	00c1      	lsls	r1, r0, #3
 801c136:	88ea      	ldrh	r2, [r5, #6]
 801c138:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c13c:	4319      	orrs	r1, r3
 801c13e:	0643      	lsls	r3, r0, #25
 801c140:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c144:	bf48      	it	mi
 801c146:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801c14a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c14e:	bf48      	it	mi
 801c150:	b219      	sxthmi	r1, r3
 801c152:	79fb      	ldrb	r3, [r7, #7]
 801c154:	4303      	orrs	r3, r0
 801c156:	4413      	add	r3, r2
 801c158:	1a5b      	subs	r3, r3, r1
 801c15a:	b21b      	sxth	r3, r3
 801c15c:	429c      	cmp	r4, r3
 801c15e:	bfb8      	it	lt
 801c160:	461c      	movlt	r4, r3
 801c162:	4633      	mov	r3, r6
 801c164:	462a      	mov	r2, r5
 801c166:	2100      	movs	r1, #0
 801c168:	e7da      	b.n	801c120 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c16a:	b2a0      	uxth	r0, r4
 801c16c:	b01e      	add	sp, #120	@ 0x78
 801c16e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c172:	b003      	add	sp, #12
 801c174:	4770      	bx	lr

0801c176 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801c176:	7a43      	ldrb	r3, [r0, #9]
 801c178:	8880      	ldrh	r0, [r0, #4]
 801c17a:	4418      	add	r0, r3
 801c17c:	b280      	uxth	r0, r0
 801c17e:	4770      	bx	lr

0801c180 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801c180:	6803      	ldr	r3, [r0, #0]
 801c182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c184:	4718      	bx	r3

0801c186 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c186:	b40e      	push	{r1, r2, r3}
 801c188:	b570      	push	{r4, r5, r6, lr}
 801c18a:	b09d      	sub	sp, #116	@ 0x74
 801c18c:	4604      	mov	r4, r0
 801c18e:	ab21      	add	r3, sp, #132	@ 0x84
 801c190:	a803      	add	r0, sp, #12
 801c192:	f853 5b04 	ldr.w	r5, [r3], #4
 801c196:	9302      	str	r3, [sp, #8]
 801c198:	f001 f8f9 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 801c19c:	6823      	ldr	r3, [r4, #0]
 801c19e:	4620      	mov	r0, r4
 801c1a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c1a2:	4798      	blx	r3
 801c1a4:	6823      	ldr	r3, [r4, #0]
 801c1a6:	4606      	mov	r6, r0
 801c1a8:	4620      	mov	r0, r4
 801c1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c1ac:	2401      	movs	r4, #1
 801c1ae:	4798      	blx	r3
 801c1b0:	4633      	mov	r3, r6
 801c1b2:	9000      	str	r0, [sp, #0]
 801c1b4:	4629      	mov	r1, r5
 801c1b6:	9a02      	ldr	r2, [sp, #8]
 801c1b8:	a803      	add	r0, sp, #12
 801c1ba:	f001 f943 	bl	801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c1be:	a803      	add	r0, sp, #12
 801c1c0:	f001 fd12 	bl	801dbe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c1c4:	b2a3      	uxth	r3, r4
 801c1c6:	b138      	cbz	r0, 801c1d8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c1c8:	280a      	cmp	r0, #10
 801c1ca:	a803      	add	r0, sp, #12
 801c1cc:	bf04      	itt	eq
 801c1ce:	3301      	addeq	r3, #1
 801c1d0:	b21c      	sxtheq	r4, r3
 801c1d2:	f001 fd09 	bl	801dbe8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c1d6:	e7f5      	b.n	801c1c4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c1d8:	4618      	mov	r0, r3
 801c1da:	b01d      	add	sp, #116	@ 0x74
 801c1dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1e0:	b003      	add	sp, #12
 801c1e2:	4770      	bx	lr

0801c1e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c1e4:	b40e      	push	{r1, r2, r3}
 801c1e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1e8:	b09e      	sub	sp, #120	@ 0x78
 801c1ea:	4604      	mov	r4, r0
 801c1ec:	ab23      	add	r3, sp, #140	@ 0x8c
 801c1ee:	a805      	add	r0, sp, #20
 801c1f0:	f853 5b04 	ldr.w	r5, [r3], #4
 801c1f4:	9303      	str	r3, [sp, #12]
 801c1f6:	f001 f8ca 	bl	801d38e <_ZN8touchgfx12TextProviderC1Ev>
 801c1fa:	6823      	ldr	r3, [r4, #0]
 801c1fc:	4620      	mov	r0, r4
 801c1fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c200:	4798      	blx	r3
 801c202:	6823      	ldr	r3, [r4, #0]
 801c204:	4606      	mov	r6, r0
 801c206:	4620      	mov	r0, r4
 801c208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c20a:	4798      	blx	r3
 801c20c:	4633      	mov	r3, r6
 801c20e:	4629      	mov	r1, r5
 801c210:	9000      	str	r0, [sp, #0]
 801c212:	9a03      	ldr	r2, [sp, #12]
 801c214:	a805      	add	r0, sp, #20
 801c216:	f001 f915 	bl	801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c21a:	ad1e      	add	r5, sp, #120	@ 0x78
 801c21c:	2100      	movs	r1, #0
 801c21e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801c222:	4622      	mov	r2, r4
 801c224:	a805      	add	r0, sp, #20
 801c226:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c22a:	462b      	mov	r3, r5
 801c22c:	f001 fc10 	bl	801da50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c230:	b1d8      	cbz	r0, 801c26a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801c232:	280a      	cmp	r0, #10
 801c234:	d012      	beq.n	801c25c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c236:	9804      	ldr	r0, [sp, #16]
 801c238:	b180      	cbz	r0, 801c25c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c23a:	7b47      	ldrb	r7, [r0, #13]
 801c23c:	88e2      	ldrh	r2, [r4, #6]
 801c23e:	00fb      	lsls	r3, r7, #3
 801c240:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c244:	7a03      	ldrb	r3, [r0, #8]
 801c246:	430b      	orrs	r3, r1
 801c248:	0679      	lsls	r1, r7, #25
 801c24a:	bf44      	itt	mi
 801c24c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c250:	b21b      	sxthmi	r3, r3
 801c252:	1ad3      	subs	r3, r2, r3
 801c254:	b21b      	sxth	r3, r3
 801c256:	429e      	cmp	r6, r3
 801c258:	bfa8      	it	ge
 801c25a:	461e      	movge	r6, r3
 801c25c:	462b      	mov	r3, r5
 801c25e:	4622      	mov	r2, r4
 801c260:	2100      	movs	r1, #0
 801c262:	a805      	add	r0, sp, #20
 801c264:	f001 fbf4 	bl	801da50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c268:	e7e2      	b.n	801c230 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c26a:	4630      	mov	r0, r6
 801c26c:	b01e      	add	sp, #120	@ 0x78
 801c26e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c272:	b003      	add	sp, #12
 801c274:	4770      	bx	lr

0801c276 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c276:	b513      	push	{r0, r1, r4, lr}
 801c278:	6803      	ldr	r3, [r0, #0]
 801c27a:	2400      	movs	r4, #0
 801c27c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c280:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c284:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c288:	4669      	mov	r1, sp
 801c28a:	691b      	ldr	r3, [r3, #16]
 801c28c:	9400      	str	r4, [sp, #0]
 801c28e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c292:	4798      	blx	r3
 801c294:	b002      	add	sp, #8
 801c296:	bd10      	pop	{r4, pc}

0801c298 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c298:	b538      	push	{r3, r4, r5, lr}
 801c29a:	680b      	ldr	r3, [r1, #0]
 801c29c:	460c      	mov	r4, r1
 801c29e:	4605      	mov	r5, r0
 801c2a0:	68db      	ldr	r3, [r3, #12]
 801c2a2:	4798      	blx	r3
 801c2a4:	6823      	ldr	r3, [r4, #0]
 801c2a6:	4620      	mov	r0, r4
 801c2a8:	4629      	mov	r1, r5
 801c2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2ac:	4798      	blx	r3
 801c2ae:	4628      	mov	r0, r5
 801c2b0:	bd38      	pop	{r3, r4, r5, pc}

0801c2b2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c2b2:	b410      	push	{r4}
 801c2b4:	880a      	ldrh	r2, [r1, #0]
 801c2b6:	8884      	ldrh	r4, [r0, #4]
 801c2b8:	4422      	add	r2, r4
 801c2ba:	800a      	strh	r2, [r1, #0]
 801c2bc:	884a      	ldrh	r2, [r1, #2]
 801c2be:	88c4      	ldrh	r4, [r0, #6]
 801c2c0:	4422      	add	r2, r4
 801c2c2:	804a      	strh	r2, [r1, #2]
 801c2c4:	6940      	ldr	r0, [r0, #20]
 801c2c6:	b120      	cbz	r0, 801c2d2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c2c8:	6803      	ldr	r3, [r0, #0]
 801c2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2d0:	4718      	bx	r3
 801c2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2d6:	4770      	bx	lr

0801c2d8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c2d8:	b570      	push	{r4, r5, r6, lr}
 801c2da:	8882      	ldrh	r2, [r0, #4]
 801c2dc:	460c      	mov	r4, r1
 801c2de:	880b      	ldrh	r3, [r1, #0]
 801c2e0:	4605      	mov	r5, r0
 801c2e2:	4413      	add	r3, r2
 801c2e4:	800b      	strh	r3, [r1, #0]
 801c2e6:	884b      	ldrh	r3, [r1, #2]
 801c2e8:	88c2      	ldrh	r2, [r0, #6]
 801c2ea:	4413      	add	r3, r2
 801c2ec:	804b      	strh	r3, [r1, #2]
 801c2ee:	1d01      	adds	r1, r0, #4
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	f7f7 fa91 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 801c2f6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	dd0b      	ble.n	801c316 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c2fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c302:	2b00      	cmp	r3, #0
 801c304:	dd07      	ble.n	801c316 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c306:	6968      	ldr	r0, [r5, #20]
 801c308:	b128      	cbz	r0, 801c316 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c30a:	6803      	ldr	r3, [r0, #0]
 801c30c:	4621      	mov	r1, r4
 801c30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c314:	4718      	bx	r3
 801c316:	bd70      	pop	{r4, r5, r6, pc}

0801c318 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c318:	b570      	push	{r4, r5, r6, lr}
 801c31a:	8882      	ldrh	r2, [r0, #4]
 801c31c:	460c      	mov	r4, r1
 801c31e:	880b      	ldrh	r3, [r1, #0]
 801c320:	4605      	mov	r5, r0
 801c322:	4413      	add	r3, r2
 801c324:	800b      	strh	r3, [r1, #0]
 801c326:	884b      	ldrh	r3, [r1, #2]
 801c328:	88c2      	ldrh	r2, [r0, #6]
 801c32a:	4413      	add	r3, r2
 801c32c:	804b      	strh	r3, [r1, #2]
 801c32e:	1d01      	adds	r1, r0, #4
 801c330:	4620      	mov	r0, r4
 801c332:	f7f7 fa71 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 801c336:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	dd19      	ble.n	801c372 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c33e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c342:	2b00      	cmp	r3, #0
 801c344:	dd15      	ble.n	801c372 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c346:	6968      	ldr	r0, [r5, #20]
 801c348:	b128      	cbz	r0, 801c356 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c34a:	6803      	ldr	r3, [r0, #0]
 801c34c:	4621      	mov	r1, r4
 801c34e:	691b      	ldr	r3, [r3, #16]
 801c350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c354:	4718      	bx	r3
 801c356:	4b07      	ldr	r3, [pc, #28]	@ (801c374 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	3304      	adds	r3, #4
 801c35c:	429d      	cmp	r5, r3
 801c35e:	d108      	bne.n	801c372 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c360:	f7fe fec6 	bl	801b0f0 <_ZN8touchgfx11Application11getInstanceEv>
 801c364:	6803      	ldr	r3, [r0, #0]
 801c366:	6821      	ldr	r1, [r4, #0]
 801c368:	6862      	ldr	r2, [r4, #4]
 801c36a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c370:	4718      	bx	r3
 801c372:	bd70      	pop	{r4, r5, r6, pc}
 801c374:	240287b4 	.word	0x240287b4

0801c378 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c378:	b570      	push	{r4, r5, r6, lr}
 801c37a:	4604      	mov	r4, r0
 801c37c:	4616      	mov	r6, r2
 801c37e:	460d      	mov	r5, r1
 801c380:	b901      	cbnz	r1, 801c384 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c382:	b192      	cbz	r2, 801c3aa <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c384:	6823      	ldr	r3, [r4, #0]
 801c386:	4620      	mov	r0, r4
 801c388:	699b      	ldr	r3, [r3, #24]
 801c38a:	4798      	blx	r3
 801c38c:	88e2      	ldrh	r2, [r4, #6]
 801c38e:	88a1      	ldrh	r1, [r4, #4]
 801c390:	4620      	mov	r0, r4
 801c392:	4432      	add	r2, r6
 801c394:	4429      	add	r1, r5
 801c396:	b212      	sxth	r2, r2
 801c398:	b209      	sxth	r1, r1
 801c39a:	f7e8 fa5b 	bl	8004854 <_ZN8touchgfx8Drawable5setXYEss>
 801c39e:	6823      	ldr	r3, [r4, #0]
 801c3a0:	4620      	mov	r0, r4
 801c3a2:	699b      	ldr	r3, [r3, #24]
 801c3a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c3a8:	4718      	bx	r3
 801c3aa:	bd70      	pop	{r4, r5, r6, pc}

0801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c3ac:	b510      	push	{r4, lr}
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	4604      	mov	r4, r0
 801c3b2:	4608      	mov	r0, r1
 801c3b4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c3b8:	8023      	strh	r3, [r4, #0]
 801c3ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c3be:	8063      	strh	r3, [r4, #2]
 801c3c0:	6803      	ldr	r3, [r0, #0]
 801c3c2:	80a1      	strh	r1, [r4, #4]
 801c3c4:	4621      	mov	r1, r4
 801c3c6:	80e2      	strh	r2, [r4, #6]
 801c3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c3ca:	4798      	blx	r3
 801c3cc:	4620      	mov	r0, r4
 801c3ce:	bd10      	pop	{r4, pc}

0801c3d0 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801c3d0:	4770      	bx	lr

0801c3d2 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801c3d2:	b510      	push	{r4, lr}
 801c3d4:	4604      	mov	r4, r0
 801c3d6:	211c      	movs	r1, #28
 801c3d8:	f00d face 	bl	8029978 <_ZdlPvj>
 801c3dc:	4620      	mov	r0, r4
 801c3de:	bd10      	pop	{r4, pc}

0801c3e0 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801c3e0:	4a04      	ldr	r2, [pc, #16]	@ (801c3f4 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801c3e2:	6002      	str	r2, [r0, #0]
 801c3e4:	2200      	movs	r2, #0
 801c3e6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801c3ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801c3ee:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801c3f2:	4770      	bx	lr
 801c3f4:	08030b0c 	.word	0x08030b0c

0801c3f8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	b087      	sub	sp, #28
 801c400:	4696      	mov	lr, r2
 801c402:	6880      	ldr	r0, [r0, #8]
 801c404:	8b22      	ldrh	r2, [r4, #24]
 801c406:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801c40a:	9105      	str	r1, [sp, #20]
 801c40c:	1c51      	adds	r1, r2, #1
 801c40e:	8321      	strh	r1, [r4, #24]
 801c410:	2101      	movs	r1, #1
 801c412:	5481      	strb	r1, [r0, r2]
 801c414:	4689      	mov	r9, r1
 801c416:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c41a:	8b60      	ldrh	r0, [r4, #26]
 801c41c:	ee06 2a90 	vmov	s13, r2
 801c420:	68e2      	ldr	r2, [r4, #12]
 801c422:	1845      	adds	r5, r0, r1
 801c424:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c428:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801c42c:	8365      	strh	r5, [r4, #26]
 801c42e:	edc2 6a00 	vstr	s13, [r2]
 801c432:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c436:	8b60      	ldrh	r0, [r4, #26]
 801c438:	ee07 2a10 	vmov	s14, r2
 801c43c:	68e2      	ldr	r2, [r4, #12]
 801c43e:	1845      	adds	r5, r0, r1
 801c440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c444:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801c448:	8365      	strh	r5, [r4, #26]
 801c44a:	1d18      	adds	r0, r3, #4
 801c44c:	460d      	mov	r5, r1
 801c44e:	ed82 7a00 	vstr	s14, [r2]
 801c452:	f8be 2000 	ldrh.w	r2, [lr]
 801c456:	9203      	str	r2, [sp, #12]
 801c458:	2200      	movs	r2, #0
 801c45a:	4613      	mov	r3, r2
 801c45c:	4694      	mov	ip, r2
 801c45e:	9201      	str	r2, [sp, #4]
 801c460:	9202      	str	r2, [sp, #8]
 801c462:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801c466:	9e05      	ldr	r6, [sp, #20]
 801c468:	f108 0701 	add.w	r7, r8, #1
 801c46c:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801c470:	428e      	cmp	r6, r1
 801c472:	b2bf      	uxth	r7, r7
 801c474:	eb0a 0b08 	add.w	fp, sl, r8
 801c478:	f340 80b6 	ble.w	801c5e8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801c47c:	9b03      	ldr	r3, [sp, #12]
 801c47e:	f9b0 c000 	ldrsh.w	ip, [r0]
 801c482:	fa43 fb05 	asr.w	fp, r3, r5
 801c486:	f00b 0b01 	and.w	fp, fp, #1
 801c48a:	fa5f f38b 	uxtb.w	r3, fp
 801c48e:	9304      	str	r3, [sp, #16]
 801c490:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c494:	f1bb 0f00 	cmp.w	fp, #0
 801c498:	d057      	beq.n	801c54a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801c49a:	ee07 ca90 	vmov	s15, ip
 801c49e:	8327      	strh	r7, [r4, #24]
 801c4a0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801c4a4:	ee07 3a90 	vmov	s15, r3
 801c4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4ac:	f1b9 0f00 	cmp.w	r9, #0
 801c4b0:	d028      	beq.n	801c504 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801c4b2:	f04f 0602 	mov.w	r6, #2
 801c4b6:	f80a 6008 	strb.w	r6, [sl, r8]
 801c4ba:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c4be:	68e7      	ldr	r7, [r4, #12]
 801c4c0:	f108 0901 	add.w	r9, r8, #1
 801c4c4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c4c8:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c4cc:	edc7 5a00 	vstr	s11, [r7]
 801c4d0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c4d4:	68e7      	ldr	r7, [r4, #12]
 801c4d6:	f108 0901 	add.w	r9, r8, #1
 801c4da:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c4de:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c4e2:	edc7 7a00 	vstr	s15, [r7]
 801c4e6:	3501      	adds	r5, #1
 801c4e8:	2d10      	cmp	r5, #16
 801c4ea:	d106      	bne.n	801c4fa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801c4ec:	9d02      	ldr	r5, [sp, #8]
 801c4ee:	3501      	adds	r5, #1
 801c4f0:	9502      	str	r5, [sp, #8]
 801c4f2:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801c4f6:	9503      	str	r5, [sp, #12]
 801c4f8:	2500      	movs	r5, #0
 801c4fa:	3101      	adds	r1, #1
 801c4fc:	3004      	adds	r0, #4
 801c4fe:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801c502:	e7ae      	b.n	801c462 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801c504:	f04f 0605 	mov.w	r6, #5
 801c508:	ed9d 5a01 	vldr	s10, [sp, #4]
 801c50c:	f80a 6008 	strb.w	r6, [sl, r8]
 801c510:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801c514:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c518:	68e7      	ldr	r7, [r4, #12]
 801c51a:	f108 0901 	add.w	r9, r8, #1
 801c51e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c522:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c526:	ed87 5a00 	vstr	s10, [r7]
 801c52a:	ee05 2a10 	vmov	s10, r2
 801c52e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c532:	68e7      	ldr	r7, [r4, #12]
 801c534:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801c538:	f108 0901 	add.w	r9, r8, #1
 801c53c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c540:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c544:	ed87 5a00 	vstr	s10, [r7]
 801c548:	e7b7      	b.n	801c4ba <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801c54a:	f1b9 0f00 	cmp.w	r9, #0
 801c54e:	d147      	bne.n	801c5e0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801c550:	f04f 0605 	mov.w	r6, #5
 801c554:	eddd 7a01 	vldr	s15, [sp, #4]
 801c558:	8327      	strh	r7, [r4, #24]
 801c55a:	f80a 6008 	strb.w	r6, [sl, r8]
 801c55e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c562:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c566:	68e7      	ldr	r7, [r4, #12]
 801c568:	f108 0901 	add.w	r9, r8, #1
 801c56c:	9e01      	ldr	r6, [sp, #4]
 801c56e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c572:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c576:	4466      	add	r6, ip
 801c578:	edc7 7a00 	vstr	s15, [r7]
 801c57c:	ee07 2a90 	vmov	s15, r2
 801c580:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c584:	441a      	add	r2, r3
 801c586:	68e7      	ldr	r7, [r4, #12]
 801c588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c58c:	f108 0901 	add.w	r9, r8, #1
 801c590:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c594:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c598:	edc7 7a00 	vstr	s15, [r7]
 801c59c:	ee07 6a90 	vmov	s15, r6
 801c5a0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5a8:	68e7      	ldr	r7, [r4, #12]
 801c5aa:	f108 0901 	add.w	r9, r8, #1
 801c5ae:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c5b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c5b6:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c5ba:	edc7 7a00 	vstr	s15, [r7]
 801c5be:	ee07 2a90 	vmov	s15, r2
 801c5c2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c5c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5ca:	68e7      	ldr	r7, [r4, #12]
 801c5cc:	f108 0901 	add.w	r9, r8, #1
 801c5d0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c5d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c5d8:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c5dc:	edc7 7a00 	vstr	s15, [r7]
 801c5e0:	461a      	mov	r2, r3
 801c5e2:	f8cd c004 	str.w	ip, [sp, #4]
 801c5e6:	e77e      	b.n	801c4e6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801c5e8:	f1b9 0f00 	cmp.w	r9, #0
 801c5ec:	d028      	beq.n	801c640 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801c5ee:	ee07 ca90 	vmov	s15, ip
 801c5f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5f6:	eef4 6a67 	vcmp.f32	s13, s15
 801c5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5fe:	d108      	bne.n	801c612 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801c600:	ee07 3a90 	vmov	s15, r3
 801c604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c608:	eeb4 7a67 	vcmp.f32	s14, s15
 801c60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c610:	d016      	beq.n	801c640 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801c612:	2302      	movs	r3, #2
 801c614:	8327      	strh	r7, [r4, #24]
 801c616:	f88b 3000 	strb.w	r3, [fp]
 801c61a:	8b62      	ldrh	r2, [r4, #26]
 801c61c:	68e3      	ldr	r3, [r4, #12]
 801c61e:	1c51      	adds	r1, r2, #1
 801c620:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c624:	8361      	strh	r1, [r4, #26]
 801c626:	edc3 6a00 	vstr	s13, [r3]
 801c62a:	8b62      	ldrh	r2, [r4, #26]
 801c62c:	68e3      	ldr	r3, [r4, #12]
 801c62e:	1c51      	adds	r1, r2, #1
 801c630:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c634:	8361      	strh	r1, [r4, #26]
 801c636:	ed83 7a00 	vstr	s14, [r3]
 801c63a:	b007      	add	sp, #28
 801c63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c640:	2305      	movs	r3, #5
 801c642:	eddd 7a01 	vldr	s15, [sp, #4]
 801c646:	8327      	strh	r7, [r4, #24]
 801c648:	f88b 3000 	strb.w	r3, [fp]
 801c64c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c650:	8b61      	ldrh	r1, [r4, #26]
 801c652:	68e3      	ldr	r3, [r4, #12]
 801c654:	1c4d      	adds	r5, r1, #1
 801c656:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801c65a:	8365      	strh	r5, [r4, #26]
 801c65c:	edc3 7a00 	vstr	s15, [r3]
 801c660:	ee07 2a90 	vmov	s15, r2
 801c664:	8b61      	ldrh	r1, [r4, #26]
 801c666:	68e3      	ldr	r3, [r4, #12]
 801c668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c66c:	1c4d      	adds	r5, r1, #1
 801c66e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801c672:	8365      	strh	r5, [r4, #26]
 801c674:	edc3 7a00 	vstr	s15, [r3]
 801c678:	e7cf      	b.n	801c61a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801c67c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801c67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c680:	4604      	mov	r4, r0
 801c682:	b08e      	sub	sp, #56	@ 0x38
 801c684:	4699      	mov	r9, r3
 801c686:	4688      	mov	r8, r1
 801c688:	4615      	mov	r5, r2
 801c68a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801c68c:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801c690:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c692:	f7e7 fe03 	bl	800429c <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801c696:	6060      	str	r0, [r4, #4]
 801c698:	f1b9 0f00 	cmp.w	r9, #0
 801c69c:	f000 80e8 	beq.w	801c870 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801c6a0:	2800      	cmp	r0, #0
 801c6a2:	f000 80e5 	beq.w	801c870 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801c6a6:	a805      	add	r0, sp, #20
 801c6a8:	f000 f8f9 	bl	801c89e <_ZN8touchgfx9Matrix3x3C1Ev>
 801c6ac:	6833      	ldr	r3, [r6, #0]
 801c6ae:	4630      	mov	r0, r6
 801c6b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c6b2:	4798      	blx	r3
 801c6b4:	a805      	add	r0, sp, #20
 801c6b6:	eef0 0a40 	vmov.f32	s1, s0
 801c6ba:	f000 f8f4 	bl	801c8a6 <_ZN8touchgfx9Matrix3x35scaleEff>
 801c6be:	6860      	ldr	r0, [r4, #4]
 801c6c0:	f1ba 0f03 	cmp.w	sl, #3
 801c6c4:	d83b      	bhi.n	801c73e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801c6c6:	e8df f00a 	tbb	[pc, sl]
 801c6ca:	1002      	.short	0x1002
 801c6cc:	9f71      	.short	0x9f71
 801c6ce:	6803      	ldr	r3, [r0, #0]
 801c6d0:	462a      	mov	r2, r5
 801c6d2:	4641      	mov	r1, r8
 801c6d4:	689b      	ldr	r3, [r3, #8]
 801c6d6:	4798      	blx	r3
 801c6d8:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801c6dc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c6e0:	ee07 7a90 	vmov	s15, r7
 801c6e4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801c6e8:	e026      	b.n	801c738 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801c6ea:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801c6ee:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801c6f2:	8869      	ldrh	r1, [r5, #2]
 801c6f4:	1a9b      	subs	r3, r3, r2
 801c6f6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c6fa:	aa03      	add	r2, sp, #12
 801c6fc:	1a5b      	subs	r3, r3, r1
 801c6fe:	4641      	mov	r1, r8
 801c700:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c704:	882b      	ldrh	r3, [r5, #0]
 801c706:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c70a:	88ab      	ldrh	r3, [r5, #4]
 801c70c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c710:	6803      	ldr	r3, [r0, #0]
 801c712:	689b      	ldr	r3, [r3, #8]
 801c714:	4798      	blx	r3
 801c716:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801c878 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801c71a:	a805      	add	r0, sp, #20
 801c71c:	f000 f8e8 	bl	801c8f0 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c720:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801c724:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c726:	ee07 7a90 	vmov	s15, r7
 801c72a:	1a9b      	subs	r3, r3, r2
 801c72c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c730:	ee00 3a10 	vmov	s0, r3
 801c734:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801c738:	a805      	add	r0, sp, #20
 801c73a:	f000 f927 	bl	801c98c <_ZN8touchgfx9Matrix3x39translateEff>
 801c73e:	6860      	ldr	r0, [r4, #4]
 801c740:	a905      	add	r1, sp, #20
 801c742:	2500      	movs	r5, #0
 801c744:	f109 0602 	add.w	r6, r9, #2
 801c748:	6803      	ldr	r3, [r0, #0]
 801c74a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c74c:	4798      	blx	r3
 801c74e:	6860      	ldr	r0, [r4, #4]
 801c750:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801c758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c75a:	4798      	blx	r3
 801c75c:	6860      	ldr	r0, [r4, #4]
 801c75e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801c762:	6803      	ldr	r3, [r0, #0]
 801c764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c766:	4798      	blx	r3
 801c768:	6860      	ldr	r0, [r4, #4]
 801c76a:	2101      	movs	r1, #1
 801c76c:	6803      	ldr	r3, [r0, #0]
 801c76e:	68db      	ldr	r3, [r3, #12]
 801c770:	4798      	blx	r3
 801c772:	f8b9 7000 	ldrh.w	r7, [r9]
 801c776:	f104 0310 	add.w	r3, r4, #16
 801c77a:	61a5      	str	r5, [r4, #24]
 801c77c:	f104 0208 	add.w	r2, r4, #8
 801c780:	f104 0114 	add.w	r1, r4, #20
 801c784:	f104 000c 	add.w	r0, r4, #12
 801c788:	f7ec fcf0 	bl	800916c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801c78c:	42af      	cmp	r7, r5
 801c78e:	dd60      	ble.n	801c852 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801c790:	8831      	ldrh	r1, [r6, #0]
 801c792:	1cb2      	adds	r2, r6, #2
 801c794:	4620      	mov	r0, r4
 801c796:	3501      	adds	r5, #1
 801c798:	f101 030f 	add.w	r3, r1, #15
 801c79c:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801c7a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c7a4:	f7ff fe28 	bl	801c3f8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801c7a8:	4606      	mov	r6, r0
 801c7aa:	e7ef      	b.n	801c78c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801c7ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801c7b0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801c7b4:	8829      	ldrh	r1, [r5, #0]
 801c7b6:	1a9b      	subs	r3, r3, r2
 801c7b8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c7bc:	aa03      	add	r2, sp, #12
 801c7be:	1a5b      	subs	r3, r3, r1
 801c7c0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c7c4:	886d      	ldrh	r5, [r5, #2]
 801c7c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c7ca:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801c7ce:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c7d2:	1a5b      	subs	r3, r3, r1
 801c7d4:	4641      	mov	r1, r8
 801c7d6:	1b5b      	subs	r3, r3, r5
 801c7d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c7dc:	6803      	ldr	r3, [r0, #0]
 801c7de:	689b      	ldr	r3, [r3, #8]
 801c7e0:	4798      	blx	r3
 801c7e2:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801c87c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801c7e6:	a805      	add	r0, sp, #20
 801c7e8:	f000 f882 	bl	801c8f0 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c7ec:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801c7f0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c7f2:	1a9b      	subs	r3, r3, r2
 801c7f4:	ee00 3a90 	vmov	s1, r3
 801c7f8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801c7fc:	1bdb      	subs	r3, r3, r7
 801c7fe:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c802:	ee00 3a10 	vmov	s0, r3
 801c806:	e795      	b.n	801c734 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801c808:	886b      	ldrh	r3, [r5, #2]
 801c80a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801c80e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c812:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801c816:	8829      	ldrh	r1, [r5, #0]
 801c818:	1a9b      	subs	r3, r3, r2
 801c81a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c81e:	aa03      	add	r2, sp, #12
 801c820:	1a5b      	subs	r3, r3, r1
 801c822:	4641      	mov	r1, r8
 801c824:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c828:	88eb      	ldrh	r3, [r5, #6]
 801c82a:	f8ad 3010 	strh.w	r3, [sp, #16]
 801c82e:	6803      	ldr	r3, [r0, #0]
 801c830:	689b      	ldr	r3, [r3, #8]
 801c832:	4798      	blx	r3
 801c834:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801c880 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801c838:	a805      	add	r0, sp, #20
 801c83a:	f000 f859 	bl	801c8f0 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c83e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801c842:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801c846:	1bdb      	subs	r3, r3, r7
 801c848:	ee00 3a90 	vmov	s1, r3
 801c84c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c850:	e748      	b.n	801c6e4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801c852:	6860      	ldr	r0, [r4, #4]
 801c854:	2100      	movs	r1, #0
 801c856:	8b22      	ldrh	r2, [r4, #24]
 801c858:	6803      	ldr	r3, [r0, #0]
 801c85a:	9101      	str	r1, [sp, #4]
 801c85c:	8b61      	ldrh	r1, [r4, #26]
 801c85e:	9100      	str	r1, [sp, #0]
 801c860:	6a1d      	ldr	r5, [r3, #32]
 801c862:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801c866:	47a8      	blx	r5
 801c868:	6860      	ldr	r0, [r4, #4]
 801c86a:	6803      	ldr	r3, [r0, #0]
 801c86c:	69db      	ldr	r3, [r3, #28]
 801c86e:	4798      	blx	r3
 801c870:	b00e      	add	sp, #56	@ 0x38
 801c872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c876:	bf00      	nop
 801c878:	42b40000 	.word	0x42b40000
 801c87c:	43340000 	.word	0x43340000
 801c880:	43870000 	.word	0x43870000

0801c884 <_ZN8touchgfx9Matrix3x35resetEv>:
 801c884:	2300      	movs	r3, #0
 801c886:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801c88a:	6043      	str	r3, [r0, #4]
 801c88c:	6002      	str	r2, [r0, #0]
 801c88e:	6083      	str	r3, [r0, #8]
 801c890:	60c3      	str	r3, [r0, #12]
 801c892:	6102      	str	r2, [r0, #16]
 801c894:	6143      	str	r3, [r0, #20]
 801c896:	6183      	str	r3, [r0, #24]
 801c898:	61c3      	str	r3, [r0, #28]
 801c89a:	6202      	str	r2, [r0, #32]
 801c89c:	4770      	bx	lr

0801c89e <_ZN8touchgfx9Matrix3x3C1Ev>:
 801c89e:	b508      	push	{r3, lr}
 801c8a0:	f7ff fff0 	bl	801c884 <_ZN8touchgfx9Matrix3x35resetEv>
 801c8a4:	bd08      	pop	{r3, pc}

0801c8a6 <_ZN8touchgfx9Matrix3x35scaleEff>:
 801c8a6:	edd0 7a00 	vldr	s15, [r0]
 801c8aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c8ae:	edc0 7a00 	vstr	s15, [r0]
 801c8b2:	edd0 7a01 	vldr	s15, [r0, #4]
 801c8b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c8ba:	edc0 7a01 	vstr	s15, [r0, #4]
 801c8be:	edd0 7a02 	vldr	s15, [r0, #8]
 801c8c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c8c6:	edd0 7a03 	vldr	s15, [r0, #12]
 801c8ca:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801c8ce:	ed80 0a02 	vstr	s0, [r0, #8]
 801c8d2:	edc0 7a03 	vstr	s15, [r0, #12]
 801c8d6:	edd0 7a04 	vldr	s15, [r0, #16]
 801c8da:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801c8de:	edc0 7a04 	vstr	s15, [r0, #16]
 801c8e2:	edd0 7a05 	vldr	s15, [r0, #20]
 801c8e6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c8ea:	edc0 0a05 	vstr	s1, [r0, #20]
 801c8ee:	4770      	bx	lr

0801c8f0 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801c8f0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801c984 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801c8f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c8f8:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801c988 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801c8fc:	b510      	push	{r4, lr}
 801c8fe:	ed2d 8b02 	vpush	{d8}
 801c902:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801c906:	4604      	mov	r4, r0
 801c908:	eeb0 0a68 	vmov.f32	s0, s17
 801c90c:	f00d fa48 	bl	8029da0 <cosf>
 801c910:	eeb0 8a40 	vmov.f32	s16, s0
 801c914:	eeb0 0a68 	vmov.f32	s0, s17
 801c918:	f00d f97e 	bl	8029c18 <sinf>
 801c91c:	edd4 6a03 	vldr	s13, [r4, #12]
 801c920:	edd4 4a00 	vldr	s9, [r4]
 801c924:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801c928:	ed94 7a04 	vldr	s14, [r4, #16]
 801c92c:	ed94 5a01 	vldr	s10, [r4, #4]
 801c930:	ee66 6a88 	vmul.f32	s13, s13, s16
 801c934:	edd4 5a02 	vldr	s11, [r4, #8]
 801c938:	eee8 7a24 	vfma.f32	s15, s16, s9
 801c93c:	eee0 6a24 	vfma.f32	s13, s0, s9
 801c940:	edc4 7a00 	vstr	s15, [r4]
 801c944:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801c948:	ee27 7a08 	vmul.f32	s14, s14, s16
 801c94c:	edc4 6a03 	vstr	s13, [r4, #12]
 801c950:	eee8 7a05 	vfma.f32	s15, s16, s10
 801c954:	eea0 7a05 	vfma.f32	s14, s0, s10
 801c958:	edc4 7a01 	vstr	s15, [r4, #4]
 801c95c:	edd4 7a05 	vldr	s15, [r4, #20]
 801c960:	ed84 7a04 	vstr	s14, [r4, #16]
 801c964:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801c968:	ee67 7a88 	vmul.f32	s15, s15, s16
 801c96c:	eea8 6a25 	vfma.f32	s12, s16, s11
 801c970:	eee0 7a25 	vfma.f32	s15, s0, s11
 801c974:	ecbd 8b02 	vpop	{d8}
 801c978:	ed84 6a02 	vstr	s12, [r4, #8]
 801c97c:	edc4 7a05 	vstr	s15, [r4, #20]
 801c980:	bd10      	pop	{r4, pc}
 801c982:	bf00      	nop
 801c984:	40490fdb 	.word	0x40490fdb
 801c988:	43340000 	.word	0x43340000

0801c98c <_ZN8touchgfx9Matrix3x39translateEff>:
 801c98c:	ed90 6a06 	vldr	s12, [r0, #24]
 801c990:	edd0 7a00 	vldr	s15, [r0]
 801c994:	edd0 6a07 	vldr	s13, [r0, #28]
 801c998:	eee6 7a00 	vfma.f32	s15, s12, s0
 801c99c:	ed90 7a08 	vldr	s14, [r0, #32]
 801c9a0:	edc0 7a00 	vstr	s15, [r0]
 801c9a4:	edd0 7a01 	vldr	s15, [r0, #4]
 801c9a8:	eee6 7a80 	vfma.f32	s15, s13, s0
 801c9ac:	edc0 7a01 	vstr	s15, [r0, #4]
 801c9b0:	edd0 7a02 	vldr	s15, [r0, #8]
 801c9b4:	eee7 7a00 	vfma.f32	s15, s14, s0
 801c9b8:	edc0 7a02 	vstr	s15, [r0, #8]
 801c9bc:	edd0 7a03 	vldr	s15, [r0, #12]
 801c9c0:	eee6 7a20 	vfma.f32	s15, s12, s1
 801c9c4:	edc0 7a03 	vstr	s15, [r0, #12]
 801c9c8:	edd0 7a04 	vldr	s15, [r0, #16]
 801c9cc:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801c9d0:	edc0 7a04 	vstr	s15, [r0, #16]
 801c9d4:	edd0 7a05 	vldr	s15, [r0, #20]
 801c9d8:	eee7 7a20 	vfma.f32	s15, s14, s1
 801c9dc:	edc0 7a05 	vstr	s15, [r0, #20]
 801c9e0:	4770      	bx	lr

0801c9e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801c9e2:	edd0 6a01 	vldr	s13, [r0, #4]
 801c9e6:	b084      	sub	sp, #16
 801c9e8:	edd0 7a04 	vldr	s15, [r0, #16]
 801c9ec:	ed90 7a03 	vldr	s14, [r0, #12]
 801c9f0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801c9f4:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801c9f8:	edd0 6a00 	vldr	s13, [r0]
 801c9fc:	eee7 7a00 	vfma.f32	s15, s14, s0
 801ca00:	ed90 7a05 	vldr	s14, [r0, #20]
 801ca04:	eee6 0a80 	vfma.f32	s1, s13, s0
 801ca08:	ed90 0a02 	vldr	s0, [r0, #8]
 801ca0c:	ee30 0a80 	vadd.f32	s0, s1, s0
 801ca10:	ee77 0a87 	vadd.f32	s1, s15, s14
 801ca14:	b004      	add	sp, #16
 801ca16:	4770      	bx	lr

0801ca18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801ca18:	b530      	push	{r4, r5, lr}
 801ca1a:	8083      	strh	r3, [r0, #4]
 801ca1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ca20:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801ca24:	80c3      	strh	r3, [r0, #6]
 801ca26:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801ca2a:	6141      	str	r1, [r0, #20]
 801ca2c:	7203      	strb	r3, [r0, #8]
 801ca2e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ca32:	8302      	strh	r2, [r0, #24]
 801ca34:	7243      	strb	r3, [r0, #9]
 801ca36:	7a83      	ldrb	r3, [r0, #10]
 801ca38:	f365 0306 	bfi	r3, r5, #0, #7
 801ca3c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801ca40:	f365 13c7 	bfi	r3, r5, #7, #1
 801ca44:	7283      	strb	r3, [r0, #10]
 801ca46:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801ca4a:	72c3      	strb	r3, [r0, #11]
 801ca4c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801ca50:	7303      	strb	r3, [r0, #12]
 801ca52:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ca56:	81c3      	strh	r3, [r0, #14]
 801ca58:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801ca5c:	8203      	strh	r3, [r0, #16]
 801ca5e:	4b01      	ldr	r3, [pc, #4]	@ (801ca64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801ca60:	6003      	str	r3, [r0, #0]
 801ca62:	bd30      	pop	{r4, r5, pc}
 801ca64:	08030b20 	.word	0x08030b20

0801ca68 <_ZNK8touchgfx9ConstFont4findEt>:
 801ca68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca6a:	6944      	ldr	r4, [r0, #20]
 801ca6c:	b3bc      	cbz	r4, 801cade <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ca6e:	88a3      	ldrh	r3, [r4, #4]
 801ca70:	8b02      	ldrh	r2, [r0, #24]
 801ca72:	1acb      	subs	r3, r1, r3
 801ca74:	f102 32ff 	add.w	r2, r2, #4294967295
 801ca78:	d431      	bmi.n	801cade <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ca7a:	4293      	cmp	r3, r2
 801ca7c:	dd0c      	ble.n	801ca98 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801ca7e:	230e      	movs	r3, #14
 801ca80:	fb03 4302 	mla	r3, r3, r2, r4
 801ca84:	889b      	ldrh	r3, [r3, #4]
 801ca86:	1a5b      	subs	r3, r3, r1
 801ca88:	1ad3      	subs	r3, r2, r3
 801ca8a:	429a      	cmp	r2, r3
 801ca8c:	db27      	blt.n	801cade <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	bfbc      	itt	lt
 801ca92:	2302      	movlt	r3, #2
 801ca94:	fb92 f3f3 	sdivlt	r3, r2, r3
 801ca98:	2500      	movs	r5, #0
 801ca9a:	260e      	movs	r6, #14
 801ca9c:	4295      	cmp	r5, r2
 801ca9e:	dc1e      	bgt.n	801cade <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801caa0:	fb06 4003 	mla	r0, r6, r3, r4
 801caa4:	8887      	ldrh	r7, [r0, #4]
 801caa6:	42b9      	cmp	r1, r7
 801caa8:	d01a      	beq.n	801cae0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801caaa:	d20d      	bcs.n	801cac8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801caac:	1e5a      	subs	r2, r3, #1
 801caae:	4295      	cmp	r5, r2
 801cab0:	dc15      	bgt.n	801cade <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cab2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801cab6:	1a5b      	subs	r3, r3, r1
 801cab8:	1ad3      	subs	r3, r2, r3
 801caba:	429a      	cmp	r2, r3
 801cabc:	db0f      	blt.n	801cade <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cabe:	429d      	cmp	r5, r3
 801cac0:	ddec      	ble.n	801ca9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cac2:	1953      	adds	r3, r2, r5
 801cac4:	105b      	asrs	r3, r3, #1
 801cac6:	e7e9      	b.n	801ca9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cac8:	1c5d      	adds	r5, r3, #1
 801caca:	42aa      	cmp	r2, r5
 801cacc:	db07      	blt.n	801cade <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cace:	8a43      	ldrh	r3, [r0, #18]
 801cad0:	1acb      	subs	r3, r1, r3
 801cad2:	442b      	add	r3, r5
 801cad4:	429d      	cmp	r5, r3
 801cad6:	dc02      	bgt.n	801cade <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cad8:	429a      	cmp	r2, r3
 801cada:	dadf      	bge.n	801ca9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cadc:	e7f1      	b.n	801cac2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801cade:	2000      	movs	r0, #0
 801cae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cae2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801cae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cae4:	4604      	mov	r4, r0
 801cae6:	4617      	mov	r7, r2
 801cae8:	461e      	mov	r6, r3
 801caea:	b911      	cbnz	r1, 801caf2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801caec:	2500      	movs	r5, #0
 801caee:	4628      	mov	r0, r5
 801caf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801caf2:	290a      	cmp	r1, #10
 801caf4:	d0fa      	beq.n	801caec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801caf6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801cafa:	4291      	cmp	r1, r2
 801cafc:	d0f6      	beq.n	801caec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cafe:	f242 020b 	movw	r2, #8203	@ 0x200b
 801cb02:	4291      	cmp	r1, r2
 801cb04:	d0f2      	beq.n	801caec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cb06:	f7ff ffaf 	bl	801ca68 <_ZNK8touchgfx9ConstFont4findEt>
 801cb0a:	4605      	mov	r5, r0
 801cb0c:	b950      	cbnz	r0, 801cb24 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801cb0e:	6823      	ldr	r3, [r4, #0]
 801cb10:	4620      	mov	r0, r4
 801cb12:	691b      	ldr	r3, [r3, #16]
 801cb14:	4798      	blx	r3
 801cb16:	4601      	mov	r1, r0
 801cb18:	4620      	mov	r0, r4
 801cb1a:	f7ff ffa5 	bl	801ca68 <_ZNK8touchgfx9ConstFont4findEt>
 801cb1e:	4605      	mov	r5, r0
 801cb20:	2800      	cmp	r0, #0
 801cb22:	d0e3      	beq.n	801caec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cb24:	6823      	ldr	r3, [r4, #0]
 801cb26:	4629      	mov	r1, r5
 801cb28:	4620      	mov	r0, r4
 801cb2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cb2c:	4798      	blx	r3
 801cb2e:	6038      	str	r0, [r7, #0]
 801cb30:	6823      	ldr	r3, [r4, #0]
 801cb32:	4620      	mov	r0, r4
 801cb34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cb36:	4798      	blx	r3
 801cb38:	7030      	strb	r0, [r6, #0]
 801cb3a:	e7d8      	b.n	801caee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801cb3c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801cb3c:	b538      	push	{r3, r4, r5, lr}
 801cb3e:	4605      	mov	r5, r0
 801cb40:	f002 fa76 	bl	801f030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cb44:	4604      	mov	r4, r0
 801cb46:	4628      	mov	r0, r5
 801cb48:	f002 f9b6 	bl	801eeb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801cb4c:	2800      	cmp	r0, #0
 801cb4e:	bf14      	ite	ne
 801cb50:	2002      	movne	r0, #2
 801cb52:	2000      	moveq	r0, #0
 801cb54:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801cb58:	b280      	uxth	r0, r0
 801cb5a:	bd38      	pop	{r3, r4, r5, pc}

0801cb5c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801cb5c:	b538      	push	{r3, r4, r5, lr}
 801cb5e:	4605      	mov	r5, r0
 801cb60:	f002 fa66 	bl	801f030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801cb64:	4604      	mov	r4, r0
 801cb66:	4628      	mov	r0, r5
 801cb68:	f002 f9a6 	bl	801eeb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801cb6c:	2800      	cmp	r0, #0
 801cb6e:	bf14      	ite	ne
 801cb70:	2002      	movne	r0, #2
 801cb72:	2000      	moveq	r0, #0
 801cb74:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801cb78:	f040 0001 	orr.w	r0, r0, #1
 801cb7c:	b280      	uxth	r0, r0
 801cb7e:	bd38      	pop	{r3, r4, r5, pc}

0801cb80 <_ZN8touchgfx4clzuEm>:
 801cb80:	4603      	mov	r3, r0
 801cb82:	b1c8      	cbz	r0, 801cbb8 <_ZN8touchgfx4clzuEm+0x38>
 801cb84:	0c02      	lsrs	r2, r0, #16
 801cb86:	0412      	lsls	r2, r2, #16
 801cb88:	b9a2      	cbnz	r2, 801cbb4 <_ZN8touchgfx4clzuEm+0x34>
 801cb8a:	0403      	lsls	r3, r0, #16
 801cb8c:	2010      	movs	r0, #16
 801cb8e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801cb92:	bf04      	itt	eq
 801cb94:	021b      	lsleq	r3, r3, #8
 801cb96:	3008      	addeq	r0, #8
 801cb98:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801cb9c:	bf04      	itt	eq
 801cb9e:	011b      	lsleq	r3, r3, #4
 801cba0:	3004      	addeq	r0, #4
 801cba2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801cba6:	bf04      	itt	eq
 801cba8:	009b      	lsleq	r3, r3, #2
 801cbaa:	3002      	addeq	r0, #2
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	db04      	blt.n	801cbba <_ZN8touchgfx4clzuEm+0x3a>
 801cbb0:	3001      	adds	r0, #1
 801cbb2:	4770      	bx	lr
 801cbb4:	2000      	movs	r0, #0
 801cbb6:	e7ea      	b.n	801cb8e <_ZN8touchgfx4clzuEm+0xe>
 801cbb8:	2020      	movs	r0, #32
 801cbba:	4770      	bx	lr

0801cbbc <_ZN8touchgfx7muldivuEmmmRm>:
 801cbbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801cbc0:	460f      	mov	r7, r1
 801cbc2:	4615      	mov	r5, r2
 801cbc4:	461e      	mov	r6, r3
 801cbc6:	4601      	mov	r1, r0
 801cbc8:	b100      	cbz	r0, 801cbcc <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801cbca:	b927      	cbnz	r7, 801cbd6 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801cbcc:	2000      	movs	r0, #0
 801cbce:	6030      	str	r0, [r6, #0]
 801cbd0:	b002      	add	sp, #8
 801cbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbd6:	f7ff ffd3 	bl	801cb80 <_ZN8touchgfx4clzuEm>
 801cbda:	b980      	cbnz	r0, 801cbfe <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801cbdc:	4638      	mov	r0, r7
 801cbde:	f7ff ffcf 	bl	801cb80 <_ZN8touchgfx4clzuEm>
 801cbe2:	2800      	cmp	r0, #0
 801cbe4:	dd05      	ble.n	801cbf2 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801cbe6:	4633      	mov	r3, r6
 801cbe8:	462a      	mov	r2, r5
 801cbea:	4638      	mov	r0, r7
 801cbec:	f7ff ffe6 	bl	801cbbc <_ZN8touchgfx7muldivuEmmmRm>
 801cbf0:	e7ee      	b.n	801cbd0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801cbf2:	f04f 33ff 	mov.w	r3, #4294967295
 801cbf6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801cbfa:	6033      	str	r3, [r6, #0]
 801cbfc:	e7e8      	b.n	801cbd0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801cbfe:	fa37 f800 	lsrs.w	r8, r7, r0
 801cc02:	fb07 f301 	mul.w	r3, r7, r1
 801cc06:	d105      	bne.n	801cc14 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801cc08:	fbb3 f0f5 	udiv	r0, r3, r5
 801cc0c:	fb05 3510 	mls	r5, r5, r0, r3
 801cc10:	6035      	str	r5, [r6, #0]
 801cc12:	e7dd      	b.n	801cbd0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801cc14:	2301      	movs	r3, #1
 801cc16:	fa01 fa00 	lsl.w	sl, r1, r0
 801cc1a:	462a      	mov	r2, r5
 801cc1c:	fa03 f000 	lsl.w	r0, r3, r0
 801cc20:	4633      	mov	r3, r6
 801cc22:	fbba f9f5 	udiv	r9, sl, r5
 801cc26:	3801      	subs	r0, #1
 801cc28:	fb08 f409 	mul.w	r4, r8, r9
 801cc2c:	4038      	ands	r0, r7
 801cc2e:	f7ff ffc5 	bl	801cbbc <_ZN8touchgfx7muldivuEmmmRm>
 801cc32:	462a      	mov	r2, r5
 801cc34:	4607      	mov	r7, r0
 801cc36:	ab01      	add	r3, sp, #4
 801cc38:	fb05 a119 	mls	r1, r5, r9, sl
 801cc3c:	4640      	mov	r0, r8
 801cc3e:	f7ff ffbd 	bl	801cbbc <_ZN8touchgfx7muldivuEmmmRm>
 801cc42:	9b01      	ldr	r3, [sp, #4]
 801cc44:	6832      	ldr	r2, [r6, #0]
 801cc46:	441a      	add	r2, r3
 801cc48:	fbb2 f3f5 	udiv	r3, r2, r5
 801cc4c:	441c      	add	r4, r3
 801cc4e:	fb05 2513 	mls	r5, r5, r3, r2
 801cc52:	443c      	add	r4, r7
 801cc54:	4420      	add	r0, r4
 801cc56:	e7db      	b.n	801cc10 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801cc58 <_ZN8touchgfx6muldivElllRl>:
 801cc58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc5a:	2800      	cmp	r0, #0
 801cc5c:	461e      	mov	r6, r3
 801cc5e:	bfba      	itte	lt
 801cc60:	4240      	neglt	r0, r0
 801cc62:	f04f 34ff 	movlt.w	r4, #4294967295
 801cc66:	2401      	movge	r4, #1
 801cc68:	2900      	cmp	r1, #0
 801cc6a:	bfbc      	itt	lt
 801cc6c:	4249      	neglt	r1, r1
 801cc6e:	4264      	neglt	r4, r4
 801cc70:	2a00      	cmp	r2, #0
 801cc72:	bfb6      	itet	lt
 801cc74:	4265      	neglt	r5, r4
 801cc76:	4625      	movge	r5, r4
 801cc78:	4252      	neglt	r2, r2
 801cc7a:	4288      	cmp	r0, r1
 801cc7c:	bfc2      	ittt	gt
 801cc7e:	4603      	movgt	r3, r0
 801cc80:	4608      	movgt	r0, r1
 801cc82:	4619      	movgt	r1, r3
 801cc84:	ab01      	add	r3, sp, #4
 801cc86:	f7ff ff99 	bl	801cbbc <_ZN8touchgfx7muldivuEmmmRm>
 801cc8a:	9b01      	ldr	r3, [sp, #4]
 801cc8c:	4368      	muls	r0, r5
 801cc8e:	435c      	muls	r4, r3
 801cc90:	6034      	str	r4, [r6, #0]
 801cc92:	b002      	add	sp, #8
 801cc94:	bd70      	pop	{r4, r5, r6, pc}

0801cc96 <_ZN8touchgfx6muldivElll>:
 801cc96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc98:	4606      	mov	r6, r0
 801cc9a:	ab01      	add	r3, sp, #4
 801cc9c:	460d      	mov	r5, r1
 801cc9e:	4614      	mov	r4, r2
 801cca0:	f7ff ffda 	bl	801cc58 <_ZN8touchgfx6muldivElllRl>
 801cca4:	2e00      	cmp	r6, #0
 801cca6:	db20      	blt.n	801ccea <_ZN8touchgfx6muldivElll+0x54>
 801cca8:	bf14      	ite	ne
 801ccaa:	2301      	movne	r3, #1
 801ccac:	2300      	moveq	r3, #0
 801ccae:	2d00      	cmp	r5, #0
 801ccb0:	db1e      	blt.n	801ccf0 <_ZN8touchgfx6muldivElll+0x5a>
 801ccb2:	bf14      	ite	ne
 801ccb4:	2201      	movne	r2, #1
 801ccb6:	2200      	moveq	r2, #0
 801ccb8:	2c00      	cmp	r4, #0
 801ccba:	fb03 f202 	mul.w	r2, r3, r2
 801ccbe:	db1a      	blt.n	801ccf6 <_ZN8touchgfx6muldivElll+0x60>
 801ccc0:	bf14      	ite	ne
 801ccc2:	2301      	movne	r3, #1
 801ccc4:	2300      	moveq	r3, #0
 801ccc6:	4353      	muls	r3, r2
 801ccc8:	2b01      	cmp	r3, #1
 801ccca:	d117      	bne.n	801ccfc <_ZN8touchgfx6muldivElll+0x66>
 801cccc:	2c00      	cmp	r4, #0
 801ccce:	9b01      	ldr	r3, [sp, #4]
 801ccd0:	bfb8      	it	lt
 801ccd2:	4264      	neglt	r4, r4
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	f104 0401 	add.w	r4, r4, #1
 801ccda:	bfb8      	it	lt
 801ccdc:	425b      	neglt	r3, r3
 801ccde:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801cce2:	db00      	blt.n	801cce6 <_ZN8touchgfx6muldivElll+0x50>
 801cce4:	3001      	adds	r0, #1
 801cce6:	b002      	add	sp, #8
 801cce8:	bd70      	pop	{r4, r5, r6, pc}
 801ccea:	f04f 33ff 	mov.w	r3, #4294967295
 801ccee:	e7de      	b.n	801ccae <_ZN8touchgfx6muldivElll+0x18>
 801ccf0:	f04f 32ff 	mov.w	r2, #4294967295
 801ccf4:	e7e0      	b.n	801ccb8 <_ZN8touchgfx6muldivElll+0x22>
 801ccf6:	f04f 33ff 	mov.w	r3, #4294967295
 801ccfa:	e7e4      	b.n	801ccc6 <_ZN8touchgfx6muldivElll+0x30>
 801ccfc:	3301      	adds	r3, #1
 801ccfe:	d1f2      	bne.n	801cce6 <_ZN8touchgfx6muldivElll+0x50>
 801cd00:	9b01      	ldr	r3, [sp, #4]
 801cd02:	2c00      	cmp	r4, #0
 801cd04:	bfb8      	it	lt
 801cd06:	4264      	neglt	r4, r4
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	bfb8      	it	lt
 801cd0c:	425b      	neglt	r3, r3
 801cd0e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801cd12:	bfc8      	it	gt
 801cd14:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801cd18:	e7e5      	b.n	801cce6 <_ZN8touchgfx6muldivElll+0x50>

0801cd1a <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801cd1a:	2002      	movs	r0, #2
 801cd1c:	4770      	bx	lr

0801cd1e <_ZN8touchgfx6ScreenD1Ev>:
 801cd1e:	4770      	bx	lr

0801cd20 <_ZN8touchgfx12GestureEventD1Ev>:
 801cd20:	4770      	bx	lr

0801cd22 <_ZN8touchgfx12GestureEventD0Ev>:
 801cd22:	b510      	push	{r4, lr}
 801cd24:	4604      	mov	r4, r0
 801cd26:	210c      	movs	r1, #12
 801cd28:	f00c fe26 	bl	8029978 <_ZdlPvj>
 801cd2c:	4620      	mov	r0, r4
 801cd2e:	bd10      	pop	{r4, pc}

0801cd30 <_ZN8touchgfx6ScreenD0Ev>:
 801cd30:	b510      	push	{r4, lr}
 801cd32:	4604      	mov	r4, r0
 801cd34:	213c      	movs	r1, #60	@ 0x3c
 801cd36:	f00c fe1f 	bl	8029978 <_ZdlPvj>
 801cd3a:	4620      	mov	r0, r4
 801cd3c:	bd10      	pop	{r4, pc}
	...

0801cd40 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801cd40:	b530      	push	{r4, r5, lr}
 801cd42:	460d      	mov	r5, r1
 801cd44:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801cd46:	b087      	sub	sp, #28
 801cd48:	4604      	mov	r4, r0
 801cd4a:	b301      	cbz	r1, 801cd8e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801cd4c:	a801      	add	r0, sp, #4
 801cd4e:	f7ff fb2d 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd52:	892a      	ldrh	r2, [r5, #8]
 801cd54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cd58:	7928      	ldrb	r0, [r5, #4]
 801cd5a:	1ad2      	subs	r2, r2, r3
 801cd5c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801cd5e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801cd62:	441a      	add	r2, r3
 801cd64:	896b      	ldrh	r3, [r5, #10]
 801cd66:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801cd6a:	f88d 0010 	strb.w	r0, [sp, #16]
 801cd6e:	1b5b      	subs	r3, r3, r5
 801cd70:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801cd72:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801cd74:	442b      	add	r3, r5
 801cd76:	4d07      	ldr	r5, [pc, #28]	@ (801cd94 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801cd78:	f8ad 1012 	strh.w	r1, [sp, #18]
 801cd7c:	a903      	add	r1, sp, #12
 801cd7e:	9503      	str	r5, [sp, #12]
 801cd80:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cd84:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd88:	6803      	ldr	r3, [r0, #0]
 801cd8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cd8c:	4798      	blx	r3
 801cd8e:	b007      	add	sp, #28
 801cd90:	bd30      	pop	{r4, r5, pc}
 801cd92:	bf00      	nop
 801cd94:	08030b88 	.word	0x08030b88

0801cd98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801cd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd9c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cd9e:	b08a      	sub	sp, #40	@ 0x28
 801cda0:	4604      	mov	r4, r0
 801cda2:	460d      	mov	r5, r1
 801cda4:	b113      	cbz	r3, 801cdac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801cda6:	790b      	ldrb	r3, [r1, #4]
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d044      	beq.n	801ce36 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cdac:	f104 0804 	add.w	r8, r4, #4
 801cdb0:	a803      	add	r0, sp, #12
 801cdb2:	4641      	mov	r1, r8
 801cdb4:	f7ff fafa 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cdb8:	792b      	ldrb	r3, [r5, #4]
 801cdba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cdbe:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801cdc2:	b983      	cbnz	r3, 801cde6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801cdc4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801cdc8:	892a      	ldrh	r2, [r5, #8]
 801cdca:	88e9      	ldrh	r1, [r5, #6]
 801cdcc:	4640      	mov	r0, r8
 801cdce:	1b92      	subs	r2, r2, r6
 801cdd0:	9301      	str	r3, [sp, #4]
 801cdd2:	1bc9      	subs	r1, r1, r7
 801cdd4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801cdd8:	b212      	sxth	r2, r2
 801cdda:	9300      	str	r3, [sp, #0]
 801cddc:	b209      	sxth	r1, r1
 801cdde:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801cde2:	f7f6 fc37 	bl	8013654 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801cde6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cde8:	b329      	cbz	r1, 801ce36 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cdea:	a805      	add	r0, sp, #20
 801cdec:	f7ff fade 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cdf0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801cdf4:	792b      	ldrb	r3, [r5, #4]
 801cdf6:	a907      	add	r1, sp, #28
 801cdf8:	1abf      	subs	r7, r7, r2
 801cdfa:	88ea      	ldrh	r2, [r5, #6]
 801cdfc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801cdfe:	4417      	add	r7, r2
 801ce00:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801ce02:	f88d 3020 	strb.w	r3, [sp, #32]
 801ce06:	4417      	add	r7, r2
 801ce08:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ce0c:	1ab6      	subs	r6, r6, r2
 801ce0e:	892a      	ldrh	r2, [r5, #8]
 801ce10:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801ce14:	4416      	add	r6, r2
 801ce16:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801ce18:	4416      	add	r6, r2
 801ce1a:	4a08      	ldr	r2, [pc, #32]	@ (801ce3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801ce1c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801ce20:	2600      	movs	r6, #0
 801ce22:	9207      	str	r2, [sp, #28]
 801ce24:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801ce28:	6803      	ldr	r3, [r0, #0]
 801ce2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ce2c:	4798      	blx	r3
 801ce2e:	792b      	ldrb	r3, [r5, #4]
 801ce30:	b10b      	cbz	r3, 801ce36 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ce32:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801ce36:	b00a      	add	sp, #40	@ 0x28
 801ce38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce3c:	08030280 	.word	0x08030280

0801ce40 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce44:	460c      	mov	r4, r1
 801ce46:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801ce48:	b088      	sub	sp, #32
 801ce4a:	4605      	mov	r5, r0
 801ce4c:	2900      	cmp	r1, #0
 801ce4e:	d06d      	beq.n	801cf2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801ce50:	4668      	mov	r0, sp
 801ce52:	f7ff faab 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ce56:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801ce58:	88e3      	ldrh	r3, [r4, #6]
 801ce5a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801ce5e:	440b      	add	r3, r1
 801ce60:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801ce64:	b21b      	sxth	r3, r3
 801ce66:	4543      	cmp	r3, r8
 801ce68:	db31      	blt.n	801cece <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ce6a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801ce6e:	44c4      	add	ip, r8
 801ce70:	fa0f fc8c 	sxth.w	ip, ip
 801ce74:	4563      	cmp	r3, ip
 801ce76:	da2a      	bge.n	801cece <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ce78:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801ce7a:	8926      	ldrh	r6, [r4, #8]
 801ce7c:	4416      	add	r6, r2
 801ce7e:	b236      	sxth	r6, r6
 801ce80:	42be      	cmp	r6, r7
 801ce82:	db24      	blt.n	801cece <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ce84:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ce88:	4438      	add	r0, r7
 801ce8a:	b200      	sxth	r0, r0
 801ce8c:	4286      	cmp	r6, r0
 801ce8e:	da1e      	bge.n	801cece <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ce90:	8963      	ldrh	r3, [r4, #10]
 801ce92:	4419      	add	r1, r3
 801ce94:	b209      	sxth	r1, r1
 801ce96:	4541      	cmp	r1, r8
 801ce98:	db08      	blt.n	801ceac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801ce9a:	4561      	cmp	r1, ip
 801ce9c:	da06      	bge.n	801ceac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801ce9e:	89a3      	ldrh	r3, [r4, #12]
 801cea0:	441a      	add	r2, r3
 801cea2:	b212      	sxth	r2, r2
 801cea4:	42ba      	cmp	r2, r7
 801cea6:	db01      	blt.n	801ceac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cea8:	4282      	cmp	r2, r0
 801ceaa:	db10      	blt.n	801cece <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ceac:	4b21      	ldr	r3, [pc, #132]	@ (801cf34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801ceae:	a904      	add	r1, sp, #16
 801ceb0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801ceb2:	9304      	str	r3, [sp, #16]
 801ceb4:	2302      	movs	r3, #2
 801ceb6:	f88d 3014 	strb.w	r3, [sp, #20]
 801ceba:	2300      	movs	r3, #0
 801cebc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cec0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cec4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cec8:	6803      	ldr	r3, [r0, #0]
 801ceca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cecc:	4798      	blx	r3
 801cece:	1d29      	adds	r1, r5, #4
 801ced0:	a802      	add	r0, sp, #8
 801ced2:	f7ff fa6b 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ced6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ceda:	88e0      	ldrh	r0, [r4, #6]
 801cedc:	eba3 0808 	sub.w	r8, r3, r8
 801cee0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cee4:	7921      	ldrb	r1, [r4, #4]
 801cee6:	fa1f f888 	uxth.w	r8, r8
 801ceea:	1bdf      	subs	r7, r3, r7
 801ceec:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801cef0:	b2bb      	uxth	r3, r7
 801cef2:	4440      	add	r0, r8
 801cef4:	8922      	ldrh	r2, [r4, #8]
 801cef6:	8967      	ldrh	r7, [r4, #10]
 801cef8:	4460      	add	r0, ip
 801cefa:	89a4      	ldrh	r4, [r4, #12]
 801cefc:	441a      	add	r2, r3
 801cefe:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801cf00:	44b8      	add	r8, r7
 801cf02:	4423      	add	r3, r4
 801cf04:	f8ad 0016 	strh.w	r0, [sp, #22]
 801cf08:	4432      	add	r2, r6
 801cf0a:	44e0      	add	r8, ip
 801cf0c:	4433      	add	r3, r6
 801cf0e:	4c0a      	ldr	r4, [pc, #40]	@ (801cf38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801cf10:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cf12:	f88d 1014 	strb.w	r1, [sp, #20]
 801cf16:	a904      	add	r1, sp, #16
 801cf18:	9404      	str	r4, [sp, #16]
 801cf1a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cf1e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801cf22:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cf26:	6803      	ldr	r3, [r0, #0]
 801cf28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cf2a:	4798      	blx	r3
 801cf2c:	b008      	add	sp, #32
 801cf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf32:	bf00      	nop
 801cf34:	08030280 	.word	0x08030280
 801cf38:	08030294 	.word	0x08030294

0801cf3c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801cf3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf3e:	4604      	mov	r4, r0
 801cf40:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801cf44:	3201      	adds	r2, #1
 801cf46:	d112      	bne.n	801cf6e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801cf48:	2500      	movs	r5, #0
 801cf4a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cf4e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cf52:	6803      	ldr	r3, [r0, #0]
 801cf54:	9500      	str	r5, [sp, #0]
 801cf56:	466d      	mov	r5, sp
 801cf58:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cf5c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cf60:	4629      	mov	r1, r5
 801cf62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf64:	4798      	blx	r3
 801cf66:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cf6a:	e884 0003 	stmia.w	r4, {r0, r1}
 801cf6e:	4620      	mov	r0, r4
 801cf70:	b003      	add	sp, #12
 801cf72:	bd30      	pop	{r4, r5, pc}

0801cf74 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801cf74:	b513      	push	{r0, r1, r4, lr}
 801cf76:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801cf7a:	4604      	mov	r4, r0
 801cf7c:	3301      	adds	r3, #1
 801cf7e:	d109      	bne.n	801cf94 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801cf80:	4601      	mov	r1, r0
 801cf82:	4668      	mov	r0, sp
 801cf84:	f7ff fa12 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf88:	f8bd 3000 	ldrh.w	r3, [sp]
 801cf8c:	8423      	strh	r3, [r4, #32]
 801cf8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf92:	8463      	strh	r3, [r4, #34]	@ 0x22
 801cf94:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801cf98:	b002      	add	sp, #8
 801cf9a:	bd10      	pop	{r4, pc}

0801cf9c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801cf9c:	b513      	push	{r0, r1, r4, lr}
 801cf9e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801cfa2:	4604      	mov	r4, r0
 801cfa4:	3301      	adds	r3, #1
 801cfa6:	d109      	bne.n	801cfbc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801cfa8:	4601      	mov	r1, r0
 801cfaa:	4668      	mov	r0, sp
 801cfac:	f7ff f9fe 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cfb0:	f8bd 3000 	ldrh.w	r3, [sp]
 801cfb4:	8423      	strh	r3, [r4, #32]
 801cfb6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cfba:	8463      	strh	r3, [r4, #34]	@ 0x22
 801cfbc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801cfc0:	b002      	add	sp, #8
 801cfc2:	bd10      	pop	{r4, pc}

0801cfc4 <_ZN8touchgfx6ScreenC1Ev>:
 801cfc4:	b570      	push	{r4, r5, r6, lr}
 801cfc6:	4b17      	ldr	r3, [pc, #92]	@ (801d024 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801cfc8:	4605      	mov	r5, r0
 801cfca:	4a17      	ldr	r2, [pc, #92]	@ (801d028 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801cfcc:	2101      	movs	r1, #1
 801cfce:	f845 3b04 	str.w	r3, [r5], #4
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	6042      	str	r2, [r0, #4]
 801cfd6:	4604      	mov	r4, r0
 801cfd8:	8103      	strh	r3, [r0, #8]
 801cfda:	8143      	strh	r3, [r0, #10]
 801cfdc:	8183      	strh	r3, [r0, #12]
 801cfde:	81c3      	strh	r3, [r0, #14]
 801cfe0:	8203      	strh	r3, [r0, #16]
 801cfe2:	8243      	strh	r3, [r0, #18]
 801cfe4:	8283      	strh	r3, [r0, #20]
 801cfe6:	82c3      	strh	r3, [r0, #22]
 801cfe8:	6203      	str	r3, [r0, #32]
 801cfea:	8483      	strh	r3, [r0, #36]	@ 0x24
 801cfec:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801cfee:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801cff2:	6343      	str	r3, [r0, #52]	@ 0x34
 801cff4:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801cff8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801cffc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d000:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801d004:	4b09      	ldr	r3, [pc, #36]	@ (801d02c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d006:	4628      	mov	r0, r5
 801d008:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d00c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801d00e:	4a08      	ldr	r2, [pc, #32]	@ (801d030 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d010:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d014:	4798      	blx	r3
 801d016:	6863      	ldr	r3, [r4, #4]
 801d018:	4628      	mov	r0, r5
 801d01a:	4631      	mov	r1, r6
 801d01c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d01e:	4798      	blx	r3
 801d020:	4620      	mov	r0, r4
 801d022:	bd70      	pop	{r4, r5, r6, pc}
 801d024:	08030b9c 	.word	0x08030b9c
 801d028:	080301f0 	.word	0x080301f0
 801d02c:	24028766 	.word	0x24028766
 801d030:	24028764 	.word	0x24028764

0801d034 <_ZN8touchgfx6Screen4drawEv>:
 801d034:	4b09      	ldr	r3, [pc, #36]	@ (801d05c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d036:	b507      	push	{r0, r1, r2, lr}
 801d038:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d03c:	2100      	movs	r1, #0
 801d03e:	4b08      	ldr	r3, [pc, #32]	@ (801d060 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d040:	9100      	str	r1, [sp, #0]
 801d042:	4669      	mov	r1, sp
 801d044:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d048:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d04c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d050:	6803      	ldr	r3, [r0, #0]
 801d052:	689b      	ldr	r3, [r3, #8]
 801d054:	4798      	blx	r3
 801d056:	b003      	add	sp, #12
 801d058:	f85d fb04 	ldr.w	pc, [sp], #4
 801d05c:	24028764 	.word	0x24028764
 801d060:	24028766 	.word	0x24028766

0801d064 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d068:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d06c:	b089      	sub	sp, #36	@ 0x24
 801d06e:	4680      	mov	r8, r0
 801d070:	460c      	mov	r4, r1
 801d072:	2b00      	cmp	r3, #0
 801d074:	4615      	mov	r5, r2
 801d076:	dd0e      	ble.n	801d096 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d078:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	dd0a      	ble.n	801d096 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d080:	4628      	mov	r0, r5
 801d082:	f7ff ff5b 	bl	801cf3c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d086:	4621      	mov	r1, r4
 801d088:	f7fd ff99 	bl	801afbe <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d08c:	69eb      	ldr	r3, [r5, #28]
 801d08e:	b928      	cbnz	r0, 801d09c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d090:	461d      	mov	r5, r3
 801d092:	2b00      	cmp	r3, #0
 801d094:	d1f4      	bne.n	801d080 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d096:	b009      	add	sp, #36	@ 0x24
 801d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d09c:	ae04      	add	r6, sp, #16
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	f000 80b5 	beq.w	801d20e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d0a4:	682b      	ldr	r3, [r5, #0]
 801d0a6:	4629      	mov	r1, r5
 801d0a8:	a802      	add	r0, sp, #8
 801d0aa:	68db      	ldr	r3, [r3, #12]
 801d0ac:	4798      	blx	r3
 801d0ae:	4628      	mov	r0, r5
 801d0b0:	f7ff ff60 	bl	801cf74 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d0b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d0b8:	4407      	add	r7, r0
 801d0ba:	4628      	mov	r0, r5
 801d0bc:	f7ff ff6e 	bl	801cf9c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d0c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d0c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d0c8:	b23f      	sxth	r7, r7
 801d0ca:	4418      	add	r0, r3
 801d0cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d0d0:	4621      	mov	r1, r4
 801d0d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d0d6:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d0da:	4630      	mov	r0, r6
 801d0dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d0e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d0e4:	f7f6 fb98 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 801d0e8:	4628      	mov	r0, r5
 801d0ea:	f7ff ff27 	bl	801cf3c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d0ee:	ab06      	add	r3, sp, #24
 801d0f0:	4602      	mov	r2, r0
 801d0f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d0f6:	e883 0003 	stmia.w	r3, {r0, r1}
 801d0fa:	4611      	mov	r1, r2
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	f7f6 fb8b 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 801d102:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d106:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d10a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d10e:	4299      	cmp	r1, r3
 801d110:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d114:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d118:	d10b      	bne.n	801d132 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d11a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d11e:	4552      	cmp	r2, sl
 801d120:	d107      	bne.n	801d132 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d122:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d126:	455a      	cmp	r2, fp
 801d128:	d103      	bne.n	801d132 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d12a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d12e:	454a      	cmp	r2, r9
 801d130:	d06d      	beq.n	801d20e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d132:	f1bb 0f00 	cmp.w	fp, #0
 801d136:	dd65      	ble.n	801d204 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d138:	f1b9 0f00 	cmp.w	r9, #0
 801d13c:	dd62      	ble.n	801d204 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d13e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d142:	fa1f f08a 	uxth.w	r0, sl
 801d146:	4552      	cmp	r2, sl
 801d148:	9000      	str	r0, [sp, #0]
 801d14a:	da12      	bge.n	801d172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d14c:	9301      	str	r3, [sp, #4]
 801d14e:	9b00      	ldr	r3, [sp, #0]
 801d150:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d154:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d158:	1a9a      	subs	r2, r3, r2
 801d15a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d15e:	4631      	mov	r1, r6
 801d160:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d164:	4640      	mov	r0, r8
 801d166:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d16a:	69ea      	ldr	r2, [r5, #28]
 801d16c:	f7ff ff7a 	bl	801d064 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d170:	9b01      	ldr	r3, [sp, #4]
 801d172:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d176:	b29f      	uxth	r7, r3
 801d178:	429a      	cmp	r2, r3
 801d17a:	da0d      	bge.n	801d198 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d17c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d180:	1aba      	subs	r2, r7, r2
 801d182:	f8ad a012 	strh.w	sl, [sp, #18]
 801d186:	4631      	mov	r1, r6
 801d188:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d18c:	4640      	mov	r0, r8
 801d18e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d192:	69ea      	ldr	r2, [r5, #28]
 801d194:	f7ff ff66 	bl	801d064 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d198:	8822      	ldrh	r2, [r4, #0]
 801d19a:	445f      	add	r7, fp
 801d19c:	88a3      	ldrh	r3, [r4, #4]
 801d19e:	b2bf      	uxth	r7, r7
 801d1a0:	4413      	add	r3, r2
 801d1a2:	b23a      	sxth	r2, r7
 801d1a4:	b29b      	uxth	r3, r3
 801d1a6:	b219      	sxth	r1, r3
 801d1a8:	4291      	cmp	r1, r2
 801d1aa:	dd0d      	ble.n	801d1c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d1ac:	1bdb      	subs	r3, r3, r7
 801d1ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d1b2:	f8ad a012 	strh.w	sl, [sp, #18]
 801d1b6:	4631      	mov	r1, r6
 801d1b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d1bc:	4640      	mov	r0, r8
 801d1be:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d1c2:	69ea      	ldr	r2, [r5, #28]
 801d1c4:	f7ff ff4e 	bl	801d064 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d1c8:	88e2      	ldrh	r2, [r4, #6]
 801d1ca:	8863      	ldrh	r3, [r4, #2]
 801d1cc:	4413      	add	r3, r2
 801d1ce:	9a00      	ldr	r2, [sp, #0]
 801d1d0:	444a      	add	r2, r9
 801d1d2:	b29b      	uxth	r3, r3
 801d1d4:	fa1f f982 	uxth.w	r9, r2
 801d1d8:	b219      	sxth	r1, r3
 801d1da:	fa0f f289 	sxth.w	r2, r9
 801d1de:	428a      	cmp	r2, r1
 801d1e0:	da15      	bge.n	801d20e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d1e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d1e6:	eba3 0309 	sub.w	r3, r3, r9
 801d1ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d1ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d1f2:	4631      	mov	r1, r6
 801d1f4:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d1f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d1fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d200:	69ea      	ldr	r2, [r5, #28]
 801d202:	e001      	b.n	801d208 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d204:	69ea      	ldr	r2, [r5, #28]
 801d206:	4621      	mov	r1, r4
 801d208:	4640      	mov	r0, r8
 801d20a:	f7ff ff2b 	bl	801d064 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d20e:	4628      	mov	r0, r5
 801d210:	f7ff fe94 	bl	801cf3c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d214:	6861      	ldr	r1, [r4, #4]
 801d216:	4602      	mov	r2, r0
 801d218:	4633      	mov	r3, r6
 801d21a:	6820      	ldr	r0, [r4, #0]
 801d21c:	c303      	stmia	r3!, {r0, r1}
 801d21e:	4611      	mov	r1, r2
 801d220:	4630      	mov	r0, r6
 801d222:	f7f6 faf9 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 801d226:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	f77f af33 	ble.w	801d096 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d230:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d234:	2b00      	cmp	r3, #0
 801d236:	f77f af2e 	ble.w	801d096 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d23a:	4628      	mov	r0, r5
 801d23c:	f7ff fe9a 	bl	801cf74 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d240:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d244:	1a18      	subs	r0, r3, r0
 801d246:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d24a:	4628      	mov	r0, r5
 801d24c:	f7ff fea6 	bl	801cf9c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d250:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d254:	4631      	mov	r1, r6
 801d256:	1a18      	subs	r0, r3, r0
 801d258:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d25c:	4628      	mov	r0, r5
 801d25e:	682b      	ldr	r3, [r5, #0]
 801d260:	689b      	ldr	r3, [r3, #8]
 801d262:	4798      	blx	r3
 801d264:	e717      	b.n	801d096 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d266 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d266:	b570      	push	{r4, r5, r6, lr}
 801d268:	1d06      	adds	r6, r0, #4
 801d26a:	b086      	sub	sp, #24
 801d26c:	460c      	mov	r4, r1
 801d26e:	2300      	movs	r3, #0
 801d270:	4631      	mov	r1, r6
 801d272:	4605      	mov	r5, r0
 801d274:	a802      	add	r0, sp, #8
 801d276:	9301      	str	r3, [sp, #4]
 801d278:	f7ff f898 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d27c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d280:	8822      	ldrh	r2, [r4, #0]
 801d282:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d286:	1ad2      	subs	r2, r2, r3
 801d288:	8863      	ldrh	r3, [r4, #2]
 801d28a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d28e:	1a5b      	subs	r3, r3, r1
 801d290:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d294:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d298:	aa01      	add	r2, sp, #4
 801d29a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d29e:	4630      	mov	r0, r6
 801d2a0:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d2a4:	a904      	add	r1, sp, #16
 801d2a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d2aa:	f7f6 fb8d 	bl	80139c8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d2ae:	9a01      	ldr	r2, [sp, #4]
 801d2b0:	b11a      	cbz	r2, 801d2ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d2b2:	4621      	mov	r1, r4
 801d2b4:	4628      	mov	r0, r5
 801d2b6:	f7ff fed5 	bl	801d064 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d2ba:	b006      	add	sp, #24
 801d2bc:	bd70      	pop	{r4, r5, r6, pc}

0801d2be <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d2be:	4602      	mov	r2, r0
 801d2c0:	b530      	push	{r4, r5, lr}
 801d2c2:	4604      	mov	r4, r0
 801d2c4:	b085      	sub	sp, #20
 801d2c6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d2ca:	460d      	mov	r5, r1
 801d2cc:	466b      	mov	r3, sp
 801d2ce:	6851      	ldr	r1, [r2, #4]
 801d2d0:	c303      	stmia	r3!, {r0, r1}
 801d2d2:	4629      	mov	r1, r5
 801d2d4:	4668      	mov	r0, sp
 801d2d6:	f7f6 fa9f 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 801d2da:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801d2de:	b12b      	cbz	r3, 801d2ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d2e0:	4669      	mov	r1, sp
 801d2e2:	4620      	mov	r0, r4
 801d2e4:	f7ff ffbf 	bl	801d266 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d2e8:	b005      	add	sp, #20
 801d2ea:	bd30      	pop	{r4, r5, pc}
 801d2ec:	3404      	adds	r4, #4
 801d2ee:	a802      	add	r0, sp, #8
 801d2f0:	4621      	mov	r1, r4
 801d2f2:	f7ff f85b 	bl	801c3ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d2f6:	f8bd 3000 	ldrh.w	r3, [sp]
 801d2fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d2fe:	4669      	mov	r1, sp
 801d300:	4620      	mov	r0, r4
 801d302:	1a9b      	subs	r3, r3, r2
 801d304:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d308:	f8ad 3000 	strh.w	r3, [sp]
 801d30c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d310:	1a9b      	subs	r3, r3, r2
 801d312:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d316:	f7f6 fb1e 	bl	8013956 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d31a:	e7e5      	b.n	801d2e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d31c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d31c:	460b      	mov	r3, r1
 801d31e:	680a      	ldr	r2, [r1, #0]
 801d320:	1d01      	adds	r1, r0, #4
 801d322:	6992      	ldr	r2, [r2, #24]
 801d324:	4618      	mov	r0, r3
 801d326:	4710      	bx	r2

0801d328 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d328:	4298      	cmp	r0, r3
 801d32a:	d200      	bcs.n	801d32e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801d32c:	b913      	cbnz	r3, 801d334 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801d32e:	440a      	add	r2, r1
 801d330:	b210      	sxth	r0, r2
 801d332:	4770      	bx	lr
 801d334:	ee07 0a90 	vmov	s15, r0
 801d338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d33c:	ee07 3a90 	vmov	s15, r3
 801d340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d348:	ee07 2a90 	vmov	s15, r2
 801d34c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d350:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801d354:	ee07 1a90 	vmov	s15, r1
 801d358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d35c:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d360:	ee67 5a07 	vmul.f32	s11, s14, s14
 801d364:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d368:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d36c:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d378:	bfcc      	ite	gt
 801d37a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d37e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d386:	ee17 3a90 	vmov	r3, s15
 801d38a:	b218      	sxth	r0, r3
 801d38c:	4770      	bx	lr

0801d38e <_ZN8touchgfx12TextProviderC1Ev>:
 801d38e:	b538      	push	{r3, r4, r5, lr}
 801d390:	2500      	movs	r5, #0
 801d392:	2302      	movs	r3, #2
 801d394:	4604      	mov	r4, r0
 801d396:	220e      	movs	r2, #14
 801d398:	7403      	strb	r3, [r0, #16]
 801d39a:	4629      	mov	r1, r5
 801d39c:	6145      	str	r5, [r0, #20]
 801d39e:	7605      	strb	r5, [r0, #24]
 801d3a0:	83c5      	strh	r5, [r0, #30]
 801d3a2:	8405      	strh	r5, [r0, #32]
 801d3a4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d3a6:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d3a8:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801d3aa:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801d3ae:	e9c0 5500 	strd	r5, r5, [r0]
 801d3b2:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801d3b6:	304c      	adds	r0, #76	@ 0x4c
 801d3b8:	f00e f884 	bl	802b4c4 <memset>
 801d3bc:	2301      	movs	r3, #1
 801d3be:	4620      	mov	r0, r4
 801d3c0:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801d3c4:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d3c8:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801d3cc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801d3d0:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801d3d4:	f7eb fe52 	bl	800907c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d3d8:	4620      	mov	r0, r4
 801d3da:	bd38      	pop	{r3, r4, r5, pc}

0801d3dc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801d3dc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d3de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d3e2:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801d3e4:	fab0 f080 	clz	r0, r0
 801d3e8:	0940      	lsrs	r0, r0, #5
 801d3ea:	4770      	bx	lr

0801d3ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d3ec:	b530      	push	{r4, r5, lr}
 801d3ee:	2500      	movs	r5, #0
 801d3f0:	2401      	movs	r4, #1
 801d3f2:	6843      	ldr	r3, [r0, #4]
 801d3f4:	b913      	cbnz	r3, 801d3fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d3f6:	6803      	ldr	r3, [r0, #0]
 801d3f8:	b313      	cbz	r3, 801d440 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d3fa:	6043      	str	r3, [r0, #4]
 801d3fc:	7e03      	ldrb	r3, [r0, #24]
 801d3fe:	b143      	cbz	r3, 801d412 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d400:	6943      	ldr	r3, [r0, #20]
 801d402:	b12b      	cbz	r3, 801d410 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d404:	881a      	ldrh	r2, [r3, #0]
 801d406:	b11a      	cbz	r2, 801d410 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d408:	1c9a      	adds	r2, r3, #2
 801d40a:	6142      	str	r2, [r0, #20]
 801d40c:	8818      	ldrh	r0, [r3, #0]
 801d40e:	bd30      	pop	{r4, r5, pc}
 801d410:	7605      	strb	r5, [r0, #24]
 801d412:	6843      	ldr	r3, [r0, #4]
 801d414:	8819      	ldrh	r1, [r3, #0]
 801d416:	b199      	cbz	r1, 801d440 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d418:	1c9a      	adds	r2, r3, #2
 801d41a:	2902      	cmp	r1, #2
 801d41c:	6042      	str	r2, [r0, #4]
 801d41e:	d1f5      	bne.n	801d40c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d420:	7c03      	ldrb	r3, [r0, #16]
 801d422:	2b01      	cmp	r3, #1
 801d424:	d8e5      	bhi.n	801d3f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d426:	1c5a      	adds	r2, r3, #1
 801d428:	3302      	adds	r3, #2
 801d42a:	7402      	strb	r2, [r0, #16]
 801d42c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d430:	6143      	str	r3, [r0, #20]
 801d432:	2b00      	cmp	r3, #0
 801d434:	d0dd      	beq.n	801d3f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d436:	881b      	ldrh	r3, [r3, #0]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d0da      	beq.n	801d3f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d43c:	7604      	strb	r4, [r0, #24]
 801d43e:	e7d8      	b.n	801d3f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d440:	2000      	movs	r0, #0
 801d442:	e7e4      	b.n	801d40e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d444:	6001      	str	r1, [r0, #0]
 801d446:	2100      	movs	r1, #0
 801d448:	b430      	push	{r4, r5}
 801d44a:	6041      	str	r1, [r0, #4]
 801d44c:	6815      	ldr	r5, [r2, #0]
 801d44e:	6085      	str	r5, [r0, #8]
 801d450:	6852      	ldr	r2, [r2, #4]
 801d452:	6443      	str	r3, [r0, #68]	@ 0x44
 801d454:	9b02      	ldr	r3, [sp, #8]
 801d456:	60c2      	str	r2, [r0, #12]
 801d458:	7401      	strb	r1, [r0, #16]
 801d45a:	6141      	str	r1, [r0, #20]
 801d45c:	7601      	strb	r1, [r0, #24]
 801d45e:	8701      	strh	r1, [r0, #56]	@ 0x38
 801d460:	8401      	strh	r1, [r0, #32]
 801d462:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801d466:	6483      	str	r3, [r0, #72]	@ 0x48
 801d468:	bc30      	pop	{r4, r5}
 801d46a:	f7eb be07 	b.w	800907c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d46e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801d46e:	b408      	push	{r3}
 801d470:	b510      	push	{r4, lr}
 801d472:	b085      	sub	sp, #20
 801d474:	ac07      	add	r4, sp, #28
 801d476:	f854 3b04 	ldr.w	r3, [r4], #4
 801d47a:	9300      	str	r3, [sp, #0]
 801d47c:	4613      	mov	r3, r2
 801d47e:	4622      	mov	r2, r4
 801d480:	9403      	str	r4, [sp, #12]
 801d482:	f7ff ffdf 	bl	801d444 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d486:	b005      	add	sp, #20
 801d488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d48c:	b001      	add	sp, #4
 801d48e:	4770      	bx	lr

0801d490 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d490:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d492:	4605      	mov	r5, r0
 801d494:	4608      	mov	r0, r1
 801d496:	b1f1      	cbz	r1, 801d4d6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d498:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801d49c:	460b      	mov	r3, r1
 801d49e:	f101 0708 	add.w	r7, r1, #8
 801d4a2:	4622      	mov	r2, r4
 801d4a4:	6818      	ldr	r0, [r3, #0]
 801d4a6:	3308      	adds	r3, #8
 801d4a8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d4ac:	4626      	mov	r6, r4
 801d4ae:	42bb      	cmp	r3, r7
 801d4b0:	c603      	stmia	r6!, {r0, r1}
 801d4b2:	4634      	mov	r4, r6
 801d4b4:	d1f6      	bne.n	801d4a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d4b6:	6818      	ldr	r0, [r3, #0]
 801d4b8:	6030      	str	r0, [r6, #0]
 801d4ba:	4610      	mov	r0, r2
 801d4bc:	889b      	ldrh	r3, [r3, #4]
 801d4be:	80b3      	strh	r3, [r6, #4]
 801d4c0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801d4c4:	015b      	lsls	r3, r3, #5
 801d4c6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d4ca:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801d4ce:	430b      	orrs	r3, r1
 801d4d0:	425b      	negs	r3, r3
 801d4d2:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801d4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4d8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d4d8:	b538      	push	{r3, r4, r5, lr}
 801d4da:	460c      	mov	r4, r1
 801d4dc:	6811      	ldr	r1, [r2, #0]
 801d4de:	4610      	mov	r0, r2
 801d4e0:	68cd      	ldr	r5, [r1, #12]
 801d4e2:	4619      	mov	r1, r3
 801d4e4:	47a8      	blx	r5
 801d4e6:	2800      	cmp	r0, #0
 801d4e8:	bf08      	it	eq
 801d4ea:	4620      	moveq	r0, r4
 801d4ec:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d4f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4f4:	468c      	mov	ip, r1
 801d4f6:	4604      	mov	r4, r0
 801d4f8:	4615      	mov	r5, r2
 801d4fa:	b942      	cbnz	r2, 801d50e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801d4fc:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d500:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801d504:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801d508:	4628      	mov	r0, r5
 801d50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d50e:	7b50      	ldrb	r0, [r2, #13]
 801d510:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801d514:	8893      	ldrh	r3, [r2, #4]
 801d516:	0106      	lsls	r6, r0, #4
 801d518:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d51c:	79ee      	ldrb	r6, [r5, #7]
 801d51e:	4316      	orrs	r6, r2
 801d520:	185a      	adds	r2, r3, r1
 801d522:	b291      	uxth	r1, r2
 801d524:	b2b7      	uxth	r7, r6
 801d526:	291d      	cmp	r1, #29
 801d528:	d87f      	bhi.n	801d62a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801d52a:	2201      	movs	r2, #1
 801d52c:	10f6      	asrs	r6, r6, #3
 801d52e:	408a      	lsls	r2, r1
 801d530:	4974      	ldr	r1, [pc, #464]	@ (801d704 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801d532:	420a      	tst	r2, r1
 801d534:	d12e      	bne.n	801d594 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801d536:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801d53a:	d076      	beq.n	801d62a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801d53c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801d540:	462b      	mov	r3, r5
 801d542:	f105 0e08 	add.w	lr, r5, #8
 801d546:	4615      	mov	r5, r2
 801d548:	6818      	ldr	r0, [r3, #0]
 801d54a:	3308      	adds	r3, #8
 801d54c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d550:	4694      	mov	ip, r2
 801d552:	4573      	cmp	r3, lr
 801d554:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d558:	4662      	mov	r2, ip
 801d55a:	d1f5      	bne.n	801d548 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801d55c:	6818      	ldr	r0, [r3, #0]
 801d55e:	f8cc 0000 	str.w	r0, [ip]
 801d562:	889b      	ldrh	r3, [r3, #4]
 801d564:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d568:	b2b3      	uxth	r3, r6
 801d56a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801d56e:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801d572:	1aca      	subs	r2, r1, r3
 801d574:	1bcf      	subs	r7, r1, r7
 801d576:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801d57a:	b292      	uxth	r2, r2
 801d57c:	1afb      	subs	r3, r7, r3
 801d57e:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801d582:	10d2      	asrs	r2, r2, #3
 801d584:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801d588:	4302      	orrs	r2, r0
 801d58a:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801d58e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d592:	e7b9      	b.n	801d508 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801d594:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801d598:	462b      	mov	r3, r5
 801d59a:	f105 0808 	add.w	r8, r5, #8
 801d59e:	4615      	mov	r5, r2
 801d5a0:	6818      	ldr	r0, [r3, #0]
 801d5a2:	3308      	adds	r3, #8
 801d5a4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d5a8:	4696      	mov	lr, r2
 801d5aa:	4543      	cmp	r3, r8
 801d5ac:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d5b0:	4672      	mov	r2, lr
 801d5b2:	d1f5      	bne.n	801d5a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801d5b4:	6818      	ldr	r0, [r3, #0]
 801d5b6:	f8ce 0000 	str.w	r0, [lr]
 801d5ba:	889b      	ldrh	r3, [r3, #4]
 801d5bc:	f8ae 3004 	strh.w	r3, [lr, #4]
 801d5c0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d5c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d5c6:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801d5c8:	f640 6333 	movw	r3, #3635	@ 0xe33
 801d5cc:	4299      	cmp	r1, r3
 801d5ce:	d111      	bne.n	801d5f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801d5d0:	f8dc 3000 	ldr.w	r3, [ip]
 801d5d4:	4660      	mov	r0, ip
 801d5d6:	68db      	ldr	r3, [r3, #12]
 801d5d8:	4798      	blx	r3
 801d5da:	7b41      	ldrb	r1, [r0, #13]
 801d5dc:	00cb      	lsls	r3, r1, #3
 801d5de:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d5e2:	7a03      	ldrb	r3, [r0, #8]
 801d5e4:	4313      	orrs	r3, r2
 801d5e6:	064a      	lsls	r2, r1, #25
 801d5e8:	bf44      	itt	mi
 801d5ea:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d5ee:	b21b      	sxthmi	r3, r3
 801d5f0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d5f4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801d5f8:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d5fc:	443b      	add	r3, r7
 801d5fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d602:	4433      	add	r3, r6
 801d604:	b29b      	uxth	r3, r3
 801d606:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d60a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d60e:	10db      	asrs	r3, r3, #3
 801d610:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d614:	4313      	orrs	r3, r2
 801d616:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801d61a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d61e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801d622:	1a9b      	subs	r3, r3, r2
 801d624:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801d628:	e76e      	b.n	801d508 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801d62a:	f023 0204 	bic.w	r2, r3, #4
 801d62e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801d632:	428a      	cmp	r2, r1
 801d634:	d003      	beq.n	801d63e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801d636:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801d63a:	4293      	cmp	r3, r2
 801d63c:	d120      	bne.n	801d680 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801d63e:	3b01      	subs	r3, #1
 801d640:	4662      	mov	r2, ip
 801d642:	4629      	mov	r1, r5
 801d644:	4620      	mov	r0, r4
 801d646:	b29b      	uxth	r3, r3
 801d648:	f7ff ff46 	bl	801d4d8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d64c:	7b41      	ldrb	r1, [r0, #13]
 801d64e:	00cb      	lsls	r3, r1, #3
 801d650:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d654:	7a03      	ldrb	r3, [r0, #8]
 801d656:	0648      	lsls	r0, r1, #25
 801d658:	ea43 0302 	orr.w	r3, r3, r2
 801d65c:	bf44      	itt	mi
 801d65e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d662:	b21b      	sxthmi	r3, r3
 801d664:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d668:	7b6b      	ldrb	r3, [r5, #13]
 801d66a:	7aaa      	ldrb	r2, [r5, #10]
 801d66c:	005b      	lsls	r3, r3, #1
 801d66e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d672:	4313      	orrs	r3, r2
 801d674:	115a      	asrs	r2, r3, #5
 801d676:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d67a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d67e:	e032      	b.n	801d6e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801d680:	00c2      	lsls	r2, r0, #3
 801d682:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801d686:	7a2a      	ldrb	r2, [r5, #8]
 801d688:	430a      	orrs	r2, r1
 801d68a:	0641      	lsls	r1, r0, #25
 801d68c:	f640 6109 	movw	r1, #3593	@ 0xe09
 801d690:	bf44      	itt	mi
 801d692:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801d696:	b212      	sxthmi	r2, r2
 801d698:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d69c:	f023 0210 	bic.w	r2, r3, #16
 801d6a0:	428a      	cmp	r2, r1
 801d6a2:	d003      	beq.n	801d6ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 801d6a4:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d6a8:	4293      	cmp	r3, r2
 801d6aa:	d129      	bne.n	801d700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801d6ac:	7b6e      	ldrb	r6, [r5, #13]
 801d6ae:	4629      	mov	r1, r5
 801d6b0:	4620      	mov	r0, r4
 801d6b2:	0076      	lsls	r6, r6, #1
 801d6b4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d6b8:	7aae      	ldrb	r6, [r5, #10]
 801d6ba:	4316      	orrs	r6, r2
 801d6bc:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d6c0:	4293      	cmp	r3, r2
 801d6c2:	4662      	mov	r2, ip
 801d6c4:	bf16      	itet	ne
 801d6c6:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d6ca:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801d6ce:	b29b      	uxthne	r3, r3
 801d6d0:	f7ff ff02 	bl	801d4d8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d6d4:	7b43      	ldrb	r3, [r0, #13]
 801d6d6:	7a82      	ldrb	r2, [r0, #10]
 801d6d8:	005b      	lsls	r3, r3, #1
 801d6da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d6de:	4313      	orrs	r3, r2
 801d6e0:	1af6      	subs	r6, r6, r3
 801d6e2:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801d6e6:	7b69      	ldrb	r1, [r5, #13]
 801d6e8:	00cb      	lsls	r3, r1, #3
 801d6ea:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d6ee:	7a2b      	ldrb	r3, [r5, #8]
 801d6f0:	4313      	orrs	r3, r2
 801d6f2:	064a      	lsls	r2, r1, #25
 801d6f4:	bf44      	itt	mi
 801d6f6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d6fa:	b21b      	sxthmi	r3, r3
 801d6fc:	1bdb      	subs	r3, r3, r7
 801d6fe:	e746      	b.n	801d58e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d700:	2300      	movs	r3, #0
 801d702:	e7ba      	b.n	801d67a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 801d704:	3fc00079 	.word	0x3fc00079

0801d708 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d70c:	4604      	mov	r4, r0
 801d70e:	b942      	cbnz	r2, 801d722 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d714:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801d718:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801d71c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d720:	e047      	b.n	801d7b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d722:	7b51      	ldrb	r1, [r2, #13]
 801d724:	8893      	ldrh	r3, [r2, #4]
 801d726:	010d      	lsls	r5, r1, #4
 801d728:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801d72c:	79d5      	ldrb	r5, [r2, #7]
 801d72e:	4305      	orrs	r5, r0
 801d730:	2d04      	cmp	r5, #4
 801d732:	bfcc      	ite	gt
 801d734:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d738:	f04f 0e01 	movle.w	lr, #1
 801d73c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801d740:	f200 80ab 	bhi.w	801d89a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d744:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801d748:	4283      	cmp	r3, r0
 801d74a:	d216      	bcs.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d74c:	f240 605b 	movw	r0, #1627	@ 0x65b
 801d750:	4283      	cmp	r3, r0
 801d752:	d859      	bhi.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d754:	f240 6057 	movw	r0, #1623	@ 0x657
 801d758:	4283      	cmp	r3, r0
 801d75a:	d20e      	bcs.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d75c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d760:	d24a      	bcs.n	801d7f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d762:	f240 604e 	movw	r0, #1614	@ 0x64e
 801d766:	4283      	cmp	r3, r0
 801d768:	d207      	bcs.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d76a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801d76e:	4283      	cmp	r3, r0
 801d770:	d02a      	beq.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d772:	d821      	bhi.n	801d7b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d774:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801d778:	d35b      	bcc.n	801d832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d77a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801d77e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d782:	f040 80d0 	bne.w	801d926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d786:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801d78a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d78e:	f040 80ca 	bne.w	801d926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d792:	00cb      	lsls	r3, r1, #3
 801d794:	0649      	lsls	r1, r1, #25
 801d796:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d79a:	7a13      	ldrb	r3, [r2, #8]
 801d79c:	ea43 0300 	orr.w	r3, r3, r0
 801d7a0:	bf44      	itt	mi
 801d7a2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d7a6:	b21b      	sxthmi	r3, r3
 801d7a8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d7ac:	1b5d      	subs	r5, r3, r5
 801d7ae:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d7b2:	4610      	mov	r0, r2
 801d7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7b8:	f240 604b 	movw	r0, #1611	@ 0x64b
 801d7bc:	4283      	cmp	r3, r0
 801d7be:	d338      	bcc.n	801d832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d7c0:	f240 604c 	movw	r0, #1612	@ 0x64c
 801d7c4:	4283      	cmp	r3, r0
 801d7c6:	d9d8      	bls.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d7c8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801d7cc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801d7d0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d7d4:	f040 80f3 	bne.w	801d9be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d7d8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d7dc:	f040 80ef 	bne.w	801d9be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d7e0:	00cb      	lsls	r3, r1, #3
 801d7e2:	064e      	lsls	r6, r1, #25
 801d7e4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d7e8:	7a13      	ldrb	r3, [r2, #8]
 801d7ea:	ea43 0300 	orr.w	r3, r3, r0
 801d7ee:	bf44      	itt	mi
 801d7f0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d7f4:	b21b      	sxthmi	r3, r3
 801d7f6:	e7d9      	b.n	801d7ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d7f8:	f240 6054 	movw	r0, #1620	@ 0x654
 801d7fc:	4283      	cmp	r3, r0
 801d7fe:	d8e3      	bhi.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d800:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d804:	d9e0      	bls.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d806:	e7b8      	b.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d808:	f240 6074 	movw	r0, #1652	@ 0x674
 801d80c:	4283      	cmp	r3, r0
 801d80e:	d0b4      	beq.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d810:	d82d      	bhi.n	801d86e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d812:	f240 605e 	movw	r0, #1630	@ 0x65e
 801d816:	4283      	cmp	r3, r0
 801d818:	d804      	bhi.n	801d824 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d81a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801d81e:	4283      	cmp	r3, r0
 801d820:	d3d2      	bcc.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d822:	e7aa      	b.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d824:	f240 605f 	movw	r0, #1631	@ 0x65f
 801d828:	4283      	cmp	r3, r0
 801d82a:	d0cd      	beq.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d82c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801d830:	d0a3      	beq.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d832:	00cb      	lsls	r3, r1, #3
 801d834:	0649      	lsls	r1, r1, #25
 801d836:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d83a:	7a13      	ldrb	r3, [r2, #8]
 801d83c:	ea43 0300 	orr.w	r3, r3, r0
 801d840:	bf44      	itt	mi
 801d842:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d846:	b21b      	sxthmi	r3, r3
 801d848:	1b5d      	subs	r5, r3, r5
 801d84a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d84e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d852:	7b53      	ldrb	r3, [r2, #13]
 801d854:	015b      	lsls	r3, r3, #5
 801d856:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d85a:	7993      	ldrb	r3, [r2, #6]
 801d85c:	430b      	orrs	r3, r1
 801d85e:	2105      	movs	r1, #5
 801d860:	005b      	lsls	r3, r3, #1
 801d862:	fb93 f3f1 	sdiv	r3, r3, r1
 801d866:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d86a:	440b      	add	r3, r1
 801d86c:	e756      	b.n	801d71c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d86e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801d872:	4283      	cmp	r3, r0
 801d874:	d809      	bhi.n	801d88a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d876:	f240 60df 	movw	r0, #1759	@ 0x6df
 801d87a:	4283      	cmp	r3, r0
 801d87c:	f4bf af7d 	bcs.w	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d880:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801d884:	2b05      	cmp	r3, #5
 801d886:	d8d4      	bhi.n	801d832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d888:	e777      	b.n	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d88a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801d88e:	4283      	cmp	r3, r0
 801d890:	d09a      	beq.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d892:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801d896:	4283      	cmp	r3, r0
 801d898:	e7ca      	b.n	801d830 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d89a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801d89e:	d22b      	bcs.n	801d8f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d8a0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801d8a4:	4283      	cmp	r3, r0
 801d8a6:	d28f      	bcs.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d8a8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801d8ac:	4283      	cmp	r3, r0
 801d8ae:	d816      	bhi.n	801d8de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d8b0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801d8b4:	4283      	cmp	r3, r0
 801d8b6:	f4bf af60 	bcs.w	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d8ba:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801d8be:	4283      	cmp	r3, r0
 801d8c0:	d80a      	bhi.n	801d8d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d8c2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801d8c6:	4283      	cmp	r3, r0
 801d8c8:	f4bf af57 	bcs.w	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d8cc:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801d8d0:	4283      	cmp	r3, r0
 801d8d2:	f43f af79 	beq.w	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d8d6:	e7ac      	b.n	801d832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d8d8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801d8dc:	e7f8      	b.n	801d8d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d8de:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801d8e2:	4283      	cmp	r3, r0
 801d8e4:	d802      	bhi.n	801d8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d8e6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801d8ea:	e798      	b.n	801d81e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d8ec:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801d8f0:	4283      	cmp	r3, r0
 801d8f2:	f47f af42 	bne.w	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d8f6:	e767      	b.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d8f8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801d8fc:	4283      	cmp	r3, r0
 801d8fe:	f43f af63 	beq.w	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d902:	d802      	bhi.n	801d90a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d904:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801d908:	e7f2      	b.n	801d8f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d90a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801d90e:	4283      	cmp	r3, r0
 801d910:	d805      	bhi.n	801d91e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d912:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801d916:	4283      	cmp	r3, r0
 801d918:	f4ff af2f 	bcc.w	801d77a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d91c:	e754      	b.n	801d7c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d91e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801d922:	4283      	cmp	r3, r0
 801d924:	e7af      	b.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d926:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d92a:	4617      	mov	r7, r2
 801d92c:	f102 0808 	add.w	r8, r2, #8
 801d930:	4666      	mov	r6, ip
 801d932:	6838      	ldr	r0, [r7, #0]
 801d934:	3708      	adds	r7, #8
 801d936:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d93a:	46e6      	mov	lr, ip
 801d93c:	4547      	cmp	r7, r8
 801d93e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d942:	46f4      	mov	ip, lr
 801d944:	d1f5      	bne.n	801d932 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d946:	6838      	ldr	r0, [r7, #0]
 801d948:	f8ce 0000 	str.w	r0, [lr]
 801d94c:	88b9      	ldrh	r1, [r7, #4]
 801d94e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d952:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d956:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d95a:	d009      	beq.n	801d970 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801d95c:	7b51      	ldrb	r1, [r2, #13]
 801d95e:	7992      	ldrb	r2, [r2, #6]
 801d960:	0149      	lsls	r1, r1, #5
 801d962:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d966:	4311      	orrs	r1, r2
 801d968:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d96c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d970:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d974:	b2ad      	uxth	r5, r5
 801d976:	d00d      	beq.n	801d994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801d978:	442b      	add	r3, r5
 801d97a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d97e:	b29b      	uxth	r3, r3
 801d980:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d984:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d988:	10db      	asrs	r3, r3, #3
 801d98a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d98e:	4313      	orrs	r3, r2
 801d990:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d994:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d998:	00cb      	lsls	r3, r1, #3
 801d99a:	064f      	lsls	r7, r1, #25
 801d99c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d9a0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d9a4:	ea43 0302 	orr.w	r3, r3, r2
 801d9a8:	bf44      	itt	mi
 801d9aa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d9ae:	b21b      	sxthmi	r3, r3
 801d9b0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d9b4:	1b5b      	subs	r3, r3, r5
 801d9b6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d9ba:	4632      	mov	r2, r6
 801d9bc:	e6f9      	b.n	801d7b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d9be:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d9c2:	4617      	mov	r7, r2
 801d9c4:	f102 0908 	add.w	r9, r2, #8
 801d9c8:	4666      	mov	r6, ip
 801d9ca:	6838      	ldr	r0, [r7, #0]
 801d9cc:	3708      	adds	r7, #8
 801d9ce:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d9d2:	46e0      	mov	r8, ip
 801d9d4:	454f      	cmp	r7, r9
 801d9d6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d9da:	46c4      	mov	ip, r8
 801d9dc:	d1f5      	bne.n	801d9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801d9de:	6838      	ldr	r0, [r7, #0]
 801d9e0:	f8c8 0000 	str.w	r0, [r8]
 801d9e4:	88b9      	ldrh	r1, [r7, #4]
 801d9e6:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d9ea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d9ee:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d9f2:	d009      	beq.n	801da08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801d9f4:	7b51      	ldrb	r1, [r2, #13]
 801d9f6:	7992      	ldrb	r2, [r2, #6]
 801d9f8:	0149      	lsls	r1, r1, #5
 801d9fa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d9fe:	4311      	orrs	r1, r2
 801da00:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801da04:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801da08:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801da0c:	d00e      	beq.n	801da2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801da0e:	eba3 030e 	sub.w	r3, r3, lr
 801da12:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801da16:	b29b      	uxth	r3, r3
 801da18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801da1c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801da20:	10db      	asrs	r3, r3, #3
 801da22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801da26:	4313      	orrs	r3, r2
 801da28:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801da2c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801da30:	00cb      	lsls	r3, r1, #3
 801da32:	0648      	lsls	r0, r1, #25
 801da34:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801da38:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801da3c:	ea43 0302 	orr.w	r3, r3, r2
 801da40:	bf44      	itt	mi
 801da42:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801da46:	b21b      	sxthmi	r3, r3
 801da48:	1b5d      	subs	r5, r3, r5
 801da4a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801da4e:	e7b4      	b.n	801d9ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801da50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801da50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da54:	461e      	mov	r6, r3
 801da56:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801da58:	4604      	mov	r4, r0
 801da5a:	4617      	mov	r7, r2
 801da5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801da60:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801da64:	f7eb fac8 	bl	8008ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801da68:	4605      	mov	r5, r0
 801da6a:	b918      	cbnz	r0, 801da74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801da6c:	6030      	str	r0, [r6, #0]
 801da6e:	4628      	mov	r0, r5
 801da70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da74:	683b      	ldr	r3, [r7, #0]
 801da76:	4601      	mov	r1, r0
 801da78:	4638      	mov	r0, r7
 801da7a:	68db      	ldr	r3, [r3, #12]
 801da7c:	4798      	blx	r3
 801da7e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801da82:	4602      	mov	r2, r0
 801da84:	6030      	str	r0, [r6, #0]
 801da86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801da8a:	d213      	bcs.n	801dab4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801da8c:	4643      	mov	r3, r8
 801da8e:	4639      	mov	r1, r7
 801da90:	4620      	mov	r0, r4
 801da92:	f7ff fe39 	bl	801d708 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801da96:	6030      	str	r0, [r6, #0]
 801da98:	6833      	ldr	r3, [r6, #0]
 801da9a:	b143      	cbz	r3, 801daae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801da9c:	7b5a      	ldrb	r2, [r3, #13]
 801da9e:	7a9b      	ldrb	r3, [r3, #10]
 801daa0:	0052      	lsls	r2, r2, #1
 801daa2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801daa6:	4313      	orrs	r3, r2
 801daa8:	bf0c      	ite	eq
 801daaa:	2301      	moveq	r3, #1
 801daac:	2300      	movne	r3, #0
 801daae:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801dab2:	e7dc      	b.n	801da6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801dab4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801dab8:	b29b      	uxth	r3, r3
 801daba:	2b7f      	cmp	r3, #127	@ 0x7f
 801dabc:	d804      	bhi.n	801dac8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801dabe:	4639      	mov	r1, r7
 801dac0:	4620      	mov	r0, r4
 801dac2:	f7ff fd15 	bl	801d4f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801dac6:	e7e6      	b.n	801da96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801dac8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d0e3      	beq.n	801da98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801dad0:	f640 1302 	movw	r3, #2306	@ 0x902
 801dad4:	429d      	cmp	r5, r3
 801dad6:	d1df      	bne.n	801da98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801dad8:	4601      	mov	r1, r0
 801dada:	4620      	mov	r0, r4
 801dadc:	f7ff fcd8 	bl	801d490 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801dae0:	e7d9      	b.n	801da96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801dae2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801dae2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dae6:	461e      	mov	r6, r3
 801dae8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801daea:	4604      	mov	r4, r0
 801daec:	4617      	mov	r7, r2
 801daee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801daf2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801daf6:	f7eb fa7f 	bl	8008ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dafa:	4605      	mov	r5, r0
 801dafc:	b918      	cbnz	r0, 801db06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801dafe:	6030      	str	r0, [r6, #0]
 801db00:	4628      	mov	r0, r5
 801db02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db06:	683b      	ldr	r3, [r7, #0]
 801db08:	4601      	mov	r1, r0
 801db0a:	4638      	mov	r0, r7
 801db0c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801db10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801db14:	47c8      	blx	r9
 801db16:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801db1a:	4602      	mov	r2, r0
 801db1c:	6030      	str	r0, [r6, #0]
 801db1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801db22:	d213      	bcs.n	801db4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801db24:	4643      	mov	r3, r8
 801db26:	4639      	mov	r1, r7
 801db28:	4620      	mov	r0, r4
 801db2a:	f7ff fded 	bl	801d708 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801db2e:	6030      	str	r0, [r6, #0]
 801db30:	6833      	ldr	r3, [r6, #0]
 801db32:	b143      	cbz	r3, 801db46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801db34:	7b5a      	ldrb	r2, [r3, #13]
 801db36:	7a9b      	ldrb	r3, [r3, #10]
 801db38:	0052      	lsls	r2, r2, #1
 801db3a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801db3e:	4313      	orrs	r3, r2
 801db40:	bf0c      	ite	eq
 801db42:	2301      	moveq	r3, #1
 801db44:	2300      	movne	r3, #0
 801db46:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801db4a:	e7d9      	b.n	801db00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801db4c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801db50:	b29b      	uxth	r3, r3
 801db52:	2b7f      	cmp	r3, #127	@ 0x7f
 801db54:	d804      	bhi.n	801db60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801db56:	4639      	mov	r1, r7
 801db58:	4620      	mov	r0, r4
 801db5a:	f7ff fcc9 	bl	801d4f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801db5e:	e7e6      	b.n	801db2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801db60:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801db64:	2b00      	cmp	r3, #0
 801db66:	d0e3      	beq.n	801db30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801db68:	f640 1302 	movw	r3, #2306	@ 0x902
 801db6c:	429d      	cmp	r5, r3
 801db6e:	d1df      	bne.n	801db30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801db70:	4601      	mov	r1, r0
 801db72:	4620      	mov	r0, r4
 801db74:	f7ff fc8c 	bl	801d490 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801db78:	e7d9      	b.n	801db2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801db7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801db7a:	b510      	push	{r4, lr}
 801db7c:	4604      	mov	r4, r0
 801db7e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801db82:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801db84:	b1e1      	cbz	r1, 801dbc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801db86:	2b0a      	cmp	r3, #10
 801db88:	d02d      	beq.n	801dbe6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801db8a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801db8c:	3901      	subs	r1, #1
 801db8e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801db92:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801db94:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801db98:	1c51      	adds	r1, r2, #1
 801db9a:	b289      	uxth	r1, r1
 801db9c:	2901      	cmp	r1, #1
 801db9e:	bf8a      	itet	hi
 801dba0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801dba4:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801dba6:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801dba8:	1c5a      	adds	r2, r3, #1
 801dbaa:	8722      	strh	r2, [r4, #56]	@ 0x38
 801dbac:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801dbae:	4413      	add	r3, r2
 801dbb0:	b29b      	uxth	r3, r3
 801dbb2:	2b09      	cmp	r3, #9
 801dbb4:	bf88      	it	hi
 801dbb6:	3b0a      	subhi	r3, #10
 801dbb8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dbbc:	8458      	strh	r0, [r3, #34]	@ 0x22
 801dbbe:	e7de      	b.n	801db7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801dbc0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801dbc2:	2b0a      	cmp	r3, #10
 801dbc4:	d00f      	beq.n	801dbe6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801dbc6:	4620      	mov	r0, r4
 801dbc8:	f7ff fc10 	bl	801d3ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dbcc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801dbce:	1c5a      	adds	r2, r3, #1
 801dbd0:	8722      	strh	r2, [r4, #56]	@ 0x38
 801dbd2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801dbd4:	4413      	add	r3, r2
 801dbd6:	b29b      	uxth	r3, r3
 801dbd8:	2b09      	cmp	r3, #9
 801dbda:	bf88      	it	hi
 801dbdc:	3b0a      	subhi	r3, #10
 801dbde:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dbe2:	8458      	strh	r0, [r3, #34]	@ 0x22
 801dbe4:	e7ec      	b.n	801dbc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801dbe6:	bd10      	pop	{r4, pc}

0801dbe8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801dbe8:	b538      	push	{r3, r4, r5, lr}
 801dbea:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801dbec:	4604      	mov	r4, r0
 801dbee:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801dbf2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801dbf4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801dbf6:	3a01      	subs	r2, #1
 801dbf8:	8702      	strh	r2, [r0, #56]	@ 0x38
 801dbfa:	1c5a      	adds	r2, r3, #1
 801dbfc:	b292      	uxth	r2, r2
 801dbfe:	2a09      	cmp	r2, #9
 801dc00:	bf8a      	itet	hi
 801dc02:	3b09      	subhi	r3, #9
 801dc04:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801dc06:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801dc08:	f7ff ffb7 	bl	801db7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dc0c:	8c23      	ldrh	r3, [r4, #32]
 801dc0e:	2b01      	cmp	r3, #1
 801dc10:	bf9c      	itt	ls
 801dc12:	3301      	addls	r3, #1
 801dc14:	8423      	strhls	r3, [r4, #32]
 801dc16:	8be3      	ldrh	r3, [r4, #30]
 801dc18:	b90b      	cbnz	r3, 801dc1e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801dc1a:	2302      	movs	r3, #2
 801dc1c:	83e3      	strh	r3, [r4, #30]
 801dc1e:	8be3      	ldrh	r3, [r4, #30]
 801dc20:	4628      	mov	r0, r5
 801dc22:	3b01      	subs	r3, #1
 801dc24:	b29b      	uxth	r3, r3
 801dc26:	83e3      	strh	r3, [r4, #30]
 801dc28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dc2c:	8365      	strh	r5, [r4, #26]
 801dc2e:	bd38      	pop	{r3, r4, r5, pc}

0801dc30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801dc30:	428a      	cmp	r2, r1
 801dc32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc36:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801dc38:	d932      	bls.n	801dca0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801dc3a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801dc3c:	1a54      	subs	r4, r2, r1
 801dc3e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801dc42:	19ee      	adds	r6, r5, r7
 801dc44:	fa1f fe84 	uxth.w	lr, r4
 801dc48:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801dc4c:	3e01      	subs	r6, #1
 801dc4e:	b2b4      	uxth	r4, r6
 801dc50:	eba4 090e 	sub.w	r9, r4, lr
 801dc54:	fa1f f989 	uxth.w	r9, r9
 801dc58:	2c09      	cmp	r4, #9
 801dc5a:	4626      	mov	r6, r4
 801dc5c:	bf88      	it	hi
 801dc5e:	f1a4 060a 	subhi.w	r6, r4, #10
 801dc62:	f1bc 0f00 	cmp.w	ip, #0
 801dc66:	f104 34ff 	add.w	r4, r4, #4294967295
 801dc6a:	bf08      	it	eq
 801dc6c:	f04f 0c02 	moveq.w	ip, #2
 801dc70:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801dc74:	b2a4      	uxth	r4, r4
 801dc76:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dc7a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801dc7e:	454c      	cmp	r4, r9
 801dc80:	fa1f fc8c 	uxth.w	ip, ip
 801dc84:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801dc88:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801dc8c:	d1e4      	bne.n	801dc58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801dc8e:	eba5 050e 	sub.w	r5, r5, lr
 801dc92:	eb0e 0408 	add.w	r4, lr, r8
 801dc96:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801dc9a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801dc9c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801dca0:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801dca2:	250a      	movs	r5, #10
 801dca4:	1a64      	subs	r4, r4, r1
 801dca6:	4439      	add	r1, r7
 801dca8:	b289      	uxth	r1, r1
 801dcaa:	8704      	strh	r4, [r0, #56]	@ 0x38
 801dcac:	2909      	cmp	r1, #9
 801dcae:	bf88      	it	hi
 801dcb0:	390a      	subhi	r1, #10
 801dcb2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801dcb4:	b18a      	cbz	r2, 801dcda <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801dcb6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801dcb8:	3a01      	subs	r2, #1
 801dcba:	3101      	adds	r1, #1
 801dcbc:	b292      	uxth	r2, r2
 801dcbe:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801dcc2:	8701      	strh	r1, [r0, #56]	@ 0x38
 801dcc4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801dcc6:	b901      	cbnz	r1, 801dcca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801dcc8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801dcca:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801dccc:	3901      	subs	r1, #1
 801dcce:	b289      	uxth	r1, r1
 801dcd0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801dcd2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dcd6:	844c      	strh	r4, [r1, #34]	@ 0x22
 801dcd8:	e7ec      	b.n	801dcb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801dcda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcde:	f7ff bf4c 	b.w	801db7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801dce2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801dce2:	b570      	push	{r4, r5, r6, lr}
 801dce4:	2500      	movs	r5, #0
 801dce6:	4295      	cmp	r5, r2
 801dce8:	d011      	beq.n	801dd0e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801dcea:	8bc4      	ldrh	r4, [r0, #30]
 801dcec:	f831 6b02 	ldrh.w	r6, [r1], #2
 801dcf0:	4414      	add	r4, r2
 801dcf2:	3c01      	subs	r4, #1
 801dcf4:	1b64      	subs	r4, r4, r5
 801dcf6:	b2a4      	uxth	r4, r4
 801dcf8:	2c01      	cmp	r4, #1
 801dcfa:	bf88      	it	hi
 801dcfc:	3c02      	subhi	r4, #2
 801dcfe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801dd02:	8b64      	ldrh	r4, [r4, #26]
 801dd04:	42b4      	cmp	r4, r6
 801dd06:	d117      	bne.n	801dd38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801dd08:	3501      	adds	r5, #1
 801dd0a:	b2ad      	uxth	r5, r5
 801dd0c:	e7eb      	b.n	801dce6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801dd0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dd12:	2400      	movs	r4, #0
 801dd14:	4413      	add	r3, r2
 801dd16:	b2a2      	uxth	r2, r4
 801dd18:	429a      	cmp	r2, r3
 801dd1a:	da0f      	bge.n	801dd3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801dd1c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801dd1e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801dd22:	3401      	adds	r4, #1
 801dd24:	4432      	add	r2, r6
 801dd26:	b292      	uxth	r2, r2
 801dd28:	2a09      	cmp	r2, #9
 801dd2a:	bf88      	it	hi
 801dd2c:	3a0a      	subhi	r2, #10
 801dd2e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801dd32:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801dd34:	42aa      	cmp	r2, r5
 801dd36:	d0ee      	beq.n	801dd16 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801dd38:	2000      	movs	r0, #0
 801dd3a:	bd70      	pop	{r4, r5, r6, pc}
 801dd3c:	2001      	movs	r0, #1
 801dd3e:	e7fc      	b.n	801dd3a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801dd40 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801dd40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd44:	4605      	mov	r5, r0
 801dd46:	4616      	mov	r6, r2
 801dd48:	1c8c      	adds	r4, r1, #2
 801dd4a:	8809      	ldrh	r1, [r1, #0]
 801dd4c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801dd50:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801dd54:	42b3      	cmp	r3, r6
 801dd56:	d124      	bne.n	801dda2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801dd58:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801dd5c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801dd60:	f001 070f 	and.w	r7, r1, #15
 801dd64:	4652      	mov	r2, sl
 801dd66:	f8cd 8000 	str.w	r8, [sp]
 801dd6a:	464b      	mov	r3, r9
 801dd6c:	4621      	mov	r1, r4
 801dd6e:	4628      	mov	r0, r5
 801dd70:	f7ff ffb7 	bl	801dce2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801dd74:	4683      	mov	fp, r0
 801dd76:	b168      	cbz	r0, 801dd94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801dd78:	eb0a 0109 	add.w	r1, sl, r9
 801dd7c:	463a      	mov	r2, r7
 801dd7e:	4628      	mov	r0, r5
 801dd80:	4441      	add	r1, r8
 801dd82:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801dd86:	4649      	mov	r1, r9
 801dd88:	f7ff ff52 	bl	801dc30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801dd8c:	4658      	mov	r0, fp
 801dd8e:	b003      	add	sp, #12
 801dd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd94:	eb07 010a 	add.w	r1, r7, sl
 801dd98:	4449      	add	r1, r9
 801dd9a:	4441      	add	r1, r8
 801dd9c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801dda0:	e7d2      	b.n	801dd48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801dda2:	f04f 0b00 	mov.w	fp, #0
 801dda6:	e7f1      	b.n	801dd8c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801dda8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801dda8:	b570      	push	{r4, r5, r6, lr}
 801ddaa:	8810      	ldrh	r0, [r2, #0]
 801ddac:	4298      	cmp	r0, r3
 801ddae:	d817      	bhi.n	801dde0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ddb0:	1e48      	subs	r0, r1, #1
 801ddb2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ddb6:	4298      	cmp	r0, r3
 801ddb8:	d312      	bcc.n	801dde0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ddba:	2400      	movs	r4, #0
 801ddbc:	428c      	cmp	r4, r1
 801ddbe:	d20f      	bcs.n	801dde0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ddc0:	1860      	adds	r0, r4, r1
 801ddc2:	1040      	asrs	r0, r0, #1
 801ddc4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ddc8:	0085      	lsls	r5, r0, #2
 801ddca:	42b3      	cmp	r3, r6
 801ddcc:	d902      	bls.n	801ddd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ddce:	3001      	adds	r0, #1
 801ddd0:	b284      	uxth	r4, r0
 801ddd2:	e7f3      	b.n	801ddbc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ddd4:	d201      	bcs.n	801ddda <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ddd6:	b281      	uxth	r1, r0
 801ddd8:	e7f0      	b.n	801ddbc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ddda:	442a      	add	r2, r5
 801dddc:	8850      	ldrh	r0, [r2, #2]
 801ddde:	bd70      	pop	{r4, r5, r6, pc}
 801dde0:	2000      	movs	r0, #0
 801dde2:	e7fc      	b.n	801ddde <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801dde4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801dde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dde8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801ddea:	4604      	mov	r4, r0
 801ddec:	260b      	movs	r6, #11
 801ddee:	886f      	ldrh	r7, [r5, #2]
 801ddf0:	087f      	lsrs	r7, r7, #1
 801ddf2:	3e01      	subs	r6, #1
 801ddf4:	d013      	beq.n	801de1e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ddf6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801ddf8:	462a      	mov	r2, r5
 801ddfa:	4639      	mov	r1, r7
 801ddfc:	4620      	mov	r0, r4
 801ddfe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801de02:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801de06:	4643      	mov	r3, r8
 801de08:	f7ff ffce 	bl	801dda8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801de0c:	b138      	cbz	r0, 801de1e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801de0e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801de12:	4642      	mov	r2, r8
 801de14:	4620      	mov	r0, r4
 801de16:	f7ff ff93 	bl	801dd40 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801de1a:	2800      	cmp	r0, #0
 801de1c:	d1e9      	bne.n	801ddf2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801de1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801de24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801de24:	b570      	push	{r4, r5, r6, lr}
 801de26:	694a      	ldr	r2, [r1, #20]
 801de28:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801de2a:	684b      	ldr	r3, [r1, #4]
 801de2c:	1b54      	subs	r4, r2, r5
 801de2e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801de30:	f000 8106 	beq.w	801e040 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801de34:	1b9b      	subs	r3, r3, r6
 801de36:	d003      	beq.n	801de40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801de38:	4363      	muls	r3, r4
 801de3a:	2210      	movs	r2, #16
 801de3c:	fb93 f3f2 	sdiv	r3, r3, r2
 801de40:	680c      	ldr	r4, [r1, #0]
 801de42:	698a      	ldr	r2, [r1, #24]
 801de44:	1b65      	subs	r5, r4, r5
 801de46:	f000 80fd 	beq.w	801e044 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801de4a:	1b92      	subs	r2, r2, r6
 801de4c:	d003      	beq.n	801de56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801de4e:	436a      	muls	r2, r5
 801de50:	2410      	movs	r4, #16
 801de52:	fb92 f2f4 	sdiv	r2, r2, r4
 801de56:	1a9b      	subs	r3, r3, r2
 801de58:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801e080 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801de5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801de60:	460a      	mov	r2, r1
 801de62:	ee07 3a90 	vmov	s15, r3
 801de66:	f100 040c 	add.w	r4, r0, #12
 801de6a:	4603      	mov	r3, r0
 801de6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de70:	ee67 7a84 	vmul.f32	s15, s15, s8
 801de74:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801de78:	eeb1 6a43 	vneg.f32	s12, s6
 801de7c:	edd2 7a02 	vldr	s15, [r2, #8]
 801de80:	3214      	adds	r2, #20
 801de82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801de86:	ece3 6a01 	vstmia	r3!, {s13}
 801de8a:	429c      	cmp	r4, r3
 801de8c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801de90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801de94:	edc3 7a02 	vstr	s15, [r3, #8]
 801de98:	ed52 7a01 	vldr	s15, [r2, #-4]
 801de9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dea0:	edc3 7a05 	vstr	s15, [r3, #20]
 801dea4:	d1ea      	bne.n	801de7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801dea6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dea8:	698b      	ldr	r3, [r1, #24]
 801deaa:	edd0 4a02 	vldr	s9, [r0, #8]
 801deae:	1a9b      	subs	r3, r3, r2
 801deb0:	edd0 3a00 	vldr	s7, [r0]
 801deb4:	edd0 6a01 	vldr	s13, [r0, #4]
 801deb8:	ee07 3a90 	vmov	s15, r3
 801debc:	684b      	ldr	r3, [r1, #4]
 801debe:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801dec2:	ed90 5a05 	vldr	s10, [r0, #20]
 801dec6:	1a9b      	subs	r3, r3, r2
 801dec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801decc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ded0:	ed90 2a03 	vldr	s4, [r0, #12]
 801ded4:	ee07 3a10 	vmov	s14, r3
 801ded8:	edd0 5a04 	vldr	s11, [r0, #16]
 801dedc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dee0:	ed90 1a07 	vldr	s2, [r0, #28]
 801dee4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dee8:	edd0 2a06 	vldr	s5, [r0, #24]
 801deec:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801def0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801def4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801def8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801defc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801df00:	ee67 7a83 	vmul.f32	s15, s15, s6
 801df04:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801df08:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801df0a:	694a      	ldr	r2, [r1, #20]
 801df0c:	1b13      	subs	r3, r2, r4
 801df0e:	ee07 3a10 	vmov	s14, r3
 801df12:	680b      	ldr	r3, [r1, #0]
 801df14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801df18:	1b1b      	subs	r3, r3, r4
 801df1a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801df1e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801df22:	ee07 3a10 	vmov	s14, r3
 801df26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801df2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801df2e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801df32:	ee64 4a86 	vmul.f32	s9, s9, s12
 801df36:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801df3a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801df3c:	698b      	ldr	r3, [r1, #24]
 801df3e:	1a9b      	subs	r3, r3, r2
 801df40:	ee06 3a90 	vmov	s13, r3
 801df44:	684b      	ldr	r3, [r1, #4]
 801df46:	1a9b      	subs	r3, r3, r2
 801df48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801df4c:	ee07 3a10 	vmov	s14, r3
 801df50:	ee66 6a84 	vmul.f32	s13, s13, s8
 801df54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801df58:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801df5c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801df60:	eee5 6a87 	vfma.f32	s13, s11, s14
 801df64:	ee66 6a83 	vmul.f32	s13, s13, s6
 801df68:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801df6c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801df6e:	694a      	ldr	r2, [r1, #20]
 801df70:	1b13      	subs	r3, r2, r4
 801df72:	ee07 3a10 	vmov	s14, r3
 801df76:	680b      	ldr	r3, [r1, #0]
 801df78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801df7c:	1b1b      	subs	r3, r3, r4
 801df7e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801df82:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801df86:	ee07 3a10 	vmov	s14, r3
 801df8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801df8e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801df92:	eea5 5a87 	vfma.f32	s10, s11, s14
 801df96:	edd0 5a08 	vldr	s11, [r0, #32]
 801df9a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801df9e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801dfa2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801dfa6:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801dfaa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dfac:	698b      	ldr	r3, [r1, #24]
 801dfae:	1a9b      	subs	r3, r3, r2
 801dfb0:	ee07 3a10 	vmov	s14, r3
 801dfb4:	684b      	ldr	r3, [r1, #4]
 801dfb6:	1a9b      	subs	r3, r3, r2
 801dfb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dfbc:	ee01 3a90 	vmov	s3, r3
 801dfc0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dfc4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dfc8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801dfcc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801dfd0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801dfd4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801dfd8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801dfdc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801dfde:	694a      	ldr	r2, [r1, #20]
 801dfe0:	1b13      	subs	r3, r2, r4
 801dfe2:	ee03 3a10 	vmov	s6, r3
 801dfe6:	680b      	ldr	r3, [r1, #0]
 801dfe8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dfec:	1b1b      	subs	r3, r3, r4
 801dfee:	ee23 3a04 	vmul.f32	s6, s6, s8
 801dff2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801dff6:	ee03 3a10 	vmov	s6, r3
 801dffa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dffe:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e002:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e006:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e00a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e00e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801e012:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e016:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e01e:	dd13      	ble.n	801e048 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e020:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e024:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e028:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801e02a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e02e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e036:	dd15      	ble.n	801e064 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e038:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e03c:	6403      	str	r3, [r0, #64]	@ 0x40
 801e03e:	bd70      	pop	{r4, r5, r6, pc}
 801e040:	4623      	mov	r3, r4
 801e042:	e6fd      	b.n	801de40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e044:	462a      	mov	r2, r5
 801e046:	e706      	b.n	801de56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e048:	d502      	bpl.n	801e050 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e04a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e04e:	e7e9      	b.n	801e024 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e050:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e054:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e058:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e060:	dade      	bge.n	801e020 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e062:	e7f2      	b.n	801e04a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e064:	d502      	bpl.n	801e06c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e066:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e06a:	e7e7      	b.n	801e03c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e06c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e070:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e074:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e07c:	dadc      	bge.n	801e038 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e07e:	e7f2      	b.n	801e066 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e080:	3d800000 	.word	0x3d800000

0801e084 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e088:	2714      	movs	r7, #20
 801e08a:	435f      	muls	r7, r3
 801e08c:	eb02 0c07 	add.w	ip, r2, r7
 801e090:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e094:	f115 0e0f 	adds.w	lr, r5, #15
 801e098:	f100 80a2 	bmi.w	801e1e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e09c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801e0a0:	9c08      	ldr	r4, [sp, #32]
 801e0a2:	2614      	movs	r6, #20
 801e0a4:	f8c0 e014 	str.w	lr, [r0, #20]
 801e0a8:	4366      	muls	r6, r4
 801e0aa:	eb02 0806 	add.w	r8, r2, r6
 801e0ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e0b2:	f115 040f 	adds.w	r4, r5, #15
 801e0b6:	f100 809f 	bmi.w	801e1f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801e0ba:	1124      	asrs	r4, r4, #4
 801e0bc:	eba4 040e 	sub.w	r4, r4, lr
 801e0c0:	6184      	str	r4, [r0, #24]
 801e0c2:	2c00      	cmp	r4, #0
 801e0c4:	f000 808a 	beq.w	801e1dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801e0c8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801e0cc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e0d0:	5995      	ldr	r5, [r2, r6]
 801e0d2:	eba4 0809 	sub.w	r8, r4, r9
 801e0d6:	59d4      	ldr	r4, [r2, r7]
 801e0d8:	eba5 0a04 	sub.w	sl, r5, r4
 801e0dc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801e0e0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801e0e4:	fb0e fe05 	mul.w	lr, lr, r5
 801e0e8:	fb0a ee19 	mls	lr, sl, r9, lr
 801e0ec:	fb08 e404 	mla	r4, r8, r4, lr
 801e0f0:	3c01      	subs	r4, #1
 801e0f2:	19a4      	adds	r4, r4, r6
 801e0f4:	f100 808c 	bmi.w	801e210 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801e0f8:	fb94 fef6 	sdiv	lr, r4, r6
 801e0fc:	fb06 441e 	mls	r4, r6, lr, r4
 801e100:	f8c0 e000 	str.w	lr, [r0]
 801e104:	6104      	str	r4, [r0, #16]
 801e106:	2d00      	cmp	r5, #0
 801e108:	f2c0 8095 	blt.w	801e236 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801e10c:	fb95 f4f6 	sdiv	r4, r5, r6
 801e110:	fb06 5514 	mls	r5, r6, r4, r5
 801e114:	6044      	str	r4, [r0, #4]
 801e116:	6085      	str	r5, [r0, #8]
 801e118:	60c6      	str	r6, [r0, #12]
 801e11a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e11e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801e122:	6945      	ldr	r5, [r0, #20]
 801e124:	59d2      	ldr	r2, [r2, r7]
 801e126:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801e12a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801e258 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801e12e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801e132:	ee07 4a10 	vmov	s14, r4
 801e136:	6804      	ldr	r4, [r0, #0]
 801e138:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801e13c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e140:	ee07 2a90 	vmov	s15, r2
 801e144:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e14c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e150:	edd3 6a00 	vldr	s13, [r3]
 801e154:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e158:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801e15c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e160:	edc0 6a07 	vstr	s13, [r0, #28]
 801e164:	edd0 6a01 	vldr	s13, [r0, #4]
 801e168:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801e16c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e170:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801e174:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e178:	ed80 6a08 	vstr	s12, [r0, #32]
 801e17c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801e17e:	6242      	str	r2, [r0, #36]	@ 0x24
 801e180:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801e184:	ed93 6a03 	vldr	s12, [r3, #12]
 801e188:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e18c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801e190:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e194:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801e198:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801e19c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801e1a0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e1a4:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801e1a8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e1aa:	6302      	str	r2, [r0, #48]	@ 0x30
 801e1ac:	ed93 6a06 	vldr	s12, [r3, #24]
 801e1b0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801e1b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e1b8:	eeb0 7a46 	vmov.f32	s14, s12
 801e1bc:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801e1c0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e1c4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801e1c8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801e1cc:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801e1d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e1d4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801e1d8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801e1da:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801e1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1e0:	2410      	movs	r4, #16
 801e1e2:	f1c5 0501 	rsb	r5, r5, #1
 801e1e6:	fb9e fef4 	sdiv	lr, lr, r4
 801e1ea:	f015 050f 	ands.w	r5, r5, #15
 801e1ee:	bf18      	it	ne
 801e1f0:	2501      	movne	r5, #1
 801e1f2:	ebae 0e05 	sub.w	lr, lr, r5
 801e1f6:	e753      	b.n	801e0a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801e1f8:	f04f 0910 	mov.w	r9, #16
 801e1fc:	f1c5 0501 	rsb	r5, r5, #1
 801e200:	fb94 f4f9 	sdiv	r4, r4, r9
 801e204:	f015 050f 	ands.w	r5, r5, #15
 801e208:	bf18      	it	ne
 801e20a:	2501      	movne	r5, #1
 801e20c:	1b64      	subs	r4, r4, r5
 801e20e:	e755      	b.n	801e0bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801e210:	4264      	negs	r4, r4
 801e212:	fb94 fef6 	sdiv	lr, r4, r6
 801e216:	f1ce 0800 	rsb	r8, lr, #0
 801e21a:	fb06 441e 	mls	r4, r6, lr, r4
 801e21e:	f8c0 8000 	str.w	r8, [r0]
 801e222:	6104      	str	r4, [r0, #16]
 801e224:	2c00      	cmp	r4, #0
 801e226:	f43f af6e 	beq.w	801e106 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801e22a:	ea6f 0e0e 	mvn.w	lr, lr
 801e22e:	1b34      	subs	r4, r6, r4
 801e230:	f8c0 e000 	str.w	lr, [r0]
 801e234:	e766      	b.n	801e104 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801e236:	426d      	negs	r5, r5
 801e238:	fb95 f4f6 	sdiv	r4, r5, r6
 801e23c:	f1c4 0e00 	rsb	lr, r4, #0
 801e240:	fb06 5514 	mls	r5, r6, r4, r5
 801e244:	f8c0 e004 	str.w	lr, [r0, #4]
 801e248:	6085      	str	r5, [r0, #8]
 801e24a:	2d00      	cmp	r5, #0
 801e24c:	f43f af64 	beq.w	801e118 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801e250:	43e4      	mvns	r4, r4
 801e252:	1b75      	subs	r5, r6, r5
 801e254:	6044      	str	r4, [r0, #4]
 801e256:	e75e      	b.n	801e116 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801e258:	3d800000 	.word	0x3d800000

0801e25c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e25c:	4602      	mov	r2, r0
 801e25e:	b148      	cbz	r0, 801e274 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e260:	2300      	movs	r3, #0
 801e262:	b298      	uxth	r0, r3
 801e264:	3301      	adds	r3, #1
 801e266:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e26a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e26e:	2900      	cmp	r1, #0
 801e270:	d1f7      	bne.n	801e262 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e272:	4770      	bx	lr
 801e274:	4770      	bx	lr

0801e276 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>:
 801e276:	b530      	push	{r4, r5, lr}
 801e278:	4604      	mov	r4, r0
 801e27a:	b161      	cbz	r1, 801e296 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x20>
 801e27c:	b150      	cbz	r0, 801e294 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801e27e:	2300      	movs	r3, #0
 801e280:	b298      	uxth	r0, r3
 801e282:	4290      	cmp	r0, r2
 801e284:	d206      	bcs.n	801e294 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801e286:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 801e28a:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e28e:	3301      	adds	r3, #1
 801e290:	2d00      	cmp	r5, #0
 801e292:	d1f5      	bne.n	801e280 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0xa>
 801e294:	bd30      	pop	{r4, r5, pc}
 801e296:	4608      	mov	r0, r1
 801e298:	e7fc      	b.n	801e294 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>

0801e29a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e29a:	b530      	push	{r4, r5, lr}
 801e29c:	4604      	mov	r4, r0
 801e29e:	b159      	cbz	r1, 801e2b8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e2a0:	b148      	cbz	r0, 801e2b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	b298      	uxth	r0, r3
 801e2a6:	4282      	cmp	r2, r0
 801e2a8:	d905      	bls.n	801e2b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e2aa:	5ccd      	ldrb	r5, [r1, r3]
 801e2ac:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e2b0:	3301      	adds	r3, #1
 801e2b2:	2d00      	cmp	r5, #0
 801e2b4:	d1f6      	bne.n	801e2a4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e2b6:	bd30      	pop	{r4, r5, pc}
 801e2b8:	4608      	mov	r0, r1
 801e2ba:	e7fc      	b.n	801e2b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e2bc <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801e2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2be:	b08b      	sub	sp, #44	@ 0x2c
 801e2c0:	468c      	mov	ip, r1
 801e2c2:	4604      	mov	r4, r0
 801e2c4:	2100      	movs	r1, #0
 801e2c6:	261f      	movs	r6, #31
 801e2c8:	af01      	add	r7, sp, #4
 801e2ca:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801e2ce:	1e71      	subs	r1, r6, #1
 801e2d0:	fb94 fef3 	sdiv	lr, r4, r3
 801e2d4:	fb03 441e 	mls	r4, r3, lr, r4
 801e2d8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e2dc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e2e0:	b2ec      	uxtb	r4, r5
 801e2e2:	2d09      	cmp	r5, #9
 801e2e4:	bfd4      	ite	le
 801e2e6:	3430      	addle	r4, #48	@ 0x30
 801e2e8:	3457      	addgt	r4, #87	@ 0x57
 801e2ea:	b2e4      	uxtb	r4, r4
 801e2ec:	55bc      	strb	r4, [r7, r6]
 801e2ee:	4674      	mov	r4, lr
 801e2f0:	b974      	cbnz	r4, 801e310 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801e2f2:	2800      	cmp	r0, #0
 801e2f4:	da05      	bge.n	801e302 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801e2f6:	ab0a      	add	r3, sp, #40	@ 0x28
 801e2f8:	4419      	add	r1, r3
 801e2fa:	232d      	movs	r3, #45	@ 0x2d
 801e2fc:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e300:	1eb1      	subs	r1, r6, #2
 801e302:	3101      	adds	r1, #1
 801e304:	4660      	mov	r0, ip
 801e306:	4439      	add	r1, r7
 801e308:	f7ff ffc7 	bl	801e29a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e30c:	b00b      	add	sp, #44	@ 0x2c
 801e30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e310:	460e      	mov	r6, r1
 801e312:	e7dc      	b.n	801e2ce <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801e314 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801e314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e316:	468c      	mov	ip, r1
 801e318:	b08b      	sub	sp, #44	@ 0x2c
 801e31a:	2100      	movs	r1, #0
 801e31c:	ae01      	add	r6, sp, #4
 801e31e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801e322:	211f      	movs	r1, #31
 801e324:	fbb0 f7f3 	udiv	r7, r0, r3
 801e328:	fb03 0517 	mls	r5, r3, r7, r0
 801e32c:	4638      	mov	r0, r7
 801e32e:	b2ec      	uxtb	r4, r5
 801e330:	2d09      	cmp	r5, #9
 801e332:	bfd4      	ite	le
 801e334:	3430      	addle	r4, #48	@ 0x30
 801e336:	3457      	addgt	r4, #87	@ 0x57
 801e338:	b2e4      	uxtb	r4, r4
 801e33a:	558c      	strb	r4, [r1, r6]
 801e33c:	1e4c      	subs	r4, r1, #1
 801e33e:	b92f      	cbnz	r7, 801e34c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801e340:	4431      	add	r1, r6
 801e342:	4660      	mov	r0, ip
 801e344:	f7ff ffa9 	bl	801e29a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e348:	b00b      	add	sp, #44	@ 0x2c
 801e34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e34c:	4621      	mov	r1, r4
 801e34e:	e7e9      	b.n	801e324 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801e350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e354:	b085      	sub	sp, #20
 801e356:	4691      	mov	r9, r2
 801e358:	6802      	ldr	r2, [r0, #0]
 801e35a:	4688      	mov	r8, r1
 801e35c:	461c      	mov	r4, r3
 801e35e:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801e362:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801e366:	4683      	mov	fp, r0
 801e368:	4610      	mov	r0, r2
 801e36a:	9103      	str	r1, [sp, #12]
 801e36c:	9302      	str	r3, [sp, #8]
 801e36e:	9201      	str	r2, [sp, #4]
 801e370:	f7ff ff74 	bl	801e25c <_ZN8touchgfx7Unicode6strlenEPKt>
 801e374:	f1b8 0f00 	cmp.w	r8, #0
 801e378:	bf0c      	ite	eq
 801e37a:	4684      	moveq	ip, r0
 801e37c:	f100 0c01 	addne.w	ip, r0, #1
 801e380:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801e384:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801e388:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e38a:	fa1f fc8c 	uxth.w	ip, ip
 801e38e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e390:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801e394:	9903      	ldr	r1, [sp, #12]
 801e396:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e39a:	d041      	beq.n	801e420 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e39c:	d834      	bhi.n	801e408 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e39e:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801e3a2:	d059      	beq.n	801e458 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e3a4:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801e3a8:	d03a      	beq.n	801e420 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e3aa:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801e3ae:	d034      	beq.n	801e41a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e3b0:	2400      	movs	r4, #0
 801e3b2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801e3b6:	3a01      	subs	r2, #1
 801e3b8:	b169      	cbz	r1, 801e3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e3ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e3bc:	458c      	cmp	ip, r1
 801e3be:	da09      	bge.n	801e3d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e3c0:	eba1 010c 	sub.w	r1, r1, ip
 801e3c4:	b289      	uxth	r1, r1
 801e3c6:	b933      	cbnz	r3, 801e3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e3c8:	2e00      	cmp	r6, #0
 801e3ca:	d051      	beq.n	801e470 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e3cc:	2800      	cmp	r0, #0
 801e3ce:	d04f      	beq.n	801e470 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e3d0:	440c      	add	r4, r1
 801e3d2:	b2a4      	uxth	r4, r4
 801e3d4:	2100      	movs	r1, #0
 801e3d6:	682b      	ldr	r3, [r5, #0]
 801e3d8:	4293      	cmp	r3, r2
 801e3da:	da07      	bge.n	801e3ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e3dc:	f1b8 0f00 	cmp.w	r8, #0
 801e3e0:	d004      	beq.n	801e3ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e3e2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e3e6:	682b      	ldr	r3, [r5, #0]
 801e3e8:	3301      	adds	r3, #1
 801e3ea:	602b      	str	r3, [r5, #0]
 801e3ec:	2730      	movs	r7, #48	@ 0x30
 801e3ee:	2c00      	cmp	r4, #0
 801e3f0:	d04e      	beq.n	801e490 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e3f2:	682e      	ldr	r6, [r5, #0]
 801e3f4:	3c01      	subs	r4, #1
 801e3f6:	42b2      	cmp	r2, r6
 801e3f8:	b2a4      	uxth	r4, r4
 801e3fa:	dd49      	ble.n	801e490 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e3fc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e400:	682b      	ldr	r3, [r5, #0]
 801e402:	3301      	adds	r3, #1
 801e404:	602b      	str	r3, [r5, #0]
 801e406:	e7f2      	b.n	801e3ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e408:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801e40c:	d01d      	beq.n	801e44a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e40e:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801e412:	d002      	beq.n	801e41a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e414:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801e418:	e7c9      	b.n	801e3ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e41a:	4684      	mov	ip, r0
 801e41c:	f04f 0800 	mov.w	r8, #0
 801e420:	2c00      	cmp	r4, #0
 801e422:	d0c6      	beq.n	801e3b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e424:	b947      	cbnz	r7, 801e438 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e426:	2801      	cmp	r0, #1
 801e428:	d106      	bne.n	801e438 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e42a:	8814      	ldrh	r4, [r2, #0]
 801e42c:	2c30      	cmp	r4, #48	@ 0x30
 801e42e:	bf02      	ittt	eq
 801e430:	3202      	addeq	r2, #2
 801e432:	4638      	moveq	r0, r7
 801e434:	f8cb 2000 	streq.w	r2, [fp]
 801e438:	45bc      	cmp	ip, r7
 801e43a:	da14      	bge.n	801e466 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e43c:	b2bf      	uxth	r7, r7
 801e43e:	eba7 040c 	sub.w	r4, r7, ip
 801e442:	46bc      	mov	ip, r7
 801e444:	b2a4      	uxth	r4, r4
 801e446:	2600      	movs	r6, #0
 801e448:	e7b3      	b.n	801e3b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e44a:	4684      	mov	ip, r0
 801e44c:	b16c      	cbz	r4, 801e46a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e44e:	42b8      	cmp	r0, r7
 801e450:	dd00      	ble.n	801e454 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e452:	b2b8      	uxth	r0, r7
 801e454:	2400      	movs	r4, #0
 801e456:	e003      	b.n	801e460 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e458:	f04f 0c01 	mov.w	ip, #1
 801e45c:	2400      	movs	r4, #0
 801e45e:	4660      	mov	r0, ip
 801e460:	4626      	mov	r6, r4
 801e462:	46a0      	mov	r8, r4
 801e464:	e7a5      	b.n	801e3b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e466:	2400      	movs	r4, #0
 801e468:	e7ed      	b.n	801e446 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e46a:	4626      	mov	r6, r4
 801e46c:	46a0      	mov	r8, r4
 801e46e:	e7a0      	b.n	801e3b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e470:	2900      	cmp	r1, #0
 801e472:	d0b0      	beq.n	801e3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e474:	2720      	movs	r7, #32
 801e476:	682e      	ldr	r6, [r5, #0]
 801e478:	2900      	cmp	r1, #0
 801e47a:	d0ac      	beq.n	801e3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e47c:	3901      	subs	r1, #1
 801e47e:	4296      	cmp	r6, r2
 801e480:	b289      	uxth	r1, r1
 801e482:	daa7      	bge.n	801e3d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e484:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e488:	682b      	ldr	r3, [r5, #0]
 801e48a:	3301      	adds	r3, #1
 801e48c:	602b      	str	r3, [r5, #0]
 801e48e:	e7f2      	b.n	801e476 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e490:	b188      	cbz	r0, 801e4b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e492:	682b      	ldr	r3, [r5, #0]
 801e494:	3801      	subs	r0, #1
 801e496:	429a      	cmp	r2, r3
 801e498:	b280      	uxth	r0, r0
 801e49a:	dd0c      	ble.n	801e4b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e49c:	f8db 3000 	ldr.w	r3, [fp]
 801e4a0:	1c9c      	adds	r4, r3, #2
 801e4a2:	f8cb 4000 	str.w	r4, [fp]
 801e4a6:	881c      	ldrh	r4, [r3, #0]
 801e4a8:	682b      	ldr	r3, [r5, #0]
 801e4aa:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e4ae:	682b      	ldr	r3, [r5, #0]
 801e4b0:	3301      	adds	r3, #1
 801e4b2:	602b      	str	r3, [r5, #0]
 801e4b4:	e7ec      	b.n	801e490 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e4b6:	2620      	movs	r6, #32
 801e4b8:	b151      	cbz	r1, 801e4d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e4ba:	6828      	ldr	r0, [r5, #0]
 801e4bc:	3901      	subs	r1, #1
 801e4be:	4282      	cmp	r2, r0
 801e4c0:	b289      	uxth	r1, r1
 801e4c2:	dd05      	ble.n	801e4d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e4c4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e4c8:	682b      	ldr	r3, [r5, #0]
 801e4ca:	3301      	adds	r3, #1
 801e4cc:	602b      	str	r3, [r5, #0]
 801e4ce:	e7f3      	b.n	801e4b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e4d0:	b005      	add	sp, #20
 801e4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e4d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e4d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e4da:	2400      	movs	r4, #0
 801e4dc:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e4e0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801e4e4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801e4e8:	8014      	strh	r4, [r2, #0]
 801e4ea:	701c      	strb	r4, [r3, #0]
 801e4ec:	f888 4000 	strb.w	r4, [r8]
 801e4f0:	f88c 4000 	strb.w	r4, [ip]
 801e4f4:	f88e 4000 	strb.w	r4, [lr]
 801e4f8:	703c      	strb	r4, [r7, #0]
 801e4fa:	6804      	ldr	r4, [r0, #0]
 801e4fc:	b1a4      	cbz	r4, 801e528 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e4fe:	8824      	ldrh	r4, [r4, #0]
 801e500:	f04f 0901 	mov.w	r9, #1
 801e504:	b314      	cbz	r4, 801e54c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e506:	2c2b      	cmp	r4, #43	@ 0x2b
 801e508:	d001      	beq.n	801e50e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e50a:	2c20      	cmp	r4, #32
 801e50c:	d110      	bne.n	801e530 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e50e:	8014      	strh	r4, [r2, #0]
 801e510:	6804      	ldr	r4, [r0, #0]
 801e512:	b10c      	cbz	r4, 801e518 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e514:	3402      	adds	r4, #2
 801e516:	6004      	str	r4, [r0, #0]
 801e518:	680c      	ldr	r4, [r1, #0]
 801e51a:	b10c      	cbz	r4, 801e520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e51c:	3401      	adds	r4, #1
 801e51e:	600c      	str	r4, [r1, #0]
 801e520:	6804      	ldr	r4, [r0, #0]
 801e522:	b17c      	cbz	r4, 801e544 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e524:	8824      	ldrh	r4, [r4, #0]
 801e526:	e7ed      	b.n	801e504 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e528:	680c      	ldr	r4, [r1, #0]
 801e52a:	b17c      	cbz	r4, 801e54c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e52c:	7824      	ldrb	r4, [r4, #0]
 801e52e:	e7e7      	b.n	801e500 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e530:	2c2d      	cmp	r4, #45	@ 0x2d
 801e532:	d102      	bne.n	801e53a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e534:	f883 9000 	strb.w	r9, [r3]
 801e538:	e7ea      	b.n	801e510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e53a:	2c23      	cmp	r4, #35	@ 0x23
 801e53c:	d107      	bne.n	801e54e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e53e:	f888 9000 	strb.w	r9, [r8]
 801e542:	e7e5      	b.n	801e510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e544:	680c      	ldr	r4, [r1, #0]
 801e546:	b10c      	cbz	r4, 801e54c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e548:	7824      	ldrb	r4, [r4, #0]
 801e54a:	e7db      	b.n	801e504 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e54c:	2400      	movs	r4, #0
 801e54e:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801e552:	2b09      	cmp	r3, #9
 801e554:	d901      	bls.n	801e55a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e556:	2c2a      	cmp	r4, #42	@ 0x2a
 801e558:	d122      	bne.n	801e5a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e55a:	2301      	movs	r3, #1
 801e55c:	2c30      	cmp	r4, #48	@ 0x30
 801e55e:	f88e 3000 	strb.w	r3, [lr]
 801e562:	d10d      	bne.n	801e580 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e564:	f88c 3000 	strb.w	r3, [ip]
 801e568:	6803      	ldr	r3, [r0, #0]
 801e56a:	b10b      	cbz	r3, 801e570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e56c:	3302      	adds	r3, #2
 801e56e:	6003      	str	r3, [r0, #0]
 801e570:	680b      	ldr	r3, [r1, #0]
 801e572:	b10b      	cbz	r3, 801e578 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e574:	3301      	adds	r3, #1
 801e576:	600b      	str	r3, [r1, #0]
 801e578:	6803      	ldr	r3, [r0, #0]
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d02f      	beq.n	801e5de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e57e:	881c      	ldrh	r4, [r3, #0]
 801e580:	2c2a      	cmp	r4, #42	@ 0x2a
 801e582:	d135      	bne.n	801e5f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e584:	f04f 33ff 	mov.w	r3, #4294967295
 801e588:	6033      	str	r3, [r6, #0]
 801e58a:	6803      	ldr	r3, [r0, #0]
 801e58c:	b10b      	cbz	r3, 801e592 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e58e:	3302      	adds	r3, #2
 801e590:	6003      	str	r3, [r0, #0]
 801e592:	680b      	ldr	r3, [r1, #0]
 801e594:	b10b      	cbz	r3, 801e59a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e596:	3301      	adds	r3, #1
 801e598:	600b      	str	r3, [r1, #0]
 801e59a:	6803      	ldr	r3, [r0, #0]
 801e59c:	b31b      	cbz	r3, 801e5e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e59e:	881c      	ldrh	r4, [r3, #0]
 801e5a0:	2c2e      	cmp	r4, #46	@ 0x2e
 801e5a2:	d11a      	bne.n	801e5da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e5a4:	2301      	movs	r3, #1
 801e5a6:	703b      	strb	r3, [r7, #0]
 801e5a8:	6803      	ldr	r3, [r0, #0]
 801e5aa:	b10b      	cbz	r3, 801e5b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e5ac:	3302      	adds	r3, #2
 801e5ae:	6003      	str	r3, [r0, #0]
 801e5b0:	680b      	ldr	r3, [r1, #0]
 801e5b2:	b10b      	cbz	r3, 801e5b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e5b4:	3301      	adds	r3, #1
 801e5b6:	600b      	str	r3, [r1, #0]
 801e5b8:	6803      	ldr	r3, [r0, #0]
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d036      	beq.n	801e62c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e5be:	881b      	ldrh	r3, [r3, #0]
 801e5c0:	2b2a      	cmp	r3, #42	@ 0x2a
 801e5c2:	d137      	bne.n	801e634 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e5c4:	f04f 33ff 	mov.w	r3, #4294967295
 801e5c8:	602b      	str	r3, [r5, #0]
 801e5ca:	6803      	ldr	r3, [r0, #0]
 801e5cc:	b10b      	cbz	r3, 801e5d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e5ce:	3302      	adds	r3, #2
 801e5d0:	6003      	str	r3, [r0, #0]
 801e5d2:	680b      	ldr	r3, [r1, #0]
 801e5d4:	b10b      	cbz	r3, 801e5da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e5d6:	3301      	adds	r3, #1
 801e5d8:	600b      	str	r3, [r1, #0]
 801e5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e5de:	680c      	ldr	r4, [r1, #0]
 801e5e0:	b134      	cbz	r4, 801e5f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e5e2:	7824      	ldrb	r4, [r4, #0]
 801e5e4:	e7cc      	b.n	801e580 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e5e6:	680b      	ldr	r3, [r1, #0]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d0f6      	beq.n	801e5da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e5ec:	781c      	ldrb	r4, [r3, #0]
 801e5ee:	e7d7      	b.n	801e5a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e5f0:	2300      	movs	r3, #0
 801e5f2:	220a      	movs	r2, #10
 801e5f4:	6033      	str	r3, [r6, #0]
 801e5f6:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e5fa:	fa1f f38c 	uxth.w	r3, ip
 801e5fe:	2b09      	cmp	r3, #9
 801e600:	d8ce      	bhi.n	801e5a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e602:	6833      	ldr	r3, [r6, #0]
 801e604:	fb02 c303 	mla	r3, r2, r3, ip
 801e608:	6033      	str	r3, [r6, #0]
 801e60a:	6803      	ldr	r3, [r0, #0]
 801e60c:	b10b      	cbz	r3, 801e612 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e60e:	3302      	adds	r3, #2
 801e610:	6003      	str	r3, [r0, #0]
 801e612:	680b      	ldr	r3, [r1, #0]
 801e614:	b10b      	cbz	r3, 801e61a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e616:	3301      	adds	r3, #1
 801e618:	600b      	str	r3, [r1, #0]
 801e61a:	6803      	ldr	r3, [r0, #0]
 801e61c:	b10b      	cbz	r3, 801e622 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e61e:	881c      	ldrh	r4, [r3, #0]
 801e620:	e7e9      	b.n	801e5f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e622:	680c      	ldr	r4, [r1, #0]
 801e624:	2c00      	cmp	r4, #0
 801e626:	d0e6      	beq.n	801e5f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e628:	7824      	ldrb	r4, [r4, #0]
 801e62a:	e7e4      	b.n	801e5f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e62c:	680b      	ldr	r3, [r1, #0]
 801e62e:	b10b      	cbz	r3, 801e634 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e630:	781b      	ldrb	r3, [r3, #0]
 801e632:	e7c5      	b.n	801e5c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e634:	2200      	movs	r2, #0
 801e636:	240a      	movs	r4, #10
 801e638:	602a      	str	r2, [r5, #0]
 801e63a:	3b30      	subs	r3, #48	@ 0x30
 801e63c:	682a      	ldr	r2, [r5, #0]
 801e63e:	b29e      	uxth	r6, r3
 801e640:	2e09      	cmp	r6, #9
 801e642:	d813      	bhi.n	801e66c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e644:	fb04 3302 	mla	r3, r4, r2, r3
 801e648:	602b      	str	r3, [r5, #0]
 801e64a:	6803      	ldr	r3, [r0, #0]
 801e64c:	b10b      	cbz	r3, 801e652 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e64e:	3302      	adds	r3, #2
 801e650:	6003      	str	r3, [r0, #0]
 801e652:	680b      	ldr	r3, [r1, #0]
 801e654:	b10b      	cbz	r3, 801e65a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e656:	3301      	adds	r3, #1
 801e658:	600b      	str	r3, [r1, #0]
 801e65a:	6803      	ldr	r3, [r0, #0]
 801e65c:	b10b      	cbz	r3, 801e662 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e65e:	881b      	ldrh	r3, [r3, #0]
 801e660:	e7eb      	b.n	801e63a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e662:	680b      	ldr	r3, [r1, #0]
 801e664:	2b00      	cmp	r3, #0
 801e666:	d0e8      	beq.n	801e63a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e668:	781b      	ldrb	r3, [r3, #0]
 801e66a:	e7e6      	b.n	801e63a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e66c:	2a06      	cmp	r2, #6
 801e66e:	bfa8      	it	ge
 801e670:	2206      	movge	r2, #6
 801e672:	602a      	str	r2, [r5, #0]
 801e674:	e7b1      	b.n	801e5da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e676 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e67a:	b0a3      	sub	sp, #140	@ 0x8c
 801e67c:	2600      	movs	r6, #0
 801e67e:	4607      	mov	r7, r0
 801e680:	4688      	mov	r8, r1
 801e682:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801e686:	4631      	mov	r1, r6
 801e688:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801e68a:	4648      	mov	r0, r9
 801e68c:	960d      	str	r6, [sp, #52]	@ 0x34
 801e68e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e692:	2242      	movs	r2, #66	@ 0x42
 801e694:	f00c ff16 	bl	802b4c4 <memset>
 801e698:	b15f      	cbz	r7, 801e6b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e69a:	f108 3aff 	add.w	sl, r8, #4294967295
 801e69e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e6a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e6a2:	b152      	cbz	r2, 801e6ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e6a4:	8812      	ldrh	r2, [r2, #0]
 801e6a6:	b10a      	cbz	r2, 801e6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e6a8:	459a      	cmp	sl, r3
 801e6aa:	dc2e      	bgt.n	801e70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e6b2:	4638      	mov	r0, r7
 801e6b4:	b023      	add	sp, #140	@ 0x8c
 801e6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6ba:	9a08      	ldr	r2, [sp, #32]
 801e6bc:	2a00      	cmp	r2, #0
 801e6be:	d0f5      	beq.n	801e6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e6c0:	7812      	ldrb	r2, [r2, #0]
 801e6c2:	e7f0      	b.n	801e6a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e6c4:	2d00      	cmp	r5, #0
 801e6c6:	d0ea      	beq.n	801e69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e6c8:	782a      	ldrb	r2, [r5, #0]
 801e6ca:	b142      	cbz	r2, 801e6de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e6cc:	2a25      	cmp	r2, #37	@ 0x25
 801e6ce:	d001      	beq.n	801e6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e6d0:	459a      	cmp	sl, r3
 801e6d2:	dc08      	bgt.n	801e6e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e6d4:	f1bb 0f00 	cmp.w	fp, #0
 801e6d8:	d121      	bne.n	801e71e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e6da:	2d00      	cmp	r5, #0
 801e6dc:	d0df      	beq.n	801e69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e6de:	782a      	ldrb	r2, [r5, #0]
 801e6e0:	f04f 0b00 	mov.w	fp, #0
 801e6e4:	e01d      	b.n	801e722 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e6e6:	f1bb 0f00 	cmp.w	fp, #0
 801e6ea:	d077      	beq.n	801e7dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e6ec:	f8bb 2000 	ldrh.w	r2, [fp]
 801e6f0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e6f4:	f1bb 0f00 	cmp.w	fp, #0
 801e6f8:	d002      	beq.n	801e700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e6fa:	f10b 0202 	add.w	r2, fp, #2
 801e6fe:	9209      	str	r2, [sp, #36]	@ 0x24
 801e700:	b10d      	cbz	r5, 801e706 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e702:	3501      	adds	r5, #1
 801e704:	9508      	str	r5, [sp, #32]
 801e706:	3301      	adds	r3, #1
 801e708:	930d      	str	r3, [sp, #52]	@ 0x34
 801e70a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e70c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e710:	f1bb 0f00 	cmp.w	fp, #0
 801e714:	d0d6      	beq.n	801e6c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e716:	f8bb 2000 	ldrh.w	r2, [fp]
 801e71a:	2a00      	cmp	r2, #0
 801e71c:	d1d6      	bne.n	801e6cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e71e:	f8bb 2000 	ldrh.w	r2, [fp]
 801e722:	2a00      	cmp	r2, #0
 801e724:	d0bb      	beq.n	801e69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e726:	459a      	cmp	sl, r3
 801e728:	ddb9      	ble.n	801e69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e72a:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801e72e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801e732:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801e736:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801e73a:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801e73e:	960e      	str	r6, [sp, #56]	@ 0x38
 801e740:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801e744:	960f      	str	r6, [sp, #60]	@ 0x3c
 801e746:	f1bb 0f00 	cmp.w	fp, #0
 801e74a:	d002      	beq.n	801e752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801e74c:	f10b 0302 	add.w	r3, fp, #2
 801e750:	9309      	str	r3, [sp, #36]	@ 0x24
 801e752:	b10d      	cbz	r5, 801e758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801e754:	1c6b      	adds	r3, r5, #1
 801e756:	9308      	str	r3, [sp, #32]
 801e758:	ab0f      	add	r3, sp, #60	@ 0x3c
 801e75a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801e75e:	a908      	add	r1, sp, #32
 801e760:	a809      	add	r0, sp, #36	@ 0x24
 801e762:	9305      	str	r3, [sp, #20]
 801e764:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801e768:	9304      	str	r3, [sp, #16]
 801e76a:	ab0e      	add	r3, sp, #56	@ 0x38
 801e76c:	9303      	str	r3, [sp, #12]
 801e76e:	ab0c      	add	r3, sp, #48	@ 0x30
 801e770:	9302      	str	r3, [sp, #8]
 801e772:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801e776:	9301      	str	r3, [sp, #4]
 801e778:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801e77c:	9300      	str	r3, [sp, #0]
 801e77e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801e782:	f7ff fea8 	bl	801e4d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801e786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e788:	2b00      	cmp	r3, #0
 801e78a:	bfbf      	itttt	lt
 801e78c:	6823      	ldrlt	r3, [r4, #0]
 801e78e:	3404      	addlt	r4, #4
 801e790:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e794:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801e796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e798:	2b00      	cmp	r3, #0
 801e79a:	bfbe      	ittt	lt
 801e79c:	6823      	ldrlt	r3, [r4, #0]
 801e79e:	3404      	addlt	r4, #4
 801e7a0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e7a4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e7a8:	bfb8      	it	lt
 801e7aa:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801e7ac:	b1d9      	cbz	r1, 801e7e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801e7ae:	880b      	ldrh	r3, [r1, #0]
 801e7b0:	2b69      	cmp	r3, #105	@ 0x69
 801e7b2:	d01f      	beq.n	801e7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e7b4:	d82f      	bhi.n	801e816 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801e7b6:	2b58      	cmp	r3, #88	@ 0x58
 801e7b8:	d01c      	beq.n	801e7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e7ba:	d818      	bhi.n	801e7ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801e7bc:	2b25      	cmp	r3, #37	@ 0x25
 801e7be:	d034      	beq.n	801e82a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801e7c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e7c2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801e7c6:	f1bb 0f00 	cmp.w	fp, #0
 801e7ca:	f000 80b7 	beq.w	801e93c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801e7ce:	f8bb 5000 	ldrh.w	r5, [fp]
 801e7d2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801e7d6:	3301      	adds	r3, #1
 801e7d8:	930d      	str	r3, [sp, #52]	@ 0x34
 801e7da:	e029      	b.n	801e830 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e7dc:	b10d      	cbz	r5, 801e7e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801e7de:	782a      	ldrb	r2, [r5, #0]
 801e7e0:	e786      	b.n	801e6f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e7e2:	462a      	mov	r2, r5
 801e7e4:	e784      	b.n	801e6f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e7e6:	2a00      	cmp	r2, #0
 801e7e8:	d0ea      	beq.n	801e7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e7ea:	7813      	ldrb	r3, [r2, #0]
 801e7ec:	e7e0      	b.n	801e7b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801e7ee:	3b63      	subs	r3, #99	@ 0x63
 801e7f0:	2b01      	cmp	r3, #1
 801e7f2:	d8e5      	bhi.n	801e7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e7f4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801e7f8:	b329      	cbz	r1, 801e846 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801e7fa:	880b      	ldrh	r3, [r1, #0]
 801e7fc:	2b69      	cmp	r3, #105	@ 0x69
 801e7fe:	d063      	beq.n	801e8c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e800:	d825      	bhi.n	801e84e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801e802:	2b63      	cmp	r3, #99	@ 0x63
 801e804:	d038      	beq.n	801e878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801e806:	2b64      	cmp	r3, #100	@ 0x64
 801e808:	d05e      	beq.n	801e8c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e80a:	2b58      	cmp	r3, #88	@ 0x58
 801e80c:	d07a      	beq.n	801e904 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801e80e:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801e812:	4625      	mov	r5, r4
 801e814:	e036      	b.n	801e884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e816:	2b73      	cmp	r3, #115	@ 0x73
 801e818:	d0ec      	beq.n	801e7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e81a:	d802      	bhi.n	801e822 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801e81c:	2b6f      	cmp	r3, #111	@ 0x6f
 801e81e:	d1cf      	bne.n	801e7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e820:	e7e8      	b.n	801e7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e822:	2b75      	cmp	r3, #117	@ 0x75
 801e824:	d0e6      	beq.n	801e7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e826:	2b78      	cmp	r3, #120	@ 0x78
 801e828:	e7f9      	b.n	801e81e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801e82a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e82c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801e830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e832:	b10b      	cbz	r3, 801e838 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801e834:	3302      	adds	r3, #2
 801e836:	9309      	str	r3, [sp, #36]	@ 0x24
 801e838:	9b08      	ldr	r3, [sp, #32]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	f43f af2f 	beq.w	801e69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e840:	3301      	adds	r3, #1
 801e842:	9308      	str	r3, [sp, #32]
 801e844:	e72b      	b.n	801e69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e846:	2a00      	cmp	r2, #0
 801e848:	d0e1      	beq.n	801e80e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e84a:	7813      	ldrb	r3, [r2, #0]
 801e84c:	e7d6      	b.n	801e7fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801e84e:	2b73      	cmp	r3, #115	@ 0x73
 801e850:	d036      	beq.n	801e8c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801e852:	d807      	bhi.n	801e864 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801e854:	2b6f      	cmp	r3, #111	@ 0x6f
 801e856:	d1da      	bne.n	801e80e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e858:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e85a:	1d25      	adds	r5, r4, #4
 801e85c:	2308      	movs	r3, #8
 801e85e:	eba8 0202 	sub.w	r2, r8, r2
 801e862:	e049      	b.n	801e8f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e864:	2b75      	cmp	r3, #117	@ 0x75
 801e866:	d042      	beq.n	801e8ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801e868:	2b78      	cmp	r3, #120	@ 0x78
 801e86a:	d1d0      	bne.n	801e80e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e86c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e86e:	1d25      	adds	r5, r4, #4
 801e870:	2310      	movs	r3, #16
 801e872:	eba8 0202 	sub.w	r2, r8, r2
 801e876:	e03f      	b.n	801e8f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e878:	6823      	ldr	r3, [r4, #0]
 801e87a:	1d25      	adds	r5, r4, #4
 801e87c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801e880:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801e884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e886:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d051      	beq.n	801e932 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801e88e:	881a      	ldrh	r2, [r3, #0]
 801e890:	a80d      	add	r0, sp, #52	@ 0x34
 801e892:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801e896:	462c      	mov	r4, r5
 801e898:	9005      	str	r0, [sp, #20]
 801e89a:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801e89e:	9004      	str	r0, [sp, #16]
 801e8a0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e8a2:	9003      	str	r0, [sp, #12]
 801e8a4:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801e8a8:	9002      	str	r0, [sp, #8]
 801e8aa:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e8ac:	9001      	str	r0, [sp, #4]
 801e8ae:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801e8b2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801e8b6:	9000      	str	r0, [sp, #0]
 801e8b8:	a810      	add	r0, sp, #64	@ 0x40
 801e8ba:	f7ff fd49 	bl	801e350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e8be:	e7b7      	b.n	801e830 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e8c0:	1d25      	adds	r5, r4, #4
 801e8c2:	6823      	ldr	r3, [r4, #0]
 801e8c4:	9310      	str	r3, [sp, #64]	@ 0x40
 801e8c6:	e7dd      	b.n	801e884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e8c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e8ca:	230a      	movs	r3, #10
 801e8cc:	4649      	mov	r1, r9
 801e8ce:	6820      	ldr	r0, [r4, #0]
 801e8d0:	eba8 0202 	sub.w	r2, r8, r2
 801e8d4:	1d25      	adds	r5, r4, #4
 801e8d6:	b292      	uxth	r2, r2
 801e8d8:	f7ff fcf0 	bl	801e2bc <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801e8dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801e8e0:	2b2d      	cmp	r3, #45	@ 0x2d
 801e8e2:	d1cf      	bne.n	801e884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e8e4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e8e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8ea:	3302      	adds	r3, #2
 801e8ec:	e7ea      	b.n	801e8c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e8ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e8f0:	1d25      	adds	r5, r4, #4
 801e8f2:	230a      	movs	r3, #10
 801e8f4:	eba8 0202 	sub.w	r2, r8, r2
 801e8f8:	b292      	uxth	r2, r2
 801e8fa:	4649      	mov	r1, r9
 801e8fc:	6820      	ldr	r0, [r4, #0]
 801e8fe:	f7ff fd09 	bl	801e314 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e902:	e7bf      	b.n	801e884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e904:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e906:	2310      	movs	r3, #16
 801e908:	4649      	mov	r1, r9
 801e90a:	6820      	ldr	r0, [r4, #0]
 801e90c:	eba8 0202 	sub.w	r2, r8, r2
 801e910:	1d25      	adds	r5, r4, #4
 801e912:	b292      	uxth	r2, r2
 801e914:	f7ff fcfe 	bl	801e314 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e918:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801e91c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e920:	2b00      	cmp	r3, #0
 801e922:	d0af      	beq.n	801e884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e924:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801e928:	2919      	cmp	r1, #25
 801e92a:	d8f7      	bhi.n	801e91c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e92c:	3b20      	subs	r3, #32
 801e92e:	8013      	strh	r3, [r2, #0]
 801e930:	e7f4      	b.n	801e91c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e932:	9a08      	ldr	r2, [sp, #32]
 801e934:	2a00      	cmp	r2, #0
 801e936:	d0ab      	beq.n	801e890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e938:	7812      	ldrb	r2, [r2, #0]
 801e93a:	e7a9      	b.n	801e890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e93c:	2d00      	cmp	r5, #0
 801e93e:	f43f af48 	beq.w	801e7d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801e942:	782d      	ldrb	r5, [r5, #0]
 801e944:	e745      	b.n	801e7d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801e946 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e946:	b507      	push	{r0, r1, r2, lr}
 801e948:	9300      	str	r3, [sp, #0]
 801e94a:	4613      	mov	r3, r2
 801e94c:	2200      	movs	r2, #0
 801e94e:	f7ff fe92 	bl	801e676 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801e952:	b003      	add	sp, #12
 801e954:	f85d fb04 	ldr.w	pc, [sp], #4

0801e958 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e958:	b40c      	push	{r2, r3}
 801e95a:	b507      	push	{r0, r1, r2, lr}
 801e95c:	ab04      	add	r3, sp, #16
 801e95e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e962:	9301      	str	r3, [sp, #4]
 801e964:	f7ff ffef 	bl	801e946 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e968:	b003      	add	sp, #12
 801e96a:	f85d eb04 	ldr.w	lr, [sp], #4
 801e96e:	b002      	add	sp, #8
 801e970:	4770      	bx	lr

0801e972 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt>:
 801e972:	4603      	mov	r3, r0
 801e974:	2000      	movs	r0, #0
 801e976:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e978:	4290      	cmp	r0, r2
 801e97a:	d209      	bcs.n	801e990 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x1e>
 801e97c:	781c      	ldrb	r4, [r3, #0]
 801e97e:	0625      	lsls	r5, r4, #24
 801e980:	d407      	bmi.n	801e992 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x20>
 801e982:	3301      	adds	r3, #1
 801e984:	800c      	strh	r4, [r1, #0]
 801e986:	3001      	adds	r0, #1
 801e988:	1c8c      	adds	r4, r1, #2
 801e98a:	8809      	ldrh	r1, [r1, #0]
 801e98c:	b280      	uxth	r0, r0
 801e98e:	bb69      	cbnz	r1, 801e9ec <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x7a>
 801e990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e992:	f004 05e0 	and.w	r5, r4, #224	@ 0xe0
 801e996:	2dc0      	cmp	r5, #192	@ 0xc0
 801e998:	d10d      	bne.n	801e9b6 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x44>
 801e99a:	785d      	ldrb	r5, [r3, #1]
 801e99c:	f005 06c0 	and.w	r6, r5, #192	@ 0xc0
 801e9a0:	2e80      	cmp	r6, #128	@ 0x80
 801e9a2:	d108      	bne.n	801e9b6 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x44>
 801e9a4:	01a4      	lsls	r4, r4, #6
 801e9a6:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801e9aa:	3302      	adds	r3, #2
 801e9ac:	f404 64f8 	and.w	r4, r4, #1984	@ 0x7c0
 801e9b0:	432c      	orrs	r4, r5
 801e9b2:	800c      	strh	r4, [r1, #0]
 801e9b4:	e7e7      	b.n	801e986 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x14>
 801e9b6:	f004 05f0 	and.w	r5, r4, #240	@ 0xf0
 801e9ba:	2de0      	cmp	r5, #224	@ 0xe0
 801e9bc:	d114      	bne.n	801e9e8 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 801e9be:	785e      	ldrb	r6, [r3, #1]
 801e9c0:	f006 05c0 	and.w	r5, r6, #192	@ 0xc0
 801e9c4:	2d80      	cmp	r5, #128	@ 0x80
 801e9c6:	d10f      	bne.n	801e9e8 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 801e9c8:	789d      	ldrb	r5, [r3, #2]
 801e9ca:	f005 07c0 	and.w	r7, r5, #192	@ 0xc0
 801e9ce:	2f80      	cmp	r7, #128	@ 0x80
 801e9d0:	d10a      	bne.n	801e9e8 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 801e9d2:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801e9d6:	01b6      	lsls	r6, r6, #6
 801e9d8:	3303      	adds	r3, #3
 801e9da:	ea45 3404 	orr.w	r4, r5, r4, lsl #12
 801e9de:	f406 667c 	and.w	r6, r6, #4032	@ 0xfc0
 801e9e2:	4334      	orrs	r4, r6
 801e9e4:	800c      	strh	r4, [r1, #0]
 801e9e6:	e7ce      	b.n	801e986 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x14>
 801e9e8:	3301      	adds	r3, #1
 801e9ea:	460c      	mov	r4, r1
 801e9ec:	4621      	mov	r1, r4
 801e9ee:	e7c3      	b.n	801e978 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x6>

0801e9f0 <_ZN8touchgfx7Unicode6toUTF8EPKtPht>:
 801e9f0:	2300      	movs	r3, #0
 801e9f2:	b570      	push	{r4, r5, r6, lr}
 801e9f4:	4293      	cmp	r3, r2
 801e9f6:	d20a      	bcs.n	801ea0e <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x1e>
 801e9f8:	8804      	ldrh	r4, [r0, #0]
 801e9fa:	2c7f      	cmp	r4, #127	@ 0x7f
 801e9fc:	d809      	bhi.n	801ea12 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x22>
 801e9fe:	3301      	adds	r3, #1
 801ea00:	700c      	strb	r4, [r1, #0]
 801ea02:	3101      	adds	r1, #1
 801ea04:	b29b      	uxth	r3, r3
 801ea06:	f830 4b02 	ldrh.w	r4, [r0], #2
 801ea0a:	2c00      	cmp	r4, #0
 801ea0c:	d1f2      	bne.n	801e9f4 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x4>
 801ea0e:	4618      	mov	r0, r3
 801ea10:	bd70      	pop	{r4, r5, r6, pc}
 801ea12:	f5b4 6f00 	cmp.w	r4, #2048	@ 0x800
 801ea16:	f103 0602 	add.w	r6, r3, #2
 801ea1a:	d211      	bcs.n	801ea40 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x50>
 801ea1c:	1c5d      	adds	r5, r3, #1
 801ea1e:	4295      	cmp	r5, r2
 801ea20:	da0e      	bge.n	801ea40 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x50>
 801ea22:	11a4      	asrs	r4, r4, #6
 801ea24:	460d      	mov	r5, r1
 801ea26:	f064 043f 	orn	r4, r4, #63	@ 0x3f
 801ea2a:	f805 4b02 	strb.w	r4, [r5], #2
 801ea2e:	7803      	ldrb	r3, [r0, #0]
 801ea30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ea34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801ea38:	704b      	strb	r3, [r1, #1]
 801ea3a:	b2b3      	uxth	r3, r6
 801ea3c:	4629      	mov	r1, r5
 801ea3e:	e7e2      	b.n	801ea06 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x16>
 801ea40:	4296      	cmp	r6, r2
 801ea42:	dae4      	bge.n	801ea0e <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x1e>
 801ea44:	1324      	asrs	r4, r4, #12
 801ea46:	3303      	adds	r3, #3
 801ea48:	3103      	adds	r1, #3
 801ea4a:	f064 041f 	orn	r4, r4, #31
 801ea4e:	b29b      	uxth	r3, r3
 801ea50:	f801 4c03 	strb.w	r4, [r1, #-3]
 801ea54:	8804      	ldrh	r4, [r0, #0]
 801ea56:	f3c4 1485 	ubfx	r4, r4, #6, #6
 801ea5a:	f064 047f 	orn	r4, r4, #127	@ 0x7f
 801ea5e:	f801 4c02 	strb.w	r4, [r1, #-2]
 801ea62:	7804      	ldrb	r4, [r0, #0]
 801ea64:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 801ea68:	f064 047f 	orn	r4, r4, #127	@ 0x7f
 801ea6c:	f801 4c01 	strb.w	r4, [r1, #-1]
 801ea70:	e7c9      	b.n	801ea06 <_ZN8touchgfx7Unicode6toUTF8EPKtPht+0x16>
	...

0801ea74 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ea74:	4b01      	ldr	r3, [pc, #4]	@ (801ea7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ea76:	6018      	str	r0, [r3, #0]
 801ea78:	4770      	bx	lr
 801ea7a:	bf00      	nop
 801ea7c:	240287d8 	.word	0x240287d8

0801ea80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ea80:	4b06      	ldr	r3, [pc, #24]	@ (801ea9c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ea82:	881a      	ldrh	r2, [r3, #0]
 801ea84:	4282      	cmp	r2, r0
 801ea86:	d807      	bhi.n	801ea98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ea88:	4b05      	ldr	r3, [pc, #20]	@ (801eaa0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ea8a:	881b      	ldrh	r3, [r3, #0]
 801ea8c:	4413      	add	r3, r2
 801ea8e:	4298      	cmp	r0, r3
 801ea90:	bfac      	ite	ge
 801ea92:	2000      	movge	r0, #0
 801ea94:	2001      	movlt	r0, #1
 801ea96:	4770      	bx	lr
 801ea98:	2000      	movs	r0, #0
 801ea9a:	4770      	bx	lr
 801ea9c:	240287f8 	.word	0x240287f8
 801eaa0:	240287fc 	.word	0x240287fc

0801eaa4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801eaa4:	b508      	push	{r3, lr}
 801eaa6:	4601      	mov	r1, r0
 801eaa8:	f7ff ffea 	bl	801ea80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801eaac:	b118      	cbz	r0, 801eab6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801eaae:	4b02      	ldr	r3, [pc, #8]	@ (801eab8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801eab0:	681b      	ldr	r3, [r3, #0]
 801eab2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801eab6:	bd08      	pop	{r3, pc}
 801eab8:	240287dc 	.word	0x240287dc

0801eabc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801eabc:	b538      	push	{r3, r4, r5, lr}
 801eabe:	4604      	mov	r4, r0
 801eac0:	f7ff ffde 	bl	801ea80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801eac4:	b1d8      	cbz	r0, 801eafe <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801eac6:	4b0f      	ldr	r3, [pc, #60]	@ (801eb04 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801eac8:	881b      	ldrh	r3, [r3, #0]
 801eaca:	1ae4      	subs	r4, r4, r3
 801eacc:	230e      	movs	r3, #14
 801eace:	4363      	muls	r3, r4
 801ead0:	4c0d      	ldr	r4, [pc, #52]	@ (801eb08 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801ead2:	6825      	ldr	r5, [r4, #0]
 801ead4:	18ea      	adds	r2, r5, r3
 801ead6:	7b12      	ldrb	r2, [r2, #12]
 801ead8:	f012 0220 	ands.w	r2, r2, #32
 801eadc:	d010      	beq.n	801eb00 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801eade:	f9b1 2000 	ldrsh.w	r2, [r1]
 801eae2:	52ea      	strh	r2, [r5, r3]
 801eae4:	6822      	ldr	r2, [r4, #0]
 801eae6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801eaea:	441a      	add	r2, r3
 801eaec:	8055      	strh	r5, [r2, #2]
 801eaee:	6822      	ldr	r2, [r4, #0]
 801eaf0:	4413      	add	r3, r2
 801eaf2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801eaf6:	809a      	strh	r2, [r3, #4]
 801eaf8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801eafc:	80da      	strh	r2, [r3, #6]
 801eafe:	bd38      	pop	{r3, r4, r5, pc}
 801eb00:	4610      	mov	r0, r2
 801eb02:	e7fc      	b.n	801eafe <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801eb04:	240287f8 	.word	0x240287f8
 801eb08:	240287e0 	.word	0x240287e0

0801eb0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801eb0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801eb10:	4606      	mov	r6, r0
 801eb12:	460c      	mov	r4, r1
 801eb14:	f7ff ffb4 	bl	801ea80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801eb18:	b918      	cbnz	r0, 801eb22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801eb1a:	2000      	movs	r0, #0
 801eb1c:	b002      	add	sp, #8
 801eb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb22:	4608      	mov	r0, r1
 801eb24:	f7f4 febb 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801eb28:	2800      	cmp	r0, #0
 801eb2a:	d1f6      	bne.n	801eb1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801eb2c:	4b3f      	ldr	r3, [pc, #252]	@ (801ec2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801eb2e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801ec30 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801eb32:	881d      	ldrh	r5, [r3, #0]
 801eb34:	f8d9 a000 	ldr.w	sl, [r9]
 801eb38:	46c8      	mov	r8, r9
 801eb3a:	1b73      	subs	r3, r6, r5
 801eb3c:	250e      	movs	r5, #14
 801eb3e:	435d      	muls	r5, r3
 801eb40:	eb0a 0705 	add.w	r7, sl, r5
 801eb44:	7b3b      	ldrb	r3, [r7, #12]
 801eb46:	f013 0f20 	tst.w	r3, #32
 801eb4a:	d0e6      	beq.n	801eb1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801eb4c:	4621      	mov	r1, r4
 801eb4e:	4638      	mov	r0, r7
 801eb50:	f7fc faa8 	bl	801b0a4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801eb54:	2800      	cmp	r0, #0
 801eb56:	d1e1      	bne.n	801eb1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801eb58:	4639      	mov	r1, r7
 801eb5a:	4620      	mov	r0, r4
 801eb5c:	f7fc faa2 	bl	801b0a4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801eb60:	b108      	cbz	r0, 801eb66 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801eb62:	4621      	mov	r1, r4
 801eb64:	e020      	b.n	801eba8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801eb66:	f9b4 2000 	ldrsh.w	r2, [r4]
 801eb6a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801eb6e:	429a      	cmp	r2, r3
 801eb70:	d11e      	bne.n	801ebb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801eb72:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801eb76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801eb7a:	429a      	cmp	r2, r3
 801eb7c:	d118      	bne.n	801ebb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801eb7e:	6820      	ldr	r0, [r4, #0]
 801eb80:	466b      	mov	r3, sp
 801eb82:	6861      	ldr	r1, [r4, #4]
 801eb84:	c303      	stmia	r3!, {r0, r1}
 801eb86:	4639      	mov	r1, r7
 801eb88:	4668      	mov	r0, sp
 801eb8a:	f7f5 f9c7 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eb8e:	f8d9 3000 	ldr.w	r3, [r9]
 801eb92:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801eb96:	442b      	add	r3, r5
 801eb98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801eb9c:	4413      	add	r3, r2
 801eb9e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801eba2:	4293      	cmp	r3, r2
 801eba4:	dc04      	bgt.n	801ebb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801eba6:	4669      	mov	r1, sp
 801eba8:	4630      	mov	r0, r6
 801ebaa:	f7ff ff87 	bl	801eabc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801ebae:	e7b5      	b.n	801eb1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801ebb0:	f8d8 3000 	ldr.w	r3, [r8]
 801ebb4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801ebb8:	442b      	add	r3, r5
 801ebba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ebbe:	4291      	cmp	r1, r2
 801ebc0:	d119      	bne.n	801ebf6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801ebc2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801ebc6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ebca:	4291      	cmp	r1, r2
 801ebcc:	d113      	bne.n	801ebf6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801ebce:	6820      	ldr	r0, [r4, #0]
 801ebd0:	466a      	mov	r2, sp
 801ebd2:	6861      	ldr	r1, [r4, #4]
 801ebd4:	c203      	stmia	r2!, {r0, r1}
 801ebd6:	4619      	mov	r1, r3
 801ebd8:	4668      	mov	r0, sp
 801ebda:	f7f5 f99f 	bl	8013f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ebde:	f8d8 3000 	ldr.w	r3, [r8]
 801ebe2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801ebe6:	442b      	add	r3, r5
 801ebe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ebec:	4413      	add	r3, r2
 801ebee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ebf2:	4293      	cmp	r3, r2
 801ebf4:	ddd7      	ble.n	801eba6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801ebf6:	4620      	mov	r0, r4
 801ebf8:	f7f4 fe51 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ebfc:	b990      	cbnz	r0, 801ec24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801ebfe:	88a7      	ldrh	r7, [r4, #4]
 801ec00:	88e3      	ldrh	r3, [r4, #6]
 801ec02:	fb17 f703 	smulbb	r7, r7, r3
 801ec06:	f8d8 3000 	ldr.w	r3, [r8]
 801ec0a:	441d      	add	r5, r3
 801ec0c:	4628      	mov	r0, r5
 801ec0e:	f7f4 fe46 	bl	801389e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ec12:	b948      	cbnz	r0, 801ec28 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801ec14:	88ab      	ldrh	r3, [r5, #4]
 801ec16:	88ea      	ldrh	r2, [r5, #6]
 801ec18:	fb13 f302 	smulbb	r3, r3, r2
 801ec1c:	42bb      	cmp	r3, r7
 801ec1e:	f6bf af7c 	bge.w	801eb1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801ec22:	e79e      	b.n	801eb62 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801ec24:	2700      	movs	r7, #0
 801ec26:	e7ee      	b.n	801ec06 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801ec28:	2300      	movs	r3, #0
 801ec2a:	e7f7      	b.n	801ec1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801ec2c:	240287f8 	.word	0x240287f8
 801ec30:	240287e0 	.word	0x240287e0

0801ec34 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec36:	4c24      	ldr	r4, [pc, #144]	@ (801ecc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801ec38:	6823      	ldr	r3, [r4, #0]
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d042      	beq.n	801ecc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ec3e:	4a23      	ldr	r2, [pc, #140]	@ (801eccc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801ec40:	4d23      	ldr	r5, [pc, #140]	@ (801ecd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801ec42:	8811      	ldrh	r1, [r2, #0]
 801ec44:	f8b5 c000 	ldrh.w	ip, [r5]
 801ec48:	4822      	ldr	r0, [pc, #136]	@ (801ecd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ec4a:	4461      	add	r1, ip
 801ec4c:	1c4a      	adds	r2, r1, #1
 801ec4e:	008f      	lsls	r7, r1, #2
 801ec50:	f022 0201 	bic.w	r2, r2, #1
 801ec54:	19de      	adds	r6, r3, r7
 801ec56:	0412      	lsls	r2, r2, #16
 801ec58:	6006      	str	r6, [r0, #0]
 801ec5a:	4e1f      	ldr	r6, [pc, #124]	@ (801ecd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ec5c:	0c12      	lsrs	r2, r2, #16
 801ec5e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801ec62:	19da      	adds	r2, r3, r7
 801ec64:	6032      	str	r2, [r6, #0]
 801ec66:	220e      	movs	r2, #14
 801ec68:	fb02 f20c 	mul.w	r2, r2, ip
 801ec6c:	3203      	adds	r2, #3
 801ec6e:	f022 0203 	bic.w	r2, r2, #3
 801ec72:	443a      	add	r2, r7
 801ec74:	4f19      	ldr	r7, [pc, #100]	@ (801ecdc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ec76:	4413      	add	r3, r2
 801ec78:	603b      	str	r3, [r7, #0]
 801ec7a:	2300      	movs	r3, #0
 801ec7c:	4f18      	ldr	r7, [pc, #96]	@ (801ece0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ec7e:	469c      	mov	ip, r3
 801ec80:	803b      	strh	r3, [r7, #0]
 801ec82:	4f18      	ldr	r7, [pc, #96]	@ (801ece4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ec84:	683f      	ldr	r7, [r7, #0]
 801ec86:	1aba      	subs	r2, r7, r2
 801ec88:	4f17      	ldr	r7, [pc, #92]	@ (801ece8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ec8a:	603a      	str	r2, [r7, #0]
 801ec8c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801ec90:	4a16      	ldr	r2, [pc, #88]	@ (801ecec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ec92:	8013      	strh	r3, [r2, #0]
 801ec94:	428b      	cmp	r3, r1
 801ec96:	d10d      	bne.n	801ecb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ec98:	882d      	ldrh	r5, [r5, #0]
 801ec9a:	2300      	movs	r3, #0
 801ec9c:	6830      	ldr	r0, [r6, #0]
 801ec9e:	240e      	movs	r4, #14
 801eca0:	429d      	cmp	r5, r3
 801eca2:	d90f      	bls.n	801ecc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801eca4:	fb04 0203 	mla	r2, r4, r3, r0
 801eca8:	3301      	adds	r3, #1
 801ecaa:	7b11      	ldrb	r1, [r2, #12]
 801ecac:	f36f 1145 	bfc	r1, #5, #1
 801ecb0:	7311      	strb	r1, [r2, #12]
 801ecb2:	e7f5      	b.n	801eca0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ecb4:	6822      	ldr	r2, [r4, #0]
 801ecb6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ecba:	6802      	ldr	r2, [r0, #0]
 801ecbc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ecc0:	3301      	adds	r3, #1
 801ecc2:	e7e7      	b.n	801ec94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ecc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ecc6:	bf00      	nop
 801ecc8:	240287dc 	.word	0x240287dc
 801eccc:	240287f8 	.word	0x240287f8
 801ecd0:	240287fc 	.word	0x240287fc
 801ecd4:	240287f0 	.word	0x240287f0
 801ecd8:	240287e0 	.word	0x240287e0
 801ecdc:	240287e8 	.word	0x240287e8
 801ece0:	240287fa 	.word	0x240287fa
 801ece4:	240287e4 	.word	0x240287e4
 801ece8:	240287f4 	.word	0x240287f4
 801ecec:	240287ec 	.word	0x240287ec

0801ecf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ecf0:	4b06      	ldr	r3, [pc, #24]	@ (801ed0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	b943      	cbnz	r3, 801ed08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ecf6:	b139      	cbz	r1, 801ed08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ecf8:	4b05      	ldr	r3, [pc, #20]	@ (801ed10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ecfa:	801a      	strh	r2, [r3, #0]
 801ecfc:	4b05      	ldr	r3, [pc, #20]	@ (801ed14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801ecfe:	6019      	str	r1, [r3, #0]
 801ed00:	4b05      	ldr	r3, [pc, #20]	@ (801ed18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801ed02:	6018      	str	r0, [r3, #0]
 801ed04:	f7ff bf96 	b.w	801ec34 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ed08:	4770      	bx	lr
 801ed0a:	bf00      	nop
 801ed0c:	240287e8 	.word	0x240287e8
 801ed10:	240287fc 	.word	0x240287fc
 801ed14:	240287e4 	.word	0x240287e4
 801ed18:	240287dc 	.word	0x240287dc

0801ed1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ed1c:	b470      	push	{r4, r5, r6}
 801ed1e:	4c07      	ldr	r4, [pc, #28]	@ (801ed3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ed20:	4605      	mov	r5, r0
 801ed22:	4610      	mov	r0, r2
 801ed24:	9a03      	ldr	r2, [sp, #12]
 801ed26:	6826      	ldr	r6, [r4, #0]
 801ed28:	b936      	cbnz	r6, 801ed38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ed2a:	6025      	str	r5, [r4, #0]
 801ed2c:	4c04      	ldr	r4, [pc, #16]	@ (801ed40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ed2e:	8021      	strh	r1, [r4, #0]
 801ed30:	4619      	mov	r1, r3
 801ed32:	bc70      	pop	{r4, r5, r6}
 801ed34:	f7ff bfdc 	b.w	801ecf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ed38:	bc70      	pop	{r4, r5, r6}
 801ed3a:	4770      	bx	lr
 801ed3c:	24028800 	.word	0x24028800
 801ed40:	240287f8 	.word	0x240287f8

0801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ed44:	4a12      	ldr	r2, [pc, #72]	@ (801ed90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801ed46:	8803      	ldrh	r3, [r0, #0]
 801ed48:	8812      	ldrh	r2, [r2, #0]
 801ed4a:	4293      	cmp	r3, r2
 801ed4c:	d207      	bcs.n	801ed5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801ed4e:	4a11      	ldr	r2, [pc, #68]	@ (801ed94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801ed50:	2114      	movs	r1, #20
 801ed52:	6812      	ldr	r2, [r2, #0]
 801ed54:	fb01 2303 	mla	r3, r1, r3, r2
 801ed58:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801ed5c:	4770      	bx	lr
 801ed5e:	490e      	ldr	r1, [pc, #56]	@ (801ed98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ed60:	8809      	ldrh	r1, [r1, #0]
 801ed62:	4411      	add	r1, r2
 801ed64:	428b      	cmp	r3, r1
 801ed66:	da04      	bge.n	801ed72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801ed68:	1a9b      	subs	r3, r3, r2
 801ed6a:	4a0c      	ldr	r2, [pc, #48]	@ (801ed9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ed6c:	210e      	movs	r1, #14
 801ed6e:	6812      	ldr	r2, [r2, #0]
 801ed70:	e7f0      	b.n	801ed54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801ed72:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ed76:	4293      	cmp	r3, r2
 801ed78:	d108      	bne.n	801ed8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801ed7a:	4b09      	ldr	r3, [pc, #36]	@ (801eda0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ed7c:	781b      	ldrb	r3, [r3, #0]
 801ed7e:	b91b      	cbnz	r3, 801ed88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801ed80:	4b08      	ldr	r3, [pc, #32]	@ (801eda4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ed82:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ed86:	4770      	bx	lr
 801ed88:	4b07      	ldr	r3, [pc, #28]	@ (801eda8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ed8a:	e7fa      	b.n	801ed82 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ed8c:	2000      	movs	r0, #0
 801ed8e:	4770      	bx	lr
 801ed90:	240287f8 	.word	0x240287f8
 801ed94:	24028800 	.word	0x24028800
 801ed98:	240287fc 	.word	0x240287fc
 801ed9c:	240287e0 	.word	0x240287e0
 801eda0:	24028768 	.word	0x24028768
 801eda4:	2402876a 	.word	0x2402876a
 801eda8:	2402876c 	.word	0x2402876c

0801edac <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801edac:	4a12      	ldr	r2, [pc, #72]	@ (801edf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801edae:	8803      	ldrh	r3, [r0, #0]
 801edb0:	8812      	ldrh	r2, [r2, #0]
 801edb2:	4293      	cmp	r3, r2
 801edb4:	d207      	bcs.n	801edc6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801edb6:	4a11      	ldr	r2, [pc, #68]	@ (801edfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801edb8:	2114      	movs	r1, #20
 801edba:	6812      	ldr	r2, [r2, #0]
 801edbc:	fb01 2303 	mla	r3, r1, r3, r2
 801edc0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801edc4:	4770      	bx	lr
 801edc6:	490e      	ldr	r1, [pc, #56]	@ (801ee00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801edc8:	8809      	ldrh	r1, [r1, #0]
 801edca:	4411      	add	r1, r2
 801edcc:	428b      	cmp	r3, r1
 801edce:	da04      	bge.n	801edda <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801edd0:	1a9b      	subs	r3, r3, r2
 801edd2:	4a0c      	ldr	r2, [pc, #48]	@ (801ee04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801edd4:	210e      	movs	r1, #14
 801edd6:	6812      	ldr	r2, [r2, #0]
 801edd8:	e7f0      	b.n	801edbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801edda:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801edde:	4293      	cmp	r3, r2
 801ede0:	d108      	bne.n	801edf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801ede2:	4b09      	ldr	r3, [pc, #36]	@ (801ee08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ede4:	781b      	ldrb	r3, [r3, #0]
 801ede6:	b91b      	cbnz	r3, 801edf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801ede8:	4b08      	ldr	r3, [pc, #32]	@ (801ee0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801edea:	f9b3 0000 	ldrsh.w	r0, [r3]
 801edee:	4770      	bx	lr
 801edf0:	4b07      	ldr	r3, [pc, #28]	@ (801ee10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801edf2:	e7fa      	b.n	801edea <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801edf4:	2000      	movs	r0, #0
 801edf6:	4770      	bx	lr
 801edf8:	240287f8 	.word	0x240287f8
 801edfc:	24028800 	.word	0x24028800
 801ee00:	240287fc 	.word	0x240287fc
 801ee04:	240287e0 	.word	0x240287e0
 801ee08:	24028768 	.word	0x24028768
 801ee0c:	2402876c 	.word	0x2402876c
 801ee10:	2402876a 	.word	0x2402876a

0801ee14 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ee14:	4a22      	ldr	r2, [pc, #136]	@ (801eea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801ee16:	b530      	push	{r4, r5, lr}
 801ee18:	880b      	ldrh	r3, [r1, #0]
 801ee1a:	8812      	ldrh	r2, [r2, #0]
 801ee1c:	4293      	cmp	r3, r2
 801ee1e:	d213      	bcs.n	801ee48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ee20:	4a20      	ldr	r2, [pc, #128]	@ (801eea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ee22:	2114      	movs	r1, #20
 801ee24:	6812      	ldr	r2, [r2, #0]
 801ee26:	fb01 2303 	mla	r3, r1, r3, r2
 801ee2a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ee2e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ee32:	8a1a      	ldrh	r2, [r3, #16]
 801ee34:	8a5b      	ldrh	r3, [r3, #18]
 801ee36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ee3a:	8004      	strh	r4, [r0, #0]
 801ee3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ee40:	8041      	strh	r1, [r0, #2]
 801ee42:	8082      	strh	r2, [r0, #4]
 801ee44:	80c3      	strh	r3, [r0, #6]
 801ee46:	e024      	b.n	801ee92 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801ee48:	4917      	ldr	r1, [pc, #92]	@ (801eea8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ee4a:	8809      	ldrh	r1, [r1, #0]
 801ee4c:	4411      	add	r1, r2
 801ee4e:	428b      	cmp	r3, r1
 801ee50:	da10      	bge.n	801ee74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801ee52:	1a9b      	subs	r3, r3, r2
 801ee54:	220e      	movs	r2, #14
 801ee56:	4353      	muls	r3, r2
 801ee58:	4a14      	ldr	r2, [pc, #80]	@ (801eeac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ee5a:	6811      	ldr	r1, [r2, #0]
 801ee5c:	18ca      	adds	r2, r1, r3
 801ee5e:	5ecd      	ldrsh	r5, [r1, r3]
 801ee60:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801ee64:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801ee68:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801ee6c:	8005      	strh	r5, [r0, #0]
 801ee6e:	8044      	strh	r4, [r0, #2]
 801ee70:	8081      	strh	r1, [r0, #4]
 801ee72:	e7e7      	b.n	801ee44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ee74:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ee78:	4293      	cmp	r3, r2
 801ee7a:	d10b      	bne.n	801ee94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801ee7c:	4b0c      	ldr	r3, [pc, #48]	@ (801eeb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ee7e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ee82:	4b0c      	ldr	r3, [pc, #48]	@ (801eeb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ee84:	8081      	strh	r1, [r0, #4]
 801ee86:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	80c2      	strh	r2, [r0, #6]
 801ee8e:	8003      	strh	r3, [r0, #0]
 801ee90:	8043      	strh	r3, [r0, #2]
 801ee92:	bd30      	pop	{r4, r5, pc}
 801ee94:	2300      	movs	r3, #0
 801ee96:	8003      	strh	r3, [r0, #0]
 801ee98:	8043      	strh	r3, [r0, #2]
 801ee9a:	8083      	strh	r3, [r0, #4]
 801ee9c:	e7d2      	b.n	801ee44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ee9e:	bf00      	nop
 801eea0:	240287f8 	.word	0x240287f8
 801eea4:	24028800 	.word	0x24028800
 801eea8:	240287fc 	.word	0x240287fc
 801eeac:	240287e0 	.word	0x240287e0
 801eeb0:	24028764 	.word	0x24028764
 801eeb4:	24028766 	.word	0x24028766

0801eeb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801eeb8:	4a17      	ldr	r2, [pc, #92]	@ (801ef18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801eeba:	8803      	ldrh	r3, [r0, #0]
 801eebc:	8812      	ldrh	r2, [r2, #0]
 801eebe:	4293      	cmp	r3, r2
 801eec0:	d213      	bcs.n	801eeea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801eec2:	4a16      	ldr	r2, [pc, #88]	@ (801ef1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801eec4:	2114      	movs	r1, #20
 801eec6:	6812      	ldr	r2, [r2, #0]
 801eec8:	fb01 2303 	mla	r3, r1, r3, r2
 801eecc:	8a1a      	ldrh	r2, [r3, #16]
 801eece:	8919      	ldrh	r1, [r3, #8]
 801eed0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801eed4:	428a      	cmp	r2, r1
 801eed6:	db1d      	blt.n	801ef14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801eed8:	8a58      	ldrh	r0, [r3, #18]
 801eeda:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801eede:	895b      	ldrh	r3, [r3, #10]
 801eee0:	4298      	cmp	r0, r3
 801eee2:	bfac      	ite	ge
 801eee4:	2000      	movge	r0, #0
 801eee6:	2001      	movlt	r0, #1
 801eee8:	4770      	bx	lr
 801eeea:	490d      	ldr	r1, [pc, #52]	@ (801ef20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801eeec:	8809      	ldrh	r1, [r1, #0]
 801eeee:	4411      	add	r1, r2
 801eef0:	428b      	cmp	r3, r1
 801eef2:	da0d      	bge.n	801ef10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801eef4:	1a9b      	subs	r3, r3, r2
 801eef6:	4a0b      	ldr	r2, [pc, #44]	@ (801ef24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801eef8:	210e      	movs	r1, #14
 801eefa:	6812      	ldr	r2, [r2, #0]
 801eefc:	fb01 2303 	mla	r3, r1, r3, r2
 801ef00:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ef04:	891a      	ldrh	r2, [r3, #8]
 801ef06:	4291      	cmp	r1, r2
 801ef08:	db04      	blt.n	801ef14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ef0a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ef0e:	e7e6      	b.n	801eede <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ef10:	2000      	movs	r0, #0
 801ef12:	4770      	bx	lr
 801ef14:	2001      	movs	r0, #1
 801ef16:	4770      	bx	lr
 801ef18:	240287f8 	.word	0x240287f8
 801ef1c:	24028800 	.word	0x24028800
 801ef20:	240287fc 	.word	0x240287fc
 801ef24:	240287e0 	.word	0x240287e0

0801ef28 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ef28:	4a12      	ldr	r2, [pc, #72]	@ (801ef74 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ef2a:	8803      	ldrh	r3, [r0, #0]
 801ef2c:	8811      	ldrh	r1, [r2, #0]
 801ef2e:	428b      	cmp	r3, r1
 801ef30:	d20b      	bcs.n	801ef4a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ef32:	4a11      	ldr	r2, [pc, #68]	@ (801ef78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ef34:	6812      	ldr	r2, [r2, #0]
 801ef36:	b112      	cbz	r2, 801ef3e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ef38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ef3c:	b9c0      	cbnz	r0, 801ef70 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801ef3e:	4a0f      	ldr	r2, [pc, #60]	@ (801ef7c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ef40:	6811      	ldr	r1, [r2, #0]
 801ef42:	2214      	movs	r2, #20
 801ef44:	4353      	muls	r3, r2
 801ef46:	58c8      	ldr	r0, [r1, r3]
 801ef48:	4770      	bx	lr
 801ef4a:	4a0d      	ldr	r2, [pc, #52]	@ (801ef80 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ef4c:	8812      	ldrh	r2, [r2, #0]
 801ef4e:	440a      	add	r2, r1
 801ef50:	4293      	cmp	r3, r2
 801ef52:	da04      	bge.n	801ef5e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ef54:	4a08      	ldr	r2, [pc, #32]	@ (801ef78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ef56:	6812      	ldr	r2, [r2, #0]
 801ef58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ef5c:	4770      	bx	lr
 801ef5e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ef62:	4293      	cmp	r3, r2
 801ef64:	d103      	bne.n	801ef6e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ef66:	4b07      	ldr	r3, [pc, #28]	@ (801ef84 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ef68:	681b      	ldr	r3, [r3, #0]
 801ef6a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801ef6c:	4770      	bx	lr
 801ef6e:	2000      	movs	r0, #0
 801ef70:	4770      	bx	lr
 801ef72:	bf00      	nop
 801ef74:	240287f8 	.word	0x240287f8
 801ef78:	240287dc 	.word	0x240287dc
 801ef7c:	24028800 	.word	0x24028800
 801ef80:	240287fc 	.word	0x240287fc
 801ef84:	24028770 	.word	0x24028770

0801ef88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ef88:	4b24      	ldr	r3, [pc, #144]	@ (801f01c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ef8a:	8802      	ldrh	r2, [r0, #0]
 801ef8c:	8818      	ldrh	r0, [r3, #0]
 801ef8e:	4282      	cmp	r2, r0
 801ef90:	d221      	bcs.n	801efd6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ef92:	4b23      	ldr	r3, [pc, #140]	@ (801f020 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ef94:	6819      	ldr	r1, [r3, #0]
 801ef96:	2314      	movs	r3, #20
 801ef98:	fb03 1302 	mla	r3, r3, r2, r1
 801ef9c:	6858      	ldr	r0, [r3, #4]
 801ef9e:	2800      	cmp	r0, #0
 801efa0:	d03a      	beq.n	801f018 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801efa2:	4920      	ldr	r1, [pc, #128]	@ (801f024 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801efa4:	6809      	ldr	r1, [r1, #0]
 801efa6:	2900      	cmp	r1, #0
 801efa8:	d036      	beq.n	801f018 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801efaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801efae:	2900      	cmp	r1, #0
 801efb0:	d032      	beq.n	801f018 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801efb2:	891a      	ldrh	r2, [r3, #8]
 801efb4:	8958      	ldrh	r0, [r3, #10]
 801efb6:	4350      	muls	r0, r2
 801efb8:	7c5a      	ldrb	r2, [r3, #17]
 801efba:	7cdb      	ldrb	r3, [r3, #19]
 801efbc:	0952      	lsrs	r2, r2, #5
 801efbe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801efc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801efc6:	2b0b      	cmp	r3, #11
 801efc8:	bf18      	it	ne
 801efca:	0040      	lslne	r0, r0, #1
 801efcc:	3003      	adds	r0, #3
 801efce:	f020 0003 	bic.w	r0, r0, #3
 801efd2:	4408      	add	r0, r1
 801efd4:	4770      	bx	lr
 801efd6:	4b14      	ldr	r3, [pc, #80]	@ (801f028 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801efd8:	881b      	ldrh	r3, [r3, #0]
 801efda:	4403      	add	r3, r0
 801efdc:	429a      	cmp	r2, r3
 801efde:	da1a      	bge.n	801f016 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801efe0:	4b12      	ldr	r3, [pc, #72]	@ (801f02c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801efe2:	1a10      	subs	r0, r2, r0
 801efe4:	210e      	movs	r1, #14
 801efe6:	681b      	ldr	r3, [r3, #0]
 801efe8:	fb01 3000 	mla	r0, r1, r0, r3
 801efec:	7b03      	ldrb	r3, [r0, #12]
 801efee:	f003 031f 	and.w	r3, r3, #31
 801eff2:	2b0b      	cmp	r3, #11
 801eff4:	d10b      	bne.n	801f00e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801eff6:	8903      	ldrh	r3, [r0, #8]
 801eff8:	8940      	ldrh	r0, [r0, #10]
 801effa:	4358      	muls	r0, r3
 801effc:	4b09      	ldr	r3, [pc, #36]	@ (801f024 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801effe:	3003      	adds	r0, #3
 801f000:	6819      	ldr	r1, [r3, #0]
 801f002:	f020 0303 	bic.w	r3, r0, #3
 801f006:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f00a:	4418      	add	r0, r3
 801f00c:	4770      	bx	lr
 801f00e:	2b0d      	cmp	r3, #13
 801f010:	d101      	bne.n	801f016 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f012:	300d      	adds	r0, #13
 801f014:	4770      	bx	lr
 801f016:	2000      	movs	r0, #0
 801f018:	4770      	bx	lr
 801f01a:	bf00      	nop
 801f01c:	240287f8 	.word	0x240287f8
 801f020:	24028800 	.word	0x24028800
 801f024:	240287dc 	.word	0x240287dc
 801f028:	240287fc 	.word	0x240287fc
 801f02c:	240287e0 	.word	0x240287e0

0801f030 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f030:	4b1f      	ldr	r3, [pc, #124]	@ (801f0b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801f032:	b510      	push	{r4, lr}
 801f034:	8802      	ldrh	r2, [r0, #0]
 801f036:	881b      	ldrh	r3, [r3, #0]
 801f038:	429a      	cmp	r2, r3
 801f03a:	d21a      	bcs.n	801f072 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801f03c:	4b1d      	ldr	r3, [pc, #116]	@ (801f0b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801f03e:	2114      	movs	r1, #20
 801f040:	681b      	ldr	r3, [r3, #0]
 801f042:	fb01 3102 	mla	r1, r1, r2, r3
 801f046:	7c4b      	ldrb	r3, [r1, #17]
 801f048:	0958      	lsrs	r0, r3, #5
 801f04a:	7ccb      	ldrb	r3, [r1, #19]
 801f04c:	491a      	ldr	r1, [pc, #104]	@ (801f0b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801f04e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f052:	6809      	ldr	r1, [r1, #0]
 801f054:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801f058:	b2d8      	uxtb	r0, r3
 801f05a:	b149      	cbz	r1, 801f070 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f05c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f060:	b132      	cbz	r2, 801f070 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f062:	2b0e      	cmp	r3, #14
 801f064:	d021      	beq.n	801f0aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801f066:	280f      	cmp	r0, #15
 801f068:	d01d      	beq.n	801f0a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801f06a:	2810      	cmp	r0, #16
 801f06c:	bf08      	it	eq
 801f06e:	2002      	moveq	r0, #2
 801f070:	bd10      	pop	{r4, pc}
 801f072:	4912      	ldr	r1, [pc, #72]	@ (801f0bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801f074:	8809      	ldrh	r1, [r1, #0]
 801f076:	4419      	add	r1, r3
 801f078:	428a      	cmp	r2, r1
 801f07a:	da09      	bge.n	801f090 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801f07c:	1ad3      	subs	r3, r2, r3
 801f07e:	4a10      	ldr	r2, [pc, #64]	@ (801f0c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801f080:	210e      	movs	r1, #14
 801f082:	6812      	ldr	r2, [r2, #0]
 801f084:	fb01 2303 	mla	r3, r1, r3, r2
 801f088:	7b18      	ldrb	r0, [r3, #12]
 801f08a:	f000 001f 	and.w	r0, r0, #31
 801f08e:	e7ef      	b.n	801f070 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f090:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801f094:	429a      	cmp	r2, r3
 801f096:	d108      	bne.n	801f0aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801f098:	f7e9 f91e 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 801f09c:	6803      	ldr	r3, [r0, #0]
 801f09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0a4:	4718      	bx	r3
 801f0a6:	2001      	movs	r0, #1
 801f0a8:	e7e2      	b.n	801f070 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f0aa:	2000      	movs	r0, #0
 801f0ac:	e7e0      	b.n	801f070 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f0ae:	bf00      	nop
 801f0b0:	240287f8 	.word	0x240287f8
 801f0b4:	24028800 	.word	0x24028800
 801f0b8:	240287dc 	.word	0x240287dc
 801f0bc:	240287fc 	.word	0x240287fc
 801f0c0:	240287e0 	.word	0x240287e0

0801f0c4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801f0c4:	2018      	movs	r0, #24
 801f0c6:	4770      	bx	lr

0801f0c8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801f0c8:	2001      	movs	r0, #1
 801f0ca:	4770      	bx	lr

0801f0cc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801f0cc:	4b02      	ldr	r3, [pc, #8]	@ (801f0d8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801f0ce:	8818      	ldrh	r0, [r3, #0]
 801f0d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f0d4:	b280      	uxth	r0, r0
 801f0d6:	4770      	bx	lr
 801f0d8:	2402876a 	.word	0x2402876a

0801f0dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f0dc:	2bff      	cmp	r3, #255	@ 0xff
 801f0de:	d04c      	beq.n	801f17a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f0e0:	2a2c      	cmp	r2, #44	@ 0x2c
 801f0e2:	d030      	beq.n	801f146 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801f0e4:	d80f      	bhi.n	801f106 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801f0e6:	2a08      	cmp	r2, #8
 801f0e8:	d043      	beq.n	801f172 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f0ea:	d805      	bhi.n	801f0f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801f0ec:	2a04      	cmp	r2, #4
 801f0ee:	d03e      	beq.n	801f16e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f0f0:	2a05      	cmp	r2, #5
 801f0f2:	d03a      	beq.n	801f16a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801f0f4:	2300      	movs	r3, #0
 801f0f6:	e024      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f0f8:	2a0a      	cmp	r2, #10
 801f0fa:	d03a      	beq.n	801f172 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f0fc:	d301      	bcc.n	801f102 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801f0fe:	2a0b      	cmp	r2, #11
 801f100:	d1f8      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f102:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801f104:	e01d      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f106:	2a30      	cmp	r2, #48	@ 0x30
 801f108:	d035      	beq.n	801f176 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f10a:	d80a      	bhi.n	801f122 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801f10c:	2a2e      	cmp	r2, #46	@ 0x2e
 801f10e:	684b      	ldr	r3, [r1, #4]
 801f110:	d023      	beq.n	801f15a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f112:	d90d      	bls.n	801f130 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801f114:	781a      	ldrb	r2, [r3, #0]
 801f116:	785b      	ldrb	r3, [r3, #1]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d1eb      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f11c:	b98a      	cbnz	r2, 801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f11e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f120:	e00f      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f122:	2a32      	cmp	r2, #50	@ 0x32
 801f124:	d027      	beq.n	801f176 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f126:	d301      	bcc.n	801f12c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801f128:	2a33      	cmp	r2, #51	@ 0x33
 801f12a:	d1e3      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f12c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801f12e:	e008      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f130:	781a      	ldrb	r2, [r3, #0]
 801f132:	785b      	ldrb	r3, [r3, #1]
 801f134:	2b00      	cmp	r3, #0
 801f136:	d1dd      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f138:	2a00      	cmp	r2, #0
 801f13a:	d0f0      	beq.n	801f11e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801f13c:	2a01      	cmp	r2, #1
 801f13e:	d1d9      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f140:	6943      	ldr	r3, [r0, #20]
 801f142:	4618      	mov	r0, r3
 801f144:	4770      	bx	lr
 801f146:	684b      	ldr	r3, [r1, #4]
 801f148:	781a      	ldrb	r2, [r3, #0]
 801f14a:	785b      	ldrb	r3, [r3, #1]
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	d1d1      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f150:	b14a      	cbz	r2, 801f166 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801f152:	2a01      	cmp	r2, #1
 801f154:	bf08      	it	eq
 801f156:	68c3      	ldreq	r3, [r0, #12]
 801f158:	e7f3      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f15a:	781a      	ldrb	r2, [r3, #0]
 801f15c:	785b      	ldrb	r3, [r3, #1]
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d1c8      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f162:	2a00      	cmp	r2, #0
 801f164:	d1ed      	bne.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f166:	69c3      	ldr	r3, [r0, #28]
 801f168:	e7eb      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f16a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801f16c:	e7e9      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f16e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801f170:	e7e7      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f172:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801f174:	e7e5      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f176:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801f178:	e7e3      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f17a:	2a2c      	cmp	r2, #44	@ 0x2c
 801f17c:	d030      	beq.n	801f1e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801f17e:	d80f      	bhi.n	801f1a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801f180:	2a08      	cmp	r2, #8
 801f182:	d042      	beq.n	801f20a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f184:	d805      	bhi.n	801f192 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801f186:	2a04      	cmp	r2, #4
 801f188:	d03d      	beq.n	801f206 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801f18a:	2a05      	cmp	r2, #5
 801f18c:	d1b2      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f18e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801f190:	e7d7      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f192:	2a0a      	cmp	r2, #10
 801f194:	d039      	beq.n	801f20a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f196:	d301      	bcc.n	801f19c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801f198:	2a0b      	cmp	r2, #11
 801f19a:	d1ab      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f19c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801f19e:	e7d0      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1a0:	2a30      	cmp	r2, #48	@ 0x30
 801f1a2:	d034      	beq.n	801f20e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f1a4:	d80b      	bhi.n	801f1be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801f1a6:	2a2e      	cmp	r2, #46	@ 0x2e
 801f1a8:	684b      	ldr	r3, [r1, #4]
 801f1aa:	d023      	beq.n	801f1f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801f1ac:	d90e      	bls.n	801f1cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801f1ae:	781a      	ldrb	r2, [r3, #0]
 801f1b0:	785b      	ldrb	r3, [r3, #1]
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d19e      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1b6:	2a00      	cmp	r2, #0
 801f1b8:	d1c3      	bne.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801f1bc:	e7c1      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1be:	2a32      	cmp	r2, #50	@ 0x32
 801f1c0:	d025      	beq.n	801f20e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f1c2:	d301      	bcc.n	801f1c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f1c4:	2a33      	cmp	r2, #51	@ 0x33
 801f1c6:	d195      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1c8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801f1ca:	e7ba      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1cc:	781a      	ldrb	r2, [r3, #0]
 801f1ce:	785b      	ldrb	r3, [r3, #1]
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d18f      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1d4:	2a00      	cmp	r2, #0
 801f1d6:	d0f0      	beq.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801f1d8:	2a01      	cmp	r2, #1
 801f1da:	d18b      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1dc:	6983      	ldr	r3, [r0, #24]
 801f1de:	e7b0      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1e0:	684b      	ldr	r3, [r1, #4]
 801f1e2:	781a      	ldrb	r2, [r3, #0]
 801f1e4:	785b      	ldrb	r3, [r3, #1]
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	d184      	bne.n	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1ea:	b152      	cbz	r2, 801f202 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801f1ec:	2a01      	cmp	r2, #1
 801f1ee:	bf08      	it	eq
 801f1f0:	6903      	ldreq	r3, [r0, #16]
 801f1f2:	e7a6      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1f4:	781a      	ldrb	r2, [r3, #0]
 801f1f6:	785b      	ldrb	r3, [r3, #1]
 801f1f8:	2b00      	cmp	r3, #0
 801f1fa:	f47f af7b 	bne.w	801f0f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1fe:	2a00      	cmp	r2, #0
 801f200:	d19f      	bne.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f202:	6a03      	ldr	r3, [r0, #32]
 801f204:	e79d      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f206:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801f208:	e79b      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f20a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801f20c:	e799      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f20e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801f210:	e797      	b.n	801f142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801f212 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f216:	b085      	sub	sp, #20
 801f218:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f21a:	9203      	str	r2, [sp, #12]
 801f21c:	6870      	ldr	r0, [r6, #4]
 801f21e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f222:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801f226:	9101      	str	r1, [sp, #4]
 801f228:	fa1f f885 	uxth.w	r8, r5
 801f22c:	43ed      	mvns	r5, r5
 801f22e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f232:	b2ed      	uxtb	r5, r5
 801f234:	fb00 2404 	mla	r4, r0, r4, r2
 801f238:	6832      	ldr	r2, [r6, #0]
 801f23a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f23e:	4414      	add	r4, r2
 801f240:	f8dc 2000 	ldr.w	r2, [ip]
 801f244:	9202      	str	r2, [sp, #8]
 801f246:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f24a:	f102 0e04 	add.w	lr, r2, #4
 801f24e:	9a01      	ldr	r2, [sp, #4]
 801f250:	2a00      	cmp	r2, #0
 801f252:	dc03      	bgt.n	801f25c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f254:	9a03      	ldr	r2, [sp, #12]
 801f256:	2a00      	cmp	r2, #0
 801f258:	f340 8116 	ble.w	801f488 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f25c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f25e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801f262:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f266:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f268:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801f26c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f270:	2b00      	cmp	r3, #0
 801f272:	dd0e      	ble.n	801f292 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f274:	1406      	asrs	r6, r0, #16
 801f276:	d405      	bmi.n	801f284 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f278:	4556      	cmp	r6, sl
 801f27a:	da03      	bge.n	801f284 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f27c:	1416      	asrs	r6, r2, #16
 801f27e:	d401      	bmi.n	801f284 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f280:	454e      	cmp	r6, r9
 801f282:	db07      	blt.n	801f294 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f284:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f286:	3b01      	subs	r3, #1
 801f288:	3403      	adds	r4, #3
 801f28a:	4430      	add	r0, r6
 801f28c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f28e:	4432      	add	r2, r6
 801f290:	e7ee      	b.n	801f270 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f292:	d063      	beq.n	801f35c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f294:	1e5e      	subs	r6, r3, #1
 801f296:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801f298:	fb07 0706 	mla	r7, r7, r6, r0
 801f29c:	143f      	asrs	r7, r7, #16
 801f29e:	d454      	bmi.n	801f34a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f2a0:	4557      	cmp	r7, sl
 801f2a2:	da52      	bge.n	801f34a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f2a4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f2a6:	fb07 2606 	mla	r6, r7, r6, r2
 801f2aa:	1436      	asrs	r6, r6, #16
 801f2ac:	d44d      	bmi.n	801f34a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f2ae:	454e      	cmp	r6, r9
 801f2b0:	da4b      	bge.n	801f34a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f2b2:	1ce6      	adds	r6, r4, #3
 801f2b4:	4699      	mov	r9, r3
 801f2b6:	f1b9 0f00 	cmp.w	r9, #0
 801f2ba:	f106 0603 	add.w	r6, r6, #3
 801f2be:	dd48      	ble.n	801f352 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801f2c0:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801f2c4:	1417      	asrs	r7, r2, #16
 801f2c6:	9902      	ldr	r1, [sp, #8]
 801f2c8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f2cc:	f109 39ff 	add.w	r9, r9, #4294967295
 801f2d0:	fb0b 1707 	mla	r7, fp, r7, r1
 801f2d4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f2d8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f2da:	f817 700a 	ldrb.w	r7, [r7, sl]
 801f2de:	fb1b fb05 	smulbb	fp, fp, r5
 801f2e2:	4408      	add	r0, r1
 801f2e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f2e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f2ea:	440a      	add	r2, r1
 801f2ec:	eb0e 0a07 	add.w	sl, lr, r7
 801f2f0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801f2f4:	fb07 b708 	mla	r7, r7, r8, fp
 801f2f8:	b2bf      	uxth	r7, r7
 801f2fa:	f107 0b01 	add.w	fp, r7, #1
 801f2fe:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f302:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f306:	fb1b fb05 	smulbb	fp, fp, r5
 801f30a:	123f      	asrs	r7, r7, #8
 801f30c:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f310:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f314:	fb07 b708 	mla	r7, r7, r8, fp
 801f318:	b2bf      	uxth	r7, r7
 801f31a:	f107 0b01 	add.w	fp, r7, #1
 801f31e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f322:	123f      	asrs	r7, r7, #8
 801f324:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f328:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f32c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f330:	fb1a fa05 	smulbb	sl, sl, r5
 801f334:	fb07 a708 	mla	r7, r7, r8, sl
 801f338:	b2bf      	uxth	r7, r7
 801f33a:	f107 0a01 	add.w	sl, r7, #1
 801f33e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f342:	123f      	asrs	r7, r7, #8
 801f344:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f348:	e7b5      	b.n	801f2b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f34a:	2700      	movs	r7, #0
 801f34c:	1bde      	subs	r6, r3, r7
 801f34e:	2e00      	cmp	r6, #0
 801f350:	dc42      	bgt.n	801f3d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f356:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f35a:	441c      	add	r4, r3
 801f35c:	9b01      	ldr	r3, [sp, #4]
 801f35e:	2b00      	cmp	r3, #0
 801f360:	f340 8092 	ble.w	801f488 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f364:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f36a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f36e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f372:	eef0 6a62 	vmov.f32	s13, s5
 801f376:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f37a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f37e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f382:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801f386:	eef0 6a43 	vmov.f32	s13, s6
 801f38a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f38e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801f392:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f396:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f39a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f39e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3aa:	ee12 2a90 	vmov	r2, s5
 801f3ae:	eef0 2a47 	vmov.f32	s5, s14
 801f3b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3b6:	ee13 2a10 	vmov	r2, s6
 801f3ba:	9311      	str	r3, [sp, #68]	@ 0x44
 801f3bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3be:	eeb0 3a67 	vmov.f32	s6, s15
 801f3c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3c6:	9312      	str	r3, [sp, #72]	@ 0x48
 801f3c8:	9b01      	ldr	r3, [sp, #4]
 801f3ca:	9a03      	ldr	r2, [sp, #12]
 801f3cc:	3b01      	subs	r3, #1
 801f3ce:	9301      	str	r3, [sp, #4]
 801f3d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3d2:	bf08      	it	eq
 801f3d4:	4613      	moveq	r3, r2
 801f3d6:	e73a      	b.n	801f24e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f3d8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f3dc:	d44e      	bmi.n	801f47c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f3de:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f3e2:	4556      	cmp	r6, sl
 801f3e4:	dd4a      	ble.n	801f47c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f3e6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f3ea:	d447      	bmi.n	801f47c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f3ec:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801f3f0:	4559      	cmp	r1, fp
 801f3f2:	dd43      	ble.n	801f47c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f3f4:	fa0f f986 	sxth.w	r9, r6
 801f3f8:	9902      	ldr	r1, [sp, #8]
 801f3fa:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f3fe:	fb0b 1909 	mla	r9, fp, r9, r1
 801f402:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f406:	f819 900a 	ldrb.w	r9, [r9, sl]
 801f40a:	fb1b fb05 	smulbb	fp, fp, r5
 801f40e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f412:	eb0e 0a09 	add.w	sl, lr, r9
 801f416:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801f41a:	fb09 b908 	mla	r9, r9, r8, fp
 801f41e:	fa1f f989 	uxth.w	r9, r9
 801f422:	f109 0b01 	add.w	fp, r9, #1
 801f426:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f42a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f42e:	f804 9006 	strb.w	r9, [r4, r6]
 801f432:	4426      	add	r6, r4
 801f434:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f438:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f43c:	fb1b fb05 	smulbb	fp, fp, r5
 801f440:	fb09 b908 	mla	r9, r9, r8, fp
 801f444:	fa1f f989 	uxth.w	r9, r9
 801f448:	f109 0b01 	add.w	fp, r9, #1
 801f44c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f450:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f454:	f886 9001 	strb.w	r9, [r6, #1]
 801f458:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f45c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f460:	fb1a fa05 	smulbb	sl, sl, r5
 801f464:	fb09 a908 	mla	r9, r9, r8, sl
 801f468:	fa1f f989 	uxth.w	r9, r9
 801f46c:	f109 0a01 	add.w	sl, r9, #1
 801f470:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f474:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f478:	f886 9002 	strb.w	r9, [r6, #2]
 801f47c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f47e:	3701      	adds	r7, #1
 801f480:	4408      	add	r0, r1
 801f482:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f484:	440a      	add	r2, r1
 801f486:	e761      	b.n	801f34c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f488:	b005      	add	sp, #20
 801f48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f48e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f48e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f492:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f494:	4693      	mov	fp, r2
 801f496:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f498:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f49c:	6868      	ldr	r0, [r5, #4]
 801f49e:	6877      	ldr	r7, [r6, #4]
 801f4a0:	9100      	str	r1, [sp, #0]
 801f4a2:	3704      	adds	r7, #4
 801f4a4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801f4a8:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801f4ac:	fb00 2404 	mla	r4, r0, r4, r2
 801f4b0:	682a      	ldr	r2, [r5, #0]
 801f4b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f4b6:	4414      	add	r4, r2
 801f4b8:	6832      	ldr	r2, [r6, #0]
 801f4ba:	9201      	str	r2, [sp, #4]
 801f4bc:	9a00      	ldr	r2, [sp, #0]
 801f4be:	2a00      	cmp	r2, #0
 801f4c0:	dc03      	bgt.n	801f4ca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f4c2:	f1bb 0f00 	cmp.w	fp, #0
 801f4c6:	f340 80bc 	ble.w	801f642 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f4ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f4cc:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801f4d0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f4d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f4d6:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801f4da:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	dd0c      	ble.n	801f4fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f4e2:	1405      	asrs	r5, r0, #16
 801f4e4:	d405      	bmi.n	801f4f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f4e6:	4555      	cmp	r5, sl
 801f4e8:	da03      	bge.n	801f4f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f4ea:	1415      	asrs	r5, r2, #16
 801f4ec:	d401      	bmi.n	801f4f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f4ee:	454d      	cmp	r5, r9
 801f4f0:	db05      	blt.n	801f4fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f4f2:	4440      	add	r0, r8
 801f4f4:	4472      	add	r2, lr
 801f4f6:	3b01      	subs	r3, #1
 801f4f8:	3403      	adds	r4, #3
 801f4fa:	e7f0      	b.n	801f4de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f4fc:	d03f      	beq.n	801f57e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801f4fe:	1e5d      	subs	r5, r3, #1
 801f500:	fb08 0c05 	mla	ip, r8, r5, r0
 801f504:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801f508:	d42e      	bmi.n	801f568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f50a:	45d4      	cmp	ip, sl
 801f50c:	da2c      	bge.n	801f568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f50e:	fb0e 2505 	mla	r5, lr, r5, r2
 801f512:	142d      	asrs	r5, r5, #16
 801f514:	d428      	bmi.n	801f568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f516:	454d      	cmp	r5, r9
 801f518:	da26      	bge.n	801f568 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f51a:	1ce5      	adds	r5, r4, #3
 801f51c:	469c      	mov	ip, r3
 801f51e:	f1bc 0f00 	cmp.w	ip, #0
 801f522:	f105 0503 	add.w	r5, r5, #3
 801f526:	dd25      	ble.n	801f574 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801f528:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801f52c:	ea4f 4922 	mov.w	r9, r2, asr #16
 801f530:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f534:	4472      	add	r2, lr
 801f536:	468a      	mov	sl, r1
 801f538:	9901      	ldr	r1, [sp, #4]
 801f53a:	fb0a 1909 	mla	r9, sl, r9, r1
 801f53e:	1401      	asrs	r1, r0, #16
 801f540:	4440      	add	r0, r8
 801f542:	f819 9001 	ldrb.w	r9, [r9, r1]
 801f546:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f54a:	eb07 0a09 	add.w	sl, r7, r9
 801f54e:	f817 9009 	ldrb.w	r9, [r7, r9]
 801f552:	f805 9c06 	strb.w	r9, [r5, #-6]
 801f556:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f55a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801f55e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f562:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f566:	e7da      	b.n	801f51e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f568:	2500      	movs	r5, #0
 801f56a:	eba3 0c05 	sub.w	ip, r3, r5
 801f56e:	f1bc 0f00 	cmp.w	ip, #0
 801f572:	dc3b      	bgt.n	801f5ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f578:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f57c:	441c      	add	r4, r3
 801f57e:	9b00      	ldr	r3, [sp, #0]
 801f580:	2b00      	cmp	r3, #0
 801f582:	dd5e      	ble.n	801f642 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f584:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f588:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f58a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f58e:	eeb0 6a62 	vmov.f32	s12, s5
 801f592:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f596:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f59a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f59e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801f5a2:	eeb0 6a43 	vmov.f32	s12, s6
 801f5a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f5aa:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801f5ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5c6:	ee12 2a90 	vmov	r2, s5
 801f5ca:	eef0 2a47 	vmov.f32	s5, s14
 801f5ce:	fb92 f8f3 	sdiv	r8, r2, r3
 801f5d2:	ee13 2a10 	vmov	r2, s6
 801f5d6:	eeb0 3a67 	vmov.f32	s6, s15
 801f5da:	fb92 fef3 	sdiv	lr, r2, r3
 801f5de:	9b00      	ldr	r3, [sp, #0]
 801f5e0:	3b01      	subs	r3, #1
 801f5e2:	9300      	str	r3, [sp, #0]
 801f5e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5e6:	bf08      	it	eq
 801f5e8:	465b      	moveq	r3, fp
 801f5ea:	e767      	b.n	801f4bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f5ec:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f5f0:	d423      	bmi.n	801f63a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f5f2:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801f5f6:	45cc      	cmp	ip, r9
 801f5f8:	dd1f      	ble.n	801f63a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f5fa:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f5fe:	d41c      	bmi.n	801f63a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f600:	68f1      	ldr	r1, [r6, #12]
 801f602:	4551      	cmp	r1, sl
 801f604:	dd19      	ble.n	801f63a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f606:	fa0f fc8c 	sxth.w	ip, ip
 801f60a:	9901      	ldr	r1, [sp, #4]
 801f60c:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801f610:	f81c c009 	ldrb.w	ip, [ip, r9]
 801f614:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f618:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801f61c:	eb07 090c 	add.w	r9, r7, ip
 801f620:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801f624:	f804 a00c 	strb.w	sl, [r4, ip]
 801f628:	44a4      	add	ip, r4
 801f62a:	f899 a001 	ldrb.w	sl, [r9, #1]
 801f62e:	f88c a001 	strb.w	sl, [ip, #1]
 801f632:	f899 9002 	ldrb.w	r9, [r9, #2]
 801f636:	f88c 9002 	strb.w	r9, [ip, #2]
 801f63a:	4440      	add	r0, r8
 801f63c:	4472      	add	r2, lr
 801f63e:	3501      	adds	r5, #1
 801f640:	e793      	b.n	801f56a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801f642:	b003      	add	sp, #12
 801f644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f648 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f64c:	b085      	sub	sp, #20
 801f64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f652:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f654:	9202      	str	r2, [sp, #8]
 801f656:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801f65a:	6860      	ldr	r0, [r4, #4]
 801f65c:	9203      	str	r2, [sp, #12]
 801f65e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f662:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801f666:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801f66a:	fb00 2505 	mla	r5, r0, r5, r2
 801f66e:	6822      	ldr	r2, [r4, #0]
 801f670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f674:	4415      	add	r5, r2
 801f676:	f8dc 2000 	ldr.w	r2, [ip]
 801f67a:	9200      	str	r2, [sp, #0]
 801f67c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f680:	3204      	adds	r2, #4
 801f682:	9201      	str	r2, [sp, #4]
 801f684:	2900      	cmp	r1, #0
 801f686:	dc03      	bgt.n	801f690 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f688:	9a02      	ldr	r2, [sp, #8]
 801f68a:	2a00      	cmp	r2, #0
 801f68c:	f340 8127 	ble.w	801f8de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f690:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f692:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f696:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801f69a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f69c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f6a0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	dd0d      	ble.n	801f6c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f6a8:	1422      	asrs	r2, r4, #16
 801f6aa:	d405      	bmi.n	801f6b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f6ac:	4542      	cmp	r2, r8
 801f6ae:	da03      	bge.n	801f6b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f6b0:	1402      	asrs	r2, r0, #16
 801f6b2:	d401      	bmi.n	801f6b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f6b4:	42ba      	cmp	r2, r7
 801f6b6:	db06      	blt.n	801f6c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f6b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f6ba:	4474      	add	r4, lr
 801f6bc:	3b01      	subs	r3, #1
 801f6be:	3503      	adds	r5, #3
 801f6c0:	4410      	add	r0, r2
 801f6c2:	e7ef      	b.n	801f6a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f6c4:	d075      	beq.n	801f7b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f6c6:	1e5a      	subs	r2, r3, #1
 801f6c8:	fb0e 4602 	mla	r6, lr, r2, r4
 801f6cc:	1436      	asrs	r6, r6, #16
 801f6ce:	d465      	bmi.n	801f79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f6d0:	4546      	cmp	r6, r8
 801f6d2:	da63      	bge.n	801f79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f6d4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f6d6:	fb06 0202 	mla	r2, r6, r2, r0
 801f6da:	1412      	asrs	r2, r2, #16
 801f6dc:	d45e      	bmi.n	801f79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f6de:	42ba      	cmp	r2, r7
 801f6e0:	da5c      	bge.n	801f79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f6e2:	1cef      	adds	r7, r5, #3
 801f6e4:	4699      	mov	r9, r3
 801f6e6:	f1b9 0f00 	cmp.w	r9, #0
 801f6ea:	dd5d      	ble.n	801f7a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801f6ec:	1402      	asrs	r2, r0, #16
 801f6ee:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f6f2:	1426      	asrs	r6, r4, #16
 801f6f4:	4692      	mov	sl, r2
 801f6f6:	9a00      	ldr	r2, [sp, #0]
 801f6f8:	fb08 220a 	mla	r2, r8, sl, r2
 801f6fc:	5d92      	ldrb	r2, [r2, r6]
 801f6fe:	9e01      	ldr	r6, [sp, #4]
 801f700:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801f704:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801f708:	d041      	beq.n	801f78e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f70a:	9a03      	ldr	r2, [sp, #12]
 801f70c:	fa5f fb86 	uxtb.w	fp, r6
 801f710:	fb02 f808 	mul.w	r8, r2, r8
 801f714:	f108 0201 	add.w	r2, r8, #1
 801f718:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801f71c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801f720:	1212      	asrs	r2, r2, #8
 801f722:	fa1f fa82 	uxth.w	sl, r2
 801f726:	43d2      	mvns	r2, r2
 801f728:	fb1b fb0a 	smulbb	fp, fp, sl
 801f72c:	b2d2      	uxtb	r2, r2
 801f72e:	fb08 b802 	mla	r8, r8, r2, fp
 801f732:	fa1f f888 	uxth.w	r8, r8
 801f736:	f108 0b01 	add.w	fp, r8, #1
 801f73a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f73e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f742:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f746:	fb1b fb0a 	smulbb	fp, fp, sl
 801f74a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f74e:	fb16 fa0a 	smulbb	sl, r6, sl
 801f752:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f756:	f807 8c03 	strb.w	r8, [r7, #-3]
 801f75a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801f75e:	fb06 aa02 	mla	sl, r6, r2, sl
 801f762:	fb08 b802 	mla	r8, r8, r2, fp
 801f766:	fa1f fa8a 	uxth.w	sl, sl
 801f76a:	fa1f f888 	uxth.w	r8, r8
 801f76e:	f10a 0601 	add.w	r6, sl, #1
 801f772:	f108 0b01 	add.w	fp, r8, #1
 801f776:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f77a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f77e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f782:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f786:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f78a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801f78e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f790:	4474      	add	r4, lr
 801f792:	3703      	adds	r7, #3
 801f794:	f109 39ff 	add.w	r9, r9, #4294967295
 801f798:	4410      	add	r0, r2
 801f79a:	e7a4      	b.n	801f6e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f79c:	f04f 0800 	mov.w	r8, #0
 801f7a0:	eba3 0208 	sub.w	r2, r3, r8
 801f7a4:	2a00      	cmp	r2, #0
 801f7a6:	dc3b      	bgt.n	801f820 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801f7a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7b0:	441d      	add	r5, r3
 801f7b2:	2900      	cmp	r1, #0
 801f7b4:	f340 8093 	ble.w	801f8de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f7b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7c2:	3901      	subs	r1, #1
 801f7c4:	eeb0 6a62 	vmov.f32	s12, s5
 801f7c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7d4:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f7d8:	eeb0 6a43 	vmov.f32	s12, s6
 801f7dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7e0:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f7e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f7f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7fc:	ee12 2a90 	vmov	r2, s5
 801f800:	eef0 2a47 	vmov.f32	s5, s14
 801f804:	fb92 fef3 	sdiv	lr, r2, r3
 801f808:	ee13 2a10 	vmov	r2, s6
 801f80c:	eeb0 3a67 	vmov.f32	s6, s15
 801f810:	fb92 f3f3 	sdiv	r3, r2, r3
 801f814:	9a02      	ldr	r2, [sp, #8]
 801f816:	9312      	str	r3, [sp, #72]	@ 0x48
 801f818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f81a:	bf08      	it	eq
 801f81c:	4613      	moveq	r3, r2
 801f81e:	e731      	b.n	801f684 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f820:	1427      	asrs	r7, r4, #16
 801f822:	d456      	bmi.n	801f8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f824:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f828:	42be      	cmp	r6, r7
 801f82a:	dd52      	ble.n	801f8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f82c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f830:	d44f      	bmi.n	801f8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f832:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f836:	454a      	cmp	r2, r9
 801f838:	dd4b      	ble.n	801f8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f83a:	9a00      	ldr	r2, [sp, #0]
 801f83c:	b236      	sxth	r6, r6
 801f83e:	fb09 2606 	mla	r6, r9, r6, r2
 801f842:	5df2      	ldrb	r2, [r6, r7]
 801f844:	9e01      	ldr	r6, [sp, #4]
 801f846:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801f84a:	0e3a      	lsrs	r2, r7, #24
 801f84c:	d041      	beq.n	801f8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f84e:	9e03      	ldr	r6, [sp, #12]
 801f850:	fa5f fb87 	uxtb.w	fp, r7
 801f854:	4372      	muls	r2, r6
 801f856:	1c56      	adds	r6, r2, #1
 801f858:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f85c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801f860:	1212      	asrs	r2, r2, #8
 801f862:	f815 9006 	ldrb.w	r9, [r5, r6]
 801f866:	fa1f fa82 	uxth.w	sl, r2
 801f86a:	43d2      	mvns	r2, r2
 801f86c:	fb1b fb0a 	smulbb	fp, fp, sl
 801f870:	b2d2      	uxtb	r2, r2
 801f872:	fb09 b902 	mla	r9, r9, r2, fp
 801f876:	fa1f f989 	uxth.w	r9, r9
 801f87a:	f109 0b01 	add.w	fp, r9, #1
 801f87e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f882:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f886:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f88a:	fb1b fb0a 	smulbb	fp, fp, sl
 801f88e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f892:	fb17 fa0a 	smulbb	sl, r7, sl
 801f896:	f805 9006 	strb.w	r9, [r5, r6]
 801f89a:	442e      	add	r6, r5
 801f89c:	78b7      	ldrb	r7, [r6, #2]
 801f89e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f8a2:	fb07 aa02 	mla	sl, r7, r2, sl
 801f8a6:	fb09 b902 	mla	r9, r9, r2, fp
 801f8aa:	fa1f fa8a 	uxth.w	sl, sl
 801f8ae:	fa1f f989 	uxth.w	r9, r9
 801f8b2:	f10a 0701 	add.w	r7, sl, #1
 801f8b6:	f109 0b01 	add.w	fp, r9, #1
 801f8ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f8be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f8c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f8c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f8ca:	f886 a002 	strb.w	sl, [r6, #2]
 801f8ce:	f886 9001 	strb.w	r9, [r6, #1]
 801f8d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f8d4:	4474      	add	r4, lr
 801f8d6:	f108 0801 	add.w	r8, r8, #1
 801f8da:	4410      	add	r0, r2
 801f8dc:	e760      	b.n	801f7a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801f8de:	b005      	add	sp, #20
 801f8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f8e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8e8:	b085      	sub	sp, #20
 801f8ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8ee:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f8f0:	9203      	str	r2, [sp, #12]
 801f8f2:	6868      	ldr	r0, [r5, #4]
 801f8f4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f8f8:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801f8fc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f900:	fb00 2404 	mla	r4, r0, r4, r2
 801f904:	682a      	ldr	r2, [r5, #0]
 801f906:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f90a:	4414      	add	r4, r2
 801f90c:	f8dc 2000 	ldr.w	r2, [ip]
 801f910:	9201      	str	r2, [sp, #4]
 801f912:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f916:	3204      	adds	r2, #4
 801f918:	9202      	str	r2, [sp, #8]
 801f91a:	2900      	cmp	r1, #0
 801f91c:	dc03      	bgt.n	801f926 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f91e:	9a03      	ldr	r2, [sp, #12]
 801f920:	2a00      	cmp	r2, #0
 801f922:	f340 8137 	ble.w	801fb94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f926:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f928:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f92c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f930:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f932:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f936:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f93a:	2b00      	cmp	r3, #0
 801f93c:	dd0d      	ble.n	801f95a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f93e:	1405      	asrs	r5, r0, #16
 801f940:	d405      	bmi.n	801f94e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f942:	4545      	cmp	r5, r8
 801f944:	da03      	bge.n	801f94e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f946:	1415      	asrs	r5, r2, #16
 801f948:	d401      	bmi.n	801f94e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f94a:	42bd      	cmp	r5, r7
 801f94c:	db06      	blt.n	801f95c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f94e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f950:	4470      	add	r0, lr
 801f952:	3b01      	subs	r3, #1
 801f954:	3403      	adds	r4, #3
 801f956:	442a      	add	r2, r5
 801f958:	e7ef      	b.n	801f93a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f95a:	d070      	beq.n	801fa3e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801f95c:	1e5d      	subs	r5, r3, #1
 801f95e:	fb0e 0605 	mla	r6, lr, r5, r0
 801f962:	1436      	asrs	r6, r6, #16
 801f964:	d462      	bmi.n	801fa2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f966:	4546      	cmp	r6, r8
 801f968:	da60      	bge.n	801fa2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f96a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f96c:	fb06 2505 	mla	r5, r6, r5, r2
 801f970:	142d      	asrs	r5, r5, #16
 801f972:	d45b      	bmi.n	801fa2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f974:	42bd      	cmp	r5, r7
 801f976:	da59      	bge.n	801fa2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f978:	1ce5      	adds	r5, r4, #3
 801f97a:	469a      	mov	sl, r3
 801f97c:	f1ba 0f00 	cmp.w	sl, #0
 801f980:	dd58      	ble.n	801fa34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801f982:	1416      	asrs	r6, r2, #16
 801f984:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f988:	1407      	asrs	r7, r0, #16
 801f98a:	46b1      	mov	r9, r6
 801f98c:	9e01      	ldr	r6, [sp, #4]
 801f98e:	fb08 6609 	mla	r6, r8, r9, r6
 801f992:	5df6      	ldrb	r6, [r6, r7]
 801f994:	9f02      	ldr	r7, [sp, #8]
 801f996:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801f99a:	0e37      	lsrs	r7, r6, #24
 801f99c:	2fff      	cmp	r7, #255	@ 0xff
 801f99e:	f000 80f0 	beq.w	801fb82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801f9a2:	fa5f f887 	uxtb.w	r8, r7
 801f9a6:	b3d7      	cbz	r7, 801fa1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f9a8:	fa1f f788 	uxth.w	r7, r8
 801f9ac:	ea6f 0808 	mvn.w	r8, r8
 801f9b0:	fa5f fb86 	uxtb.w	fp, r6
 801f9b4:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801f9b8:	fa5f f888 	uxtb.w	r8, r8
 801f9bc:	fb1b fb07 	smulbb	fp, fp, r7
 801f9c0:	fb09 b908 	mla	r9, r9, r8, fp
 801f9c4:	fa1f f989 	uxth.w	r9, r9
 801f9c8:	f109 0b01 	add.w	fp, r9, #1
 801f9cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f9d0:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f9d4:	fb1b fb08 	smulbb	fp, fp, r8
 801f9d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f9dc:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f9e0:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801f9e4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f9e8:	fb09 b907 	mla	r9, r9, r7, fp
 801f9ec:	fa1f f989 	uxth.w	r9, r9
 801f9f0:	f109 0b01 	add.w	fp, r9, #1
 801f9f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f9f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f9fc:	f805 9c02 	strb.w	r9, [r5, #-2]
 801fa00:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801fa04:	fb19 f808 	smulbb	r8, r9, r8
 801fa08:	fb06 8607 	mla	r6, r6, r7, r8
 801fa0c:	b2b6      	uxth	r6, r6
 801fa0e:	f106 0801 	add.w	r8, r6, #1
 801fa12:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801fa16:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fa1a:	f805 8c01 	strb.w	r8, [r5, #-1]
 801fa1e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801fa20:	4470      	add	r0, lr
 801fa22:	3503      	adds	r5, #3
 801fa24:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fa28:	4432      	add	r2, r6
 801fa2a:	e7a7      	b.n	801f97c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fa2c:	2600      	movs	r6, #0
 801fa2e:	1b9d      	subs	r5, r3, r6
 801fa30:	2d00      	cmp	r5, #0
 801fa32:	dc3b      	bgt.n	801faac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fa34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa3c:	441c      	add	r4, r3
 801fa3e:	2900      	cmp	r1, #0
 801fa40:	f340 80a8 	ble.w	801fb94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fa44:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa4e:	3901      	subs	r1, #1
 801fa50:	eeb0 6a62 	vmov.f32	s12, s5
 801fa54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fa58:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa60:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801fa64:	eeb0 6a43 	vmov.f32	s12, s6
 801fa68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa6c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801fa70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa74:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa78:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa88:	ee12 2a90 	vmov	r2, s5
 801fa8c:	eef0 2a47 	vmov.f32	s5, s14
 801fa90:	fb92 fef3 	sdiv	lr, r2, r3
 801fa94:	ee13 2a10 	vmov	r2, s6
 801fa98:	eeb0 3a67 	vmov.f32	s6, s15
 801fa9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801faa0:	9a03      	ldr	r2, [sp, #12]
 801faa2:	9312      	str	r3, [sp, #72]	@ 0x48
 801faa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801faa6:	bf08      	it	eq
 801faa8:	4613      	moveq	r3, r2
 801faaa:	e736      	b.n	801f91a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801faac:	ea5f 4820 	movs.w	r8, r0, asr #16
 801fab0:	d457      	bmi.n	801fb62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fab2:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801fab6:	4547      	cmp	r7, r8
 801fab8:	dd53      	ble.n	801fb62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801faba:	ea5f 4922 	movs.w	r9, r2, asr #16
 801fabe:	d450      	bmi.n	801fb62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fac0:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801fac4:	454d      	cmp	r5, r9
 801fac6:	dd4c      	ble.n	801fb62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fac8:	9d01      	ldr	r5, [sp, #4]
 801faca:	b23f      	sxth	r7, r7
 801facc:	fb09 5707 	mla	r7, r9, r7, r5
 801fad0:	f817 5008 	ldrb.w	r5, [r7, r8]
 801fad4:	9f02      	ldr	r7, [sp, #8]
 801fad6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fada:	0e2f      	lsrs	r7, r5, #24
 801fadc:	2fff      	cmp	r7, #255	@ 0xff
 801fade:	d045      	beq.n	801fb6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fae0:	fa5f f987 	uxtb.w	r9, r7
 801fae4:	b3ef      	cbz	r7, 801fb62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fae6:	fa1f f889 	uxth.w	r8, r9
 801faea:	ea6f 0909 	mvn.w	r9, r9
 801faee:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801faf2:	fa5f fb85 	uxtb.w	fp, r5
 801faf6:	f814 a007 	ldrb.w	sl, [r4, r7]
 801fafa:	fa5f f989 	uxtb.w	r9, r9
 801fafe:	fb1b fb08 	smulbb	fp, fp, r8
 801fb02:	fb0a ba09 	mla	sl, sl, r9, fp
 801fb06:	fa1f fa8a 	uxth.w	sl, sl
 801fb0a:	f10a 0b01 	add.w	fp, sl, #1
 801fb0e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801fb12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fb16:	f804 a007 	strb.w	sl, [r4, r7]
 801fb1a:	4427      	add	r7, r4
 801fb1c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fb20:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801fb24:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fb28:	fb1b fb09 	smulbb	fp, fp, r9
 801fb2c:	fb0a ba08 	mla	sl, sl, r8, fp
 801fb30:	fa1f fa8a 	uxth.w	sl, sl
 801fb34:	f10a 0b01 	add.w	fp, sl, #1
 801fb38:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801fb3c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fb40:	f887 a001 	strb.w	sl, [r7, #1]
 801fb44:	f897 a002 	ldrb.w	sl, [r7, #2]
 801fb48:	fb1a f909 	smulbb	r9, sl, r9
 801fb4c:	fb05 9508 	mla	r5, r5, r8, r9
 801fb50:	b2ad      	uxth	r5, r5
 801fb52:	f105 0901 	add.w	r9, r5, #1
 801fb56:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801fb5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb5e:	f887 9002 	strb.w	r9, [r7, #2]
 801fb62:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fb64:	4470      	add	r0, lr
 801fb66:	3601      	adds	r6, #1
 801fb68:	442a      	add	r2, r5
 801fb6a:	e760      	b.n	801fa2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fb6c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801fb70:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801fb74:	55e5      	strb	r5, [r4, r7]
 801fb76:	4427      	add	r7, r4
 801fb78:	0c2d      	lsrs	r5, r5, #16
 801fb7a:	f887 8001 	strb.w	r8, [r7, #1]
 801fb7e:	70bd      	strb	r5, [r7, #2]
 801fb80:	e7ef      	b.n	801fb62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb82:	0a37      	lsrs	r7, r6, #8
 801fb84:	f805 6c03 	strb.w	r6, [r5, #-3]
 801fb88:	0c36      	lsrs	r6, r6, #16
 801fb8a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801fb8e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801fb92:	e744      	b.n	801fa1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fb94:	b005      	add	sp, #20
 801fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb9e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801fba0:	9201      	str	r2, [sp, #4]
 801fba2:	6870      	ldr	r0, [r6, #4]
 801fba4:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801fba8:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801fbac:	fa1f fe85 	uxth.w	lr, r5
 801fbb0:	43ed      	mvns	r5, r5
 801fbb2:	f8dc 8000 	ldr.w	r8, [ip]
 801fbb6:	b2ed      	uxtb	r5, r5
 801fbb8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801fbbc:	fb00 2404 	mla	r4, r0, r4, r2
 801fbc0:	6832      	ldr	r2, [r6, #0]
 801fbc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fbc6:	4414      	add	r4, r2
 801fbc8:	2900      	cmp	r1, #0
 801fbca:	dc03      	bgt.n	801fbd4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fbcc:	9a01      	ldr	r2, [sp, #4]
 801fbce:	2a00      	cmp	r2, #0
 801fbd0:	f340 810d 	ble.w	801fdee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801fbd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fbd6:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801fbda:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fbde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fbe0:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801fbe4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	dd0e      	ble.n	801fc0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fbec:	1406      	asrs	r6, r0, #16
 801fbee:	d405      	bmi.n	801fbfc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fbf0:	4556      	cmp	r6, sl
 801fbf2:	da03      	bge.n	801fbfc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fbf4:	1416      	asrs	r6, r2, #16
 801fbf6:	d401      	bmi.n	801fbfc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fbf8:	454e      	cmp	r6, r9
 801fbfa:	db07      	blt.n	801fc0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fbfc:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801fbfe:	3b01      	subs	r3, #1
 801fc00:	3403      	adds	r4, #3
 801fc02:	4430      	add	r0, r6
 801fc04:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801fc06:	4432      	add	r2, r6
 801fc08:	e7ee      	b.n	801fbe8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801fc0a:	d060      	beq.n	801fcce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801fc0c:	1e5e      	subs	r6, r3, #1
 801fc0e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801fc10:	fb07 0706 	mla	r7, r7, r6, r0
 801fc14:	143f      	asrs	r7, r7, #16
 801fc16:	d451      	bmi.n	801fcbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fc18:	4557      	cmp	r7, sl
 801fc1a:	da4f      	bge.n	801fcbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fc1c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801fc1e:	fb07 2606 	mla	r6, r7, r6, r2
 801fc22:	1436      	asrs	r6, r6, #16
 801fc24:	d44a      	bmi.n	801fcbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fc26:	454e      	cmp	r6, r9
 801fc28:	da48      	bge.n	801fcbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fc2a:	1ce6      	adds	r6, r4, #3
 801fc2c:	4699      	mov	r9, r3
 801fc2e:	f1b9 0f00 	cmp.w	r9, #0
 801fc32:	f106 0603 	add.w	r6, r6, #3
 801fc36:	dd45      	ble.n	801fcc4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801fc38:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801fc3c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801fc40:	1417      	asrs	r7, r2, #16
 801fc42:	f109 39ff 	add.w	r9, r9, #4294967295
 801fc46:	fb0b a707 	mla	r7, fp, r7, sl
 801fc4a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801fc4e:	fb1b fb05 	smulbb	fp, fp, r5
 801fc52:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fc56:	eb08 0a07 	add.w	sl, r8, r7
 801fc5a:	f818 7007 	ldrb.w	r7, [r8, r7]
 801fc5e:	fb07 b70e 	mla	r7, r7, lr, fp
 801fc62:	b2bf      	uxth	r7, r7
 801fc64:	f107 0b01 	add.w	fp, r7, #1
 801fc68:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fc6c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801fc70:	fb1b fb05 	smulbb	fp, fp, r5
 801fc74:	123f      	asrs	r7, r7, #8
 801fc76:	f806 7c06 	strb.w	r7, [r6, #-6]
 801fc7a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801fc7e:	fb07 b70e 	mla	r7, r7, lr, fp
 801fc82:	b2bf      	uxth	r7, r7
 801fc84:	f107 0b01 	add.w	fp, r7, #1
 801fc88:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fc8c:	123f      	asrs	r7, r7, #8
 801fc8e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801fc92:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801fc96:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801fc9a:	fb1a fa05 	smulbb	sl, sl, r5
 801fc9e:	fb07 a70e 	mla	r7, r7, lr, sl
 801fca2:	b2bf      	uxth	r7, r7
 801fca4:	f107 0a01 	add.w	sl, r7, #1
 801fca8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801fcac:	123f      	asrs	r7, r7, #8
 801fcae:	f806 7c04 	strb.w	r7, [r6, #-4]
 801fcb2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801fcb4:	4438      	add	r0, r7
 801fcb6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801fcb8:	443a      	add	r2, r7
 801fcba:	e7b8      	b.n	801fc2e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fcbc:	2700      	movs	r7, #0
 801fcbe:	1bde      	subs	r6, r3, r7
 801fcc0:	2e00      	cmp	r6, #0
 801fcc2:	dc3f      	bgt.n	801fd44 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801fcc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fcc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fccc:	441c      	add	r4, r3
 801fcce:	2900      	cmp	r1, #0
 801fcd0:	f340 808d 	ble.w	801fdee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801fcd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fcd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fcda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcde:	3901      	subs	r1, #1
 801fce0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fce4:	eef0 6a62 	vmov.f32	s13, s5
 801fce8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fcec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fcf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcf4:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801fcf8:	eef0 6a43 	vmov.f32	s13, s6
 801fcfc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd00:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801fd04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd08:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd1c:	ee12 2a90 	vmov	r2, s5
 801fd20:	eef0 2a47 	vmov.f32	s5, s14
 801fd24:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd28:	ee13 2a10 	vmov	r2, s6
 801fd2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fd2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fd30:	eeb0 3a67 	vmov.f32	s6, s15
 801fd34:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd38:	9a01      	ldr	r2, [sp, #4]
 801fd3a:	9310      	str	r3, [sp, #64]	@ 0x40
 801fd3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fd3e:	bf08      	it	eq
 801fd40:	4613      	moveq	r3, r2
 801fd42:	e741      	b.n	801fbc8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fd44:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fd48:	d44b      	bmi.n	801fde2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fd4a:	f8dc b008 	ldr.w	fp, [ip, #8]
 801fd4e:	45cb      	cmp	fp, r9
 801fd50:	dd47      	ble.n	801fde2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fd52:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801fd56:	d444      	bmi.n	801fde2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fd58:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801fd5c:	4556      	cmp	r6, sl
 801fd5e:	dd40      	ble.n	801fde2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fd60:	fa0f f68b 	sxth.w	r6, fp
 801fd64:	fb0a 9906 	mla	r9, sl, r6, r9
 801fd68:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fd6c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fd70:	f814 b006 	ldrb.w	fp, [r4, r6]
 801fd74:	fb1b fb05 	smulbb	fp, fp, r5
 801fd78:	eb08 0a09 	add.w	sl, r8, r9
 801fd7c:	f818 9009 	ldrb.w	r9, [r8, r9]
 801fd80:	fb09 b90e 	mla	r9, r9, lr, fp
 801fd84:	fa1f f989 	uxth.w	r9, r9
 801fd88:	f109 0b01 	add.w	fp, r9, #1
 801fd8c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fd90:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fd94:	f804 9006 	strb.w	r9, [r4, r6]
 801fd98:	4426      	add	r6, r4
 801fd9a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fd9e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fda2:	fb1b fb05 	smulbb	fp, fp, r5
 801fda6:	fb09 b90e 	mla	r9, r9, lr, fp
 801fdaa:	fa1f f989 	uxth.w	r9, r9
 801fdae:	f109 0b01 	add.w	fp, r9, #1
 801fdb2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fdb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fdba:	f886 9001 	strb.w	r9, [r6, #1]
 801fdbe:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fdc2:	f896 a002 	ldrb.w	sl, [r6, #2]
 801fdc6:	fb1a fa05 	smulbb	sl, sl, r5
 801fdca:	fb09 a90e 	mla	r9, r9, lr, sl
 801fdce:	fa1f f989 	uxth.w	r9, r9
 801fdd2:	f109 0a01 	add.w	sl, r9, #1
 801fdd6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fdda:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fdde:	f886 9002 	strb.w	r9, [r6, #2]
 801fde2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801fde4:	3701      	adds	r7, #1
 801fde6:	4430      	add	r0, r6
 801fde8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801fdea:	4432      	add	r2, r6
 801fdec:	e767      	b.n	801fcbe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801fdee:	b003      	add	sp, #12
 801fdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fdf4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdf8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fdfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fdfe:	9201      	str	r2, [sp, #4]
 801fe00:	6868      	ldr	r0, [r5, #4]
 801fe02:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801fe04:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801fe08:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801fe0c:	fb00 2404 	mla	r4, r0, r4, r2
 801fe10:	682a      	ldr	r2, [r5, #0]
 801fe12:	f8d7 8000 	ldr.w	r8, [r7]
 801fe16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fe1a:	4414      	add	r4, r2
 801fe1c:	2900      	cmp	r1, #0
 801fe1e:	dc03      	bgt.n	801fe28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801fe20:	9a01      	ldr	r2, [sp, #4]
 801fe22:	2a00      	cmp	r2, #0
 801fe24:	f340 80af 	ble.w	801ff86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801fe28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fe2a:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801fe2e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fe32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fe34:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801fe38:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	dd0c      	ble.n	801fe5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fe40:	1405      	asrs	r5, r0, #16
 801fe42:	d405      	bmi.n	801fe50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fe44:	4555      	cmp	r5, sl
 801fe46:	da03      	bge.n	801fe50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fe48:	1415      	asrs	r5, r2, #16
 801fe4a:	d401      	bmi.n	801fe50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fe4c:	454d      	cmp	r5, r9
 801fe4e:	db05      	blt.n	801fe5c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fe50:	4470      	add	r0, lr
 801fe52:	4462      	add	r2, ip
 801fe54:	3b01      	subs	r3, #1
 801fe56:	3403      	adds	r4, #3
 801fe58:	e7f0      	b.n	801fe3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fe5a:	d038      	beq.n	801fece <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fe5c:	1e5d      	subs	r5, r3, #1
 801fe5e:	fb0e 0605 	mla	r6, lr, r5, r0
 801fe62:	1436      	asrs	r6, r6, #16
 801fe64:	d42a      	bmi.n	801febc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801fe66:	4556      	cmp	r6, sl
 801fe68:	da28      	bge.n	801febc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801fe6a:	fb0c 2505 	mla	r5, ip, r5, r2
 801fe6e:	142d      	asrs	r5, r5, #16
 801fe70:	d424      	bmi.n	801febc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801fe72:	454d      	cmp	r5, r9
 801fe74:	da22      	bge.n	801febc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801fe76:	1ce6      	adds	r6, r4, #3
 801fe78:	4699      	mov	r9, r3
 801fe7a:	f1b9 0f00 	cmp.w	r9, #0
 801fe7e:	f106 0603 	add.w	r6, r6, #3
 801fe82:	dd1f      	ble.n	801fec4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801fe84:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801fe88:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801fe8c:	1415      	asrs	r5, r2, #16
 801fe8e:	4470      	add	r0, lr
 801fe90:	4462      	add	r2, ip
 801fe92:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe96:	fb0b a505 	mla	r5, fp, r5, sl
 801fe9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fe9e:	eb08 0a05 	add.w	sl, r8, r5
 801fea2:	f818 5005 	ldrb.w	r5, [r8, r5]
 801fea6:	f806 5c06 	strb.w	r5, [r6, #-6]
 801feaa:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801feae:	f806 5c05 	strb.w	r5, [r6, #-5]
 801feb2:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801feb6:	f806 5c04 	strb.w	r5, [r6, #-4]
 801feba:	e7de      	b.n	801fe7a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801febc:	2600      	movs	r6, #0
 801febe:	1b9d      	subs	r5, r3, r6
 801fec0:	2d00      	cmp	r5, #0
 801fec2:	dc38      	bgt.n	801ff36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801fec4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fec8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fecc:	441c      	add	r4, r3
 801fece:	2900      	cmp	r1, #0
 801fed0:	dd59      	ble.n	801ff86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801fed2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fed6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fed8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fedc:	3901      	subs	r1, #1
 801fede:	eeb0 6a62 	vmov.f32	s12, s5
 801fee2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fee6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801feea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801feee:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801fef2:	eeb0 6a43 	vmov.f32	s12, s6
 801fef6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fefa:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801fefe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff02:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff06:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff16:	ee12 2a90 	vmov	r2, s5
 801ff1a:	eef0 2a47 	vmov.f32	s5, s14
 801ff1e:	fb92 fef3 	sdiv	lr, r2, r3
 801ff22:	ee13 2a10 	vmov	r2, s6
 801ff26:	eeb0 3a67 	vmov.f32	s6, s15
 801ff2a:	fb92 fcf3 	sdiv	ip, r2, r3
 801ff2e:	9a01      	ldr	r2, [sp, #4]
 801ff30:	bf08      	it	eq
 801ff32:	4613      	moveq	r3, r2
 801ff34:	e772      	b.n	801fe1c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ff36:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ff3a:	d420      	bmi.n	801ff7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ff3c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ff40:	45cb      	cmp	fp, r9
 801ff42:	dd1c      	ble.n	801ff7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ff44:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ff48:	d419      	bmi.n	801ff7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ff4a:	68fd      	ldr	r5, [r7, #12]
 801ff4c:	4555      	cmp	r5, sl
 801ff4e:	dd16      	ble.n	801ff7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ff50:	fa0f f58b 	sxth.w	r5, fp
 801ff54:	fb0a 9505 	mla	r5, sl, r5, r9
 801ff58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ff5c:	f818 9005 	ldrb.w	r9, [r8, r5]
 801ff60:	eb08 0b05 	add.w	fp, r8, r5
 801ff64:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801ff68:	f804 9005 	strb.w	r9, [r4, r5]
 801ff6c:	4425      	add	r5, r4
 801ff6e:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ff72:	f885 9001 	strb.w	r9, [r5, #1]
 801ff76:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ff7a:	f885 9002 	strb.w	r9, [r5, #2]
 801ff7e:	4470      	add	r0, lr
 801ff80:	4462      	add	r2, ip
 801ff82:	3601      	adds	r6, #1
 801ff84:	e79b      	b.n	801febe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801ff86:	b003      	add	sp, #12
 801ff88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff8c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff90:	b085      	sub	sp, #20
 801ff92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ff96:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ff98:	9202      	str	r2, [sp, #8]
 801ff9a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801ff9e:	6860      	ldr	r0, [r4, #4]
 801ffa0:	9203      	str	r2, [sp, #12]
 801ffa2:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ffa6:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801ffaa:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801ffae:	fb00 2505 	mla	r5, r0, r5, r2
 801ffb2:	6822      	ldr	r2, [r4, #0]
 801ffb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ffb8:	4415      	add	r5, r2
 801ffba:	f8dc 2000 	ldr.w	r2, [ip]
 801ffbe:	9201      	str	r2, [sp, #4]
 801ffc0:	2900      	cmp	r1, #0
 801ffc2:	dc03      	bgt.n	801ffcc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ffc4:	9a02      	ldr	r2, [sp, #8]
 801ffc6:	2a00      	cmp	r2, #0
 801ffc8:	f340 8122 	ble.w	8020210 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ffcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ffce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ffd2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ffd6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ffd8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ffdc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	dd0d      	ble.n	8020000 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ffe4:	1422      	asrs	r2, r4, #16
 801ffe6:	d405      	bmi.n	801fff4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ffe8:	4542      	cmp	r2, r8
 801ffea:	da03      	bge.n	801fff4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ffec:	1402      	asrs	r2, r0, #16
 801ffee:	d401      	bmi.n	801fff4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fff0:	42ba      	cmp	r2, r7
 801fff2:	db06      	blt.n	8020002 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fff4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fff6:	4474      	add	r4, lr
 801fff8:	3b01      	subs	r3, #1
 801fffa:	3503      	adds	r5, #3
 801fffc:	4410      	add	r0, r2
 801fffe:	e7ef      	b.n	801ffe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020000:	d072      	beq.n	80200e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020002:	1e5a      	subs	r2, r3, #1
 8020004:	fb0e 4602 	mla	r6, lr, r2, r4
 8020008:	1436      	asrs	r6, r6, #16
 802000a:	d462      	bmi.n	80200d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802000c:	4546      	cmp	r6, r8
 802000e:	da60      	bge.n	80200d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020010:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8020012:	fb06 0202 	mla	r2, r6, r2, r0
 8020016:	1412      	asrs	r2, r2, #16
 8020018:	d45b      	bmi.n	80200d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802001a:	42ba      	cmp	r2, r7
 802001c:	da59      	bge.n	80200d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802001e:	1cef      	adds	r7, r5, #3
 8020020:	4699      	mov	r9, r3
 8020022:	f1b9 0f00 	cmp.w	r9, #0
 8020026:	dd5a      	ble.n	80200de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020028:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802002c:	1426      	asrs	r6, r4, #16
 802002e:	1402      	asrs	r2, r0, #16
 8020030:	fb08 6202 	mla	r2, r8, r2, r6
 8020034:	9e01      	ldr	r6, [sp, #4]
 8020036:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 802003a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 802003e:	d041      	beq.n	80200c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020040:	9a03      	ldr	r2, [sp, #12]
 8020042:	fa5f fb86 	uxtb.w	fp, r6
 8020046:	fb02 f808 	mul.w	r8, r2, r8
 802004a:	f108 0201 	add.w	r2, r8, #1
 802004e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8020052:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8020056:	1212      	asrs	r2, r2, #8
 8020058:	fa1f fa82 	uxth.w	sl, r2
 802005c:	43d2      	mvns	r2, r2
 802005e:	fb1b fb0a 	smulbb	fp, fp, sl
 8020062:	b2d2      	uxtb	r2, r2
 8020064:	fb08 b802 	mla	r8, r8, r2, fp
 8020068:	fa1f f888 	uxth.w	r8, r8
 802006c:	f108 0b01 	add.w	fp, r8, #1
 8020070:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020074:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8020078:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802007c:	fb1b fb0a 	smulbb	fp, fp, sl
 8020080:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020084:	fb16 fa0a 	smulbb	sl, r6, sl
 8020088:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 802008c:	f807 8c03 	strb.w	r8, [r7, #-3]
 8020090:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8020094:	fb06 aa02 	mla	sl, r6, r2, sl
 8020098:	fb08 b802 	mla	r8, r8, r2, fp
 802009c:	fa1f fa8a 	uxth.w	sl, sl
 80200a0:	fa1f f888 	uxth.w	r8, r8
 80200a4:	f10a 0601 	add.w	r6, sl, #1
 80200a8:	f108 0b01 	add.w	fp, r8, #1
 80200ac:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80200b0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80200b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80200b8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80200bc:	f807 ac01 	strb.w	sl, [r7, #-1]
 80200c0:	f807 8c02 	strb.w	r8, [r7, #-2]
 80200c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80200c6:	4474      	add	r4, lr
 80200c8:	3703      	adds	r7, #3
 80200ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80200ce:	4410      	add	r0, r2
 80200d0:	e7a7      	b.n	8020022 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80200d2:	f04f 0800 	mov.w	r8, #0
 80200d6:	eba3 0208 	sub.w	r2, r3, r8
 80200da:	2a00      	cmp	r2, #0
 80200dc:	dc3b      	bgt.n	8020156 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80200de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200e6:	441d      	add	r5, r3
 80200e8:	2900      	cmp	r1, #0
 80200ea:	f340 8091 	ble.w	8020210 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80200ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80200f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80200f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80200f8:	3901      	subs	r1, #1
 80200fa:	eeb0 6a62 	vmov.f32	s12, s5
 80200fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020102:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020106:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802010a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802010e:	eeb0 6a43 	vmov.f32	s12, s6
 8020112:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020116:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 802011a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802011e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020122:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020126:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802012a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802012e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020132:	ee12 2a90 	vmov	r2, s5
 8020136:	eef0 2a47 	vmov.f32	s5, s14
 802013a:	fb92 fef3 	sdiv	lr, r2, r3
 802013e:	ee13 2a10 	vmov	r2, s6
 8020142:	eeb0 3a67 	vmov.f32	s6, s15
 8020146:	fb92 f3f3 	sdiv	r3, r2, r3
 802014a:	9a02      	ldr	r2, [sp, #8]
 802014c:	9312      	str	r3, [sp, #72]	@ 0x48
 802014e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020150:	bf08      	it	eq
 8020152:	4613      	moveq	r3, r2
 8020154:	e734      	b.n	801ffc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020156:	1427      	asrs	r7, r4, #16
 8020158:	d454      	bmi.n	8020204 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802015a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 802015e:	42be      	cmp	r6, r7
 8020160:	dd50      	ble.n	8020204 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020162:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020166:	d44d      	bmi.n	8020204 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020168:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802016c:	454a      	cmp	r2, r9
 802016e:	dd49      	ble.n	8020204 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020170:	b236      	sxth	r6, r6
 8020172:	9a01      	ldr	r2, [sp, #4]
 8020174:	fb09 7606 	mla	r6, r9, r6, r7
 8020178:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 802017c:	0e3a      	lsrs	r2, r7, #24
 802017e:	d041      	beq.n	8020204 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020180:	9e03      	ldr	r6, [sp, #12]
 8020182:	fa5f fb87 	uxtb.w	fp, r7
 8020186:	4372      	muls	r2, r6
 8020188:	1c56      	adds	r6, r2, #1
 802018a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802018e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8020192:	1212      	asrs	r2, r2, #8
 8020194:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020198:	fa1f fa82 	uxth.w	sl, r2
 802019c:	43d2      	mvns	r2, r2
 802019e:	fb1b fb0a 	smulbb	fp, fp, sl
 80201a2:	b2d2      	uxtb	r2, r2
 80201a4:	fb09 b902 	mla	r9, r9, r2, fp
 80201a8:	fa1f f989 	uxth.w	r9, r9
 80201ac:	f109 0b01 	add.w	fp, r9, #1
 80201b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80201b4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80201b8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80201bc:	fb1b fb0a 	smulbb	fp, fp, sl
 80201c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80201c4:	fb17 fa0a 	smulbb	sl, r7, sl
 80201c8:	f805 9006 	strb.w	r9, [r5, r6]
 80201cc:	442e      	add	r6, r5
 80201ce:	78b7      	ldrb	r7, [r6, #2]
 80201d0:	f896 9001 	ldrb.w	r9, [r6, #1]
 80201d4:	fb07 aa02 	mla	sl, r7, r2, sl
 80201d8:	fb09 b902 	mla	r9, r9, r2, fp
 80201dc:	fa1f fa8a 	uxth.w	sl, sl
 80201e0:	fa1f f989 	uxth.w	r9, r9
 80201e4:	f10a 0701 	add.w	r7, sl, #1
 80201e8:	f109 0b01 	add.w	fp, r9, #1
 80201ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80201f0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80201f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80201f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80201fc:	f886 a002 	strb.w	sl, [r6, #2]
 8020200:	f886 9001 	strb.w	r9, [r6, #1]
 8020204:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020206:	4474      	add	r4, lr
 8020208:	f108 0801 	add.w	r8, r8, #1
 802020c:	4410      	add	r0, r2
 802020e:	e762      	b.n	80200d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020210:	b005      	add	sp, #20
 8020212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020216 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802021a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802021c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020220:	9201      	str	r2, [sp, #4]
 8020222:	6860      	ldr	r0, [r4, #4]
 8020224:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8020228:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 802022c:	fb00 2505 	mla	r5, r0, r5, r2
 8020230:	6822      	ldr	r2, [r4, #0]
 8020232:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020236:	4415      	add	r5, r2
 8020238:	f8dc 2000 	ldr.w	r2, [ip]
 802023c:	9200      	str	r2, [sp, #0]
 802023e:	2900      	cmp	r1, #0
 8020240:	dc03      	bgt.n	802024a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020242:	9a01      	ldr	r2, [sp, #4]
 8020244:	2a00      	cmp	r2, #0
 8020246:	f340 812b 	ble.w	80204a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802024a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802024c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020250:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8020254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020256:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802025a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802025e:	2b00      	cmp	r3, #0
 8020260:	dd0e      	ble.n	8020280 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020262:	1422      	asrs	r2, r4, #16
 8020264:	d405      	bmi.n	8020272 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020266:	4572      	cmp	r2, lr
 8020268:	da03      	bge.n	8020272 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802026a:	1402      	asrs	r2, r0, #16
 802026c:	d401      	bmi.n	8020272 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802026e:	42ba      	cmp	r2, r7
 8020270:	db07      	blt.n	8020282 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020272:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020274:	3b01      	subs	r3, #1
 8020276:	3503      	adds	r5, #3
 8020278:	4414      	add	r4, r2
 802027a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802027c:	4410      	add	r0, r2
 802027e:	e7ee      	b.n	802025e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020280:	d06f      	beq.n	8020362 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020282:	1e5a      	subs	r2, r3, #1
 8020284:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8020286:	fb06 4602 	mla	r6, r6, r2, r4
 802028a:	1436      	asrs	r6, r6, #16
 802028c:	d45e      	bmi.n	802034c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802028e:	4576      	cmp	r6, lr
 8020290:	da5c      	bge.n	802034c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020292:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8020294:	fb06 0202 	mla	r2, r6, r2, r0
 8020298:	1412      	asrs	r2, r2, #16
 802029a:	d457      	bmi.n	802034c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802029c:	42ba      	cmp	r2, r7
 802029e:	da55      	bge.n	802034c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80202a0:	1cee      	adds	r6, r5, #3
 80202a2:	469a      	mov	sl, r3
 80202a4:	f1ba 0f00 	cmp.w	sl, #0
 80202a8:	dd56      	ble.n	8020358 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80202aa:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80202ae:	1427      	asrs	r7, r4, #16
 80202b0:	1402      	asrs	r2, r0, #16
 80202b2:	fb0e 7202 	mla	r2, lr, r2, r7
 80202b6:	9f00      	ldr	r7, [sp, #0]
 80202b8:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80202bc:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80202c0:	d03c      	beq.n	802033c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80202c2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80202c6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80202ca:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80202ce:	fa5f f28e 	uxtb.w	r2, lr
 80202d2:	b2ff      	uxtb	r7, r7
 80202d4:	f000 80dd 	beq.w	8020492 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80202d8:	fa1f f882 	uxth.w	r8, r2
 80202dc:	43d2      	mvns	r2, r2
 80202de:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80202e2:	fb17 f708 	smulbb	r7, r7, r8
 80202e6:	b2d2      	uxtb	r2, r2
 80202e8:	fb19 f908 	smulbb	r9, r9, r8
 80202ec:	fb0e 7702 	mla	r7, lr, r2, r7
 80202f0:	fb1b f808 	smulbb	r8, fp, r8
 80202f4:	b2bf      	uxth	r7, r7
 80202f6:	f107 0e01 	add.w	lr, r7, #1
 80202fa:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80202fe:	123f      	asrs	r7, r7, #8
 8020300:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020304:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8020308:	fb07 9902 	mla	r9, r7, r2, r9
 802030c:	fa1f f989 	uxth.w	r9, r9
 8020310:	f109 0701 	add.w	r7, r9, #1
 8020314:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020318:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 802031c:	fb07 8802 	mla	r8, r7, r2, r8
 8020320:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020324:	fa1f f888 	uxth.w	r8, r8
 8020328:	f806 9c02 	strb.w	r9, [r6, #-2]
 802032c:	f108 0201 	add.w	r2, r8, #1
 8020330:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020334:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020338:	f806 8c01 	strb.w	r8, [r6, #-1]
 802033c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802033e:	3603      	adds	r6, #3
 8020340:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020344:	4414      	add	r4, r2
 8020346:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020348:	4410      	add	r0, r2
 802034a:	e7ab      	b.n	80202a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802034c:	f04f 0e00 	mov.w	lr, #0
 8020350:	eba3 020e 	sub.w	r2, r3, lr
 8020354:	2a00      	cmp	r2, #0
 8020356:	dc3d      	bgt.n	80203d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020358:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802035c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020360:	441d      	add	r5, r3
 8020362:	2900      	cmp	r1, #0
 8020364:	f340 809c 	ble.w	80204a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020368:	ee30 0a04 	vadd.f32	s0, s0, s8
 802036c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802036e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020372:	3901      	subs	r1, #1
 8020374:	eeb0 6a62 	vmov.f32	s12, s5
 8020378:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802037c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020380:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020384:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8020388:	eeb0 6a43 	vmov.f32	s12, s6
 802038c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020390:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8020394:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020398:	ee61 7a27 	vmul.f32	s15, s2, s15
 802039c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203ac:	ee12 2a90 	vmov	r2, s5
 80203b0:	eef0 2a47 	vmov.f32	s5, s14
 80203b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80203b8:	ee13 2a10 	vmov	r2, s6
 80203bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80203be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203c0:	eeb0 3a67 	vmov.f32	s6, s15
 80203c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80203c8:	9a01      	ldr	r2, [sp, #4]
 80203ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80203cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203ce:	bf08      	it	eq
 80203d0:	4613      	moveq	r3, r2
 80203d2:	e734      	b.n	802023e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80203d4:	1427      	asrs	r7, r4, #16
 80203d6:	d44d      	bmi.n	8020474 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80203d8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80203dc:	42be      	cmp	r6, r7
 80203de:	dd49      	ble.n	8020474 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80203e0:	ea5f 4820 	movs.w	r8, r0, asr #16
 80203e4:	d446      	bmi.n	8020474 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80203e6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80203ea:	4542      	cmp	r2, r8
 80203ec:	dd42      	ble.n	8020474 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80203ee:	b236      	sxth	r6, r6
 80203f0:	9a00      	ldr	r2, [sp, #0]
 80203f2:	fb08 7606 	mla	r6, r8, r6, r7
 80203f6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80203fa:	0e3a      	lsrs	r2, r7, #24
 80203fc:	d03a      	beq.n	8020474 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80203fe:	2aff      	cmp	r2, #255	@ 0xff
 8020400:	b2d6      	uxtb	r6, r2
 8020402:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020406:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 802040a:	ea4f 024e 	mov.w	r2, lr, lsl #1
 802040e:	b2ff      	uxtb	r7, r7
 8020410:	d037      	beq.n	8020482 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020412:	fa1f f986 	uxth.w	r9, r6
 8020416:	4472      	add	r2, lr
 8020418:	43f6      	mvns	r6, r6
 802041a:	f815 8002 	ldrb.w	r8, [r5, r2]
 802041e:	fb17 f709 	smulbb	r7, r7, r9
 8020422:	fb1a fa09 	smulbb	sl, sl, r9
 8020426:	b2f6      	uxtb	r6, r6
 8020428:	fb1b f909 	smulbb	r9, fp, r9
 802042c:	fb08 7706 	mla	r7, r8, r6, r7
 8020430:	b2bf      	uxth	r7, r7
 8020432:	f107 0801 	add.w	r8, r7, #1
 8020436:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 802043a:	123f      	asrs	r7, r7, #8
 802043c:	54af      	strb	r7, [r5, r2]
 802043e:	442a      	add	r2, r5
 8020440:	7857      	ldrb	r7, [r2, #1]
 8020442:	fb07 aa06 	mla	sl, r7, r6, sl
 8020446:	fa1f fa8a 	uxth.w	sl, sl
 802044a:	f10a 0701 	add.w	r7, sl, #1
 802044e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020452:	7897      	ldrb	r7, [r2, #2]
 8020454:	fb07 9906 	mla	r9, r7, r6, r9
 8020458:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802045c:	fa1f f989 	uxth.w	r9, r9
 8020460:	f882 a001 	strb.w	sl, [r2, #1]
 8020464:	f109 0601 	add.w	r6, r9, #1
 8020468:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802046c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020470:	f882 9002 	strb.w	r9, [r2, #2]
 8020474:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020476:	f10e 0e01 	add.w	lr, lr, #1
 802047a:	4414      	add	r4, r2
 802047c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802047e:	4410      	add	r0, r2
 8020480:	e766      	b.n	8020350 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020482:	4472      	add	r2, lr
 8020484:	54af      	strb	r7, [r5, r2]
 8020486:	442a      	add	r2, r5
 8020488:	f882 a001 	strb.w	sl, [r2, #1]
 802048c:	f882 b002 	strb.w	fp, [r2, #2]
 8020490:	e7f0      	b.n	8020474 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020492:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020496:	f806 9c02 	strb.w	r9, [r6, #-2]
 802049a:	f806 bc01 	strb.w	fp, [r6, #-1]
 802049e:	e74d      	b.n	802033c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80204a0:	b003      	add	sp, #12
 80204a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080204a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80204a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204ac:	b087      	sub	sp, #28
 80204ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80204b2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80204b4:	9204      	str	r2, [sp, #16]
 80204b6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80204ba:	6860      	ldr	r0, [r4, #4]
 80204bc:	9205      	str	r2, [sp, #20]
 80204be:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 80204c2:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80204c6:	9101      	str	r1, [sp, #4]
 80204c8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 80204cc:	fb00 2505 	mla	r5, r0, r5, r2
 80204d0:	6822      	ldr	r2, [r4, #0]
 80204d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80204d6:	4415      	add	r5, r2
 80204d8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80204dc:	3201      	adds	r2, #1
 80204de:	f022 0201 	bic.w	r2, r2, #1
 80204e2:	9202      	str	r2, [sp, #8]
 80204e4:	f8dc 2000 	ldr.w	r2, [ip]
 80204e8:	9203      	str	r2, [sp, #12]
 80204ea:	9a01      	ldr	r2, [sp, #4]
 80204ec:	2a00      	cmp	r2, #0
 80204ee:	dc03      	bgt.n	80204f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80204f0:	9a04      	ldr	r2, [sp, #16]
 80204f2:	2a00      	cmp	r2, #0
 80204f4:	f340 8135 	ble.w	8020762 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80204f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80204fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80204fe:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8020502:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020504:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020508:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802050c:	2b00      	cmp	r3, #0
 802050e:	dd0d      	ble.n	802052c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020510:	1422      	asrs	r2, r4, #16
 8020512:	d405      	bmi.n	8020520 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020514:	4542      	cmp	r2, r8
 8020516:	da03      	bge.n	8020520 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020518:	1402      	asrs	r2, r0, #16
 802051a:	d401      	bmi.n	8020520 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802051c:	42ba      	cmp	r2, r7
 802051e:	db06      	blt.n	802052e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020520:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020522:	4474      	add	r4, lr
 8020524:	3b01      	subs	r3, #1
 8020526:	3503      	adds	r5, #3
 8020528:	4410      	add	r0, r2
 802052a:	e7ef      	b.n	802050c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802052c:	d077      	beq.n	802061e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802052e:	1e5a      	subs	r2, r3, #1
 8020530:	fb0e 4602 	mla	r6, lr, r2, r4
 8020534:	1436      	asrs	r6, r6, #16
 8020536:	d469      	bmi.n	802060c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020538:	4546      	cmp	r6, r8
 802053a:	da67      	bge.n	802060c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802053c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802053e:	fb06 0202 	mla	r2, r6, r2, r0
 8020542:	1412      	asrs	r2, r2, #16
 8020544:	d462      	bmi.n	802060c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020546:	42ba      	cmp	r2, r7
 8020548:	da60      	bge.n	802060c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802054a:	1cee      	adds	r6, r5, #3
 802054c:	4699      	mov	r9, r3
 802054e:	f1b9 0f00 	cmp.w	r9, #0
 8020552:	dd5f      	ble.n	8020614 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020554:	1422      	asrs	r2, r4, #16
 8020556:	9902      	ldr	r1, [sp, #8]
 8020558:	1407      	asrs	r7, r0, #16
 802055a:	fb01 2707 	mla	r7, r1, r7, r2
 802055e:	9903      	ldr	r1, [sp, #12]
 8020560:	087a      	lsrs	r2, r7, #1
 8020562:	5c8a      	ldrb	r2, [r1, r2]
 8020564:	07f9      	lsls	r1, r7, #31
 8020566:	bf54      	ite	pl
 8020568:	f002 020f 	andpl.w	r2, r2, #15
 802056c:	1112      	asrmi	r2, r2, #4
 802056e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020572:	b2d2      	uxtb	r2, r2
 8020574:	2a00      	cmp	r2, #0
 8020576:	d042      	beq.n	80205fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020578:	497b      	ldr	r1, [pc, #492]	@ (8020768 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 802057a:	680f      	ldr	r7, [r1, #0]
 802057c:	9905      	ldr	r1, [sp, #20]
 802057e:	fa5f fb87 	uxtb.w	fp, r7
 8020582:	434a      	muls	r2, r1
 8020584:	f102 0801 	add.w	r8, r2, #1
 8020588:	eb08 2222 	add.w	r2, r8, r2, asr #8
 802058c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8020590:	1212      	asrs	r2, r2, #8
 8020592:	fa1f fa82 	uxth.w	sl, r2
 8020596:	43d2      	mvns	r2, r2
 8020598:	fb1b fb0a 	smulbb	fp, fp, sl
 802059c:	b2d2      	uxtb	r2, r2
 802059e:	fb08 b802 	mla	r8, r8, r2, fp
 80205a2:	fa1f f888 	uxth.w	r8, r8
 80205a6:	f108 0b01 	add.w	fp, r8, #1
 80205aa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80205ae:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80205b2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80205b6:	fb1b fb0a 	smulbb	fp, fp, sl
 80205ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80205be:	fb17 fa0a 	smulbb	sl, r7, sl
 80205c2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80205c6:	f806 8c03 	strb.w	r8, [r6, #-3]
 80205ca:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80205ce:	fb07 aa02 	mla	sl, r7, r2, sl
 80205d2:	fb08 b802 	mla	r8, r8, r2, fp
 80205d6:	fa1f fa8a 	uxth.w	sl, sl
 80205da:	fa1f f888 	uxth.w	r8, r8
 80205de:	f10a 0701 	add.w	r7, sl, #1
 80205e2:	f108 0b01 	add.w	fp, r8, #1
 80205e6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80205ea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80205ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80205f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80205f6:	f806 ac01 	strb.w	sl, [r6, #-1]
 80205fa:	f806 8c02 	strb.w	r8, [r6, #-2]
 80205fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020600:	4474      	add	r4, lr
 8020602:	3603      	adds	r6, #3
 8020604:	f109 39ff 	add.w	r9, r9, #4294967295
 8020608:	4410      	add	r0, r2
 802060a:	e7a0      	b.n	802054e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802060c:	2700      	movs	r7, #0
 802060e:	1bda      	subs	r2, r3, r7
 8020610:	2a00      	cmp	r2, #0
 8020612:	dc3e      	bgt.n	8020692 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020614:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020618:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802061c:	441d      	add	r5, r3
 802061e:	9b01      	ldr	r3, [sp, #4]
 8020620:	2b00      	cmp	r3, #0
 8020622:	f340 809e 	ble.w	8020762 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020626:	ee30 0a04 	vadd.f32	s0, s0, s8
 802062a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802062c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020630:	eeb0 6a62 	vmov.f32	s12, s5
 8020634:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020638:	ee31 1a05 	vadd.f32	s2, s2, s10
 802063c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020640:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020644:	eeb0 6a43 	vmov.f32	s12, s6
 8020648:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802064c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020650:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020654:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020658:	ee77 2a62 	vsub.f32	s5, s14, s5
 802065c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020660:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020664:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020668:	ee12 2a90 	vmov	r2, s5
 802066c:	eef0 2a47 	vmov.f32	s5, s14
 8020670:	fb92 fef3 	sdiv	lr, r2, r3
 8020674:	ee13 2a10 	vmov	r2, s6
 8020678:	eeb0 3a67 	vmov.f32	s6, s15
 802067c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020680:	9314      	str	r3, [sp, #80]	@ 0x50
 8020682:	9b01      	ldr	r3, [sp, #4]
 8020684:	9a04      	ldr	r2, [sp, #16]
 8020686:	3b01      	subs	r3, #1
 8020688:	9301      	str	r3, [sp, #4]
 802068a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802068c:	bf08      	it	eq
 802068e:	4613      	moveq	r3, r2
 8020690:	e72b      	b.n	80204ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8020692:	1426      	asrs	r6, r4, #16
 8020694:	d460      	bmi.n	8020758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020696:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802069a:	42b2      	cmp	r2, r6
 802069c:	dd5c      	ble.n	8020758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802069e:	ea5f 4820 	movs.w	r8, r0, asr #16
 80206a2:	d459      	bmi.n	8020758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80206a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80206a8:	4542      	cmp	r2, r8
 80206aa:	dd55      	ble.n	8020758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80206ac:	9a02      	ldr	r2, [sp, #8]
 80206ae:	9903      	ldr	r1, [sp, #12]
 80206b0:	fb08 6602 	mla	r6, r8, r2, r6
 80206b4:	0872      	lsrs	r2, r6, #1
 80206b6:	07f6      	lsls	r6, r6, #31
 80206b8:	5c8a      	ldrb	r2, [r1, r2]
 80206ba:	bf54      	ite	pl
 80206bc:	f002 020f 	andpl.w	r2, r2, #15
 80206c0:	1112      	asrmi	r2, r2, #4
 80206c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80206c6:	b2d2      	uxtb	r2, r2
 80206c8:	2a00      	cmp	r2, #0
 80206ca:	d045      	beq.n	8020758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80206cc:	4926      	ldr	r1, [pc, #152]	@ (8020768 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80206ce:	f8d1 8000 	ldr.w	r8, [r1]
 80206d2:	9905      	ldr	r1, [sp, #20]
 80206d4:	fa5f fb88 	uxtb.w	fp, r8
 80206d8:	434a      	muls	r2, r1
 80206da:	1c56      	adds	r6, r2, #1
 80206dc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80206e0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80206e4:	1212      	asrs	r2, r2, #8
 80206e6:	f815 9006 	ldrb.w	r9, [r5, r6]
 80206ea:	fa1f fa82 	uxth.w	sl, r2
 80206ee:	43d2      	mvns	r2, r2
 80206f0:	fb1b fb0a 	smulbb	fp, fp, sl
 80206f4:	b2d2      	uxtb	r2, r2
 80206f6:	fb09 b902 	mla	r9, r9, r2, fp
 80206fa:	fa1f f989 	uxth.w	r9, r9
 80206fe:	f109 0b01 	add.w	fp, r9, #1
 8020702:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020706:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 802070a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 802070e:	fb1b fb0a 	smulbb	fp, fp, sl
 8020712:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020716:	fb18 fa0a 	smulbb	sl, r8, sl
 802071a:	f805 9006 	strb.w	r9, [r5, r6]
 802071e:	442e      	add	r6, r5
 8020720:	f896 8002 	ldrb.w	r8, [r6, #2]
 8020724:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020728:	fb08 aa02 	mla	sl, r8, r2, sl
 802072c:	fb09 b902 	mla	r9, r9, r2, fp
 8020730:	fa1f fa8a 	uxth.w	sl, sl
 8020734:	fa1f f989 	uxth.w	r9, r9
 8020738:	f10a 0801 	add.w	r8, sl, #1
 802073c:	f109 0b01 	add.w	fp, r9, #1
 8020740:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8020744:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020748:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802074c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020750:	f886 a002 	strb.w	sl, [r6, #2]
 8020754:	f886 9001 	strb.w	r9, [r6, #1]
 8020758:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802075a:	4474      	add	r4, lr
 802075c:	3701      	adds	r7, #1
 802075e:	4410      	add	r0, r2
 8020760:	e755      	b.n	802060e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8020762:	b007      	add	sp, #28
 8020764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020768:	24028780 	.word	0x24028780

0802076c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020770:	b085      	sub	sp, #20
 8020772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020776:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020778:	9203      	str	r2, [sp, #12]
 802077a:	6860      	ldr	r0, [r4, #4]
 802077c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8020780:	9100      	str	r1, [sp, #0]
 8020782:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8020786:	fb00 2606 	mla	r6, r0, r6, r2
 802078a:	6822      	ldr	r2, [r4, #0]
 802078c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020790:	4416      	add	r6, r2
 8020792:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020796:	3201      	adds	r2, #1
 8020798:	f022 0201 	bic.w	r2, r2, #1
 802079c:	9201      	str	r2, [sp, #4]
 802079e:	f8dc 2000 	ldr.w	r2, [ip]
 80207a2:	9202      	str	r2, [sp, #8]
 80207a4:	9a00      	ldr	r2, [sp, #0]
 80207a6:	2a00      	cmp	r2, #0
 80207a8:	dc03      	bgt.n	80207b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80207aa:	9a03      	ldr	r2, [sp, #12]
 80207ac:	2a00      	cmp	r2, #0
 80207ae:	f340 8140 	ble.w	8020a32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80207b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80207b4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80207b8:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 80207bc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80207be:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80207c2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	dd0e      	ble.n	80207e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80207ca:	142a      	asrs	r2, r5, #16
 80207cc:	d405      	bmi.n	80207da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80207ce:	4572      	cmp	r2, lr
 80207d0:	da03      	bge.n	80207da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80207d2:	1422      	asrs	r2, r4, #16
 80207d4:	d401      	bmi.n	80207da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80207d6:	42ba      	cmp	r2, r7
 80207d8:	db07      	blt.n	80207ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80207da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80207dc:	3b01      	subs	r3, #1
 80207de:	3603      	adds	r6, #3
 80207e0:	4415      	add	r5, r2
 80207e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80207e4:	4414      	add	r4, r2
 80207e6:	e7ee      	b.n	80207c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80207e8:	d072      	beq.n	80208d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80207ea:	1e5a      	subs	r2, r3, #1
 80207ec:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80207ee:	fb00 5002 	mla	r0, r0, r2, r5
 80207f2:	1400      	asrs	r0, r0, #16
 80207f4:	d463      	bmi.n	80208be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80207f6:	4570      	cmp	r0, lr
 80207f8:	da61      	bge.n	80208be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80207fa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207fc:	fb00 4202 	mla	r2, r0, r2, r4
 8020800:	1412      	asrs	r2, r2, #16
 8020802:	d45c      	bmi.n	80208be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020804:	42ba      	cmp	r2, r7
 8020806:	da5a      	bge.n	80208be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020808:	1cf0      	adds	r0, r6, #3
 802080a:	469a      	mov	sl, r3
 802080c:	f1ba 0f00 	cmp.w	sl, #0
 8020810:	dd59      	ble.n	80208c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8020812:	142a      	asrs	r2, r5, #16
 8020814:	9901      	ldr	r1, [sp, #4]
 8020816:	1427      	asrs	r7, r4, #16
 8020818:	fb01 2707 	mla	r7, r1, r7, r2
 802081c:	9902      	ldr	r1, [sp, #8]
 802081e:	087a      	lsrs	r2, r7, #1
 8020820:	5c8a      	ldrb	r2, [r1, r2]
 8020822:	07f9      	lsls	r1, r7, #31
 8020824:	bf54      	ite	pl
 8020826:	f002 020f 	andpl.w	r2, r2, #15
 802082a:	1112      	asrmi	r2, r2, #4
 802082c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020830:	b2d2      	uxtb	r2, r2
 8020832:	2a00      	cmp	r2, #0
 8020834:	d03b      	beq.n	80208ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020836:	4980      	ldr	r1, [pc, #512]	@ (8020a38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8020838:	2aff      	cmp	r2, #255	@ 0xff
 802083a:	680f      	ldr	r7, [r1, #0]
 802083c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020840:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020844:	b2ff      	uxtb	r7, r7
 8020846:	f000 80ed 	beq.w	8020a24 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 802084a:	fa1f f882 	uxth.w	r8, r2
 802084e:	43d2      	mvns	r2, r2
 8020850:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8020854:	fb17 f708 	smulbb	r7, r7, r8
 8020858:	b2d2      	uxtb	r2, r2
 802085a:	fb19 f908 	smulbb	r9, r9, r8
 802085e:	fb0e 7702 	mla	r7, lr, r2, r7
 8020862:	fb1b f808 	smulbb	r8, fp, r8
 8020866:	b2bf      	uxth	r7, r7
 8020868:	f107 0e01 	add.w	lr, r7, #1
 802086c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020870:	123f      	asrs	r7, r7, #8
 8020872:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020876:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 802087a:	fb07 9902 	mla	r9, r7, r2, r9
 802087e:	fa1f f989 	uxth.w	r9, r9
 8020882:	f109 0701 	add.w	r7, r9, #1
 8020886:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802088a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 802088e:	fb07 8802 	mla	r8, r7, r2, r8
 8020892:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020896:	fa1f f888 	uxth.w	r8, r8
 802089a:	f800 9c02 	strb.w	r9, [r0, #-2]
 802089e:	f108 0201 	add.w	r2, r8, #1
 80208a2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80208a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80208aa:	f800 8c01 	strb.w	r8, [r0, #-1]
 80208ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80208b0:	3003      	adds	r0, #3
 80208b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80208b6:	4415      	add	r5, r2
 80208b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80208ba:	4414      	add	r4, r2
 80208bc:	e7a6      	b.n	802080c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80208be:	2700      	movs	r7, #0
 80208c0:	1bda      	subs	r2, r3, r7
 80208c2:	2a00      	cmp	r2, #0
 80208c4:	dc40      	bgt.n	8020948 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80208c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80208ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208ce:	441e      	add	r6, r3
 80208d0:	9b00      	ldr	r3, [sp, #0]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	f340 80ad 	ble.w	8020a32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80208d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208e2:	eeb0 6a62 	vmov.f32	s12, s5
 80208e6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80208ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80208ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80208f2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80208f6:	eeb0 6a43 	vmov.f32	s12, s6
 80208fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80208fe:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020902:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020906:	ee61 7a27 	vmul.f32	s15, s2, s15
 802090a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802090e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020912:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020916:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802091a:	ee12 2a90 	vmov	r2, s5
 802091e:	eef0 2a47 	vmov.f32	s5, s14
 8020922:	fb92 f3f3 	sdiv	r3, r2, r3
 8020926:	ee13 2a10 	vmov	r2, s6
 802092a:	9311      	str	r3, [sp, #68]	@ 0x44
 802092c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802092e:	eeb0 3a67 	vmov.f32	s6, s15
 8020932:	fb92 f3f3 	sdiv	r3, r2, r3
 8020936:	9312      	str	r3, [sp, #72]	@ 0x48
 8020938:	9b00      	ldr	r3, [sp, #0]
 802093a:	9a03      	ldr	r2, [sp, #12]
 802093c:	3b01      	subs	r3, #1
 802093e:	9300      	str	r3, [sp, #0]
 8020940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020942:	bf08      	it	eq
 8020944:	4613      	moveq	r3, r2
 8020946:	e72d      	b.n	80207a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020948:	1428      	asrs	r0, r5, #16
 802094a:	d45c      	bmi.n	8020a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802094c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020950:	4282      	cmp	r2, r0
 8020952:	dd58      	ble.n	8020a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020954:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020958:	d455      	bmi.n	8020a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802095a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802095e:	4572      	cmp	r2, lr
 8020960:	dd51      	ble.n	8020a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020962:	9a01      	ldr	r2, [sp, #4]
 8020964:	9902      	ldr	r1, [sp, #8]
 8020966:	fb0e 0002 	mla	r0, lr, r2, r0
 802096a:	0842      	lsrs	r2, r0, #1
 802096c:	07c0      	lsls	r0, r0, #31
 802096e:	5c8a      	ldrb	r2, [r1, r2]
 8020970:	bf54      	ite	pl
 8020972:	f002 020f 	andpl.w	r2, r2, #15
 8020976:	1112      	asrmi	r2, r2, #4
 8020978:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802097c:	b2d2      	uxtb	r2, r2
 802097e:	2a00      	cmp	r2, #0
 8020980:	d041      	beq.n	8020a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020982:	492d      	ldr	r1, [pc, #180]	@ (8020a38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8020984:	2aff      	cmp	r2, #255	@ 0xff
 8020986:	6808      	ldr	r0, [r1, #0]
 8020988:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 802098c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020990:	fa5f fe80 	uxtb.w	lr, r0
 8020994:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8020998:	d03b      	beq.n	8020a12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802099a:	fa1f f982 	uxth.w	r9, r2
 802099e:	4438      	add	r0, r7
 80209a0:	43d2      	mvns	r2, r2
 80209a2:	f816 8000 	ldrb.w	r8, [r6, r0]
 80209a6:	fb1e fe09 	smulbb	lr, lr, r9
 80209aa:	fb1a fa09 	smulbb	sl, sl, r9
 80209ae:	b2d2      	uxtb	r2, r2
 80209b0:	fb1b f909 	smulbb	r9, fp, r9
 80209b4:	fb08 ee02 	mla	lr, r8, r2, lr
 80209b8:	fa1f fe8e 	uxth.w	lr, lr
 80209bc:	f10e 0801 	add.w	r8, lr, #1
 80209c0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80209c4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80209c8:	f806 e000 	strb.w	lr, [r6, r0]
 80209cc:	4430      	add	r0, r6
 80209ce:	f890 e001 	ldrb.w	lr, [r0, #1]
 80209d2:	fb0e aa02 	mla	sl, lr, r2, sl
 80209d6:	fa1f fa8a 	uxth.w	sl, sl
 80209da:	f10a 0e01 	add.w	lr, sl, #1
 80209de:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80209e2:	f890 e002 	ldrb.w	lr, [r0, #2]
 80209e6:	fb0e 9902 	mla	r9, lr, r2, r9
 80209ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80209ee:	fa1f f989 	uxth.w	r9, r9
 80209f2:	f880 a001 	strb.w	sl, [r0, #1]
 80209f6:	f109 0201 	add.w	r2, r9, #1
 80209fa:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80209fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a02:	f880 9002 	strb.w	r9, [r0, #2]
 8020a06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020a08:	3701      	adds	r7, #1
 8020a0a:	4415      	add	r5, r2
 8020a0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020a0e:	4414      	add	r4, r2
 8020a10:	e756      	b.n	80208c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020a12:	4438      	add	r0, r7
 8020a14:	f806 e000 	strb.w	lr, [r6, r0]
 8020a18:	4430      	add	r0, r6
 8020a1a:	f880 a001 	strb.w	sl, [r0, #1]
 8020a1e:	f880 b002 	strb.w	fp, [r0, #2]
 8020a22:	e7f0      	b.n	8020a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020a24:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020a28:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020a2c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8020a30:	e73d      	b.n	80208ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020a32:	b005      	add	sp, #20
 8020a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a38:	24028780 	.word	0x24028780

08020a3c <_ZN8touchgfx8LCD24bppD1Ev>:
 8020a3c:	4770      	bx	lr

08020a3e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8020a3e:	4770      	bx	lr

08020a40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8020a40:	4770      	bx	lr

08020a42 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8020a42:	4770      	bx	lr

08020a44 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8020a44:	4770      	bx	lr

08020a46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020a46:	4770      	bx	lr

08020a48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020a48:	4770      	bx	lr

08020a4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020a4a:	4770      	bx	lr

08020a4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020a4c:	4770      	bx	lr

08020a4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020a4e:	4770      	bx	lr

08020a50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020a50:	4770      	bx	lr

08020a52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020a52:	4770      	bx	lr

08020a54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020a54:	4770      	bx	lr

08020a56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020a56:	4770      	bx	lr

08020a58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020a58:	4770      	bx	lr

08020a5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020a5a:	4770      	bx	lr

08020a5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020a5c:	4770      	bx	lr

08020a5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020a5e:	4770      	bx	lr

08020a60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020a60:	4770      	bx	lr

08020a62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020a62:	4770      	bx	lr

08020a64 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020a64:	4770      	bx	lr

08020a66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020a66:	4770      	bx	lr

08020a68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020a68:	4770      	bx	lr

08020a6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020a6a:	4770      	bx	lr

08020a6c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020a6c:	4770      	bx	lr
	...

08020a70 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a72:	4606      	mov	r6, r0
 8020a74:	b087      	sub	sp, #28
 8020a76:	4615      	mov	r5, r2
 8020a78:	461f      	mov	r7, r3
 8020a7a:	b353      	cbz	r3, 8020ad2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020a7c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	dd26      	ble.n	8020ad2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020a84:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020a88:	2b00      	cmp	r3, #0
 8020a8a:	dd22      	ble.n	8020ad2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020a8c:	6808      	ldr	r0, [r1, #0]
 8020a8e:	aa04      	add	r2, sp, #16
 8020a90:	6849      	ldr	r1, [r1, #4]
 8020a92:	4c1b      	ldr	r4, [pc, #108]	@ (8020b00 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020a94:	c203      	stmia	r2!, {r0, r1}
 8020a96:	a804      	add	r0, sp, #16
 8020a98:	f7fa f9bc 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a9c:	6820      	ldr	r0, [r4, #0]
 8020a9e:	6803      	ldr	r3, [r0, #0]
 8020aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020aa2:	4798      	blx	r3
 8020aa4:	2fff      	cmp	r7, #255	@ 0xff
 8020aa6:	d016      	beq.n	8020ad6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020aa8:	f010 0f08 	tst.w	r0, #8
 8020aac:	6820      	ldr	r0, [r4, #0]
 8020aae:	d015      	beq.n	8020adc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8020ab0:	2400      	movs	r4, #0
 8020ab2:	6801      	ldr	r1, [r0, #0]
 8020ab4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020ab8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020abc:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8020ac0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020ac4:	9401      	str	r4, [sp, #4]
 8020ac6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020aca:	9400      	str	r4, [sp, #0]
 8020acc:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8020ace:	4629      	mov	r1, r5
 8020ad0:	47a0      	blx	r4
 8020ad2:	b007      	add	sp, #28
 8020ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ad6:	f010 0f02 	tst.w	r0, #2
 8020ada:	e7e7      	b.n	8020aac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8020adc:	6803      	ldr	r3, [r0, #0]
 8020ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020ae0:	4798      	blx	r3
 8020ae2:	4b08      	ldr	r3, [pc, #32]	@ (8020b04 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8020ae4:	4601      	mov	r1, r0
 8020ae6:	4630      	mov	r0, r6
 8020ae8:	881a      	ldrh	r2, [r3, #0]
 8020aea:	6833      	ldr	r3, [r6, #0]
 8020aec:	e9cd 5700 	strd	r5, r7, [sp]
 8020af0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8020af2:	ab04      	add	r3, sp, #16
 8020af4:	47a8      	blx	r5
 8020af6:	6820      	ldr	r0, [r4, #0]
 8020af8:	6803      	ldr	r3, [r0, #0]
 8020afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020afc:	4798      	blx	r3
 8020afe:	e7e8      	b.n	8020ad2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020b00:	24028770 	.word	0x24028770
 8020b04:	2402876a 	.word	0x2402876a

08020b08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b0c:	b08b      	sub	sp, #44	@ 0x2c
 8020b0e:	460d      	mov	r5, r1
 8020b10:	4616      	mov	r6, r2
 8020b12:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8020b16:	f1b8 0f00 	cmp.w	r8, #0
 8020b1a:	d047      	beq.n	8020bac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8020b1c:	6810      	ldr	r0, [r2, #0]
 8020b1e:	ac06      	add	r4, sp, #24
 8020b20:	6851      	ldr	r1, [r2, #4]
 8020b22:	4f51      	ldr	r7, [pc, #324]	@ (8020c68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8020b24:	c403      	stmia	r4!, {r0, r1}
 8020b26:	6818      	ldr	r0, [r3, #0]
 8020b28:	ac08      	add	r4, sp, #32
 8020b2a:	6859      	ldr	r1, [r3, #4]
 8020b2c:	c403      	stmia	r4!, {r0, r1}
 8020b2e:	a806      	add	r0, sp, #24
 8020b30:	f7fa f970 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b34:	4631      	mov	r1, r6
 8020b36:	a808      	add	r0, sp, #32
 8020b38:	f7fa f9b0 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b3c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020b40:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8020b44:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020b48:	6838      	ldr	r0, [r7, #0]
 8020b4a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020b4e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8020b52:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8020b56:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020b5a:	440d      	add	r5, r1
 8020b5c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020b60:	440a      	add	r2, r1
 8020b62:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020b66:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020b6a:	4413      	add	r3, r2
 8020b6c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8020b70:	6803      	ldr	r3, [r0, #0]
 8020b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020b74:	4798      	blx	r3
 8020b76:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8020b7a:	d01a      	beq.n	8020bb2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8020b7c:	f010 0f04 	tst.w	r0, #4
 8020b80:	6838      	ldr	r0, [r7, #0]
 8020b82:	d019      	beq.n	8020bb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8020b84:	2100      	movs	r1, #0
 8020b86:	6807      	ldr	r7, [r0, #0]
 8020b88:	b2a4      	uxth	r4, r4
 8020b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b8e:	b2b6      	uxth	r6, r6
 8020b90:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8020b94:	9401      	str	r4, [sp, #4]
 8020b96:	9600      	str	r6, [sp, #0]
 8020b98:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020b9c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8020ba0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020ba4:	9102      	str	r1, [sp, #8]
 8020ba6:	4629      	mov	r1, r5
 8020ba8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8020baa:	47a0      	blx	r4
 8020bac:	b00b      	add	sp, #44	@ 0x2c
 8020bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020bb2:	f010 0f01 	tst.w	r0, #1
 8020bb6:	e7e3      	b.n	8020b80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8020bb8:	6803      	ldr	r3, [r0, #0]
 8020bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020bbc:	4798      	blx	r3
 8020bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8020c6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8020bc0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8020bc4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8020bc8:	8813      	ldrh	r3, [r2, #0]
 8020bca:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8020bce:	fb03 f404 	mul.w	r4, r3, r4
 8020bd2:	fb03 c101 	mla	r1, r3, r1, ip
 8020bd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020bda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020bde:	4408      	add	r0, r1
 8020be0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8020be4:	4404      	add	r4, r0
 8020be6:	d02e      	beq.n	8020c46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8020be8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8020bec:	1b9b      	subs	r3, r3, r6
 8020bee:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8020bf2:	1b96      	subs	r6, r2, r6
 8020bf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020bf8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020bfc:	42a0      	cmp	r0, r4
 8020bfe:	d22d      	bcs.n	8020c5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8020c00:	eb00 0e01 	add.w	lr, r0, r1
 8020c04:	4570      	cmp	r0, lr
 8020c06:	d210      	bcs.n	8020c2a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8020c08:	f890 9000 	ldrb.w	r9, [r0]
 8020c0c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8020c10:	fb19 f90c 	smulbb	r9, r9, ip
 8020c14:	fb02 9208 	mla	r2, r2, r8, r9
 8020c18:	b292      	uxth	r2, r2
 8020c1a:	f102 0901 	add.w	r9, r2, #1
 8020c1e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8020c22:	1212      	asrs	r2, r2, #8
 8020c24:	f800 2b01 	strb.w	r2, [r0], #1
 8020c28:	e7ec      	b.n	8020c04 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8020c2a:	4418      	add	r0, r3
 8020c2c:	4435      	add	r5, r6
 8020c2e:	e7e5      	b.n	8020bfc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8020c30:	8813      	ldrh	r3, [r2, #0]
 8020c32:	1b9b      	subs	r3, r3, r6
 8020c34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c38:	4418      	add	r0, r3
 8020c3a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020c3e:	1b9b      	subs	r3, r3, r6
 8020c40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c44:	441d      	add	r5, r3
 8020c46:	42a0      	cmp	r0, r4
 8020c48:	d208      	bcs.n	8020c5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8020c4a:	eb00 0c01 	add.w	ip, r0, r1
 8020c4e:	4560      	cmp	r0, ip
 8020c50:	d2ee      	bcs.n	8020c30 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8020c52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020c56:	f800 3b01 	strb.w	r3, [r0], #1
 8020c5a:	e7f8      	b.n	8020c4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8020c5c:	6838      	ldr	r0, [r7, #0]
 8020c5e:	6803      	ldr	r3, [r0, #0]
 8020c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c62:	4798      	blx	r3
 8020c64:	e7a2      	b.n	8020bac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8020c66:	bf00      	nop
 8020c68:	24028770 	.word	0x24028770
 8020c6c:	2402876a 	.word	0x2402876a

08020c70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c72:	2300      	movs	r3, #0
 8020c74:	b085      	sub	sp, #20
 8020c76:	9300      	str	r3, [sp, #0]
 8020c78:	4b41      	ldr	r3, [pc, #260]	@ (8020d80 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8020c7a:	781b      	ldrb	r3, [r3, #0]
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d136      	bne.n	8020cee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8020c80:	4a40      	ldr	r2, [pc, #256]	@ (8020d84 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8020c82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020c86:	f8ad 2004 	strh.w	r2, [sp, #4]
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d131      	bne.n	8020cf2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8020c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8020d88 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8020c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020c94:	ac02      	add	r4, sp, #8
 8020c96:	6808      	ldr	r0, [r1, #0]
 8020c98:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020c9c:	ab02      	add	r3, sp, #8
 8020c9e:	6849      	ldr	r1, [r1, #4]
 8020ca0:	4d3a      	ldr	r5, [pc, #232]	@ (8020d8c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8020ca2:	c303      	stmia	r3!, {r0, r1}
 8020ca4:	4669      	mov	r1, sp
 8020ca6:	4620      	mov	r0, r4
 8020ca8:	f7fa f8f8 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020cac:	4668      	mov	r0, sp
 8020cae:	f7fa f8b1 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020cb2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020cb6:	f8bd 2000 	ldrh.w	r2, [sp]
 8020cba:	462e      	mov	r6, r5
 8020cbc:	6828      	ldr	r0, [r5, #0]
 8020cbe:	4413      	add	r3, r2
 8020cc0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020cc4:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020cc8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020ccc:	4413      	add	r3, r2
 8020cce:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020cd2:	6803      	ldr	r3, [r0, #0]
 8020cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020cd6:	4798      	blx	r3
 8020cd8:	f010 0f01 	tst.w	r0, #1
 8020cdc:	d00b      	beq.n	8020cf6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8020cde:	6828      	ldr	r0, [r5, #0]
 8020ce0:	6803      	ldr	r3, [r0, #0]
 8020ce2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020ce8:	4798      	blx	r3
 8020cea:	b005      	add	sp, #20
 8020cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020cee:	4a26      	ldr	r2, [pc, #152]	@ (8020d88 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8020cf0:	e7c7      	b.n	8020c82 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020cf2:	4b24      	ldr	r3, [pc, #144]	@ (8020d84 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8020cf4:	e7cc      	b.n	8020c90 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020cf6:	6830      	ldr	r0, [r6, #0]
 8020cf8:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8020cfc:	6803      	ldr	r3, [r0, #0]
 8020cfe:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8020d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020d04:	4798      	blx	r3
 8020d06:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020d0a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020d0e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8020d12:	fb14 3402 	smlabb	r4, r4, r2, r3
 8020d16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020d1a:	4404      	add	r4, r0
 8020d1c:	6830      	ldr	r0, [r6, #0]
 8020d1e:	6803      	ldr	r3, [r0, #0]
 8020d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d22:	4798      	blx	r3
 8020d24:	4917      	ldr	r1, [pc, #92]	@ (8020d84 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8020d26:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8020d2a:	880b      	ldrh	r3, [r1, #0]
 8020d2c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8020d30:	fb03 c202 	mla	r2, r3, r2, ip
 8020d34:	437b      	muls	r3, r7
 8020d36:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8020d3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d42:	4410      	add	r0, r2
 8020d44:	18c2      	adds	r2, r0, r3
 8020d46:	4290      	cmp	r0, r2
 8020d48:	d214      	bcs.n	8020d74 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8020d4a:	eb00 0c07 	add.w	ip, r0, r7
 8020d4e:	4560      	cmp	r0, ip
 8020d50:	d204      	bcs.n	8020d5c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8020d52:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020d56:	f800 3b01 	strb.w	r3, [r0], #1
 8020d5a:	e7f8      	b.n	8020d4e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8020d5c:	880b      	ldrh	r3, [r1, #0]
 8020d5e:	1b5b      	subs	r3, r3, r5
 8020d60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d64:	4418      	add	r0, r3
 8020d66:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020d6a:	1b5b      	subs	r3, r3, r5
 8020d6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d70:	441c      	add	r4, r3
 8020d72:	e7e8      	b.n	8020d46 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8020d74:	6830      	ldr	r0, [r6, #0]
 8020d76:	6803      	ldr	r3, [r0, #0]
 8020d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020d7a:	4798      	blx	r3
 8020d7c:	e7b5      	b.n	8020cea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020d7e:	bf00      	nop
 8020d80:	24028768 	.word	0x24028768
 8020d84:	2402876a 	.word	0x2402876a
 8020d88:	2402876c 	.word	0x2402876c
 8020d8c:	24028770 	.word	0x24028770

08020d90 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d94:	b08f      	sub	sp, #60	@ 0x3c
 8020d96:	461c      	mov	r4, r3
 8020d98:	9203      	str	r2, [sp, #12]
 8020d9a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020d9e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020da0:	6820      	ldr	r0, [r4, #0]
 8020da2:	9100      	str	r1, [sp, #0]
 8020da4:	9204      	str	r2, [sp, #16]
 8020da6:	aa0a      	add	r2, sp, #40	@ 0x28
 8020da8:	6861      	ldr	r1, [r4, #4]
 8020daa:	c203      	stmia	r2!, {r0, r1}
 8020dac:	6818      	ldr	r0, [r3, #0]
 8020dae:	aa0c      	add	r2, sp, #48	@ 0x30
 8020db0:	6859      	ldr	r1, [r3, #4]
 8020db2:	c203      	stmia	r2!, {r0, r1}
 8020db4:	a80a      	add	r0, sp, #40	@ 0x28
 8020db6:	f7fa f82d 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020dba:	4621      	mov	r1, r4
 8020dbc:	a80c      	add	r0, sp, #48	@ 0x30
 8020dbe:	f7fa f86d 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020dc2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8020dc6:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020dca:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020dce:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020dd2:	bfdb      	ittet	le
 8020dd4:	b2b3      	uxthle	r3, r6
 8020dd6:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020dda:	2301      	movgt	r3, #1
 8020ddc:	fb92 f3f3 	sdivle	r3, r2, r3
 8020de0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020de4:	441d      	add	r5, r3
 8020de6:	fb92 f1f3 	sdiv	r1, r2, r3
 8020dea:	fa1f fc81 	uxth.w	ip, r1
 8020dee:	3d01      	subs	r5, #1
 8020df0:	fb0c 2413 	mls	r4, ip, r3, r2
 8020df4:	4661      	mov	r1, ip
 8020df6:	fb14 f406 	smulbb	r4, r4, r6
 8020dfa:	4404      	add	r4, r0
 8020dfc:	fb95 f5f3 	sdiv	r5, r5, r3
 8020e00:	b2a4      	uxth	r4, r4
 8020e02:	b131      	cbz	r1, 8020e12 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8020e04:	9b03      	ldr	r3, [sp, #12]
 8020e06:	9900      	ldr	r1, [sp, #0]
 8020e08:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020e0c:	ba1b      	rev	r3, r3
 8020e0e:	4419      	add	r1, r3
 8020e10:	9100      	str	r1, [sp, #0]
 8020e12:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020e16:	b2ad      	uxth	r5, r5
 8020e18:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020e1c:	4418      	add	r0, r3
 8020e1e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020e22:	00ad      	lsls	r5, r5, #2
 8020e24:	441a      	add	r2, r3
 8020e26:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020e2a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020e2e:	9301      	str	r3, [sp, #4]
 8020e30:	4b79      	ldr	r3, [pc, #484]	@ (8021018 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8020e32:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020e36:	6818      	ldr	r0, [r3, #0]
 8020e38:	6803      	ldr	r3, [r0, #0]
 8020e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e3c:	4798      	blx	r3
 8020e3e:	4a77      	ldr	r2, [pc, #476]	@ (802101c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8020e40:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020e44:	2c00      	cmp	r4, #0
 8020e46:	8813      	ldrh	r3, [r2, #0]
 8020e48:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8020e4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8020e4e:	fb03 c101 	mla	r1, r3, r1, ip
 8020e52:	fb06 f303 	mul.w	r3, r6, r3
 8020e56:	bf18      	it	ne
 8020e58:	2600      	movne	r6, #0
 8020e5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020e5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e62:	4408      	add	r0, r1
 8020e64:	4403      	add	r3, r0
 8020e66:	9306      	str	r3, [sp, #24]
 8020e68:	f105 0304 	add.w	r3, r5, #4
 8020e6c:	9305      	str	r3, [sp, #20]
 8020e6e:	9b01      	ldr	r3, [sp, #4]
 8020e70:	bf08      	it	eq
 8020e72:	461e      	moveq	r6, r3
 8020e74:	2300      	movs	r3, #0
 8020e76:	b2b6      	uxth	r6, r6
 8020e78:	9302      	str	r3, [sp, #8]
 8020e7a:	9a06      	ldr	r2, [sp, #24]
 8020e7c:	4290      	cmp	r0, r2
 8020e7e:	f080 80c2 	bcs.w	8021006 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8020e82:	b963      	cbnz	r3, 8020e9e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8020e84:	9b00      	ldr	r3, [sp, #0]
 8020e86:	781a      	ldrb	r2, [r3, #0]
 8020e88:	0993      	lsrs	r3, r2, #6
 8020e8a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020e8e:	9202      	str	r2, [sp, #8]
 8020e90:	1e5a      	subs	r2, r3, #1
 8020e92:	2a02      	cmp	r2, #2
 8020e94:	d815      	bhi.n	8020ec2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8020e96:	9a00      	ldr	r2, [sp, #0]
 8020e98:	b29b      	uxth	r3, r3
 8020e9a:	3201      	adds	r2, #1
 8020e9c:	9200      	str	r2, [sp, #0]
 8020e9e:	b1b4      	cbz	r4, 8020ece <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8020ea0:	429c      	cmp	r4, r3
 8020ea2:	bf91      	iteee	ls
 8020ea4:	1b1c      	subls	r4, r3, r4
 8020ea6:	1ae4      	subhi	r4, r4, r3
 8020ea8:	4635      	movhi	r5, r6
 8020eaa:	f04f 0e00 	movhi.w	lr, #0
 8020eae:	bf9b      	ittet	ls
 8020eb0:	fa1f fe84 	uxthls.w	lr, r4
 8020eb4:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8020eb8:	b2a4      	uxthhi	r4, r4
 8020eba:	2400      	movls	r4, #0
 8020ebc:	4673      	mov	r3, lr
 8020ebe:	462e      	mov	r6, r5
 8020ec0:	e7db      	b.n	8020e7a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8020ec2:	9a00      	ldr	r2, [sp, #0]
 8020ec4:	9b00      	ldr	r3, [sp, #0]
 8020ec6:	3202      	adds	r2, #2
 8020ec8:	785b      	ldrb	r3, [r3, #1]
 8020eca:	9200      	str	r2, [sp, #0]
 8020ecc:	e7e7      	b.n	8020e9e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8020ece:	2204      	movs	r2, #4
 8020ed0:	9905      	ldr	r1, [sp, #20]
 8020ed2:	429e      	cmp	r6, r3
 8020ed4:	4615      	mov	r5, r2
 8020ed6:	9a02      	ldr	r2, [sp, #8]
 8020ed8:	bf94      	ite	ls
 8020eda:	eba3 0e06 	subls.w	lr, r3, r6
 8020ede:	46a6      	movhi	lr, r4
 8020ee0:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020ee4:	9903      	ldr	r1, [sp, #12]
 8020ee6:	bf8c      	ite	hi
 8020ee8:	1af5      	subhi	r5, r6, r3
 8020eea:	fa1f fe8e 	uxthls.w	lr, lr
 8020eee:	f851 c002 	ldr.w	ip, [r1, r2]
 8020ef2:	bf9a      	itte	ls
 8020ef4:	4625      	movls	r5, r4
 8020ef6:	4632      	movls	r2, r6
 8020ef8:	b2ad      	uxthhi	r5, r5
 8020efa:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8020efe:	bf88      	it	hi
 8020f00:	461a      	movhi	r2, r3
 8020f02:	b179      	cbz	r1, 8020f24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8020f04:	29ff      	cmp	r1, #255	@ 0xff
 8020f06:	fa5f f98c 	uxtb.w	r9, ip
 8020f0a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8020f0e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8020f12:	d126      	bne.n	8020f62 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8020f14:	9f04      	ldr	r7, [sp, #16]
 8020f16:	2fff      	cmp	r7, #255	@ 0xff
 8020f18:	d123      	bne.n	8020f62 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8020f1a:	4682      	mov	sl, r0
 8020f1c:	4611      	mov	r1, r2
 8020f1e:	f10a 0a03 	add.w	sl, sl, #3
 8020f22:	b9a9      	cbnz	r1, 8020f50 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8020f24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f28:	429e      	cmp	r6, r3
 8020f2a:	4410      	add	r0, r2
 8020f2c:	d8c6      	bhi.n	8020ebc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8020f2e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8020f32:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f38:	1b64      	subs	r4, r4, r5
 8020f3a:	9a01      	ldr	r2, [sp, #4]
 8020f3c:	881b      	ldrh	r3, [r3, #0]
 8020f3e:	b2a4      	uxth	r4, r4
 8020f40:	1a9b      	subs	r3, r3, r2
 8020f42:	2c00      	cmp	r4, #0
 8020f44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f48:	bf18      	it	ne
 8020f4a:	2500      	movne	r5, #0
 8020f4c:	4418      	add	r0, r3
 8020f4e:	e7b5      	b.n	8020ebc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8020f50:	3901      	subs	r1, #1
 8020f52:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8020f56:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8020f5a:	f80a cc01 	strb.w	ip, [sl, #-1]
 8020f5e:	b289      	uxth	r1, r1
 8020f60:	e7dd      	b.n	8020f1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8020f62:	9f04      	ldr	r7, [sp, #16]
 8020f64:	fb07 fa01 	mul.w	sl, r7, r1
 8020f68:	f10a 0101 	add.w	r1, sl, #1
 8020f6c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8020f70:	1209      	asrs	r1, r1, #8
 8020f72:	ea6f 0a01 	mvn.w	sl, r1
 8020f76:	b289      	uxth	r1, r1
 8020f78:	fb19 f901 	smulbb	r9, r9, r1
 8020f7c:	fa5f fa8a 	uxtb.w	sl, sl
 8020f80:	fb18 f801 	smulbb	r8, r8, r1
 8020f84:	fb1c f101 	smulbb	r1, ip, r1
 8020f88:	fa1f f789 	uxth.w	r7, r9
 8020f8c:	4684      	mov	ip, r0
 8020f8e:	4691      	mov	r9, r2
 8020f90:	9707      	str	r7, [sp, #28]
 8020f92:	b289      	uxth	r1, r1
 8020f94:	fa1f f788 	uxth.w	r7, r8
 8020f98:	9708      	str	r7, [sp, #32]
 8020f9a:	f10c 0c03 	add.w	ip, ip, #3
 8020f9e:	f1b9 0f00 	cmp.w	r9, #0
 8020fa2:	d0bf      	beq.n	8020f24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8020fa4:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8020fa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8020fac:	9f07      	ldr	r7, [sp, #28]
 8020fae:	fa1f f989 	uxth.w	r9, r9
 8020fb2:	fb08 780a 	mla	r8, r8, sl, r7
 8020fb6:	9f08      	ldr	r7, [sp, #32]
 8020fb8:	fa1f f888 	uxth.w	r8, r8
 8020fbc:	f108 0b01 	add.w	fp, r8, #1
 8020fc0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020fc4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020fc8:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8020fcc:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8020fd0:	fb08 780a 	mla	r8, r8, sl, r7
 8020fd4:	fa1f f888 	uxth.w	r8, r8
 8020fd8:	f108 0b01 	add.w	fp, r8, #1
 8020fdc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020fe0:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020fe4:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8020fe8:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8020fec:	fb08 180a 	mla	r8, r8, sl, r1
 8020ff0:	fa1f f888 	uxth.w	r8, r8
 8020ff4:	f108 0b01 	add.w	fp, r8, #1
 8020ff8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020ffc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021000:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8021004:	e7c9      	b.n	8020f9a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021006:	4b04      	ldr	r3, [pc, #16]	@ (8021018 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8021008:	6818      	ldr	r0, [r3, #0]
 802100a:	6803      	ldr	r3, [r0, #0]
 802100c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802100e:	4798      	blx	r3
 8021010:	b00f      	add	sp, #60	@ 0x3c
 8021012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021016:	bf00      	nop
 8021018:	24028770 	.word	0x24028770
 802101c:	2402876a 	.word	0x2402876a

08021020 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021024:	b089      	sub	sp, #36	@ 0x24
 8021026:	4607      	mov	r7, r0
 8021028:	4689      	mov	r9, r1
 802102a:	4692      	mov	sl, r2
 802102c:	ac08      	add	r4, sp, #32
 802102e:	461e      	mov	r6, r3
 8021030:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8021034:	4620      	mov	r0, r4
 8021036:	f7fd ff77 	bl	801ef28 <_ZNK8touchgfx6Bitmap7getDataEv>
 802103a:	683b      	ldr	r3, [r7, #0]
 802103c:	4605      	mov	r5, r0
 802103e:	4620      	mov	r0, r4
 8021040:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8021044:	f7fd fe7e 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021048:	4683      	mov	fp, r0
 802104a:	4620      	mov	r0, r4
 802104c:	f7fd feae 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021050:	4653      	mov	r3, sl
 8021052:	464a      	mov	r2, r9
 8021054:	4639      	mov	r1, r7
 8021056:	9500      	str	r5, [sp, #0]
 8021058:	e9cd b001 	strd	fp, r0, [sp, #4]
 802105c:	a806      	add	r0, sp, #24
 802105e:	47c0      	blx	r8
 8021060:	a906      	add	r1, sp, #24
 8021062:	4630      	mov	r0, r6
 8021064:	f7fd fd52 	bl	801eb0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8021068:	4628      	mov	r0, r5
 802106a:	b009      	add	sp, #36	@ 0x24
 802106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021070 <_ZN8touchgfx8LCD24bppD0Ev>:
 8021070:	b510      	push	{r4, lr}
 8021072:	4604      	mov	r4, r0
 8021074:	216c      	movs	r1, #108	@ 0x6c
 8021076:	f008 fc7f 	bl	8029978 <_ZdlPvj>
 802107a:	4620      	mov	r0, r4
 802107c:	bd10      	pop	{r4, pc}

0802107e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 802107e:	b510      	push	{r4, lr}
 8021080:	4604      	mov	r4, r0
 8021082:	2104      	movs	r1, #4
 8021084:	f008 fc78 	bl	8029978 <_ZdlPvj>
 8021088:	4620      	mov	r0, r4
 802108a:	bd10      	pop	{r4, pc}

0802108c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 802108c:	b510      	push	{r4, lr}
 802108e:	4604      	mov	r4, r0
 8021090:	2104      	movs	r1, #4
 8021092:	f008 fc71 	bl	8029978 <_ZdlPvj>
 8021096:	4620      	mov	r0, r4
 8021098:	bd10      	pop	{r4, pc}

0802109a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 802109a:	b510      	push	{r4, lr}
 802109c:	4604      	mov	r4, r0
 802109e:	f640 0144 	movw	r1, #2116	@ 0x844
 80210a2:	f008 fc69 	bl	8029978 <_ZdlPvj>
 80210a6:	4620      	mov	r0, r4
 80210a8:	bd10      	pop	{r4, pc}

080210aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 80210aa:	b510      	push	{r4, lr}
 80210ac:	4604      	mov	r4, r0
 80210ae:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80210b2:	f008 fc61 	bl	8029978 <_ZdlPvj>
 80210b6:	4620      	mov	r0, r4
 80210b8:	bd10      	pop	{r4, pc}

080210ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80210ba:	b510      	push	{r4, lr}
 80210bc:	4604      	mov	r4, r0
 80210be:	2104      	movs	r1, #4
 80210c0:	f008 fc5a 	bl	8029978 <_ZdlPvj>
 80210c4:	4620      	mov	r0, r4
 80210c6:	bd10      	pop	{r4, pc}

080210c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80210c8:	b510      	push	{r4, lr}
 80210ca:	4604      	mov	r4, r0
 80210cc:	2104      	movs	r1, #4
 80210ce:	f008 fc53 	bl	8029978 <_ZdlPvj>
 80210d2:	4620      	mov	r0, r4
 80210d4:	bd10      	pop	{r4, pc}

080210d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80210d6:	b510      	push	{r4, lr}
 80210d8:	4604      	mov	r4, r0
 80210da:	2104      	movs	r1, #4
 80210dc:	f008 fc4c 	bl	8029978 <_ZdlPvj>
 80210e0:	4620      	mov	r0, r4
 80210e2:	bd10      	pop	{r4, pc}

080210e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80210e4:	b510      	push	{r4, lr}
 80210e6:	4604      	mov	r4, r0
 80210e8:	2104      	movs	r1, #4
 80210ea:	f008 fc45 	bl	8029978 <_ZdlPvj>
 80210ee:	4620      	mov	r0, r4
 80210f0:	bd10      	pop	{r4, pc}

080210f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80210f2:	b510      	push	{r4, lr}
 80210f4:	4604      	mov	r4, r0
 80210f6:	2104      	movs	r1, #4
 80210f8:	f008 fc3e 	bl	8029978 <_ZdlPvj>
 80210fc:	4620      	mov	r0, r4
 80210fe:	bd10      	pop	{r4, pc}

08021100 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021100:	b510      	push	{r4, lr}
 8021102:	4604      	mov	r4, r0
 8021104:	2104      	movs	r1, #4
 8021106:	f008 fc37 	bl	8029978 <_ZdlPvj>
 802110a:	4620      	mov	r0, r4
 802110c:	bd10      	pop	{r4, pc}

0802110e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802110e:	b510      	push	{r4, lr}
 8021110:	4604      	mov	r4, r0
 8021112:	2104      	movs	r1, #4
 8021114:	f008 fc30 	bl	8029978 <_ZdlPvj>
 8021118:	4620      	mov	r0, r4
 802111a:	bd10      	pop	{r4, pc}

0802111c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802111c:	b510      	push	{r4, lr}
 802111e:	4604      	mov	r4, r0
 8021120:	2104      	movs	r1, #4
 8021122:	f008 fc29 	bl	8029978 <_ZdlPvj>
 8021126:	4620      	mov	r0, r4
 8021128:	bd10      	pop	{r4, pc}

0802112a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802112a:	b510      	push	{r4, lr}
 802112c:	4604      	mov	r4, r0
 802112e:	2104      	movs	r1, #4
 8021130:	f008 fc22 	bl	8029978 <_ZdlPvj>
 8021134:	4620      	mov	r0, r4
 8021136:	bd10      	pop	{r4, pc}

08021138 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021138:	b510      	push	{r4, lr}
 802113a:	4604      	mov	r4, r0
 802113c:	2104      	movs	r1, #4
 802113e:	f008 fc1b 	bl	8029978 <_ZdlPvj>
 8021142:	4620      	mov	r0, r4
 8021144:	bd10      	pop	{r4, pc}

08021146 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021146:	b510      	push	{r4, lr}
 8021148:	4604      	mov	r4, r0
 802114a:	2104      	movs	r1, #4
 802114c:	f008 fc14 	bl	8029978 <_ZdlPvj>
 8021150:	4620      	mov	r0, r4
 8021152:	bd10      	pop	{r4, pc}

08021154 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021154:	b510      	push	{r4, lr}
 8021156:	4604      	mov	r4, r0
 8021158:	2104      	movs	r1, #4
 802115a:	f008 fc0d 	bl	8029978 <_ZdlPvj>
 802115e:	4620      	mov	r0, r4
 8021160:	bd10      	pop	{r4, pc}

08021162 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021162:	b510      	push	{r4, lr}
 8021164:	4604      	mov	r4, r0
 8021166:	2104      	movs	r1, #4
 8021168:	f008 fc06 	bl	8029978 <_ZdlPvj>
 802116c:	4620      	mov	r0, r4
 802116e:	bd10      	pop	{r4, pc}

08021170 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021170:	b510      	push	{r4, lr}
 8021172:	4604      	mov	r4, r0
 8021174:	2104      	movs	r1, #4
 8021176:	f008 fbff 	bl	8029978 <_ZdlPvj>
 802117a:	4620      	mov	r0, r4
 802117c:	bd10      	pop	{r4, pc}

0802117e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802117e:	b510      	push	{r4, lr}
 8021180:	4604      	mov	r4, r0
 8021182:	2104      	movs	r1, #4
 8021184:	f008 fbf8 	bl	8029978 <_ZdlPvj>
 8021188:	4620      	mov	r0, r4
 802118a:	bd10      	pop	{r4, pc}

0802118c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802118c:	b510      	push	{r4, lr}
 802118e:	4604      	mov	r4, r0
 8021190:	2104      	movs	r1, #4
 8021192:	f008 fbf1 	bl	8029978 <_ZdlPvj>
 8021196:	4620      	mov	r0, r4
 8021198:	bd10      	pop	{r4, pc}

0802119a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 802119a:	b510      	push	{r4, lr}
 802119c:	4604      	mov	r4, r0
 802119e:	2104      	movs	r1, #4
 80211a0:	f008 fbea 	bl	8029978 <_ZdlPvj>
 80211a4:	4620      	mov	r0, r4
 80211a6:	bd10      	pop	{r4, pc}

080211a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80211a8:	b510      	push	{r4, lr}
 80211aa:	4604      	mov	r4, r0
 80211ac:	2104      	movs	r1, #4
 80211ae:	f008 fbe3 	bl	8029978 <_ZdlPvj>
 80211b2:	4620      	mov	r0, r4
 80211b4:	bd10      	pop	{r4, pc}

080211b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80211b6:	b510      	push	{r4, lr}
 80211b8:	4604      	mov	r4, r0
 80211ba:	2104      	movs	r1, #4
 80211bc:	f008 fbdc 	bl	8029978 <_ZdlPvj>
 80211c0:	4620      	mov	r0, r4
 80211c2:	bd10      	pop	{r4, pc}

080211c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80211c4:	b510      	push	{r4, lr}
 80211c6:	4604      	mov	r4, r0
 80211c8:	2104      	movs	r1, #4
 80211ca:	f008 fbd5 	bl	8029978 <_ZdlPvj>
 80211ce:	4620      	mov	r0, r4
 80211d0:	bd10      	pop	{r4, pc}
	...

080211d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80211d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211d8:	b08f      	sub	sp, #60	@ 0x3c
 80211da:	461c      	mov	r4, r3
 80211dc:	460e      	mov	r6, r1
 80211de:	9206      	str	r2, [sp, #24]
 80211e0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80211e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80211e6:	9202      	str	r2, [sp, #8]
 80211e8:	2a00      	cmp	r2, #0
 80211ea:	f000 8128 	beq.w	802143e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 80211ee:	6820      	ldr	r0, [r4, #0]
 80211f0:	aa0a      	add	r2, sp, #40	@ 0x28
 80211f2:	6861      	ldr	r1, [r4, #4]
 80211f4:	c203      	stmia	r2!, {r0, r1}
 80211f6:	6818      	ldr	r0, [r3, #0]
 80211f8:	aa0c      	add	r2, sp, #48	@ 0x30
 80211fa:	6859      	ldr	r1, [r3, #4]
 80211fc:	c203      	stmia	r2!, {r0, r1}
 80211fe:	a80a      	add	r0, sp, #40	@ 0x28
 8021200:	f7f9 fe08 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021204:	4621      	mov	r1, r4
 8021206:	a80c      	add	r0, sp, #48	@ 0x30
 8021208:	f7f9 fe48 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802120c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8021210:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8021214:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8021218:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 802121c:	bfdb      	ittet	le
 802121e:	b2bb      	uxthle	r3, r7
 8021220:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021224:	2301      	movgt	r3, #1
 8021226:	fb92 f3f3 	sdivle	r3, r2, r3
 802122a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802122e:	441d      	add	r5, r3
 8021230:	fb92 f1f3 	sdiv	r1, r2, r3
 8021234:	fa1f fc81 	uxth.w	ip, r1
 8021238:	3d01      	subs	r5, #1
 802123a:	fb0c 2413 	mls	r4, ip, r3, r2
 802123e:	4661      	mov	r1, ip
 8021240:	fb14 f407 	smulbb	r4, r4, r7
 8021244:	4404      	add	r4, r0
 8021246:	fb95 f5f3 	sdiv	r5, r5, r3
 802124a:	b2a4      	uxth	r4, r4
 802124c:	b121      	cbz	r1, 8021258 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 802124e:	9b06      	ldr	r3, [sp, #24]
 8021250:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021254:	ba1b      	rev	r3, r3
 8021256:	441e      	add	r6, r3
 8021258:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802125c:	b2ad      	uxth	r5, r5
 802125e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8021262:	4418      	add	r0, r3
 8021264:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021268:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 802126c:	00ad      	lsls	r5, r5, #2
 802126e:	441a      	add	r2, r3
 8021270:	4b74      	ldr	r3, [pc, #464]	@ (8021444 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021272:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8021276:	6818      	ldr	r0, [r3, #0]
 8021278:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802127c:	6803      	ldr	r3, [r0, #0]
 802127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021280:	4798      	blx	r3
 8021282:	4a71      	ldr	r2, [pc, #452]	@ (8021448 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021284:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8021288:	2c00      	cmp	r4, #0
 802128a:	8813      	ldrh	r3, [r2, #0]
 802128c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8021290:	9209      	str	r2, [sp, #36]	@ 0x24
 8021292:	fb03 c101 	mla	r1, r3, r1, ip
 8021296:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 802129a:	fb03 f307 	mul.w	r3, r3, r7
 802129e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80212a2:	9204      	str	r2, [sp, #16]
 80212a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212a8:	9a02      	ldr	r2, [sp, #8]
 80212aa:	4408      	add	r0, r1
 80212ac:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 80212b0:	4403      	add	r3, r0
 80212b2:	b292      	uxth	r2, r2
 80212b4:	9307      	str	r3, [sp, #28]
 80212b6:	f105 0304 	add.w	r3, r5, #4
 80212ba:	bf0c      	ite	eq
 80212bc:	4645      	moveq	r5, r8
 80212be:	2500      	movne	r5, #0
 80212c0:	9308      	str	r3, [sp, #32]
 80212c2:	2300      	movs	r3, #0
 80212c4:	b2ad      	uxth	r5, r5
 80212c6:	9205      	str	r2, [sp, #20]
 80212c8:	9303      	str	r3, [sp, #12]
 80212ca:	9a07      	ldr	r2, [sp, #28]
 80212cc:	4282      	cmp	r2, r0
 80212ce:	f240 80b1 	bls.w	8021434 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 80212d2:	b95b      	cbnz	r3, 80212ec <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 80212d4:	7832      	ldrb	r2, [r6, #0]
 80212d6:	0993      	lsrs	r3, r2, #6
 80212d8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80212dc:	9203      	str	r2, [sp, #12]
 80212de:	1e5a      	subs	r2, r3, #1
 80212e0:	2a02      	cmp	r2, #2
 80212e2:	bf8d      	iteet	hi
 80212e4:	7873      	ldrbhi	r3, [r6, #1]
 80212e6:	3601      	addls	r6, #1
 80212e8:	b29b      	uxthls	r3, r3
 80212ea:	3602      	addhi	r6, #2
 80212ec:	b184      	cbz	r4, 8021310 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 80212ee:	429c      	cmp	r4, r3
 80212f0:	bf91      	iteee	ls
 80212f2:	1b1c      	subls	r4, r3, r4
 80212f4:	1ae4      	subhi	r4, r4, r3
 80212f6:	4629      	movhi	r1, r5
 80212f8:	f04f 0e00 	movhi.w	lr, #0
 80212fc:	bf9b      	ittet	ls
 80212fe:	fa1f fe84 	uxthls.w	lr, r4
 8021302:	2400      	movls	r4, #0
 8021304:	b2a4      	uxthhi	r4, r4
 8021306:	fa1f f188 	uxthls.w	r1, r8
 802130a:	4673      	mov	r3, lr
 802130c:	460d      	mov	r5, r1
 802130e:	e7dc      	b.n	80212ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8021310:	2203      	movs	r2, #3
 8021312:	9908      	ldr	r1, [sp, #32]
 8021314:	42ab      	cmp	r3, r5
 8021316:	4617      	mov	r7, r2
 8021318:	9a03      	ldr	r2, [sp, #12]
 802131a:	bf24      	itt	cs
 802131c:	eba3 0e05 	subcs.w	lr, r3, r5
 8021320:	9501      	strcs	r5, [sp, #4]
 8021322:	fb17 1702 	smlabb	r7, r7, r2, r1
 8021326:	9a06      	ldr	r2, [sp, #24]
 8021328:	bf34      	ite	cc
 802132a:	1ae9      	subcc	r1, r5, r3
 802132c:	fa1f fe8e 	uxthcs.w	lr, lr
 8021330:	4417      	add	r7, r2
 8021332:	9a02      	ldr	r2, [sp, #8]
 8021334:	bf2f      	iteee	cs
 8021336:	4621      	movcs	r1, r4
 8021338:	b289      	uxthcc	r1, r1
 802133a:	9301      	strcc	r3, [sp, #4]
 802133c:	46a6      	movcc	lr, r4
 802133e:	2aff      	cmp	r2, #255	@ 0xff
 8021340:	d11e      	bne.n	8021380 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8021342:	4681      	mov	r9, r0
 8021344:	f8dd c004 	ldr.w	ip, [sp, #4]
 8021348:	f109 0903 	add.w	r9, r9, #3
 802134c:	f1bc 0f00 	cmp.w	ip, #0
 8021350:	d15f      	bne.n	8021412 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8021352:	9a01      	ldr	r2, [sp, #4]
 8021354:	42ab      	cmp	r3, r5
 8021356:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802135a:	4410      	add	r0, r2
 802135c:	d3d5      	bcc.n	802130a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 802135e:	fa1f f188 	uxth.w	r1, r8
 8021362:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8021366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021368:	1a64      	subs	r4, r4, r1
 802136a:	881b      	ldrh	r3, [r3, #0]
 802136c:	b2a4      	uxth	r4, r4
 802136e:	eba3 0308 	sub.w	r3, r3, r8
 8021372:	2c00      	cmp	r4, #0
 8021374:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021378:	bf18      	it	ne
 802137a:	2100      	movne	r1, #0
 802137c:	4418      	add	r0, r3
 802137e:	e7c4      	b.n	802130a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8021380:	4684      	mov	ip, r0
 8021382:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021386:	f10c 0c03 	add.w	ip, ip, #3
 802138a:	f1ba 0f00 	cmp.w	sl, #0
 802138e:	d0e0      	beq.n	8021352 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8021390:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8021394:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021398:	9a05      	ldr	r2, [sp, #20]
 802139a:	f897 9000 	ldrb.w	r9, [r7]
 802139e:	fa1f fa8a 	uxth.w	sl, sl
 80213a2:	fb1b fb02 	smulbb	fp, fp, r2
 80213a6:	9a04      	ldr	r2, [sp, #16]
 80213a8:	fb09 b902 	mla	r9, r9, r2, fp
 80213ac:	9a05      	ldr	r2, [sp, #20]
 80213ae:	fa1f f989 	uxth.w	r9, r9
 80213b2:	f109 0b01 	add.w	fp, r9, #1
 80213b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80213ba:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 80213be:	fb1b fb02 	smulbb	fp, fp, r2
 80213c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80213c6:	9a04      	ldr	r2, [sp, #16]
 80213c8:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80213cc:	f897 9001 	ldrb.w	r9, [r7, #1]
 80213d0:	fb09 b902 	mla	r9, r9, r2, fp
 80213d4:	9a05      	ldr	r2, [sp, #20]
 80213d6:	fa1f f989 	uxth.w	r9, r9
 80213da:	f109 0b01 	add.w	fp, r9, #1
 80213de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80213e2:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 80213e6:	fb1b fb02 	smulbb	fp, fp, r2
 80213ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80213ee:	9a04      	ldr	r2, [sp, #16]
 80213f0:	f80c 9c02 	strb.w	r9, [ip, #-2]
 80213f4:	f897 9002 	ldrb.w	r9, [r7, #2]
 80213f8:	fb09 b902 	mla	r9, r9, r2, fp
 80213fc:	fa1f f989 	uxth.w	r9, r9
 8021400:	f109 0b01 	add.w	fp, r9, #1
 8021404:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021408:	ea4f 2929 	mov.w	r9, r9, asr #8
 802140c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8021410:	e7b9      	b.n	8021386 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8021412:	f897 a000 	ldrb.w	sl, [r7]
 8021416:	f10c 3cff 	add.w	ip, ip, #4294967295
 802141a:	f809 ac03 	strb.w	sl, [r9, #-3]
 802141e:	fa1f fc8c 	uxth.w	ip, ip
 8021422:	f897 a001 	ldrb.w	sl, [r7, #1]
 8021426:	f809 ac02 	strb.w	sl, [r9, #-2]
 802142a:	f897 a002 	ldrb.w	sl, [r7, #2]
 802142e:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021432:	e789      	b.n	8021348 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8021434:	4b03      	ldr	r3, [pc, #12]	@ (8021444 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021436:	6818      	ldr	r0, [r3, #0]
 8021438:	6803      	ldr	r3, [r0, #0]
 802143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802143c:	4798      	blx	r3
 802143e:	b00f      	add	sp, #60	@ 0x3c
 8021440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021444:	24028770 	.word	0x24028770
 8021448:	2402876a 	.word	0x2402876a

0802144c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021450:	b09b      	sub	sp, #108	@ 0x6c
 8021452:	461d      	mov	r5, r3
 8021454:	4604      	mov	r4, r0
 8021456:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021458:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 802145c:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8021460:	9208      	str	r2, [sp, #32]
 8021462:	2a00      	cmp	r2, #0
 8021464:	f000 81f3 	beq.w	802184e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8021468:	6828      	ldr	r0, [r5, #0]
 802146a:	aa16      	add	r2, sp, #88	@ 0x58
 802146c:	6869      	ldr	r1, [r5, #4]
 802146e:	c203      	stmia	r2!, {r0, r1}
 8021470:	6818      	ldr	r0, [r3, #0]
 8021472:	aa18      	add	r2, sp, #96	@ 0x60
 8021474:	6859      	ldr	r1, [r3, #4]
 8021476:	c203      	stmia	r2!, {r0, r1}
 8021478:	a816      	add	r0, sp, #88	@ 0x58
 802147a:	f7f9 fccb 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802147e:	4629      	mov	r1, r5
 8021480:	a818      	add	r0, sp, #96	@ 0x60
 8021482:	f7f9 fd0b 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021486:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 802148a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 802148e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021492:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8021496:	bfdb      	ittet	le
 8021498:	b29a      	uxthle	r2, r3
 802149a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802149e:	f04f 0a01 	movgt.w	sl, #1
 80214a2:	fb91 faf2 	sdivle	sl, r1, r2
 80214a6:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 80214aa:	4456      	add	r6, sl
 80214ac:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80214b0:	3e01      	subs	r6, #1
 80214b2:	fb92 f0fa 	sdiv	r0, r2, sl
 80214b6:	b280      	uxth	r0, r0
 80214b8:	fb00 281a 	mls	r8, r0, sl, r2
 80214bc:	900e      	str	r0, [sp, #56]	@ 0x38
 80214be:	fb18 f803 	smulbb	r8, r8, r3
 80214c2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 80214c6:	4488      	add	r8, r1
 80214c8:	4419      	add	r1, r3
 80214ca:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 80214ce:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 80214d2:	fa1f f888 	uxth.w	r8, r8
 80214d6:	441a      	add	r2, r3
 80214d8:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80214dc:	9303      	str	r3, [sp, #12]
 80214de:	4b9c      	ldr	r3, [pc, #624]	@ (8021750 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 80214e0:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 80214e4:	6818      	ldr	r0, [r3, #0]
 80214e6:	6803      	ldr	r3, [r0, #0]
 80214e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80214ea:	4798      	blx	r3
 80214ec:	4b99      	ldr	r3, [pc, #612]	@ (8021754 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 80214ee:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 80214f2:	f1b8 0f00 	cmp.w	r8, #0
 80214f6:	881a      	ldrh	r2, [r3, #0]
 80214f8:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 80214fc:	fb02 f505 	mul.w	r5, r2, r5
 8021500:	fb02 7101 	mla	r1, r2, r1, r7
 8021504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021508:	9314      	str	r3, [sp, #80]	@ 0x50
 802150a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802150e:	9b08      	ldr	r3, [sp, #32]
 8021510:	fb96 f6fa 	sdiv	r6, r6, sl
 8021514:	4408      	add	r0, r1
 8021516:	f106 0601 	add.w	r6, r6, #1
 802151a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 802151e:	f04f 0100 	mov.w	r1, #0
 8021522:	eb00 0205 	add.w	r2, r0, r5
 8021526:	b2b6      	uxth	r6, r6
 8021528:	b29b      	uxth	r3, r3
 802152a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802152c:	9209      	str	r2, [sp, #36]	@ 0x24
 802152e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021530:	930d      	str	r3, [sp, #52]	@ 0x34
 8021532:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021536:	4b88      	ldr	r3, [pc, #544]	@ (8021758 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8021538:	f106 0204 	add.w	r2, r6, #4
 802153c:	eba3 0304 	sub.w	r3, r3, r4
 8021540:	9205      	str	r2, [sp, #20]
 8021542:	9a03      	ldr	r2, [sp, #12]
 8021544:	bf18      	it	ne
 8021546:	2200      	movne	r2, #0
 8021548:	9315      	str	r3, [sp, #84]	@ 0x54
 802154a:	b292      	uxth	r2, r2
 802154c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802154e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021550:	fa11 f383 	uxtah	r3, r1, r3
 8021554:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021556:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802155a:	3304      	adds	r3, #4
 802155c:	9306      	str	r3, [sp, #24]
 802155e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021560:	4283      	cmp	r3, r0
 8021562:	f240 816f 	bls.w	8021844 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8021566:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 802156a:	f04f 0900 	mov.w	r9, #0
 802156e:	9d06      	ldr	r5, [sp, #24]
 8021570:	fbb8 f3f3 	udiv	r3, r8, r3
 8021574:	ebaa 0303 	sub.w	r3, sl, r3
 8021578:	782d      	ldrb	r5, [r5, #0]
 802157a:	b29b      	uxth	r3, r3
 802157c:	950f      	str	r5, [sp, #60]	@ 0x3c
 802157e:	3501      	adds	r5, #1
 8021580:	9312      	str	r3, [sp, #72]	@ 0x48
 8021582:	9b06      	ldr	r3, [sp, #24]
 8021584:	9504      	str	r5, [sp, #16]
 8021586:	7859      	ldrb	r1, [r3, #1]
 8021588:	789b      	ldrb	r3, [r3, #2]
 802158a:	021b      	lsls	r3, r3, #8
 802158c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8021590:	9906      	ldr	r1, [sp, #24]
 8021592:	78c9      	ldrb	r1, [r1, #3]
 8021594:	430b      	orrs	r3, r1
 8021596:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021598:	4419      	add	r1, r3
 802159a:	1c4d      	adds	r5, r1, #1
 802159c:	7849      	ldrb	r1, [r1, #1]
 802159e:	9502      	str	r5, [sp, #8]
 80215a0:	0209      	lsls	r1, r1, #8
 80215a2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80215a4:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 80215a8:	5ceb      	ldrb	r3, [r5, r3]
 80215aa:	4319      	orrs	r1, r3
 80215ac:	b28b      	uxth	r3, r1
 80215ae:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80215b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80215b4:	2300      	movs	r3, #0
 80215b6:	9307      	str	r3, [sp, #28]
 80215b8:	2301      	movs	r3, #1
 80215ba:	e9cd 3300 	strd	r3, r3, [sp]
 80215be:	469c      	mov	ip, r3
 80215c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80215c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80215c6:	f1b8 0f00 	cmp.w	r8, #0
 80215ca:	f000 8082 	beq.w	80216d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 80215ce:	45c4      	cmp	ip, r8
 80215d0:	d270      	bcs.n	80216b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80215d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215d4:	eba8 080c 	sub.w	r8, r8, ip
 80215d8:	4611      	mov	r1, r2
 80215da:	4283      	cmp	r3, r0
 80215dc:	fa1f f888 	uxth.w	r8, r8
 80215e0:	d802      	bhi.n	80215e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 80215e2:	e074      	b.n	80216ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d15f      	bne.n	80216a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80215e8:	9b02      	ldr	r3, [sp, #8]
 80215ea:	9a01      	ldr	r2, [sp, #4]
 80215ec:	785b      	ldrb	r3, [r3, #1]
 80215ee:	f1c2 0207 	rsb	r2, r2, #7
 80215f2:	9d01      	ldr	r5, [sp, #4]
 80215f4:	4093      	lsls	r3, r2
 80215f6:	005b      	lsls	r3, r3, #1
 80215f8:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80215fc:	9b02      	ldr	r3, [sp, #8]
 80215fe:	781b      	ldrb	r3, [r3, #0]
 8021600:	412b      	asrs	r3, r5
 8021602:	b2db      	uxtb	r3, r3
 8021604:	4313      	orrs	r3, r2
 8021606:	462a      	mov	r2, r5
 8021608:	3201      	adds	r2, #1
 802160a:	b29e      	uxth	r6, r3
 802160c:	b2d2      	uxtb	r2, r2
 802160e:	2a08      	cmp	r2, #8
 8021610:	9201      	str	r2, [sp, #4]
 8021612:	9a02      	ldr	r2, [sp, #8]
 8021614:	bf09      	itett	eq
 8021616:	3202      	addeq	r2, #2
 8021618:	3201      	addne	r2, #1
 802161a:	9202      	streq	r2, [sp, #8]
 802161c:	2200      	moveq	r2, #0
 802161e:	bf14      	ite	ne
 8021620:	9202      	strne	r2, [sp, #8]
 8021622:	9201      	streq	r2, [sp, #4]
 8021624:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021626:	42b2      	cmp	r2, r6
 8021628:	d309      	bcc.n	802163e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 802162a:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 802162e:	2301      	movs	r3, #1
 8021630:	9a04      	ldr	r2, [sp, #16]
 8021632:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8021636:	d30e      	bcc.n	8021656 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021638:	9300      	str	r3, [sp, #0]
 802163a:	2500      	movs	r5, #0
 802163c:	e035      	b.n	80216aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 802163e:	9b04      	ldr	r3, [sp, #16]
 8021640:	429e      	cmp	r6, r3
 8021642:	d318      	bcc.n	8021676 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8021644:	9b00      	ldr	r3, [sp, #0]
 8021646:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 802164a:	18e3      	adds	r3, r4, r3
 802164c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8021650:	9b00      	ldr	r3, [sp, #0]
 8021652:	3301      	adds	r3, #1
 8021654:	b29b      	uxth	r3, r3
 8021656:	9a04      	ldr	r2, [sp, #16]
 8021658:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 802165c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021660:	9f00      	ldr	r7, [sp, #0]
 8021662:	7115      	strb	r5, [r2, #4]
 8021664:	3701      	adds	r7, #1
 8021666:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021668:	7157      	strb	r7, [r2, #5]
 802166a:	80d5      	strh	r5, [r2, #6]
 802166c:	9a04      	ldr	r2, [sp, #16]
 802166e:	3201      	adds	r2, #1
 8021670:	b292      	uxth	r2, r2
 8021672:	9204      	str	r2, [sp, #16]
 8021674:	e7e0      	b.n	8021638 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8021676:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802167a:	4632      	mov	r2, r6
 802167c:	795b      	ldrb	r3, [r3, #5]
 802167e:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8021682:	4425      	add	r5, r4
 8021684:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8021686:	eb07 0c05 	add.w	ip, r7, r5
 802168a:	f1bc 0f00 	cmp.w	ip, #0
 802168e:	dd07      	ble.n	80216a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8021690:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021694:	f892 c004 	ldrb.w	ip, [r2, #4]
 8021698:	f805 cd01 	strb.w	ip, [r5, #-1]!
 802169c:	88d2      	ldrh	r2, [r2, #6]
 802169e:	e7f1      	b.n	8021684 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 80216a0:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80216a4:	b29b      	uxth	r3, r3
 80216a6:	e7c3      	b.n	8021630 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 80216a8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80216aa:	460a      	mov	r2, r1
 80216ac:	960a      	str	r6, [sp, #40]	@ 0x28
 80216ae:	46a9      	mov	r9, r5
 80216b0:	469c      	mov	ip, r3
 80216b2:	e788      	b.n	80215c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80216b4:	ebac 0308 	sub.w	r3, ip, r8
 80216b8:	eb09 0508 	add.w	r5, r9, r8
 80216bc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80216c0:	b29b      	uxth	r3, r3
 80216c2:	b2ad      	uxth	r5, r5
 80216c4:	f04f 0800 	mov.w	r8, #0
 80216c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80216ca:	4282      	cmp	r2, r0
 80216cc:	d88a      	bhi.n	80215e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 80216ce:	460a      	mov	r2, r1
 80216d0:	e745      	b.n	802155e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 80216d2:	4594      	cmp	ip, r2
 80216d4:	9d08      	ldr	r5, [sp, #32]
 80216d6:	4686      	mov	lr, r0
 80216d8:	bf27      	ittee	cs
 80216da:	ebac 0302 	subcs.w	r3, ip, r2
 80216de:	4616      	movcs	r6, r2
 80216e0:	eba2 010c 	subcc.w	r1, r2, ip
 80216e4:	4666      	movcc	r6, ip
 80216e6:	bf27      	ittee	cs
 80216e8:	b29b      	uxthcs	r3, r3
 80216ea:	4641      	movcs	r1, r8
 80216ec:	b289      	uxthcc	r1, r1
 80216ee:	4643      	movcc	r3, r8
 80216f0:	2dff      	cmp	r5, #255	@ 0xff
 80216f2:	eb09 0506 	add.w	r5, r9, r6
 80216f6:	b2ad      	uxth	r5, r5
 80216f8:	d130      	bne.n	802175c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80216fa:	45a9      	cmp	r9, r5
 80216fc:	f10e 0e03 	add.w	lr, lr, #3
 8021700:	d17a      	bne.n	80217f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8021702:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021706:	4594      	cmp	ip, r2
 8021708:	4430      	add	r0, r6
 802170a:	d3db      	bcc.n	80216c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 802170c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802170e:	9903      	ldr	r1, [sp, #12]
 8021710:	8812      	ldrh	r2, [r2, #0]
 8021712:	1a52      	subs	r2, r2, r1
 8021714:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021716:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802171a:	4410      	add	r0, r2
 802171c:	9a07      	ldr	r2, [sp, #28]
 802171e:	3201      	adds	r2, #1
 8021720:	428a      	cmp	r2, r1
 8021722:	9207      	str	r2, [sp, #28]
 8021724:	f040 8081 	bne.w	802182a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8021728:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 802172c:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8021730:	9b03      	ldr	r3, [sp, #12]
 8021732:	eba8 080c 	sub.w	r8, r8, ip
 8021736:	fa1f f888 	uxth.w	r8, r8
 802173a:	f1b8 0f00 	cmp.w	r8, #0
 802173e:	bf08      	it	eq
 8021740:	461a      	moveq	r2, r3
 8021742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021744:	bf18      	it	ne
 8021746:	2200      	movne	r2, #0
 8021748:	3301      	adds	r3, #1
 802174a:	b292      	uxth	r2, r2
 802174c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802174e:	e6fd      	b.n	802154c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8021750:	24028770 	.word	0x24028770
 8021754:	2402876a 	.word	0x2402876a
 8021758:	fffff7fb 	.word	0xfffff7fb
 802175c:	45a9      	cmp	r9, r5
 802175e:	f10e 0e03 	add.w	lr, lr, #3
 8021762:	d0ce      	beq.n	8021702 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8021764:	f109 0701 	add.w	r7, r9, #1
 8021768:	44a1      	add	r9, r4
 802176a:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 802176e:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8021772:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021774:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021778:	9f05      	ldr	r7, [sp, #20]
 802177a:	eb07 0908 	add.w	r9, r7, r8
 802177e:	f817 8008 	ldrb.w	r8, [r7, r8]
 8021782:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8021784:	fb1b fb07 	smulbb	fp, fp, r7
 8021788:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802178a:	fb08 b807 	mla	r8, r8, r7, fp
 802178e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8021790:	fa1f f888 	uxth.w	r8, r8
 8021794:	f108 0b01 	add.w	fp, r8, #1
 8021798:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802179c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 80217a0:	fb1b fb07 	smulbb	fp, fp, r7
 80217a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80217a8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80217aa:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80217ae:	f899 8001 	ldrb.w	r8, [r9, #1]
 80217b2:	fb08 b807 	mla	r8, r8, r7, fp
 80217b6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80217b8:	fa1f f888 	uxth.w	r8, r8
 80217bc:	f108 0b01 	add.w	fp, r8, #1
 80217c0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80217c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80217c8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80217cc:	f899 8002 	ldrb.w	r8, [r9, #2]
 80217d0:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 80217d4:	fb19 f907 	smulbb	r9, r9, r7
 80217d8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80217da:	fb08 9807 	mla	r8, r8, r7, r9
 80217de:	fa1f f888 	uxth.w	r8, r8
 80217e2:	f108 0901 	add.w	r9, r8, #1
 80217e6:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80217ea:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 80217ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 80217f2:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80217f6:	e7b1      	b.n	802175c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80217f8:	f109 0b01 	add.w	fp, r9, #1
 80217fc:	44a1      	add	r9, r4
 80217fe:	9f05      	ldr	r7, [sp, #20]
 8021800:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8021804:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021808:	eb07 0908 	add.w	r9, r7, r8
 802180c:	f817 8008 	ldrb.w	r8, [r7, r8]
 8021810:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8021814:	f899 8001 	ldrb.w	r8, [r9, #1]
 8021818:	f80e 8c02 	strb.w	r8, [lr, #-2]
 802181c:	f899 8002 	ldrb.w	r8, [r9, #2]
 8021820:	fa1f f98b 	uxth.w	r9, fp
 8021824:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8021828:	e767      	b.n	80216fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 802182a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802182e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8021832:	eba8 0801 	sub.w	r8, r8, r1
 8021836:	fa1f f888 	uxth.w	r8, r8
 802183a:	f1b8 0f00 	cmp.w	r8, #0
 802183e:	bf18      	it	ne
 8021840:	2100      	movne	r1, #0
 8021842:	e741      	b.n	80216c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8021844:	4b03      	ldr	r3, [pc, #12]	@ (8021854 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8021846:	6818      	ldr	r0, [r3, #0]
 8021848:	6803      	ldr	r3, [r0, #0]
 802184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802184c:	4798      	blx	r3
 802184e:	b01b      	add	sp, #108	@ 0x6c
 8021850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021854:	24028770 	.word	0x24028770

08021858 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802185c:	b09d      	sub	sp, #116	@ 0x74
 802185e:	461d      	mov	r5, r3
 8021860:	4604      	mov	r4, r0
 8021862:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021864:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8021868:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 802186c:	920c      	str	r2, [sp, #48]	@ 0x30
 802186e:	2a00      	cmp	r2, #0
 8021870:	f000 81de 	beq.w	8021c30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8021874:	6828      	ldr	r0, [r5, #0]
 8021876:	aa18      	add	r2, sp, #96	@ 0x60
 8021878:	6869      	ldr	r1, [r5, #4]
 802187a:	c203      	stmia	r2!, {r0, r1}
 802187c:	6818      	ldr	r0, [r3, #0]
 802187e:	aa1a      	add	r2, sp, #104	@ 0x68
 8021880:	6859      	ldr	r1, [r3, #4]
 8021882:	c203      	stmia	r2!, {r0, r1}
 8021884:	a818      	add	r0, sp, #96	@ 0x60
 8021886:	f7f9 fac5 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802188a:	4629      	mov	r1, r5
 802188c:	a81a      	add	r0, sp, #104	@ 0x68
 802188e:	f7f9 fb05 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021892:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8021896:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 802189a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802189e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80218a2:	bfdb      	ittet	le
 80218a4:	b29a      	uxthle	r2, r3
 80218a6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80218aa:	2201      	movgt	r2, #1
 80218ac:	fb91 f2f2 	sdivle	r2, r1, r2
 80218b0:	9201      	str	r2, [sp, #4]
 80218b2:	9801      	ldr	r0, [sp, #4]
 80218b4:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80218b8:	9901      	ldr	r1, [sp, #4]
 80218ba:	fb92 f0f0 	sdiv	r0, r2, r0
 80218be:	b280      	uxth	r0, r0
 80218c0:	440f      	add	r7, r1
 80218c2:	900d      	str	r0, [sp, #52]	@ 0x34
 80218c4:	3f01      	subs	r7, #1
 80218c6:	9801      	ldr	r0, [sp, #4]
 80218c8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80218ca:	fb05 2510 	mls	r5, r5, r0, r2
 80218ce:	fb97 f7f1 	sdiv	r7, r7, r1
 80218d2:	fb15 f503 	smulbb	r5, r5, r3
 80218d6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 80218da:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80218de:	3701      	adds	r7, #1
 80218e0:	440d      	add	r5, r1
 80218e2:	4419      	add	r1, r3
 80218e4:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 80218e8:	b2bf      	uxth	r7, r7
 80218ea:	441a      	add	r2, r3
 80218ec:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80218f0:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 80218f4:	00bf      	lsls	r7, r7, #2
 80218f6:	9304      	str	r3, [sp, #16]
 80218f8:	b2ad      	uxth	r5, r5
 80218fa:	4bb0      	ldr	r3, [pc, #704]	@ (8021bbc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 80218fc:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8021900:	6818      	ldr	r0, [r3, #0]
 8021902:	6803      	ldr	r3, [r0, #0]
 8021904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021906:	4798      	blx	r3
 8021908:	4bad      	ldr	r3, [pc, #692]	@ (8021bc0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 802190a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 802190e:	2d00      	cmp	r5, #0
 8021910:	881a      	ldrh	r2, [r3, #0]
 8021912:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8021916:	fb02 f606 	mul.w	r6, r2, r6
 802191a:	fb02 c101 	mla	r1, r2, r1, ip
 802191e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021922:	9316      	str	r3, [sp, #88]	@ 0x58
 8021924:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021928:	4ba6      	ldr	r3, [pc, #664]	@ (8021bc4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 802192a:	eb00 0801 	add.w	r8, r0, r1
 802192e:	bf18      	it	ne
 8021930:	2100      	movne	r1, #0
 8021932:	eba3 0304 	sub.w	r3, r3, r4
 8021936:	eb08 0206 	add.w	r2, r8, r6
 802193a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802193c:	9208      	str	r2, [sp, #32]
 802193e:	f107 0204 	add.w	r2, r7, #4
 8021942:	9211      	str	r2, [sp, #68]	@ 0x44
 8021944:	9a04      	ldr	r2, [sp, #16]
 8021946:	bf08      	it	eq
 8021948:	4611      	moveq	r1, r2
 802194a:	2200      	movs	r2, #0
 802194c:	b289      	uxth	r1, r1
 802194e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021950:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021952:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021954:	fa12 f383 	uxtah	r3, r2, r3
 8021958:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802195a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802195e:	3304      	adds	r3, #4
 8021960:	9306      	str	r3, [sp, #24]
 8021962:	9b08      	ldr	r3, [sp, #32]
 8021964:	4543      	cmp	r3, r8
 8021966:	f240 815e 	bls.w	8021c26 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 802196a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 802196e:	f04f 0b01 	mov.w	fp, #1
 8021972:	9a01      	ldr	r2, [sp, #4]
 8021974:	9806      	ldr	r0, [sp, #24]
 8021976:	465e      	mov	r6, fp
 8021978:	f8cd b008 	str.w	fp, [sp, #8]
 802197c:	7800      	ldrb	r0, [r0, #0]
 802197e:	fbb5 f3f3 	udiv	r3, r5, r3
 8021982:	1ad3      	subs	r3, r2, r3
 8021984:	900e      	str	r0, [sp, #56]	@ 0x38
 8021986:	3001      	adds	r0, #1
 8021988:	b29b      	uxth	r3, r3
 802198a:	9005      	str	r0, [sp, #20]
 802198c:	9312      	str	r3, [sp, #72]	@ 0x48
 802198e:	9b06      	ldr	r3, [sp, #24]
 8021990:	785a      	ldrb	r2, [r3, #1]
 8021992:	789b      	ldrb	r3, [r3, #2]
 8021994:	021b      	lsls	r3, r3, #8
 8021996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802199a:	9a06      	ldr	r2, [sp, #24]
 802199c:	78d2      	ldrb	r2, [r2, #3]
 802199e:	4313      	orrs	r3, r2
 80219a0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80219a2:	441a      	add	r2, r3
 80219a4:	1c50      	adds	r0, r2, #1
 80219a6:	7852      	ldrb	r2, [r2, #1]
 80219a8:	9003      	str	r0, [sp, #12]
 80219aa:	0212      	lsls	r2, r2, #8
 80219ac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80219ae:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80219b2:	5cc3      	ldrb	r3, [r0, r3]
 80219b4:	431a      	orrs	r2, r3
 80219b6:	b293      	uxth	r3, r2
 80219b8:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80219bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80219be:	2300      	movs	r3, #0
 80219c0:	461a      	mov	r2, r3
 80219c2:	9307      	str	r3, [sp, #28]
 80219c4:	2d00      	cmp	r5, #0
 80219c6:	d07c      	beq.n	8021ac2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 80219c8:	42ae      	cmp	r6, r5
 80219ca:	d26c      	bcs.n	8021aa6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 80219cc:	9b08      	ldr	r3, [sp, #32]
 80219ce:	1bad      	subs	r5, r5, r6
 80219d0:	4608      	mov	r0, r1
 80219d2:	4543      	cmp	r3, r8
 80219d4:	b2ad      	uxth	r5, r5
 80219d6:	d802      	bhi.n	80219de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 80219d8:	e071      	b.n	8021abe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 80219da:	2b00      	cmp	r3, #0
 80219dc:	d15d      	bne.n	8021a9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 80219de:	9b03      	ldr	r3, [sp, #12]
 80219e0:	9a02      	ldr	r2, [sp, #8]
 80219e2:	785b      	ldrb	r3, [r3, #1]
 80219e4:	f1c2 0207 	rsb	r2, r2, #7
 80219e8:	9902      	ldr	r1, [sp, #8]
 80219ea:	4093      	lsls	r3, r2
 80219ec:	005b      	lsls	r3, r3, #1
 80219ee:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80219f2:	9b03      	ldr	r3, [sp, #12]
 80219f4:	781b      	ldrb	r3, [r3, #0]
 80219f6:	410b      	asrs	r3, r1
 80219f8:	3101      	adds	r1, #1
 80219fa:	b2c9      	uxtb	r1, r1
 80219fc:	b2db      	uxtb	r3, r3
 80219fe:	2908      	cmp	r1, #8
 8021a00:	9102      	str	r1, [sp, #8]
 8021a02:	9903      	ldr	r1, [sp, #12]
 8021a04:	ea43 0302 	orr.w	r3, r3, r2
 8021a08:	bf0c      	ite	eq
 8021a0a:	3102      	addeq	r1, #2
 8021a0c:	3101      	addne	r1, #1
 8021a0e:	b29a      	uxth	r2, r3
 8021a10:	bf05      	ittet	eq
 8021a12:	9103      	streq	r1, [sp, #12]
 8021a14:	2100      	moveq	r1, #0
 8021a16:	9103      	strne	r1, [sp, #12]
 8021a18:	9102      	streq	r1, [sp, #8]
 8021a1a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021a1c:	4291      	cmp	r1, r2
 8021a1e:	d30a      	bcc.n	8021a36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8021a20:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8021a24:	2301      	movs	r3, #1
 8021a26:	9905      	ldr	r1, [sp, #20]
 8021a28:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021a2c:	d30f      	bcc.n	8021a4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8021a2e:	469b      	mov	fp, r3
 8021a30:	f04f 0c00 	mov.w	ip, #0
 8021a34:	e032      	b.n	8021a9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8021a36:	9b05      	ldr	r3, [sp, #20]
 8021a38:	429a      	cmp	r2, r3
 8021a3a:	d318      	bcc.n	8021a6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8021a3c:	eb04 030b 	add.w	r3, r4, fp
 8021a40:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8021a44:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021a48:	f10b 0301 	add.w	r3, fp, #1
 8021a4c:	b29b      	uxth	r3, r3
 8021a4e:	9905      	ldr	r1, [sp, #20]
 8021a50:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8021a54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021a58:	710e      	strb	r6, [r1, #4]
 8021a5a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8021a5c:	80ce      	strh	r6, [r1, #6]
 8021a5e:	f10b 0601 	add.w	r6, fp, #1
 8021a62:	714e      	strb	r6, [r1, #5]
 8021a64:	9905      	ldr	r1, [sp, #20]
 8021a66:	3101      	adds	r1, #1
 8021a68:	b289      	uxth	r1, r1
 8021a6a:	9105      	str	r1, [sp, #20]
 8021a6c:	e7df      	b.n	8021a2e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8021a6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021a72:	4611      	mov	r1, r2
 8021a74:	795b      	ldrb	r3, [r3, #5]
 8021a76:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8021a7a:	4426      	add	r6, r4
 8021a7c:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021a7e:	4437      	add	r7, r6
 8021a80:	2f00      	cmp	r7, #0
 8021a82:	dd06      	ble.n	8021a92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8021a84:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021a88:	790f      	ldrb	r7, [r1, #4]
 8021a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021a8e:	88c9      	ldrh	r1, [r1, #6]
 8021a90:	e7f4      	b.n	8021a7c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8021a92:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8021a96:	b29b      	uxth	r3, r3
 8021a98:	e7c5      	b.n	8021a26 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8021a9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021a9c:	920a      	str	r2, [sp, #40]	@ 0x28
 8021a9e:	4601      	mov	r1, r0
 8021aa0:	4662      	mov	r2, ip
 8021aa2:	461e      	mov	r6, r3
 8021aa4:	e78e      	b.n	80219c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8021aa6:	1b73      	subs	r3, r6, r5
 8021aa8:	eb02 0c05 	add.w	ip, r2, r5
 8021aac:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021ab0:	b29b      	uxth	r3, r3
 8021ab2:	fa1f fc8c 	uxth.w	ip, ip
 8021ab6:	2500      	movs	r5, #0
 8021ab8:	9a08      	ldr	r2, [sp, #32]
 8021aba:	4542      	cmp	r2, r8
 8021abc:	d88d      	bhi.n	80219da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8021abe:	4601      	mov	r1, r0
 8021ac0:	e74f      	b.n	8021962 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8021ac2:	428e      	cmp	r6, r1
 8021ac4:	bf2b      	itete	cs
 8021ac6:	468e      	movcs	lr, r1
 8021ac8:	46b6      	movcc	lr, r6
 8021aca:	1a73      	subcs	r3, r6, r1
 8021acc:	1b88      	subcc	r0, r1, r6
 8021ace:	eb02 0c0e 	add.w	ip, r2, lr
 8021ad2:	bf2b      	itete	cs
 8021ad4:	4628      	movcs	r0, r5
 8021ad6:	462b      	movcc	r3, r5
 8021ad8:	b29b      	uxthcs	r3, r3
 8021ada:	b280      	uxthcc	r0, r0
 8021adc:	f108 0503 	add.w	r5, r8, #3
 8021ae0:	fa1f fc8c 	uxth.w	ip, ip
 8021ae4:	4562      	cmp	r2, ip
 8021ae6:	d06f      	beq.n	8021bc8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8021ae8:	1c57      	adds	r7, r2, #1
 8021aea:	4422      	add	r2, r4
 8021aec:	b2bf      	uxth	r7, r7
 8021aee:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8021af2:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021af4:	2704      	movs	r7, #4
 8021af6:	46b9      	mov	r9, r7
 8021af8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8021afa:	fb19 7202 	smlabb	r2, r9, r2, r7
 8021afe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021b00:	58bf      	ldr	r7, [r7, r2]
 8021b02:	0e3a      	lsrs	r2, r7, #24
 8021b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8021b06:	d016      	beq.n	8021b36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8021b08:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8021b0c:	fa5f fa87 	uxtb.w	sl, r7
 8021b10:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8021b14:	fa5f f289 	uxtb.w	r2, r9
 8021b18:	9214      	str	r2, [sp, #80]	@ 0x50
 8021b1a:	b2fa      	uxtb	r2, r7
 8021b1c:	9215      	str	r2, [sp, #84]	@ 0x54
 8021b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021b20:	2aff      	cmp	r2, #255	@ 0xff
 8021b22:	d10b      	bne.n	8021b3c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8021b24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021b26:	2aff      	cmp	r2, #255	@ 0xff
 8021b28:	d108      	bne.n	8021b3c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8021b2a:	f805 ac03 	strb.w	sl, [r5, #-3]
 8021b2e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8021b32:	f805 7c01 	strb.w	r7, [r5, #-1]
 8021b36:	3503      	adds	r5, #3
 8021b38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021b3a:	e7d3      	b.n	8021ae4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8021b3c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021b3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021b40:	437a      	muls	r2, r7
 8021b42:	1c57      	adds	r7, r2, #1
 8021b44:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8021b48:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8021b4c:	1212      	asrs	r2, r2, #8
 8021b4e:	fa1f f982 	uxth.w	r9, r2
 8021b52:	43d2      	mvns	r2, r2
 8021b54:	fb1a fa09 	smulbb	sl, sl, r9
 8021b58:	b2d2      	uxtb	r2, r2
 8021b5a:	fb07 a702 	mla	r7, r7, r2, sl
 8021b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021b60:	b2bf      	uxth	r7, r7
 8021b62:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021b64:	f107 0a01 	add.w	sl, r7, #1
 8021b68:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021b6c:	fb12 fa09 	smulbb	sl, r2, r9
 8021b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021b72:	123f      	asrs	r7, r7, #8
 8021b74:	f805 7c03 	strb.w	r7, [r5, #-3]
 8021b78:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8021b7c:	fb07 aa02 	mla	sl, r7, r2, sl
 8021b80:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021b82:	fb12 f909 	smulbb	r9, r2, r9
 8021b86:	fa1f fa8a 	uxth.w	sl, sl
 8021b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021b8c:	f10a 0701 	add.w	r7, sl, #1
 8021b90:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021b94:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8021b98:	fb07 9902 	mla	r9, r7, r2, r9
 8021b9c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021ba0:	fa1f f989 	uxth.w	r9, r9
 8021ba4:	f805 ac02 	strb.w	sl, [r5, #-2]
 8021ba8:	f109 0201 	add.w	r2, r9, #1
 8021bac:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021bb0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021bb4:	f805 9c01 	strb.w	r9, [r5, #-1]
 8021bb8:	e7bd      	b.n	8021b36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8021bba:	bf00      	nop
 8021bbc:	24028770 	.word	0x24028770
 8021bc0:	2402876a 	.word	0x2402876a
 8021bc4:	fffff7fb 	.word	0xfffff7fb
 8021bc8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021bcc:	428e      	cmp	r6, r1
 8021bce:	44f0      	add	r8, lr
 8021bd0:	f4ff af71 	bcc.w	8021ab6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8021bd4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021bd6:	9904      	ldr	r1, [sp, #16]
 8021bd8:	8812      	ldrh	r2, [r2, #0]
 8021bda:	1a52      	subs	r2, r2, r1
 8021bdc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021bde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021be2:	4490      	add	r8, r2
 8021be4:	9a07      	ldr	r2, [sp, #28]
 8021be6:	3201      	adds	r2, #1
 8021be8:	428a      	cmp	r2, r1
 8021bea:	9207      	str	r2, [sp, #28]
 8021bec:	d111      	bne.n	8021c12 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8021bee:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8021bf2:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8021bf6:	9b04      	ldr	r3, [sp, #16]
 8021bf8:	eba5 050c 	sub.w	r5, r5, ip
 8021bfc:	b2ad      	uxth	r5, r5
 8021bfe:	2d00      	cmp	r5, #0
 8021c00:	bf08      	it	eq
 8021c02:	4619      	moveq	r1, r3
 8021c04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021c06:	bf18      	it	ne
 8021c08:	2100      	movne	r1, #0
 8021c0a:	3301      	adds	r3, #1
 8021c0c:	b289      	uxth	r1, r1
 8021c0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c10:	e69e      	b.n	8021950 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8021c12:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021c16:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8021c1a:	1a2d      	subs	r5, r5, r0
 8021c1c:	b2ad      	uxth	r5, r5
 8021c1e:	2d00      	cmp	r5, #0
 8021c20:	bf18      	it	ne
 8021c22:	2000      	movne	r0, #0
 8021c24:	e748      	b.n	8021ab8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8021c26:	4b04      	ldr	r3, [pc, #16]	@ (8021c38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8021c28:	6818      	ldr	r0, [r3, #0]
 8021c2a:	6803      	ldr	r3, [r0, #0]
 8021c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c2e:	4798      	blx	r3
 8021c30:	b01d      	add	sp, #116	@ 0x74
 8021c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c36:	bf00      	nop
 8021c38:	24028770 	.word	0x24028770

08021c3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8021c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c40:	b08f      	sub	sp, #60	@ 0x3c
 8021c42:	4616      	mov	r6, r2
 8021c44:	4681      	mov	r9, r0
 8021c46:	460d      	mov	r5, r1
 8021c48:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8021c4c:	9205      	str	r2, [sp, #20]
 8021c4e:	2a00      	cmp	r2, #0
 8021c50:	f000 82a8 	beq.w	80221a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8021c54:	6830      	ldr	r0, [r6, #0]
 8021c56:	ac0a      	add	r4, sp, #40	@ 0x28
 8021c58:	6871      	ldr	r1, [r6, #4]
 8021c5a:	c403      	stmia	r4!, {r0, r1}
 8021c5c:	6818      	ldr	r0, [r3, #0]
 8021c5e:	ac0c      	add	r4, sp, #48	@ 0x30
 8021c60:	6859      	ldr	r1, [r3, #4]
 8021c62:	c403      	stmia	r4!, {r0, r1}
 8021c64:	a80a      	add	r0, sp, #40	@ 0x28
 8021c66:	f7f9 f8d5 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c6a:	4631      	mov	r1, r6
 8021c6c:	a80c      	add	r0, sp, #48	@ 0x30
 8021c6e:	f7f9 f915 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021c72:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8021c76:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8021c7a:	bfdb      	ittet	le
 8021c7c:	b293      	uxthle	r3, r2
 8021c7e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021c82:	2301      	movgt	r3, #1
 8021c84:	fb91 f3f3 	sdivle	r3, r1, r3
 8021c88:	9300      	str	r3, [sp, #0]
 8021c8a:	f105 0308 	add.w	r3, r5, #8
 8021c8e:	9900      	ldr	r1, [sp, #0]
 8021c90:	9306      	str	r3, [sp, #24]
 8021c92:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8021c96:	440b      	add	r3, r1
 8021c98:	3b01      	subs	r3, #1
 8021c9a:	fb93 f3f1 	sdiv	r3, r3, r1
 8021c9e:	3b01      	subs	r3, #1
 8021ca0:	9906      	ldr	r1, [sp, #24]
 8021ca2:	b29b      	uxth	r3, r3
 8021ca4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021ca8:	9900      	ldr	r1, [sp, #0]
 8021caa:	9307      	str	r3, [sp, #28]
 8021cac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021cb0:	fb93 f0f1 	sdiv	r0, r3, r1
 8021cb4:	b284      	uxth	r4, r0
 8021cb6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021cba:	b280      	uxth	r0, r0
 8021cbc:	9402      	str	r4, [sp, #8]
 8021cbe:	9d02      	ldr	r5, [sp, #8]
 8021cc0:	9c00      	ldr	r4, [sp, #0]
 8021cc2:	fb05 3514 	mls	r5, r5, r4, r3
 8021cc6:	fb15 f502 	smulbb	r5, r5, r2
 8021cca:	440d      	add	r5, r1
 8021ccc:	b2ad      	uxth	r5, r5
 8021cce:	2800      	cmp	r0, #0
 8021cd0:	d071      	beq.n	8021db6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8021cd2:	1e42      	subs	r2, r0, #1
 8021cd4:	9806      	ldr	r0, [sp, #24]
 8021cd6:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8021cda:	9a07      	ldr	r2, [sp, #28]
 8021cdc:	fa98 f888 	rev.w	r8, r8
 8021ce0:	4490      	add	r8, r2
 8021ce2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8021ce6:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8021cea:	4411      	add	r1, r2
 8021cec:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021cf0:	f8df b348 	ldr.w	fp, [pc, #840]	@ 802203c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8021cf4:	4413      	add	r3, r2
 8021cf6:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8021cfa:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021cfe:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021d02:	9301      	str	r3, [sp, #4]
 8021d04:	4bcb      	ldr	r3, [pc, #812]	@ (8022034 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 8021d06:	6818      	ldr	r0, [r3, #0]
 8021d08:	6803      	ldr	r3, [r0, #0]
 8021d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021d0c:	4798      	blx	r3
 8021d0e:	4bca      	ldr	r3, [pc, #808]	@ (8022038 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8021d10:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021d14:	881b      	ldrh	r3, [r3, #0]
 8021d16:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8021d1a:	fb03 2707 	mla	r7, r3, r7, r2
 8021d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021d22:	4363      	muls	r3, r4
 8021d24:	2400      	movs	r4, #0
 8021d26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021d2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d2e:	4621      	mov	r1, r4
 8021d30:	4407      	add	r7, r0
 8021d32:	18fb      	adds	r3, r7, r3
 8021d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d36:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021d3a:	fb95 f3f3 	sdiv	r3, r5, r3
 8021d3e:	9304      	str	r3, [sp, #16]
 8021d40:	f109 0304 	add.w	r3, r9, #4
 8021d44:	4618      	mov	r0, r3
 8021d46:	9308      	str	r3, [sp, #32]
 8021d48:	f009 fbbc 	bl	802b4c4 <memset>
 8021d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d4e:	42bb      	cmp	r3, r7
 8021d50:	f240 8223 	bls.w	802219a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8021d54:	2003      	movs	r0, #3
 8021d56:	f04f 0c07 	mov.w	ip, #7
 8021d5a:	f04f 0e0b 	mov.w	lr, #11
 8021d5e:	2d00      	cmp	r5, #0
 8021d60:	f000 813c 	beq.w	8021fdc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8021d64:	f898 3000 	ldrb.w	r3, [r8]
 8021d68:	b2db      	uxtb	r3, r3
 8021d6a:	2bfe      	cmp	r3, #254	@ 0xfe
 8021d6c:	d126      	bne.n	8021dbc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 8021d6e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021d72:	f108 0604 	add.w	r6, r8, #4
 8021d76:	f898 2002 	ldrb.w	r2, [r8, #2]
 8021d7a:	3d01      	subs	r5, #1
 8021d7c:	b2c9      	uxtb	r1, r1
 8021d7e:	f898 8003 	ldrb.w	r8, [r8, #3]
 8021d82:	b2d2      	uxtb	r2, r2
 8021d84:	f361 0407 	bfi	r4, r1, #0, #8
 8021d88:	fa5f f888 	uxtb.w	r8, r8
 8021d8c:	b2ad      	uxth	r5, r5
 8021d8e:	f362 240f 	bfi	r4, r2, #8, #8
 8021d92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021d96:	fb10 2208 	smlabb	r2, r0, r8, r2
 8021d9a:	f368 4417 	bfi	r4, r8, #16, #8
 8021d9e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8021da2:	0e23      	lsrs	r3, r4, #24
 8021da4:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8021da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021dac:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021db0:	605c      	str	r4, [r3, #4]
 8021db2:	46b0      	mov	r8, r6
 8021db4:	e7d3      	b.n	8021d5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 8021db6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8021dba:	e792      	b.n	8021ce2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8021dbc:	2bff      	cmp	r3, #255	@ 0xff
 8021dbe:	d127      	bne.n	8021e10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8021dc0:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021dc4:	f108 0605 	add.w	r6, r8, #5
 8021dc8:	f898 3002 	ldrb.w	r3, [r8, #2]
 8021dcc:	3d01      	subs	r5, #1
 8021dce:	b2d2      	uxtb	r2, r2
 8021dd0:	f898 1003 	ldrb.w	r1, [r8, #3]
 8021dd4:	b2db      	uxtb	r3, r3
 8021dd6:	f898 8004 	ldrb.w	r8, [r8, #4]
 8021dda:	f362 0407 	bfi	r4, r2, #0, #8
 8021dde:	b2c9      	uxtb	r1, r1
 8021de0:	fa5f f888 	uxtb.w	r8, r8
 8021de4:	f363 240f 	bfi	r4, r3, #8, #8
 8021de8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021dec:	b2ad      	uxth	r5, r5
 8021dee:	fb10 3301 	smlabb	r3, r0, r1, r3
 8021df2:	f361 4417 	bfi	r4, r1, #16, #8
 8021df6:	fb1c 3302 	smlabb	r3, ip, r2, r3
 8021dfa:	f368 641f 	bfi	r4, r8, #24, #8
 8021dfe:	fb1e 3808 	smlabb	r8, lr, r8, r3
 8021e02:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8021e06:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8021e0a:	f8c8 4004 	str.w	r4, [r8, #4]
 8021e0e:	e7d0      	b.n	8021db2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8021e10:	119a      	asrs	r2, r3, #6
 8021e12:	f108 0601 	add.w	r6, r8, #1
 8021e16:	d107      	bne.n	8021e28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8021e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021e1c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021e20:	685c      	ldr	r4, [r3, #4]
 8021e22:	3d01      	subs	r5, #1
 8021e24:	b2ad      	uxth	r5, r5
 8021e26:	e7c4      	b.n	8021db2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8021e28:	2a01      	cmp	r2, #1
 8021e2a:	d129      	bne.n	8021e80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 8021e2c:	f003 0203 	and.w	r2, r3, #3
 8021e30:	1ea1      	subs	r1, r4, #2
 8021e32:	4411      	add	r1, r2
 8021e34:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8021e38:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8021e3c:	b2c9      	uxtb	r1, r1
 8021e3e:	3a02      	subs	r2, #2
 8021e40:	3b02      	subs	r3, #2
 8021e42:	f361 0407 	bfi	r4, r1, #0, #8
 8021e46:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021e4a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8021e4e:	f362 240f 	bfi	r4, r2, #8, #8
 8021e52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021e56:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8021e5a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8021e5e:	fb10 2203 	smlabb	r2, r0, r3, r2
 8021e62:	f363 4417 	bfi	r4, r3, #16, #8
 8021e66:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8021e6a:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8021e6e:	fb1e 2808 	smlabb	r8, lr, r8, r2
 8021e72:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8021e76:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8021e7a:	f8c8 4004 	str.w	r4, [r8, #4]
 8021e7e:	e7d0      	b.n	8021e22 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8021e80:	2a02      	cmp	r2, #2
 8021e82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021e86:	d12e      	bne.n	8021ee6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 8021e88:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021e8c:	f1a3 0a20 	sub.w	sl, r3, #32
 8021e90:	f108 0602 	add.w	r6, r8, #2
 8021e94:	b2d2      	uxtb	r2, r2
 8021e96:	f002 010f 	and.w	r1, r2, #15
 8021e9a:	1112      	asrs	r2, r2, #4
 8021e9c:	3908      	subs	r1, #8
 8021e9e:	3a08      	subs	r2, #8
 8021ea0:	4451      	add	r1, sl
 8021ea2:	4492      	add	sl, r2
 8021ea4:	4421      	add	r1, r4
 8021ea6:	b2c9      	uxtb	r1, r1
 8021ea8:	f361 0407 	bfi	r4, r1, #0, #8
 8021eac:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8021eb0:	f1a8 0820 	sub.w	r8, r8, #32
 8021eb4:	4443      	add	r3, r8
 8021eb6:	b2db      	uxtb	r3, r3
 8021eb8:	f363 240f 	bfi	r4, r3, #8, #8
 8021ebc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021ec0:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8021ec4:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8021ec8:	fb10 330a 	smlabb	r3, r0, sl, r3
 8021ecc:	f36a 4417 	bfi	r4, sl, #16, #8
 8021ed0:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8021ed4:	0e22      	lsrs	r2, r4, #24
 8021ed6:	fb1e 3202 	smlabb	r2, lr, r2, r3
 8021eda:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021ede:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8021ee2:	6054      	str	r4, [r2, #4]
 8021ee4:	e79d      	b.n	8021e22 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8021ee6:	3301      	adds	r3, #1
 8021ee8:	42ab      	cmp	r3, r5
 8021eea:	dd59      	ble.n	8021fa0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 8021eec:	1b5d      	subs	r5, r3, r5
 8021eee:	2d00      	cmp	r5, #0
 8021ef0:	dc58      	bgt.n	8021fa4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 8021ef2:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021ef6:	f04f 0800 	mov.w	r8, #0
 8021efa:	f1ba 0f00 	cmp.w	sl, #0
 8021efe:	f340 8108 	ble.w	8022112 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 8021f02:	1c73      	adds	r3, r6, #1
 8021f04:	9303      	str	r3, [sp, #12]
 8021f06:	7833      	ldrb	r3, [r6, #0]
 8021f08:	b2db      	uxtb	r3, r3
 8021f0a:	2bfe      	cmp	r3, #254	@ 0xfe
 8021f0c:	d16a      	bne.n	8021fe4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 8021f0e:	7871      	ldrb	r1, [r6, #1]
 8021f10:	1d33      	adds	r3, r6, #4
 8021f12:	78b2      	ldrb	r2, [r6, #2]
 8021f14:	b2c9      	uxtb	r1, r1
 8021f16:	78f0      	ldrb	r0, [r6, #3]
 8021f18:	b2d2      	uxtb	r2, r2
 8021f1a:	9303      	str	r3, [sp, #12]
 8021f1c:	f361 0407 	bfi	r4, r1, #0, #8
 8021f20:	b2c0      	uxtb	r0, r0
 8021f22:	2303      	movs	r3, #3
 8021f24:	f362 240f 	bfi	r4, r2, #8, #8
 8021f28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021f2c:	fb13 2200 	smlabb	r2, r3, r0, r2
 8021f30:	f360 4417 	bfi	r4, r0, #16, #8
 8021f34:	2307      	movs	r3, #7
 8021f36:	0e25      	lsrs	r5, r4, #24
 8021f38:	fb13 2101 	smlabb	r1, r3, r1, r2
 8021f3c:	230b      	movs	r3, #11
 8021f3e:	fb13 1305 	smlabb	r3, r3, r5, r1
 8021f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021f46:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021f4a:	605c      	str	r4, [r3, #4]
 8021f4c:	2501      	movs	r5, #1
 8021f4e:	462e      	mov	r6, r5
 8021f50:	eb06 0308 	add.w	r3, r6, r8
 8021f54:	ebaa 0a06 	sub.w	sl, sl, r6
 8021f58:	1bad      	subs	r5, r5, r6
 8021f5a:	2b40      	cmp	r3, #64	@ 0x40
 8021f5c:	dd16      	ble.n	8021f8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 8021f5e:	4658      	mov	r0, fp
 8021f60:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8021f64:	f7e1 fd20 	bl	80039a8 <_ZN8touchgfx5paint9flushLineEPmi>
 8021f68:	4659      	mov	r1, fp
 8021f6a:	9b05      	ldr	r3, [sp, #20]
 8021f6c:	4642      	mov	r2, r8
 8021f6e:	4638      	mov	r0, r7
 8021f70:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021f74:	f7e1 fd80 	bl	8003a78 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8021f78:	4b30      	ldr	r3, [pc, #192]	@ (802203c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 8021f7a:	4447      	add	r7, r8
 8021f7c:	f04f 0800 	mov.w	r8, #0
 8021f80:	459b      	cmp	fp, r3
 8021f82:	bf0c      	ite	eq
 8021f84:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8022040 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 8021f88:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 802203c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8021f8c:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 8021f90:	4633      	mov	r3, r6
 8021f92:	3b01      	subs	r3, #1
 8021f94:	f842 4b04 	str.w	r4, [r2], #4
 8021f98:	d1fb      	bne.n	8021f92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 8021f9a:	44b0      	add	r8, r6
 8021f9c:	9e03      	ldr	r6, [sp, #12]
 8021f9e:	e7ac      	b.n	8021efa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8021fa0:	1aed      	subs	r5, r5, r3
 8021fa2:	e73f      	b.n	8021e24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 8021fa4:	9b01      	ldr	r3, [sp, #4]
 8021fa6:	42ab      	cmp	r3, r5
 8021fa8:	bfa8      	it	ge
 8021faa:	462b      	movge	r3, r5
 8021fac:	4698      	mov	r8, r3
 8021fae:	9b01      	ldr	r3, [sp, #4]
 8021fb0:	eba3 0a08 	sub.w	sl, r3, r8
 8021fb4:	0e23      	lsrs	r3, r4, #24
 8021fb6:	eba5 0508 	sub.w	r5, r5, r8
 8021fba:	d00b      	beq.n	8021fd4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 8021fbc:	9a05      	ldr	r2, [sp, #20]
 8021fbe:	4641      	mov	r1, r8
 8021fc0:	4638      	mov	r0, r7
 8021fc2:	4353      	muls	r3, r2
 8021fc4:	1c5a      	adds	r2, r3, #1
 8021fc6:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8021fca:	4622      	mov	r2, r4
 8021fcc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021fd0:	f7e1 fd04 	bl	80039dc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8021fd4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021fd8:	4447      	add	r7, r8
 8021fda:	e78c      	b.n	8021ef6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8021fdc:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021fe0:	4646      	mov	r6, r8
 8021fe2:	e788      	b.n	8021ef6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8021fe4:	2bff      	cmp	r3, #255	@ 0xff
 8021fe6:	d11d      	bne.n	8022024 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8021fe8:	7870      	ldrb	r0, [r6, #1]
 8021fea:	1d73      	adds	r3, r6, #5
 8021fec:	78b2      	ldrb	r2, [r6, #2]
 8021fee:	b2c0      	uxtb	r0, r0
 8021ff0:	78f5      	ldrb	r5, [r6, #3]
 8021ff2:	b2d2      	uxtb	r2, r2
 8021ff4:	9303      	str	r3, [sp, #12]
 8021ff6:	f360 0407 	bfi	r4, r0, #0, #8
 8021ffa:	7933      	ldrb	r3, [r6, #4]
 8021ffc:	b2ed      	uxtb	r5, r5
 8021ffe:	b2d9      	uxtb	r1, r3
 8022000:	f362 240f 	bfi	r4, r2, #8, #8
 8022004:	2303      	movs	r3, #3
 8022006:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802200a:	f365 4417 	bfi	r4, r5, #16, #8
 802200e:	fb13 2205 	smlabb	r2, r3, r5, r2
 8022012:	2307      	movs	r3, #7
 8022014:	f361 641f 	bfi	r4, r1, #24, #8
 8022018:	fb13 2000 	smlabb	r0, r3, r0, r2
 802201c:	230b      	movs	r3, #11
 802201e:	fb13 0301 	smlabb	r3, r3, r1, r0
 8022022:	e78e      	b.n	8021f42 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8022024:	119d      	asrs	r5, r3, #6
 8022026:	d10d      	bne.n	8022044 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8022028:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802202c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8022030:	685c      	ldr	r4, [r3, #4]
 8022032:	e78b      	b.n	8021f4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8022034:	24028770 	.word	0x24028770
 8022038:	2402876a 	.word	0x2402876a
 802203c:	240002c0 	.word	0x240002c0
 8022040:	240003c0 	.word	0x240003c0
 8022044:	2d01      	cmp	r5, #1
 8022046:	d12a      	bne.n	802209e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 8022048:	f003 0203 	and.w	r2, r3, #3
 802204c:	1ea1      	subs	r1, r4, #2
 802204e:	2603      	movs	r6, #3
 8022050:	4411      	add	r1, r2
 8022052:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8022056:	f3c3 1301 	ubfx	r3, r3, #4, #2
 802205a:	b2c9      	uxtb	r1, r1
 802205c:	3a02      	subs	r2, #2
 802205e:	3b02      	subs	r3, #2
 8022060:	f361 0407 	bfi	r4, r1, #0, #8
 8022064:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022068:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802206c:	f362 240f 	bfi	r4, r2, #8, #8
 8022070:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022074:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8022078:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 802207c:	fb16 2203 	smlabb	r2, r6, r3, r2
 8022080:	f363 4417 	bfi	r4, r3, #16, #8
 8022084:	2307      	movs	r3, #7
 8022086:	0e20      	lsrs	r0, r4, #24
 8022088:	fb13 2101 	smlabb	r1, r3, r1, r2
 802208c:	230b      	movs	r3, #11
 802208e:	fb13 1300 	smlabb	r3, r3, r0, r1
 8022092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022096:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 802209a:	605c      	str	r4, [r3, #4]
 802209c:	e757      	b.n	8021f4e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 802209e:	2d02      	cmp	r5, #2
 80220a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80220a4:	d12f      	bne.n	8022106 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 80220a6:	1cb2      	adds	r2, r6, #2
 80220a8:	f1a3 0020 	sub.w	r0, r3, #32
 80220ac:	9203      	str	r2, [sp, #12]
 80220ae:	7872      	ldrb	r2, [r6, #1]
 80220b0:	b2d2      	uxtb	r2, r2
 80220b2:	f002 010f 	and.w	r1, r2, #15
 80220b6:	1112      	asrs	r2, r2, #4
 80220b8:	3908      	subs	r1, #8
 80220ba:	3a08      	subs	r2, #8
 80220bc:	4401      	add	r1, r0
 80220be:	4402      	add	r2, r0
 80220c0:	4421      	add	r1, r4
 80220c2:	b2c9      	uxtb	r1, r1
 80220c4:	f361 0407 	bfi	r4, r1, #0, #8
 80220c8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80220cc:	3d20      	subs	r5, #32
 80220ce:	442b      	add	r3, r5
 80220d0:	2503      	movs	r5, #3
 80220d2:	b2db      	uxtb	r3, r3
 80220d4:	f363 240f 	bfi	r4, r3, #8, #8
 80220d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80220dc:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 80220e0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80220e4:	fb15 3302 	smlabb	r3, r5, r2, r3
 80220e8:	f362 4417 	bfi	r4, r2, #16, #8
 80220ec:	2207      	movs	r2, #7
 80220ee:	0e20      	lsrs	r0, r4, #24
 80220f0:	fb12 3201 	smlabb	r2, r2, r1, r3
 80220f4:	210b      	movs	r1, #11
 80220f6:	fb11 2100 	smlabb	r1, r1, r0, r2
 80220fa:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80220fe:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8022102:	604c      	str	r4, [r1, #4]
 8022104:	e722      	b.n	8021f4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8022106:	1c5d      	adds	r5, r3, #1
 8022108:	4656      	mov	r6, sl
 802210a:	45aa      	cmp	sl, r5
 802210c:	bfa8      	it	ge
 802210e:	462e      	movge	r6, r5
 8022110:	e71e      	b.n	8021f50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 8022112:	f1b8 0f00 	cmp.w	r8, #0
 8022116:	d00d      	beq.n	8022134 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8022118:	ea4f 0188 	mov.w	r1, r8, lsl #2
 802211c:	4658      	mov	r0, fp
 802211e:	f7e1 fc43 	bl	80039a8 <_ZN8touchgfx5paint9flushLineEPmi>
 8022122:	4642      	mov	r2, r8
 8022124:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022128:	4638      	mov	r0, r7
 802212a:	9b05      	ldr	r3, [sp, #20]
 802212c:	4659      	mov	r1, fp
 802212e:	4447      	add	r7, r8
 8022130:	f7e1 fca2 	bl	8003a78 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8022134:	4b1d      	ldr	r3, [pc, #116]	@ (80221ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 8022136:	9a01      	ldr	r2, [sp, #4]
 8022138:	881b      	ldrh	r3, [r3, #0]
 802213a:	1a9b      	subs	r3, r3, r2
 802213c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022140:	441f      	add	r7, r3
 8022142:	9b04      	ldr	r3, [sp, #16]
 8022144:	3301      	adds	r3, #1
 8022146:	9304      	str	r3, [sp, #16]
 8022148:	9a04      	ldr	r2, [sp, #16]
 802214a:	9b00      	ldr	r3, [sp, #0]
 802214c:	4293      	cmp	r3, r2
 802214e:	d11d      	bne.n	802218c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 8022150:	9b02      	ldr	r3, [sp, #8]
 8022152:	2400      	movs	r4, #0
 8022154:	9a02      	ldr	r2, [sp, #8]
 8022156:	f103 0801 	add.w	r8, r3, #1
 802215a:	9b06      	ldr	r3, [sp, #24]
 802215c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8022160:	4621      	mov	r1, r4
 8022162:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022166:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802216a:	9b07      	ldr	r3, [sp, #28]
 802216c:	ba36      	rev	r6, r6
 802216e:	9808      	ldr	r0, [sp, #32]
 8022170:	441e      	add	r6, r3
 8022172:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8022176:	1aed      	subs	r5, r5, r3
 8022178:	f009 f9a4 	bl	802b4c4 <memset>
 802217c:	f8cd 8008 	str.w	r8, [sp, #8]
 8022180:	b2ad      	uxth	r5, r5
 8022182:	9404      	str	r4, [sp, #16]
 8022184:	f7e1 fc06 	bl	8003994 <_ZN8touchgfx5paint8tearDownEv>
 8022188:	46b0      	mov	r8, r6
 802218a:	e5df      	b.n	8021d4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 802218c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8022190:	9a01      	ldr	r2, [sp, #4]
 8022192:	1a9b      	subs	r3, r3, r2
 8022194:	1b5d      	subs	r5, r3, r5
 8022196:	b2ad      	uxth	r5, r5
 8022198:	e7f4      	b.n	8022184 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 802219a:	4b05      	ldr	r3, [pc, #20]	@ (80221b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 802219c:	6818      	ldr	r0, [r3, #0]
 802219e:	6803      	ldr	r3, [r0, #0]
 80221a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221a2:	4798      	blx	r3
 80221a4:	b00f      	add	sp, #60	@ 0x3c
 80221a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221aa:	bf00      	nop
 80221ac:	2402876a 	.word	0x2402876a
 80221b0:	24028770 	.word	0x24028770

080221b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 80221b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221b8:	b093      	sub	sp, #76	@ 0x4c
 80221ba:	460d      	mov	r5, r1
 80221bc:	4616      	mov	r6, r2
 80221be:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 80221c2:	9000      	str	r0, [sp, #0]
 80221c4:	f1bb 0f00 	cmp.w	fp, #0
 80221c8:	f000 82ac 	beq.w	8022724 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 80221cc:	6810      	ldr	r0, [r2, #0]
 80221ce:	ac0e      	add	r4, sp, #56	@ 0x38
 80221d0:	6851      	ldr	r1, [r2, #4]
 80221d2:	c403      	stmia	r4!, {r0, r1}
 80221d4:	6818      	ldr	r0, [r3, #0]
 80221d6:	ac10      	add	r4, sp, #64	@ 0x40
 80221d8:	6859      	ldr	r1, [r3, #4]
 80221da:	c403      	stmia	r4!, {r0, r1}
 80221dc:	a80e      	add	r0, sp, #56	@ 0x38
 80221de:	f7f8 fe19 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80221e2:	4631      	mov	r1, r6
 80221e4:	a810      	add	r0, sp, #64	@ 0x40
 80221e6:	f7f8 fe59 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80221ea:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80221ee:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80221f2:	bfdb      	ittet	le
 80221f4:	b293      	uxthle	r3, r2
 80221f6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80221fa:	2301      	movgt	r3, #1
 80221fc:	fb91 f3f3 	sdivle	r3, r1, r3
 8022200:	9301      	str	r3, [sp, #4]
 8022202:	f105 0308 	add.w	r3, r5, #8
 8022206:	9901      	ldr	r1, [sp, #4]
 8022208:	9305      	str	r3, [sp, #20]
 802220a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802220e:	440b      	add	r3, r1
 8022210:	3b01      	subs	r3, #1
 8022212:	fb93 f3f1 	sdiv	r3, r3, r1
 8022216:	3b01      	subs	r3, #1
 8022218:	9905      	ldr	r1, [sp, #20]
 802221a:	b29b      	uxth	r3, r3
 802221c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022220:	9901      	ldr	r1, [sp, #4]
 8022222:	9306      	str	r3, [sp, #24]
 8022224:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8022228:	fb93 f0f1 	sdiv	r0, r3, r1
 802222c:	b284      	uxth	r4, r0
 802222e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8022232:	9403      	str	r4, [sp, #12]
 8022234:	9d03      	ldr	r5, [sp, #12]
 8022236:	9c01      	ldr	r4, [sp, #4]
 8022238:	fb05 3714 	mls	r7, r5, r4, r3
 802223c:	fb17 f702 	smulbb	r7, r7, r2
 8022240:	440f      	add	r7, r1
 8022242:	b2bf      	uxth	r7, r7
 8022244:	2d00      	cmp	r5, #0
 8022246:	d06b      	beq.n	8022320 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8022248:	1e6a      	subs	r2, r5, #1
 802224a:	9805      	ldr	r0, [sp, #20]
 802224c:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 8022250:	9a06      	ldr	r2, [sp, #24]
 8022252:	fa99 f989 	rev.w	r9, r9
 8022256:	4491      	add	r9, r2
 8022258:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 802225c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8022260:	4411      	add	r1, r2
 8022262:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022266:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 80225c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 802226a:	4413      	add	r3, r2
 802226c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8022270:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8022274:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8022278:	9302      	str	r3, [sp, #8]
 802227a:	4bd0      	ldr	r3, [pc, #832]	@ (80225bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 802227c:	6818      	ldr	r0, [r3, #0]
 802227e:	6803      	ldr	r3, [r0, #0]
 8022280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022282:	4798      	blx	r3
 8022284:	4bce      	ldr	r3, [pc, #824]	@ (80225c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 8022286:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802228a:	881b      	ldrh	r3, [r3, #0]
 802228c:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8022290:	fb03 2404 	mla	r4, r3, r4, r2
 8022294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022298:	436b      	muls	r3, r5
 802229a:	2500      	movs	r5, #0
 802229c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80222a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222a4:	4629      	mov	r1, r5
 80222a6:	4404      	add	r4, r0
 80222a8:	18e3      	adds	r3, r4, r3
 80222aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80222ac:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80222b0:	fb97 f3f3 	sdiv	r3, r7, r3
 80222b4:	9304      	str	r3, [sp, #16]
 80222b6:	9b00      	ldr	r3, [sp, #0]
 80222b8:	3304      	adds	r3, #4
 80222ba:	4618      	mov	r0, r3
 80222bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80222be:	f009 f901 	bl	802b4c4 <memset>
 80222c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80222c4:	42a3      	cmp	r3, r4
 80222c6:	f240 8228 	bls.w	802271a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 80222ca:	2003      	movs	r0, #3
 80222cc:	2607      	movs	r6, #7
 80222ce:	2f00      	cmp	r7, #0
 80222d0:	f000 80cb 	beq.w	802246a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 80222d4:	f899 3000 	ldrb.w	r3, [r9]
 80222d8:	b2db      	uxtb	r3, r3
 80222da:	2bfe      	cmp	r3, #254	@ 0xfe
 80222dc:	d123      	bne.n	8022326 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 80222de:	f899 3001 	ldrb.w	r3, [r9, #1]
 80222e2:	3f01      	subs	r7, #1
 80222e4:	f899 2002 	ldrb.w	r2, [r9, #2]
 80222e8:	f109 0804 	add.w	r8, r9, #4
 80222ec:	b2db      	uxtb	r3, r3
 80222ee:	f899 1003 	ldrb.w	r1, [r9, #3]
 80222f2:	b2d2      	uxtb	r2, r2
 80222f4:	f363 0507 	bfi	r5, r3, #0, #8
 80222f8:	b2c9      	uxtb	r1, r1
 80222fa:	b2bf      	uxth	r7, r7
 80222fc:	f362 250f 	bfi	r5, r2, #8, #8
 8022300:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022304:	fb10 2201 	smlabb	r2, r0, r1, r2
 8022308:	f361 4517 	bfi	r5, r1, #16, #8
 802230c:	fb16 2303 	smlabb	r3, r6, r3, r2
 8022310:	9a00      	ldr	r2, [sp, #0]
 8022312:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022316:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802231a:	605d      	str	r5, [r3, #4]
 802231c:	46c1      	mov	r9, r8
 802231e:	e7d6      	b.n	80222ce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8022320:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8022324:	e798      	b.n	8022258 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8022326:	119a      	asrs	r2, r3, #6
 8022328:	f109 0801 	add.w	r8, r9, #1
 802232c:	d108      	bne.n	8022340 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 802232e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022332:	9a00      	ldr	r2, [sp, #0]
 8022334:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022338:	685d      	ldr	r5, [r3, #4]
 802233a:	3f01      	subs	r7, #1
 802233c:	b2bf      	uxth	r7, r7
 802233e:	e7ed      	b.n	802231c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8022340:	2a01      	cmp	r2, #1
 8022342:	d125      	bne.n	8022390 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8022344:	f003 0103 	and.w	r1, r3, #3
 8022348:	1eaa      	subs	r2, r5, #2
 802234a:	440a      	add	r2, r1
 802234c:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8022350:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8022354:	b2d2      	uxtb	r2, r2
 8022356:	3902      	subs	r1, #2
 8022358:	3b02      	subs	r3, #2
 802235a:	f362 0507 	bfi	r5, r2, #0, #8
 802235e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022362:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8022366:	f361 250f 	bfi	r5, r1, #8, #8
 802236a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802236e:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8022372:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8022376:	fb10 1103 	smlabb	r1, r0, r3, r1
 802237a:	f363 4517 	bfi	r5, r3, #16, #8
 802237e:	9b00      	ldr	r3, [sp, #0]
 8022380:	fb16 1202 	smlabb	r2, r6, r2, r1
 8022384:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022388:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 802238c:	6055      	str	r5, [r2, #4]
 802238e:	e7d4      	b.n	802233a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8022390:	2a02      	cmp	r2, #2
 8022392:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022396:	d12c      	bne.n	80223f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8022398:	f899 2001 	ldrb.w	r2, [r9, #1]
 802239c:	f1a3 0c20 	sub.w	ip, r3, #32
 80223a0:	f109 0802 	add.w	r8, r9, #2
 80223a4:	b2d2      	uxtb	r2, r2
 80223a6:	f002 010f 	and.w	r1, r2, #15
 80223aa:	1112      	asrs	r2, r2, #4
 80223ac:	3908      	subs	r1, #8
 80223ae:	3a08      	subs	r2, #8
 80223b0:	4461      	add	r1, ip
 80223b2:	4494      	add	ip, r2
 80223b4:	4429      	add	r1, r5
 80223b6:	b2c9      	uxtb	r1, r1
 80223b8:	f361 0507 	bfi	r5, r1, #0, #8
 80223bc:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80223c0:	f1ae 0e20 	sub.w	lr, lr, #32
 80223c4:	4473      	add	r3, lr
 80223c6:	b2db      	uxtb	r3, r3
 80223c8:	f363 250f 	bfi	r5, r3, #8, #8
 80223cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80223d0:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 80223d4:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 80223d8:	fb10 330c 	smlabb	r3, r0, ip, r3
 80223dc:	f36c 4517 	bfi	r5, ip, #16, #8
 80223e0:	fb16 3101 	smlabb	r1, r6, r1, r3
 80223e4:	9b00      	ldr	r3, [sp, #0]
 80223e6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80223ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80223ee:	604d      	str	r5, [r1, #4]
 80223f0:	e7a3      	b.n	802233a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 80223f2:	3301      	adds	r3, #1
 80223f4:	42bb      	cmp	r3, r7
 80223f6:	dd23      	ble.n	8022440 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 80223f8:	eba3 0907 	sub.w	r9, r3, r7
 80223fc:	f1b9 0f00 	cmp.w	r9, #0
 8022400:	dc20      	bgt.n	8022444 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8022402:	9e02      	ldr	r6, [sp, #8]
 8022404:	2700      	movs	r7, #0
 8022406:	2e00      	cmp	r6, #0
 8022408:	f340 8142 	ble.w	8022690 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 802240c:	f108 0301 	add.w	r3, r8, #1
 8022410:	9307      	str	r3, [sp, #28]
 8022412:	f898 3000 	ldrb.w	r3, [r8]
 8022416:	b2db      	uxtb	r3, r3
 8022418:	119a      	asrs	r2, r3, #6
 802241a:	d12a      	bne.n	8022472 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 802241c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022420:	9a00      	ldr	r2, [sp, #0]
 8022422:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022426:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802242a:	685d      	ldr	r5, [r3, #4]
 802242c:	f040 811f 	bne.w	802266e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8022430:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022434:	7025      	strb	r5, [r4, #0]
 8022436:	7063      	strb	r3, [r4, #1]
 8022438:	f3c5 4307 	ubfx	r3, r5, #16, #8
 802243c:	70a3      	strb	r3, [r4, #2]
 802243e:	e04e      	b.n	80224de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8022440:	1aff      	subs	r7, r7, r3
 8022442:	e77b      	b.n	802233c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8022444:	9b02      	ldr	r3, [sp, #8]
 8022446:	4620      	mov	r0, r4
 8022448:	462a      	mov	r2, r5
 802244a:	454b      	cmp	r3, r9
 802244c:	bfa8      	it	ge
 802244e:	464b      	movge	r3, r9
 8022450:	461f      	mov	r7, r3
 8022452:	9b02      	ldr	r3, [sp, #8]
 8022454:	4639      	mov	r1, r7
 8022456:	1bde      	subs	r6, r3, r7
 8022458:	eba9 0907 	sub.w	r9, r9, r7
 802245c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022460:	465b      	mov	r3, fp
 8022462:	f7e1 fabb 	bl	80039dc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8022466:	443c      	add	r4, r7
 8022468:	e7cc      	b.n	8022404 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 802246a:	46c8      	mov	r8, r9
 802246c:	9e02      	ldr	r6, [sp, #8]
 802246e:	46b9      	mov	r9, r7
 8022470:	e7c8      	b.n	8022404 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8022472:	2a01      	cmp	r2, #1
 8022474:	d136      	bne.n	80224e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8022476:	f003 0103 	and.w	r1, r3, #3
 802247a:	1ea8      	subs	r0, r5, #2
 802247c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022480:	4408      	add	r0, r1
 8022482:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8022486:	f3c3 1301 	ubfx	r3, r3, #4, #2
 802248a:	b2c0      	uxtb	r0, r0
 802248c:	f1a1 0102 	sub.w	r1, r1, #2
 8022490:	f1a3 0302 	sub.w	r3, r3, #2
 8022494:	f360 0507 	bfi	r5, r0, #0, #8
 8022498:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802249c:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80224a0:	f361 250f 	bfi	r5, r1, #8, #8
 80224a4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80224a8:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 80224ac:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 80224b0:	f04f 0303 	mov.w	r3, #3
 80224b4:	fb13 ce08 	smlabb	lr, r3, r8, ip
 80224b8:	f04f 0c07 	mov.w	ip, #7
 80224bc:	9b00      	ldr	r3, [sp, #0]
 80224be:	f368 4517 	bfi	r5, r8, #16, #8
 80224c2:	fb1c ec00 	smlabb	ip, ip, r0, lr
 80224c6:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 80224ca:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80224ce:	f8cc 5004 	str.w	r5, [ip, #4]
 80224d2:	f040 80cd 	bne.w	8022670 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 80224d6:	7020      	strb	r0, [r4, #0]
 80224d8:	7061      	strb	r1, [r4, #1]
 80224da:	f884 8002 	strb.w	r8, [r4, #2]
 80224de:	3e01      	subs	r6, #1
 80224e0:	3403      	adds	r4, #3
 80224e2:	e0c1      	b.n	8022668 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 80224e4:	2a02      	cmp	r2, #2
 80224e6:	d13d      	bne.n	8022564 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 80224e8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80224ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80224f0:	f108 0202 	add.w	r2, r8, #2
 80224f4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80224f8:	b2c9      	uxtb	r1, r1
 80224fa:	f1a3 0c20 	sub.w	ip, r3, #32
 80224fe:	9207      	str	r2, [sp, #28]
 8022500:	f001 000f 	and.w	r0, r1, #15
 8022504:	f1a0 0008 	sub.w	r0, r0, #8
 8022508:	4460      	add	r0, ip
 802250a:	4428      	add	r0, r5
 802250c:	b2c0      	uxtb	r0, r0
 802250e:	f360 0507 	bfi	r5, r0, #0, #8
 8022512:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8022516:	f1a2 0220 	sub.w	r2, r2, #32
 802251a:	4413      	add	r3, r2
 802251c:	ea4f 1221 	mov.w	r2, r1, asr #4
 8022520:	b2db      	uxtb	r3, r3
 8022522:	f1a2 0208 	sub.w	r2, r2, #8
 8022526:	f363 250f 	bfi	r5, r3, #8, #8
 802252a:	4462      	add	r2, ip
 802252c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8022530:	f04f 0c03 	mov.w	ip, #3
 8022534:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8022538:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802253c:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8022540:	f04f 0107 	mov.w	r1, #7
 8022544:	f362 4517 	bfi	r5, r2, #16, #8
 8022548:	fb11 c100 	smlabb	r1, r1, r0, ip
 802254c:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8022550:	9900      	ldr	r1, [sp, #0]
 8022552:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8022556:	604d      	str	r5, [r1, #4]
 8022558:	f040 8089 	bne.w	802266e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 802255c:	7020      	strb	r0, [r4, #0]
 802255e:	7063      	strb	r3, [r4, #1]
 8022560:	70a2      	strb	r2, [r4, #2]
 8022562:	e7bc      	b.n	80224de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8022564:	2bfe      	cmp	r3, #254	@ 0xfe
 8022566:	d12f      	bne.n	80225c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8022568:	f898 0001 	ldrb.w	r0, [r8, #1]
 802256c:	f108 0304 	add.w	r3, r8, #4
 8022570:	f898 2002 	ldrb.w	r2, [r8, #2]
 8022574:	f04f 0c03 	mov.w	ip, #3
 8022578:	f898 1003 	ldrb.w	r1, [r8, #3]
 802257c:	b2c0      	uxtb	r0, r0
 802257e:	b2d2      	uxtb	r2, r2
 8022580:	9307      	str	r3, [sp, #28]
 8022582:	b2c9      	uxtb	r1, r1
 8022584:	f360 0507 	bfi	r5, r0, #0, #8
 8022588:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 802258c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022590:	f362 250f 	bfi	r5, r2, #8, #8
 8022594:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8022598:	f04f 0307 	mov.w	r3, #7
 802259c:	f361 4517 	bfi	r5, r1, #16, #8
 80225a0:	fb13 c300 	smlabb	r3, r3, r0, ip
 80225a4:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 80225a8:	9b00      	ldr	r3, [sp, #0]
 80225aa:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 80225ae:	605d      	str	r5, [r3, #4]
 80225b0:	d15d      	bne.n	802266e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 80225b2:	7020      	strb	r0, [r4, #0]
 80225b4:	7062      	strb	r2, [r4, #1]
 80225b6:	70a1      	strb	r1, [r4, #2]
 80225b8:	e791      	b.n	80224de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 80225ba:	bf00      	nop
 80225bc:	24028770 	.word	0x24028770
 80225c0:	2402876a 	.word	0x2402876a
 80225c4:	240002c0 	.word	0x240002c0
 80225c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80225cc:	1c5a      	adds	r2, r3, #1
 80225ce:	b94b      	cbnz	r3, 80225e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 80225d0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80225d4:	d14c      	bne.n	8022670 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 80225d6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80225da:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80225de:	7025      	strb	r5, [r4, #0]
 80225e0:	7062      	strb	r2, [r4, #1]
 80225e2:	e72b      	b.n	802243c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 80225e4:	4296      	cmp	r6, r2
 80225e6:	46b0      	mov	r8, r6
 80225e8:	bfa8      	it	ge
 80225ea:	4690      	movge	r8, r2
 80225ec:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80225f0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80225f4:	eba6 0608 	sub.w	r6, r6, r8
 80225f8:	eba2 0908 	sub.w	r9, r2, r8
 80225fc:	9308      	str	r3, [sp, #32]
 80225fe:	b2eb      	uxtb	r3, r5
 8022600:	930c      	str	r3, [sp, #48]	@ 0x30
 8022602:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022606:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022608:	f3c5 4307 	ubfx	r3, r5, #16, #8
 802260c:	930a      	str	r3, [sp, #40]	@ 0x28
 802260e:	9b08      	ldr	r3, [sp, #32]
 8022610:	d030      	beq.n	8022674 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8022612:	18fb      	adds	r3, r7, r3
 8022614:	2bc0      	cmp	r3, #192	@ 0xc0
 8022616:	dd15      	ble.n	8022644 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8022618:	4650      	mov	r0, sl
 802261a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 802261e:	f7e1 f9c3 	bl	80039a8 <_ZN8touchgfx5paint9flushLineEPmi>
 8022622:	2203      	movs	r2, #3
 8022624:	4651      	mov	r1, sl
 8022626:	465b      	mov	r3, fp
 8022628:	4620      	mov	r0, r4
 802262a:	443c      	add	r4, r7
 802262c:	fb97 f2f2 	sdiv	r2, r7, r2
 8022630:	f7e1 f9fe 	bl	8003a30 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8022634:	4b3d      	ldr	r3, [pc, #244]	@ (802272c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8022636:	2700      	movs	r7, #0
 8022638:	459a      	cmp	sl, r3
 802263a:	bf0c      	ite	eq
 802263c:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8022738 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8022640:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 802272c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8022644:	eb0a 0307 	add.w	r3, sl, r7
 8022648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802264a:	f1b8 0801 	subs.w	r8, r8, #1
 802264e:	f103 0303 	add.w	r3, r3, #3
 8022652:	f803 2c03 	strb.w	r2, [r3, #-3]
 8022656:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022658:	f803 2c02 	strb.w	r2, [r3, #-2]
 802265c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802265e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8022662:	d1f1      	bne.n	8022648 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8022664:	9b08      	ldr	r3, [sp, #32]
 8022666:	441f      	add	r7, r3
 8022668:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802266c:	e6cb      	b.n	8022406 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 802266e:	2201      	movs	r2, #1
 8022670:	4690      	mov	r8, r2
 8022672:	e7bb      	b.n	80225ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8022674:	4423      	add	r3, r4
 8022676:	42a3      	cmp	r3, r4
 8022678:	d9f6      	bls.n	8022668 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 802267a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802267c:	3403      	adds	r4, #3
 802267e:	f804 2c03 	strb.w	r2, [r4, #-3]
 8022682:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022684:	f804 2c02 	strb.w	r2, [r4, #-2]
 8022688:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802268a:	f804 2c01 	strb.w	r2, [r4, #-1]
 802268e:	e7f2      	b.n	8022676 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8022690:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022694:	d00e      	beq.n	80226b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8022696:	b16f      	cbz	r7, 80226b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8022698:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 802269c:	4650      	mov	r0, sl
 802269e:	f7e1 f983 	bl	80039a8 <_ZN8touchgfx5paint9flushLineEPmi>
 80226a2:	2203      	movs	r2, #3
 80226a4:	4620      	mov	r0, r4
 80226a6:	443c      	add	r4, r7
 80226a8:	465b      	mov	r3, fp
 80226aa:	4651      	mov	r1, sl
 80226ac:	fb97 f2f2 	sdiv	r2, r7, r2
 80226b0:	f7e1 f9be 	bl	8003a30 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 80226b4:	4b1e      	ldr	r3, [pc, #120]	@ (8022730 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 80226b6:	9a02      	ldr	r2, [sp, #8]
 80226b8:	881b      	ldrh	r3, [r3, #0]
 80226ba:	1a9b      	subs	r3, r3, r2
 80226bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80226c0:	441c      	add	r4, r3
 80226c2:	9b04      	ldr	r3, [sp, #16]
 80226c4:	3301      	adds	r3, #1
 80226c6:	9304      	str	r3, [sp, #16]
 80226c8:	9a04      	ldr	r2, [sp, #16]
 80226ca:	9b01      	ldr	r3, [sp, #4]
 80226cc:	4293      	cmp	r3, r2
 80226ce:	d11c      	bne.n	802270a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 80226d0:	9b03      	ldr	r3, [sp, #12]
 80226d2:	2500      	movs	r5, #0
 80226d4:	9a03      	ldr	r2, [sp, #12]
 80226d6:	1c5e      	adds	r6, r3, #1
 80226d8:	9b05      	ldr	r3, [sp, #20]
 80226da:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 80226de:	4629      	mov	r1, r5
 80226e0:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80226e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80226e8:	9b06      	ldr	r3, [sp, #24]
 80226ea:	fa98 f888 	rev.w	r8, r8
 80226ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80226f0:	4498      	add	r8, r3
 80226f2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80226f6:	1aff      	subs	r7, r7, r3
 80226f8:	f008 fee4 	bl	802b4c4 <memset>
 80226fc:	b2bf      	uxth	r7, r7
 80226fe:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8022702:	f7e1 f947 	bl	8003994 <_ZN8touchgfx5paint8tearDownEv>
 8022706:	46c1      	mov	r9, r8
 8022708:	e5db      	b.n	80222c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 802270a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 802270e:	9b02      	ldr	r3, [sp, #8]
 8022710:	1aff      	subs	r7, r7, r3
 8022712:	eba7 0709 	sub.w	r7, r7, r9
 8022716:	b2bf      	uxth	r7, r7
 8022718:	e7f3      	b.n	8022702 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 802271a:	4b06      	ldr	r3, [pc, #24]	@ (8022734 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 802271c:	6818      	ldr	r0, [r3, #0]
 802271e:	6803      	ldr	r3, [r0, #0]
 8022720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022722:	4798      	blx	r3
 8022724:	b013      	add	sp, #76	@ 0x4c
 8022726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802272a:	bf00      	nop
 802272c:	240002c0 	.word	0x240002c0
 8022730:	2402876a 	.word	0x2402876a
 8022734:	24028770 	.word	0x24028770
 8022738:	240003c0 	.word	0x240003c0

0802273c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 802273c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022740:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8022744:	9c06      	ldr	r4, [sp, #24]
 8022746:	2800      	cmp	r0, #0
 8022748:	d06e      	beq.n	8022828 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802274a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 802274e:	2d00      	cmp	r5, #0
 8022750:	dd6a      	ble.n	8022828 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022752:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8022756:	f1bc 0f00 	cmp.w	ip, #0
 802275a:	dd65      	ble.n	8022828 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802275c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8022760:	28ff      	cmp	r0, #255	@ 0xff
 8022762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022766:	f3c4 2707 	ubfx	r7, r4, #8, #8
 802276a:	fb02 3306 	mla	r3, r2, r6, r3
 802276e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8022772:	b2e4      	uxtb	r4, r4
 8022774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022778:	4419      	add	r1, r3
 802277a:	fb02 f30c 	mul.w	r3, r2, ip
 802277e:	eba2 0205 	sub.w	r2, r2, r5
 8022782:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802278a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802278e:	440b      	add	r3, r1
 8022790:	d03e      	beq.n	8022810 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8022792:	fa1f fc80 	uxth.w	ip, r0
 8022796:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 802279a:	fb06 f60c 	mul.w	r6, r6, ip
 802279e:	b280      	uxth	r0, r0
 80227a0:	fb07 f70c 	mul.w	r7, r7, ip
 80227a4:	fb04 f40c 	mul.w	r4, r4, ip
 80227a8:	4299      	cmp	r1, r3
 80227aa:	d23d      	bcs.n	8022828 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80227ac:	eb01 0c05 	add.w	ip, r1, r5
 80227b0:	458c      	cmp	ip, r1
 80227b2:	f101 0e03 	add.w	lr, r1, #3
 80227b6:	d928      	bls.n	802280a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80227b8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80227bc:	fb11 f100 	smulbb	r1, r1, r0
 80227c0:	4421      	add	r1, r4
 80227c2:	b289      	uxth	r1, r1
 80227c4:	f101 0801 	add.w	r8, r1, #1
 80227c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80227cc:	1209      	asrs	r1, r1, #8
 80227ce:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80227d2:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80227d6:	fb11 f100 	smulbb	r1, r1, r0
 80227da:	4439      	add	r1, r7
 80227dc:	b289      	uxth	r1, r1
 80227de:	f101 0801 	add.w	r8, r1, #1
 80227e2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80227e6:	1209      	asrs	r1, r1, #8
 80227e8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80227ec:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80227f0:	fb11 f100 	smulbb	r1, r1, r0
 80227f4:	4431      	add	r1, r6
 80227f6:	b289      	uxth	r1, r1
 80227f8:	f101 0801 	add.w	r8, r1, #1
 80227fc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022800:	1209      	asrs	r1, r1, #8
 8022802:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8022806:	4671      	mov	r1, lr
 8022808:	e7d2      	b.n	80227b0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 802280a:	4411      	add	r1, r2
 802280c:	e7cc      	b.n	80227a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 802280e:	4411      	add	r1, r2
 8022810:	4299      	cmp	r1, r3
 8022812:	d209      	bcs.n	8022828 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022814:	1948      	adds	r0, r1, r5
 8022816:	4281      	cmp	r1, r0
 8022818:	d2f9      	bcs.n	802280e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 802281a:	700c      	strb	r4, [r1, #0]
 802281c:	3103      	adds	r1, #3
 802281e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8022822:	f801 6c01 	strb.w	r6, [r1, #-1]
 8022826:	e7f6      	b.n	8022816 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8022828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802282c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 802282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022830:	b093      	sub	sp, #76	@ 0x4c
 8022832:	4699      	mov	r9, r3
 8022834:	4617      	mov	r7, r2
 8022836:	f9b3 2000 	ldrsh.w	r2, [r3]
 802283a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 802283e:	4604      	mov	r4, r0
 8022840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022844:	a80c      	add	r0, sp, #48	@ 0x30
 8022846:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 802284a:	460d      	mov	r5, r1
 802284c:	4649      	mov	r1, r9
 802284e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8022852:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022856:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 802285a:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 802285e:	f7f0 ffdb 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 8022862:	4639      	mov	r1, r7
 8022864:	a80c      	add	r0, sp, #48	@ 0x30
 8022866:	f7f0 ffd7 	bl	8013818 <_ZN8touchgfx4RectaNERKS0_>
 802286a:	4b78      	ldr	r3, [pc, #480]	@ (8022a4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 802286c:	8818      	ldrh	r0, [r3, #0]
 802286e:	4b78      	ldr	r3, [pc, #480]	@ (8022a50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8022870:	b202      	sxth	r2, r0
 8022872:	8819      	ldrh	r1, [r3, #0]
 8022874:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8022878:	b20f      	sxth	r7, r1
 802287a:	2b00      	cmp	r3, #0
 802287c:	da07      	bge.n	802288e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 802287e:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8022882:	4463      	add	r3, ip
 8022884:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8022888:	2300      	movs	r3, #0
 802288a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 802288e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8022892:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8022896:	1ad2      	subs	r2, r2, r3
 8022898:	4594      	cmp	ip, r2
 802289a:	bfc4      	itt	gt
 802289c:	1ac2      	subgt	r2, r0, r3
 802289e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 80228a2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80228a6:	2a00      	cmp	r2, #0
 80228a8:	da07      	bge.n	80228ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 80228aa:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 80228ae:	4462      	add	r2, ip
 80228b0:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80228b4:	2200      	movs	r2, #0
 80228b6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80228ba:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80228be:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 80228c2:	1abf      	subs	r7, r7, r2
 80228c4:	45bc      	cmp	ip, r7
 80228c6:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8022a58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80228ca:	bfc8      	it	gt
 80228cc:	1a8f      	subgt	r7, r1, r2
 80228ce:	f89c c000 	ldrb.w	ip, [ip]
 80228d2:	bfc8      	it	gt
 80228d4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 80228d8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 80228dc:	f1bc 0f00 	cmp.w	ip, #0
 80228e0:	d176      	bne.n	80229d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80228e2:	4287      	cmp	r7, r0
 80228e4:	bf14      	ite	ne
 80228e6:	2100      	movne	r1, #0
 80228e8:	2101      	moveq	r1, #1
 80228ea:	2f00      	cmp	r7, #0
 80228ec:	9107      	str	r1, [sp, #28]
 80228ee:	dd73      	ble.n	80229d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80228f0:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 80228f4:	2900      	cmp	r1, #0
 80228f6:	9104      	str	r1, [sp, #16]
 80228f8:	dd6e      	ble.n	80229d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80228fa:	f8b9 1000 	ldrh.w	r1, [r9]
 80228fe:	a80e      	add	r0, sp, #56	@ 0x38
 8022900:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8022904:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8022908:	1a5b      	subs	r3, r3, r1
 802290a:	a910      	add	r1, sp, #64	@ 0x40
 802290c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8022910:	b21b      	sxth	r3, r3
 8022912:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8022916:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8022a5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 802291a:	9305      	str	r3, [sp, #20]
 802291c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8022920:	1ad2      	subs	r2, r2, r3
 8022922:	b213      	sxth	r3, r2
 8022924:	9306      	str	r3, [sp, #24]
 8022926:	9b05      	ldr	r3, [sp, #20]
 8022928:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 802292c:	9b06      	ldr	r3, [sp, #24]
 802292e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022932:	9b04      	ldr	r3, [sp, #16]
 8022934:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8022938:	2300      	movs	r3, #0
 802293a:	9310      	str	r3, [sp, #64]	@ 0x40
 802293c:	f7f8 faae 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022940:	4640      	mov	r0, r8
 8022942:	f7f8 fa67 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022946:	a810      	add	r0, sp, #64	@ 0x40
 8022948:	f7f8 fa64 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802294c:	4b41      	ldr	r3, [pc, #260]	@ (8022a54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 802294e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8022952:	4628      	mov	r0, r5
 8022954:	881b      	ldrh	r3, [r3, #0]
 8022956:	9308      	str	r3, [sp, #32]
 8022958:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 802295c:	b21b      	sxth	r3, r3
 802295e:	9303      	str	r3, [sp, #12]
 8022960:	682b      	ldr	r3, [r5, #0]
 8022962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022964:	4798      	blx	r3
 8022966:	9a03      	ldr	r2, [sp, #12]
 8022968:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 802296c:	4681      	mov	r9, r0
 802296e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8022972:	fb13 f302 	smulbb	r3, r3, r2
 8022976:	2203      	movs	r2, #3
 8022978:	f8da 0000 	ldr.w	r0, [sl]
 802297c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8022980:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8022982:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022984:	441d      	add	r5, r3
 8022986:	6803      	ldr	r3, [r0, #0]
 8022988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802298a:	4798      	blx	r3
 802298c:	9009      	str	r0, [sp, #36]	@ 0x24
 802298e:	f8da 0000 	ldr.w	r0, [sl]
 8022992:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8022996:	6803      	ldr	r3, [r0, #0]
 8022998:	910a      	str	r1, [sp, #40]	@ 0x28
 802299a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802299c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 80229a0:	4798      	blx	r3
 80229a2:	f010 0f01 	tst.w	r0, #1
 80229a6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 80229aa:	d01e      	beq.n	80229ea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 80229ac:	f8da 0000 	ldr.w	r0, [sl]
 80229b0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80229b4:	6803      	ldr	r3, [r0, #0]
 80229b6:	9200      	str	r2, [sp, #0]
 80229b8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80229ba:	462b      	mov	r3, r5
 80229bc:	e898 0006 	ldmia.w	r8, {r1, r2}
 80229c0:	47b0      	blx	r6
 80229c2:	9b05      	ldr	r3, [sp, #20]
 80229c4:	80a7      	strh	r7, [r4, #4]
 80229c6:	8023      	strh	r3, [r4, #0]
 80229c8:	9b06      	ldr	r3, [sp, #24]
 80229ca:	8063      	strh	r3, [r4, #2]
 80229cc:	9b04      	ldr	r3, [sp, #16]
 80229ce:	e007      	b.n	80229e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 80229d0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 80229d4:	4288      	cmp	r0, r1
 80229d6:	e785      	b.n	80228e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 80229d8:	2300      	movs	r3, #0
 80229da:	8023      	strh	r3, [r4, #0]
 80229dc:	8063      	strh	r3, [r4, #2]
 80229de:	80a3      	strh	r3, [r4, #4]
 80229e0:	4620      	mov	r0, r4
 80229e2:	80e3      	strh	r3, [r4, #6]
 80229e4:	b013      	add	sp, #76	@ 0x4c
 80229e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229ea:	fb09 f606 	mul.w	r6, r9, r6
 80229ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229f0:	fb11 6602 	smlabb	r6, r1, r2, r6
 80229f4:	9a07      	ldr	r2, [sp, #28]
 80229f6:	4433      	add	r3, r6
 80229f8:	461e      	mov	r6, r3
 80229fa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80229fe:	b16a      	cbz	r2, 8022a1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022a00:	9a08      	ldr	r2, [sp, #32]
 8022a02:	4593      	cmp	fp, r2
 8022a04:	d10a      	bne.n	8022a1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022a06:	f8da 0000 	ldr.w	r0, [sl]
 8022a0a:	fb09 f303 	mul.w	r3, r9, r3
 8022a0e:	4629      	mov	r1, r5
 8022a10:	6802      	ldr	r2, [r0, #0]
 8022a12:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8022a16:	4632      	mov	r2, r6
 8022a18:	47d0      	blx	sl
 8022a1a:	e7d2      	b.n	80229c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8022a1c:	9a03      	ldr	r2, [sp, #12]
 8022a1e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8022a5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8022a22:	fb02 5803 	mla	r8, r2, r3, r5
 8022a26:	4545      	cmp	r5, r8
 8022a28:	d2cb      	bcs.n	80229c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8022a2a:	f8db 0000 	ldr.w	r0, [fp]
 8022a2e:	4629      	mov	r1, r5
 8022a30:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8022a34:	6802      	ldr	r2, [r0, #0]
 8022a36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a3a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8022a3e:	4632      	mov	r2, r6
 8022a40:	47d0      	blx	sl
 8022a42:	9b03      	ldr	r3, [sp, #12]
 8022a44:	444e      	add	r6, r9
 8022a46:	441d      	add	r5, r3
 8022a48:	e7ed      	b.n	8022a26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8022a4a:	bf00      	nop
 8022a4c:	24028764 	.word	0x24028764
 8022a50:	24028766 	.word	0x24028766
 8022a54:	2402876a 	.word	0x2402876a
 8022a58:	24028768 	.word	0x24028768
 8022a5c:	24028770 	.word	0x24028770

08022a60 <_ZN8touchgfx8LCD24bppC1Ev>:
 8022a60:	2200      	movs	r2, #0
 8022a62:	490e      	ldr	r1, [pc, #56]	@ (8022a9c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8022a64:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8022a68:	6001      	str	r1, [r0, #0]
 8022a6a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8022a6e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8022a72:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8022a76:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8022a7a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8022a7e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8022a82:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8022a86:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8022a8a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8022a8e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8022a92:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8022a96:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8022a9a:	4770      	bx	lr
 8022a9c:	08030dc0 	.word	0x08030dc0

08022aa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022aa4:	b091      	sub	sp, #68	@ 0x44
 8022aa6:	4607      	mov	r7, r0
 8022aa8:	4688      	mov	r8, r1
 8022aaa:	6810      	ldr	r0, [r2, #0]
 8022aac:	6851      	ldr	r1, [r2, #4]
 8022aae:	ac0c      	add	r4, sp, #48	@ 0x30
 8022ab0:	4616      	mov	r6, r2
 8022ab2:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8022ab6:	4d64      	ldr	r5, [pc, #400]	@ (8022c48 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022ab8:	f8df a190 	ldr.w	sl, [pc, #400]	@ 8022c4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8022abc:	c403      	stmia	r4!, {r0, r1}
 8022abe:	6818      	ldr	r0, [r3, #0]
 8022ac0:	ac0e      	add	r4, sp, #56	@ 0x38
 8022ac2:	6859      	ldr	r1, [r3, #4]
 8022ac4:	c403      	stmia	r4!, {r0, r1}
 8022ac6:	a80c      	add	r0, sp, #48	@ 0x30
 8022ac8:	f7f8 f9a4 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022acc:	4631      	mov	r1, r6
 8022ace:	a80e      	add	r0, sp, #56	@ 0x38
 8022ad0:	f7f8 f9e4 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ad4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022ad8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022adc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022ae0:	6828      	ldr	r0, [r5, #0]
 8022ae2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022ae6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8022aea:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8022aee:	440f      	add	r7, r1
 8022af0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022af4:	440a      	add	r2, r1
 8022af6:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8022afa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8022afe:	4413      	add	r3, r2
 8022b00:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022b04:	6803      	ldr	r3, [r0, #0]
 8022b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022b08:	4798      	blx	r3
 8022b0a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022b0e:	6828      	ldr	r0, [r5, #0]
 8022b10:	d01f      	beq.n	8022b52 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8022b12:	2201      	movs	r2, #1
 8022b14:	2500      	movs	r5, #0
 8022b16:	6801      	ldr	r1, [r0, #0]
 8022b18:	b2a4      	uxth	r4, r4
 8022b1a:	b2b6      	uxth	r6, r6
 8022b1c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022b20:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8022b24:	250b      	movs	r5, #11
 8022b26:	9507      	str	r5, [sp, #28]
 8022b28:	f8ba 5000 	ldrh.w	r5, [sl]
 8022b2c:	f8cd 9010 	str.w	r9, [sp, #16]
 8022b30:	9602      	str	r6, [sp, #8]
 8022b32:	9401      	str	r4, [sp, #4]
 8022b34:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8022b38:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022b3c:	9203      	str	r2, [sp, #12]
 8022b3e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022b42:	9200      	str	r2, [sp, #0]
 8022b44:	4642      	mov	r2, r8
 8022b46:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8022b48:	4639      	mov	r1, r7
 8022b4a:	47a0      	blx	r4
 8022b4c:	b011      	add	sp, #68	@ 0x44
 8022b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b52:	6803      	ldr	r3, [r0, #0]
 8022b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022b56:	4798      	blx	r3
 8022b58:	f8ba 5000 	ldrh.w	r5, [sl]
 8022b5c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022b60:	f04f 0e04 	mov.w	lr, #4
 8022b64:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022b68:	436e      	muls	r6, r5
 8022b6a:	fb05 2303 	mla	r3, r5, r3, r2
 8022b6e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022b72:	1b2d      	subs	r5, r5, r4
 8022b74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022b7c:	4418      	add	r0, r3
 8022b7e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022b82:	1982      	adds	r2, r0, r6
 8022b84:	1b1b      	subs	r3, r3, r4
 8022b86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022b8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022b8c:	4290      	cmp	r0, r2
 8022b8e:	d254      	bcs.n	8022c3a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022b90:	eb00 0a04 	add.w	sl, r0, r4
 8022b94:	4550      	cmp	r0, sl
 8022b96:	d24c      	bcs.n	8022c32 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8022b98:	f817 1b01 	ldrb.w	r1, [r7], #1
 8022b9c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8022ba0:	eb08 0c01 	add.w	ip, r8, r1
 8022ba4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022ba8:	b173      	cbz	r3, 8022bc8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022baa:	2bff      	cmp	r3, #255	@ 0xff
 8022bac:	f818 b001 	ldrb.w	fp, [r8, r1]
 8022bb0:	d10c      	bne.n	8022bcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022bb2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022bb6:	d109      	bne.n	8022bcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022bb8:	f880 b000 	strb.w	fp, [r0]
 8022bbc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022bc0:	7043      	strb	r3, [r0, #1]
 8022bc2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022bc6:	7083      	strb	r3, [r0, #2]
 8022bc8:	3003      	adds	r0, #3
 8022bca:	e7e3      	b.n	8022b94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8022bcc:	fb09 f103 	mul.w	r1, r9, r3
 8022bd0:	1c4b      	adds	r3, r1, #1
 8022bd2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022bd6:	7801      	ldrb	r1, [r0, #0]
 8022bd8:	121b      	asrs	r3, r3, #8
 8022bda:	b29e      	uxth	r6, r3
 8022bdc:	43db      	mvns	r3, r3
 8022bde:	fb1b fb06 	smulbb	fp, fp, r6
 8022be2:	b2db      	uxtb	r3, r3
 8022be4:	fb01 b103 	mla	r1, r1, r3, fp
 8022be8:	b289      	uxth	r1, r1
 8022bea:	f101 0b01 	add.w	fp, r1, #1
 8022bee:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022bf2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022bf6:	fb1b fb03 	smulbb	fp, fp, r3
 8022bfa:	1209      	asrs	r1, r1, #8
 8022bfc:	7001      	strb	r1, [r0, #0]
 8022bfe:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022c02:	fb01 b106 	mla	r1, r1, r6, fp
 8022c06:	b289      	uxth	r1, r1
 8022c08:	f101 0b01 	add.w	fp, r1, #1
 8022c0c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022c10:	1209      	asrs	r1, r1, #8
 8022c12:	7041      	strb	r1, [r0, #1]
 8022c14:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8022c18:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022c1c:	fb1c f303 	smulbb	r3, ip, r3
 8022c20:	fb01 3606 	mla	r6, r1, r6, r3
 8022c24:	b2b6      	uxth	r6, r6
 8022c26:	1c73      	adds	r3, r6, #1
 8022c28:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022c2c:	1236      	asrs	r6, r6, #8
 8022c2e:	7086      	strb	r6, [r0, #2]
 8022c30:	e7ca      	b.n	8022bc8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022c32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022c34:	4428      	add	r0, r5
 8022c36:	441f      	add	r7, r3
 8022c38:	e7a8      	b.n	8022b8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8022c3a:	4b03      	ldr	r3, [pc, #12]	@ (8022c48 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022c3c:	6818      	ldr	r0, [r3, #0]
 8022c3e:	6803      	ldr	r3, [r0, #0]
 8022c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c42:	4798      	blx	r3
 8022c44:	e782      	b.n	8022b4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8022c46:	bf00      	nop
 8022c48:	24028770 	.word	0x24028770
 8022c4c:	2402876a 	.word	0x2402876a

08022c50 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c54:	b091      	sub	sp, #68	@ 0x44
 8022c56:	4680      	mov	r8, r0
 8022c58:	460e      	mov	r6, r1
 8022c5a:	6810      	ldr	r0, [r2, #0]
 8022c5c:	6851      	ldr	r1, [r2, #4]
 8022c5e:	ad0c      	add	r5, sp, #48	@ 0x30
 8022c60:	4614      	mov	r4, r2
 8022c62:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 8022c66:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8022e00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8022c6a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8022e04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022c6e:	c503      	stmia	r5!, {r0, r1}
 8022c70:	6818      	ldr	r0, [r3, #0]
 8022c72:	ad0e      	add	r5, sp, #56	@ 0x38
 8022c74:	6859      	ldr	r1, [r3, #4]
 8022c76:	c503      	stmia	r5!, {r0, r1}
 8022c78:	a80c      	add	r0, sp, #48	@ 0x30
 8022c7a:	f7f8 f8cb 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c7e:	4621      	mov	r1, r4
 8022c80:	a80e      	add	r0, sp, #56	@ 0x38
 8022c82:	f7f8 f90b 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022c86:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022c8a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022c8e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022c92:	f8d9 0000 	ldr.w	r0, [r9]
 8022c96:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022c9a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8022c9e:	eb08 0401 	add.w	r4, r8, r1
 8022ca2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022ca6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8022caa:	440a      	add	r2, r1
 8022cac:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8022cb0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8022cb4:	4413      	add	r3, r2
 8022cb6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022cba:	6803      	ldr	r3, [r0, #0]
 8022cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022cbe:	4798      	blx	r3
 8022cc0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022cc4:	f8d9 0000 	ldr.w	r0, [r9]
 8022cc8:	d022      	beq.n	8022d10 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8022cca:	2200      	movs	r2, #0
 8022ccc:	f04f 0c01 	mov.w	ip, #1
 8022cd0:	6801      	ldr	r1, [r0, #0]
 8022cd2:	b2ad      	uxth	r5, r5
 8022cd4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022cd8:	e9cd c208 	strd	ip, r2, [sp, #32]
 8022cdc:	f04f 0c0b 	mov.w	ip, #11
 8022ce0:	f8cd c01c 	str.w	ip, [sp, #28]
 8022ce4:	f8ba c000 	ldrh.w	ip, [sl]
 8022ce8:	9704      	str	r7, [sp, #16]
 8022cea:	9502      	str	r5, [sp, #8]
 8022cec:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8022cf0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022cf4:	9203      	str	r2, [sp, #12]
 8022cf6:	fa1f f288 	uxth.w	r2, r8
 8022cfa:	9201      	str	r2, [sp, #4]
 8022cfc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022d00:	9200      	str	r2, [sp, #0]
 8022d02:	4632      	mov	r2, r6
 8022d04:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8022d06:	4621      	mov	r1, r4
 8022d08:	47a8      	blx	r5
 8022d0a:	b011      	add	sp, #68	@ 0x44
 8022d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d10:	6803      	ldr	r3, [r0, #0]
 8022d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022d14:	4798      	blx	r3
 8022d16:	f8ba 2000 	ldrh.w	r2, [sl]
 8022d1a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022d1e:	f04f 0e03 	mov.w	lr, #3
 8022d22:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8022d26:	4355      	muls	r5, r2
 8022d28:	fa1f fc87 	uxth.w	ip, r7
 8022d2c:	fb02 1303 	mla	r3, r2, r3, r1
 8022d30:	eba2 0208 	sub.w	r2, r2, r8
 8022d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022d40:	4418      	add	r0, r3
 8022d42:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022d44:	1943      	adds	r3, r0, r5
 8022d46:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8022d4a:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 8022d4e:	eba2 0208 	sub.w	r2, r2, r8
 8022d52:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022d56:	b2ad      	uxth	r5, r5
 8022d58:	4298      	cmp	r0, r3
 8022d5a:	d24a      	bcs.n	8022df2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8022d5c:	eb00 0908 	add.w	r9, r0, r8
 8022d60:	4621      	mov	r1, r4
 8022d62:	4548      	cmp	r0, r9
 8022d64:	460c      	mov	r4, r1
 8022d66:	d240      	bcs.n	8022dea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022d68:	f04f 0a04 	mov.w	sl, #4
 8022d6c:	7824      	ldrb	r4, [r4, #0]
 8022d6e:	2fff      	cmp	r7, #255	@ 0xff
 8022d70:	f101 0101 	add.w	r1, r1, #1
 8022d74:	fb1e a404 	smlabb	r4, lr, r4, sl
 8022d78:	eb06 0a04 	add.w	sl, r6, r4
 8022d7c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8022d80:	d02b      	beq.n	8022dda <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8022d82:	7804      	ldrb	r4, [r0, #0]
 8022d84:	fb14 f405 	smulbb	r4, r4, r5
 8022d88:	fb0b 440c 	mla	r4, fp, ip, r4
 8022d8c:	b2a4      	uxth	r4, r4
 8022d8e:	f104 0b01 	add.w	fp, r4, #1
 8022d92:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022d96:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022d9a:	fb1b fb05 	smulbb	fp, fp, r5
 8022d9e:	1224      	asrs	r4, r4, #8
 8022da0:	7004      	strb	r4, [r0, #0]
 8022da2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022da6:	fb04 b40c 	mla	r4, r4, ip, fp
 8022daa:	b2a4      	uxth	r4, r4
 8022dac:	f104 0b01 	add.w	fp, r4, #1
 8022db0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022db4:	1224      	asrs	r4, r4, #8
 8022db6:	7044      	strb	r4, [r0, #1]
 8022db8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022dbc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022dc0:	fb1a fa05 	smulbb	sl, sl, r5
 8022dc4:	fb04 a40c 	mla	r4, r4, ip, sl
 8022dc8:	b2a4      	uxth	r4, r4
 8022dca:	f104 0a01 	add.w	sl, r4, #1
 8022dce:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022dd2:	1224      	asrs	r4, r4, #8
 8022dd4:	7084      	strb	r4, [r0, #2]
 8022dd6:	3003      	adds	r0, #3
 8022dd8:	e7c3      	b.n	8022d62 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8022dda:	f880 b000 	strb.w	fp, [r0]
 8022dde:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022de2:	7044      	strb	r4, [r0, #1]
 8022de4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022de8:	e7f4      	b.n	8022dd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8022dea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022dec:	4420      	add	r0, r4
 8022dee:	188c      	adds	r4, r1, r2
 8022df0:	e7b2      	b.n	8022d58 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8022df2:	4b03      	ldr	r3, [pc, #12]	@ (8022e00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022df4:	6818      	ldr	r0, [r3, #0]
 8022df6:	6803      	ldr	r3, [r0, #0]
 8022df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022dfa:	4798      	blx	r3
 8022dfc:	e785      	b.n	8022d0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8022dfe:	bf00      	nop
 8022e00:	24028770 	.word	0x24028770
 8022e04:	2402876a 	.word	0x2402876a

08022e08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022e08:	b4f0      	push	{r4, r5, r6, r7}
 8022e0a:	460c      	mov	r4, r1
 8022e0c:	4611      	mov	r1, r2
 8022e0e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022e12:	461a      	mov	r2, r3
 8022e14:	780f      	ldrb	r7, [r1, #0]
 8022e16:	9b04      	ldr	r3, [sp, #16]
 8022e18:	784e      	ldrb	r6, [r1, #1]
 8022e1a:	b11f      	cbz	r7, 8022e24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8022e1c:	2f01      	cmp	r7, #1
 8022e1e:	d01d      	beq.n	8022e5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8022e20:	bcf0      	pop	{r4, r5, r6, r7}
 8022e22:	4770      	bx	lr
 8022e24:	2e03      	cmp	r6, #3
 8022e26:	d8fb      	bhi.n	8022e20 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022e28:	e8df f006 	tbb	[pc, r6]
 8022e2c:	16140702 	.word	0x16140702
 8022e30:	9504      	str	r5, [sp, #16]
 8022e32:	4620      	mov	r0, r4
 8022e34:	bcf0      	pop	{r4, r5, r6, r7}
 8022e36:	f7ff be33 	b.w	8022aa0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022e3a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8022e3c:	2800      	cmp	r0, #0
 8022e3e:	d0ef      	beq.n	8022e20 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022e40:	6806      	ldr	r6, [r0, #0]
 8022e42:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022e46:	68f5      	ldr	r5, [r6, #12]
 8022e48:	4613      	mov	r3, r2
 8022e4a:	46ac      	mov	ip, r5
 8022e4c:	460a      	mov	r2, r1
 8022e4e:	4621      	mov	r1, r4
 8022e50:	bcf0      	pop	{r4, r5, r6, r7}
 8022e52:	4760      	bx	ip
 8022e54:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8022e56:	e7f1      	b.n	8022e3c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022e58:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8022e5a:	e7ef      	b.n	8022e3c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022e5c:	2e03      	cmp	r6, #3
 8022e5e:	d8df      	bhi.n	8022e20 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022e60:	e8df f006 	tbb	[pc, r6]
 8022e64:	110f0702 	.word	0x110f0702
 8022e68:	9504      	str	r5, [sp, #16]
 8022e6a:	4620      	mov	r0, r4
 8022e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8022e6e:	f7ff beef 	b.w	8022c50 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022e72:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8022e74:	2800      	cmp	r0, #0
 8022e76:	d0d3      	beq.n	8022e20 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022e78:	6806      	ldr	r6, [r0, #0]
 8022e7a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022e7e:	68b5      	ldr	r5, [r6, #8]
 8022e80:	e7e2      	b.n	8022e48 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022e82:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8022e84:	e7f6      	b.n	8022e74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8022e86:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8022e88:	e7f4      	b.n	8022e74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08022e8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8022e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022e90:	4605      	mov	r5, r0
 8022e92:	b08f      	sub	sp, #60	@ 0x3c
 8022e94:	460c      	mov	r4, r1
 8022e96:	461f      	mov	r7, r3
 8022e98:	2b00      	cmp	r3, #0
 8022e9a:	d052      	beq.n	8022f42 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022e9c:	6808      	ldr	r0, [r1, #0]
 8022e9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8022ea0:	6849      	ldr	r1, [r1, #4]
 8022ea2:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 802306c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8022ea6:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8023070 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8022eaa:	c303      	stmia	r3!, {r0, r1}
 8022eac:	6810      	ldr	r0, [r2, #0]
 8022eae:	ab0c      	add	r3, sp, #48	@ 0x30
 8022eb0:	6851      	ldr	r1, [r2, #4]
 8022eb2:	c303      	stmia	r3!, {r0, r1}
 8022eb4:	a80a      	add	r0, sp, #40	@ 0x28
 8022eb6:	f7f7 ffad 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022eba:	4621      	mov	r1, r4
 8022ebc:	a80c      	add	r0, sp, #48	@ 0x30
 8022ebe:	f7f7 ffed 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ec2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022ec6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022eca:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022ece:	f8d8 0000 	ldr.w	r0, [r8]
 8022ed2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022ed6:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8022eda:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8022ede:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8022ee2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022ee6:	440a      	add	r2, r1
 8022ee8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8022eec:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8022ef0:	4413      	add	r3, r2
 8022ef2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022ef6:	6803      	ldr	r3, [r0, #0]
 8022ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022efa:	4798      	blx	r3
 8022efc:	2fff      	cmp	r7, #255	@ 0xff
 8022efe:	d023      	beq.n	8022f48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8022f00:	f010 0f04 	tst.w	r0, #4
 8022f04:	f8d8 0000 	ldr.w	r0, [r8]
 8022f08:	d021      	beq.n	8022f4e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8022f0a:	2100      	movs	r1, #0
 8022f0c:	f04f 0e01 	mov.w	lr, #1
 8022f10:	f8d0 c000 	ldr.w	ip, [r0]
 8022f14:	b2a4      	uxth	r4, r4
 8022f16:	9106      	str	r1, [sp, #24]
 8022f18:	b2b6      	uxth	r6, r6
 8022f1a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8022f1e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022f22:	e9cd e107 	strd	lr, r1, [sp, #28]
 8022f26:	f8b9 e000 	ldrh.w	lr, [r9]
 8022f2a:	9703      	str	r7, [sp, #12]
 8022f2c:	9401      	str	r4, [sp, #4]
 8022f2e:	9600      	str	r6, [sp, #0]
 8022f30:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022f34:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022f38:	9102      	str	r1, [sp, #8]
 8022f3a:	4629      	mov	r1, r5
 8022f3c:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8022f40:	47a0      	blx	r4
 8022f42:	b00f      	add	sp, #60	@ 0x3c
 8022f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022f48:	f010 0f01 	tst.w	r0, #1
 8022f4c:	e7da      	b.n	8022f04 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8022f4e:	6803      	ldr	r3, [r0, #0]
 8022f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022f52:	4798      	blx	r3
 8022f54:	f8b9 1000 	ldrh.w	r1, [r9]
 8022f58:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022f5c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8022f60:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022f64:	434c      	muls	r4, r1
 8022f66:	2fff      	cmp	r7, #255	@ 0xff
 8022f68:	fb01 2303 	mla	r3, r1, r3, r2
 8022f6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022f70:	eba1 0106 	sub.w	r1, r1, r6
 8022f74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022f7c:	4418      	add	r0, r3
 8022f7e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8022f82:	eba3 0606 	sub.w	r6, r3, r6
 8022f86:	4404      	add	r4, r0
 8022f88:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8022f8c:	d04a      	beq.n	8023024 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8022f8e:	43fa      	mvns	r2, r7
 8022f90:	b2bb      	uxth	r3, r7
 8022f92:	b2d7      	uxtb	r7, r2
 8022f94:	42a0      	cmp	r0, r4
 8022f96:	d263      	bcs.n	8023060 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022f98:	eb00 0e0c 	add.w	lr, r0, ip
 8022f9c:	4586      	cmp	lr, r0
 8022f9e:	f100 0803 	add.w	r8, r0, #3
 8022fa2:	d93a      	bls.n	802301a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8022fa4:	f835 2b02 	ldrh.w	r2, [r5], #2
 8022fa8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8022fac:	00d0      	lsls	r0, r2, #3
 8022fae:	fb19 f907 	smulbb	r9, r9, r7
 8022fb2:	b2c0      	uxtb	r0, r0
 8022fb4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022fb8:	fb00 9003 	mla	r0, r0, r3, r9
 8022fbc:	b280      	uxth	r0, r0
 8022fbe:	f100 0901 	add.w	r9, r0, #1
 8022fc2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8022fc6:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8022fca:	fb19 f907 	smulbb	r9, r9, r7
 8022fce:	1200      	asrs	r0, r0, #8
 8022fd0:	f808 0c03 	strb.w	r0, [r8, #-3]
 8022fd4:	10d0      	asrs	r0, r2, #3
 8022fd6:	1212      	asrs	r2, r2, #8
 8022fd8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8022fdc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8022fe0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8022fe4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022fe8:	fb00 9003 	mla	r0, r0, r3, r9
 8022fec:	b280      	uxth	r0, r0
 8022fee:	f100 0901 	add.w	r9, r0, #1
 8022ff2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8022ff6:	1200      	asrs	r0, r0, #8
 8022ff8:	f808 0c02 	strb.w	r0, [r8, #-2]
 8022ffc:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8023000:	fb10 f007 	smulbb	r0, r0, r7
 8023004:	fb02 0203 	mla	r2, r2, r3, r0
 8023008:	b292      	uxth	r2, r2
 802300a:	1c50      	adds	r0, r2, #1
 802300c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023010:	4640      	mov	r0, r8
 8023012:	1212      	asrs	r2, r2, #8
 8023014:	f808 2c01 	strb.w	r2, [r8, #-1]
 8023018:	e7c0      	b.n	8022f9c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 802301a:	4408      	add	r0, r1
 802301c:	4435      	add	r5, r6
 802301e:	e7b9      	b.n	8022f94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8023020:	4408      	add	r0, r1
 8023022:	4435      	add	r5, r6
 8023024:	42a0      	cmp	r0, r4
 8023026:	d21b      	bcs.n	8023060 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8023028:	eb00 070c 	add.w	r7, r0, ip
 802302c:	42b8      	cmp	r0, r7
 802302e:	d2f7      	bcs.n	8023020 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8023030:	f835 3b02 	ldrh.w	r3, [r5], #2
 8023034:	3003      	adds	r0, #3
 8023036:	00da      	lsls	r2, r3, #3
 8023038:	b2d2      	uxtb	r2, r2
 802303a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802303e:	f800 2c03 	strb.w	r2, [r0, #-3]
 8023042:	10da      	asrs	r2, r3, #3
 8023044:	121b      	asrs	r3, r3, #8
 8023046:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802304a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802304e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023052:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8023056:	f800 2c02 	strb.w	r2, [r0, #-2]
 802305a:	f800 3c01 	strb.w	r3, [r0, #-1]
 802305e:	e7e5      	b.n	802302c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8023060:	4b02      	ldr	r3, [pc, #8]	@ (802306c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8023062:	6818      	ldr	r0, [r3, #0]
 8023064:	6803      	ldr	r3, [r0, #0]
 8023066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023068:	4798      	blx	r3
 802306a:	e76a      	b.n	8022f42 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802306c:	24028770 	.word	0x24028770
 8023070:	2402876a 	.word	0x2402876a

08023074 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8023074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023078:	b08a      	sub	sp, #40	@ 0x28
 802307a:	460d      	mov	r5, r1
 802307c:	4604      	mov	r4, r0
 802307e:	461e      	mov	r6, r3
 8023080:	6808      	ldr	r0, [r1, #0]
 8023082:	ab06      	add	r3, sp, #24
 8023084:	6849      	ldr	r1, [r1, #4]
 8023086:	4f5d      	ldr	r7, [pc, #372]	@ (80231fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8023088:	c303      	stmia	r3!, {r0, r1}
 802308a:	6810      	ldr	r0, [r2, #0]
 802308c:	ab08      	add	r3, sp, #32
 802308e:	6851      	ldr	r1, [r2, #4]
 8023090:	c303      	stmia	r3!, {r0, r1}
 8023092:	a806      	add	r0, sp, #24
 8023094:	f7f7 febe 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023098:	4629      	mov	r1, r5
 802309a:	a808      	add	r0, sp, #32
 802309c:	f7f7 fefe 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80230a0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80230a4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80230a8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80230ac:	6838      	ldr	r0, [r7, #0]
 80230ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80230b2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80230b6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80230ba:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80230be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80230c2:	440a      	add	r2, r1
 80230c4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80230c8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80230cc:	4413      	add	r3, r2
 80230ce:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80230d2:	6803      	ldr	r3, [r0, #0]
 80230d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80230d6:	4798      	blx	r3
 80230d8:	2eff      	cmp	r6, #255	@ 0xff
 80230da:	d119      	bne.n	8023110 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80230dc:	f010 0f20 	tst.w	r0, #32
 80230e0:	6838      	ldr	r0, [r7, #0]
 80230e2:	d018      	beq.n	8023116 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80230e4:	b2ad      	uxth	r5, r5
 80230e6:	2700      	movs	r7, #0
 80230e8:	6801      	ldr	r1, [r0, #0]
 80230ea:	9501      	str	r5, [sp, #4]
 80230ec:	fa1f f588 	uxth.w	r5, r8
 80230f0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80230f4:	9500      	str	r5, [sp, #0]
 80230f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80230fa:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80230fe:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8023102:	9602      	str	r6, [sp, #8]
 8023104:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8023106:	4621      	mov	r1, r4
 8023108:	47a8      	blx	r5
 802310a:	b00a      	add	sp, #40	@ 0x28
 802310c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023110:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8023114:	e7e4      	b.n	80230e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8023116:	6803      	ldr	r3, [r0, #0]
 8023118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802311a:	4798      	blx	r3
 802311c:	4b38      	ldr	r3, [pc, #224]	@ (8023200 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 802311e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023122:	f8b3 c000 	ldrh.w	ip, [r3]
 8023126:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 802312a:	fb0c f505 	mul.w	r5, ip, r5
 802312e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8023132:	fb0c 2303 	mla	r3, ip, r3, r2
 8023136:	ebac 0c08 	sub.w	ip, ip, r8
 802313a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802313e:	ebae 0e08 	sub.w	lr, lr, r8
 8023142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023146:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802314a:	4418      	add	r0, r3
 802314c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8023150:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8023154:	4405      	add	r5, r0
 8023156:	42a8      	cmp	r0, r5
 8023158:	d24a      	bcs.n	80231f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 802315a:	eb00 0803 	add.w	r8, r0, r3
 802315e:	4540      	cmp	r0, r8
 8023160:	d243      	bcs.n	80231ea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8023162:	78e2      	ldrb	r2, [r4, #3]
 8023164:	b15a      	cbz	r2, 802317e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8023166:	2aff      	cmp	r2, #255	@ 0xff
 8023168:	f894 9000 	ldrb.w	r9, [r4]
 802316c:	d10a      	bne.n	8023184 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 802316e:	2eff      	cmp	r6, #255	@ 0xff
 8023170:	d108      	bne.n	8023184 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8023172:	f880 9000 	strb.w	r9, [r0]
 8023176:	7862      	ldrb	r2, [r4, #1]
 8023178:	7042      	strb	r2, [r0, #1]
 802317a:	78a2      	ldrb	r2, [r4, #2]
 802317c:	7082      	strb	r2, [r0, #2]
 802317e:	3003      	adds	r0, #3
 8023180:	3404      	adds	r4, #4
 8023182:	e7ec      	b.n	802315e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8023184:	4372      	muls	r2, r6
 8023186:	1c51      	adds	r1, r2, #1
 8023188:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802318c:	1209      	asrs	r1, r1, #8
 802318e:	fa1f fa81 	uxth.w	sl, r1
 8023192:	43c9      	mvns	r1, r1
 8023194:	fb19 f90a 	smulbb	r9, r9, sl
 8023198:	b2ca      	uxtb	r2, r1
 802319a:	7801      	ldrb	r1, [r0, #0]
 802319c:	fb01 9902 	mla	r9, r1, r2, r9
 80231a0:	fa1f f989 	uxth.w	r9, r9
 80231a4:	f109 0101 	add.w	r1, r9, #1
 80231a8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80231ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80231b0:	f880 9000 	strb.w	r9, [r0]
 80231b4:	f890 9001 	ldrb.w	r9, [r0, #1]
 80231b8:	7861      	ldrb	r1, [r4, #1]
 80231ba:	fb19 f902 	smulbb	r9, r9, r2
 80231be:	fb01 910a 	mla	r1, r1, sl, r9
 80231c2:	b289      	uxth	r1, r1
 80231c4:	f101 0901 	add.w	r9, r1, #1
 80231c8:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80231cc:	1209      	asrs	r1, r1, #8
 80231ce:	7041      	strb	r1, [r0, #1]
 80231d0:	7881      	ldrb	r1, [r0, #2]
 80231d2:	f894 9002 	ldrb.w	r9, [r4, #2]
 80231d6:	fb11 f202 	smulbb	r2, r1, r2
 80231da:	fb09 220a 	mla	r2, r9, sl, r2
 80231de:	b292      	uxth	r2, r2
 80231e0:	1c51      	adds	r1, r2, #1
 80231e2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80231e6:	1212      	asrs	r2, r2, #8
 80231e8:	e7c8      	b.n	802317c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80231ea:	4460      	add	r0, ip
 80231ec:	4474      	add	r4, lr
 80231ee:	e7b2      	b.n	8023156 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80231f0:	6838      	ldr	r0, [r7, #0]
 80231f2:	6803      	ldr	r3, [r0, #0]
 80231f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80231f6:	4798      	blx	r3
 80231f8:	e787      	b.n	802310a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80231fa:	bf00      	nop
 80231fc:	24028770 	.word	0x24028770
 8023200:	2402876a 	.word	0x2402876a

08023204 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023208:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 802320c:	4607      	mov	r7, r0
 802320e:	460c      	mov	r4, r1
 8023210:	4692      	mov	sl, r2
 8023212:	4699      	mov	r9, r3
 8023214:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023216:	b335      	cbz	r5, 8023266 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023218:	4608      	mov	r0, r1
 802321a:	f7fb fd93 	bl	801ed44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802321e:	4680      	mov	r8, r0
 8023220:	4620      	mov	r0, r4
 8023222:	f7fb fdc3 	bl	801edac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023226:	f8ad 000e 	strh.w	r0, [sp, #14]
 802322a:	4620      	mov	r0, r4
 802322c:	f8ad a008 	strh.w	sl, [sp, #8]
 8023230:	f8ad 900a 	strh.w	r9, [sp, #10]
 8023234:	f8ad 800c 	strh.w	r8, [sp, #12]
 8023238:	f7fb fefa 	bl	801f030 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802323c:	2810      	cmp	r0, #16
 802323e:	d812      	bhi.n	8023266 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023240:	e8df f000 	tbb	[pc, r0]
 8023244:	11092d24 	.word	0x11092d24
 8023248:	11111111 	.word	0x11111111
 802324c:	14111111 	.word	0x14111111
 8023250:	4c111111 	.word	0x4c111111
 8023254:	3c          	.byte	0x3c
 8023255:	00          	.byte	0x00
 8023256:	4620      	mov	r0, r4
 8023258:	f7fb fe66 	bl	801ef28 <_ZNK8touchgfx6Bitmap7getDataEv>
 802325c:	462b      	mov	r3, r5
 802325e:	4632      	mov	r2, r6
 8023260:	a902      	add	r1, sp, #8
 8023262:	f7ff ff07 	bl	8023074 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023266:	b004      	add	sp, #16
 8023268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802326c:	4620      	mov	r0, r4
 802326e:	f7fb fe5b 	bl	801ef28 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023272:	4680      	mov	r8, r0
 8023274:	4620      	mov	r0, r4
 8023276:	f7fb fe87 	bl	801ef88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802327a:	ab02      	add	r3, sp, #8
 802327c:	4602      	mov	r2, r0
 802327e:	4641      	mov	r1, r8
 8023280:	4638      	mov	r0, r7
 8023282:	e9cd 6500 	strd	r6, r5, [sp]
 8023286:	f7ff fdbf 	bl	8022e08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802328a:	e7ec      	b.n	8023266 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802328c:	4620      	mov	r0, r4
 802328e:	f7fb fe4b 	bl	801ef28 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023292:	462b      	mov	r3, r5
 8023294:	4632      	mov	r2, r6
 8023296:	a902      	add	r1, sp, #8
 8023298:	f7ff fdf8 	bl	8022e8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802329c:	e7e3      	b.n	8023266 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802329e:	683b      	ldr	r3, [r7, #0]
 80232a0:	4620      	mov	r0, r4
 80232a2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80232a6:	f7fb fe3f 	bl	801ef28 <_ZNK8touchgfx6Bitmap7getDataEv>
 80232aa:	2300      	movs	r3, #0
 80232ac:	4601      	mov	r1, r0
 80232ae:	aa02      	add	r2, sp, #8
 80232b0:	4638      	mov	r0, r7
 80232b2:	e9cd 5300 	strd	r5, r3, [sp]
 80232b6:	4633      	mov	r3, r6
 80232b8:	47c0      	blx	r8
 80232ba:	e7d4      	b.n	8023266 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80232bc:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80232be:	2f00      	cmp	r7, #0
 80232c0:	d0d1      	beq.n	8023266 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80232c2:	683b      	ldr	r3, [r7, #0]
 80232c4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80232c8:	4620      	mov	r0, r4
 80232ca:	f7fb fe2d 	bl	801ef28 <_ZNK8touchgfx6Bitmap7getDataEv>
 80232ce:	9500      	str	r5, [sp, #0]
 80232d0:	4601      	mov	r1, r0
 80232d2:	4633      	mov	r3, r6
 80232d4:	aa02      	add	r2, sp, #8
 80232d6:	4638      	mov	r0, r7
 80232d8:	47c0      	blx	r8
 80232da:	e7c4      	b.n	8023266 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80232dc:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80232de:	2f00      	cmp	r7, #0
 80232e0:	d0c1      	beq.n	8023266 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80232e2:	683b      	ldr	r3, [r7, #0]
 80232e4:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80232e8:	e7ee      	b.n	80232c8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

080232ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80232ea:	b4f0      	push	{r4, r5, r6, r7}
 80232ec:	4616      	mov	r6, r2
 80232ee:	461c      	mov	r4, r3
 80232f0:	460d      	mov	r5, r1
 80232f2:	9a04      	ldr	r2, [sp, #16]
 80232f4:	2e01      	cmp	r6, #1
 80232f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80232fa:	d00e      	beq.n	802331a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80232fc:	d303      	bcc.n	8023306 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80232fe:	2e02      	cmp	r6, #2
 8023300:	d006      	beq.n	8023310 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8023302:	bcf0      	pop	{r4, r5, r6, r7}
 8023304:	4770      	bx	lr
 8023306:	4621      	mov	r1, r4
 8023308:	4628      	mov	r0, r5
 802330a:	bcf0      	pop	{r4, r5, r6, r7}
 802330c:	f7ff bdbe 	b.w	8022e8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8023310:	4621      	mov	r1, r4
 8023312:	4628      	mov	r0, r5
 8023314:	bcf0      	pop	{r4, r5, r6, r7}
 8023316:	f7ff bead 	b.w	8023074 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802331a:	6805      	ldr	r5, [r0, #0]
 802331c:	2600      	movs	r6, #0
 802331e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8023322:	68ed      	ldr	r5, [r5, #12]
 8023324:	4613      	mov	r3, r2
 8023326:	4622      	mov	r2, r4
 8023328:	46ac      	mov	ip, r5
 802332a:	bcf0      	pop	{r4, r5, r6, r7}
 802332c:	4760      	bx	ip
	...

08023330 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8023330:	b160      	cbz	r0, 802334c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8023332:	2903      	cmp	r1, #3
 8023334:	d818      	bhi.n	8023368 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8023336:	e8df f001 	tbb	[pc, r1]
 802333a:	1902      	.short	0x1902
 802333c:	1b06      	.short	0x1b06
 802333e:	4b0e      	ldr	r3, [pc, #56]	@ (8023378 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8023340:	8818      	ldrh	r0, [r3, #0]
 8023342:	4240      	negs	r0, r0
 8023344:	4770      	bx	lr
 8023346:	4b0c      	ldr	r3, [pc, #48]	@ (8023378 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8023348:	8818      	ldrh	r0, [r3, #0]
 802334a:	4770      	bx	lr
 802334c:	2903      	cmp	r1, #3
 802334e:	d80b      	bhi.n	8023368 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8023350:	a301      	add	r3, pc, #4	@ (adr r3, 8023358 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8023352:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023356:	bf00      	nop
 8023358:	0802336d 	.word	0x0802336d
 802335c:	08023347 	.word	0x08023347
 8023360:	08023371 	.word	0x08023371
 8023364:	0802333f 	.word	0x0802333f
 8023368:	2000      	movs	r0, #0
 802336a:	4770      	bx	lr
 802336c:	2001      	movs	r0, #1
 802336e:	4770      	bx	lr
 8023370:	f04f 30ff 	mov.w	r0, #4294967295
 8023374:	4770      	bx	lr
 8023376:	bf00      	nop
 8023378:	2402876a 	.word	0x2402876a

0802337c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 802337c:	b160      	cbz	r0, 8023398 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 802337e:	2903      	cmp	r1, #3
 8023380:	d818      	bhi.n	80233b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8023382:	e8df f001 	tbb	[pc, r1]
 8023386:	0219      	.short	0x0219
 8023388:	051b      	.short	0x051b
 802338a:	4b0e      	ldr	r3, [pc, #56]	@ (80233c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 802338c:	8818      	ldrh	r0, [r3, #0]
 802338e:	4770      	bx	lr
 8023390:	4b0c      	ldr	r3, [pc, #48]	@ (80233c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8023392:	8818      	ldrh	r0, [r3, #0]
 8023394:	4240      	negs	r0, r0
 8023396:	4770      	bx	lr
 8023398:	2903      	cmp	r1, #3
 802339a:	d80b      	bhi.n	80233b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 802339c:	a301      	add	r3, pc, #4	@ (adr r3, 80233a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 802339e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80233a2:	bf00      	nop
 80233a4:	0802338b 	.word	0x0802338b
 80233a8:	080233bd 	.word	0x080233bd
 80233ac:	08023391 	.word	0x08023391
 80233b0:	080233b9 	.word	0x080233b9
 80233b4:	2000      	movs	r0, #0
 80233b6:	4770      	bx	lr
 80233b8:	2001      	movs	r0, #1
 80233ba:	4770      	bx	lr
 80233bc:	f04f 30ff 	mov.w	r0, #4294967295
 80233c0:	4770      	bx	lr
 80233c2:	bf00      	nop
 80233c4:	2402876a 	.word	0x2402876a

080233c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80233c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233cc:	b097      	sub	sp, #92	@ 0x5c
 80233ce:	910b      	str	r1, [sp, #44]	@ 0x2c
 80233d0:	a912      	add	r1, sp, #72	@ 0x48
 80233d2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 80233d6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 80233da:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 80233de:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 80233e2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 80233e6:	e881 000c 	stmia.w	r1, {r2, r3}
 80233ea:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 80233ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80233f0:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 80233f4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 80233f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80233fa:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 80233fe:	798d      	ldrb	r5, [r1, #6]
 8023400:	930c      	str	r3, [sp, #48]	@ 0x30
 8023402:	7b4b      	ldrb	r3, [r1, #13]
 8023404:	0158      	lsls	r0, r3, #5
 8023406:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 802340a:	4328      	orrs	r0, r5
 802340c:	9009      	str	r0, [sp, #36]	@ 0x24
 802340e:	f000 817c 	beq.w	802370a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023412:	011b      	lsls	r3, r3, #4
 8023414:	79c8      	ldrb	r0, [r1, #7]
 8023416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802341a:	4303      	orrs	r3, r0
 802341c:	930e      	str	r3, [sp, #56]	@ 0x38
 802341e:	f000 8174 	beq.w	802370a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023422:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023426:	b29b      	uxth	r3, r3
 8023428:	2f00      	cmp	r7, #0
 802342a:	f000 8116 	beq.w	802365a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 802342e:	1aff      	subs	r7, r7, r3
 8023430:	b2bf      	uxth	r7, r7
 8023432:	043b      	lsls	r3, r7, #16
 8023434:	d502      	bpl.n	802343c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8023436:	1bf6      	subs	r6, r6, r7
 8023438:	2700      	movs	r7, #0
 802343a:	b236      	sxth	r6, r6
 802343c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023440:	a812      	add	r0, sp, #72	@ 0x48
 8023442:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8023446:	428e      	cmp	r6, r1
 8023448:	b28b      	uxth	r3, r1
 802344a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 802344e:	bfbf      	itttt	lt
 8023450:	18ff      	addlt	r7, r7, r3
 8023452:	1bbe      	sublt	r6, r7, r6
 8023454:	b2b7      	uxthlt	r7, r6
 8023456:	460e      	movlt	r6, r1
 8023458:	8891      	ldrh	r1, [r2, #4]
 802345a:	440b      	add	r3, r1
 802345c:	4631      	mov	r1, r6
 802345e:	b21b      	sxth	r3, r3
 8023460:	9310      	str	r3, [sp, #64]	@ 0x40
 8023462:	88d3      	ldrh	r3, [r2, #6]
 8023464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023466:	449a      	add	sl, r3
 8023468:	fa0f f38a 	sxth.w	r3, sl
 802346c:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8023470:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023472:	4bb5      	ldr	r3, [pc, #724]	@ (8023748 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8023474:	f893 b000 	ldrb.w	fp, [r3]
 8023478:	f10b 3cff 	add.w	ip, fp, #4294967295
 802347c:	f1dc 0300 	rsbs	r3, ip, #0
 8023480:	eb43 030c 	adc.w	r3, r3, ip
 8023484:	930d      	str	r3, [sp, #52]	@ 0x34
 8023486:	464b      	mov	r3, r9
 8023488:	f7f7 fb39 	bl	801aafe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802348c:	4631      	mov	r1, r6
 802348e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8023492:	464b      	mov	r3, r9
 8023494:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023496:	a812      	add	r0, sp, #72	@ 0x48
 8023498:	f7f7 fb4e 	bl	801ab38 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802349c:	a916      	add	r1, sp, #88	@ 0x58
 802349e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80234a2:	a815      	add	r0, sp, #84	@ 0x54
 80234a4:	f7f7 fc74 	bl	801ad90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80234a8:	f1b9 0f00 	cmp.w	r9, #0
 80234ac:	f040 80d8 	bne.w	8023660 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 80234b0:	f1bb 0f01 	cmp.w	fp, #1
 80234b4:	f040 80dc 	bne.w	8023670 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80234b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80234ba:	b153      	cbz	r3, 80234d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80234bc:	2508      	movs	r5, #8
 80234be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80234c0:	fb95 f3f8 	sdiv	r3, r5, r8
 80234c4:	1e5d      	subs	r5, r3, #1
 80234c6:	4415      	add	r5, r2
 80234c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80234cc:	fb15 f503 	smulbb	r5, r5, r3
 80234d0:	b2ad      	uxth	r5, r5
 80234d2:	b907      	cbnz	r7, 80234d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80234d4:	b16c      	cbz	r4, 80234f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80234d6:	fb04 7305 	mla	r3, r4, r5, r7
 80234da:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80234dc:	ebaa 0a04 	sub.w	sl, sl, r4
 80234e0:	fb08 f303 	mul.w	r3, r8, r3
 80234e4:	fa1f fa8a 	uxth.w	sl, sl
 80234e8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80234ec:	f003 0407 	and.w	r4, r3, #7
 80234f0:	9226      	str	r2, [sp, #152]	@ 0x98
 80234f2:	4649      	mov	r1, r9
 80234f4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80234f6:	f7ff ff1b 	bl	8023330 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80234fa:	4683      	mov	fp, r0
 80234fc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80234fe:	f7ff ff3d 	bl	802337c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8023502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023506:	4681      	mov	r9, r0
 8023508:	1a9b      	subs	r3, r3, r2
 802350a:	459a      	cmp	sl, r3
 802350c:	bfa8      	it	ge
 802350e:	469a      	movge	sl, r3
 8023510:	f1ba 0f00 	cmp.w	sl, #0
 8023514:	f340 80f9 	ble.w	802370a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023518:	1bf6      	subs	r6, r6, r7
 802351a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802351c:	1b9e      	subs	r6, r3, r6
 802351e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023520:	429e      	cmp	r6, r3
 8023522:	bfd4      	ite	le
 8023524:	ebc7 0706 	rsble	r7, r7, r6
 8023528:	ebc7 0703 	rsbgt	r7, r7, r3
 802352c:	2f00      	cmp	r7, #0
 802352e:	f340 80ec 	ble.w	802370a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023532:	1bed      	subs	r5, r5, r7
 8023534:	fb08 f305 	mul.w	r3, r8, r5
 8023538:	930d      	str	r3, [sp, #52]	@ 0x34
 802353a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802353c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023540:	930e      	str	r3, [sp, #56]	@ 0x38
 8023542:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023544:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023548:	930f      	str	r3, [sp, #60]	@ 0x3c
 802354a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802354c:	b2db      	uxtb	r3, r3
 802354e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023552:	2b00      	cmp	r3, #0
 8023554:	f040 80de 	bne.w	8023714 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8023558:	4b7c      	ldr	r3, [pc, #496]	@ (802374c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 802355a:	6818      	ldr	r0, [r3, #0]
 802355c:	6803      	ldr	r3, [r0, #0]
 802355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023560:	4798      	blx	r3
 8023562:	2301      	movs	r3, #1
 8023564:	4a7a      	ldr	r2, [pc, #488]	@ (8023750 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8023566:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 802356a:	fb07 9b1b 	mls	fp, r7, fp, r9
 802356e:	fa03 f308 	lsl.w	r3, r3, r8
 8023572:	8811      	ldrh	r1, [r2, #0]
 8023574:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8023578:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 802357c:	3b01      	subs	r3, #1
 802357e:	fb06 bb07 	mla	fp, r6, r7, fp
 8023582:	b2db      	uxtb	r3, r3
 8023584:	930a      	str	r3, [sp, #40]	@ 0x28
 8023586:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 802358a:	fb01 2303 	mla	r3, r1, r3, r2
 802358e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023592:	18c3      	adds	r3, r0, r3
 8023594:	9309      	str	r3, [sp, #36]	@ 0x24
 8023596:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023598:	781a      	ldrb	r2, [r3, #0]
 802359a:	4122      	asrs	r2, r4
 802359c:	b2d2      	uxtb	r2, r2
 802359e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80235a2:	f0c0 80d7 	bcc.w	8023754 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80235a6:	46be      	mov	lr, r7
 80235a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80235aa:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80235ae:	f0c0 80ba 	bcc.w	8023726 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 80235b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80235b4:	4013      	ands	r3, r2
 80235b6:	d041      	beq.n	802363c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80235b8:	20ff      	movs	r0, #255	@ 0xff
 80235ba:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80235bc:	fb90 f5f5 	sdiv	r5, r0, r5
 80235c0:	436b      	muls	r3, r5
 80235c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80235c4:	dd03      	ble.n	80235ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 80235c6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80235c8:	4285      	cmp	r5, r0
 80235ca:	f000 80a5 	beq.w	8023718 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80235ce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80235d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80235d2:	fb15 f303 	smulbb	r3, r5, r3
 80235d6:	b29b      	uxth	r3, r3
 80235d8:	1c5d      	adds	r5, r3, #1
 80235da:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80235de:	780d      	ldrb	r5, [r1, #0]
 80235e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80235e4:	fa1f fc83 	uxth.w	ip, r3
 80235e8:	43db      	mvns	r3, r3
 80235ea:	fb10 f90c 	smulbb	r9, r0, ip
 80235ee:	b2db      	uxtb	r3, r3
 80235f0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80235f2:	fb05 9503 	mla	r5, r5, r3, r9
 80235f6:	b2ad      	uxth	r5, r5
 80235f8:	f105 0901 	add.w	r9, r5, #1
 80235fc:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023600:	fb10 f90c 	smulbb	r9, r0, ip
 8023604:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023606:	122d      	asrs	r5, r5, #8
 8023608:	fb10 fc0c 	smulbb	ip, r0, ip
 802360c:	700d      	strb	r5, [r1, #0]
 802360e:	784d      	ldrb	r5, [r1, #1]
 8023610:	fb05 9503 	mla	r5, r5, r3, r9
 8023614:	b2ad      	uxth	r5, r5
 8023616:	f105 0901 	add.w	r9, r5, #1
 802361a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 802361e:	122d      	asrs	r5, r5, #8
 8023620:	704d      	strb	r5, [r1, #1]
 8023622:	788d      	ldrb	r5, [r1, #2]
 8023624:	fb05 cc03 	mla	ip, r5, r3, ip
 8023628:	fa1f fc8c 	uxth.w	ip, ip
 802362c:	f10c 0301 	add.w	r3, ip, #1
 8023630:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023634:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023638:	f881 c002 	strb.w	ip, [r1, #2]
 802363c:	4444      	add	r4, r8
 802363e:	4431      	add	r1, r6
 8023640:	b2a4      	uxth	r4, r4
 8023642:	2c07      	cmp	r4, #7
 8023644:	bf89      	itett	hi
 8023646:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8023648:	fa42 f208 	asrls.w	r2, r2, r8
 802364c:	2400      	movhi	r4, #0
 802364e:	785a      	ldrbhi	r2, [r3, #1]
 8023650:	bf8a      	itet	hi
 8023652:	3301      	addhi	r3, #1
 8023654:	b2d2      	uxtbls	r2, r2
 8023656:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8023658:	e7a7      	b.n	80235aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 802365a:	441e      	add	r6, r3
 802365c:	b236      	sxth	r6, r6
 802365e:	e6ed      	b.n	802343c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8023660:	f1b9 0f01 	cmp.w	r9, #1
 8023664:	f47f af28 	bne.w	80234b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023668:	f1bb 0f01 	cmp.w	fp, #1
 802366c:	f47f af24 	bne.w	80234b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023670:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 802374c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8023674:	f8db 0000 	ldr.w	r0, [fp]
 8023678:	6803      	ldr	r3, [r0, #0]
 802367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802367c:	4798      	blx	r3
 802367e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8023682:	465a      	mov	r2, fp
 8023684:	d006      	beq.n	8023694 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8023686:	f1b8 0f04 	cmp.w	r8, #4
 802368a:	d141      	bne.n	8023710 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 802368c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802368e:	3300      	adds	r3, #0
 8023690:	bf18      	it	ne
 8023692:	2301      	movne	r3, #1
 8023694:	0580      	lsls	r0, r0, #22
 8023696:	d566      	bpl.n	8023766 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8023698:	f1b8 0f08 	cmp.w	r8, #8
 802369c:	d163      	bne.n	8023766 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802369e:	2b00      	cmp	r3, #0
 80236a0:	bf0c      	ite	eq
 80236a2:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80236a6:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80236aa:	2f00      	cmp	r7, #0
 80236ac:	f47f af04 	bne.w	80234b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80236b0:	2c00      	cmp	r4, #0
 80236b2:	f47f af01 	bne.w	80234b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80236b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80236ba:	18f3      	adds	r3, r6, r3
 80236bc:	4283      	cmp	r3, r0
 80236be:	f73f aefb 	bgt.w	80234b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80236c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80236c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80236c6:	4403      	add	r3, r0
 80236c8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80236ca:	4283      	cmp	r3, r0
 80236cc:	f73f aef4 	bgt.w	80234b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80236d0:	f1b8 0f08 	cmp.w	r8, #8
 80236d4:	6810      	ldr	r0, [r2, #0]
 80236d6:	f04f 0600 	mov.w	r6, #0
 80236da:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 80236de:	bf18      	it	ne
 80236e0:	3501      	addne	r5, #1
 80236e2:	6804      	ldr	r4, [r0, #0]
 80236e4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 80236e8:	bf18      	it	ne
 80236ea:	f025 0501 	bicne.w	r5, r5, #1
 80236ee:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80236f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80236f4:	bf18      	it	ne
 80236f6:	b2ad      	uxthne	r5, r5
 80236f8:	9104      	str	r1, [sp, #16]
 80236fa:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80236fc:	e9cd 5a00 	strd	r5, sl, [sp]
 8023700:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8023704:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8023706:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8023708:	47a0      	blx	r4
 802370a:	b017      	add	sp, #92	@ 0x5c
 802370c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023710:	2300      	movs	r3, #0
 8023712:	e7bf      	b.n	8023694 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8023714:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023716:	e724      	b.n	8023562 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8023718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802371a:	700b      	strb	r3, [r1, #0]
 802371c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802371e:	704b      	strb	r3, [r1, #1]
 8023720:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023722:	708b      	strb	r3, [r1, #2]
 8023724:	e78a      	b.n	802363c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8023726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023728:	b153      	cbz	r3, 8023740 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 802372a:	441c      	add	r4, r3
 802372c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802372e:	b2a4      	uxth	r4, r4
 8023730:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8023734:	f004 0407 	and.w	r4, r4, #7
 8023738:	781a      	ldrb	r2, [r3, #0]
 802373a:	9326      	str	r3, [sp, #152]	@ 0x98
 802373c:	4122      	asrs	r2, r4
 802373e:	b2d2      	uxtb	r2, r2
 8023740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023742:	445b      	add	r3, fp
 8023744:	9309      	str	r3, [sp, #36]	@ 0x24
 8023746:	e72a      	b.n	802359e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8023748:	24028768 	.word	0x24028768
 802374c:	24028770 	.word	0x24028770
 8023750:	2402876a 	.word	0x2402876a
 8023754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023756:	2b00      	cmp	r3, #0
 8023758:	d1d7      	bne.n	802370a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802375a:	4b06      	ldr	r3, [pc, #24]	@ (8023774 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 802375c:	6818      	ldr	r0, [r3, #0]
 802375e:	6803      	ldr	r3, [r0, #0]
 8023760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023762:	4798      	blx	r3
 8023764:	e7d1      	b.n	802370a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023766:	2b00      	cmp	r3, #0
 8023768:	f43f aea6 	beq.w	80234b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802376c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023770:	e79b      	b.n	80236aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8023772:	bf00      	nop
 8023774:	24028770 	.word	0x24028770

08023778 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023778:	b538      	push	{r3, r4, r5, lr}
 802377a:	4c15      	ldr	r4, [pc, #84]	@ (80237d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 802377c:	4605      	mov	r5, r0
 802377e:	7823      	ldrb	r3, [r4, #0]
 8023780:	f3bf 8f5b 	dmb	ish
 8023784:	07da      	lsls	r2, r3, #31
 8023786:	d40b      	bmi.n	80237a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023788:	4620      	mov	r0, r4
 802378a:	f006 f8f7 	bl	802997c <__cxa_guard_acquire>
 802378e:	b138      	cbz	r0, 80237a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023790:	4620      	mov	r0, r4
 8023792:	f006 f8ff 	bl	8029994 <__cxa_guard_release>
 8023796:	4a0f      	ldr	r2, [pc, #60]	@ (80237d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023798:	490f      	ldr	r1, [pc, #60]	@ (80237d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802379a:	4810      	ldr	r0, [pc, #64]	@ (80237dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802379c:	f006 f8e7 	bl	802996e <__aeabi_atexit>
 80237a0:	4c0f      	ldr	r4, [pc, #60]	@ (80237e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80237a2:	7823      	ldrb	r3, [r4, #0]
 80237a4:	f3bf 8f5b 	dmb	ish
 80237a8:	07db      	lsls	r3, r3, #31
 80237aa:	d40b      	bmi.n	80237c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80237ac:	4620      	mov	r0, r4
 80237ae:	f006 f8e5 	bl	802997c <__cxa_guard_acquire>
 80237b2:	b138      	cbz	r0, 80237c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80237b4:	4620      	mov	r0, r4
 80237b6:	f006 f8ed 	bl	8029994 <__cxa_guard_release>
 80237ba:	4a06      	ldr	r2, [pc, #24]	@ (80237d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80237bc:	4909      	ldr	r1, [pc, #36]	@ (80237e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80237be:	480a      	ldr	r0, [pc, #40]	@ (80237e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80237c0:	f006 f8d5 	bl	802996e <__aeabi_atexit>
 80237c4:	4b05      	ldr	r3, [pc, #20]	@ (80237dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80237c6:	616b      	str	r3, [r5, #20]
 80237c8:	4b07      	ldr	r3, [pc, #28]	@ (80237e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80237ca:	61ab      	str	r3, [r5, #24]
 80237cc:	bd38      	pop	{r3, r4, r5, pc}
 80237ce:	bf00      	nop
 80237d0:	24028854 	.word	0x24028854
 80237d4:	24000000 	.word	0x24000000
 80237d8:	08020a69 	.word	0x08020a69
 80237dc:	240000c8 	.word	0x240000c8
 80237e0:	24028858 	.word	0x24028858
 80237e4:	08020a67 	.word	0x08020a67
 80237e8:	240000cc 	.word	0x240000cc

080237ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80237ec:	b538      	push	{r3, r4, r5, lr}
 80237ee:	4c15      	ldr	r4, [pc, #84]	@ (8023844 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80237f0:	4605      	mov	r5, r0
 80237f2:	7823      	ldrb	r3, [r4, #0]
 80237f4:	f3bf 8f5b 	dmb	ish
 80237f8:	07da      	lsls	r2, r3, #31
 80237fa:	d40b      	bmi.n	8023814 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80237fc:	4620      	mov	r0, r4
 80237fe:	f006 f8bd 	bl	802997c <__cxa_guard_acquire>
 8023802:	b138      	cbz	r0, 8023814 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023804:	4620      	mov	r0, r4
 8023806:	f006 f8c5 	bl	8029994 <__cxa_guard_release>
 802380a:	4a0f      	ldr	r2, [pc, #60]	@ (8023848 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802380c:	490f      	ldr	r1, [pc, #60]	@ (802384c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802380e:	4810      	ldr	r0, [pc, #64]	@ (8023850 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023810:	f006 f8ad 	bl	802996e <__aeabi_atexit>
 8023814:	4c0f      	ldr	r4, [pc, #60]	@ (8023854 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8023816:	7823      	ldrb	r3, [r4, #0]
 8023818:	f3bf 8f5b 	dmb	ish
 802381c:	07db      	lsls	r3, r3, #31
 802381e:	d40b      	bmi.n	8023838 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023820:	4620      	mov	r0, r4
 8023822:	f006 f8ab 	bl	802997c <__cxa_guard_acquire>
 8023826:	b138      	cbz	r0, 8023838 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023828:	4620      	mov	r0, r4
 802382a:	f006 f8b3 	bl	8029994 <__cxa_guard_release>
 802382e:	4a06      	ldr	r2, [pc, #24]	@ (8023848 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023830:	4909      	ldr	r1, [pc, #36]	@ (8023858 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8023832:	480a      	ldr	r0, [pc, #40]	@ (802385c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023834:	f006 f89b 	bl	802996e <__aeabi_atexit>
 8023838:	4b05      	ldr	r3, [pc, #20]	@ (8023850 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802383a:	60eb      	str	r3, [r5, #12]
 802383c:	4b07      	ldr	r3, [pc, #28]	@ (802385c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802383e:	612b      	str	r3, [r5, #16]
 8023840:	bd38      	pop	{r3, r4, r5, pc}
 8023842:	bf00      	nop
 8023844:	24028834 	.word	0x24028834
 8023848:	24000000 	.word	0x24000000
 802384c:	08020a6d 	.word	0x08020a6d
 8023850:	240000a8 	.word	0x240000a8
 8023854:	24028838 	.word	0x24028838
 8023858:	08020a6b 	.word	0x08020a6b
 802385c:	240000ac 	.word	0x240000ac

08023860 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8023860:	b510      	push	{r4, lr}
 8023862:	4604      	mov	r4, r0
 8023864:	f7ff ff88 	bl	8023778 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023868:	4620      	mov	r0, r4
 802386a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802386e:	f7ff bfbd 	b.w	80237ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08023874 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8023874:	b538      	push	{r3, r4, r5, lr}
 8023876:	4c15      	ldr	r4, [pc, #84]	@ (80238cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023878:	4605      	mov	r5, r0
 802387a:	7823      	ldrb	r3, [r4, #0]
 802387c:	f3bf 8f5b 	dmb	ish
 8023880:	07da      	lsls	r2, r3, #31
 8023882:	d40b      	bmi.n	802389c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023884:	4620      	mov	r0, r4
 8023886:	f006 f879 	bl	802997c <__cxa_guard_acquire>
 802388a:	b138      	cbz	r0, 802389c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802388c:	4620      	mov	r0, r4
 802388e:	f006 f881 	bl	8029994 <__cxa_guard_release>
 8023892:	4a0f      	ldr	r2, [pc, #60]	@ (80238d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023894:	490f      	ldr	r1, [pc, #60]	@ (80238d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8023896:	4810      	ldr	r0, [pc, #64]	@ (80238d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023898:	f006 f869 	bl	802996e <__aeabi_atexit>
 802389c:	4c0f      	ldr	r4, [pc, #60]	@ (80238dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802389e:	7823      	ldrb	r3, [r4, #0]
 80238a0:	f3bf 8f5b 	dmb	ish
 80238a4:	07db      	lsls	r3, r3, #31
 80238a6:	d40b      	bmi.n	80238c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80238a8:	4620      	mov	r0, r4
 80238aa:	f006 f867 	bl	802997c <__cxa_guard_acquire>
 80238ae:	b138      	cbz	r0, 80238c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80238b0:	4620      	mov	r0, r4
 80238b2:	f006 f86f 	bl	8029994 <__cxa_guard_release>
 80238b6:	4a06      	ldr	r2, [pc, #24]	@ (80238d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80238b8:	4909      	ldr	r1, [pc, #36]	@ (80238e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80238ba:	480a      	ldr	r0, [pc, #40]	@ (80238e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80238bc:	f006 f857 	bl	802996e <__aeabi_atexit>
 80238c0:	4b05      	ldr	r3, [pc, #20]	@ (80238d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80238c2:	626b      	str	r3, [r5, #36]	@ 0x24
 80238c4:	4b07      	ldr	r3, [pc, #28]	@ (80238e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80238c6:	62ab      	str	r3, [r5, #40]	@ 0x28
 80238c8:	bd38      	pop	{r3, r4, r5, pc}
 80238ca:	bf00      	nop
 80238cc:	2402885c 	.word	0x2402885c
 80238d0:	24000000 	.word	0x24000000
 80238d4:	08020a61 	.word	0x08020a61
 80238d8:	240000d0 	.word	0x240000d0
 80238dc:	24028860 	.word	0x24028860
 80238e0:	08020a5f 	.word	0x08020a5f
 80238e4:	240000d4 	.word	0x240000d4

080238e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80238e8:	b538      	push	{r3, r4, r5, lr}
 80238ea:	4c15      	ldr	r4, [pc, #84]	@ (8023940 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80238ec:	4605      	mov	r5, r0
 80238ee:	7823      	ldrb	r3, [r4, #0]
 80238f0:	f3bf 8f5b 	dmb	ish
 80238f4:	07da      	lsls	r2, r3, #31
 80238f6:	d40b      	bmi.n	8023910 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80238f8:	4620      	mov	r0, r4
 80238fa:	f006 f83f 	bl	802997c <__cxa_guard_acquire>
 80238fe:	b138      	cbz	r0, 8023910 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023900:	4620      	mov	r0, r4
 8023902:	f006 f847 	bl	8029994 <__cxa_guard_release>
 8023906:	4a0f      	ldr	r2, [pc, #60]	@ (8023944 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023908:	490f      	ldr	r1, [pc, #60]	@ (8023948 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802390a:	4810      	ldr	r0, [pc, #64]	@ (802394c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802390c:	f006 f82f 	bl	802996e <__aeabi_atexit>
 8023910:	4c0f      	ldr	r4, [pc, #60]	@ (8023950 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8023912:	7823      	ldrb	r3, [r4, #0]
 8023914:	f3bf 8f5b 	dmb	ish
 8023918:	07db      	lsls	r3, r3, #31
 802391a:	d40b      	bmi.n	8023934 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802391c:	4620      	mov	r0, r4
 802391e:	f006 f82d 	bl	802997c <__cxa_guard_acquire>
 8023922:	b138      	cbz	r0, 8023934 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023924:	4620      	mov	r0, r4
 8023926:	f006 f835 	bl	8029994 <__cxa_guard_release>
 802392a:	4a06      	ldr	r2, [pc, #24]	@ (8023944 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802392c:	4909      	ldr	r1, [pc, #36]	@ (8023954 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802392e:	480a      	ldr	r0, [pc, #40]	@ (8023958 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023930:	f006 f81d 	bl	802996e <__aeabi_atexit>
 8023934:	4b05      	ldr	r3, [pc, #20]	@ (802394c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023936:	61eb      	str	r3, [r5, #28]
 8023938:	4b07      	ldr	r3, [pc, #28]	@ (8023958 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802393a:	622b      	str	r3, [r5, #32]
 802393c:	bd38      	pop	{r3, r4, r5, pc}
 802393e:	bf00      	nop
 8023940:	2402883c 	.word	0x2402883c
 8023944:	24000000 	.word	0x24000000
 8023948:	08020a65 	.word	0x08020a65
 802394c:	240000b0 	.word	0x240000b0
 8023950:	24028840 	.word	0x24028840
 8023954:	08020a63 	.word	0x08020a63
 8023958:	240000b4 	.word	0x240000b4

0802395c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 802395c:	b510      	push	{r4, lr}
 802395e:	4604      	mov	r4, r0
 8023960:	f7ff ff88 	bl	8023874 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023964:	4620      	mov	r0, r4
 8023966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802396a:	f7ff bfbd 	b.w	80238e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023970 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8023970:	b538      	push	{r3, r4, r5, lr}
 8023972:	4c15      	ldr	r4, [pc, #84]	@ (80239c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8023974:	4605      	mov	r5, r0
 8023976:	7823      	ldrb	r3, [r4, #0]
 8023978:	f3bf 8f5b 	dmb	ish
 802397c:	07da      	lsls	r2, r3, #31
 802397e:	d40b      	bmi.n	8023998 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8023980:	4620      	mov	r0, r4
 8023982:	f005 fffb 	bl	802997c <__cxa_guard_acquire>
 8023986:	b138      	cbz	r0, 8023998 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8023988:	4620      	mov	r0, r4
 802398a:	f006 f803 	bl	8029994 <__cxa_guard_release>
 802398e:	4a0f      	ldr	r2, [pc, #60]	@ (80239cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8023990:	490f      	ldr	r1, [pc, #60]	@ (80239d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8023992:	4810      	ldr	r0, [pc, #64]	@ (80239d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8023994:	f005 ffeb 	bl	802996e <__aeabi_atexit>
 8023998:	4c0f      	ldr	r4, [pc, #60]	@ (80239d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 802399a:	7823      	ldrb	r3, [r4, #0]
 802399c:	f3bf 8f5b 	dmb	ish
 80239a0:	07db      	lsls	r3, r3, #31
 80239a2:	d40b      	bmi.n	80239bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80239a4:	4620      	mov	r0, r4
 80239a6:	f005 ffe9 	bl	802997c <__cxa_guard_acquire>
 80239aa:	b138      	cbz	r0, 80239bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80239ac:	4620      	mov	r0, r4
 80239ae:	f005 fff1 	bl	8029994 <__cxa_guard_release>
 80239b2:	4a06      	ldr	r2, [pc, #24]	@ (80239cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80239b4:	4909      	ldr	r1, [pc, #36]	@ (80239dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80239b6:	480a      	ldr	r0, [pc, #40]	@ (80239e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80239b8:	f005 ffd9 	bl	802996e <__aeabi_atexit>
 80239bc:	4b05      	ldr	r3, [pc, #20]	@ (80239d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80239be:	636b      	str	r3, [r5, #52]	@ 0x34
 80239c0:	4b07      	ldr	r3, [pc, #28]	@ (80239e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80239c2:	63ab      	str	r3, [r5, #56]	@ 0x38
 80239c4:	bd38      	pop	{r3, r4, r5, pc}
 80239c6:	bf00      	nop
 80239c8:	24028844 	.word	0x24028844
 80239cc:	24000000 	.word	0x24000000
 80239d0:	08020a59 	.word	0x08020a59
 80239d4:	240000b8 	.word	0x240000b8
 80239d8:	24028848 	.word	0x24028848
 80239dc:	08020a57 	.word	0x08020a57
 80239e0:	240000bc 	.word	0x240000bc

080239e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 80239e4:	b538      	push	{r3, r4, r5, lr}
 80239e6:	4c15      	ldr	r4, [pc, #84]	@ (8023a3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 80239e8:	4605      	mov	r5, r0
 80239ea:	7823      	ldrb	r3, [r4, #0]
 80239ec:	f3bf 8f5b 	dmb	ish
 80239f0:	07da      	lsls	r2, r3, #31
 80239f2:	d40b      	bmi.n	8023a0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80239f4:	4620      	mov	r0, r4
 80239f6:	f005 ffc1 	bl	802997c <__cxa_guard_acquire>
 80239fa:	b138      	cbz	r0, 8023a0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80239fc:	4620      	mov	r0, r4
 80239fe:	f005 ffc9 	bl	8029994 <__cxa_guard_release>
 8023a02:	4a0f      	ldr	r2, [pc, #60]	@ (8023a40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023a04:	490f      	ldr	r1, [pc, #60]	@ (8023a44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8023a06:	4810      	ldr	r0, [pc, #64]	@ (8023a48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023a08:	f005 ffb1 	bl	802996e <__aeabi_atexit>
 8023a0c:	4c0f      	ldr	r4, [pc, #60]	@ (8023a4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8023a0e:	7823      	ldrb	r3, [r4, #0]
 8023a10:	f3bf 8f5b 	dmb	ish
 8023a14:	07db      	lsls	r3, r3, #31
 8023a16:	d40b      	bmi.n	8023a30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023a18:	4620      	mov	r0, r4
 8023a1a:	f005 ffaf 	bl	802997c <__cxa_guard_acquire>
 8023a1e:	b138      	cbz	r0, 8023a30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023a20:	4620      	mov	r0, r4
 8023a22:	f005 ffb7 	bl	8029994 <__cxa_guard_release>
 8023a26:	4a06      	ldr	r2, [pc, #24]	@ (8023a40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023a28:	4909      	ldr	r1, [pc, #36]	@ (8023a50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8023a2a:	480a      	ldr	r0, [pc, #40]	@ (8023a54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023a2c:	f005 ff9f 	bl	802996e <__aeabi_atexit>
 8023a30:	4b05      	ldr	r3, [pc, #20]	@ (8023a48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023a32:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023a34:	4b07      	ldr	r3, [pc, #28]	@ (8023a54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023a36:	632b      	str	r3, [r5, #48]	@ 0x30
 8023a38:	bd38      	pop	{r3, r4, r5, pc}
 8023a3a:	bf00      	nop
 8023a3c:	2402881c 	.word	0x2402881c
 8023a40:	24000000 	.word	0x24000000
 8023a44:	08020a5d 	.word	0x08020a5d
 8023a48:	24000090 	.word	0x24000090
 8023a4c:	24028820 	.word	0x24028820
 8023a50:	08020a5b 	.word	0x08020a5b
 8023a54:	24000094 	.word	0x24000094

08023a58 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8023a58:	b510      	push	{r4, lr}
 8023a5a:	4604      	mov	r4, r0
 8023a5c:	f7ff ff88 	bl	8023970 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8023a60:	4620      	mov	r0, r4
 8023a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a66:	f7ff bfbd 	b.w	80239e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08023a6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023a6c:	b538      	push	{r3, r4, r5, lr}
 8023a6e:	4c15      	ldr	r4, [pc, #84]	@ (8023ac4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023a70:	4605      	mov	r5, r0
 8023a72:	7823      	ldrb	r3, [r4, #0]
 8023a74:	f3bf 8f5b 	dmb	ish
 8023a78:	07da      	lsls	r2, r3, #31
 8023a7a:	d40b      	bmi.n	8023a94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023a7c:	4620      	mov	r0, r4
 8023a7e:	f005 ff7d 	bl	802997c <__cxa_guard_acquire>
 8023a82:	b138      	cbz	r0, 8023a94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023a84:	4620      	mov	r0, r4
 8023a86:	f005 ff85 	bl	8029994 <__cxa_guard_release>
 8023a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8023ac8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023a8c:	490f      	ldr	r1, [pc, #60]	@ (8023acc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023a8e:	4810      	ldr	r0, [pc, #64]	@ (8023ad0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023a90:	f005 ff6d 	bl	802996e <__aeabi_atexit>
 8023a94:	4c0f      	ldr	r4, [pc, #60]	@ (8023ad4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023a96:	7823      	ldrb	r3, [r4, #0]
 8023a98:	f3bf 8f5b 	dmb	ish
 8023a9c:	07db      	lsls	r3, r3, #31
 8023a9e:	d40b      	bmi.n	8023ab8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023aa0:	4620      	mov	r0, r4
 8023aa2:	f005 ff6b 	bl	802997c <__cxa_guard_acquire>
 8023aa6:	b138      	cbz	r0, 8023ab8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023aa8:	4620      	mov	r0, r4
 8023aaa:	f005 ff73 	bl	8029994 <__cxa_guard_release>
 8023aae:	4a06      	ldr	r2, [pc, #24]	@ (8023ac8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023ab0:	4909      	ldr	r1, [pc, #36]	@ (8023ad8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023ab2:	480a      	ldr	r0, [pc, #40]	@ (8023adc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023ab4:	f005 ff5b 	bl	802996e <__aeabi_atexit>
 8023ab8:	4b05      	ldr	r3, [pc, #20]	@ (8023ad0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023aba:	646b      	str	r3, [r5, #68]	@ 0x44
 8023abc:	4b07      	ldr	r3, [pc, #28]	@ (8023adc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023abe:	64ab      	str	r3, [r5, #72]	@ 0x48
 8023ac0:	bd38      	pop	{r3, r4, r5, pc}
 8023ac2:	bf00      	nop
 8023ac4:	2402884c 	.word	0x2402884c
 8023ac8:	24000000 	.word	0x24000000
 8023acc:	08020a51 	.word	0x08020a51
 8023ad0:	240000c0 	.word	0x240000c0
 8023ad4:	24028850 	.word	0x24028850
 8023ad8:	08020a4f 	.word	0x08020a4f
 8023adc:	240000c4 	.word	0x240000c4

08023ae0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023ae0:	b538      	push	{r3, r4, r5, lr}
 8023ae2:	4c15      	ldr	r4, [pc, #84]	@ (8023b38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023ae4:	4605      	mov	r5, r0
 8023ae6:	7823      	ldrb	r3, [r4, #0]
 8023ae8:	f3bf 8f5b 	dmb	ish
 8023aec:	07da      	lsls	r2, r3, #31
 8023aee:	d40b      	bmi.n	8023b08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023af0:	4620      	mov	r0, r4
 8023af2:	f005 ff43 	bl	802997c <__cxa_guard_acquire>
 8023af6:	b138      	cbz	r0, 8023b08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023af8:	4620      	mov	r0, r4
 8023afa:	f005 ff4b 	bl	8029994 <__cxa_guard_release>
 8023afe:	4a0f      	ldr	r2, [pc, #60]	@ (8023b3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023b00:	490f      	ldr	r1, [pc, #60]	@ (8023b40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023b02:	4810      	ldr	r0, [pc, #64]	@ (8023b44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023b04:	f005 ff33 	bl	802996e <__aeabi_atexit>
 8023b08:	4c0f      	ldr	r4, [pc, #60]	@ (8023b48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023b0a:	7823      	ldrb	r3, [r4, #0]
 8023b0c:	f3bf 8f5b 	dmb	ish
 8023b10:	07db      	lsls	r3, r3, #31
 8023b12:	d40b      	bmi.n	8023b2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023b14:	4620      	mov	r0, r4
 8023b16:	f005 ff31 	bl	802997c <__cxa_guard_acquire>
 8023b1a:	b138      	cbz	r0, 8023b2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023b1c:	4620      	mov	r0, r4
 8023b1e:	f005 ff39 	bl	8029994 <__cxa_guard_release>
 8023b22:	4a06      	ldr	r2, [pc, #24]	@ (8023b3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023b24:	4909      	ldr	r1, [pc, #36]	@ (8023b4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023b26:	480a      	ldr	r0, [pc, #40]	@ (8023b50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023b28:	f005 ff21 	bl	802996e <__aeabi_atexit>
 8023b2c:	4b05      	ldr	r3, [pc, #20]	@ (8023b44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023b2e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023b30:	4b07      	ldr	r3, [pc, #28]	@ (8023b50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023b32:	642b      	str	r3, [r5, #64]	@ 0x40
 8023b34:	bd38      	pop	{r3, r4, r5, pc}
 8023b36:	bf00      	nop
 8023b38:	2402882c 	.word	0x2402882c
 8023b3c:	24000000 	.word	0x24000000
 8023b40:	08020a55 	.word	0x08020a55
 8023b44:	240000a0 	.word	0x240000a0
 8023b48:	24028830 	.word	0x24028830
 8023b4c:	08020a53 	.word	0x08020a53
 8023b50:	240000a4 	.word	0x240000a4

08023b54 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8023b54:	b510      	push	{r4, lr}
 8023b56:	4604      	mov	r4, r0
 8023b58:	f7ff ff88 	bl	8023a6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023b5c:	4620      	mov	r0, r4
 8023b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023b62:	f7ff bfbd 	b.w	8023ae0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023b68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023b68:	b538      	push	{r3, r4, r5, lr}
 8023b6a:	4c15      	ldr	r4, [pc, #84]	@ (8023bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023b6c:	4605      	mov	r5, r0
 8023b6e:	7823      	ldrb	r3, [r4, #0]
 8023b70:	f3bf 8f5b 	dmb	ish
 8023b74:	07da      	lsls	r2, r3, #31
 8023b76:	d40b      	bmi.n	8023b90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023b78:	4620      	mov	r0, r4
 8023b7a:	f005 feff 	bl	802997c <__cxa_guard_acquire>
 8023b7e:	b138      	cbz	r0, 8023b90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023b80:	4620      	mov	r0, r4
 8023b82:	f005 ff07 	bl	8029994 <__cxa_guard_release>
 8023b86:	4a0f      	ldr	r2, [pc, #60]	@ (8023bc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023b88:	490f      	ldr	r1, [pc, #60]	@ (8023bc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023b8a:	4810      	ldr	r0, [pc, #64]	@ (8023bcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023b8c:	f005 feef 	bl	802996e <__aeabi_atexit>
 8023b90:	4c0f      	ldr	r4, [pc, #60]	@ (8023bd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023b92:	7823      	ldrb	r3, [r4, #0]
 8023b94:	f3bf 8f5b 	dmb	ish
 8023b98:	07db      	lsls	r3, r3, #31
 8023b9a:	d40b      	bmi.n	8023bb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023b9c:	4620      	mov	r0, r4
 8023b9e:	f005 feed 	bl	802997c <__cxa_guard_acquire>
 8023ba2:	b138      	cbz	r0, 8023bb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023ba4:	4620      	mov	r0, r4
 8023ba6:	f005 fef5 	bl	8029994 <__cxa_guard_release>
 8023baa:	4a06      	ldr	r2, [pc, #24]	@ (8023bc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023bac:	4909      	ldr	r1, [pc, #36]	@ (8023bd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023bae:	480a      	ldr	r0, [pc, #40]	@ (8023bd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023bb0:	f005 fedd 	bl	802996e <__aeabi_atexit>
 8023bb4:	4b05      	ldr	r3, [pc, #20]	@ (8023bcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023bb6:	656b      	str	r3, [r5, #84]	@ 0x54
 8023bb8:	4b07      	ldr	r3, [pc, #28]	@ (8023bd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023bba:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023bbc:	bd38      	pop	{r3, r4, r5, pc}
 8023bbe:	bf00      	nop
 8023bc0:	24028824 	.word	0x24028824
 8023bc4:	24000000 	.word	0x24000000
 8023bc8:	08020a49 	.word	0x08020a49
 8023bcc:	24000098 	.word	0x24000098
 8023bd0:	24028828 	.word	0x24028828
 8023bd4:	08020a47 	.word	0x08020a47
 8023bd8:	2400009c 	.word	0x2400009c

08023bdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023bdc:	b538      	push	{r3, r4, r5, lr}
 8023bde:	4c15      	ldr	r4, [pc, #84]	@ (8023c34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023be0:	4605      	mov	r5, r0
 8023be2:	7823      	ldrb	r3, [r4, #0]
 8023be4:	f3bf 8f5b 	dmb	ish
 8023be8:	07da      	lsls	r2, r3, #31
 8023bea:	d40b      	bmi.n	8023c04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023bec:	4620      	mov	r0, r4
 8023bee:	f005 fec5 	bl	802997c <__cxa_guard_acquire>
 8023bf2:	b138      	cbz	r0, 8023c04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023bf4:	4620      	mov	r0, r4
 8023bf6:	f005 fecd 	bl	8029994 <__cxa_guard_release>
 8023bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8023c38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023bfc:	490f      	ldr	r1, [pc, #60]	@ (8023c3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023bfe:	4810      	ldr	r0, [pc, #64]	@ (8023c40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023c00:	f005 feb5 	bl	802996e <__aeabi_atexit>
 8023c04:	4c0f      	ldr	r4, [pc, #60]	@ (8023c44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023c06:	7823      	ldrb	r3, [r4, #0]
 8023c08:	f3bf 8f5b 	dmb	ish
 8023c0c:	07db      	lsls	r3, r3, #31
 8023c0e:	d40b      	bmi.n	8023c28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023c10:	4620      	mov	r0, r4
 8023c12:	f005 feb3 	bl	802997c <__cxa_guard_acquire>
 8023c16:	b138      	cbz	r0, 8023c28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023c18:	4620      	mov	r0, r4
 8023c1a:	f005 febb 	bl	8029994 <__cxa_guard_release>
 8023c1e:	4a06      	ldr	r2, [pc, #24]	@ (8023c38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023c20:	4909      	ldr	r1, [pc, #36]	@ (8023c48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023c22:	480a      	ldr	r0, [pc, #40]	@ (8023c4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023c24:	f005 fea3 	bl	802996e <__aeabi_atexit>
 8023c28:	4b05      	ldr	r3, [pc, #20]	@ (8023c40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023c2a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8023c2c:	4b07      	ldr	r3, [pc, #28]	@ (8023c4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023c2e:	652b      	str	r3, [r5, #80]	@ 0x50
 8023c30:	bd38      	pop	{r3, r4, r5, pc}
 8023c32:	bf00      	nop
 8023c34:	24028814 	.word	0x24028814
 8023c38:	24000000 	.word	0x24000000
 8023c3c:	08020a4d 	.word	0x08020a4d
 8023c40:	24000088 	.word	0x24000088
 8023c44:	24028818 	.word	0x24028818
 8023c48:	08020a4b 	.word	0x08020a4b
 8023c4c:	2400008c 	.word	0x2400008c

08023c50 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8023c50:	b510      	push	{r4, lr}
 8023c52:	4604      	mov	r4, r0
 8023c54:	f7ff ff88 	bl	8023b68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023c58:	4620      	mov	r0, r4
 8023c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c5e:	f7ff bfbd 	b.w	8023bdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08023c62 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8023c62:	b510      	push	{r4, lr}
 8023c64:	4604      	mov	r4, r0
 8023c66:	f7ff fff3 	bl	8023c50 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8023c6a:	4620      	mov	r0, r4
 8023c6c:	f7ff ff72 	bl	8023b54 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8023c70:	4620      	mov	r0, r4
 8023c72:	f7ff fe73 	bl	802395c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8023c76:	4620      	mov	r0, r4
 8023c78:	f7ff fdf2 	bl	8023860 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8023c7c:	4620      	mov	r0, r4
 8023c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c82:	f7ff bee9 	b.w	8023a58 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08023c88 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8023c88:	b538      	push	{r3, r4, r5, lr}
 8023c8a:	4c0b      	ldr	r4, [pc, #44]	@ (8023cb8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8023c8c:	4605      	mov	r5, r0
 8023c8e:	7823      	ldrb	r3, [r4, #0]
 8023c90:	f3bf 8f5b 	dmb	ish
 8023c94:	07db      	lsls	r3, r3, #31
 8023c96:	d40b      	bmi.n	8023cb0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8023c98:	4620      	mov	r0, r4
 8023c9a:	f005 fe6f 	bl	802997c <__cxa_guard_acquire>
 8023c9e:	b138      	cbz	r0, 8023cb0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8023ca0:	4620      	mov	r0, r4
 8023ca2:	f005 fe77 	bl	8029994 <__cxa_guard_release>
 8023ca6:	4a05      	ldr	r2, [pc, #20]	@ (8023cbc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8023ca8:	4905      	ldr	r1, [pc, #20]	@ (8023cc0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8023caa:	4806      	ldr	r0, [pc, #24]	@ (8023cc4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023cac:	f005 fe5f 	bl	802996e <__aeabi_atexit>
 8023cb0:	4b04      	ldr	r3, [pc, #16]	@ (8023cc4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023cb2:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8023cb4:	bd38      	pop	{r3, r4, r5, pc}
 8023cb6:	bf00      	nop
 8023cb8:	24028808 	.word	0x24028808
 8023cbc:	24000000 	.word	0x24000000
 8023cc0:	08020a45 	.word	0x08020a45
 8023cc4:	24000080 	.word	0x24000080

08023cc8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8023cc8:	b538      	push	{r3, r4, r5, lr}
 8023cca:	4c0b      	ldr	r4, [pc, #44]	@ (8023cf8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8023ccc:	4605      	mov	r5, r0
 8023cce:	7823      	ldrb	r3, [r4, #0]
 8023cd0:	f3bf 8f5b 	dmb	ish
 8023cd4:	07db      	lsls	r3, r3, #31
 8023cd6:	d40b      	bmi.n	8023cf0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023cd8:	4620      	mov	r0, r4
 8023cda:	f005 fe4f 	bl	802997c <__cxa_guard_acquire>
 8023cde:	b138      	cbz	r0, 8023cf0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023ce0:	4620      	mov	r0, r4
 8023ce2:	f005 fe57 	bl	8029994 <__cxa_guard_release>
 8023ce6:	4a05      	ldr	r2, [pc, #20]	@ (8023cfc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8023ce8:	4905      	ldr	r1, [pc, #20]	@ (8023d00 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8023cea:	4806      	ldr	r0, [pc, #24]	@ (8023d04 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023cec:	f005 fe3f 	bl	802996e <__aeabi_atexit>
 8023cf0:	4b04      	ldr	r3, [pc, #16]	@ (8023d04 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023cf2:	662b      	str	r3, [r5, #96]	@ 0x60
 8023cf4:	bd38      	pop	{r3, r4, r5, pc}
 8023cf6:	bf00      	nop
 8023cf8:	2402880c 	.word	0x2402880c
 8023cfc:	24000000 	.word	0x24000000
 8023d00:	08020a43 	.word	0x08020a43
 8023d04:	24000084 	.word	0x24000084

08023d08 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8023d08:	b570      	push	{r4, r5, r6, lr}
 8023d0a:	4d0c      	ldr	r5, [pc, #48]	@ (8023d3c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023d0c:	4606      	mov	r6, r0
 8023d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8023d40 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023d10:	782b      	ldrb	r3, [r5, #0]
 8023d12:	f3bf 8f5b 	dmb	ish
 8023d16:	f013 0f01 	tst.w	r3, #1
 8023d1a:	d10d      	bne.n	8023d38 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023d1c:	4628      	mov	r0, r5
 8023d1e:	f005 fe2d 	bl	802997c <__cxa_guard_acquire>
 8023d22:	b148      	cbz	r0, 8023d38 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023d24:	4b07      	ldr	r3, [pc, #28]	@ (8023d44 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023d26:	4628      	mov	r0, r5
 8023d28:	6023      	str	r3, [r4, #0]
 8023d2a:	f005 fe33 	bl	8029994 <__cxa_guard_release>
 8023d2e:	4a06      	ldr	r2, [pc, #24]	@ (8023d48 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023d30:	4620      	mov	r0, r4
 8023d32:	4906      	ldr	r1, [pc, #24]	@ (8023d4c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023d34:	f005 fe1b 	bl	802996e <__aeabi_atexit>
 8023d38:	6674      	str	r4, [r6, #100]	@ 0x64
 8023d3a:	bd70      	pop	{r4, r5, r6, pc}
 8023d3c:	24028810 	.word	0x24028810
 8023d40:	24028968 	.word	0x24028968
 8023d44:	08030c00 	.word	0x08030c00
 8023d48:	24000000 	.word	0x24000000
 8023d4c:	08020a41 	.word	0x08020a41

08023d50 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8023d50:	b510      	push	{r4, lr}
 8023d52:	4604      	mov	r4, r0
 8023d54:	f7ff ff98 	bl	8023c88 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8023d58:	4620      	mov	r0, r4
 8023d5a:	f7ff ffb5 	bl	8023cc8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8023d5e:	4620      	mov	r0, r4
 8023d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d64:	f7ff bfd0 	b.w	8023d08 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08023d68 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 8023d68:	b570      	push	{r4, r5, r6, lr}
 8023d6a:	4d0c      	ldr	r5, [pc, #48]	@ (8023d9c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 8023d6c:	4606      	mov	r6, r0
 8023d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8023da0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 8023d70:	782b      	ldrb	r3, [r5, #0]
 8023d72:	f3bf 8f5b 	dmb	ish
 8023d76:	f013 0f01 	tst.w	r3, #1
 8023d7a:	d10d      	bne.n	8023d98 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8023d7c:	4628      	mov	r0, r5
 8023d7e:	f005 fdfd 	bl	802997c <__cxa_guard_acquire>
 8023d82:	b148      	cbz	r0, 8023d98 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8023d84:	4b07      	ldr	r3, [pc, #28]	@ (8023da4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 8023d86:	4628      	mov	r0, r5
 8023d88:	6023      	str	r3, [r4, #0]
 8023d8a:	f005 fe03 	bl	8029994 <__cxa_guard_release>
 8023d8e:	4a06      	ldr	r2, [pc, #24]	@ (8023da8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 8023d90:	4620      	mov	r0, r4
 8023d92:	4906      	ldr	r1, [pc, #24]	@ (8023dac <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 8023d94:	f005 fdeb 	bl	802996e <__aeabi_atexit>
 8023d98:	66b4      	str	r4, [r6, #104]	@ 0x68
 8023d9a:	bd70      	pop	{r4, r5, r6, pc}
 8023d9c:	24028804 	.word	0x24028804
 8023da0:	24028864 	.word	0x24028864
 8023da4:	08030c18 	.word	0x08030c18
 8023da8:	24000000 	.word	0x24000000
 8023dac:	08020a3f 	.word	0x08020a3f

08023db0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8023db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023db4:	b087      	sub	sp, #28
 8023db6:	788d      	ldrb	r5, [r1, #2]
 8023db8:	f891 9000 	ldrb.w	r9, [r1]
 8023dbc:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8023dc0:	9501      	str	r5, [sp, #4]
 8023dc2:	784d      	ldrb	r5, [r1, #1]
 8023dc4:	9203      	str	r2, [sp, #12]
 8023dc6:	9502      	str	r5, [sp, #8]
 8023dc8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8023dcc:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8023dd0:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8023dd4:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8023dd8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8023ddc:	fb06 0708 	mla	r7, r6, r8, r0
 8023de0:	2e00      	cmp	r6, #0
 8023de2:	eb02 0a07 	add.w	sl, r2, r7
 8023de6:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8023dea:	9d01      	ldr	r5, [sp, #4]
 8023dec:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8023df0:	ea45 0509 	orr.w	r5, r5, r9
 8023df4:	9505      	str	r5, [sp, #20]
 8023df6:	f2c0 80b2 	blt.w	8023f5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023dfa:	45b3      	cmp	fp, r6
 8023dfc:	f340 80af 	ble.w	8023f5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023e00:	2800      	cmp	r0, #0
 8023e02:	f2c0 80aa 	blt.w	8023f5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023e06:	4580      	cmp	r8, r0
 8023e08:	f340 80a7 	ble.w	8023f5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023e0c:	9a03      	ldr	r2, [sp, #12]
 8023e0e:	5dd7      	ldrb	r7, [r2, r7]
 8023e10:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e14:	441f      	add	r7, r3
 8023e16:	1c42      	adds	r2, r0, #1
 8023e18:	f100 80a4 	bmi.w	8023f64 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e1c:	4590      	cmp	r8, r2
 8023e1e:	f340 80a1 	ble.w	8023f64 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e22:	2c00      	cmp	r4, #0
 8023e24:	f000 809e 	beq.w	8023f64 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e28:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8023e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e30:	441d      	add	r5, r3
 8023e32:	3601      	adds	r6, #1
 8023e34:	f100 809a 	bmi.w	8023f6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023e38:	45b3      	cmp	fp, r6
 8023e3a:	f340 8097 	ble.w	8023f6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023e3e:	f1bc 0f00 	cmp.w	ip, #0
 8023e42:	f000 8093 	beq.w	8023f6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023e46:	2800      	cmp	r0, #0
 8023e48:	f2c0 808e 	blt.w	8023f68 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023e4c:	4580      	cmp	r8, r0
 8023e4e:	f340 808b 	ble.w	8023f68 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023e52:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8023e56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023e5a:	441e      	add	r6, r3
 8023e5c:	3001      	adds	r0, #1
 8023e5e:	f100 8088 	bmi.w	8023f72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023e62:	4580      	cmp	r8, r0
 8023e64:	f340 8085 	ble.w	8023f72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023e68:	2c00      	cmp	r4, #0
 8023e6a:	f000 8082 	beq.w	8023f72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023e6e:	44d0      	add	r8, sl
 8023e70:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023e74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e78:	4413      	add	r3, r2
 8023e7a:	b2a4      	uxth	r4, r4
 8023e7c:	f895 a000 	ldrb.w	sl, [r5]
 8023e80:	fa1f fc8c 	uxth.w	ip, ip
 8023e84:	fb04 fb0c 	mul.w	fp, r4, ip
 8023e88:	0124      	lsls	r4, r4, #4
 8023e8a:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8023e8e:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 8023e92:	eba4 040b 	sub.w	r4, r4, fp
 8023e96:	fa1f f08c 	uxth.w	r0, ip
 8023e9a:	b2a2      	uxth	r2, r4
 8023e9c:	783c      	ldrb	r4, [r7, #0]
 8023e9e:	eba8 0800 	sub.w	r8, r8, r0
 8023ea2:	fa1f fc8e 	uxth.w	ip, lr
 8023ea6:	fb02 fa0a 	mul.w	sl, r2, sl
 8023eaa:	ea6f 0e0e 	mvn.w	lr, lr
 8023eae:	fa1f f888 	uxth.w	r8, r8
 8023eb2:	fa5f fe8e 	uxtb.w	lr, lr
 8023eb6:	fb08 aa04 	mla	sl, r8, r4, sl
 8023eba:	7834      	ldrb	r4, [r6, #0]
 8023ebc:	fb19 f90e 	smulbb	r9, r9, lr
 8023ec0:	fb00 aa04 	mla	sl, r0, r4, sl
 8023ec4:	781c      	ldrb	r4, [r3, #0]
 8023ec6:	fb0b a404 	mla	r4, fp, r4, sl
 8023eca:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023ece:	fb04 990c 	mla	r9, r4, ip, r9
 8023ed2:	fa1f f989 	uxth.w	r9, r9
 8023ed6:	f109 0401 	add.w	r4, r9, #1
 8023eda:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023ede:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023ee2:	f881 9000 	strb.w	r9, [r1]
 8023ee6:	f895 9001 	ldrb.w	r9, [r5, #1]
 8023eea:	787c      	ldrb	r4, [r7, #1]
 8023eec:	fb02 f909 	mul.w	r9, r2, r9
 8023ef0:	fb08 9904 	mla	r9, r8, r4, r9
 8023ef4:	7874      	ldrb	r4, [r6, #1]
 8023ef6:	fb00 9904 	mla	r9, r0, r4, r9
 8023efa:	785c      	ldrb	r4, [r3, #1]
 8023efc:	fb0b 9404 	mla	r4, fp, r4, r9
 8023f00:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8023f04:	9c02      	ldr	r4, [sp, #8]
 8023f06:	fb14 f90e 	smulbb	r9, r4, lr
 8023f0a:	fb0a 940c 	mla	r4, sl, ip, r9
 8023f0e:	b2a4      	uxth	r4, r4
 8023f10:	f104 0901 	add.w	r9, r4, #1
 8023f14:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8023f18:	1224      	asrs	r4, r4, #8
 8023f1a:	704c      	strb	r4, [r1, #1]
 8023f1c:	78ad      	ldrb	r5, [r5, #2]
 8023f1e:	78bc      	ldrb	r4, [r7, #2]
 8023f20:	436a      	muls	r2, r5
 8023f22:	789b      	ldrb	r3, [r3, #2]
 8023f24:	fb08 2204 	mla	r2, r8, r4, r2
 8023f28:	78b4      	ldrb	r4, [r6, #2]
 8023f2a:	fb00 2004 	mla	r0, r0, r4, r2
 8023f2e:	fb0b 0b03 	mla	fp, fp, r3, r0
 8023f32:	9b01      	ldr	r3, [sp, #4]
 8023f34:	fb13 fe0e 	smulbb	lr, r3, lr
 8023f38:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8023f3c:	fb0b ec0c 	mla	ip, fp, ip, lr
 8023f40:	fa1f fc8c 	uxth.w	ip, ip
 8023f44:	f10c 0e01 	add.w	lr, ip, #1
 8023f48:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8023f4c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023f50:	f881 c002 	strb.w	ip, [r1, #2]
 8023f54:	b007      	add	sp, #28
 8023f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f5a:	af05      	add	r7, sp, #20
 8023f5c:	e75b      	b.n	8023e16 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8023f5e:	ad05      	add	r5, sp, #20
 8023f60:	462f      	mov	r7, r5
 8023f62:	e766      	b.n	8023e32 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023f64:	ad05      	add	r5, sp, #20
 8023f66:	e764      	b.n	8023e32 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023f68:	ae05      	add	r6, sp, #20
 8023f6a:	e777      	b.n	8023e5c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8023f6c:	ab05      	add	r3, sp, #20
 8023f6e:	461e      	mov	r6, r3
 8023f70:	e783      	b.n	8023e7a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8023f72:	ab05      	add	r3, sp, #20
 8023f74:	e781      	b.n	8023e7a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08023f76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023f76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f7a:	b093      	sub	sp, #76	@ 0x4c
 8023f7c:	9210      	str	r2, [sp, #64]	@ 0x40
 8023f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f80:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023f82:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8023f86:	9011      	str	r0, [sp, #68]	@ 0x44
 8023f88:	930e      	str	r3, [sp, #56]	@ 0x38
 8023f8a:	6850      	ldr	r0, [r2, #4]
 8023f8c:	910d      	str	r1, [sp, #52]	@ 0x34
 8023f8e:	6812      	ldr	r2, [r2, #0]
 8023f90:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023f94:	fb00 1303 	mla	r3, r0, r3, r1
 8023f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023f9c:	18d3      	adds	r3, r2, r3
 8023f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023fa0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023fa2:	681b      	ldr	r3, [r3, #0]
 8023fa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8023fa6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023fa8:	685c      	ldr	r4, [r3, #4]
 8023faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023fac:	3404      	adds	r4, #4
 8023fae:	43db      	mvns	r3, r3
 8023fb0:	b2db      	uxtb	r3, r3
 8023fb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023fb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	dc03      	bgt.n	8023fc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023fba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	f340 8250 	ble.w	8024462 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8023fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023fc4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023fc8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023fcc:	1e48      	subs	r0, r1, #1
 8023fce:	1e55      	subs	r5, r2, #1
 8023fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	f340 80ee 	ble.w	80241b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023fd8:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8023fda:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023fdc:	1436      	asrs	r6, r6, #16
 8023fde:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023fe2:	d406      	bmi.n	8023ff2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023fe4:	4286      	cmp	r6, r0
 8023fe6:	da04      	bge.n	8023ff2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023fe8:	2b00      	cmp	r3, #0
 8023fea:	db02      	blt.n	8023ff2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023fec:	42ab      	cmp	r3, r5
 8023fee:	f2c0 80e2 	blt.w	80241b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023ff2:	3601      	adds	r6, #1
 8023ff4:	f100 80cf 	bmi.w	8024196 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023ff8:	42b1      	cmp	r1, r6
 8023ffa:	f2c0 80cc 	blt.w	8024196 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023ffe:	3301      	adds	r3, #1
 8024000:	f100 80c9 	bmi.w	8024196 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024004:	429a      	cmp	r2, r3
 8024006:	f2c0 80c6 	blt.w	8024196 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802400a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 802400e:	f1bb 0f00 	cmp.w	fp, #0
 8024012:	f340 80f1 	ble.w	80241f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024016:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024018:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802401a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 802401c:	141d      	asrs	r5, r3, #16
 802401e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024020:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024024:	68c7      	ldr	r7, [r0, #12]
 8024026:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024028:	1418      	asrs	r0, r3, #16
 802402a:	f3c3 3803 	ubfx	r8, r3, #12, #4
 802402e:	6892      	ldr	r2, [r2, #8]
 8024030:	f100 8137 	bmi.w	80242a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024034:	f102 3cff 	add.w	ip, r2, #4294967295
 8024038:	4560      	cmp	r0, ip
 802403a:	f280 8132 	bge.w	80242a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802403e:	2d00      	cmp	r5, #0
 8024040:	f2c0 812f 	blt.w	80242a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024044:	f107 3cff 	add.w	ip, r7, #4294967295
 8024048:	4565      	cmp	r5, ip
 802404a:	f280 812a 	bge.w	80242a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802404e:	b212      	sxth	r2, r2
 8024050:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8024052:	fb05 0002 	mla	r0, r5, r2, r0
 8024056:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024058:	f817 c000 	ldrb.w	ip, [r7, r0]
 802405c:	4405      	add	r5, r0
 802405e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024062:	eb04 0e0c 	add.w	lr, r4, ip
 8024066:	f1b8 0f00 	cmp.w	r8, #0
 802406a:	f000 810c 	beq.w	8024286 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 802406e:	786f      	ldrb	r7, [r5, #1]
 8024070:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024074:	4427      	add	r7, r4
 8024076:	2900      	cmp	r1, #0
 8024078:	f000 810d 	beq.w	8024296 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802407c:	18a8      	adds	r0, r5, r2
 802407e:	5caa      	ldrb	r2, [r5, r2]
 8024080:	7840      	ldrb	r0, [r0, #1]
 8024082:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024086:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802408a:	4422      	add	r2, r4
 802408c:	4420      	add	r0, r4
 802408e:	fa1f f388 	uxth.w	r3, r8
 8024092:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8024096:	b289      	uxth	r1, r1
 8024098:	f897 c000 	ldrb.w	ip, [r7]
 802409c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80240a0:	fb03 f901 	mul.w	r9, r3, r1
 80240a4:	011b      	lsls	r3, r3, #4
 80240a6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80240aa:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80240ae:	eba3 0309 	sub.w	r3, r3, r9
 80240b2:	b289      	uxth	r1, r1
 80240b4:	b29b      	uxth	r3, r3
 80240b6:	eba8 0801 	sub.w	r8, r8, r1
 80240ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80240be:	fa1f f888 	uxth.w	r8, r8
 80240c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80240c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80240c6:	fb08 cc0a 	mla	ip, r8, sl, ip
 80240ca:	f892 a000 	ldrb.w	sl, [r2]
 80240ce:	fb01 cc0a 	mla	ip, r1, sl, ip
 80240d2:	f890 a000 	ldrb.w	sl, [r0]
 80240d6:	fb09 cc0a 	mla	ip, r9, sl, ip
 80240da:	f896 a000 	ldrb.w	sl, [r6]
 80240de:	fb1a fa03 	smulbb	sl, sl, r3
 80240e2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80240e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80240e8:	fb0c ac05 	mla	ip, ip, r5, sl
 80240ec:	fa1f fc8c 	uxth.w	ip, ip
 80240f0:	f10c 0a01 	add.w	sl, ip, #1
 80240f4:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80240f8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80240fc:	f886 a000 	strb.w	sl, [r6]
 8024100:	f897 c001 	ldrb.w	ip, [r7, #1]
 8024104:	f89e a001 	ldrb.w	sl, [lr, #1]
 8024108:	fb03 fc0c 	mul.w	ip, r3, ip
 802410c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802410e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8024112:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024116:	fb01 cc0a 	mla	ip, r1, sl, ip
 802411a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802411e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8024122:	f896 a001 	ldrb.w	sl, [r6, #1]
 8024126:	fb1a fa03 	smulbb	sl, sl, r3
 802412a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802412e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024130:	fb0c ac05 	mla	ip, ip, r5, sl
 8024134:	fa1f fc8c 	uxth.w	ip, ip
 8024138:	f10c 0a01 	add.w	sl, ip, #1
 802413c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8024140:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024144:	f886 c001 	strb.w	ip, [r6, #1]
 8024148:	78bf      	ldrb	r7, [r7, #2]
 802414a:	f89e c002 	ldrb.w	ip, [lr, #2]
 802414e:	437b      	muls	r3, r7
 8024150:	fb08 330c 	mla	r3, r8, ip, r3
 8024154:	f892 c002 	ldrb.w	ip, [r2, #2]
 8024158:	7882      	ldrb	r2, [r0, #2]
 802415a:	fb01 310c 	mla	r1, r1, ip, r3
 802415e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024160:	fb09 1902 	mla	r9, r9, r2, r1
 8024164:	78b1      	ldrb	r1, [r6, #2]
 8024166:	fb11 f103 	smulbb	r1, r1, r3
 802416a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802416e:	fb09 1505 	mla	r5, r9, r5, r1
 8024172:	b2ad      	uxth	r5, r5
 8024174:	1c6b      	adds	r3, r5, #1
 8024176:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802417a:	122d      	asrs	r5, r5, #8
 802417c:	70b5      	strb	r5, [r6, #2]
 802417e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024180:	3603      	adds	r6, #3
 8024182:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8024184:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024188:	4413      	add	r3, r2
 802418a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802418c:	931d      	str	r3, [sp, #116]	@ 0x74
 802418e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024190:	4413      	add	r3, r2
 8024192:	931e      	str	r3, [sp, #120]	@ 0x78
 8024194:	e73b      	b.n	802400e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024196:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024198:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802419a:	4433      	add	r3, r6
 802419c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802419e:	931d      	str	r3, [sp, #116]	@ 0x74
 80241a0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80241a2:	4433      	add	r3, r6
 80241a4:	931e      	str	r3, [sp, #120]	@ 0x78
 80241a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241a8:	3b01      	subs	r3, #1
 80241aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80241ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80241ae:	3303      	adds	r3, #3
 80241b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80241b2:	e70d      	b.n	8023fd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80241b4:	d028      	beq.n	8024208 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80241b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241b8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80241ba:	3b01      	subs	r3, #1
 80241bc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80241be:	fb00 5003 	mla	r0, r0, r3, r5
 80241c2:	1400      	asrs	r0, r0, #16
 80241c4:	f53f af21 	bmi.w	802400a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80241c8:	3901      	subs	r1, #1
 80241ca:	4288      	cmp	r0, r1
 80241cc:	f6bf af1d 	bge.w	802400a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80241d0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80241d2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80241d4:	fb01 0303 	mla	r3, r1, r3, r0
 80241d8:	141b      	asrs	r3, r3, #16
 80241da:	f53f af16 	bmi.w	802400a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80241de:	3a01      	subs	r2, #1
 80241e0:	4293      	cmp	r3, r2
 80241e2:	f6bf af12 	bge.w	802400a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80241e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80241e8:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80241ec:	1cdf      	adds	r7, r3, #3
 80241ee:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 80241f2:	f1b9 0f00 	cmp.w	r9, #0
 80241f6:	dc73      	bgt.n	80242e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80241f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80241fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024200:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024204:	441a      	add	r2, r3
 8024206:	920a      	str	r2, [sp, #40]	@ 0x28
 8024208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802420a:	2b00      	cmp	r3, #0
 802420c:	f340 8129 	ble.w	8024462 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8024210:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024214:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024216:	ee30 0a04 	vadd.f32	s0, s0, s8
 802421a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802421e:	eef0 6a62 	vmov.f32	s13, s5
 8024222:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024226:	ee31 1a05 	vadd.f32	s2, s2, s10
 802422a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802422e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8024232:	eef0 6a43 	vmov.f32	s13, s6
 8024236:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802423a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802423e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024242:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024246:	ee77 2a62 	vsub.f32	s5, s14, s5
 802424a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802424e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024252:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024256:	ee12 2a90 	vmov	r2, s5
 802425a:	eef0 2a47 	vmov.f32	s5, s14
 802425e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024262:	ee13 2a10 	vmov	r2, s6
 8024266:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024268:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802426a:	eeb0 3a67 	vmov.f32	s6, s15
 802426e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024272:	9320      	str	r3, [sp, #128]	@ 0x80
 8024274:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024276:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024278:	3b01      	subs	r3, #1
 802427a:	930d      	str	r3, [sp, #52]	@ 0x34
 802427c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802427e:	bf08      	it	eq
 8024280:	4613      	moveq	r3, r2
 8024282:	9309      	str	r3, [sp, #36]	@ 0x24
 8024284:	e696      	b.n	8023fb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024286:	b149      	cbz	r1, 802429c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024288:	5caa      	ldrb	r2, [r5, r2]
 802428a:	4670      	mov	r0, lr
 802428c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024290:	4422      	add	r2, r4
 8024292:	4677      	mov	r7, lr
 8024294:	e6fb      	b.n	802408e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024296:	4670      	mov	r0, lr
 8024298:	4672      	mov	r2, lr
 802429a:	e6f8      	b.n	802408e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802429c:	4670      	mov	r0, lr
 802429e:	4672      	mov	r2, lr
 80242a0:	e7f7      	b.n	8024292 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80242a2:	f110 0c01 	adds.w	ip, r0, #1
 80242a6:	f53f af6a 	bmi.w	802417e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80242aa:	4562      	cmp	r2, ip
 80242ac:	f6ff af67 	blt.w	802417e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80242b0:	f115 0c01 	adds.w	ip, r5, #1
 80242b4:	f53f af63 	bmi.w	802417e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80242b8:	4567      	cmp	r7, ip
 80242ba:	f6ff af60 	blt.w	802417e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80242be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80242c0:	b23f      	sxth	r7, r7
 80242c2:	b212      	sxth	r2, r2
 80242c4:	9002      	str	r0, [sp, #8]
 80242c6:	9701      	str	r7, [sp, #4]
 80242c8:	9200      	str	r2, [sp, #0]
 80242ca:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80242cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80242ce:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80242d2:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80242d6:	4623      	mov	r3, r4
 80242d8:	4631      	mov	r1, r6
 80242da:	f7ff fd69 	bl	8023db0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80242de:	e74e      	b.n	802417e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80242e0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80242e2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80242e4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80242e8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80242ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80242ec:	1400      	asrs	r0, r0, #16
 80242ee:	142d      	asrs	r5, r5, #16
 80242f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80242f2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80242f6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80242fa:	fb02 5000 	mla	r0, r2, r0, r5
 80242fe:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024300:	f815 e000 	ldrb.w	lr, [r5, r0]
 8024304:	eb05 0c00 	add.w	ip, r5, r0
 8024308:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802430c:	eb04 060e 	add.w	r6, r4, lr
 8024310:	2b00      	cmp	r3, #0
 8024312:	f000 8097 	beq.w	8024444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8024316:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802431a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802431e:	4425      	add	r5, r4
 8024320:	2900      	cmp	r1, #0
 8024322:	f000 8098 	beq.w	8024456 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8024326:	eb0c 0002 	add.w	r0, ip, r2
 802432a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802432e:	7840      	ldrb	r0, [r0, #1]
 8024330:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024334:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024338:	4422      	add	r2, r4
 802433a:	4420      	add	r0, r4
 802433c:	b29b      	uxth	r3, r3
 802433e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8024342:	b289      	uxth	r1, r1
 8024344:	f895 e000 	ldrb.w	lr, [r5]
 8024348:	3703      	adds	r7, #3
 802434a:	f109 39ff 	add.w	r9, r9, #4294967295
 802434e:	fb03 f801 	mul.w	r8, r3, r1
 8024352:	011b      	lsls	r3, r3, #4
 8024354:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024358:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 802435c:	eba3 0308 	sub.w	r3, r3, r8
 8024360:	b289      	uxth	r1, r1
 8024362:	b29b      	uxth	r3, r3
 8024364:	ebac 0c01 	sub.w	ip, ip, r1
 8024368:	fb03 fe0e 	mul.w	lr, r3, lr
 802436c:	fa1f fc8c 	uxth.w	ip, ip
 8024370:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024374:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024378:	f892 b000 	ldrb.w	fp, [r2]
 802437c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024380:	f890 b000 	ldrb.w	fp, [r0]
 8024384:	fb08 ee0b 	mla	lr, r8, fp, lr
 8024388:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 802438c:	fb1b fb03 	smulbb	fp, fp, r3
 8024390:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8024394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024396:	fb0e be0a 	mla	lr, lr, sl, fp
 802439a:	fa1f fe8e 	uxth.w	lr, lr
 802439e:	f10e 0b01 	add.w	fp, lr, #1
 80243a2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80243a6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80243aa:	f807 ec06 	strb.w	lr, [r7, #-6]
 80243ae:	f895 e001 	ldrb.w	lr, [r5, #1]
 80243b2:	f896 b001 	ldrb.w	fp, [r6, #1]
 80243b6:	fb03 fe0e 	mul.w	lr, r3, lr
 80243ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80243bc:	fb0c ee0b 	mla	lr, ip, fp, lr
 80243c0:	f892 b001 	ldrb.w	fp, [r2, #1]
 80243c4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80243c8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80243cc:	fb08 ee0b 	mla	lr, r8, fp, lr
 80243d0:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80243d4:	fb1b fb03 	smulbb	fp, fp, r3
 80243d8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80243dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80243de:	fb0e be0a 	mla	lr, lr, sl, fp
 80243e2:	fa1f fe8e 	uxth.w	lr, lr
 80243e6:	f10e 0b01 	add.w	fp, lr, #1
 80243ea:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80243ee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80243f2:	f807 ec05 	strb.w	lr, [r7, #-5]
 80243f6:	78ad      	ldrb	r5, [r5, #2]
 80243f8:	78b6      	ldrb	r6, [r6, #2]
 80243fa:	436b      	muls	r3, r5
 80243fc:	7895      	ldrb	r5, [r2, #2]
 80243fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024400:	fb0c 3306 	mla	r3, ip, r6, r3
 8024404:	fb01 3305 	mla	r3, r1, r5, r3
 8024408:	7885      	ldrb	r5, [r0, #2]
 802440a:	fb08 3805 	mla	r8, r8, r5, r3
 802440e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8024412:	fb13 f302 	smulbb	r3, r3, r2
 8024416:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802441a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802441c:	fb08 380a 	mla	r8, r8, sl, r3
 8024420:	fa1f f888 	uxth.w	r8, r8
 8024424:	f108 0301 	add.w	r3, r8, #1
 8024428:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 802442c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802442e:	4413      	add	r3, r2
 8024430:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024432:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024436:	931d      	str	r3, [sp, #116]	@ 0x74
 8024438:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802443a:	f807 8c04 	strb.w	r8, [r7, #-4]
 802443e:	4413      	add	r3, r2
 8024440:	931e      	str	r3, [sp, #120]	@ 0x78
 8024442:	e6d6      	b.n	80241f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024444:	b151      	cbz	r1, 802445c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8024446:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802444a:	4630      	mov	r0, r6
 802444c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024450:	4422      	add	r2, r4
 8024452:	4635      	mov	r5, r6
 8024454:	e772      	b.n	802433c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024456:	4630      	mov	r0, r6
 8024458:	4632      	mov	r2, r6
 802445a:	e76f      	b.n	802433c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802445c:	4630      	mov	r0, r6
 802445e:	4632      	mov	r2, r6
 8024460:	e7f7      	b.n	8024452 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024462:	b013      	add	sp, #76	@ 0x4c
 8024464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024468 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8024468:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802446c:	784c      	ldrb	r4, [r1, #1]
 802446e:	f891 a002 	ldrb.w	sl, [r1, #2]
 8024472:	0224      	lsls	r4, r4, #8
 8024474:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8024478:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 802447c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8024480:	f891 a000 	ldrb.w	sl, [r1]
 8024484:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8024488:	ea44 040a 	orr.w	r4, r4, sl
 802448c:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8024490:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 8024494:	9401      	str	r4, [sp, #4]
 8024496:	fb05 c70e 	mla	r7, r5, lr, ip
 802449a:	2d00      	cmp	r5, #0
 802449c:	eb02 0807 	add.w	r8, r2, r7
 80244a0:	db72      	blt.n	8024588 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80244a2:	45a9      	cmp	r9, r5
 80244a4:	dd70      	ble.n	8024588 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80244a6:	f1bc 0f00 	cmp.w	ip, #0
 80244aa:	db6b      	blt.n	8024584 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80244ac:	45e6      	cmp	lr, ip
 80244ae:	dd69      	ble.n	8024584 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80244b0:	5dd7      	ldrb	r7, [r2, r7]
 80244b2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80244b6:	441f      	add	r7, r3
 80244b8:	f11c 0201 	adds.w	r2, ip, #1
 80244bc:	d467      	bmi.n	802458e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80244be:	4596      	cmp	lr, r2
 80244c0:	dd65      	ble.n	802458e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80244c2:	2800      	cmp	r0, #0
 80244c4:	d063      	beq.n	802458e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80244c6:	f898 4001 	ldrb.w	r4, [r8, #1]
 80244ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80244ce:	441c      	add	r4, r3
 80244d0:	3501      	adds	r5, #1
 80244d2:	d460      	bmi.n	8024596 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80244d4:	45a9      	cmp	r9, r5
 80244d6:	dd5e      	ble.n	8024596 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80244d8:	2e00      	cmp	r6, #0
 80244da:	d05c      	beq.n	8024596 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80244dc:	f1bc 0f00 	cmp.w	ip, #0
 80244e0:	db57      	blt.n	8024592 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80244e2:	45e6      	cmp	lr, ip
 80244e4:	dd55      	ble.n	8024592 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80244e6:	f818 500e 	ldrb.w	r5, [r8, lr]
 80244ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80244ee:	441d      	add	r5, r3
 80244f0:	f11c 0201 	adds.w	r2, ip, #1
 80244f4:	d452      	bmi.n	802459c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80244f6:	4596      	cmp	lr, r2
 80244f8:	dd50      	ble.n	802459c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80244fa:	2800      	cmp	r0, #0
 80244fc:	d04e      	beq.n	802459c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80244fe:	44c6      	add	lr, r8
 8024500:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024504:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024508:	4413      	add	r3, r2
 802450a:	b280      	uxth	r0, r0
 802450c:	f897 8000 	ldrb.w	r8, [r7]
 8024510:	b2b2      	uxth	r2, r6
 8024512:	fb00 f602 	mul.w	r6, r0, r2
 8024516:	0100      	lsls	r0, r0, #4
 8024518:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802451c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8024520:	1b80      	subs	r0, r0, r6
 8024522:	fa1f fc82 	uxth.w	ip, r2
 8024526:	b282      	uxth	r2, r0
 8024528:	7820      	ldrb	r0, [r4, #0]
 802452a:	ebae 0e0c 	sub.w	lr, lr, ip
 802452e:	4350      	muls	r0, r2
 8024530:	fa1f fe8e 	uxth.w	lr, lr
 8024534:	fb0e 0808 	mla	r8, lr, r8, r0
 8024538:	7828      	ldrb	r0, [r5, #0]
 802453a:	fb0c 8800 	mla	r8, ip, r0, r8
 802453e:	7818      	ldrb	r0, [r3, #0]
 8024540:	fb06 8000 	mla	r0, r6, r0, r8
 8024544:	1200      	asrs	r0, r0, #8
 8024546:	7008      	strb	r0, [r1, #0]
 8024548:	7860      	ldrb	r0, [r4, #1]
 802454a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802454e:	4350      	muls	r0, r2
 8024550:	fb0e 0808 	mla	r8, lr, r8, r0
 8024554:	7868      	ldrb	r0, [r5, #1]
 8024556:	fb0c 8800 	mla	r8, ip, r0, r8
 802455a:	7858      	ldrb	r0, [r3, #1]
 802455c:	fb06 8000 	mla	r0, r6, r0, r8
 8024560:	1200      	asrs	r0, r0, #8
 8024562:	7048      	strb	r0, [r1, #1]
 8024564:	78a0      	ldrb	r0, [r4, #2]
 8024566:	78bf      	ldrb	r7, [r7, #2]
 8024568:	4350      	muls	r0, r2
 802456a:	78aa      	ldrb	r2, [r5, #2]
 802456c:	fb0e 0007 	mla	r0, lr, r7, r0
 8024570:	fb0c 0c02 	mla	ip, ip, r2, r0
 8024574:	789a      	ldrb	r2, [r3, #2]
 8024576:	fb06 c202 	mla	r2, r6, r2, ip
 802457a:	1212      	asrs	r2, r2, #8
 802457c:	708a      	strb	r2, [r1, #2]
 802457e:	b002      	add	sp, #8
 8024580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024584:	af01      	add	r7, sp, #4
 8024586:	e797      	b.n	80244b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8024588:	ac01      	add	r4, sp, #4
 802458a:	4627      	mov	r7, r4
 802458c:	e7a0      	b.n	80244d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802458e:	ac01      	add	r4, sp, #4
 8024590:	e79e      	b.n	80244d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024592:	ad01      	add	r5, sp, #4
 8024594:	e7ac      	b.n	80244f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8024596:	ab01      	add	r3, sp, #4
 8024598:	461d      	mov	r5, r3
 802459a:	e7b6      	b.n	802450a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 802459c:	ab01      	add	r3, sp, #4
 802459e:	e7b4      	b.n	802450a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080245a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80245a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245a4:	b08d      	sub	sp, #52	@ 0x34
 80245a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80245aa:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 80245ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80245b0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80245b2:	9306      	str	r3, [sp, #24]
 80245b4:	6850      	ldr	r0, [r2, #4]
 80245b6:	6812      	ldr	r2, [r2, #0]
 80245b8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80245ba:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 80245be:	fb00 1303 	mla	r3, r0, r3, r1
 80245c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80245c6:	18d3      	adds	r3, r2, r3
 80245c8:	9307      	str	r3, [sp, #28]
 80245ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80245cc:	681b      	ldr	r3, [r3, #0]
 80245ce:	9308      	str	r3, [sp, #32]
 80245d0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80245d2:	685d      	ldr	r5, [r3, #4]
 80245d4:	3504      	adds	r5, #4
 80245d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245d8:	2b00      	cmp	r3, #0
 80245da:	dc03      	bgt.n	80245e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80245dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80245de:	2b00      	cmp	r3, #0
 80245e0:	f340 81e6 	ble.w	80249b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80245e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80245e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80245ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80245ee:	1e48      	subs	r0, r1, #1
 80245f0:	1e56      	subs	r6, r2, #1
 80245f2:	9b06      	ldr	r3, [sp, #24]
 80245f4:	2b00      	cmp	r3, #0
 80245f6:	f340 80bd 	ble.w	8024774 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80245fa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80245fc:	1427      	asrs	r7, r4, #16
 80245fe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024602:	d406      	bmi.n	8024612 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024604:	4287      	cmp	r7, r0
 8024606:	da04      	bge.n	8024612 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024608:	2b00      	cmp	r3, #0
 802460a:	db02      	blt.n	8024612 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802460c:	42b3      	cmp	r3, r6
 802460e:	f2c0 80b2 	blt.w	8024776 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024612:	3701      	adds	r7, #1
 8024614:	f100 80a1 	bmi.w	802475a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024618:	42b9      	cmp	r1, r7
 802461a:	f2c0 809e 	blt.w	802475a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802461e:	3301      	adds	r3, #1
 8024620:	f100 809b 	bmi.w	802475a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024624:	429a      	cmp	r2, r3
 8024626:	f2c0 8098 	blt.w	802475a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802462a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802462e:	f1bb 0f00 	cmp.w	fp, #0
 8024632:	f340 80bf 	ble.w	80247b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024636:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024638:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802463a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802463c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024640:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8024644:	1420      	asrs	r0, r4, #16
 8024646:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024648:	ea4f 4723 	mov.w	r7, r3, asr #16
 802464c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024650:	6892      	ldr	r2, [r2, #8]
 8024652:	f100 8103 	bmi.w	802485c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8024656:	f102 3eff 	add.w	lr, r2, #4294967295
 802465a:	4570      	cmp	r0, lr
 802465c:	f280 80fe 	bge.w	802485c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8024660:	2f00      	cmp	r7, #0
 8024662:	f2c0 80fb 	blt.w	802485c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8024666:	f10c 3eff 	add.w	lr, ip, #4294967295
 802466a:	4577      	cmp	r7, lr
 802466c:	f280 80f6 	bge.w	802485c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8024670:	b212      	sxth	r2, r2
 8024672:	fb07 0002 	mla	r0, r7, r2, r0
 8024676:	9f08      	ldr	r7, [sp, #32]
 8024678:	f817 8000 	ldrb.w	r8, [r7, r0]
 802467c:	eb07 0e00 	add.w	lr, r7, r0
 8024680:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024684:	eb05 0c08 	add.w	ip, r5, r8
 8024688:	2b00      	cmp	r3, #0
 802468a:	f000 80d8 	beq.w	802483e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802468e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8024692:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024696:	442f      	add	r7, r5
 8024698:	2900      	cmp	r1, #0
 802469a:	f000 80d9 	beq.w	8024850 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802469e:	eb0e 0002 	add.w	r0, lr, r2
 80246a2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80246a6:	7840      	ldrb	r0, [r0, #1]
 80246a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80246ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80246b0:	442a      	add	r2, r5
 80246b2:	4428      	add	r0, r5
 80246b4:	b29b      	uxth	r3, r3
 80246b6:	f815 a008 	ldrb.w	sl, [r5, r8]
 80246ba:	b289      	uxth	r1, r1
 80246bc:	f897 8000 	ldrb.w	r8, [r7]
 80246c0:	fb03 f901 	mul.w	r9, r3, r1
 80246c4:	011b      	lsls	r3, r3, #4
 80246c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80246ca:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80246ce:	eba3 0309 	sub.w	r3, r3, r9
 80246d2:	b289      	uxth	r1, r1
 80246d4:	b29b      	uxth	r3, r3
 80246d6:	ebae 0e01 	sub.w	lr, lr, r1
 80246da:	fb03 f808 	mul.w	r8, r3, r8
 80246de:	fa1f fe8e 	uxth.w	lr, lr
 80246e2:	fb0e 880a 	mla	r8, lr, sl, r8
 80246e6:	f892 a000 	ldrb.w	sl, [r2]
 80246ea:	fb01 880a 	mla	r8, r1, sl, r8
 80246ee:	f890 a000 	ldrb.w	sl, [r0]
 80246f2:	fb09 880a 	mla	r8, r9, sl, r8
 80246f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80246fa:	f886 8000 	strb.w	r8, [r6]
 80246fe:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024702:	f89c a001 	ldrb.w	sl, [ip, #1]
 8024706:	fb03 f808 	mul.w	r8, r3, r8
 802470a:	fb0e 880a 	mla	r8, lr, sl, r8
 802470e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024712:	fb01 880a 	mla	r8, r1, sl, r8
 8024716:	f890 a001 	ldrb.w	sl, [r0, #1]
 802471a:	fb09 880a 	mla	r8, r9, sl, r8
 802471e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024722:	f886 8001 	strb.w	r8, [r6, #1]
 8024726:	78bf      	ldrb	r7, [r7, #2]
 8024728:	f89c c002 	ldrb.w	ip, [ip, #2]
 802472c:	437b      	muls	r3, r7
 802472e:	7892      	ldrb	r2, [r2, #2]
 8024730:	fb0e 330c 	mla	r3, lr, ip, r3
 8024734:	fb01 3102 	mla	r1, r1, r2, r3
 8024738:	7882      	ldrb	r2, [r0, #2]
 802473a:	fb09 1902 	mla	r9, r9, r2, r1
 802473e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024742:	f886 9002 	strb.w	r9, [r6, #2]
 8024746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024748:	3603      	adds	r6, #3
 802474a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802474c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024750:	441c      	add	r4, r3
 8024752:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024754:	4413      	add	r3, r2
 8024756:	9318      	str	r3, [sp, #96]	@ 0x60
 8024758:	e769      	b.n	802462e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802475a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802475c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802475e:	441c      	add	r4, r3
 8024760:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024762:	443b      	add	r3, r7
 8024764:	9318      	str	r3, [sp, #96]	@ 0x60
 8024766:	9b06      	ldr	r3, [sp, #24]
 8024768:	3b01      	subs	r3, #1
 802476a:	9306      	str	r3, [sp, #24]
 802476c:	9b07      	ldr	r3, [sp, #28]
 802476e:	3303      	adds	r3, #3
 8024770:	9307      	str	r3, [sp, #28]
 8024772:	e73e      	b.n	80245f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024774:	d026      	beq.n	80247c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024776:	9b06      	ldr	r3, [sp, #24]
 8024778:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802477a:	3b01      	subs	r3, #1
 802477c:	fb00 4003 	mla	r0, r0, r3, r4
 8024780:	1400      	asrs	r0, r0, #16
 8024782:	f53f af52 	bmi.w	802462a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024786:	3901      	subs	r1, #1
 8024788:	4288      	cmp	r0, r1
 802478a:	f6bf af4e 	bge.w	802462a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802478e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8024790:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8024792:	fb01 0303 	mla	r3, r1, r3, r0
 8024796:	141b      	asrs	r3, r3, #16
 8024798:	f53f af47 	bmi.w	802462a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802479c:	3a01      	subs	r2, #1
 802479e:	4293      	cmp	r3, r2
 80247a0:	f6bf af43 	bge.w	802462a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80247a4:	9b07      	ldr	r3, [sp, #28]
 80247a6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80247aa:	f103 0803 	add.w	r8, r3, #3
 80247ae:	f1ba 0f00 	cmp.w	sl, #0
 80247b2:	dc71      	bgt.n	8024898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80247b4:	9b06      	ldr	r3, [sp, #24]
 80247b6:	9a07      	ldr	r2, [sp, #28]
 80247b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80247bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80247c0:	441a      	add	r2, r3
 80247c2:	9207      	str	r2, [sp, #28]
 80247c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80247c6:	2b00      	cmp	r3, #0
 80247c8:	f340 80f2 	ble.w	80249b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80247cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80247d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80247d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80247d6:	eeb0 6a62 	vmov.f32	s12, s5
 80247da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80247de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80247e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80247e6:	ee16 4a10 	vmov	r4, s12
 80247ea:	eeb0 6a43 	vmov.f32	s12, s6
 80247ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80247f2:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 80247f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80247fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80247fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024802:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024806:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802480a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802480e:	ee12 2a90 	vmov	r2, s5
 8024812:	eef0 2a47 	vmov.f32	s5, s14
 8024816:	fb92 f3f3 	sdiv	r3, r2, r3
 802481a:	ee13 2a10 	vmov	r2, s6
 802481e:	9319      	str	r3, [sp, #100]	@ 0x64
 8024820:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024822:	eeb0 3a67 	vmov.f32	s6, s15
 8024826:	fb92 f3f3 	sdiv	r3, r2, r3
 802482a:	931a      	str	r3, [sp, #104]	@ 0x68
 802482c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802482e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024830:	3b01      	subs	r3, #1
 8024832:	9309      	str	r3, [sp, #36]	@ 0x24
 8024834:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024836:	bf08      	it	eq
 8024838:	4613      	moveq	r3, r2
 802483a:	9306      	str	r3, [sp, #24]
 802483c:	e6cb      	b.n	80245d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802483e:	b151      	cbz	r1, 8024856 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8024840:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8024844:	4660      	mov	r0, ip
 8024846:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802484a:	442a      	add	r2, r5
 802484c:	4667      	mov	r7, ip
 802484e:	e731      	b.n	80246b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8024850:	4660      	mov	r0, ip
 8024852:	4662      	mov	r2, ip
 8024854:	e72e      	b.n	80246b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8024856:	4660      	mov	r0, ip
 8024858:	4662      	mov	r2, ip
 802485a:	e7f7      	b.n	802484c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802485c:	f110 0e01 	adds.w	lr, r0, #1
 8024860:	f53f af71 	bmi.w	8024746 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8024864:	4572      	cmp	r2, lr
 8024866:	f6ff af6e 	blt.w	8024746 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802486a:	f117 0e01 	adds.w	lr, r7, #1
 802486e:	f53f af6a 	bmi.w	8024746 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8024872:	45f4      	cmp	ip, lr
 8024874:	f6ff af67 	blt.w	8024746 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8024878:	b212      	sxth	r2, r2
 802487a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802487e:	fa0f f38c 	sxth.w	r3, ip
 8024882:	9200      	str	r2, [sp, #0]
 8024884:	4631      	mov	r1, r6
 8024886:	9a08      	ldr	r2, [sp, #32]
 8024888:	9301      	str	r3, [sp, #4]
 802488a:	462b      	mov	r3, r5
 802488c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8024890:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8024892:	f7ff fde9 	bl	8024468 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8024896:	e756      	b.n	8024746 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8024898:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802489a:	1426      	asrs	r6, r4, #16
 802489c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802489e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80248a2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80248a6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80248a8:	1400      	asrs	r0, r0, #16
 80248aa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80248ae:	fb02 6000 	mla	r0, r2, r0, r6
 80248b2:	9e08      	ldr	r6, [sp, #32]
 80248b4:	f816 e000 	ldrb.w	lr, [r6, r0]
 80248b8:	eb06 0c00 	add.w	ip, r6, r0
 80248bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80248c0:	eb05 070e 	add.w	r7, r5, lr
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	d064      	beq.n	8024992 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80248c8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80248cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80248d0:	442e      	add	r6, r5
 80248d2:	2900      	cmp	r1, #0
 80248d4:	d066      	beq.n	80249a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80248d6:	eb0c 0002 	add.w	r0, ip, r2
 80248da:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80248de:	7840      	ldrb	r0, [r0, #1]
 80248e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80248e8:	442a      	add	r2, r5
 80248ea:	4428      	add	r0, r5
 80248ec:	b29b      	uxth	r3, r3
 80248ee:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80248f2:	b289      	uxth	r1, r1
 80248f4:	f896 e000 	ldrb.w	lr, [r6]
 80248f8:	f108 0803 	add.w	r8, r8, #3
 80248fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024900:	fb03 f901 	mul.w	r9, r3, r1
 8024904:	011b      	lsls	r3, r3, #4
 8024906:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802490a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 802490e:	eba3 0309 	sub.w	r3, r3, r9
 8024912:	b289      	uxth	r1, r1
 8024914:	b29b      	uxth	r3, r3
 8024916:	ebac 0c01 	sub.w	ip, ip, r1
 802491a:	fb03 fe0e 	mul.w	lr, r3, lr
 802491e:	fa1f fc8c 	uxth.w	ip, ip
 8024922:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024926:	f892 b000 	ldrb.w	fp, [r2]
 802492a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802492e:	f890 b000 	ldrb.w	fp, [r0]
 8024932:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024936:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802493a:	f808 ec06 	strb.w	lr, [r8, #-6]
 802493e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8024942:	f897 b001 	ldrb.w	fp, [r7, #1]
 8024946:	fb03 fe0e 	mul.w	lr, r3, lr
 802494a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802494e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024952:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024956:	f890 b001 	ldrb.w	fp, [r0, #1]
 802495a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802495e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024962:	f808 ec05 	strb.w	lr, [r8, #-5]
 8024966:	78b6      	ldrb	r6, [r6, #2]
 8024968:	78bf      	ldrb	r7, [r7, #2]
 802496a:	4373      	muls	r3, r6
 802496c:	7896      	ldrb	r6, [r2, #2]
 802496e:	7882      	ldrb	r2, [r0, #2]
 8024970:	fb0c 3307 	mla	r3, ip, r7, r3
 8024974:	fb01 3306 	mla	r3, r1, r6, r3
 8024978:	fb09 3902 	mla	r9, r9, r2, r3
 802497c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802497e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024980:	441c      	add	r4, r3
 8024982:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024984:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024988:	4413      	add	r3, r2
 802498a:	f808 9c04 	strb.w	r9, [r8, #-4]
 802498e:	9318      	str	r3, [sp, #96]	@ 0x60
 8024990:	e70d      	b.n	80247ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024992:	b151      	cbz	r1, 80249aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8024994:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8024998:	4638      	mov	r0, r7
 802499a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802499e:	442a      	add	r2, r5
 80249a0:	463e      	mov	r6, r7
 80249a2:	e7a3      	b.n	80248ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80249a4:	4638      	mov	r0, r7
 80249a6:	463a      	mov	r2, r7
 80249a8:	e7a0      	b.n	80248ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80249aa:	4638      	mov	r0, r7
 80249ac:	463a      	mov	r2, r7
 80249ae:	e7f7      	b.n	80249a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80249b0:	b00d      	add	sp, #52	@ 0x34
 80249b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080249b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80249b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249ba:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80249be:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80249c2:	2d00      	cmp	r5, #0
 80249c4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80249c8:	fb05 700c 	mla	r0, r5, ip, r7
 80249cc:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80249d0:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 80249d4:	eb02 0800 	add.w	r8, r2, r0
 80249d8:	f2c0 8118 	blt.w	8024c0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80249dc:	45a9      	cmp	r9, r5
 80249de:	f340 8115 	ble.w	8024c0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80249e2:	2f00      	cmp	r7, #0
 80249e4:	f2c0 8110 	blt.w	8024c08 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80249e8:	45bc      	cmp	ip, r7
 80249ea:	f340 810d 	ble.w	8024c08 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80249ee:	5c12      	ldrb	r2, [r2, r0]
 80249f0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80249f4:	1c7a      	adds	r2, r7, #1
 80249f6:	f100 810c 	bmi.w	8024c12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 80249fa:	4594      	cmp	ip, r2
 80249fc:	f340 8109 	ble.w	8024c12 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8024a00:	2c00      	cmp	r4, #0
 8024a02:	f000 8108 	beq.w	8024c16 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8024a06:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024a0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024a0e:	3501      	adds	r5, #1
 8024a10:	f100 8105 	bmi.w	8024c1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024a14:	45a9      	cmp	r9, r5
 8024a16:	f340 8102 	ble.w	8024c1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024a1a:	f1be 0f00 	cmp.w	lr, #0
 8024a1e:	f000 8101 	beq.w	8024c24 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8024a22:	2f00      	cmp	r7, #0
 8024a24:	f2c0 80f9 	blt.w	8024c1a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024a28:	45bc      	cmp	ip, r7
 8024a2a:	f340 80f6 	ble.w	8024c1a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024a2e:	f818 200c 	ldrb.w	r2, [r8, ip]
 8024a32:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024a36:	3701      	adds	r7, #1
 8024a38:	f100 80f7 	bmi.w	8024c2a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024a3c:	45bc      	cmp	ip, r7
 8024a3e:	f340 80f4 	ble.w	8024c2a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024a42:	2c00      	cmp	r4, #0
 8024a44:	f000 80f3 	beq.w	8024c2e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8024a48:	44c4      	add	ip, r8
 8024a4a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024a4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024a52:	fa1f fc84 	uxth.w	ip, r4
 8024a56:	fa1f f48e 	uxth.w	r4, lr
 8024a5a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024a5e:	fb04 fe0c 	mul.w	lr, r4, ip
 8024a62:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024a66:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024a6a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8024a6e:	ebac 070e 	sub.w	r7, ip, lr
 8024a72:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8024a76:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024a7a:	b2a4      	uxth	r4, r4
 8024a7c:	b2bf      	uxth	r7, r7
 8024a7e:	1b1b      	subs	r3, r3, r4
 8024a80:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024a84:	fb07 fc0a 	mul.w	ip, r7, sl
 8024a88:	b29b      	uxth	r3, r3
 8024a8a:	fb03 cc0b 	mla	ip, r3, fp, ip
 8024a8e:	9300      	str	r3, [sp, #0]
 8024a90:	fb04 cc09 	mla	ip, r4, r9, ip
 8024a94:	fb0e cc08 	mla	ip, lr, r8, ip
 8024a98:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024a9c:	9301      	str	r3, [sp, #4]
 8024a9e:	2b00      	cmp	r3, #0
 8024aa0:	f000 80af 	beq.w	8024c02 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8024aa4:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8024aa8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024aac:	fb0b fc0c 	mul.w	ip, fp, ip
 8024ab0:	fb0b f606 	mul.w	r6, fp, r6
 8024ab4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024ab8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024abc:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8024ac0:	44dc      	add	ip, fp
 8024ac2:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8024ac6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024aca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ace:	fb0a fb0b 	mul.w	fp, sl, fp
 8024ad2:	fb0a fa00 	mul.w	sl, sl, r0
 8024ad6:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8024ada:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8024ade:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8024ae2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024ae6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024aea:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024aee:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024af2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024af6:	0a36      	lsrs	r6, r6, #8
 8024af8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024afc:	44dc      	add	ip, fp
 8024afe:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8024b02:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024b06:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024b0a:	fb09 fb0b 	mul.w	fp, r9, fp
 8024b0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b12:	fb09 f905 	mul.w	r9, r9, r5
 8024b16:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024b1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024b1e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8024b22:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024b26:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024b2a:	fb0c fc07 	mul.w	ip, ip, r7
 8024b2e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024b32:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8024b36:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8024b3a:	4458      	add	r0, fp
 8024b3c:	fb08 f505 	mul.w	r5, r8, r5
 8024b40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024b44:	fb08 f802 	mul.w	r8, r8, r2
 8024b48:	0a00      	lsrs	r0, r0, #8
 8024b4a:	0a2a      	lsrs	r2, r5, #8
 8024b4c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8024b50:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024b54:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8024b58:	4415      	add	r5, r2
 8024b5a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8024b5e:	0a2d      	lsrs	r5, r5, #8
 8024b60:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024b64:	9a00      	ldr	r2, [sp, #0]
 8024b66:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8024b6a:	fb03 cc02 	mla	ip, r3, r2, ip
 8024b6e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024b72:	9b01      	ldr	r3, [sp, #4]
 8024b74:	fb05 c50e 	mla	r5, r5, lr, ip
 8024b78:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8024b7c:	fb00 5004 	mla	r0, r0, r4, r5
 8024b80:	0a00      	lsrs	r0, r0, #8
 8024b82:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8024b86:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8024b8a:	4378      	muls	r0, r7
 8024b8c:	fb02 0006 	mla	r0, r2, r6, r0
 8024b90:	fb0e 0e08 	mla	lr, lr, r8, r0
 8024b94:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8024b98:	fb04 e000 	mla	r0, r4, r0, lr
 8024b9c:	0a00      	lsrs	r0, r0, #8
 8024b9e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024ba2:	4328      	orrs	r0, r5
 8024ba4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8024ba8:	b2ad      	uxth	r5, r5
 8024baa:	b2c4      	uxtb	r4, r0
 8024bac:	436b      	muls	r3, r5
 8024bae:	fb14 f405 	smulbb	r4, r4, r5
 8024bb2:	1c5a      	adds	r2, r3, #1
 8024bb4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024bb8:	780b      	ldrb	r3, [r1, #0]
 8024bba:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8024bbe:	b2d2      	uxtb	r2, r2
 8024bc0:	fb03 4302 	mla	r3, r3, r2, r4
 8024bc4:	b29b      	uxth	r3, r3
 8024bc6:	1c5c      	adds	r4, r3, #1
 8024bc8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024bcc:	784c      	ldrb	r4, [r1, #1]
 8024bce:	fb14 f402 	smulbb	r4, r4, r2
 8024bd2:	121b      	asrs	r3, r3, #8
 8024bd4:	700b      	strb	r3, [r1, #0]
 8024bd6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8024bda:	fb03 4305 	mla	r3, r3, r5, r4
 8024bde:	b29b      	uxth	r3, r3
 8024be0:	1c5c      	adds	r4, r3, #1
 8024be2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024be6:	0c04      	lsrs	r4, r0, #16
 8024be8:	7888      	ldrb	r0, [r1, #2]
 8024bea:	121b      	asrs	r3, r3, #8
 8024bec:	fb10 f002 	smulbb	r0, r0, r2
 8024bf0:	704b      	strb	r3, [r1, #1]
 8024bf2:	fb04 0005 	mla	r0, r4, r5, r0
 8024bf6:	b280      	uxth	r0, r0
 8024bf8:	1c43      	adds	r3, r0, #1
 8024bfa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024bfe:	1200      	asrs	r0, r0, #8
 8024c00:	7088      	strb	r0, [r1, #2]
 8024c02:	b003      	add	sp, #12
 8024c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c08:	2600      	movs	r6, #0
 8024c0a:	e6f3      	b.n	80249f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8024c0c:	2000      	movs	r0, #0
 8024c0e:	4606      	mov	r6, r0
 8024c10:	e6fd      	b.n	8024a0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c12:	2000      	movs	r0, #0
 8024c14:	e6fb      	b.n	8024a0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c16:	4620      	mov	r0, r4
 8024c18:	e6f9      	b.n	8024a0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c1a:	2500      	movs	r5, #0
 8024c1c:	e70b      	b.n	8024a36 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8024c1e:	2200      	movs	r2, #0
 8024c20:	4615      	mov	r5, r2
 8024c22:	e716      	b.n	8024a52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c24:	4672      	mov	r2, lr
 8024c26:	4675      	mov	r5, lr
 8024c28:	e713      	b.n	8024a52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c2a:	2200      	movs	r2, #0
 8024c2c:	e711      	b.n	8024a52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c2e:	4622      	mov	r2, r4
 8024c30:	e70f      	b.n	8024a52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08024c32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024c32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c36:	b09f      	sub	sp, #124	@ 0x7c
 8024c38:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c3c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024c3e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8024c42:	901d      	str	r0, [sp, #116]	@ 0x74
 8024c44:	931c      	str	r3, [sp, #112]	@ 0x70
 8024c46:	6850      	ldr	r0, [r2, #4]
 8024c48:	9119      	str	r1, [sp, #100]	@ 0x64
 8024c4a:	6812      	ldr	r2, [r2, #0]
 8024c4c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8024c4e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8024c52:	fb00 1303 	mla	r3, r0, r3, r1
 8024c56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024c5a:	18d3      	adds	r3, r2, r3
 8024c5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8024c5e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024c60:	681b      	ldr	r3, [r3, #0]
 8024c62:	9312      	str	r3, [sp, #72]	@ 0x48
 8024c64:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024c66:	685e      	ldr	r6, [r3, #4]
 8024c68:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8024c6c:	3604      	adds	r6, #4
 8024c6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	dc03      	bgt.n	8024c7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024c76:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	f340 8378 	ble.w	802536e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024c7e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024c80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c88:	1e48      	subs	r0, r1, #1
 8024c8a:	1e57      	subs	r7, r2, #1
 8024c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c8e:	2b00      	cmp	r3, #0
 8024c90:	f340 818c 	ble.w	8024fac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8024c94:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024c96:	142b      	asrs	r3, r5, #16
 8024c98:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024c9c:	d406      	bmi.n	8024cac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024c9e:	4584      	cmp	ip, r0
 8024ca0:	da04      	bge.n	8024cac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	db02      	blt.n	8024cac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024ca6:	42bb      	cmp	r3, r7
 8024ca8:	f2c0 8181 	blt.w	8024fae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024cac:	f11c 0c01 	adds.w	ip, ip, #1
 8024cb0:	f100 816f 	bmi.w	8024f92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024cb4:	4561      	cmp	r1, ip
 8024cb6:	f2c0 816c 	blt.w	8024f92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024cba:	3301      	adds	r3, #1
 8024cbc:	f100 8169 	bmi.w	8024f92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024cc0:	429a      	cmp	r2, r3
 8024cc2:	f2c0 8166 	blt.w	8024f92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cc8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8024cca:	931a      	str	r3, [sp, #104]	@ 0x68
 8024ccc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024cce:	2b00      	cmp	r3, #0
 8024cd0:	f340 818c 	ble.w	8024fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8024cd4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024cd6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024cda:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024cde:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024ce2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024ce4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024ce8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024cea:	141b      	asrs	r3, r3, #16
 8024cec:	f100 81d0 	bmi.w	8025090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024cf0:	f100 38ff 	add.w	r8, r0, #4294967295
 8024cf4:	4543      	cmp	r3, r8
 8024cf6:	f280 81cb 	bge.w	8025090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024cfa:	f1bc 0f00 	cmp.w	ip, #0
 8024cfe:	f2c0 81c7 	blt.w	8025090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d02:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024d06:	45c4      	cmp	ip, r8
 8024d08:	f280 81c2 	bge.w	8025090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d0c:	b200      	sxth	r0, r0
 8024d0e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024d10:	fb0c 3300 	mla	r3, ip, r0, r3
 8024d14:	eb04 0803 	add.w	r8, r4, r3
 8024d18:	5ce3      	ldrb	r3, [r4, r3]
 8024d1a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024d1e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024d22:	2a00      	cmp	r2, #0
 8024d24:	f000 81a9 	beq.w	802507a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8024d28:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024d2c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024d30:	940e      	str	r4, [sp, #56]	@ 0x38
 8024d32:	0e24      	lsrs	r4, r4, #24
 8024d34:	9415      	str	r4, [sp, #84]	@ 0x54
 8024d36:	b179      	cbz	r1, 8024d58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024d38:	eb08 0c00 	add.w	ip, r8, r0
 8024d3c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024d40:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024d44:	900a      	str	r0, [sp, #40]	@ 0x28
 8024d46:	0e00      	lsrs	r0, r0, #24
 8024d48:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024d4a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024d4e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024d52:	900f      	str	r0, [sp, #60]	@ 0x3c
 8024d54:	0e00      	lsrs	r0, r0, #24
 8024d56:	9016      	str	r0, [sp, #88]	@ 0x58
 8024d58:	b292      	uxth	r2, r2
 8024d5a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8024d5c:	b289      	uxth	r1, r1
 8024d5e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024d60:	fb02 f901 	mul.w	r9, r2, r1
 8024d64:	0112      	lsls	r2, r2, #4
 8024d66:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024d6a:	eba2 0809 	sub.w	r8, r2, r9
 8024d6e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024d72:	b289      	uxth	r1, r1
 8024d74:	fa1f f888 	uxth.w	r8, r8
 8024d78:	1a52      	subs	r2, r2, r1
 8024d7a:	fb08 f000 	mul.w	r0, r8, r0
 8024d7e:	b292      	uxth	r2, r2
 8024d80:	fb02 000e 	mla	r0, r2, lr, r0
 8024d84:	fb01 0004 	mla	r0, r1, r4, r0
 8024d88:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024d8a:	fb09 0004 	mla	r0, r9, r4, r0
 8024d8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024d92:	2800      	cmp	r0, #0
 8024d94:	f000 80f2 	beq.w	8024f7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024d98:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024d9c:	d01b      	beq.n	8024dd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8024d9e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024da2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024da6:	fb0e fa0a 	mul.w	sl, lr, sl
 8024daa:	fb0e fe03 	mul.w	lr, lr, r3
 8024dae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024db2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024db6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8024dba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024dbe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024dc2:	4453      	add	r3, sl
 8024dc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024dc8:	0a1b      	lsrs	r3, r3, #8
 8024dca:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024dce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024dd2:	ea43 030c 	orr.w	r3, r3, ip
 8024dd6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024dd8:	2cff      	cmp	r4, #255	@ 0xff
 8024dda:	d021      	beq.n	8024e20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024ddc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024dde:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024de2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024de4:	fb04 fb0b 	mul.w	fp, r4, fp
 8024de8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024dea:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024dee:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024df0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024df4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024df8:	fb04 fa0a 	mul.w	sl, r4, sl
 8024dfc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e00:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024e04:	44de      	add	lr, fp
 8024e06:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e12:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e16:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024e1a:	ea4e 040a 	orr.w	r4, lr, sl
 8024e1e:	940e      	str	r4, [sp, #56]	@ 0x38
 8024e20:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e22:	2cff      	cmp	r4, #255	@ 0xff
 8024e24:	d021      	beq.n	8024e6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024e26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024e28:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024e2c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e2e:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024e34:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024e38:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024e3e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024e42:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e46:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e4a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024e4e:	44de      	add	lr, fp
 8024e50:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e5c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e60:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024e64:	ea4e 040a 	orr.w	r4, lr, sl
 8024e68:	940a      	str	r4, [sp, #40]	@ 0x28
 8024e6a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024e6c:	2cff      	cmp	r4, #255	@ 0xff
 8024e6e:	d021      	beq.n	8024eb4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024e70:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024e72:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024e76:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024e78:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e7c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024e7e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024e82:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024e84:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024e88:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024e8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e90:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e94:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024e98:	44de      	add	lr, fp
 8024e9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ea2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ea6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024eaa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024eae:	ea4e 040a 	orr.w	r4, lr, sl
 8024eb2:	940f      	str	r4, [sp, #60]	@ 0x3c
 8024eb4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024eb6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8024eba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024ebe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024ec2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024ec4:	fb08 fc0c 	mul.w	ip, r8, ip
 8024ec8:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024ecc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024ed0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024ed2:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024ed6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024eda:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024edc:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024ee0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8024ee4:	fb08 f80e 	mul.w	r8, r8, lr
 8024ee8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024eec:	fb02 8303 	mla	r3, r2, r3, r8
 8024ef0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024ef2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024ef6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024efa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024efc:	fb01 330a 	mla	r3, r1, sl, r3
 8024f00:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8024f04:	fb09 3901 	mla	r9, r9, r1, r3
 8024f08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024f0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024f0c:	4343      	muls	r3, r0
 8024f0e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024f12:	1c58      	adds	r0, r3, #1
 8024f14:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024f18:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024f1c:	ea4c 0c09 	orr.w	ip, ip, r9
 8024f20:	783b      	ldrb	r3, [r7, #0]
 8024f22:	fa5f f28c 	uxtb.w	r2, ip
 8024f26:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024f2a:	fb12 f201 	smulbb	r2, r2, r1
 8024f2e:	b2c0      	uxtb	r0, r0
 8024f30:	fb03 2300 	mla	r3, r3, r0, r2
 8024f34:	b29b      	uxth	r3, r3
 8024f36:	1c5a      	adds	r2, r3, #1
 8024f38:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024f3c:	787a      	ldrb	r2, [r7, #1]
 8024f3e:	fb12 f200 	smulbb	r2, r2, r0
 8024f42:	121b      	asrs	r3, r3, #8
 8024f44:	703b      	strb	r3, [r7, #0]
 8024f46:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024f4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024f4e:	fb03 2301 	mla	r3, r3, r1, r2
 8024f52:	b29b      	uxth	r3, r3
 8024f54:	1c5a      	adds	r2, r3, #1
 8024f56:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024f5a:	121b      	asrs	r3, r3, #8
 8024f5c:	707b      	strb	r3, [r7, #1]
 8024f5e:	78bb      	ldrb	r3, [r7, #2]
 8024f60:	fb13 f000 	smulbb	r0, r3, r0
 8024f64:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024f68:	fa1f fc8c 	uxth.w	ip, ip
 8024f6c:	f10c 0301 	add.w	r3, ip, #1
 8024f70:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024f74:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024f78:	f887 c002 	strb.w	ip, [r7, #2]
 8024f7c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024f7e:	3703      	adds	r7, #3
 8024f80:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024f82:	441a      	add	r2, r3
 8024f84:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024f86:	441d      	add	r5, r3
 8024f88:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024f8a:	9229      	str	r2, [sp, #164]	@ 0xa4
 8024f8c:	3b01      	subs	r3, #1
 8024f8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8024f90:	e69c      	b.n	8024ccc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024f92:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024f94:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024f96:	441c      	add	r4, r3
 8024f98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024f9a:	441d      	add	r5, r3
 8024f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f9e:	9429      	str	r4, [sp, #164]	@ 0xa4
 8024fa0:	3b01      	subs	r3, #1
 8024fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8024fa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024fa6:	3303      	adds	r3, #3
 8024fa8:	930c      	str	r3, [sp, #48]	@ 0x30
 8024faa:	e66f      	b.n	8024c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024fac:	d026      	beq.n	8024ffc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fb0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8024fb2:	3b01      	subs	r3, #1
 8024fb4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024fb6:	fb00 4003 	mla	r0, r0, r3, r4
 8024fba:	1400      	asrs	r0, r0, #16
 8024fbc:	f53f ae83 	bmi.w	8024cc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024fc0:	3901      	subs	r1, #1
 8024fc2:	4288      	cmp	r0, r1
 8024fc4:	f6bf ae7f 	bge.w	8024cc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024fc8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8024fca:	fb01 5303 	mla	r3, r1, r3, r5
 8024fce:	141b      	asrs	r3, r3, #16
 8024fd0:	f53f ae79 	bmi.w	8024cc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024fd4:	3a01      	subs	r2, #1
 8024fd6:	4293      	cmp	r3, r2
 8024fd8:	f6bf ae75 	bge.w	8024cc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024fdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024fde:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8024fe2:	f103 0e03 	add.w	lr, r3, #3
 8024fe6:	f1bb 0f00 	cmp.w	fp, #0
 8024fea:	dc71      	bgt.n	80250d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024ff2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ff4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024ff8:	4423      	add	r3, r4
 8024ffa:	930c      	str	r3, [sp, #48]	@ 0x30
 8024ffc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024ffe:	2b00      	cmp	r3, #0
 8025000:	f340 81b5 	ble.w	802536e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8025004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025008:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802500a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802500e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025012:	eef0 6a62 	vmov.f32	s13, s5
 8025016:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802501a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802501e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025022:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8025026:	eef0 6a43 	vmov.f32	s13, s6
 802502a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802502e:	ee16 5a90 	vmov	r5, s13
 8025032:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025036:	ee61 7a27 	vmul.f32	s15, s2, s15
 802503a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802503e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025042:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025046:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802504a:	ee12 2a90 	vmov	r2, s5
 802504e:	eef0 2a47 	vmov.f32	s5, s14
 8025052:	fb92 f3f3 	sdiv	r3, r2, r3
 8025056:	ee13 2a10 	vmov	r2, s6
 802505a:	932b      	str	r3, [sp, #172]	@ 0xac
 802505c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802505e:	eeb0 3a67 	vmov.f32	s6, s15
 8025062:	fb92 f3f3 	sdiv	r3, r2, r3
 8025066:	932c      	str	r3, [sp, #176]	@ 0xb0
 8025068:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802506a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802506c:	3b01      	subs	r3, #1
 802506e:	9319      	str	r3, [sp, #100]	@ 0x64
 8025070:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025072:	bf08      	it	eq
 8025074:	4613      	moveq	r3, r2
 8025076:	9309      	str	r3, [sp, #36]	@ 0x24
 8025078:	e5fa      	b.n	8024c70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802507a:	2900      	cmp	r1, #0
 802507c:	f43f ae6c 	beq.w	8024d58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8025080:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025084:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025088:	900a      	str	r0, [sp, #40]	@ 0x28
 802508a:	0e00      	lsrs	r0, r0, #24
 802508c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802508e:	e663      	b.n	8024d58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8025090:	f113 0801 	adds.w	r8, r3, #1
 8025094:	f53f af72 	bmi.w	8024f7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025098:	4540      	cmp	r0, r8
 802509a:	f6ff af6f 	blt.w	8024f7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802509e:	f11c 0801 	adds.w	r8, ip, #1
 80250a2:	f53f af6b 	bmi.w	8024f7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80250a6:	45c6      	cmp	lr, r8
 80250a8:	f6ff af68 	blt.w	8024f7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80250ac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80250ae:	b200      	sxth	r0, r0
 80250b0:	9302      	str	r3, [sp, #8]
 80250b2:	fa0f f38e 	sxth.w	r3, lr
 80250b6:	9000      	str	r0, [sp, #0]
 80250b8:	9301      	str	r3, [sp, #4]
 80250ba:	4633      	mov	r3, r6
 80250bc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80250be:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80250c2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80250c6:	4639      	mov	r1, r7
 80250c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80250ca:	f7ff fc74 	bl	80249b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80250ce:	e755      	b.n	8024f7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80250d0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80250d2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80250d6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80250d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80250dc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80250de:	1427      	asrs	r7, r4, #16
 80250e0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80250e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80250e6:	142b      	asrs	r3, r5, #16
 80250e8:	fb01 7303 	mla	r3, r1, r3, r7
 80250ec:	18e7      	adds	r7, r4, r3
 80250ee:	5ce3      	ldrb	r3, [r4, r3]
 80250f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80250f4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80250f8:	2a00      	cmp	r2, #0
 80250fa:	f000 812e 	beq.w	802535a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80250fe:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025102:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8025106:	9410      	str	r4, [sp, #64]	@ 0x40
 8025108:	0e24      	lsrs	r4, r4, #24
 802510a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802510c:	b170      	cbz	r0, 802512c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802510e:	eb07 0801 	add.w	r8, r7, r1
 8025112:	5c79      	ldrb	r1, [r7, r1]
 8025114:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025118:	910b      	str	r1, [sp, #44]	@ 0x2c
 802511a:	0e09      	lsrs	r1, r1, #24
 802511c:	9114      	str	r1, [sp, #80]	@ 0x50
 802511e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025122:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025126:	9111      	str	r1, [sp, #68]	@ 0x44
 8025128:	0e09      	lsrs	r1, r1, #24
 802512a:	9118      	str	r1, [sp, #96]	@ 0x60
 802512c:	b292      	uxth	r2, r2
 802512e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025130:	b280      	uxth	r0, r0
 8025132:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025134:	fb02 f900 	mul.w	r9, r2, r0
 8025138:	0112      	lsls	r2, r2, #4
 802513a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802513e:	eba2 0809 	sub.w	r8, r2, r9
 8025142:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025146:	b280      	uxth	r0, r0
 8025148:	fa1f f888 	uxth.w	r8, r8
 802514c:	1a12      	subs	r2, r2, r0
 802514e:	fb08 f101 	mul.w	r1, r8, r1
 8025152:	b292      	uxth	r2, r2
 8025154:	fb02 110c 	mla	r1, r2, ip, r1
 8025158:	fb00 1104 	mla	r1, r0, r4, r1
 802515c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802515e:	fb09 1104 	mla	r1, r9, r4, r1
 8025162:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025166:	2900      	cmp	r1, #0
 8025168:	f000 80ec 	beq.w	8025344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802516c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025170:	d019      	beq.n	80251a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8025172:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025176:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802517a:	fb0c fa0a 	mul.w	sl, ip, sl
 802517e:	fb0c fc03 	mul.w	ip, ip, r3
 8025182:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025186:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802518a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802518e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025192:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025196:	4453      	add	r3, sl
 8025198:	0a3f      	lsrs	r7, r7, #8
 802519a:	0a1b      	lsrs	r3, r3, #8
 802519c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80251a0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80251a4:	433b      	orrs	r3, r7
 80251a6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80251a8:	2cff      	cmp	r4, #255	@ 0xff
 80251aa:	d020      	beq.n	80251ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80251ac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80251ae:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80251b2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80251b4:	4367      	muls	r7, r4
 80251b6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80251b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80251bc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80251c0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80251c2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80251c6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80251ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80251ce:	44bc      	add	ip, r7
 80251d0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80251d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80251dc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80251e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251e4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80251e8:	ea4c 040a 	orr.w	r4, ip, sl
 80251ec:	9410      	str	r4, [sp, #64]	@ 0x40
 80251ee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80251f0:	2cff      	cmp	r4, #255	@ 0xff
 80251f2:	d020      	beq.n	8025236 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 80251f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80251f6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80251fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80251fc:	4367      	muls	r7, r4
 80251fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025200:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025204:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025208:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802520a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802520e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025212:	fb04 fa0a 	mul.w	sl, r4, sl
 8025216:	44bc      	add	ip, r7
 8025218:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802521c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025220:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025224:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025228:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802522c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025230:	ea4c 040a 	orr.w	r4, ip, sl
 8025234:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025236:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025238:	2cff      	cmp	r4, #255	@ 0xff
 802523a:	d020      	beq.n	802527e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802523c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802523e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025242:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025244:	4367      	muls	r7, r4
 8025246:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025248:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802524c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025250:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025252:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025256:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802525a:	fb04 fa0a 	mul.w	sl, r4, sl
 802525e:	44bc      	add	ip, r7
 8025260:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025264:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025268:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802526c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025270:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025274:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025278:	ea4c 040a 	orr.w	r4, ip, sl
 802527c:	9411      	str	r4, [sp, #68]	@ 0x44
 802527e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025280:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025284:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025288:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802528c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802528e:	fb08 f707 	mul.w	r7, r8, r7
 8025292:	fb02 770c 	mla	r7, r2, ip, r7
 8025296:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802529a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802529c:	fb00 770c 	mla	r7, r0, ip, r7
 80252a0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80252a4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80252a6:	fb09 770c 	mla	r7, r9, ip, r7
 80252aa:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80252ae:	fb08 f80c 	mul.w	r8, r8, ip
 80252b2:	0a3f      	lsrs	r7, r7, #8
 80252b4:	fb02 8303 	mla	r3, r2, r3, r8
 80252b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80252ba:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80252be:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80252c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80252c4:	fb00 330a 	mla	r3, r0, sl, r3
 80252c8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80252cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80252ce:	fb09 3c0c 	mla	ip, r9, ip, r3
 80252d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80252d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252d8:	434b      	muls	r3, r1
 80252da:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80252de:	1c59      	adds	r1, r3, #1
 80252e0:	ea47 070c 	orr.w	r7, r7, ip
 80252e4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80252e8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80252ec:	b2fa      	uxtb	r2, r7
 80252ee:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80252f2:	fb12 f200 	smulbb	r2, r2, r0
 80252f6:	b2c9      	uxtb	r1, r1
 80252f8:	fb03 2301 	mla	r3, r3, r1, r2
 80252fc:	b29b      	uxth	r3, r3
 80252fe:	1c5a      	adds	r2, r3, #1
 8025300:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025304:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025308:	fb12 f201 	smulbb	r2, r2, r1
 802530c:	121b      	asrs	r3, r3, #8
 802530e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025312:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8025316:	0c3f      	lsrs	r7, r7, #16
 8025318:	fb03 2300 	mla	r3, r3, r0, r2
 802531c:	b29b      	uxth	r3, r3
 802531e:	1c5a      	adds	r2, r3, #1
 8025320:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025324:	121b      	asrs	r3, r3, #8
 8025326:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802532a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802532e:	fb13 f101 	smulbb	r1, r3, r1
 8025332:	fb07 1700 	mla	r7, r7, r0, r1
 8025336:	b2bf      	uxth	r7, r7
 8025338:	1c7b      	adds	r3, r7, #1
 802533a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802533e:	123f      	asrs	r7, r7, #8
 8025340:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025344:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025346:	f10e 0e03 	add.w	lr, lr, #3
 802534a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802534c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025350:	441a      	add	r2, r3
 8025352:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025354:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025356:	441d      	add	r5, r3
 8025358:	e645      	b.n	8024fe6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802535a:	2800      	cmp	r0, #0
 802535c:	f43f aee6 	beq.w	802512c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8025360:	5c79      	ldrb	r1, [r7, r1]
 8025362:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025366:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025368:	0e09      	lsrs	r1, r1, #24
 802536a:	9114      	str	r1, [sp, #80]	@ 0x50
 802536c:	e6de      	b.n	802512c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802536e:	b01f      	add	sp, #124	@ 0x7c
 8025370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025374 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8025374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025378:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 802537c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8025380:	2d00      	cmp	r5, #0
 8025382:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8025386:	fb05 700e 	mla	r0, r5, lr, r7
 802538a:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 802538e:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8025392:	eb02 0800 	add.w	r8, r2, r0
 8025396:	f2c0 8105 	blt.w	80255a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 802539a:	45a9      	cmp	r9, r5
 802539c:	f340 8102 	ble.w	80255a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80253a0:	2f00      	cmp	r7, #0
 80253a2:	f2c0 80fd 	blt.w	80255a0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80253a6:	45be      	cmp	lr, r7
 80253a8:	f340 80fa 	ble.w	80255a0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80253ac:	5c12      	ldrb	r2, [r2, r0]
 80253ae:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80253b2:	1c7a      	adds	r2, r7, #1
 80253b4:	f100 80f9 	bmi.w	80255aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80253b8:	4596      	cmp	lr, r2
 80253ba:	f340 80f6 	ble.w	80255aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80253be:	2c00      	cmp	r4, #0
 80253c0:	f000 80f5 	beq.w	80255ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 80253c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80253c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80253cc:	3501      	adds	r5, #1
 80253ce:	f100 80f2 	bmi.w	80255b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80253d2:	45a9      	cmp	r9, r5
 80253d4:	f340 80ef 	ble.w	80255b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80253d8:	f1bc 0f00 	cmp.w	ip, #0
 80253dc:	f000 80ee 	beq.w	80255bc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 80253e0:	2f00      	cmp	r7, #0
 80253e2:	f2c0 80e6 	blt.w	80255b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80253e6:	45be      	cmp	lr, r7
 80253e8:	f340 80e3 	ble.w	80255b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80253ec:	f818 200e 	ldrb.w	r2, [r8, lr]
 80253f0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80253f4:	3701      	adds	r7, #1
 80253f6:	f100 80e4 	bmi.w	80255c2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80253fa:	45be      	cmp	lr, r7
 80253fc:	f340 80e1 	ble.w	80255c2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8025400:	2c00      	cmp	r4, #0
 8025402:	f000 80e0 	beq.w	80255c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8025406:	44c6      	add	lr, r8
 8025408:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802540c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025410:	b2a3      	uxth	r3, r4
 8025412:	fa1f fc8c 	uxth.w	ip, ip
 8025416:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802541a:	fb0c fe03 	mul.w	lr, ip, r3
 802541e:	011b      	lsls	r3, r3, #4
 8025420:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025424:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8025428:	eba3 070e 	sub.w	r7, r3, lr
 802542c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8025430:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025434:	fa1f f48c 	uxth.w	r4, ip
 8025438:	b2bf      	uxth	r7, r7
 802543a:	1b1b      	subs	r3, r3, r4
 802543c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025440:	fb07 fc0a 	mul.w	ip, r7, sl
 8025444:	b29b      	uxth	r3, r3
 8025446:	fb03 cc0b 	mla	ip, r3, fp, ip
 802544a:	9300      	str	r3, [sp, #0]
 802544c:	fb04 cc09 	mla	ip, r4, r9, ip
 8025450:	fb0e cc08 	mla	ip, lr, r8, ip
 8025454:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025458:	9301      	str	r3, [sp, #4]
 802545a:	2b00      	cmp	r3, #0
 802545c:	f000 809d 	beq.w	802559a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8025460:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8025464:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025468:	fb0b fc0c 	mul.w	ip, fp, ip
 802546c:	fb0b f606 	mul.w	r6, fp, r6
 8025470:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025474:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025478:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802547c:	44dc      	add	ip, fp
 802547e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8025482:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025486:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802548a:	fb0a fb0b 	mul.w	fp, sl, fp
 802548e:	fb0a fa00 	mul.w	sl, sl, r0
 8025492:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8025496:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802549a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802549e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80254a2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80254a6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80254aa:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80254ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80254b2:	0a36      	lsrs	r6, r6, #8
 80254b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254b8:	44dc      	add	ip, fp
 80254ba:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80254be:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80254c2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80254c6:	fb09 fb0b 	mul.w	fp, r9, fp
 80254ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80254ce:	fb09 f905 	mul.w	r9, r9, r5
 80254d2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80254d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80254da:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 80254de:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80254e2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80254e6:	fb0c fc07 	mul.w	ip, ip, r7
 80254ea:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80254ee:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80254f2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80254f6:	4458      	add	r0, fp
 80254f8:	fb08 f505 	mul.w	r5, r8, r5
 80254fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025500:	fb08 f802 	mul.w	r8, r8, r2
 8025504:	0a00      	lsrs	r0, r0, #8
 8025506:	0a2a      	lsrs	r2, r5, #8
 8025508:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 802550c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025510:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025514:	4415      	add	r5, r2
 8025516:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802551a:	0a2d      	lsrs	r5, r5, #8
 802551c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025520:	9a00      	ldr	r2, [sp, #0]
 8025522:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025526:	fb03 cc02 	mla	ip, r3, r2, ip
 802552a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802552e:	9b01      	ldr	r3, [sp, #4]
 8025530:	fb05 c50e 	mla	r5, r5, lr, ip
 8025534:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8025538:	43db      	mvns	r3, r3
 802553a:	fb00 5004 	mla	r0, r0, r4, r5
 802553e:	b2db      	uxtb	r3, r3
 8025540:	0a00      	lsrs	r0, r0, #8
 8025542:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8025546:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802554a:	4378      	muls	r0, r7
 802554c:	fb02 0006 	mla	r0, r2, r6, r0
 8025550:	780a      	ldrb	r2, [r1, #0]
 8025552:	fb0e 0e08 	mla	lr, lr, r8, r0
 8025556:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 802555a:	fb04 e000 	mla	r0, r4, r0, lr
 802555e:	fb02 f403 	mul.w	r4, r2, r3
 8025562:	0a00      	lsrs	r0, r0, #8
 8025564:	1c62      	adds	r2, r4, #1
 8025566:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802556a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802556e:	4328      	orrs	r0, r5
 8025570:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025574:	700a      	strb	r2, [r1, #0]
 8025576:	784a      	ldrb	r2, [r1, #1]
 8025578:	435a      	muls	r2, r3
 802557a:	1c54      	adds	r4, r2, #1
 802557c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8025580:	0a02      	lsrs	r2, r0, #8
 8025582:	0c00      	lsrs	r0, r0, #16
 8025584:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025588:	704a      	strb	r2, [r1, #1]
 802558a:	788a      	ldrb	r2, [r1, #2]
 802558c:	4353      	muls	r3, r2
 802558e:	1c5a      	adds	r2, r3, #1
 8025590:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025594:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025598:	7088      	strb	r0, [r1, #2]
 802559a:	b003      	add	sp, #12
 802559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255a0:	2600      	movs	r6, #0
 80255a2:	e706      	b.n	80253b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80255a4:	2000      	movs	r0, #0
 80255a6:	4606      	mov	r6, r0
 80255a8:	e710      	b.n	80253cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80255aa:	2000      	movs	r0, #0
 80255ac:	e70e      	b.n	80253cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80255ae:	4620      	mov	r0, r4
 80255b0:	e70c      	b.n	80253cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80255b2:	2500      	movs	r5, #0
 80255b4:	e71e      	b.n	80253f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80255b6:	2200      	movs	r2, #0
 80255b8:	4615      	mov	r5, r2
 80255ba:	e729      	b.n	8025410 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80255bc:	4662      	mov	r2, ip
 80255be:	4665      	mov	r5, ip
 80255c0:	e726      	b.n	8025410 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80255c2:	2200      	movs	r2, #0
 80255c4:	e724      	b.n	8025410 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80255c6:	4622      	mov	r2, r4
 80255c8:	e722      	b.n	8025410 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080255ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80255ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255ce:	b09b      	sub	sp, #108	@ 0x6c
 80255d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80255d4:	9218      	str	r2, [sp, #96]	@ 0x60
 80255d6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80255d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80255da:	9116      	str	r1, [sp, #88]	@ 0x58
 80255dc:	6850      	ldr	r0, [r2, #4]
 80255de:	9307      	str	r3, [sp, #28]
 80255e0:	6812      	ldr	r2, [r2, #0]
 80255e2:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80255e4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80255e8:	fb00 1303 	mla	r3, r0, r3, r1
 80255ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80255f0:	18d3      	adds	r3, r2, r3
 80255f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80255f4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80255f6:	681b      	ldr	r3, [r3, #0]
 80255f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80255fa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80255fc:	685e      	ldr	r6, [r3, #4]
 80255fe:	3604      	adds	r6, #4
 8025600:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025602:	2b00      	cmp	r3, #0
 8025604:	dc03      	bgt.n	802560e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8025606:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025608:	2b00      	cmp	r3, #0
 802560a:	f340 834f 	ble.w	8025cac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802560e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025610:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025614:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025618:	1e48      	subs	r0, r1, #1
 802561a:	1e57      	subs	r7, r2, #1
 802561c:	9b07      	ldr	r3, [sp, #28]
 802561e:	2b00      	cmp	r3, #0
 8025620:	f340 8178 	ble.w	8025914 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025624:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025626:	142b      	asrs	r3, r5, #16
 8025628:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802562c:	d406      	bmi.n	802563c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802562e:	4584      	cmp	ip, r0
 8025630:	da04      	bge.n	802563c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025632:	2b00      	cmp	r3, #0
 8025634:	db02      	blt.n	802563c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025636:	42bb      	cmp	r3, r7
 8025638:	f2c0 816d 	blt.w	8025916 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802563c:	f11c 0c01 	adds.w	ip, ip, #1
 8025640:	f100 815b 	bmi.w	80258fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025644:	4561      	cmp	r1, ip
 8025646:	f2c0 8158 	blt.w	80258fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802564a:	3301      	adds	r3, #1
 802564c:	f100 8155 	bmi.w	80258fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025650:	429a      	cmp	r2, r3
 8025652:	f2c0 8152 	blt.w	80258fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025656:	9b07      	ldr	r3, [sp, #28]
 8025658:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802565a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802565c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802565e:	2b00      	cmp	r3, #0
 8025660:	f340 8178 	ble.w	8025954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025664:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025666:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802566a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802566e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025672:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025674:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025678:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802567a:	141b      	asrs	r3, r3, #16
 802567c:	f100 81ba 	bmi.w	80259f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025680:	f101 38ff 	add.w	r8, r1, #4294967295
 8025684:	4543      	cmp	r3, r8
 8025686:	f280 81b5 	bge.w	80259f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802568a:	f1bc 0f00 	cmp.w	ip, #0
 802568e:	f2c0 81b1 	blt.w	80259f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025692:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025696:	45c4      	cmp	ip, r8
 8025698:	f280 81ac 	bge.w	80259f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802569c:	b209      	sxth	r1, r1
 802569e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80256a0:	fb0c 3301 	mla	r3, ip, r1, r3
 80256a4:	eb04 0803 	add.w	r8, r4, r3
 80256a8:	5ce3      	ldrb	r3, [r4, r3]
 80256aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80256ae:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80256b2:	2a00      	cmp	r2, #0
 80256b4:	f000 8193 	beq.w	80259de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80256b8:	f898 c001 	ldrb.w	ip, [r8, #1]
 80256bc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80256c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80256c2:	0e24      	lsrs	r4, r4, #24
 80256c4:	9412      	str	r4, [sp, #72]	@ 0x48
 80256c6:	b178      	cbz	r0, 80256e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80256c8:	eb08 0c01 	add.w	ip, r8, r1
 80256cc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80256d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80256d4:	9108      	str	r1, [sp, #32]
 80256d6:	0e09      	lsrs	r1, r1, #24
 80256d8:	9110      	str	r1, [sp, #64]	@ 0x40
 80256da:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80256de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80256e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80256e4:	0e09      	lsrs	r1, r1, #24
 80256e6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80256e8:	b292      	uxth	r2, r2
 80256ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80256ec:	b280      	uxth	r0, r0
 80256ee:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80256f0:	fb02 f900 	mul.w	r9, r2, r0
 80256f4:	0112      	lsls	r2, r2, #4
 80256f6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80256fa:	eba2 0809 	sub.w	r8, r2, r9
 80256fe:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025702:	b280      	uxth	r0, r0
 8025704:	fa1f f888 	uxth.w	r8, r8
 8025708:	1a12      	subs	r2, r2, r0
 802570a:	fb08 f101 	mul.w	r1, r8, r1
 802570e:	b292      	uxth	r2, r2
 8025710:	fb02 110e 	mla	r1, r2, lr, r1
 8025714:	fb00 1104 	mla	r1, r0, r4, r1
 8025718:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802571a:	fb09 1104 	mla	r1, r9, r4, r1
 802571e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025722:	2900      	cmp	r1, #0
 8025724:	f000 80de 	beq.w	80258e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025728:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802572c:	d01b      	beq.n	8025766 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802572e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025732:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025736:	fb0e fa0a 	mul.w	sl, lr, sl
 802573a:	fb0e fe03 	mul.w	lr, lr, r3
 802573e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025742:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025746:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802574a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802574e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025752:	4453      	add	r3, sl
 8025754:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025758:	0a1b      	lsrs	r3, r3, #8
 802575a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802575e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025762:	ea43 030c 	orr.w	r3, r3, ip
 8025766:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025768:	2cff      	cmp	r4, #255	@ 0xff
 802576a:	d021      	beq.n	80257b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802576c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802576e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025772:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025774:	fb04 fb0b 	mul.w	fp, r4, fp
 8025778:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802577a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802577e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025780:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025784:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025788:	fb04 fa0a 	mul.w	sl, r4, sl
 802578c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025790:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025794:	44de      	add	lr, fp
 8025796:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802579a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802579e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80257a6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80257aa:	ea4e 040a 	orr.w	r4, lr, sl
 80257ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80257b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80257b2:	2cff      	cmp	r4, #255	@ 0xff
 80257b4:	d021      	beq.n	80257fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80257b6:	9c08      	ldr	r4, [sp, #32]
 80257b8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80257bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80257be:	fb04 fb0b 	mul.w	fp, r4, fp
 80257c2:	9c08      	ldr	r4, [sp, #32]
 80257c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80257c8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80257ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80257ce:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80257d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80257d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80257da:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80257de:	44de      	add	lr, fp
 80257e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80257e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80257f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80257f4:	ea4e 040a 	orr.w	r4, lr, sl
 80257f8:	9408      	str	r4, [sp, #32]
 80257fa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80257fc:	2cff      	cmp	r4, #255	@ 0xff
 80257fe:	d021      	beq.n	8025844 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025800:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025802:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025806:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025808:	fb04 fb0b 	mul.w	fp, r4, fp
 802580c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802580e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025812:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025814:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025818:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802581c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025820:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025824:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025828:	44de      	add	lr, fp
 802582a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802582e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025832:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025836:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802583a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802583e:	ea4e 040a 	orr.w	r4, lr, sl
 8025842:	940c      	str	r4, [sp, #48]	@ 0x30
 8025844:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025846:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802584a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802584e:	43c9      	mvns	r1, r1
 8025850:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025854:	9c08      	ldr	r4, [sp, #32]
 8025856:	b2c9      	uxtb	r1, r1
 8025858:	fb08 fc0c 	mul.w	ip, r8, ip
 802585c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025860:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025864:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025866:	fb00 cc0e 	mla	ip, r0, lr, ip
 802586a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802586e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025870:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025874:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025878:	fb08 f80e 	mul.w	r8, r8, lr
 802587c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025880:	fb02 8303 	mla	r3, r2, r3, r8
 8025884:	9a08      	ldr	r2, [sp, #32]
 8025886:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802588a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802588e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025890:	fb00 330a 	mla	r3, r0, sl, r3
 8025894:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8025898:	fb09 3900 	mla	r9, r9, r0, r3
 802589c:	783b      	ldrb	r3, [r7, #0]
 802589e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80258a2:	fb03 f201 	mul.w	r2, r3, r1
 80258a6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80258aa:	1c53      	adds	r3, r2, #1
 80258ac:	ea4c 0c09 	orr.w	ip, ip, r9
 80258b0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80258b4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80258b8:	703b      	strb	r3, [r7, #0]
 80258ba:	787b      	ldrb	r3, [r7, #1]
 80258bc:	434b      	muls	r3, r1
 80258be:	1c5a      	adds	r2, r3, #1
 80258c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80258c4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80258c8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80258cc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80258d0:	707b      	strb	r3, [r7, #1]
 80258d2:	78bb      	ldrb	r3, [r7, #2]
 80258d4:	4359      	muls	r1, r3
 80258d6:	1c4b      	adds	r3, r1, #1
 80258d8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80258dc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80258e0:	f887 c002 	strb.w	ip, [r7, #2]
 80258e4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80258e6:	3703      	adds	r7, #3
 80258e8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80258ea:	441a      	add	r2, r3
 80258ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80258ee:	441d      	add	r5, r3
 80258f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80258f2:	9225      	str	r2, [sp, #148]	@ 0x94
 80258f4:	3b01      	subs	r3, #1
 80258f6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80258f8:	e6b0      	b.n	802565c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80258fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80258fc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80258fe:	441c      	add	r4, r3
 8025900:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025902:	441d      	add	r5, r3
 8025904:	9b07      	ldr	r3, [sp, #28]
 8025906:	9425      	str	r4, [sp, #148]	@ 0x94
 8025908:	3b01      	subs	r3, #1
 802590a:	9307      	str	r3, [sp, #28]
 802590c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802590e:	3303      	adds	r3, #3
 8025910:	930a      	str	r3, [sp, #40]	@ 0x28
 8025912:	e683      	b.n	802561c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025914:	d026      	beq.n	8025964 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8025916:	9b07      	ldr	r3, [sp, #28]
 8025918:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802591a:	3b01      	subs	r3, #1
 802591c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802591e:	fb00 4003 	mla	r0, r0, r3, r4
 8025922:	1400      	asrs	r0, r0, #16
 8025924:	f53f ae97 	bmi.w	8025656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025928:	3901      	subs	r1, #1
 802592a:	4288      	cmp	r0, r1
 802592c:	f6bf ae93 	bge.w	8025656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025930:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8025932:	fb01 5303 	mla	r3, r1, r3, r5
 8025936:	141b      	asrs	r3, r3, #16
 8025938:	f53f ae8d 	bmi.w	8025656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802593c:	3a01      	subs	r2, #1
 802593e:	4293      	cmp	r3, r2
 8025940:	f6bf ae89 	bge.w	8025656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025946:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802594a:	f103 0e03 	add.w	lr, r3, #3
 802594e:	f1bb 0f00 	cmp.w	fp, #0
 8025952:	dc6d      	bgt.n	8025a30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8025954:	9b07      	ldr	r3, [sp, #28]
 8025956:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802595a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802595c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025960:	4423      	add	r3, r4
 8025962:	930a      	str	r3, [sp, #40]	@ 0x28
 8025964:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025966:	2b00      	cmp	r3, #0
 8025968:	f340 81a0 	ble.w	8025cac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802596c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025970:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025972:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025976:	eeb0 6a62 	vmov.f32	s12, s5
 802597a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802597e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025982:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025986:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 802598a:	eeb0 6a43 	vmov.f32	s12, s6
 802598e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025992:	ee16 5a10 	vmov	r5, s12
 8025996:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802599a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802599e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80259a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80259a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80259aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80259ae:	ee12 2a90 	vmov	r2, s5
 80259b2:	eef0 2a47 	vmov.f32	s5, s14
 80259b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80259ba:	ee13 2a10 	vmov	r2, s6
 80259be:	9327      	str	r3, [sp, #156]	@ 0x9c
 80259c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80259c2:	eeb0 3a67 	vmov.f32	s6, s15
 80259c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80259ca:	9328      	str	r3, [sp, #160]	@ 0xa0
 80259cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80259ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80259d0:	3b01      	subs	r3, #1
 80259d2:	9316      	str	r3, [sp, #88]	@ 0x58
 80259d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80259d6:	bf08      	it	eq
 80259d8:	4613      	moveq	r3, r2
 80259da:	9307      	str	r3, [sp, #28]
 80259dc:	e610      	b.n	8025600 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80259de:	2800      	cmp	r0, #0
 80259e0:	f43f ae82 	beq.w	80256e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80259e4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80259e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80259ec:	9108      	str	r1, [sp, #32]
 80259ee:	0e09      	lsrs	r1, r1, #24
 80259f0:	9110      	str	r1, [sp, #64]	@ 0x40
 80259f2:	e679      	b.n	80256e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80259f4:	f113 0801 	adds.w	r8, r3, #1
 80259f8:	f53f af74 	bmi.w	80258e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80259fc:	4541      	cmp	r1, r8
 80259fe:	f6ff af71 	blt.w	80258e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a02:	f11c 0801 	adds.w	r8, ip, #1
 8025a06:	f53f af6d 	bmi.w	80258e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a0a:	45c6      	cmp	lr, r8
 8025a0c:	f6ff af6a 	blt.w	80258e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a10:	b209      	sxth	r1, r1
 8025a12:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025a16:	fa0f f38e 	sxth.w	r3, lr
 8025a1a:	9100      	str	r1, [sp, #0]
 8025a1c:	4639      	mov	r1, r7
 8025a1e:	9301      	str	r3, [sp, #4]
 8025a20:	4633      	mov	r3, r6
 8025a22:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8025a26:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025a28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8025a2a:	f7ff fca3 	bl	8025374 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8025a2e:	e759      	b.n	80258e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a30:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025a32:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025a36:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025a38:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025a3c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025a3e:	1427      	asrs	r7, r4, #16
 8025a40:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025a42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a46:	142b      	asrs	r3, r5, #16
 8025a48:	fb01 7303 	mla	r3, r1, r3, r7
 8025a4c:	18e7      	adds	r7, r4, r3
 8025a4e:	5ce3      	ldrb	r3, [r4, r3]
 8025a50:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025a54:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025a58:	2a00      	cmp	r2, #0
 8025a5a:	f000 811d 	beq.w	8025c98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8025a5e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025a62:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8025a66:	940d      	str	r4, [sp, #52]	@ 0x34
 8025a68:	0e24      	lsrs	r4, r4, #24
 8025a6a:	9414      	str	r4, [sp, #80]	@ 0x50
 8025a6c:	b170      	cbz	r0, 8025a8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025a6e:	eb07 0801 	add.w	r8, r7, r1
 8025a72:	5c79      	ldrb	r1, [r7, r1]
 8025a74:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025a78:	9109      	str	r1, [sp, #36]	@ 0x24
 8025a7a:	0e09      	lsrs	r1, r1, #24
 8025a7c:	9111      	str	r1, [sp, #68]	@ 0x44
 8025a7e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025a82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025a86:	910e      	str	r1, [sp, #56]	@ 0x38
 8025a88:	0e09      	lsrs	r1, r1, #24
 8025a8a:	9115      	str	r1, [sp, #84]	@ 0x54
 8025a8c:	b292      	uxth	r2, r2
 8025a8e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025a90:	b280      	uxth	r0, r0
 8025a92:	fb02 f900 	mul.w	r9, r2, r0
 8025a96:	0112      	lsls	r2, r2, #4
 8025a98:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025a9c:	eba2 0809 	sub.w	r8, r2, r9
 8025aa0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8025aa4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025aa6:	b280      	uxth	r0, r0
 8025aa8:	fa1f f888 	uxth.w	r8, r8
 8025aac:	1a09      	subs	r1, r1, r0
 8025aae:	fb08 f202 	mul.w	r2, r8, r2
 8025ab2:	b289      	uxth	r1, r1
 8025ab4:	fb01 220c 	mla	r2, r1, ip, r2
 8025ab8:	fb00 2204 	mla	r2, r0, r4, r2
 8025abc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025abe:	fb09 2204 	mla	r2, r9, r4, r2
 8025ac2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025ac6:	2a00      	cmp	r2, #0
 8025ac8:	f000 80db 	beq.w	8025c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8025acc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025ad0:	d019      	beq.n	8025b06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8025ad2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025ad6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025ada:	fb0c fa0a 	mul.w	sl, ip, sl
 8025ade:	fb0c fc03 	mul.w	ip, ip, r3
 8025ae2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025ae6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025aea:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025aee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025af2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025af6:	4453      	add	r3, sl
 8025af8:	0a3f      	lsrs	r7, r7, #8
 8025afa:	0a1b      	lsrs	r3, r3, #8
 8025afc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025b00:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025b04:	433b      	orrs	r3, r7
 8025b06:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b08:	2cff      	cmp	r4, #255	@ 0xff
 8025b0a:	d020      	beq.n	8025b4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8025b0c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025b0e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025b12:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b14:	4367      	muls	r7, r4
 8025b16:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025b18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b1c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025b20:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b22:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025b26:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b2a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b2e:	44bc      	add	ip, r7
 8025b30:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025b34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025b3c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b44:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025b48:	ea4c 040a 	orr.w	r4, ip, sl
 8025b4c:	940d      	str	r4, [sp, #52]	@ 0x34
 8025b4e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025b50:	2cff      	cmp	r4, #255	@ 0xff
 8025b52:	d020      	beq.n	8025b96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8025b54:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025b56:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025b5a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025b5c:	4367      	muls	r7, r4
 8025b5e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025b60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b64:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025b68:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025b6a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025b6e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b72:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b76:	44bc      	add	ip, r7
 8025b78:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025b7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025b84:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b8c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025b90:	ea4c 040a 	orr.w	r4, ip, sl
 8025b94:	9409      	str	r4, [sp, #36]	@ 0x24
 8025b96:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025b98:	2cff      	cmp	r4, #255	@ 0xff
 8025b9a:	d020      	beq.n	8025bde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8025b9c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025b9e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025ba2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025ba4:	4367      	muls	r7, r4
 8025ba6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025ba8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025bac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025bb0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025bb2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025bb6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025bba:	fb04 fa0a 	mul.w	sl, r4, sl
 8025bbe:	44bc      	add	ip, r7
 8025bc0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025bc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025bc8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025bcc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025bd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025bd4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025bd8:	ea4c 040a 	orr.w	r4, ip, sl
 8025bdc:	940e      	str	r4, [sp, #56]	@ 0x38
 8025bde:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025be0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025be4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025be8:	43d2      	mvns	r2, r2
 8025bea:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025bee:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025bf0:	b2d2      	uxtb	r2, r2
 8025bf2:	fb08 f707 	mul.w	r7, r8, r7
 8025bf6:	fb01 770c 	mla	r7, r1, ip, r7
 8025bfa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025bfe:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025c00:	fb00 770c 	mla	r7, r0, ip, r7
 8025c04:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025c08:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025c0a:	fb09 770c 	mla	r7, r9, ip, r7
 8025c0e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025c12:	fb08 f80c 	mul.w	r8, r8, ip
 8025c16:	0a3f      	lsrs	r7, r7, #8
 8025c18:	fb01 8303 	mla	r3, r1, r3, r8
 8025c1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025c1e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025c22:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8025c26:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025c28:	fb00 330a 	mla	r3, r0, sl, r3
 8025c2c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8025c30:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025c34:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025c38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c3c:	fb03 f102 	mul.w	r1, r3, r2
 8025c40:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025c44:	1c4b      	adds	r3, r1, #1
 8025c46:	ea47 070c 	orr.w	r7, r7, ip
 8025c4a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025c4e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8025c52:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025c56:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8025c5a:	4353      	muls	r3, r2
 8025c5c:	1c59      	adds	r1, r3, #1
 8025c5e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025c62:	0a3b      	lsrs	r3, r7, #8
 8025c64:	0c3f      	lsrs	r7, r7, #16
 8025c66:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025c6a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025c6e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025c72:	435a      	muls	r2, r3
 8025c74:	1c53      	adds	r3, r2, #1
 8025c76:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025c7a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025c7e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025c82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025c84:	f10e 0e03 	add.w	lr, lr, #3
 8025c88:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8025c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025c8e:	441a      	add	r2, r3
 8025c90:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025c92:	9225      	str	r2, [sp, #148]	@ 0x94
 8025c94:	441d      	add	r5, r3
 8025c96:	e65a      	b.n	802594e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025c98:	2800      	cmp	r0, #0
 8025c9a:	f43f aef7 	beq.w	8025a8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025c9e:	5c79      	ldrb	r1, [r7, r1]
 8025ca0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025ca4:	9109      	str	r1, [sp, #36]	@ 0x24
 8025ca6:	0e09      	lsrs	r1, r1, #24
 8025ca8:	9111      	str	r1, [sp, #68]	@ 0x44
 8025caa:	e6ef      	b.n	8025a8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025cac:	b01b      	add	sp, #108	@ 0x6c
 8025cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025cb2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8025cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cb6:	b08d      	sub	sp, #52	@ 0x34
 8025cb8:	468b      	mov	fp, r1
 8025cba:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8025cbe:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8025cc2:	fb0c 5703 	mla	r7, ip, r3, r5
 8025cc6:	f1bc 0f00 	cmp.w	ip, #0
 8025cca:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025ccc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025cd0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8025cd4:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8025cd8:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8025cdc:	eb02 0607 	add.w	r6, r2, r7
 8025ce0:	f89b 4000 	ldrb.w	r4, [fp]
 8025ce4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8025ce8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8025cec:	f2c0 80c1 	blt.w	8025e72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025cf0:	45e6      	cmp	lr, ip
 8025cf2:	f340 80be 	ble.w	8025e72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025cf6:	2d00      	cmp	r5, #0
 8025cf8:	f2c0 80b7 	blt.w	8025e6a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025cfc:	42ab      	cmp	r3, r5
 8025cfe:	f340 80b4 	ble.w	8025e6a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025d02:	5dd2      	ldrb	r2, [r2, r7]
 8025d04:	9205      	str	r2, [sp, #20]
 8025d06:	7872      	ldrb	r2, [r6, #1]
 8025d08:	9206      	str	r2, [sp, #24]
 8025d0a:	78b2      	ldrb	r2, [r6, #2]
 8025d0c:	9207      	str	r2, [sp, #28]
 8025d0e:	1c6a      	adds	r2, r5, #1
 8025d10:	f100 80b6 	bmi.w	8025e80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d14:	4293      	cmp	r3, r2
 8025d16:	f340 80b3 	ble.w	8025e80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d1a:	f1b8 0f00 	cmp.w	r8, #0
 8025d1e:	f000 80af 	beq.w	8025e80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d22:	78f2      	ldrb	r2, [r6, #3]
 8025d24:	9201      	str	r2, [sp, #4]
 8025d26:	7932      	ldrb	r2, [r6, #4]
 8025d28:	9202      	str	r2, [sp, #8]
 8025d2a:	7972      	ldrb	r2, [r6, #5]
 8025d2c:	9203      	str	r2, [sp, #12]
 8025d2e:	f11c 0c01 	adds.w	ip, ip, #1
 8025d32:	f100 80ad 	bmi.w	8025e90 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025d36:	45e6      	cmp	lr, ip
 8025d38:	f340 80aa 	ble.w	8025e90 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025d3c:	f1ba 0f00 	cmp.w	sl, #0
 8025d40:	f000 80a6 	beq.w	8025e90 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025d44:	2d00      	cmp	r5, #0
 8025d46:	f2c0 809f 	blt.w	8025e88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025d4a:	42ab      	cmp	r3, r5
 8025d4c:	f340 809c 	ble.w	8025e88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025d50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8025d54:	f816 9002 	ldrb.w	r9, [r6, r2]
 8025d58:	2203      	movs	r2, #3
 8025d5a:	fb03 6c02 	mla	ip, r3, r2, r6
 8025d5e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025d62:	f89c e002 	ldrb.w	lr, [ip, #2]
 8025d66:	9704      	str	r7, [sp, #16]
 8025d68:	3501      	adds	r5, #1
 8025d6a:	f100 8098 	bmi.w	8025e9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025d6e:	42ab      	cmp	r3, r5
 8025d70:	f340 8095 	ble.w	8025e9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025d74:	f1b8 0f00 	cmp.w	r8, #0
 8025d78:	f000 8091 	beq.w	8025e9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025d7c:	f04f 0c03 	mov.w	ip, #3
 8025d80:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8025d84:	5cb5      	ldrb	r5, [r6, r2]
 8025d86:	fb03 620c 	mla	r2, r3, ip, r6
 8025d8a:	fb03 630c 	mla	r3, r3, ip, r6
 8025d8e:	7912      	ldrb	r2, [r2, #4]
 8025d90:	795e      	ldrb	r6, [r3, #5]
 8025d92:	fa1f f388 	uxth.w	r3, r8
 8025d96:	fa1f fc8a 	uxth.w	ip, sl
 8025d9a:	fb03 f70c 	mul.w	r7, r3, ip
 8025d9e:	011b      	lsls	r3, r3, #4
 8025da0:	9708      	str	r7, [sp, #32]
 8025da2:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8025da6:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8025daa:	1bdb      	subs	r3, r3, r7
 8025dac:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8025db0:	fa1f fc8c 	uxth.w	ip, ip
 8025db4:	b29b      	uxth	r3, r3
 8025db6:	9709      	str	r7, [sp, #36]	@ 0x24
 8025db8:	ebaa 0a0c 	sub.w	sl, sl, ip
 8025dbc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8025dc0:	fa1f fa8a 	uxth.w	sl, sl
 8025dc4:	ea6f 0807 	mvn.w	r8, r7
 8025dc8:	9f01      	ldr	r7, [sp, #4]
 8025dca:	435f      	muls	r7, r3
 8025dcc:	9b05      	ldr	r3, [sp, #20]
 8025dce:	fa5f f888 	uxtb.w	r8, r8
 8025dd2:	fb0a 7703 	mla	r7, sl, r3, r7
 8025dd6:	9b08      	ldr	r3, [sp, #32]
 8025dd8:	fb14 f408 	smulbb	r4, r4, r8
 8025ddc:	fb0c 7709 	mla	r7, ip, r9, r7
 8025de0:	fb10 f008 	smulbb	r0, r0, r8
 8025de4:	fb11 f108 	smulbb	r1, r1, r8
 8025de8:	fb03 7705 	mla	r7, r3, r5, r7
 8025dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025dee:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025df2:	fb07 4703 	mla	r7, r7, r3, r4
 8025df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025df8:	b2bf      	uxth	r7, r7
 8025dfa:	1c7c      	adds	r4, r7, #1
 8025dfc:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8025e00:	1224      	asrs	r4, r4, #8
 8025e02:	f88b 4000 	strb.w	r4, [fp]
 8025e06:	9c02      	ldr	r4, [sp, #8]
 8025e08:	435c      	muls	r4, r3
 8025e0a:	9b06      	ldr	r3, [sp, #24]
 8025e0c:	fb0a 4403 	mla	r4, sl, r3, r4
 8025e10:	9b04      	ldr	r3, [sp, #16]
 8025e12:	fb0c 4403 	mla	r4, ip, r3, r4
 8025e16:	9b08      	ldr	r3, [sp, #32]
 8025e18:	fb03 4402 	mla	r4, r3, r2, r4
 8025e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025e20:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025e24:	fb04 0403 	mla	r4, r4, r3, r0
 8025e28:	9b03      	ldr	r3, [sp, #12]
 8025e2a:	435a      	muls	r2, r3
 8025e2c:	b2a4      	uxth	r4, r4
 8025e2e:	4613      	mov	r3, r2
 8025e30:	9a07      	ldr	r2, [sp, #28]
 8025e32:	1c60      	adds	r0, r4, #1
 8025e34:	fb0a 3a02 	mla	sl, sl, r2, r3
 8025e38:	9b08      	ldr	r3, [sp, #32]
 8025e3a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025e3e:	fb0c ac0e 	mla	ip, ip, lr, sl
 8025e42:	1224      	asrs	r4, r4, #8
 8025e44:	fb03 c606 	mla	r6, r3, r6, ip
 8025e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e4a:	f88b 4001 	strb.w	r4, [fp, #1]
 8025e4e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025e52:	fb06 1103 	mla	r1, r6, r3, r1
 8025e56:	b289      	uxth	r1, r1
 8025e58:	1c4e      	adds	r6, r1, #1
 8025e5a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8025e5e:	1209      	asrs	r1, r1, #8
 8025e60:	f88b 1002 	strb.w	r1, [fp, #2]
 8025e64:	b00d      	add	sp, #52	@ 0x34
 8025e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025e6e:	9405      	str	r4, [sp, #20]
 8025e70:	e74d      	b.n	8025d0e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8025e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025e76:	9401      	str	r4, [sp, #4]
 8025e78:	9405      	str	r4, [sp, #20]
 8025e7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025e7e:	e756      	b.n	8025d2e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025e84:	9401      	str	r4, [sp, #4]
 8025e86:	e752      	b.n	8025d2e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025e88:	468e      	mov	lr, r1
 8025e8a:	9004      	str	r0, [sp, #16]
 8025e8c:	46a1      	mov	r9, r4
 8025e8e:	e76b      	b.n	8025d68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8025e90:	460e      	mov	r6, r1
 8025e92:	4602      	mov	r2, r0
 8025e94:	4625      	mov	r5, r4
 8025e96:	468e      	mov	lr, r1
 8025e98:	9004      	str	r0, [sp, #16]
 8025e9a:	46a1      	mov	r9, r4
 8025e9c:	e779      	b.n	8025d92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8025e9e:	460e      	mov	r6, r1
 8025ea0:	4602      	mov	r2, r0
 8025ea2:	4625      	mov	r5, r4
 8025ea4:	e775      	b.n	8025d92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08025ea6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025eaa:	b09f      	sub	sp, #124	@ 0x7c
 8025eac:	920e      	str	r2, [sp, #56]	@ 0x38
 8025eae:	9307      	str	r3, [sp, #28]
 8025eb0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8025eb2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8025eb6:	901d      	str	r0, [sp, #116]	@ 0x74
 8025eb8:	930c      	str	r3, [sp, #48]	@ 0x30
 8025eba:	6850      	ldr	r0, [r2, #4]
 8025ebc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025ebe:	6812      	ldr	r2, [r2, #0]
 8025ec0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8025ec4:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8025ec8:	fb00 1303 	mla	r3, r0, r3, r1
 8025ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025ed0:	18d3      	adds	r3, r2, r3
 8025ed2:	9308      	str	r3, [sp, #32]
 8025ed4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025ed6:	681b      	ldr	r3, [r3, #0]
 8025ed8:	930a      	str	r3, [sp, #40]	@ 0x28
 8025eda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025edc:	43db      	mvns	r3, r3
 8025ede:	b2db      	uxtb	r3, r3
 8025ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8025ee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025ee4:	2b00      	cmp	r3, #0
 8025ee6:	dc03      	bgt.n	8025ef0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025ee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025eea:	2b00      	cmp	r3, #0
 8025eec:	f340 81f5 	ble.w	80262da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025ef0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025ef2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025ef6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025efa:	1e48      	subs	r0, r1, #1
 8025efc:	1e54      	subs	r4, r2, #1
 8025efe:	9b07      	ldr	r3, [sp, #28]
 8025f00:	2b00      	cmp	r3, #0
 8025f02:	f340 80d5 	ble.w	80260b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025f06:	ea5f 452a 	movs.w	r5, sl, asr #16
 8025f0a:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025f0e:	d406      	bmi.n	8025f1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f10:	4285      	cmp	r5, r0
 8025f12:	da04      	bge.n	8025f1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f14:	2b00      	cmp	r3, #0
 8025f16:	db02      	blt.n	8025f1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f18:	42a3      	cmp	r3, r4
 8025f1a:	f2c0 80ca 	blt.w	80260b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025f1e:	3501      	adds	r5, #1
 8025f20:	f100 80bb 	bmi.w	802609a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f24:	42a9      	cmp	r1, r5
 8025f26:	f2c0 80b8 	blt.w	802609a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f2a:	3301      	adds	r3, #1
 8025f2c:	f100 80b5 	bmi.w	802609a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f30:	429a      	cmp	r2, r3
 8025f32:	f2c0 80b2 	blt.w	802609a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f36:	9b07      	ldr	r3, [sp, #28]
 8025f38:	9d08      	ldr	r5, [sp, #32]
 8025f3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8025f3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025f3e:	2b00      	cmp	r3, #0
 8025f40:	f340 80d6 	ble.w	80260f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8025f44:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8025f46:	ea4f 4428 	mov.w	r4, r8, asr #16
 8025f4a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025f4c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8025f50:	68c6      	ldr	r6, [r0, #12]
 8025f52:	ea5f 402a 	movs.w	r0, sl, asr #16
 8025f56:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8025f5a:	689b      	ldr	r3, [r3, #8]
 8025f5c:	f100 810f 	bmi.w	802617e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025f60:	1e5f      	subs	r7, r3, #1
 8025f62:	42b8      	cmp	r0, r7
 8025f64:	f280 810b 	bge.w	802617e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025f68:	2c00      	cmp	r4, #0
 8025f6a:	f2c0 8108 	blt.w	802617e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025f6e:	1e77      	subs	r7, r6, #1
 8025f70:	42bc      	cmp	r4, r7
 8025f72:	f280 8104 	bge.w	802617e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025f76:	b21b      	sxth	r3, r3
 8025f78:	fb04 0003 	mla	r0, r4, r3, r0
 8025f7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025f7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025f82:	1826      	adds	r6, r4, r0
 8025f84:	5c24      	ldrb	r4, [r4, r0]
 8025f86:	78b7      	ldrb	r7, [r6, #2]
 8025f88:	7870      	ldrb	r0, [r6, #1]
 8025f8a:	970f      	str	r7, [sp, #60]	@ 0x3c
 8025f8c:	7977      	ldrb	r7, [r6, #5]
 8025f8e:	f896 e003 	ldrb.w	lr, [r6, #3]
 8025f92:	f896 c004 	ldrb.w	ip, [r6, #4]
 8025f96:	9710      	str	r7, [sp, #64]	@ 0x40
 8025f98:	b1c9      	cbz	r1, 8025fce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025f9a:	f04f 0b03 	mov.w	fp, #3
 8025f9e:	f06f 0904 	mvn.w	r9, #4
 8025fa2:	3605      	adds	r6, #5
 8025fa4:	fb13 930b 	smlabb	r3, r3, fp, r9
 8025fa8:	eb06 0b03 	add.w	fp, r6, r3
 8025fac:	5cf3      	ldrb	r3, [r6, r3]
 8025fae:	9311      	str	r3, [sp, #68]	@ 0x44
 8025fb0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8025fb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025fb6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8025fba:	9315      	str	r3, [sp, #84]	@ 0x54
 8025fbc:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8025fc0:	9312      	str	r3, [sp, #72]	@ 0x48
 8025fc2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8025fc6:	9314      	str	r3, [sp, #80]	@ 0x50
 8025fc8:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8025fcc:	9316      	str	r3, [sp, #88]	@ 0x58
 8025fce:	b292      	uxth	r2, r2
 8025fd0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8025fd2:	b289      	uxth	r1, r1
 8025fd4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8025fd8:	fb02 f601 	mul.w	r6, r2, r1
 8025fdc:	0112      	lsls	r2, r2, #4
 8025fde:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8025fe2:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8025fe6:	1b92      	subs	r2, r2, r6
 8025fe8:	b289      	uxth	r1, r1
 8025fea:	b292      	uxth	r2, r2
 8025fec:	eba9 0901 	sub.w	r9, r9, r1
 8025ff0:	fb02 fe0e 	mul.w	lr, r2, lr
 8025ff4:	fa1f f989 	uxth.w	r9, r9
 8025ff8:	fb02 fc0c 	mul.w	ip, r2, ip
 8025ffc:	fb09 e404 	mla	r4, r9, r4, lr
 8026000:	f895 e000 	ldrb.w	lr, [r5]
 8026004:	fb09 c000 	mla	r0, r9, r0, ip
 8026008:	fb01 4407 	mla	r4, r1, r7, r4
 802600c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802600e:	fb06 4407 	mla	r4, r6, r7, r4
 8026012:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026014:	fb1e fe07 	smulbb	lr, lr, r7
 8026018:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802601c:	fb04 e403 	mla	r4, r4, r3, lr
 8026020:	b2a4      	uxth	r4, r4
 8026022:	f104 0e01 	add.w	lr, r4, #1
 8026026:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802602a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802602c:	fb01 0004 	mla	r0, r1, r4, r0
 8026030:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026032:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026036:	fb06 0004 	mla	r0, r6, r4, r0
 802603a:	786c      	ldrb	r4, [r5, #1]
 802603c:	f885 e000 	strb.w	lr, [r5]
 8026040:	fb14 f407 	smulbb	r4, r4, r7
 8026044:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026048:	fb00 4003 	mla	r0, r0, r3, r4
 802604c:	b280      	uxth	r0, r0
 802604e:	1c44      	adds	r4, r0, #1
 8026050:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8026054:	1200      	asrs	r0, r0, #8
 8026056:	7068      	strb	r0, [r5, #1]
 8026058:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802605a:	4342      	muls	r2, r0
 802605c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802605e:	fb09 2200 	mla	r2, r9, r0, r2
 8026062:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026064:	fb01 2100 	mla	r1, r1, r0, r2
 8026068:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802606a:	fb06 1602 	mla	r6, r6, r2, r1
 802606e:	78a9      	ldrb	r1, [r5, #2]
 8026070:	fb11 f107 	smulbb	r1, r1, r7
 8026074:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026078:	fb06 1303 	mla	r3, r6, r3, r1
 802607c:	b29b      	uxth	r3, r3
 802607e:	1c5e      	adds	r6, r3, #1
 8026080:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8026084:	121b      	asrs	r3, r3, #8
 8026086:	70ab      	strb	r3, [r5, #2]
 8026088:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802608a:	3503      	adds	r5, #3
 802608c:	449a      	add	sl, r3
 802608e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026090:	4498      	add	r8, r3
 8026092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026094:	3b01      	subs	r3, #1
 8026096:	930d      	str	r3, [sp, #52]	@ 0x34
 8026098:	e750      	b.n	8025f3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802609a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802609c:	449a      	add	sl, r3
 802609e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80260a0:	4498      	add	r8, r3
 80260a2:	9b07      	ldr	r3, [sp, #28]
 80260a4:	3b01      	subs	r3, #1
 80260a6:	9307      	str	r3, [sp, #28]
 80260a8:	9b08      	ldr	r3, [sp, #32]
 80260aa:	3303      	adds	r3, #3
 80260ac:	9308      	str	r3, [sp, #32]
 80260ae:	e726      	b.n	8025efe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80260b0:	d026      	beq.n	8026100 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80260b2:	9b07      	ldr	r3, [sp, #28]
 80260b4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80260b6:	3b01      	subs	r3, #1
 80260b8:	fb00 a003 	mla	r0, r0, r3, sl
 80260bc:	1400      	asrs	r0, r0, #16
 80260be:	f53f af3a 	bmi.w	8025f36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80260c2:	3901      	subs	r1, #1
 80260c4:	4288      	cmp	r0, r1
 80260c6:	f6bf af36 	bge.w	8025f36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80260ca:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80260cc:	fb01 8303 	mla	r3, r1, r3, r8
 80260d0:	141b      	asrs	r3, r3, #16
 80260d2:	f53f af30 	bmi.w	8025f36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80260d6:	3a01      	subs	r2, #1
 80260d8:	4293      	cmp	r3, r2
 80260da:	f6bf af2c 	bge.w	8025f36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80260de:	9b08      	ldr	r3, [sp, #32]
 80260e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80260e4:	1cdd      	adds	r5, r3, #3
 80260e6:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 80260ea:	f1bc 0f00 	cmp.w	ip, #0
 80260ee:	dc5f      	bgt.n	80261b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80260f0:	9b07      	ldr	r3, [sp, #28]
 80260f2:	9a08      	ldr	r2, [sp, #32]
 80260f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80260f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80260fc:	441a      	add	r2, r3
 80260fe:	9208      	str	r2, [sp, #32]
 8026100:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026102:	2b00      	cmp	r3, #0
 8026104:	f340 80e9 	ble.w	80262da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8026108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802610c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802610e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026112:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026116:	eef0 6a62 	vmov.f32	s13, s5
 802611a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802611e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026122:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026126:	ee16 aa90 	vmov	sl, s13
 802612a:	eef0 6a43 	vmov.f32	s13, s6
 802612e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026132:	ee16 8a90 	vmov	r8, s13
 8026136:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802613a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802613e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026142:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026146:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802614a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802614e:	ee12 2a90 	vmov	r2, s5
 8026152:	eef0 2a47 	vmov.f32	s5, s14
 8026156:	fb92 f3f3 	sdiv	r3, r2, r3
 802615a:	ee13 2a10 	vmov	r2, s6
 802615e:	932b      	str	r3, [sp, #172]	@ 0xac
 8026160:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026162:	eeb0 3a67 	vmov.f32	s6, s15
 8026166:	fb92 f3f3 	sdiv	r3, r2, r3
 802616a:	932c      	str	r3, [sp, #176]	@ 0xb0
 802616c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802616e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026170:	3b01      	subs	r3, #1
 8026172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026174:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026176:	bf08      	it	eq
 8026178:	4613      	moveq	r3, r2
 802617a:	9307      	str	r3, [sp, #28]
 802617c:	e6b1      	b.n	8025ee2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802617e:	1c47      	adds	r7, r0, #1
 8026180:	d482      	bmi.n	8026088 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026182:	42bb      	cmp	r3, r7
 8026184:	db80      	blt.n	8026088 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026186:	1c67      	adds	r7, r4, #1
 8026188:	f53f af7e 	bmi.w	8026088 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802618c:	42be      	cmp	r6, r7
 802618e:	f6ff af7b 	blt.w	8026088 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026192:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8026194:	b236      	sxth	r6, r6
 8026196:	9001      	str	r0, [sp, #4]
 8026198:	b21b      	sxth	r3, r3
 802619a:	9600      	str	r6, [sp, #0]
 802619c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802619e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80261a2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80261a6:	4629      	mov	r1, r5
 80261a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80261aa:	f7ff fd82 	bl	8025cb2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80261ae:	e76b      	b.n	8026088 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261b0:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 80261b2:	ea4f 402a 	mov.w	r0, sl, asr #16
 80261b6:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80261ba:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80261be:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80261c2:	ea4f 4128 	mov.w	r1, r8, asr #16
 80261c6:	fb07 0101 	mla	r1, r7, r1, r0
 80261ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80261cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80261d0:	1844      	adds	r4, r0, r1
 80261d2:	5c40      	ldrb	r0, [r0, r1]
 80261d4:	78a6      	ldrb	r6, [r4, #2]
 80261d6:	7861      	ldrb	r1, [r4, #1]
 80261d8:	960f      	str	r6, [sp, #60]	@ 0x3c
 80261da:	78e6      	ldrb	r6, [r4, #3]
 80261dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80261de:	9610      	str	r6, [sp, #64]	@ 0x40
 80261e0:	f894 9004 	ldrb.w	r9, [r4, #4]
 80261e4:	f894 b005 	ldrb.w	fp, [r4, #5]
 80261e8:	b192      	cbz	r2, 8026210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80261ea:	f06f 0604 	mvn.w	r6, #4
 80261ee:	2103      	movs	r1, #3
 80261f0:	3405      	adds	r4, #5
 80261f2:	fb17 6701 	smlabb	r7, r7, r1, r6
 80261f6:	19e6      	adds	r6, r4, r7
 80261f8:	5de4      	ldrb	r4, [r4, r7]
 80261fa:	9417      	str	r4, [sp, #92]	@ 0x5c
 80261fc:	7874      	ldrb	r4, [r6, #1]
 80261fe:	9419      	str	r4, [sp, #100]	@ 0x64
 8026200:	78b4      	ldrb	r4, [r6, #2]
 8026202:	941b      	str	r4, [sp, #108]	@ 0x6c
 8026204:	78f4      	ldrb	r4, [r6, #3]
 8026206:	9418      	str	r4, [sp, #96]	@ 0x60
 8026208:	7934      	ldrb	r4, [r6, #4]
 802620a:	941a      	str	r4, [sp, #104]	@ 0x68
 802620c:	7974      	ldrb	r4, [r6, #5]
 802620e:	941c      	str	r4, [sp, #112]	@ 0x70
 8026210:	b29b      	uxth	r3, r3
 8026212:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026214:	b292      	uxth	r2, r2
 8026216:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026218:	3503      	adds	r5, #3
 802621a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802621e:	fb03 f402 	mul.w	r4, r3, r2
 8026222:	011b      	lsls	r3, r3, #4
 8026224:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026228:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 802622c:	1b1b      	subs	r3, r3, r4
 802622e:	b292      	uxth	r2, r2
 8026230:	b29b      	uxth	r3, r3
 8026232:	1ab6      	subs	r6, r6, r2
 8026234:	435f      	muls	r7, r3
 8026236:	b2b6      	uxth	r6, r6
 8026238:	fb03 f909 	mul.w	r9, r3, r9
 802623c:	fb03 fb0b 	mul.w	fp, r3, fp
 8026240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026242:	fb06 7000 	mla	r0, r6, r0, r7
 8026246:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8026248:	fb06 bb03 	mla	fp, r6, r3, fp
 802624c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802624e:	fb02 0007 	mla	r0, r2, r7, r0
 8026252:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8026254:	fb02 bb03 	mla	fp, r2, r3, fp
 8026258:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802625a:	fb04 0007 	mla	r0, r4, r7, r0
 802625e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8026262:	fb17 f701 	smulbb	r7, r7, r1
 8026266:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802626a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802626c:	fb00 700e 	mla	r0, r0, lr, r7
 8026270:	fb06 9101 	mla	r1, r6, r1, r9
 8026274:	b280      	uxth	r0, r0
 8026276:	1c47      	adds	r7, r0, #1
 8026278:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802627c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802627e:	1200      	asrs	r0, r0, #8
 8026280:	f805 0c06 	strb.w	r0, [r5, #-6]
 8026284:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026286:	fb02 1100 	mla	r1, r2, r0, r1
 802628a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802628c:	fb04 1100 	mla	r1, r4, r0, r1
 8026290:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8026294:	fb04 b403 	mla	r4, r4, r3, fp
 8026298:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802629c:	fb10 f007 	smulbb	r0, r0, r7
 80262a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80262a4:	fb13 f307 	smulbb	r3, r3, r7
 80262a8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80262ac:	fb01 010e 	mla	r1, r1, lr, r0
 80262b0:	fb04 340e 	mla	r4, r4, lr, r3
 80262b4:	b289      	uxth	r1, r1
 80262b6:	b2a4      	uxth	r4, r4
 80262b8:	1c48      	adds	r0, r1, #1
 80262ba:	1c63      	adds	r3, r4, #1
 80262bc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80262c0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80262c4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80262c6:	1209      	asrs	r1, r1, #8
 80262c8:	1224      	asrs	r4, r4, #8
 80262ca:	449a      	add	sl, r3
 80262cc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80262ce:	f805 1c05 	strb.w	r1, [r5, #-5]
 80262d2:	f805 4c04 	strb.w	r4, [r5, #-4]
 80262d6:	4498      	add	r8, r3
 80262d8:	e707      	b.n	80260ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80262da:	b01f      	add	sp, #124	@ 0x7c
 80262dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080262e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80262e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262e4:	b087      	sub	sp, #28
 80262e6:	780d      	ldrb	r5, [r1, #0]
 80262e8:	784c      	ldrb	r4, [r1, #1]
 80262ea:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80262ee:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 80262f2:	9004      	str	r0, [sp, #16]
 80262f4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80262f8:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 80262fc:	9005      	str	r0, [sp, #20]
 80262fe:	fb06 bc03 	mla	ip, r6, r3, fp
 8026302:	2e00      	cmp	r6, #0
 8026304:	7888      	ldrb	r0, [r1, #2]
 8026306:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802630a:	eb02 090c 	add.w	r9, r2, ip
 802630e:	f2c0 8084 	blt.w	802641a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8026312:	42b7      	cmp	r7, r6
 8026314:	f340 8081 	ble.w	802641a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8026318:	f1bb 0f00 	cmp.w	fp, #0
 802631c:	db79      	blt.n	8026412 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802631e:	455b      	cmp	r3, fp
 8026320:	dd77      	ble.n	8026412 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8026322:	f812 200c 	ldrb.w	r2, [r2, ip]
 8026326:	9201      	str	r2, [sp, #4]
 8026328:	f899 2001 	ldrb.w	r2, [r9, #1]
 802632c:	9202      	str	r2, [sp, #8]
 802632e:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026332:	9203      	str	r2, [sp, #12]
 8026334:	f11b 0201 	adds.w	r2, fp, #1
 8026338:	d476      	bmi.n	8026428 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802633a:	4293      	cmp	r3, r2
 802633c:	dd74      	ble.n	8026428 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802633e:	9a04      	ldr	r2, [sp, #16]
 8026340:	2a00      	cmp	r2, #0
 8026342:	d071      	beq.n	8026428 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8026344:	f899 8003 	ldrb.w	r8, [r9, #3]
 8026348:	f899 c004 	ldrb.w	ip, [r9, #4]
 802634c:	f899 a005 	ldrb.w	sl, [r9, #5]
 8026350:	3601      	adds	r6, #1
 8026352:	d471      	bmi.n	8026438 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8026354:	42b7      	cmp	r7, r6
 8026356:	dd6f      	ble.n	8026438 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8026358:	9a05      	ldr	r2, [sp, #20]
 802635a:	2a00      	cmp	r2, #0
 802635c:	d06c      	beq.n	8026438 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802635e:	f1bb 0f00 	cmp.w	fp, #0
 8026362:	db65      	blt.n	8026430 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8026364:	455b      	cmp	r3, fp
 8026366:	dd63      	ble.n	8026430 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8026368:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802636c:	f819 e002 	ldrb.w	lr, [r9, r2]
 8026370:	2203      	movs	r2, #3
 8026372:	fb03 9602 	mla	r6, r3, r2, r9
 8026376:	7877      	ldrb	r7, [r6, #1]
 8026378:	78b6      	ldrb	r6, [r6, #2]
 802637a:	f11b 0b01 	adds.w	fp, fp, #1
 802637e:	d40c      	bmi.n	802639a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8026380:	455b      	cmp	r3, fp
 8026382:	dd0a      	ble.n	802639a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8026384:	9a04      	ldr	r2, [sp, #16]
 8026386:	b142      	cbz	r2, 802639a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8026388:	2203      	movs	r2, #3
 802638a:	fb13 2002 	smlabb	r0, r3, r2, r2
 802638e:	f819 5000 	ldrb.w	r5, [r9, r0]
 8026392:	fb03 9002 	mla	r0, r3, r2, r9
 8026396:	7904      	ldrb	r4, [r0, #4]
 8026398:	7940      	ldrb	r0, [r0, #5]
 802639a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802639e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80263a2:	fb03 fb02 	mul.w	fp, r3, r2
 80263a6:	011b      	lsls	r3, r3, #4
 80263a8:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80263ac:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 80263b0:	eba3 030b 	sub.w	r3, r3, fp
 80263b4:	b292      	uxth	r2, r2
 80263b6:	b29b      	uxth	r3, r3
 80263b8:	eba9 0902 	sub.w	r9, r9, r2
 80263bc:	9304      	str	r3, [sp, #16]
 80263be:	fa1f f989 	uxth.w	r9, r9
 80263c2:	fb03 f808 	mul.w	r8, r3, r8
 80263c6:	9b01      	ldr	r3, [sp, #4]
 80263c8:	fb09 8803 	mla	r8, r9, r3, r8
 80263cc:	9b04      	ldr	r3, [sp, #16]
 80263ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80263d2:	9b02      	ldr	r3, [sp, #8]
 80263d4:	fb02 880e 	mla	r8, r2, lr, r8
 80263d8:	fb09 cc03 	mla	ip, r9, r3, ip
 80263dc:	9b04      	ldr	r3, [sp, #16]
 80263de:	fb0b 8805 	mla	r8, fp, r5, r8
 80263e2:	fb02 c707 	mla	r7, r2, r7, ip
 80263e6:	fb03 f30a 	mul.w	r3, r3, sl
 80263ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 80263ee:	fb0b 7404 	mla	r4, fp, r4, r7
 80263f2:	f881 8000 	strb.w	r8, [r1]
 80263f6:	1224      	asrs	r4, r4, #8
 80263f8:	704c      	strb	r4, [r1, #1]
 80263fa:	9c03      	ldr	r4, [sp, #12]
 80263fc:	fb09 3904 	mla	r9, r9, r4, r3
 8026400:	fb02 9206 	mla	r2, r2, r6, r9
 8026404:	fb0b 2000 	mla	r0, fp, r0, r2
 8026408:	1200      	asrs	r0, r0, #8
 802640a:	7088      	strb	r0, [r1, #2]
 802640c:	b007      	add	sp, #28
 802640e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026412:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8026416:	9501      	str	r5, [sp, #4]
 8026418:	e78c      	b.n	8026334 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 802641a:	4682      	mov	sl, r0
 802641c:	46a4      	mov	ip, r4
 802641e:	46a8      	mov	r8, r5
 8026420:	9501      	str	r5, [sp, #4]
 8026422:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8026426:	e793      	b.n	8026350 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8026428:	4682      	mov	sl, r0
 802642a:	46a4      	mov	ip, r4
 802642c:	46a8      	mov	r8, r5
 802642e:	e78f      	b.n	8026350 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8026430:	4606      	mov	r6, r0
 8026432:	4627      	mov	r7, r4
 8026434:	46ae      	mov	lr, r5
 8026436:	e7a0      	b.n	802637a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8026438:	4606      	mov	r6, r0
 802643a:	4627      	mov	r7, r4
 802643c:	46ae      	mov	lr, r5
 802643e:	e7ac      	b.n	802639a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08026440 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026444:	b09b      	sub	sp, #108	@ 0x6c
 8026446:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026448:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802644a:	9019      	str	r0, [sp, #100]	@ 0x64
 802644c:	9109      	str	r1, [sp, #36]	@ 0x24
 802644e:	6850      	ldr	r0, [r2, #4]
 8026450:	9306      	str	r3, [sp, #24]
 8026452:	6812      	ldr	r2, [r2, #0]
 8026454:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8026458:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 802645c:	fb00 1303 	mla	r3, r0, r3, r1
 8026460:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026464:	18d3      	adds	r3, r2, r3
 8026466:	9307      	str	r3, [sp, #28]
 8026468:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802646a:	681b      	ldr	r3, [r3, #0]
 802646c:	9308      	str	r3, [sp, #32]
 802646e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026470:	2b00      	cmp	r3, #0
 8026472:	dc03      	bgt.n	802647c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026476:	2b00      	cmp	r3, #0
 8026478:	f340 81ab 	ble.w	80267d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802647c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802647e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026482:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026486:	1e48      	subs	r0, r1, #1
 8026488:	1e55      	subs	r5, r2, #1
 802648a:	9b06      	ldr	r3, [sp, #24]
 802648c:	2b00      	cmp	r3, #0
 802648e:	f340 80b1 	ble.w	80265f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026492:	ea5f 462b 	movs.w	r6, fp, asr #16
 8026496:	ea4f 4324 	mov.w	r3, r4, asr #16
 802649a:	d406      	bmi.n	80264aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802649c:	4286      	cmp	r6, r0
 802649e:	da04      	bge.n	80264aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80264a0:	2b00      	cmp	r3, #0
 80264a2:	db02      	blt.n	80264aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80264a4:	42ab      	cmp	r3, r5
 80264a6:	f2c0 80a6 	blt.w	80265f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80264aa:	3601      	adds	r6, #1
 80264ac:	f100 8097 	bmi.w	80265de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80264b0:	42b1      	cmp	r1, r6
 80264b2:	f2c0 8094 	blt.w	80265de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80264b6:	3301      	adds	r3, #1
 80264b8:	f100 8091 	bmi.w	80265de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80264bc:	429a      	cmp	r2, r3
 80264be:	f2c0 808e 	blt.w	80265de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80264c2:	9b06      	ldr	r3, [sp, #24]
 80264c4:	9e07      	ldr	r6, [sp, #28]
 80264c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80264c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80264ca:	2b00      	cmp	r3, #0
 80264cc:	f340 80b0 	ble.w	8026630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80264d0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80264d2:	1425      	asrs	r5, r4, #16
 80264d4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80264d6:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80264da:	68c7      	ldr	r7, [r0, #12]
 80264dc:	ea5f 402b 	movs.w	r0, fp, asr #16
 80264e0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80264e4:	689b      	ldr	r3, [r3, #8]
 80264e6:	f100 80ea 	bmi.w	80266be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80264ea:	f103 3cff 	add.w	ip, r3, #4294967295
 80264ee:	4560      	cmp	r0, ip
 80264f0:	f280 80e5 	bge.w	80266be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80264f4:	2d00      	cmp	r5, #0
 80264f6:	f2c0 80e2 	blt.w	80266be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80264fa:	f107 3cff 	add.w	ip, r7, #4294967295
 80264fe:	4565      	cmp	r5, ip
 8026500:	f280 80dd 	bge.w	80266be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026504:	b21b      	sxth	r3, r3
 8026506:	fb05 0003 	mla	r0, r5, r3, r0
 802650a:	9d08      	ldr	r5, [sp, #32]
 802650c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026510:	182f      	adds	r7, r5, r0
 8026512:	5c2d      	ldrb	r5, [r5, r0]
 8026514:	7878      	ldrb	r0, [r7, #1]
 8026516:	f897 e002 	ldrb.w	lr, [r7, #2]
 802651a:	900c      	str	r0, [sp, #48]	@ 0x30
 802651c:	f897 9003 	ldrb.w	r9, [r7, #3]
 8026520:	f897 8004 	ldrb.w	r8, [r7, #4]
 8026524:	f897 a005 	ldrb.w	sl, [r7, #5]
 8026528:	b1c9      	cbz	r1, 802655e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802652a:	f04f 0c03 	mov.w	ip, #3
 802652e:	f06f 0004 	mvn.w	r0, #4
 8026532:	3705      	adds	r7, #5
 8026534:	fb13 030c 	smlabb	r3, r3, ip, r0
 8026538:	eb07 0c03 	add.w	ip, r7, r3
 802653c:	5cfb      	ldrb	r3, [r7, r3]
 802653e:	930d      	str	r3, [sp, #52]	@ 0x34
 8026540:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8026544:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026546:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802654a:	9311      	str	r3, [sp, #68]	@ 0x44
 802654c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8026550:	930e      	str	r3, [sp, #56]	@ 0x38
 8026552:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8026556:	9310      	str	r3, [sp, #64]	@ 0x40
 8026558:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802655c:	9312      	str	r3, [sp, #72]	@ 0x48
 802655e:	b292      	uxth	r2, r2
 8026560:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026562:	b289      	uxth	r1, r1
 8026564:	fb02 f301 	mul.w	r3, r2, r1
 8026568:	0112      	lsls	r2, r2, #4
 802656a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802656e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8026572:	1ad2      	subs	r2, r2, r3
 8026574:	b289      	uxth	r1, r1
 8026576:	b292      	uxth	r2, r2
 8026578:	1a7f      	subs	r7, r7, r1
 802657a:	fb02 f909 	mul.w	r9, r2, r9
 802657e:	b2bf      	uxth	r7, r7
 8026580:	fb02 f808 	mul.w	r8, r2, r8
 8026584:	fb02 fa0a 	mul.w	sl, r2, sl
 8026588:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802658a:	fb07 9905 	mla	r9, r7, r5, r9
 802658e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026590:	fb07 8800 	mla	r8, r7, r0, r8
 8026594:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026596:	fb07 aa0e 	mla	sl, r7, lr, sl
 802659a:	fb01 9905 	mla	r9, r1, r5, r9
 802659e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80265a0:	fb01 8800 	mla	r8, r1, r0, r8
 80265a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80265a6:	fb01 a102 	mla	r1, r1, r2, sl
 80265aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80265ac:	fb03 9905 	mla	r9, r3, r5, r9
 80265b0:	fb03 8800 	mla	r8, r3, r0, r8
 80265b4:	fb03 1302 	mla	r3, r3, r2, r1
 80265b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80265bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80265c0:	121b      	asrs	r3, r3, #8
 80265c2:	f886 9000 	strb.w	r9, [r6]
 80265c6:	f886 8001 	strb.w	r8, [r6, #1]
 80265ca:	70b3      	strb	r3, [r6, #2]
 80265cc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80265ce:	3603      	adds	r6, #3
 80265d0:	449b      	add	fp, r3
 80265d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80265d4:	441c      	add	r4, r3
 80265d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80265d8:	3b01      	subs	r3, #1
 80265da:	930a      	str	r3, [sp, #40]	@ 0x28
 80265dc:	e774      	b.n	80264c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80265de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80265e0:	449b      	add	fp, r3
 80265e2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80265e4:	441c      	add	r4, r3
 80265e6:	9b06      	ldr	r3, [sp, #24]
 80265e8:	3b01      	subs	r3, #1
 80265ea:	9306      	str	r3, [sp, #24]
 80265ec:	9b07      	ldr	r3, [sp, #28]
 80265ee:	3303      	adds	r3, #3
 80265f0:	9307      	str	r3, [sp, #28]
 80265f2:	e74a      	b.n	802648a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80265f4:	d024      	beq.n	8026640 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80265f6:	9b06      	ldr	r3, [sp, #24]
 80265f8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80265fa:	3b01      	subs	r3, #1
 80265fc:	fb00 b003 	mla	r0, r0, r3, fp
 8026600:	1400      	asrs	r0, r0, #16
 8026602:	f53f af5e 	bmi.w	80264c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026606:	3901      	subs	r1, #1
 8026608:	4288      	cmp	r0, r1
 802660a:	f6bf af5a 	bge.w	80264c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802660e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8026610:	fb01 4303 	mla	r3, r1, r3, r4
 8026614:	141b      	asrs	r3, r3, #16
 8026616:	f53f af54 	bmi.w	80264c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802661a:	3a01      	subs	r2, #1
 802661c:	4293      	cmp	r3, r2
 802661e:	f6bf af50 	bge.w	80264c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026622:	9b07      	ldr	r3, [sp, #28]
 8026624:	f8dd e018 	ldr.w	lr, [sp, #24]
 8026628:	1cde      	adds	r6, r3, #3
 802662a:	f1be 0f00 	cmp.w	lr, #0
 802662e:	dc5f      	bgt.n	80266f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026630:	9b06      	ldr	r3, [sp, #24]
 8026632:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026636:	9b07      	ldr	r3, [sp, #28]
 8026638:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802663c:	4423      	add	r3, r4
 802663e:	9307      	str	r3, [sp, #28]
 8026640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026642:	2b00      	cmp	r3, #0
 8026644:	f340 80c5 	ble.w	80267d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802664c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802664e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026652:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026656:	eef0 6a62 	vmov.f32	s13, s5
 802665a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802665e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026662:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026666:	ee16 ba90 	vmov	fp, s13
 802666a:	eef0 6a43 	vmov.f32	s13, s6
 802666e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026672:	ee16 4a90 	vmov	r4, s13
 8026676:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802667a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802667e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026682:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026686:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802668a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802668e:	ee12 2a90 	vmov	r2, s5
 8026692:	eef0 2a47 	vmov.f32	s5, s14
 8026696:	fb92 f3f3 	sdiv	r3, r2, r3
 802669a:	ee13 2a10 	vmov	r2, s6
 802669e:	9327      	str	r3, [sp, #156]	@ 0x9c
 80266a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80266a2:	eeb0 3a67 	vmov.f32	s6, s15
 80266a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80266aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80266ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80266b0:	3b01      	subs	r3, #1
 80266b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80266b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80266b6:	bf08      	it	eq
 80266b8:	4613      	moveq	r3, r2
 80266ba:	9306      	str	r3, [sp, #24]
 80266bc:	e6d7      	b.n	802646e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80266be:	f110 0c01 	adds.w	ip, r0, #1
 80266c2:	d483      	bmi.n	80265cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80266c4:	4563      	cmp	r3, ip
 80266c6:	db81      	blt.n	80265cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80266c8:	f115 0c01 	adds.w	ip, r5, #1
 80266cc:	f53f af7e 	bmi.w	80265cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80266d0:	4567      	cmp	r7, ip
 80266d2:	f6ff af7b 	blt.w	80265cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80266d6:	b23f      	sxth	r7, r7
 80266d8:	b21b      	sxth	r3, r3
 80266da:	9700      	str	r7, [sp, #0]
 80266dc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80266e0:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80266e4:	9a08      	ldr	r2, [sp, #32]
 80266e6:	4631      	mov	r1, r6
 80266e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80266ea:	f7ff fdf9 	bl	80262e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80266ee:	e76d      	b.n	80265cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80266f0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80266f2:	ea4f 402b 	mov.w	r0, fp, asr #16
 80266f6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80266fa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80266fe:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8026702:	1421      	asrs	r1, r4, #16
 8026704:	930a      	str	r3, [sp, #40]	@ 0x28
 8026706:	fb0c 0101 	mla	r1, ip, r1, r0
 802670a:	9808      	ldr	r0, [sp, #32]
 802670c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026710:	1845      	adds	r5, r0, r1
 8026712:	5c40      	ldrb	r0, [r0, r1]
 8026714:	796f      	ldrb	r7, [r5, #5]
 8026716:	7869      	ldrb	r1, [r5, #1]
 8026718:	f895 8002 	ldrb.w	r8, [r5, #2]
 802671c:	f895 a003 	ldrb.w	sl, [r5, #3]
 8026720:	f895 9004 	ldrb.w	r9, [r5, #4]
 8026724:	970c      	str	r7, [sp, #48]	@ 0x30
 8026726:	b1a2      	cbz	r2, 8026752 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026728:	2703      	movs	r7, #3
 802672a:	f06f 0304 	mvn.w	r3, #4
 802672e:	3505      	adds	r5, #5
 8026730:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8026734:	eb05 070c 	add.w	r7, r5, ip
 8026738:	f815 500c 	ldrb.w	r5, [r5, ip]
 802673c:	9513      	str	r5, [sp, #76]	@ 0x4c
 802673e:	787d      	ldrb	r5, [r7, #1]
 8026740:	9515      	str	r5, [sp, #84]	@ 0x54
 8026742:	78bd      	ldrb	r5, [r7, #2]
 8026744:	9517      	str	r5, [sp, #92]	@ 0x5c
 8026746:	78fd      	ldrb	r5, [r7, #3]
 8026748:	9514      	str	r5, [sp, #80]	@ 0x50
 802674a:	793d      	ldrb	r5, [r7, #4]
 802674c:	9516      	str	r5, [sp, #88]	@ 0x58
 802674e:	797d      	ldrb	r5, [r7, #5]
 8026750:	9518      	str	r5, [sp, #96]	@ 0x60
 8026752:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8026756:	b292      	uxth	r2, r2
 8026758:	3603      	adds	r6, #3
 802675a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802675e:	fb03 f502 	mul.w	r5, r3, r2
 8026762:	011b      	lsls	r3, r3, #4
 8026764:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8026768:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 802676c:	1b5b      	subs	r3, r3, r5
 802676e:	b292      	uxth	r2, r2
 8026770:	b29b      	uxth	r3, r3
 8026772:	1abf      	subs	r7, r7, r2
 8026774:	fb03 f909 	mul.w	r9, r3, r9
 8026778:	b2bf      	uxth	r7, r7
 802677a:	fb03 fa0a 	mul.w	sl, r3, sl
 802677e:	fb07 9901 	mla	r9, r7, r1, r9
 8026782:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026784:	fb07 aa00 	mla	sl, r7, r0, sl
 8026788:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802678a:	fb02 9901 	mla	r9, r2, r1, r9
 802678e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8026790:	fb02 aa00 	mla	sl, r2, r0, sl
 8026794:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8026796:	fb05 9901 	mla	r9, r5, r1, r9
 802679a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802679c:	fb05 aa00 	mla	sl, r5, r0, sl
 80267a0:	434b      	muls	r3, r1
 80267a2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80267a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80267a8:	fb07 3308 	mla	r3, r7, r8, r3
 80267ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80267b0:	f806 ac06 	strb.w	sl, [r6, #-6]
 80267b4:	fb02 3201 	mla	r2, r2, r1, r3
 80267b8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80267ba:	f806 9c05 	strb.w	r9, [r6, #-5]
 80267be:	fb05 2503 	mla	r5, r5, r3, r2
 80267c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80267c4:	122d      	asrs	r5, r5, #8
 80267c6:	449b      	add	fp, r3
 80267c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80267ca:	f806 5c04 	strb.w	r5, [r6, #-4]
 80267ce:	441c      	add	r4, r3
 80267d0:	e72b      	b.n	802662a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80267d2:	b01b      	add	sp, #108	@ 0x6c
 80267d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080267d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80267d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267dc:	b087      	sub	sp, #28
 80267de:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80267e2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80267e6:	fb05 7003 	mla	r0, r5, r3, r7
 80267ea:	2d00      	cmp	r5, #0
 80267ec:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80267f0:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80267f4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80267f8:	f2c0 811f 	blt.w	8026a3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80267fc:	45a8      	cmp	r8, r5
 80267fe:	f340 811c 	ble.w	8026a3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8026802:	2f00      	cmp	r7, #0
 8026804:	f2c0 8117 	blt.w	8026a36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8026808:	42bb      	cmp	r3, r7
 802680a:	f340 8114 	ble.w	8026a36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802680e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8026812:	1c7a      	adds	r2, r7, #1
 8026814:	f100 8114 	bmi.w	8026a40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8026818:	4293      	cmp	r3, r2
 802681a:	f340 8111 	ble.w	8026a40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802681e:	2c00      	cmp	r4, #0
 8026820:	f000 8110 	beq.w	8026a44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8026824:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8026828:	3501      	adds	r5, #1
 802682a:	f100 810f 	bmi.w	8026a4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802682e:	45a8      	cmp	r8, r5
 8026830:	f340 810c 	ble.w	8026a4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8026834:	f1be 0f00 	cmp.w	lr, #0
 8026838:	f000 810b 	beq.w	8026a52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802683c:	2f00      	cmp	r7, #0
 802683e:	f2c0 8103 	blt.w	8026a48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8026842:	42bb      	cmp	r3, r7
 8026844:	f340 8100 	ble.w	8026a48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8026848:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802684c:	3701      	adds	r7, #1
 802684e:	f100 8103 	bmi.w	8026a58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8026852:	42bb      	cmp	r3, r7
 8026854:	f340 8100 	ble.w	8026a58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8026858:	2c00      	cmp	r4, #0
 802685a:	f000 80ff 	beq.w	8026a5c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 802685e:	3301      	adds	r3, #1
 8026860:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026864:	fa1f fc84 	uxth.w	ip, r4
 8026868:	fa1f fe8e 	uxth.w	lr, lr
 802686c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026870:	fb0c f90e 	mul.w	r9, ip, lr
 8026874:	0e13      	lsrs	r3, r2, #24
 8026876:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802687a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802687e:	9302      	str	r3, [sp, #8]
 8026880:	ebac 0709 	sub.w	r7, ip, r9
 8026884:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8026888:	fa1f f48e 	uxth.w	r4, lr
 802688c:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8026890:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026894:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8026898:	fb0a fe0e 	mul.w	lr, sl, lr
 802689c:	1b1b      	subs	r3, r3, r4
 802689e:	fb0a f606 	mul.w	r6, sl, r6
 80268a2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80268a6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80268aa:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80268ae:	b29b      	uxth	r3, r3
 80268b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80268b4:	b2bf      	uxth	r7, r7
 80268b6:	9301      	str	r3, [sp, #4]
 80268b8:	44e6      	add	lr, ip
 80268ba:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80268be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268c2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80268c6:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80268ca:	9303      	str	r3, [sp, #12]
 80268cc:	0a33      	lsrs	r3, r6, #8
 80268ce:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80268d2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80268d6:	9304      	str	r3, [sp, #16]
 80268d8:	fb0b f606 	mul.w	r6, fp, r6
 80268dc:	fb0b f000 	mul.w	r0, fp, r0
 80268e0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80268e4:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80268e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80268ec:	44b6      	add	lr, r6
 80268ee:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80268f2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80268f6:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80268fa:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80268fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026902:	fb08 f606 	mul.w	r6, r8, r6
 8026906:	0a03      	lsrs	r3, r0, #8
 8026908:	fb08 f505 	mul.w	r5, r8, r5
 802690c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026910:	0a30      	lsrs	r0, r6, #8
 8026912:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8026916:	9305      	str	r3, [sp, #20]
 8026918:	0e13      	lsrs	r3, r2, #24
 802691a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802691e:	fb0e fe07 	mul.w	lr, lr, r7
 8026922:	4430      	add	r0, r6
 8026924:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8026928:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802692c:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8026930:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026934:	0a00      	lsrs	r0, r0, #8
 8026936:	435e      	muls	r6, r3
 8026938:	0a2d      	lsrs	r5, r5, #8
 802693a:	435a      	muls	r2, r3
 802693c:	9b03      	ldr	r3, [sp, #12]
 802693e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8026942:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8026946:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802694a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802694e:	44b4      	add	ip, r6
 8026950:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8026954:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026958:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802695c:	9e01      	ldr	r6, [sp, #4]
 802695e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026962:	fb03 ee06 	mla	lr, r3, r6, lr
 8026966:	9b04      	ldr	r3, [sp, #16]
 8026968:	0a12      	lsrs	r2, r2, #8
 802696a:	fb0c ee09 	mla	lr, ip, r9, lr
 802696e:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8026972:	9b05      	ldr	r3, [sp, #20]
 8026974:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026978:	fb00 ee04 	mla	lr, r0, r4, lr
 802697c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026980:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8026984:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8026988:	9b01      	ldr	r3, [sp, #4]
 802698a:	fb07 fe0e 	mul.w	lr, r7, lr
 802698e:	fb07 f70b 	mul.w	r7, r7, fp
 8026992:	fb03 ee06 	mla	lr, r3, r6, lr
 8026996:	fb03 730a 	mla	r3, r3, sl, r7
 802699a:	fb09 e202 	mla	r2, r9, r2, lr
 802699e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80269a2:	fb04 2e0e 	mla	lr, r4, lr, r2
 80269a6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80269aa:	fb04 3408 	mla	r4, r4, r8, r3
 80269ae:	9b02      	ldr	r3, [sp, #8]
 80269b0:	b292      	uxth	r2, r2
 80269b2:	fb09 4903 	mla	r9, r9, r3, r4
 80269b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269ba:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80269be:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80269c2:	fb09 f902 	mul.w	r9, r9, r2
 80269c6:	ea40 0e0e 	orr.w	lr, r0, lr
 80269ca:	f109 0301 	add.w	r3, r9, #1
 80269ce:	fa5f f08e 	uxtb.w	r0, lr
 80269d2:	fb10 f002 	smulbb	r0, r0, r2
 80269d6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80269da:	780b      	ldrb	r3, [r1, #0]
 80269dc:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 80269e0:	fa5f f989 	uxtb.w	r9, r9
 80269e4:	fb03 0309 	mla	r3, r3, r9, r0
 80269e8:	b29b      	uxth	r3, r3
 80269ea:	1c58      	adds	r0, r3, #1
 80269ec:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80269f0:	7848      	ldrb	r0, [r1, #1]
 80269f2:	fb10 f009 	smulbb	r0, r0, r9
 80269f6:	121b      	asrs	r3, r3, #8
 80269f8:	700b      	strb	r3, [r1, #0]
 80269fa:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80269fe:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026a02:	fb03 0302 	mla	r3, r3, r2, r0
 8026a06:	b29b      	uxth	r3, r3
 8026a08:	1c58      	adds	r0, r3, #1
 8026a0a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026a0e:	121b      	asrs	r3, r3, #8
 8026a10:	704b      	strb	r3, [r1, #1]
 8026a12:	788b      	ldrb	r3, [r1, #2]
 8026a14:	fb13 f909 	smulbb	r9, r3, r9
 8026a18:	fb0e 9e02 	mla	lr, lr, r2, r9
 8026a1c:	fa1f fe8e 	uxth.w	lr, lr
 8026a20:	f10e 0301 	add.w	r3, lr, #1
 8026a24:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8026a28:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026a2c:	f881 e002 	strb.w	lr, [r1, #2]
 8026a30:	b007      	add	sp, #28
 8026a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a36:	2600      	movs	r6, #0
 8026a38:	e6eb      	b.n	8026812 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8026a3a:	2000      	movs	r0, #0
 8026a3c:	4606      	mov	r6, r0
 8026a3e:	e6f3      	b.n	8026828 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026a40:	2000      	movs	r0, #0
 8026a42:	e6f1      	b.n	8026828 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026a44:	4620      	mov	r0, r4
 8026a46:	e6ef      	b.n	8026828 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026a48:	2500      	movs	r5, #0
 8026a4a:	e6ff      	b.n	802684c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8026a4c:	2200      	movs	r2, #0
 8026a4e:	4615      	mov	r5, r2
 8026a50:	e708      	b.n	8026864 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026a52:	4672      	mov	r2, lr
 8026a54:	4675      	mov	r5, lr
 8026a56:	e705      	b.n	8026864 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026a58:	2200      	movs	r2, #0
 8026a5a:	e703      	b.n	8026864 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026a5c:	4622      	mov	r2, r4
 8026a5e:	e701      	b.n	8026864 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08026a60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a64:	b09d      	sub	sp, #116	@ 0x74
 8026a66:	9219      	str	r2, [sp, #100]	@ 0x64
 8026a68:	9307      	str	r3, [sp, #28]
 8026a6a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8026a6c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8026a70:	901b      	str	r0, [sp, #108]	@ 0x6c
 8026a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8026a74:	6850      	ldr	r0, [r2, #4]
 8026a76:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026a78:	6812      	ldr	r2, [r2, #0]
 8026a7a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8026a7e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8026a82:	fb00 1303 	mla	r3, r0, r3, r1
 8026a86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026a8a:	18d3      	adds	r3, r2, r3
 8026a8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8026a8e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026a90:	681b      	ldr	r3, [r3, #0]
 8026a92:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a94:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8026a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026a9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026a9c:	2b00      	cmp	r3, #0
 8026a9e:	dc03      	bgt.n	8026aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026aa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026aa2:	2b00      	cmp	r3, #0
 8026aa4:	f340 8368 	ble.w	8027178 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026aa8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026aaa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026aae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026ab2:	1e48      	subs	r0, r1, #1
 8026ab4:	1e57      	subs	r7, r2, #1
 8026ab6:	9b07      	ldr	r3, [sp, #28]
 8026ab8:	2b00      	cmp	r3, #0
 8026aba:	f340 8187 	ble.w	8026dcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026abe:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026ac2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026ac6:	d406      	bmi.n	8026ad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026ac8:	4584      	cmp	ip, r0
 8026aca:	da04      	bge.n	8026ad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026acc:	2b00      	cmp	r3, #0
 8026ace:	db02      	blt.n	8026ad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026ad0:	42bb      	cmp	r3, r7
 8026ad2:	f2c0 817c 	blt.w	8026dce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026ad6:	f11c 0c01 	adds.w	ip, ip, #1
 8026ada:	f100 816c 	bmi.w	8026db6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026ade:	4561      	cmp	r1, ip
 8026ae0:	f2c0 8169 	blt.w	8026db6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026ae4:	3301      	adds	r3, #1
 8026ae6:	f100 8166 	bmi.w	8026db6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026aea:	429a      	cmp	r2, r3
 8026aec:	f2c0 8163 	blt.w	8026db6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026af0:	9b07      	ldr	r3, [sp, #28]
 8026af2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8026af4:	9318      	str	r3, [sp, #96]	@ 0x60
 8026af6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	f340 8186 	ble.w	8026e0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026afe:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026b00:	142a      	asrs	r2, r5, #16
 8026b02:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026b06:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026b0a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026b0e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026b12:	f100 81cb 	bmi.w	8026eac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b16:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026b1a:	4542      	cmp	r2, r8
 8026b1c:	f280 81c6 	bge.w	8026eac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b20:	2800      	cmp	r0, #0
 8026b22:	f2c0 81c3 	blt.w	8026eac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b26:	f103 38ff 	add.w	r8, r3, #4294967295
 8026b2a:	4540      	cmp	r0, r8
 8026b2c:	f280 81be 	bge.w	8026eac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b30:	fa0f f38e 	sxth.w	r3, lr
 8026b34:	fb00 2203 	mla	r2, r0, r3, r2
 8026b38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026b3a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8026b3e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8026b42:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026b46:	2900      	cmp	r1, #0
 8026b48:	f000 81a6 	beq.w	8026e98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8026b4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026b50:	900c      	str	r0, [sp, #48]	@ 0x30
 8026b52:	0e00      	lsrs	r0, r0, #24
 8026b54:	9013      	str	r0, [sp, #76]	@ 0x4c
 8026b56:	f1bc 0f00 	cmp.w	ip, #0
 8026b5a:	d00f      	beq.n	8026b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026b5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026b60:	3b01      	subs	r3, #1
 8026b62:	009b      	lsls	r3, r3, #2
 8026b64:	3304      	adds	r3, #4
 8026b66:	eb08 0003 	add.w	r0, r8, r3
 8026b6a:	f858 3003 	ldr.w	r3, [r8, r3]
 8026b6e:	9308      	str	r3, [sp, #32]
 8026b70:	0e1b      	lsrs	r3, r3, #24
 8026b72:	9311      	str	r3, [sp, #68]	@ 0x44
 8026b74:	6843      	ldr	r3, [r0, #4]
 8026b76:	930d      	str	r3, [sp, #52]	@ 0x34
 8026b78:	0e1b      	lsrs	r3, r3, #24
 8026b7a:	9314      	str	r3, [sp, #80]	@ 0x50
 8026b7c:	b289      	uxth	r1, r1
 8026b7e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026b80:	fa1f fc8c 	uxth.w	ip, ip
 8026b84:	0108      	lsls	r0, r1, #4
 8026b86:	fb01 f90c 	mul.w	r9, r1, ip
 8026b8a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026b8e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8026b92:	eba0 0809 	sub.w	r8, r0, r9
 8026b96:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8026b98:	fa1f f18c 	uxth.w	r1, ip
 8026b9c:	fa1f f888 	uxth.w	r8, r8
 8026ba0:	1a5b      	subs	r3, r3, r1
 8026ba2:	fb08 f000 	mul.w	r0, r8, r0
 8026ba6:	b29b      	uxth	r3, r3
 8026ba8:	fb03 000e 	mla	r0, r3, lr, r0
 8026bac:	fb01 0004 	mla	r0, r1, r4, r0
 8026bb0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026bb2:	fb09 0004 	mla	r0, r9, r4, r0
 8026bb6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026bba:	2800      	cmp	r0, #0
 8026bbc:	f000 80f2 	beq.w	8026da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026bc0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026bc4:	d01b      	beq.n	8026bfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026bc6:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8026bca:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026bce:	fb0e fa0a 	mul.w	sl, lr, sl
 8026bd2:	fb0e fe02 	mul.w	lr, lr, r2
 8026bd6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026bda:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026bde:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026be2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026be6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026bea:	4452      	add	r2, sl
 8026bec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bf0:	0a12      	lsrs	r2, r2, #8
 8026bf2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026bf6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026bfa:	ea42 020c 	orr.w	r2, r2, ip
 8026bfe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c00:	2cff      	cmp	r4, #255	@ 0xff
 8026c02:	d021      	beq.n	8026c48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8026c04:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026c06:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026c0a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c0c:	fb04 fb0b 	mul.w	fp, r4, fp
 8026c10:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026c12:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026c16:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c18:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c1c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026c20:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c28:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026c2c:	44de      	add	lr, fp
 8026c2e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026c32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c3a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c3e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c42:	ea4e 040a 	orr.w	r4, lr, sl
 8026c46:	940c      	str	r4, [sp, #48]	@ 0x30
 8026c48:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026c4a:	2cff      	cmp	r4, #255	@ 0xff
 8026c4c:	d021      	beq.n	8026c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8026c4e:	9c08      	ldr	r4, [sp, #32]
 8026c50:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026c54:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026c56:	fb04 fb0b 	mul.w	fp, r4, fp
 8026c5a:	9c08      	ldr	r4, [sp, #32]
 8026c5c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026c60:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026c62:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c66:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026c6a:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c6e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c72:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026c76:	44de      	add	lr, fp
 8026c78:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026c7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c84:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c88:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c8c:	ea4e 040a 	orr.w	r4, lr, sl
 8026c90:	9408      	str	r4, [sp, #32]
 8026c92:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026c94:	2cff      	cmp	r4, #255	@ 0xff
 8026c96:	d021      	beq.n	8026cdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026c98:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026c9a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026c9e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026ca0:	fb04 fb0b 	mul.w	fp, r4, fp
 8026ca4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026ca6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026caa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026cac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026cb0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026cb4:	fb04 fa0a 	mul.w	sl, r4, sl
 8026cb8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026cbc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026cc0:	44de      	add	lr, fp
 8026cc2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026cc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026cca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026cd2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026cd6:	ea4e 040a 	orr.w	r4, lr, sl
 8026cda:	940d      	str	r4, [sp, #52]	@ 0x34
 8026cdc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026cde:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8026ce2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026ce6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026cea:	9c08      	ldr	r4, [sp, #32]
 8026cec:	fb08 fc0c 	mul.w	ip, r8, ip
 8026cf0:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026cf4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026cf8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026cfa:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026cfe:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026d02:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026d04:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026d08:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026d0c:	fb08 f80e 	mul.w	r8, r8, lr
 8026d10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d14:	fb03 8202 	mla	r2, r3, r2, r8
 8026d18:	9b08      	ldr	r3, [sp, #32]
 8026d1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d1e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8026d22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026d24:	fb01 220a 	mla	r2, r1, sl, r2
 8026d28:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8026d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d2e:	fb09 2901 	mla	r9, r9, r1, r2
 8026d32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d34:	4343      	muls	r3, r0
 8026d36:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026d3a:	1c58      	adds	r0, r3, #1
 8026d3c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026d40:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026d44:	783b      	ldrb	r3, [r7, #0]
 8026d46:	ea4c 0c09 	orr.w	ip, ip, r9
 8026d4a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026d4e:	fa5f f28c 	uxtb.w	r2, ip
 8026d52:	b2c0      	uxtb	r0, r0
 8026d54:	fb12 f201 	smulbb	r2, r2, r1
 8026d58:	fb03 2300 	mla	r3, r3, r0, r2
 8026d5c:	b29b      	uxth	r3, r3
 8026d5e:	1c5a      	adds	r2, r3, #1
 8026d60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026d64:	787a      	ldrb	r2, [r7, #1]
 8026d66:	fb12 f200 	smulbb	r2, r2, r0
 8026d6a:	121b      	asrs	r3, r3, #8
 8026d6c:	703b      	strb	r3, [r7, #0]
 8026d6e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026d72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026d76:	fb03 2301 	mla	r3, r3, r1, r2
 8026d7a:	b29b      	uxth	r3, r3
 8026d7c:	1c5a      	adds	r2, r3, #1
 8026d7e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026d82:	121b      	asrs	r3, r3, #8
 8026d84:	707b      	strb	r3, [r7, #1]
 8026d86:	78bb      	ldrb	r3, [r7, #2]
 8026d88:	fb13 f000 	smulbb	r0, r3, r0
 8026d8c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8026d90:	fa1f fc8c 	uxth.w	ip, ip
 8026d94:	f10c 0301 	add.w	r3, ip, #1
 8026d98:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026d9c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026da0:	f887 c002 	strb.w	ip, [r7, #2]
 8026da4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026da6:	3703      	adds	r7, #3
 8026da8:	441d      	add	r5, r3
 8026daa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026dac:	441e      	add	r6, r3
 8026dae:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026db0:	3b01      	subs	r3, #1
 8026db2:	9318      	str	r3, [sp, #96]	@ 0x60
 8026db4:	e69f      	b.n	8026af6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026db6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026db8:	441d      	add	r5, r3
 8026dba:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026dbc:	441e      	add	r6, r3
 8026dbe:	9b07      	ldr	r3, [sp, #28]
 8026dc0:	3b01      	subs	r3, #1
 8026dc2:	9307      	str	r3, [sp, #28]
 8026dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026dc6:	3303      	adds	r3, #3
 8026dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8026dca:	e674      	b.n	8026ab6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026dcc:	d025      	beq.n	8026e1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8026dce:	9b07      	ldr	r3, [sp, #28]
 8026dd0:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8026dd2:	3b01      	subs	r3, #1
 8026dd4:	fb00 5003 	mla	r0, r0, r3, r5
 8026dd8:	1400      	asrs	r0, r0, #16
 8026dda:	f53f ae89 	bmi.w	8026af0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026dde:	3901      	subs	r1, #1
 8026de0:	4288      	cmp	r0, r1
 8026de2:	f6bf ae85 	bge.w	8026af0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026de6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8026de8:	fb01 6303 	mla	r3, r1, r3, r6
 8026dec:	141b      	asrs	r3, r3, #16
 8026dee:	f53f ae7f 	bmi.w	8026af0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026df2:	3a01      	subs	r2, #1
 8026df4:	4293      	cmp	r3, r2
 8026df6:	f6bf ae7b 	bge.w	8026af0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026dfc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026e00:	f103 0e03 	add.w	lr, r3, #3
 8026e04:	f1bb 0f00 	cmp.w	fp, #0
 8026e08:	dc6e      	bgt.n	8026ee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8026e0a:	9b07      	ldr	r3, [sp, #28]
 8026e0c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026e12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026e16:	4423      	add	r3, r4
 8026e18:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026e1c:	2b00      	cmp	r3, #0
 8026e1e:	f340 81ab 	ble.w	8027178 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026e22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026e26:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026e28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026e2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026e30:	eef0 6a62 	vmov.f32	s13, s5
 8026e34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026e38:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026e3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e40:	ee16 5a90 	vmov	r5, s13
 8026e44:	eef0 6a43 	vmov.f32	s13, s6
 8026e48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e4c:	ee16 6a90 	vmov	r6, s13
 8026e50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026e54:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026e58:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026e5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026e60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026e64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026e68:	ee12 2a90 	vmov	r2, s5
 8026e6c:	eef0 2a47 	vmov.f32	s5, s14
 8026e70:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e74:	ee13 2a10 	vmov	r2, s6
 8026e78:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026e7a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026e7c:	eeb0 3a67 	vmov.f32	s6, s15
 8026e80:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e84:	932a      	str	r3, [sp, #168]	@ 0xa8
 8026e86:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026e88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8026e8a:	3b01      	subs	r3, #1
 8026e8c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026e8e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026e90:	bf08      	it	eq
 8026e92:	4613      	moveq	r3, r2
 8026e94:	9307      	str	r3, [sp, #28]
 8026e96:	e600      	b.n	8026a9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026e98:	f1bc 0f00 	cmp.w	ip, #0
 8026e9c:	f43f ae6e 	beq.w	8026b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026ea0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026ea4:	9308      	str	r3, [sp, #32]
 8026ea6:	0e1b      	lsrs	r3, r3, #24
 8026ea8:	9311      	str	r3, [sp, #68]	@ 0x44
 8026eaa:	e667      	b.n	8026b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026eac:	f112 0801 	adds.w	r8, r2, #1
 8026eb0:	f53f af78 	bmi.w	8026da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026eb4:	45c6      	cmp	lr, r8
 8026eb6:	f6ff af75 	blt.w	8026da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026eba:	f110 0801 	adds.w	r8, r0, #1
 8026ebe:	f53f af71 	bmi.w	8026da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026ec2:	4543      	cmp	r3, r8
 8026ec4:	f6ff af6e 	blt.w	8026da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026ec8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8026eca:	b21b      	sxth	r3, r3
 8026ecc:	9201      	str	r2, [sp, #4]
 8026ece:	9300      	str	r3, [sp, #0]
 8026ed0:	fa0f f38e 	sxth.w	r3, lr
 8026ed4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026eda:	e9cd c404 	strd	ip, r4, [sp, #16]
 8026ede:	4639      	mov	r1, r7
 8026ee0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026ee2:	f7ff fc79 	bl	80267d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8026ee6:	e75d      	b.n	8026da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026ee8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026eea:	142f      	asrs	r7, r5, #16
 8026eec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026eee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026ef2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8026ef6:	1433      	asrs	r3, r6, #16
 8026ef8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026efc:	fb02 7303 	mla	r3, r2, r3, r7
 8026f00:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8026f04:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026f08:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026f0c:	2900      	cmp	r1, #0
 8026f0e:	f000 812a 	beq.w	8027166 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026f12:	687c      	ldr	r4, [r7, #4]
 8026f14:	940e      	str	r4, [sp, #56]	@ 0x38
 8026f16:	0e24      	lsrs	r4, r4, #24
 8026f18:	9415      	str	r4, [sp, #84]	@ 0x54
 8026f1a:	b178      	cbz	r0, 8026f3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026f1c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8026f20:	3a01      	subs	r2, #1
 8026f22:	0092      	lsls	r2, r2, #2
 8026f24:	3204      	adds	r2, #4
 8026f26:	eb07 0802 	add.w	r8, r7, r2
 8026f2a:	58ba      	ldr	r2, [r7, r2]
 8026f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8026f2e:	0e12      	lsrs	r2, r2, #24
 8026f30:	9212      	str	r2, [sp, #72]	@ 0x48
 8026f32:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8026f36:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026f38:	0e12      	lsrs	r2, r2, #24
 8026f3a:	9216      	str	r2, [sp, #88]	@ 0x58
 8026f3c:	b289      	uxth	r1, r1
 8026f3e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026f40:	b280      	uxth	r0, r0
 8026f42:	fb01 f900 	mul.w	r9, r1, r0
 8026f46:	0109      	lsls	r1, r1, #4
 8026f48:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026f4c:	eba1 0809 	sub.w	r8, r1, r9
 8026f50:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8026f54:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026f56:	b280      	uxth	r0, r0
 8026f58:	fa1f f888 	uxth.w	r8, r8
 8026f5c:	1a12      	subs	r2, r2, r0
 8026f5e:	fb08 f101 	mul.w	r1, r8, r1
 8026f62:	b292      	uxth	r2, r2
 8026f64:	fb02 110c 	mla	r1, r2, ip, r1
 8026f68:	fb00 1104 	mla	r1, r0, r4, r1
 8026f6c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026f6e:	fb09 1104 	mla	r1, r9, r4, r1
 8026f72:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026f76:	2900      	cmp	r1, #0
 8026f78:	f000 80ec 	beq.w	8027154 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8026f7c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026f80:	d019      	beq.n	8026fb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8026f82:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026f86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026f8a:	fb0c fa0a 	mul.w	sl, ip, sl
 8026f8e:	fb0c fc03 	mul.w	ip, ip, r3
 8026f92:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026f96:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026f9a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026f9e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026fa2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026fa6:	4453      	add	r3, sl
 8026fa8:	0a3f      	lsrs	r7, r7, #8
 8026faa:	0a1b      	lsrs	r3, r3, #8
 8026fac:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026fb0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026fb4:	433b      	orrs	r3, r7
 8026fb6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026fb8:	2cff      	cmp	r4, #255	@ 0xff
 8026fba:	d020      	beq.n	8026ffe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8026fbc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026fbe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026fc2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026fc4:	4367      	muls	r7, r4
 8026fc6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026fc8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026fcc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026fd0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026fd2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026fd6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026fda:	fb04 fa0a 	mul.w	sl, r4, sl
 8026fde:	44bc      	add	ip, r7
 8026fe0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026fe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fe8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026fec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026ff0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ff4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026ff8:	ea4c 040a 	orr.w	r4, ip, sl
 8026ffc:	940e      	str	r4, [sp, #56]	@ 0x38
 8026ffe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027000:	2cff      	cmp	r4, #255	@ 0xff
 8027002:	d020      	beq.n	8027046 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8027004:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027006:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802700a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802700c:	4367      	muls	r7, r4
 802700e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027010:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027014:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027018:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802701a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802701e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027022:	fb04 fa0a 	mul.w	sl, r4, sl
 8027026:	44bc      	add	ip, r7
 8027028:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802702c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027030:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027034:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027038:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802703c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027040:	ea4c 040a 	orr.w	r4, ip, sl
 8027044:	9409      	str	r4, [sp, #36]	@ 0x24
 8027046:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8027048:	2cff      	cmp	r4, #255	@ 0xff
 802704a:	d020      	beq.n	802708e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 802704c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802704e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027052:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8027054:	4367      	muls	r7, r4
 8027056:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027058:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802705c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027060:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8027062:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027066:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802706a:	fb04 fa0a 	mul.w	sl, r4, sl
 802706e:	44bc      	add	ip, r7
 8027070:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027078:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802707c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027080:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027084:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027088:	ea4c 040a 	orr.w	r4, ip, sl
 802708c:	940f      	str	r4, [sp, #60]	@ 0x3c
 802708e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027090:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8027094:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027098:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802709c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802709e:	fb08 f707 	mul.w	r7, r8, r7
 80270a2:	fb02 770c 	mla	r7, r2, ip, r7
 80270a6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80270aa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80270ac:	fb00 770c 	mla	r7, r0, ip, r7
 80270b0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80270b4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80270b6:	fb09 770c 	mla	r7, r9, ip, r7
 80270ba:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80270be:	fb08 f80c 	mul.w	r8, r8, ip
 80270c2:	0a3f      	lsrs	r7, r7, #8
 80270c4:	fb02 8303 	mla	r3, r2, r3, r8
 80270c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80270ca:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80270ce:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80270d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80270d4:	fb00 330a 	mla	r3, r0, sl, r3
 80270d8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80270dc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80270de:	fb09 3c0c 	mla	ip, r9, ip, r3
 80270e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80270e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270e8:	434b      	muls	r3, r1
 80270ea:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80270ee:	1c59      	adds	r1, r3, #1
 80270f0:	ea47 070c 	orr.w	r7, r7, ip
 80270f4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80270f8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80270fc:	b2fa      	uxtb	r2, r7
 80270fe:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027102:	fb12 f200 	smulbb	r2, r2, r0
 8027106:	b2c9      	uxtb	r1, r1
 8027108:	fb03 2301 	mla	r3, r3, r1, r2
 802710c:	b29b      	uxth	r3, r3
 802710e:	1c5a      	adds	r2, r3, #1
 8027110:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027114:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8027118:	fb12 f201 	smulbb	r2, r2, r1
 802711c:	121b      	asrs	r3, r3, #8
 802711e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8027122:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8027126:	0c3f      	lsrs	r7, r7, #16
 8027128:	fb03 2300 	mla	r3, r3, r0, r2
 802712c:	b29b      	uxth	r3, r3
 802712e:	1c5a      	adds	r2, r3, #1
 8027130:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027134:	121b      	asrs	r3, r3, #8
 8027136:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802713a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802713e:	fb13 f101 	smulbb	r1, r3, r1
 8027142:	fb07 1700 	mla	r7, r7, r0, r1
 8027146:	b2bf      	uxth	r7, r7
 8027148:	1c79      	adds	r1, r7, #1
 802714a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802714e:	123f      	asrs	r7, r7, #8
 8027150:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8027154:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027156:	f10e 0e03 	add.w	lr, lr, #3
 802715a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802715e:	441d      	add	r5, r3
 8027160:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027162:	441e      	add	r6, r3
 8027164:	e64e      	b.n	8026e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8027166:	2800      	cmp	r0, #0
 8027168:	f43f aee8 	beq.w	8026f3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802716c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8027170:	9209      	str	r2, [sp, #36]	@ 0x24
 8027172:	0e12      	lsrs	r2, r2, #24
 8027174:	9212      	str	r2, [sp, #72]	@ 0x48
 8027176:	e6e1      	b.n	8026f3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8027178:	b01d      	add	sp, #116	@ 0x74
 802717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802717e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802717e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027182:	b087      	sub	sp, #28
 8027184:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8027188:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 802718c:	fb05 7003 	mla	r0, r5, r3, r7
 8027190:	2d00      	cmp	r5, #0
 8027192:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8027196:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 802719a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802719e:	f2c0 810a 	blt.w	80273b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80271a2:	45a8      	cmp	r8, r5
 80271a4:	f340 8107 	ble.w	80273b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80271a8:	2f00      	cmp	r7, #0
 80271aa:	f2c0 8102 	blt.w	80273b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80271ae:	42bb      	cmp	r3, r7
 80271b0:	f340 80ff 	ble.w	80273b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80271b4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80271b8:	1c7a      	adds	r2, r7, #1
 80271ba:	f100 80ff 	bmi.w	80273bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80271be:	4293      	cmp	r3, r2
 80271c0:	f340 80fc 	ble.w	80273bc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80271c4:	2c00      	cmp	r4, #0
 80271c6:	f000 80fb 	beq.w	80273c0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 80271ca:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80271ce:	3501      	adds	r5, #1
 80271d0:	f100 80fa 	bmi.w	80273c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80271d4:	45a8      	cmp	r8, r5
 80271d6:	f340 80f7 	ble.w	80273c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80271da:	f1be 0f00 	cmp.w	lr, #0
 80271de:	f000 80f6 	beq.w	80273ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 80271e2:	2f00      	cmp	r7, #0
 80271e4:	f2c0 80ee 	blt.w	80273c4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80271e8:	42bb      	cmp	r3, r7
 80271ea:	f340 80eb 	ble.w	80273c4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80271ee:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80271f2:	3701      	adds	r7, #1
 80271f4:	f100 80ee 	bmi.w	80273d4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80271f8:	42bb      	cmp	r3, r7
 80271fa:	f340 80eb 	ble.w	80273d4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80271fe:	2c00      	cmp	r4, #0
 8027200:	f000 80ea 	beq.w	80273d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8027204:	3301      	adds	r3, #1
 8027206:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802720a:	fa1f fc84 	uxth.w	ip, r4
 802720e:	fa1f fe8e 	uxth.w	lr, lr
 8027212:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027216:	fb0c f90e 	mul.w	r9, ip, lr
 802721a:	0e13      	lsrs	r3, r2, #24
 802721c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027220:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8027224:	9302      	str	r3, [sp, #8]
 8027226:	ebac 0709 	sub.w	r7, ip, r9
 802722a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802722e:	fa1f f48e 	uxth.w	r4, lr
 8027232:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8027236:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802723a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 802723e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027242:	1b1b      	subs	r3, r3, r4
 8027244:	fb0a f606 	mul.w	r6, sl, r6
 8027248:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802724c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027250:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8027254:	b29b      	uxth	r3, r3
 8027256:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802725a:	b2bf      	uxth	r7, r7
 802725c:	9301      	str	r3, [sp, #4]
 802725e:	44e6      	add	lr, ip
 8027260:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8027264:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027268:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802726c:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8027270:	9303      	str	r3, [sp, #12]
 8027272:	0a33      	lsrs	r3, r6, #8
 8027274:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8027278:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802727c:	9304      	str	r3, [sp, #16]
 802727e:	fb0b f606 	mul.w	r6, fp, r6
 8027282:	fb0b f000 	mul.w	r0, fp, r0
 8027286:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802728a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802728e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027292:	44b6      	add	lr, r6
 8027294:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8027298:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802729c:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80272a0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80272a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272a8:	fb08 f606 	mul.w	r6, r8, r6
 80272ac:	0a03      	lsrs	r3, r0, #8
 80272ae:	fb08 f505 	mul.w	r5, r8, r5
 80272b2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272b6:	0a30      	lsrs	r0, r6, #8
 80272b8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80272bc:	9305      	str	r3, [sp, #20]
 80272be:	0e13      	lsrs	r3, r2, #24
 80272c0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80272c4:	fb0e fe07 	mul.w	lr, lr, r7
 80272c8:	4430      	add	r0, r6
 80272ca:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80272ce:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80272d2:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 80272d6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80272da:	0a00      	lsrs	r0, r0, #8
 80272dc:	435e      	muls	r6, r3
 80272de:	0a2d      	lsrs	r5, r5, #8
 80272e0:	435a      	muls	r2, r3
 80272e2:	9b03      	ldr	r3, [sp, #12]
 80272e4:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80272e8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80272ec:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80272f0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80272f4:	44b4      	add	ip, r6
 80272f6:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80272fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272fe:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8027302:	9e01      	ldr	r6, [sp, #4]
 8027304:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027308:	fb03 ee06 	mla	lr, r3, r6, lr
 802730c:	9b04      	ldr	r3, [sp, #16]
 802730e:	0a12      	lsrs	r2, r2, #8
 8027310:	fb0c ee09 	mla	lr, ip, r9, lr
 8027314:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8027318:	9b05      	ldr	r3, [sp, #20]
 802731a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802731e:	fb00 ee04 	mla	lr, r0, r4, lr
 8027322:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027326:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802732a:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 802732e:	9b01      	ldr	r3, [sp, #4]
 8027330:	fb07 fe0e 	mul.w	lr, r7, lr
 8027334:	fb07 f70b 	mul.w	r7, r7, fp
 8027338:	fb03 ee06 	mla	lr, r3, r6, lr
 802733c:	fb03 730a 	mla	r3, r3, sl, r7
 8027340:	fb09 e202 	mla	r2, r9, r2, lr
 8027344:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027348:	fb04 2e0e 	mla	lr, r4, lr, r2
 802734c:	fb04 3408 	mla	r4, r4, r8, r3
 8027350:	9b02      	ldr	r3, [sp, #8]
 8027352:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027356:	fb09 4903 	mla	r9, r9, r3, r4
 802735a:	780b      	ldrb	r3, [r1, #0]
 802735c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027360:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8027364:	ea40 0e0e 	orr.w	lr, r0, lr
 8027368:	fa5f f989 	uxtb.w	r9, r9
 802736c:	fb03 f209 	mul.w	r2, r3, r9
 8027370:	1c53      	adds	r3, r2, #1
 8027372:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027376:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802737a:	700b      	strb	r3, [r1, #0]
 802737c:	784b      	ldrb	r3, [r1, #1]
 802737e:	fb03 f309 	mul.w	r3, r3, r9
 8027382:	1c5a      	adds	r2, r3, #1
 8027384:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027388:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802738c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8027390:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027394:	704b      	strb	r3, [r1, #1]
 8027396:	788b      	ldrb	r3, [r1, #2]
 8027398:	fb03 f909 	mul.w	r9, r3, r9
 802739c:	f109 0301 	add.w	r3, r9, #1
 80273a0:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80273a4:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80273a8:	f881 e002 	strb.w	lr, [r1, #2]
 80273ac:	b007      	add	sp, #28
 80273ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273b2:	2600      	movs	r6, #0
 80273b4:	e700      	b.n	80271b8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 80273b6:	2000      	movs	r0, #0
 80273b8:	4606      	mov	r6, r0
 80273ba:	e708      	b.n	80271ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80273bc:	2000      	movs	r0, #0
 80273be:	e706      	b.n	80271ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80273c0:	4620      	mov	r0, r4
 80273c2:	e704      	b.n	80271ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80273c4:	2500      	movs	r5, #0
 80273c6:	e714      	b.n	80271f2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 80273c8:	2200      	movs	r2, #0
 80273ca:	4615      	mov	r5, r2
 80273cc:	e71d      	b.n	802720a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80273ce:	4672      	mov	r2, lr
 80273d0:	4675      	mov	r5, lr
 80273d2:	e71a      	b.n	802720a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80273d4:	2200      	movs	r2, #0
 80273d6:	e718      	b.n	802720a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80273d8:	4622      	mov	r2, r4
 80273da:	e716      	b.n	802720a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

080273dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80273dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273e0:	b099      	sub	sp, #100	@ 0x64
 80273e2:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 80273e6:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80273e8:	9017      	str	r0, [sp, #92]	@ 0x5c
 80273ea:	9306      	str	r3, [sp, #24]
 80273ec:	6850      	ldr	r0, [r2, #4]
 80273ee:	6812      	ldr	r2, [r2, #0]
 80273f0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 80273f4:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 80273f8:	fb00 1303 	mla	r3, r0, r3, r1
 80273fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027400:	18d3      	adds	r3, r2, r3
 8027402:	9309      	str	r3, [sp, #36]	@ 0x24
 8027404:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027406:	681b      	ldr	r3, [r3, #0]
 8027408:	930e      	str	r3, [sp, #56]	@ 0x38
 802740a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802740c:	2b00      	cmp	r3, #0
 802740e:	dc03      	bgt.n	8027418 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8027410:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027412:	2b00      	cmp	r3, #0
 8027414:	f340 8360 	ble.w	8027ad8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8027418:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802741a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802741e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027422:	1e48      	subs	r0, r1, #1
 8027424:	1e57      	subs	r7, r2, #1
 8027426:	9b06      	ldr	r3, [sp, #24]
 8027428:	2b00      	cmp	r3, #0
 802742a:	f340 817b 	ble.w	8027724 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802742e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8027432:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027436:	d406      	bmi.n	8027446 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027438:	4584      	cmp	ip, r0
 802743a:	da04      	bge.n	8027446 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802743c:	2b00      	cmp	r3, #0
 802743e:	db02      	blt.n	8027446 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027440:	42bb      	cmp	r3, r7
 8027442:	f2c0 8170 	blt.w	8027726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8027446:	f11c 0c01 	adds.w	ip, ip, #1
 802744a:	f100 8160 	bmi.w	802770e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802744e:	4561      	cmp	r1, ip
 8027450:	f2c0 815d 	blt.w	802770e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8027454:	3301      	adds	r3, #1
 8027456:	f100 815a 	bmi.w	802770e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802745a:	429a      	cmp	r2, r3
 802745c:	f2c0 8157 	blt.w	802770e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8027460:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8027464:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8027466:	f1b8 0f00 	cmp.w	r8, #0
 802746a:	f340 8179 	ble.w	8027760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802746e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8027470:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027474:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027476:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802747a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802747e:	142a      	asrs	r2, r5, #16
 8027480:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027484:	689b      	ldr	r3, [r3, #8]
 8027486:	f100 81be 	bmi.w	8027806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802748a:	f103 39ff 	add.w	r9, r3, #4294967295
 802748e:	454a      	cmp	r2, r9
 8027490:	f280 81b9 	bge.w	8027806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8027494:	f1bc 0f00 	cmp.w	ip, #0
 8027498:	f2c0 81b5 	blt.w	8027806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802749c:	f10e 39ff 	add.w	r9, lr, #4294967295
 80274a0:	45cc      	cmp	ip, r9
 80274a2:	f280 81b0 	bge.w	8027806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80274a6:	b21b      	sxth	r3, r3
 80274a8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80274aa:	fb0c 2203 	mla	r2, ip, r3, r2
 80274ae:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80274b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80274b6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80274ba:	2900      	cmp	r1, #0
 80274bc:	f000 8197 	beq.w	80277ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80274c0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80274c4:	940a      	str	r4, [sp, #40]	@ 0x28
 80274c6:	0e24      	lsrs	r4, r4, #24
 80274c8:	9411      	str	r4, [sp, #68]	@ 0x44
 80274ca:	b180      	cbz	r0, 80274ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80274cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80274d0:	3b01      	subs	r3, #1
 80274d2:	009b      	lsls	r3, r3, #2
 80274d4:	3304      	adds	r3, #4
 80274d6:	eb09 0c03 	add.w	ip, r9, r3
 80274da:	f859 3003 	ldr.w	r3, [r9, r3]
 80274de:	9307      	str	r3, [sp, #28]
 80274e0:	0e1b      	lsrs	r3, r3, #24
 80274e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80274e4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80274e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80274ea:	0e1b      	lsrs	r3, r3, #24
 80274ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80274ee:	b289      	uxth	r1, r1
 80274f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80274f2:	b280      	uxth	r0, r0
 80274f4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80274f6:	fb01 fa00 	mul.w	sl, r1, r0
 80274fa:	0109      	lsls	r1, r1, #4
 80274fc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027500:	eba1 090a 	sub.w	r9, r1, sl
 8027504:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8027508:	b280      	uxth	r0, r0
 802750a:	fa1f f989 	uxth.w	r9, r9
 802750e:	1a09      	subs	r1, r1, r0
 8027510:	fb09 f303 	mul.w	r3, r9, r3
 8027514:	b289      	uxth	r1, r1
 8027516:	fb01 330e 	mla	r3, r1, lr, r3
 802751a:	fb00 3304 	mla	r3, r0, r4, r3
 802751e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027520:	fb0a 3304 	mla	r3, sl, r4, r3
 8027524:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027528:	2b00      	cmp	r3, #0
 802752a:	f000 80e8 	beq.w	80276fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802752e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027532:	d01b      	beq.n	802756c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8027534:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8027538:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802753c:	fb0e fb0b 	mul.w	fp, lr, fp
 8027540:	fb0e fe02 	mul.w	lr, lr, r2
 8027544:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8027548:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802754c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8027550:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027554:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027558:	445a      	add	r2, fp
 802755a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802755e:	0a12      	lsrs	r2, r2, #8
 8027560:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027564:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027568:	ea42 020c 	orr.w	r2, r2, ip
 802756c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802756e:	2cff      	cmp	r4, #255	@ 0xff
 8027570:	d021      	beq.n	80275b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8027572:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027574:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027578:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802757a:	fb04 fc0c 	mul.w	ip, r4, ip
 802757e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027580:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027584:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8027588:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802758a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802758e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027592:	fb04 fb0b 	mul.w	fp, r4, fp
 8027596:	44e6      	add	lr, ip
 8027598:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802759c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275a0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80275a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80275a8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80275ac:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80275b0:	ea4e 040b 	orr.w	r4, lr, fp
 80275b4:	940a      	str	r4, [sp, #40]	@ 0x28
 80275b6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80275b8:	2cff      	cmp	r4, #255	@ 0xff
 80275ba:	d021      	beq.n	8027600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80275bc:	9c07      	ldr	r4, [sp, #28]
 80275be:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80275c2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80275c4:	fb04 fc0c 	mul.w	ip, r4, ip
 80275c8:	9c07      	ldr	r4, [sp, #28]
 80275ca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80275ce:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80275d2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80275d4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80275d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80275dc:	fb04 fb0b 	mul.w	fp, r4, fp
 80275e0:	44e6      	add	lr, ip
 80275e2:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80275e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275ea:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80275ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80275f2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80275f6:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80275fa:	ea4e 040b 	orr.w	r4, lr, fp
 80275fe:	9407      	str	r4, [sp, #28]
 8027600:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027602:	2cff      	cmp	r4, #255	@ 0xff
 8027604:	d021      	beq.n	802764a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027606:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027608:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802760c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802760e:	fb04 fc0c 	mul.w	ip, r4, ip
 8027612:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027614:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027618:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802761c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802761e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027622:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027626:	fb04 fb0b 	mul.w	fp, r4, fp
 802762a:	44e6      	add	lr, ip
 802762c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8027630:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027634:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027638:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802763c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027640:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027644:	ea4e 040b 	orr.w	r4, lr, fp
 8027648:	940b      	str	r4, [sp, #44]	@ 0x2c
 802764a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802764c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8027650:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027654:	2bff      	cmp	r3, #255	@ 0xff
 8027656:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802765a:	9c07      	ldr	r4, [sp, #28]
 802765c:	fb09 fc0c 	mul.w	ip, r9, ip
 8027660:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027664:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027668:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802766a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802766e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027672:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027674:	fb0a cc0e 	mla	ip, sl, lr, ip
 8027678:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802767c:	fb09 f90e 	mul.w	r9, r9, lr
 8027680:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027684:	fb01 9202 	mla	r2, r1, r2, r9
 8027688:	9907      	ldr	r1, [sp, #28]
 802768a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802768e:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8027692:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027694:	fb00 220b 	mla	r2, r0, fp, r2
 8027698:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802769c:	fb0a 2a00 	mla	sl, sl, r0, r2
 80276a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80276a8:	ea4c 0c0a 	orr.w	ip, ip, sl
 80276ac:	fa5f f08c 	uxtb.w	r0, ip
 80276b0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80276b4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80276b8:	f000 80a2 	beq.w	8027800 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80276bc:	43db      	mvns	r3, r3
 80276be:	783a      	ldrb	r2, [r7, #0]
 80276c0:	f897 a002 	ldrb.w	sl, [r7, #2]
 80276c4:	b2db      	uxtb	r3, r3
 80276c6:	fb02 fe03 	mul.w	lr, r2, r3
 80276ca:	fb0a fa03 	mul.w	sl, sl, r3
 80276ce:	f10e 0201 	add.w	r2, lr, #1
 80276d2:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80276d6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80276da:	703a      	strb	r2, [r7, #0]
 80276dc:	787a      	ldrb	r2, [r7, #1]
 80276de:	fb02 f003 	mul.w	r0, r2, r3
 80276e2:	f10a 0301 	add.w	r3, sl, #1
 80276e6:	1c42      	adds	r2, r0, #1
 80276e8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80276ec:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80276f0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80276f4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80276f8:	707a      	strb	r2, [r7, #1]
 80276fa:	f887 c002 	strb.w	ip, [r7, #2]
 80276fe:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027700:	3703      	adds	r7, #3
 8027702:	f108 38ff 	add.w	r8, r8, #4294967295
 8027706:	441d      	add	r5, r3
 8027708:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802770a:	441e      	add	r6, r3
 802770c:	e6ab      	b.n	8027466 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802770e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027710:	441d      	add	r5, r3
 8027712:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027714:	441e      	add	r6, r3
 8027716:	9b06      	ldr	r3, [sp, #24]
 8027718:	3b01      	subs	r3, #1
 802771a:	9306      	str	r3, [sp, #24]
 802771c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802771e:	3303      	adds	r3, #3
 8027720:	9309      	str	r3, [sp, #36]	@ 0x24
 8027722:	e680      	b.n	8027426 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027724:	d024      	beq.n	8027770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027726:	9b06      	ldr	r3, [sp, #24]
 8027728:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802772a:	3b01      	subs	r3, #1
 802772c:	fb00 5003 	mla	r0, r0, r3, r5
 8027730:	1400      	asrs	r0, r0, #16
 8027732:	f53f ae95 	bmi.w	8027460 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027736:	3901      	subs	r1, #1
 8027738:	4288      	cmp	r0, r1
 802773a:	f6bf ae91 	bge.w	8027460 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802773e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8027740:	fb01 6303 	mla	r3, r1, r3, r6
 8027744:	141b      	asrs	r3, r3, #16
 8027746:	f53f ae8b 	bmi.w	8027460 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802774a:	3a01      	subs	r2, #1
 802774c:	4293      	cmp	r3, r2
 802774e:	f6bf ae87 	bge.w	8027460 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027754:	f8dd b018 	ldr.w	fp, [sp, #24]
 8027758:	1cdf      	adds	r7, r3, #3
 802775a:	f1bb 0f00 	cmp.w	fp, #0
 802775e:	dc6e      	bgt.n	802783e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8027760:	9b06      	ldr	r3, [sp, #24]
 8027762:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027768:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802776c:	4423      	add	r3, r4
 802776e:	9309      	str	r3, [sp, #36]	@ 0x24
 8027770:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027772:	2b00      	cmp	r3, #0
 8027774:	f340 81b0 	ble.w	8027ad8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8027778:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802777c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802777e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027782:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027786:	eef0 6a62 	vmov.f32	s13, s5
 802778a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802778e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027792:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027796:	ee16 5a90 	vmov	r5, s13
 802779a:	eef0 6a43 	vmov.f32	s13, s6
 802779e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277a2:	ee16 6a90 	vmov	r6, s13
 80277a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80277aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80277ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80277b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80277b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80277ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80277be:	ee12 2a90 	vmov	r2, s5
 80277c2:	eef0 2a47 	vmov.f32	s5, s14
 80277c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80277ca:	ee13 2a10 	vmov	r2, s6
 80277ce:	9325      	str	r3, [sp, #148]	@ 0x94
 80277d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80277d2:	eeb0 3a67 	vmov.f32	s6, s15
 80277d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80277da:	9326      	str	r3, [sp, #152]	@ 0x98
 80277dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80277de:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80277e0:	3b01      	subs	r3, #1
 80277e2:	9315      	str	r3, [sp, #84]	@ 0x54
 80277e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80277e6:	bf08      	it	eq
 80277e8:	4613      	moveq	r3, r2
 80277ea:	9306      	str	r3, [sp, #24]
 80277ec:	e60d      	b.n	802740a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80277ee:	2800      	cmp	r0, #0
 80277f0:	f43f ae7d 	beq.w	80274ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80277f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80277f8:	9307      	str	r3, [sp, #28]
 80277fa:	0e1b      	lsrs	r3, r3, #24
 80277fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80277fe:	e676      	b.n	80274ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027800:	7038      	strb	r0, [r7, #0]
 8027802:	7079      	strb	r1, [r7, #1]
 8027804:	e779      	b.n	80276fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8027806:	f112 0901 	adds.w	r9, r2, #1
 802780a:	f53f af78 	bmi.w	80276fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802780e:	454b      	cmp	r3, r9
 8027810:	f6ff af75 	blt.w	80276fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027814:	f11c 0901 	adds.w	r9, ip, #1
 8027818:	f53f af71 	bmi.w	80276fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802781c:	45ce      	cmp	lr, r9
 802781e:	f6ff af6e 	blt.w	80276fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027822:	b21b      	sxth	r3, r3
 8027824:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027828:	fa0f f28e 	sxth.w	r2, lr
 802782c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027830:	9200      	str	r2, [sp, #0]
 8027832:	4639      	mov	r1, r7
 8027834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027836:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8027838:	f7ff fca1 	bl	802717e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802783c:	e75f      	b.n	80276fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802783e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027840:	1429      	asrs	r1, r5, #16
 8027842:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027844:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027848:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802784c:	1433      	asrs	r3, r6, #16
 802784e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027852:	fb0c 1303 	mla	r3, ip, r3, r1
 8027856:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8027858:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802785c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8027860:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8027864:	2a00      	cmp	r2, #0
 8027866:	f000 8129 	beq.w	8027abc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802786a:	684c      	ldr	r4, [r1, #4]
 802786c:	940c      	str	r4, [sp, #48]	@ 0x30
 802786e:	0e24      	lsrs	r4, r4, #24
 8027870:	9413      	str	r4, [sp, #76]	@ 0x4c
 8027872:	b198      	cbz	r0, 802789c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027874:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8027878:	f10c 3cff 	add.w	ip, ip, #4294967295
 802787c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8027880:	f10c 0c04 	add.w	ip, ip, #4
 8027884:	eb01 080c 	add.w	r8, r1, ip
 8027888:	f851 100c 	ldr.w	r1, [r1, ip]
 802788c:	9108      	str	r1, [sp, #32]
 802788e:	0e09      	lsrs	r1, r1, #24
 8027890:	9110      	str	r1, [sp, #64]	@ 0x40
 8027892:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027896:	910d      	str	r1, [sp, #52]	@ 0x34
 8027898:	0e09      	lsrs	r1, r1, #24
 802789a:	9114      	str	r1, [sp, #80]	@ 0x50
 802789c:	b292      	uxth	r2, r2
 802789e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80278a0:	b280      	uxth	r0, r0
 80278a2:	fb02 f900 	mul.w	r9, r2, r0
 80278a6:	0112      	lsls	r2, r2, #4
 80278a8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80278ac:	eba2 0809 	sub.w	r8, r2, r9
 80278b0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80278b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80278b6:	b280      	uxth	r0, r0
 80278b8:	fa1f f888 	uxth.w	r8, r8
 80278bc:	1a09      	subs	r1, r1, r0
 80278be:	fb08 f202 	mul.w	r2, r8, r2
 80278c2:	b289      	uxth	r1, r1
 80278c4:	fb01 220e 	mla	r2, r1, lr, r2
 80278c8:	fb00 2204 	mla	r2, r0, r4, r2
 80278cc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80278ce:	fb09 2204 	mla	r2, r9, r4, r2
 80278d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80278d6:	2a00      	cmp	r2, #0
 80278d8:	f000 80e8 	beq.w	8027aac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80278dc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80278e0:	d01b      	beq.n	802791a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80278e2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80278e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80278ea:	fb0e fa0a 	mul.w	sl, lr, sl
 80278ee:	fb0e fe03 	mul.w	lr, lr, r3
 80278f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80278f6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80278fa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80278fe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027902:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027906:	4453      	add	r3, sl
 8027908:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802790c:	0a1b      	lsrs	r3, r3, #8
 802790e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027912:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027916:	ea43 030c 	orr.w	r3, r3, ip
 802791a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802791c:	2cff      	cmp	r4, #255	@ 0xff
 802791e:	d021      	beq.n	8027964 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8027920:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027922:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027926:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027928:	fb04 fc0c 	mul.w	ip, r4, ip
 802792c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802792e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027932:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027936:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027938:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802793c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027940:	fb04 fa0a 	mul.w	sl, r4, sl
 8027944:	44e6      	add	lr, ip
 8027946:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802794a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802794e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027952:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027956:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802795a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802795e:	ea4e 040a 	orr.w	r4, lr, sl
 8027962:	940c      	str	r4, [sp, #48]	@ 0x30
 8027964:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027966:	2cff      	cmp	r4, #255	@ 0xff
 8027968:	d021      	beq.n	80279ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 802796a:	9c08      	ldr	r4, [sp, #32]
 802796c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027970:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027972:	fb04 fc0c 	mul.w	ip, r4, ip
 8027976:	9c08      	ldr	r4, [sp, #32]
 8027978:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802797c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802797e:	fb04 fa0e 	mul.w	sl, r4, lr
 8027982:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027986:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802798a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802798e:	44e6      	add	lr, ip
 8027990:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027994:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027998:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802799c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80279a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80279a8:	ea4e 040a 	orr.w	r4, lr, sl
 80279ac:	9408      	str	r4, [sp, #32]
 80279ae:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80279b0:	2cff      	cmp	r4, #255	@ 0xff
 80279b2:	d021      	beq.n	80279f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80279b4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80279b6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80279ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80279bc:	fb04 fc0c 	mul.w	ip, r4, ip
 80279c0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80279c2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80279c6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80279ca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80279cc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80279d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80279d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80279d8:	44e6      	add	lr, ip
 80279da:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80279de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80279e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80279ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279ee:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80279f2:	ea4e 040a 	orr.w	r4, lr, sl
 80279f6:	940d      	str	r4, [sp, #52]	@ 0x34
 80279f8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80279fa:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80279fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027a02:	2aff      	cmp	r2, #255	@ 0xff
 8027a04:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027a08:	9c08      	ldr	r4, [sp, #32]
 8027a0a:	fb08 fc0c 	mul.w	ip, r8, ip
 8027a0e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027a12:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027a16:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027a18:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027a1c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027a20:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027a22:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027a26:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8027a2a:	fb08 f80e 	mul.w	r8, r8, lr
 8027a2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a32:	fb01 8303 	mla	r3, r1, r3, r8
 8027a36:	9908      	ldr	r1, [sp, #32]
 8027a38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027a3c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027a40:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8027a42:	fb00 330a 	mla	r3, r0, sl, r3
 8027a46:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8027a4a:	fb09 3e0e 	mla	lr, r9, lr, r3
 8027a4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a52:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027a56:	ea4c 0c0e 	orr.w	ip, ip, lr
 8027a5a:	fa5f f08c 	uxtb.w	r0, ip
 8027a5e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027a62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027a66:	d032      	beq.n	8027ace <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8027a68:	43d2      	mvns	r2, r2
 8027a6a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8027a6e:	b2d2      	uxtb	r2, r2
 8027a70:	fb0e fe02 	mul.w	lr, lr, r2
 8027a74:	f10e 0301 	add.w	r3, lr, #1
 8027a78:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8027a7c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027a80:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8027a84:	4350      	muls	r0, r2
 8027a86:	f807 3c03 	strb.w	r3, [r7, #-3]
 8027a8a:	1c43      	adds	r3, r0, #1
 8027a8c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027a90:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027a94:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8027a98:	4353      	muls	r3, r2
 8027a9a:	f807 1c02 	strb.w	r1, [r7, #-2]
 8027a9e:	1c5a      	adds	r2, r3, #1
 8027aa0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027aa4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8027aa8:	f807 cc01 	strb.w	ip, [r7, #-1]
 8027aac:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027aae:	3703      	adds	r7, #3
 8027ab0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027ab4:	441d      	add	r5, r3
 8027ab6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027ab8:	441e      	add	r6, r3
 8027aba:	e64e      	b.n	802775a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027abc:	2800      	cmp	r0, #0
 8027abe:	f43f aeed 	beq.w	802789c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027ac2:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8027ac6:	9108      	str	r1, [sp, #32]
 8027ac8:	0e09      	lsrs	r1, r1, #24
 8027aca:	9110      	str	r1, [sp, #64]	@ 0x40
 8027acc:	e6e6      	b.n	802789c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027ace:	f807 0c03 	strb.w	r0, [r7, #-3]
 8027ad2:	f807 1c02 	strb.w	r1, [r7, #-2]
 8027ad6:	e7e7      	b.n	8027aa8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8027ad8:	b019      	add	sp, #100	@ 0x64
 8027ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027ae0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8027ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ae4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8027ae8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027aec:	2c00      	cmp	r4, #0
 8027aee:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8027af2:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8027af6:	fb00 4e03 	mla	lr, r0, r3, r4
 8027afa:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8027afe:	f2c0 80b8 	blt.w	8027c72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b02:	45a1      	cmp	r9, r4
 8027b04:	f340 80b5 	ble.w	8027c72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b08:	2800      	cmp	r0, #0
 8027b0a:	f2c0 80b2 	blt.w	8027c72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b0e:	4580      	cmp	r8, r0
 8027b10:	f340 80af 	ble.w	8027c72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b14:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8027b18:	f01e 0f01 	tst.w	lr, #1
 8027b1c:	5d56      	ldrb	r6, [r2, r5]
 8027b1e:	bf0c      	ite	eq
 8027b20:	f006 060f 	andeq.w	r6, r6, #15
 8027b24:	1136      	asrne	r6, r6, #4
 8027b26:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027b2a:	b2f6      	uxtb	r6, r6
 8027b2c:	f114 0a01 	adds.w	sl, r4, #1
 8027b30:	f100 80a1 	bmi.w	8027c76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b34:	45d1      	cmp	r9, sl
 8027b36:	f340 809e 	ble.w	8027c76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b3a:	2800      	cmp	r0, #0
 8027b3c:	f2c0 809b 	blt.w	8027c76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b40:	4580      	cmp	r8, r0
 8027b42:	f340 8098 	ble.w	8027c76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b46:	2f00      	cmp	r7, #0
 8027b48:	f000 8097 	beq.w	8027c7a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8027b4c:	f10e 0b01 	add.w	fp, lr, #1
 8027b50:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027b54:	f01b 0f01 	tst.w	fp, #1
 8027b58:	5d55      	ldrb	r5, [r2, r5]
 8027b5a:	bf0c      	ite	eq
 8027b5c:	f005 050f 	andeq.w	r5, r5, #15
 8027b60:	112d      	asrne	r5, r5, #4
 8027b62:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027b66:	b2ed      	uxtb	r5, r5
 8027b68:	f1bc 0f00 	cmp.w	ip, #0
 8027b6c:	f000 8089 	beq.w	8027c82 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8027b70:	2c00      	cmp	r4, #0
 8027b72:	f100 0001 	add.w	r0, r0, #1
 8027b76:	f2c0 8082 	blt.w	8027c7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027b7a:	45a1      	cmp	r9, r4
 8027b7c:	dd7f      	ble.n	8027c7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027b7e:	2800      	cmp	r0, #0
 8027b80:	db7d      	blt.n	8027c7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027b82:	4580      	cmp	r8, r0
 8027b84:	dd7b      	ble.n	8027c7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027b86:	eb03 0b0e 	add.w	fp, r3, lr
 8027b8a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8027b8e:	f01b 0f01 	tst.w	fp, #1
 8027b92:	5d14      	ldrb	r4, [r2, r4]
 8027b94:	bf0c      	ite	eq
 8027b96:	f004 040f 	andeq.w	r4, r4, #15
 8027b9a:	1124      	asrne	r4, r4, #4
 8027b9c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027ba0:	b2e4      	uxtb	r4, r4
 8027ba2:	f1ba 0f00 	cmp.w	sl, #0
 8027ba6:	db6f      	blt.n	8027c88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027ba8:	45d1      	cmp	r9, sl
 8027baa:	dd6d      	ble.n	8027c88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027bac:	2800      	cmp	r0, #0
 8027bae:	db6b      	blt.n	8027c88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027bb0:	4580      	cmp	r8, r0
 8027bb2:	dd69      	ble.n	8027c88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027bb4:	2f00      	cmp	r7, #0
 8027bb6:	d069      	beq.n	8027c8c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8027bb8:	3301      	adds	r3, #1
 8027bba:	449e      	add	lr, r3
 8027bbc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027bc0:	f01e 0f01 	tst.w	lr, #1
 8027bc4:	5cd0      	ldrb	r0, [r2, r3]
 8027bc6:	bf0c      	ite	eq
 8027bc8:	f000 000f 	andeq.w	r0, r0, #15
 8027bcc:	1100      	asrne	r0, r0, #4
 8027bce:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027bd2:	b2c3      	uxtb	r3, r0
 8027bd4:	b2ba      	uxth	r2, r7
 8027bd6:	fa1f fc8c 	uxth.w	ip, ip
 8027bda:	fb02 f00c 	mul.w	r0, r2, ip
 8027bde:	0112      	lsls	r2, r2, #4
 8027be0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027be4:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8027be8:	1a12      	subs	r2, r2, r0
 8027bea:	fa1f fc8c 	uxth.w	ip, ip
 8027bee:	b292      	uxth	r2, r2
 8027bf0:	eba7 070c 	sub.w	r7, r7, ip
 8027bf4:	436a      	muls	r2, r5
 8027bf6:	b2bf      	uxth	r7, r7
 8027bf8:	fb06 2207 	mla	r2, r6, r7, r2
 8027bfc:	fb0c 2404 	mla	r4, ip, r4, r2
 8027c00:	fb00 4303 	mla	r3, r0, r3, r4
 8027c04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c08:	b38b      	cbz	r3, 8027c6e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8027c0a:	4a21      	ldr	r2, [pc, #132]	@ (8027c90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8027c0c:	6814      	ldr	r4, [r2, #0]
 8027c0e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8027c12:	b2e5      	uxtb	r5, r4
 8027c14:	4353      	muls	r3, r2
 8027c16:	1c5a      	adds	r2, r3, #1
 8027c18:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027c1c:	1212      	asrs	r2, r2, #8
 8027c1e:	b290      	uxth	r0, r2
 8027c20:	43d2      	mvns	r2, r2
 8027c22:	fb15 f500 	smulbb	r5, r5, r0
 8027c26:	b2d3      	uxtb	r3, r2
 8027c28:	780a      	ldrb	r2, [r1, #0]
 8027c2a:	fb02 5203 	mla	r2, r2, r3, r5
 8027c2e:	b292      	uxth	r2, r2
 8027c30:	1c55      	adds	r5, r2, #1
 8027c32:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027c36:	784d      	ldrb	r5, [r1, #1]
 8027c38:	fb15 f503 	smulbb	r5, r5, r3
 8027c3c:	1212      	asrs	r2, r2, #8
 8027c3e:	700a      	strb	r2, [r1, #0]
 8027c40:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8027c44:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027c48:	fb02 5200 	mla	r2, r2, r0, r5
 8027c4c:	b292      	uxth	r2, r2
 8027c4e:	1c55      	adds	r5, r2, #1
 8027c50:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027c54:	1212      	asrs	r2, r2, #8
 8027c56:	704a      	strb	r2, [r1, #1]
 8027c58:	788a      	ldrb	r2, [r1, #2]
 8027c5a:	fb12 f303 	smulbb	r3, r2, r3
 8027c5e:	fb04 3300 	mla	r3, r4, r0, r3
 8027c62:	b29b      	uxth	r3, r3
 8027c64:	1c5a      	adds	r2, r3, #1
 8027c66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027c6a:	121b      	asrs	r3, r3, #8
 8027c6c:	708b      	strb	r3, [r1, #2]
 8027c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c72:	2600      	movs	r6, #0
 8027c74:	e75a      	b.n	8027b2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8027c76:	2500      	movs	r5, #0
 8027c78:	e776      	b.n	8027b68 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027c7a:	463d      	mov	r5, r7
 8027c7c:	e774      	b.n	8027b68 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027c7e:	2400      	movs	r4, #0
 8027c80:	e78f      	b.n	8027ba2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8027c82:	4663      	mov	r3, ip
 8027c84:	4664      	mov	r4, ip
 8027c86:	e7a5      	b.n	8027bd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027c88:	2300      	movs	r3, #0
 8027c8a:	e7a3      	b.n	8027bd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027c8c:	463b      	mov	r3, r7
 8027c8e:	e7a1      	b.n	8027bd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027c90:	24028780 	.word	0x24028780

08027c94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c98:	b097      	sub	sp, #92	@ 0x5c
 8027c9a:	9214      	str	r2, [sp, #80]	@ 0x50
 8027c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c9e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027ca0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8027ca4:	9015      	str	r0, [sp, #84]	@ 0x54
 8027ca6:	910c      	str	r1, [sp, #48]	@ 0x30
 8027ca8:	6850      	ldr	r0, [r2, #4]
 8027caa:	930e      	str	r3, [sp, #56]	@ 0x38
 8027cac:	6812      	ldr	r2, [r2, #0]
 8027cae:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8027cb2:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8027cb6:	fb00 1303 	mla	r3, r0, r3, r1
 8027cba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027cbe:	eb02 0a03 	add.w	sl, r2, r3
 8027cc2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027cc4:	689b      	ldr	r3, [r3, #8]
 8027cc6:	3301      	adds	r3, #1
 8027cc8:	f023 0301 	bic.w	r3, r3, #1
 8027ccc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027cce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027cd0:	681f      	ldr	r7, [r3, #0]
 8027cd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027cd4:	2b00      	cmp	r3, #0
 8027cd6:	dc03      	bgt.n	8027ce0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8027cd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027cda:	2b00      	cmp	r3, #0
 8027cdc:	f340 8247 	ble.w	802816e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027ce0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027ce2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027ce6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027cea:	1e48      	subs	r0, r1, #1
 8027cec:	f102 3cff 	add.w	ip, r2, #4294967295
 8027cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027cf2:	2b00      	cmp	r3, #0
 8027cf4:	f340 80e5 	ble.w	8027ec2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027cf8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8027cfc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027d00:	d406      	bmi.n	8027d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d02:	4586      	cmp	lr, r0
 8027d04:	da04      	bge.n	8027d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	db02      	blt.n	8027d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d0a:	4563      	cmp	r3, ip
 8027d0c:	f2c0 80da 	blt.w	8027ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027d10:	f11e 0e01 	adds.w	lr, lr, #1
 8027d14:	f100 80cb 	bmi.w	8027eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d18:	4571      	cmp	r1, lr
 8027d1a:	f2c0 80c8 	blt.w	8027eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d1e:	3301      	adds	r3, #1
 8027d20:	f100 80c5 	bmi.w	8027eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d24:	429a      	cmp	r2, r3
 8027d26:	f2c0 80c2 	blt.w	8027eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d2c:	46d0      	mov	r8, sl
 8027d2e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8027d32:	930d      	str	r3, [sp, #52]	@ 0x34
 8027d34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027d36:	2b00      	cmp	r3, #0
 8027d38:	f340 80e3 	ble.w	8027f02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027d3c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d3e:	1430      	asrs	r0, r6, #16
 8027d40:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027d44:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027d48:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027d4c:	142b      	asrs	r3, r5, #16
 8027d4e:	f100 812e 	bmi.w	8027fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027d52:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027d56:	455b      	cmp	r3, fp
 8027d58:	f280 8129 	bge.w	8027fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027d5c:	2800      	cmp	r0, #0
 8027d5e:	f2c0 8126 	blt.w	8027fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027d62:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027d66:	4558      	cmp	r0, fp
 8027d68:	f280 8121 	bge.w	8027fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027d6c:	fb00 3309 	mla	r3, r0, r9, r3
 8027d70:	0858      	lsrs	r0, r3, #1
 8027d72:	07dc      	lsls	r4, r3, #31
 8027d74:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027d78:	bf54      	ite	pl
 8027d7a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027d7e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027d82:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027d86:	fa5f fc8c 	uxtb.w	ip, ip
 8027d8a:	2a00      	cmp	r2, #0
 8027d8c:	f000 80fe 	beq.w	8027f8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8027d90:	1c58      	adds	r0, r3, #1
 8027d92:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027d96:	07c0      	lsls	r0, r0, #31
 8027d98:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027d9c:	bf54      	ite	pl
 8027d9e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027da2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027da6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027daa:	fa5f f08e 	uxtb.w	r0, lr
 8027dae:	9010      	str	r0, [sp, #64]	@ 0x40
 8027db0:	b1d9      	cbz	r1, 8027dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027db2:	444b      	add	r3, r9
 8027db4:	0858      	lsrs	r0, r3, #1
 8027db6:	07dc      	lsls	r4, r3, #31
 8027db8:	f103 0301 	add.w	r3, r3, #1
 8027dbc:	5c38      	ldrb	r0, [r7, r0]
 8027dbe:	bf54      	ite	pl
 8027dc0:	f000 000f 	andpl.w	r0, r0, #15
 8027dc4:	1100      	asrmi	r0, r0, #4
 8027dc6:	07dc      	lsls	r4, r3, #31
 8027dc8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027dcc:	b2c0      	uxtb	r0, r0
 8027dce:	900a      	str	r0, [sp, #40]	@ 0x28
 8027dd0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027dd4:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027dd8:	bf54      	ite	pl
 8027dda:	f00e 030f 	andpl.w	r3, lr, #15
 8027dde:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027de2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027de6:	b2db      	uxtb	r3, r3
 8027de8:	9311      	str	r3, [sp, #68]	@ 0x44
 8027dea:	b292      	uxth	r2, r2
 8027dec:	b289      	uxth	r1, r1
 8027dee:	0113      	lsls	r3, r2, #4
 8027df0:	fb02 f001 	mul.w	r0, r2, r1
 8027df4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027df6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8027dfa:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8027dfe:	1a1b      	subs	r3, r3, r0
 8027e00:	b289      	uxth	r1, r1
 8027e02:	b29b      	uxth	r3, r3
 8027e04:	ebae 0e01 	sub.w	lr, lr, r1
 8027e08:	4353      	muls	r3, r2
 8027e0a:	fa1f fe8e 	uxth.w	lr, lr
 8027e0e:	fb0c 320e 	mla	r2, ip, lr, r3
 8027e12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027e14:	fb01 2203 	mla	r2, r1, r3, r2
 8027e18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027e1a:	fb00 2203 	mla	r2, r0, r3, r2
 8027e1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027e22:	2a00      	cmp	r2, #0
 8027e24:	d039      	beq.n	8027e9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027e26:	4bc7      	ldr	r3, [pc, #796]	@ (8028144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027e28:	6819      	ldr	r1, [r3, #0]
 8027e2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027e2c:	fa5f fc81 	uxtb.w	ip, r1
 8027e30:	435a      	muls	r2, r3
 8027e32:	1c53      	adds	r3, r2, #1
 8027e34:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027e38:	1212      	asrs	r2, r2, #8
 8027e3a:	b290      	uxth	r0, r2
 8027e3c:	43d2      	mvns	r2, r2
 8027e3e:	fb1c fc00 	smulbb	ip, ip, r0
 8027e42:	b2d3      	uxtb	r3, r2
 8027e44:	f898 2000 	ldrb.w	r2, [r8]
 8027e48:	fb02 c203 	mla	r2, r2, r3, ip
 8027e4c:	b292      	uxth	r2, r2
 8027e4e:	f102 0c01 	add.w	ip, r2, #1
 8027e52:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027e56:	f898 c001 	ldrb.w	ip, [r8, #1]
 8027e5a:	fb1c fc03 	smulbb	ip, ip, r3
 8027e5e:	1212      	asrs	r2, r2, #8
 8027e60:	f888 2000 	strb.w	r2, [r8]
 8027e64:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8027e68:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8027e6c:	fb02 c200 	mla	r2, r2, r0, ip
 8027e70:	b292      	uxth	r2, r2
 8027e72:	f102 0c01 	add.w	ip, r2, #1
 8027e76:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027e7a:	1212      	asrs	r2, r2, #8
 8027e7c:	f888 2001 	strb.w	r2, [r8, #1]
 8027e80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8027e84:	fb12 f303 	smulbb	r3, r2, r3
 8027e88:	fb01 3300 	mla	r3, r1, r0, r3
 8027e8c:	b29b      	uxth	r3, r3
 8027e8e:	1c5a      	adds	r2, r3, #1
 8027e90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027e94:	121b      	asrs	r3, r3, #8
 8027e96:	f888 3002 	strb.w	r3, [r8, #2]
 8027e9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027e9c:	f108 0803 	add.w	r8, r8, #3
 8027ea0:	441d      	add	r5, r3
 8027ea2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027ea4:	441e      	add	r6, r3
 8027ea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027ea8:	3b01      	subs	r3, #1
 8027eaa:	930d      	str	r3, [sp, #52]	@ 0x34
 8027eac:	e742      	b.n	8027d34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027eae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027eb0:	f10a 0a03 	add.w	sl, sl, #3
 8027eb4:	441d      	add	r5, r3
 8027eb6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027eb8:	441e      	add	r6, r3
 8027eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ebc:	3b01      	subs	r3, #1
 8027ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8027ec0:	e716      	b.n	8027cf0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027ec2:	d024      	beq.n	8027f0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8027ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ec6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027ec8:	3b01      	subs	r3, #1
 8027eca:	fb00 5003 	mla	r0, r0, r3, r5
 8027ece:	1400      	asrs	r0, r0, #16
 8027ed0:	f53f af2b 	bmi.w	8027d2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027ed4:	3901      	subs	r1, #1
 8027ed6:	4288      	cmp	r0, r1
 8027ed8:	f6bf af27 	bge.w	8027d2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027edc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027ede:	fb01 6303 	mla	r3, r1, r3, r6
 8027ee2:	141b      	asrs	r3, r3, #16
 8027ee4:	f53f af21 	bmi.w	8027d2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027ee8:	3a01      	subs	r2, #1
 8027eea:	4293      	cmp	r3, r2
 8027eec:	f6bf af1d 	bge.w	8027d2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027ef0:	f10a 0e03 	add.w	lr, sl, #3
 8027ef4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8027ef8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8027efc:	f1b8 0f00 	cmp.w	r8, #0
 8027f00:	dc76      	bgt.n	8027ff0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8027f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027f08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027f0c:	44a2      	add	sl, r4
 8027f0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027f10:	2b00      	cmp	r3, #0
 8027f12:	f340 812c 	ble.w	802816e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027f1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027f20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027f24:	eef0 6a62 	vmov.f32	s13, s5
 8027f28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027f30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f34:	ee16 5a90 	vmov	r5, s13
 8027f38:	eef0 6a43 	vmov.f32	s13, s6
 8027f3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f40:	ee16 6a90 	vmov	r6, s13
 8027f44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027f48:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027f4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027f50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027f54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027f58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027f5c:	ee12 2a90 	vmov	r2, s5
 8027f60:	eef0 2a47 	vmov.f32	s5, s14
 8027f64:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f68:	ee13 2a10 	vmov	r2, s6
 8027f6c:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027f6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f70:	eeb0 3a67 	vmov.f32	s6, s15
 8027f74:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f78:	9324      	str	r3, [sp, #144]	@ 0x90
 8027f7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027f7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027f7e:	3b01      	subs	r3, #1
 8027f80:	930c      	str	r3, [sp, #48]	@ 0x30
 8027f82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f84:	bf08      	it	eq
 8027f86:	4613      	moveq	r3, r2
 8027f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8027f8a:	e6a2      	b.n	8027cd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8027f8c:	2900      	cmp	r1, #0
 8027f8e:	f43f af2c 	beq.w	8027dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027f92:	eb09 0003 	add.w	r0, r9, r3
 8027f96:	0843      	lsrs	r3, r0, #1
 8027f98:	07c0      	lsls	r0, r0, #31
 8027f9a:	5cfb      	ldrb	r3, [r7, r3]
 8027f9c:	bf54      	ite	pl
 8027f9e:	f003 030f 	andpl.w	r3, r3, #15
 8027fa2:	111b      	asrmi	r3, r3, #4
 8027fa4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027fa8:	b2db      	uxtb	r3, r3
 8027faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8027fac:	e71d      	b.n	8027dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027fae:	f113 0b01 	adds.w	fp, r3, #1
 8027fb2:	f53f af72 	bmi.w	8027e9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027fb6:	45dc      	cmp	ip, fp
 8027fb8:	f6ff af6f 	blt.w	8027e9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027fbc:	f110 0b01 	adds.w	fp, r0, #1
 8027fc0:	f53f af6b 	bmi.w	8027e9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027fc4:	45de      	cmp	lr, fp
 8027fc6:	f6ff af68 	blt.w	8027e9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027fca:	9302      	str	r3, [sp, #8]
 8027fcc:	fa0f f38e 	sxth.w	r3, lr
 8027fd0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027fd2:	9301      	str	r3, [sp, #4]
 8027fd4:	fa0f f38c 	sxth.w	r3, ip
 8027fd8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027fdc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8027fe0:	9300      	str	r3, [sp, #0]
 8027fe2:	463a      	mov	r2, r7
 8027fe4:	464b      	mov	r3, r9
 8027fe6:	4641      	mov	r1, r8
 8027fe8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027fea:	f7ff fd79 	bl	8027ae0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8027fee:	e754      	b.n	8027e9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027ff0:	142a      	asrs	r2, r5, #16
 8027ff2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027ff6:	1433      	asrs	r3, r6, #16
 8027ff8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027ffc:	fb09 2303 	mla	r3, r9, r3, r2
 8028000:	085a      	lsrs	r2, r3, #1
 8028002:	07dc      	lsls	r4, r3, #31
 8028004:	5cba      	ldrb	r2, [r7, r2]
 8028006:	bf54      	ite	pl
 8028008:	f002 020f 	andpl.w	r2, r2, #15
 802800c:	1112      	asrmi	r2, r2, #4
 802800e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028012:	b2d2      	uxtb	r2, r2
 8028014:	2900      	cmp	r1, #0
 8028016:	f000 8097 	beq.w	8028148 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802801a:	f103 0b01 	add.w	fp, r3, #1
 802801e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8028022:	f01b 0f01 	tst.w	fp, #1
 8028026:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802802a:	bf0c      	ite	eq
 802802c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028030:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028034:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028038:	fa5f f48c 	uxtb.w	r4, ip
 802803c:	9412      	str	r4, [sp, #72]	@ 0x48
 802803e:	b300      	cbz	r0, 8028082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8028040:	444b      	add	r3, r9
 8028042:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028046:	07dc      	lsls	r4, r3, #31
 8028048:	f103 0301 	add.w	r3, r3, #1
 802804c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028050:	bf54      	ite	pl
 8028052:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028056:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802805a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802805e:	fa5f f48c 	uxtb.w	r4, ip
 8028062:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028066:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028068:	07dc      	lsls	r4, r3, #31
 802806a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802806e:	bf54      	ite	pl
 8028070:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028074:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028078:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802807c:	fa5f f38c 	uxtb.w	r3, ip
 8028080:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028082:	b289      	uxth	r1, r1
 8028084:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8028086:	b280      	uxth	r0, r0
 8028088:	fb01 f300 	mul.w	r3, r1, r0
 802808c:	0109      	lsls	r1, r1, #4
 802808e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028092:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8028096:	1ac9      	subs	r1, r1, r3
 8028098:	b280      	uxth	r0, r0
 802809a:	b289      	uxth	r1, r1
 802809c:	ebac 0c00 	sub.w	ip, ip, r0
 80280a0:	4361      	muls	r1, r4
 80280a2:	fa1f fc8c 	uxth.w	ip, ip
 80280a6:	fb02 120c 	mla	r2, r2, ip, r1
 80280aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80280ac:	fb00 2001 	mla	r0, r0, r1, r2
 80280b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80280b2:	fb03 0302 	mla	r3, r3, r2, r0
 80280b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80280ba:	2b00      	cmp	r3, #0
 80280bc:	d039      	beq.n	8028132 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80280be:	4a21      	ldr	r2, [pc, #132]	@ (8028144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80280c0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80280c4:	6810      	ldr	r0, [r2, #0]
 80280c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80280c8:	fa5f fc80 	uxtb.w	ip, r0
 80280cc:	4353      	muls	r3, r2
 80280ce:	1c5a      	adds	r2, r3, #1
 80280d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80280d4:	121b      	asrs	r3, r3, #8
 80280d6:	b29a      	uxth	r2, r3
 80280d8:	43db      	mvns	r3, r3
 80280da:	fb1c fc02 	smulbb	ip, ip, r2
 80280de:	b2db      	uxtb	r3, r3
 80280e0:	fb01 c103 	mla	r1, r1, r3, ip
 80280e4:	b289      	uxth	r1, r1
 80280e6:	f101 0c01 	add.w	ip, r1, #1
 80280ea:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80280ee:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80280f2:	fb1c fc03 	smulbb	ip, ip, r3
 80280f6:	1209      	asrs	r1, r1, #8
 80280f8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80280fc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8028100:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8028104:	fb01 c102 	mla	r1, r1, r2, ip
 8028108:	b289      	uxth	r1, r1
 802810a:	f101 0c01 	add.w	ip, r1, #1
 802810e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8028112:	1209      	asrs	r1, r1, #8
 8028114:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8028118:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802811c:	fb11 f303 	smulbb	r3, r1, r3
 8028120:	fb00 3002 	mla	r0, r0, r2, r3
 8028124:	b280      	uxth	r0, r0
 8028126:	1c42      	adds	r2, r0, #1
 8028128:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802812c:	1200      	asrs	r0, r0, #8
 802812e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8028132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028134:	f10e 0e03 	add.w	lr, lr, #3
 8028138:	f108 38ff 	add.w	r8, r8, #4294967295
 802813c:	441d      	add	r5, r3
 802813e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028140:	441e      	add	r6, r3
 8028142:	e6db      	b.n	8027efc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8028144:	24028780 	.word	0x24028780
 8028148:	2800      	cmp	r0, #0
 802814a:	d09a      	beq.n	8028082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802814c:	444b      	add	r3, r9
 802814e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028152:	07db      	lsls	r3, r3, #31
 8028154:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028158:	bf54      	ite	pl
 802815a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802815e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028162:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028166:	fa5f f38c 	uxtb.w	r3, ip
 802816a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802816c:	e789      	b.n	8028082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802816e:	b017      	add	sp, #92	@ 0x5c
 8028170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028174 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8028174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028178:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 802817c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028180:	2d00      	cmp	r5, #0
 8028182:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8028186:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 802818a:	fb04 5e03 	mla	lr, r4, r3, r5
 802818e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8028192:	f2c0 80b1 	blt.w	80282f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8028196:	45a9      	cmp	r9, r5
 8028198:	f340 80ae 	ble.w	80282f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802819c:	2c00      	cmp	r4, #0
 802819e:	f2c0 80ab 	blt.w	80282f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80281a2:	45a0      	cmp	r8, r4
 80281a4:	f340 80a8 	ble.w	80282f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80281a8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80281ac:	f01e 0f01 	tst.w	lr, #1
 80281b0:	5d97      	ldrb	r7, [r2, r6]
 80281b2:	bf0c      	ite	eq
 80281b4:	f007 070f 	andeq.w	r7, r7, #15
 80281b8:	113f      	asrne	r7, r7, #4
 80281ba:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 80281be:	b2ff      	uxtb	r7, r7
 80281c0:	f115 0a01 	adds.w	sl, r5, #1
 80281c4:	f100 809a 	bmi.w	80282fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80281c8:	45d1      	cmp	r9, sl
 80281ca:	f340 8097 	ble.w	80282fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80281ce:	2c00      	cmp	r4, #0
 80281d0:	f2c0 8094 	blt.w	80282fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80281d4:	45a0      	cmp	r8, r4
 80281d6:	f340 8091 	ble.w	80282fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80281da:	2800      	cmp	r0, #0
 80281dc:	f000 8090 	beq.w	8028300 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80281e0:	f10e 0b01 	add.w	fp, lr, #1
 80281e4:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80281e8:	f01b 0f01 	tst.w	fp, #1
 80281ec:	5d96      	ldrb	r6, [r2, r6]
 80281ee:	bf0c      	ite	eq
 80281f0:	f006 060f 	andeq.w	r6, r6, #15
 80281f4:	1136      	asrne	r6, r6, #4
 80281f6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80281fa:	b2f6      	uxtb	r6, r6
 80281fc:	f1bc 0f00 	cmp.w	ip, #0
 8028200:	f000 8082 	beq.w	8028308 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8028204:	2d00      	cmp	r5, #0
 8028206:	f104 0401 	add.w	r4, r4, #1
 802820a:	db7b      	blt.n	8028304 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802820c:	45a9      	cmp	r9, r5
 802820e:	dd79      	ble.n	8028304 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028210:	2c00      	cmp	r4, #0
 8028212:	db77      	blt.n	8028304 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028214:	45a0      	cmp	r8, r4
 8028216:	dd75      	ble.n	8028304 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028218:	eb03 0b0e 	add.w	fp, r3, lr
 802821c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8028220:	f01b 0f01 	tst.w	fp, #1
 8028224:	5d55      	ldrb	r5, [r2, r5]
 8028226:	bf0c      	ite	eq
 8028228:	f005 050f 	andeq.w	r5, r5, #15
 802822c:	112d      	asrne	r5, r5, #4
 802822e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028232:	b2ed      	uxtb	r5, r5
 8028234:	f1ba 0f00 	cmp.w	sl, #0
 8028238:	db69      	blt.n	802830e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802823a:	45d1      	cmp	r9, sl
 802823c:	dd67      	ble.n	802830e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802823e:	2c00      	cmp	r4, #0
 8028240:	db65      	blt.n	802830e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028242:	45a0      	cmp	r8, r4
 8028244:	dd63      	ble.n	802830e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8028246:	2800      	cmp	r0, #0
 8028248:	d063      	beq.n	8028312 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802824a:	3301      	adds	r3, #1
 802824c:	449e      	add	lr, r3
 802824e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028252:	f01e 0f01 	tst.w	lr, #1
 8028256:	5cd4      	ldrb	r4, [r2, r3]
 8028258:	bf0c      	ite	eq
 802825a:	f004 040f 	andeq.w	r4, r4, #15
 802825e:	1124      	asrne	r4, r4, #4
 8028260:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028264:	b2e3      	uxtb	r3, r4
 8028266:	b282      	uxth	r2, r0
 8028268:	fa1f fc8c 	uxth.w	ip, ip
 802826c:	fb02 f40c 	mul.w	r4, r2, ip
 8028270:	0112      	lsls	r2, r2, #4
 8028272:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8028276:	fa1f f08c 	uxth.w	r0, ip
 802827a:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802827e:	1b12      	subs	r2, r2, r4
 8028280:	ebac 0c00 	sub.w	ip, ip, r0
 8028284:	b292      	uxth	r2, r2
 8028286:	fa1f fc8c 	uxth.w	ip, ip
 802828a:	4372      	muls	r2, r6
 802828c:	fb07 220c 	mla	r2, r7, ip, r2
 8028290:	fb00 2005 	mla	r0, r0, r5, r2
 8028294:	fb04 0303 	mla	r3, r4, r3, r0
 8028298:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802829c:	b353      	cbz	r3, 80282f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802829e:	4a1e      	ldr	r2, [pc, #120]	@ (8028318 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80282a0:	7808      	ldrb	r0, [r1, #0]
 80282a2:	6814      	ldr	r4, [r2, #0]
 80282a4:	b29a      	uxth	r2, r3
 80282a6:	43db      	mvns	r3, r3
 80282a8:	b2e5      	uxtb	r5, r4
 80282aa:	b2db      	uxtb	r3, r3
 80282ac:	fb15 f502 	smulbb	r5, r5, r2
 80282b0:	fb00 5003 	mla	r0, r0, r3, r5
 80282b4:	b280      	uxth	r0, r0
 80282b6:	1c45      	adds	r5, r0, #1
 80282b8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80282bc:	784d      	ldrb	r5, [r1, #1]
 80282be:	fb15 f503 	smulbb	r5, r5, r3
 80282c2:	1200      	asrs	r0, r0, #8
 80282c4:	7008      	strb	r0, [r1, #0]
 80282c6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80282ca:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80282ce:	fb00 5002 	mla	r0, r0, r2, r5
 80282d2:	b280      	uxth	r0, r0
 80282d4:	1c45      	adds	r5, r0, #1
 80282d6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80282da:	1200      	asrs	r0, r0, #8
 80282dc:	7048      	strb	r0, [r1, #1]
 80282de:	7888      	ldrb	r0, [r1, #2]
 80282e0:	fb10 f303 	smulbb	r3, r0, r3
 80282e4:	fb04 3202 	mla	r2, r4, r2, r3
 80282e8:	b292      	uxth	r2, r2
 80282ea:	1c53      	adds	r3, r2, #1
 80282ec:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80282f0:	1212      	asrs	r2, r2, #8
 80282f2:	708a      	strb	r2, [r1, #2]
 80282f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282f8:	2700      	movs	r7, #0
 80282fa:	e761      	b.n	80281c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80282fc:	2600      	movs	r6, #0
 80282fe:	e77d      	b.n	80281fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8028300:	4606      	mov	r6, r0
 8028302:	e77b      	b.n	80281fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8028304:	2500      	movs	r5, #0
 8028306:	e795      	b.n	8028234 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8028308:	4663      	mov	r3, ip
 802830a:	4665      	mov	r5, ip
 802830c:	e7ab      	b.n	8028266 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802830e:	2300      	movs	r3, #0
 8028310:	e7a9      	b.n	8028266 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028312:	4603      	mov	r3, r0
 8028314:	e7a7      	b.n	8028266 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028316:	bf00      	nop
 8028318:	24028780 	.word	0x24028780

0802831c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028320:	b093      	sub	sp, #76	@ 0x4c
 8028322:	461c      	mov	r4, r3
 8028324:	920c      	str	r2, [sp, #48]	@ 0x30
 8028326:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028328:	9011      	str	r0, [sp, #68]	@ 0x44
 802832a:	9107      	str	r1, [sp, #28]
 802832c:	6850      	ldr	r0, [r2, #4]
 802832e:	6812      	ldr	r2, [r2, #0]
 8028330:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8028334:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8028338:	fb00 1303 	mla	r3, r0, r3, r1
 802833c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028340:	eb02 0b03 	add.w	fp, r2, r3
 8028344:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028346:	689b      	ldr	r3, [r3, #8]
 8028348:	3301      	adds	r3, #1
 802834a:	f023 0301 	bic.w	r3, r3, #1
 802834e:	9309      	str	r3, [sp, #36]	@ 0x24
 8028350:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028352:	f8d3 8000 	ldr.w	r8, [r3]
 8028356:	9b07      	ldr	r3, [sp, #28]
 8028358:	2b00      	cmp	r3, #0
 802835a:	dc03      	bgt.n	8028364 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802835c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802835e:	2b00      	cmp	r3, #0
 8028360:	f340 822b 	ble.w	80287ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028364:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028366:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802836a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802836e:	1e48      	subs	r0, r1, #1
 8028370:	1e57      	subs	r7, r2, #1
 8028372:	2c00      	cmp	r4, #0
 8028374:	f340 80d7 	ble.w	8028526 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8028378:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802837c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028380:	d406      	bmi.n	8028390 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028382:	4584      	cmp	ip, r0
 8028384:	da04      	bge.n	8028390 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028386:	2b00      	cmp	r3, #0
 8028388:	db02      	blt.n	8028390 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802838a:	42bb      	cmp	r3, r7
 802838c:	f2c0 80cc 	blt.w	8028528 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8028390:	f11c 0c01 	adds.w	ip, ip, #1
 8028394:	f100 80bf 	bmi.w	8028516 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028398:	4561      	cmp	r1, ip
 802839a:	f2c0 80bc 	blt.w	8028516 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802839e:	3301      	adds	r3, #1
 80283a0:	f100 80b9 	bmi.w	8028516 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80283a4:	429a      	cmp	r2, r3
 80283a6:	f2c0 80b6 	blt.w	8028516 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80283aa:	46a2      	mov	sl, r4
 80283ac:	465f      	mov	r7, fp
 80283ae:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80283b2:	f1ba 0f00 	cmp.w	sl, #0
 80283b6:	f340 80d4 	ble.w	8028562 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80283ba:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80283be:	1430      	asrs	r0, r6, #16
 80283c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80283c4:	9308      	str	r3, [sp, #32]
 80283c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80283c8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80283cc:	142b      	asrs	r3, r5, #16
 80283ce:	f100 8124 	bmi.w	802861a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80283d2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80283d6:	4293      	cmp	r3, r2
 80283d8:	f280 811f 	bge.w	802861a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80283dc:	2800      	cmp	r0, #0
 80283de:	f2c0 811c 	blt.w	802861a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80283e2:	f10e 32ff 	add.w	r2, lr, #4294967295
 80283e6:	4290      	cmp	r0, r2
 80283e8:	f280 8117 	bge.w	802861a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80283ec:	fb00 3309 	mla	r3, r0, r9, r3
 80283f0:	0858      	lsrs	r0, r3, #1
 80283f2:	07da      	lsls	r2, r3, #31
 80283f4:	9a08      	ldr	r2, [sp, #32]
 80283f6:	f818 c000 	ldrb.w	ip, [r8, r0]
 80283fa:	bf54      	ite	pl
 80283fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028400:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028404:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028408:	fa5f fc8c 	uxtb.w	ip, ip
 802840c:	2a00      	cmp	r2, #0
 802840e:	f000 80ed 	beq.w	80285ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8028412:	1c58      	adds	r0, r3, #1
 8028414:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028418:	07c0      	lsls	r0, r0, #31
 802841a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802841e:	bf54      	ite	pl
 8028420:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028424:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028428:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802842c:	fa5f fe8e 	uxtb.w	lr, lr
 8028430:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8028434:	b1c9      	cbz	r1, 802846a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028436:	444b      	add	r3, r9
 8028438:	0858      	lsrs	r0, r3, #1
 802843a:	07da      	lsls	r2, r3, #31
 802843c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8028440:	bf54      	ite	pl
 8028442:	f000 000f 	andpl.w	r0, r0, #15
 8028446:	1100      	asrmi	r0, r0, #4
 8028448:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802844c:	b2c0      	uxtb	r0, r0
 802844e:	900a      	str	r0, [sp, #40]	@ 0x28
 8028450:	1c58      	adds	r0, r3, #1
 8028452:	0843      	lsrs	r3, r0, #1
 8028454:	07c2      	lsls	r2, r0, #31
 8028456:	f818 3003 	ldrb.w	r3, [r8, r3]
 802845a:	bf54      	ite	pl
 802845c:	f003 030f 	andpl.w	r3, r3, #15
 8028460:	111b      	asrmi	r3, r3, #4
 8028462:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028466:	b2db      	uxtb	r3, r3
 8028468:	930e      	str	r3, [sp, #56]	@ 0x38
 802846a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802846e:	b289      	uxth	r1, r1
 8028470:	fb02 f301 	mul.w	r3, r2, r1
 8028474:	0112      	lsls	r2, r2, #4
 8028476:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802847a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802847e:	1ad2      	subs	r2, r2, r3
 8028480:	b289      	uxth	r1, r1
 8028482:	b292      	uxth	r2, r2
 8028484:	1a40      	subs	r0, r0, r1
 8028486:	fa1f fe80 	uxth.w	lr, r0
 802848a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802848c:	4342      	muls	r2, r0
 802848e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028492:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028494:	fb01 c102 	mla	r1, r1, r2, ip
 8028498:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802849a:	fb03 1302 	mla	r3, r3, r2, r1
 802849e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80284a2:	b383      	cbz	r3, 8028506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80284a4:	4ac6      	ldr	r2, [pc, #792]	@ (80287c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80284a6:	2bff      	cmp	r3, #255	@ 0xff
 80284a8:	6812      	ldr	r2, [r2, #0]
 80284aa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80284ae:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80284b2:	b2d2      	uxtb	r2, r2
 80284b4:	f000 80ac 	beq.w	8028610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80284b8:	b299      	uxth	r1, r3
 80284ba:	43db      	mvns	r3, r3
 80284bc:	f897 c000 	ldrb.w	ip, [r7]
 80284c0:	fb12 f201 	smulbb	r2, r2, r1
 80284c4:	b2db      	uxtb	r3, r3
 80284c6:	fb10 f001 	smulbb	r0, r0, r1
 80284ca:	fb0c 2203 	mla	r2, ip, r3, r2
 80284ce:	fb1e f101 	smulbb	r1, lr, r1
 80284d2:	b292      	uxth	r2, r2
 80284d4:	f102 0c01 	add.w	ip, r2, #1
 80284d8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80284dc:	1212      	asrs	r2, r2, #8
 80284de:	703a      	strb	r2, [r7, #0]
 80284e0:	787a      	ldrb	r2, [r7, #1]
 80284e2:	fb02 0003 	mla	r0, r2, r3, r0
 80284e6:	b280      	uxth	r0, r0
 80284e8:	1c42      	adds	r2, r0, #1
 80284ea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80284ee:	78ba      	ldrb	r2, [r7, #2]
 80284f0:	fb02 1303 	mla	r3, r2, r3, r1
 80284f4:	1200      	asrs	r0, r0, #8
 80284f6:	b29b      	uxth	r3, r3
 80284f8:	7078      	strb	r0, [r7, #1]
 80284fa:	f103 0e01 	add.w	lr, r3, #1
 80284fe:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8028502:	121b      	asrs	r3, r3, #8
 8028504:	70bb      	strb	r3, [r7, #2]
 8028506:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028508:	3703      	adds	r7, #3
 802850a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802850e:	441d      	add	r5, r3
 8028510:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028512:	441e      	add	r6, r3
 8028514:	e74d      	b.n	80283b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028516:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028518:	3c01      	subs	r4, #1
 802851a:	f10b 0b03 	add.w	fp, fp, #3
 802851e:	441d      	add	r5, r3
 8028520:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028522:	441e      	add	r6, r3
 8028524:	e725      	b.n	8028372 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8028526:	d021      	beq.n	802856c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8028528:	1e63      	subs	r3, r4, #1
 802852a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802852c:	fb00 5003 	mla	r0, r0, r3, r5
 8028530:	1400      	asrs	r0, r0, #16
 8028532:	f53f af3a 	bmi.w	80283aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028536:	3901      	subs	r1, #1
 8028538:	4288      	cmp	r0, r1
 802853a:	f6bf af36 	bge.w	80283aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802853e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028540:	fb01 6303 	mla	r3, r1, r3, r6
 8028544:	141b      	asrs	r3, r3, #16
 8028546:	f53f af30 	bmi.w	80283aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802854a:	3a01      	subs	r2, #1
 802854c:	4293      	cmp	r3, r2
 802854e:	f6bf af2c 	bge.w	80283aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028552:	f10b 0c03 	add.w	ip, fp, #3
 8028556:	46a6      	mov	lr, r4
 8028558:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802855c:	f1be 0f00 	cmp.w	lr, #0
 8028560:	dc79      	bgt.n	8028656 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8028562:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8028566:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802856a:	44a3      	add	fp, r4
 802856c:	9b07      	ldr	r3, [sp, #28]
 802856e:	2b00      	cmp	r3, #0
 8028570:	f340 8123 	ble.w	80287ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028574:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028578:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802857a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802857e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028582:	eef0 6a62 	vmov.f32	s13, s5
 8028586:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802858a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802858e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028592:	ee16 5a90 	vmov	r5, s13
 8028596:	eef0 6a43 	vmov.f32	s13, s6
 802859a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802859e:	ee16 6a90 	vmov	r6, s13
 80285a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80285a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80285aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80285ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80285b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80285b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80285ba:	ee12 2a90 	vmov	r2, s5
 80285be:	eef0 2a47 	vmov.f32	s5, s14
 80285c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80285c6:	ee13 2a10 	vmov	r2, s6
 80285ca:	931f      	str	r3, [sp, #124]	@ 0x7c
 80285cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80285ce:	eeb0 3a67 	vmov.f32	s6, s15
 80285d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80285d6:	9320      	str	r3, [sp, #128]	@ 0x80
 80285d8:	9b07      	ldr	r3, [sp, #28]
 80285da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80285dc:	3b01      	subs	r3, #1
 80285de:	9307      	str	r3, [sp, #28]
 80285e0:	bf08      	it	eq
 80285e2:	4614      	moveq	r4, r2
 80285e4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80285e6:	bf18      	it	ne
 80285e8:	461c      	movne	r4, r3
 80285ea:	e6b4      	b.n	8028356 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80285ec:	2900      	cmp	r1, #0
 80285ee:	f43f af3c 	beq.w	802846a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80285f2:	eb09 0003 	add.w	r0, r9, r3
 80285f6:	0843      	lsrs	r3, r0, #1
 80285f8:	07c0      	lsls	r0, r0, #31
 80285fa:	f818 3003 	ldrb.w	r3, [r8, r3]
 80285fe:	bf54      	ite	pl
 8028600:	f003 030f 	andpl.w	r3, r3, #15
 8028604:	111b      	asrmi	r3, r3, #4
 8028606:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802860a:	b2db      	uxtb	r3, r3
 802860c:	930a      	str	r3, [sp, #40]	@ 0x28
 802860e:	e72c      	b.n	802846a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028610:	703a      	strb	r2, [r7, #0]
 8028612:	7078      	strb	r0, [r7, #1]
 8028614:	f887 e002 	strb.w	lr, [r7, #2]
 8028618:	e775      	b.n	8028506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802861a:	1c5a      	adds	r2, r3, #1
 802861c:	f53f af73 	bmi.w	8028506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028620:	4594      	cmp	ip, r2
 8028622:	f6ff af70 	blt.w	8028506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028626:	1c42      	adds	r2, r0, #1
 8028628:	f53f af6d 	bmi.w	8028506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802862c:	4596      	cmp	lr, r2
 802862e:	f6ff af6a 	blt.w	8028506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028632:	9302      	str	r3, [sp, #8]
 8028634:	fa0f f38e 	sxth.w	r3, lr
 8028638:	9a08      	ldr	r2, [sp, #32]
 802863a:	9301      	str	r3, [sp, #4]
 802863c:	fa0f f38c 	sxth.w	r3, ip
 8028640:	9105      	str	r1, [sp, #20]
 8028642:	4639      	mov	r1, r7
 8028644:	9300      	str	r3, [sp, #0]
 8028646:	464b      	mov	r3, r9
 8028648:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802864c:	4642      	mov	r2, r8
 802864e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028650:	f7ff fd90 	bl	8028174 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8028654:	e757      	b.n	8028506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028656:	142a      	asrs	r2, r5, #16
 8028658:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802865c:	1433      	asrs	r3, r6, #16
 802865e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8028662:	fb09 2303 	mla	r3, r9, r3, r2
 8028666:	085a      	lsrs	r2, r3, #1
 8028668:	07d9      	lsls	r1, r3, #31
 802866a:	f818 2002 	ldrb.w	r2, [r8, r2]
 802866e:	bf54      	ite	pl
 8028670:	f002 020f 	andpl.w	r2, r2, #15
 8028674:	1112      	asrmi	r2, r2, #4
 8028676:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802867a:	b2d2      	uxtb	r2, r2
 802867c:	2800      	cmp	r0, #0
 802867e:	f000 8085 	beq.w	802878c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8028682:	f103 0a01 	add.w	sl, r3, #1
 8028686:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802868a:	f01a 0f01 	tst.w	sl, #1
 802868e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8028692:	bf0c      	ite	eq
 8028694:	f001 010f 	andeq.w	r1, r1, #15
 8028698:	1109      	asrne	r1, r1, #4
 802869a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802869e:	b2c9      	uxtb	r1, r1
 80286a0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80286a2:	b1df      	cbz	r7, 80286dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80286a4:	444b      	add	r3, r9
 80286a6:	0859      	lsrs	r1, r3, #1
 80286a8:	f013 0f01 	tst.w	r3, #1
 80286ac:	f103 0301 	add.w	r3, r3, #1
 80286b0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80286b4:	bf0c      	ite	eq
 80286b6:	f001 010f 	andeq.w	r1, r1, #15
 80286ba:	1109      	asrne	r1, r1, #4
 80286bc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80286c0:	b2c9      	uxtb	r1, r1
 80286c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80286c4:	0859      	lsrs	r1, r3, #1
 80286c6:	07db      	lsls	r3, r3, #31
 80286c8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80286cc:	bf54      	ite	pl
 80286ce:	f001 010f 	andpl.w	r1, r1, #15
 80286d2:	1109      	asrmi	r1, r1, #4
 80286d4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80286d8:	b2c9      	uxtb	r1, r1
 80286da:	9110      	str	r1, [sp, #64]	@ 0x40
 80286dc:	b280      	uxth	r0, r0
 80286de:	b2bf      	uxth	r7, r7
 80286e0:	fb00 f307 	mul.w	r3, r0, r7
 80286e4:	0100      	lsls	r0, r0, #4
 80286e6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80286ea:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80286ee:	1ac0      	subs	r0, r0, r3
 80286f0:	b2bf      	uxth	r7, r7
 80286f2:	b280      	uxth	r0, r0
 80286f4:	1bc9      	subs	r1, r1, r7
 80286f6:	fa1f fa81 	uxth.w	sl, r1
 80286fa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80286fc:	4348      	muls	r0, r1
 80286fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028700:	fb02 020a 	mla	r2, r2, sl, r0
 8028704:	fb07 2701 	mla	r7, r7, r1, r2
 8028708:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802870a:	fb03 7302 	mla	r3, r3, r2, r7
 802870e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028712:	b393      	cbz	r3, 802877a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8028714:	4a2a      	ldr	r2, [pc, #168]	@ (80287c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8028716:	2bff      	cmp	r3, #255	@ 0xff
 8028718:	6811      	ldr	r1, [r2, #0]
 802871a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802871e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8028722:	b2c9      	uxtb	r1, r1
 8028724:	d042      	beq.n	80287ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028726:	b298      	uxth	r0, r3
 8028728:	43db      	mvns	r3, r3
 802872a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802872e:	fb11 f100 	smulbb	r1, r1, r0
 8028732:	b2db      	uxtb	r3, r3
 8028734:	fb17 f700 	smulbb	r7, r7, r0
 8028738:	fb02 1103 	mla	r1, r2, r3, r1
 802873c:	fb1a f000 	smulbb	r0, sl, r0
 8028740:	b289      	uxth	r1, r1
 8028742:	1c4a      	adds	r2, r1, #1
 8028744:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028748:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802874c:	fb02 7703 	mla	r7, r2, r3, r7
 8028750:	1209      	asrs	r1, r1, #8
 8028752:	b2bf      	uxth	r7, r7
 8028754:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8028758:	1c7a      	adds	r2, r7, #1
 802875a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802875e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8028762:	fb02 0303 	mla	r3, r2, r3, r0
 8028766:	123f      	asrs	r7, r7, #8
 8028768:	b29b      	uxth	r3, r3
 802876a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802876e:	1c5a      	adds	r2, r3, #1
 8028770:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028774:	121b      	asrs	r3, r3, #8
 8028776:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802877a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802877c:	f10c 0c03 	add.w	ip, ip, #3
 8028780:	f10e 3eff 	add.w	lr, lr, #4294967295
 8028784:	441d      	add	r5, r3
 8028786:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028788:	441e      	add	r6, r3
 802878a:	e6e7      	b.n	802855c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802878c:	2f00      	cmp	r7, #0
 802878e:	d0a5      	beq.n	80286dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028790:	444b      	add	r3, r9
 8028792:	0859      	lsrs	r1, r3, #1
 8028794:	07db      	lsls	r3, r3, #31
 8028796:	f818 1001 	ldrb.w	r1, [r8, r1]
 802879a:	bf54      	ite	pl
 802879c:	f001 010f 	andpl.w	r1, r1, #15
 80287a0:	1109      	asrmi	r1, r1, #4
 80287a2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80287a6:	b2c9      	uxtb	r1, r1
 80287a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80287aa:	e797      	b.n	80286dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80287ac:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80287b0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80287b4:	f80c ac01 	strb.w	sl, [ip, #-1]
 80287b8:	e7df      	b.n	802877a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80287ba:	b013      	add	sp, #76	@ 0x4c
 80287bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287c0:	24028780 	.word	0x24028780

080287c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 80287c4:	b530      	push	{r4, r5, lr}
 80287c6:	b29d      	uxth	r5, r3
 80287c8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80287cc:	780c      	ldrb	r4, [r1, #0]
 80287ce:	b298      	uxth	r0, r3
 80287d0:	7813      	ldrb	r3, [r2, #0]
 80287d2:	fb14 f405 	smulbb	r4, r4, r5
 80287d6:	fb13 f300 	smulbb	r3, r3, r0
 80287da:	441c      	add	r4, r3
 80287dc:	b2a4      	uxth	r4, r4
 80287de:	1c63      	adds	r3, r4, #1
 80287e0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80287e4:	7853      	ldrb	r3, [r2, #1]
 80287e6:	fb13 f300 	smulbb	r3, r3, r0
 80287ea:	1224      	asrs	r4, r4, #8
 80287ec:	7014      	strb	r4, [r2, #0]
 80287ee:	784c      	ldrb	r4, [r1, #1]
 80287f0:	fb14 f405 	smulbb	r4, r4, r5
 80287f4:	441c      	add	r4, r3
 80287f6:	b2a4      	uxth	r4, r4
 80287f8:	1c63      	adds	r3, r4, #1
 80287fa:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80287fe:	1224      	asrs	r4, r4, #8
 8028800:	7054      	strb	r4, [r2, #1]
 8028802:	788b      	ldrb	r3, [r1, #2]
 8028804:	7891      	ldrb	r1, [r2, #2]
 8028806:	fb13 f305 	smulbb	r3, r3, r5
 802880a:	fb11 f000 	smulbb	r0, r1, r0
 802880e:	4403      	add	r3, r0
 8028810:	b29b      	uxth	r3, r3
 8028812:	1c59      	adds	r1, r3, #1
 8028814:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028818:	121b      	asrs	r3, r3, #8
 802881a:	7093      	strb	r3, [r2, #2]
 802881c:	bd30      	pop	{r4, r5, pc}
	...

08028820 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8028820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028824:	461c      	mov	r4, r3
 8028826:	b08b      	sub	sp, #44	@ 0x2c
 8028828:	460e      	mov	r6, r1
 802882a:	4615      	mov	r5, r2
 802882c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802882e:	4682      	mov	sl, r0
 8028830:	6861      	ldr	r1, [r4, #4]
 8028832:	aa06      	add	r2, sp, #24
 8028834:	6820      	ldr	r0, [r4, #0]
 8028836:	2702      	movs	r7, #2
 8028838:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802883c:	3504      	adds	r5, #4
 802883e:	c203      	stmia	r2!, {r0, r1}
 8028840:	6818      	ldr	r0, [r3, #0]
 8028842:	aa08      	add	r2, sp, #32
 8028844:	6859      	ldr	r1, [r3, #4]
 8028846:	c203      	stmia	r2!, {r0, r1}
 8028848:	a806      	add	r0, sp, #24
 802884a:	f7f2 fae3 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802884e:	4621      	mov	r1, r4
 8028850:	a808      	add	r0, sp, #32
 8028852:	f7f2 fb23 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028856:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802885a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802885e:	f002 0301 	and.w	r3, r2, #1
 8028862:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8028866:	9302      	str	r3, [sp, #8]
 8028868:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802886c:	f003 0101 	and.w	r1, r3, #1
 8028870:	9101      	str	r1, [sp, #4]
 8028872:	9801      	ldr	r0, [sp, #4]
 8028874:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8028878:	4403      	add	r3, r0
 802887a:	fb01 2303 	mla	r3, r1, r3, r2
 802887e:	fb93 f3f7 	sdiv	r3, r3, r7
 8028882:	441e      	add	r6, r3
 8028884:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8028888:	441a      	add	r2, r3
 802888a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802888e:	4419      	add	r1, r3
 8028890:	4b70      	ldr	r3, [pc, #448]	@ (8028a54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8028892:	f8ad 2020 	strh.w	r2, [sp, #32]
 8028896:	6818      	ldr	r0, [r3, #0]
 8028898:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802889c:	6803      	ldr	r3, [r0, #0]
 802889e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80288a0:	4798      	blx	r3
 80288a2:	4a6d      	ldr	r2, [pc, #436]	@ (8028a58 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80288a4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80288a8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80288ac:	8813      	ldrh	r3, [r2, #0]
 80288ae:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80288b2:	fb03 1404 	mla	r4, r3, r4, r1
 80288b6:	4611      	mov	r1, r2
 80288b8:	fb0b f303 	mul.w	r3, fp, r3
 80288bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80288c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80288c4:	4404      	add	r4, r0
 80288c6:	4423      	add	r3, r4
 80288c8:	d073      	beq.n	80289b2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80288ca:	9705      	str	r7, [sp, #20]
 80288cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80288d0:	9b03      	ldr	r3, [sp, #12]
 80288d2:	429c      	cmp	r4, r3
 80288d4:	f080 80b5 	bcs.w	8028a42 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80288d8:	9b02      	ldr	r3, [sp, #8]
 80288da:	b35b      	cbz	r3, 8028934 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 80288dc:	7831      	ldrb	r1, [r6, #0]
 80288de:	4622      	mov	r2, r4
 80288e0:	1c77      	adds	r7, r6, #1
 80288e2:	3403      	adds	r4, #3
 80288e4:	f001 010f 	and.w	r1, r1, #15
 80288e8:	f108 3bff 	add.w	fp, r8, #4294967295
 80288ec:	464b      	mov	r3, r9
 80288ee:	4650      	mov	r0, sl
 80288f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80288f4:	4429      	add	r1, r5
 80288f6:	f7ff ff65 	bl	80287c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80288fa:	f1bb 0f01 	cmp.w	fp, #1
 80288fe:	dd1c      	ble.n	802893a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8028900:	7839      	ldrb	r1, [r7, #0]
 8028902:	4622      	mov	r2, r4
 8028904:	464b      	mov	r3, r9
 8028906:	4650      	mov	r0, sl
 8028908:	0909      	lsrs	r1, r1, #4
 802890a:	f1ab 0b02 	sub.w	fp, fp, #2
 802890e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028912:	4429      	add	r1, r5
 8028914:	f7ff ff56 	bl	80287c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8028918:	f817 1b01 	ldrb.w	r1, [r7], #1
 802891c:	1ce2      	adds	r2, r4, #3
 802891e:	464b      	mov	r3, r9
 8028920:	f001 010f 	and.w	r1, r1, #15
 8028924:	4650      	mov	r0, sl
 8028926:	3406      	adds	r4, #6
 8028928:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802892c:	4429      	add	r1, r5
 802892e:	f7ff ff49 	bl	80287c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8028932:	e7e2      	b.n	80288fa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8028934:	4637      	mov	r7, r6
 8028936:	46c3      	mov	fp, r8
 8028938:	e7df      	b.n	80288fa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802893a:	d10a      	bne.n	8028952 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 802893c:	7839      	ldrb	r1, [r7, #0]
 802893e:	4622      	mov	r2, r4
 8028940:	3403      	adds	r4, #3
 8028942:	464b      	mov	r3, r9
 8028944:	0909      	lsrs	r1, r1, #4
 8028946:	4650      	mov	r0, sl
 8028948:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802894c:	4429      	add	r1, r5
 802894e:	f7ff ff39 	bl	80287c4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8028952:	9b04      	ldr	r3, [sp, #16]
 8028954:	9a01      	ldr	r2, [sp, #4]
 8028956:	881b      	ldrh	r3, [r3, #0]
 8028958:	eba3 0308 	sub.w	r3, r3, r8
 802895c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028960:	441c      	add	r4, r3
 8028962:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8028966:	4413      	add	r3, r2
 8028968:	9a05      	ldr	r2, [sp, #20]
 802896a:	fb93 f3f2 	sdiv	r3, r3, r2
 802896e:	441e      	add	r6, r3
 8028970:	e7ae      	b.n	80288d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8028972:	4632      	mov	r2, r6
 8028974:	46c4      	mov	ip, r8
 8028976:	e037      	b.n	80289e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8028978:	d10e      	bne.n	8028998 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 802897a:	7812      	ldrb	r2, [r2, #0]
 802897c:	3003      	adds	r0, #3
 802897e:	0912      	lsrs	r2, r2, #4
 8028980:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028984:	18ac      	adds	r4, r5, r2
 8028986:	5caa      	ldrb	r2, [r5, r2]
 8028988:	f800 2c03 	strb.w	r2, [r0, #-3]
 802898c:	7862      	ldrb	r2, [r4, #1]
 802898e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8028992:	78a2      	ldrb	r2, [r4, #2]
 8028994:	f800 2c01 	strb.w	r2, [r0, #-1]
 8028998:	880c      	ldrh	r4, [r1, #0]
 802899a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802899e:	eba4 0408 	sub.w	r4, r4, r8
 80289a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80289a6:	4404      	add	r4, r0
 80289a8:	9801      	ldr	r0, [sp, #4]
 80289aa:	4402      	add	r2, r0
 80289ac:	fb92 f2f7 	sdiv	r2, r2, r7
 80289b0:	4416      	add	r6, r2
 80289b2:	429c      	cmp	r4, r3
 80289b4:	d245      	bcs.n	8028a42 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80289b6:	9a02      	ldr	r2, [sp, #8]
 80289b8:	2a00      	cmp	r2, #0
 80289ba:	d0da      	beq.n	8028972 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80289bc:	7830      	ldrb	r0, [r6, #0]
 80289be:	1c72      	adds	r2, r6, #1
 80289c0:	3403      	adds	r4, #3
 80289c2:	f000 000f 	and.w	r0, r0, #15
 80289c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80289ca:	eb05 0c00 	add.w	ip, r5, r0
 80289ce:	5c28      	ldrb	r0, [r5, r0]
 80289d0:	f804 0c03 	strb.w	r0, [r4, #-3]
 80289d4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80289d8:	f804 0c02 	strb.w	r0, [r4, #-2]
 80289dc:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80289e0:	f108 3cff 	add.w	ip, r8, #4294967295
 80289e4:	f804 0c01 	strb.w	r0, [r4, #-1]
 80289e8:	f1bc 0f01 	cmp.w	ip, #1
 80289ec:	4620      	mov	r0, r4
 80289ee:	f104 0406 	add.w	r4, r4, #6
 80289f2:	ddc1      	ble.n	8028978 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80289f4:	7810      	ldrb	r0, [r2, #0]
 80289f6:	f1ac 0c02 	sub.w	ip, ip, #2
 80289fa:	0900      	lsrs	r0, r0, #4
 80289fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028a00:	eb05 0e00 	add.w	lr, r5, r0
 8028a04:	5c28      	ldrb	r0, [r5, r0]
 8028a06:	f804 0c06 	strb.w	r0, [r4, #-6]
 8028a0a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028a0e:	f804 0c05 	strb.w	r0, [r4, #-5]
 8028a12:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8028a16:	f804 0c04 	strb.w	r0, [r4, #-4]
 8028a1a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8028a1e:	f000 000f 	and.w	r0, r0, #15
 8028a22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028a26:	eb05 0e00 	add.w	lr, r5, r0
 8028a2a:	5c28      	ldrb	r0, [r5, r0]
 8028a2c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8028a30:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028a34:	f804 0c02 	strb.w	r0, [r4, #-2]
 8028a38:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8028a3c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8028a40:	e7d2      	b.n	80289e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8028a42:	4b04      	ldr	r3, [pc, #16]	@ (8028a54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8028a44:	6818      	ldr	r0, [r3, #0]
 8028a46:	6803      	ldr	r3, [r0, #0]
 8028a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a4a:	4798      	blx	r3
 8028a4c:	b00b      	add	sp, #44	@ 0x2c
 8028a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a52:	bf00      	nop
 8028a54:	24028770 	.word	0x24028770
 8028a58:	2402876a 	.word	0x2402876a

08028a5c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8028a5c:	b530      	push	{r4, r5, lr}
 8028a5e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8028a62:	780d      	ldrb	r5, [r1, #0]
 8028a64:	28ff      	cmp	r0, #255	@ 0xff
 8028a66:	d107      	bne.n	8028a78 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8028a68:	2bff      	cmp	r3, #255	@ 0xff
 8028a6a:	d105      	bne.n	8028a78 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8028a6c:	7015      	strb	r5, [r2, #0]
 8028a6e:	784b      	ldrb	r3, [r1, #1]
 8028a70:	7053      	strb	r3, [r2, #1]
 8028a72:	788b      	ldrb	r3, [r1, #2]
 8028a74:	7093      	strb	r3, [r2, #2]
 8028a76:	bd30      	pop	{r4, r5, pc}
 8028a78:	fb10 f003 	smulbb	r0, r0, r3
 8028a7c:	b283      	uxth	r3, r0
 8028a7e:	1c58      	adds	r0, r3, #1
 8028a80:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028a84:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028a88:	b284      	uxth	r4, r0
 8028a8a:	43c0      	mvns	r0, r0
 8028a8c:	fb15 f504 	smulbb	r5, r5, r4
 8028a90:	b2c3      	uxtb	r3, r0
 8028a92:	7810      	ldrb	r0, [r2, #0]
 8028a94:	fb00 5003 	mla	r0, r0, r3, r5
 8028a98:	b280      	uxth	r0, r0
 8028a9a:	1c45      	adds	r5, r0, #1
 8028a9c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028aa0:	7855      	ldrb	r5, [r2, #1]
 8028aa2:	fb15 f503 	smulbb	r5, r5, r3
 8028aa6:	1200      	asrs	r0, r0, #8
 8028aa8:	7010      	strb	r0, [r2, #0]
 8028aaa:	7848      	ldrb	r0, [r1, #1]
 8028aac:	fb00 5004 	mla	r0, r0, r4, r5
 8028ab0:	b280      	uxth	r0, r0
 8028ab2:	1c45      	adds	r5, r0, #1
 8028ab4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028ab8:	1200      	asrs	r0, r0, #8
 8028aba:	7050      	strb	r0, [r2, #1]
 8028abc:	7888      	ldrb	r0, [r1, #2]
 8028abe:	7891      	ldrb	r1, [r2, #2]
 8028ac0:	fb11 f303 	smulbb	r3, r1, r3
 8028ac4:	fb00 3304 	mla	r3, r0, r4, r3
 8028ac8:	b29b      	uxth	r3, r3
 8028aca:	1c59      	adds	r1, r3, #1
 8028acc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028ad0:	121b      	asrs	r3, r3, #8
 8028ad2:	e7cf      	b.n	8028a74 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08028ad4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8028ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ad8:	461d      	mov	r5, r3
 8028ada:	b08f      	sub	sp, #60	@ 0x3c
 8028adc:	460c      	mov	r4, r1
 8028ade:	4616      	mov	r6, r2
 8028ae0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028ae2:	4680      	mov	r8, r0
 8028ae4:	6869      	ldr	r1, [r5, #4]
 8028ae6:	aa0a      	add	r2, sp, #40	@ 0x28
 8028ae8:	6828      	ldr	r0, [r5, #0]
 8028aea:	3604      	adds	r6, #4
 8028aec:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8028af0:	4f57      	ldr	r7, [pc, #348]	@ (8028c50 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8028af2:	c203      	stmia	r2!, {r0, r1}
 8028af4:	6818      	ldr	r0, [r3, #0]
 8028af6:	aa0c      	add	r2, sp, #48	@ 0x30
 8028af8:	6859      	ldr	r1, [r3, #4]
 8028afa:	c203      	stmia	r2!, {r0, r1}
 8028afc:	a80a      	add	r0, sp, #40	@ 0x28
 8028afe:	f7f2 f989 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028b02:	4629      	mov	r1, r5
 8028b04:	a80c      	add	r0, sp, #48	@ 0x30
 8028b06:	2502      	movs	r5, #2
 8028b08:	f7f2 f9c8 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028b0c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028b10:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8028b14:	f002 0301 	and.w	r3, r2, #1
 8028b18:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8028b1c:	9304      	str	r3, [sp, #16]
 8028b1e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028b22:	f003 0101 	and.w	r1, r3, #1
 8028b26:	9103      	str	r1, [sp, #12]
 8028b28:	9803      	ldr	r0, [sp, #12]
 8028b2a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8028b2e:	4403      	add	r3, r0
 8028b30:	6838      	ldr	r0, [r7, #0]
 8028b32:	fb01 2303 	mla	r3, r1, r3, r2
 8028b36:	fb93 f3f5 	sdiv	r3, r3, r5
 8028b3a:	18e5      	adds	r5, r4, r3
 8028b3c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028b40:	441a      	add	r2, r3
 8028b42:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8028b46:	4419      	add	r1, r3
 8028b48:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028b4c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028b50:	6803      	ldr	r3, [r0, #0]
 8028b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028b54:	4798      	blx	r3
 8028b56:	4a3f      	ldr	r2, [pc, #252]	@ (8028c54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8028b58:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028b5c:	8813      	ldrh	r3, [r2, #0]
 8028b5e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8028b62:	9207      	str	r2, [sp, #28]
 8028b64:	fb03 1404 	mla	r4, r3, r4, r1
 8028b68:	fb0a f303 	mul.w	r3, sl, r3
 8028b6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028b70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028b74:	4404      	add	r4, r0
 8028b76:	18e3      	adds	r3, r4, r3
 8028b78:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8028b7c:	9b05      	ldr	r3, [sp, #20]
 8028b7e:	429c      	cmp	r4, r3
 8028b80:	d25d      	bcs.n	8028c3e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8028b82:	9b04      	ldr	r3, [sp, #16]
 8028b84:	2b00      	cmp	r3, #0
 8028b86:	d037      	beq.n	8028bf8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8028b88:	782b      	ldrb	r3, [r5, #0]
 8028b8a:	1c6f      	adds	r7, r5, #1
 8028b8c:	f003 030f 	and.w	r3, r3, #15
 8028b90:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8028b96:	0e1b      	lsrs	r3, r3, #24
 8028b98:	d006      	beq.n	8028ba8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8028b9a:	9300      	str	r3, [sp, #0]
 8028b9c:	4622      	mov	r2, r4
 8028b9e:	464b      	mov	r3, r9
 8028ba0:	a909      	add	r1, sp, #36	@ 0x24
 8028ba2:	4640      	mov	r0, r8
 8028ba4:	f7ff ff5a 	bl	8028a5c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028ba8:	3403      	adds	r4, #3
 8028baa:	f10b 3aff 	add.w	sl, fp, #4294967295
 8028bae:	f1ba 0f01 	cmp.w	sl, #1
 8028bb2:	dd24      	ble.n	8028bfe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8028bb4:	783b      	ldrb	r3, [r7, #0]
 8028bb6:	091b      	lsrs	r3, r3, #4
 8028bb8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028bbc:	9308      	str	r3, [sp, #32]
 8028bbe:	0e1b      	lsrs	r3, r3, #24
 8028bc0:	d006      	beq.n	8028bd0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8028bc2:	9300      	str	r3, [sp, #0]
 8028bc4:	4622      	mov	r2, r4
 8028bc6:	464b      	mov	r3, r9
 8028bc8:	a908      	add	r1, sp, #32
 8028bca:	4640      	mov	r0, r8
 8028bcc:	f7ff ff46 	bl	8028a5c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028bd0:	f817 3b01 	ldrb.w	r3, [r7], #1
 8028bd4:	f003 030f 	and.w	r3, r3, #15
 8028bd8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8028bde:	0e1b      	lsrs	r3, r3, #24
 8028be0:	d006      	beq.n	8028bf0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8028be2:	9300      	str	r3, [sp, #0]
 8028be4:	1ce2      	adds	r2, r4, #3
 8028be6:	464b      	mov	r3, r9
 8028be8:	a909      	add	r1, sp, #36	@ 0x24
 8028bea:	4640      	mov	r0, r8
 8028bec:	f7ff ff36 	bl	8028a5c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028bf0:	3406      	adds	r4, #6
 8028bf2:	f1aa 0a02 	sub.w	sl, sl, #2
 8028bf6:	e7da      	b.n	8028bae <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028bf8:	462f      	mov	r7, r5
 8028bfa:	46da      	mov	sl, fp
 8028bfc:	e7d7      	b.n	8028bae <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028bfe:	d10e      	bne.n	8028c1e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8028c00:	783b      	ldrb	r3, [r7, #0]
 8028c02:	091b      	lsrs	r3, r3, #4
 8028c04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c0a:	0e1b      	lsrs	r3, r3, #24
 8028c0c:	d006      	beq.n	8028c1c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8028c0e:	9300      	str	r3, [sp, #0]
 8028c10:	4622      	mov	r2, r4
 8028c12:	464b      	mov	r3, r9
 8028c14:	a909      	add	r1, sp, #36	@ 0x24
 8028c16:	4640      	mov	r0, r8
 8028c18:	f7ff ff20 	bl	8028a5c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028c1c:	3403      	adds	r4, #3
 8028c1e:	9b07      	ldr	r3, [sp, #28]
 8028c20:	9a03      	ldr	r2, [sp, #12]
 8028c22:	881b      	ldrh	r3, [r3, #0]
 8028c24:	eba3 030b 	sub.w	r3, r3, fp
 8028c28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028c2c:	441c      	add	r4, r3
 8028c2e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028c32:	4413      	add	r3, r2
 8028c34:	2202      	movs	r2, #2
 8028c36:	fb93 f3f2 	sdiv	r3, r3, r2
 8028c3a:	441d      	add	r5, r3
 8028c3c:	e79e      	b.n	8028b7c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8028c3e:	9b06      	ldr	r3, [sp, #24]
 8028c40:	6818      	ldr	r0, [r3, #0]
 8028c42:	6803      	ldr	r3, [r0, #0]
 8028c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028c46:	4798      	blx	r3
 8028c48:	b00f      	add	sp, #60	@ 0x3c
 8028c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c4e:	bf00      	nop
 8028c50:	24028770 	.word	0x24028770
 8028c54:	2402876a 	.word	0x2402876a

08028c58 <CRC_Lock>:
 8028c58:	4a2d      	ldr	r2, [pc, #180]	@ (8028d10 <CRC_Lock+0xb8>)
 8028c5a:	b530      	push	{r4, r5, lr}
 8028c5c:	6813      	ldr	r3, [r2, #0]
 8028c5e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8028c62:	f023 0301 	bic.w	r3, r3, #1
 8028c66:	6013      	str	r3, [r2, #0]
 8028c68:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8028c6c:	4b29      	ldr	r3, [pc, #164]	@ (8028d14 <CRC_Lock+0xbc>)
 8028c6e:	681c      	ldr	r4, [r3, #0]
 8028c70:	4014      	ands	r4, r2
 8028c72:	42ac      	cmp	r4, r5
 8028c74:	d005      	beq.n	8028c82 <CRC_Lock+0x2a>
 8028c76:	681c      	ldr	r4, [r3, #0]
 8028c78:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8028c7c:	4014      	ands	r4, r2
 8028c7e:	42ac      	cmp	r4, r5
 8028c80:	d125      	bne.n	8028cce <CRC_Lock+0x76>
 8028c82:	4b25      	ldr	r3, [pc, #148]	@ (8028d18 <CRC_Lock+0xc0>)
 8028c84:	681b      	ldr	r3, [r3, #0]
 8028c86:	2b00      	cmp	r3, #0
 8028c88:	d139      	bne.n	8028cfe <CRC_Lock+0xa6>
 8028c8a:	4b24      	ldr	r3, [pc, #144]	@ (8028d1c <CRC_Lock+0xc4>)
 8028c8c:	681a      	ldr	r2, [r3, #0]
 8028c8e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028c92:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8028c96:	d00d      	beq.n	8028cb4 <CRC_Lock+0x5c>
 8028c98:	681a      	ldr	r2, [r3, #0]
 8028c9a:	f240 4483 	movw	r4, #1155	@ 0x483
 8028c9e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028ca2:	42a2      	cmp	r2, r4
 8028ca4:	d006      	beq.n	8028cb4 <CRC_Lock+0x5c>
 8028ca6:	681b      	ldr	r3, [r3, #0]
 8028ca8:	f240 4285 	movw	r2, #1157	@ 0x485
 8028cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028cb0:	4293      	cmp	r3, r2
 8028cb2:	d124      	bne.n	8028cfe <CRC_Lock+0xa6>
 8028cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8028d20 <CRC_Lock+0xc8>)
 8028cb6:	2201      	movs	r2, #1
 8028cb8:	601a      	str	r2, [r3, #0]
 8028cba:	681a      	ldr	r2, [r3, #0]
 8028cbc:	2a00      	cmp	r2, #0
 8028cbe:	d1fc      	bne.n	8028cba <CRC_Lock+0x62>
 8028cc0:	4b18      	ldr	r3, [pc, #96]	@ (8028d24 <CRC_Lock+0xcc>)
 8028cc2:	6018      	str	r0, [r3, #0]
 8028cc4:	6818      	ldr	r0, [r3, #0]
 8028cc6:	1a43      	subs	r3, r0, r1
 8028cc8:	4258      	negs	r0, r3
 8028cca:	4158      	adcs	r0, r3
 8028ccc:	e00e      	b.n	8028cec <CRC_Lock+0x94>
 8028cce:	681b      	ldr	r3, [r3, #0]
 8028cd0:	4013      	ands	r3, r2
 8028cd2:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8028cd6:	4293      	cmp	r3, r2
 8028cd8:	d111      	bne.n	8028cfe <CRC_Lock+0xa6>
 8028cda:	4b13      	ldr	r3, [pc, #76]	@ (8028d28 <CRC_Lock+0xd0>)
 8028cdc:	f240 4286 	movw	r2, #1158	@ 0x486
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028ce6:	4293      	cmp	r3, r2
 8028ce8:	d001      	beq.n	8028cee <CRC_Lock+0x96>
 8028cea:	2000      	movs	r0, #0
 8028cec:	bd30      	pop	{r4, r5, pc}
 8028cee:	4b0f      	ldr	r3, [pc, #60]	@ (8028d2c <CRC_Lock+0xd4>)
 8028cf0:	2201      	movs	r2, #1
 8028cf2:	601a      	str	r2, [r3, #0]
 8028cf4:	681a      	ldr	r2, [r3, #0]
 8028cf6:	2a00      	cmp	r2, #0
 8028cf8:	d1fc      	bne.n	8028cf4 <CRC_Lock+0x9c>
 8028cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8028d30 <CRC_Lock+0xd8>)
 8028cfc:	e7e1      	b.n	8028cc2 <CRC_Lock+0x6a>
 8028cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8028d34 <CRC_Lock+0xdc>)
 8028d00:	2201      	movs	r2, #1
 8028d02:	601a      	str	r2, [r3, #0]
 8028d04:	681a      	ldr	r2, [r3, #0]
 8028d06:	2a00      	cmp	r2, #0
 8028d08:	d1fc      	bne.n	8028d04 <CRC_Lock+0xac>
 8028d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8028d38 <CRC_Lock+0xe0>)
 8028d0c:	e7d9      	b.n	8028cc2 <CRC_Lock+0x6a>
 8028d0e:	bf00      	nop
 8028d10:	e0002000 	.word	0xe0002000
 8028d14:	e000ed00 	.word	0xe000ed00
 8028d18:	e0042000 	.word	0xe0042000
 8028d1c:	5c001000 	.word	0x5c001000
 8028d20:	58024c08 	.word	0x58024c08
 8028d24:	58024c00 	.word	0x58024c00
 8028d28:	46008ff0 	.word	0x46008ff0
 8028d2c:	46024c08 	.word	0x46024c08
 8028d30:	46024c00 	.word	0x46024c00
 8028d34:	40023008 	.word	0x40023008
 8028d38:	40023000 	.word	0x40023000

08028d3c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028d3c:	6101      	str	r1, [r0, #16]
 8028d3e:	4770      	bx	lr

08028d40 <_ZN8touchgfx8Gestures4tickEv>:
 8028d40:	7b83      	ldrb	r3, [r0, #14]
 8028d42:	b14b      	cbz	r3, 8028d58 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028d44:	8903      	ldrh	r3, [r0, #8]
 8028d46:	3301      	adds	r3, #1
 8028d48:	b29b      	uxth	r3, r3
 8028d4a:	2b07      	cmp	r3, #7
 8028d4c:	8103      	strh	r3, [r0, #8]
 8028d4e:	bf81      	itttt	hi
 8028d50:	2300      	movhi	r3, #0
 8028d52:	8143      	strhhi	r3, [r0, #10]
 8028d54:	8183      	strhhi	r3, [r0, #12]
 8028d56:	7383      	strbhi	r3, [r0, #14]
 8028d58:	4770      	bx	lr
	...

08028d5c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028d5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028d60:	4698      	mov	r8, r3
 8028d62:	8883      	ldrh	r3, [r0, #4]
 8028d64:	4604      	mov	r4, r0
 8028d66:	4617      	mov	r7, r2
 8028d68:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028d6c:	eba8 0303 	sub.w	r3, r8, r3
 8028d70:	4a19      	ldr	r2, [pc, #100]	@ (8028dd8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028d72:	460e      	mov	r6, r1
 8028d74:	b21b      	sxth	r3, r3
 8028d76:	88c1      	ldrh	r1, [r0, #6]
 8028d78:	9200      	str	r2, [sp, #0]
 8028d7a:	2000      	movs	r0, #0
 8028d7c:	2b00      	cmp	r3, #0
 8028d7e:	8aa2      	ldrh	r2, [r4, #20]
 8028d80:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8028d84:	bfb8      	it	lt
 8028d86:	425b      	neglt	r3, r3
 8028d88:	f88d 0004 	strb.w	r0, [sp, #4]
 8028d8c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028d90:	b21b      	sxth	r3, r3
 8028d92:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028d96:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028d9a:	4293      	cmp	r3, r2
 8028d9c:	dc07      	bgt.n	8028dae <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028d9e:	1a69      	subs	r1, r5, r1
 8028da0:	b209      	sxth	r1, r1
 8028da2:	2900      	cmp	r1, #0
 8028da4:	bfb8      	it	lt
 8028da6:	4249      	neglt	r1, r1
 8028da8:	b209      	sxth	r1, r1
 8028daa:	428a      	cmp	r2, r1
 8028dac:	da10      	bge.n	8028dd0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028dae:	6920      	ldr	r0, [r4, #16]
 8028db0:	4669      	mov	r1, sp
 8028db2:	eba8 0606 	sub.w	r6, r8, r6
 8028db6:	1bef      	subs	r7, r5, r7
 8028db8:	6803      	ldr	r3, [r0, #0]
 8028dba:	685b      	ldr	r3, [r3, #4]
 8028dbc:	4798      	blx	r3
 8028dbe:	2300      	movs	r3, #0
 8028dc0:	2001      	movs	r0, #1
 8028dc2:	8166      	strh	r6, [r4, #10]
 8028dc4:	8123      	strh	r3, [r4, #8]
 8028dc6:	81a7      	strh	r7, [r4, #12]
 8028dc8:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028dcc:	80e5      	strh	r5, [r4, #6]
 8028dce:	73a0      	strb	r0, [r4, #14]
 8028dd0:	b004      	add	sp, #16
 8028dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028dd6:	bf00      	nop
 8028dd8:	08030294 	.word	0x08030294

08028ddc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028dde:	461e      	mov	r6, r3
 8028de0:	1e4b      	subs	r3, r1, #1
 8028de2:	b085      	sub	sp, #20
 8028de4:	4604      	mov	r4, r0
 8028de6:	2b01      	cmp	r3, #1
 8028de8:	460d      	mov	r5, r1
 8028dea:	4617      	mov	r7, r2
 8028dec:	d84b      	bhi.n	8028e86 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028dee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028df2:	1cd3      	adds	r3, r2, #3
 8028df4:	b29b      	uxth	r3, r3
 8028df6:	2b06      	cmp	r3, #6
 8028df8:	d916      	bls.n	8028e28 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028dfa:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8028e9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028dfe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028e02:	f8cd c004 	str.w	ip, [sp, #4]
 8028e06:	f04f 0c00 	mov.w	ip, #0
 8028e0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028e0e:	6900      	ldr	r0, [r0, #16]
 8028e10:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028e14:	a901      	add	r1, sp, #4
 8028e16:	f88d c008 	strb.w	ip, [sp, #8]
 8028e1a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028e1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e22:	6803      	ldr	r3, [r0, #0]
 8028e24:	689b      	ldr	r3, [r3, #8]
 8028e26:	4798      	blx	r3
 8028e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028e2c:	1cd3      	adds	r3, r2, #3
 8028e2e:	b29b      	uxth	r3, r3
 8028e30:	2b06      	cmp	r3, #6
 8028e32:	d916      	bls.n	8028e62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e34:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8028e9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028e38:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028e3c:	f8cd c004 	str.w	ip, [sp, #4]
 8028e40:	f04f 0c01 	mov.w	ip, #1
 8028e44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028e48:	6920      	ldr	r0, [r4, #16]
 8028e4a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028e4e:	a901      	add	r1, sp, #4
 8028e50:	f88d c008 	strb.w	ip, [sp, #8]
 8028e54:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028e58:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e5c:	6803      	ldr	r3, [r0, #0]
 8028e5e:	689b      	ldr	r3, [r3, #8]
 8028e60:	4798      	blx	r3
 8028e62:	4b0d      	ldr	r3, [pc, #52]	@ (8028e98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028e64:	a901      	add	r1, sp, #4
 8028e66:	6920      	ldr	r0, [r4, #16]
 8028e68:	9301      	str	r3, [sp, #4]
 8028e6a:	2300      	movs	r3, #0
 8028e6c:	f88d 5008 	strb.w	r5, [sp, #8]
 8028e70:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028e74:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028e78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e7c:	6803      	ldr	r3, [r0, #0]
 8028e7e:	681b      	ldr	r3, [r3, #0]
 8028e80:	4798      	blx	r3
 8028e82:	b005      	add	sp, #20
 8028e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028e86:	2900      	cmp	r1, #0
 8028e88:	d1eb      	bne.n	8028e62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e8a:	80a2      	strh	r2, [r4, #4]
 8028e8c:	80c6      	strh	r6, [r0, #6]
 8028e8e:	60a1      	str	r1, [r4, #8]
 8028e90:	81a1      	strh	r1, [r4, #12]
 8028e92:	73a1      	strb	r1, [r4, #14]
 8028e94:	e7e5      	b.n	8028e62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e96:	bf00      	nop
 8028e98:	08030280 	.word	0x08030280
 8028e9c:	08030b88 	.word	0x08030b88

08028ea0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8028ea0:	10c9      	asrs	r1, r1, #3
 8028ea2:	2900      	cmp	r1, #0
 8028ea4:	bfb8      	it	lt
 8028ea6:	4249      	neglt	r1, r1
 8028ea8:	2801      	cmp	r0, #1
 8028eaa:	d108      	bne.n	8028ebe <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8028eac:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028eb0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8028eb4:	4601      	mov	r1, r0
 8028eb6:	dd02      	ble.n	8028ebe <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8028eb8:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8028ebc:	4770      	bx	lr
 8028ebe:	29ff      	cmp	r1, #255	@ 0xff
 8028ec0:	bfa8      	it	ge
 8028ec2:	21ff      	movge	r1, #255	@ 0xff
 8028ec4:	4608      	mov	r0, r1
 8028ec6:	4770      	bx	lr

08028ec8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8028ec8:	b410      	push	{r4}
 8028eca:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8028ece:	429c      	cmp	r4, r3
 8028ed0:	d803      	bhi.n	8028eda <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8028ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028ed6:	f7f0 ba93 	b.w	8019400 <_ZN8touchgfx7Outline6lineToEii>
 8028eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028ede:	4770      	bx	lr

08028ee0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8028ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ee4:	b08b      	sub	sp, #44	@ 0x2c
 8028ee6:	4606      	mov	r6, r0
 8028ee8:	468a      	mov	sl, r1
 8028eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028eee:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8028ef2:	9308      	str	r3, [sp, #32]
 8028ef4:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8028ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8028efa:	f7f0 fbec 	bl	80196d6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8028efe:	68b5      	ldr	r5, [r6, #8]
 8028f00:	4604      	mov	r4, r0
 8028f02:	2d00      	cmp	r5, #0
 8028f04:	d044      	beq.n	8028f90 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028f06:	6873      	ldr	r3, [r6, #4]
 8028f08:	42ab      	cmp	r3, r5
 8028f0a:	d33d      	bcc.n	8028f88 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8028f0c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8028f10:	f04f 0800 	mov.w	r8, #0
 8028f14:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8028f18:	eb02 0b03 	add.w	fp, r2, r3
 8028f1c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8028f20:	fb02 1203 	mla	r2, r2, r3, r1
 8028f24:	9205      	str	r2, [sp, #20]
 8028f26:	1e6a      	subs	r2, r5, #1
 8028f28:	9204      	str	r2, [sp, #16]
 8028f2a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8028f2e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028f32:	454b      	cmp	r3, r9
 8028f34:	463a      	mov	r2, r7
 8028f36:	d008      	beq.n	8028f4a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8028f38:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8028f3c:	eb03 0b09 	add.w	fp, r3, r9
 8028f40:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8028f44:	fb03 1309 	mla	r3, r3, r9, r1
 8028f48:	9305      	str	r3, [sp, #20]
 8028f4a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8028f4e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8028f52:	4498      	add	r8, r3
 8028f54:	9b04      	ldr	r3, [sp, #16]
 8028f56:	3b01      	subs	r3, #1
 8028f58:	9304      	str	r3, [sp, #16]
 8028f5a:	9b04      	ldr	r3, [sp, #16]
 8028f5c:	3301      	adds	r3, #1
 8028f5e:	d015      	beq.n	8028f8c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8028f60:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8028f64:	42bb      	cmp	r3, r7
 8028f66:	d117      	bne.n	8028f98 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8028f68:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8028f6c:	9b04      	ldr	r3, [sp, #16]
 8028f6e:	4548      	cmp	r0, r9
 8028f70:	f103 33ff 	add.w	r3, r3, #4294967295
 8028f74:	d17d      	bne.n	8029072 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8028f76:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8028f7a:	4401      	add	r1, r0
 8028f7c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8028f80:	4480      	add	r8, r0
 8028f82:	e7e9      	b.n	8028f58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8028f84:	461f      	mov	r7, r3
 8028f86:	e042      	b.n	802900e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8028f88:	2000      	movs	r0, #0
 8028f8a:	e002      	b.n	8028f92 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8028f8c:	2900      	cmp	r1, #0
 8028f8e:	d16d      	bne.n	802906c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8028f90:	2001      	movs	r0, #1
 8028f92:	b00b      	add	sp, #44	@ 0x2c
 8028f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f98:	b379      	cbz	r1, 8028ffa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8028f9a:	2f00      	cmp	r7, #0
 8028f9c:	db29      	blt.n	8028ff2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028f9e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8028fa2:	42bb      	cmp	r3, r7
 8028fa4:	dd25      	ble.n	8028ff2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028fa6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8028faa:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8028fae:	f7ff ff77 	bl	8028ea0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8028fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028fb4:	fb10 f003 	smulbb	r0, r0, r3
 8028fb8:	b280      	uxth	r0, r0
 8028fba:	1c41      	adds	r1, r0, #1
 8028fbc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028fc0:	1209      	asrs	r1, r1, #8
 8028fc2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8028fc6:	d014      	beq.n	8028ff2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028fc8:	b2c9      	uxtb	r1, r1
 8028fca:	9808      	ldr	r0, [sp, #32]
 8028fcc:	b2ba      	uxth	r2, r7
 8028fce:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8028fd0:	9102      	str	r1, [sp, #8]
 8028fd2:	2101      	movs	r1, #1
 8028fd4:	4413      	add	r3, r2
 8028fd6:	4402      	add	r2, r0
 8028fd8:	9101      	str	r1, [sp, #4]
 8028fda:	fa0f f18b 	sxth.w	r1, fp
 8028fde:	f8da 0000 	ldr.w	r0, [sl]
 8028fe2:	b21b      	sxth	r3, r3
 8028fe4:	9100      	str	r1, [sp, #0]
 8028fe6:	b212      	sxth	r2, r2
 8028fe8:	6941      	ldr	r1, [r0, #20]
 8028fea:	4650      	mov	r0, sl
 8028fec:	460d      	mov	r5, r1
 8028fee:	9905      	ldr	r1, [sp, #20]
 8028ff0:	47a8      	blx	r5
 8028ff2:	9b04      	ldr	r3, [sp, #16]
 8028ff4:	1c7a      	adds	r2, r7, #1
 8028ff6:	3301      	adds	r3, #1
 8028ff8:	d0ca      	beq.n	8028f90 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028ffa:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028ffe:	1abb      	subs	r3, r7, r2
 8029000:	2b00      	cmp	r3, #0
 8029002:	dd31      	ble.n	8029068 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029004:	2a00      	cmp	r2, #0
 8029006:	dabd      	bge.n	8028f84 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8029008:	2f00      	cmp	r7, #0
 802900a:	dd2d      	ble.n	8029068 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802900c:	2200      	movs	r2, #0
 802900e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029012:	19d1      	adds	r1, r2, r7
 8029014:	4299      	cmp	r1, r3
 8029016:	db02      	blt.n	802901e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8029018:	1a9f      	subs	r7, r3, r2
 802901a:	2f00      	cmp	r7, #0
 802901c:	dd24      	ble.n	8029068 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802901e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8029022:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8029026:	f7ff ff3b 	bl	8028ea0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802902a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802902c:	fb10 f003 	smulbb	r0, r0, r3
 8029030:	b280      	uxth	r0, r0
 8029032:	1c41      	adds	r1, r0, #1
 8029034:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029038:	1209      	asrs	r1, r1, #8
 802903a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802903e:	d013      	beq.n	8029068 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029040:	b292      	uxth	r2, r2
 8029042:	9808      	ldr	r0, [sp, #32]
 8029044:	b2c9      	uxtb	r1, r1
 8029046:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029048:	b23f      	sxth	r7, r7
 802904a:	4413      	add	r3, r2
 802904c:	9102      	str	r1, [sp, #8]
 802904e:	4402      	add	r2, r0
 8029050:	fa0f f18b 	sxth.w	r1, fp
 8029054:	f8da 0000 	ldr.w	r0, [sl]
 8029058:	b21b      	sxth	r3, r3
 802905a:	9100      	str	r1, [sp, #0]
 802905c:	b212      	sxth	r2, r2
 802905e:	9701      	str	r7, [sp, #4]
 8029060:	9905      	ldr	r1, [sp, #20]
 8029062:	6947      	ldr	r7, [r0, #20]
 8029064:	4650      	mov	r0, sl
 8029066:	47b8      	blx	r7
 8029068:	464b      	mov	r3, r9
 802906a:	e75e      	b.n	8028f2a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802906c:	2f00      	cmp	r7, #0
 802906e:	da96      	bge.n	8028f9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8029070:	e78e      	b.n	8028f90 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029072:	2900      	cmp	r1, #0
 8029074:	d0f8      	beq.n	8029068 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029076:	e790      	b.n	8028f9a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08029078 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8029078:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802907c:	461e      	mov	r6, r3
 802907e:	4b36      	ldr	r3, [pc, #216]	@ (8029158 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8029080:	2500      	movs	r5, #0
 8029082:	f100 0814 	add.w	r8, r0, #20
 8029086:	4604      	mov	r4, r0
 8029088:	4617      	mov	r7, r2
 802908a:	e9c0 3100 	strd	r3, r1, [r0]
 802908e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8029092:	8185      	strh	r5, [r0, #12]
 8029094:	8103      	strh	r3, [r0, #8]
 8029096:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802909a:	81c5      	strh	r5, [r0, #14]
 802909c:	7283      	strb	r3, [r0, #10]
 802909e:	8205      	strh	r5, [r0, #16]
 80290a0:	8245      	strh	r5, [r0, #18]
 80290a2:	4640      	mov	r0, r8
 80290a4:	f7ef fcf2 	bl	8018a8c <_ZN8touchgfx7OutlineC1Ev>
 80290a8:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 80290ac:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 80290b0:	466b      	mov	r3, sp
 80290b2:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 80290b6:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 80290ba:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 80290be:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 80290c2:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 80290c6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 80290ca:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 80290ce:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 80290d2:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 80290d6:	6830      	ldr	r0, [r6, #0]
 80290d8:	6871      	ldr	r1, [r6, #4]
 80290da:	8872      	ldrh	r2, [r6, #2]
 80290dc:	8835      	ldrh	r5, [r6, #0]
 80290de:	c303      	stmia	r3!, {r0, r1}
 80290e0:	887b      	ldrh	r3, [r7, #2]
 80290e2:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80290e6:	4413      	add	r3, r2
 80290e8:	883a      	ldrh	r2, [r7, #0]
 80290ea:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80290ee:	442a      	add	r2, r5
 80290f0:	81e3      	strh	r3, [r4, #14]
 80290f2:	8220      	strh	r0, [r4, #16]
 80290f4:	4668      	mov	r0, sp
 80290f6:	81a2      	strh	r2, [r4, #12]
 80290f8:	8261      	strh	r1, [r4, #18]
 80290fa:	4639      	mov	r1, r7
 80290fc:	f7f1 fece 	bl	801ae9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029100:	f104 000c 	add.w	r0, r4, #12
 8029104:	f7f1 fe86 	bl	801ae14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029108:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802910c:	f8bd 2000 	ldrh.w	r2, [sp]
 8029110:	4640      	mov	r0, r8
 8029112:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8029116:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802911a:	f7ef fc9b 	bl	8018a54 <_ZN8touchgfx7Outline5resetEv>
 802911e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8029122:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8029126:	4620      	mov	r0, r4
 8029128:	015b      	lsls	r3, r3, #5
 802912a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802912c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029130:	015b      	lsls	r3, r3, #5
 8029132:	6523      	str	r3, [r4, #80]	@ 0x50
 8029134:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8029138:	015b      	lsls	r3, r3, #5
 802913a:	6563      	str	r3, [r4, #84]	@ 0x54
 802913c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8029140:	015b      	lsls	r3, r3, #5
 8029142:	65a3      	str	r3, [r4, #88]	@ 0x58
 8029144:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8029148:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802914c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8029150:	b002      	add	sp, #8
 8029152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029156:	bf00      	nop
 8029158:	08030e18 	.word	0x08030e18

0802915c <_ZN8touchgfx6Canvas5closeEv>:
 802915c:	b538      	push	{r3, r4, r5, lr}
 802915e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8029162:	4604      	mov	r4, r0
 8029164:	b193      	cbz	r3, 802918c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029166:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802916a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802916e:	4213      	tst	r3, r2
 8029170:	d10c      	bne.n	802918c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029172:	f100 0514 	add.w	r5, r0, #20
 8029176:	b123      	cbz	r3, 8029182 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8029178:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802917c:	4628      	mov	r0, r5
 802917e:	f7ff fea3 	bl	8028ec8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029182:	4628      	mov	r0, r5
 8029184:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8029188:	f7ff fe9e 	bl	8028ec8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802918c:	2300      	movs	r3, #0
 802918e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029192:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8029196:	4298      	cmp	r0, r3
 8029198:	bf34      	ite	cc
 802919a:	2000      	movcc	r0, #0
 802919c:	2001      	movcs	r0, #1
 802919e:	bd38      	pop	{r3, r4, r5, pc}

080291a0 <_ZN8touchgfx6Canvas6renderEh>:
 80291a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80291a4:	7a85      	ldrb	r5, [r0, #10]
 80291a6:	4604      	mov	r4, r0
 80291a8:	4369      	muls	r1, r5
 80291aa:	1c4d      	adds	r5, r1, #1
 80291ac:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80291b0:	122d      	asrs	r5, r5, #8
 80291b2:	f000 8098 	beq.w	80292e6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 80291b6:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80291ba:	2b00      	cmp	r3, #0
 80291bc:	f000 8093 	beq.w	80292e6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 80291c0:	f7ff ffcc 	bl	802915c <_ZN8touchgfx6Canvas5closeEv>
 80291c4:	4607      	mov	r7, r0
 80291c6:	2800      	cmp	r0, #0
 80291c8:	d045      	beq.n	8029256 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80291ca:	6860      	ldr	r0, [r4, #4]
 80291cc:	4e47      	ldr	r6, [pc, #284]	@ (80292ec <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 80291ce:	6803      	ldr	r3, [r0, #0]
 80291d0:	6837      	ldr	r7, [r6, #0]
 80291d2:	689b      	ldr	r3, [r3, #8]
 80291d4:	4798      	blx	r3
 80291d6:	4601      	mov	r1, r0
 80291d8:	4638      	mov	r0, r7
 80291da:	f7ec f88d 	bl	80152f8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80291de:	4607      	mov	r7, r0
 80291e0:	f7df f87a 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 80291e4:	6803      	ldr	r3, [r0, #0]
 80291e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80291e8:	4798      	blx	r3
 80291ea:	4680      	mov	r8, r0
 80291ec:	f7df f874 	bl	80082d8 <_ZN8touchgfx3HAL3lcdEv>
 80291f0:	6803      	ldr	r3, [r0, #0]
 80291f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80291f4:	4798      	blx	r3
 80291f6:	280b      	cmp	r0, #11
 80291f8:	d85a      	bhi.n	80292b0 <_ZN8touchgfx6Canvas6renderEh+0x110>
 80291fa:	e8df f000 	tbb	[pc, r0]
 80291fe:	5b50      	.short	0x5b50
 8029200:	3059066b 	.word	0x3059066b
 8029204:	64646440 	.word	0x64646440
 8029208:	6464      	.short	0x6464
 802920a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802920e:	2208      	movs	r2, #8
 8029210:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029214:	fb91 f2f2 	sdiv	r2, r1, r2
 8029218:	fb08 2303 	mla	r3, r8, r3, r2
 802921c:	441f      	add	r7, r3
 802921e:	424b      	negs	r3, r1
 8029220:	f001 0107 	and.w	r1, r1, #7
 8029224:	f003 0307 	and.w	r3, r3, #7
 8029228:	bf58      	it	pl
 802922a:	4259      	negpl	r1, r3
 802922c:	b2c9      	uxtb	r1, r1
 802922e:	b2ed      	uxtb	r5, r5
 8029230:	463a      	mov	r2, r7
 8029232:	fa0f f388 	sxth.w	r3, r8
 8029236:	f104 0014 	add.w	r0, r4, #20
 802923a:	e9cd 1500 	strd	r1, r5, [sp]
 802923e:	6861      	ldr	r1, [r4, #4]
 8029240:	f7ff fe4e 	bl	8028ee0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8029244:	4607      	mov	r7, r0
 8029246:	6860      	ldr	r0, [r4, #4]
 8029248:	6803      	ldr	r3, [r0, #0]
 802924a:	691b      	ldr	r3, [r3, #16]
 802924c:	4798      	blx	r3
 802924e:	6830      	ldr	r0, [r6, #0]
 8029250:	6803      	ldr	r3, [r0, #0]
 8029252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029254:	4798      	blx	r3
 8029256:	4638      	mov	r0, r7
 8029258:	b002      	add	sp, #8
 802925a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802925e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029262:	2204      	movs	r2, #4
 8029264:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029268:	fb91 f2f2 	sdiv	r2, r1, r2
 802926c:	fb08 2303 	mla	r3, r8, r3, r2
 8029270:	441f      	add	r7, r3
 8029272:	424b      	negs	r3, r1
 8029274:	f001 0103 	and.w	r1, r1, #3
 8029278:	f003 0303 	and.w	r3, r3, #3
 802927c:	e7d4      	b.n	8029228 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802927e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029282:	2202      	movs	r2, #2
 8029284:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029288:	2900      	cmp	r1, #0
 802928a:	fb91 f2f2 	sdiv	r2, r1, r2
 802928e:	f001 0101 	and.w	r1, r1, #1
 8029292:	fb08 2303 	mla	r3, r8, r3, r2
 8029296:	bfb8      	it	lt
 8029298:	4249      	neglt	r1, r1
 802929a:	441f      	add	r7, r3
 802929c:	e7c6      	b.n	802922c <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802929e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80292a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80292a6:	fb08 f303 	mul.w	r3, r8, r3
 80292aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80292ae:	441f      	add	r7, r3
 80292b0:	2100      	movs	r1, #0
 80292b2:	e7bc      	b.n	802922e <_ZN8touchgfx6Canvas6renderEh+0x8e>
 80292b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80292b8:	2103      	movs	r1, #3
 80292ba:	fb08 f203 	mul.w	r2, r8, r3
 80292be:	89a3      	ldrh	r3, [r4, #12]
 80292c0:	fb13 2301 	smlabb	r3, r3, r1, r2
 80292c4:	e7f3      	b.n	80292ae <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80292c6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80292ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80292ce:	fb08 2303 	mla	r3, r8, r3, r2
 80292d2:	e7ec      	b.n	80292ae <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80292d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80292d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80292dc:	fb08 f303 	mul.w	r3, r8, r3
 80292e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80292e4:	e7e3      	b.n	80292ae <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80292e6:	2701      	movs	r7, #1
 80292e8:	e7b5      	b.n	8029256 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80292ea:	bf00      	nop
 80292ec:	24028770 	.word	0x24028770

080292f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80292f0:	4b06      	ldr	r3, [pc, #24]	@ (802930c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 80292f2:	b510      	push	{r4, lr}
 80292f4:	781b      	ldrb	r3, [r3, #0]
 80292f6:	2b01      	cmp	r3, #1
 80292f8:	d107      	bne.n	802930a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80292fa:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80292fe:	680b      	ldr	r3, [r1, #0]
 8029300:	6814      	ldr	r4, [r2, #0]
 8029302:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029306:	6013      	str	r3, [r2, #0]
 8029308:	600c      	str	r4, [r1, #0]
 802930a:	bd10      	pop	{r4, pc}
 802930c:	24028768 	.word	0x24028768

08029310 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029310:	b513      	push	{r0, r1, r4, lr}
 8029312:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8029316:	4604      	mov	r4, r0
 8029318:	e9cd 2100 	strd	r2, r1, [sp]
 802931c:	b9a3      	cbnz	r3, 8029348 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802931e:	466a      	mov	r2, sp
 8029320:	a901      	add	r1, sp, #4
 8029322:	4620      	mov	r0, r4
 8029324:	f7ff ffe4 	bl	80292f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029328:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802932a:	9901      	ldr	r1, [sp, #4]
 802932c:	9a00      	ldr	r2, [sp, #0]
 802932e:	1ac9      	subs	r1, r1, r3
 8029330:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029332:	1ad2      	subs	r2, r2, r3
 8029334:	9101      	str	r1, [sp, #4]
 8029336:	2a00      	cmp	r2, #0
 8029338:	9200      	str	r2, [sp, #0]
 802933a:	da0b      	bge.n	8029354 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802933c:	2301      	movs	r3, #1
 802933e:	2900      	cmp	r1, #0
 8029340:	da0e      	bge.n	8029360 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8029342:	f043 0304 	orr.w	r3, r3, #4
 8029346:	e013      	b.n	8029370 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8029348:	f7ff ff08 	bl	802915c <_ZN8touchgfx6Canvas5closeEv>
 802934c:	2800      	cmp	r0, #0
 802934e:	d1e6      	bne.n	802931e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8029350:	b002      	add	sp, #8
 8029352:	bd10      	pop	{r4, pc}
 8029354:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8029356:	429a      	cmp	r2, r3
 8029358:	bfac      	ite	ge
 802935a:	2302      	movge	r3, #2
 802935c:	2300      	movlt	r3, #0
 802935e:	e7ee      	b.n	802933e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8029360:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8029362:	4281      	cmp	r1, r0
 8029364:	bfac      	ite	ge
 8029366:	2008      	movge	r0, #8
 8029368:	2000      	movlt	r0, #0
 802936a:	4318      	orrs	r0, r3
 802936c:	b2c3      	uxtb	r3, r0
 802936e:	b158      	cbz	r0, 8029388 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8029370:	2200      	movs	r2, #0
 8029372:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8029376:	9901      	ldr	r1, [sp, #4]
 8029378:	9a00      	ldr	r2, [sp, #0]
 802937a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802937c:	6722      	str	r2, [r4, #112]	@ 0x70
 802937e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8029382:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8029386:	e7e3      	b.n	8029350 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8029388:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802938c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8029390:	4298      	cmp	r0, r3
 8029392:	d803      	bhi.n	802939c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8029394:	f104 0014 	add.w	r0, r4, #20
 8029398:	f7f0 f84c 	bl	8019434 <_ZN8touchgfx7Outline6moveToEii>
 802939c:	2301      	movs	r3, #1
 802939e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80293a2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80293a6:	2300      	movs	r3, #0
 80293a8:	e7e5      	b.n	8029376 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080293aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80293aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80293ac:	ab02      	add	r3, sp, #8
 80293ae:	4604      	mov	r4, r0
 80293b0:	9101      	str	r1, [sp, #4]
 80293b2:	a901      	add	r1, sp, #4
 80293b4:	f843 2d08 	str.w	r2, [r3, #-8]!
 80293b8:	461a      	mov	r2, r3
 80293ba:	f7ff ff99 	bl	80292f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80293be:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80293c0:	9901      	ldr	r1, [sp, #4]
 80293c2:	9a00      	ldr	r2, [sp, #0]
 80293c4:	1ac9      	subs	r1, r1, r3
 80293c6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80293c8:	1ad2      	subs	r2, r2, r3
 80293ca:	9101      	str	r1, [sp, #4]
 80293cc:	2a00      	cmp	r2, #0
 80293ce:	9200      	str	r2, [sp, #0]
 80293d0:	db1c      	blt.n	802940c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80293d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80293d4:	429a      	cmp	r2, r3
 80293d6:	bfac      	ite	ge
 80293d8:	2002      	movge	r0, #2
 80293da:	2000      	movlt	r0, #0
 80293dc:	2900      	cmp	r1, #0
 80293de:	db17      	blt.n	8029410 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80293e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80293e2:	4299      	cmp	r1, r3
 80293e4:	bfac      	ite	ge
 80293e6:	2308      	movge	r3, #8
 80293e8:	2300      	movlt	r3, #0
 80293ea:	4303      	orrs	r3, r0
 80293ec:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80293f0:	b2dd      	uxtb	r5, r3
 80293f2:	b978      	cbnz	r0, 8029414 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80293f4:	f104 0014 	add.w	r0, r4, #20
 80293f8:	f7ff fd66 	bl	8028ec8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80293fc:	9b01      	ldr	r3, [sp, #4]
 80293fe:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8029402:	6623      	str	r3, [r4, #96]	@ 0x60
 8029404:	9b00      	ldr	r3, [sp, #0]
 8029406:	6663      	str	r3, [r4, #100]	@ 0x64
 8029408:	b002      	add	sp, #8
 802940a:	bd70      	pop	{r4, r5, r6, pc}
 802940c:	2001      	movs	r0, #1
 802940e:	e7e5      	b.n	80293dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8029410:	2304      	movs	r3, #4
 8029412:	e7ea      	b.n	80293ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8029414:	b113      	cbz	r3, 802941c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8029416:	ea10 0305 	ands.w	r3, r0, r5
 802941a:	d11c      	bne.n	8029456 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802941c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8029420:	f104 0614 	add.w	r6, r4, #20
 8029424:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8029428:	b98b      	cbnz	r3, 802944e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802942a:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802942e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8029432:	4298      	cmp	r0, r3
 8029434:	d802      	bhi.n	802943c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8029436:	4630      	mov	r0, r6
 8029438:	f7ef fffc 	bl	8019434 <_ZN8touchgfx7Outline6moveToEii>
 802943c:	2301      	movs	r3, #1
 802943e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029442:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8029446:	4630      	mov	r0, r6
 8029448:	e9dd 2100 	ldrd	r2, r1, [sp]
 802944c:	e7d4      	b.n	80293f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802944e:	4630      	mov	r0, r6
 8029450:	f7ff fd3a 	bl	8028ec8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029454:	e7f7      	b.n	8029446 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8029456:	461d      	mov	r5, r3
 8029458:	e7d0      	b.n	80293fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802945c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802945c:	b538      	push	{r3, r4, r5, lr}
 802945e:	ed2d 8b10 	vpush	{d8-d15}
 8029462:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8029466:	4605      	mov	r5, r0
 8029468:	eeb0 ca40 	vmov.f32	s24, s0
 802946c:	460c      	mov	r4, r1
 802946e:	eef0 ca60 	vmov.f32	s25, s1
 8029472:	ed9f ba57 	vldr	s22, [pc, #348]	@ 80295d0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8029476:	eeb0 da41 	vmov.f32	s26, s2
 802947a:	eef0 da61 	vmov.f32	s27, s3
 802947e:	eeb0 ea42 	vmov.f32	s28, s4
 8029482:	eef0 ea62 	vmov.f32	s29, s5
 8029486:	eef0 aa6b 	vmov.f32	s21, s23
 802948a:	2c08      	cmp	r4, #8
 802948c:	d86e      	bhi.n	802956c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802948e:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8029492:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8029496:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802949a:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802949e:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 80294a2:	ee3c fa0d 	vadd.f32	s30, s24, s26
 80294a6:	ee7c faad 	vadd.f32	s31, s25, s27
 80294aa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80294ae:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 80294b2:	ee3d aaae 	vadd.f32	s20, s27, s29
 80294b6:	ee2f fa2b 	vmul.f32	s30, s30, s23
 80294ba:	ee6f faab 	vmul.f32	s31, s31, s23
 80294be:	ee69 9aab 	vmul.f32	s19, s19, s23
 80294c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80294c6:	ee2a aa2b 	vmul.f32	s20, s20, s23
 80294ca:	ee7f 8a29 	vadd.f32	s17, s30, s19
 80294ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80294d2:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 80294d6:	ee68 8aab 	vmul.f32	s17, s17, s23
 80294da:	bf48      	it	mi
 80294dc:	eef1 7a67 	vnegmi.f32	s15, s15
 80294e0:	ee29 9a2b 	vmul.f32	s18, s18, s23
 80294e4:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80294e8:	eef4 7acb 	vcmpe.f32	s15, s22
 80294ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80294f0:	dd3f      	ble.n	8029572 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80294f2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80294f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80294fa:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80294fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8029502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8029506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802950a:	d847      	bhi.n	802959c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802950c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8029510:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8029514:	f000 fb34 	bl	8029b80 <atan2f>
 8029518:	eeb0 8a40 	vmov.f32	s16, s0
 802951c:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8029520:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8029524:	f000 fb2c 	bl	8029b80 <atan2f>
 8029528:	ee38 0a40 	vsub.f32	s0, s16, s0
 802952c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80295d4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8029530:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029538:	bf48      	it	mi
 802953a:	eeb1 0a40 	vnegmi.f32	s0, s0
 802953e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029546:	bfa4      	itt	ge
 8029548:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 80295d8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802954c:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8029550:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80295dc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8029554:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802955c:	d51e      	bpl.n	802959c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802955e:	eef0 0a49 	vmov.f32	s1, s18
 8029562:	4628      	mov	r0, r5
 8029564:	eeb0 0a68 	vmov.f32	s0, s17
 8029568:	f7ec fd46 	bl	8015ff8 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802956c:	ecbd 8b10 	vpop	{d8-d15}
 8029570:	bd38      	pop	{r3, r4, r5, pc}
 8029572:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8029576:	eeb0 7a68 	vmov.f32	s14, s17
 802957a:	eef0 6a49 	vmov.f32	s13, s18
 802957e:	eea7 7aea 	vfms.f32	s14, s15, s21
 8029582:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8029586:	eee7 6aea 	vfms.f32	s13, s15, s21
 802958a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802958e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8029592:	eef4 7ac6 	vcmpe.f32	s15, s12
 8029596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802959a:	d9e0      	bls.n	802955e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802959c:	3401      	adds	r4, #1
 802959e:	eef0 0a6c 	vmov.f32	s1, s25
 80295a2:	eeb0 0a4c 	vmov.f32	s0, s24
 80295a6:	4628      	mov	r0, r5
 80295a8:	4621      	mov	r1, r4
 80295aa:	eef0 2a49 	vmov.f32	s5, s18
 80295ae:	eeb0 2a68 	vmov.f32	s4, s17
 80295b2:	eef0 1a6f 	vmov.f32	s3, s31
 80295b6:	eeb0 1a4f 	vmov.f32	s2, s30
 80295ba:	f7ff ff4f 	bl	802945c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80295be:	eef0 da4a 	vmov.f32	s27, s20
 80295c2:	eeb0 da69 	vmov.f32	s26, s19
 80295c6:	eef0 ca49 	vmov.f32	s25, s18
 80295ca:	eeb0 ca68 	vmov.f32	s24, s17
 80295ce:	e75c      	b.n	802948a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 80295d0:	2edbe6ff 	.word	0x2edbe6ff
 80295d4:	40490fdb 	.word	0x40490fdb
 80295d8:	40c90fdb 	.word	0x40c90fdb
 80295dc:	3dcccccd 	.word	0x3dcccccd

080295e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 80295e0:	b530      	push	{r4, r5, lr}
 80295e2:	ed2d 8b10 	vpush	{d8-d15}
 80295e6:	eef0 8a40 	vmov.f32	s17, s0
 80295ea:	b085      	sub	sp, #20
 80295ec:	eef0 9a60 	vmov.f32	s19, s1
 80295f0:	4604      	mov	r4, r0
 80295f2:	eef0 fa41 	vmov.f32	s31, s2
 80295f6:	460d      	mov	r5, r1
 80295f8:	eeb0 fa61 	vmov.f32	s30, s3
 80295fc:	eef0 ba42 	vmov.f32	s23, s4
 8029600:	eeb0 ca62 	vmov.f32	s24, s5
 8029604:	eef0 aa43 	vmov.f32	s21, s6
 8029608:	eeb0 ba63 	vmov.f32	s22, s7
 802960c:	2d08      	cmp	r5, #8
 802960e:	f200 8113 	bhi.w	8029838 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8029612:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8029616:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802961a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802961e:	ee38 daaf 	vadd.f32	s26, s17, s31
 8029622:	ee26 6a27 	vmul.f32	s12, s12, s15
 8029626:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802962a:	ee2d da27 	vmul.f32	s26, s26, s15
 802962e:	ed8d 6a01 	vstr	s12, [sp, #4]
 8029632:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8029636:	ee6c caa7 	vmul.f32	s25, s25, s15
 802963a:	eeb0 ea4d 	vmov.f32	s28, s26
 802963e:	ee79 da8f 	vadd.f32	s27, s19, s30
 8029642:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8029646:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802964a:	ee66 6a27 	vmul.f32	s13, s12, s15
 802964e:	ee6d daa7 	vmul.f32	s27, s27, s15
 8029652:	edcd 6a03 	vstr	s13, [sp, #12]
 8029656:	eef0 6a6c 	vmov.f32	s13, s25
 802965a:	eef0 ea6d 	vmov.f32	s29, s27
 802965e:	ee2e ea27 	vmul.f32	s28, s28, s15
 8029662:	eee7 6a27 	vfma.f32	s13, s14, s15
 8029666:	eee7 ea27 	vfma.f32	s29, s14, s15
 802966a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802966e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8029672:	eef0 6a67 	vmov.f32	s13, s15
 8029676:	ed8d 7a02 	vstr	s14, [sp, #8]
 802967a:	ed9d 7a03 	vldr	s14, [sp, #12]
 802967e:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8029682:	ed9d 7a02 	vldr	s14, [sp, #8]
 8029686:	ee3e aa87 	vadd.f32	s20, s29, s14
 802968a:	ee29 9a27 	vmul.f32	s18, s18, s15
 802968e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8029692:	2d00      	cmp	r5, #0
 8029694:	f000 810b 	beq.w	80298ae <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029698:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802969c:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80298f4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 80296a0:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 80296a4:	ee7b 7a69 	vsub.f32	s15, s22, s19
 80296a8:	ee3f 6aea 	vsub.f32	s12, s31, s21
 80296ac:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80296b0:	ee3b 5aea 	vsub.f32	s10, s23, s21
 80296b4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80296b8:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 80296bc:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 80296c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80296c4:	eea5 6a27 	vfma.f32	s12, s10, s15
 80296c8:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 80296cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80296d0:	bf48      	it	mi
 80296d2:	eeb1 7a47 	vnegmi.f32	s14, s14
 80296d6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80296da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80296de:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80296e2:	bf48      	it	mi
 80296e4:	eeb1 6a46 	vnegmi.f32	s12, s12
 80296e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80296ec:	f340 80a8 	ble.w	8029840 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80296f0:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80296f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80296f8:	dd5a      	ble.n	80297b0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80296fa:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80296fe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8029702:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8029706:	ee27 7a07 	vmul.f32	s14, s14, s14
 802970a:	ee65 7a85 	vmul.f32	s15, s11, s10
 802970e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029716:	f200 80ca 	bhi.w	80298ae <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802971a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802971e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8029722:	f000 fa2d 	bl	8029b80 <atan2f>
 8029726:	eeb0 8a40 	vmov.f32	s16, s0
 802972a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802972e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8029732:	f000 fa25 	bl	8029b80 <atan2f>
 8029736:	ee38 fa40 	vsub.f32	s30, s16, s0
 802973a:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802973e:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8029742:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8029746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802974a:	bf48      	it	mi
 802974c:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8029750:	f000 fa16 	bl	8029b80 <atan2f>
 8029754:	ee30 0a48 	vsub.f32	s0, s0, s16
 8029758:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80298f8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802975c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029764:	eeb4 fae7 	vcmpe.f32	s30, s15
 8029768:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80298f8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802976c:	bf48      	it	mi
 802976e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8029772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029776:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802977a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80298fc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802977e:	bfa4      	itt	ge
 8029780:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8029900 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8029784:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8029788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802978c:	bfa4      	itt	ge
 802978e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8029900 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8029792:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8029796:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802979a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802979e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297a2:	f140 8084 	bpl.w	80298ae <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80297a6:	eef0 0a4a 	vmov.f32	s1, s20
 80297aa:	eeb0 0a49 	vmov.f32	s0, s18
 80297ae:	e040      	b.n	8029832 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 80297b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80297b4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80297b8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80297bc:	ee67 7a85 	vmul.f32	s15, s15, s10
 80297c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80297c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297c8:	d871      	bhi.n	80298ae <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80297ca:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80297ce:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80297d2:	f000 f9d5 	bl	8029b80 <atan2f>
 80297d6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80297da:	eeb0 8a40 	vmov.f32	s16, s0
 80297de:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80297e2:	f000 f9cd 	bl	8029b80 <atan2f>
 80297e6:	ee38 0a40 	vsub.f32	s0, s16, s0
 80297ea:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80298f8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80297ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80297f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297f6:	bf48      	it	mi
 80297f8:	eeb1 0a40 	vnegmi.f32	s0, s0
 80297fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029804:	bfa4      	itt	ge
 8029806:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8029900 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802980a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802980e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80298fc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8029812:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802981a:	d548      	bpl.n	80298ae <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802981c:	eef0 0a4f 	vmov.f32	s1, s30
 8029820:	4620      	mov	r0, r4
 8029822:	eeb0 0a6f 	vmov.f32	s0, s31
 8029826:	f7ec fbe7 	bl	8015ff8 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802982a:	eef0 0a4c 	vmov.f32	s1, s24
 802982e:	eeb0 0a6b 	vmov.f32	s0, s23
 8029832:	4620      	mov	r0, r4
 8029834:	f7ec fbe0 	bl	8015ff8 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8029838:	b005      	add	sp, #20
 802983a:	ecbd 8b10 	vpop	{d8-d15}
 802983e:	bd30      	pop	{r4, r5, pc}
 8029840:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80298f4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8029844:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8029848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802984c:	dd19      	ble.n	8029882 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802984e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8029852:	ee26 7a06 	vmul.f32	s14, s12, s12
 8029856:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802985a:	ee67 7a85 	vmul.f32	s15, s15, s10
 802985e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029866:	d822      	bhi.n	80298ae <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029868:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802986c:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8029870:	f000 f986 	bl	8029b80 <atan2f>
 8029874:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8029878:	eeb0 8a40 	vmov.f32	s16, s0
 802987c:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8029880:	e7af      	b.n	80297e2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8029882:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8029886:	eeb0 7a49 	vmov.f32	s14, s18
 802988a:	eeb0 6a4a 	vmov.f32	s12, s20
 802988e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8029892:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8029896:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802989a:	ee66 7a06 	vmul.f32	s15, s12, s12
 802989e:	eee7 7a07 	vfma.f32	s15, s14, s14
 80298a2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80298a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80298aa:	f67f af7c 	bls.w	80297a6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 80298ae:	3501      	adds	r5, #1
 80298b0:	eef0 0a69 	vmov.f32	s1, s19
 80298b4:	eeb0 0a68 	vmov.f32	s0, s17
 80298b8:	4620      	mov	r0, r4
 80298ba:	4629      	mov	r1, r5
 80298bc:	eef0 3a4a 	vmov.f32	s7, s20
 80298c0:	eeb0 3a49 	vmov.f32	s6, s18
 80298c4:	eef0 2a6e 	vmov.f32	s5, s29
 80298c8:	eeb0 2a4e 	vmov.f32	s4, s28
 80298cc:	eef0 1a6d 	vmov.f32	s3, s27
 80298d0:	eeb0 1a4d 	vmov.f32	s2, s26
 80298d4:	f7ff fe84 	bl	80295e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80298d8:	eeb0 ca6c 	vmov.f32	s24, s25
 80298dc:	eddd ba01 	vldr	s23, [sp, #4]
 80298e0:	eef0 9a4a 	vmov.f32	s19, s20
 80298e4:	ed9d fa02 	vldr	s30, [sp, #8]
 80298e8:	eef0 8a49 	vmov.f32	s17, s18
 80298ec:	eddd fa03 	vldr	s31, [sp, #12]
 80298f0:	e68c      	b.n	802960c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80298f2:	bf00      	nop
 80298f4:	2edbe6ff 	.word	0x2edbe6ff
 80298f8:	40490fdb 	.word	0x40490fdb
 80298fc:	3dcccccd 	.word	0x3dcccccd
 8029900:	40c90fdb 	.word	0x40c90fdb

08029904 <_ZN8touchgfx6CanvasD1Ev>:
 8029904:	4b04      	ldr	r3, [pc, #16]	@ (8029918 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8029906:	b510      	push	{r4, lr}
 8029908:	4604      	mov	r4, r0
 802990a:	f840 3b14 	str.w	r3, [r0], #20
 802990e:	f7ef f899 	bl	8018a44 <_ZN8touchgfx7OutlineD1Ev>
 8029912:	4620      	mov	r0, r4
 8029914:	bd10      	pop	{r4, pc}
 8029916:	bf00      	nop
 8029918:	08030e18 	.word	0x08030e18

0802991c <_ZN8touchgfx6CanvasD0Ev>:
 802991c:	b510      	push	{r4, lr}
 802991e:	4604      	mov	r4, r0
 8029920:	f7ff fff0 	bl	8029904 <_ZN8touchgfx6CanvasD1Ev>
 8029924:	2174      	movs	r1, #116	@ 0x74
 8029926:	4620      	mov	r0, r4
 8029928:	f000 f826 	bl	8029978 <_ZdlPvj>
 802992c:	4620      	mov	r0, r4
 802992e:	bd10      	pop	{r4, pc}

08029930 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8029930:	790b      	ldrb	r3, [r1, #4]
 8029932:	2b00      	cmp	r3, #0
 8029934:	bf0c      	ite	eq
 8029936:	2301      	moveq	r3, #1
 8029938:	2300      	movne	r3, #0
 802993a:	b570      	push	{r4, r5, r6, lr}
 802993c:	4604      	mov	r4, r0
 802993e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8029942:	460e      	mov	r6, r1
 8029944:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8029948:	d109      	bne.n	802995e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802994a:	b14d      	cbz	r5, 8029960 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802994c:	7933      	ldrb	r3, [r6, #4]
 802994e:	2b01      	cmp	r3, #1
 8029950:	d10c      	bne.n	802996c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8029952:	6823      	ldr	r3, [r4, #0]
 8029954:	4620      	mov	r0, r4
 8029956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8029958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802995c:	4718      	bx	r3
 802995e:	b12d      	cbz	r5, 802996c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8029960:	6823      	ldr	r3, [r4, #0]
 8029962:	4620      	mov	r0, r4
 8029964:	695b      	ldr	r3, [r3, #20]
 8029966:	4798      	blx	r3
 8029968:	2d00      	cmp	r5, #0
 802996a:	d1ef      	bne.n	802994c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802996c:	bd70      	pop	{r4, r5, r6, pc}

0802996e <__aeabi_atexit>:
 802996e:	460b      	mov	r3, r1
 8029970:	4601      	mov	r1, r0
 8029972:	4618      	mov	r0, r3
 8029974:	f000 bd36 	b.w	802a3e4 <__cxa_atexit>

08029978 <_ZdlPvj>:
 8029978:	f000 b8e6 	b.w	8029b48 <_ZdlPv>

0802997c <__cxa_guard_acquire>:
 802997c:	6802      	ldr	r2, [r0, #0]
 802997e:	07d2      	lsls	r2, r2, #31
 8029980:	4603      	mov	r3, r0
 8029982:	d405      	bmi.n	8029990 <__cxa_guard_acquire+0x14>
 8029984:	7842      	ldrb	r2, [r0, #1]
 8029986:	b102      	cbz	r2, 802998a <__cxa_guard_acquire+0xe>
 8029988:	deff      	udf	#255	@ 0xff
 802998a:	2001      	movs	r0, #1
 802998c:	7058      	strb	r0, [r3, #1]
 802998e:	4770      	bx	lr
 8029990:	2000      	movs	r0, #0
 8029992:	4770      	bx	lr

08029994 <__cxa_guard_release>:
 8029994:	2301      	movs	r3, #1
 8029996:	6003      	str	r3, [r0, #0]
 8029998:	4770      	bx	lr

0802999a <_Znwj>:
 802999a:	2801      	cmp	r0, #1
 802999c:	bf38      	it	cc
 802999e:	2001      	movcc	r0, #1
 80299a0:	b510      	push	{r4, lr}
 80299a2:	4604      	mov	r4, r0
 80299a4:	4620      	mov	r0, r4
 80299a6:	f000 fc5f 	bl	802a268 <malloc>
 80299aa:	b100      	cbz	r0, 80299ae <_Znwj+0x14>
 80299ac:	bd10      	pop	{r4, pc}
 80299ae:	f000 f8df 	bl	8029b70 <_ZSt15get_new_handlerv>
 80299b2:	b908      	cbnz	r0, 80299b8 <_Znwj+0x1e>
 80299b4:	f000 fc2d 	bl	802a212 <abort>
 80299b8:	4780      	blx	r0
 80299ba:	e7f3      	b.n	80299a4 <_Znwj+0xa>

080299bc <__cxa_pure_virtual>:
 80299bc:	b508      	push	{r3, lr}
 80299be:	f000 f8d1 	bl	8029b64 <_ZSt9terminatev>

080299c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80299c2:	68c3      	ldr	r3, [r0, #12]
 80299c4:	689a      	ldr	r2, [r3, #8]
 80299c6:	60c2      	str	r2, [r0, #12]
 80299c8:	b510      	push	{r4, lr}
 80299ca:	b102      	cbz	r2, 80299ce <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80299cc:	6050      	str	r0, [r2, #4]
 80299ce:	6842      	ldr	r2, [r0, #4]
 80299d0:	605a      	str	r2, [r3, #4]
 80299d2:	680c      	ldr	r4, [r1, #0]
 80299d4:	4284      	cmp	r4, r0
 80299d6:	d103      	bne.n	80299e0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80299d8:	600b      	str	r3, [r1, #0]
 80299da:	6098      	str	r0, [r3, #8]
 80299dc:	6043      	str	r3, [r0, #4]
 80299de:	bd10      	pop	{r4, pc}
 80299e0:	6891      	ldr	r1, [r2, #8]
 80299e2:	4281      	cmp	r1, r0
 80299e4:	bf0c      	ite	eq
 80299e6:	6093      	streq	r3, [r2, #8]
 80299e8:	60d3      	strne	r3, [r2, #12]
 80299ea:	e7f6      	b.n	80299da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080299ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80299ec:	6883      	ldr	r3, [r0, #8]
 80299ee:	68da      	ldr	r2, [r3, #12]
 80299f0:	6082      	str	r2, [r0, #8]
 80299f2:	b510      	push	{r4, lr}
 80299f4:	b102      	cbz	r2, 80299f8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80299f6:	6050      	str	r0, [r2, #4]
 80299f8:	6842      	ldr	r2, [r0, #4]
 80299fa:	605a      	str	r2, [r3, #4]
 80299fc:	680c      	ldr	r4, [r1, #0]
 80299fe:	4284      	cmp	r4, r0
 8029a00:	d103      	bne.n	8029a0a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8029a02:	600b      	str	r3, [r1, #0]
 8029a04:	60d8      	str	r0, [r3, #12]
 8029a06:	6043      	str	r3, [r0, #4]
 8029a08:	bd10      	pop	{r4, pc}
 8029a0a:	68d1      	ldr	r1, [r2, #12]
 8029a0c:	4281      	cmp	r1, r0
 8029a0e:	bf0c      	ite	eq
 8029a10:	60d3      	streq	r3, [r2, #12]
 8029a12:	6093      	strne	r3, [r2, #8]
 8029a14:	e7f6      	b.n	8029a04 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08029a16 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8029a16:	68c3      	ldr	r3, [r0, #12]
 8029a18:	b123      	cbz	r3, 8029a24 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8029a1a:	4618      	mov	r0, r3
 8029a1c:	689b      	ldr	r3, [r3, #8]
 8029a1e:	2b00      	cmp	r3, #0
 8029a20:	d1fb      	bne.n	8029a1a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8029a22:	4770      	bx	lr
 8029a24:	6843      	ldr	r3, [r0, #4]
 8029a26:	68da      	ldr	r2, [r3, #12]
 8029a28:	4282      	cmp	r2, r0
 8029a2a:	d004      	beq.n	8029a36 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8029a2c:	68c2      	ldr	r2, [r0, #12]
 8029a2e:	4293      	cmp	r3, r2
 8029a30:	bf18      	it	ne
 8029a32:	4618      	movne	r0, r3
 8029a34:	4770      	bx	lr
 8029a36:	4618      	mov	r0, r3
 8029a38:	685b      	ldr	r3, [r3, #4]
 8029a3a:	e7f4      	b.n	8029a26 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08029a3c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8029a3c:	7802      	ldrb	r2, [r0, #0]
 8029a3e:	4603      	mov	r3, r0
 8029a40:	b92a      	cbnz	r2, 8029a4e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8029a42:	6842      	ldr	r2, [r0, #4]
 8029a44:	6852      	ldr	r2, [r2, #4]
 8029a46:	4282      	cmp	r2, r0
 8029a48:	d101      	bne.n	8029a4e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8029a4a:	68d0      	ldr	r0, [r2, #12]
 8029a4c:	4770      	bx	lr
 8029a4e:	689a      	ldr	r2, [r3, #8]
 8029a50:	b122      	cbz	r2, 8029a5c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8029a52:	4610      	mov	r0, r2
 8029a54:	68d2      	ldr	r2, [r2, #12]
 8029a56:	2a00      	cmp	r2, #0
 8029a58:	d1fb      	bne.n	8029a52 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8029a5a:	4770      	bx	lr
 8029a5c:	6858      	ldr	r0, [r3, #4]
 8029a5e:	6882      	ldr	r2, [r0, #8]
 8029a60:	429a      	cmp	r2, r3
 8029a62:	d000      	beq.n	8029a66 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8029a64:	4770      	bx	lr
 8029a66:	4603      	mov	r3, r0
 8029a68:	6840      	ldr	r0, [r0, #4]
 8029a6a:	e7f8      	b.n	8029a5e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08029a6c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8029a6c:	f7ff bfd3 	b.w	8029a16 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08029a70 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8029a70:	f7ff bfe4 	b.w	8029a3c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08029a74 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8029a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029a78:	461d      	mov	r5, r3
 8029a7a:	1d1f      	adds	r7, r3, #4
 8029a7c:	2300      	movs	r3, #0
 8029a7e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8029a82:	460c      	mov	r4, r1
 8029a84:	604a      	str	r2, [r1, #4]
 8029a86:	700b      	strb	r3, [r1, #0]
 8029a88:	b1a0      	cbz	r0, 8029ab4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8029a8a:	4295      	cmp	r5, r2
 8029a8c:	6091      	str	r1, [r2, #8]
 8029a8e:	d102      	bne.n	8029a96 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8029a90:	6069      	str	r1, [r5, #4]
 8029a92:	60ec      	str	r4, [r5, #12]
 8029a94:	e003      	b.n	8029a9e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8029a96:	68ab      	ldr	r3, [r5, #8]
 8029a98:	4293      	cmp	r3, r2
 8029a9a:	bf08      	it	eq
 8029a9c:	60a9      	streq	r1, [r5, #8]
 8029a9e:	f04f 0900 	mov.w	r9, #0
 8029aa2:	f04f 0801 	mov.w	r8, #1
 8029aa6:	686b      	ldr	r3, [r5, #4]
 8029aa8:	42a3      	cmp	r3, r4
 8029aaa:	d132      	bne.n	8029b12 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8029aac:	2201      	movs	r2, #1
 8029aae:	701a      	strb	r2, [r3, #0]
 8029ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029ab4:	60d1      	str	r1, [r2, #12]
 8029ab6:	68eb      	ldr	r3, [r5, #12]
 8029ab8:	4293      	cmp	r3, r2
 8029aba:	d1f0      	bne.n	8029a9e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8029abc:	e7e9      	b.n	8029a92 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8029abe:	68c3      	ldr	r3, [r0, #12]
 8029ac0:	42a3      	cmp	r3, r4
 8029ac2:	d103      	bne.n	8029acc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8029ac4:	4639      	mov	r1, r7
 8029ac6:	f7ff ff7c 	bl	80299c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8029aca:	4604      	mov	r4, r0
 8029acc:	6863      	ldr	r3, [r4, #4]
 8029ace:	4639      	mov	r1, r7
 8029ad0:	f883 8000 	strb.w	r8, [r3]
 8029ad4:	4630      	mov	r0, r6
 8029ad6:	f886 9000 	strb.w	r9, [r6]
 8029ada:	f7ff ff87 	bl	80299ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8029ade:	e7e2      	b.n	8029aa6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8029ae0:	b133      	cbz	r3, 8029af0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8029ae2:	781a      	ldrb	r2, [r3, #0]
 8029ae4:	b922      	cbnz	r2, 8029af0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8029ae6:	f880 8000 	strb.w	r8, [r0]
 8029aea:	f883 8000 	strb.w	r8, [r3]
 8029aee:	e021      	b.n	8029b34 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8029af0:	6883      	ldr	r3, [r0, #8]
 8029af2:	42a3      	cmp	r3, r4
 8029af4:	d103      	bne.n	8029afe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8029af6:	4639      	mov	r1, r7
 8029af8:	f7ff ff78 	bl	80299ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8029afc:	4604      	mov	r4, r0
 8029afe:	6863      	ldr	r3, [r4, #4]
 8029b00:	4639      	mov	r1, r7
 8029b02:	f883 8000 	strb.w	r8, [r3]
 8029b06:	4630      	mov	r0, r6
 8029b08:	f886 9000 	strb.w	r9, [r6]
 8029b0c:	f7ff ff59 	bl	80299c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8029b10:	e7c9      	b.n	8029aa6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8029b12:	6860      	ldr	r0, [r4, #4]
 8029b14:	7802      	ldrb	r2, [r0, #0]
 8029b16:	2a00      	cmp	r2, #0
 8029b18:	d1c8      	bne.n	8029aac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8029b1a:	6846      	ldr	r6, [r0, #4]
 8029b1c:	68b3      	ldr	r3, [r6, #8]
 8029b1e:	4283      	cmp	r3, r0
 8029b20:	d1de      	bne.n	8029ae0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8029b22:	68f2      	ldr	r2, [r6, #12]
 8029b24:	2a00      	cmp	r2, #0
 8029b26:	d0ca      	beq.n	8029abe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8029b28:	7811      	ldrb	r1, [r2, #0]
 8029b2a:	2900      	cmp	r1, #0
 8029b2c:	d1c7      	bne.n	8029abe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8029b2e:	2101      	movs	r1, #1
 8029b30:	7019      	strb	r1, [r3, #0]
 8029b32:	7011      	strb	r1, [r2, #0]
 8029b34:	f886 9000 	strb.w	r9, [r6]
 8029b38:	4634      	mov	r4, r6
 8029b3a:	e7b4      	b.n	8029aa6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08029b3c <_ZSt20__throw_length_errorPKc>:
 8029b3c:	b508      	push	{r3, lr}
 8029b3e:	f000 fb68 	bl	802a212 <abort>

08029b42 <_ZSt25__throw_bad_function_callv>:
 8029b42:	b508      	push	{r3, lr}
 8029b44:	f000 fb65 	bl	802a212 <abort>

08029b48 <_ZdlPv>:
 8029b48:	f000 bb96 	b.w	802a278 <free>

08029b4c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029b4c:	b508      	push	{r3, lr}
 8029b4e:	4780      	blx	r0
 8029b50:	f000 fb5f 	bl	802a212 <abort>

08029b54 <_ZSt13get_terminatev>:
 8029b54:	4b02      	ldr	r3, [pc, #8]	@ (8029b60 <_ZSt13get_terminatev+0xc>)
 8029b56:	6818      	ldr	r0, [r3, #0]
 8029b58:	f3bf 8f5b 	dmb	ish
 8029b5c:	4770      	bx	lr
 8029b5e:	bf00      	nop
 8029b60:	240000d8 	.word	0x240000d8

08029b64 <_ZSt9terminatev>:
 8029b64:	b508      	push	{r3, lr}
 8029b66:	f7ff fff5 	bl	8029b54 <_ZSt13get_terminatev>
 8029b6a:	f7ff ffef 	bl	8029b4c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08029b70 <_ZSt15get_new_handlerv>:
 8029b70:	4b02      	ldr	r3, [pc, #8]	@ (8029b7c <_ZSt15get_new_handlerv+0xc>)
 8029b72:	6818      	ldr	r0, [r3, #0]
 8029b74:	f3bf 8f5b 	dmb	ish
 8029b78:	4770      	bx	lr
 8029b7a:	bf00      	nop
 8029b7c:	240291ac 	.word	0x240291ac

08029b80 <atan2f>:
 8029b80:	f000 b9ce 	b.w	8029f20 <__ieee754_atan2f>

08029b84 <sqrtf>:
 8029b84:	b508      	push	{r3, lr}
 8029b86:	ed2d 8b02 	vpush	{d8}
 8029b8a:	eeb0 8a40 	vmov.f32	s16, s0
 8029b8e:	f000 f9c4 	bl	8029f1a <__ieee754_sqrtf>
 8029b92:	eeb4 8a48 	vcmp.f32	s16, s16
 8029b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029b9a:	d60c      	bvs.n	8029bb6 <sqrtf+0x32>
 8029b9c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8029bbc <sqrtf+0x38>
 8029ba0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8029ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ba8:	d505      	bpl.n	8029bb6 <sqrtf+0x32>
 8029baa:	f001 fd43 	bl	802b634 <__errno>
 8029bae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8029bb2:	2321      	movs	r3, #33	@ 0x21
 8029bb4:	6003      	str	r3, [r0, #0]
 8029bb6:	ecbd 8b02 	vpop	{d8}
 8029bba:	bd08      	pop	{r3, pc}
 8029bbc:	00000000 	.word	0x00000000

08029bc0 <sinf_poly>:
 8029bc0:	07cb      	lsls	r3, r1, #31
 8029bc2:	d412      	bmi.n	8029bea <sinf_poly+0x2a>
 8029bc4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029bc8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029bcc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029bd0:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029bd4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029bd8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029bdc:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029be0:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029be4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029be8:	4770      	bx	lr
 8029bea:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029bee:	ee21 5b01 	vmul.f64	d5, d1, d1
 8029bf2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8029bf6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029bfa:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029bfe:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8029c02:	eea1 0b06 	vfma.f64	d0, d1, d6
 8029c06:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029c0a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029c0e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8029c12:	e7e5      	b.n	8029be0 <sinf_poly+0x20>
 8029c14:	0000      	movs	r0, r0
	...

08029c18 <sinf>:
 8029c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029c1a:	ee10 4a10 	vmov	r4, s0
 8029c1e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8029c22:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8029c26:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8029c2a:	eef0 7a40 	vmov.f32	s15, s0
 8029c2e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8029c32:	d218      	bcs.n	8029c66 <sinf+0x4e>
 8029c34:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029c38:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8029c3c:	d20a      	bcs.n	8029c54 <sinf+0x3c>
 8029c3e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8029c42:	d103      	bne.n	8029c4c <sinf+0x34>
 8029c44:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8029c48:	ed8d 1a01 	vstr	s2, [sp, #4]
 8029c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8029c50:	b003      	add	sp, #12
 8029c52:	bd30      	pop	{r4, r5, pc}
 8029c54:	483a      	ldr	r0, [pc, #232]	@ (8029d40 <sinf+0x128>)
 8029c56:	eeb0 0b46 	vmov.f64	d0, d6
 8029c5a:	2100      	movs	r1, #0
 8029c5c:	b003      	add	sp, #12
 8029c5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029c62:	f7ff bfad 	b.w	8029bc0 <sinf_poly>
 8029c66:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029c6a:	4293      	cmp	r3, r2
 8029c6c:	d824      	bhi.n	8029cb8 <sinf+0xa0>
 8029c6e:	4b34      	ldr	r3, [pc, #208]	@ (8029d40 <sinf+0x128>)
 8029c70:	ed93 7b08 	vldr	d7, [r3, #32]
 8029c74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029c78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8029c7c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029c80:	ee17 1a90 	vmov	r1, s15
 8029c84:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8029c88:	1609      	asrs	r1, r1, #24
 8029c8a:	ee07 1a90 	vmov	s15, r1
 8029c8e:	f001 0203 	and.w	r2, r1, #3
 8029c92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029c96:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8029c9a:	ed92 0b00 	vldr	d0, [r2]
 8029c9e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8029ca2:	f011 0f02 	tst.w	r1, #2
 8029ca6:	eea5 6b47 	vfms.f64	d6, d5, d7
 8029caa:	bf08      	it	eq
 8029cac:	4618      	moveq	r0, r3
 8029cae:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029cb2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8029cb6:	e7d1      	b.n	8029c5c <sinf+0x44>
 8029cb8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029cbc:	d237      	bcs.n	8029d2e <sinf+0x116>
 8029cbe:	4921      	ldr	r1, [pc, #132]	@ (8029d44 <sinf+0x12c>)
 8029cc0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029cc4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029cc8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029ccc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029cd0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029cd4:	6a10      	ldr	r0, [r2, #32]
 8029cd6:	6912      	ldr	r2, [r2, #16]
 8029cd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029cdc:	40ab      	lsls	r3, r5
 8029cde:	fba0 5003 	umull	r5, r0, r0, r3
 8029ce2:	4359      	muls	r1, r3
 8029ce4:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029ce8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029cec:	0f9d      	lsrs	r5, r3, #30
 8029cee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8029cf2:	1ac9      	subs	r1, r1, r3
 8029cf4:	f7d6 fcda 	bl	80006ac <__aeabi_l2d>
 8029cf8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029cfc:	4b10      	ldr	r3, [pc, #64]	@ (8029d40 <sinf+0x128>)
 8029cfe:	f004 0203 	and.w	r2, r4, #3
 8029d02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029d06:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8029d38 <sinf+0x120>
 8029d0a:	ed92 0b00 	vldr	d0, [r2]
 8029d0e:	ec41 0b17 	vmov	d7, r0, r1
 8029d12:	f014 0f02 	tst.w	r4, #2
 8029d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029d1a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029d1e:	4629      	mov	r1, r5
 8029d20:	bf08      	it	eq
 8029d22:	4618      	moveq	r0, r3
 8029d24:	ee27 1b07 	vmul.f64	d1, d7, d7
 8029d28:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029d2c:	e796      	b.n	8029c5c <sinf+0x44>
 8029d2e:	b003      	add	sp, #12
 8029d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029d34:	f000 b8e2 	b.w	8029efc <__math_invalidf>
 8029d38:	54442d18 	.word	0x54442d18
 8029d3c:	3c1921fb 	.word	0x3c1921fb
 8029d40:	08030e88 	.word	0x08030e88
 8029d44:	08030e24 	.word	0x08030e24

08029d48 <sinf_poly>:
 8029d48:	07cb      	lsls	r3, r1, #31
 8029d4a:	d412      	bmi.n	8029d72 <sinf_poly+0x2a>
 8029d4c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029d50:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029d54:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029d58:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029d5c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029d60:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029d64:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029d68:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029d6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029d70:	4770      	bx	lr
 8029d72:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029d76:	ee21 5b01 	vmul.f64	d5, d1, d1
 8029d7a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8029d7e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029d82:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029d86:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8029d8a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8029d8e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029d92:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029d96:	eea5 0b06 	vfma.f64	d0, d5, d6
 8029d9a:	e7e5      	b.n	8029d68 <sinf_poly+0x20>
 8029d9c:	0000      	movs	r0, r0
	...

08029da0 <cosf>:
 8029da0:	b538      	push	{r3, r4, r5, lr}
 8029da2:	ee10 4a10 	vmov	r4, s0
 8029da6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8029daa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8029dae:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8029db2:	d21f      	bcs.n	8029df4 <cosf+0x54>
 8029db4:	ee27 7b07 	vmul.f64	d7, d7, d7
 8029db8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8029dbc:	f0c0 8082 	bcc.w	8029ec4 <cosf+0x124>
 8029dc0:	ee27 4b07 	vmul.f64	d4, d7, d7
 8029dc4:	4b44      	ldr	r3, [pc, #272]	@ (8029ed8 <cosf+0x138>)
 8029dc6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8029dca:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8029dce:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8029dd2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8029dd6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8029dda:	eea7 0b05 	vfma.f64	d0, d7, d5
 8029dde:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8029de2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029de6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8029dea:	eea6 0b07 	vfma.f64	d0, d6, d7
 8029dee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029df2:	bd38      	pop	{r3, r4, r5, pc}
 8029df4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029df8:	4293      	cmp	r3, r2
 8029dfa:	d829      	bhi.n	8029e50 <cosf+0xb0>
 8029dfc:	4b36      	ldr	r3, [pc, #216]	@ (8029ed8 <cosf+0x138>)
 8029dfe:	ed93 6b08 	vldr	d6, [r3, #32]
 8029e02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8029e06:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8029e0a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029e0e:	ee16 1a90 	vmov	r1, s13
 8029e12:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8029e16:	1609      	asrs	r1, r1, #24
 8029e18:	ee06 1a90 	vmov	s13, r1
 8029e1c:	f001 0203 	and.w	r2, r1, #3
 8029e20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029e24:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8029e28:	ed92 0b00 	vldr	d0, [r2]
 8029e2c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8029e30:	f011 0f02 	tst.w	r1, #2
 8029e34:	f081 0101 	eor.w	r1, r1, #1
 8029e38:	eea5 7b46 	vfms.f64	d7, d5, d6
 8029e3c:	bf08      	it	eq
 8029e3e:	4618      	moveq	r0, r3
 8029e40:	ee27 1b07 	vmul.f64	d1, d7, d7
 8029e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029e48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029e4c:	f7ff bf7c 	b.w	8029d48 <sinf_poly>
 8029e50:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029e54:	d232      	bcs.n	8029ebc <cosf+0x11c>
 8029e56:	4921      	ldr	r1, [pc, #132]	@ (8029edc <cosf+0x13c>)
 8029e58:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029e5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029e60:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029e64:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029e68:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029e6c:	6a10      	ldr	r0, [r2, #32]
 8029e6e:	6912      	ldr	r2, [r2, #16]
 8029e70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029e74:	40ab      	lsls	r3, r5
 8029e76:	fba0 5003 	umull	r5, r0, r0, r3
 8029e7a:	4359      	muls	r1, r3
 8029e7c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029e80:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029e84:	0f9d      	lsrs	r5, r3, #30
 8029e86:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8029e8a:	1ac9      	subs	r1, r1, r3
 8029e8c:	f7d6 fc0e 	bl	80006ac <__aeabi_l2d>
 8029e90:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029e94:	4b10      	ldr	r3, [pc, #64]	@ (8029ed8 <cosf+0x138>)
 8029e96:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8029ed0 <cosf+0x130>
 8029e9a:	ec41 0b17 	vmov	d7, r0, r1
 8029e9e:	f004 0203 	and.w	r2, r4, #3
 8029ea2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029ea6:	ed92 0b00 	vldr	d0, [r2]
 8029eaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029eae:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029eb2:	f014 0f02 	tst.w	r4, #2
 8029eb6:	f085 0101 	eor.w	r1, r5, #1
 8029eba:	e7bf      	b.n	8029e3c <cosf+0x9c>
 8029ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029ec0:	f000 b81c 	b.w	8029efc <__math_invalidf>
 8029ec4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8029ec8:	e793      	b.n	8029df2 <cosf+0x52>
 8029eca:	bf00      	nop
 8029ecc:	f3af 8000 	nop.w
 8029ed0:	54442d18 	.word	0x54442d18
 8029ed4:	3c1921fb 	.word	0x3c1921fb
 8029ed8:	08030e88 	.word	0x08030e88
 8029edc:	08030e24 	.word	0x08030e24

08029ee0 <with_errnof>:
 8029ee0:	b510      	push	{r4, lr}
 8029ee2:	ed2d 8b02 	vpush	{d8}
 8029ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8029eea:	4604      	mov	r4, r0
 8029eec:	f001 fba2 	bl	802b634 <__errno>
 8029ef0:	eeb0 0a48 	vmov.f32	s0, s16
 8029ef4:	ecbd 8b02 	vpop	{d8}
 8029ef8:	6004      	str	r4, [r0, #0]
 8029efa:	bd10      	pop	{r4, pc}

08029efc <__math_invalidf>:
 8029efc:	eef0 7a40 	vmov.f32	s15, s0
 8029f00:	ee30 7a40 	vsub.f32	s14, s0, s0
 8029f04:	eef4 7a67 	vcmp.f32	s15, s15
 8029f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f0c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8029f10:	d602      	bvs.n	8029f18 <__math_invalidf+0x1c>
 8029f12:	2021      	movs	r0, #33	@ 0x21
 8029f14:	f7ff bfe4 	b.w	8029ee0 <with_errnof>
 8029f18:	4770      	bx	lr

08029f1a <__ieee754_sqrtf>:
 8029f1a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8029f1e:	4770      	bx	lr

08029f20 <__ieee754_atan2f>:
 8029f20:	ee10 2a90 	vmov	r2, s1
 8029f24:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8029f28:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8029f2c:	b510      	push	{r4, lr}
 8029f2e:	eef0 7a40 	vmov.f32	s15, s0
 8029f32:	d806      	bhi.n	8029f42 <__ieee754_atan2f+0x22>
 8029f34:	ee10 0a10 	vmov	r0, s0
 8029f38:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8029f3c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029f40:	d904      	bls.n	8029f4c <__ieee754_atan2f+0x2c>
 8029f42:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8029f46:	eeb0 0a67 	vmov.f32	s0, s15
 8029f4a:	bd10      	pop	{r4, pc}
 8029f4c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8029f50:	d103      	bne.n	8029f5a <__ieee754_atan2f+0x3a>
 8029f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029f56:	f000 b881 	b.w	802a05c <atanf>
 8029f5a:	1794      	asrs	r4, r2, #30
 8029f5c:	f004 0402 	and.w	r4, r4, #2
 8029f60:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8029f64:	b93b      	cbnz	r3, 8029f76 <__ieee754_atan2f+0x56>
 8029f66:	2c02      	cmp	r4, #2
 8029f68:	d05c      	beq.n	802a024 <__ieee754_atan2f+0x104>
 8029f6a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802a038 <__ieee754_atan2f+0x118>
 8029f6e:	2c03      	cmp	r4, #3
 8029f70:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8029f74:	e7e7      	b.n	8029f46 <__ieee754_atan2f+0x26>
 8029f76:	b939      	cbnz	r1, 8029f88 <__ieee754_atan2f+0x68>
 8029f78:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802a03c <__ieee754_atan2f+0x11c>
 8029f7c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802a040 <__ieee754_atan2f+0x120>
 8029f80:	2800      	cmp	r0, #0
 8029f82:	fe67 7a87 	vselge.f32	s15, s15, s14
 8029f86:	e7de      	b.n	8029f46 <__ieee754_atan2f+0x26>
 8029f88:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8029f8c:	d110      	bne.n	8029fb0 <__ieee754_atan2f+0x90>
 8029f8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029f92:	f104 34ff 	add.w	r4, r4, #4294967295
 8029f96:	d107      	bne.n	8029fa8 <__ieee754_atan2f+0x88>
 8029f98:	2c02      	cmp	r4, #2
 8029f9a:	d846      	bhi.n	802a02a <__ieee754_atan2f+0x10a>
 8029f9c:	4b29      	ldr	r3, [pc, #164]	@ (802a044 <__ieee754_atan2f+0x124>)
 8029f9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8029fa2:	edd3 7a00 	vldr	s15, [r3]
 8029fa6:	e7ce      	b.n	8029f46 <__ieee754_atan2f+0x26>
 8029fa8:	2c02      	cmp	r4, #2
 8029faa:	d841      	bhi.n	802a030 <__ieee754_atan2f+0x110>
 8029fac:	4b26      	ldr	r3, [pc, #152]	@ (802a048 <__ieee754_atan2f+0x128>)
 8029fae:	e7f6      	b.n	8029f9e <__ieee754_atan2f+0x7e>
 8029fb0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029fb4:	d0e0      	beq.n	8029f78 <__ieee754_atan2f+0x58>
 8029fb6:	1a5b      	subs	r3, r3, r1
 8029fb8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8029fbc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8029fc0:	da1a      	bge.n	8029ff8 <__ieee754_atan2f+0xd8>
 8029fc2:	2a00      	cmp	r2, #0
 8029fc4:	da01      	bge.n	8029fca <__ieee754_atan2f+0xaa>
 8029fc6:	313c      	adds	r1, #60	@ 0x3c
 8029fc8:	db19      	blt.n	8029ffe <__ieee754_atan2f+0xde>
 8029fca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8029fce:	f000 f919 	bl	802a204 <fabsf>
 8029fd2:	f000 f843 	bl	802a05c <atanf>
 8029fd6:	eef0 7a40 	vmov.f32	s15, s0
 8029fda:	2c01      	cmp	r4, #1
 8029fdc:	d012      	beq.n	802a004 <__ieee754_atan2f+0xe4>
 8029fde:	2c02      	cmp	r4, #2
 8029fe0:	d017      	beq.n	802a012 <__ieee754_atan2f+0xf2>
 8029fe2:	2c00      	cmp	r4, #0
 8029fe4:	d0af      	beq.n	8029f46 <__ieee754_atan2f+0x26>
 8029fe6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802a04c <__ieee754_atan2f+0x12c>
 8029fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029fee:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802a050 <__ieee754_atan2f+0x130>
 8029ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029ff6:	e7a6      	b.n	8029f46 <__ieee754_atan2f+0x26>
 8029ff8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802a03c <__ieee754_atan2f+0x11c>
 8029ffc:	e7ed      	b.n	8029fda <__ieee754_atan2f+0xba>
 8029ffe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802a054 <__ieee754_atan2f+0x134>
 802a002:	e7ea      	b.n	8029fda <__ieee754_atan2f+0xba>
 802a004:	ee17 3a90 	vmov	r3, s15
 802a008:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a00c:	ee07 3a90 	vmov	s15, r3
 802a010:	e799      	b.n	8029f46 <__ieee754_atan2f+0x26>
 802a012:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802a04c <__ieee754_atan2f+0x12c>
 802a016:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a01a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802a050 <__ieee754_atan2f+0x130>
 802a01e:	ee77 7a67 	vsub.f32	s15, s14, s15
 802a022:	e790      	b.n	8029f46 <__ieee754_atan2f+0x26>
 802a024:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802a050 <__ieee754_atan2f+0x130>
 802a028:	e78d      	b.n	8029f46 <__ieee754_atan2f+0x26>
 802a02a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802a058 <__ieee754_atan2f+0x138>
 802a02e:	e78a      	b.n	8029f46 <__ieee754_atan2f+0x26>
 802a030:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802a054 <__ieee754_atan2f+0x134>
 802a034:	e787      	b.n	8029f46 <__ieee754_atan2f+0x26>
 802a036:	bf00      	nop
 802a038:	c0490fdb 	.word	0xc0490fdb
 802a03c:	3fc90fdb 	.word	0x3fc90fdb
 802a040:	bfc90fdb 	.word	0xbfc90fdb
 802a044:	08030f74 	.word	0x08030f74
 802a048:	08030f68 	.word	0x08030f68
 802a04c:	33bbbd2e 	.word	0x33bbbd2e
 802a050:	40490fdb 	.word	0x40490fdb
 802a054:	00000000 	.word	0x00000000
 802a058:	3f490fdb 	.word	0x3f490fdb

0802a05c <atanf>:
 802a05c:	b538      	push	{r3, r4, r5, lr}
 802a05e:	ee10 5a10 	vmov	r5, s0
 802a062:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802a066:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802a06a:	eef0 7a40 	vmov.f32	s15, s0
 802a06e:	d30f      	bcc.n	802a090 <atanf+0x34>
 802a070:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802a074:	d904      	bls.n	802a080 <atanf+0x24>
 802a076:	ee70 7a00 	vadd.f32	s15, s0, s0
 802a07a:	eeb0 0a67 	vmov.f32	s0, s15
 802a07e:	bd38      	pop	{r3, r4, r5, pc}
 802a080:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802a1b8 <atanf+0x15c>
 802a084:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802a1bc <atanf+0x160>
 802a088:	2d00      	cmp	r5, #0
 802a08a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802a08e:	e7f4      	b.n	802a07a <atanf+0x1e>
 802a090:	4b4b      	ldr	r3, [pc, #300]	@ (802a1c0 <atanf+0x164>)
 802a092:	429c      	cmp	r4, r3
 802a094:	d810      	bhi.n	802a0b8 <atanf+0x5c>
 802a096:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802a09a:	d20a      	bcs.n	802a0b2 <atanf+0x56>
 802a09c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802a1c4 <atanf+0x168>
 802a0a0:	ee30 7a07 	vadd.f32	s14, s0, s14
 802a0a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802a0a8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802a0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a0b0:	dce3      	bgt.n	802a07a <atanf+0x1e>
 802a0b2:	f04f 33ff 	mov.w	r3, #4294967295
 802a0b6:	e013      	b.n	802a0e0 <atanf+0x84>
 802a0b8:	f000 f8a4 	bl	802a204 <fabsf>
 802a0bc:	4b42      	ldr	r3, [pc, #264]	@ (802a1c8 <atanf+0x16c>)
 802a0be:	429c      	cmp	r4, r3
 802a0c0:	d84f      	bhi.n	802a162 <atanf+0x106>
 802a0c2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802a0c6:	429c      	cmp	r4, r3
 802a0c8:	d841      	bhi.n	802a14e <atanf+0xf2>
 802a0ca:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802a0ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802a0d2:	eea0 7a27 	vfma.f32	s14, s0, s15
 802a0d6:	2300      	movs	r3, #0
 802a0d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 802a0dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a0e0:	1c5a      	adds	r2, r3, #1
 802a0e2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802a0e6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802a1cc <atanf+0x170>
 802a0ea:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802a1d0 <atanf+0x174>
 802a0ee:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802a1d4 <atanf+0x178>
 802a0f2:	ee66 6a06 	vmul.f32	s13, s12, s12
 802a0f6:	eee6 5a87 	vfma.f32	s11, s13, s14
 802a0fa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802a1d8 <atanf+0x17c>
 802a0fe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802a102:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802a1dc <atanf+0x180>
 802a106:	eee7 5a26 	vfma.f32	s11, s14, s13
 802a10a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802a1e0 <atanf+0x184>
 802a10e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802a112:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802a1e4 <atanf+0x188>
 802a116:	eee7 5a26 	vfma.f32	s11, s14, s13
 802a11a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802a1e8 <atanf+0x18c>
 802a11e:	eea6 5a87 	vfma.f32	s10, s13, s14
 802a122:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802a1ec <atanf+0x190>
 802a126:	eea5 7a26 	vfma.f32	s14, s10, s13
 802a12a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802a1f0 <atanf+0x194>
 802a12e:	eea7 5a26 	vfma.f32	s10, s14, s13
 802a132:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802a1f4 <atanf+0x198>
 802a136:	eea5 7a26 	vfma.f32	s14, s10, s13
 802a13a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802a13e:	eea5 7a86 	vfma.f32	s14, s11, s12
 802a142:	ee27 7a87 	vmul.f32	s14, s15, s14
 802a146:	d121      	bne.n	802a18c <atanf+0x130>
 802a148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a14c:	e795      	b.n	802a07a <atanf+0x1e>
 802a14e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802a152:	ee30 7a67 	vsub.f32	s14, s0, s15
 802a156:	ee30 0a27 	vadd.f32	s0, s0, s15
 802a15a:	2301      	movs	r3, #1
 802a15c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a160:	e7be      	b.n	802a0e0 <atanf+0x84>
 802a162:	4b25      	ldr	r3, [pc, #148]	@ (802a1f8 <atanf+0x19c>)
 802a164:	429c      	cmp	r4, r3
 802a166:	d80b      	bhi.n	802a180 <atanf+0x124>
 802a168:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802a16c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a170:	eea0 7a27 	vfma.f32	s14, s0, s15
 802a174:	2302      	movs	r3, #2
 802a176:	ee70 6a67 	vsub.f32	s13, s0, s15
 802a17a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802a17e:	e7af      	b.n	802a0e0 <atanf+0x84>
 802a180:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802a184:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a188:	2303      	movs	r3, #3
 802a18a:	e7a9      	b.n	802a0e0 <atanf+0x84>
 802a18c:	4a1b      	ldr	r2, [pc, #108]	@ (802a1fc <atanf+0x1a0>)
 802a18e:	491c      	ldr	r1, [pc, #112]	@ (802a200 <atanf+0x1a4>)
 802a190:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802a194:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802a198:	edd3 6a00 	vldr	s13, [r3]
 802a19c:	ee37 7a66 	vsub.f32	s14, s14, s13
 802a1a0:	2d00      	cmp	r5, #0
 802a1a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 802a1a6:	edd2 7a00 	vldr	s15, [r2]
 802a1aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a1ae:	bfb8      	it	lt
 802a1b0:	eef1 7a67 	vneglt.f32	s15, s15
 802a1b4:	e761      	b.n	802a07a <atanf+0x1e>
 802a1b6:	bf00      	nop
 802a1b8:	bfc90fdb 	.word	0xbfc90fdb
 802a1bc:	3fc90fdb 	.word	0x3fc90fdb
 802a1c0:	3edfffff 	.word	0x3edfffff
 802a1c4:	7149f2ca 	.word	0x7149f2ca
 802a1c8:	3f97ffff 	.word	0x3f97ffff
 802a1cc:	3c8569d7 	.word	0x3c8569d7
 802a1d0:	3d4bda59 	.word	0x3d4bda59
 802a1d4:	bd6ef16b 	.word	0xbd6ef16b
 802a1d8:	3d886b35 	.word	0x3d886b35
 802a1dc:	3dba2e6e 	.word	0x3dba2e6e
 802a1e0:	3e124925 	.word	0x3e124925
 802a1e4:	3eaaaaab 	.word	0x3eaaaaab
 802a1e8:	bd15a221 	.word	0xbd15a221
 802a1ec:	bd9d8795 	.word	0xbd9d8795
 802a1f0:	bde38e38 	.word	0xbde38e38
 802a1f4:	be4ccccd 	.word	0xbe4ccccd
 802a1f8:	401bffff 	.word	0x401bffff
 802a1fc:	08030f90 	.word	0x08030f90
 802a200:	08030f80 	.word	0x08030f80

0802a204 <fabsf>:
 802a204:	ee10 3a10 	vmov	r3, s0
 802a208:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a20c:	ee00 3a10 	vmov	s0, r3
 802a210:	4770      	bx	lr

0802a212 <abort>:
 802a212:	b508      	push	{r3, lr}
 802a214:	2006      	movs	r0, #6
 802a216:	f001 f997 	bl	802b548 <raise>
 802a21a:	2001      	movs	r0, #1
 802a21c:	f7d7 fd90 	bl	8001d40 <_exit>

0802a220 <__assert_func>:
 802a220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a222:	4614      	mov	r4, r2
 802a224:	461a      	mov	r2, r3
 802a226:	4b09      	ldr	r3, [pc, #36]	@ (802a24c <__assert_func+0x2c>)
 802a228:	681b      	ldr	r3, [r3, #0]
 802a22a:	4605      	mov	r5, r0
 802a22c:	68d8      	ldr	r0, [r3, #12]
 802a22e:	b954      	cbnz	r4, 802a246 <__assert_func+0x26>
 802a230:	4b07      	ldr	r3, [pc, #28]	@ (802a250 <__assert_func+0x30>)
 802a232:	461c      	mov	r4, r3
 802a234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a238:	9100      	str	r1, [sp, #0]
 802a23a:	462b      	mov	r3, r5
 802a23c:	4905      	ldr	r1, [pc, #20]	@ (802a254 <__assert_func+0x34>)
 802a23e:	f000 ffc7 	bl	802b1d0 <fiprintf>
 802a242:	f7ff ffe6 	bl	802a212 <abort>
 802a246:	4b04      	ldr	r3, [pc, #16]	@ (802a258 <__assert_func+0x38>)
 802a248:	e7f4      	b.n	802a234 <__assert_func+0x14>
 802a24a:	bf00      	nop
 802a24c:	240000e8 	.word	0x240000e8
 802a250:	0802cc8a 	.word	0x0802cc8a
 802a254:	08030fad 	.word	0x08030fad
 802a258:	08030fa0 	.word	0x08030fa0

0802a25c <atexit>:
 802a25c:	2300      	movs	r3, #0
 802a25e:	4601      	mov	r1, r0
 802a260:	461a      	mov	r2, r3
 802a262:	4618      	mov	r0, r3
 802a264:	f001 ba22 	b.w	802b6ac <__register_exitproc>

0802a268 <malloc>:
 802a268:	4b02      	ldr	r3, [pc, #8]	@ (802a274 <malloc+0xc>)
 802a26a:	4601      	mov	r1, r0
 802a26c:	6818      	ldr	r0, [r3, #0]
 802a26e:	f000 b82d 	b.w	802a2cc <_malloc_r>
 802a272:	bf00      	nop
 802a274:	240000e8 	.word	0x240000e8

0802a278 <free>:
 802a278:	4b02      	ldr	r3, [pc, #8]	@ (802a284 <free+0xc>)
 802a27a:	4601      	mov	r1, r0
 802a27c:	6818      	ldr	r0, [r3, #0]
 802a27e:	f002 b851 	b.w	802c324 <_free_r>
 802a282:	bf00      	nop
 802a284:	240000e8 	.word	0x240000e8

0802a288 <sbrk_aligned>:
 802a288:	b570      	push	{r4, r5, r6, lr}
 802a28a:	4e0f      	ldr	r6, [pc, #60]	@ (802a2c8 <sbrk_aligned+0x40>)
 802a28c:	460c      	mov	r4, r1
 802a28e:	6831      	ldr	r1, [r6, #0]
 802a290:	4605      	mov	r5, r0
 802a292:	b911      	cbnz	r1, 802a29a <sbrk_aligned+0x12>
 802a294:	f001 f9ac 	bl	802b5f0 <_sbrk_r>
 802a298:	6030      	str	r0, [r6, #0]
 802a29a:	4621      	mov	r1, r4
 802a29c:	4628      	mov	r0, r5
 802a29e:	f001 f9a7 	bl	802b5f0 <_sbrk_r>
 802a2a2:	1c43      	adds	r3, r0, #1
 802a2a4:	d103      	bne.n	802a2ae <sbrk_aligned+0x26>
 802a2a6:	f04f 34ff 	mov.w	r4, #4294967295
 802a2aa:	4620      	mov	r0, r4
 802a2ac:	bd70      	pop	{r4, r5, r6, pc}
 802a2ae:	1cc4      	adds	r4, r0, #3
 802a2b0:	f024 0403 	bic.w	r4, r4, #3
 802a2b4:	42a0      	cmp	r0, r4
 802a2b6:	d0f8      	beq.n	802a2aa <sbrk_aligned+0x22>
 802a2b8:	1a21      	subs	r1, r4, r0
 802a2ba:	4628      	mov	r0, r5
 802a2bc:	f001 f998 	bl	802b5f0 <_sbrk_r>
 802a2c0:	3001      	adds	r0, #1
 802a2c2:	d1f2      	bne.n	802a2aa <sbrk_aligned+0x22>
 802a2c4:	e7ef      	b.n	802a2a6 <sbrk_aligned+0x1e>
 802a2c6:	bf00      	nop
 802a2c8:	240291b0 	.word	0x240291b0

0802a2cc <_malloc_r>:
 802a2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a2d0:	1ccd      	adds	r5, r1, #3
 802a2d2:	f025 0503 	bic.w	r5, r5, #3
 802a2d6:	3508      	adds	r5, #8
 802a2d8:	2d0c      	cmp	r5, #12
 802a2da:	bf38      	it	cc
 802a2dc:	250c      	movcc	r5, #12
 802a2de:	2d00      	cmp	r5, #0
 802a2e0:	4606      	mov	r6, r0
 802a2e2:	db01      	blt.n	802a2e8 <_malloc_r+0x1c>
 802a2e4:	42a9      	cmp	r1, r5
 802a2e6:	d904      	bls.n	802a2f2 <_malloc_r+0x26>
 802a2e8:	230c      	movs	r3, #12
 802a2ea:	6033      	str	r3, [r6, #0]
 802a2ec:	2000      	movs	r0, #0
 802a2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a2f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a3c8 <_malloc_r+0xfc>
 802a2f6:	f000 f869 	bl	802a3cc <__malloc_lock>
 802a2fa:	f8d8 3000 	ldr.w	r3, [r8]
 802a2fe:	461c      	mov	r4, r3
 802a300:	bb44      	cbnz	r4, 802a354 <_malloc_r+0x88>
 802a302:	4629      	mov	r1, r5
 802a304:	4630      	mov	r0, r6
 802a306:	f7ff ffbf 	bl	802a288 <sbrk_aligned>
 802a30a:	1c43      	adds	r3, r0, #1
 802a30c:	4604      	mov	r4, r0
 802a30e:	d158      	bne.n	802a3c2 <_malloc_r+0xf6>
 802a310:	f8d8 4000 	ldr.w	r4, [r8]
 802a314:	4627      	mov	r7, r4
 802a316:	2f00      	cmp	r7, #0
 802a318:	d143      	bne.n	802a3a2 <_malloc_r+0xd6>
 802a31a:	2c00      	cmp	r4, #0
 802a31c:	d04b      	beq.n	802a3b6 <_malloc_r+0xea>
 802a31e:	6823      	ldr	r3, [r4, #0]
 802a320:	4639      	mov	r1, r7
 802a322:	4630      	mov	r0, r6
 802a324:	eb04 0903 	add.w	r9, r4, r3
 802a328:	f001 f962 	bl	802b5f0 <_sbrk_r>
 802a32c:	4581      	cmp	r9, r0
 802a32e:	d142      	bne.n	802a3b6 <_malloc_r+0xea>
 802a330:	6821      	ldr	r1, [r4, #0]
 802a332:	1a6d      	subs	r5, r5, r1
 802a334:	4629      	mov	r1, r5
 802a336:	4630      	mov	r0, r6
 802a338:	f7ff ffa6 	bl	802a288 <sbrk_aligned>
 802a33c:	3001      	adds	r0, #1
 802a33e:	d03a      	beq.n	802a3b6 <_malloc_r+0xea>
 802a340:	6823      	ldr	r3, [r4, #0]
 802a342:	442b      	add	r3, r5
 802a344:	6023      	str	r3, [r4, #0]
 802a346:	f8d8 3000 	ldr.w	r3, [r8]
 802a34a:	685a      	ldr	r2, [r3, #4]
 802a34c:	bb62      	cbnz	r2, 802a3a8 <_malloc_r+0xdc>
 802a34e:	f8c8 7000 	str.w	r7, [r8]
 802a352:	e00f      	b.n	802a374 <_malloc_r+0xa8>
 802a354:	6822      	ldr	r2, [r4, #0]
 802a356:	1b52      	subs	r2, r2, r5
 802a358:	d420      	bmi.n	802a39c <_malloc_r+0xd0>
 802a35a:	2a0b      	cmp	r2, #11
 802a35c:	d917      	bls.n	802a38e <_malloc_r+0xc2>
 802a35e:	1961      	adds	r1, r4, r5
 802a360:	42a3      	cmp	r3, r4
 802a362:	6025      	str	r5, [r4, #0]
 802a364:	bf18      	it	ne
 802a366:	6059      	strne	r1, [r3, #4]
 802a368:	6863      	ldr	r3, [r4, #4]
 802a36a:	bf08      	it	eq
 802a36c:	f8c8 1000 	streq.w	r1, [r8]
 802a370:	5162      	str	r2, [r4, r5]
 802a372:	604b      	str	r3, [r1, #4]
 802a374:	4630      	mov	r0, r6
 802a376:	f000 f82f 	bl	802a3d8 <__malloc_unlock>
 802a37a:	f104 000b 	add.w	r0, r4, #11
 802a37e:	1d23      	adds	r3, r4, #4
 802a380:	f020 0007 	bic.w	r0, r0, #7
 802a384:	1ac2      	subs	r2, r0, r3
 802a386:	bf1c      	itt	ne
 802a388:	1a1b      	subne	r3, r3, r0
 802a38a:	50a3      	strne	r3, [r4, r2]
 802a38c:	e7af      	b.n	802a2ee <_malloc_r+0x22>
 802a38e:	6862      	ldr	r2, [r4, #4]
 802a390:	42a3      	cmp	r3, r4
 802a392:	bf0c      	ite	eq
 802a394:	f8c8 2000 	streq.w	r2, [r8]
 802a398:	605a      	strne	r2, [r3, #4]
 802a39a:	e7eb      	b.n	802a374 <_malloc_r+0xa8>
 802a39c:	4623      	mov	r3, r4
 802a39e:	6864      	ldr	r4, [r4, #4]
 802a3a0:	e7ae      	b.n	802a300 <_malloc_r+0x34>
 802a3a2:	463c      	mov	r4, r7
 802a3a4:	687f      	ldr	r7, [r7, #4]
 802a3a6:	e7b6      	b.n	802a316 <_malloc_r+0x4a>
 802a3a8:	461a      	mov	r2, r3
 802a3aa:	685b      	ldr	r3, [r3, #4]
 802a3ac:	42a3      	cmp	r3, r4
 802a3ae:	d1fb      	bne.n	802a3a8 <_malloc_r+0xdc>
 802a3b0:	2300      	movs	r3, #0
 802a3b2:	6053      	str	r3, [r2, #4]
 802a3b4:	e7de      	b.n	802a374 <_malloc_r+0xa8>
 802a3b6:	230c      	movs	r3, #12
 802a3b8:	6033      	str	r3, [r6, #0]
 802a3ba:	4630      	mov	r0, r6
 802a3bc:	f000 f80c 	bl	802a3d8 <__malloc_unlock>
 802a3c0:	e794      	b.n	802a2ec <_malloc_r+0x20>
 802a3c2:	6005      	str	r5, [r0, #0]
 802a3c4:	e7d6      	b.n	802a374 <_malloc_r+0xa8>
 802a3c6:	bf00      	nop
 802a3c8:	240291b4 	.word	0x240291b4

0802a3cc <__malloc_lock>:
 802a3cc:	4801      	ldr	r0, [pc, #4]	@ (802a3d4 <__malloc_lock+0x8>)
 802a3ce:	f001 b95c 	b.w	802b68a <__retarget_lock_acquire_recursive>
 802a3d2:	bf00      	nop
 802a3d4:	240292f8 	.word	0x240292f8

0802a3d8 <__malloc_unlock>:
 802a3d8:	4801      	ldr	r0, [pc, #4]	@ (802a3e0 <__malloc_unlock+0x8>)
 802a3da:	f001 b957 	b.w	802b68c <__retarget_lock_release_recursive>
 802a3de:	bf00      	nop
 802a3e0:	240292f8 	.word	0x240292f8

0802a3e4 <__cxa_atexit>:
 802a3e4:	b510      	push	{r4, lr}
 802a3e6:	4604      	mov	r4, r0
 802a3e8:	4804      	ldr	r0, [pc, #16]	@ (802a3fc <__cxa_atexit+0x18>)
 802a3ea:	4613      	mov	r3, r2
 802a3ec:	b120      	cbz	r0, 802a3f8 <__cxa_atexit+0x14>
 802a3ee:	460a      	mov	r2, r1
 802a3f0:	2002      	movs	r0, #2
 802a3f2:	4621      	mov	r1, r4
 802a3f4:	f001 f95a 	bl	802b6ac <__register_exitproc>
 802a3f8:	bd10      	pop	{r4, pc}
 802a3fa:	bf00      	nop
 802a3fc:	0802b6ad 	.word	0x0802b6ad

0802a400 <__cvt>:
 802a400:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a402:	ed2d 8b02 	vpush	{d8}
 802a406:	eeb0 8b40 	vmov.f64	d8, d0
 802a40a:	b085      	sub	sp, #20
 802a40c:	4617      	mov	r7, r2
 802a40e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a410:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802a412:	ee18 2a90 	vmov	r2, s17
 802a416:	f025 0520 	bic.w	r5, r5, #32
 802a41a:	2a00      	cmp	r2, #0
 802a41c:	bfb6      	itet	lt
 802a41e:	222d      	movlt	r2, #45	@ 0x2d
 802a420:	2200      	movge	r2, #0
 802a422:	eeb1 8b40 	vneglt.f64	d8, d0
 802a426:	2d46      	cmp	r5, #70	@ 0x46
 802a428:	460c      	mov	r4, r1
 802a42a:	701a      	strb	r2, [r3, #0]
 802a42c:	d004      	beq.n	802a438 <__cvt+0x38>
 802a42e:	2d45      	cmp	r5, #69	@ 0x45
 802a430:	d100      	bne.n	802a434 <__cvt+0x34>
 802a432:	3401      	adds	r4, #1
 802a434:	2102      	movs	r1, #2
 802a436:	e000      	b.n	802a43a <__cvt+0x3a>
 802a438:	2103      	movs	r1, #3
 802a43a:	ab03      	add	r3, sp, #12
 802a43c:	9301      	str	r3, [sp, #4]
 802a43e:	ab02      	add	r3, sp, #8
 802a440:	9300      	str	r3, [sp, #0]
 802a442:	4622      	mov	r2, r4
 802a444:	4633      	mov	r3, r6
 802a446:	eeb0 0b48 	vmov.f64	d0, d8
 802a44a:	f001 fa15 	bl	802b878 <_dtoa_r>
 802a44e:	2d47      	cmp	r5, #71	@ 0x47
 802a450:	d114      	bne.n	802a47c <__cvt+0x7c>
 802a452:	07fb      	lsls	r3, r7, #31
 802a454:	d50a      	bpl.n	802a46c <__cvt+0x6c>
 802a456:	1902      	adds	r2, r0, r4
 802a458:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802a45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a460:	bf08      	it	eq
 802a462:	9203      	streq	r2, [sp, #12]
 802a464:	2130      	movs	r1, #48	@ 0x30
 802a466:	9b03      	ldr	r3, [sp, #12]
 802a468:	4293      	cmp	r3, r2
 802a46a:	d319      	bcc.n	802a4a0 <__cvt+0xa0>
 802a46c:	9b03      	ldr	r3, [sp, #12]
 802a46e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a470:	1a1b      	subs	r3, r3, r0
 802a472:	6013      	str	r3, [r2, #0]
 802a474:	b005      	add	sp, #20
 802a476:	ecbd 8b02 	vpop	{d8}
 802a47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a47c:	2d46      	cmp	r5, #70	@ 0x46
 802a47e:	eb00 0204 	add.w	r2, r0, r4
 802a482:	d1e9      	bne.n	802a458 <__cvt+0x58>
 802a484:	7803      	ldrb	r3, [r0, #0]
 802a486:	2b30      	cmp	r3, #48	@ 0x30
 802a488:	d107      	bne.n	802a49a <__cvt+0x9a>
 802a48a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802a48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a492:	bf1c      	itt	ne
 802a494:	f1c4 0401 	rsbne	r4, r4, #1
 802a498:	6034      	strne	r4, [r6, #0]
 802a49a:	6833      	ldr	r3, [r6, #0]
 802a49c:	441a      	add	r2, r3
 802a49e:	e7db      	b.n	802a458 <__cvt+0x58>
 802a4a0:	1c5c      	adds	r4, r3, #1
 802a4a2:	9403      	str	r4, [sp, #12]
 802a4a4:	7019      	strb	r1, [r3, #0]
 802a4a6:	e7de      	b.n	802a466 <__cvt+0x66>

0802a4a8 <__exponent>:
 802a4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a4aa:	2900      	cmp	r1, #0
 802a4ac:	bfba      	itte	lt
 802a4ae:	4249      	neglt	r1, r1
 802a4b0:	232d      	movlt	r3, #45	@ 0x2d
 802a4b2:	232b      	movge	r3, #43	@ 0x2b
 802a4b4:	2909      	cmp	r1, #9
 802a4b6:	7002      	strb	r2, [r0, #0]
 802a4b8:	7043      	strb	r3, [r0, #1]
 802a4ba:	dd29      	ble.n	802a510 <__exponent+0x68>
 802a4bc:	f10d 0307 	add.w	r3, sp, #7
 802a4c0:	461d      	mov	r5, r3
 802a4c2:	270a      	movs	r7, #10
 802a4c4:	461a      	mov	r2, r3
 802a4c6:	fbb1 f6f7 	udiv	r6, r1, r7
 802a4ca:	fb07 1416 	mls	r4, r7, r6, r1
 802a4ce:	3430      	adds	r4, #48	@ 0x30
 802a4d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 802a4d4:	460c      	mov	r4, r1
 802a4d6:	2c63      	cmp	r4, #99	@ 0x63
 802a4d8:	f103 33ff 	add.w	r3, r3, #4294967295
 802a4dc:	4631      	mov	r1, r6
 802a4de:	dcf1      	bgt.n	802a4c4 <__exponent+0x1c>
 802a4e0:	3130      	adds	r1, #48	@ 0x30
 802a4e2:	1e94      	subs	r4, r2, #2
 802a4e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 802a4e8:	1c41      	adds	r1, r0, #1
 802a4ea:	4623      	mov	r3, r4
 802a4ec:	42ab      	cmp	r3, r5
 802a4ee:	d30a      	bcc.n	802a506 <__exponent+0x5e>
 802a4f0:	f10d 0309 	add.w	r3, sp, #9
 802a4f4:	1a9b      	subs	r3, r3, r2
 802a4f6:	42ac      	cmp	r4, r5
 802a4f8:	bf88      	it	hi
 802a4fa:	2300      	movhi	r3, #0
 802a4fc:	3302      	adds	r3, #2
 802a4fe:	4403      	add	r3, r0
 802a500:	1a18      	subs	r0, r3, r0
 802a502:	b003      	add	sp, #12
 802a504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a506:	f813 6b01 	ldrb.w	r6, [r3], #1
 802a50a:	f801 6f01 	strb.w	r6, [r1, #1]!
 802a50e:	e7ed      	b.n	802a4ec <__exponent+0x44>
 802a510:	2330      	movs	r3, #48	@ 0x30
 802a512:	3130      	adds	r1, #48	@ 0x30
 802a514:	7083      	strb	r3, [r0, #2]
 802a516:	70c1      	strb	r1, [r0, #3]
 802a518:	1d03      	adds	r3, r0, #4
 802a51a:	e7f1      	b.n	802a500 <__exponent+0x58>
 802a51c:	0000      	movs	r0, r0
	...

0802a520 <_printf_float>:
 802a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a524:	b08d      	sub	sp, #52	@ 0x34
 802a526:	460c      	mov	r4, r1
 802a528:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802a52c:	4616      	mov	r6, r2
 802a52e:	461f      	mov	r7, r3
 802a530:	4605      	mov	r5, r0
 802a532:	f001 f811 	bl	802b558 <_localeconv_r>
 802a536:	f8d0 b000 	ldr.w	fp, [r0]
 802a53a:	4658      	mov	r0, fp
 802a53c:	f7d5 ff20 	bl	8000380 <strlen>
 802a540:	2300      	movs	r3, #0
 802a542:	930a      	str	r3, [sp, #40]	@ 0x28
 802a544:	f8d8 3000 	ldr.w	r3, [r8]
 802a548:	f894 9018 	ldrb.w	r9, [r4, #24]
 802a54c:	6822      	ldr	r2, [r4, #0]
 802a54e:	9005      	str	r0, [sp, #20]
 802a550:	3307      	adds	r3, #7
 802a552:	f023 0307 	bic.w	r3, r3, #7
 802a556:	f103 0108 	add.w	r1, r3, #8
 802a55a:	f8c8 1000 	str.w	r1, [r8]
 802a55e:	ed93 0b00 	vldr	d0, [r3]
 802a562:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 802a7c0 <_printf_float+0x2a0>
 802a566:	eeb0 7bc0 	vabs.f64	d7, d0
 802a56a:	eeb4 7b46 	vcmp.f64	d7, d6
 802a56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a572:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 802a576:	dd24      	ble.n	802a5c2 <_printf_float+0xa2>
 802a578:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802a57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a580:	d502      	bpl.n	802a588 <_printf_float+0x68>
 802a582:	232d      	movs	r3, #45	@ 0x2d
 802a584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a588:	498f      	ldr	r1, [pc, #572]	@ (802a7c8 <_printf_float+0x2a8>)
 802a58a:	4b90      	ldr	r3, [pc, #576]	@ (802a7cc <_printf_float+0x2ac>)
 802a58c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 802a590:	bf94      	ite	ls
 802a592:	4688      	movls	r8, r1
 802a594:	4698      	movhi	r8, r3
 802a596:	f022 0204 	bic.w	r2, r2, #4
 802a59a:	2303      	movs	r3, #3
 802a59c:	6123      	str	r3, [r4, #16]
 802a59e:	6022      	str	r2, [r4, #0]
 802a5a0:	f04f 0a00 	mov.w	sl, #0
 802a5a4:	9700      	str	r7, [sp, #0]
 802a5a6:	4633      	mov	r3, r6
 802a5a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 802a5aa:	4621      	mov	r1, r4
 802a5ac:	4628      	mov	r0, r5
 802a5ae:	f000 fb1d 	bl	802abec <_printf_common>
 802a5b2:	3001      	adds	r0, #1
 802a5b4:	f040 8089 	bne.w	802a6ca <_printf_float+0x1aa>
 802a5b8:	f04f 30ff 	mov.w	r0, #4294967295
 802a5bc:	b00d      	add	sp, #52	@ 0x34
 802a5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a5c2:	eeb4 0b40 	vcmp.f64	d0, d0
 802a5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a5ca:	d709      	bvc.n	802a5e0 <_printf_float+0xc0>
 802a5cc:	ee10 3a90 	vmov	r3, s1
 802a5d0:	2b00      	cmp	r3, #0
 802a5d2:	bfbc      	itt	lt
 802a5d4:	232d      	movlt	r3, #45	@ 0x2d
 802a5d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802a5da:	497d      	ldr	r1, [pc, #500]	@ (802a7d0 <_printf_float+0x2b0>)
 802a5dc:	4b7d      	ldr	r3, [pc, #500]	@ (802a7d4 <_printf_float+0x2b4>)
 802a5de:	e7d5      	b.n	802a58c <_printf_float+0x6c>
 802a5e0:	6863      	ldr	r3, [r4, #4]
 802a5e2:	1c59      	adds	r1, r3, #1
 802a5e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 802a5e8:	d139      	bne.n	802a65e <_printf_float+0x13e>
 802a5ea:	2306      	movs	r3, #6
 802a5ec:	6063      	str	r3, [r4, #4]
 802a5ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802a5f2:	2300      	movs	r3, #0
 802a5f4:	6022      	str	r2, [r4, #0]
 802a5f6:	9303      	str	r3, [sp, #12]
 802a5f8:	ab0a      	add	r3, sp, #40	@ 0x28
 802a5fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802a5fe:	ab09      	add	r3, sp, #36	@ 0x24
 802a600:	9300      	str	r3, [sp, #0]
 802a602:	6861      	ldr	r1, [r4, #4]
 802a604:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 802a608:	4628      	mov	r0, r5
 802a60a:	f7ff fef9 	bl	802a400 <__cvt>
 802a60e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802a612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a614:	4680      	mov	r8, r0
 802a616:	d129      	bne.n	802a66c <_printf_float+0x14c>
 802a618:	1cc8      	adds	r0, r1, #3
 802a61a:	db02      	blt.n	802a622 <_printf_float+0x102>
 802a61c:	6863      	ldr	r3, [r4, #4]
 802a61e:	4299      	cmp	r1, r3
 802a620:	dd41      	ble.n	802a6a6 <_printf_float+0x186>
 802a622:	f1a9 0902 	sub.w	r9, r9, #2
 802a626:	fa5f f989 	uxtb.w	r9, r9
 802a62a:	3901      	subs	r1, #1
 802a62c:	464a      	mov	r2, r9
 802a62e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802a632:	9109      	str	r1, [sp, #36]	@ 0x24
 802a634:	f7ff ff38 	bl	802a4a8 <__exponent>
 802a638:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a63a:	1813      	adds	r3, r2, r0
 802a63c:	2a01      	cmp	r2, #1
 802a63e:	4682      	mov	sl, r0
 802a640:	6123      	str	r3, [r4, #16]
 802a642:	dc02      	bgt.n	802a64a <_printf_float+0x12a>
 802a644:	6822      	ldr	r2, [r4, #0]
 802a646:	07d2      	lsls	r2, r2, #31
 802a648:	d501      	bpl.n	802a64e <_printf_float+0x12e>
 802a64a:	3301      	adds	r3, #1
 802a64c:	6123      	str	r3, [r4, #16]
 802a64e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802a652:	2b00      	cmp	r3, #0
 802a654:	d0a6      	beq.n	802a5a4 <_printf_float+0x84>
 802a656:	232d      	movs	r3, #45	@ 0x2d
 802a658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a65c:	e7a2      	b.n	802a5a4 <_printf_float+0x84>
 802a65e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802a662:	d1c4      	bne.n	802a5ee <_printf_float+0xce>
 802a664:	2b00      	cmp	r3, #0
 802a666:	d1c2      	bne.n	802a5ee <_printf_float+0xce>
 802a668:	2301      	movs	r3, #1
 802a66a:	e7bf      	b.n	802a5ec <_printf_float+0xcc>
 802a66c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802a670:	d9db      	bls.n	802a62a <_printf_float+0x10a>
 802a672:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 802a676:	d118      	bne.n	802a6aa <_printf_float+0x18a>
 802a678:	2900      	cmp	r1, #0
 802a67a:	6863      	ldr	r3, [r4, #4]
 802a67c:	dd0b      	ble.n	802a696 <_printf_float+0x176>
 802a67e:	6121      	str	r1, [r4, #16]
 802a680:	b913      	cbnz	r3, 802a688 <_printf_float+0x168>
 802a682:	6822      	ldr	r2, [r4, #0]
 802a684:	07d0      	lsls	r0, r2, #31
 802a686:	d502      	bpl.n	802a68e <_printf_float+0x16e>
 802a688:	3301      	adds	r3, #1
 802a68a:	440b      	add	r3, r1
 802a68c:	6123      	str	r3, [r4, #16]
 802a68e:	65a1      	str	r1, [r4, #88]	@ 0x58
 802a690:	f04f 0a00 	mov.w	sl, #0
 802a694:	e7db      	b.n	802a64e <_printf_float+0x12e>
 802a696:	b913      	cbnz	r3, 802a69e <_printf_float+0x17e>
 802a698:	6822      	ldr	r2, [r4, #0]
 802a69a:	07d2      	lsls	r2, r2, #31
 802a69c:	d501      	bpl.n	802a6a2 <_printf_float+0x182>
 802a69e:	3302      	adds	r3, #2
 802a6a0:	e7f4      	b.n	802a68c <_printf_float+0x16c>
 802a6a2:	2301      	movs	r3, #1
 802a6a4:	e7f2      	b.n	802a68c <_printf_float+0x16c>
 802a6a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 802a6aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a6ac:	4299      	cmp	r1, r3
 802a6ae:	db05      	blt.n	802a6bc <_printf_float+0x19c>
 802a6b0:	6823      	ldr	r3, [r4, #0]
 802a6b2:	6121      	str	r1, [r4, #16]
 802a6b4:	07d8      	lsls	r0, r3, #31
 802a6b6:	d5ea      	bpl.n	802a68e <_printf_float+0x16e>
 802a6b8:	1c4b      	adds	r3, r1, #1
 802a6ba:	e7e7      	b.n	802a68c <_printf_float+0x16c>
 802a6bc:	2900      	cmp	r1, #0
 802a6be:	bfd4      	ite	le
 802a6c0:	f1c1 0202 	rsble	r2, r1, #2
 802a6c4:	2201      	movgt	r2, #1
 802a6c6:	4413      	add	r3, r2
 802a6c8:	e7e0      	b.n	802a68c <_printf_float+0x16c>
 802a6ca:	6823      	ldr	r3, [r4, #0]
 802a6cc:	055a      	lsls	r2, r3, #21
 802a6ce:	d407      	bmi.n	802a6e0 <_printf_float+0x1c0>
 802a6d0:	6923      	ldr	r3, [r4, #16]
 802a6d2:	4642      	mov	r2, r8
 802a6d4:	4631      	mov	r1, r6
 802a6d6:	4628      	mov	r0, r5
 802a6d8:	47b8      	blx	r7
 802a6da:	3001      	adds	r0, #1
 802a6dc:	d12a      	bne.n	802a734 <_printf_float+0x214>
 802a6de:	e76b      	b.n	802a5b8 <_printf_float+0x98>
 802a6e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802a6e4:	f240 80e0 	bls.w	802a8a8 <_printf_float+0x388>
 802a6e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802a6ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802a6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a6f4:	d133      	bne.n	802a75e <_printf_float+0x23e>
 802a6f6:	4a38      	ldr	r2, [pc, #224]	@ (802a7d8 <_printf_float+0x2b8>)
 802a6f8:	2301      	movs	r3, #1
 802a6fa:	4631      	mov	r1, r6
 802a6fc:	4628      	mov	r0, r5
 802a6fe:	47b8      	blx	r7
 802a700:	3001      	adds	r0, #1
 802a702:	f43f af59 	beq.w	802a5b8 <_printf_float+0x98>
 802a706:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802a70a:	4543      	cmp	r3, r8
 802a70c:	db02      	blt.n	802a714 <_printf_float+0x1f4>
 802a70e:	6823      	ldr	r3, [r4, #0]
 802a710:	07d8      	lsls	r0, r3, #31
 802a712:	d50f      	bpl.n	802a734 <_printf_float+0x214>
 802a714:	9b05      	ldr	r3, [sp, #20]
 802a716:	465a      	mov	r2, fp
 802a718:	4631      	mov	r1, r6
 802a71a:	4628      	mov	r0, r5
 802a71c:	47b8      	blx	r7
 802a71e:	3001      	adds	r0, #1
 802a720:	f43f af4a 	beq.w	802a5b8 <_printf_float+0x98>
 802a724:	f04f 0900 	mov.w	r9, #0
 802a728:	f108 38ff 	add.w	r8, r8, #4294967295
 802a72c:	f104 0a1a 	add.w	sl, r4, #26
 802a730:	45c8      	cmp	r8, r9
 802a732:	dc09      	bgt.n	802a748 <_printf_float+0x228>
 802a734:	6823      	ldr	r3, [r4, #0]
 802a736:	079b      	lsls	r3, r3, #30
 802a738:	f100 8107 	bmi.w	802a94a <_printf_float+0x42a>
 802a73c:	68e0      	ldr	r0, [r4, #12]
 802a73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a740:	4298      	cmp	r0, r3
 802a742:	bfb8      	it	lt
 802a744:	4618      	movlt	r0, r3
 802a746:	e739      	b.n	802a5bc <_printf_float+0x9c>
 802a748:	2301      	movs	r3, #1
 802a74a:	4652      	mov	r2, sl
 802a74c:	4631      	mov	r1, r6
 802a74e:	4628      	mov	r0, r5
 802a750:	47b8      	blx	r7
 802a752:	3001      	adds	r0, #1
 802a754:	f43f af30 	beq.w	802a5b8 <_printf_float+0x98>
 802a758:	f109 0901 	add.w	r9, r9, #1
 802a75c:	e7e8      	b.n	802a730 <_printf_float+0x210>
 802a75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a760:	2b00      	cmp	r3, #0
 802a762:	dc3b      	bgt.n	802a7dc <_printf_float+0x2bc>
 802a764:	4a1c      	ldr	r2, [pc, #112]	@ (802a7d8 <_printf_float+0x2b8>)
 802a766:	2301      	movs	r3, #1
 802a768:	4631      	mov	r1, r6
 802a76a:	4628      	mov	r0, r5
 802a76c:	47b8      	blx	r7
 802a76e:	3001      	adds	r0, #1
 802a770:	f43f af22 	beq.w	802a5b8 <_printf_float+0x98>
 802a774:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 802a778:	ea59 0303 	orrs.w	r3, r9, r3
 802a77c:	d102      	bne.n	802a784 <_printf_float+0x264>
 802a77e:	6823      	ldr	r3, [r4, #0]
 802a780:	07d9      	lsls	r1, r3, #31
 802a782:	d5d7      	bpl.n	802a734 <_printf_float+0x214>
 802a784:	9b05      	ldr	r3, [sp, #20]
 802a786:	465a      	mov	r2, fp
 802a788:	4631      	mov	r1, r6
 802a78a:	4628      	mov	r0, r5
 802a78c:	47b8      	blx	r7
 802a78e:	3001      	adds	r0, #1
 802a790:	f43f af12 	beq.w	802a5b8 <_printf_float+0x98>
 802a794:	f04f 0a00 	mov.w	sl, #0
 802a798:	f104 0b1a 	add.w	fp, r4, #26
 802a79c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a79e:	425b      	negs	r3, r3
 802a7a0:	4553      	cmp	r3, sl
 802a7a2:	dc01      	bgt.n	802a7a8 <_printf_float+0x288>
 802a7a4:	464b      	mov	r3, r9
 802a7a6:	e794      	b.n	802a6d2 <_printf_float+0x1b2>
 802a7a8:	2301      	movs	r3, #1
 802a7aa:	465a      	mov	r2, fp
 802a7ac:	4631      	mov	r1, r6
 802a7ae:	4628      	mov	r0, r5
 802a7b0:	47b8      	blx	r7
 802a7b2:	3001      	adds	r0, #1
 802a7b4:	f43f af00 	beq.w	802a5b8 <_printf_float+0x98>
 802a7b8:	f10a 0a01 	add.w	sl, sl, #1
 802a7bc:	e7ee      	b.n	802a79c <_printf_float+0x27c>
 802a7be:	bf00      	nop
 802a7c0:	ffffffff 	.word	0xffffffff
 802a7c4:	7fefffff 	.word	0x7fefffff
 802a7c8:	08030fdc 	.word	0x08030fdc
 802a7cc:	08030fe0 	.word	0x08030fe0
 802a7d0:	08030fe4 	.word	0x08030fe4
 802a7d4:	08030fe8 	.word	0x08030fe8
 802a7d8:	0802f7db 	.word	0x0802f7db
 802a7dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802a7de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802a7e2:	4553      	cmp	r3, sl
 802a7e4:	bfa8      	it	ge
 802a7e6:	4653      	movge	r3, sl
 802a7e8:	2b00      	cmp	r3, #0
 802a7ea:	4699      	mov	r9, r3
 802a7ec:	dc37      	bgt.n	802a85e <_printf_float+0x33e>
 802a7ee:	2300      	movs	r3, #0
 802a7f0:	9307      	str	r3, [sp, #28]
 802a7f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a7f6:	f104 021a 	add.w	r2, r4, #26
 802a7fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802a7fc:	9907      	ldr	r1, [sp, #28]
 802a7fe:	9306      	str	r3, [sp, #24]
 802a800:	eba3 0309 	sub.w	r3, r3, r9
 802a804:	428b      	cmp	r3, r1
 802a806:	dc31      	bgt.n	802a86c <_printf_float+0x34c>
 802a808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a80a:	459a      	cmp	sl, r3
 802a80c:	dc3b      	bgt.n	802a886 <_printf_float+0x366>
 802a80e:	6823      	ldr	r3, [r4, #0]
 802a810:	07da      	lsls	r2, r3, #31
 802a812:	d438      	bmi.n	802a886 <_printf_float+0x366>
 802a814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a816:	ebaa 0903 	sub.w	r9, sl, r3
 802a81a:	9b06      	ldr	r3, [sp, #24]
 802a81c:	ebaa 0303 	sub.w	r3, sl, r3
 802a820:	4599      	cmp	r9, r3
 802a822:	bfa8      	it	ge
 802a824:	4699      	movge	r9, r3
 802a826:	f1b9 0f00 	cmp.w	r9, #0
 802a82a:	dc34      	bgt.n	802a896 <_printf_float+0x376>
 802a82c:	f04f 0800 	mov.w	r8, #0
 802a830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a834:	f104 0b1a 	add.w	fp, r4, #26
 802a838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a83a:	ebaa 0303 	sub.w	r3, sl, r3
 802a83e:	eba3 0309 	sub.w	r3, r3, r9
 802a842:	4543      	cmp	r3, r8
 802a844:	f77f af76 	ble.w	802a734 <_printf_float+0x214>
 802a848:	2301      	movs	r3, #1
 802a84a:	465a      	mov	r2, fp
 802a84c:	4631      	mov	r1, r6
 802a84e:	4628      	mov	r0, r5
 802a850:	47b8      	blx	r7
 802a852:	3001      	adds	r0, #1
 802a854:	f43f aeb0 	beq.w	802a5b8 <_printf_float+0x98>
 802a858:	f108 0801 	add.w	r8, r8, #1
 802a85c:	e7ec      	b.n	802a838 <_printf_float+0x318>
 802a85e:	4642      	mov	r2, r8
 802a860:	4631      	mov	r1, r6
 802a862:	4628      	mov	r0, r5
 802a864:	47b8      	blx	r7
 802a866:	3001      	adds	r0, #1
 802a868:	d1c1      	bne.n	802a7ee <_printf_float+0x2ce>
 802a86a:	e6a5      	b.n	802a5b8 <_printf_float+0x98>
 802a86c:	2301      	movs	r3, #1
 802a86e:	4631      	mov	r1, r6
 802a870:	4628      	mov	r0, r5
 802a872:	9206      	str	r2, [sp, #24]
 802a874:	47b8      	blx	r7
 802a876:	3001      	adds	r0, #1
 802a878:	f43f ae9e 	beq.w	802a5b8 <_printf_float+0x98>
 802a87c:	9b07      	ldr	r3, [sp, #28]
 802a87e:	9a06      	ldr	r2, [sp, #24]
 802a880:	3301      	adds	r3, #1
 802a882:	9307      	str	r3, [sp, #28]
 802a884:	e7b9      	b.n	802a7fa <_printf_float+0x2da>
 802a886:	9b05      	ldr	r3, [sp, #20]
 802a888:	465a      	mov	r2, fp
 802a88a:	4631      	mov	r1, r6
 802a88c:	4628      	mov	r0, r5
 802a88e:	47b8      	blx	r7
 802a890:	3001      	adds	r0, #1
 802a892:	d1bf      	bne.n	802a814 <_printf_float+0x2f4>
 802a894:	e690      	b.n	802a5b8 <_printf_float+0x98>
 802a896:	9a06      	ldr	r2, [sp, #24]
 802a898:	464b      	mov	r3, r9
 802a89a:	4442      	add	r2, r8
 802a89c:	4631      	mov	r1, r6
 802a89e:	4628      	mov	r0, r5
 802a8a0:	47b8      	blx	r7
 802a8a2:	3001      	adds	r0, #1
 802a8a4:	d1c2      	bne.n	802a82c <_printf_float+0x30c>
 802a8a6:	e687      	b.n	802a5b8 <_printf_float+0x98>
 802a8a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802a8ac:	f1b9 0f01 	cmp.w	r9, #1
 802a8b0:	dc01      	bgt.n	802a8b6 <_printf_float+0x396>
 802a8b2:	07db      	lsls	r3, r3, #31
 802a8b4:	d536      	bpl.n	802a924 <_printf_float+0x404>
 802a8b6:	2301      	movs	r3, #1
 802a8b8:	4642      	mov	r2, r8
 802a8ba:	4631      	mov	r1, r6
 802a8bc:	4628      	mov	r0, r5
 802a8be:	47b8      	blx	r7
 802a8c0:	3001      	adds	r0, #1
 802a8c2:	f43f ae79 	beq.w	802a5b8 <_printf_float+0x98>
 802a8c6:	9b05      	ldr	r3, [sp, #20]
 802a8c8:	465a      	mov	r2, fp
 802a8ca:	4631      	mov	r1, r6
 802a8cc:	4628      	mov	r0, r5
 802a8ce:	47b8      	blx	r7
 802a8d0:	3001      	adds	r0, #1
 802a8d2:	f43f ae71 	beq.w	802a5b8 <_printf_float+0x98>
 802a8d6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802a8da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802a8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a8e2:	f109 39ff 	add.w	r9, r9, #4294967295
 802a8e6:	d018      	beq.n	802a91a <_printf_float+0x3fa>
 802a8e8:	464b      	mov	r3, r9
 802a8ea:	f108 0201 	add.w	r2, r8, #1
 802a8ee:	4631      	mov	r1, r6
 802a8f0:	4628      	mov	r0, r5
 802a8f2:	47b8      	blx	r7
 802a8f4:	3001      	adds	r0, #1
 802a8f6:	d10c      	bne.n	802a912 <_printf_float+0x3f2>
 802a8f8:	e65e      	b.n	802a5b8 <_printf_float+0x98>
 802a8fa:	2301      	movs	r3, #1
 802a8fc:	465a      	mov	r2, fp
 802a8fe:	4631      	mov	r1, r6
 802a900:	4628      	mov	r0, r5
 802a902:	47b8      	blx	r7
 802a904:	3001      	adds	r0, #1
 802a906:	f43f ae57 	beq.w	802a5b8 <_printf_float+0x98>
 802a90a:	f108 0801 	add.w	r8, r8, #1
 802a90e:	45c8      	cmp	r8, r9
 802a910:	dbf3      	blt.n	802a8fa <_printf_float+0x3da>
 802a912:	4653      	mov	r3, sl
 802a914:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 802a918:	e6dc      	b.n	802a6d4 <_printf_float+0x1b4>
 802a91a:	f04f 0800 	mov.w	r8, #0
 802a91e:	f104 0b1a 	add.w	fp, r4, #26
 802a922:	e7f4      	b.n	802a90e <_printf_float+0x3ee>
 802a924:	2301      	movs	r3, #1
 802a926:	4642      	mov	r2, r8
 802a928:	e7e1      	b.n	802a8ee <_printf_float+0x3ce>
 802a92a:	2301      	movs	r3, #1
 802a92c:	464a      	mov	r2, r9
 802a92e:	4631      	mov	r1, r6
 802a930:	4628      	mov	r0, r5
 802a932:	47b8      	blx	r7
 802a934:	3001      	adds	r0, #1
 802a936:	f43f ae3f 	beq.w	802a5b8 <_printf_float+0x98>
 802a93a:	f108 0801 	add.w	r8, r8, #1
 802a93e:	68e3      	ldr	r3, [r4, #12]
 802a940:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a942:	1a5b      	subs	r3, r3, r1
 802a944:	4543      	cmp	r3, r8
 802a946:	dcf0      	bgt.n	802a92a <_printf_float+0x40a>
 802a948:	e6f8      	b.n	802a73c <_printf_float+0x21c>
 802a94a:	f04f 0800 	mov.w	r8, #0
 802a94e:	f104 0919 	add.w	r9, r4, #25
 802a952:	e7f4      	b.n	802a93e <_printf_float+0x41e>

0802a954 <__sfputc_r>:
 802a954:	6893      	ldr	r3, [r2, #8]
 802a956:	3b01      	subs	r3, #1
 802a958:	2b00      	cmp	r3, #0
 802a95a:	b410      	push	{r4}
 802a95c:	6093      	str	r3, [r2, #8]
 802a95e:	da08      	bge.n	802a972 <__sfputc_r+0x1e>
 802a960:	6994      	ldr	r4, [r2, #24]
 802a962:	42a3      	cmp	r3, r4
 802a964:	db01      	blt.n	802a96a <__sfputc_r+0x16>
 802a966:	290a      	cmp	r1, #10
 802a968:	d103      	bne.n	802a972 <__sfputc_r+0x1e>
 802a96a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a96e:	f000 bcfa 	b.w	802b366 <__swbuf_r>
 802a972:	6813      	ldr	r3, [r2, #0]
 802a974:	1c58      	adds	r0, r3, #1
 802a976:	6010      	str	r0, [r2, #0]
 802a978:	7019      	strb	r1, [r3, #0]
 802a97a:	4608      	mov	r0, r1
 802a97c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a980:	4770      	bx	lr

0802a982 <__sfputs_r>:
 802a982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a984:	4606      	mov	r6, r0
 802a986:	460f      	mov	r7, r1
 802a988:	4614      	mov	r4, r2
 802a98a:	18d5      	adds	r5, r2, r3
 802a98c:	42ac      	cmp	r4, r5
 802a98e:	d101      	bne.n	802a994 <__sfputs_r+0x12>
 802a990:	2000      	movs	r0, #0
 802a992:	e007      	b.n	802a9a4 <__sfputs_r+0x22>
 802a994:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a998:	463a      	mov	r2, r7
 802a99a:	4630      	mov	r0, r6
 802a99c:	f7ff ffda 	bl	802a954 <__sfputc_r>
 802a9a0:	1c43      	adds	r3, r0, #1
 802a9a2:	d1f3      	bne.n	802a98c <__sfputs_r+0xa>
 802a9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a9a8 <_vfiprintf_r>:
 802a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9ac:	460d      	mov	r5, r1
 802a9ae:	b09d      	sub	sp, #116	@ 0x74
 802a9b0:	4614      	mov	r4, r2
 802a9b2:	4698      	mov	r8, r3
 802a9b4:	4606      	mov	r6, r0
 802a9b6:	b118      	cbz	r0, 802a9c0 <_vfiprintf_r+0x18>
 802a9b8:	6a03      	ldr	r3, [r0, #32]
 802a9ba:	b90b      	cbnz	r3, 802a9c0 <_vfiprintf_r+0x18>
 802a9bc:	f000 fbf0 	bl	802b1a0 <__sinit>
 802a9c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a9c2:	07d9      	lsls	r1, r3, #31
 802a9c4:	d405      	bmi.n	802a9d2 <_vfiprintf_r+0x2a>
 802a9c6:	89ab      	ldrh	r3, [r5, #12]
 802a9c8:	059a      	lsls	r2, r3, #22
 802a9ca:	d402      	bmi.n	802a9d2 <_vfiprintf_r+0x2a>
 802a9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a9ce:	f000 fe5c 	bl	802b68a <__retarget_lock_acquire_recursive>
 802a9d2:	89ab      	ldrh	r3, [r5, #12]
 802a9d4:	071b      	lsls	r3, r3, #28
 802a9d6:	d501      	bpl.n	802a9dc <_vfiprintf_r+0x34>
 802a9d8:	692b      	ldr	r3, [r5, #16]
 802a9da:	b99b      	cbnz	r3, 802aa04 <_vfiprintf_r+0x5c>
 802a9dc:	4629      	mov	r1, r5
 802a9de:	4630      	mov	r0, r6
 802a9e0:	f000 fd00 	bl	802b3e4 <__swsetup_r>
 802a9e4:	b170      	cbz	r0, 802aa04 <_vfiprintf_r+0x5c>
 802a9e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a9e8:	07dc      	lsls	r4, r3, #31
 802a9ea:	d504      	bpl.n	802a9f6 <_vfiprintf_r+0x4e>
 802a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 802a9f0:	b01d      	add	sp, #116	@ 0x74
 802a9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9f6:	89ab      	ldrh	r3, [r5, #12]
 802a9f8:	0598      	lsls	r0, r3, #22
 802a9fa:	d4f7      	bmi.n	802a9ec <_vfiprintf_r+0x44>
 802a9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a9fe:	f000 fe45 	bl	802b68c <__retarget_lock_release_recursive>
 802aa02:	e7f3      	b.n	802a9ec <_vfiprintf_r+0x44>
 802aa04:	2300      	movs	r3, #0
 802aa06:	9309      	str	r3, [sp, #36]	@ 0x24
 802aa08:	2320      	movs	r3, #32
 802aa0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802aa0e:	f8cd 800c 	str.w	r8, [sp, #12]
 802aa12:	2330      	movs	r3, #48	@ 0x30
 802aa14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802abc4 <_vfiprintf_r+0x21c>
 802aa18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802aa1c:	f04f 0901 	mov.w	r9, #1
 802aa20:	4623      	mov	r3, r4
 802aa22:	469a      	mov	sl, r3
 802aa24:	f813 2b01 	ldrb.w	r2, [r3], #1
 802aa28:	b10a      	cbz	r2, 802aa2e <_vfiprintf_r+0x86>
 802aa2a:	2a25      	cmp	r2, #37	@ 0x25
 802aa2c:	d1f9      	bne.n	802aa22 <_vfiprintf_r+0x7a>
 802aa2e:	ebba 0b04 	subs.w	fp, sl, r4
 802aa32:	d00b      	beq.n	802aa4c <_vfiprintf_r+0xa4>
 802aa34:	465b      	mov	r3, fp
 802aa36:	4622      	mov	r2, r4
 802aa38:	4629      	mov	r1, r5
 802aa3a:	4630      	mov	r0, r6
 802aa3c:	f7ff ffa1 	bl	802a982 <__sfputs_r>
 802aa40:	3001      	adds	r0, #1
 802aa42:	f000 80a7 	beq.w	802ab94 <_vfiprintf_r+0x1ec>
 802aa46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802aa48:	445a      	add	r2, fp
 802aa4a:	9209      	str	r2, [sp, #36]	@ 0x24
 802aa4c:	f89a 3000 	ldrb.w	r3, [sl]
 802aa50:	2b00      	cmp	r3, #0
 802aa52:	f000 809f 	beq.w	802ab94 <_vfiprintf_r+0x1ec>
 802aa56:	2300      	movs	r3, #0
 802aa58:	f04f 32ff 	mov.w	r2, #4294967295
 802aa5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802aa60:	f10a 0a01 	add.w	sl, sl, #1
 802aa64:	9304      	str	r3, [sp, #16]
 802aa66:	9307      	str	r3, [sp, #28]
 802aa68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802aa6c:	931a      	str	r3, [sp, #104]	@ 0x68
 802aa6e:	4654      	mov	r4, sl
 802aa70:	2205      	movs	r2, #5
 802aa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aa76:	4853      	ldr	r0, [pc, #332]	@ (802abc4 <_vfiprintf_r+0x21c>)
 802aa78:	f7d5 fc32 	bl	80002e0 <memchr>
 802aa7c:	9a04      	ldr	r2, [sp, #16]
 802aa7e:	b9d8      	cbnz	r0, 802aab8 <_vfiprintf_r+0x110>
 802aa80:	06d1      	lsls	r1, r2, #27
 802aa82:	bf44      	itt	mi
 802aa84:	2320      	movmi	r3, #32
 802aa86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802aa8a:	0713      	lsls	r3, r2, #28
 802aa8c:	bf44      	itt	mi
 802aa8e:	232b      	movmi	r3, #43	@ 0x2b
 802aa90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802aa94:	f89a 3000 	ldrb.w	r3, [sl]
 802aa98:	2b2a      	cmp	r3, #42	@ 0x2a
 802aa9a:	d015      	beq.n	802aac8 <_vfiprintf_r+0x120>
 802aa9c:	9a07      	ldr	r2, [sp, #28]
 802aa9e:	4654      	mov	r4, sl
 802aaa0:	2000      	movs	r0, #0
 802aaa2:	f04f 0c0a 	mov.w	ip, #10
 802aaa6:	4621      	mov	r1, r4
 802aaa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 802aaac:	3b30      	subs	r3, #48	@ 0x30
 802aaae:	2b09      	cmp	r3, #9
 802aab0:	d94b      	bls.n	802ab4a <_vfiprintf_r+0x1a2>
 802aab2:	b1b0      	cbz	r0, 802aae2 <_vfiprintf_r+0x13a>
 802aab4:	9207      	str	r2, [sp, #28]
 802aab6:	e014      	b.n	802aae2 <_vfiprintf_r+0x13a>
 802aab8:	eba0 0308 	sub.w	r3, r0, r8
 802aabc:	fa09 f303 	lsl.w	r3, r9, r3
 802aac0:	4313      	orrs	r3, r2
 802aac2:	9304      	str	r3, [sp, #16]
 802aac4:	46a2      	mov	sl, r4
 802aac6:	e7d2      	b.n	802aa6e <_vfiprintf_r+0xc6>
 802aac8:	9b03      	ldr	r3, [sp, #12]
 802aaca:	1d19      	adds	r1, r3, #4
 802aacc:	681b      	ldr	r3, [r3, #0]
 802aace:	9103      	str	r1, [sp, #12]
 802aad0:	2b00      	cmp	r3, #0
 802aad2:	bfbb      	ittet	lt
 802aad4:	425b      	neglt	r3, r3
 802aad6:	f042 0202 	orrlt.w	r2, r2, #2
 802aada:	9307      	strge	r3, [sp, #28]
 802aadc:	9307      	strlt	r3, [sp, #28]
 802aade:	bfb8      	it	lt
 802aae0:	9204      	strlt	r2, [sp, #16]
 802aae2:	7823      	ldrb	r3, [r4, #0]
 802aae4:	2b2e      	cmp	r3, #46	@ 0x2e
 802aae6:	d10a      	bne.n	802aafe <_vfiprintf_r+0x156>
 802aae8:	7863      	ldrb	r3, [r4, #1]
 802aaea:	2b2a      	cmp	r3, #42	@ 0x2a
 802aaec:	d132      	bne.n	802ab54 <_vfiprintf_r+0x1ac>
 802aaee:	9b03      	ldr	r3, [sp, #12]
 802aaf0:	1d1a      	adds	r2, r3, #4
 802aaf2:	681b      	ldr	r3, [r3, #0]
 802aaf4:	9203      	str	r2, [sp, #12]
 802aaf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802aafa:	3402      	adds	r4, #2
 802aafc:	9305      	str	r3, [sp, #20]
 802aafe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802abd4 <_vfiprintf_r+0x22c>
 802ab02:	7821      	ldrb	r1, [r4, #0]
 802ab04:	2203      	movs	r2, #3
 802ab06:	4650      	mov	r0, sl
 802ab08:	f7d5 fbea 	bl	80002e0 <memchr>
 802ab0c:	b138      	cbz	r0, 802ab1e <_vfiprintf_r+0x176>
 802ab0e:	9b04      	ldr	r3, [sp, #16]
 802ab10:	eba0 000a 	sub.w	r0, r0, sl
 802ab14:	2240      	movs	r2, #64	@ 0x40
 802ab16:	4082      	lsls	r2, r0
 802ab18:	4313      	orrs	r3, r2
 802ab1a:	3401      	adds	r4, #1
 802ab1c:	9304      	str	r3, [sp, #16]
 802ab1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ab22:	4829      	ldr	r0, [pc, #164]	@ (802abc8 <_vfiprintf_r+0x220>)
 802ab24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802ab28:	2206      	movs	r2, #6
 802ab2a:	f7d5 fbd9 	bl	80002e0 <memchr>
 802ab2e:	2800      	cmp	r0, #0
 802ab30:	d03f      	beq.n	802abb2 <_vfiprintf_r+0x20a>
 802ab32:	4b26      	ldr	r3, [pc, #152]	@ (802abcc <_vfiprintf_r+0x224>)
 802ab34:	bb1b      	cbnz	r3, 802ab7e <_vfiprintf_r+0x1d6>
 802ab36:	9b03      	ldr	r3, [sp, #12]
 802ab38:	3307      	adds	r3, #7
 802ab3a:	f023 0307 	bic.w	r3, r3, #7
 802ab3e:	3308      	adds	r3, #8
 802ab40:	9303      	str	r3, [sp, #12]
 802ab42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ab44:	443b      	add	r3, r7
 802ab46:	9309      	str	r3, [sp, #36]	@ 0x24
 802ab48:	e76a      	b.n	802aa20 <_vfiprintf_r+0x78>
 802ab4a:	fb0c 3202 	mla	r2, ip, r2, r3
 802ab4e:	460c      	mov	r4, r1
 802ab50:	2001      	movs	r0, #1
 802ab52:	e7a8      	b.n	802aaa6 <_vfiprintf_r+0xfe>
 802ab54:	2300      	movs	r3, #0
 802ab56:	3401      	adds	r4, #1
 802ab58:	9305      	str	r3, [sp, #20]
 802ab5a:	4619      	mov	r1, r3
 802ab5c:	f04f 0c0a 	mov.w	ip, #10
 802ab60:	4620      	mov	r0, r4
 802ab62:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ab66:	3a30      	subs	r2, #48	@ 0x30
 802ab68:	2a09      	cmp	r2, #9
 802ab6a:	d903      	bls.n	802ab74 <_vfiprintf_r+0x1cc>
 802ab6c:	2b00      	cmp	r3, #0
 802ab6e:	d0c6      	beq.n	802aafe <_vfiprintf_r+0x156>
 802ab70:	9105      	str	r1, [sp, #20]
 802ab72:	e7c4      	b.n	802aafe <_vfiprintf_r+0x156>
 802ab74:	fb0c 2101 	mla	r1, ip, r1, r2
 802ab78:	4604      	mov	r4, r0
 802ab7a:	2301      	movs	r3, #1
 802ab7c:	e7f0      	b.n	802ab60 <_vfiprintf_r+0x1b8>
 802ab7e:	ab03      	add	r3, sp, #12
 802ab80:	9300      	str	r3, [sp, #0]
 802ab82:	462a      	mov	r2, r5
 802ab84:	4b12      	ldr	r3, [pc, #72]	@ (802abd0 <_vfiprintf_r+0x228>)
 802ab86:	a904      	add	r1, sp, #16
 802ab88:	4630      	mov	r0, r6
 802ab8a:	f7ff fcc9 	bl	802a520 <_printf_float>
 802ab8e:	4607      	mov	r7, r0
 802ab90:	1c78      	adds	r0, r7, #1
 802ab92:	d1d6      	bne.n	802ab42 <_vfiprintf_r+0x19a>
 802ab94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ab96:	07d9      	lsls	r1, r3, #31
 802ab98:	d405      	bmi.n	802aba6 <_vfiprintf_r+0x1fe>
 802ab9a:	89ab      	ldrh	r3, [r5, #12]
 802ab9c:	059a      	lsls	r2, r3, #22
 802ab9e:	d402      	bmi.n	802aba6 <_vfiprintf_r+0x1fe>
 802aba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802aba2:	f000 fd73 	bl	802b68c <__retarget_lock_release_recursive>
 802aba6:	89ab      	ldrh	r3, [r5, #12]
 802aba8:	065b      	lsls	r3, r3, #25
 802abaa:	f53f af1f 	bmi.w	802a9ec <_vfiprintf_r+0x44>
 802abae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802abb0:	e71e      	b.n	802a9f0 <_vfiprintf_r+0x48>
 802abb2:	ab03      	add	r3, sp, #12
 802abb4:	9300      	str	r3, [sp, #0]
 802abb6:	462a      	mov	r2, r5
 802abb8:	4b05      	ldr	r3, [pc, #20]	@ (802abd0 <_vfiprintf_r+0x228>)
 802abba:	a904      	add	r1, sp, #16
 802abbc:	4630      	mov	r0, r6
 802abbe:	f000 f883 	bl	802acc8 <_printf_i>
 802abc2:	e7e4      	b.n	802ab8e <_vfiprintf_r+0x1e6>
 802abc4:	08030fec 	.word	0x08030fec
 802abc8:	08030ff6 	.word	0x08030ff6
 802abcc:	0802a521 	.word	0x0802a521
 802abd0:	0802a983 	.word	0x0802a983
 802abd4:	08030ff2 	.word	0x08030ff2

0802abd8 <vfiprintf>:
 802abd8:	4613      	mov	r3, r2
 802abda:	460a      	mov	r2, r1
 802abdc:	4601      	mov	r1, r0
 802abde:	4802      	ldr	r0, [pc, #8]	@ (802abe8 <vfiprintf+0x10>)
 802abe0:	6800      	ldr	r0, [r0, #0]
 802abe2:	f7ff bee1 	b.w	802a9a8 <_vfiprintf_r>
 802abe6:	bf00      	nop
 802abe8:	240000e8 	.word	0x240000e8

0802abec <_printf_common>:
 802abec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802abf0:	4616      	mov	r6, r2
 802abf2:	4698      	mov	r8, r3
 802abf4:	688a      	ldr	r2, [r1, #8]
 802abf6:	690b      	ldr	r3, [r1, #16]
 802abf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802abfc:	4293      	cmp	r3, r2
 802abfe:	bfb8      	it	lt
 802ac00:	4613      	movlt	r3, r2
 802ac02:	6033      	str	r3, [r6, #0]
 802ac04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802ac08:	4607      	mov	r7, r0
 802ac0a:	460c      	mov	r4, r1
 802ac0c:	b10a      	cbz	r2, 802ac12 <_printf_common+0x26>
 802ac0e:	3301      	adds	r3, #1
 802ac10:	6033      	str	r3, [r6, #0]
 802ac12:	6823      	ldr	r3, [r4, #0]
 802ac14:	0699      	lsls	r1, r3, #26
 802ac16:	bf42      	ittt	mi
 802ac18:	6833      	ldrmi	r3, [r6, #0]
 802ac1a:	3302      	addmi	r3, #2
 802ac1c:	6033      	strmi	r3, [r6, #0]
 802ac1e:	6825      	ldr	r5, [r4, #0]
 802ac20:	f015 0506 	ands.w	r5, r5, #6
 802ac24:	d106      	bne.n	802ac34 <_printf_common+0x48>
 802ac26:	f104 0a19 	add.w	sl, r4, #25
 802ac2a:	68e3      	ldr	r3, [r4, #12]
 802ac2c:	6832      	ldr	r2, [r6, #0]
 802ac2e:	1a9b      	subs	r3, r3, r2
 802ac30:	42ab      	cmp	r3, r5
 802ac32:	dc26      	bgt.n	802ac82 <_printf_common+0x96>
 802ac34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802ac38:	6822      	ldr	r2, [r4, #0]
 802ac3a:	3b00      	subs	r3, #0
 802ac3c:	bf18      	it	ne
 802ac3e:	2301      	movne	r3, #1
 802ac40:	0692      	lsls	r2, r2, #26
 802ac42:	d42b      	bmi.n	802ac9c <_printf_common+0xb0>
 802ac44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802ac48:	4641      	mov	r1, r8
 802ac4a:	4638      	mov	r0, r7
 802ac4c:	47c8      	blx	r9
 802ac4e:	3001      	adds	r0, #1
 802ac50:	d01e      	beq.n	802ac90 <_printf_common+0xa4>
 802ac52:	6823      	ldr	r3, [r4, #0]
 802ac54:	6922      	ldr	r2, [r4, #16]
 802ac56:	f003 0306 	and.w	r3, r3, #6
 802ac5a:	2b04      	cmp	r3, #4
 802ac5c:	bf02      	ittt	eq
 802ac5e:	68e5      	ldreq	r5, [r4, #12]
 802ac60:	6833      	ldreq	r3, [r6, #0]
 802ac62:	1aed      	subeq	r5, r5, r3
 802ac64:	68a3      	ldr	r3, [r4, #8]
 802ac66:	bf0c      	ite	eq
 802ac68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ac6c:	2500      	movne	r5, #0
 802ac6e:	4293      	cmp	r3, r2
 802ac70:	bfc4      	itt	gt
 802ac72:	1a9b      	subgt	r3, r3, r2
 802ac74:	18ed      	addgt	r5, r5, r3
 802ac76:	2600      	movs	r6, #0
 802ac78:	341a      	adds	r4, #26
 802ac7a:	42b5      	cmp	r5, r6
 802ac7c:	d11a      	bne.n	802acb4 <_printf_common+0xc8>
 802ac7e:	2000      	movs	r0, #0
 802ac80:	e008      	b.n	802ac94 <_printf_common+0xa8>
 802ac82:	2301      	movs	r3, #1
 802ac84:	4652      	mov	r2, sl
 802ac86:	4641      	mov	r1, r8
 802ac88:	4638      	mov	r0, r7
 802ac8a:	47c8      	blx	r9
 802ac8c:	3001      	adds	r0, #1
 802ac8e:	d103      	bne.n	802ac98 <_printf_common+0xac>
 802ac90:	f04f 30ff 	mov.w	r0, #4294967295
 802ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ac98:	3501      	adds	r5, #1
 802ac9a:	e7c6      	b.n	802ac2a <_printf_common+0x3e>
 802ac9c:	18e1      	adds	r1, r4, r3
 802ac9e:	1c5a      	adds	r2, r3, #1
 802aca0:	2030      	movs	r0, #48	@ 0x30
 802aca2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802aca6:	4422      	add	r2, r4
 802aca8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802acac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802acb0:	3302      	adds	r3, #2
 802acb2:	e7c7      	b.n	802ac44 <_printf_common+0x58>
 802acb4:	2301      	movs	r3, #1
 802acb6:	4622      	mov	r2, r4
 802acb8:	4641      	mov	r1, r8
 802acba:	4638      	mov	r0, r7
 802acbc:	47c8      	blx	r9
 802acbe:	3001      	adds	r0, #1
 802acc0:	d0e6      	beq.n	802ac90 <_printf_common+0xa4>
 802acc2:	3601      	adds	r6, #1
 802acc4:	e7d9      	b.n	802ac7a <_printf_common+0x8e>
	...

0802acc8 <_printf_i>:
 802acc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802accc:	7e0f      	ldrb	r7, [r1, #24]
 802acce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802acd0:	2f78      	cmp	r7, #120	@ 0x78
 802acd2:	4691      	mov	r9, r2
 802acd4:	4680      	mov	r8, r0
 802acd6:	460c      	mov	r4, r1
 802acd8:	469a      	mov	sl, r3
 802acda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802acde:	d807      	bhi.n	802acf0 <_printf_i+0x28>
 802ace0:	2f62      	cmp	r7, #98	@ 0x62
 802ace2:	d80a      	bhi.n	802acfa <_printf_i+0x32>
 802ace4:	2f00      	cmp	r7, #0
 802ace6:	f000 80d2 	beq.w	802ae8e <_printf_i+0x1c6>
 802acea:	2f58      	cmp	r7, #88	@ 0x58
 802acec:	f000 80b9 	beq.w	802ae62 <_printf_i+0x19a>
 802acf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802acf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802acf8:	e03a      	b.n	802ad70 <_printf_i+0xa8>
 802acfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802acfe:	2b15      	cmp	r3, #21
 802ad00:	d8f6      	bhi.n	802acf0 <_printf_i+0x28>
 802ad02:	a101      	add	r1, pc, #4	@ (adr r1, 802ad08 <_printf_i+0x40>)
 802ad04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ad08:	0802ad61 	.word	0x0802ad61
 802ad0c:	0802ad75 	.word	0x0802ad75
 802ad10:	0802acf1 	.word	0x0802acf1
 802ad14:	0802acf1 	.word	0x0802acf1
 802ad18:	0802acf1 	.word	0x0802acf1
 802ad1c:	0802acf1 	.word	0x0802acf1
 802ad20:	0802ad75 	.word	0x0802ad75
 802ad24:	0802acf1 	.word	0x0802acf1
 802ad28:	0802acf1 	.word	0x0802acf1
 802ad2c:	0802acf1 	.word	0x0802acf1
 802ad30:	0802acf1 	.word	0x0802acf1
 802ad34:	0802ae75 	.word	0x0802ae75
 802ad38:	0802ad9f 	.word	0x0802ad9f
 802ad3c:	0802ae2f 	.word	0x0802ae2f
 802ad40:	0802acf1 	.word	0x0802acf1
 802ad44:	0802acf1 	.word	0x0802acf1
 802ad48:	0802ae97 	.word	0x0802ae97
 802ad4c:	0802acf1 	.word	0x0802acf1
 802ad50:	0802ad9f 	.word	0x0802ad9f
 802ad54:	0802acf1 	.word	0x0802acf1
 802ad58:	0802acf1 	.word	0x0802acf1
 802ad5c:	0802ae37 	.word	0x0802ae37
 802ad60:	6833      	ldr	r3, [r6, #0]
 802ad62:	1d1a      	adds	r2, r3, #4
 802ad64:	681b      	ldr	r3, [r3, #0]
 802ad66:	6032      	str	r2, [r6, #0]
 802ad68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802ad6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802ad70:	2301      	movs	r3, #1
 802ad72:	e09d      	b.n	802aeb0 <_printf_i+0x1e8>
 802ad74:	6833      	ldr	r3, [r6, #0]
 802ad76:	6820      	ldr	r0, [r4, #0]
 802ad78:	1d19      	adds	r1, r3, #4
 802ad7a:	6031      	str	r1, [r6, #0]
 802ad7c:	0606      	lsls	r6, r0, #24
 802ad7e:	d501      	bpl.n	802ad84 <_printf_i+0xbc>
 802ad80:	681d      	ldr	r5, [r3, #0]
 802ad82:	e003      	b.n	802ad8c <_printf_i+0xc4>
 802ad84:	0645      	lsls	r5, r0, #25
 802ad86:	d5fb      	bpl.n	802ad80 <_printf_i+0xb8>
 802ad88:	f9b3 5000 	ldrsh.w	r5, [r3]
 802ad8c:	2d00      	cmp	r5, #0
 802ad8e:	da03      	bge.n	802ad98 <_printf_i+0xd0>
 802ad90:	232d      	movs	r3, #45	@ 0x2d
 802ad92:	426d      	negs	r5, r5
 802ad94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802ad98:	4859      	ldr	r0, [pc, #356]	@ (802af00 <_printf_i+0x238>)
 802ad9a:	230a      	movs	r3, #10
 802ad9c:	e011      	b.n	802adc2 <_printf_i+0xfa>
 802ad9e:	6821      	ldr	r1, [r4, #0]
 802ada0:	6833      	ldr	r3, [r6, #0]
 802ada2:	0608      	lsls	r0, r1, #24
 802ada4:	f853 5b04 	ldr.w	r5, [r3], #4
 802ada8:	d402      	bmi.n	802adb0 <_printf_i+0xe8>
 802adaa:	0649      	lsls	r1, r1, #25
 802adac:	bf48      	it	mi
 802adae:	b2ad      	uxthmi	r5, r5
 802adb0:	2f6f      	cmp	r7, #111	@ 0x6f
 802adb2:	4853      	ldr	r0, [pc, #332]	@ (802af00 <_printf_i+0x238>)
 802adb4:	6033      	str	r3, [r6, #0]
 802adb6:	bf14      	ite	ne
 802adb8:	230a      	movne	r3, #10
 802adba:	2308      	moveq	r3, #8
 802adbc:	2100      	movs	r1, #0
 802adbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802adc2:	6866      	ldr	r6, [r4, #4]
 802adc4:	60a6      	str	r6, [r4, #8]
 802adc6:	2e00      	cmp	r6, #0
 802adc8:	bfa2      	ittt	ge
 802adca:	6821      	ldrge	r1, [r4, #0]
 802adcc:	f021 0104 	bicge.w	r1, r1, #4
 802add0:	6021      	strge	r1, [r4, #0]
 802add2:	b90d      	cbnz	r5, 802add8 <_printf_i+0x110>
 802add4:	2e00      	cmp	r6, #0
 802add6:	d04b      	beq.n	802ae70 <_printf_i+0x1a8>
 802add8:	4616      	mov	r6, r2
 802adda:	fbb5 f1f3 	udiv	r1, r5, r3
 802adde:	fb03 5711 	mls	r7, r3, r1, r5
 802ade2:	5dc7      	ldrb	r7, [r0, r7]
 802ade4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802ade8:	462f      	mov	r7, r5
 802adea:	42bb      	cmp	r3, r7
 802adec:	460d      	mov	r5, r1
 802adee:	d9f4      	bls.n	802adda <_printf_i+0x112>
 802adf0:	2b08      	cmp	r3, #8
 802adf2:	d10b      	bne.n	802ae0c <_printf_i+0x144>
 802adf4:	6823      	ldr	r3, [r4, #0]
 802adf6:	07df      	lsls	r7, r3, #31
 802adf8:	d508      	bpl.n	802ae0c <_printf_i+0x144>
 802adfa:	6923      	ldr	r3, [r4, #16]
 802adfc:	6861      	ldr	r1, [r4, #4]
 802adfe:	4299      	cmp	r1, r3
 802ae00:	bfde      	ittt	le
 802ae02:	2330      	movle	r3, #48	@ 0x30
 802ae04:	f806 3c01 	strble.w	r3, [r6, #-1]
 802ae08:	f106 36ff 	addle.w	r6, r6, #4294967295
 802ae0c:	1b92      	subs	r2, r2, r6
 802ae0e:	6122      	str	r2, [r4, #16]
 802ae10:	f8cd a000 	str.w	sl, [sp]
 802ae14:	464b      	mov	r3, r9
 802ae16:	aa03      	add	r2, sp, #12
 802ae18:	4621      	mov	r1, r4
 802ae1a:	4640      	mov	r0, r8
 802ae1c:	f7ff fee6 	bl	802abec <_printf_common>
 802ae20:	3001      	adds	r0, #1
 802ae22:	d14a      	bne.n	802aeba <_printf_i+0x1f2>
 802ae24:	f04f 30ff 	mov.w	r0, #4294967295
 802ae28:	b004      	add	sp, #16
 802ae2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ae2e:	6823      	ldr	r3, [r4, #0]
 802ae30:	f043 0320 	orr.w	r3, r3, #32
 802ae34:	6023      	str	r3, [r4, #0]
 802ae36:	4833      	ldr	r0, [pc, #204]	@ (802af04 <_printf_i+0x23c>)
 802ae38:	2778      	movs	r7, #120	@ 0x78
 802ae3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802ae3e:	6823      	ldr	r3, [r4, #0]
 802ae40:	6831      	ldr	r1, [r6, #0]
 802ae42:	061f      	lsls	r7, r3, #24
 802ae44:	f851 5b04 	ldr.w	r5, [r1], #4
 802ae48:	d402      	bmi.n	802ae50 <_printf_i+0x188>
 802ae4a:	065f      	lsls	r7, r3, #25
 802ae4c:	bf48      	it	mi
 802ae4e:	b2ad      	uxthmi	r5, r5
 802ae50:	6031      	str	r1, [r6, #0]
 802ae52:	07d9      	lsls	r1, r3, #31
 802ae54:	bf44      	itt	mi
 802ae56:	f043 0320 	orrmi.w	r3, r3, #32
 802ae5a:	6023      	strmi	r3, [r4, #0]
 802ae5c:	b11d      	cbz	r5, 802ae66 <_printf_i+0x19e>
 802ae5e:	2310      	movs	r3, #16
 802ae60:	e7ac      	b.n	802adbc <_printf_i+0xf4>
 802ae62:	4827      	ldr	r0, [pc, #156]	@ (802af00 <_printf_i+0x238>)
 802ae64:	e7e9      	b.n	802ae3a <_printf_i+0x172>
 802ae66:	6823      	ldr	r3, [r4, #0]
 802ae68:	f023 0320 	bic.w	r3, r3, #32
 802ae6c:	6023      	str	r3, [r4, #0]
 802ae6e:	e7f6      	b.n	802ae5e <_printf_i+0x196>
 802ae70:	4616      	mov	r6, r2
 802ae72:	e7bd      	b.n	802adf0 <_printf_i+0x128>
 802ae74:	6833      	ldr	r3, [r6, #0]
 802ae76:	6825      	ldr	r5, [r4, #0]
 802ae78:	6961      	ldr	r1, [r4, #20]
 802ae7a:	1d18      	adds	r0, r3, #4
 802ae7c:	6030      	str	r0, [r6, #0]
 802ae7e:	062e      	lsls	r6, r5, #24
 802ae80:	681b      	ldr	r3, [r3, #0]
 802ae82:	d501      	bpl.n	802ae88 <_printf_i+0x1c0>
 802ae84:	6019      	str	r1, [r3, #0]
 802ae86:	e002      	b.n	802ae8e <_printf_i+0x1c6>
 802ae88:	0668      	lsls	r0, r5, #25
 802ae8a:	d5fb      	bpl.n	802ae84 <_printf_i+0x1bc>
 802ae8c:	8019      	strh	r1, [r3, #0]
 802ae8e:	2300      	movs	r3, #0
 802ae90:	6123      	str	r3, [r4, #16]
 802ae92:	4616      	mov	r6, r2
 802ae94:	e7bc      	b.n	802ae10 <_printf_i+0x148>
 802ae96:	6833      	ldr	r3, [r6, #0]
 802ae98:	1d1a      	adds	r2, r3, #4
 802ae9a:	6032      	str	r2, [r6, #0]
 802ae9c:	681e      	ldr	r6, [r3, #0]
 802ae9e:	6862      	ldr	r2, [r4, #4]
 802aea0:	2100      	movs	r1, #0
 802aea2:	4630      	mov	r0, r6
 802aea4:	f7d5 fa1c 	bl	80002e0 <memchr>
 802aea8:	b108      	cbz	r0, 802aeae <_printf_i+0x1e6>
 802aeaa:	1b80      	subs	r0, r0, r6
 802aeac:	6060      	str	r0, [r4, #4]
 802aeae:	6863      	ldr	r3, [r4, #4]
 802aeb0:	6123      	str	r3, [r4, #16]
 802aeb2:	2300      	movs	r3, #0
 802aeb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802aeb8:	e7aa      	b.n	802ae10 <_printf_i+0x148>
 802aeba:	6923      	ldr	r3, [r4, #16]
 802aebc:	4632      	mov	r2, r6
 802aebe:	4649      	mov	r1, r9
 802aec0:	4640      	mov	r0, r8
 802aec2:	47d0      	blx	sl
 802aec4:	3001      	adds	r0, #1
 802aec6:	d0ad      	beq.n	802ae24 <_printf_i+0x15c>
 802aec8:	6823      	ldr	r3, [r4, #0]
 802aeca:	079b      	lsls	r3, r3, #30
 802aecc:	d413      	bmi.n	802aef6 <_printf_i+0x22e>
 802aece:	68e0      	ldr	r0, [r4, #12]
 802aed0:	9b03      	ldr	r3, [sp, #12]
 802aed2:	4298      	cmp	r0, r3
 802aed4:	bfb8      	it	lt
 802aed6:	4618      	movlt	r0, r3
 802aed8:	e7a6      	b.n	802ae28 <_printf_i+0x160>
 802aeda:	2301      	movs	r3, #1
 802aedc:	4632      	mov	r2, r6
 802aede:	4649      	mov	r1, r9
 802aee0:	4640      	mov	r0, r8
 802aee2:	47d0      	blx	sl
 802aee4:	3001      	adds	r0, #1
 802aee6:	d09d      	beq.n	802ae24 <_printf_i+0x15c>
 802aee8:	3501      	adds	r5, #1
 802aeea:	68e3      	ldr	r3, [r4, #12]
 802aeec:	9903      	ldr	r1, [sp, #12]
 802aeee:	1a5b      	subs	r3, r3, r1
 802aef0:	42ab      	cmp	r3, r5
 802aef2:	dcf2      	bgt.n	802aeda <_printf_i+0x212>
 802aef4:	e7eb      	b.n	802aece <_printf_i+0x206>
 802aef6:	2500      	movs	r5, #0
 802aef8:	f104 0619 	add.w	r6, r4, #25
 802aefc:	e7f5      	b.n	802aeea <_printf_i+0x222>
 802aefe:	bf00      	nop
 802af00:	08030ffd 	.word	0x08030ffd
 802af04:	0803100e 	.word	0x0803100e

0802af08 <__sflush_r>:
 802af08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802af0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802af10:	0716      	lsls	r6, r2, #28
 802af12:	4605      	mov	r5, r0
 802af14:	460c      	mov	r4, r1
 802af16:	d454      	bmi.n	802afc2 <__sflush_r+0xba>
 802af18:	684b      	ldr	r3, [r1, #4]
 802af1a:	2b00      	cmp	r3, #0
 802af1c:	dc02      	bgt.n	802af24 <__sflush_r+0x1c>
 802af1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802af20:	2b00      	cmp	r3, #0
 802af22:	dd48      	ble.n	802afb6 <__sflush_r+0xae>
 802af24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802af26:	2e00      	cmp	r6, #0
 802af28:	d045      	beq.n	802afb6 <__sflush_r+0xae>
 802af2a:	2300      	movs	r3, #0
 802af2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802af30:	682f      	ldr	r7, [r5, #0]
 802af32:	6a21      	ldr	r1, [r4, #32]
 802af34:	602b      	str	r3, [r5, #0]
 802af36:	d030      	beq.n	802af9a <__sflush_r+0x92>
 802af38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802af3a:	89a3      	ldrh	r3, [r4, #12]
 802af3c:	0759      	lsls	r1, r3, #29
 802af3e:	d505      	bpl.n	802af4c <__sflush_r+0x44>
 802af40:	6863      	ldr	r3, [r4, #4]
 802af42:	1ad2      	subs	r2, r2, r3
 802af44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802af46:	b10b      	cbz	r3, 802af4c <__sflush_r+0x44>
 802af48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802af4a:	1ad2      	subs	r2, r2, r3
 802af4c:	2300      	movs	r3, #0
 802af4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802af50:	6a21      	ldr	r1, [r4, #32]
 802af52:	4628      	mov	r0, r5
 802af54:	47b0      	blx	r6
 802af56:	1c43      	adds	r3, r0, #1
 802af58:	89a3      	ldrh	r3, [r4, #12]
 802af5a:	d106      	bne.n	802af6a <__sflush_r+0x62>
 802af5c:	6829      	ldr	r1, [r5, #0]
 802af5e:	291d      	cmp	r1, #29
 802af60:	d82b      	bhi.n	802afba <__sflush_r+0xb2>
 802af62:	4a2a      	ldr	r2, [pc, #168]	@ (802b00c <__sflush_r+0x104>)
 802af64:	410a      	asrs	r2, r1
 802af66:	07d6      	lsls	r6, r2, #31
 802af68:	d427      	bmi.n	802afba <__sflush_r+0xb2>
 802af6a:	2200      	movs	r2, #0
 802af6c:	6062      	str	r2, [r4, #4]
 802af6e:	04d9      	lsls	r1, r3, #19
 802af70:	6922      	ldr	r2, [r4, #16]
 802af72:	6022      	str	r2, [r4, #0]
 802af74:	d504      	bpl.n	802af80 <__sflush_r+0x78>
 802af76:	1c42      	adds	r2, r0, #1
 802af78:	d101      	bne.n	802af7e <__sflush_r+0x76>
 802af7a:	682b      	ldr	r3, [r5, #0]
 802af7c:	b903      	cbnz	r3, 802af80 <__sflush_r+0x78>
 802af7e:	6560      	str	r0, [r4, #84]	@ 0x54
 802af80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802af82:	602f      	str	r7, [r5, #0]
 802af84:	b1b9      	cbz	r1, 802afb6 <__sflush_r+0xae>
 802af86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802af8a:	4299      	cmp	r1, r3
 802af8c:	d002      	beq.n	802af94 <__sflush_r+0x8c>
 802af8e:	4628      	mov	r0, r5
 802af90:	f001 f9c8 	bl	802c324 <_free_r>
 802af94:	2300      	movs	r3, #0
 802af96:	6363      	str	r3, [r4, #52]	@ 0x34
 802af98:	e00d      	b.n	802afb6 <__sflush_r+0xae>
 802af9a:	2301      	movs	r3, #1
 802af9c:	4628      	mov	r0, r5
 802af9e:	47b0      	blx	r6
 802afa0:	4602      	mov	r2, r0
 802afa2:	1c50      	adds	r0, r2, #1
 802afa4:	d1c9      	bne.n	802af3a <__sflush_r+0x32>
 802afa6:	682b      	ldr	r3, [r5, #0]
 802afa8:	2b00      	cmp	r3, #0
 802afaa:	d0c6      	beq.n	802af3a <__sflush_r+0x32>
 802afac:	2b1d      	cmp	r3, #29
 802afae:	d001      	beq.n	802afb4 <__sflush_r+0xac>
 802afb0:	2b16      	cmp	r3, #22
 802afb2:	d11e      	bne.n	802aff2 <__sflush_r+0xea>
 802afb4:	602f      	str	r7, [r5, #0]
 802afb6:	2000      	movs	r0, #0
 802afb8:	e022      	b.n	802b000 <__sflush_r+0xf8>
 802afba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802afbe:	b21b      	sxth	r3, r3
 802afc0:	e01b      	b.n	802affa <__sflush_r+0xf2>
 802afc2:	690f      	ldr	r7, [r1, #16]
 802afc4:	2f00      	cmp	r7, #0
 802afc6:	d0f6      	beq.n	802afb6 <__sflush_r+0xae>
 802afc8:	0793      	lsls	r3, r2, #30
 802afca:	680e      	ldr	r6, [r1, #0]
 802afcc:	bf08      	it	eq
 802afce:	694b      	ldreq	r3, [r1, #20]
 802afd0:	600f      	str	r7, [r1, #0]
 802afd2:	bf18      	it	ne
 802afd4:	2300      	movne	r3, #0
 802afd6:	eba6 0807 	sub.w	r8, r6, r7
 802afda:	608b      	str	r3, [r1, #8]
 802afdc:	f1b8 0f00 	cmp.w	r8, #0
 802afe0:	dde9      	ble.n	802afb6 <__sflush_r+0xae>
 802afe2:	6a21      	ldr	r1, [r4, #32]
 802afe4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802afe6:	4643      	mov	r3, r8
 802afe8:	463a      	mov	r2, r7
 802afea:	4628      	mov	r0, r5
 802afec:	47b0      	blx	r6
 802afee:	2800      	cmp	r0, #0
 802aff0:	dc08      	bgt.n	802b004 <__sflush_r+0xfc>
 802aff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802aff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802affa:	81a3      	strh	r3, [r4, #12]
 802affc:	f04f 30ff 	mov.w	r0, #4294967295
 802b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b004:	4407      	add	r7, r0
 802b006:	eba8 0800 	sub.w	r8, r8, r0
 802b00a:	e7e7      	b.n	802afdc <__sflush_r+0xd4>
 802b00c:	dfbffffe 	.word	0xdfbffffe

0802b010 <_fflush_r>:
 802b010:	b538      	push	{r3, r4, r5, lr}
 802b012:	690b      	ldr	r3, [r1, #16]
 802b014:	4605      	mov	r5, r0
 802b016:	460c      	mov	r4, r1
 802b018:	b913      	cbnz	r3, 802b020 <_fflush_r+0x10>
 802b01a:	2500      	movs	r5, #0
 802b01c:	4628      	mov	r0, r5
 802b01e:	bd38      	pop	{r3, r4, r5, pc}
 802b020:	b118      	cbz	r0, 802b02a <_fflush_r+0x1a>
 802b022:	6a03      	ldr	r3, [r0, #32]
 802b024:	b90b      	cbnz	r3, 802b02a <_fflush_r+0x1a>
 802b026:	f000 f8bb 	bl	802b1a0 <__sinit>
 802b02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b02e:	2b00      	cmp	r3, #0
 802b030:	d0f3      	beq.n	802b01a <_fflush_r+0xa>
 802b032:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b034:	07d0      	lsls	r0, r2, #31
 802b036:	d404      	bmi.n	802b042 <_fflush_r+0x32>
 802b038:	0599      	lsls	r1, r3, #22
 802b03a:	d402      	bmi.n	802b042 <_fflush_r+0x32>
 802b03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b03e:	f000 fb24 	bl	802b68a <__retarget_lock_acquire_recursive>
 802b042:	4628      	mov	r0, r5
 802b044:	4621      	mov	r1, r4
 802b046:	f7ff ff5f 	bl	802af08 <__sflush_r>
 802b04a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b04c:	07da      	lsls	r2, r3, #31
 802b04e:	4605      	mov	r5, r0
 802b050:	d4e4      	bmi.n	802b01c <_fflush_r+0xc>
 802b052:	89a3      	ldrh	r3, [r4, #12]
 802b054:	059b      	lsls	r3, r3, #22
 802b056:	d4e1      	bmi.n	802b01c <_fflush_r+0xc>
 802b058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b05a:	f000 fb17 	bl	802b68c <__retarget_lock_release_recursive>
 802b05e:	e7dd      	b.n	802b01c <_fflush_r+0xc>

0802b060 <fflush>:
 802b060:	4601      	mov	r1, r0
 802b062:	b920      	cbnz	r0, 802b06e <fflush+0xe>
 802b064:	4a04      	ldr	r2, [pc, #16]	@ (802b078 <fflush+0x18>)
 802b066:	4905      	ldr	r1, [pc, #20]	@ (802b07c <fflush+0x1c>)
 802b068:	4805      	ldr	r0, [pc, #20]	@ (802b080 <fflush+0x20>)
 802b06a:	f000 b91b 	b.w	802b2a4 <_fwalk_sglue>
 802b06e:	4b05      	ldr	r3, [pc, #20]	@ (802b084 <fflush+0x24>)
 802b070:	6818      	ldr	r0, [r3, #0]
 802b072:	f7ff bfcd 	b.w	802b010 <_fflush_r>
 802b076:	bf00      	nop
 802b078:	240000dc 	.word	0x240000dc
 802b07c:	0802b011 	.word	0x0802b011
 802b080:	240000ec 	.word	0x240000ec
 802b084:	240000e8 	.word	0x240000e8

0802b088 <std>:
 802b088:	2300      	movs	r3, #0
 802b08a:	b510      	push	{r4, lr}
 802b08c:	4604      	mov	r4, r0
 802b08e:	e9c0 3300 	strd	r3, r3, [r0]
 802b092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b096:	6083      	str	r3, [r0, #8]
 802b098:	8181      	strh	r1, [r0, #12]
 802b09a:	6643      	str	r3, [r0, #100]	@ 0x64
 802b09c:	81c2      	strh	r2, [r0, #14]
 802b09e:	6183      	str	r3, [r0, #24]
 802b0a0:	4619      	mov	r1, r3
 802b0a2:	2208      	movs	r2, #8
 802b0a4:	305c      	adds	r0, #92	@ 0x5c
 802b0a6:	f000 fa0d 	bl	802b4c4 <memset>
 802b0aa:	4b0d      	ldr	r3, [pc, #52]	@ (802b0e0 <std+0x58>)
 802b0ac:	6263      	str	r3, [r4, #36]	@ 0x24
 802b0ae:	4b0d      	ldr	r3, [pc, #52]	@ (802b0e4 <std+0x5c>)
 802b0b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b0b2:	4b0d      	ldr	r3, [pc, #52]	@ (802b0e8 <std+0x60>)
 802b0b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b0b6:	4b0d      	ldr	r3, [pc, #52]	@ (802b0ec <std+0x64>)
 802b0b8:	6323      	str	r3, [r4, #48]	@ 0x30
 802b0ba:	4b0d      	ldr	r3, [pc, #52]	@ (802b0f0 <std+0x68>)
 802b0bc:	6224      	str	r4, [r4, #32]
 802b0be:	429c      	cmp	r4, r3
 802b0c0:	d006      	beq.n	802b0d0 <std+0x48>
 802b0c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b0c6:	4294      	cmp	r4, r2
 802b0c8:	d002      	beq.n	802b0d0 <std+0x48>
 802b0ca:	33d0      	adds	r3, #208	@ 0xd0
 802b0cc:	429c      	cmp	r4, r3
 802b0ce:	d105      	bne.n	802b0dc <std+0x54>
 802b0d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b0d8:	f000 bad6 	b.w	802b688 <__retarget_lock_init_recursive>
 802b0dc:	bd10      	pop	{r4, pc}
 802b0de:	bf00      	nop
 802b0e0:	0802b2e1 	.word	0x0802b2e1
 802b0e4:	0802b303 	.word	0x0802b303
 802b0e8:	0802b33b 	.word	0x0802b33b
 802b0ec:	0802b35f 	.word	0x0802b35f
 802b0f0:	240291b8 	.word	0x240291b8

0802b0f4 <stdio_exit_handler>:
 802b0f4:	4a02      	ldr	r2, [pc, #8]	@ (802b100 <stdio_exit_handler+0xc>)
 802b0f6:	4903      	ldr	r1, [pc, #12]	@ (802b104 <stdio_exit_handler+0x10>)
 802b0f8:	4803      	ldr	r0, [pc, #12]	@ (802b108 <stdio_exit_handler+0x14>)
 802b0fa:	f000 b8d3 	b.w	802b2a4 <_fwalk_sglue>
 802b0fe:	bf00      	nop
 802b100:	240000dc 	.word	0x240000dc
 802b104:	0802b011 	.word	0x0802b011
 802b108:	240000ec 	.word	0x240000ec

0802b10c <cleanup_stdio>:
 802b10c:	6841      	ldr	r1, [r0, #4]
 802b10e:	4b0c      	ldr	r3, [pc, #48]	@ (802b140 <cleanup_stdio+0x34>)
 802b110:	4299      	cmp	r1, r3
 802b112:	b510      	push	{r4, lr}
 802b114:	4604      	mov	r4, r0
 802b116:	d001      	beq.n	802b11c <cleanup_stdio+0x10>
 802b118:	f7ff ff7a 	bl	802b010 <_fflush_r>
 802b11c:	68a1      	ldr	r1, [r4, #8]
 802b11e:	4b09      	ldr	r3, [pc, #36]	@ (802b144 <cleanup_stdio+0x38>)
 802b120:	4299      	cmp	r1, r3
 802b122:	d002      	beq.n	802b12a <cleanup_stdio+0x1e>
 802b124:	4620      	mov	r0, r4
 802b126:	f7ff ff73 	bl	802b010 <_fflush_r>
 802b12a:	68e1      	ldr	r1, [r4, #12]
 802b12c:	4b06      	ldr	r3, [pc, #24]	@ (802b148 <cleanup_stdio+0x3c>)
 802b12e:	4299      	cmp	r1, r3
 802b130:	d004      	beq.n	802b13c <cleanup_stdio+0x30>
 802b132:	4620      	mov	r0, r4
 802b134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b138:	f7ff bf6a 	b.w	802b010 <_fflush_r>
 802b13c:	bd10      	pop	{r4, pc}
 802b13e:	bf00      	nop
 802b140:	240291b8 	.word	0x240291b8
 802b144:	24029220 	.word	0x24029220
 802b148:	24029288 	.word	0x24029288

0802b14c <global_stdio_init.part.0>:
 802b14c:	b510      	push	{r4, lr}
 802b14e:	4b0b      	ldr	r3, [pc, #44]	@ (802b17c <global_stdio_init.part.0+0x30>)
 802b150:	4c0b      	ldr	r4, [pc, #44]	@ (802b180 <global_stdio_init.part.0+0x34>)
 802b152:	4a0c      	ldr	r2, [pc, #48]	@ (802b184 <global_stdio_init.part.0+0x38>)
 802b154:	601a      	str	r2, [r3, #0]
 802b156:	4620      	mov	r0, r4
 802b158:	2200      	movs	r2, #0
 802b15a:	2104      	movs	r1, #4
 802b15c:	f7ff ff94 	bl	802b088 <std>
 802b160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b164:	2201      	movs	r2, #1
 802b166:	2109      	movs	r1, #9
 802b168:	f7ff ff8e 	bl	802b088 <std>
 802b16c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b170:	2202      	movs	r2, #2
 802b172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b176:	2112      	movs	r1, #18
 802b178:	f7ff bf86 	b.w	802b088 <std>
 802b17c:	240292f0 	.word	0x240292f0
 802b180:	240291b8 	.word	0x240291b8
 802b184:	0802b0f5 	.word	0x0802b0f5

0802b188 <__sfp_lock_acquire>:
 802b188:	4801      	ldr	r0, [pc, #4]	@ (802b190 <__sfp_lock_acquire+0x8>)
 802b18a:	f000 ba7e 	b.w	802b68a <__retarget_lock_acquire_recursive>
 802b18e:	bf00      	nop
 802b190:	240292fa 	.word	0x240292fa

0802b194 <__sfp_lock_release>:
 802b194:	4801      	ldr	r0, [pc, #4]	@ (802b19c <__sfp_lock_release+0x8>)
 802b196:	f000 ba79 	b.w	802b68c <__retarget_lock_release_recursive>
 802b19a:	bf00      	nop
 802b19c:	240292fa 	.word	0x240292fa

0802b1a0 <__sinit>:
 802b1a0:	b510      	push	{r4, lr}
 802b1a2:	4604      	mov	r4, r0
 802b1a4:	f7ff fff0 	bl	802b188 <__sfp_lock_acquire>
 802b1a8:	6a23      	ldr	r3, [r4, #32]
 802b1aa:	b11b      	cbz	r3, 802b1b4 <__sinit+0x14>
 802b1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b1b0:	f7ff bff0 	b.w	802b194 <__sfp_lock_release>
 802b1b4:	4b04      	ldr	r3, [pc, #16]	@ (802b1c8 <__sinit+0x28>)
 802b1b6:	6223      	str	r3, [r4, #32]
 802b1b8:	4b04      	ldr	r3, [pc, #16]	@ (802b1cc <__sinit+0x2c>)
 802b1ba:	681b      	ldr	r3, [r3, #0]
 802b1bc:	2b00      	cmp	r3, #0
 802b1be:	d1f5      	bne.n	802b1ac <__sinit+0xc>
 802b1c0:	f7ff ffc4 	bl	802b14c <global_stdio_init.part.0>
 802b1c4:	e7f2      	b.n	802b1ac <__sinit+0xc>
 802b1c6:	bf00      	nop
 802b1c8:	0802b10d 	.word	0x0802b10d
 802b1cc:	240292f0 	.word	0x240292f0

0802b1d0 <fiprintf>:
 802b1d0:	b40e      	push	{r1, r2, r3}
 802b1d2:	b503      	push	{r0, r1, lr}
 802b1d4:	4601      	mov	r1, r0
 802b1d6:	ab03      	add	r3, sp, #12
 802b1d8:	4805      	ldr	r0, [pc, #20]	@ (802b1f0 <fiprintf+0x20>)
 802b1da:	f853 2b04 	ldr.w	r2, [r3], #4
 802b1de:	6800      	ldr	r0, [r0, #0]
 802b1e0:	9301      	str	r3, [sp, #4]
 802b1e2:	f7ff fbe1 	bl	802a9a8 <_vfiprintf_r>
 802b1e6:	b002      	add	sp, #8
 802b1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 802b1ec:	b003      	add	sp, #12
 802b1ee:	4770      	bx	lr
 802b1f0:	240000e8 	.word	0x240000e8

0802b1f4 <_fputs_r>:
 802b1f4:	b570      	push	{r4, r5, r6, lr}
 802b1f6:	460d      	mov	r5, r1
 802b1f8:	4614      	mov	r4, r2
 802b1fa:	4606      	mov	r6, r0
 802b1fc:	b118      	cbz	r0, 802b206 <_fputs_r+0x12>
 802b1fe:	6a03      	ldr	r3, [r0, #32]
 802b200:	b90b      	cbnz	r3, 802b206 <_fputs_r+0x12>
 802b202:	f7ff ffcd 	bl	802b1a0 <__sinit>
 802b206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b208:	07d9      	lsls	r1, r3, #31
 802b20a:	d405      	bmi.n	802b218 <_fputs_r+0x24>
 802b20c:	89a3      	ldrh	r3, [r4, #12]
 802b20e:	059a      	lsls	r2, r3, #22
 802b210:	d402      	bmi.n	802b218 <_fputs_r+0x24>
 802b212:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b214:	f000 fa39 	bl	802b68a <__retarget_lock_acquire_recursive>
 802b218:	89a3      	ldrh	r3, [r4, #12]
 802b21a:	071b      	lsls	r3, r3, #28
 802b21c:	d501      	bpl.n	802b222 <_fputs_r+0x2e>
 802b21e:	6923      	ldr	r3, [r4, #16]
 802b220:	bb73      	cbnz	r3, 802b280 <_fputs_r+0x8c>
 802b222:	4621      	mov	r1, r4
 802b224:	4630      	mov	r0, r6
 802b226:	f000 f8dd 	bl	802b3e4 <__swsetup_r>
 802b22a:	b348      	cbz	r0, 802b280 <_fputs_r+0x8c>
 802b22c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b22e:	07da      	lsls	r2, r3, #31
 802b230:	d402      	bmi.n	802b238 <_fputs_r+0x44>
 802b232:	89a3      	ldrh	r3, [r4, #12]
 802b234:	059b      	lsls	r3, r3, #22
 802b236:	d529      	bpl.n	802b28c <_fputs_r+0x98>
 802b238:	f04f 30ff 	mov.w	r0, #4294967295
 802b23c:	e018      	b.n	802b270 <_fputs_r+0x7c>
 802b23e:	68a3      	ldr	r3, [r4, #8]
 802b240:	3b01      	subs	r3, #1
 802b242:	2b00      	cmp	r3, #0
 802b244:	60a3      	str	r3, [r4, #8]
 802b246:	da04      	bge.n	802b252 <_fputs_r+0x5e>
 802b248:	69a2      	ldr	r2, [r4, #24]
 802b24a:	4293      	cmp	r3, r2
 802b24c:	db11      	blt.n	802b272 <_fputs_r+0x7e>
 802b24e:	290a      	cmp	r1, #10
 802b250:	d00f      	beq.n	802b272 <_fputs_r+0x7e>
 802b252:	6823      	ldr	r3, [r4, #0]
 802b254:	1c5a      	adds	r2, r3, #1
 802b256:	6022      	str	r2, [r4, #0]
 802b258:	7019      	strb	r1, [r3, #0]
 802b25a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 802b25e:	2900      	cmp	r1, #0
 802b260:	d1ed      	bne.n	802b23e <_fputs_r+0x4a>
 802b262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b264:	07d8      	lsls	r0, r3, #31
 802b266:	d402      	bmi.n	802b26e <_fputs_r+0x7a>
 802b268:	89a3      	ldrh	r3, [r4, #12]
 802b26a:	0599      	lsls	r1, r3, #22
 802b26c:	d50a      	bpl.n	802b284 <_fputs_r+0x90>
 802b26e:	2000      	movs	r0, #0
 802b270:	bd70      	pop	{r4, r5, r6, pc}
 802b272:	4622      	mov	r2, r4
 802b274:	4630      	mov	r0, r6
 802b276:	f000 f876 	bl	802b366 <__swbuf_r>
 802b27a:	3001      	adds	r0, #1
 802b27c:	d1ed      	bne.n	802b25a <_fputs_r+0x66>
 802b27e:	e7d5      	b.n	802b22c <_fputs_r+0x38>
 802b280:	3d01      	subs	r5, #1
 802b282:	e7ea      	b.n	802b25a <_fputs_r+0x66>
 802b284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b286:	f000 fa01 	bl	802b68c <__retarget_lock_release_recursive>
 802b28a:	e7f0      	b.n	802b26e <_fputs_r+0x7a>
 802b28c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b28e:	f000 f9fd 	bl	802b68c <__retarget_lock_release_recursive>
 802b292:	e7d1      	b.n	802b238 <_fputs_r+0x44>

0802b294 <fputs>:
 802b294:	4b02      	ldr	r3, [pc, #8]	@ (802b2a0 <fputs+0xc>)
 802b296:	460a      	mov	r2, r1
 802b298:	4601      	mov	r1, r0
 802b29a:	6818      	ldr	r0, [r3, #0]
 802b29c:	f7ff bfaa 	b.w	802b1f4 <_fputs_r>
 802b2a0:	240000e8 	.word	0x240000e8

0802b2a4 <_fwalk_sglue>:
 802b2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b2a8:	4607      	mov	r7, r0
 802b2aa:	4688      	mov	r8, r1
 802b2ac:	4614      	mov	r4, r2
 802b2ae:	2600      	movs	r6, #0
 802b2b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b2b4:	f1b9 0901 	subs.w	r9, r9, #1
 802b2b8:	d505      	bpl.n	802b2c6 <_fwalk_sglue+0x22>
 802b2ba:	6824      	ldr	r4, [r4, #0]
 802b2bc:	2c00      	cmp	r4, #0
 802b2be:	d1f7      	bne.n	802b2b0 <_fwalk_sglue+0xc>
 802b2c0:	4630      	mov	r0, r6
 802b2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b2c6:	89ab      	ldrh	r3, [r5, #12]
 802b2c8:	2b01      	cmp	r3, #1
 802b2ca:	d907      	bls.n	802b2dc <_fwalk_sglue+0x38>
 802b2cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b2d0:	3301      	adds	r3, #1
 802b2d2:	d003      	beq.n	802b2dc <_fwalk_sglue+0x38>
 802b2d4:	4629      	mov	r1, r5
 802b2d6:	4638      	mov	r0, r7
 802b2d8:	47c0      	blx	r8
 802b2da:	4306      	orrs	r6, r0
 802b2dc:	3568      	adds	r5, #104	@ 0x68
 802b2de:	e7e9      	b.n	802b2b4 <_fwalk_sglue+0x10>

0802b2e0 <__sread>:
 802b2e0:	b510      	push	{r4, lr}
 802b2e2:	460c      	mov	r4, r1
 802b2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b2e8:	f000 f95c 	bl	802b5a4 <_read_r>
 802b2ec:	2800      	cmp	r0, #0
 802b2ee:	bfab      	itete	ge
 802b2f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802b2f2:	89a3      	ldrhlt	r3, [r4, #12]
 802b2f4:	181b      	addge	r3, r3, r0
 802b2f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b2fa:	bfac      	ite	ge
 802b2fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 802b2fe:	81a3      	strhlt	r3, [r4, #12]
 802b300:	bd10      	pop	{r4, pc}

0802b302 <__swrite>:
 802b302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b306:	461f      	mov	r7, r3
 802b308:	898b      	ldrh	r3, [r1, #12]
 802b30a:	05db      	lsls	r3, r3, #23
 802b30c:	4605      	mov	r5, r0
 802b30e:	460c      	mov	r4, r1
 802b310:	4616      	mov	r6, r2
 802b312:	d505      	bpl.n	802b320 <__swrite+0x1e>
 802b314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b318:	2302      	movs	r3, #2
 802b31a:	2200      	movs	r2, #0
 802b31c:	f000 f930 	bl	802b580 <_lseek_r>
 802b320:	89a3      	ldrh	r3, [r4, #12]
 802b322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b32a:	81a3      	strh	r3, [r4, #12]
 802b32c:	4632      	mov	r2, r6
 802b32e:	463b      	mov	r3, r7
 802b330:	4628      	mov	r0, r5
 802b332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b336:	f000 b96b 	b.w	802b610 <_write_r>

0802b33a <__sseek>:
 802b33a:	b510      	push	{r4, lr}
 802b33c:	460c      	mov	r4, r1
 802b33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b342:	f000 f91d 	bl	802b580 <_lseek_r>
 802b346:	1c43      	adds	r3, r0, #1
 802b348:	89a3      	ldrh	r3, [r4, #12]
 802b34a:	bf15      	itete	ne
 802b34c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b34e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b356:	81a3      	strheq	r3, [r4, #12]
 802b358:	bf18      	it	ne
 802b35a:	81a3      	strhne	r3, [r4, #12]
 802b35c:	bd10      	pop	{r4, pc}

0802b35e <__sclose>:
 802b35e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b362:	f000 b8fd 	b.w	802b560 <_close_r>

0802b366 <__swbuf_r>:
 802b366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b368:	460e      	mov	r6, r1
 802b36a:	4614      	mov	r4, r2
 802b36c:	4605      	mov	r5, r0
 802b36e:	b118      	cbz	r0, 802b378 <__swbuf_r+0x12>
 802b370:	6a03      	ldr	r3, [r0, #32]
 802b372:	b90b      	cbnz	r3, 802b378 <__swbuf_r+0x12>
 802b374:	f7ff ff14 	bl	802b1a0 <__sinit>
 802b378:	69a3      	ldr	r3, [r4, #24]
 802b37a:	60a3      	str	r3, [r4, #8]
 802b37c:	89a3      	ldrh	r3, [r4, #12]
 802b37e:	071a      	lsls	r2, r3, #28
 802b380:	d501      	bpl.n	802b386 <__swbuf_r+0x20>
 802b382:	6923      	ldr	r3, [r4, #16]
 802b384:	b943      	cbnz	r3, 802b398 <__swbuf_r+0x32>
 802b386:	4621      	mov	r1, r4
 802b388:	4628      	mov	r0, r5
 802b38a:	f000 f82b 	bl	802b3e4 <__swsetup_r>
 802b38e:	b118      	cbz	r0, 802b398 <__swbuf_r+0x32>
 802b390:	f04f 37ff 	mov.w	r7, #4294967295
 802b394:	4638      	mov	r0, r7
 802b396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b398:	6823      	ldr	r3, [r4, #0]
 802b39a:	6922      	ldr	r2, [r4, #16]
 802b39c:	1a98      	subs	r0, r3, r2
 802b39e:	6963      	ldr	r3, [r4, #20]
 802b3a0:	b2f6      	uxtb	r6, r6
 802b3a2:	4283      	cmp	r3, r0
 802b3a4:	4637      	mov	r7, r6
 802b3a6:	dc05      	bgt.n	802b3b4 <__swbuf_r+0x4e>
 802b3a8:	4621      	mov	r1, r4
 802b3aa:	4628      	mov	r0, r5
 802b3ac:	f7ff fe30 	bl	802b010 <_fflush_r>
 802b3b0:	2800      	cmp	r0, #0
 802b3b2:	d1ed      	bne.n	802b390 <__swbuf_r+0x2a>
 802b3b4:	68a3      	ldr	r3, [r4, #8]
 802b3b6:	3b01      	subs	r3, #1
 802b3b8:	60a3      	str	r3, [r4, #8]
 802b3ba:	6823      	ldr	r3, [r4, #0]
 802b3bc:	1c5a      	adds	r2, r3, #1
 802b3be:	6022      	str	r2, [r4, #0]
 802b3c0:	701e      	strb	r6, [r3, #0]
 802b3c2:	6962      	ldr	r2, [r4, #20]
 802b3c4:	1c43      	adds	r3, r0, #1
 802b3c6:	429a      	cmp	r2, r3
 802b3c8:	d004      	beq.n	802b3d4 <__swbuf_r+0x6e>
 802b3ca:	89a3      	ldrh	r3, [r4, #12]
 802b3cc:	07db      	lsls	r3, r3, #31
 802b3ce:	d5e1      	bpl.n	802b394 <__swbuf_r+0x2e>
 802b3d0:	2e0a      	cmp	r6, #10
 802b3d2:	d1df      	bne.n	802b394 <__swbuf_r+0x2e>
 802b3d4:	4621      	mov	r1, r4
 802b3d6:	4628      	mov	r0, r5
 802b3d8:	f7ff fe1a 	bl	802b010 <_fflush_r>
 802b3dc:	2800      	cmp	r0, #0
 802b3de:	d0d9      	beq.n	802b394 <__swbuf_r+0x2e>
 802b3e0:	e7d6      	b.n	802b390 <__swbuf_r+0x2a>
	...

0802b3e4 <__swsetup_r>:
 802b3e4:	b538      	push	{r3, r4, r5, lr}
 802b3e6:	4b29      	ldr	r3, [pc, #164]	@ (802b48c <__swsetup_r+0xa8>)
 802b3e8:	4605      	mov	r5, r0
 802b3ea:	6818      	ldr	r0, [r3, #0]
 802b3ec:	460c      	mov	r4, r1
 802b3ee:	b118      	cbz	r0, 802b3f8 <__swsetup_r+0x14>
 802b3f0:	6a03      	ldr	r3, [r0, #32]
 802b3f2:	b90b      	cbnz	r3, 802b3f8 <__swsetup_r+0x14>
 802b3f4:	f7ff fed4 	bl	802b1a0 <__sinit>
 802b3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b3fc:	0719      	lsls	r1, r3, #28
 802b3fe:	d422      	bmi.n	802b446 <__swsetup_r+0x62>
 802b400:	06da      	lsls	r2, r3, #27
 802b402:	d407      	bmi.n	802b414 <__swsetup_r+0x30>
 802b404:	2209      	movs	r2, #9
 802b406:	602a      	str	r2, [r5, #0]
 802b408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b40c:	81a3      	strh	r3, [r4, #12]
 802b40e:	f04f 30ff 	mov.w	r0, #4294967295
 802b412:	e033      	b.n	802b47c <__swsetup_r+0x98>
 802b414:	0758      	lsls	r0, r3, #29
 802b416:	d512      	bpl.n	802b43e <__swsetup_r+0x5a>
 802b418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b41a:	b141      	cbz	r1, 802b42e <__swsetup_r+0x4a>
 802b41c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b420:	4299      	cmp	r1, r3
 802b422:	d002      	beq.n	802b42a <__swsetup_r+0x46>
 802b424:	4628      	mov	r0, r5
 802b426:	f000 ff7d 	bl	802c324 <_free_r>
 802b42a:	2300      	movs	r3, #0
 802b42c:	6363      	str	r3, [r4, #52]	@ 0x34
 802b42e:	89a3      	ldrh	r3, [r4, #12]
 802b430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802b434:	81a3      	strh	r3, [r4, #12]
 802b436:	2300      	movs	r3, #0
 802b438:	6063      	str	r3, [r4, #4]
 802b43a:	6923      	ldr	r3, [r4, #16]
 802b43c:	6023      	str	r3, [r4, #0]
 802b43e:	89a3      	ldrh	r3, [r4, #12]
 802b440:	f043 0308 	orr.w	r3, r3, #8
 802b444:	81a3      	strh	r3, [r4, #12]
 802b446:	6923      	ldr	r3, [r4, #16]
 802b448:	b94b      	cbnz	r3, 802b45e <__swsetup_r+0x7a>
 802b44a:	89a3      	ldrh	r3, [r4, #12]
 802b44c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802b450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b454:	d003      	beq.n	802b45e <__swsetup_r+0x7a>
 802b456:	4621      	mov	r1, r4
 802b458:	4628      	mov	r0, r5
 802b45a:	f001 fb55 	bl	802cb08 <__smakebuf_r>
 802b45e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b462:	f013 0201 	ands.w	r2, r3, #1
 802b466:	d00a      	beq.n	802b47e <__swsetup_r+0x9a>
 802b468:	2200      	movs	r2, #0
 802b46a:	60a2      	str	r2, [r4, #8]
 802b46c:	6962      	ldr	r2, [r4, #20]
 802b46e:	4252      	negs	r2, r2
 802b470:	61a2      	str	r2, [r4, #24]
 802b472:	6922      	ldr	r2, [r4, #16]
 802b474:	b942      	cbnz	r2, 802b488 <__swsetup_r+0xa4>
 802b476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802b47a:	d1c5      	bne.n	802b408 <__swsetup_r+0x24>
 802b47c:	bd38      	pop	{r3, r4, r5, pc}
 802b47e:	0799      	lsls	r1, r3, #30
 802b480:	bf58      	it	pl
 802b482:	6962      	ldrpl	r2, [r4, #20]
 802b484:	60a2      	str	r2, [r4, #8]
 802b486:	e7f4      	b.n	802b472 <__swsetup_r+0x8e>
 802b488:	2000      	movs	r0, #0
 802b48a:	e7f7      	b.n	802b47c <__swsetup_r+0x98>
 802b48c:	240000e8 	.word	0x240000e8

0802b490 <memmove>:
 802b490:	4288      	cmp	r0, r1
 802b492:	b510      	push	{r4, lr}
 802b494:	eb01 0402 	add.w	r4, r1, r2
 802b498:	d902      	bls.n	802b4a0 <memmove+0x10>
 802b49a:	4284      	cmp	r4, r0
 802b49c:	4623      	mov	r3, r4
 802b49e:	d807      	bhi.n	802b4b0 <memmove+0x20>
 802b4a0:	1e43      	subs	r3, r0, #1
 802b4a2:	42a1      	cmp	r1, r4
 802b4a4:	d008      	beq.n	802b4b8 <memmove+0x28>
 802b4a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b4aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b4ae:	e7f8      	b.n	802b4a2 <memmove+0x12>
 802b4b0:	4402      	add	r2, r0
 802b4b2:	4601      	mov	r1, r0
 802b4b4:	428a      	cmp	r2, r1
 802b4b6:	d100      	bne.n	802b4ba <memmove+0x2a>
 802b4b8:	bd10      	pop	{r4, pc}
 802b4ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b4be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b4c2:	e7f7      	b.n	802b4b4 <memmove+0x24>

0802b4c4 <memset>:
 802b4c4:	4402      	add	r2, r0
 802b4c6:	4603      	mov	r3, r0
 802b4c8:	4293      	cmp	r3, r2
 802b4ca:	d100      	bne.n	802b4ce <memset+0xa>
 802b4cc:	4770      	bx	lr
 802b4ce:	f803 1b01 	strb.w	r1, [r3], #1
 802b4d2:	e7f9      	b.n	802b4c8 <memset+0x4>

0802b4d4 <strncmp>:
 802b4d4:	b510      	push	{r4, lr}
 802b4d6:	b16a      	cbz	r2, 802b4f4 <strncmp+0x20>
 802b4d8:	3901      	subs	r1, #1
 802b4da:	1884      	adds	r4, r0, r2
 802b4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b4e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802b4e4:	429a      	cmp	r2, r3
 802b4e6:	d103      	bne.n	802b4f0 <strncmp+0x1c>
 802b4e8:	42a0      	cmp	r0, r4
 802b4ea:	d001      	beq.n	802b4f0 <strncmp+0x1c>
 802b4ec:	2a00      	cmp	r2, #0
 802b4ee:	d1f5      	bne.n	802b4dc <strncmp+0x8>
 802b4f0:	1ad0      	subs	r0, r2, r3
 802b4f2:	bd10      	pop	{r4, pc}
 802b4f4:	4610      	mov	r0, r2
 802b4f6:	e7fc      	b.n	802b4f2 <strncmp+0x1e>

0802b4f8 <_raise_r>:
 802b4f8:	291f      	cmp	r1, #31
 802b4fa:	b538      	push	{r3, r4, r5, lr}
 802b4fc:	4605      	mov	r5, r0
 802b4fe:	460c      	mov	r4, r1
 802b500:	d904      	bls.n	802b50c <_raise_r+0x14>
 802b502:	2316      	movs	r3, #22
 802b504:	6003      	str	r3, [r0, #0]
 802b506:	f04f 30ff 	mov.w	r0, #4294967295
 802b50a:	bd38      	pop	{r3, r4, r5, pc}
 802b50c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b50e:	b112      	cbz	r2, 802b516 <_raise_r+0x1e>
 802b510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b514:	b94b      	cbnz	r3, 802b52a <_raise_r+0x32>
 802b516:	4628      	mov	r0, r5
 802b518:	f000 f868 	bl	802b5ec <_getpid_r>
 802b51c:	4622      	mov	r2, r4
 802b51e:	4601      	mov	r1, r0
 802b520:	4628      	mov	r0, r5
 802b522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b526:	f000 b84f 	b.w	802b5c8 <_kill_r>
 802b52a:	2b01      	cmp	r3, #1
 802b52c:	d00a      	beq.n	802b544 <_raise_r+0x4c>
 802b52e:	1c59      	adds	r1, r3, #1
 802b530:	d103      	bne.n	802b53a <_raise_r+0x42>
 802b532:	2316      	movs	r3, #22
 802b534:	6003      	str	r3, [r0, #0]
 802b536:	2001      	movs	r0, #1
 802b538:	e7e7      	b.n	802b50a <_raise_r+0x12>
 802b53a:	2100      	movs	r1, #0
 802b53c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b540:	4620      	mov	r0, r4
 802b542:	4798      	blx	r3
 802b544:	2000      	movs	r0, #0
 802b546:	e7e0      	b.n	802b50a <_raise_r+0x12>

0802b548 <raise>:
 802b548:	4b02      	ldr	r3, [pc, #8]	@ (802b554 <raise+0xc>)
 802b54a:	4601      	mov	r1, r0
 802b54c:	6818      	ldr	r0, [r3, #0]
 802b54e:	f7ff bfd3 	b.w	802b4f8 <_raise_r>
 802b552:	bf00      	nop
 802b554:	240000e8 	.word	0x240000e8

0802b558 <_localeconv_r>:
 802b558:	4800      	ldr	r0, [pc, #0]	@ (802b55c <_localeconv_r+0x4>)
 802b55a:	4770      	bx	lr
 802b55c:	2400022c 	.word	0x2400022c

0802b560 <_close_r>:
 802b560:	b538      	push	{r3, r4, r5, lr}
 802b562:	4d06      	ldr	r5, [pc, #24]	@ (802b57c <_close_r+0x1c>)
 802b564:	2300      	movs	r3, #0
 802b566:	4604      	mov	r4, r0
 802b568:	4608      	mov	r0, r1
 802b56a:	602b      	str	r3, [r5, #0]
 802b56c:	f7d6 fc0a 	bl	8001d84 <_close>
 802b570:	1c43      	adds	r3, r0, #1
 802b572:	d102      	bne.n	802b57a <_close_r+0x1a>
 802b574:	682b      	ldr	r3, [r5, #0]
 802b576:	b103      	cbz	r3, 802b57a <_close_r+0x1a>
 802b578:	6023      	str	r3, [r4, #0]
 802b57a:	bd38      	pop	{r3, r4, r5, pc}
 802b57c:	240292f4 	.word	0x240292f4

0802b580 <_lseek_r>:
 802b580:	b538      	push	{r3, r4, r5, lr}
 802b582:	4d07      	ldr	r5, [pc, #28]	@ (802b5a0 <_lseek_r+0x20>)
 802b584:	4604      	mov	r4, r0
 802b586:	4608      	mov	r0, r1
 802b588:	4611      	mov	r1, r2
 802b58a:	2200      	movs	r2, #0
 802b58c:	602a      	str	r2, [r5, #0]
 802b58e:	461a      	mov	r2, r3
 802b590:	f7d6 fc02 	bl	8001d98 <_lseek>
 802b594:	1c43      	adds	r3, r0, #1
 802b596:	d102      	bne.n	802b59e <_lseek_r+0x1e>
 802b598:	682b      	ldr	r3, [r5, #0]
 802b59a:	b103      	cbz	r3, 802b59e <_lseek_r+0x1e>
 802b59c:	6023      	str	r3, [r4, #0]
 802b59e:	bd38      	pop	{r3, r4, r5, pc}
 802b5a0:	240292f4 	.word	0x240292f4

0802b5a4 <_read_r>:
 802b5a4:	b538      	push	{r3, r4, r5, lr}
 802b5a6:	4d07      	ldr	r5, [pc, #28]	@ (802b5c4 <_read_r+0x20>)
 802b5a8:	4604      	mov	r4, r0
 802b5aa:	4608      	mov	r0, r1
 802b5ac:	4611      	mov	r1, r2
 802b5ae:	2200      	movs	r2, #0
 802b5b0:	602a      	str	r2, [r5, #0]
 802b5b2:	461a      	mov	r2, r3
 802b5b4:	f7d6 fbca 	bl	8001d4c <_read>
 802b5b8:	1c43      	adds	r3, r0, #1
 802b5ba:	d102      	bne.n	802b5c2 <_read_r+0x1e>
 802b5bc:	682b      	ldr	r3, [r5, #0]
 802b5be:	b103      	cbz	r3, 802b5c2 <_read_r+0x1e>
 802b5c0:	6023      	str	r3, [r4, #0]
 802b5c2:	bd38      	pop	{r3, r4, r5, pc}
 802b5c4:	240292f4 	.word	0x240292f4

0802b5c8 <_kill_r>:
 802b5c8:	b538      	push	{r3, r4, r5, lr}
 802b5ca:	4d07      	ldr	r5, [pc, #28]	@ (802b5e8 <_kill_r+0x20>)
 802b5cc:	2300      	movs	r3, #0
 802b5ce:	4604      	mov	r4, r0
 802b5d0:	4608      	mov	r0, r1
 802b5d2:	4611      	mov	r1, r2
 802b5d4:	602b      	str	r3, [r5, #0]
 802b5d6:	f7d6 fbab 	bl	8001d30 <_kill>
 802b5da:	1c43      	adds	r3, r0, #1
 802b5dc:	d102      	bne.n	802b5e4 <_kill_r+0x1c>
 802b5de:	682b      	ldr	r3, [r5, #0]
 802b5e0:	b103      	cbz	r3, 802b5e4 <_kill_r+0x1c>
 802b5e2:	6023      	str	r3, [r4, #0]
 802b5e4:	bd38      	pop	{r3, r4, r5, pc}
 802b5e6:	bf00      	nop
 802b5e8:	240292f4 	.word	0x240292f4

0802b5ec <_getpid_r>:
 802b5ec:	f7d6 bb9e 	b.w	8001d2c <_getpid>

0802b5f0 <_sbrk_r>:
 802b5f0:	b538      	push	{r3, r4, r5, lr}
 802b5f2:	4d06      	ldr	r5, [pc, #24]	@ (802b60c <_sbrk_r+0x1c>)
 802b5f4:	2300      	movs	r3, #0
 802b5f6:	4604      	mov	r4, r0
 802b5f8:	4608      	mov	r0, r1
 802b5fa:	602b      	str	r3, [r5, #0]
 802b5fc:	f7d6 fbce 	bl	8001d9c <_sbrk>
 802b600:	1c43      	adds	r3, r0, #1
 802b602:	d102      	bne.n	802b60a <_sbrk_r+0x1a>
 802b604:	682b      	ldr	r3, [r5, #0]
 802b606:	b103      	cbz	r3, 802b60a <_sbrk_r+0x1a>
 802b608:	6023      	str	r3, [r4, #0]
 802b60a:	bd38      	pop	{r3, r4, r5, pc}
 802b60c:	240292f4 	.word	0x240292f4

0802b610 <_write_r>:
 802b610:	b538      	push	{r3, r4, r5, lr}
 802b612:	4d07      	ldr	r5, [pc, #28]	@ (802b630 <_write_r+0x20>)
 802b614:	4604      	mov	r4, r0
 802b616:	4608      	mov	r0, r1
 802b618:	4611      	mov	r1, r2
 802b61a:	2200      	movs	r2, #0
 802b61c:	602a      	str	r2, [r5, #0]
 802b61e:	461a      	mov	r2, r3
 802b620:	f7d6 fba2 	bl	8001d68 <_write>
 802b624:	1c43      	adds	r3, r0, #1
 802b626:	d102      	bne.n	802b62e <_write_r+0x1e>
 802b628:	682b      	ldr	r3, [r5, #0]
 802b62a:	b103      	cbz	r3, 802b62e <_write_r+0x1e>
 802b62c:	6023      	str	r3, [r4, #0]
 802b62e:	bd38      	pop	{r3, r4, r5, pc}
 802b630:	240292f4 	.word	0x240292f4

0802b634 <__errno>:
 802b634:	4b01      	ldr	r3, [pc, #4]	@ (802b63c <__errno+0x8>)
 802b636:	6818      	ldr	r0, [r3, #0]
 802b638:	4770      	bx	lr
 802b63a:	bf00      	nop
 802b63c:	240000e8 	.word	0x240000e8

0802b640 <__libc_init_array>:
 802b640:	b570      	push	{r4, r5, r6, lr}
 802b642:	4d0d      	ldr	r5, [pc, #52]	@ (802b678 <__libc_init_array+0x38>)
 802b644:	4c0d      	ldr	r4, [pc, #52]	@ (802b67c <__libc_init_array+0x3c>)
 802b646:	1b64      	subs	r4, r4, r5
 802b648:	10a4      	asrs	r4, r4, #2
 802b64a:	2600      	movs	r6, #0
 802b64c:	42a6      	cmp	r6, r4
 802b64e:	d109      	bne.n	802b664 <__libc_init_array+0x24>
 802b650:	4d0b      	ldr	r5, [pc, #44]	@ (802b680 <__libc_init_array+0x40>)
 802b652:	4c0c      	ldr	r4, [pc, #48]	@ (802b684 <__libc_init_array+0x44>)
 802b654:	f001 faea 	bl	802cc2c <_init>
 802b658:	1b64      	subs	r4, r4, r5
 802b65a:	10a4      	asrs	r4, r4, #2
 802b65c:	2600      	movs	r6, #0
 802b65e:	42a6      	cmp	r6, r4
 802b660:	d105      	bne.n	802b66e <__libc_init_array+0x2e>
 802b662:	bd70      	pop	{r4, r5, r6, pc}
 802b664:	f855 3b04 	ldr.w	r3, [r5], #4
 802b668:	4798      	blx	r3
 802b66a:	3601      	adds	r6, #1
 802b66c:	e7ee      	b.n	802b64c <__libc_init_array+0xc>
 802b66e:	f855 3b04 	ldr.w	r3, [r5], #4
 802b672:	4798      	blx	r3
 802b674:	3601      	adds	r6, #1
 802b676:	e7f2      	b.n	802b65e <__libc_init_array+0x1e>
 802b678:	0804c6e8 	.word	0x0804c6e8
 802b67c:	0804c6e8 	.word	0x0804c6e8
 802b680:	0804c6e8 	.word	0x0804c6e8
 802b684:	0804c708 	.word	0x0804c708

0802b688 <__retarget_lock_init_recursive>:
 802b688:	4770      	bx	lr

0802b68a <__retarget_lock_acquire_recursive>:
 802b68a:	4770      	bx	lr

0802b68c <__retarget_lock_release_recursive>:
 802b68c:	4770      	bx	lr

0802b68e <memcpy>:
 802b68e:	440a      	add	r2, r1
 802b690:	4291      	cmp	r1, r2
 802b692:	f100 33ff 	add.w	r3, r0, #4294967295
 802b696:	d100      	bne.n	802b69a <memcpy+0xc>
 802b698:	4770      	bx	lr
 802b69a:	b510      	push	{r4, lr}
 802b69c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b6a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b6a4:	4291      	cmp	r1, r2
 802b6a6:	d1f9      	bne.n	802b69c <memcpy+0xe>
 802b6a8:	bd10      	pop	{r4, pc}
	...

0802b6ac <__register_exitproc>:
 802b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b6b0:	4d27      	ldr	r5, [pc, #156]	@ (802b750 <__register_exitproc+0xa4>)
 802b6b2:	4607      	mov	r7, r0
 802b6b4:	6828      	ldr	r0, [r5, #0]
 802b6b6:	4691      	mov	r9, r2
 802b6b8:	460e      	mov	r6, r1
 802b6ba:	4698      	mov	r8, r3
 802b6bc:	f7ff ffe5 	bl	802b68a <__retarget_lock_acquire_recursive>
 802b6c0:	4a24      	ldr	r2, [pc, #144]	@ (802b754 <__register_exitproc+0xa8>)
 802b6c2:	6814      	ldr	r4, [r2, #0]
 802b6c4:	b93c      	cbnz	r4, 802b6d6 <__register_exitproc+0x2a>
 802b6c6:	4b24      	ldr	r3, [pc, #144]	@ (802b758 <__register_exitproc+0xac>)
 802b6c8:	6013      	str	r3, [r2, #0]
 802b6ca:	4a24      	ldr	r2, [pc, #144]	@ (802b75c <__register_exitproc+0xb0>)
 802b6cc:	b112      	cbz	r2, 802b6d4 <__register_exitproc+0x28>
 802b6ce:	6812      	ldr	r2, [r2, #0]
 802b6d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802b6d4:	4c20      	ldr	r4, [pc, #128]	@ (802b758 <__register_exitproc+0xac>)
 802b6d6:	6863      	ldr	r3, [r4, #4]
 802b6d8:	2b1f      	cmp	r3, #31
 802b6da:	dd06      	ble.n	802b6ea <__register_exitproc+0x3e>
 802b6dc:	6828      	ldr	r0, [r5, #0]
 802b6de:	f7ff ffd5 	bl	802b68c <__retarget_lock_release_recursive>
 802b6e2:	f04f 30ff 	mov.w	r0, #4294967295
 802b6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b6ea:	b32f      	cbz	r7, 802b738 <__register_exitproc+0x8c>
 802b6ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802b6f0:	b968      	cbnz	r0, 802b70e <__register_exitproc+0x62>
 802b6f2:	4b1b      	ldr	r3, [pc, #108]	@ (802b760 <__register_exitproc+0xb4>)
 802b6f4:	2b00      	cmp	r3, #0
 802b6f6:	d0f1      	beq.n	802b6dc <__register_exitproc+0x30>
 802b6f8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802b6fc:	f7fe fdb4 	bl	802a268 <malloc>
 802b700:	2800      	cmp	r0, #0
 802b702:	d0eb      	beq.n	802b6dc <__register_exitproc+0x30>
 802b704:	2300      	movs	r3, #0
 802b706:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802b70a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b70e:	6863      	ldr	r3, [r4, #4]
 802b710:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b714:	2201      	movs	r2, #1
 802b716:	409a      	lsls	r2, r3
 802b718:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b71c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802b720:	4313      	orrs	r3, r2
 802b722:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802b726:	2f02      	cmp	r7, #2
 802b728:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802b72c:	bf02      	ittt	eq
 802b72e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802b732:	4313      	orreq	r3, r2
 802b734:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802b738:	6863      	ldr	r3, [r4, #4]
 802b73a:	6828      	ldr	r0, [r5, #0]
 802b73c:	1c5a      	adds	r2, r3, #1
 802b73e:	3302      	adds	r3, #2
 802b740:	6062      	str	r2, [r4, #4]
 802b742:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b746:	f7ff ffa1 	bl	802b68c <__retarget_lock_release_recursive>
 802b74a:	2000      	movs	r0, #0
 802b74c:	e7cb      	b.n	802b6e6 <__register_exitproc+0x3a>
 802b74e:	bf00      	nop
 802b750:	24000138 	.word	0x24000138
 802b754:	24029388 	.word	0x24029388
 802b758:	240292fc 	.word	0x240292fc
 802b75c:	08031208 	.word	0x08031208
 802b760:	0802a269 	.word	0x0802a269

0802b764 <quorem>:
 802b764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b768:	6903      	ldr	r3, [r0, #16]
 802b76a:	690c      	ldr	r4, [r1, #16]
 802b76c:	42a3      	cmp	r3, r4
 802b76e:	4607      	mov	r7, r0
 802b770:	db7e      	blt.n	802b870 <quorem+0x10c>
 802b772:	3c01      	subs	r4, #1
 802b774:	f101 0814 	add.w	r8, r1, #20
 802b778:	00a3      	lsls	r3, r4, #2
 802b77a:	f100 0514 	add.w	r5, r0, #20
 802b77e:	9300      	str	r3, [sp, #0]
 802b780:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b784:	9301      	str	r3, [sp, #4]
 802b786:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802b78a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b78e:	3301      	adds	r3, #1
 802b790:	429a      	cmp	r2, r3
 802b792:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802b796:	fbb2 f6f3 	udiv	r6, r2, r3
 802b79a:	d32e      	bcc.n	802b7fa <quorem+0x96>
 802b79c:	f04f 0a00 	mov.w	sl, #0
 802b7a0:	46c4      	mov	ip, r8
 802b7a2:	46ae      	mov	lr, r5
 802b7a4:	46d3      	mov	fp, sl
 802b7a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 802b7aa:	b298      	uxth	r0, r3
 802b7ac:	fb06 a000 	mla	r0, r6, r0, sl
 802b7b0:	0c02      	lsrs	r2, r0, #16
 802b7b2:	0c1b      	lsrs	r3, r3, #16
 802b7b4:	fb06 2303 	mla	r3, r6, r3, r2
 802b7b8:	f8de 2000 	ldr.w	r2, [lr]
 802b7bc:	b280      	uxth	r0, r0
 802b7be:	b292      	uxth	r2, r2
 802b7c0:	1a12      	subs	r2, r2, r0
 802b7c2:	445a      	add	r2, fp
 802b7c4:	f8de 0000 	ldr.w	r0, [lr]
 802b7c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b7cc:	b29b      	uxth	r3, r3
 802b7ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802b7d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802b7d6:	b292      	uxth	r2, r2
 802b7d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802b7dc:	45e1      	cmp	r9, ip
 802b7de:	f84e 2b04 	str.w	r2, [lr], #4
 802b7e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802b7e6:	d2de      	bcs.n	802b7a6 <quorem+0x42>
 802b7e8:	9b00      	ldr	r3, [sp, #0]
 802b7ea:	58eb      	ldr	r3, [r5, r3]
 802b7ec:	b92b      	cbnz	r3, 802b7fa <quorem+0x96>
 802b7ee:	9b01      	ldr	r3, [sp, #4]
 802b7f0:	3b04      	subs	r3, #4
 802b7f2:	429d      	cmp	r5, r3
 802b7f4:	461a      	mov	r2, r3
 802b7f6:	d32f      	bcc.n	802b858 <quorem+0xf4>
 802b7f8:	613c      	str	r4, [r7, #16]
 802b7fa:	4638      	mov	r0, r7
 802b7fc:	f001 f856 	bl	802c8ac <__mcmp>
 802b800:	2800      	cmp	r0, #0
 802b802:	db25      	blt.n	802b850 <quorem+0xec>
 802b804:	4629      	mov	r1, r5
 802b806:	2000      	movs	r0, #0
 802b808:	f858 2b04 	ldr.w	r2, [r8], #4
 802b80c:	f8d1 c000 	ldr.w	ip, [r1]
 802b810:	fa1f fe82 	uxth.w	lr, r2
 802b814:	fa1f f38c 	uxth.w	r3, ip
 802b818:	eba3 030e 	sub.w	r3, r3, lr
 802b81c:	4403      	add	r3, r0
 802b81e:	0c12      	lsrs	r2, r2, #16
 802b820:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802b824:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802b828:	b29b      	uxth	r3, r3
 802b82a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b82e:	45c1      	cmp	r9, r8
 802b830:	f841 3b04 	str.w	r3, [r1], #4
 802b834:	ea4f 4022 	mov.w	r0, r2, asr #16
 802b838:	d2e6      	bcs.n	802b808 <quorem+0xa4>
 802b83a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b83e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b842:	b922      	cbnz	r2, 802b84e <quorem+0xea>
 802b844:	3b04      	subs	r3, #4
 802b846:	429d      	cmp	r5, r3
 802b848:	461a      	mov	r2, r3
 802b84a:	d30b      	bcc.n	802b864 <quorem+0x100>
 802b84c:	613c      	str	r4, [r7, #16]
 802b84e:	3601      	adds	r6, #1
 802b850:	4630      	mov	r0, r6
 802b852:	b003      	add	sp, #12
 802b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b858:	6812      	ldr	r2, [r2, #0]
 802b85a:	3b04      	subs	r3, #4
 802b85c:	2a00      	cmp	r2, #0
 802b85e:	d1cb      	bne.n	802b7f8 <quorem+0x94>
 802b860:	3c01      	subs	r4, #1
 802b862:	e7c6      	b.n	802b7f2 <quorem+0x8e>
 802b864:	6812      	ldr	r2, [r2, #0]
 802b866:	3b04      	subs	r3, #4
 802b868:	2a00      	cmp	r2, #0
 802b86a:	d1ef      	bne.n	802b84c <quorem+0xe8>
 802b86c:	3c01      	subs	r4, #1
 802b86e:	e7ea      	b.n	802b846 <quorem+0xe2>
 802b870:	2000      	movs	r0, #0
 802b872:	e7ee      	b.n	802b852 <quorem+0xee>
 802b874:	0000      	movs	r0, r0
	...

0802b878 <_dtoa_r>:
 802b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b87c:	ed2d 8b02 	vpush	{d8}
 802b880:	69c7      	ldr	r7, [r0, #28]
 802b882:	b091      	sub	sp, #68	@ 0x44
 802b884:	ed8d 0b02 	vstr	d0, [sp, #8]
 802b888:	ec55 4b10 	vmov	r4, r5, d0
 802b88c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802b88e:	9107      	str	r1, [sp, #28]
 802b890:	4681      	mov	r9, r0
 802b892:	9209      	str	r2, [sp, #36]	@ 0x24
 802b894:	930d      	str	r3, [sp, #52]	@ 0x34
 802b896:	b97f      	cbnz	r7, 802b8b8 <_dtoa_r+0x40>
 802b898:	2010      	movs	r0, #16
 802b89a:	f7fe fce5 	bl	802a268 <malloc>
 802b89e:	4602      	mov	r2, r0
 802b8a0:	f8c9 001c 	str.w	r0, [r9, #28]
 802b8a4:	b920      	cbnz	r0, 802b8b0 <_dtoa_r+0x38>
 802b8a6:	4ba0      	ldr	r3, [pc, #640]	@ (802bb28 <_dtoa_r+0x2b0>)
 802b8a8:	21ef      	movs	r1, #239	@ 0xef
 802b8aa:	48a0      	ldr	r0, [pc, #640]	@ (802bb2c <_dtoa_r+0x2b4>)
 802b8ac:	f7fe fcb8 	bl	802a220 <__assert_func>
 802b8b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 802b8b4:	6007      	str	r7, [r0, #0]
 802b8b6:	60c7      	str	r7, [r0, #12]
 802b8b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802b8bc:	6819      	ldr	r1, [r3, #0]
 802b8be:	b159      	cbz	r1, 802b8d8 <_dtoa_r+0x60>
 802b8c0:	685a      	ldr	r2, [r3, #4]
 802b8c2:	604a      	str	r2, [r1, #4]
 802b8c4:	2301      	movs	r3, #1
 802b8c6:	4093      	lsls	r3, r2
 802b8c8:	608b      	str	r3, [r1, #8]
 802b8ca:	4648      	mov	r0, r9
 802b8cc:	f000 fdb4 	bl	802c438 <_Bfree>
 802b8d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802b8d4:	2200      	movs	r2, #0
 802b8d6:	601a      	str	r2, [r3, #0]
 802b8d8:	1e2b      	subs	r3, r5, #0
 802b8da:	bfbb      	ittet	lt
 802b8dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802b8e0:	9303      	strlt	r3, [sp, #12]
 802b8e2:	2300      	movge	r3, #0
 802b8e4:	2201      	movlt	r2, #1
 802b8e6:	bfac      	ite	ge
 802b8e8:	6033      	strge	r3, [r6, #0]
 802b8ea:	6032      	strlt	r2, [r6, #0]
 802b8ec:	4b90      	ldr	r3, [pc, #576]	@ (802bb30 <_dtoa_r+0x2b8>)
 802b8ee:	9e03      	ldr	r6, [sp, #12]
 802b8f0:	43b3      	bics	r3, r6
 802b8f2:	d110      	bne.n	802b916 <_dtoa_r+0x9e>
 802b8f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b8f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 802b8fa:	6013      	str	r3, [r2, #0]
 802b8fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 802b900:	4323      	orrs	r3, r4
 802b902:	f000 84de 	beq.w	802c2c2 <_dtoa_r+0xa4a>
 802b906:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b908:	4f8a      	ldr	r7, [pc, #552]	@ (802bb34 <_dtoa_r+0x2bc>)
 802b90a:	2b00      	cmp	r3, #0
 802b90c:	f000 84e0 	beq.w	802c2d0 <_dtoa_r+0xa58>
 802b910:	1cfb      	adds	r3, r7, #3
 802b912:	f000 bcdb 	b.w	802c2cc <_dtoa_r+0xa54>
 802b916:	ed9d 8b02 	vldr	d8, [sp, #8]
 802b91a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b922:	d10a      	bne.n	802b93a <_dtoa_r+0xc2>
 802b924:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b926:	2301      	movs	r3, #1
 802b928:	6013      	str	r3, [r2, #0]
 802b92a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b92c:	b113      	cbz	r3, 802b934 <_dtoa_r+0xbc>
 802b92e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802b930:	4b81      	ldr	r3, [pc, #516]	@ (802bb38 <_dtoa_r+0x2c0>)
 802b932:	6013      	str	r3, [r2, #0]
 802b934:	4f81      	ldr	r7, [pc, #516]	@ (802bb3c <_dtoa_r+0x2c4>)
 802b936:	f000 bccb 	b.w	802c2d0 <_dtoa_r+0xa58>
 802b93a:	aa0e      	add	r2, sp, #56	@ 0x38
 802b93c:	a90f      	add	r1, sp, #60	@ 0x3c
 802b93e:	4648      	mov	r0, r9
 802b940:	eeb0 0b48 	vmov.f64	d0, d8
 802b944:	f001 f862 	bl	802ca0c <__d2b>
 802b948:	f3c6 530a 	ubfx	r3, r6, #20, #11
 802b94c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b94e:	9001      	str	r0, [sp, #4]
 802b950:	2b00      	cmp	r3, #0
 802b952:	d045      	beq.n	802b9e0 <_dtoa_r+0x168>
 802b954:	eeb0 7b48 	vmov.f64	d7, d8
 802b958:	ee18 1a90 	vmov	r1, s17
 802b95c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 802b960:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 802b964:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 802b968:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802b96c:	2500      	movs	r5, #0
 802b96e:	ee07 1a90 	vmov	s15, r1
 802b972:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 802b976:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 802bb10 <_dtoa_r+0x298>
 802b97a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b97e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 802bb18 <_dtoa_r+0x2a0>
 802b982:	eea7 6b05 	vfma.f64	d6, d7, d5
 802b986:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 802bb20 <_dtoa_r+0x2a8>
 802b98a:	ee07 3a90 	vmov	s15, r3
 802b98e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802b992:	eeb0 7b46 	vmov.f64	d7, d6
 802b996:	eea4 7b05 	vfma.f64	d7, d4, d5
 802b99a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802b99e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802b9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9a6:	ee16 8a90 	vmov	r8, s13
 802b9aa:	d508      	bpl.n	802b9be <_dtoa_r+0x146>
 802b9ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802b9b0:	eeb4 6b47 	vcmp.f64	d6, d7
 802b9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9b8:	bf18      	it	ne
 802b9ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 802b9be:	f1b8 0f16 	cmp.w	r8, #22
 802b9c2:	d82b      	bhi.n	802ba1c <_dtoa_r+0x1a4>
 802b9c4:	495e      	ldr	r1, [pc, #376]	@ (802bb40 <_dtoa_r+0x2c8>)
 802b9c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 802b9ca:	ed91 7b00 	vldr	d7, [r1]
 802b9ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802b9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9d6:	d501      	bpl.n	802b9dc <_dtoa_r+0x164>
 802b9d8:	f108 38ff 	add.w	r8, r8, #4294967295
 802b9dc:	2100      	movs	r1, #0
 802b9de:	e01e      	b.n	802ba1e <_dtoa_r+0x1a6>
 802b9e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b9e2:	4413      	add	r3, r2
 802b9e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 802b9e8:	2920      	cmp	r1, #32
 802b9ea:	bfc1      	itttt	gt
 802b9ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 802b9f0:	408e      	lslgt	r6, r1
 802b9f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 802b9f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 802b9fa:	bfd6      	itet	le
 802b9fc:	f1c1 0120 	rsble	r1, r1, #32
 802ba00:	4331      	orrgt	r1, r6
 802ba02:	fa04 f101 	lslle.w	r1, r4, r1
 802ba06:	ee07 1a90 	vmov	s15, r1
 802ba0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802ba0e:	3b01      	subs	r3, #1
 802ba10:	ee17 1a90 	vmov	r1, s15
 802ba14:	2501      	movs	r5, #1
 802ba16:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 802ba1a:	e7a8      	b.n	802b96e <_dtoa_r+0xf6>
 802ba1c:	2101      	movs	r1, #1
 802ba1e:	1ad2      	subs	r2, r2, r3
 802ba20:	1e53      	subs	r3, r2, #1
 802ba22:	9306      	str	r3, [sp, #24]
 802ba24:	bf45      	ittet	mi
 802ba26:	f1c2 0301 	rsbmi	r3, r2, #1
 802ba2a:	9305      	strmi	r3, [sp, #20]
 802ba2c:	2300      	movpl	r3, #0
 802ba2e:	2300      	movmi	r3, #0
 802ba30:	bf4c      	ite	mi
 802ba32:	9306      	strmi	r3, [sp, #24]
 802ba34:	9305      	strpl	r3, [sp, #20]
 802ba36:	f1b8 0f00 	cmp.w	r8, #0
 802ba3a:	910c      	str	r1, [sp, #48]	@ 0x30
 802ba3c:	db18      	blt.n	802ba70 <_dtoa_r+0x1f8>
 802ba3e:	9b06      	ldr	r3, [sp, #24]
 802ba40:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 802ba44:	4443      	add	r3, r8
 802ba46:	9306      	str	r3, [sp, #24]
 802ba48:	2300      	movs	r3, #0
 802ba4a:	9a07      	ldr	r2, [sp, #28]
 802ba4c:	2a09      	cmp	r2, #9
 802ba4e:	d849      	bhi.n	802bae4 <_dtoa_r+0x26c>
 802ba50:	2a05      	cmp	r2, #5
 802ba52:	bfc4      	itt	gt
 802ba54:	3a04      	subgt	r2, #4
 802ba56:	9207      	strgt	r2, [sp, #28]
 802ba58:	9a07      	ldr	r2, [sp, #28]
 802ba5a:	f1a2 0202 	sub.w	r2, r2, #2
 802ba5e:	bfcc      	ite	gt
 802ba60:	2400      	movgt	r4, #0
 802ba62:	2401      	movle	r4, #1
 802ba64:	2a03      	cmp	r2, #3
 802ba66:	d848      	bhi.n	802bafa <_dtoa_r+0x282>
 802ba68:	e8df f002 	tbb	[pc, r2]
 802ba6c:	3a2c2e0b 	.word	0x3a2c2e0b
 802ba70:	9b05      	ldr	r3, [sp, #20]
 802ba72:	2200      	movs	r2, #0
 802ba74:	eba3 0308 	sub.w	r3, r3, r8
 802ba78:	9305      	str	r3, [sp, #20]
 802ba7a:	920a      	str	r2, [sp, #40]	@ 0x28
 802ba7c:	f1c8 0300 	rsb	r3, r8, #0
 802ba80:	e7e3      	b.n	802ba4a <_dtoa_r+0x1d2>
 802ba82:	2200      	movs	r2, #0
 802ba84:	9208      	str	r2, [sp, #32]
 802ba86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ba88:	2a00      	cmp	r2, #0
 802ba8a:	dc39      	bgt.n	802bb00 <_dtoa_r+0x288>
 802ba8c:	f04f 0b01 	mov.w	fp, #1
 802ba90:	46da      	mov	sl, fp
 802ba92:	465a      	mov	r2, fp
 802ba94:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 802ba98:	f8d9 701c 	ldr.w	r7, [r9, #28]
 802ba9c:	2100      	movs	r1, #0
 802ba9e:	2004      	movs	r0, #4
 802baa0:	f100 0614 	add.w	r6, r0, #20
 802baa4:	4296      	cmp	r6, r2
 802baa6:	d930      	bls.n	802bb0a <_dtoa_r+0x292>
 802baa8:	6079      	str	r1, [r7, #4]
 802baaa:	4648      	mov	r0, r9
 802baac:	9304      	str	r3, [sp, #16]
 802baae:	f000 fc83 	bl	802c3b8 <_Balloc>
 802bab2:	9b04      	ldr	r3, [sp, #16]
 802bab4:	4607      	mov	r7, r0
 802bab6:	2800      	cmp	r0, #0
 802bab8:	d146      	bne.n	802bb48 <_dtoa_r+0x2d0>
 802baba:	4b22      	ldr	r3, [pc, #136]	@ (802bb44 <_dtoa_r+0x2cc>)
 802babc:	4602      	mov	r2, r0
 802babe:	f240 11af 	movw	r1, #431	@ 0x1af
 802bac2:	e6f2      	b.n	802b8aa <_dtoa_r+0x32>
 802bac4:	2201      	movs	r2, #1
 802bac6:	e7dd      	b.n	802ba84 <_dtoa_r+0x20c>
 802bac8:	2200      	movs	r2, #0
 802baca:	9208      	str	r2, [sp, #32]
 802bacc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bace:	eb08 0b02 	add.w	fp, r8, r2
 802bad2:	f10b 0a01 	add.w	sl, fp, #1
 802bad6:	4652      	mov	r2, sl
 802bad8:	2a01      	cmp	r2, #1
 802bada:	bfb8      	it	lt
 802badc:	2201      	movlt	r2, #1
 802bade:	e7db      	b.n	802ba98 <_dtoa_r+0x220>
 802bae0:	2201      	movs	r2, #1
 802bae2:	e7f2      	b.n	802baca <_dtoa_r+0x252>
 802bae4:	2401      	movs	r4, #1
 802bae6:	2200      	movs	r2, #0
 802bae8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802baec:	f04f 3bff 	mov.w	fp, #4294967295
 802baf0:	2100      	movs	r1, #0
 802baf2:	46da      	mov	sl, fp
 802baf4:	2212      	movs	r2, #18
 802baf6:	9109      	str	r1, [sp, #36]	@ 0x24
 802baf8:	e7ce      	b.n	802ba98 <_dtoa_r+0x220>
 802bafa:	2201      	movs	r2, #1
 802bafc:	9208      	str	r2, [sp, #32]
 802bafe:	e7f5      	b.n	802baec <_dtoa_r+0x274>
 802bb00:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802bb04:	46da      	mov	sl, fp
 802bb06:	465a      	mov	r2, fp
 802bb08:	e7c6      	b.n	802ba98 <_dtoa_r+0x220>
 802bb0a:	3101      	adds	r1, #1
 802bb0c:	0040      	lsls	r0, r0, #1
 802bb0e:	e7c7      	b.n	802baa0 <_dtoa_r+0x228>
 802bb10:	636f4361 	.word	0x636f4361
 802bb14:	3fd287a7 	.word	0x3fd287a7
 802bb18:	8b60c8b3 	.word	0x8b60c8b3
 802bb1c:	3fc68a28 	.word	0x3fc68a28
 802bb20:	509f79fb 	.word	0x509f79fb
 802bb24:	3fd34413 	.word	0x3fd34413
 802bb28:	0803102c 	.word	0x0803102c
 802bb2c:	08031043 	.word	0x08031043
 802bb30:	7ff00000 	.word	0x7ff00000
 802bb34:	08031028 	.word	0x08031028
 802bb38:	0802f7dc 	.word	0x0802f7dc
 802bb3c:	0802f7db 	.word	0x0802f7db
 802bb40:	08031140 	.word	0x08031140
 802bb44:	0803109b 	.word	0x0803109b
 802bb48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 802bb4c:	f1ba 0f0e 	cmp.w	sl, #14
 802bb50:	6010      	str	r0, [r2, #0]
 802bb52:	d86f      	bhi.n	802bc34 <_dtoa_r+0x3bc>
 802bb54:	2c00      	cmp	r4, #0
 802bb56:	d06d      	beq.n	802bc34 <_dtoa_r+0x3bc>
 802bb58:	f1b8 0f00 	cmp.w	r8, #0
 802bb5c:	f340 80c2 	ble.w	802bce4 <_dtoa_r+0x46c>
 802bb60:	4aca      	ldr	r2, [pc, #808]	@ (802be8c <_dtoa_r+0x614>)
 802bb62:	f008 010f 	and.w	r1, r8, #15
 802bb66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802bb6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802bb6e:	ed92 7b00 	vldr	d7, [r2]
 802bb72:	ea4f 1128 	mov.w	r1, r8, asr #4
 802bb76:	f000 80a9 	beq.w	802bccc <_dtoa_r+0x454>
 802bb7a:	4ac5      	ldr	r2, [pc, #788]	@ (802be90 <_dtoa_r+0x618>)
 802bb7c:	ed92 6b08 	vldr	d6, [r2, #32]
 802bb80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802bb84:	ed8d 6b02 	vstr	d6, [sp, #8]
 802bb88:	f001 010f 	and.w	r1, r1, #15
 802bb8c:	2203      	movs	r2, #3
 802bb8e:	48c0      	ldr	r0, [pc, #768]	@ (802be90 <_dtoa_r+0x618>)
 802bb90:	2900      	cmp	r1, #0
 802bb92:	f040 809d 	bne.w	802bcd0 <_dtoa_r+0x458>
 802bb96:	ed9d 6b02 	vldr	d6, [sp, #8]
 802bb9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802bb9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 802bba2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802bba4:	ed9d 7b02 	vldr	d7, [sp, #8]
 802bba8:	2900      	cmp	r1, #0
 802bbaa:	f000 80c1 	beq.w	802bd30 <_dtoa_r+0x4b8>
 802bbae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 802bbb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802bbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bbba:	f140 80b9 	bpl.w	802bd30 <_dtoa_r+0x4b8>
 802bbbe:	f1ba 0f00 	cmp.w	sl, #0
 802bbc2:	f000 80b5 	beq.w	802bd30 <_dtoa_r+0x4b8>
 802bbc6:	f1bb 0f00 	cmp.w	fp, #0
 802bbca:	dd31      	ble.n	802bc30 <_dtoa_r+0x3b8>
 802bbcc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 802bbd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 802bbd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 802bbd8:	f108 31ff 	add.w	r1, r8, #4294967295
 802bbdc:	9104      	str	r1, [sp, #16]
 802bbde:	3201      	adds	r2, #1
 802bbe0:	465c      	mov	r4, fp
 802bbe2:	ed9d 6b02 	vldr	d6, [sp, #8]
 802bbe6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 802bbea:	ee07 2a90 	vmov	s15, r2
 802bbee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802bbf2:	eea7 5b06 	vfma.f64	d5, d7, d6
 802bbf6:	ee15 2a90 	vmov	r2, s11
 802bbfa:	ec51 0b15 	vmov	r0, r1, d5
 802bbfe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 802bc02:	2c00      	cmp	r4, #0
 802bc04:	f040 8098 	bne.w	802bd38 <_dtoa_r+0x4c0>
 802bc08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 802bc0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 802bc10:	ec41 0b17 	vmov	d7, r0, r1
 802bc14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802bc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc1c:	f300 8261 	bgt.w	802c0e2 <_dtoa_r+0x86a>
 802bc20:	eeb1 7b47 	vneg.f64	d7, d7
 802bc24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802bc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc2c:	f100 80f5 	bmi.w	802be1a <_dtoa_r+0x5a2>
 802bc30:	ed8d 8b02 	vstr	d8, [sp, #8]
 802bc34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802bc36:	2a00      	cmp	r2, #0
 802bc38:	f2c0 812c 	blt.w	802be94 <_dtoa_r+0x61c>
 802bc3c:	f1b8 0f0e 	cmp.w	r8, #14
 802bc40:	f300 8128 	bgt.w	802be94 <_dtoa_r+0x61c>
 802bc44:	4b91      	ldr	r3, [pc, #580]	@ (802be8c <_dtoa_r+0x614>)
 802bc46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802bc4a:	ed93 6b00 	vldr	d6, [r3]
 802bc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bc50:	2b00      	cmp	r3, #0
 802bc52:	da03      	bge.n	802bc5c <_dtoa_r+0x3e4>
 802bc54:	f1ba 0f00 	cmp.w	sl, #0
 802bc58:	f340 80d2 	ble.w	802be00 <_dtoa_r+0x588>
 802bc5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 802bc60:	ed9d 7b02 	vldr	d7, [sp, #8]
 802bc64:	463e      	mov	r6, r7
 802bc66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802bc6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802bc6e:	ee15 3a10 	vmov	r3, s10
 802bc72:	3330      	adds	r3, #48	@ 0x30
 802bc74:	f806 3b01 	strb.w	r3, [r6], #1
 802bc78:	1bf3      	subs	r3, r6, r7
 802bc7a:	459a      	cmp	sl, r3
 802bc7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802bc80:	eea3 7b46 	vfms.f64	d7, d3, d6
 802bc84:	f040 80f8 	bne.w	802be78 <_dtoa_r+0x600>
 802bc88:	ee37 7b07 	vadd.f64	d7, d7, d7
 802bc8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc94:	f300 80dd 	bgt.w	802be52 <_dtoa_r+0x5da>
 802bc98:	eeb4 7b46 	vcmp.f64	d7, d6
 802bc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bca0:	d104      	bne.n	802bcac <_dtoa_r+0x434>
 802bca2:	ee15 3a10 	vmov	r3, s10
 802bca6:	07db      	lsls	r3, r3, #31
 802bca8:	f100 80d3 	bmi.w	802be52 <_dtoa_r+0x5da>
 802bcac:	9901      	ldr	r1, [sp, #4]
 802bcae:	4648      	mov	r0, r9
 802bcb0:	f000 fbc2 	bl	802c438 <_Bfree>
 802bcb4:	2300      	movs	r3, #0
 802bcb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802bcb8:	7033      	strb	r3, [r6, #0]
 802bcba:	f108 0301 	add.w	r3, r8, #1
 802bcbe:	6013      	str	r3, [r2, #0]
 802bcc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802bcc2:	2b00      	cmp	r3, #0
 802bcc4:	f000 8304 	beq.w	802c2d0 <_dtoa_r+0xa58>
 802bcc8:	601e      	str	r6, [r3, #0]
 802bcca:	e301      	b.n	802c2d0 <_dtoa_r+0xa58>
 802bccc:	2202      	movs	r2, #2
 802bcce:	e75e      	b.n	802bb8e <_dtoa_r+0x316>
 802bcd0:	07cc      	lsls	r4, r1, #31
 802bcd2:	d504      	bpl.n	802bcde <_dtoa_r+0x466>
 802bcd4:	ed90 6b00 	vldr	d6, [r0]
 802bcd8:	3201      	adds	r2, #1
 802bcda:	ee27 7b06 	vmul.f64	d7, d7, d6
 802bcde:	1049      	asrs	r1, r1, #1
 802bce0:	3008      	adds	r0, #8
 802bce2:	e755      	b.n	802bb90 <_dtoa_r+0x318>
 802bce4:	d022      	beq.n	802bd2c <_dtoa_r+0x4b4>
 802bce6:	f1c8 0100 	rsb	r1, r8, #0
 802bcea:	4a68      	ldr	r2, [pc, #416]	@ (802be8c <_dtoa_r+0x614>)
 802bcec:	f001 000f 	and.w	r0, r1, #15
 802bcf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802bcf4:	ed92 7b00 	vldr	d7, [r2]
 802bcf8:	ee28 7b07 	vmul.f64	d7, d8, d7
 802bcfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 802bd00:	4863      	ldr	r0, [pc, #396]	@ (802be90 <_dtoa_r+0x618>)
 802bd02:	1109      	asrs	r1, r1, #4
 802bd04:	2400      	movs	r4, #0
 802bd06:	2202      	movs	r2, #2
 802bd08:	b929      	cbnz	r1, 802bd16 <_dtoa_r+0x49e>
 802bd0a:	2c00      	cmp	r4, #0
 802bd0c:	f43f af49 	beq.w	802bba2 <_dtoa_r+0x32a>
 802bd10:	ed8d 7b02 	vstr	d7, [sp, #8]
 802bd14:	e745      	b.n	802bba2 <_dtoa_r+0x32a>
 802bd16:	07ce      	lsls	r6, r1, #31
 802bd18:	d505      	bpl.n	802bd26 <_dtoa_r+0x4ae>
 802bd1a:	ed90 6b00 	vldr	d6, [r0]
 802bd1e:	3201      	adds	r2, #1
 802bd20:	2401      	movs	r4, #1
 802bd22:	ee27 7b06 	vmul.f64	d7, d7, d6
 802bd26:	1049      	asrs	r1, r1, #1
 802bd28:	3008      	adds	r0, #8
 802bd2a:	e7ed      	b.n	802bd08 <_dtoa_r+0x490>
 802bd2c:	2202      	movs	r2, #2
 802bd2e:	e738      	b.n	802bba2 <_dtoa_r+0x32a>
 802bd30:	f8cd 8010 	str.w	r8, [sp, #16]
 802bd34:	4654      	mov	r4, sl
 802bd36:	e754      	b.n	802bbe2 <_dtoa_r+0x36a>
 802bd38:	4a54      	ldr	r2, [pc, #336]	@ (802be8c <_dtoa_r+0x614>)
 802bd3a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 802bd3e:	ed12 4b02 	vldr	d4, [r2, #-8]
 802bd42:	9a08      	ldr	r2, [sp, #32]
 802bd44:	ec41 0b17 	vmov	d7, r0, r1
 802bd48:	443c      	add	r4, r7
 802bd4a:	b34a      	cbz	r2, 802bda0 <_dtoa_r+0x528>
 802bd4c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 802bd50:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 802bd54:	463e      	mov	r6, r7
 802bd56:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802bd5a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802bd5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 802bd62:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802bd66:	ee14 2a90 	vmov	r2, s9
 802bd6a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802bd6e:	3230      	adds	r2, #48	@ 0x30
 802bd70:	ee36 6b45 	vsub.f64	d6, d6, d5
 802bd74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802bd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bd7c:	f806 2b01 	strb.w	r2, [r6], #1
 802bd80:	d438      	bmi.n	802bdf4 <_dtoa_r+0x57c>
 802bd82:	ee32 5b46 	vsub.f64	d5, d2, d6
 802bd86:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802bd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bd8e:	d462      	bmi.n	802be56 <_dtoa_r+0x5de>
 802bd90:	42a6      	cmp	r6, r4
 802bd92:	f43f af4d 	beq.w	802bc30 <_dtoa_r+0x3b8>
 802bd96:	ee27 7b03 	vmul.f64	d7, d7, d3
 802bd9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802bd9e:	e7e0      	b.n	802bd62 <_dtoa_r+0x4ea>
 802bda0:	4621      	mov	r1, r4
 802bda2:	463e      	mov	r6, r7
 802bda4:	ee27 7b04 	vmul.f64	d7, d7, d4
 802bda8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802bdac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802bdb0:	ee14 2a90 	vmov	r2, s9
 802bdb4:	3230      	adds	r2, #48	@ 0x30
 802bdb6:	f806 2b01 	strb.w	r2, [r6], #1
 802bdba:	42a6      	cmp	r6, r4
 802bdbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802bdc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 802bdc4:	d119      	bne.n	802bdfa <_dtoa_r+0x582>
 802bdc6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 802bdca:	ee37 4b05 	vadd.f64	d4, d7, d5
 802bdce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802bdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bdd6:	dc3e      	bgt.n	802be56 <_dtoa_r+0x5de>
 802bdd8:	ee35 5b47 	vsub.f64	d5, d5, d7
 802bddc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 802bde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bde4:	f57f af24 	bpl.w	802bc30 <_dtoa_r+0x3b8>
 802bde8:	460e      	mov	r6, r1
 802bdea:	3901      	subs	r1, #1
 802bdec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802bdf0:	2b30      	cmp	r3, #48	@ 0x30
 802bdf2:	d0f9      	beq.n	802bde8 <_dtoa_r+0x570>
 802bdf4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802bdf8:	e758      	b.n	802bcac <_dtoa_r+0x434>
 802bdfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 802bdfe:	e7d5      	b.n	802bdac <_dtoa_r+0x534>
 802be00:	d10b      	bne.n	802be1a <_dtoa_r+0x5a2>
 802be02:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 802be06:	ee26 6b07 	vmul.f64	d6, d6, d7
 802be0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802be0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802be12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802be16:	f2c0 8161 	blt.w	802c0dc <_dtoa_r+0x864>
 802be1a:	2400      	movs	r4, #0
 802be1c:	4625      	mov	r5, r4
 802be1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802be20:	43db      	mvns	r3, r3
 802be22:	9304      	str	r3, [sp, #16]
 802be24:	463e      	mov	r6, r7
 802be26:	f04f 0800 	mov.w	r8, #0
 802be2a:	4621      	mov	r1, r4
 802be2c:	4648      	mov	r0, r9
 802be2e:	f000 fb03 	bl	802c438 <_Bfree>
 802be32:	2d00      	cmp	r5, #0
 802be34:	d0de      	beq.n	802bdf4 <_dtoa_r+0x57c>
 802be36:	f1b8 0f00 	cmp.w	r8, #0
 802be3a:	d005      	beq.n	802be48 <_dtoa_r+0x5d0>
 802be3c:	45a8      	cmp	r8, r5
 802be3e:	d003      	beq.n	802be48 <_dtoa_r+0x5d0>
 802be40:	4641      	mov	r1, r8
 802be42:	4648      	mov	r0, r9
 802be44:	f000 faf8 	bl	802c438 <_Bfree>
 802be48:	4629      	mov	r1, r5
 802be4a:	4648      	mov	r0, r9
 802be4c:	f000 faf4 	bl	802c438 <_Bfree>
 802be50:	e7d0      	b.n	802bdf4 <_dtoa_r+0x57c>
 802be52:	f8cd 8010 	str.w	r8, [sp, #16]
 802be56:	4633      	mov	r3, r6
 802be58:	461e      	mov	r6, r3
 802be5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802be5e:	2a39      	cmp	r2, #57	@ 0x39
 802be60:	d106      	bne.n	802be70 <_dtoa_r+0x5f8>
 802be62:	429f      	cmp	r7, r3
 802be64:	d1f8      	bne.n	802be58 <_dtoa_r+0x5e0>
 802be66:	9a04      	ldr	r2, [sp, #16]
 802be68:	3201      	adds	r2, #1
 802be6a:	9204      	str	r2, [sp, #16]
 802be6c:	2230      	movs	r2, #48	@ 0x30
 802be6e:	703a      	strb	r2, [r7, #0]
 802be70:	781a      	ldrb	r2, [r3, #0]
 802be72:	3201      	adds	r2, #1
 802be74:	701a      	strb	r2, [r3, #0]
 802be76:	e7bd      	b.n	802bdf4 <_dtoa_r+0x57c>
 802be78:	ee27 7b04 	vmul.f64	d7, d7, d4
 802be7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802be80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802be84:	f47f aeef 	bne.w	802bc66 <_dtoa_r+0x3ee>
 802be88:	e710      	b.n	802bcac <_dtoa_r+0x434>
 802be8a:	bf00      	nop
 802be8c:	08031140 	.word	0x08031140
 802be90:	08031118 	.word	0x08031118
 802be94:	9908      	ldr	r1, [sp, #32]
 802be96:	2900      	cmp	r1, #0
 802be98:	f000 80e3 	beq.w	802c062 <_dtoa_r+0x7ea>
 802be9c:	9907      	ldr	r1, [sp, #28]
 802be9e:	2901      	cmp	r1, #1
 802bea0:	f300 80c8 	bgt.w	802c034 <_dtoa_r+0x7bc>
 802bea4:	2d00      	cmp	r5, #0
 802bea6:	f000 80c1 	beq.w	802c02c <_dtoa_r+0x7b4>
 802beaa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802beae:	9e05      	ldr	r6, [sp, #20]
 802beb0:	461c      	mov	r4, r3
 802beb2:	9304      	str	r3, [sp, #16]
 802beb4:	9b05      	ldr	r3, [sp, #20]
 802beb6:	4413      	add	r3, r2
 802beb8:	9305      	str	r3, [sp, #20]
 802beba:	9b06      	ldr	r3, [sp, #24]
 802bebc:	2101      	movs	r1, #1
 802bebe:	4413      	add	r3, r2
 802bec0:	4648      	mov	r0, r9
 802bec2:	9306      	str	r3, [sp, #24]
 802bec4:	f000 fb6c 	bl	802c5a0 <__i2b>
 802bec8:	9b04      	ldr	r3, [sp, #16]
 802beca:	4605      	mov	r5, r0
 802becc:	b166      	cbz	r6, 802bee8 <_dtoa_r+0x670>
 802bece:	9a06      	ldr	r2, [sp, #24]
 802bed0:	2a00      	cmp	r2, #0
 802bed2:	dd09      	ble.n	802bee8 <_dtoa_r+0x670>
 802bed4:	42b2      	cmp	r2, r6
 802bed6:	9905      	ldr	r1, [sp, #20]
 802bed8:	bfa8      	it	ge
 802beda:	4632      	movge	r2, r6
 802bedc:	1a89      	subs	r1, r1, r2
 802bede:	9105      	str	r1, [sp, #20]
 802bee0:	9906      	ldr	r1, [sp, #24]
 802bee2:	1ab6      	subs	r6, r6, r2
 802bee4:	1a8a      	subs	r2, r1, r2
 802bee6:	9206      	str	r2, [sp, #24]
 802bee8:	b1fb      	cbz	r3, 802bf2a <_dtoa_r+0x6b2>
 802beea:	9a08      	ldr	r2, [sp, #32]
 802beec:	2a00      	cmp	r2, #0
 802beee:	f000 80bc 	beq.w	802c06a <_dtoa_r+0x7f2>
 802bef2:	b19c      	cbz	r4, 802bf1c <_dtoa_r+0x6a4>
 802bef4:	4629      	mov	r1, r5
 802bef6:	4622      	mov	r2, r4
 802bef8:	4648      	mov	r0, r9
 802befa:	930b      	str	r3, [sp, #44]	@ 0x2c
 802befc:	f000 fc10 	bl	802c720 <__pow5mult>
 802bf00:	9a01      	ldr	r2, [sp, #4]
 802bf02:	4601      	mov	r1, r0
 802bf04:	4605      	mov	r5, r0
 802bf06:	4648      	mov	r0, r9
 802bf08:	f000 fb60 	bl	802c5cc <__multiply>
 802bf0c:	9901      	ldr	r1, [sp, #4]
 802bf0e:	9004      	str	r0, [sp, #16]
 802bf10:	4648      	mov	r0, r9
 802bf12:	f000 fa91 	bl	802c438 <_Bfree>
 802bf16:	9a04      	ldr	r2, [sp, #16]
 802bf18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802bf1a:	9201      	str	r2, [sp, #4]
 802bf1c:	1b1a      	subs	r2, r3, r4
 802bf1e:	d004      	beq.n	802bf2a <_dtoa_r+0x6b2>
 802bf20:	9901      	ldr	r1, [sp, #4]
 802bf22:	4648      	mov	r0, r9
 802bf24:	f000 fbfc 	bl	802c720 <__pow5mult>
 802bf28:	9001      	str	r0, [sp, #4]
 802bf2a:	2101      	movs	r1, #1
 802bf2c:	4648      	mov	r0, r9
 802bf2e:	f000 fb37 	bl	802c5a0 <__i2b>
 802bf32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bf34:	4604      	mov	r4, r0
 802bf36:	2b00      	cmp	r3, #0
 802bf38:	f000 81d0 	beq.w	802c2dc <_dtoa_r+0xa64>
 802bf3c:	461a      	mov	r2, r3
 802bf3e:	4601      	mov	r1, r0
 802bf40:	4648      	mov	r0, r9
 802bf42:	f000 fbed 	bl	802c720 <__pow5mult>
 802bf46:	9b07      	ldr	r3, [sp, #28]
 802bf48:	2b01      	cmp	r3, #1
 802bf4a:	4604      	mov	r4, r0
 802bf4c:	f300 8095 	bgt.w	802c07a <_dtoa_r+0x802>
 802bf50:	9b02      	ldr	r3, [sp, #8]
 802bf52:	2b00      	cmp	r3, #0
 802bf54:	f040 808b 	bne.w	802c06e <_dtoa_r+0x7f6>
 802bf58:	9b03      	ldr	r3, [sp, #12]
 802bf5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802bf5e:	2a00      	cmp	r2, #0
 802bf60:	f040 8087 	bne.w	802c072 <_dtoa_r+0x7fa>
 802bf64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 802bf68:	0d12      	lsrs	r2, r2, #20
 802bf6a:	0512      	lsls	r2, r2, #20
 802bf6c:	2a00      	cmp	r2, #0
 802bf6e:	f000 8082 	beq.w	802c076 <_dtoa_r+0x7fe>
 802bf72:	9b05      	ldr	r3, [sp, #20]
 802bf74:	3301      	adds	r3, #1
 802bf76:	9305      	str	r3, [sp, #20]
 802bf78:	9b06      	ldr	r3, [sp, #24]
 802bf7a:	3301      	adds	r3, #1
 802bf7c:	9306      	str	r3, [sp, #24]
 802bf7e:	2301      	movs	r3, #1
 802bf80:	930b      	str	r3, [sp, #44]	@ 0x2c
 802bf82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bf84:	2b00      	cmp	r3, #0
 802bf86:	f000 81af 	beq.w	802c2e8 <_dtoa_r+0xa70>
 802bf8a:	6922      	ldr	r2, [r4, #16]
 802bf8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802bf90:	6910      	ldr	r0, [r2, #16]
 802bf92:	f000 fab9 	bl	802c508 <__hi0bits>
 802bf96:	f1c0 0020 	rsb	r0, r0, #32
 802bf9a:	9b06      	ldr	r3, [sp, #24]
 802bf9c:	4418      	add	r0, r3
 802bf9e:	f010 001f 	ands.w	r0, r0, #31
 802bfa2:	d076      	beq.n	802c092 <_dtoa_r+0x81a>
 802bfa4:	f1c0 0220 	rsb	r2, r0, #32
 802bfa8:	2a04      	cmp	r2, #4
 802bfaa:	dd69      	ble.n	802c080 <_dtoa_r+0x808>
 802bfac:	9b05      	ldr	r3, [sp, #20]
 802bfae:	f1c0 001c 	rsb	r0, r0, #28
 802bfb2:	4403      	add	r3, r0
 802bfb4:	9305      	str	r3, [sp, #20]
 802bfb6:	9b06      	ldr	r3, [sp, #24]
 802bfb8:	4406      	add	r6, r0
 802bfba:	4403      	add	r3, r0
 802bfbc:	9306      	str	r3, [sp, #24]
 802bfbe:	9b05      	ldr	r3, [sp, #20]
 802bfc0:	2b00      	cmp	r3, #0
 802bfc2:	dd05      	ble.n	802bfd0 <_dtoa_r+0x758>
 802bfc4:	9901      	ldr	r1, [sp, #4]
 802bfc6:	461a      	mov	r2, r3
 802bfc8:	4648      	mov	r0, r9
 802bfca:	f000 fc03 	bl	802c7d4 <__lshift>
 802bfce:	9001      	str	r0, [sp, #4]
 802bfd0:	9b06      	ldr	r3, [sp, #24]
 802bfd2:	2b00      	cmp	r3, #0
 802bfd4:	dd05      	ble.n	802bfe2 <_dtoa_r+0x76a>
 802bfd6:	4621      	mov	r1, r4
 802bfd8:	461a      	mov	r2, r3
 802bfda:	4648      	mov	r0, r9
 802bfdc:	f000 fbfa 	bl	802c7d4 <__lshift>
 802bfe0:	4604      	mov	r4, r0
 802bfe2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802bfe4:	2b00      	cmp	r3, #0
 802bfe6:	d056      	beq.n	802c096 <_dtoa_r+0x81e>
 802bfe8:	9801      	ldr	r0, [sp, #4]
 802bfea:	4621      	mov	r1, r4
 802bfec:	f000 fc5e 	bl	802c8ac <__mcmp>
 802bff0:	2800      	cmp	r0, #0
 802bff2:	da50      	bge.n	802c096 <_dtoa_r+0x81e>
 802bff4:	f108 33ff 	add.w	r3, r8, #4294967295
 802bff8:	9304      	str	r3, [sp, #16]
 802bffa:	9901      	ldr	r1, [sp, #4]
 802bffc:	2300      	movs	r3, #0
 802bffe:	220a      	movs	r2, #10
 802c000:	4648      	mov	r0, r9
 802c002:	f000 fa3b 	bl	802c47c <__multadd>
 802c006:	9b08      	ldr	r3, [sp, #32]
 802c008:	9001      	str	r0, [sp, #4]
 802c00a:	2b00      	cmp	r3, #0
 802c00c:	f000 816e 	beq.w	802c2ec <_dtoa_r+0xa74>
 802c010:	4629      	mov	r1, r5
 802c012:	2300      	movs	r3, #0
 802c014:	220a      	movs	r2, #10
 802c016:	4648      	mov	r0, r9
 802c018:	f000 fa30 	bl	802c47c <__multadd>
 802c01c:	f1bb 0f00 	cmp.w	fp, #0
 802c020:	4605      	mov	r5, r0
 802c022:	dc64      	bgt.n	802c0ee <_dtoa_r+0x876>
 802c024:	9b07      	ldr	r3, [sp, #28]
 802c026:	2b02      	cmp	r3, #2
 802c028:	dc3e      	bgt.n	802c0a8 <_dtoa_r+0x830>
 802c02a:	e060      	b.n	802c0ee <_dtoa_r+0x876>
 802c02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802c02e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802c032:	e73c      	b.n	802beae <_dtoa_r+0x636>
 802c034:	f10a 34ff 	add.w	r4, sl, #4294967295
 802c038:	42a3      	cmp	r3, r4
 802c03a:	bfbf      	itttt	lt
 802c03c:	1ae2      	sublt	r2, r4, r3
 802c03e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802c040:	189b      	addlt	r3, r3, r2
 802c042:	930a      	strlt	r3, [sp, #40]	@ 0x28
 802c044:	bfae      	itee	ge
 802c046:	1b1c      	subge	r4, r3, r4
 802c048:	4623      	movlt	r3, r4
 802c04a:	2400      	movlt	r4, #0
 802c04c:	f1ba 0f00 	cmp.w	sl, #0
 802c050:	bfb5      	itete	lt
 802c052:	9a05      	ldrlt	r2, [sp, #20]
 802c054:	9e05      	ldrge	r6, [sp, #20]
 802c056:	eba2 060a 	sublt.w	r6, r2, sl
 802c05a:	4652      	movge	r2, sl
 802c05c:	bfb8      	it	lt
 802c05e:	2200      	movlt	r2, #0
 802c060:	e727      	b.n	802beb2 <_dtoa_r+0x63a>
 802c062:	9e05      	ldr	r6, [sp, #20]
 802c064:	9d08      	ldr	r5, [sp, #32]
 802c066:	461c      	mov	r4, r3
 802c068:	e730      	b.n	802becc <_dtoa_r+0x654>
 802c06a:	461a      	mov	r2, r3
 802c06c:	e758      	b.n	802bf20 <_dtoa_r+0x6a8>
 802c06e:	2300      	movs	r3, #0
 802c070:	e786      	b.n	802bf80 <_dtoa_r+0x708>
 802c072:	9b02      	ldr	r3, [sp, #8]
 802c074:	e784      	b.n	802bf80 <_dtoa_r+0x708>
 802c076:	920b      	str	r2, [sp, #44]	@ 0x2c
 802c078:	e783      	b.n	802bf82 <_dtoa_r+0x70a>
 802c07a:	2300      	movs	r3, #0
 802c07c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802c07e:	e784      	b.n	802bf8a <_dtoa_r+0x712>
 802c080:	d09d      	beq.n	802bfbe <_dtoa_r+0x746>
 802c082:	9b05      	ldr	r3, [sp, #20]
 802c084:	321c      	adds	r2, #28
 802c086:	4413      	add	r3, r2
 802c088:	9305      	str	r3, [sp, #20]
 802c08a:	9b06      	ldr	r3, [sp, #24]
 802c08c:	4416      	add	r6, r2
 802c08e:	4413      	add	r3, r2
 802c090:	e794      	b.n	802bfbc <_dtoa_r+0x744>
 802c092:	4602      	mov	r2, r0
 802c094:	e7f5      	b.n	802c082 <_dtoa_r+0x80a>
 802c096:	f1ba 0f00 	cmp.w	sl, #0
 802c09a:	f8cd 8010 	str.w	r8, [sp, #16]
 802c09e:	46d3      	mov	fp, sl
 802c0a0:	dc21      	bgt.n	802c0e6 <_dtoa_r+0x86e>
 802c0a2:	9b07      	ldr	r3, [sp, #28]
 802c0a4:	2b02      	cmp	r3, #2
 802c0a6:	dd1e      	ble.n	802c0e6 <_dtoa_r+0x86e>
 802c0a8:	f1bb 0f00 	cmp.w	fp, #0
 802c0ac:	f47f aeb7 	bne.w	802be1e <_dtoa_r+0x5a6>
 802c0b0:	4621      	mov	r1, r4
 802c0b2:	465b      	mov	r3, fp
 802c0b4:	2205      	movs	r2, #5
 802c0b6:	4648      	mov	r0, r9
 802c0b8:	f000 f9e0 	bl	802c47c <__multadd>
 802c0bc:	4601      	mov	r1, r0
 802c0be:	4604      	mov	r4, r0
 802c0c0:	9801      	ldr	r0, [sp, #4]
 802c0c2:	f000 fbf3 	bl	802c8ac <__mcmp>
 802c0c6:	2800      	cmp	r0, #0
 802c0c8:	f77f aea9 	ble.w	802be1e <_dtoa_r+0x5a6>
 802c0cc:	463e      	mov	r6, r7
 802c0ce:	2331      	movs	r3, #49	@ 0x31
 802c0d0:	f806 3b01 	strb.w	r3, [r6], #1
 802c0d4:	9b04      	ldr	r3, [sp, #16]
 802c0d6:	3301      	adds	r3, #1
 802c0d8:	9304      	str	r3, [sp, #16]
 802c0da:	e6a4      	b.n	802be26 <_dtoa_r+0x5ae>
 802c0dc:	f8cd 8010 	str.w	r8, [sp, #16]
 802c0e0:	4654      	mov	r4, sl
 802c0e2:	4625      	mov	r5, r4
 802c0e4:	e7f2      	b.n	802c0cc <_dtoa_r+0x854>
 802c0e6:	9b08      	ldr	r3, [sp, #32]
 802c0e8:	2b00      	cmp	r3, #0
 802c0ea:	f000 8103 	beq.w	802c2f4 <_dtoa_r+0xa7c>
 802c0ee:	2e00      	cmp	r6, #0
 802c0f0:	dd05      	ble.n	802c0fe <_dtoa_r+0x886>
 802c0f2:	4629      	mov	r1, r5
 802c0f4:	4632      	mov	r2, r6
 802c0f6:	4648      	mov	r0, r9
 802c0f8:	f000 fb6c 	bl	802c7d4 <__lshift>
 802c0fc:	4605      	mov	r5, r0
 802c0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802c100:	2b00      	cmp	r3, #0
 802c102:	d058      	beq.n	802c1b6 <_dtoa_r+0x93e>
 802c104:	6869      	ldr	r1, [r5, #4]
 802c106:	4648      	mov	r0, r9
 802c108:	f000 f956 	bl	802c3b8 <_Balloc>
 802c10c:	4606      	mov	r6, r0
 802c10e:	b928      	cbnz	r0, 802c11c <_dtoa_r+0x8a4>
 802c110:	4b82      	ldr	r3, [pc, #520]	@ (802c31c <_dtoa_r+0xaa4>)
 802c112:	4602      	mov	r2, r0
 802c114:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802c118:	f7ff bbc7 	b.w	802b8aa <_dtoa_r+0x32>
 802c11c:	692a      	ldr	r2, [r5, #16]
 802c11e:	3202      	adds	r2, #2
 802c120:	0092      	lsls	r2, r2, #2
 802c122:	f105 010c 	add.w	r1, r5, #12
 802c126:	300c      	adds	r0, #12
 802c128:	f7ff fab1 	bl	802b68e <memcpy>
 802c12c:	2201      	movs	r2, #1
 802c12e:	4631      	mov	r1, r6
 802c130:	4648      	mov	r0, r9
 802c132:	f000 fb4f 	bl	802c7d4 <__lshift>
 802c136:	1c7b      	adds	r3, r7, #1
 802c138:	9305      	str	r3, [sp, #20]
 802c13a:	eb07 030b 	add.w	r3, r7, fp
 802c13e:	9309      	str	r3, [sp, #36]	@ 0x24
 802c140:	9b02      	ldr	r3, [sp, #8]
 802c142:	f003 0301 	and.w	r3, r3, #1
 802c146:	46a8      	mov	r8, r5
 802c148:	9308      	str	r3, [sp, #32]
 802c14a:	4605      	mov	r5, r0
 802c14c:	9b05      	ldr	r3, [sp, #20]
 802c14e:	9801      	ldr	r0, [sp, #4]
 802c150:	4621      	mov	r1, r4
 802c152:	f103 3bff 	add.w	fp, r3, #4294967295
 802c156:	f7ff fb05 	bl	802b764 <quorem>
 802c15a:	4641      	mov	r1, r8
 802c15c:	9002      	str	r0, [sp, #8]
 802c15e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802c162:	9801      	ldr	r0, [sp, #4]
 802c164:	f000 fba2 	bl	802c8ac <__mcmp>
 802c168:	462a      	mov	r2, r5
 802c16a:	9006      	str	r0, [sp, #24]
 802c16c:	4621      	mov	r1, r4
 802c16e:	4648      	mov	r0, r9
 802c170:	f000 fbb8 	bl	802c8e4 <__mdiff>
 802c174:	68c2      	ldr	r2, [r0, #12]
 802c176:	4606      	mov	r6, r0
 802c178:	b9fa      	cbnz	r2, 802c1ba <_dtoa_r+0x942>
 802c17a:	4601      	mov	r1, r0
 802c17c:	9801      	ldr	r0, [sp, #4]
 802c17e:	f000 fb95 	bl	802c8ac <__mcmp>
 802c182:	4602      	mov	r2, r0
 802c184:	4631      	mov	r1, r6
 802c186:	4648      	mov	r0, r9
 802c188:	920a      	str	r2, [sp, #40]	@ 0x28
 802c18a:	f000 f955 	bl	802c438 <_Bfree>
 802c18e:	9b07      	ldr	r3, [sp, #28]
 802c190:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802c192:	9e05      	ldr	r6, [sp, #20]
 802c194:	ea43 0102 	orr.w	r1, r3, r2
 802c198:	9b08      	ldr	r3, [sp, #32]
 802c19a:	4319      	orrs	r1, r3
 802c19c:	d10f      	bne.n	802c1be <_dtoa_r+0x946>
 802c19e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802c1a2:	d028      	beq.n	802c1f6 <_dtoa_r+0x97e>
 802c1a4:	9b06      	ldr	r3, [sp, #24]
 802c1a6:	2b00      	cmp	r3, #0
 802c1a8:	dd02      	ble.n	802c1b0 <_dtoa_r+0x938>
 802c1aa:	9b02      	ldr	r3, [sp, #8]
 802c1ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 802c1b0:	f88b a000 	strb.w	sl, [fp]
 802c1b4:	e639      	b.n	802be2a <_dtoa_r+0x5b2>
 802c1b6:	4628      	mov	r0, r5
 802c1b8:	e7bd      	b.n	802c136 <_dtoa_r+0x8be>
 802c1ba:	2201      	movs	r2, #1
 802c1bc:	e7e2      	b.n	802c184 <_dtoa_r+0x90c>
 802c1be:	9b06      	ldr	r3, [sp, #24]
 802c1c0:	2b00      	cmp	r3, #0
 802c1c2:	db04      	blt.n	802c1ce <_dtoa_r+0x956>
 802c1c4:	9907      	ldr	r1, [sp, #28]
 802c1c6:	430b      	orrs	r3, r1
 802c1c8:	9908      	ldr	r1, [sp, #32]
 802c1ca:	430b      	orrs	r3, r1
 802c1cc:	d120      	bne.n	802c210 <_dtoa_r+0x998>
 802c1ce:	2a00      	cmp	r2, #0
 802c1d0:	ddee      	ble.n	802c1b0 <_dtoa_r+0x938>
 802c1d2:	9901      	ldr	r1, [sp, #4]
 802c1d4:	2201      	movs	r2, #1
 802c1d6:	4648      	mov	r0, r9
 802c1d8:	f000 fafc 	bl	802c7d4 <__lshift>
 802c1dc:	4621      	mov	r1, r4
 802c1de:	9001      	str	r0, [sp, #4]
 802c1e0:	f000 fb64 	bl	802c8ac <__mcmp>
 802c1e4:	2800      	cmp	r0, #0
 802c1e6:	dc03      	bgt.n	802c1f0 <_dtoa_r+0x978>
 802c1e8:	d1e2      	bne.n	802c1b0 <_dtoa_r+0x938>
 802c1ea:	f01a 0f01 	tst.w	sl, #1
 802c1ee:	d0df      	beq.n	802c1b0 <_dtoa_r+0x938>
 802c1f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802c1f4:	d1d9      	bne.n	802c1aa <_dtoa_r+0x932>
 802c1f6:	2339      	movs	r3, #57	@ 0x39
 802c1f8:	f88b 3000 	strb.w	r3, [fp]
 802c1fc:	4633      	mov	r3, r6
 802c1fe:	461e      	mov	r6, r3
 802c200:	3b01      	subs	r3, #1
 802c202:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802c206:	2a39      	cmp	r2, #57	@ 0x39
 802c208:	d053      	beq.n	802c2b2 <_dtoa_r+0xa3a>
 802c20a:	3201      	adds	r2, #1
 802c20c:	701a      	strb	r2, [r3, #0]
 802c20e:	e60c      	b.n	802be2a <_dtoa_r+0x5b2>
 802c210:	2a00      	cmp	r2, #0
 802c212:	dd07      	ble.n	802c224 <_dtoa_r+0x9ac>
 802c214:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802c218:	d0ed      	beq.n	802c1f6 <_dtoa_r+0x97e>
 802c21a:	f10a 0301 	add.w	r3, sl, #1
 802c21e:	f88b 3000 	strb.w	r3, [fp]
 802c222:	e602      	b.n	802be2a <_dtoa_r+0x5b2>
 802c224:	9b05      	ldr	r3, [sp, #20]
 802c226:	9a05      	ldr	r2, [sp, #20]
 802c228:	f803 ac01 	strb.w	sl, [r3, #-1]
 802c22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c22e:	4293      	cmp	r3, r2
 802c230:	d029      	beq.n	802c286 <_dtoa_r+0xa0e>
 802c232:	9901      	ldr	r1, [sp, #4]
 802c234:	2300      	movs	r3, #0
 802c236:	220a      	movs	r2, #10
 802c238:	4648      	mov	r0, r9
 802c23a:	f000 f91f 	bl	802c47c <__multadd>
 802c23e:	45a8      	cmp	r8, r5
 802c240:	9001      	str	r0, [sp, #4]
 802c242:	f04f 0300 	mov.w	r3, #0
 802c246:	f04f 020a 	mov.w	r2, #10
 802c24a:	4641      	mov	r1, r8
 802c24c:	4648      	mov	r0, r9
 802c24e:	d107      	bne.n	802c260 <_dtoa_r+0x9e8>
 802c250:	f000 f914 	bl	802c47c <__multadd>
 802c254:	4680      	mov	r8, r0
 802c256:	4605      	mov	r5, r0
 802c258:	9b05      	ldr	r3, [sp, #20]
 802c25a:	3301      	adds	r3, #1
 802c25c:	9305      	str	r3, [sp, #20]
 802c25e:	e775      	b.n	802c14c <_dtoa_r+0x8d4>
 802c260:	f000 f90c 	bl	802c47c <__multadd>
 802c264:	4629      	mov	r1, r5
 802c266:	4680      	mov	r8, r0
 802c268:	2300      	movs	r3, #0
 802c26a:	220a      	movs	r2, #10
 802c26c:	4648      	mov	r0, r9
 802c26e:	f000 f905 	bl	802c47c <__multadd>
 802c272:	4605      	mov	r5, r0
 802c274:	e7f0      	b.n	802c258 <_dtoa_r+0x9e0>
 802c276:	f1bb 0f00 	cmp.w	fp, #0
 802c27a:	bfcc      	ite	gt
 802c27c:	465e      	movgt	r6, fp
 802c27e:	2601      	movle	r6, #1
 802c280:	443e      	add	r6, r7
 802c282:	f04f 0800 	mov.w	r8, #0
 802c286:	9901      	ldr	r1, [sp, #4]
 802c288:	2201      	movs	r2, #1
 802c28a:	4648      	mov	r0, r9
 802c28c:	f000 faa2 	bl	802c7d4 <__lshift>
 802c290:	4621      	mov	r1, r4
 802c292:	9001      	str	r0, [sp, #4]
 802c294:	f000 fb0a 	bl	802c8ac <__mcmp>
 802c298:	2800      	cmp	r0, #0
 802c29a:	dcaf      	bgt.n	802c1fc <_dtoa_r+0x984>
 802c29c:	d102      	bne.n	802c2a4 <_dtoa_r+0xa2c>
 802c29e:	f01a 0f01 	tst.w	sl, #1
 802c2a2:	d1ab      	bne.n	802c1fc <_dtoa_r+0x984>
 802c2a4:	4633      	mov	r3, r6
 802c2a6:	461e      	mov	r6, r3
 802c2a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802c2ac:	2a30      	cmp	r2, #48	@ 0x30
 802c2ae:	d0fa      	beq.n	802c2a6 <_dtoa_r+0xa2e>
 802c2b0:	e5bb      	b.n	802be2a <_dtoa_r+0x5b2>
 802c2b2:	429f      	cmp	r7, r3
 802c2b4:	d1a3      	bne.n	802c1fe <_dtoa_r+0x986>
 802c2b6:	9b04      	ldr	r3, [sp, #16]
 802c2b8:	3301      	adds	r3, #1
 802c2ba:	9304      	str	r3, [sp, #16]
 802c2bc:	2331      	movs	r3, #49	@ 0x31
 802c2be:	703b      	strb	r3, [r7, #0]
 802c2c0:	e5b3      	b.n	802be2a <_dtoa_r+0x5b2>
 802c2c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802c2c4:	4f16      	ldr	r7, [pc, #88]	@ (802c320 <_dtoa_r+0xaa8>)
 802c2c6:	b11b      	cbz	r3, 802c2d0 <_dtoa_r+0xa58>
 802c2c8:	f107 0308 	add.w	r3, r7, #8
 802c2cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802c2ce:	6013      	str	r3, [r2, #0]
 802c2d0:	4638      	mov	r0, r7
 802c2d2:	b011      	add	sp, #68	@ 0x44
 802c2d4:	ecbd 8b02 	vpop	{d8}
 802c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c2dc:	9b07      	ldr	r3, [sp, #28]
 802c2de:	2b01      	cmp	r3, #1
 802c2e0:	f77f ae36 	ble.w	802bf50 <_dtoa_r+0x6d8>
 802c2e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c2e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802c2e8:	2001      	movs	r0, #1
 802c2ea:	e656      	b.n	802bf9a <_dtoa_r+0x722>
 802c2ec:	f1bb 0f00 	cmp.w	fp, #0
 802c2f0:	f77f aed7 	ble.w	802c0a2 <_dtoa_r+0x82a>
 802c2f4:	463e      	mov	r6, r7
 802c2f6:	9801      	ldr	r0, [sp, #4]
 802c2f8:	4621      	mov	r1, r4
 802c2fa:	f7ff fa33 	bl	802b764 <quorem>
 802c2fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802c302:	f806 ab01 	strb.w	sl, [r6], #1
 802c306:	1bf2      	subs	r2, r6, r7
 802c308:	4593      	cmp	fp, r2
 802c30a:	ddb4      	ble.n	802c276 <_dtoa_r+0x9fe>
 802c30c:	9901      	ldr	r1, [sp, #4]
 802c30e:	2300      	movs	r3, #0
 802c310:	220a      	movs	r2, #10
 802c312:	4648      	mov	r0, r9
 802c314:	f000 f8b2 	bl	802c47c <__multadd>
 802c318:	9001      	str	r0, [sp, #4]
 802c31a:	e7ec      	b.n	802c2f6 <_dtoa_r+0xa7e>
 802c31c:	0803109b 	.word	0x0803109b
 802c320:	0803101f 	.word	0x0803101f

0802c324 <_free_r>:
 802c324:	b538      	push	{r3, r4, r5, lr}
 802c326:	4605      	mov	r5, r0
 802c328:	2900      	cmp	r1, #0
 802c32a:	d041      	beq.n	802c3b0 <_free_r+0x8c>
 802c32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c330:	1f0c      	subs	r4, r1, #4
 802c332:	2b00      	cmp	r3, #0
 802c334:	bfb8      	it	lt
 802c336:	18e4      	addlt	r4, r4, r3
 802c338:	f7fe f848 	bl	802a3cc <__malloc_lock>
 802c33c:	4a1d      	ldr	r2, [pc, #116]	@ (802c3b4 <_free_r+0x90>)
 802c33e:	6813      	ldr	r3, [r2, #0]
 802c340:	b933      	cbnz	r3, 802c350 <_free_r+0x2c>
 802c342:	6063      	str	r3, [r4, #4]
 802c344:	6014      	str	r4, [r2, #0]
 802c346:	4628      	mov	r0, r5
 802c348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c34c:	f7fe b844 	b.w	802a3d8 <__malloc_unlock>
 802c350:	42a3      	cmp	r3, r4
 802c352:	d908      	bls.n	802c366 <_free_r+0x42>
 802c354:	6820      	ldr	r0, [r4, #0]
 802c356:	1821      	adds	r1, r4, r0
 802c358:	428b      	cmp	r3, r1
 802c35a:	bf01      	itttt	eq
 802c35c:	6819      	ldreq	r1, [r3, #0]
 802c35e:	685b      	ldreq	r3, [r3, #4]
 802c360:	1809      	addeq	r1, r1, r0
 802c362:	6021      	streq	r1, [r4, #0]
 802c364:	e7ed      	b.n	802c342 <_free_r+0x1e>
 802c366:	461a      	mov	r2, r3
 802c368:	685b      	ldr	r3, [r3, #4]
 802c36a:	b10b      	cbz	r3, 802c370 <_free_r+0x4c>
 802c36c:	42a3      	cmp	r3, r4
 802c36e:	d9fa      	bls.n	802c366 <_free_r+0x42>
 802c370:	6811      	ldr	r1, [r2, #0]
 802c372:	1850      	adds	r0, r2, r1
 802c374:	42a0      	cmp	r0, r4
 802c376:	d10b      	bne.n	802c390 <_free_r+0x6c>
 802c378:	6820      	ldr	r0, [r4, #0]
 802c37a:	4401      	add	r1, r0
 802c37c:	1850      	adds	r0, r2, r1
 802c37e:	4283      	cmp	r3, r0
 802c380:	6011      	str	r1, [r2, #0]
 802c382:	d1e0      	bne.n	802c346 <_free_r+0x22>
 802c384:	6818      	ldr	r0, [r3, #0]
 802c386:	685b      	ldr	r3, [r3, #4]
 802c388:	6053      	str	r3, [r2, #4]
 802c38a:	4408      	add	r0, r1
 802c38c:	6010      	str	r0, [r2, #0]
 802c38e:	e7da      	b.n	802c346 <_free_r+0x22>
 802c390:	d902      	bls.n	802c398 <_free_r+0x74>
 802c392:	230c      	movs	r3, #12
 802c394:	602b      	str	r3, [r5, #0]
 802c396:	e7d6      	b.n	802c346 <_free_r+0x22>
 802c398:	6820      	ldr	r0, [r4, #0]
 802c39a:	1821      	adds	r1, r4, r0
 802c39c:	428b      	cmp	r3, r1
 802c39e:	bf04      	itt	eq
 802c3a0:	6819      	ldreq	r1, [r3, #0]
 802c3a2:	685b      	ldreq	r3, [r3, #4]
 802c3a4:	6063      	str	r3, [r4, #4]
 802c3a6:	bf04      	itt	eq
 802c3a8:	1809      	addeq	r1, r1, r0
 802c3aa:	6021      	streq	r1, [r4, #0]
 802c3ac:	6054      	str	r4, [r2, #4]
 802c3ae:	e7ca      	b.n	802c346 <_free_r+0x22>
 802c3b0:	bd38      	pop	{r3, r4, r5, pc}
 802c3b2:	bf00      	nop
 802c3b4:	240291b4 	.word	0x240291b4

0802c3b8 <_Balloc>:
 802c3b8:	b570      	push	{r4, r5, r6, lr}
 802c3ba:	69c6      	ldr	r6, [r0, #28]
 802c3bc:	4604      	mov	r4, r0
 802c3be:	460d      	mov	r5, r1
 802c3c0:	b976      	cbnz	r6, 802c3e0 <_Balloc+0x28>
 802c3c2:	2010      	movs	r0, #16
 802c3c4:	f7fd ff50 	bl	802a268 <malloc>
 802c3c8:	4602      	mov	r2, r0
 802c3ca:	61e0      	str	r0, [r4, #28]
 802c3cc:	b920      	cbnz	r0, 802c3d8 <_Balloc+0x20>
 802c3ce:	4b18      	ldr	r3, [pc, #96]	@ (802c430 <_Balloc+0x78>)
 802c3d0:	4818      	ldr	r0, [pc, #96]	@ (802c434 <_Balloc+0x7c>)
 802c3d2:	216b      	movs	r1, #107	@ 0x6b
 802c3d4:	f7fd ff24 	bl	802a220 <__assert_func>
 802c3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c3dc:	6006      	str	r6, [r0, #0]
 802c3de:	60c6      	str	r6, [r0, #12]
 802c3e0:	69e6      	ldr	r6, [r4, #28]
 802c3e2:	68f3      	ldr	r3, [r6, #12]
 802c3e4:	b183      	cbz	r3, 802c408 <_Balloc+0x50>
 802c3e6:	69e3      	ldr	r3, [r4, #28]
 802c3e8:	68db      	ldr	r3, [r3, #12]
 802c3ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802c3ee:	b9b8      	cbnz	r0, 802c420 <_Balloc+0x68>
 802c3f0:	2101      	movs	r1, #1
 802c3f2:	fa01 f605 	lsl.w	r6, r1, r5
 802c3f6:	1d72      	adds	r2, r6, #5
 802c3f8:	0092      	lsls	r2, r2, #2
 802c3fa:	4620      	mov	r0, r4
 802c3fc:	f000 fbe2 	bl	802cbc4 <_calloc_r>
 802c400:	b160      	cbz	r0, 802c41c <_Balloc+0x64>
 802c402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802c406:	e00e      	b.n	802c426 <_Balloc+0x6e>
 802c408:	2221      	movs	r2, #33	@ 0x21
 802c40a:	2104      	movs	r1, #4
 802c40c:	4620      	mov	r0, r4
 802c40e:	f000 fbd9 	bl	802cbc4 <_calloc_r>
 802c412:	69e3      	ldr	r3, [r4, #28]
 802c414:	60f0      	str	r0, [r6, #12]
 802c416:	68db      	ldr	r3, [r3, #12]
 802c418:	2b00      	cmp	r3, #0
 802c41a:	d1e4      	bne.n	802c3e6 <_Balloc+0x2e>
 802c41c:	2000      	movs	r0, #0
 802c41e:	bd70      	pop	{r4, r5, r6, pc}
 802c420:	6802      	ldr	r2, [r0, #0]
 802c422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802c426:	2300      	movs	r3, #0
 802c428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c42c:	e7f7      	b.n	802c41e <_Balloc+0x66>
 802c42e:	bf00      	nop
 802c430:	0803102c 	.word	0x0803102c
 802c434:	080310ac 	.word	0x080310ac

0802c438 <_Bfree>:
 802c438:	b570      	push	{r4, r5, r6, lr}
 802c43a:	69c6      	ldr	r6, [r0, #28]
 802c43c:	4605      	mov	r5, r0
 802c43e:	460c      	mov	r4, r1
 802c440:	b976      	cbnz	r6, 802c460 <_Bfree+0x28>
 802c442:	2010      	movs	r0, #16
 802c444:	f7fd ff10 	bl	802a268 <malloc>
 802c448:	4602      	mov	r2, r0
 802c44a:	61e8      	str	r0, [r5, #28]
 802c44c:	b920      	cbnz	r0, 802c458 <_Bfree+0x20>
 802c44e:	4b09      	ldr	r3, [pc, #36]	@ (802c474 <_Bfree+0x3c>)
 802c450:	4809      	ldr	r0, [pc, #36]	@ (802c478 <_Bfree+0x40>)
 802c452:	218f      	movs	r1, #143	@ 0x8f
 802c454:	f7fd fee4 	bl	802a220 <__assert_func>
 802c458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c45c:	6006      	str	r6, [r0, #0]
 802c45e:	60c6      	str	r6, [r0, #12]
 802c460:	b13c      	cbz	r4, 802c472 <_Bfree+0x3a>
 802c462:	69eb      	ldr	r3, [r5, #28]
 802c464:	6862      	ldr	r2, [r4, #4]
 802c466:	68db      	ldr	r3, [r3, #12]
 802c468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802c46c:	6021      	str	r1, [r4, #0]
 802c46e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802c472:	bd70      	pop	{r4, r5, r6, pc}
 802c474:	0803102c 	.word	0x0803102c
 802c478:	080310ac 	.word	0x080310ac

0802c47c <__multadd>:
 802c47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c480:	690d      	ldr	r5, [r1, #16]
 802c482:	4607      	mov	r7, r0
 802c484:	460c      	mov	r4, r1
 802c486:	461e      	mov	r6, r3
 802c488:	f101 0c14 	add.w	ip, r1, #20
 802c48c:	2000      	movs	r0, #0
 802c48e:	f8dc 3000 	ldr.w	r3, [ip]
 802c492:	b299      	uxth	r1, r3
 802c494:	fb02 6101 	mla	r1, r2, r1, r6
 802c498:	0c1e      	lsrs	r6, r3, #16
 802c49a:	0c0b      	lsrs	r3, r1, #16
 802c49c:	fb02 3306 	mla	r3, r2, r6, r3
 802c4a0:	b289      	uxth	r1, r1
 802c4a2:	3001      	adds	r0, #1
 802c4a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c4a8:	4285      	cmp	r5, r0
 802c4aa:	f84c 1b04 	str.w	r1, [ip], #4
 802c4ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802c4b2:	dcec      	bgt.n	802c48e <__multadd+0x12>
 802c4b4:	b30e      	cbz	r6, 802c4fa <__multadd+0x7e>
 802c4b6:	68a3      	ldr	r3, [r4, #8]
 802c4b8:	42ab      	cmp	r3, r5
 802c4ba:	dc19      	bgt.n	802c4f0 <__multadd+0x74>
 802c4bc:	6861      	ldr	r1, [r4, #4]
 802c4be:	4638      	mov	r0, r7
 802c4c0:	3101      	adds	r1, #1
 802c4c2:	f7ff ff79 	bl	802c3b8 <_Balloc>
 802c4c6:	4680      	mov	r8, r0
 802c4c8:	b928      	cbnz	r0, 802c4d6 <__multadd+0x5a>
 802c4ca:	4602      	mov	r2, r0
 802c4cc:	4b0c      	ldr	r3, [pc, #48]	@ (802c500 <__multadd+0x84>)
 802c4ce:	480d      	ldr	r0, [pc, #52]	@ (802c504 <__multadd+0x88>)
 802c4d0:	21ba      	movs	r1, #186	@ 0xba
 802c4d2:	f7fd fea5 	bl	802a220 <__assert_func>
 802c4d6:	6922      	ldr	r2, [r4, #16]
 802c4d8:	3202      	adds	r2, #2
 802c4da:	f104 010c 	add.w	r1, r4, #12
 802c4de:	0092      	lsls	r2, r2, #2
 802c4e0:	300c      	adds	r0, #12
 802c4e2:	f7ff f8d4 	bl	802b68e <memcpy>
 802c4e6:	4621      	mov	r1, r4
 802c4e8:	4638      	mov	r0, r7
 802c4ea:	f7ff ffa5 	bl	802c438 <_Bfree>
 802c4ee:	4644      	mov	r4, r8
 802c4f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c4f4:	3501      	adds	r5, #1
 802c4f6:	615e      	str	r6, [r3, #20]
 802c4f8:	6125      	str	r5, [r4, #16]
 802c4fa:	4620      	mov	r0, r4
 802c4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c500:	0803109b 	.word	0x0803109b
 802c504:	080310ac 	.word	0x080310ac

0802c508 <__hi0bits>:
 802c508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802c50c:	4603      	mov	r3, r0
 802c50e:	bf36      	itet	cc
 802c510:	0403      	lslcc	r3, r0, #16
 802c512:	2000      	movcs	r0, #0
 802c514:	2010      	movcc	r0, #16
 802c516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802c51a:	bf3c      	itt	cc
 802c51c:	021b      	lslcc	r3, r3, #8
 802c51e:	3008      	addcc	r0, #8
 802c520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802c524:	bf3c      	itt	cc
 802c526:	011b      	lslcc	r3, r3, #4
 802c528:	3004      	addcc	r0, #4
 802c52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802c52e:	bf3c      	itt	cc
 802c530:	009b      	lslcc	r3, r3, #2
 802c532:	3002      	addcc	r0, #2
 802c534:	2b00      	cmp	r3, #0
 802c536:	db05      	blt.n	802c544 <__hi0bits+0x3c>
 802c538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802c53c:	f100 0001 	add.w	r0, r0, #1
 802c540:	bf08      	it	eq
 802c542:	2020      	moveq	r0, #32
 802c544:	4770      	bx	lr

0802c546 <__lo0bits>:
 802c546:	6803      	ldr	r3, [r0, #0]
 802c548:	4602      	mov	r2, r0
 802c54a:	f013 0007 	ands.w	r0, r3, #7
 802c54e:	d00b      	beq.n	802c568 <__lo0bits+0x22>
 802c550:	07d9      	lsls	r1, r3, #31
 802c552:	d421      	bmi.n	802c598 <__lo0bits+0x52>
 802c554:	0798      	lsls	r0, r3, #30
 802c556:	bf49      	itett	mi
 802c558:	085b      	lsrmi	r3, r3, #1
 802c55a:	089b      	lsrpl	r3, r3, #2
 802c55c:	2001      	movmi	r0, #1
 802c55e:	6013      	strmi	r3, [r2, #0]
 802c560:	bf5c      	itt	pl
 802c562:	6013      	strpl	r3, [r2, #0]
 802c564:	2002      	movpl	r0, #2
 802c566:	4770      	bx	lr
 802c568:	b299      	uxth	r1, r3
 802c56a:	b909      	cbnz	r1, 802c570 <__lo0bits+0x2a>
 802c56c:	0c1b      	lsrs	r3, r3, #16
 802c56e:	2010      	movs	r0, #16
 802c570:	b2d9      	uxtb	r1, r3
 802c572:	b909      	cbnz	r1, 802c578 <__lo0bits+0x32>
 802c574:	3008      	adds	r0, #8
 802c576:	0a1b      	lsrs	r3, r3, #8
 802c578:	0719      	lsls	r1, r3, #28
 802c57a:	bf04      	itt	eq
 802c57c:	091b      	lsreq	r3, r3, #4
 802c57e:	3004      	addeq	r0, #4
 802c580:	0799      	lsls	r1, r3, #30
 802c582:	bf04      	itt	eq
 802c584:	089b      	lsreq	r3, r3, #2
 802c586:	3002      	addeq	r0, #2
 802c588:	07d9      	lsls	r1, r3, #31
 802c58a:	d403      	bmi.n	802c594 <__lo0bits+0x4e>
 802c58c:	085b      	lsrs	r3, r3, #1
 802c58e:	f100 0001 	add.w	r0, r0, #1
 802c592:	d003      	beq.n	802c59c <__lo0bits+0x56>
 802c594:	6013      	str	r3, [r2, #0]
 802c596:	4770      	bx	lr
 802c598:	2000      	movs	r0, #0
 802c59a:	4770      	bx	lr
 802c59c:	2020      	movs	r0, #32
 802c59e:	4770      	bx	lr

0802c5a0 <__i2b>:
 802c5a0:	b510      	push	{r4, lr}
 802c5a2:	460c      	mov	r4, r1
 802c5a4:	2101      	movs	r1, #1
 802c5a6:	f7ff ff07 	bl	802c3b8 <_Balloc>
 802c5aa:	4602      	mov	r2, r0
 802c5ac:	b928      	cbnz	r0, 802c5ba <__i2b+0x1a>
 802c5ae:	4b05      	ldr	r3, [pc, #20]	@ (802c5c4 <__i2b+0x24>)
 802c5b0:	4805      	ldr	r0, [pc, #20]	@ (802c5c8 <__i2b+0x28>)
 802c5b2:	f240 1145 	movw	r1, #325	@ 0x145
 802c5b6:	f7fd fe33 	bl	802a220 <__assert_func>
 802c5ba:	2301      	movs	r3, #1
 802c5bc:	6144      	str	r4, [r0, #20]
 802c5be:	6103      	str	r3, [r0, #16]
 802c5c0:	bd10      	pop	{r4, pc}
 802c5c2:	bf00      	nop
 802c5c4:	0803109b 	.word	0x0803109b
 802c5c8:	080310ac 	.word	0x080310ac

0802c5cc <__multiply>:
 802c5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c5d0:	4614      	mov	r4, r2
 802c5d2:	690a      	ldr	r2, [r1, #16]
 802c5d4:	6923      	ldr	r3, [r4, #16]
 802c5d6:	429a      	cmp	r2, r3
 802c5d8:	bfa8      	it	ge
 802c5da:	4623      	movge	r3, r4
 802c5dc:	460f      	mov	r7, r1
 802c5de:	bfa4      	itt	ge
 802c5e0:	460c      	movge	r4, r1
 802c5e2:	461f      	movge	r7, r3
 802c5e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802c5e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802c5ec:	68a3      	ldr	r3, [r4, #8]
 802c5ee:	6861      	ldr	r1, [r4, #4]
 802c5f0:	eb0a 0609 	add.w	r6, sl, r9
 802c5f4:	42b3      	cmp	r3, r6
 802c5f6:	b085      	sub	sp, #20
 802c5f8:	bfb8      	it	lt
 802c5fa:	3101      	addlt	r1, #1
 802c5fc:	f7ff fedc 	bl	802c3b8 <_Balloc>
 802c600:	b930      	cbnz	r0, 802c610 <__multiply+0x44>
 802c602:	4602      	mov	r2, r0
 802c604:	4b44      	ldr	r3, [pc, #272]	@ (802c718 <__multiply+0x14c>)
 802c606:	4845      	ldr	r0, [pc, #276]	@ (802c71c <__multiply+0x150>)
 802c608:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802c60c:	f7fd fe08 	bl	802a220 <__assert_func>
 802c610:	f100 0514 	add.w	r5, r0, #20
 802c614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802c618:	462b      	mov	r3, r5
 802c61a:	2200      	movs	r2, #0
 802c61c:	4543      	cmp	r3, r8
 802c61e:	d321      	bcc.n	802c664 <__multiply+0x98>
 802c620:	f107 0114 	add.w	r1, r7, #20
 802c624:	f104 0214 	add.w	r2, r4, #20
 802c628:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802c62c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802c630:	9302      	str	r3, [sp, #8]
 802c632:	1b13      	subs	r3, r2, r4
 802c634:	3b15      	subs	r3, #21
 802c636:	f023 0303 	bic.w	r3, r3, #3
 802c63a:	3304      	adds	r3, #4
 802c63c:	f104 0715 	add.w	r7, r4, #21
 802c640:	42ba      	cmp	r2, r7
 802c642:	bf38      	it	cc
 802c644:	2304      	movcc	r3, #4
 802c646:	9301      	str	r3, [sp, #4]
 802c648:	9b02      	ldr	r3, [sp, #8]
 802c64a:	9103      	str	r1, [sp, #12]
 802c64c:	428b      	cmp	r3, r1
 802c64e:	d80c      	bhi.n	802c66a <__multiply+0x9e>
 802c650:	2e00      	cmp	r6, #0
 802c652:	dd03      	ble.n	802c65c <__multiply+0x90>
 802c654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802c658:	2b00      	cmp	r3, #0
 802c65a:	d05b      	beq.n	802c714 <__multiply+0x148>
 802c65c:	6106      	str	r6, [r0, #16]
 802c65e:	b005      	add	sp, #20
 802c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c664:	f843 2b04 	str.w	r2, [r3], #4
 802c668:	e7d8      	b.n	802c61c <__multiply+0x50>
 802c66a:	f8b1 a000 	ldrh.w	sl, [r1]
 802c66e:	f1ba 0f00 	cmp.w	sl, #0
 802c672:	d024      	beq.n	802c6be <__multiply+0xf2>
 802c674:	f104 0e14 	add.w	lr, r4, #20
 802c678:	46a9      	mov	r9, r5
 802c67a:	f04f 0c00 	mov.w	ip, #0
 802c67e:	f85e 7b04 	ldr.w	r7, [lr], #4
 802c682:	f8d9 3000 	ldr.w	r3, [r9]
 802c686:	fa1f fb87 	uxth.w	fp, r7
 802c68a:	b29b      	uxth	r3, r3
 802c68c:	fb0a 330b 	mla	r3, sl, fp, r3
 802c690:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802c694:	f8d9 7000 	ldr.w	r7, [r9]
 802c698:	4463      	add	r3, ip
 802c69a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c69e:	fb0a c70b 	mla	r7, sl, fp, ip
 802c6a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802c6a6:	b29b      	uxth	r3, r3
 802c6a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c6ac:	4572      	cmp	r2, lr
 802c6ae:	f849 3b04 	str.w	r3, [r9], #4
 802c6b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c6b6:	d8e2      	bhi.n	802c67e <__multiply+0xb2>
 802c6b8:	9b01      	ldr	r3, [sp, #4]
 802c6ba:	f845 c003 	str.w	ip, [r5, r3]
 802c6be:	9b03      	ldr	r3, [sp, #12]
 802c6c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802c6c4:	3104      	adds	r1, #4
 802c6c6:	f1b9 0f00 	cmp.w	r9, #0
 802c6ca:	d021      	beq.n	802c710 <__multiply+0x144>
 802c6cc:	682b      	ldr	r3, [r5, #0]
 802c6ce:	f104 0c14 	add.w	ip, r4, #20
 802c6d2:	46ae      	mov	lr, r5
 802c6d4:	f04f 0a00 	mov.w	sl, #0
 802c6d8:	f8bc b000 	ldrh.w	fp, [ip]
 802c6dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802c6e0:	fb09 770b 	mla	r7, r9, fp, r7
 802c6e4:	4457      	add	r7, sl
 802c6e6:	b29b      	uxth	r3, r3
 802c6e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c6ec:	f84e 3b04 	str.w	r3, [lr], #4
 802c6f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 802c6f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c6f8:	f8be 3000 	ldrh.w	r3, [lr]
 802c6fc:	fb09 330a 	mla	r3, r9, sl, r3
 802c700:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802c704:	4562      	cmp	r2, ip
 802c706:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c70a:	d8e5      	bhi.n	802c6d8 <__multiply+0x10c>
 802c70c:	9f01      	ldr	r7, [sp, #4]
 802c70e:	51eb      	str	r3, [r5, r7]
 802c710:	3504      	adds	r5, #4
 802c712:	e799      	b.n	802c648 <__multiply+0x7c>
 802c714:	3e01      	subs	r6, #1
 802c716:	e79b      	b.n	802c650 <__multiply+0x84>
 802c718:	0803109b 	.word	0x0803109b
 802c71c:	080310ac 	.word	0x080310ac

0802c720 <__pow5mult>:
 802c720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c724:	4615      	mov	r5, r2
 802c726:	f012 0203 	ands.w	r2, r2, #3
 802c72a:	4607      	mov	r7, r0
 802c72c:	460e      	mov	r6, r1
 802c72e:	d007      	beq.n	802c740 <__pow5mult+0x20>
 802c730:	4c25      	ldr	r4, [pc, #148]	@ (802c7c8 <__pow5mult+0xa8>)
 802c732:	3a01      	subs	r2, #1
 802c734:	2300      	movs	r3, #0
 802c736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c73a:	f7ff fe9f 	bl	802c47c <__multadd>
 802c73e:	4606      	mov	r6, r0
 802c740:	10ad      	asrs	r5, r5, #2
 802c742:	d03d      	beq.n	802c7c0 <__pow5mult+0xa0>
 802c744:	69fc      	ldr	r4, [r7, #28]
 802c746:	b97c      	cbnz	r4, 802c768 <__pow5mult+0x48>
 802c748:	2010      	movs	r0, #16
 802c74a:	f7fd fd8d 	bl	802a268 <malloc>
 802c74e:	4602      	mov	r2, r0
 802c750:	61f8      	str	r0, [r7, #28]
 802c752:	b928      	cbnz	r0, 802c760 <__pow5mult+0x40>
 802c754:	4b1d      	ldr	r3, [pc, #116]	@ (802c7cc <__pow5mult+0xac>)
 802c756:	481e      	ldr	r0, [pc, #120]	@ (802c7d0 <__pow5mult+0xb0>)
 802c758:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802c75c:	f7fd fd60 	bl	802a220 <__assert_func>
 802c760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c764:	6004      	str	r4, [r0, #0]
 802c766:	60c4      	str	r4, [r0, #12]
 802c768:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802c76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802c770:	b94c      	cbnz	r4, 802c786 <__pow5mult+0x66>
 802c772:	f240 2171 	movw	r1, #625	@ 0x271
 802c776:	4638      	mov	r0, r7
 802c778:	f7ff ff12 	bl	802c5a0 <__i2b>
 802c77c:	2300      	movs	r3, #0
 802c77e:	f8c8 0008 	str.w	r0, [r8, #8]
 802c782:	4604      	mov	r4, r0
 802c784:	6003      	str	r3, [r0, #0]
 802c786:	f04f 0900 	mov.w	r9, #0
 802c78a:	07eb      	lsls	r3, r5, #31
 802c78c:	d50a      	bpl.n	802c7a4 <__pow5mult+0x84>
 802c78e:	4631      	mov	r1, r6
 802c790:	4622      	mov	r2, r4
 802c792:	4638      	mov	r0, r7
 802c794:	f7ff ff1a 	bl	802c5cc <__multiply>
 802c798:	4631      	mov	r1, r6
 802c79a:	4680      	mov	r8, r0
 802c79c:	4638      	mov	r0, r7
 802c79e:	f7ff fe4b 	bl	802c438 <_Bfree>
 802c7a2:	4646      	mov	r6, r8
 802c7a4:	106d      	asrs	r5, r5, #1
 802c7a6:	d00b      	beq.n	802c7c0 <__pow5mult+0xa0>
 802c7a8:	6820      	ldr	r0, [r4, #0]
 802c7aa:	b938      	cbnz	r0, 802c7bc <__pow5mult+0x9c>
 802c7ac:	4622      	mov	r2, r4
 802c7ae:	4621      	mov	r1, r4
 802c7b0:	4638      	mov	r0, r7
 802c7b2:	f7ff ff0b 	bl	802c5cc <__multiply>
 802c7b6:	6020      	str	r0, [r4, #0]
 802c7b8:	f8c0 9000 	str.w	r9, [r0]
 802c7bc:	4604      	mov	r4, r0
 802c7be:	e7e4      	b.n	802c78a <__pow5mult+0x6a>
 802c7c0:	4630      	mov	r0, r6
 802c7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c7c6:	bf00      	nop
 802c7c8:	08031108 	.word	0x08031108
 802c7cc:	0803102c 	.word	0x0803102c
 802c7d0:	080310ac 	.word	0x080310ac

0802c7d4 <__lshift>:
 802c7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c7d8:	460c      	mov	r4, r1
 802c7da:	6849      	ldr	r1, [r1, #4]
 802c7dc:	6923      	ldr	r3, [r4, #16]
 802c7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802c7e2:	68a3      	ldr	r3, [r4, #8]
 802c7e4:	4607      	mov	r7, r0
 802c7e6:	4691      	mov	r9, r2
 802c7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c7ec:	f108 0601 	add.w	r6, r8, #1
 802c7f0:	42b3      	cmp	r3, r6
 802c7f2:	db0b      	blt.n	802c80c <__lshift+0x38>
 802c7f4:	4638      	mov	r0, r7
 802c7f6:	f7ff fddf 	bl	802c3b8 <_Balloc>
 802c7fa:	4605      	mov	r5, r0
 802c7fc:	b948      	cbnz	r0, 802c812 <__lshift+0x3e>
 802c7fe:	4602      	mov	r2, r0
 802c800:	4b28      	ldr	r3, [pc, #160]	@ (802c8a4 <__lshift+0xd0>)
 802c802:	4829      	ldr	r0, [pc, #164]	@ (802c8a8 <__lshift+0xd4>)
 802c804:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802c808:	f7fd fd0a 	bl	802a220 <__assert_func>
 802c80c:	3101      	adds	r1, #1
 802c80e:	005b      	lsls	r3, r3, #1
 802c810:	e7ee      	b.n	802c7f0 <__lshift+0x1c>
 802c812:	2300      	movs	r3, #0
 802c814:	f100 0114 	add.w	r1, r0, #20
 802c818:	f100 0210 	add.w	r2, r0, #16
 802c81c:	4618      	mov	r0, r3
 802c81e:	4553      	cmp	r3, sl
 802c820:	db33      	blt.n	802c88a <__lshift+0xb6>
 802c822:	6920      	ldr	r0, [r4, #16]
 802c824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c828:	f104 0314 	add.w	r3, r4, #20
 802c82c:	f019 091f 	ands.w	r9, r9, #31
 802c830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802c838:	d02b      	beq.n	802c892 <__lshift+0xbe>
 802c83a:	f1c9 0e20 	rsb	lr, r9, #32
 802c83e:	468a      	mov	sl, r1
 802c840:	2200      	movs	r2, #0
 802c842:	6818      	ldr	r0, [r3, #0]
 802c844:	fa00 f009 	lsl.w	r0, r0, r9
 802c848:	4310      	orrs	r0, r2
 802c84a:	f84a 0b04 	str.w	r0, [sl], #4
 802c84e:	f853 2b04 	ldr.w	r2, [r3], #4
 802c852:	459c      	cmp	ip, r3
 802c854:	fa22 f20e 	lsr.w	r2, r2, lr
 802c858:	d8f3      	bhi.n	802c842 <__lshift+0x6e>
 802c85a:	ebac 0304 	sub.w	r3, ip, r4
 802c85e:	3b15      	subs	r3, #21
 802c860:	f023 0303 	bic.w	r3, r3, #3
 802c864:	3304      	adds	r3, #4
 802c866:	f104 0015 	add.w	r0, r4, #21
 802c86a:	4584      	cmp	ip, r0
 802c86c:	bf38      	it	cc
 802c86e:	2304      	movcc	r3, #4
 802c870:	50ca      	str	r2, [r1, r3]
 802c872:	b10a      	cbz	r2, 802c878 <__lshift+0xa4>
 802c874:	f108 0602 	add.w	r6, r8, #2
 802c878:	3e01      	subs	r6, #1
 802c87a:	4638      	mov	r0, r7
 802c87c:	612e      	str	r6, [r5, #16]
 802c87e:	4621      	mov	r1, r4
 802c880:	f7ff fdda 	bl	802c438 <_Bfree>
 802c884:	4628      	mov	r0, r5
 802c886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c88a:	f842 0f04 	str.w	r0, [r2, #4]!
 802c88e:	3301      	adds	r3, #1
 802c890:	e7c5      	b.n	802c81e <__lshift+0x4a>
 802c892:	3904      	subs	r1, #4
 802c894:	f853 2b04 	ldr.w	r2, [r3], #4
 802c898:	f841 2f04 	str.w	r2, [r1, #4]!
 802c89c:	459c      	cmp	ip, r3
 802c89e:	d8f9      	bhi.n	802c894 <__lshift+0xc0>
 802c8a0:	e7ea      	b.n	802c878 <__lshift+0xa4>
 802c8a2:	bf00      	nop
 802c8a4:	0803109b 	.word	0x0803109b
 802c8a8:	080310ac 	.word	0x080310ac

0802c8ac <__mcmp>:
 802c8ac:	690a      	ldr	r2, [r1, #16]
 802c8ae:	4603      	mov	r3, r0
 802c8b0:	6900      	ldr	r0, [r0, #16]
 802c8b2:	1a80      	subs	r0, r0, r2
 802c8b4:	b530      	push	{r4, r5, lr}
 802c8b6:	d10e      	bne.n	802c8d6 <__mcmp+0x2a>
 802c8b8:	3314      	adds	r3, #20
 802c8ba:	3114      	adds	r1, #20
 802c8bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802c8c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802c8c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802c8c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802c8cc:	4295      	cmp	r5, r2
 802c8ce:	d003      	beq.n	802c8d8 <__mcmp+0x2c>
 802c8d0:	d205      	bcs.n	802c8de <__mcmp+0x32>
 802c8d2:	f04f 30ff 	mov.w	r0, #4294967295
 802c8d6:	bd30      	pop	{r4, r5, pc}
 802c8d8:	42a3      	cmp	r3, r4
 802c8da:	d3f3      	bcc.n	802c8c4 <__mcmp+0x18>
 802c8dc:	e7fb      	b.n	802c8d6 <__mcmp+0x2a>
 802c8de:	2001      	movs	r0, #1
 802c8e0:	e7f9      	b.n	802c8d6 <__mcmp+0x2a>
	...

0802c8e4 <__mdiff>:
 802c8e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c8e8:	4689      	mov	r9, r1
 802c8ea:	4606      	mov	r6, r0
 802c8ec:	4611      	mov	r1, r2
 802c8ee:	4648      	mov	r0, r9
 802c8f0:	4614      	mov	r4, r2
 802c8f2:	f7ff ffdb 	bl	802c8ac <__mcmp>
 802c8f6:	1e05      	subs	r5, r0, #0
 802c8f8:	d112      	bne.n	802c920 <__mdiff+0x3c>
 802c8fa:	4629      	mov	r1, r5
 802c8fc:	4630      	mov	r0, r6
 802c8fe:	f7ff fd5b 	bl	802c3b8 <_Balloc>
 802c902:	4602      	mov	r2, r0
 802c904:	b928      	cbnz	r0, 802c912 <__mdiff+0x2e>
 802c906:	4b3f      	ldr	r3, [pc, #252]	@ (802ca04 <__mdiff+0x120>)
 802c908:	f240 2137 	movw	r1, #567	@ 0x237
 802c90c:	483e      	ldr	r0, [pc, #248]	@ (802ca08 <__mdiff+0x124>)
 802c90e:	f7fd fc87 	bl	802a220 <__assert_func>
 802c912:	2301      	movs	r3, #1
 802c914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802c918:	4610      	mov	r0, r2
 802c91a:	b003      	add	sp, #12
 802c91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c920:	bfbc      	itt	lt
 802c922:	464b      	movlt	r3, r9
 802c924:	46a1      	movlt	r9, r4
 802c926:	4630      	mov	r0, r6
 802c928:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802c92c:	bfba      	itte	lt
 802c92e:	461c      	movlt	r4, r3
 802c930:	2501      	movlt	r5, #1
 802c932:	2500      	movge	r5, #0
 802c934:	f7ff fd40 	bl	802c3b8 <_Balloc>
 802c938:	4602      	mov	r2, r0
 802c93a:	b918      	cbnz	r0, 802c944 <__mdiff+0x60>
 802c93c:	4b31      	ldr	r3, [pc, #196]	@ (802ca04 <__mdiff+0x120>)
 802c93e:	f240 2145 	movw	r1, #581	@ 0x245
 802c942:	e7e3      	b.n	802c90c <__mdiff+0x28>
 802c944:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802c948:	6926      	ldr	r6, [r4, #16]
 802c94a:	60c5      	str	r5, [r0, #12]
 802c94c:	f109 0310 	add.w	r3, r9, #16
 802c950:	f109 0514 	add.w	r5, r9, #20
 802c954:	f104 0e14 	add.w	lr, r4, #20
 802c958:	f100 0b14 	add.w	fp, r0, #20
 802c95c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802c960:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802c964:	9301      	str	r3, [sp, #4]
 802c966:	46d9      	mov	r9, fp
 802c968:	f04f 0c00 	mov.w	ip, #0
 802c96c:	9b01      	ldr	r3, [sp, #4]
 802c96e:	f85e 0b04 	ldr.w	r0, [lr], #4
 802c972:	f853 af04 	ldr.w	sl, [r3, #4]!
 802c976:	9301      	str	r3, [sp, #4]
 802c978:	fa1f f38a 	uxth.w	r3, sl
 802c97c:	4619      	mov	r1, r3
 802c97e:	b283      	uxth	r3, r0
 802c980:	1acb      	subs	r3, r1, r3
 802c982:	0c00      	lsrs	r0, r0, #16
 802c984:	4463      	add	r3, ip
 802c986:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802c98a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802c98e:	b29b      	uxth	r3, r3
 802c990:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802c994:	4576      	cmp	r6, lr
 802c996:	f849 3b04 	str.w	r3, [r9], #4
 802c99a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802c99e:	d8e5      	bhi.n	802c96c <__mdiff+0x88>
 802c9a0:	1b33      	subs	r3, r6, r4
 802c9a2:	3b15      	subs	r3, #21
 802c9a4:	f023 0303 	bic.w	r3, r3, #3
 802c9a8:	3415      	adds	r4, #21
 802c9aa:	3304      	adds	r3, #4
 802c9ac:	42a6      	cmp	r6, r4
 802c9ae:	bf38      	it	cc
 802c9b0:	2304      	movcc	r3, #4
 802c9b2:	441d      	add	r5, r3
 802c9b4:	445b      	add	r3, fp
 802c9b6:	461e      	mov	r6, r3
 802c9b8:	462c      	mov	r4, r5
 802c9ba:	4544      	cmp	r4, r8
 802c9bc:	d30e      	bcc.n	802c9dc <__mdiff+0xf8>
 802c9be:	f108 0103 	add.w	r1, r8, #3
 802c9c2:	1b49      	subs	r1, r1, r5
 802c9c4:	f021 0103 	bic.w	r1, r1, #3
 802c9c8:	3d03      	subs	r5, #3
 802c9ca:	45a8      	cmp	r8, r5
 802c9cc:	bf38      	it	cc
 802c9ce:	2100      	movcc	r1, #0
 802c9d0:	440b      	add	r3, r1
 802c9d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802c9d6:	b191      	cbz	r1, 802c9fe <__mdiff+0x11a>
 802c9d8:	6117      	str	r7, [r2, #16]
 802c9da:	e79d      	b.n	802c918 <__mdiff+0x34>
 802c9dc:	f854 1b04 	ldr.w	r1, [r4], #4
 802c9e0:	46e6      	mov	lr, ip
 802c9e2:	0c08      	lsrs	r0, r1, #16
 802c9e4:	fa1c fc81 	uxtah	ip, ip, r1
 802c9e8:	4471      	add	r1, lr
 802c9ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802c9ee:	b289      	uxth	r1, r1
 802c9f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802c9f4:	f846 1b04 	str.w	r1, [r6], #4
 802c9f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802c9fc:	e7dd      	b.n	802c9ba <__mdiff+0xd6>
 802c9fe:	3f01      	subs	r7, #1
 802ca00:	e7e7      	b.n	802c9d2 <__mdiff+0xee>
 802ca02:	bf00      	nop
 802ca04:	0803109b 	.word	0x0803109b
 802ca08:	080310ac 	.word	0x080310ac

0802ca0c <__d2b>:
 802ca0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ca10:	460f      	mov	r7, r1
 802ca12:	2101      	movs	r1, #1
 802ca14:	ec59 8b10 	vmov	r8, r9, d0
 802ca18:	4616      	mov	r6, r2
 802ca1a:	f7ff fccd 	bl	802c3b8 <_Balloc>
 802ca1e:	4604      	mov	r4, r0
 802ca20:	b930      	cbnz	r0, 802ca30 <__d2b+0x24>
 802ca22:	4602      	mov	r2, r0
 802ca24:	4b23      	ldr	r3, [pc, #140]	@ (802cab4 <__d2b+0xa8>)
 802ca26:	4824      	ldr	r0, [pc, #144]	@ (802cab8 <__d2b+0xac>)
 802ca28:	f240 310f 	movw	r1, #783	@ 0x30f
 802ca2c:	f7fd fbf8 	bl	802a220 <__assert_func>
 802ca30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802ca34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ca38:	b10d      	cbz	r5, 802ca3e <__d2b+0x32>
 802ca3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802ca3e:	9301      	str	r3, [sp, #4]
 802ca40:	f1b8 0300 	subs.w	r3, r8, #0
 802ca44:	d023      	beq.n	802ca8e <__d2b+0x82>
 802ca46:	4668      	mov	r0, sp
 802ca48:	9300      	str	r3, [sp, #0]
 802ca4a:	f7ff fd7c 	bl	802c546 <__lo0bits>
 802ca4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 802ca52:	b1d0      	cbz	r0, 802ca8a <__d2b+0x7e>
 802ca54:	f1c0 0320 	rsb	r3, r0, #32
 802ca58:	fa02 f303 	lsl.w	r3, r2, r3
 802ca5c:	430b      	orrs	r3, r1
 802ca5e:	40c2      	lsrs	r2, r0
 802ca60:	6163      	str	r3, [r4, #20]
 802ca62:	9201      	str	r2, [sp, #4]
 802ca64:	9b01      	ldr	r3, [sp, #4]
 802ca66:	61a3      	str	r3, [r4, #24]
 802ca68:	2b00      	cmp	r3, #0
 802ca6a:	bf0c      	ite	eq
 802ca6c:	2201      	moveq	r2, #1
 802ca6e:	2202      	movne	r2, #2
 802ca70:	6122      	str	r2, [r4, #16]
 802ca72:	b1a5      	cbz	r5, 802ca9e <__d2b+0x92>
 802ca74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802ca78:	4405      	add	r5, r0
 802ca7a:	603d      	str	r5, [r7, #0]
 802ca7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802ca80:	6030      	str	r0, [r6, #0]
 802ca82:	4620      	mov	r0, r4
 802ca84:	b003      	add	sp, #12
 802ca86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ca8a:	6161      	str	r1, [r4, #20]
 802ca8c:	e7ea      	b.n	802ca64 <__d2b+0x58>
 802ca8e:	a801      	add	r0, sp, #4
 802ca90:	f7ff fd59 	bl	802c546 <__lo0bits>
 802ca94:	9b01      	ldr	r3, [sp, #4]
 802ca96:	6163      	str	r3, [r4, #20]
 802ca98:	3020      	adds	r0, #32
 802ca9a:	2201      	movs	r2, #1
 802ca9c:	e7e8      	b.n	802ca70 <__d2b+0x64>
 802ca9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802caa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802caa6:	6038      	str	r0, [r7, #0]
 802caa8:	6918      	ldr	r0, [r3, #16]
 802caaa:	f7ff fd2d 	bl	802c508 <__hi0bits>
 802caae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802cab2:	e7e5      	b.n	802ca80 <__d2b+0x74>
 802cab4:	0803109b 	.word	0x0803109b
 802cab8:	080310ac 	.word	0x080310ac

0802cabc <__swhatbuf_r>:
 802cabc:	b570      	push	{r4, r5, r6, lr}
 802cabe:	460c      	mov	r4, r1
 802cac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cac4:	2900      	cmp	r1, #0
 802cac6:	b096      	sub	sp, #88	@ 0x58
 802cac8:	4615      	mov	r5, r2
 802caca:	461e      	mov	r6, r3
 802cacc:	da0d      	bge.n	802caea <__swhatbuf_r+0x2e>
 802cace:	89a3      	ldrh	r3, [r4, #12]
 802cad0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802cad4:	f04f 0100 	mov.w	r1, #0
 802cad8:	bf14      	ite	ne
 802cada:	2340      	movne	r3, #64	@ 0x40
 802cadc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802cae0:	2000      	movs	r0, #0
 802cae2:	6031      	str	r1, [r6, #0]
 802cae4:	602b      	str	r3, [r5, #0]
 802cae6:	b016      	add	sp, #88	@ 0x58
 802cae8:	bd70      	pop	{r4, r5, r6, pc}
 802caea:	466a      	mov	r2, sp
 802caec:	f000 f848 	bl	802cb80 <_fstat_r>
 802caf0:	2800      	cmp	r0, #0
 802caf2:	dbec      	blt.n	802cace <__swhatbuf_r+0x12>
 802caf4:	9901      	ldr	r1, [sp, #4]
 802caf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802cafa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802cafe:	4259      	negs	r1, r3
 802cb00:	4159      	adcs	r1, r3
 802cb02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802cb06:	e7eb      	b.n	802cae0 <__swhatbuf_r+0x24>

0802cb08 <__smakebuf_r>:
 802cb08:	898b      	ldrh	r3, [r1, #12]
 802cb0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802cb0c:	079d      	lsls	r5, r3, #30
 802cb0e:	4606      	mov	r6, r0
 802cb10:	460c      	mov	r4, r1
 802cb12:	d507      	bpl.n	802cb24 <__smakebuf_r+0x1c>
 802cb14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802cb18:	6023      	str	r3, [r4, #0]
 802cb1a:	6123      	str	r3, [r4, #16]
 802cb1c:	2301      	movs	r3, #1
 802cb1e:	6163      	str	r3, [r4, #20]
 802cb20:	b003      	add	sp, #12
 802cb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cb24:	ab01      	add	r3, sp, #4
 802cb26:	466a      	mov	r2, sp
 802cb28:	f7ff ffc8 	bl	802cabc <__swhatbuf_r>
 802cb2c:	9f00      	ldr	r7, [sp, #0]
 802cb2e:	4605      	mov	r5, r0
 802cb30:	4639      	mov	r1, r7
 802cb32:	4630      	mov	r0, r6
 802cb34:	f7fd fbca 	bl	802a2cc <_malloc_r>
 802cb38:	b948      	cbnz	r0, 802cb4e <__smakebuf_r+0x46>
 802cb3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cb3e:	059a      	lsls	r2, r3, #22
 802cb40:	d4ee      	bmi.n	802cb20 <__smakebuf_r+0x18>
 802cb42:	f023 0303 	bic.w	r3, r3, #3
 802cb46:	f043 0302 	orr.w	r3, r3, #2
 802cb4a:	81a3      	strh	r3, [r4, #12]
 802cb4c:	e7e2      	b.n	802cb14 <__smakebuf_r+0xc>
 802cb4e:	89a3      	ldrh	r3, [r4, #12]
 802cb50:	6020      	str	r0, [r4, #0]
 802cb52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802cb56:	81a3      	strh	r3, [r4, #12]
 802cb58:	9b01      	ldr	r3, [sp, #4]
 802cb5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802cb5e:	b15b      	cbz	r3, 802cb78 <__smakebuf_r+0x70>
 802cb60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cb64:	4630      	mov	r0, r6
 802cb66:	f000 f81d 	bl	802cba4 <_isatty_r>
 802cb6a:	b128      	cbz	r0, 802cb78 <__smakebuf_r+0x70>
 802cb6c:	89a3      	ldrh	r3, [r4, #12]
 802cb6e:	f023 0303 	bic.w	r3, r3, #3
 802cb72:	f043 0301 	orr.w	r3, r3, #1
 802cb76:	81a3      	strh	r3, [r4, #12]
 802cb78:	89a3      	ldrh	r3, [r4, #12]
 802cb7a:	431d      	orrs	r5, r3
 802cb7c:	81a5      	strh	r5, [r4, #12]
 802cb7e:	e7cf      	b.n	802cb20 <__smakebuf_r+0x18>

0802cb80 <_fstat_r>:
 802cb80:	b538      	push	{r3, r4, r5, lr}
 802cb82:	4d07      	ldr	r5, [pc, #28]	@ (802cba0 <_fstat_r+0x20>)
 802cb84:	2300      	movs	r3, #0
 802cb86:	4604      	mov	r4, r0
 802cb88:	4608      	mov	r0, r1
 802cb8a:	4611      	mov	r1, r2
 802cb8c:	602b      	str	r3, [r5, #0]
 802cb8e:	f7d5 f8fc 	bl	8001d8a <_fstat>
 802cb92:	1c43      	adds	r3, r0, #1
 802cb94:	d102      	bne.n	802cb9c <_fstat_r+0x1c>
 802cb96:	682b      	ldr	r3, [r5, #0]
 802cb98:	b103      	cbz	r3, 802cb9c <_fstat_r+0x1c>
 802cb9a:	6023      	str	r3, [r4, #0]
 802cb9c:	bd38      	pop	{r3, r4, r5, pc}
 802cb9e:	bf00      	nop
 802cba0:	240292f4 	.word	0x240292f4

0802cba4 <_isatty_r>:
 802cba4:	b538      	push	{r3, r4, r5, lr}
 802cba6:	4d06      	ldr	r5, [pc, #24]	@ (802cbc0 <_isatty_r+0x1c>)
 802cba8:	2300      	movs	r3, #0
 802cbaa:	4604      	mov	r4, r0
 802cbac:	4608      	mov	r0, r1
 802cbae:	602b      	str	r3, [r5, #0]
 802cbb0:	f7d5 f8f0 	bl	8001d94 <_isatty>
 802cbb4:	1c43      	adds	r3, r0, #1
 802cbb6:	d102      	bne.n	802cbbe <_isatty_r+0x1a>
 802cbb8:	682b      	ldr	r3, [r5, #0]
 802cbba:	b103      	cbz	r3, 802cbbe <_isatty_r+0x1a>
 802cbbc:	6023      	str	r3, [r4, #0]
 802cbbe:	bd38      	pop	{r3, r4, r5, pc}
 802cbc0:	240292f4 	.word	0x240292f4

0802cbc4 <_calloc_r>:
 802cbc4:	b570      	push	{r4, r5, r6, lr}
 802cbc6:	fba1 5402 	umull	r5, r4, r1, r2
 802cbca:	b93c      	cbnz	r4, 802cbdc <_calloc_r+0x18>
 802cbcc:	4629      	mov	r1, r5
 802cbce:	f7fd fb7d 	bl	802a2cc <_malloc_r>
 802cbd2:	4606      	mov	r6, r0
 802cbd4:	b928      	cbnz	r0, 802cbe2 <_calloc_r+0x1e>
 802cbd6:	2600      	movs	r6, #0
 802cbd8:	4630      	mov	r0, r6
 802cbda:	bd70      	pop	{r4, r5, r6, pc}
 802cbdc:	220c      	movs	r2, #12
 802cbde:	6002      	str	r2, [r0, #0]
 802cbe0:	e7f9      	b.n	802cbd6 <_calloc_r+0x12>
 802cbe2:	462a      	mov	r2, r5
 802cbe4:	4621      	mov	r1, r4
 802cbe6:	f7fe fc6d 	bl	802b4c4 <memset>
 802cbea:	e7f5      	b.n	802cbd8 <_calloc_r+0x14>

0802cbec <__ascii_mbtowc>:
 802cbec:	b082      	sub	sp, #8
 802cbee:	b901      	cbnz	r1, 802cbf2 <__ascii_mbtowc+0x6>
 802cbf0:	a901      	add	r1, sp, #4
 802cbf2:	b142      	cbz	r2, 802cc06 <__ascii_mbtowc+0x1a>
 802cbf4:	b14b      	cbz	r3, 802cc0a <__ascii_mbtowc+0x1e>
 802cbf6:	7813      	ldrb	r3, [r2, #0]
 802cbf8:	600b      	str	r3, [r1, #0]
 802cbfa:	7812      	ldrb	r2, [r2, #0]
 802cbfc:	1e10      	subs	r0, r2, #0
 802cbfe:	bf18      	it	ne
 802cc00:	2001      	movne	r0, #1
 802cc02:	b002      	add	sp, #8
 802cc04:	4770      	bx	lr
 802cc06:	4610      	mov	r0, r2
 802cc08:	e7fb      	b.n	802cc02 <__ascii_mbtowc+0x16>
 802cc0a:	f06f 0001 	mvn.w	r0, #1
 802cc0e:	e7f8      	b.n	802cc02 <__ascii_mbtowc+0x16>

0802cc10 <__ascii_wctomb>:
 802cc10:	4603      	mov	r3, r0
 802cc12:	4608      	mov	r0, r1
 802cc14:	b141      	cbz	r1, 802cc28 <__ascii_wctomb+0x18>
 802cc16:	2aff      	cmp	r2, #255	@ 0xff
 802cc18:	d904      	bls.n	802cc24 <__ascii_wctomb+0x14>
 802cc1a:	228a      	movs	r2, #138	@ 0x8a
 802cc1c:	601a      	str	r2, [r3, #0]
 802cc1e:	f04f 30ff 	mov.w	r0, #4294967295
 802cc22:	4770      	bx	lr
 802cc24:	700a      	strb	r2, [r1, #0]
 802cc26:	2001      	movs	r0, #1
 802cc28:	4770      	bx	lr
	...

0802cc2c <_init>:
 802cc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cc2e:	bf00      	nop
 802cc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cc32:	bc08      	pop	{r3}
 802cc34:	469e      	mov	lr, r3
 802cc36:	4770      	bx	lr

0802cc38 <_fini>:
 802cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cc3a:	bf00      	nop
 802cc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cc3e:	bc08      	pop	{r3}
 802cc40:	469e      	mov	lr, r3
 802cc42:	4770      	bx	lr
