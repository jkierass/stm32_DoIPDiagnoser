
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   000016f8  38000000  38000000  0002b000  2**2
                  ALLOC
  2 .text         00024ab4  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003f9c  08124d54  08124d54  00025d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08128cf0  08128cf0  00029cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  08128cf8  08128cf8  00029cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000014  08128d0c  08128d0c  00029d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  08128d20  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000e5c8  10000090  08128db0  0002a090  2**2
                  ALLOC
  9 ._user_heap_stack 00002000  1000e658  08128db0  0002a658  2**0
                  ALLOC
 10 .lwip_sec     00024b83  10020000  10020000  0002b000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000861f3  00000000  00000000  0002a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e2e7  00000000  00000000  000b02b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004f58  00000000  00000000  000be5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003def  00000000  00000000  000c34f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00059494  00000000  00000000  000c72e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005c914  00000000  00000000  0012077b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0020d3a4  00000000  00000000  0017d08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0038a433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00016ec8  00000000  00000000  0038a478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  003a1340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08124d3c 	.word	0x08124d3c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	08124d3c 	.word	0x08124d3c

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_drsub>:
 8100380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100384:	e002      	b.n	810038c <__adddf3>
 8100386:	bf00      	nop

08100388 <__aeabi_dsub>:
 8100388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810038c <__adddf3>:
 810038c:	b530      	push	{r4, r5, lr}
 810038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100396:	ea94 0f05 	teq	r4, r5
 810039a:	bf08      	it	eq
 810039c:	ea90 0f02 	teqeq	r0, r2
 81003a0:	bf1f      	itttt	ne
 81003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003b2:	f000 80e2 	beq.w	810057a <__adddf3+0x1ee>
 81003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003be:	bfb8      	it	lt
 81003c0:	426d      	neglt	r5, r5
 81003c2:	dd0c      	ble.n	81003de <__adddf3+0x52>
 81003c4:	442c      	add	r4, r5
 81003c6:	ea80 0202 	eor.w	r2, r0, r2
 81003ca:	ea81 0303 	eor.w	r3, r1, r3
 81003ce:	ea82 0000 	eor.w	r0, r2, r0
 81003d2:	ea83 0101 	eor.w	r1, r3, r1
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	2d36      	cmp	r5, #54	@ 0x36
 81003e0:	bf88      	it	hi
 81003e2:	bd30      	pophi	{r4, r5, pc}
 81003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 81003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 81003f4:	d002      	beq.n	81003fc <__adddf3+0x70>
 81003f6:	4240      	negs	r0, r0
 81003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100408:	d002      	beq.n	8100410 <__adddf3+0x84>
 810040a:	4252      	negs	r2, r2
 810040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100410:	ea94 0f05 	teq	r4, r5
 8100414:	f000 80a7 	beq.w	8100566 <__adddf3+0x1da>
 8100418:	f1a4 0401 	sub.w	r4, r4, #1
 810041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100420:	db0d      	blt.n	810043e <__adddf3+0xb2>
 8100422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100426:	fa22 f205 	lsr.w	r2, r2, r5
 810042a:	1880      	adds	r0, r0, r2
 810042c:	f141 0100 	adc.w	r1, r1, #0
 8100430:	fa03 f20e 	lsl.w	r2, r3, lr
 8100434:	1880      	adds	r0, r0, r2
 8100436:	fa43 f305 	asr.w	r3, r3, r5
 810043a:	4159      	adcs	r1, r3
 810043c:	e00e      	b.n	810045c <__adddf3+0xd0>
 810043e:	f1a5 0520 	sub.w	r5, r5, #32
 8100442:	f10e 0e20 	add.w	lr, lr, #32
 8100446:	2a01      	cmp	r2, #1
 8100448:	fa03 fc0e 	lsl.w	ip, r3, lr
 810044c:	bf28      	it	cs
 810044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100452:	fa43 f305 	asr.w	r3, r3, r5
 8100456:	18c0      	adds	r0, r0, r3
 8100458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100460:	d507      	bpl.n	8100472 <__adddf3+0xe6>
 8100462:	f04f 0e00 	mov.w	lr, #0
 8100466:	f1dc 0c00 	rsbs	ip, ip, #0
 810046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100476:	d31b      	bcc.n	81004b0 <__adddf3+0x124>
 8100478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810047c:	d30c      	bcc.n	8100498 <__adddf3+0x10c>
 810047e:	0849      	lsrs	r1, r1, #1
 8100480:	ea5f 0030 	movs.w	r0, r0, rrx
 8100484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100488:	f104 0401 	add.w	r4, r4, #1
 810048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8100494:	f080 809a 	bcs.w	81005cc <__adddf3+0x240>
 8100498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 810049c:	bf08      	it	eq
 810049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004a2:	f150 0000 	adcs.w	r0, r0, #0
 81004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004aa:	ea41 0105 	orr.w	r1, r1, r5
 81004ae:	bd30      	pop	{r4, r5, pc}
 81004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004b4:	4140      	adcs	r0, r0
 81004b6:	eb41 0101 	adc.w	r1, r1, r1
 81004ba:	3c01      	subs	r4, #1
 81004bc:	bf28      	it	cs
 81004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004c2:	d2e9      	bcs.n	8100498 <__adddf3+0x10c>
 81004c4:	f091 0f00 	teq	r1, #0
 81004c8:	bf04      	itt	eq
 81004ca:	4601      	moveq	r1, r0
 81004cc:	2000      	moveq	r0, #0
 81004ce:	fab1 f381 	clz	r3, r1
 81004d2:	bf08      	it	eq
 81004d4:	3320      	addeq	r3, #32
 81004d6:	f1a3 030b 	sub.w	r3, r3, #11
 81004da:	f1b3 0220 	subs.w	r2, r3, #32
 81004de:	da0c      	bge.n	81004fa <__adddf3+0x16e>
 81004e0:	320c      	adds	r2, #12
 81004e2:	dd08      	ble.n	81004f6 <__adddf3+0x16a>
 81004e4:	f102 0c14 	add.w	ip, r2, #20
 81004e8:	f1c2 020c 	rsb	r2, r2, #12
 81004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 81004f0:	fa21 f102 	lsr.w	r1, r1, r2
 81004f4:	e00c      	b.n	8100510 <__adddf3+0x184>
 81004f6:	f102 0214 	add.w	r2, r2, #20
 81004fa:	bfd8      	it	le
 81004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8100500:	fa01 f102 	lsl.w	r1, r1, r2
 8100504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100508:	bfdc      	itt	le
 810050a:	ea41 010c 	orrle.w	r1, r1, ip
 810050e:	4090      	lslle	r0, r2
 8100510:	1ae4      	subs	r4, r4, r3
 8100512:	bfa2      	ittt	ge
 8100514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100518:	4329      	orrge	r1, r5
 810051a:	bd30      	popge	{r4, r5, pc}
 810051c:	ea6f 0404 	mvn.w	r4, r4
 8100520:	3c1f      	subs	r4, #31
 8100522:	da1c      	bge.n	810055e <__adddf3+0x1d2>
 8100524:	340c      	adds	r4, #12
 8100526:	dc0e      	bgt.n	8100546 <__adddf3+0x1ba>
 8100528:	f104 0414 	add.w	r4, r4, #20
 810052c:	f1c4 0220 	rsb	r2, r4, #32
 8100530:	fa20 f004 	lsr.w	r0, r0, r4
 8100534:	fa01 f302 	lsl.w	r3, r1, r2
 8100538:	ea40 0003 	orr.w	r0, r0, r3
 810053c:	fa21 f304 	lsr.w	r3, r1, r4
 8100540:	ea45 0103 	orr.w	r1, r5, r3
 8100544:	bd30      	pop	{r4, r5, pc}
 8100546:	f1c4 040c 	rsb	r4, r4, #12
 810054a:	f1c4 0220 	rsb	r2, r4, #32
 810054e:	fa20 f002 	lsr.w	r0, r0, r2
 8100552:	fa01 f304 	lsl.w	r3, r1, r4
 8100556:	ea40 0003 	orr.w	r0, r0, r3
 810055a:	4629      	mov	r1, r5
 810055c:	bd30      	pop	{r4, r5, pc}
 810055e:	fa21 f004 	lsr.w	r0, r1, r4
 8100562:	4629      	mov	r1, r5
 8100564:	bd30      	pop	{r4, r5, pc}
 8100566:	f094 0f00 	teq	r4, #0
 810056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810056e:	bf06      	itte	eq
 8100570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100574:	3401      	addeq	r4, #1
 8100576:	3d01      	subne	r5, #1
 8100578:	e74e      	b.n	8100418 <__adddf3+0x8c>
 810057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810057e:	bf18      	it	ne
 8100580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100584:	d029      	beq.n	81005da <__adddf3+0x24e>
 8100586:	ea94 0f05 	teq	r4, r5
 810058a:	bf08      	it	eq
 810058c:	ea90 0f02 	teqeq	r0, r2
 8100590:	d005      	beq.n	810059e <__adddf3+0x212>
 8100592:	ea54 0c00 	orrs.w	ip, r4, r0
 8100596:	bf04      	itt	eq
 8100598:	4619      	moveq	r1, r3
 810059a:	4610      	moveq	r0, r2
 810059c:	bd30      	pop	{r4, r5, pc}
 810059e:	ea91 0f03 	teq	r1, r3
 81005a2:	bf1e      	ittt	ne
 81005a4:	2100      	movne	r1, #0
 81005a6:	2000      	movne	r0, #0
 81005a8:	bd30      	popne	{r4, r5, pc}
 81005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005ae:	d105      	bne.n	81005bc <__adddf3+0x230>
 81005b0:	0040      	lsls	r0, r0, #1
 81005b2:	4149      	adcs	r1, r1
 81005b4:	bf28      	it	cs
 81005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ba:	bd30      	pop	{r4, r5, pc}
 81005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005c0:	bf3c      	itt	cc
 81005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005c6:	bd30      	popcc	{r4, r5, pc}
 81005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005d4:	f04f 0000 	mov.w	r0, #0
 81005d8:	bd30      	pop	{r4, r5, pc}
 81005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005de:	bf1a      	itte	ne
 81005e0:	4619      	movne	r1, r3
 81005e2:	4610      	movne	r0, r2
 81005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005e8:	bf1c      	itt	ne
 81005ea:	460b      	movne	r3, r1
 81005ec:	4602      	movne	r2, r0
 81005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 81005f2:	bf06      	itte	eq
 81005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 81005f8:	ea91 0f03 	teqeq	r1, r3
 81005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100600:	bd30      	pop	{r4, r5, pc}
 8100602:	bf00      	nop

08100604 <__aeabi_ui2d>:
 8100604:	f090 0f00 	teq	r0, #0
 8100608:	bf04      	itt	eq
 810060a:	2100      	moveq	r1, #0
 810060c:	4770      	bxeq	lr
 810060e:	b530      	push	{r4, r5, lr}
 8100610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100618:	f04f 0500 	mov.w	r5, #0
 810061c:	f04f 0100 	mov.w	r1, #0
 8100620:	e750      	b.n	81004c4 <__adddf3+0x138>
 8100622:	bf00      	nop

08100624 <__aeabi_i2d>:
 8100624:	f090 0f00 	teq	r0, #0
 8100628:	bf04      	itt	eq
 810062a:	2100      	moveq	r1, #0
 810062c:	4770      	bxeq	lr
 810062e:	b530      	push	{r4, r5, lr}
 8100630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810063c:	bf48      	it	mi
 810063e:	4240      	negmi	r0, r0
 8100640:	f04f 0100 	mov.w	r1, #0
 8100644:	e73e      	b.n	81004c4 <__adddf3+0x138>
 8100646:	bf00      	nop

08100648 <__aeabi_f2d>:
 8100648:	0042      	lsls	r2, r0, #1
 810064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100656:	bf1f      	itttt	ne
 8100658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100664:	4770      	bxne	lr
 8100666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810066a:	bf08      	it	eq
 810066c:	4770      	bxeq	lr
 810066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100672:	bf04      	itt	eq
 8100674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100678:	4770      	bxeq	lr
 810067a:	b530      	push	{r4, r5, lr}
 810067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100688:	e71c      	b.n	81004c4 <__adddf3+0x138>
 810068a:	bf00      	nop

0810068c <__aeabi_ul2d>:
 810068c:	ea50 0201 	orrs.w	r2, r0, r1
 8100690:	bf08      	it	eq
 8100692:	4770      	bxeq	lr
 8100694:	b530      	push	{r4, r5, lr}
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	e00a      	b.n	81006b2 <__aeabi_l2d+0x16>

0810069c <__aeabi_l2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006aa:	d502      	bpl.n	81006b2 <__aeabi_l2d+0x16>
 81006ac:	4240      	negs	r0, r0
 81006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006be:	f43f aed8 	beq.w	8100472 <__adddf3+0xe6>
 81006c2:	f04f 0203 	mov.w	r2, #3
 81006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006ca:	bf18      	it	ne
 81006cc:	3203      	addne	r2, #3
 81006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006d2:	bf18      	it	ne
 81006d4:	3203      	addne	r2, #3
 81006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006da:	f1c2 0320 	rsb	r3, r2, #32
 81006de:	fa00 fc03 	lsl.w	ip, r0, r3
 81006e2:	fa20 f002 	lsr.w	r0, r0, r2
 81006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006ea:	ea40 000e 	orr.w	r0, r0, lr
 81006ee:	fa21 f102 	lsr.w	r1, r1, r2
 81006f2:	4414      	add	r4, r2
 81006f4:	e6bd      	b.n	8100472 <__adddf3+0xe6>
 81006f6:	bf00      	nop

081006f8 <__aeabi_dmul>:
 81006f8:	b570      	push	{r4, r5, r6, lr}
 81006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 81006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100706:	bf1d      	ittte	ne
 8100708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810070c:	ea94 0f0c 	teqne	r4, ip
 8100710:	ea95 0f0c 	teqne	r5, ip
 8100714:	f000 f8de 	bleq	81008d4 <__aeabi_dmul+0x1dc>
 8100718:	442c      	add	r4, r5
 810071a:	ea81 0603 	eor.w	r6, r1, r3
 810071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810072a:	bf18      	it	ne
 810072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100738:	d038      	beq.n	81007ac <__aeabi_dmul+0xb4>
 810073a:	fba0 ce02 	umull	ip, lr, r0, r2
 810073e:	f04f 0500 	mov.w	r5, #0
 8100742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810074e:	f04f 0600 	mov.w	r6, #0
 8100752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100756:	f09c 0f00 	teq	ip, #0
 810075a:	bf18      	it	ne
 810075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810076c:	d204      	bcs.n	8100778 <__aeabi_dmul+0x80>
 810076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100772:	416d      	adcs	r5, r5
 8100774:	eb46 0606 	adc.w	r6, r6, r6
 8100778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100790:	bf88      	it	hi
 8100792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100796:	d81e      	bhi.n	81007d6 <__aeabi_dmul+0xde>
 8100798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 810079c:	bf08      	it	eq
 810079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007a2:	f150 0000 	adcs.w	r0, r0, #0
 81007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007aa:	bd70      	pop	{r4, r5, r6, pc}
 81007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007b0:	ea46 0101 	orr.w	r1, r6, r1
 81007b4:	ea40 0002 	orr.w	r0, r0, r2
 81007b8:	ea81 0103 	eor.w	r1, r1, r3
 81007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007c0:	bfc2      	ittt	gt
 81007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007ca:	bd70      	popgt	{r4, r5, r6, pc}
 81007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007d0:	f04f 0e00 	mov.w	lr, #0
 81007d4:	3c01      	subs	r4, #1
 81007d6:	f300 80ab 	bgt.w	8100930 <__aeabi_dmul+0x238>
 81007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007de:	bfde      	ittt	le
 81007e0:	2000      	movle	r0, #0
 81007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007e6:	bd70      	pople	{r4, r5, r6, pc}
 81007e8:	f1c4 0400 	rsb	r4, r4, #0
 81007ec:	3c20      	subs	r4, #32
 81007ee:	da35      	bge.n	810085c <__aeabi_dmul+0x164>
 81007f0:	340c      	adds	r4, #12
 81007f2:	dc1b      	bgt.n	810082c <__aeabi_dmul+0x134>
 81007f4:	f104 0414 	add.w	r4, r4, #20
 81007f8:	f1c4 0520 	rsb	r5, r4, #32
 81007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8100800:	fa20 f004 	lsr.w	r0, r0, r4
 8100804:	fa01 f205 	lsl.w	r2, r1, r5
 8100808:	ea40 0002 	orr.w	r0, r0, r2
 810080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100818:	fa21 f604 	lsr.w	r6, r1, r4
 810081c:	eb42 0106 	adc.w	r1, r2, r6
 8100820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100824:	bf08      	it	eq
 8100826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810082a:	bd70      	pop	{r4, r5, r6, pc}
 810082c:	f1c4 040c 	rsb	r4, r4, #12
 8100830:	f1c4 0520 	rsb	r5, r4, #32
 8100834:	fa00 f304 	lsl.w	r3, r0, r4
 8100838:	fa20 f005 	lsr.w	r0, r0, r5
 810083c:	fa01 f204 	lsl.w	r2, r1, r4
 8100840:	ea40 0002 	orr.w	r0, r0, r2
 8100844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810084c:	f141 0100 	adc.w	r1, r1, #0
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 0520 	rsb	r5, r4, #32
 8100860:	fa00 f205 	lsl.w	r2, r0, r5
 8100864:	ea4e 0e02 	orr.w	lr, lr, r2
 8100868:	fa20 f304 	lsr.w	r3, r0, r4
 810086c:	fa01 f205 	lsl.w	r2, r1, r5
 8100870:	ea43 0302 	orr.w	r3, r3, r2
 8100874:	fa21 f004 	lsr.w	r0, r1, r4
 8100878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810087c:	fa21 f204 	lsr.w	r2, r1, r4
 8100880:	ea20 0002 	bic.w	r0, r0, r2
 8100884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810088c:	bf08      	it	eq
 810088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100892:	bd70      	pop	{r4, r5, r6, pc}
 8100894:	f094 0f00 	teq	r4, #0
 8100898:	d10f      	bne.n	81008ba <__aeabi_dmul+0x1c2>
 810089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 810089e:	0040      	lsls	r0, r0, #1
 81008a0:	eb41 0101 	adc.w	r1, r1, r1
 81008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008a8:	bf08      	it	eq
 81008aa:	3c01      	subeq	r4, #1
 81008ac:	d0f7      	beq.n	810089e <__aeabi_dmul+0x1a6>
 81008ae:	ea41 0106 	orr.w	r1, r1, r6
 81008b2:	f095 0f00 	teq	r5, #0
 81008b6:	bf18      	it	ne
 81008b8:	4770      	bxne	lr
 81008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008be:	0052      	lsls	r2, r2, #1
 81008c0:	eb43 0303 	adc.w	r3, r3, r3
 81008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008c8:	bf08      	it	eq
 81008ca:	3d01      	subeq	r5, #1
 81008cc:	d0f7      	beq.n	81008be <__aeabi_dmul+0x1c6>
 81008ce:	ea43 0306 	orr.w	r3, r3, r6
 81008d2:	4770      	bx	lr
 81008d4:	ea94 0f0c 	teq	r4, ip
 81008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008dc:	bf18      	it	ne
 81008de:	ea95 0f0c 	teqne	r5, ip
 81008e2:	d00c      	beq.n	81008fe <__aeabi_dmul+0x206>
 81008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008e8:	bf18      	it	ne
 81008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008ee:	d1d1      	bne.n	8100894 <__aeabi_dmul+0x19c>
 81008f0:	ea81 0103 	eor.w	r1, r1, r3
 81008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81008f8:	f04f 0000 	mov.w	r0, #0
 81008fc:	bd70      	pop	{r4, r5, r6, pc}
 81008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100902:	bf06      	itte	eq
 8100904:	4610      	moveq	r0, r2
 8100906:	4619      	moveq	r1, r3
 8100908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810090c:	d019      	beq.n	8100942 <__aeabi_dmul+0x24a>
 810090e:	ea94 0f0c 	teq	r4, ip
 8100912:	d102      	bne.n	810091a <__aeabi_dmul+0x222>
 8100914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100918:	d113      	bne.n	8100942 <__aeabi_dmul+0x24a>
 810091a:	ea95 0f0c 	teq	r5, ip
 810091e:	d105      	bne.n	810092c <__aeabi_dmul+0x234>
 8100920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100924:	bf1c      	itt	ne
 8100926:	4610      	movne	r0, r2
 8100928:	4619      	movne	r1, r3
 810092a:	d10a      	bne.n	8100942 <__aeabi_dmul+0x24a>
 810092c:	ea81 0103 	eor.w	r1, r1, r3
 8100930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810093c:	f04f 0000 	mov.w	r0, #0
 8100940:	bd70      	pop	{r4, r5, r6, pc}
 8100942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810094a:	bd70      	pop	{r4, r5, r6, pc}

0810094c <__aeabi_ddiv>:
 810094c:	b570      	push	{r4, r5, r6, lr}
 810094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810095a:	bf1d      	ittte	ne
 810095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100960:	ea94 0f0c 	teqne	r4, ip
 8100964:	ea95 0f0c 	teqne	r5, ip
 8100968:	f000 f8a7 	bleq	8100aba <__aeabi_ddiv+0x16e>
 810096c:	eba4 0405 	sub.w	r4, r4, r5
 8100970:	ea81 0e03 	eor.w	lr, r1, r3
 8100974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810097c:	f000 8088 	beq.w	8100a90 <__aeabi_ddiv+0x144>
 8100980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8100990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8100994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8100998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 810099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009a4:	429d      	cmp	r5, r3
 81009a6:	bf08      	it	eq
 81009a8:	4296      	cmpeq	r6, r2
 81009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009b2:	d202      	bcs.n	81009ba <__aeabi_ddiv+0x6e>
 81009b4:	085b      	lsrs	r3, r3, #1
 81009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ba:	1ab6      	subs	r6, r6, r2
 81009bc:	eb65 0503 	sbc.w	r5, r5, r3
 81009c0:	085b      	lsrs	r3, r3, #1
 81009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 81009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009d6:	bf22      	ittt	cs
 81009d8:	1ab6      	subcs	r6, r6, r2
 81009da:	4675      	movcs	r5, lr
 81009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 81009e0:	085b      	lsrs	r3, r3, #1
 81009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009ee:	bf22      	ittt	cs
 81009f0:	1ab6      	subcs	r6, r6, r2
 81009f2:	4675      	movcs	r5, lr
 81009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 81009f8:	085b      	lsrs	r3, r3, #1
 81009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a2c:	d018      	beq.n	8100a60 <__aeabi_ddiv+0x114>
 8100a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a4a:	d1c0      	bne.n	81009ce <__aeabi_ddiv+0x82>
 8100a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a50:	d10b      	bne.n	8100a6a <__aeabi_ddiv+0x11e>
 8100a52:	ea41 0100 	orr.w	r1, r1, r0
 8100a56:	f04f 0000 	mov.w	r0, #0
 8100a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a5e:	e7b6      	b.n	81009ce <__aeabi_ddiv+0x82>
 8100a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a64:	bf04      	itt	eq
 8100a66:	4301      	orreq	r1, r0
 8100a68:	2000      	moveq	r0, #0
 8100a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a6e:	bf88      	it	hi
 8100a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a74:	f63f aeaf 	bhi.w	81007d6 <__aeabi_dmul+0xde>
 8100a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a7c:	bf04      	itt	eq
 8100a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a86:	f150 0000 	adcs.w	r0, r0, #0
 8100a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a8e:	bd70      	pop	{r4, r5, r6, pc}
 8100a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100a9c:	bfc2      	ittt	gt
 8100a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8100aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100aac:	f04f 0e00 	mov.w	lr, #0
 8100ab0:	3c01      	subs	r4, #1
 8100ab2:	e690      	b.n	81007d6 <__aeabi_dmul+0xde>
 8100ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ab8:	e68d      	b.n	81007d6 <__aeabi_dmul+0xde>
 8100aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100abe:	ea94 0f0c 	teq	r4, ip
 8100ac2:	bf08      	it	eq
 8100ac4:	ea95 0f0c 	teqeq	r5, ip
 8100ac8:	f43f af3b 	beq.w	8100942 <__aeabi_dmul+0x24a>
 8100acc:	ea94 0f0c 	teq	r4, ip
 8100ad0:	d10a      	bne.n	8100ae8 <__aeabi_ddiv+0x19c>
 8100ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ad6:	f47f af34 	bne.w	8100942 <__aeabi_dmul+0x24a>
 8100ada:	ea95 0f0c 	teq	r5, ip
 8100ade:	f47f af25 	bne.w	810092c <__aeabi_dmul+0x234>
 8100ae2:	4610      	mov	r0, r2
 8100ae4:	4619      	mov	r1, r3
 8100ae6:	e72c      	b.n	8100942 <__aeabi_dmul+0x24a>
 8100ae8:	ea95 0f0c 	teq	r5, ip
 8100aec:	d106      	bne.n	8100afc <__aeabi_ddiv+0x1b0>
 8100aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100af2:	f43f aefd 	beq.w	81008f0 <__aeabi_dmul+0x1f8>
 8100af6:	4610      	mov	r0, r2
 8100af8:	4619      	mov	r1, r3
 8100afa:	e722      	b.n	8100942 <__aeabi_dmul+0x24a>
 8100afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b00:	bf18      	it	ne
 8100b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b06:	f47f aec5 	bne.w	8100894 <__aeabi_dmul+0x19c>
 8100b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b0e:	f47f af0d 	bne.w	810092c <__aeabi_dmul+0x234>
 8100b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b16:	f47f aeeb 	bne.w	81008f0 <__aeabi_dmul+0x1f8>
 8100b1a:	e712      	b.n	8100942 <__aeabi_dmul+0x24a>

08100b1c <__gedf2>:
 8100b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b20:	e006      	b.n	8100b30 <__cmpdf2+0x4>
 8100b22:	bf00      	nop

08100b24 <__ledf2>:
 8100b24:	f04f 0c01 	mov.w	ip, #1
 8100b28:	e002      	b.n	8100b30 <__cmpdf2+0x4>
 8100b2a:	bf00      	nop

08100b2c <__cmpdf2>:
 8100b2c:	f04f 0c01 	mov.w	ip, #1
 8100b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b40:	bf18      	it	ne
 8100b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b46:	d01b      	beq.n	8100b80 <__cmpdf2+0x54>
 8100b48:	b001      	add	sp, #4
 8100b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b4e:	bf0c      	ite	eq
 8100b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b54:	ea91 0f03 	teqne	r1, r3
 8100b58:	bf02      	ittt	eq
 8100b5a:	ea90 0f02 	teqeq	r0, r2
 8100b5e:	2000      	moveq	r0, #0
 8100b60:	4770      	bxeq	lr
 8100b62:	f110 0f00 	cmn.w	r0, #0
 8100b66:	ea91 0f03 	teq	r1, r3
 8100b6a:	bf58      	it	pl
 8100b6c:	4299      	cmppl	r1, r3
 8100b6e:	bf08      	it	eq
 8100b70:	4290      	cmpeq	r0, r2
 8100b72:	bf2c      	ite	cs
 8100b74:	17d8      	asrcs	r0, r3, #31
 8100b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b7a:	f040 0001 	orr.w	r0, r0, #1
 8100b7e:	4770      	bx	lr
 8100b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b88:	d102      	bne.n	8100b90 <__cmpdf2+0x64>
 8100b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b8e:	d107      	bne.n	8100ba0 <__cmpdf2+0x74>
 8100b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d1d6      	bne.n	8100b48 <__cmpdf2+0x1c>
 8100b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100b9e:	d0d3      	beq.n	8100b48 <__cmpdf2+0x1c>
 8100ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100ba4:	4770      	bx	lr
 8100ba6:	bf00      	nop

08100ba8 <__aeabi_cdrcmple>:
 8100ba8:	4684      	mov	ip, r0
 8100baa:	4610      	mov	r0, r2
 8100bac:	4662      	mov	r2, ip
 8100bae:	468c      	mov	ip, r1
 8100bb0:	4619      	mov	r1, r3
 8100bb2:	4663      	mov	r3, ip
 8100bb4:	e000      	b.n	8100bb8 <__aeabi_cdcmpeq>
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdcmpeq>:
 8100bb8:	b501      	push	{r0, lr}
 8100bba:	f7ff ffb7 	bl	8100b2c <__cmpdf2>
 8100bbe:	2800      	cmp	r0, #0
 8100bc0:	bf48      	it	mi
 8100bc2:	f110 0f00 	cmnmi.w	r0, #0
 8100bc6:	bd01      	pop	{r0, pc}

08100bc8 <__aeabi_dcmpeq>:
 8100bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bcc:	f7ff fff4 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100bd0:	bf0c      	ite	eq
 8100bd2:	2001      	moveq	r0, #1
 8100bd4:	2000      	movne	r0, #0
 8100bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bda:	bf00      	nop

08100bdc <__aeabi_dcmplt>:
 8100bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100be0:	f7ff ffea 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100be4:	bf34      	ite	cc
 8100be6:	2001      	movcc	r0, #1
 8100be8:	2000      	movcs	r0, #0
 8100bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bee:	bf00      	nop

08100bf0 <__aeabi_dcmple>:
 8100bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf4:	f7ff ffe0 	bl	8100bb8 <__aeabi_cdcmpeq>
 8100bf8:	bf94      	ite	ls
 8100bfa:	2001      	movls	r0, #1
 8100bfc:	2000      	movhi	r0, #0
 8100bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c02:	bf00      	nop

08100c04 <__aeabi_dcmpge>:
 8100c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c08:	f7ff ffce 	bl	8100ba8 <__aeabi_cdrcmple>
 8100c0c:	bf94      	ite	ls
 8100c0e:	2001      	movls	r0, #1
 8100c10:	2000      	movhi	r0, #0
 8100c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c16:	bf00      	nop

08100c18 <__aeabi_dcmpgt>:
 8100c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c1c:	f7ff ffc4 	bl	8100ba8 <__aeabi_cdrcmple>
 8100c20:	bf34      	ite	cc
 8100c22:	2001      	movcc	r0, #1
 8100c24:	2000      	movcs	r0, #0
 8100c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c2a:	bf00      	nop

08100c2c <__aeabi_d2uiz>:
 8100c2c:	004a      	lsls	r2, r1, #1
 8100c2e:	d211      	bcs.n	8100c54 <__aeabi_d2uiz+0x28>
 8100c30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c34:	d211      	bcs.n	8100c5a <__aeabi_d2uiz+0x2e>
 8100c36:	d50d      	bpl.n	8100c54 <__aeabi_d2uiz+0x28>
 8100c38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c40:	d40e      	bmi.n	8100c60 <__aeabi_d2uiz+0x34>
 8100c42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c52:	4770      	bx	lr
 8100c54:	f04f 0000 	mov.w	r0, #0
 8100c58:	4770      	bx	lr
 8100c5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100c5e:	d102      	bne.n	8100c66 <__aeabi_d2uiz+0x3a>
 8100c60:	f04f 30ff 	mov.w	r0, #4294967295
 8100c64:	4770      	bx	lr
 8100c66:	f04f 0000 	mov.w	r0, #0
 8100c6a:	4770      	bx	lr

08100c6c <__aeabi_uldivmod>:
 8100c6c:	b953      	cbnz	r3, 8100c84 <__aeabi_uldivmod+0x18>
 8100c6e:	b94a      	cbnz	r2, 8100c84 <__aeabi_uldivmod+0x18>
 8100c70:	2900      	cmp	r1, #0
 8100c72:	bf08      	it	eq
 8100c74:	2800      	cmpeq	r0, #0
 8100c76:	bf1c      	itt	ne
 8100c78:	f04f 31ff 	movne.w	r1, #4294967295
 8100c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8100c80:	f000 b96a 	b.w	8100f58 <__aeabi_idiv0>
 8100c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8100c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100c8c:	f000 f806 	bl	8100c9c <__udivmoddi4>
 8100c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100c98:	b004      	add	sp, #16
 8100c9a:	4770      	bx	lr

08100c9c <__udivmoddi4>:
 8100c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100ca0:	9d08      	ldr	r5, [sp, #32]
 8100ca2:	460c      	mov	r4, r1
 8100ca4:	2b00      	cmp	r3, #0
 8100ca6:	d14e      	bne.n	8100d46 <__udivmoddi4+0xaa>
 8100ca8:	4694      	mov	ip, r2
 8100caa:	458c      	cmp	ip, r1
 8100cac:	4686      	mov	lr, r0
 8100cae:	fab2 f282 	clz	r2, r2
 8100cb2:	d962      	bls.n	8100d7a <__udivmoddi4+0xde>
 8100cb4:	b14a      	cbz	r2, 8100cca <__udivmoddi4+0x2e>
 8100cb6:	f1c2 0320 	rsb	r3, r2, #32
 8100cba:	4091      	lsls	r1, r2
 8100cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8100cc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8100cc4:	4319      	orrs	r1, r3
 8100cc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8100cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100cce:	fa1f f68c 	uxth.w	r6, ip
 8100cd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8100cd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100cda:	fb07 1114 	mls	r1, r7, r4, r1
 8100cde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100ce2:	fb04 f106 	mul.w	r1, r4, r6
 8100ce6:	4299      	cmp	r1, r3
 8100ce8:	d90a      	bls.n	8100d00 <__udivmoddi4+0x64>
 8100cea:	eb1c 0303 	adds.w	r3, ip, r3
 8100cee:	f104 30ff 	add.w	r0, r4, #4294967295
 8100cf2:	f080 8112 	bcs.w	8100f1a <__udivmoddi4+0x27e>
 8100cf6:	4299      	cmp	r1, r3
 8100cf8:	f240 810f 	bls.w	8100f1a <__udivmoddi4+0x27e>
 8100cfc:	3c02      	subs	r4, #2
 8100cfe:	4463      	add	r3, ip
 8100d00:	1a59      	subs	r1, r3, r1
 8100d02:	fa1f f38e 	uxth.w	r3, lr
 8100d06:	fbb1 f0f7 	udiv	r0, r1, r7
 8100d0a:	fb07 1110 	mls	r1, r7, r0, r1
 8100d0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d12:	fb00 f606 	mul.w	r6, r0, r6
 8100d16:	429e      	cmp	r6, r3
 8100d18:	d90a      	bls.n	8100d30 <__udivmoddi4+0x94>
 8100d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8100d1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8100d22:	f080 80fc 	bcs.w	8100f1e <__udivmoddi4+0x282>
 8100d26:	429e      	cmp	r6, r3
 8100d28:	f240 80f9 	bls.w	8100f1e <__udivmoddi4+0x282>
 8100d2c:	4463      	add	r3, ip
 8100d2e:	3802      	subs	r0, #2
 8100d30:	1b9b      	subs	r3, r3, r6
 8100d32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100d36:	2100      	movs	r1, #0
 8100d38:	b11d      	cbz	r5, 8100d42 <__udivmoddi4+0xa6>
 8100d3a:	40d3      	lsrs	r3, r2
 8100d3c:	2200      	movs	r2, #0
 8100d3e:	e9c5 3200 	strd	r3, r2, [r5]
 8100d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d46:	428b      	cmp	r3, r1
 8100d48:	d905      	bls.n	8100d56 <__udivmoddi4+0xba>
 8100d4a:	b10d      	cbz	r5, 8100d50 <__udivmoddi4+0xb4>
 8100d4c:	e9c5 0100 	strd	r0, r1, [r5]
 8100d50:	2100      	movs	r1, #0
 8100d52:	4608      	mov	r0, r1
 8100d54:	e7f5      	b.n	8100d42 <__udivmoddi4+0xa6>
 8100d56:	fab3 f183 	clz	r1, r3
 8100d5a:	2900      	cmp	r1, #0
 8100d5c:	d146      	bne.n	8100dec <__udivmoddi4+0x150>
 8100d5e:	42a3      	cmp	r3, r4
 8100d60:	d302      	bcc.n	8100d68 <__udivmoddi4+0xcc>
 8100d62:	4290      	cmp	r0, r2
 8100d64:	f0c0 80f0 	bcc.w	8100f48 <__udivmoddi4+0x2ac>
 8100d68:	1a86      	subs	r6, r0, r2
 8100d6a:	eb64 0303 	sbc.w	r3, r4, r3
 8100d6e:	2001      	movs	r0, #1
 8100d70:	2d00      	cmp	r5, #0
 8100d72:	d0e6      	beq.n	8100d42 <__udivmoddi4+0xa6>
 8100d74:	e9c5 6300 	strd	r6, r3, [r5]
 8100d78:	e7e3      	b.n	8100d42 <__udivmoddi4+0xa6>
 8100d7a:	2a00      	cmp	r2, #0
 8100d7c:	f040 8090 	bne.w	8100ea0 <__udivmoddi4+0x204>
 8100d80:	eba1 040c 	sub.w	r4, r1, ip
 8100d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100d88:	fa1f f78c 	uxth.w	r7, ip
 8100d8c:	2101      	movs	r1, #1
 8100d8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8100d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100d96:	fb08 4416 	mls	r4, r8, r6, r4
 8100d9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100d9e:	fb07 f006 	mul.w	r0, r7, r6
 8100da2:	4298      	cmp	r0, r3
 8100da4:	d908      	bls.n	8100db8 <__udivmoddi4+0x11c>
 8100da6:	eb1c 0303 	adds.w	r3, ip, r3
 8100daa:	f106 34ff 	add.w	r4, r6, #4294967295
 8100dae:	d202      	bcs.n	8100db6 <__udivmoddi4+0x11a>
 8100db0:	4298      	cmp	r0, r3
 8100db2:	f200 80cd 	bhi.w	8100f50 <__udivmoddi4+0x2b4>
 8100db6:	4626      	mov	r6, r4
 8100db8:	1a1c      	subs	r4, r3, r0
 8100dba:	fa1f f38e 	uxth.w	r3, lr
 8100dbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8100dc2:	fb08 4410 	mls	r4, r8, r0, r4
 8100dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100dca:	fb00 f707 	mul.w	r7, r0, r7
 8100dce:	429f      	cmp	r7, r3
 8100dd0:	d908      	bls.n	8100de4 <__udivmoddi4+0x148>
 8100dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8100dd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8100dda:	d202      	bcs.n	8100de2 <__udivmoddi4+0x146>
 8100ddc:	429f      	cmp	r7, r3
 8100dde:	f200 80b0 	bhi.w	8100f42 <__udivmoddi4+0x2a6>
 8100de2:	4620      	mov	r0, r4
 8100de4:	1bdb      	subs	r3, r3, r7
 8100de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100dea:	e7a5      	b.n	8100d38 <__udivmoddi4+0x9c>
 8100dec:	f1c1 0620 	rsb	r6, r1, #32
 8100df0:	408b      	lsls	r3, r1
 8100df2:	fa22 f706 	lsr.w	r7, r2, r6
 8100df6:	431f      	orrs	r7, r3
 8100df8:	fa20 fc06 	lsr.w	ip, r0, r6
 8100dfc:	fa04 f301 	lsl.w	r3, r4, r1
 8100e00:	ea43 030c 	orr.w	r3, r3, ip
 8100e04:	40f4      	lsrs	r4, r6
 8100e06:	fa00 f801 	lsl.w	r8, r0, r1
 8100e0a:	0c38      	lsrs	r0, r7, #16
 8100e0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100e10:	fbb4 fef0 	udiv	lr, r4, r0
 8100e14:	fa1f fc87 	uxth.w	ip, r7
 8100e18:	fb00 441e 	mls	r4, r0, lr, r4
 8100e1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100e20:	fb0e f90c 	mul.w	r9, lr, ip
 8100e24:	45a1      	cmp	r9, r4
 8100e26:	fa02 f201 	lsl.w	r2, r2, r1
 8100e2a:	d90a      	bls.n	8100e42 <__udivmoddi4+0x1a6>
 8100e2c:	193c      	adds	r4, r7, r4
 8100e2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100e32:	f080 8084 	bcs.w	8100f3e <__udivmoddi4+0x2a2>
 8100e36:	45a1      	cmp	r9, r4
 8100e38:	f240 8081 	bls.w	8100f3e <__udivmoddi4+0x2a2>
 8100e3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8100e40:	443c      	add	r4, r7
 8100e42:	eba4 0409 	sub.w	r4, r4, r9
 8100e46:	fa1f f983 	uxth.w	r9, r3
 8100e4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8100e4e:	fb00 4413 	mls	r4, r0, r3, r4
 8100e52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100e56:	fb03 fc0c 	mul.w	ip, r3, ip
 8100e5a:	45a4      	cmp	ip, r4
 8100e5c:	d907      	bls.n	8100e6e <__udivmoddi4+0x1d2>
 8100e5e:	193c      	adds	r4, r7, r4
 8100e60:	f103 30ff 	add.w	r0, r3, #4294967295
 8100e64:	d267      	bcs.n	8100f36 <__udivmoddi4+0x29a>
 8100e66:	45a4      	cmp	ip, r4
 8100e68:	d965      	bls.n	8100f36 <__udivmoddi4+0x29a>
 8100e6a:	3b02      	subs	r3, #2
 8100e6c:	443c      	add	r4, r7
 8100e6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100e72:	fba0 9302 	umull	r9, r3, r0, r2
 8100e76:	eba4 040c 	sub.w	r4, r4, ip
 8100e7a:	429c      	cmp	r4, r3
 8100e7c:	46ce      	mov	lr, r9
 8100e7e:	469c      	mov	ip, r3
 8100e80:	d351      	bcc.n	8100f26 <__udivmoddi4+0x28a>
 8100e82:	d04e      	beq.n	8100f22 <__udivmoddi4+0x286>
 8100e84:	b155      	cbz	r5, 8100e9c <__udivmoddi4+0x200>
 8100e86:	ebb8 030e 	subs.w	r3, r8, lr
 8100e8a:	eb64 040c 	sbc.w	r4, r4, ip
 8100e8e:	fa04 f606 	lsl.w	r6, r4, r6
 8100e92:	40cb      	lsrs	r3, r1
 8100e94:	431e      	orrs	r6, r3
 8100e96:	40cc      	lsrs	r4, r1
 8100e98:	e9c5 6400 	strd	r6, r4, [r5]
 8100e9c:	2100      	movs	r1, #0
 8100e9e:	e750      	b.n	8100d42 <__udivmoddi4+0xa6>
 8100ea0:	f1c2 0320 	rsb	r3, r2, #32
 8100ea4:	fa20 f103 	lsr.w	r1, r0, r3
 8100ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8100eac:	fa24 f303 	lsr.w	r3, r4, r3
 8100eb0:	4094      	lsls	r4, r2
 8100eb2:	430c      	orrs	r4, r1
 8100eb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100eb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8100ebc:	fa1f f78c 	uxth.w	r7, ip
 8100ec0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ec4:	fb08 3110 	mls	r1, r8, r0, r3
 8100ec8:	0c23      	lsrs	r3, r4, #16
 8100eca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100ece:	fb00 f107 	mul.w	r1, r0, r7
 8100ed2:	4299      	cmp	r1, r3
 8100ed4:	d908      	bls.n	8100ee8 <__udivmoddi4+0x24c>
 8100ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8100eda:	f100 36ff 	add.w	r6, r0, #4294967295
 8100ede:	d22c      	bcs.n	8100f3a <__udivmoddi4+0x29e>
 8100ee0:	4299      	cmp	r1, r3
 8100ee2:	d92a      	bls.n	8100f3a <__udivmoddi4+0x29e>
 8100ee4:	3802      	subs	r0, #2
 8100ee6:	4463      	add	r3, ip
 8100ee8:	1a5b      	subs	r3, r3, r1
 8100eea:	b2a4      	uxth	r4, r4
 8100eec:	fbb3 f1f8 	udiv	r1, r3, r8
 8100ef0:	fb08 3311 	mls	r3, r8, r1, r3
 8100ef4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ef8:	fb01 f307 	mul.w	r3, r1, r7
 8100efc:	42a3      	cmp	r3, r4
 8100efe:	d908      	bls.n	8100f12 <__udivmoddi4+0x276>
 8100f00:	eb1c 0404 	adds.w	r4, ip, r4
 8100f04:	f101 36ff 	add.w	r6, r1, #4294967295
 8100f08:	d213      	bcs.n	8100f32 <__udivmoddi4+0x296>
 8100f0a:	42a3      	cmp	r3, r4
 8100f0c:	d911      	bls.n	8100f32 <__udivmoddi4+0x296>
 8100f0e:	3902      	subs	r1, #2
 8100f10:	4464      	add	r4, ip
 8100f12:	1ae4      	subs	r4, r4, r3
 8100f14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100f18:	e739      	b.n	8100d8e <__udivmoddi4+0xf2>
 8100f1a:	4604      	mov	r4, r0
 8100f1c:	e6f0      	b.n	8100d00 <__udivmoddi4+0x64>
 8100f1e:	4608      	mov	r0, r1
 8100f20:	e706      	b.n	8100d30 <__udivmoddi4+0x94>
 8100f22:	45c8      	cmp	r8, r9
 8100f24:	d2ae      	bcs.n	8100e84 <__udivmoddi4+0x1e8>
 8100f26:	ebb9 0e02 	subs.w	lr, r9, r2
 8100f2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8100f2e:	3801      	subs	r0, #1
 8100f30:	e7a8      	b.n	8100e84 <__udivmoddi4+0x1e8>
 8100f32:	4631      	mov	r1, r6
 8100f34:	e7ed      	b.n	8100f12 <__udivmoddi4+0x276>
 8100f36:	4603      	mov	r3, r0
 8100f38:	e799      	b.n	8100e6e <__udivmoddi4+0x1d2>
 8100f3a:	4630      	mov	r0, r6
 8100f3c:	e7d4      	b.n	8100ee8 <__udivmoddi4+0x24c>
 8100f3e:	46d6      	mov	lr, sl
 8100f40:	e77f      	b.n	8100e42 <__udivmoddi4+0x1a6>
 8100f42:	4463      	add	r3, ip
 8100f44:	3802      	subs	r0, #2
 8100f46:	e74d      	b.n	8100de4 <__udivmoddi4+0x148>
 8100f48:	4606      	mov	r6, r0
 8100f4a:	4623      	mov	r3, r4
 8100f4c:	4608      	mov	r0, r1
 8100f4e:	e70f      	b.n	8100d70 <__udivmoddi4+0xd4>
 8100f50:	3e02      	subs	r6, #2
 8100f52:	4463      	add	r3, ip
 8100f54:	e730      	b.n	8100db8 <__udivmoddi4+0x11c>
 8100f56:	bf00      	nop

08100f58 <__aeabi_idiv0>:
 8100f58:	4770      	bx	lr
 8100f5a:	bf00      	nop

08100f5c <_ZN10LogPrinterC1Ev>:

#include <stdarg.h> // Include this for va_list and related functions

extern osMutexId_t printMutexHandle;

LogPrinter::LogPrinter() : mutexHandle(printMutexHandle) {}
 8100f5c:	b480      	push	{r7}
 8100f5e:	b083      	sub	sp, #12
 8100f60:	af00      	add	r7, sp, #0
 8100f62:	6078      	str	r0, [r7, #4]
 8100f64:	4b05      	ldr	r3, [pc, #20]	@ (8100f7c <_ZN10LogPrinterC1Ev+0x20>)
 8100f66:	681a      	ldr	r2, [r3, #0]
 8100f68:	687b      	ldr	r3, [r7, #4]
 8100f6a:	601a      	str	r2, [r3, #0]
 8100f6c:	687b      	ldr	r3, [r7, #4]
 8100f6e:	4618      	mov	r0, r3
 8100f70:	370c      	adds	r7, #12
 8100f72:	46bd      	mov	sp, r7
 8100f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f78:	4770      	bx	lr
 8100f7a:	bf00      	nop
 8100f7c:	100001c8 	.word	0x100001c8

08100f80 <_ZN10LogPrinter8instanceEv>:

LogPrinter& LogPrinter::instance()
{
 8100f80:	b580      	push	{r7, lr}
 8100f82:	af00      	add	r7, sp, #0
    static LogPrinter inst;
 8100f84:	4b10      	ldr	r3, [pc, #64]	@ (8100fc8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100f86:	681b      	ldr	r3, [r3, #0]
 8100f88:	f3bf 8f5b 	dmb	ish
 8100f8c:	f003 0301 	and.w	r3, r3, #1
 8100f90:	2b00      	cmp	r3, #0
 8100f92:	bf0c      	ite	eq
 8100f94:	2301      	moveq	r3, #1
 8100f96:	2300      	movne	r3, #0
 8100f98:	b2db      	uxtb	r3, r3
 8100f9a:	2b00      	cmp	r3, #0
 8100f9c:	d010      	beq.n	8100fc0 <_ZN10LogPrinter8instanceEv+0x40>
 8100f9e:	480a      	ldr	r0, [pc, #40]	@ (8100fc8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100fa0:	f022 faec 	bl	812357c <__cxa_guard_acquire>
 8100fa4:	4603      	mov	r3, r0
 8100fa6:	2b00      	cmp	r3, #0
 8100fa8:	bf14      	ite	ne
 8100faa:	2301      	movne	r3, #1
 8100fac:	2300      	moveq	r3, #0
 8100fae:	b2db      	uxtb	r3, r3
 8100fb0:	2b00      	cmp	r3, #0
 8100fb2:	d005      	beq.n	8100fc0 <_ZN10LogPrinter8instanceEv+0x40>
 8100fb4:	4805      	ldr	r0, [pc, #20]	@ (8100fcc <_ZN10LogPrinter8instanceEv+0x4c>)
 8100fb6:	f7ff ffd1 	bl	8100f5c <_ZN10LogPrinterC1Ev>
 8100fba:	4803      	ldr	r0, [pc, #12]	@ (8100fc8 <_ZN10LogPrinter8instanceEv+0x48>)
 8100fbc:	f022 faea 	bl	8123594 <__cxa_guard_release>
    return inst;
 8100fc0:	4b02      	ldr	r3, [pc, #8]	@ (8100fcc <_ZN10LogPrinter8instanceEv+0x4c>)
}
 8100fc2:	4618      	mov	r0, r3
 8100fc4:	bd80      	pop	{r7, pc}
 8100fc6:	bf00      	nop
 8100fc8:	100000b0 	.word	0x100000b0
 8100fcc:	100000ac 	.word	0x100000ac

08100fd0 <_ZN10LogPrinter10printDebugEPKcz>:

void LogPrinter::printDebug(const char* format, ...)
{
 8100fd0:	b40e      	push	{r1, r2, r3}
 8100fd2:	b580      	push	{r7, lr}
 8100fd4:	b085      	sub	sp, #20
 8100fd6:	af00      	add	r7, sp, #0
 8100fd8:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutexHandle, portMAX_DELAY);
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	681b      	ldr	r3, [r3, #0]
 8100fde:	f04f 31ff 	mov.w	r1, #4294967295
 8100fe2:	4618      	mov	r0, r3
 8100fe4:	f012 fb32 	bl	811364c <osMutexAcquire>
    va_list args;
    va_start(args, format); // Initialize args
 8100fe8:	f107 0320 	add.w	r3, r7, #32
 8100fec:	60fb      	str	r3, [r7, #12]
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 8100fee:	4b11      	ldr	r3, [pc, #68]	@ (8101034 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8100ff0:	681b      	ldr	r3, [r3, #0]
 8100ff2:	689b      	ldr	r3, [r3, #8]
 8100ff4:	68fa      	ldr	r2, [r7, #12]
 8100ff6:	69f9      	ldr	r1, [r7, #28]
 8100ff8:	4618      	mov	r0, r3
 8100ffa:	f022 ffbb 	bl	8123f74 <vfiprintf>
    fprintf(stdout, "\r\n");
 8100ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8101034 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8101000:	681b      	ldr	r3, [r3, #0]
 8101002:	689b      	ldr	r3, [r3, #8]
 8101004:	2202      	movs	r2, #2
 8101006:	2101      	movs	r1, #1
 8101008:	480b      	ldr	r0, [pc, #44]	@ (8101038 <_ZN10LogPrinter10printDebugEPKcz+0x68>)
 810100a:	f023 fb19 	bl	8124640 <fwrite>
    fflush(stdout);
 810100e:	4b09      	ldr	r3, [pc, #36]	@ (8101034 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8101010:	681b      	ldr	r3, [r3, #0]
 8101012:	689b      	ldr	r3, [r3, #8]
 8101014:	4618      	mov	r0, r3
 8101016:	f023 f9f1 	bl	81243fc <fflush>
    va_end(args); // Clean up the va_list
    osMutexRelease(mutexHandle);
 810101a:	687b      	ldr	r3, [r7, #4]
 810101c:	681b      	ldr	r3, [r3, #0]
 810101e:	4618      	mov	r0, r3
 8101020:	f012 fb5f 	bl	81136e2 <osMutexRelease>
}
 8101024:	bf00      	nop
 8101026:	3714      	adds	r7, #20
 8101028:	46bd      	mov	sp, r7
 810102a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810102e:	b003      	add	sp, #12
 8101030:	4770      	bx	lr
 8101032:	bf00      	nop
 8101034:	10000040 	.word	0x10000040
 8101038:	08124d54 	.word	0x08124d54

0810103c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 810103c:	b580      	push	{r7, lr}
 810103e:	b082      	sub	sp, #8
 8101040:	af00      	add	r7, sp, #0
 8101042:	6078      	str	r0, [r7, #4]
    if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 8101044:	687b      	ldr	r3, [r7, #4]
 8101046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810104a:	2b00      	cmp	r3, #0
 810104c:	d005      	beq.n	810105a <HAL_HSEM_FreeCallback+0x1e>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 810104e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8101052:	f00d febf 	bl	810edd4 <HAL_HSEM_ActivateNotification>
        /* New message received */
        prvCoreInterruptHandler();
 8101056:	f000 f845 	bl	81010e4 <prvCoreInterruptHandler>
    }

    if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0)
 810105a:	687b      	ldr	r3, [r7, #4]
 810105c:	2b00      	cmp	r3, #0
 810105e:	da05      	bge.n	810106c <HAL_HSEM_FreeCallback+0x30>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8101060:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8101064:	f00d feb6 	bl	810edd4 <HAL_HSEM_ActivateNotification>
        /* TX queue is empty => wake-up task trying to send a message */
        prvCoreWakeupInterruptHandler();
 8101068:	f000 f860 	bl	810112c <prvCoreWakeupInterruptHandler>
    }
}
 810106c:	bf00      	nop
 810106e:	3708      	adds	r7, #8
 8101070:	46bd      	mov	sp, r7
 8101072:	bd80      	pop	{r7, pc}

08101074 <ipc_init>:

int ipc_init(void)
{
 8101074:	b580      	push	{r7, lr}
 8101076:	b082      	sub	sp, #8
 8101078:	af02      	add	r7, sp, #8
#ifdef CORE_CM7
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
#endif
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 810107a:	4b0e      	ldr	r3, [pc, #56]	@ (81010b4 <ipc_init+0x40>)
 810107c:	9300      	str	r3, [sp, #0]
 810107e:	4b0e      	ldr	r3, [pc, #56]	@ (81010b8 <ipc_init+0x44>)
 8101080:	2201      	movs	r2, #1
 8101082:	2100      	movs	r1, #0
 8101084:	f640 3054 	movw	r0, #2900	@ 0xb54
 8101088:	f014 fbc4 	bl	8115814 <xStreamBufferGenericCreateStatic>
 810108c:	4603      	mov	r3, r0
 810108e:	4a0b      	ldr	r2, [pc, #44]	@ (81010bc <ipc_init+0x48>)
 8101090:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 8101092:	4b0b      	ldr	r3, [pc, #44]	@ (81010c0 <ipc_init+0x4c>)
 8101094:	9300      	str	r3, [sp, #0]
 8101096:	4b0b      	ldr	r3, [pc, #44]	@ (81010c4 <ipc_init+0x50>)
 8101098:	2201      	movs	r2, #1
 810109a:	2100      	movs	r1, #0
 810109c:	f640 3054 	movw	r0, #2900	@ 0xb54
 81010a0:	f014 fbb8 	bl	8115814 <xStreamBufferGenericCreateStatic>
 81010a4:	4603      	mov	r3, r0
 81010a6:	4a05      	ldr	r2, [pc, #20]	@ (81010bc <ipc_init+0x48>)
 81010a8:	6053      	str	r3, [r2, #4]

    return 0;
 81010aa:	2300      	movs	r3, #0
}
 81010ac:	4618      	mov	r0, r3
 81010ae:	46bd      	mov	sp, r7
 81010b0:	bd80      	pop	{r7, pc}
 81010b2:	bf00      	nop
 81010b4:	38000008 	.word	0x38000008
 81010b8:	38000050 	.word	0x38000050
 81010bc:	38000000 	.word	0x38000000
 81010c0:	3800002c 	.word	0x3800002c
 81010c4:	38000ba4 	.word	0x38000ba4

081010c8 <ipc_start>:

int ipc_start(void){
 81010c8:	b580      	push	{r7, lr}
 81010ca:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81010cc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81010d0:	f00d fe80 	bl	810edd4 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81010d4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81010d8:	f00d fe7c 	bl	810edd4 <HAL_HSEM_ActivateNotification>
    return 0;
 81010dc:	2300      	movs	r3, #0
}
 81010de:	4618      	mov	r0, r3
 81010e0:	bd80      	pop	{r7, pc}
	...

081010e4 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 81010e4:	b580      	push	{r7, lr}
 81010e6:	b082      	sub	sp, #8
 81010e8:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81010ea:	2300      	movs	r3, #0
 81010ec:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 81010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8101124 <prvCoreInterruptHandler+0x40>)
 81010f0:	681b      	ldr	r3, [r3, #0]
 81010f2:	2b00      	cmp	r3, #0
 81010f4:	d012      	beq.n	810111c <prvCoreInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferSendCompletedFromISR(xrx_data_buf, &xHigherPriorityTaskWoken);
 81010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8101124 <prvCoreInterruptHandler+0x40>)
 81010f8:	681b      	ldr	r3, [r3, #0]
 81010fa:	1d3a      	adds	r2, r7, #4
 81010fc:	4611      	mov	r1, r2
 81010fe:	4618      	mov	r0, r3
 8101100:	f014 fde4 	bl	8115ccc <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	2b00      	cmp	r3, #0
 8101108:	d009      	beq.n	810111e <prvCoreInterruptHandler+0x3a>
 810110a:	4b07      	ldr	r3, [pc, #28]	@ (8101128 <prvCoreInterruptHandler+0x44>)
 810110c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101110:	601a      	str	r2, [r3, #0]
 8101112:	f3bf 8f4f 	dsb	sy
 8101116:	f3bf 8f6f 	isb	sy
 810111a:	e000      	b.n	810111e <prvCoreInterruptHandler+0x3a>
    	return;
 810111c:	bf00      	nop
}
 810111e:	3708      	adds	r7, #8
 8101120:	46bd      	mov	sp, r7
 8101122:	bd80      	pop	{r7, pc}
 8101124:	38000000 	.word	0x38000000
 8101128:	e000ed04 	.word	0xe000ed04

0810112c <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 810112c:	b580      	push	{r7, lr}
 810112e:	b082      	sub	sp, #8
 8101130:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8101132:	2300      	movs	r3, #0
 8101134:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 8101136:	4b0d      	ldr	r3, [pc, #52]	@ (810116c <prvCoreWakeupInterruptHandler+0x40>)
 8101138:	685b      	ldr	r3, [r3, #4]
 810113a:	2b00      	cmp	r3, #0
 810113c:	d012      	beq.n	8101164 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferReceiveCompletedFromISR(xtx_data_buf, &xHigherPriorityTaskWoken);
 810113e:	4b0b      	ldr	r3, [pc, #44]	@ (810116c <prvCoreWakeupInterruptHandler+0x40>)
 8101140:	685b      	ldr	r3, [r3, #4]
 8101142:	1d3a      	adds	r2, r7, #4
 8101144:	4611      	mov	r1, r2
 8101146:	4618      	mov	r0, r3
 8101148:	f014 fe04 	bl	8115d54 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 810114c:	687b      	ldr	r3, [r7, #4]
 810114e:	2b00      	cmp	r3, #0
 8101150:	d009      	beq.n	8101166 <prvCoreWakeupInterruptHandler+0x3a>
 8101152:	4b07      	ldr	r3, [pc, #28]	@ (8101170 <prvCoreWakeupInterruptHandler+0x44>)
 8101154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101158:	601a      	str	r2, [r3, #0]
 810115a:	f3bf 8f4f 	dsb	sy
 810115e:	f3bf 8f6f 	isb	sy
 8101162:	e000      	b.n	8101166 <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 8101164:	bf00      	nop
}
 8101166:	3708      	adds	r7, #8
 8101168:	46bd      	mov	sp, r7
 810116a:	bd80      	pop	{r7, pc}
 810116c:	38000000 	.word	0x38000000
 8101170:	e000ed04 	.word	0xe000ed04

08101174 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 8101174:	b580      	push	{r7, lr}
 8101176:	b084      	sub	sp, #16
 8101178:	af00      	add	r7, sp, #0
 810117a:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 810117c:	687b      	ldr	r3, [r7, #4]
 810117e:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101180:	f3bf 8f4f 	dsb	sy
}
 8101184:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 8101186:	4b12      	ldr	r3, [pc, #72]	@ (81011d0 <vGenerateRemoteInterrupt+0x5c>)
 8101188:	685b      	ldr	r3, [r3, #4]
 810118a:	68fa      	ldr	r2, [r7, #12]
 810118c:	429a      	cmp	r2, r3
 810118e:	d10b      	bne.n	81011a8 <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 8101190:	211b      	movs	r1, #27
 8101192:	201d      	movs	r0, #29
 8101194:	f00d fde6 	bl	810ed64 <HAL_HSEM_Take>
 8101198:	4603      	mov	r3, r0
 810119a:	2b00      	cmp	r3, #0
 810119c:	d114      	bne.n	81011c8 <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 810119e:	211b      	movs	r1, #27
 81011a0:	201d      	movs	r0, #29
 81011a2:	f00d fe03 	bl	810edac <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 81011a6:	e00f      	b.n	81011c8 <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 81011a8:	4b09      	ldr	r3, [pc, #36]	@ (81011d0 <vGenerateRemoteInterrupt+0x5c>)
 81011aa:	681b      	ldr	r3, [r3, #0]
 81011ac:	68fa      	ldr	r2, [r7, #12]
 81011ae:	429a      	cmp	r2, r3
 81011b0:	d10a      	bne.n	81011c8 <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 81011b2:	211b      	movs	r1, #27
 81011b4:	201e      	movs	r0, #30
 81011b6:	f00d fdd5 	bl	810ed64 <HAL_HSEM_Take>
 81011ba:	4603      	mov	r3, r0
 81011bc:	2b00      	cmp	r3, #0
 81011be:	d103      	bne.n	81011c8 <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 81011c0:	211b      	movs	r1, #27
 81011c2:	201e      	movs	r0, #30
 81011c4:	f00d fdf2 	bl	810edac <HAL_HSEM_Release>
}
 81011c8:	bf00      	nop
 81011ca:	3710      	adds	r7, #16
 81011cc:	46bd      	mov	sp, r7
 81011ce:	bd80      	pop	{r7, pc}
 81011d0:	38000000 	.word	0x38000000

081011d4 <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81011d4:	b580      	push	{r7, lr}
 81011d6:	b086      	sub	sp, #24
 81011d8:	af00      	add	r7, sp, #0
 81011da:	60f8      	str	r0, [r7, #12]
 81011dc:	60b9      	str	r1, [r7, #8]
 81011de:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 81011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8101220 <ipc_sendmsg+0x4c>)
 81011e2:	685b      	ldr	r3, [r3, #4]
 81011e4:	2b00      	cmp	r3, #0
 81011e6:	d101      	bne.n	81011ec <ipc_sendmsg+0x18>
      return 0;
 81011e8:	2300      	movs	r3, #0
 81011ea:	e015      	b.n	8101218 <ipc_sendmsg+0x44>

    if(timeout < 0)
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	2b00      	cmp	r3, #0
 81011f0:	da09      	bge.n	8101206 <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 81011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8101220 <ipc_sendmsg+0x4c>)
 81011f4:	6858      	ldr	r0, [r3, #4]
 81011f6:	f04f 33ff 	mov.w	r3, #4294967295
 81011fa:	68ba      	ldr	r2, [r7, #8]
 81011fc:	68f9      	ldr	r1, [r7, #12]
 81011fe:	f014 fbc3 	bl	8115988 <xStreamBufferSend>
 8101202:	6178      	str	r0, [r7, #20]
 8101204:	e007      	b.n	8101216 <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 8101206:	4b06      	ldr	r3, [pc, #24]	@ (8101220 <ipc_sendmsg+0x4c>)
 8101208:	6858      	ldr	r0, [r3, #4]
 810120a:	687b      	ldr	r3, [r7, #4]
 810120c:	68ba      	ldr	r2, [r7, #8]
 810120e:	68f9      	ldr	r1, [r7, #12]
 8101210:	f014 fbba 	bl	8115988 <xStreamBufferSend>
 8101214:	6178      	str	r0, [r7, #20]

    return len;
 8101216:	697b      	ldr	r3, [r7, #20]
}
 8101218:	4618      	mov	r0, r3
 810121a:	3718      	adds	r7, #24
 810121c:	46bd      	mov	sp, r7
 810121e:	bd80      	pop	{r7, pc}
 8101220:	38000000 	.word	0x38000000

08101224 <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8101224:	b580      	push	{r7, lr}
 8101226:	b086      	sub	sp, #24
 8101228:	af00      	add	r7, sp, #0
 810122a:	60f8      	str	r0, [r7, #12]
 810122c:	60b9      	str	r1, [r7, #8]
 810122e:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	2b00      	cmp	r3, #0
 8101234:	da09      	bge.n	810124a <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 8101236:	4b0b      	ldr	r3, [pc, #44]	@ (8101264 <ipc_recvmsg+0x40>)
 8101238:	6818      	ldr	r0, [r3, #0]
 810123a:	f04f 33ff 	mov.w	r3, #4294967295
 810123e:	68ba      	ldr	r2, [r7, #8]
 8101240:	68f9      	ldr	r1, [r7, #12]
 8101242:	f014 fc88 	bl	8115b56 <xStreamBufferReceive>
 8101246:	6178      	str	r0, [r7, #20]
 8101248:	e007      	b.n	810125a <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 810124a:	4b06      	ldr	r3, [pc, #24]	@ (8101264 <ipc_recvmsg+0x40>)
 810124c:	6818      	ldr	r0, [r3, #0]
 810124e:	687b      	ldr	r3, [r7, #4]
 8101250:	68ba      	ldr	r2, [r7, #8]
 8101252:	68f9      	ldr	r1, [r7, #12]
 8101254:	f014 fc7f 	bl	8115b56 <xStreamBufferReceive>
 8101258:	6178      	str	r0, [r7, #20]

    return len;
 810125a:	697b      	ldr	r3, [r7, #20]
}
 810125c:	4618      	mov	r0, r3
 810125e:	3718      	adds	r7, #24
 8101260:	46bd      	mov	sp, r7
 8101262:	bd80      	pop	{r7, pc}
 8101264:	38000000 	.word	0x38000000

08101268 <__is_constant_evaluated>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8101268:	b480      	push	{r7}
 810126a:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 810126c:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 810126e:	4618      	mov	r0, r3
 8101270:	46bd      	mov	sp, r7
 8101272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101276:	4770      	bx	lr

08101278 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8101278:	b480      	push	{r7}
 810127a:	b083      	sub	sp, #12
 810127c:	af00      	add	r7, sp, #0
 810127e:	6078      	str	r0, [r7, #4]
 8101280:	6039      	str	r1, [r7, #0]
 8101282:	683b      	ldr	r3, [r7, #0]
 8101284:	4618      	mov	r0, r3
 8101286:	370c      	adds	r7, #12
 8101288:	46bd      	mov	sp, r7
 810128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810128e:	4770      	bx	lr

08101290 <_ZNKSt4hashIaEclEa>:

  /// Explicit specialization for char.
  _Cxx_hashtable_define_trivial_hash(char)

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)
 8101290:	b480      	push	{r7}
 8101292:	b083      	sub	sp, #12
 8101294:	af00      	add	r7, sp, #0
 8101296:	6078      	str	r0, [r7, #4]
 8101298:	460b      	mov	r3, r1
 810129a:	70fb      	strb	r3, [r7, #3]
 810129c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81012a0:	4618      	mov	r0, r3
 81012a2:	370c      	adds	r7, #12
 81012a4:	46bd      	mov	sp, r7
 81012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012aa:	4770      	bx	lr

081012ac <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 81012ac:	b480      	push	{r7}
 81012ae:	b083      	sub	sp, #12
 81012b0:	af00      	add	r7, sp, #0
 81012b2:	6078      	str	r0, [r7, #4]
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	2200      	movs	r2, #0
 81012b8:	601a      	str	r2, [r3, #0]
 81012ba:	687b      	ldr	r3, [r7, #4]
 81012bc:	4618      	mov	r0, r3
 81012be:	370c      	adds	r7, #12
 81012c0:	46bd      	mov	sp, r7
 81012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c6:	4770      	bx	lr

081012c8 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 81012c8:	b480      	push	{r7}
 81012ca:	b085      	sub	sp, #20
 81012cc:	af00      	add	r7, sp, #0
 81012ce:	60f8      	str	r0, [r7, #12]
 81012d0:	60b9      	str	r1, [r7, #8]
 81012d2:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 81012d4:	68bb      	ldr	r3, [r7, #8]
 81012d6:	687a      	ldr	r2, [r7, #4]
 81012d8:	fbb3 f2f2 	udiv	r2, r3, r2
 81012dc:	6879      	ldr	r1, [r7, #4]
 81012de:	fb01 f202 	mul.w	r2, r1, r2
 81012e2:	1a9b      	subs	r3, r3, r2
 81012e4:	4618      	mov	r0, r3
 81012e6:	3714      	adds	r7, #20
 81012e8:	46bd      	mov	sp, r7
 81012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ee:	4770      	bx	lr

081012f0 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 81012f0:	b480      	push	{r7}
 81012f2:	b083      	sub	sp, #12
 81012f4:	af00      	add	r7, sp, #0
 81012f6:	6078      	str	r0, [r7, #4]
 81012f8:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 81012fc:	687b      	ldr	r3, [r7, #4]
 81012fe:	683a      	ldr	r2, [r7, #0]
 8101300:	601a      	str	r2, [r3, #0]
 8101302:	687b      	ldr	r3, [r7, #4]
 8101304:	2200      	movs	r2, #0
 8101306:	605a      	str	r2, [r3, #4]
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	4618      	mov	r0, r3
 810130c:	370c      	adds	r7, #12
 810130e:	46bd      	mov	sp, r7
 8101310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101314:	4770      	bx	lr

08101316 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8101316:	b480      	push	{r7}
 8101318:	b083      	sub	sp, #12
 810131a:	af00      	add	r7, sp, #0
 810131c:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 810131e:	687b      	ldr	r3, [r7, #4]
 8101320:	685b      	ldr	r3, [r3, #4]
 8101322:	4618      	mov	r0, r3
 8101324:	370c      	adds	r7, #12
 8101326:	46bd      	mov	sp, r7
 8101328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810132c:	4770      	bx	lr

0810132e <_ZNSt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEC1ERS2_RKS8_>:

    public:

      /// Constructor accepting lvalues of `first_type` and `second_type`
      constexpr explicit(!_S_convertible<const _T1&, const _T2&>())
      pair(const _T1& __x, const _T2& __y)
 810132e:	b480      	push	{r7}
 8101330:	b085      	sub	sp, #20
 8101332:	af00      	add	r7, sp, #0
 8101334:	60f8      	str	r0, [r7, #12]
 8101336:	60b9      	str	r1, [r7, #8]
 8101338:	607a      	str	r2, [r7, #4]
      noexcept(_S_nothrow_constructible<const _T1&, const _T2&>())
      requires (_S_constructible<const _T1&, const _T2&>())
      : first(__x), second(__y)
 810133a:	68bb      	ldr	r3, [r7, #8]
 810133c:	f993 2000 	ldrsb.w	r2, [r3]
 8101340:	68fb      	ldr	r3, [r7, #12]
 8101342:	701a      	strb	r2, [r3, #0]
 8101344:	68fb      	ldr	r3, [r7, #12]
 8101346:	687a      	ldr	r2, [r7, #4]
 8101348:	3304      	adds	r3, #4
 810134a:	ca07      	ldmia	r2, {r0, r1, r2}
 810134c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { }
 8101350:	68fb      	ldr	r3, [r7, #12]
 8101352:	4618      	mov	r0, r3
 8101354:	3714      	adds	r7, #20
 8101356:	46bd      	mov	sp, r7
 8101358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810135c:	4770      	bx	lr
	...

08101360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101360:	b580      	push	{r7, lr}
 8101362:	b082      	sub	sp, #8
 8101364:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 8101366:	4b34      	ldr	r3, [pc, #208]	@ (8101438 <main+0xd8>)
 8101368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810136c:	4a32      	ldr	r2, [pc, #200]	@ (8101438 <main+0xd8>)
 810136e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101376:	4b30      	ldr	r3, [pc, #192]	@ (8101438 <main+0xd8>)
 8101378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810137c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101380:	607b      	str	r3, [r7, #4]
 8101382:	687b      	ldr	r3, [r7, #4]
    /* Activate HSEM notification for Cortex-M4*/
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101384:	2001      	movs	r0, #1
 8101386:	f00d fd25 	bl	810edd4 <HAL_HSEM_ActivateNotification>
    /*
    Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
    perform system initialization (system clock config, external memory configuration.. )
    */
    HAL_PWREx_ClearPendingEvent();
 810138a:	f00e fabf 	bl	810f90c <HAL_PWREx_ClearPendingEvent>
    HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810138e:	2201      	movs	r2, #1
 8101390:	2102      	movs	r1, #2
 8101392:	2000      	movs	r0, #0
 8101394:	f00e fa40 	bl	810f818 <HAL_PWREx_EnterSTOPMode>
    /* Clear HSEM flag */
    __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101398:	4b28      	ldr	r3, [pc, #160]	@ (810143c <main+0xdc>)
 810139a:	681b      	ldr	r3, [r3, #0]
 810139c:	091b      	lsrs	r3, r3, #4
 810139e:	f003 030f 	and.w	r3, r3, #15
 81013a2:	2b07      	cmp	r3, #7
 81013a4:	d108      	bne.n	81013b8 <main+0x58>
 81013a6:	4b26      	ldr	r3, [pc, #152]	@ (8101440 <main+0xe0>)
 81013a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81013ac:	4a24      	ldr	r2, [pc, #144]	@ (8101440 <main+0xe0>)
 81013ae:	f043 0301 	orr.w	r3, r3, #1
 81013b2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81013b6:	e007      	b.n	81013c8 <main+0x68>
 81013b8:	4b21      	ldr	r3, [pc, #132]	@ (8101440 <main+0xe0>)
 81013ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81013be:	4a20      	ldr	r2, [pc, #128]	@ (8101440 <main+0xe0>)
 81013c0:	f043 0301 	orr.w	r3, r3, #1
 81013c4:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 81013c8:	f00b fb0e 	bl	810c9e8 <HAL_Init>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_MDMA_Init();
 81013cc:	f000 f904 	bl	81015d8 <_ZL12MX_MDMA_Initv>
    MX_GPIO_Init();
 81013d0:	f000 f91c 	bl	810160c <_ZL12MX_GPIO_Initv>
    MX_I2C4_Init();
 81013d4:	f000 f852 	bl	810147c <_ZL12MX_I2C4_Initv>
    MX_USART1_UART_Init();
 81013d8:	f000 f89e 	bl	8101518 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    ipc_init();
 81013dc:	f7ff fe4a 	bl	8101074 <ipc_init>
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 81013e0:	f011 ffa2 	bl	8113328 <osKernelInitialize>

    /* USER CODE BEGIN RTOS_MUTEX */
    /* add mutexes, ... */\
    printMutexHandle = osMutexNew(&printMutex_attributes);
 81013e4:	4817      	ldr	r0, [pc, #92]	@ (8101444 <main+0xe4>)
 81013e6:	f012 f8ab 	bl	8113540 <osMutexNew>
 81013ea:	4603      	mov	r3, r0
 81013ec:	4a16      	ldr	r2, [pc, #88]	@ (8101448 <main+0xe8>)
 81013ee:	6013      	str	r3, [r2, #0]
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of Task_EDaemonN */
    Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 81013f0:	4a16      	ldr	r2, [pc, #88]	@ (810144c <main+0xec>)
 81013f2:	2100      	movs	r1, #0
 81013f4:	4816      	ldr	r0, [pc, #88]	@ (8101450 <main+0xf0>)
 81013f6:	f011 fff6 	bl	81133e6 <osThreadNew>
 81013fa:	4603      	mov	r3, r0
 81013fc:	4a15      	ldr	r2, [pc, #84]	@ (8101454 <main+0xf4>)
 81013fe:	6013      	str	r3, [r2, #0]

    /* creation of Task_EventMgrM4 */
    Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8101400:	4a15      	ldr	r2, [pc, #84]	@ (8101458 <main+0xf8>)
 8101402:	2100      	movs	r1, #0
 8101404:	4815      	ldr	r0, [pc, #84]	@ (810145c <main+0xfc>)
 8101406:	f011 ffee 	bl	81133e6 <osThreadNew>
 810140a:	4603      	mov	r3, r0
 810140c:	4a14      	ldr	r2, [pc, #80]	@ (8101460 <main+0x100>)
 810140e:	6013      	str	r3, [r2, #0]

    /* creation of Task_DPDaemon */
    Task_DPDaemonHandle = osThreadNew(StartTask_DoIPDaemonTask, NULL, &Task_DPDaemon_attributes);
 8101410:	4a14      	ldr	r2, [pc, #80]	@ (8101464 <main+0x104>)
 8101412:	2100      	movs	r1, #0
 8101414:	4814      	ldr	r0, [pc, #80]	@ (8101468 <main+0x108>)
 8101416:	f011 ffe6 	bl	81133e6 <osThreadNew>
 810141a:	4603      	mov	r3, r0
 810141c:	4a13      	ldr	r2, [pc, #76]	@ (810146c <main+0x10c>)
 810141e:	6013      	str	r3, [r2, #0]

    /* creation of Task_CTemp */
    Task_CTempHandle = osThreadNew(StartTask_CTemp, NULL, &Task_CTemp_attributes);
 8101420:	4a13      	ldr	r2, [pc, #76]	@ (8101470 <main+0x110>)
 8101422:	2100      	movs	r1, #0
 8101424:	4813      	ldr	r0, [pc, #76]	@ (8101474 <main+0x114>)
 8101426:	f011 ffde 	bl	81133e6 <osThreadNew>
 810142a:	4603      	mov	r3, r0
 810142c:	4a12      	ldr	r2, [pc, #72]	@ (8101478 <main+0x118>)
 810142e:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

    /* Start scheduler */
    osKernelStart();
 8101430:	f011 ff9e 	bl	8113370 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8101434:	bf00      	nop
 8101436:	e7fd      	b.n	8101434 <main+0xd4>
 8101438:	58024400 	.word	0x58024400
 810143c:	e000ed00 	.word	0xe000ed00
 8101440:	58026400 	.word	0x58026400
 8101444:	0812857c 	.word	0x0812857c
 8101448:	100001c8 	.word	0x100001c8
 810144c:	081284ec 	.word	0x081284ec
 8101450:	08108eb7 	.word	0x08108eb7
 8101454:	100001b8 	.word	0x100001b8
 8101458:	08128510 	.word	0x08128510
 810145c:	081068b1 	.word	0x081068b1
 8101460:	100001bc 	.word	0x100001bc
 8101464:	08128534 	.word	0x08128534
 8101468:	08105757 	.word	0x08105757
 810146c:	100001c0 	.word	0x100001c0
 8101470:	08128558 	.word	0x08128558
 8101474:	0810a1ed 	.word	0x0810a1ed
 8101478:	100001c4 	.word	0x100001c4

0810147c <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 810147c:	b580      	push	{r7, lr}
 810147e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C4_Init 0 */

    /* USER CODE BEGIN I2C4_Init 1 */

    /* USER CODE END I2C4_Init 1 */
    hi2c4.Instance = I2C4;
 8101480:	4b22      	ldr	r3, [pc, #136]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 8101482:	4a23      	ldr	r2, [pc, #140]	@ (8101510 <_ZL12MX_I2C4_Initv+0x94>)
 8101484:	601a      	str	r2, [r3, #0]
    hi2c4.Init.Timing = 0x10C0ECFF;
 8101486:	4b21      	ldr	r3, [pc, #132]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 8101488:	4a22      	ldr	r2, [pc, #136]	@ (8101514 <_ZL12MX_I2C4_Initv+0x98>)
 810148a:	605a      	str	r2, [r3, #4]
    hi2c4.Init.OwnAddress1 = 0;
 810148c:	4b1f      	ldr	r3, [pc, #124]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 810148e:	2200      	movs	r2, #0
 8101490:	609a      	str	r2, [r3, #8]
    hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101492:	4b1e      	ldr	r3, [pc, #120]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 8101494:	2201      	movs	r2, #1
 8101496:	60da      	str	r2, [r3, #12]
    hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101498:	4b1c      	ldr	r3, [pc, #112]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 810149a:	2200      	movs	r2, #0
 810149c:	611a      	str	r2, [r3, #16]
    hi2c4.Init.OwnAddress2 = 0;
 810149e:	4b1b      	ldr	r3, [pc, #108]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 81014a0:	2200      	movs	r2, #0
 81014a2:	615a      	str	r2, [r3, #20]
    hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81014a4:	4b19      	ldr	r3, [pc, #100]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 81014a6:	2200      	movs	r2, #0
 81014a8:	619a      	str	r2, [r3, #24]
    hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81014aa:	4b18      	ldr	r3, [pc, #96]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 81014ac:	2200      	movs	r2, #0
 81014ae:	61da      	str	r2, [r3, #28]
    hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81014b0:	4b16      	ldr	r3, [pc, #88]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 81014b2:	2200      	movs	r2, #0
 81014b4:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 81014b6:	4815      	ldr	r0, [pc, #84]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 81014b8:	f00d fcb8 	bl	810ee2c <HAL_I2C_Init>
 81014bc:	4603      	mov	r3, r0
 81014be:	2b00      	cmp	r3, #0
 81014c0:	bf14      	ite	ne
 81014c2:	2301      	movne	r3, #1
 81014c4:	2300      	moveq	r3, #0
 81014c6:	b2db      	uxtb	r3, r3
 81014c8:	2b00      	cmp	r3, #0
 81014ca:	d001      	beq.n	81014d0 <_ZL12MX_I2C4_Initv+0x54>
    {
        Error_Handler();
 81014cc:	f000 f936 	bl	810173c <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81014d0:	2100      	movs	r1, #0
 81014d2:	480e      	ldr	r0, [pc, #56]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 81014d4:	f00e f908 	bl	810f6e8 <HAL_I2CEx_ConfigAnalogFilter>
 81014d8:	4603      	mov	r3, r0
 81014da:	2b00      	cmp	r3, #0
 81014dc:	bf14      	ite	ne
 81014de:	2301      	movne	r3, #1
 81014e0:	2300      	moveq	r3, #0
 81014e2:	b2db      	uxtb	r3, r3
 81014e4:	2b00      	cmp	r3, #0
 81014e6:	d001      	beq.n	81014ec <_ZL12MX_I2C4_Initv+0x70>
    {
        Error_Handler();
 81014e8:	f000 f928 	bl	810173c <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 2) != HAL_OK)
 81014ec:	2102      	movs	r1, #2
 81014ee:	4807      	ldr	r0, [pc, #28]	@ (810150c <_ZL12MX_I2C4_Initv+0x90>)
 81014f0:	f00e f945 	bl	810f77e <HAL_I2CEx_ConfigDigitalFilter>
 81014f4:	4603      	mov	r3, r0
 81014f6:	2b00      	cmp	r3, #0
 81014f8:	bf14      	ite	ne
 81014fa:	2301      	movne	r3, #1
 81014fc:	2300      	moveq	r3, #0
 81014fe:	b2db      	uxtb	r3, r3
 8101500:	2b00      	cmp	r3, #0
 8101502:	d001      	beq.n	8101508 <_ZL12MX_I2C4_Initv+0x8c>
    {
        Error_Handler();
 8101504:	f000 f91a 	bl	810173c <Error_Handler>
    }
    /* USER CODE BEGIN I2C4_Init 2 */

    /* USER CODE END I2C4_Init 2 */

}
 8101508:	bf00      	nop
 810150a:	bd80      	pop	{r7, pc}
 810150c:	100000d0 	.word	0x100000d0
 8101510:	58001c00 	.word	0x58001c00
 8101514:	10c0ecff 	.word	0x10c0ecff

08101518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8101518:	b580      	push	{r7, lr}
 810151a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 810151c:	4b2c      	ldr	r3, [pc, #176]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 810151e:	4a2d      	ldr	r2, [pc, #180]	@ (81015d4 <MX_USART1_UART_Init+0xbc>)
 8101520:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8101522:	4b2b      	ldr	r3, [pc, #172]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 8101524:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101528:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 810152a:	4b29      	ldr	r3, [pc, #164]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 810152c:	2200      	movs	r2, #0
 810152e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8101530:	4b27      	ldr	r3, [pc, #156]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 8101532:	2200      	movs	r2, #0
 8101534:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8101536:	4b26      	ldr	r3, [pc, #152]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 8101538:	2200      	movs	r2, #0
 810153a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 810153c:	4b24      	ldr	r3, [pc, #144]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 810153e:	220c      	movs	r2, #12
 8101540:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101542:	4b23      	ldr	r3, [pc, #140]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 8101544:	2200      	movs	r2, #0
 8101546:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8101548:	4b21      	ldr	r3, [pc, #132]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 810154a:	2200      	movs	r2, #0
 810154c:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810154e:	4b20      	ldr	r3, [pc, #128]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 8101550:	2200      	movs	r2, #0
 8101552:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101554:	4b1e      	ldr	r3, [pc, #120]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 8101556:	2200      	movs	r2, #0
 8101558:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810155a:	4b1d      	ldr	r3, [pc, #116]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 810155c:	2200      	movs	r2, #0
 810155e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8101560:	481b      	ldr	r0, [pc, #108]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 8101562:	f010 fd35 	bl	8111fd0 <HAL_UART_Init>
 8101566:	4603      	mov	r3, r0
 8101568:	2b00      	cmp	r3, #0
 810156a:	bf14      	ite	ne
 810156c:	2301      	movne	r3, #1
 810156e:	2300      	moveq	r3, #0
 8101570:	b2db      	uxtb	r3, r3
 8101572:	2b00      	cmp	r3, #0
 8101574:	d001      	beq.n	810157a <MX_USART1_UART_Init+0x62>
    {
        Error_Handler();
 8101576:	f000 f8e1 	bl	810173c <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810157a:	2100      	movs	r1, #0
 810157c:	4814      	ldr	r0, [pc, #80]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 810157e:	f011 fdc5 	bl	811310c <HAL_UARTEx_SetTxFifoThreshold>
 8101582:	4603      	mov	r3, r0
 8101584:	2b00      	cmp	r3, #0
 8101586:	bf14      	ite	ne
 8101588:	2301      	movne	r3, #1
 810158a:	2300      	moveq	r3, #0
 810158c:	b2db      	uxtb	r3, r3
 810158e:	2b00      	cmp	r3, #0
 8101590:	d001      	beq.n	8101596 <MX_USART1_UART_Init+0x7e>
    {
        Error_Handler();
 8101592:	f000 f8d3 	bl	810173c <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101596:	2100      	movs	r1, #0
 8101598:	480d      	ldr	r0, [pc, #52]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 810159a:	f011 fdf5 	bl	8113188 <HAL_UARTEx_SetRxFifoThreshold>
 810159e:	4603      	mov	r3, r0
 81015a0:	2b00      	cmp	r3, #0
 81015a2:	bf14      	ite	ne
 81015a4:	2301      	movne	r3, #1
 81015a6:	2300      	moveq	r3, #0
 81015a8:	b2db      	uxtb	r3, r3
 81015aa:	2b00      	cmp	r3, #0
 81015ac:	d001      	beq.n	81015b2 <MX_USART1_UART_Init+0x9a>
    {
        Error_Handler();
 81015ae:	f000 f8c5 	bl	810173c <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 81015b2:	4807      	ldr	r0, [pc, #28]	@ (81015d0 <MX_USART1_UART_Init+0xb8>)
 81015b4:	f011 fd71 	bl	811309a <HAL_UARTEx_DisableFifoMode>
 81015b8:	4603      	mov	r3, r0
 81015ba:	2b00      	cmp	r3, #0
 81015bc:	bf14      	ite	ne
 81015be:	2301      	movne	r3, #1
 81015c0:	2300      	moveq	r3, #0
 81015c2:	b2db      	uxtb	r3, r3
 81015c4:	2b00      	cmp	r3, #0
 81015c6:	d001      	beq.n	81015cc <MX_USART1_UART_Init+0xb4>
    {
        Error_Handler();
 81015c8:	f000 f8b8 	bl	810173c <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 81015cc:	bf00      	nop
 81015ce:	bd80      	pop	{r7, pc}
 81015d0:	10000124 	.word	0x10000124
 81015d4:	40011000 	.word	0x40011000

081015d8 <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 81015d8:	b480      	push	{r7}
 81015da:	b083      	sub	sp, #12
 81015dc:	af00      	add	r7, sp, #0

    /* MDMA controller clock enable */
    __HAL_RCC_MDMA_CLK_ENABLE();
 81015de:	4b0a      	ldr	r3, [pc, #40]	@ (8101608 <_ZL12MX_MDMA_Initv+0x30>)
 81015e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81015e4:	4a08      	ldr	r2, [pc, #32]	@ (8101608 <_ZL12MX_MDMA_Initv+0x30>)
 81015e6:	f043 0301 	orr.w	r3, r3, #1
 81015ea:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81015ee:	4b06      	ldr	r3, [pc, #24]	@ (8101608 <_ZL12MX_MDMA_Initv+0x30>)
 81015f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81015f4:	f003 0301 	and.w	r3, r3, #1
 81015f8:	607b      	str	r3, [r7, #4]
 81015fa:	687b      	ldr	r3, [r7, #4]
    /* Local variables */

}
 81015fc:	bf00      	nop
 81015fe:	370c      	adds	r7, #12
 8101600:	46bd      	mov	sp, r7
 8101602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101606:	4770      	bx	lr
 8101608:	58024400 	.word	0x58024400

0810160c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810160c:	b480      	push	{r7}
 810160e:	b089      	sub	sp, #36	@ 0x24
 8101610:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8101612:	4b37      	ldr	r3, [pc, #220]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101618:	4a35      	ldr	r2, [pc, #212]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 810161a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810161e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101622:	4b33      	ldr	r3, [pc, #204]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810162c:	61fb      	str	r3, [r7, #28]
 810162e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101630:	4b2f      	ldr	r3, [pc, #188]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101636:	4a2e      	ldr	r2, [pc, #184]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101638:	f043 0310 	orr.w	r3, r3, #16
 810163c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101640:	4b2b      	ldr	r3, [pc, #172]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101646:	f003 0310 	and.w	r3, r3, #16
 810164a:	61bb      	str	r3, [r7, #24]
 810164c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810164e:	4b28      	ldr	r3, [pc, #160]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101654:	4a26      	ldr	r2, [pc, #152]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101656:	f043 0304 	orr.w	r3, r3, #4
 810165a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810165e:	4b24      	ldr	r3, [pc, #144]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101664:	f003 0304 	and.w	r3, r3, #4
 8101668:	617b      	str	r3, [r7, #20]
 810166a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810166c:	4b20      	ldr	r3, [pc, #128]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 810166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101672:	4a1f      	ldr	r2, [pc, #124]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101674:	f043 0301 	orr.w	r3, r3, #1
 8101678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810167c:	4b1c      	ldr	r3, [pc, #112]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 810167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101682:	f003 0301 	and.w	r3, r3, #1
 8101686:	613b      	str	r3, [r7, #16]
 8101688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810168a:	4b19      	ldr	r3, [pc, #100]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 810168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101690:	4a17      	ldr	r2, [pc, #92]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 8101692:	f043 0302 	orr.w	r3, r3, #2
 8101696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810169a:	4b15      	ldr	r3, [pc, #84]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 810169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016a0:	f003 0302 	and.w	r3, r3, #2
 81016a4:	60fb      	str	r3, [r7, #12]
 81016a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81016a8:	4b11      	ldr	r3, [pc, #68]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 81016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016ae:	4a10      	ldr	r2, [pc, #64]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 81016b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81016b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016b8:	4b0d      	ldr	r3, [pc, #52]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 81016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81016c2:	60bb      	str	r3, [r7, #8]
 81016c4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81016c6:	4b0a      	ldr	r3, [pc, #40]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 81016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016cc:	4a08      	ldr	r2, [pc, #32]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 81016ce:	f043 0308 	orr.w	r3, r3, #8
 81016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016d6:	4b06      	ldr	r3, [pc, #24]	@ (81016f0 <_ZL12MX_GPIO_Initv+0xe4>)
 81016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016dc:	f003 0308 	and.w	r3, r3, #8
 81016e0:	607b      	str	r3, [r7, #4]
 81016e2:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 81016e4:	bf00      	nop
 81016e6:	3724      	adds	r7, #36	@ 0x24
 81016e8:	46bd      	mov	sp, r7
 81016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ee:	4770      	bx	lr
 81016f0:	58024400 	.word	0x58024400

081016f4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
extern "C" int __io_putchar(int ch)
{
 81016f4:	b580      	push	{r7, lr}
 81016f6:	b082      	sub	sp, #8
 81016f8:	af00      	add	r7, sp, #0
 81016fa:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 81016fc:	1d39      	adds	r1, r7, #4
 81016fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8101702:	2201      	movs	r2, #1
 8101704:	4803      	ldr	r0, [pc, #12]	@ (8101714 <__io_putchar+0x20>)
 8101706:	f010 fcb3 	bl	8112070 <HAL_UART_Transmit>

    return ch;
 810170a:	687b      	ldr	r3, [r7, #4]
}
 810170c:	4618      	mov	r0, r3
 810170e:	3708      	adds	r7, #8
 8101710:	46bd      	mov	sp, r7
 8101712:	bd80      	pop	{r7, pc}
 8101714:	10000124 	.word	0x10000124

08101718 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101718:	b580      	push	{r7, lr}
 810171a:	b082      	sub	sp, #8
 810171c:	af00      	add	r7, sp, #0
 810171e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6) {
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	4a04      	ldr	r2, [pc, #16]	@ (8101738 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101726:	4293      	cmp	r3, r2
 8101728:	d101      	bne.n	810172e <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 810172a:	f00b f9bb 	bl	810caa4 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 810172e:	bf00      	nop
 8101730:	3708      	adds	r7, #8
 8101732:	46bd      	mov	sp, r7
 8101734:	bd80      	pop	{r7, pc}
 8101736:	bf00      	nop
 8101738:	40001000 	.word	0x40001000

0810173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810173c:	b480      	push	{r7}
 810173e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8101740:	b672      	cpsid	i
}
 8101742:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8101744:	bf00      	nop
 8101746:	e7fd      	b.n	8101744 <Error_Handler+0x8>

08101748 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8101748:	b580      	push	{r7, lr}
 810174a:	b082      	sub	sp, #8
 810174c:	af00      	add	r7, sp, #0
 810174e:	6078      	str	r0, [r7, #4]
 8101750:	6878      	ldr	r0, [r7, #4]
 8101752:	f000 f834 	bl	81017be <_ZNSt15__new_allocatorISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 8101756:	687b      	ldr	r3, [r7, #4]
 8101758:	4618      	mov	r0, r3
 810175a:	3708      	adds	r7, #8
 810175c:	46bd      	mov	sp, r7
 810175e:	bd80      	pop	{r7, pc}

08101760 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8101760:	b480      	push	{r7}
 8101762:	b083      	sub	sp, #12
 8101764:	af00      	add	r7, sp, #0
 8101766:	6078      	str	r0, [r7, #4]
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	4618      	mov	r0, r3
 810176c:	370c      	adds	r7, #12
 810176e:	46bd      	mov	sp, r7
 8101770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101774:	4770      	bx	lr

08101776 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>:
       *  @param  __a  An allocator object.
       *
       *  Create an %unordered_map consisting of copies of the elements in the
       *  list. This is linear in N (where N is @a __l.size()).
       */
      unordered_map(initializer_list<value_type> __l,
 8101776:	b580      	push	{r7, lr}
 8101778:	b088      	sub	sp, #32
 810177a:	af04      	add	r7, sp, #16
 810177c:	60f8      	str	r0, [r7, #12]
 810177e:	1d38      	adds	r0, r7, #4
 8101780:	e880 0006 	stmia.w	r0, {r1, r2}
 8101784:	603b      	str	r3, [r7, #0]
		    size_type __n = 0,
		    const hasher& __hf = hasher(),
		    const key_equal& __eql = key_equal(),
		    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
 8101786:	68f8      	ldr	r0, [r7, #12]
 8101788:	6a3b      	ldr	r3, [r7, #32]
 810178a:	9302      	str	r3, [sp, #8]
 810178c:	69fb      	ldr	r3, [r7, #28]
 810178e:	9301      	str	r3, [sp, #4]
 8101790:	69bb      	ldr	r3, [r7, #24]
 8101792:	9300      	str	r3, [sp, #0]
 8101794:	683b      	ldr	r3, [r7, #0]
 8101796:	1d3a      	adds	r2, r7, #4
 8101798:	ca06      	ldmia	r2, {r1, r2}
 810179a:	f000 f81b 	bl	81017d4 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listISA_EjRKSH_RKSF_RKSB_>
      { }
 810179e:	68fb      	ldr	r3, [r7, #12]
 81017a0:	4618      	mov	r0, r3
 81017a2:	3710      	adds	r7, #16
 81017a4:	46bd      	mov	sp, r7
 81017a6:	bd80      	pop	{r7, pc}

081017a8 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81017a8:	b480      	push	{r7}
 81017aa:	b083      	sub	sp, #12
 81017ac:	af00      	add	r7, sp, #0
 81017ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81017b0:	687b      	ldr	r3, [r7, #4]
 81017b2:	4618      	mov	r0, r3
 81017b4:	370c      	adds	r7, #12
 81017b6:	46bd      	mov	sp, r7
 81017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017bc:	4770      	bx	lr

081017be <_ZNSt15__new_allocatorISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 81017be:	b480      	push	{r7}
 81017c0:	b083      	sub	sp, #12
 81017c2:	af00      	add	r7, sp, #0
 81017c4:	6078      	str	r0, [r7, #4]
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	4618      	mov	r0, r3
 81017ca:	370c      	adds	r7, #12
 81017cc:	46bd      	mov	sp, r7
 81017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017d2:	4770      	bx	lr

081017d4 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listISA_EjRKSH_RKSF_RKSB_>:
		   const allocator_type& __a = allocator_type())
	: _Hashtable(__f, __l, __bkt_count_hint, __hf, __eql, __a,
		     __unique_keys{})
	{ }

      _Hashtable(initializer_list<value_type> __l,
 81017d4:	b5b0      	push	{r4, r5, r7, lr}
 81017d6:	b088      	sub	sp, #32
 81017d8:	af04      	add	r7, sp, #16
 81017da:	60f8      	str	r0, [r7, #12]
 81017dc:	1d38      	adds	r0, r7, #4
 81017de:	e880 0006 	stmia.w	r0, {r1, r2}
 81017e2:	603b      	str	r3, [r7, #0]
		 size_type __bkt_count_hint = 0,
		 const _Hash& __hf = _Hash(),
		 const key_equal& __eql = key_equal(),
		 const allocator_type& __a = allocator_type())
      : _Hashtable(__l.begin(), __l.end(), __bkt_count_hint,
		   __hf, __eql, __a, __unique_keys{})
 81017e4:	1d3b      	adds	r3, r7, #4
 81017e6:	4618      	mov	r0, r3
 81017e8:	f000 f842 	bl	8101870 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>
 81017ec:	4604      	mov	r4, r0
 81017ee:	1d3b      	adds	r3, r7, #4
 81017f0:	4618      	mov	r0, r3
 81017f2:	f000 f849 	bl	8101888 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE3endEv>
 81017f6:	4602      	mov	r2, r0
 81017f8:	f88d 500c 	strb.w	r5, [sp, #12]
 81017fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81017fe:	9302      	str	r3, [sp, #8]
 8101800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101802:	9301      	str	r3, [sp, #4]
 8101804:	6a3b      	ldr	r3, [r7, #32]
 8101806:	9300      	str	r3, [sp, #0]
 8101808:	683b      	ldr	r3, [r7, #0]
 810180a:	4621      	mov	r1, r4
 810180c:	68f8      	ldr	r0, [r7, #12]
 810180e:	f000 f84d 	bl	81018ac <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE>
      { }
 8101812:	68fb      	ldr	r3, [r7, #12]
 8101814:	4618      	mov	r0, r3
 8101816:	3710      	adds	r7, #16
 8101818:	46bd      	mov	sp, r7
 810181a:	bdb0      	pop	{r4, r5, r7, pc}

0810181c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EED1Ev>:
	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper;

  /// Specialization using EBO.
  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 810181c:	b580      	push	{r7, lr}
 810181e:	b082      	sub	sp, #8
 8101820:	af00      	add	r7, sp, #0
 8101822:	6078      	str	r0, [r7, #4]
 8101824:	6878      	ldr	r0, [r7, #4]
 8101826:	f000 f864 	bl	81018f2 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	4618      	mov	r0, r3
 810182e:	3708      	adds	r7, #8
 8101830:	46bd      	mov	sp, r7
 8101832:	bd80      	pop	{r7, pc}

08101834 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEED1Ev>:
  /**
   * This type deals with all allocation and keeps an allocator instance
   * through inheritance to benefit from EBO when possible.
   */
  template<typename _NodeAlloc>
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8101834:	b580      	push	{r7, lr}
 8101836:	b082      	sub	sp, #8
 8101838:	af00      	add	r7, sp, #0
 810183a:	6078      	str	r0, [r7, #4]
 810183c:	6878      	ldr	r0, [r7, #4]
 810183e:	f7ff ffed 	bl	810181c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EED1Ev>
 8101842:	687b      	ldr	r3, [r7, #4]
 8101844:	4618      	mov	r0, r3
 8101846:	3708      	adds	r7, #8
 8101848:	46bd      	mov	sp, r7
 810184a:	bd80      	pop	{r7, pc}

0810184c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 810184c:	b580      	push	{r7, lr}
 810184e:	b082      	sub	sp, #8
 8101850:	af00      	add	r7, sp, #0
 8101852:	6078      	str	r0, [r7, #4]
			._M_bucket_index(declval<const __node_value_type&>(),
					 (std::size_t)0)),
		    "Cache the hash code or qualify your functors involved"
		    " in hash code and bucket index computation with noexcept");

      clear();
 8101854:	6878      	ldr	r0, [r7, #4]
 8101856:	f000 f857 	bl	8101908 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 810185a:	6878      	ldr	r0, [r7, #4]
 810185c:	f000 f874 	bl	8101948 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8101860:	6878      	ldr	r0, [r7, #4]
 8101862:	f7ff ffe7 	bl	8101834 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEED1Ev>
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	4618      	mov	r0, r3
 810186a:	3708      	adds	r7, #8
 810186c:	46bd      	mov	sp, r7
 810186e:	bd80      	pop	{r7, pc}

08101870 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8101870:	b480      	push	{r7}
 8101872:	b083      	sub	sp, #12
 8101874:	af00      	add	r7, sp, #0
 8101876:	6078      	str	r0, [r7, #4]
 8101878:	687b      	ldr	r3, [r7, #4]
 810187a:	681b      	ldr	r3, [r3, #0]
 810187c:	4618      	mov	r0, r3
 810187e:	370c      	adds	r7, #12
 8101880:	46bd      	mov	sp, r7
 8101882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101886:	4770      	bx	lr

08101888 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8101888:	b590      	push	{r4, r7, lr}
 810188a:	b083      	sub	sp, #12
 810188c:	af00      	add	r7, sp, #0
 810188e:	6078      	str	r0, [r7, #4]
 8101890:	6878      	ldr	r0, [r7, #4]
 8101892:	f7ff ffed 	bl	8101870 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE5beginEv>
 8101896:	4604      	mov	r4, r0
 8101898:	6878      	ldr	r0, [r7, #4]
 810189a:	f000 f865 	bl	8101968 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4sizeEv>
 810189e:	4603      	mov	r3, r0
 81018a0:	011b      	lsls	r3, r3, #4
 81018a2:	4423      	add	r3, r4
 81018a4:	4618      	mov	r0, r3
 81018a6:	370c      	adds	r7, #12
 81018a8:	46bd      	mov	sp, r7
 81018aa:	bd90      	pop	{r4, r7, pc}

081018ac <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81018ac:	b580      	push	{r7, lr}
 81018ae:	b088      	sub	sp, #32
 81018b0:	af02      	add	r7, sp, #8
 81018b2:	60f8      	str	r0, [r7, #12]
 81018b4:	60b9      	str	r1, [r7, #8]
 81018b6:	607a      	str	r2, [r7, #4]
 81018b8:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 81018ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81018bc:	9300      	str	r3, [sp, #0]
 81018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81018c0:	6a3a      	ldr	r2, [r7, #32]
 81018c2:	6839      	ldr	r1, [r7, #0]
 81018c4:	68f8      	ldr	r0, [r7, #12]
 81018c6:	f000 f85b 	bl	8101980 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_>
	for (; __f != __l; ++__f)
 81018ca:	e009      	b.n	81018e0 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 81018cc:	f107 0310 	add.w	r3, r7, #16
 81018d0:	68ba      	ldr	r2, [r7, #8]
 81018d2:	68f9      	ldr	r1, [r7, #12]
 81018d4:	4618      	mov	r0, r3
 81018d6:	f000 f87b 	bl	81019d0 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKSB_>
	for (; __f != __l; ++__f)
 81018da:	68bb      	ldr	r3, [r7, #8]
 81018dc:	3310      	adds	r3, #16
 81018de:	60bb      	str	r3, [r7, #8]
 81018e0:	68ba      	ldr	r2, [r7, #8]
 81018e2:	687b      	ldr	r3, [r7, #4]
 81018e4:	429a      	cmp	r2, r3
 81018e6:	d1f1      	bne.n	81018cc <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKSA_EET_SR_jRKSH_RKSF_RKSB_St17integral_constantIbLb1EE+0x20>
      }
 81018e8:	68fb      	ldr	r3, [r7, #12]
 81018ea:	4618      	mov	r0, r3
 81018ec:	3718      	adds	r7, #24
 81018ee:	46bd      	mov	sp, r7
 81018f0:	bd80      	pop	{r7, pc}

081018f2 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>:
 81018f2:	b480      	push	{r7}
 81018f4:	b083      	sub	sp, #12
 81018f6:	af00      	add	r7, sp, #0
 81018f8:	6078      	str	r0, [r7, #4]
 81018fa:	687b      	ldr	r3, [r7, #4]
 81018fc:	4618      	mov	r0, r3
 81018fe:	370c      	adds	r7, #12
 8101900:	46bd      	mov	sp, r7
 8101902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101906:	4770      	bx	lr

08101908 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101908:	b580      	push	{r7, lr}
 810190a:	b082      	sub	sp, #8
 810190c:	af00      	add	r7, sp, #0
 810190e:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8101910:	6878      	ldr	r0, [r7, #4]
 8101912:	f000 f87b 	bl	8101a0c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8101916:	4603      	mov	r3, r0
 8101918:	4619      	mov	r1, r3
 810191a:	6878      	ldr	r0, [r7, #4]
 810191c:	f000 f882 	bl	8101a24 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_>
      __builtin_memset(_M_buckets, 0,
 8101920:	687b      	ldr	r3, [r7, #4]
 8101922:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8101924:	687b      	ldr	r3, [r7, #4]
 8101926:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8101928:	009b      	lsls	r3, r3, #2
 810192a:	4610      	mov	r0, r2
 810192c:	461a      	mov	r2, r3
 810192e:	2100      	movs	r1, #0
 8101930:	f022 ffa8 	bl	8124884 <memset>
      _M_element_count = 0;
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	2200      	movs	r2, #0
 8101938:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	2200      	movs	r2, #0
 810193e:	609a      	str	r2, [r3, #8]
    }
 8101940:	bf00      	nop
 8101942:	3708      	adds	r7, #8
 8101944:	46bd      	mov	sp, r7
 8101946:	bd80      	pop	{r7, pc}

08101948 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8101948:	b580      	push	{r7, lr}
 810194a:	b082      	sub	sp, #8
 810194c:	af00      	add	r7, sp, #0
 810194e:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	6819      	ldr	r1, [r3, #0]
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	685b      	ldr	r3, [r3, #4]
 8101958:	461a      	mov	r2, r3
 810195a:	6878      	ldr	r0, [r7, #4]
 810195c:	f000 f87a 	bl	8101a54 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj>
 8101960:	bf00      	nop
 8101962:	3708      	adds	r7, #8
 8101964:	46bd      	mov	sp, r7
 8101966:	bd80      	pop	{r7, pc}

08101968 <_ZNKSt16initializer_listISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8101968:	b480      	push	{r7}
 810196a:	b083      	sub	sp, #12
 810196c:	af00      	add	r7, sp, #0
 810196e:	6078      	str	r0, [r7, #4]
 8101970:	687b      	ldr	r3, [r7, #4]
 8101972:	685b      	ldr	r3, [r3, #4]
 8101974:	4618      	mov	r0, r3
 8101976:	370c      	adds	r7, #12
 8101978:	46bd      	mov	sp, r7
 810197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810197e:	4770      	bx	lr

08101980 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101980:	b580      	push	{r7, lr}
 8101982:	b086      	sub	sp, #24
 8101984:	af00      	add	r7, sp, #0
 8101986:	60f8      	str	r0, [r7, #12]
 8101988:	60b9      	str	r1, [r7, #8]
 810198a:	607a      	str	r2, [r7, #4]
 810198c:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 810198e:	6a3b      	ldr	r3, [r7, #32]
 8101990:	683a      	ldr	r2, [r7, #0]
 8101992:	6879      	ldr	r1, [r7, #4]
 8101994:	68f8      	ldr	r0, [r7, #12]
 8101996:	f000 f874 	bl	8101a82 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSH_RKSF_RKSB_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 810199a:	68fb      	ldr	r3, [r7, #12]
 810199c:	3310      	adds	r3, #16
 810199e:	68b9      	ldr	r1, [r7, #8]
 81019a0:	4618      	mov	r0, r3
 81019a2:	f021 fed5 	bl	8123750 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 81019a6:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 81019a8:	68fb      	ldr	r3, [r7, #12]
 81019aa:	685b      	ldr	r3, [r3, #4]
 81019ac:	697a      	ldr	r2, [r7, #20]
 81019ae:	429a      	cmp	r2, r3
 81019b0:	d909      	bls.n	81019c6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSH_RKSF_RKSB_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 81019b2:	6979      	ldr	r1, [r7, #20]
 81019b4:	68f8      	ldr	r0, [r7, #12]
 81019b6:	f000 f8a4 	bl	8101b02 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 81019ba:	4602      	mov	r2, r0
 81019bc:	68fb      	ldr	r3, [r7, #12]
 81019be:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 81019c0:	68fb      	ldr	r3, [r7, #12]
 81019c2:	697a      	ldr	r2, [r7, #20]
 81019c4:	605a      	str	r2, [r3, #4]
    }
 81019c6:	68fb      	ldr	r3, [r7, #12]
 81019c8:	4618      	mov	r0, r3
 81019ca:	3718      	adds	r7, #24
 81019cc:	46bd      	mov	sp, r7
 81019ce:	bd80      	pop	{r7, pc}

081019d0 <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKSB_>:
      insert(const value_type& __v)
 81019d0:	b590      	push	{r4, r7, lr}
 81019d2:	b089      	sub	sp, #36	@ 0x24
 81019d4:	af02      	add	r7, sp, #8
 81019d6:	60f8      	str	r0, [r7, #12]
 81019d8:	60b9      	str	r1, [r7, #8]
 81019da:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 81019dc:	68b8      	ldr	r0, [r7, #8]
 81019de:	f000 f8ad 	bl	8101b3c <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 81019e2:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 81019e4:	f107 0310 	add.w	r3, r7, #16
 81019e8:	6979      	ldr	r1, [r7, #20]
 81019ea:	4618      	mov	r0, r3
 81019ec:	f000 f8b1 	bl	8101b52 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ERNS_16_Hashtable_allocISE_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 81019f0:	68f8      	ldr	r0, [r7, #12]
 81019f2:	f107 0310 	add.w	r3, r7, #16
 81019f6:	f88d 4000 	strb.w	r4, [sp]
 81019fa:	687a      	ldr	r2, [r7, #4]
 81019fc:	6979      	ldr	r1, [r7, #20]
 81019fe:	f000 f8b7 	bl	8101b70 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 8101a02:	bf00      	nop
      }
 8101a04:	68f8      	ldr	r0, [r7, #12]
 8101a06:	371c      	adds	r7, #28
 8101a08:	46bd      	mov	sp, r7
 8101a0a:	bd90      	pop	{r4, r7, pc}

08101a0c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8101a0c:	b480      	push	{r7}
 8101a0e:	b083      	sub	sp, #12
 8101a10:	af00      	add	r7, sp, #0
 8101a12:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	689b      	ldr	r3, [r3, #8]
 8101a18:	4618      	mov	r0, r3
 8101a1a:	370c      	adds	r7, #12
 8101a1c:	46bd      	mov	sp, r7
 8101a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a22:	4770      	bx	lr

08101a24 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8101a24:	b580      	push	{r7, lr}
 8101a26:	b084      	sub	sp, #16
 8101a28:	af00      	add	r7, sp, #0
 8101a2a:	6078      	str	r0, [r7, #4]
 8101a2c:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8101a2e:	e009      	b.n	8101a44 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_+0x20>
	{
	  __node_ptr __tmp = __n;
 8101a30:	683b      	ldr	r3, [r7, #0]
 8101a32:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8101a34:	6838      	ldr	r0, [r7, #0]
 8101a36:	f000 f8c2 	bl	8101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8101a3a:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8101a3c:	68f9      	ldr	r1, [r7, #12]
 8101a3e:	6878      	ldr	r0, [r7, #4]
 8101a40:	f000 f8c9 	bl	8101bd6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>
      while (__n)
 8101a44:	683b      	ldr	r3, [r7, #0]
 8101a46:	2b00      	cmp	r3, #0
 8101a48:	d1f2      	bne.n	8101a30 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_deallocate_nodesEPSD_+0xc>
	}
    }
 8101a4a:	bf00      	nop
 8101a4c:	bf00      	nop
 8101a4e:	3710      	adds	r7, #16
 8101a50:	46bd      	mov	sp, r7
 8101a52:	bd80      	pop	{r7, pc}

08101a54 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8101a54:	b580      	push	{r7, lr}
 8101a56:	b084      	sub	sp, #16
 8101a58:	af00      	add	r7, sp, #0
 8101a5a:	60f8      	str	r0, [r7, #12]
 8101a5c:	60b9      	str	r1, [r7, #8]
 8101a5e:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8101a60:	68b9      	ldr	r1, [r7, #8]
 8101a62:	68f8      	ldr	r0, [r7, #12]
 8101a64:	f000 f8d2 	bl	8101c0c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSC_15_Hash_node_baseE>
 8101a68:	4603      	mov	r3, r0
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d105      	bne.n	8101a7a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8101a6e:	687a      	ldr	r2, [r7, #4]
 8101a70:	68b9      	ldr	r1, [r7, #8]
 8101a72:	68f8      	ldr	r0, [r7, #12]
 8101a74:	f000 f8e2 	bl	8101c3c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8101a78:	e000      	b.n	8101a7c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNSC_15_Hash_node_baseEj+0x28>
	  return;
 8101a7a:	bf00      	nop
      }
 8101a7c:	3710      	adds	r7, #16
 8101a7e:	46bd      	mov	sp, r7
 8101a80:	bd80      	pop	{r7, pc}

08101a82 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSH_RKSF_RKSB_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 8101a82:	b590      	push	{r4, r7, lr}
 8101a84:	b087      	sub	sp, #28
 8101a86:	af00      	add	r7, sp, #0
 8101a88:	60f8      	str	r0, [r7, #12]
 8101a8a:	60b9      	str	r1, [r7, #8]
 8101a8c:	607a      	str	r2, [r7, #4]
 8101a8e:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101a90:	687a      	ldr	r2, [r7, #4]
 8101a92:	68b9      	ldr	r1, [r7, #8]
 8101a94:	68f8      	ldr	r0, [r7, #12]
 8101a96:	f000 f901 	bl	8101c9c <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_RKSE_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8101a9a:	f107 0314 	add.w	r3, r7, #20
 8101a9e:	6839      	ldr	r1, [r7, #0]
 8101aa0:	4618      	mov	r0, r3
 8101aa2:	f000 f8ee 	bl	8101c82 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ISB_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101aa6:	f107 0314 	add.w	r3, r7, #20
 8101aaa:	4619      	mov	r1, r3
 8101aac:	68f8      	ldr	r0, [r7, #12]
 8101aae:	f000 f908 	bl	8101cc2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ISE_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8101ab2:	f107 0314 	add.w	r3, r7, #20
 8101ab6:	4618      	mov	r0, r3
 8101ab8:	f7ff ff1b 	bl	81018f2 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 8101abc:	4621      	mov	r1, r4
 8101abe:	68f8      	ldr	r0, [r7, #12]
 8101ac0:	f000 f911 	bl	8101ce6 <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 8101ac4:	68fb      	ldr	r3, [r7, #12]
 8101ac6:	f103 0218 	add.w	r2, r3, #24
 8101aca:	68fb      	ldr	r3, [r7, #12]
 8101acc:	601a      	str	r2, [r3, #0]
 8101ace:	68fb      	ldr	r3, [r7, #12]
 8101ad0:	2201      	movs	r2, #1
 8101ad2:	605a      	str	r2, [r3, #4]
 8101ad4:	68fb      	ldr	r3, [r7, #12]
 8101ad6:	3308      	adds	r3, #8
 8101ad8:	4618      	mov	r0, r3
 8101ada:	f7ff fbe7 	bl	81012ac <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8101ade:	68fb      	ldr	r3, [r7, #12]
 8101ae0:	2200      	movs	r2, #0
 8101ae2:	60da      	str	r2, [r3, #12]
 8101ae4:	68fb      	ldr	r3, [r7, #12]
 8101ae6:	3310      	adds	r3, #16
 8101ae8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8101aec:	4618      	mov	r0, r3
 8101aee:	f7ff fbff 	bl	81012f0 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8101af2:	68fb      	ldr	r3, [r7, #12]
 8101af4:	2200      	movs	r2, #0
 8101af6:	619a      	str	r2, [r3, #24]
      { }
 8101af8:	68fb      	ldr	r3, [r7, #12]
 8101afa:	4618      	mov	r0, r3
 8101afc:	371c      	adds	r7, #28
 8101afe:	46bd      	mov	sp, r7
 8101b00:	bd90      	pop	{r4, r7, pc}

08101b02 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8101b02:	b580      	push	{r7, lr}
 8101b04:	b082      	sub	sp, #8
 8101b06:	af00      	add	r7, sp, #0
 8101b08:	6078      	str	r0, [r7, #4]
 8101b0a:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8101b0c:	683b      	ldr	r3, [r7, #0]
 8101b0e:	2b01      	cmp	r3, #1
 8101b10:	bf0c      	ite	eq
 8101b12:	2301      	moveq	r3, #1
 8101b14:	2300      	movne	r3, #0
 8101b16:	b2db      	uxtb	r3, r3
 8101b18:	2b00      	cmp	r3, #0
 8101b1a:	d005      	beq.n	8101b28 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	2200      	movs	r2, #0
 8101b20:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	3318      	adds	r3, #24
 8101b26:	e005      	b.n	8101b34 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8101b28:	6839      	ldr	r1, [r7, #0]
 8101b2a:	6878      	ldr	r0, [r7, #4]
 8101b2c:	f000 f8e7 	bl	8101cfe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_allocate_bucketsEj>
 8101b30:	4603      	mov	r3, r0
 8101b32:	bf00      	nop
      }
 8101b34:	4618      	mov	r0, r3
 8101b36:	3708      	adds	r7, #8
 8101b38:	46bd      	mov	sp, r7
 8101b3a:	bd80      	pop	{r7, pc}

08101b3c <_ZNSt8__detail12_Insert_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISB_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 8101b3c:	b480      	push	{r7}
 8101b3e:	b083      	sub	sp, #12
 8101b40:	af00      	add	r7, sp, #0
 8101b42:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 8101b44:	687b      	ldr	r3, [r7, #4]
 8101b46:	4618      	mov	r0, r3
 8101b48:	370c      	adds	r7, #12
 8101b4a:	46bd      	mov	sp, r7
 8101b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b50:	4770      	bx	lr

08101b52 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ERNS_16_Hashtable_allocISE_EE>:
      _AllocNode(__hashtable_alloc& __h)
 8101b52:	b480      	push	{r7}
 8101b54:	b083      	sub	sp, #12
 8101b56:	af00      	add	r7, sp, #0
 8101b58:	6078      	str	r0, [r7, #4]
 8101b5a:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	683a      	ldr	r2, [r7, #0]
 8101b60:	601a      	str	r2, [r3, #0]
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	4618      	mov	r0, r3
 8101b66:	370c      	adds	r7, #12
 8101b68:	46bd      	mov	sp, r7
 8101b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b6e:	4770      	bx	lr

08101b70 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
	_M_insert(_Arg&& __arg, const _NodeGenerator& __node_gen,
 8101b70:	b590      	push	{r4, r7, lr}
 8101b72:	b089      	sub	sp, #36	@ 0x24
 8101b74:	af02      	add	r7, sp, #8
 8101b76:	60f8      	str	r0, [r7, #12]
 8101b78:	60b9      	str	r1, [r7, #8]
 8101b7a:	607a      	str	r2, [r7, #4]
 8101b7c:	603b      	str	r3, [r7, #0]
	    _S_forward_key(_ExtractKey{}(std::forward<_Arg>(__arg))),
 8101b7e:	6878      	ldr	r0, [r7, #4]
 8101b80:	f000 f8ea 	bl	8101d58 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101b84:	4602      	mov	r2, r0
 8101b86:	f107 0314 	add.w	r3, r7, #20
 8101b8a:	4611      	mov	r1, r2
 8101b8c:	4618      	mov	r0, r3
 8101b8e:	f000 f8ee 	bl	8101d6e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8101b92:	4603      	mov	r3, r0
 8101b94:	4618      	mov	r0, r3
 8101b96:	f000 f8f7 	bl	8101d88 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>
 8101b9a:	4604      	mov	r4, r0
	  return _M_insert_unique(
 8101b9c:	6878      	ldr	r0, [r7, #4]
 8101b9e:	f000 f8db 	bl	8101d58 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101ba2:	4602      	mov	r2, r0
 8101ba4:	68f8      	ldr	r0, [r7, #12]
 8101ba6:	683b      	ldr	r3, [r7, #0]
 8101ba8:	9300      	str	r3, [sp, #0]
 8101baa:	4613      	mov	r3, r2
 8101bac:	4622      	mov	r2, r4
 8101bae:	68b9      	ldr	r1, [r7, #8]
 8101bb0:	f000 f8f5 	bl	8101d9e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_>
	    std::forward<_Arg>(__arg), __node_gen);
 8101bb4:	bf00      	nop
	}
 8101bb6:	68f8      	ldr	r0, [r7, #12]
 8101bb8:	371c      	adds	r7, #28
 8101bba:	46bd      	mov	sp, r7
 8101bbc:	bd90      	pop	{r4, r7, pc}

08101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8101bbe:	b480      	push	{r7}
 8101bc0:	b083      	sub	sp, #12
 8101bc2:	af00      	add	r7, sp, #0
 8101bc4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	4618      	mov	r0, r3
 8101bcc:	370c      	adds	r7, #12
 8101bce:	46bd      	mov	sp, r7
 8101bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd4:	4770      	bx	lr

08101bd6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8101bd6:	b590      	push	{r4, r7, lr}
 8101bd8:	b083      	sub	sp, #12
 8101bda:	af00      	add	r7, sp, #0
 8101bdc:	6078      	str	r0, [r7, #4]
 8101bde:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8101be0:	6878      	ldr	r0, [r7, #4]
 8101be2:	f000 f98d 	bl	8101f00 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101be6:	4604      	mov	r4, r0
 8101be8:	683b      	ldr	r3, [r7, #0]
 8101bea:	3304      	adds	r3, #4
 8101bec:	4618      	mov	r0, r3
 8101bee:	f000 f993 	bl	8101f18 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8101bf2:	4603      	mov	r3, r0
 8101bf4:	4619      	mov	r1, r3
 8101bf6:	4620      	mov	r0, r4
 8101bf8:	f000 f99b 	bl	8101f32 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE7destroyISC_EEvRSE_PT_>
      _M_deallocate_node_ptr(__n);
 8101bfc:	6839      	ldr	r1, [r7, #0]
 8101bfe:	6878      	ldr	r0, [r7, #4]
 8101c00:	f000 f9a3 	bl	8101f4a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE22_M_deallocate_node_ptrEPSD_>
    }
 8101c04:	bf00      	nop
 8101c06:	370c      	adds	r7, #12
 8101c08:	46bd      	mov	sp, r7
 8101c0a:	bd90      	pop	{r4, r7, pc}

08101c0c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNSC_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8101c0c:	b480      	push	{r7}
 8101c0e:	b083      	sub	sp, #12
 8101c10:	af00      	add	r7, sp, #0
 8101c12:	6078      	str	r0, [r7, #4]
 8101c14:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	3318      	adds	r3, #24
 8101c1a:	683a      	ldr	r2, [r7, #0]
 8101c1c:	429a      	cmp	r2, r3
 8101c1e:	bf0c      	ite	eq
 8101c20:	2301      	moveq	r3, #1
 8101c22:	2300      	movne	r3, #0
 8101c24:	b2db      	uxtb	r3, r3
 8101c26:	2b00      	cmp	r3, #0
 8101c28:	bf14      	ite	ne
 8101c2a:	2301      	movne	r3, #1
 8101c2c:	2300      	moveq	r3, #0
 8101c2e:	b2db      	uxtb	r3, r3
 8101c30:	4618      	mov	r0, r3
 8101c32:	370c      	adds	r7, #12
 8101c34:	46bd      	mov	sp, r7
 8101c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c3a:	4770      	bx	lr

08101c3c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8101c3c:	b580      	push	{r7, lr}
 8101c3e:	b086      	sub	sp, #24
 8101c40:	af00      	add	r7, sp, #0
 8101c42:	60f8      	str	r0, [r7, #12]
 8101c44:	60b9      	str	r1, [r7, #8]
 8101c46:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8101c48:	68b8      	ldr	r0, [r7, #8]
 8101c4a:	f000 f994 	bl	8101f76 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 8101c4e:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8101c50:	68f8      	ldr	r0, [r7, #12]
 8101c52:	f000 f955 	bl	8101f00 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101c56:	4602      	mov	r2, r0
 8101c58:	f107 0310 	add.w	r3, r7, #16
 8101c5c:	4611      	mov	r1, r2
 8101c5e:	4618      	mov	r0, r3
 8101c60:	f000 f995 	bl	8101f8e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8101c64:	f107 0310 	add.w	r3, r7, #16
 8101c68:	687a      	ldr	r2, [r7, #4]
 8101c6a:	6979      	ldr	r1, [r7, #20]
 8101c6c:	4618      	mov	r0, r3
 8101c6e:	f000 f9a6 	bl	8101fbe <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8101c72:	f107 0310 	add.w	r3, r7, #16
 8101c76:	4618      	mov	r0, r3
 8101c78:	f000 f996 	bl	8101fa8 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8101c7c:	3718      	adds	r7, #24
 8101c7e:	46bd      	mov	sp, r7
 8101c80:	bd80      	pop	{r7, pc}

08101c82 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ISB_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8101c82:	b580      	push	{r7, lr}
 8101c84:	b082      	sub	sp, #8
 8101c86:	af00      	add	r7, sp, #0
 8101c88:	6078      	str	r0, [r7, #4]
 8101c8a:	6039      	str	r1, [r7, #0]
 8101c8c:	6878      	ldr	r0, [r7, #4]
 8101c8e:	f000 f9b5 	bl	8101ffc <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1Ev>
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	4618      	mov	r0, r3
 8101c96:	3708      	adds	r7, #8
 8101c98:	46bd      	mov	sp, r7
 8101c9a:	bd80      	pop	{r7, pc}

08101c9c <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSG_RKSE_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 8101c9c:	b580      	push	{r7, lr}
 8101c9e:	b084      	sub	sp, #16
 8101ca0:	af00      	add	r7, sp, #0
 8101ca2:	60f8      	str	r0, [r7, #12]
 8101ca4:	60b9      	str	r1, [r7, #8]
 8101ca6:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 8101ca8:	68b9      	ldr	r1, [r7, #8]
 8101caa:	68f8      	ldr	r0, [r7, #12]
 8101cac:	f000 f9b1 	bl	8102012 <_ZNSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKSE_>
 8101cb0:	6879      	ldr	r1, [r7, #4]
 8101cb2:	68f8      	ldr	r0, [r7, #12]
 8101cb4:	f000 f9bb 	bl	810202e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>
      { }
 8101cb8:	68fb      	ldr	r3, [r7, #12]
 8101cba:	4618      	mov	r0, r3
 8101cbc:	3710      	adds	r7, #16
 8101cbe:	46bd      	mov	sp, r7
 8101cc0:	bd80      	pop	{r7, pc}

08101cc2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEC1ISE_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 8101cc2:	b580      	push	{r7, lr}
 8101cc4:	b082      	sub	sp, #8
 8101cc6:	af00      	add	r7, sp, #0
 8101cc8:	6078      	str	r0, [r7, #4]
 8101cca:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 8101ccc:	6838      	ldr	r0, [r7, #0]
 8101cce:	f000 f9bb 	bl	8102048 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>
 8101cd2:	4603      	mov	r3, r0
 8101cd4:	4619      	mov	r1, r3
 8101cd6:	6878      	ldr	r0, [r7, #4]
 8101cd8:	f000 f9c1 	bl	810205e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EEC1ISE_EEOT_>
	{ }
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	4618      	mov	r0, r3
 8101ce0:	3708      	adds	r7, #8
 8101ce2:	46bd      	mov	sp, r7
 8101ce4:	bd80      	pop	{r7, pc}

08101ce6 <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 8101ce6:	b480      	push	{r7}
 8101ce8:	b083      	sub	sp, #12
 8101cea:	af00      	add	r7, sp, #0
 8101cec:	6078      	str	r0, [r7, #4]
 8101cee:	7039      	strb	r1, [r7, #0]
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	4618      	mov	r0, r3
 8101cf4:	370c      	adds	r7, #12
 8101cf6:	46bd      	mov	sp, r7
 8101cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cfc:	4770      	bx	lr

08101cfe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8101cfe:	b590      	push	{r4, r7, lr}
 8101d00:	b087      	sub	sp, #28
 8101d02:	af00      	add	r7, sp, #0
 8101d04:	6078      	str	r0, [r7, #4]
 8101d06:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8101d08:	6878      	ldr	r0, [r7, #4]
 8101d0a:	f000 f8f9 	bl	8101f00 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101d0e:	4602      	mov	r2, r0
 8101d10:	f107 030c 	add.w	r3, r7, #12
 8101d14:	4611      	mov	r1, r2
 8101d16:	4618      	mov	r0, r3
 8101d18:	f000 f939 	bl	8101f8e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8101d1c:	f107 030c 	add.w	r3, r7, #12
 8101d20:	6839      	ldr	r1, [r7, #0]
 8101d22:	4618      	mov	r0, r3
 8101d24:	f000 f9ad 	bl	8102082 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8101d28:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8101d2a:	6978      	ldr	r0, [r7, #20]
 8101d2c:	f000 f9da 	bl	81020e4 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8101d30:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8101d32:	683b      	ldr	r3, [r7, #0]
 8101d34:	009b      	lsls	r3, r3, #2
 8101d36:	693a      	ldr	r2, [r7, #16]
 8101d38:	4610      	mov	r0, r2
 8101d3a:	461a      	mov	r2, r3
 8101d3c:	2100      	movs	r1, #0
 8101d3e:	f022 fda1 	bl	8124884 <memset>
      return __p;
 8101d42:	693c      	ldr	r4, [r7, #16]
    }
 8101d44:	f107 030c 	add.w	r3, r7, #12
 8101d48:	4618      	mov	r0, r3
 8101d4a:	f000 f92d 	bl	8101fa8 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8101d4e:	4623      	mov	r3, r4
    }
 8101d50:	4618      	mov	r0, r3
 8101d52:	371c      	adds	r7, #28
 8101d54:	46bd      	mov	sp, r7
 8101d56:	bd90      	pop	{r4, r7, pc}

08101d58 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101d58:	b480      	push	{r7}
 8101d5a:	b083      	sub	sp, #12
 8101d5c:	af00      	add	r7, sp, #0
 8101d5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	4618      	mov	r0, r3
 8101d64:	370c      	adds	r7, #12
 8101d66:	46bd      	mov	sp, r7
 8101d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d6c:	4770      	bx	lr

08101d6e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>:
      operator()(_Tp&& __x) const noexcept
 8101d6e:	b580      	push	{r7, lr}
 8101d70:	b082      	sub	sp, #8
 8101d72:	af00      	add	r7, sp, #0
 8101d74:	6078      	str	r0, [r7, #4]
 8101d76:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8101d78:	6838      	ldr	r0, [r7, #0]
 8101d7a:	f7ff ffed 	bl	8101d58 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101d7e:	4603      	mov	r3, r0
 8101d80:	4618      	mov	r0, r3
 8101d82:	3708      	adds	r7, #8
 8101d84:	46bd      	mov	sp, r7
 8101d86:	bd80      	pop	{r7, pc}

08101d88 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>:
      _S_forward_key(const key_type& __k)
 8101d88:	b480      	push	{r7}
 8101d8a:	b083      	sub	sp, #12
 8101d8c:	af00      	add	r7, sp, #0
 8101d8e:	6078      	str	r0, [r7, #4]
      { return __k; }
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	4618      	mov	r0, r3
 8101d94:	370c      	adds	r7, #12
 8101d96:	46bd      	mov	sp, r7
 8101d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d9c:	4770      	bx	lr

08101d9e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8101d9e:	b590      	push	{r4, r7, lr}
 8101da0:	b093      	sub	sp, #76	@ 0x4c
 8101da2:	af02      	add	r7, sp, #8
 8101da4:	60f8      	str	r0, [r7, #12]
 8101da6:	60b9      	str	r1, [r7, #8]
 8101da8:	607a      	str	r2, [r7, #4]
 8101daa:	603b      	str	r3, [r7, #0]
	if (size() <= __small_size_threshold())
 8101dac:	68b8      	ldr	r0, [r7, #8]
 8101dae:	f000 f9a4 	bl	81020fa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8101db2:	4604      	mov	r4, r0
 8101db4:	f000 f9ad 	bl	8102112 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8101db8:	4603      	mov	r3, r0
 8101dba:	429c      	cmp	r4, r3
 8101dbc:	bf94      	ite	ls
 8101dbe:	2301      	movls	r3, #1
 8101dc0:	2300      	movhi	r3, #0
 8101dc2:	b2db      	uxtb	r3, r3
 8101dc4:	2b00      	cmp	r3, #0
 8101dc6:	d033      	beq.n	8101e30 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x92>
	  for (auto __it = begin(); __it != end(); ++__it)
 8101dc8:	68b8      	ldr	r0, [r7, #8]
 8101dca:	f000 f9a9 	bl	8102120 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 8101dce:	4603      	mov	r3, r0
 8101dd0:	617b      	str	r3, [r7, #20]
 8101dd2:	e01a      	b.n	8101e0a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x6c>
	    if (this->_M_key_equals_tr(__k, *__it._M_cur))
 8101dd4:	697b      	ldr	r3, [r7, #20]
 8101dd6:	3304      	adds	r3, #4
 8101dd8:	461a      	mov	r2, r3
 8101dda:	6879      	ldr	r1, [r7, #4]
 8101ddc:	68b8      	ldr	r0, [r7, #8]
 8101dde:	f000 f9e2 	bl	81021a6 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>
 8101de2:	4603      	mov	r3, r0
 8101de4:	2b00      	cmp	r3, #0
 8101de6:	d00b      	beq.n	8101e00 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x62>
	      return { __it, false };
 8101de8:	2300      	movs	r3, #0
 8101dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8101dee:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8101df2:	f107 0314 	add.w	r3, r7, #20
 8101df6:	4619      	mov	r1, r3
 8101df8:	68f8      	ldr	r0, [r7, #12]
 8101dfa:	f000 f9f4 	bl	81021e6 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>
      }
 8101dfe:	e07b      	b.n	8101ef8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x15a>
	  for (auto __it = begin(); __it != end(); ++__it)
 8101e00:	f107 0314 	add.w	r3, r7, #20
 8101e04:	4618      	mov	r0, r3
 8101e06:	f000 f9c1 	bl	810218c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>
 8101e0a:	68b8      	ldr	r0, [r7, #8]
 8101e0c:	f000 f99b 	bl	8102146 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8101e10:	4603      	mov	r3, r0
 8101e12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8101e14:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8101e18:	f107 0314 	add.w	r3, r7, #20
 8101e1c:	4611      	mov	r1, r2
 8101e1e:	4618      	mov	r0, r3
 8101e20:	f000 f9a0 	bl	8102164 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 8101e24:	4603      	mov	r3, r0
 8101e26:	f083 0301 	eor.w	r3, r3, #1
 8101e2a:	b2db      	uxtb	r3, r3
 8101e2c:	2b00      	cmp	r3, #0
 8101e2e:	d1d1      	bne.n	8101dd4 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x36>
	__hash_code __code = this->_M_hash_code_tr(__k);
 8101e30:	6879      	ldr	r1, [r7, #4]
 8101e32:	68b8      	ldr	r0, [r7, #8]
 8101e34:	f000 f9f0 	bl	8102218 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>
 8101e38:	63f8      	str	r0, [r7, #60]	@ 0x3c
	size_type __bkt = _M_bucket_index(__code);
 8101e3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8101e3c:	68b8      	ldr	r0, [r7, #8]
 8101e3e:	f000 fa00 	bl	8102242 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8101e42:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (size() > __small_size_threshold())
 8101e44:	68b8      	ldr	r0, [r7, #8]
 8101e46:	f000 f958 	bl	81020fa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8101e4a:	4604      	mov	r4, r0
 8101e4c:	f000 f961 	bl	8102112 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8101e50:	4603      	mov	r3, r0
 8101e52:	429c      	cmp	r4, r3
 8101e54:	bf8c      	ite	hi
 8101e56:	2301      	movhi	r3, #1
 8101e58:	2300      	movls	r3, #0
 8101e5a:	b2db      	uxtb	r3, r3
 8101e5c:	2b00      	cmp	r3, #0
 8101e5e:	d01b      	beq.n	8101e98 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0xfa>
	  if (__node_ptr __node = _M_find_node_tr(__bkt, __k, __code))
 8101e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101e62:	687a      	ldr	r2, [r7, #4]
 8101e64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101e66:	68b8      	ldr	r0, [r7, #8]
 8101e68:	f000 f9fc 	bl	8102264 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j>
 8101e6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8101e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101e70:	2b00      	cmp	r3, #0
 8101e72:	d011      	beq.n	8101e98 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0xfa>
	    return { iterator(__node), false };
 8101e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101e78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8101e7a:	4618      	mov	r0, r3
 8101e7c:	f000 fa0b 	bl	8102296 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8101e80:	2300      	movs	r3, #0
 8101e82:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8101e86:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8101e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101e8e:	4619      	mov	r1, r3
 8101e90:	68f8      	ldr	r0, [r7, #12]
 8101e92:	f000 fa0f 	bl	81022b4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1ISC_bEEOT_OT0_>
      }
 8101e96:	e02f      	b.n	8101ef8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKSA_NSC_10_AllocNodeISaINSC_10_Hash_nodeISA_Lb0EEEEEEEES2_INSC_14_Node_iteratorISA_Lb0ELb0EEEbEOT_OT0_RKT1_+0x15a>
	_Scoped_node __node {
 8101e98:	6878      	ldr	r0, [r7, #4]
 8101e9a:	f000 fa24 	bl	81022e6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8101e9e:	4604      	mov	r4, r0
 8101ea0:	6838      	ldr	r0, [r7, #0]
 8101ea2:	f7ff ff59 	bl	8101d58 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8101ea6:	4603      	mov	r3, r0
 8101ea8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8101eaa:	4619      	mov	r1, r3
 8101eac:	4620      	mov	r0, r4
 8101eae:	f000 fa25 	bl	81022fc <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKN7APIDoIP12EDoIPRequestERKSt4pairIS6_S8_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_AllocNodeISaINS_10_Hash_nodeISF_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSN_>
 8101eb2:	4601      	mov	r1, r0
 8101eb4:	f107 031c 	add.w	r3, r7, #28
 8101eb8:	68ba      	ldr	r2, [r7, #8]
 8101eba:	4618      	mov	r0, r3
 8101ebc:	f000 fa37 	bl	810232e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNSC_10_Hash_nodeISA_Lb0EEEPNSC_16_Hashtable_allocISaISQ_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8101ec0:	6a3b      	ldr	r3, [r7, #32]
 8101ec2:	2201      	movs	r2, #1
 8101ec4:	9200      	str	r2, [sp, #0]
 8101ec6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8101ec8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8101eca:	68b8      	ldr	r0, [r7, #8]
 8101ecc:	f000 fa57 	bl	810237e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj>
 8101ed0:	4603      	mov	r3, r0
 8101ed2:	61bb      	str	r3, [r7, #24]
	__node._M_node = nullptr;
 8101ed4:	2300      	movs	r3, #0
 8101ed6:	623b      	str	r3, [r7, #32]
	return { __pos, true };
 8101ed8:	2301      	movs	r3, #1
 8101eda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8101ede:	f107 0233 	add.w	r2, r7, #51	@ 0x33
 8101ee2:	f107 0318 	add.w	r3, r7, #24
 8101ee6:	4619      	mov	r1, r3
 8101ee8:	68f8      	ldr	r0, [r7, #12]
 8101eea:	f000 f97c 	bl	81021e6 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>
      }
 8101eee:	f107 031c 	add.w	r3, r7, #28
 8101ef2:	4618      	mov	r0, r3
 8101ef4:	f000 fa2e 	bl	8102354 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8101ef8:	68f8      	ldr	r0, [r7, #12]
 8101efa:	3744      	adds	r7, #68	@ 0x44
 8101efc:	46bd      	mov	sp, r7
 8101efe:	bd90      	pop	{r4, r7, pc}

08101f00 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8101f00:	b580      	push	{r7, lr}
 8101f02:	b082      	sub	sp, #8
 8101f04:	af00      	add	r7, sp, #0
 8101f06:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8101f08:	6878      	ldr	r0, [r7, #4]
 8101f0a:	f000 fa81 	bl	8102410 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EE6_M_getEv>
 8101f0e:	4603      	mov	r3, r0
 8101f10:	4618      	mov	r0, r3
 8101f12:	3708      	adds	r7, #8
 8101f14:	46bd      	mov	sp, r7
 8101f16:	bd80      	pop	{r7, pc}

08101f18 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>:
      _M_valptr() noexcept
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	b082      	sub	sp, #8
 8101f1c:	af00      	add	r7, sp, #0
 8101f1e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8101f20:	687b      	ldr	r3, [r7, #4]
 8101f22:	4618      	mov	r0, r3
 8101f24:	f000 fa7f 	bl	8102426 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>
 8101f28:	4603      	mov	r3, r0
 8101f2a:	4618      	mov	r0, r3
 8101f2c:	3708      	adds	r7, #8
 8101f2e:	46bd      	mov	sp, r7
 8101f30:	bd80      	pop	{r7, pc}

08101f32 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8101f32:	b580      	push	{r7, lr}
 8101f34:	b082      	sub	sp, #8
 8101f36:	af00      	add	r7, sp, #0
 8101f38:	6078      	str	r0, [r7, #4]
 8101f3a:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 8101f3c:	6838      	ldr	r0, [r7, #0]
 8101f3e:	f000 fa7e 	bl	810243e <_ZSt10destroy_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEvPT_>
#endif
	}
 8101f42:	bf00      	nop
 8101f44:	3708      	adds	r7, #8
 8101f46:	46bd      	mov	sp, r7
 8101f48:	bd80      	pop	{r7, pc}

08101f4a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE22_M_deallocate_node_ptrEPSD_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8101f4a:	b580      	push	{r7, lr}
 8101f4c:	b084      	sub	sp, #16
 8101f4e:	af00      	add	r7, sp, #0
 8101f50:	6078      	str	r0, [r7, #4]
 8101f52:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8101f54:	6838      	ldr	r0, [r7, #0]
 8101f56:	f000 fa7c 	bl	8102452 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESD_Lb0EE10pointer_toERSD_>
 8101f5a:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8101f5c:	6878      	ldr	r0, [r7, #4]
 8101f5e:	f7ff ffcf 	bl	8101f00 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 8101f62:	4603      	mov	r3, r0
 8101f64:	2201      	movs	r2, #1
 8101f66:	68f9      	ldr	r1, [r7, #12]
 8101f68:	4618      	mov	r0, r3
 8101f6a:	f000 fa7e 	bl	810246a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j>
    }
 8101f6e:	bf00      	nop
 8101f70:	3710      	adds	r7, #16
 8101f72:	46bd      	mov	sp, r7
 8101f74:	bd80      	pop	{r7, pc}

08101f76 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
 8101f76:	b580      	push	{r7, lr}
 8101f78:	b082      	sub	sp, #8
 8101f7a:	af00      	add	r7, sp, #0
 8101f7c:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8101f7e:	6878      	ldr	r0, [r7, #4]
 8101f80:	f000 fa92 	bl	81024a8 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8101f84:	4603      	mov	r3, r0
 8101f86:	4618      	mov	r0, r3
 8101f88:	3708      	adds	r7, #8
 8101f8a:	46bd      	mov	sp, r7
 8101f8c:	bd80      	pop	{r7, pc}

08101f8e <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES5_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEERKSaIT_E>:
 8101f8e:	b580      	push	{r7, lr}
 8101f90:	b082      	sub	sp, #8
 8101f92:	af00      	add	r7, sp, #0
 8101f94:	6078      	str	r0, [r7, #4]
 8101f96:	6039      	str	r1, [r7, #0]
 8101f98:	6878      	ldr	r0, [r7, #4]
 8101f9a:	f000 fa91 	bl	81024c0 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	4618      	mov	r0, r3
 8101fa2:	3708      	adds	r7, #8
 8101fa4:	46bd      	mov	sp, r7
 8101fa6:	bd80      	pop	{r7, pc}

08101fa8 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8101fa8:	b480      	push	{r7}
 8101faa:	b083      	sub	sp, #12
 8101fac:	af00      	add	r7, sp, #0
 8101fae:	6078      	str	r0, [r7, #4]
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	4618      	mov	r0, r3
 8101fb4:	370c      	adds	r7, #12
 8101fb6:	46bd      	mov	sp, r7
 8101fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fbc:	4770      	bx	lr

08101fbe <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8101fbe:	b580      	push	{r7, lr}
 8101fc0:	b088      	sub	sp, #32
 8101fc2:	af00      	add	r7, sp, #0
 8101fc4:	60f8      	str	r0, [r7, #12]
 8101fc6:	60b9      	str	r1, [r7, #8]
 8101fc8:	607a      	str	r2, [r7, #4]
 8101fca:	68fb      	ldr	r3, [r7, #12]
 8101fcc:	61fb      	str	r3, [r7, #28]
 8101fce:	68bb      	ldr	r3, [r7, #8]
 8101fd0:	61bb      	str	r3, [r7, #24]
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	617b      	str	r3, [r7, #20]

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
 8101fd6:	f7ff f947 	bl	8101268 <__is_constant_evaluated>
 8101fda:	4603      	mov	r3, r0
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d003      	beq.n	8101fe8 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j+0x2a>
	  {
	    ::operator delete(__p);
 8101fe0:	69b8      	ldr	r0, [r7, #24]
 8101fe2:	f021 fac7 	bl	8123574 <_ZdlPv>
	    return;
 8101fe6:	e005      	b.n	8101ff4 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j+0x36>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
 8101fe8:	697a      	ldr	r2, [r7, #20]
 8101fea:	69b9      	ldr	r1, [r7, #24]
 8101fec:	69f8      	ldr	r0, [r7, #28]
 8101fee:	f000 fc18 	bl	8102822 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8101ff2:	bf00      	nop
 8101ff4:	bf00      	nop
 8101ff6:	3720      	adds	r7, #32
 8101ff8:	46bd      	mov	sp, r7
 8101ffa:	bd80      	pop	{r7, pc}

08101ffc <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1Ev>:
 8101ffc:	b480      	push	{r7}
 8101ffe:	b083      	sub	sp, #12
 8102000:	af00      	add	r7, sp, #0
 8102002:	6078      	str	r0, [r7, #4]
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	4618      	mov	r0, r3
 8102008:	370c      	adds	r7, #12
 810200a:	46bd      	mov	sp, r7
 810200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102010:	4770      	bx	lr

08102012 <_ZNSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKSE_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 8102012:	b580      	push	{r7, lr}
 8102014:	b082      	sub	sp, #8
 8102016:	af00      	add	r7, sp, #0
 8102018:	6078      	str	r0, [r7, #4]
 810201a:	6039      	str	r1, [r7, #0]
 810201c:	6839      	ldr	r1, [r7, #0]
 810201e:	6878      	ldr	r0, [r7, #4]
 8102020:	f000 fa59 	bl	81024d6 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	4618      	mov	r0, r3
 8102028:	3708      	adds	r7, #8
 810202a:	46bd      	mov	sp, r7
 810202c:	bd80      	pop	{r7, pc}

0810202e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 810202e:	b580      	push	{r7, lr}
 8102030:	b082      	sub	sp, #8
 8102032:	af00      	add	r7, sp, #0
 8102034:	6078      	str	r0, [r7, #4]
 8102036:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8102038:	6838      	ldr	r0, [r7, #0]
 810203a:	f000 fa59 	bl	81024f0 <_ZSt7forwardIRKSt8equal_toIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>
	{ }
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	4618      	mov	r0, r3
 8102042:	3708      	adds	r7, #8
 8102044:	46bd      	mov	sp, r7
 8102046:	bd80      	pop	{r7, pc}

08102048 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102048:	b480      	push	{r7}
 810204a:	b083      	sub	sp, #12
 810204c:	af00      	add	r7, sp, #0
 810204e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	4618      	mov	r0, r3
 8102054:	370c      	adds	r7, #12
 8102056:	46bd      	mov	sp, r7
 8102058:	f85d 7b04 	ldr.w	r7, [sp], #4
 810205c:	4770      	bx	lr

0810205e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EEC1ISE_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 810205e:	b580      	push	{r7, lr}
 8102060:	b082      	sub	sp, #8
 8102062:	af00      	add	r7, sp, #0
 8102064:	6078      	str	r0, [r7, #4]
 8102066:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8102068:	6838      	ldr	r0, [r7, #0]
 810206a:	f7ff ffed 	bl	8102048 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEOT_RNSt16remove_referenceISF_E4typeE>
 810206e:	4603      	mov	r3, r0
 8102070:	4619      	mov	r1, r3
 8102072:	6878      	ldr	r0, [r7, #4]
 8102074:	f000 fa47 	bl	8102506 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSD_>
	{ }
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	4618      	mov	r0, r3
 810207c:	3708      	adds	r7, #8
 810207e:	46bd      	mov	sp, r7
 8102080:	bd80      	pop	{r7, pc}

08102082 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8102082:	b580      	push	{r7, lr}
 8102084:	b084      	sub	sp, #16
 8102086:	af00      	add	r7, sp, #0
 8102088:	6078      	str	r0, [r7, #4]
 810208a:	6039      	str	r1, [r7, #0]
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	60fb      	str	r3, [r7, #12]
 8102090:	683b      	ldr	r3, [r7, #0]
 8102092:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8102094:	f7ff f8e8 	bl	8101268 <__is_constant_evaluated>
 8102098:	4603      	mov	r3, r0
 810209a:	2b00      	cmp	r3, #0
 810209c:	d016      	beq.n	81020cc <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 810209e:	68bb      	ldr	r3, [r7, #8]
 81020a0:	2200      	movs	r2, #0
 81020a2:	0099      	lsls	r1, r3, #2
 81020a4:	0f9b      	lsrs	r3, r3, #30
 81020a6:	2b00      	cmp	r3, #0
 81020a8:	d000      	beq.n	81020ac <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x2a>
 81020aa:	2201      	movs	r2, #1
 81020ac:	460b      	mov	r3, r1
 81020ae:	60bb      	str	r3, [r7, #8]
 81020b0:	4613      	mov	r3, r2
 81020b2:	f003 0301 	and.w	r3, r3, #1
 81020b6:	b2db      	uxtb	r3, r3
 81020b8:	2b00      	cmp	r3, #0
 81020ba:	d001      	beq.n	81020c0 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x3e>
	      std::__throw_bad_array_new_length();
 81020bc:	f021 fb3e 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 81020c0:	68bb      	ldr	r3, [r7, #8]
 81020c2:	4618      	mov	r0, r3
 81020c4:	f021 fa69 	bl	812359a <_Znwj>
 81020c8:	4603      	mov	r3, r0
 81020ca:	e007      	b.n	81020dc <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 81020cc:	68bb      	ldr	r3, [r7, #8]
 81020ce:	2200      	movs	r2, #0
 81020d0:	4619      	mov	r1, r3
 81020d2:	68f8      	ldr	r0, [r7, #12]
 81020d4:	f000 fbcb 	bl	810286e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 81020d8:	4603      	mov	r3, r0
 81020da:	bf00      	nop
      { return __a.allocate(__n); }
 81020dc:	4618      	mov	r0, r3
 81020de:	3710      	adds	r7, #16
 81020e0:	46bd      	mov	sp, r7
 81020e2:	bd80      	pop	{r7, pc}

081020e4 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 81020e4:	b480      	push	{r7}
 81020e6:	b083      	sub	sp, #12
 81020e8:	af00      	add	r7, sp, #0
 81020ea:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 81020ec:	687b      	ldr	r3, [r7, #4]
    }
 81020ee:	4618      	mov	r0, r3
 81020f0:	370c      	adds	r7, #12
 81020f2:	46bd      	mov	sp, r7
 81020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020f8:	4770      	bx	lr

081020fa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>:
      size() const noexcept
 81020fa:	b480      	push	{r7}
 81020fc:	b083      	sub	sp, #12
 81020fe:	af00      	add	r7, sp, #0
 8102100:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	68db      	ldr	r3, [r3, #12]
 8102106:	4618      	mov	r0, r3
 8102108:	370c      	adds	r7, #12
 810210a:	46bd      	mov	sp, r7
 810210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102110:	4770      	bx	lr

08102112 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8102112:	b580      	push	{r7, lr}
 8102114:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 8102116:	f000 fa04 	bl	8102522 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIN7APIDoIP12EDoIPRequestEEE22__small_size_thresholdEv>
 810211a:	4603      	mov	r3, r0
      }
 810211c:	4618      	mov	r0, r3
 810211e:	bd80      	pop	{r7, pc}

08102120 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() noexcept
 8102120:	b580      	push	{r7, lr}
 8102122:	b084      	sub	sp, #16
 8102124:	af00      	add	r7, sp, #0
 8102126:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 8102128:	6878      	ldr	r0, [r7, #4]
 810212a:	f7ff fc6f 	bl	8101a0c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 810212e:	4602      	mov	r2, r0
 8102130:	f107 030c 	add.w	r3, r7, #12
 8102134:	4611      	mov	r1, r2
 8102136:	4618      	mov	r0, r3
 8102138:	f000 f8ad 	bl	8102296 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 810213c:	68fb      	ldr	r3, [r7, #12]
 810213e:	4618      	mov	r0, r3
 8102140:	3710      	adds	r7, #16
 8102142:	46bd      	mov	sp, r7
 8102144:	bd80      	pop	{r7, pc}

08102146 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8102146:	b580      	push	{r7, lr}
 8102148:	b084      	sub	sp, #16
 810214a:	af00      	add	r7, sp, #0
 810214c:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 810214e:	f107 030c 	add.w	r3, r7, #12
 8102152:	2100      	movs	r1, #0
 8102154:	4618      	mov	r0, r3
 8102156:	f000 f89e 	bl	8102296 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 810215a:	68fb      	ldr	r3, [r7, #12]
 810215c:	4618      	mov	r0, r3
 810215e:	3710      	adds	r7, #16
 8102160:	46bd      	mov	sp, r7
 8102162:	bd80      	pop	{r7, pc}

08102164 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>:
      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8102164:	b480      	push	{r7}
 8102166:	b083      	sub	sp, #12
 8102168:	af00      	add	r7, sp, #0
 810216a:	6078      	str	r0, [r7, #4]
 810216c:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	681a      	ldr	r2, [r3, #0]
 8102172:	683b      	ldr	r3, [r7, #0]
 8102174:	681b      	ldr	r3, [r3, #0]
 8102176:	429a      	cmp	r2, r3
 8102178:	bf0c      	ite	eq
 810217a:	2301      	moveq	r3, #1
 810217c:	2300      	movne	r3, #0
 810217e:	b2db      	uxtb	r3, r3
 8102180:	4618      	mov	r0, r3
 8102182:	370c      	adds	r7, #12
 8102184:	46bd      	mov	sp, r7
 8102186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810218a:	4770      	bx	lr

0810218c <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>:
      operator++() noexcept
 810218c:	b580      	push	{r7, lr}
 810218e:	b082      	sub	sp, #8
 8102190:	af00      	add	r7, sp, #0
 8102192:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	4618      	mov	r0, r3
 8102198:	f000 f9cb 	bl	8102532 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>
	return *this;
 810219c:	687b      	ldr	r3, [r7, #4]
      }
 810219e:	4618      	mov	r0, r3
 81021a0:	3708      	adds	r7, #8
 81021a2:	46bd      	mov	sp, r7
 81021a4:	bd80      	pop	{r7, pc}

081021a6 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>:
	_M_key_equals_tr(const _Kt& __k,
 81021a6:	b590      	push	{r4, r7, lr}
 81021a8:	b087      	sub	sp, #28
 81021aa:	af00      	add	r7, sp, #0
 81021ac:	60f8      	str	r0, [r7, #12]
 81021ae:	60b9      	str	r1, [r7, #8]
 81021b0:	607a      	str	r2, [r7, #4]
	  return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 81021b2:	68f8      	ldr	r0, [r7, #12]
 81021b4:	f000 f9cd 	bl	8102552 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 81021b8:	4604      	mov	r4, r0
 81021ba:	687b      	ldr	r3, [r7, #4]
 81021bc:	4618      	mov	r0, r3
 81021be:	f000 f9d4 	bl	810256a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 81021c2:	4602      	mov	r2, r0
 81021c4:	f107 0314 	add.w	r3, r7, #20
 81021c8:	4611      	mov	r1, r2
 81021ca:	4618      	mov	r0, r3
 81021cc:	f7ff fdcf 	bl	8101d6e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 81021d0:	4603      	mov	r3, r0
 81021d2:	461a      	mov	r2, r3
 81021d4:	68b9      	ldr	r1, [r7, #8]
 81021d6:	4620      	mov	r0, r4
 81021d8:	f000 f9d3 	bl	8102582 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>
 81021dc:	4603      	mov	r3, r0
	}
 81021de:	4618      	mov	r0, r3
 81021e0:	371c      	adds	r7, #28
 81021e2:	46bd      	mov	sp, r7
 81021e4:	bd90      	pop	{r4, r7, pc}

081021e6 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1IRSC_bEEOT_OT0_>:

      /// Constructor accepting two values of arbitrary types
      template<typename _U1, typename _U2>
	requires (_S_constructible<_U1, _U2>())
	constexpr explicit(!_S_convertible<_U1, _U2>())
	pair(_U1&& __x, _U2&& __y)
 81021e6:	b580      	push	{r7, lr}
 81021e8:	b084      	sub	sp, #16
 81021ea:	af00      	add	r7, sp, #0
 81021ec:	60f8      	str	r0, [r7, #12]
 81021ee:	60b9      	str	r1, [r7, #8]
 81021f0:	607a      	str	r2, [r7, #4]
	noexcept(_S_nothrow_constructible<_U1, _U2>())
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 81021f2:	68b8      	ldr	r0, [r7, #8]
 81021f4:	f000 f9dc 	bl	81025b0 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISF_E4typeE>
 81021f8:	4602      	mov	r2, r0
 81021fa:	68fb      	ldr	r3, [r7, #12]
 81021fc:	6812      	ldr	r2, [r2, #0]
 81021fe:	601a      	str	r2, [r3, #0]
 8102200:	6878      	ldr	r0, [r7, #4]
 8102202:	f7ff fad1 	bl	81017a8 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8102206:	4603      	mov	r3, r0
 8102208:	781a      	ldrb	r2, [r3, #0]
 810220a:	68fb      	ldr	r3, [r7, #12]
 810220c:	711a      	strb	r2, [r3, #4]
	{ }
 810220e:	68fb      	ldr	r3, [r7, #12]
 8102210:	4618      	mov	r0, r3
 8102212:	3710      	adds	r7, #16
 8102214:	46bd      	mov	sp, r7
 8102216:	bd80      	pop	{r7, pc}

08102218 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>:
	_M_hash_code_tr(const _Kt& __k) const
 8102218:	b580      	push	{r7, lr}
 810221a:	b082      	sub	sp, #8
 810221c:	af00      	add	r7, sp, #0
 810221e:	6078      	str	r0, [r7, #4]
 8102220:	6039      	str	r1, [r7, #0]
	  return _M_hash()(__k);
 8102222:	6878      	ldr	r0, [r7, #4]
 8102224:	f000 f9cf 	bl	81025c6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8102228:	4602      	mov	r2, r0
 810222a:	683b      	ldr	r3, [r7, #0]
 810222c:	f993 3000 	ldrsb.w	r3, [r3]
 8102230:	4619      	mov	r1, r3
 8102232:	4610      	mov	r0, r2
 8102234:	f000 f9d3 	bl	81025de <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>
 8102238:	4603      	mov	r3, r0
	}
 810223a:	4618      	mov	r0, r3
 810223c:	3708      	adds	r7, #8
 810223e:	46bd      	mov	sp, r7
 8102240:	bd80      	pop	{r7, pc}

08102242 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8102242:	b580      	push	{r7, lr}
 8102244:	b082      	sub	sp, #8
 8102246:	af00      	add	r7, sp, #0
 8102248:	6078      	str	r0, [r7, #4]
 810224a:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	685b      	ldr	r3, [r3, #4]
 8102250:	461a      	mov	r2, r3
 8102252:	6839      	ldr	r1, [r7, #0]
 8102254:	6878      	ldr	r0, [r7, #4]
 8102256:	f000 f9d5 	bl	8102604 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 810225a:	4603      	mov	r3, r0
 810225c:	4618      	mov	r0, r3
 810225e:	3708      	adds	r7, #8
 8102260:	46bd      	mov	sp, r7
 8102262:	bd80      	pop	{r7, pc}

08102264 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j>:
	_M_find_node_tr(size_type __bkt, const _Kt& __key,
 8102264:	b580      	push	{r7, lr}
 8102266:	b086      	sub	sp, #24
 8102268:	af00      	add	r7, sp, #0
 810226a:	60f8      	str	r0, [r7, #12]
 810226c:	60b9      	str	r1, [r7, #8]
 810226e:	607a      	str	r2, [r7, #4]
 8102270:	603b      	str	r3, [r7, #0]
	  auto __before_n = _M_find_before_node_tr(__bkt, __key, __c);
 8102272:	683b      	ldr	r3, [r7, #0]
 8102274:	687a      	ldr	r2, [r7, #4]
 8102276:	68b9      	ldr	r1, [r7, #8]
 8102278:	68f8      	ldr	r0, [r7, #12]
 810227a:	f000 f9d5 	bl	8102628 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j>
 810227e:	6178      	str	r0, [r7, #20]
	  if (__before_n)
 8102280:	697b      	ldr	r3, [r7, #20]
 8102282:	2b00      	cmp	r3, #0
 8102284:	d002      	beq.n	810228c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j+0x28>
	    return static_cast<__node_ptr>(__before_n->_M_nxt);
 8102286:	697b      	ldr	r3, [r7, #20]
 8102288:	681b      	ldr	r3, [r3, #0]
 810228a:	e000      	b.n	810228e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNSC_10_Hash_nodeISA_Lb0EEEjRKT_j+0x2a>
	  return nullptr;
 810228c:	2300      	movs	r3, #0
	}
 810228e:	4618      	mov	r0, r3
 8102290:	3718      	adds	r7, #24
 8102292:	46bd      	mov	sp, r7
 8102294:	bd80      	pop	{r7, pc}

08102296 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8102296:	b580      	push	{r7, lr}
 8102298:	b082      	sub	sp, #8
 810229a:	af00      	add	r7, sp, #0
 810229c:	6078      	str	r0, [r7, #4]
 810229e:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	6839      	ldr	r1, [r7, #0]
 81022a4:	4618      	mov	r0, r3
 81022a6:	f000 fa04 	bl	81026b2 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	4618      	mov	r0, r3
 81022ae:	3708      	adds	r7, #8
 81022b0:	46bd      	mov	sp, r7
 81022b2:	bd80      	pop	{r7, pc}

081022b4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEbEC1ISC_bEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 81022b4:	b580      	push	{r7, lr}
 81022b6:	b084      	sub	sp, #16
 81022b8:	af00      	add	r7, sp, #0
 81022ba:	60f8      	str	r0, [r7, #12]
 81022bc:	60b9      	str	r1, [r7, #8]
 81022be:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 81022c0:	68b8      	ldr	r0, [r7, #8]
 81022c2:	f000 fa05 	bl	81026d0 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISE_E4typeE>
 81022c6:	4602      	mov	r2, r0
 81022c8:	68fb      	ldr	r3, [r7, #12]
 81022ca:	6812      	ldr	r2, [r2, #0]
 81022cc:	601a      	str	r2, [r3, #0]
 81022ce:	6878      	ldr	r0, [r7, #4]
 81022d0:	f7ff fa6a 	bl	81017a8 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 81022d4:	4603      	mov	r3, r0
 81022d6:	781a      	ldrb	r2, [r3, #0]
 81022d8:	68fb      	ldr	r3, [r7, #12]
 81022da:	711a      	strb	r2, [r3, #4]
	{ }
 81022dc:	68fb      	ldr	r3, [r7, #12]
 81022de:	4618      	mov	r0, r3
 81022e0:	3710      	adds	r7, #16
 81022e2:	46bd      	mov	sp, r7
 81022e4:	bd80      	pop	{r7, pc}

081022e6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81022e6:	b480      	push	{r7}
 81022e8:	b083      	sub	sp, #12
 81022ea:	af00      	add	r7, sp, #0
 81022ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	4618      	mov	r0, r3
 81022f2:	370c      	adds	r7, #12
 81022f4:	46bd      	mov	sp, r7
 81022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fa:	4770      	bx	lr

081022fc <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKN7APIDoIP12EDoIPRequestERKSt4pairIS6_S8_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_AllocNodeISaINS_10_Hash_nodeISF_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSN_>:
	_S_build(_Kt&& __k, _Arg&& __arg, const _NodeGenerator& __node_gen)
 81022fc:	b590      	push	{r4, r7, lr}
 81022fe:	b085      	sub	sp, #20
 8102300:	af00      	add	r7, sp, #0
 8102302:	60f8      	str	r0, [r7, #12]
 8102304:	60b9      	str	r1, [r7, #8]
 8102306:	607a      	str	r2, [r7, #4]
	  return __node_gen(std::forward<_Kt>(__k),
 8102308:	68f8      	ldr	r0, [r7, #12]
 810230a:	f7ff ffec 	bl	81022e6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 810230e:	4604      	mov	r4, r0
			    std::forward<_Arg>(__arg).second);
 8102310:	68b8      	ldr	r0, [r7, #8]
 8102312:	f7ff fd21 	bl	8101d58 <_ZSt7forwardIRKSt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEOT_RNSt16remove_referenceISD_E4typeE>
 8102316:	4603      	mov	r3, r0
 8102318:	3304      	adds	r3, #4
	  return __node_gen(std::forward<_Kt>(__k),
 810231a:	461a      	mov	r2, r3
 810231c:	4621      	mov	r1, r4
 810231e:	6878      	ldr	r0, [r7, #4]
 8102320:	f000 f9e1 	bl	81026e6 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEclIJRS5_RKSB_EEEPSD_DpOT_>
 8102324:	4603      	mov	r3, r0
	}
 8102326:	4618      	mov	r0, r3
 8102328:	3714      	adds	r7, #20
 810232a:	46bd      	mov	sp, r7
 810232c:	bd90      	pop	{r4, r7, pc}

0810232e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNSC_10_Hash_nodeISA_Lb0EEEPNSC_16_Hashtable_allocISaISQ_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 810232e:	b480      	push	{r7}
 8102330:	b085      	sub	sp, #20
 8102332:	af00      	add	r7, sp, #0
 8102334:	60f8      	str	r0, [r7, #12]
 8102336:	60b9      	str	r1, [r7, #8]
 8102338:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 810233a:	68fb      	ldr	r3, [r7, #12]
 810233c:	687a      	ldr	r2, [r7, #4]
 810233e:	601a      	str	r2, [r3, #0]
 8102340:	68fb      	ldr	r3, [r7, #12]
 8102342:	68ba      	ldr	r2, [r7, #8]
 8102344:	605a      	str	r2, [r3, #4]
 8102346:	68fb      	ldr	r3, [r7, #12]
 8102348:	4618      	mov	r0, r3
 810234a:	3714      	adds	r7, #20
 810234c:	46bd      	mov	sp, r7
 810234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102352:	4770      	bx	lr

08102354 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8102354:	b580      	push	{r7, lr}
 8102356:	b082      	sub	sp, #8
 8102358:	af00      	add	r7, sp, #0
 810235a:	6078      	str	r0, [r7, #4]
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	685b      	ldr	r3, [r3, #4]
 8102360:	2b00      	cmp	r3, #0
 8102362:	d007      	beq.n	8102374 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	681a      	ldr	r2, [r3, #0]
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	685b      	ldr	r3, [r3, #4]
 810236c:	4619      	mov	r1, r3
 810236e:	4610      	mov	r0, r2
 8102370:	f7ff fc31 	bl	8101bd6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE18_M_deallocate_nodeEPSD_>
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	4618      	mov	r0, r3
 8102378:	3708      	adds	r7, #8
 810237a:	46bd      	mov	sp, r7
 810237c:	bd80      	pop	{r7, pc}

0810237e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 810237e:	b590      	push	{r4, r7, lr}
 8102380:	b08d      	sub	sp, #52	@ 0x34
 8102382:	af02      	add	r7, sp, #8
 8102384:	60f8      	str	r0, [r7, #12]
 8102386:	60b9      	str	r1, [r7, #8]
 8102388:	607a      	str	r2, [r7, #4]
 810238a:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 810238c:	68fb      	ldr	r3, [r7, #12]
 810238e:	3310      	adds	r3, #16
 8102390:	4618      	mov	r0, r3
 8102392:	f7fe ffc0 	bl	8101316 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8102396:	4603      	mov	r3, r0
 8102398:	61fb      	str	r3, [r7, #28]
 810239a:	f107 031c 	add.w	r3, r7, #28
 810239e:	627b      	str	r3, [r7, #36]	@ 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 81023a0:	68fb      	ldr	r3, [r7, #12]
 81023a2:	f103 0110 	add.w	r1, r3, #16
 81023a6:	68fb      	ldr	r3, [r7, #12]
 81023a8:	685a      	ldr	r2, [r3, #4]
 81023aa:	68fb      	ldr	r3, [r7, #12]
 81023ac:	68dc      	ldr	r4, [r3, #12]
 81023ae:	f107 0014 	add.w	r0, r7, #20
 81023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81023b4:	9300      	str	r3, [sp, #0]
 81023b6:	4623      	mov	r3, r4
 81023b8:	f021 fa0e 	bl	81237d8 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 81023bc:	7d3b      	ldrb	r3, [r7, #20]
 81023be:	2b00      	cmp	r3, #0
 81023c0:	d00a      	beq.n	81023d8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 81023c2:	69bb      	ldr	r3, [r7, #24]
 81023c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81023c6:	4619      	mov	r1, r3
 81023c8:	68f8      	ldr	r0, [r7, #12]
 81023ca:	f000 f9a6 	bl	810271a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 81023ce:	6879      	ldr	r1, [r7, #4]
 81023d0:	68f8      	ldr	r0, [r7, #12]
 81023d2:	f7ff ff36 	bl	8102242 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 81023d6:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 81023d8:	683b      	ldr	r3, [r7, #0]
 81023da:	3304      	adds	r3, #4
 81023dc:	687a      	ldr	r2, [r7, #4]
 81023de:	4619      	mov	r1, r3
 81023e0:	68f8      	ldr	r0, [r7, #12]
 81023e2:	f000 f9a9 	bl	8102738 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 81023e6:	683a      	ldr	r2, [r7, #0]
 81023e8:	68b9      	ldr	r1, [r7, #8]
 81023ea:	68f8      	ldr	r0, [r7, #12]
 81023ec:	f000 f9b0 	bl	8102750 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE>
      ++_M_element_count;
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	68db      	ldr	r3, [r3, #12]
 81023f4:	1c5a      	adds	r2, r3, #1
 81023f6:	68fb      	ldr	r3, [r7, #12]
 81023f8:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 81023fa:	f107 0320 	add.w	r3, r7, #32
 81023fe:	6839      	ldr	r1, [r7, #0]
 8102400:	4618      	mov	r0, r3
 8102402:	f7ff ff48 	bl	8102296 <_ZNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8102406:	6a3b      	ldr	r3, [r7, #32]
    }
 8102408:	4618      	mov	r0, r3
 810240a:	372c      	adds	r7, #44	@ 0x2c
 810240c:	46bd      	mov	sp, r7
 810240e:	bd90      	pop	{r4, r7, pc}

08102410 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8102410:	b480      	push	{r7}
 8102412:	b083      	sub	sp, #12
 8102414:	af00      	add	r7, sp, #0
 8102416:	6078      	str	r0, [r7, #4]
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	4618      	mov	r0, r3
 810241c:	370c      	adds	r7, #12
 810241e:	46bd      	mov	sp, r7
 8102420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102424:	4770      	bx	lr

08102426 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8102426:	b580      	push	{r7, lr}
 8102428:	b082      	sub	sp, #8
 810242a:	af00      	add	r7, sp, #0
 810242c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 810242e:	6878      	ldr	r0, [r7, #4]
 8102430:	f000 f9d5 	bl	81027de <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>
 8102434:	4603      	mov	r3, r0
 8102436:	4618      	mov	r0, r3
 8102438:	3708      	adds	r7, #8
 810243a:	46bd      	mov	sp, r7
 810243c:	bd80      	pop	{r7, pc}

0810243e <_ZSt10destroy_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEvPT_>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#if __cplusplus >= 201703L
  template <typename _Tp>
    _GLIBCXX20_CONSTEXPR inline void
    destroy_at(_Tp* __location)
 810243e:	b480      	push	{r7}
 8102440:	b083      	sub	sp, #12
 8102442:	af00      	add	r7, sp, #0
 8102444:	6078      	str	r0, [r7, #4]
	  for (auto& __x : *__location)
	    std::destroy_at(std::__addressof(__x));
	}
      else
	__location->~_Tp();
    }
 8102446:	bf00      	nop
 8102448:	370c      	adds	r7, #12
 810244a:	46bd      	mov	sp, r7
 810244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102450:	4770      	bx	lr

08102452 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESD_Lb0EE10pointer_toERSD_>:
      pointer_to(element_type& __r) noexcept
 8102452:	b580      	push	{r7, lr}
 8102454:	b082      	sub	sp, #8
 8102456:	af00      	add	r7, sp, #0
 8102458:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 810245a:	6878      	ldr	r0, [r7, #4]
 810245c:	f000 f9ca 	bl	81027f4 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>
 8102460:	4603      	mov	r3, r0
 8102462:	4618      	mov	r0, r3
 8102464:	3708      	adds	r7, #8
 8102466:	46bd      	mov	sp, r7
 8102468:	bd80      	pop	{r7, pc}

0810246a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810246a:	b580      	push	{r7, lr}
 810246c:	b088      	sub	sp, #32
 810246e:	af00      	add	r7, sp, #0
 8102470:	60f8      	str	r0, [r7, #12]
 8102472:	60b9      	str	r1, [r7, #8]
 8102474:	607a      	str	r2, [r7, #4]
 8102476:	68fb      	ldr	r3, [r7, #12]
 8102478:	61fb      	str	r3, [r7, #28]
 810247a:	68bb      	ldr	r3, [r7, #8]
 810247c:	61bb      	str	r3, [r7, #24]
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8102482:	f7fe fef1 	bl	8101268 <__is_constant_evaluated>
 8102486:	4603      	mov	r3, r0
 8102488:	2b00      	cmp	r3, #0
 810248a:	d003      	beq.n	8102494 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j+0x2a>
	    ::operator delete(__p);
 810248c:	69b8      	ldr	r0, [r7, #24]
 810248e:	f021 f871 	bl	8123574 <_ZdlPv>
	    return;
 8102492:	e005      	b.n	81024a0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE10deallocateERSE_PSD_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8102494:	697a      	ldr	r2, [r7, #20]
 8102496:	69b9      	ldr	r1, [r7, #24]
 8102498:	69f8      	ldr	r0, [r7, #28]
 810249a:	f000 fb22 	bl	8102ae2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE10deallocateEPSD_j>
      { __a.deallocate(__p, __n); }
 810249e:	bf00      	nop
 81024a0:	bf00      	nop
 81024a2:	3720      	adds	r7, #32
 81024a4:	46bd      	mov	sp, r7
 81024a6:	bd80      	pop	{r7, pc}

081024a8 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 81024a8:	b580      	push	{r7, lr}
 81024aa:	b082      	sub	sp, #8
 81024ac:	af00      	add	r7, sp, #0
 81024ae:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 81024b0:	6878      	ldr	r0, [r7, #4]
 81024b2:	f000 f9ab 	bl	810280c <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 81024b6:	4603      	mov	r3, r0
 81024b8:	4618      	mov	r0, r3
 81024ba:	3708      	adds	r7, #8
 81024bc:	46bd      	mov	sp, r7
 81024be:	bd80      	pop	{r7, pc}

081024c0 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
 81024c0:	b480      	push	{r7}
 81024c2:	b083      	sub	sp, #12
 81024c4:	af00      	add	r7, sp, #0
 81024c6:	6078      	str	r0, [r7, #4]
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	4618      	mov	r0, r3
 81024cc:	370c      	adds	r7, #12
 81024ce:	46bd      	mov	sp, r7
 81024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024d4:	4770      	bx	lr

081024d6 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EEC1IRKS4_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 81024d6:	b580      	push	{r7, lr}
 81024d8:	b082      	sub	sp, #8
 81024da:	af00      	add	r7, sp, #0
 81024dc:	6078      	str	r0, [r7, #4]
 81024de:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 81024e0:	6838      	ldr	r0, [r7, #0]
 81024e2:	f000 f9ad 	bl	8102840 <_ZSt7forwardIRKSt4hashIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>
	{ }
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	4618      	mov	r0, r3
 81024ea:	3708      	adds	r7, #8
 81024ec:	46bd      	mov	sp, r7
 81024ee:	bd80      	pop	{r7, pc}

081024f0 <_ZSt7forwardIRKSt8equal_toIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81024f0:	b480      	push	{r7}
 81024f2:	b083      	sub	sp, #12
 81024f4:	af00      	add	r7, sp, #0
 81024f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	4618      	mov	r0, r3
 81024fc:	370c      	adds	r7, #12
 81024fe:	46bd      	mov	sp, r7
 8102500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102504:	4770      	bx	lr

08102506 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSD_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8102506:	b580      	push	{r7, lr}
 8102508:	b082      	sub	sp, #8
 810250a:	af00      	add	r7, sp, #0
 810250c:	6078      	str	r0, [r7, #4]
 810250e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8102510:	6839      	ldr	r1, [r7, #0]
 8102512:	6878      	ldr	r0, [r7, #4]
 8102514:	f000 f99f 	bl	8102856 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSE_>
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	4618      	mov	r0, r3
 810251c:	3708      	adds	r7, #8
 810251e:	46bd      	mov	sp, r7
 8102520:	bd80      	pop	{r7, pc}

08102522 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIN7APIDoIP12EDoIPRequestEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8102522:	b480      	push	{r7}
 8102524:	af00      	add	r7, sp, #0
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
 8102526:	2300      	movs	r3, #0
 8102528:	4618      	mov	r0, r3
 810252a:	46bd      	mov	sp, r7
 810252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102530:	4770      	bx	lr

08102532 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>:
      _M_incr() noexcept
 8102532:	b580      	push	{r7, lr}
 8102534:	b082      	sub	sp, #8
 8102536:	af00      	add	r7, sp, #0
 8102538:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	681b      	ldr	r3, [r3, #0]
 810253e:	4618      	mov	r0, r3
 8102540:	f7ff fb3d 	bl	8101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8102544:	4602      	mov	r2, r0
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	601a      	str	r2, [r3, #0]
 810254a:	bf00      	nop
 810254c:	3708      	adds	r7, #8
 810254e:	46bd      	mov	sp, r7
 8102550:	bd80      	pop	{r7, pc}

08102552 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 8102552:	b580      	push	{r7, lr}
 8102554:	b082      	sub	sp, #8
 8102556:	af00      	add	r7, sp, #0
 8102558:	6078      	str	r0, [r7, #4]
 810255a:	6878      	ldr	r0, [r7, #4]
 810255c:	f000 f9b1 	bl	81028c2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>
 8102560:	4603      	mov	r3, r0
 8102562:	4618      	mov	r0, r3
 8102564:	3708      	adds	r7, #8
 8102566:	46bd      	mov	sp, r7
 8102568:	bd80      	pop	{r7, pc}

0810256a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>:
      _M_v() const noexcept
 810256a:	b580      	push	{r7, lr}
 810256c:	b082      	sub	sp, #8
 810256e:	af00      	add	r7, sp, #0
 8102570:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8102572:	6878      	ldr	r0, [r7, #4]
 8102574:	f000 f9b0 	bl	81028d8 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8102578:	4603      	mov	r3, r0
 810257a:	4618      	mov	r0, r3
 810257c:	3708      	adds	r7, #8
 810257e:	46bd      	mov	sp, r7
 8102580:	bd80      	pop	{r7, pc}

08102582 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8102582:	b480      	push	{r7}
 8102584:	b085      	sub	sp, #20
 8102586:	af00      	add	r7, sp, #0
 8102588:	60f8      	str	r0, [r7, #12]
 810258a:	60b9      	str	r1, [r7, #8]
 810258c:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 810258e:	68bb      	ldr	r3, [r7, #8]
 8102590:	f993 2000 	ldrsb.w	r2, [r3]
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	f993 3000 	ldrsb.w	r3, [r3]
 810259a:	429a      	cmp	r2, r3
 810259c:	bf0c      	ite	eq
 810259e:	2301      	moveq	r3, #1
 81025a0:	2300      	movne	r3, #0
 81025a2:	b2db      	uxtb	r3, r3
 81025a4:	4618      	mov	r0, r3
 81025a6:	3714      	adds	r7, #20
 81025a8:	46bd      	mov	sp, r7
 81025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025ae:	4770      	bx	lr

081025b0 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81025b0:	b480      	push	{r7}
 81025b2:	b083      	sub	sp, #12
 81025b4:	af00      	add	r7, sp, #0
 81025b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	4618      	mov	r0, r3
 81025bc:	370c      	adds	r7, #12
 81025be:	46bd      	mov	sp, r7
 81025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025c4:	4770      	bx	lr

081025c6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 81025c6:	b580      	push	{r7, lr}
 81025c8:	b082      	sub	sp, #8
 81025ca:	af00      	add	r7, sp, #0
 81025cc:	6078      	str	r0, [r7, #4]
 81025ce:	6878      	ldr	r0, [r7, #4]
 81025d0:	f000 f98f 	bl	81028f2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>
 81025d4:	4603      	mov	r3, r0
 81025d6:	4618      	mov	r0, r3
 81025d8:	3708      	adds	r7, #8
 81025da:	46bd      	mov	sp, r7
 81025dc:	bd80      	pop	{r7, pc}

081025de <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>:
      operator()(_Tp __val) const noexcept
 81025de:	b580      	push	{r7, lr}
 81025e0:	b084      	sub	sp, #16
 81025e2:	af00      	add	r7, sp, #0
 81025e4:	6078      	str	r0, [r7, #4]
 81025e6:	460b      	mov	r3, r1
 81025e8:	70fb      	strb	r3, [r7, #3]
       return hash<__type>{}(static_cast<__type>(__val));
 81025ea:	f997 2003 	ldrsb.w	r2, [r7, #3]
 81025ee:	f107 030c 	add.w	r3, r7, #12
 81025f2:	4611      	mov	r1, r2
 81025f4:	4618      	mov	r0, r3
 81025f6:	f7fe fe4b 	bl	8101290 <_ZNKSt4hashIaEclEa>
 81025fa:	4603      	mov	r3, r0
      }
 81025fc:	4618      	mov	r0, r3
 81025fe:	3710      	adds	r7, #16
 8102600:	46bd      	mov	sp, r7
 8102602:	bd80      	pop	{r7, pc}

08102604 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8102604:	b580      	push	{r7, lr}
 8102606:	b086      	sub	sp, #24
 8102608:	af00      	add	r7, sp, #0
 810260a:	60f8      	str	r0, [r7, #12]
 810260c:	60b9      	str	r1, [r7, #8]
 810260e:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8102610:	f107 0314 	add.w	r3, r7, #20
 8102614:	687a      	ldr	r2, [r7, #4]
 8102616:	68b9      	ldr	r1, [r7, #8]
 8102618:	4618      	mov	r0, r3
 810261a:	f7fe fe55 	bl	81012c8 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 810261e:	4603      	mov	r3, r0
 8102620:	4618      	mov	r0, r3
 8102622:	3718      	adds	r7, #24
 8102624:	46bd      	mov	sp, r7
 8102626:	bd80      	pop	{r7, pc}

08102628 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8102628:	b580      	push	{r7, lr}
 810262a:	b086      	sub	sp, #24
 810262c:	af00      	add	r7, sp, #0
 810262e:	60f8      	str	r0, [r7, #12]
 8102630:	60b9      	str	r1, [r7, #8]
 8102632:	607a      	str	r2, [r7, #4]
 8102634:	603b      	str	r3, [r7, #0]
	__node_base_ptr __prev_p = _M_buckets[__bkt];
 8102636:	68fb      	ldr	r3, [r7, #12]
 8102638:	681a      	ldr	r2, [r3, #0]
 810263a:	68bb      	ldr	r3, [r7, #8]
 810263c:	009b      	lsls	r3, r3, #2
 810263e:	4413      	add	r3, r2
 8102640:	681b      	ldr	r3, [r3, #0]
 8102642:	617b      	str	r3, [r7, #20]
	if (!__prev_p)
 8102644:	697b      	ldr	r3, [r7, #20]
 8102646:	2b00      	cmp	r3, #0
 8102648:	d101      	bne.n	810264e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x26>
	  return nullptr;
 810264a:	2300      	movs	r3, #0
 810264c:	e02d      	b.n	81026aa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x82>
	for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 810264e:	697b      	ldr	r3, [r7, #20]
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	613b      	str	r3, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 8102654:	693b      	ldr	r3, [r7, #16]
 8102656:	3304      	adds	r3, #4
 8102658:	683a      	ldr	r2, [r7, #0]
 810265a:	6879      	ldr	r1, [r7, #4]
 810265c:	68f8      	ldr	r0, [r7, #12]
 810265e:	f000 f953 	bl	8102908 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE>
 8102662:	4603      	mov	r3, r0
 8102664:	2b00      	cmp	r3, #0
 8102666:	d001      	beq.n	810266c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x44>
	      return __prev_p;
 8102668:	697b      	ldr	r3, [r7, #20]
 810266a:	e01e      	b.n	81026aa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x82>
	    if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 810266c:	693b      	ldr	r3, [r7, #16]
 810266e:	681b      	ldr	r3, [r3, #0]
 8102670:	2b00      	cmp	r3, #0
 8102672:	d00c      	beq.n	810268e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x66>
 8102674:	6938      	ldr	r0, [r7, #16]
 8102676:	f7ff faa2 	bl	8101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 810267a:	4603      	mov	r3, r0
 810267c:	3304      	adds	r3, #4
 810267e:	4619      	mov	r1, r3
 8102680:	68f8      	ldr	r0, [r7, #12]
 8102682:	f000 f95e 	bl	8102942 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 8102686:	4602      	mov	r2, r0
 8102688:	68bb      	ldr	r3, [r7, #8]
 810268a:	4293      	cmp	r3, r2
 810268c:	d001      	beq.n	8102692 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x6a>
 810268e:	2301      	movs	r3, #1
 8102690:	e000      	b.n	8102694 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x6c>
 8102692:	2300      	movs	r3, #0
 8102694:	2b00      	cmp	r3, #0
 8102696:	d106      	bne.n	81026a6 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x7e>
	    __prev_p = __p;
 8102698:	693b      	ldr	r3, [r7, #16]
 810269a:	617b      	str	r3, [r7, #20]
	     __p = __p->_M_next())
 810269c:	6938      	ldr	r0, [r7, #16]
 810269e:	f7ff fa8e 	bl	8101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 81026a2:	6138      	str	r0, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 81026a4:	e7d6      	b.n	8102654 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNSC_15_Hash_node_baseEjRKT_j+0x2c>
	      break;
 81026a6:	bf00      	nop
	return nullptr;
 81026a8:	2300      	movs	r3, #0
      }
 81026aa:	4618      	mov	r0, r3
 81026ac:	3718      	adds	r7, #24
 81026ae:	46bd      	mov	sp, r7
 81026b0:	bd80      	pop	{r7, pc}

081026b2 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 81026b2:	b480      	push	{r7}
 81026b4:	b083      	sub	sp, #12
 81026b6:	af00      	add	r7, sp, #0
 81026b8:	6078      	str	r0, [r7, #4]
 81026ba:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	683a      	ldr	r2, [r7, #0]
 81026c0:	601a      	str	r2, [r3, #0]
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	4618      	mov	r0, r3
 81026c6:	370c      	adds	r7, #12
 81026c8:	46bd      	mov	sp, r7
 81026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026ce:	4770      	bx	lr

081026d0 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81026d0:	b480      	push	{r7}
 81026d2:	b083      	sub	sp, #12
 81026d4:	af00      	add	r7, sp, #0
 81026d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	4618      	mov	r0, r3
 81026dc:	370c      	adds	r7, #12
 81026de:	46bd      	mov	sp, r7
 81026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e4:	4770      	bx	lr

081026e6 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEEclIJRS5_RKSB_EEEPSD_DpOT_>:
	operator()(_Args&&... __args) const
 81026e6:	b5b0      	push	{r4, r5, r7, lr}
 81026e8:	b084      	sub	sp, #16
 81026ea:	af00      	add	r7, sp, #0
 81026ec:	60f8      	str	r0, [r7, #12]
 81026ee:	60b9      	str	r1, [r7, #8]
 81026f0:	607a      	str	r2, [r7, #4]
	{ return _M_h._M_allocate_node(std::forward<_Args>(__args)...); }
 81026f2:	68fb      	ldr	r3, [r7, #12]
 81026f4:	681c      	ldr	r4, [r3, #0]
 81026f6:	68b8      	ldr	r0, [r7, #8]
 81026f8:	f7ff fdf5 	bl	81022e6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 81026fc:	4605      	mov	r5, r0
 81026fe:	6878      	ldr	r0, [r7, #4]
 8102700:	f000 f930 	bl	8102964 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102704:	4603      	mov	r3, r0
 8102706:	461a      	mov	r2, r3
 8102708:	4629      	mov	r1, r5
 810270a:	4620      	mov	r0, r4
 810270c:	f000 f942 	bl	8102994 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE16_M_allocate_nodeIJRS5_RKSB_EEEPSD_DpOT_>
 8102710:	4603      	mov	r3, r0
 8102712:	4618      	mov	r0, r3
 8102714:	3710      	adds	r7, #16
 8102716:	46bd      	mov	sp, r7
 8102718:	bdb0      	pop	{r4, r5, r7, pc}

0810271a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 810271a:	b580      	push	{r7, lr}
 810271c:	b084      	sub	sp, #16
 810271e:	af00      	add	r7, sp, #0
 8102720:	60f8      	str	r0, [r7, #12]
 8102722:	60b9      	str	r1, [r7, #8]
 8102724:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8102726:	461a      	mov	r2, r3
 8102728:	68b9      	ldr	r1, [r7, #8]
 810272a:	68f8      	ldr	r0, [r7, #12]
 810272c:	f000 f96a 	bl	8102a04 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8102730:	bf00      	nop
 8102732:	3710      	adds	r7, #16
 8102734:	46bd      	mov	sp, r7
 8102736:	bd80      	pop	{r7, pc}

08102738 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 8102738:	b480      	push	{r7}
 810273a:	b085      	sub	sp, #20
 810273c:	af00      	add	r7, sp, #0
 810273e:	60f8      	str	r0, [r7, #12]
 8102740:	60b9      	str	r1, [r7, #8]
 8102742:	607a      	str	r2, [r7, #4]
      { }
 8102744:	bf00      	nop
 8102746:	3714      	adds	r7, #20
 8102748:	46bd      	mov	sp, r7
 810274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810274e:	4770      	bx	lr

08102750 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8102750:	b5b0      	push	{r4, r5, r7, lr}
 8102752:	b084      	sub	sp, #16
 8102754:	af00      	add	r7, sp, #0
 8102756:	60f8      	str	r0, [r7, #12]
 8102758:	60b9      	str	r1, [r7, #8]
 810275a:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 810275c:	68fb      	ldr	r3, [r7, #12]
 810275e:	681a      	ldr	r2, [r3, #0]
 8102760:	68bb      	ldr	r3, [r7, #8]
 8102762:	009b      	lsls	r3, r3, #2
 8102764:	4413      	add	r3, r2
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	2b00      	cmp	r3, #0
 810276a:	d011      	beq.n	8102790 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 810276c:	68fb      	ldr	r3, [r7, #12]
 810276e:	681a      	ldr	r2, [r3, #0]
 8102770:	68bb      	ldr	r3, [r7, #8]
 8102772:	009b      	lsls	r3, r3, #2
 8102774:	4413      	add	r3, r2
 8102776:	681b      	ldr	r3, [r3, #0]
 8102778:	681a      	ldr	r2, [r3, #0]
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 810277e:	68fb      	ldr	r3, [r7, #12]
 8102780:	681a      	ldr	r2, [r3, #0]
 8102782:	68bb      	ldr	r3, [r7, #8]
 8102784:	009b      	lsls	r3, r3, #2
 8102786:	4413      	add	r3, r2
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	687a      	ldr	r2, [r7, #4]
 810278c:	601a      	str	r2, [r3, #0]
    }
 810278e:	e022      	b.n	81027d6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8102790:	68fb      	ldr	r3, [r7, #12]
 8102792:	689a      	ldr	r2, [r3, #8]
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8102798:	68fb      	ldr	r3, [r7, #12]
 810279a:	687a      	ldr	r2, [r7, #4]
 810279c:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	681b      	ldr	r3, [r3, #0]
 81027a2:	2b00      	cmp	r3, #0
 81027a4:	d00f      	beq.n	81027c6 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNSC_10_Hash_nodeISA_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 81027a6:	687c      	ldr	r4, [r7, #4]
 81027a8:	68fb      	ldr	r3, [r7, #12]
 81027aa:	681d      	ldr	r5, [r3, #0]
 81027ac:	6878      	ldr	r0, [r7, #4]
 81027ae:	f7ff fa06 	bl	8101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 81027b2:	4603      	mov	r3, r0
 81027b4:	3304      	adds	r3, #4
 81027b6:	4619      	mov	r1, r3
 81027b8:	68f8      	ldr	r0, [r7, #12]
 81027ba:	f000 f8c2 	bl	8102942 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 81027be:	4603      	mov	r3, r0
 81027c0:	009b      	lsls	r3, r3, #2
 81027c2:	442b      	add	r3, r5
 81027c4:	601c      	str	r4, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 81027c6:	68fb      	ldr	r3, [r7, #12]
 81027c8:	681a      	ldr	r2, [r3, #0]
 81027ca:	68bb      	ldr	r3, [r7, #8]
 81027cc:	009b      	lsls	r3, r3, #2
 81027ce:	4413      	add	r3, r2
 81027d0:	68fa      	ldr	r2, [r7, #12]
 81027d2:	3208      	adds	r2, #8
 81027d4:	601a      	str	r2, [r3, #0]
    }
 81027d6:	bf00      	nop
 81027d8:	3710      	adds	r7, #16
 81027da:	46bd      	mov	sp, r7
 81027dc:	bdb0      	pop	{r4, r5, r7, pc}

081027de <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>:
      _M_addr() noexcept
 81027de:	b480      	push	{r7}
 81027e0:	b083      	sub	sp, #12
 81027e2:	af00      	add	r7, sp, #0
 81027e4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 81027e6:	687b      	ldr	r3, [r7, #4]
      }
 81027e8:	4618      	mov	r0, r3
 81027ea:	370c      	adds	r7, #12
 81027ec:	46bd      	mov	sp, r7
 81027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027f2:	4770      	bx	lr

081027f4 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>:
    addressof(_Tp& __r) noexcept
 81027f4:	b580      	push	{r7, lr}
 81027f6:	b082      	sub	sp, #8
 81027f8:	af00      	add	r7, sp, #0
 81027fa:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 81027fc:	6878      	ldr	r0, [r7, #4]
 81027fe:	f000 f965 	bl	8102acc <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>
 8102802:	4603      	mov	r3, r0
 8102804:	4618      	mov	r0, r3
 8102806:	3708      	adds	r7, #8
 8102808:	46bd      	mov	sp, r7
 810280a:	bd80      	pop	{r7, pc}

0810280c <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 810280c:	b480      	push	{r7}
 810280e:	b083      	sub	sp, #12
 8102810:	af00      	add	r7, sp, #0
 8102812:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8102814:	687b      	ldr	r3, [r7, #4]
 8102816:	4618      	mov	r0, r3
 8102818:	370c      	adds	r7, #12
 810281a:	46bd      	mov	sp, r7
 810281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102820:	4770      	bx	lr

08102822 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102822:	b580      	push	{r7, lr}
 8102824:	b084      	sub	sp, #16
 8102826:	af00      	add	r7, sp, #0
 8102828:	60f8      	str	r0, [r7, #12]
 810282a:	60b9      	str	r1, [r7, #8]
 810282c:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	009b      	lsls	r3, r3, #2
 8102832:	4619      	mov	r1, r3
 8102834:	68b8      	ldr	r0, [r7, #8]
 8102836:	f020 fe9f 	bl	8123578 <_ZdlPvj>
      }
 810283a:	3710      	adds	r7, #16
 810283c:	46bd      	mov	sp, r7
 810283e:	bd80      	pop	{r7, pc}

08102840 <_ZSt7forwardIRKSt4hashIN7APIDoIP12EDoIPRequestEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102840:	b480      	push	{r7}
 8102842:	b083      	sub	sp, #12
 8102844:	af00      	add	r7, sp, #0
 8102846:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	4618      	mov	r0, r3
 810284c:	370c      	adds	r7, #12
 810284e:	46bd      	mov	sp, r7
 8102850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102854:	4770      	bx	lr

08102856 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEC1ERKSE_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8102856:	b480      	push	{r7}
 8102858:	b083      	sub	sp, #12
 810285a:	af00      	add	r7, sp, #0
 810285c:	6078      	str	r0, [r7, #4]
 810285e:	6039      	str	r1, [r7, #0]
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	4618      	mov	r0, r3
 8102864:	370c      	adds	r7, #12
 8102866:	46bd      	mov	sp, r7
 8102868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810286c:	4770      	bx	lr

0810286e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810286e:	b580      	push	{r7, lr}
 8102870:	b084      	sub	sp, #16
 8102872:	af00      	add	r7, sp, #0
 8102874:	60f8      	str	r0, [r7, #12]
 8102876:	60b9      	str	r1, [r7, #8]
 8102878:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810287a:	68f8      	ldr	r0, [r7, #12]
 810287c:	f000 f943 	bl	8102b06 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8102880:	4602      	mov	r2, r0
 8102882:	68bb      	ldr	r3, [r7, #8]
 8102884:	4293      	cmp	r3, r2
 8102886:	bf8c      	ite	hi
 8102888:	2301      	movhi	r3, #1
 810288a:	2300      	movls	r3, #0
 810288c:	b2db      	uxtb	r3, r3
 810288e:	2b00      	cmp	r3, #0
 8102890:	bf14      	ite	ne
 8102892:	2301      	movne	r3, #1
 8102894:	2300      	moveq	r3, #0
 8102896:	b2db      	uxtb	r3, r3
 8102898:	2b00      	cmp	r3, #0
 810289a:	d007      	beq.n	81028ac <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810289c:	68bb      	ldr	r3, [r7, #8]
 810289e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81028a2:	d301      	bcc.n	81028a8 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81028a4:	f020 ff4a 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81028a8:	f020 ff45 	bl	8123736 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81028ac:	68bb      	ldr	r3, [r7, #8]
 81028ae:	009b      	lsls	r3, r3, #2
 81028b0:	4618      	mov	r0, r3
 81028b2:	f020 fe72 	bl	812359a <_Znwj>
 81028b6:	4603      	mov	r3, r0
 81028b8:	bf00      	nop
      }
 81028ba:	4618      	mov	r0, r3
 81028bc:	3710      	adds	r7, #16
 81028be:	46bd      	mov	sp, r7
 81028c0:	bd80      	pop	{r7, pc}

081028c2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 81028c2:	b480      	push	{r7}
 81028c4:	b083      	sub	sp, #12
 81028c6:	af00      	add	r7, sp, #0
 81028c8:	6078      	str	r0, [r7, #4]
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	4618      	mov	r0, r3
 81028ce:	370c      	adds	r7, #12
 81028d0:	46bd      	mov	sp, r7
 81028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028d6:	4770      	bx	lr

081028d8 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>:
      _M_valptr() const noexcept
 81028d8:	b580      	push	{r7, lr}
 81028da:	b082      	sub	sp, #8
 81028dc:	af00      	add	r7, sp, #0
 81028de:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	4618      	mov	r0, r3
 81028e4:	f000 f91b 	bl	8102b1e <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>
 81028e8:	4603      	mov	r3, r0
 81028ea:	4618      	mov	r0, r3
 81028ec:	3708      	adds	r7, #8
 81028ee:	46bd      	mov	sp, r7
 81028f0:	bd80      	pop	{r7, pc}

081028f2 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIN7APIDoIP12EDoIPRequestEELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 81028f2:	b480      	push	{r7}
 81028f4:	b083      	sub	sp, #12
 81028f6:	af00      	add	r7, sp, #0
 81028f8:	6078      	str	r0, [r7, #4]
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	4618      	mov	r0, r3
 81028fe:	370c      	adds	r7, #12
 8102900:	46bd      	mov	sp, r7
 8102902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102906:	4770      	bx	lr

08102908 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE>:
	_M_equals_tr(const _Kt& __k, __hash_code __c,
 8102908:	b580      	push	{r7, lr}
 810290a:	b084      	sub	sp, #16
 810290c:	af00      	add	r7, sp, #0
 810290e:	60f8      	str	r0, [r7, #12]
 8102910:	60b9      	str	r1, [r7, #8]
 8102912:	607a      	str	r2, [r7, #4]
 8102914:	603b      	str	r3, [r7, #0]
	{ return _S_equals(__c, __n) && _M_key_equals_tr(__k, __n); }
 8102916:	6839      	ldr	r1, [r7, #0]
 8102918:	6878      	ldr	r0, [r7, #4]
 810291a:	f000 f90c 	bl	8102b36 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 810291e:	4603      	mov	r3, r0
 8102920:	2b00      	cmp	r3, #0
 8102922:	d009      	beq.n	8102938 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8102924:	683a      	ldr	r2, [r7, #0]
 8102926:	68b9      	ldr	r1, [r7, #8]
 8102928:	68f8      	ldr	r0, [r7, #12]
 810292a:	f7ff fc3c 	bl	81021a6 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueISB_Lb0EEE>
 810292e:	4603      	mov	r3, r0
 8102930:	2b00      	cmp	r3, #0
 8102932:	d001      	beq.n	8102938 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 8102934:	2301      	movs	r3, #1
 8102936:	e000      	b.n	810293a <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x32>
 8102938:	2300      	movs	r3, #0
 810293a:	4618      	mov	r0, r3
 810293c:	3710      	adds	r7, #16
 810293e:	46bd      	mov	sp, r7
 8102940:	bd80      	pop	{r7, pc}

08102942 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8102942:	b580      	push	{r7, lr}
 8102944:	b082      	sub	sp, #8
 8102946:	af00      	add	r7, sp, #0
 8102948:	6078      	str	r0, [r7, #4]
 810294a:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	685b      	ldr	r3, [r3, #4]
 8102950:	461a      	mov	r2, r3
 8102952:	6839      	ldr	r1, [r7, #0]
 8102954:	6878      	ldr	r0, [r7, #4]
 8102956:	f000 f8fa 	bl	8102b4e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>
 810295a:	4603      	mov	r3, r0
 810295c:	4618      	mov	r0, r3
 810295e:	3708      	adds	r7, #8
 8102960:	46bd      	mov	sp, r7
 8102962:	bd80      	pop	{r7, pc}

08102964 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102964:	b480      	push	{r7}
 8102966:	b083      	sub	sp, #12
 8102968:	af00      	add	r7, sp, #0
 810296a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	4618      	mov	r0, r3
 8102970:	370c      	adds	r7, #12
 8102972:	46bd      	mov	sp, r7
 8102974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102978:	4770      	bx	lr

0810297a <_ZNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1Ev>:
    struct _Hash_node
 810297a:	b580      	push	{r7, lr}
 810297c:	b082      	sub	sp, #8
 810297e:	af00      	add	r7, sp, #0
 8102980:	6078      	str	r0, [r7, #4]
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	4618      	mov	r0, r3
 8102986:	f7fe fc91 	bl	81012ac <_ZNSt8__detail15_Hash_node_baseC1Ev>
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	4618      	mov	r0, r3
 810298e:	3708      	adds	r7, #8
 8102990:	46bd      	mov	sp, r7
 8102992:	bd80      	pop	{r7, pc}

08102994 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE16_M_allocate_nodeIJRS5_RKSB_EEEPSD_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8102994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102996:	b087      	sub	sp, #28
 8102998:	af00      	add	r7, sp, #0
 810299a:	60f8      	str	r0, [r7, #12]
 810299c:	60b9      	str	r1, [r7, #8]
 810299e:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 81029a0:	68f8      	ldr	r0, [r7, #12]
 81029a2:	f7ff faad 	bl	8101f00 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 81029a6:	4603      	mov	r3, r0
 81029a8:	2101      	movs	r1, #1
 81029aa:	4618      	mov	r0, r3
 81029ac:	f000 f8f1 	bl	8102b92 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j>
 81029b0:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 81029b2:	6978      	ldr	r0, [r7, #20]
 81029b4:	f000 f925 	bl	8102c02 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_SF_>
 81029b8:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 81029ba:	693b      	ldr	r3, [r7, #16]
 81029bc:	4619      	mov	r1, r3
 81029be:	2014      	movs	r0, #20
 81029c0:	f7fe fc5a 	bl	8101278 <_ZnwjPv>
 81029c4:	4603      	mov	r3, r0
 81029c6:	4618      	mov	r0, r3
 81029c8:	f7ff ffd7 	bl	810297a <_ZNSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 81029cc:	68f8      	ldr	r0, [r7, #12]
 81029ce:	f7ff fa97 	bl	8101f00 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE17_M_node_allocatorEv>
 81029d2:	4604      	mov	r4, r0
 81029d4:	693b      	ldr	r3, [r7, #16]
 81029d6:	3304      	adds	r3, #4
 81029d8:	4618      	mov	r0, r3
 81029da:	f7ff fa9d 	bl	8101f18 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 81029de:	4605      	mov	r5, r0
 81029e0:	68b8      	ldr	r0, [r7, #8]
 81029e2:	f7ff fc80 	bl	81022e6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 81029e6:	4606      	mov	r6, r0
 81029e8:	6878      	ldr	r0, [r7, #4]
 81029ea:	f7ff ffbb 	bl	8102964 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 81029ee:	4603      	mov	r3, r0
 81029f0:	4632      	mov	r2, r6
 81029f2:	4629      	mov	r1, r5
 81029f4:	4620      	mov	r0, r4
 81029f6:	f000 f90f 	bl	8102c18 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE9constructISC_JRS5_RKSB_EEEvRSE_PT_DpOT0_>
	    return __n;
 81029fa:	693b      	ldr	r3, [r7, #16]
      }
 81029fc:	4618      	mov	r0, r3
 81029fe:	371c      	adds	r7, #28
 8102a00:	46bd      	mov	sp, r7
 8102a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102a04 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8102a04:	b580      	push	{r7, lr}
 8102a06:	b08a      	sub	sp, #40	@ 0x28
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	60f8      	str	r0, [r7, #12]
 8102a0c:	60b9      	str	r1, [r7, #8]
 8102a0e:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 8102a10:	68b9      	ldr	r1, [r7, #8]
 8102a12:	68f8      	ldr	r0, [r7, #12]
 8102a14:	f7ff f875 	bl	8101b02 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8102a18:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 8102a1a:	68f8      	ldr	r0, [r7, #12]
 8102a1c:	f7fe fff6 	bl	8101a0c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8102a20:	6278      	str	r0, [r7, #36]	@ 0x24
      _M_before_begin._M_nxt = nullptr;
 8102a22:	68fb      	ldr	r3, [r7, #12]
 8102a24:	2200      	movs	r2, #0
 8102a26:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8102a28:	2300      	movs	r3, #0
 8102a2a:	623b      	str	r3, [r7, #32]
      while (__p)
 8102a2c:	e03e      	b.n	8102aac <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 8102a2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8102a30:	f7ff f8c5 	bl	8101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8102a34:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8102a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a38:	3304      	adds	r3, #4
 8102a3a:	68ba      	ldr	r2, [r7, #8]
 8102a3c:	4619      	mov	r1, r3
 8102a3e:	68f8      	ldr	r0, [r7, #12]
 8102a40:	f000 f885 	bl	8102b4e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>
 8102a44:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8102a46:	697b      	ldr	r3, [r7, #20]
 8102a48:	009b      	lsls	r3, r3, #2
 8102a4a:	69fa      	ldr	r2, [r7, #28]
 8102a4c:	4413      	add	r3, r2
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	2b00      	cmp	r3, #0
 8102a52:	d11a      	bne.n	8102a8a <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8102a54:	68fb      	ldr	r3, [r7, #12]
 8102a56:	689a      	ldr	r2, [r3, #8]
 8102a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a5a:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8102a5c:	68fb      	ldr	r3, [r7, #12]
 8102a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102a60:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8102a62:	697b      	ldr	r3, [r7, #20]
 8102a64:	009b      	lsls	r3, r3, #2
 8102a66:	69fa      	ldr	r2, [r7, #28]
 8102a68:	4413      	add	r3, r2
 8102a6a:	68fa      	ldr	r2, [r7, #12]
 8102a6c:	3208      	adds	r2, #8
 8102a6e:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8102a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	2b00      	cmp	r3, #0
 8102a76:	d005      	beq.n	8102a84 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8102a78:	6a3b      	ldr	r3, [r7, #32]
 8102a7a:	009b      	lsls	r3, r3, #2
 8102a7c:	69fa      	ldr	r2, [r7, #28]
 8102a7e:	4413      	add	r3, r2
 8102a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102a82:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8102a84:	697b      	ldr	r3, [r7, #20]
 8102a86:	623b      	str	r3, [r7, #32]
 8102a88:	e00e      	b.n	8102aa8 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8102a8a:	697b      	ldr	r3, [r7, #20]
 8102a8c:	009b      	lsls	r3, r3, #2
 8102a8e:	69fa      	ldr	r2, [r7, #28]
 8102a90:	4413      	add	r3, r2
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	681a      	ldr	r2, [r3, #0]
 8102a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a98:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8102a9a:	697b      	ldr	r3, [r7, #20]
 8102a9c:	009b      	lsls	r3, r3, #2
 8102a9e:	69fa      	ldr	r2, [r7, #28]
 8102aa0:	4413      	add	r3, r2
 8102aa2:	681b      	ldr	r3, [r3, #0]
 8102aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102aa6:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8102aa8:	69bb      	ldr	r3, [r7, #24]
 8102aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__p)
 8102aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102aae:	2b00      	cmp	r3, #0
 8102ab0:	d1bd      	bne.n	8102a2e <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 8102ab2:	68f8      	ldr	r0, [r7, #12]
 8102ab4:	f7fe ff48 	bl	8101948 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8102ab8:	68fb      	ldr	r3, [r7, #12]
 8102aba:	68ba      	ldr	r2, [r7, #8]
 8102abc:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8102abe:	68fb      	ldr	r3, [r7, #12]
 8102ac0:	69fa      	ldr	r2, [r7, #28]
 8102ac2:	601a      	str	r2, [r3, #0]
    }
 8102ac4:	bf00      	nop
 8102ac6:	3728      	adds	r7, #40	@ 0x28
 8102ac8:	46bd      	mov	sp, r7
 8102aca:	bd80      	pop	{r7, pc}

08102acc <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_RSE_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8102acc:	b480      	push	{r7}
 8102ace:	b083      	sub	sp, #12
 8102ad0:	af00      	add	r7, sp, #0
 8102ad2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8102ad4:	687b      	ldr	r3, [r7, #4]
 8102ad6:	4618      	mov	r0, r3
 8102ad8:	370c      	adds	r7, #12
 8102ada:	46bd      	mov	sp, r7
 8102adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ae0:	4770      	bx	lr

08102ae2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102ae2:	b580      	push	{r7, lr}
 8102ae4:	b084      	sub	sp, #16
 8102ae6:	af00      	add	r7, sp, #0
 8102ae8:	60f8      	str	r0, [r7, #12]
 8102aea:	60b9      	str	r1, [r7, #8]
 8102aec:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102aee:	687a      	ldr	r2, [r7, #4]
 8102af0:	4613      	mov	r3, r2
 8102af2:	009b      	lsls	r3, r3, #2
 8102af4:	4413      	add	r3, r2
 8102af6:	009b      	lsls	r3, r3, #2
 8102af8:	4619      	mov	r1, r3
 8102afa:	68b8      	ldr	r0, [r7, #8]
 8102afc:	f020 fd3c 	bl	8123578 <_ZdlPvj>
      }
 8102b00:	3710      	adds	r7, #16
 8102b02:	46bd      	mov	sp, r7
 8102b04:	bd80      	pop	{r7, pc}

08102b06 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102b06:	b480      	push	{r7}
 8102b08:	b083      	sub	sp, #12
 8102b0a:	af00      	add	r7, sp, #0
 8102b0c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102b0e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8102b12:	4618      	mov	r0, r3
 8102b14:	370c      	adds	r7, #12
 8102b16:	46bd      	mov	sp, r7
 8102b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b1c:	4770      	bx	lr

08102b1e <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8102b1e:	b580      	push	{r7, lr}
 8102b20:	b082      	sub	sp, #8
 8102b22:	af00      	add	r7, sp, #0
 8102b24:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8102b26:	6878      	ldr	r0, [r7, #4]
 8102b28:	f000 f88e 	bl	8102c48 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>
 8102b2c:	4603      	mov	r3, r0
 8102b2e:	4618      	mov	r0, r3
 8102b30:	3708      	adds	r7, #8
 8102b32:	46bd      	mov	sp, r7
 8102b34:	bd80      	pop	{r7, pc}

08102b36 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 8102b36:	b480      	push	{r7}
 8102b38:	b083      	sub	sp, #12
 8102b3a:	af00      	add	r7, sp, #0
 8102b3c:	6078      	str	r0, [r7, #4]
 8102b3e:	6039      	str	r1, [r7, #0]
      { return true; }
 8102b40:	2301      	movs	r3, #1
 8102b42:	4618      	mov	r0, r3
 8102b44:	370c      	adds	r7, #12
 8102b46:	46bd      	mov	sp, r7
 8102b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b4c:	4770      	bx	lr

08102b4e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueISB_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 8102b4e:	b580      	push	{r7, lr}
 8102b50:	b086      	sub	sp, #24
 8102b52:	af00      	add	r7, sp, #0
 8102b54:	60f8      	str	r0, [r7, #12]
 8102b56:	60b9      	str	r1, [r7, #8]
 8102b58:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8102b5a:	68bb      	ldr	r3, [r7, #8]
 8102b5c:	4618      	mov	r0, r3
 8102b5e:	f7ff fd04 	bl	810256a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 8102b62:	4602      	mov	r2, r0
 8102b64:	f107 0314 	add.w	r3, r7, #20
 8102b68:	4611      	mov	r1, r2
 8102b6a:	4618      	mov	r0, r3
 8102b6c:	f7ff f8ff 	bl	8101d6e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8102b70:	4603      	mov	r3, r0
 8102b72:	4619      	mov	r1, r3
 8102b74:	68f8      	ldr	r0, [r7, #12]
 8102b76:	f000 f872 	bl	8102c5e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8102b7a:	4601      	mov	r1, r0
 8102b7c:	f107 0310 	add.w	r3, r7, #16
 8102b80:	687a      	ldr	r2, [r7, #4]
 8102b82:	4618      	mov	r0, r3
 8102b84:	f7fe fba0 	bl	81012c8 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8102b88:	4603      	mov	r3, r0
      }
 8102b8a:	4618      	mov	r0, r3
 8102b8c:	3718      	adds	r7, #24
 8102b8e:	46bd      	mov	sp, r7
 8102b90:	bd80      	pop	{r7, pc}

08102b92 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j>:
      allocate(allocator_type& __a, size_type __n)
 8102b92:	b5b0      	push	{r4, r5, r7, lr}
 8102b94:	b084      	sub	sp, #16
 8102b96:	af00      	add	r7, sp, #0
 8102b98:	6078      	str	r0, [r7, #4]
 8102b9a:	6039      	str	r1, [r7, #0]
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	60fb      	str	r3, [r7, #12]
 8102ba0:	683b      	ldr	r3, [r7, #0]
 8102ba2:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8102ba4:	f7fe fb60 	bl	8101268 <__is_constant_evaluated>
 8102ba8:	4603      	mov	r3, r0
 8102baa:	2b00      	cmp	r3, #0
 8102bac:	d01d      	beq.n	8102bea <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 8102bae:	68bb      	ldr	r3, [r7, #8]
 8102bb0:	2100      	movs	r1, #0
 8102bb2:	2214      	movs	r2, #20
 8102bb4:	fba3 4502 	umull	r4, r5, r3, r2
 8102bb8:	f04f 0200 	mov.w	r2, #0
 8102bbc:	f04f 0300 	mov.w	r3, #0
 8102bc0:	002a      	movs	r2, r5
 8102bc2:	2300      	movs	r3, #0
 8102bc4:	2a00      	cmp	r2, #0
 8102bc6:	d000      	beq.n	8102bca <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x38>
 8102bc8:	2101      	movs	r1, #1
 8102bca:	4623      	mov	r3, r4
 8102bcc:	60bb      	str	r3, [r7, #8]
 8102bce:	460b      	mov	r3, r1
 8102bd0:	f003 0301 	and.w	r3, r3, #1
 8102bd4:	b2db      	uxtb	r3, r3
 8102bd6:	2b00      	cmp	r3, #0
 8102bd8:	d001      	beq.n	8102bde <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x4c>
	      std::__throw_bad_array_new_length();
 8102bda:	f020 fdaf 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8102bde:	68bb      	ldr	r3, [r7, #8]
 8102be0:	4618      	mov	r0, r3
 8102be2:	f020 fcda 	bl	812359a <_Znwj>
 8102be6:	4603      	mov	r3, r0
 8102be8:	e007      	b.n	8102bfa <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE8allocateERSE_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8102bea:	68bb      	ldr	r3, [r7, #8]
 8102bec:	2200      	movs	r2, #0
 8102bee:	4619      	mov	r1, r3
 8102bf0:	68f8      	ldr	r0, [r7, #12]
 8102bf2:	f000 f867 	bl	8102cc4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv>
 8102bf6:	4603      	mov	r3, r0
 8102bf8:	bf00      	nop
      { return __a.allocate(__n); }
 8102bfa:	4618      	mov	r0, r3
 8102bfc:	3710      	adds	r7, #16
 8102bfe:	46bd      	mov	sp, r7
 8102c00:	bdb0      	pop	{r4, r5, r7, pc}

08102c02 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEPT_SF_>:
    __to_address(_Tp* __ptr) noexcept
 8102c02:	b480      	push	{r7}
 8102c04:	b083      	sub	sp, #12
 8102c06:	af00      	add	r7, sp, #0
 8102c08:	6078      	str	r0, [r7, #4]
      return __ptr;
 8102c0a:	687b      	ldr	r3, [r7, #4]
    }
 8102c0c:	4618      	mov	r0, r3
 8102c0e:	370c      	adds	r7, #12
 8102c10:	46bd      	mov	sp, r7
 8102c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c16:	4770      	bx	lr

08102c18 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEEE9constructISC_JRS5_RKSB_EEEvRSE_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102c18:	b590      	push	{r4, r7, lr}
 8102c1a:	b085      	sub	sp, #20
 8102c1c:	af00      	add	r7, sp, #0
 8102c1e:	60f8      	str	r0, [r7, #12]
 8102c20:	60b9      	str	r1, [r7, #8]
 8102c22:	607a      	str	r2, [r7, #4]
 8102c24:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8102c26:	6878      	ldr	r0, [r7, #4]
 8102c28:	f7ff fb5d 	bl	81022e6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8102c2c:	4604      	mov	r4, r0
 8102c2e:	6838      	ldr	r0, [r7, #0]
 8102c30:	f7ff fe98 	bl	8102964 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102c34:	4603      	mov	r3, r0
 8102c36:	461a      	mov	r2, r3
 8102c38:	4621      	mov	r1, r4
 8102c3a:	68b8      	ldr	r0, [r7, #8]
 8102c3c:	f000 f824 	bl	8102c88 <_ZSt12construct_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEJRS3_RKS9_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8102c40:	bf00      	nop
 8102c42:	3714      	adds	r7, #20
 8102c44:	46bd      	mov	sp, r7
 8102c46:	bd90      	pop	{r4, r7, pc}

08102c48 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE7_M_addrEv>:
      _M_addr() const noexcept
 8102c48:	b480      	push	{r7}
 8102c4a:	b083      	sub	sp, #12
 8102c4c:	af00      	add	r7, sp, #0
 8102c4e:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8102c50:	687b      	ldr	r3, [r7, #4]
      }
 8102c52:	4618      	mov	r0, r3
 8102c54:	370c      	adds	r7, #12
 8102c56:	46bd      	mov	sp, r7
 8102c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c5c:	4770      	bx	lr

08102c5e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8102c5e:	b580      	push	{r7, lr}
 8102c60:	b082      	sub	sp, #8
 8102c62:	af00      	add	r7, sp, #0
 8102c64:	6078      	str	r0, [r7, #4]
 8102c66:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8102c68:	6878      	ldr	r0, [r7, #4]
 8102c6a:	f7ff fcac 	bl	81025c6 <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8102c6e:	4602      	mov	r2, r0
 8102c70:	683b      	ldr	r3, [r7, #0]
 8102c72:	f993 3000 	ldrsb.w	r3, [r3]
 8102c76:	4619      	mov	r1, r3
 8102c78:	4610      	mov	r0, r2
 8102c7a:	f7ff fcb0 	bl	81025de <_ZNKSt11__hash_enumIN7APIDoIP12EDoIPRequestELb1EEclES1_>
 8102c7e:	4603      	mov	r3, r0
      }
 8102c80:	4618      	mov	r0, r3
 8102c82:	3708      	adds	r7, #8
 8102c84:	46bd      	mov	sp, r7
 8102c86:	bd80      	pop	{r7, pc}

08102c88 <_ZSt12construct_atISt4pairIKN7APIDoIP12EDoIPRequestES0_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEJRS3_RKS9_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8102c88:	b5b0      	push	{r4, r5, r7, lr}
 8102c8a:	b084      	sub	sp, #16
 8102c8c:	af00      	add	r7, sp, #0
 8102c8e:	60f8      	str	r0, [r7, #12]
 8102c90:	60b9      	str	r1, [r7, #8]
 8102c92:	607a      	str	r2, [r7, #4]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	4619      	mov	r1, r3
 8102c98:	2010      	movs	r0, #16
 8102c9a:	f7fe faed 	bl	8101278 <_ZnwjPv>
 8102c9e:	4604      	mov	r4, r0
 8102ca0:	68b8      	ldr	r0, [r7, #8]
 8102ca2:	f7ff fb20 	bl	81022e6 <_ZSt7forwardIRKN7APIDoIP12EDoIPRequestEEOT_RNSt16remove_referenceIS4_E4typeE>
 8102ca6:	4605      	mov	r5, r0
 8102ca8:	6878      	ldr	r0, [r7, #4]
 8102caa:	f7ff fe5b 	bl	8102964 <_ZSt7forwardIRKSt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102cae:	4603      	mov	r3, r0
 8102cb0:	461a      	mov	r2, r3
 8102cb2:	4629      	mov	r1, r5
 8102cb4:	4620      	mov	r0, r4
 8102cb6:	f7fe fb3a 	bl	810132e <_ZNSt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEC1ERS2_RKS8_>
 8102cba:	4623      	mov	r3, r4
 8102cbc:	4618      	mov	r0, r3
 8102cbe:	3710      	adds	r7, #16
 8102cc0:	46bd      	mov	sp, r7
 8102cc2:	bdb0      	pop	{r4, r5, r7, pc}

08102cc4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102cc4:	b580      	push	{r7, lr}
 8102cc6:	b084      	sub	sp, #16
 8102cc8:	af00      	add	r7, sp, #0
 8102cca:	60f8      	str	r0, [r7, #12]
 8102ccc:	60b9      	str	r1, [r7, #8]
 8102cce:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102cd0:	68f8      	ldr	r0, [r7, #12]
 8102cd2:	f000 f827 	bl	8102d24 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv>
 8102cd6:	4602      	mov	r2, r0
 8102cd8:	68bb      	ldr	r3, [r7, #8]
 8102cda:	4293      	cmp	r3, r2
 8102cdc:	bf8c      	ite	hi
 8102cde:	2301      	movhi	r3, #1
 8102ce0:	2300      	movls	r3, #0
 8102ce2:	b2db      	uxtb	r3, r3
 8102ce4:	2b00      	cmp	r3, #0
 8102ce6:	bf14      	ite	ne
 8102ce8:	2301      	movne	r3, #1
 8102cea:	2300      	moveq	r3, #0
 8102cec:	b2db      	uxtb	r3, r3
 8102cee:	2b00      	cmp	r3, #0
 8102cf0:	d007      	beq.n	8102d02 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102cf2:	68bb      	ldr	r3, [r7, #8]
 8102cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8102d20 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x5c>)
 8102cf6:	4293      	cmp	r3, r2
 8102cf8:	d901      	bls.n	8102cfe <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102cfa:	f020 fd1f 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102cfe:	f020 fd1a 	bl	8123736 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102d02:	68ba      	ldr	r2, [r7, #8]
 8102d04:	4613      	mov	r3, r2
 8102d06:	009b      	lsls	r3, r3, #2
 8102d08:	4413      	add	r3, r2
 8102d0a:	009b      	lsls	r3, r3, #2
 8102d0c:	4618      	mov	r0, r3
 8102d0e:	f020 fc44 	bl	812359a <_Znwj>
 8102d12:	4603      	mov	r3, r0
 8102d14:	bf00      	nop
      }
 8102d16:	4618      	mov	r0, r3
 8102d18:	3710      	adds	r7, #16
 8102d1a:	46bd      	mov	sp, r7
 8102d1c:	bd80      	pop	{r7, pc}
 8102d1e:	bf00      	nop
 8102d20:	0ccccccc 	.word	0x0ccccccc

08102d24 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102d24:	b480      	push	{r7}
 8102d26:	b083      	sub	sp, #12
 8102d28:	af00      	add	r7, sp, #0
 8102d2a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102d2c:	4b03      	ldr	r3, [pc, #12]	@ (8102d3c <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEEE11_M_max_sizeEv+0x18>)
      }
 8102d2e:	4618      	mov	r0, r3
 8102d30:	370c      	adds	r7, #12
 8102d32:	46bd      	mov	sp, r7
 8102d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d38:	4770      	bx	lr
 8102d3a:	bf00      	nop
 8102d3c:	06666666 	.word	0x06666666

08102d40 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>:
    class unordered_map
 8102d40:	b580      	push	{r7, lr}
 8102d42:	b082      	sub	sp, #8
 8102d44:	af00      	add	r7, sp, #0
 8102d46:	6078      	str	r0, [r7, #4]
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	4618      	mov	r0, r3
 8102d4c:	f7fe fd7e 	bl	810184c <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	4618      	mov	r0, r3
 8102d54:	3708      	adds	r7, #8
 8102d56:	46bd      	mov	sp, r7
 8102d58:	bd80      	pop	{r7, pc}
	...

08102d5c <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
    /* USER CODE END Error_Handler_Debug */
}
 8102d5c:	b580      	push	{r7, lr}
 8102d5e:	b0c8      	sub	sp, #288	@ 0x120
 8102d60:	af04      	add	r7, sp, #16
 8102d62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102d66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8102d6a:	6018      	str	r0, [r3, #0]
 8102d6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102d70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8102d74:	6019      	str	r1, [r3, #0]
 8102d76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102d7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	2b01      	cmp	r3, #1
 8102d82:	f040 80f5 	bne.w	8102f70 <_Z41__static_initialization_and_destruction_0ii+0x214>
 8102d86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102d8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8102d94:	4293      	cmp	r3, r2
 8102d96:	f040 80eb 	bne.w	8102f70 <_Z41__static_initialization_and_destruction_0ii+0x214>
        
        IHKA_EVAPORATOR_TEMPERATURE_SENSOR = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR,
        IHKA_TEMPERATURE_SELECTOR = EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR,
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8102d9a:	f107 0314 	add.w	r3, r7, #20
 8102d9e:	22f0      	movs	r2, #240	@ 0xf0
 8102da0:	2100      	movs	r1, #0
 8102da2:	4618      	mov	r0, r3
 8102da4:	f021 fd6e 	bl	8124884 <memset>
 8102da8:	4b7d      	ldr	r3, [pc, #500]	@ (8102fa0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8102daa:	61bb      	str	r3, [r7, #24]
 8102dac:	2301      	movs	r3, #1
 8102dae:	773b      	strb	r3, [r7, #28]
 8102db0:	2312      	movs	r3, #18
 8102db2:	f887 3020 	strb.w	r3, [r7, #32]
 8102db6:	2301      	movs	r3, #1
 8102db8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8102dbc:	4b79      	ldr	r3, [pc, #484]	@ (8102fa4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8102dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8102dc0:	2301      	movs	r3, #1
 8102dc2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8102dc6:	2312      	movs	r3, #18
 8102dc8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8102dcc:	2302      	movs	r3, #2
 8102dce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8102dd2:	4b75      	ldr	r3, [pc, #468]	@ (8102fa8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8102dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102dd6:	2301      	movs	r3, #1
 8102dd8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8102ddc:	2312      	movs	r3, #18
 8102dde:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8102de2:	2303      	movs	r3, #3
 8102de4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8102de8:	4b70      	ldr	r3, [pc, #448]	@ (8102fac <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8102dea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102dec:	2301      	movs	r3, #1
 8102dee:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8102df2:	2312      	movs	r3, #18
 8102df4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8102df8:	2304      	movs	r3, #4
 8102dfa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8102dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8102fb0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8102e00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8102e02:	2301      	movs	r3, #1
 8102e04:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8102e08:	2312      	movs	r3, #18
 8102e0a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8102e0e:	2305      	movs	r3, #5
 8102e10:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8102e14:	4b67      	ldr	r3, [pc, #412]	@ (8102fb4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8102e16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8102e18:	2301      	movs	r3, #1
 8102e1a:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8102e1e:	2312      	movs	r3, #18
 8102e20:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8102e24:	2306      	movs	r3, #6
 8102e26:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8102e2a:	4b63      	ldr	r3, [pc, #396]	@ (8102fb8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8102e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102e2e:	2301      	movs	r3, #1
 8102e30:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8102e34:	2312      	movs	r3, #18
 8102e36:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8102e3a:	2307      	movs	r3, #7
 8102e3c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8102e40:	4b5e      	ldr	r3, [pc, #376]	@ (8102fbc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8102e42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8102e46:	2301      	movs	r3, #1
 8102e48:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 8102e4c:	2312      	movs	r3, #18
 8102e4e:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 8102e52:	2308      	movs	r3, #8
 8102e54:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 8102e58:	f24d 130d 	movw	r3, #53517	@ 0xd10d
 8102e5c:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 8102e60:	2360      	movs	r3, #96	@ 0x60
 8102e62:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 8102e66:	2309      	movs	r3, #9
 8102e68:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8102e6c:	f24d 1307 	movw	r3, #53511	@ 0xd107
 8102e70:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 8102e74:	2360      	movs	r3, #96	@ 0x60
 8102e76:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 8102e7a:	230a      	movs	r3, #10
 8102e7c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8102e80:	f24d 1312 	movw	r3, #53522	@ 0xd112
 8102e84:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
 8102e88:	2360      	movs	r3, #96	@ 0x60
 8102e8a:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
 8102e8e:	230b      	movs	r3, #11
 8102e90:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 8102e94:	f24d 1306 	movw	r3, #53510	@ 0xd106
 8102e98:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
 8102e9c:	2360      	movs	r3, #96	@ 0x60
 8102e9e:	f887 30d0 	strb.w	r3, [r7, #208]	@ 0xd0
 8102ea2:	230c      	movs	r3, #12
 8102ea4:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 8102ea8:	f24d 131f 	movw	r3, #53535	@ 0xd11f
 8102eac:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
 8102eb0:	2360      	movs	r3, #96	@ 0x60
 8102eb2:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 8102eb6:	230d      	movs	r3, #13
 8102eb8:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 8102ebc:	f64d 135c 	movw	r3, #55644	@ 0xd95c
 8102ec0:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
 8102ec4:	2378      	movs	r3, #120	@ 0x78
 8102ec6:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
 8102eca:	230e      	movs	r3, #14
 8102ecc:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
 8102ed0:	f64d 1377 	movw	r3, #55671	@ 0xd977
 8102ed4:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8102ed8:	2378      	movs	r3, #120	@ 0x78
 8102eda:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
 8102ede:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8102ee6:	f107 0214 	add.w	r2, r7, #20
 8102eea:	601a      	str	r2, [r3, #0]
 8102eec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8102ef4:	220f      	movs	r2, #15
 8102ef6:	605a      	str	r2, [r3, #4]
 8102ef8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8102efc:	4618      	mov	r0, r3
 8102efe:	f7fe fc23 	bl	8101748 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 8102f02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102f06:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8102f0a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8102f0e:	9302      	str	r3, [sp, #8]
 8102f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8102f14:	9301      	str	r3, [sp, #4]
 8102f16:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8102f1a:	9300      	str	r3, [sp, #0]
 8102f1c:	2300      	movs	r3, #0
 8102f1e:	ca06      	ldmia	r2, {r1, r2}
 8102f20:	4827      	ldr	r0, [pc, #156]	@ (8102fc0 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8102f22:	f7fe fc28 	bl	8101776 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 8102f26:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8102f2a:	4618      	mov	r0, r3
 8102f2c:	f7fe fc18 	bl	8101760 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(64, sizeof(SMessage));
 8102f30:	2200      	movs	r2, #0
 8102f32:	211c      	movs	r1, #28
 8102f34:	2040      	movs	r0, #64	@ 0x40
 8102f36:	f011 fc70 	bl	811481a <xQueueGenericCreate>
 8102f3a:	4603      	mov	r3, r0
 8102f3c:	4a21      	ldr	r2, [pc, #132]	@ (8102fc4 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8102f3e:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 8102f40:	2200      	movs	r2, #0
 8102f42:	211c      	movs	r1, #28
 8102f44:	2010      	movs	r0, #16
 8102f46:	f011 fc68 	bl	811481a <xQueueGenericCreate>
 8102f4a:	4603      	mov	r3, r0
 8102f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8102fc8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8102f4e:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToDoIPDaemonTask = xQueueCreate(16, sizeof(SMessage));
 8102f50:	2200      	movs	r2, #0
 8102f52:	211c      	movs	r1, #28
 8102f54:	2010      	movs	r0, #16
 8102f56:	f011 fc60 	bl	811481a <xQueueGenericCreate>
 8102f5a:	4603      	mov	r3, r0
 8102f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8102fcc <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8102f5e:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToTemperature = xQueueCreate(4, sizeof(SMessage));
 8102f60:	2200      	movs	r2, #0
 8102f62:	211c      	movs	r1, #28
 8102f64:	2004      	movs	r0, #4
 8102f66:	f011 fc58 	bl	811481a <xQueueGenericCreate>
 8102f6a:	4603      	mov	r3, r0
 8102f6c:	4a18      	ldr	r2, [pc, #96]	@ (8102fd0 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8102f6e:	6013      	str	r3, [r2, #0]
 8102f70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102f74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8102f78:	681b      	ldr	r3, [r3, #0]
 8102f7a:	2b00      	cmp	r3, #0
 8102f7c:	d10b      	bne.n	8102f96 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8102f7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8102f82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8102f86:	681b      	ldr	r3, [r3, #0]
 8102f88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8102f8c:	4293      	cmp	r3, r2
 8102f8e:	d102      	bne.n	8102f96 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8102f90:	480b      	ldr	r0, [pc, #44]	@ (8102fc0 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8102f92:	f7ff fed5 	bl	8102d40 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
}
 8102f96:	bf00      	nop
 8102f98:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8102f9c:	46bd      	mov	sp, r7
 8102f9e:	bd80      	pop	{r7, pc}
 8102fa0:	44020102 	.word	0x44020102
 8102fa4:	48070102 	.word	0x48070102
 8102fa8:	43000101 	.word	0x43000101
 8102fac:	46090101 	.word	0x46090101
 8102fb0:	42040101 	.word	0x42040101
 8102fb4:	42080102 	.word	0x42080102
 8102fb8:	481a0102 	.word	0x481a0102
 8102fbc:	4a290101 	.word	0x4a290101
 8102fc0:	100000b4 	.word	0x100000b4
 8102fc4:	100001cc 	.word	0x100001cc
 8102fc8:	100001d0 	.word	0x100001d0
 8102fcc:	100001d4 	.word	0x100001d4
 8102fd0:	100001d8 	.word	0x100001d8

08102fd4 <_GLOBAL__sub_I_hi2c4>:
 8102fd4:	b580      	push	{r7, lr}
 8102fd6:	af00      	add	r7, sp, #0
 8102fd8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8102fdc:	2001      	movs	r0, #1
 8102fde:	f7ff febd 	bl	8102d5c <_Z41__static_initialization_and_destruction_0ii>
 8102fe2:	bd80      	pop	{r7, pc}

08102fe4 <_GLOBAL__sub_D_hi2c4>:
 8102fe4:	b580      	push	{r7, lr}
 8102fe6:	af00      	add	r7, sp, #0
 8102fe8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8102fec:	2000      	movs	r0, #0
 8102fee:	f7ff feb5 	bl	8102d5c <_Z41__static_initialization_and_destruction_0ii>
 8102ff2:	bd80      	pop	{r7, pc}

08102ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102ff4:	b580      	push	{r7, lr}
 8102ff6:	b082      	sub	sp, #8
 8102ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102ffa:	4b10      	ldr	r3, [pc, #64]	@ (810303c <HAL_MspInit+0x48>)
 8102ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103000:	4a0e      	ldr	r2, [pc, #56]	@ (810303c <HAL_MspInit+0x48>)
 8103002:	f043 0302 	orr.w	r3, r3, #2
 8103006:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810300a:	4b0c      	ldr	r3, [pc, #48]	@ (810303c <HAL_MspInit+0x48>)
 810300c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103010:	f003 0302 	and.w	r3, r3, #2
 8103014:	607b      	str	r3, [r7, #4]
 8103016:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8103018:	2200      	movs	r2, #0
 810301a:	210f      	movs	r1, #15
 810301c:	f06f 0001 	mvn.w	r0, #1
 8103020:	f009 fe2c 	bl	810cc7c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 7, 0);
 8103024:	2200      	movs	r2, #0
 8103026:	2107      	movs	r1, #7
 8103028:	207e      	movs	r0, #126	@ 0x7e
 810302a:	f009 fe27 	bl	810cc7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810302e:	207e      	movs	r0, #126	@ 0x7e
 8103030:	f009 fe3e 	bl	810ccb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103034:	bf00      	nop
 8103036:	3708      	adds	r7, #8
 8103038:	46bd      	mov	sp, r7
 810303a:	bd80      	pop	{r7, pc}
 810303c:	58024400 	.word	0x58024400

08103040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8103040:	b580      	push	{r7, lr}
 8103042:	b0bc      	sub	sp, #240	@ 0xf0
 8103044:	af00      	add	r7, sp, #0
 8103046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103048:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810304c:	2200      	movs	r2, #0
 810304e:	601a      	str	r2, [r3, #0]
 8103050:	605a      	str	r2, [r3, #4]
 8103052:	609a      	str	r2, [r3, #8]
 8103054:	60da      	str	r2, [r3, #12]
 8103056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103058:	f107 0310 	add.w	r3, r7, #16
 810305c:	22c8      	movs	r2, #200	@ 0xc8
 810305e:	2100      	movs	r1, #0
 8103060:	4618      	mov	r0, r3
 8103062:	f021 fc0f 	bl	8124884 <memset>
  if(hi2c->Instance==I2C4)
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	4a27      	ldr	r2, [pc, #156]	@ (8103108 <HAL_I2C_MspInit+0xc8>)
 810306c:	4293      	cmp	r3, r2
 810306e:	d146      	bne.n	81030fe <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8103070:	f04f 0210 	mov.w	r2, #16
 8103074:	f04f 0300 	mov.w	r3, #0
 8103078:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 810307c:	2300      	movs	r3, #0
 810307e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103082:	f107 0310 	add.w	r3, r7, #16
 8103086:	4618      	mov	r0, r3
 8103088:	f00c fe68 	bl	810fd5c <HAL_RCCEx_PeriphCLKConfig>
 810308c:	4603      	mov	r3, r0
 810308e:	2b00      	cmp	r3, #0
 8103090:	d001      	beq.n	8103096 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8103092:	f7fe fb53 	bl	810173c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103096:	4b1d      	ldr	r3, [pc, #116]	@ (810310c <HAL_I2C_MspInit+0xcc>)
 8103098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810309c:	4a1b      	ldr	r2, [pc, #108]	@ (810310c <HAL_I2C_MspInit+0xcc>)
 810309e:	f043 0308 	orr.w	r3, r3, #8
 81030a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81030a6:	4b19      	ldr	r3, [pc, #100]	@ (810310c <HAL_I2C_MspInit+0xcc>)
 81030a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030ac:	f003 0308 	and.w	r3, r3, #8
 81030b0:	60fb      	str	r3, [r7, #12]
 81030b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 81030b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 81030b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81030bc:	2312      	movs	r3, #18
 81030be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81030c2:	2300      	movs	r3, #0
 81030c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81030c8:	2300      	movs	r3, #0
 81030ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 81030ce:	2304      	movs	r3, #4
 81030d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81030d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81030d8:	4619      	mov	r1, r3
 81030da:	480d      	ldr	r0, [pc, #52]	@ (8103110 <HAL_I2C_MspInit+0xd0>)
 81030dc:	f00b fb88 	bl	810e7f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 81030e0:	4b0a      	ldr	r3, [pc, #40]	@ (810310c <HAL_I2C_MspInit+0xcc>)
 81030e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81030e6:	4a09      	ldr	r2, [pc, #36]	@ (810310c <HAL_I2C_MspInit+0xcc>)
 81030e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81030ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81030f0:	4b06      	ldr	r3, [pc, #24]	@ (810310c <HAL_I2C_MspInit+0xcc>)
 81030f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81030f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81030fa:	60bb      	str	r3, [r7, #8]
 81030fc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 81030fe:	bf00      	nop
 8103100:	37f0      	adds	r7, #240	@ 0xf0
 8103102:	46bd      	mov	sp, r7
 8103104:	bd80      	pop	{r7, pc}
 8103106:	bf00      	nop
 8103108:	58001c00 	.word	0x58001c00
 810310c:	58024400 	.word	0x58024400
 8103110:	58020c00 	.word	0x58020c00

08103114 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8103114:	b580      	push	{r7, lr}
 8103116:	b082      	sub	sp, #8
 8103118:	af00      	add	r7, sp, #0
 810311a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	4a0c      	ldr	r2, [pc, #48]	@ (8103154 <HAL_I2C_MspDeInit+0x40>)
 8103122:	4293      	cmp	r3, r2
 8103124:	d111      	bne.n	810314a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8103126:	4b0c      	ldr	r3, [pc, #48]	@ (8103158 <HAL_I2C_MspDeInit+0x44>)
 8103128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810312c:	4a0a      	ldr	r2, [pc, #40]	@ (8103158 <HAL_I2C_MspDeInit+0x44>)
 810312e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8103132:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8103136:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 810313a:	4808      	ldr	r0, [pc, #32]	@ (810315c <HAL_I2C_MspDeInit+0x48>)
 810313c:	f00b fd08 	bl	810eb50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8103140:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8103144:	4805      	ldr	r0, [pc, #20]	@ (810315c <HAL_I2C_MspDeInit+0x48>)
 8103146:	f00b fd03 	bl	810eb50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 810314a:	bf00      	nop
 810314c:	3708      	adds	r7, #8
 810314e:	46bd      	mov	sp, r7
 8103150:	bd80      	pop	{r7, pc}
 8103152:	bf00      	nop
 8103154:	58001c00 	.word	0x58001c00
 8103158:	58024400 	.word	0x58024400
 810315c:	58020c00 	.word	0x58020c00

08103160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8103160:	b580      	push	{r7, lr}
 8103162:	b0bc      	sub	sp, #240	@ 0xf0
 8103164:	af00      	add	r7, sp, #0
 8103166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103168:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810316c:	2200      	movs	r2, #0
 810316e:	601a      	str	r2, [r3, #0]
 8103170:	605a      	str	r2, [r3, #4]
 8103172:	609a      	str	r2, [r3, #8]
 8103174:	60da      	str	r2, [r3, #12]
 8103176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103178:	f107 0310 	add.w	r3, r7, #16
 810317c:	22c8      	movs	r2, #200	@ 0xc8
 810317e:	2100      	movs	r1, #0
 8103180:	4618      	mov	r0, r3
 8103182:	f021 fb7f 	bl	8124884 <memset>
  if(huart->Instance==USART1)
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	4a27      	ldr	r2, [pc, #156]	@ (8103228 <HAL_UART_MspInit+0xc8>)
 810318c:	4293      	cmp	r3, r2
 810318e:	d146      	bne.n	810321e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8103190:	f04f 0201 	mov.w	r2, #1
 8103194:	f04f 0300 	mov.w	r3, #0
 8103198:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 810319c:	2300      	movs	r3, #0
 810319e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81031a2:	f107 0310 	add.w	r3, r7, #16
 81031a6:	4618      	mov	r0, r3
 81031a8:	f00c fdd8 	bl	810fd5c <HAL_RCCEx_PeriphCLKConfig>
 81031ac:	4603      	mov	r3, r0
 81031ae:	2b00      	cmp	r3, #0
 81031b0:	d001      	beq.n	81031b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81031b2:	f7fe fac3 	bl	810173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 81031b6:	4b1d      	ldr	r3, [pc, #116]	@ (810322c <HAL_UART_MspInit+0xcc>)
 81031b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81031bc:	4a1b      	ldr	r2, [pc, #108]	@ (810322c <HAL_UART_MspInit+0xcc>)
 81031be:	f043 0310 	orr.w	r3, r3, #16
 81031c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81031c6:	4b19      	ldr	r3, [pc, #100]	@ (810322c <HAL_UART_MspInit+0xcc>)
 81031c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81031cc:	f003 0310 	and.w	r3, r3, #16
 81031d0:	60fb      	str	r3, [r7, #12]
 81031d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81031d4:	4b15      	ldr	r3, [pc, #84]	@ (810322c <HAL_UART_MspInit+0xcc>)
 81031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031da:	4a14      	ldr	r2, [pc, #80]	@ (810322c <HAL_UART_MspInit+0xcc>)
 81031dc:	f043 0301 	orr.w	r3, r3, #1
 81031e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81031e4:	4b11      	ldr	r3, [pc, #68]	@ (810322c <HAL_UART_MspInit+0xcc>)
 81031e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81031ea:	f003 0301 	and.w	r3, r3, #1
 81031ee:	60bb      	str	r3, [r7, #8]
 81031f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 81031f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 81031f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81031fa:	2302      	movs	r3, #2
 81031fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103200:	2300      	movs	r3, #0
 8103202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103206:	2300      	movs	r3, #0
 8103208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 810320c:	2307      	movs	r3, #7
 810320e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103212:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8103216:	4619      	mov	r1, r3
 8103218:	4805      	ldr	r0, [pc, #20]	@ (8103230 <HAL_UART_MspInit+0xd0>)
 810321a:	f00b fae9 	bl	810e7f0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 810321e:	bf00      	nop
 8103220:	37f0      	adds	r7, #240	@ 0xf0
 8103222:	46bd      	mov	sp, r7
 8103224:	bd80      	pop	{r7, pc}
 8103226:	bf00      	nop
 8103228:	40011000 	.word	0x40011000
 810322c:	58024400 	.word	0x58024400
 8103230:	58020000 	.word	0x58020000

08103234 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103234:	b580      	push	{r7, lr}
 8103236:	b090      	sub	sp, #64	@ 0x40
 8103238:	af00      	add	r7, sp, #0
 810323a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	2b0f      	cmp	r3, #15
 8103240:	d827      	bhi.n	8103292 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8103242:	2200      	movs	r2, #0
 8103244:	6879      	ldr	r1, [r7, #4]
 8103246:	2036      	movs	r0, #54	@ 0x36
 8103248:	f009 fd18 	bl	810cc7c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 810324c:	2036      	movs	r0, #54	@ 0x36
 810324e:	f009 fd2f 	bl	810ccb0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8103252:	4a29      	ldr	r2, [pc, #164]	@ (81032f8 <HAL_InitTick+0xc4>)
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8103258:	4b28      	ldr	r3, [pc, #160]	@ (81032fc <HAL_InitTick+0xc8>)
 810325a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810325e:	4a27      	ldr	r2, [pc, #156]	@ (81032fc <HAL_InitTick+0xc8>)
 8103260:	f043 0310 	orr.w	r3, r3, #16
 8103264:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103268:	4b24      	ldr	r3, [pc, #144]	@ (81032fc <HAL_InitTick+0xc8>)
 810326a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810326e:	f003 0310 	and.w	r3, r3, #16
 8103272:	60fb      	str	r3, [r7, #12]
 8103274:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8103276:	f107 0210 	add.w	r2, r7, #16
 810327a:	f107 0314 	add.w	r3, r7, #20
 810327e:	4611      	mov	r1, r2
 8103280:	4618      	mov	r0, r3
 8103282:	f00c fd29 	bl	810fcd8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8103286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103288:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810328c:	2b00      	cmp	r3, #0
 810328e:	d106      	bne.n	810329e <HAL_InitTick+0x6a>
 8103290:	e001      	b.n	8103296 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8103292:	2301      	movs	r3, #1
 8103294:	e02b      	b.n	81032ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8103296:	f00c fcf3 	bl	810fc80 <HAL_RCC_GetPCLK1Freq>
 810329a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 810329c:	e004      	b.n	81032a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810329e:	f00c fcef 	bl	810fc80 <HAL_RCC_GetPCLK1Freq>
 81032a2:	4603      	mov	r3, r0
 81032a4:	005b      	lsls	r3, r3, #1
 81032a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81032a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81032aa:	4a15      	ldr	r2, [pc, #84]	@ (8103300 <HAL_InitTick+0xcc>)
 81032ac:	fba2 2303 	umull	r2, r3, r2, r3
 81032b0:	0c9b      	lsrs	r3, r3, #18
 81032b2:	3b01      	subs	r3, #1
 81032b4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 81032b6:	4b13      	ldr	r3, [pc, #76]	@ (8103304 <HAL_InitTick+0xd0>)
 81032b8:	4a13      	ldr	r2, [pc, #76]	@ (8103308 <HAL_InitTick+0xd4>)
 81032ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 81032bc:	4b11      	ldr	r3, [pc, #68]	@ (8103304 <HAL_InitTick+0xd0>)
 81032be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81032c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 81032c4:	4a0f      	ldr	r2, [pc, #60]	@ (8103304 <HAL_InitTick+0xd0>)
 81032c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81032c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 81032ca:	4b0e      	ldr	r3, [pc, #56]	@ (8103304 <HAL_InitTick+0xd0>)
 81032cc:	2200      	movs	r2, #0
 81032ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81032d0:	4b0c      	ldr	r3, [pc, #48]	@ (8103304 <HAL_InitTick+0xd0>)
 81032d2:	2200      	movs	r2, #0
 81032d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 81032d6:	480b      	ldr	r0, [pc, #44]	@ (8103304 <HAL_InitTick+0xd0>)
 81032d8:	f00e fbac 	bl	8111a34 <HAL_TIM_Base_Init>
 81032dc:	4603      	mov	r3, r0
 81032de:	2b00      	cmp	r3, #0
 81032e0:	d104      	bne.n	81032ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 81032e2:	4808      	ldr	r0, [pc, #32]	@ (8103304 <HAL_InitTick+0xd0>)
 81032e4:	f00e fc08 	bl	8111af8 <HAL_TIM_Base_Start_IT>
 81032e8:	4603      	mov	r3, r0
 81032ea:	e000      	b.n	81032ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81032ec:	2301      	movs	r3, #1
}
 81032ee:	4618      	mov	r0, r3
 81032f0:	3740      	adds	r7, #64	@ 0x40
 81032f2:	46bd      	mov	sp, r7
 81032f4:	bd80      	pop	{r7, pc}
 81032f6:	bf00      	nop
 81032f8:	1000001c 	.word	0x1000001c
 81032fc:	58024400 	.word	0x58024400
 8103300:	431bde83 	.word	0x431bde83
 8103304:	100001dc 	.word	0x100001dc
 8103308:	40001000 	.word	0x40001000

0810330c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810330c:	b480      	push	{r7}
 810330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8103310:	bf00      	nop
 8103312:	e7fd      	b.n	8103310 <NMI_Handler+0x4>

08103314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8103314:	b480      	push	{r7}
 8103316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8103318:	bf00      	nop
 810331a:	e7fd      	b.n	8103318 <HardFault_Handler+0x4>

0810331c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810331c:	b480      	push	{r7}
 810331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103320:	bf00      	nop
 8103322:	e7fd      	b.n	8103320 <MemManage_Handler+0x4>

08103324 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8103324:	b480      	push	{r7}
 8103326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8103328:	bf00      	nop
 810332a:	e7fd      	b.n	8103328 <BusFault_Handler+0x4>

0810332c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810332c:	b480      	push	{r7}
 810332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103330:	bf00      	nop
 8103332:	e7fd      	b.n	8103330 <UsageFault_Handler+0x4>

08103334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8103334:	b480      	push	{r7}
 8103336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8103338:	bf00      	nop
 810333a:	46bd      	mov	sp, r7
 810333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103340:	4770      	bx	lr
	...

08103344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8103344:	b580      	push	{r7, lr}
 8103346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8103348:	4802      	ldr	r0, [pc, #8]	@ (8103354 <TIM6_DAC_IRQHandler+0x10>)
 810334a:	f00e fc4d 	bl	8111be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 810334e:	bf00      	nop
 8103350:	bd80      	pop	{r7, pc}
 8103352:	bf00      	nop
 8103354:	100001dc 	.word	0x100001dc

08103358 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8103358:	b580      	push	{r7, lr}
 810335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 810335c:	4802      	ldr	r0, [pc, #8]	@ (8103368 <ETH_IRQHandler+0x10>)
 810335e:	f00a f89f 	bl	810d4a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8103362:	bf00      	nop
 8103364:	bd80      	pop	{r7, pc}
 8103366:	bf00      	nop
 8103368:	10000318 	.word	0x10000318

0810336c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 810336c:	b580      	push	{r7, lr}
 810336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8103370:	4802      	ldr	r0, [pc, #8]	@ (810337c <ETH_WKUP_IRQHandler+0x10>)
 8103372:	f00a f895 	bl	810d4a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8103376:	bf00      	nop
 8103378:	bd80      	pop	{r7, pc}
 810337a:	bf00      	nop
 810337c:	10000318 	.word	0x10000318

08103380 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8103380:	b580      	push	{r7, lr}
 8103382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8103384:	f00b fd38 	bl	810edf8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8103388:	bf00      	nop
 810338a:	bd80      	pop	{r7, pc}

0810338c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810338c:	b480      	push	{r7}
 810338e:	af00      	add	r7, sp, #0
	return 1;
 8103390:	2301      	movs	r3, #1
}
 8103392:	4618      	mov	r0, r3
 8103394:	46bd      	mov	sp, r7
 8103396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810339a:	4770      	bx	lr

0810339c <_kill>:

int _kill(int pid, int sig)
{
 810339c:	b480      	push	{r7}
 810339e:	b083      	sub	sp, #12
 81033a0:	af00      	add	r7, sp, #0
 81033a2:	6078      	str	r0, [r7, #4]
 81033a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81033a6:	4b05      	ldr	r3, [pc, #20]	@ (81033bc <_kill+0x20>)
 81033a8:	2216      	movs	r2, #22
 81033aa:	601a      	str	r2, [r3, #0]
	return -1;
 81033ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 81033b0:	4618      	mov	r0, r3
 81033b2:	370c      	adds	r7, #12
 81033b4:	46bd      	mov	sp, r7
 81033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ba:	4770      	bx	lr
 81033bc:	1000e650 	.word	0x1000e650

081033c0 <_exit>:

void _exit (int status)
{
 81033c0:	b580      	push	{r7, lr}
 81033c2:	b082      	sub	sp, #8
 81033c4:	af00      	add	r7, sp, #0
 81033c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81033c8:	f04f 31ff 	mov.w	r1, #4294967295
 81033cc:	6878      	ldr	r0, [r7, #4]
 81033ce:	f7ff ffe5 	bl	810339c <_kill>
	while (1) {}		/* Make sure we hang here */
 81033d2:	bf00      	nop
 81033d4:	e7fd      	b.n	81033d2 <_exit+0x12>

081033d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81033d6:	b580      	push	{r7, lr}
 81033d8:	b086      	sub	sp, #24
 81033da:	af00      	add	r7, sp, #0
 81033dc:	60f8      	str	r0, [r7, #12]
 81033de:	60b9      	str	r1, [r7, #8]
 81033e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81033e2:	2300      	movs	r3, #0
 81033e4:	617b      	str	r3, [r7, #20]
 81033e6:	e00a      	b.n	81033fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81033e8:	f3af 8000 	nop.w
 81033ec:	4601      	mov	r1, r0
 81033ee:	68bb      	ldr	r3, [r7, #8]
 81033f0:	1c5a      	adds	r2, r3, #1
 81033f2:	60ba      	str	r2, [r7, #8]
 81033f4:	b2ca      	uxtb	r2, r1
 81033f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81033f8:	697b      	ldr	r3, [r7, #20]
 81033fa:	3301      	adds	r3, #1
 81033fc:	617b      	str	r3, [r7, #20]
 81033fe:	697a      	ldr	r2, [r7, #20]
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	429a      	cmp	r2, r3
 8103404:	dbf0      	blt.n	81033e8 <_read+0x12>
	}

return len;
 8103406:	687b      	ldr	r3, [r7, #4]
}
 8103408:	4618      	mov	r0, r3
 810340a:	3718      	adds	r7, #24
 810340c:	46bd      	mov	sp, r7
 810340e:	bd80      	pop	{r7, pc}

08103410 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8103410:	b580      	push	{r7, lr}
 8103412:	b086      	sub	sp, #24
 8103414:	af00      	add	r7, sp, #0
 8103416:	60f8      	str	r0, [r7, #12]
 8103418:	60b9      	str	r1, [r7, #8]
 810341a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810341c:	2300      	movs	r3, #0
 810341e:	617b      	str	r3, [r7, #20]
 8103420:	e009      	b.n	8103436 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8103422:	68bb      	ldr	r3, [r7, #8]
 8103424:	1c5a      	adds	r2, r3, #1
 8103426:	60ba      	str	r2, [r7, #8]
 8103428:	781b      	ldrb	r3, [r3, #0]
 810342a:	4618      	mov	r0, r3
 810342c:	f7fe f962 	bl	81016f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103430:	697b      	ldr	r3, [r7, #20]
 8103432:	3301      	adds	r3, #1
 8103434:	617b      	str	r3, [r7, #20]
 8103436:	697a      	ldr	r2, [r7, #20]
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	429a      	cmp	r2, r3
 810343c:	dbf1      	blt.n	8103422 <_write+0x12>
	}
	return len;
 810343e:	687b      	ldr	r3, [r7, #4]
}
 8103440:	4618      	mov	r0, r3
 8103442:	3718      	adds	r7, #24
 8103444:	46bd      	mov	sp, r7
 8103446:	bd80      	pop	{r7, pc}

08103448 <_close>:

int _close(int file)
{
 8103448:	b480      	push	{r7}
 810344a:	b083      	sub	sp, #12
 810344c:	af00      	add	r7, sp, #0
 810344e:	6078      	str	r0, [r7, #4]
	return -1;
 8103450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103454:	4618      	mov	r0, r3
 8103456:	370c      	adds	r7, #12
 8103458:	46bd      	mov	sp, r7
 810345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810345e:	4770      	bx	lr

08103460 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8103460:	b480      	push	{r7}
 8103462:	b083      	sub	sp, #12
 8103464:	af00      	add	r7, sp, #0
 8103466:	6078      	str	r0, [r7, #4]
 8103468:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 810346a:	683b      	ldr	r3, [r7, #0]
 810346c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8103470:	605a      	str	r2, [r3, #4]
	return 0;
 8103472:	2300      	movs	r3, #0
}
 8103474:	4618      	mov	r0, r3
 8103476:	370c      	adds	r7, #12
 8103478:	46bd      	mov	sp, r7
 810347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810347e:	4770      	bx	lr

08103480 <_isatty>:

int _isatty(int file)
{
 8103480:	b480      	push	{r7}
 8103482:	b083      	sub	sp, #12
 8103484:	af00      	add	r7, sp, #0
 8103486:	6078      	str	r0, [r7, #4]
	return 1;
 8103488:	2301      	movs	r3, #1
}
 810348a:	4618      	mov	r0, r3
 810348c:	370c      	adds	r7, #12
 810348e:	46bd      	mov	sp, r7
 8103490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103494:	4770      	bx	lr

08103496 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103496:	b480      	push	{r7}
 8103498:	b085      	sub	sp, #20
 810349a:	af00      	add	r7, sp, #0
 810349c:	60f8      	str	r0, [r7, #12]
 810349e:	60b9      	str	r1, [r7, #8]
 81034a0:	607a      	str	r2, [r7, #4]
	return 0;
 81034a2:	2300      	movs	r3, #0
}
 81034a4:	4618      	mov	r0, r3
 81034a6:	3714      	adds	r7, #20
 81034a8:	46bd      	mov	sp, r7
 81034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ae:	4770      	bx	lr

081034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81034b0:	b480      	push	{r7}
 81034b2:	b087      	sub	sp, #28
 81034b4:	af00      	add	r7, sp, #0
 81034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81034b8:	4a14      	ldr	r2, [pc, #80]	@ (810350c <_sbrk+0x5c>)
 81034ba:	4b15      	ldr	r3, [pc, #84]	@ (8103510 <_sbrk+0x60>)
 81034bc:	1ad3      	subs	r3, r2, r3
 81034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81034c0:	697b      	ldr	r3, [r7, #20]
 81034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81034c4:	4b13      	ldr	r3, [pc, #76]	@ (8103514 <_sbrk+0x64>)
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	2b00      	cmp	r3, #0
 81034ca:	d102      	bne.n	81034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81034cc:	4b11      	ldr	r3, [pc, #68]	@ (8103514 <_sbrk+0x64>)
 81034ce:	4a12      	ldr	r2, [pc, #72]	@ (8103518 <_sbrk+0x68>)
 81034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81034d2:	4b10      	ldr	r3, [pc, #64]	@ (8103514 <_sbrk+0x64>)
 81034d4:	681a      	ldr	r2, [r3, #0]
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	4413      	add	r3, r2
 81034da:	693a      	ldr	r2, [r7, #16]
 81034dc:	429a      	cmp	r2, r3
 81034de:	d205      	bcs.n	81034ec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 81034e0:	4b0e      	ldr	r3, [pc, #56]	@ (810351c <_sbrk+0x6c>)
 81034e2:	220c      	movs	r2, #12
 81034e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81034e6:	f04f 33ff 	mov.w	r3, #4294967295
 81034ea:	e009      	b.n	8103500 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 81034ec:	4b09      	ldr	r3, [pc, #36]	@ (8103514 <_sbrk+0x64>)
 81034ee:	681b      	ldr	r3, [r3, #0]
 81034f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81034f2:	4b08      	ldr	r3, [pc, #32]	@ (8103514 <_sbrk+0x64>)
 81034f4:	681a      	ldr	r2, [r3, #0]
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	4413      	add	r3, r2
 81034fa:	4a06      	ldr	r2, [pc, #24]	@ (8103514 <_sbrk+0x64>)
 81034fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81034fe:	68fb      	ldr	r3, [r7, #12]
}
 8103500:	4618      	mov	r0, r3
 8103502:	371c      	adds	r7, #28
 8103504:	46bd      	mov	sp, r7
 8103506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810350a:	4770      	bx	lr
 810350c:	10048000 	.word	0x10048000
 8103510:	00001000 	.word	0x00001000
 8103514:	10000228 	.word	0x10000228
 8103518:	1000e658 	.word	0x1000e658
 810351c:	1000e650 	.word	0x1000e650

08103520 <_ZSt23__is_constant_evaluatedv>:
  {
 8103520:	b480      	push	{r7}
 8103522:	af00      	add	r7, sp, #0
    return __builtin_is_constant_evaluated();
 8103524:	2300      	movs	r3, #0
  }
 8103526:	4618      	mov	r0, r3
 8103528:	46bd      	mov	sp, r7
 810352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810352e:	4770      	bx	lr

08103530 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
#include "APIDoIP.h"
#include "Logger.h"

void APIDoIP::prepareDataRequest(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EUDSDID did)
{
 8103530:	b480      	push	{r7}
 8103532:	b083      	sub	sp, #12
 8103534:	af00      	add	r7, sp, #0
 8103536:	6078      	str	r0, [r7, #4]
 8103538:	460b      	mov	r3, r1
 810353a:	70fb      	strb	r3, [r7, #3]
 810353c:	4613      	mov	r3, r2
 810353e:	803b      	strh	r3, [r7, #0]
    // data len
    preparedPayload[0] = 0x00;
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	2200      	movs	r2, #0
 8103544:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	3301      	adds	r3, #1
 810354a:	2200      	movs	r2, #0
 810354c:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	3302      	adds	r3, #2
 8103552:	2200      	movs	r2, #0
 8103554:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = dataReqDataSize;
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	3303      	adds	r3, #3
 810355a:	2205      	movs	r2, #5
 810355c:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	3304      	adds	r3, #4
 8103562:	2200      	movs	r2, #0
 8103564:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	3305      	adds	r3, #5
 810356a:	2201      	movs	r2, #1
 810356c:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	3306      	adds	r3, #6
 8103572:	22f4      	movs	r2, #244	@ 0xf4
 8103574:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	3307      	adds	r3, #7
 810357a:	78fa      	ldrb	r2, [r7, #3]
 810357c:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::READ_DATA_BY_IDENTIFIER);
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	3308      	adds	r3, #8
 8103582:	2222      	movs	r2, #34	@ 0x22
 8103584:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[9] = static_cast<uint8_t>((static_cast<uint16_t>(did) & 0xFF00) >> 8);
 8103586:	883b      	ldrh	r3, [r7, #0]
 8103588:	0a1b      	lsrs	r3, r3, #8
 810358a:	b29a      	uxth	r2, r3
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	3309      	adds	r3, #9
 8103590:	b2d2      	uxtb	r2, r2
 8103592:	701a      	strb	r2, [r3, #0]
    preparedPayload[10] = static_cast<uint8_t>(static_cast<uint16_t>(did) & 0x00FF);
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	330a      	adds	r3, #10
 8103598:	883a      	ldrh	r2, [r7, #0]
 810359a:	b2d2      	uxtb	r2, r2
 810359c:	701a      	strb	r2, [r3, #0]
}
 810359e:	bf00      	nop
 81035a0:	370c      	adds	r7, #12
 81035a2:	46bd      	mov	sp, r7
 81035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035a8:	4770      	bx	lr

081035aa <_ZN7APIDoIP33prepareFirstRequestForDynamicDataEPh11EECUAddress>:

void APIDoIP::prepareFirstRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr)
{
 81035aa:	b480      	push	{r7}
 81035ac:	b083      	sub	sp, #12
 81035ae:	af00      	add	r7, sp, #0
 81035b0:	6078      	str	r0, [r7, #4]
 81035b2:	460b      	mov	r3, r1
 81035b4:	70fb      	strb	r3, [r7, #3]
    // data len
    preparedPayload[0] = 0x00;
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	2200      	movs	r2, #0
 81035ba:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	3301      	adds	r3, #1
 81035c0:	2200      	movs	r2, #0
 81035c2:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	3302      	adds	r3, #2
 81035c8:	2200      	movs	r2, #0
 81035ca:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = firstReqDynDataSize;
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	3303      	adds	r3, #3
 81035d0:	2206      	movs	r2, #6
 81035d2:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	3304      	adds	r3, #4
 81035d8:	2200      	movs	r2, #0
 81035da:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	3305      	adds	r3, #5
 81035e0:	2201      	movs	r2, #1
 81035e2:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	3306      	adds	r3, #6
 81035e8:	22f4      	movs	r2, #244	@ 0xf4
 81035ea:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	3307      	adds	r3, #7
 81035f0:	78fa      	ldrb	r2, [r7, #3]
 81035f2:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::DYNAMICALLY_DEFINE_DATA_IDENTIFIER);
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	3308      	adds	r3, #8
 81035f8:	222c      	movs	r2, #44	@ 0x2c
 81035fa:	701a      	strb	r2, [r3, #0]
    // sub SID
    preparedPayload[9] = static_cast<uint8_t>(DynamicallyAssignDataSubSID::REQUEST_FIRST);
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	3309      	adds	r3, #9
 8103600:	2203      	movs	r2, #3
 8103602:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[10] = static_cast<uint8_t>((static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0xFF00) >> 8);
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	330a      	adds	r3, #10
 8103608:	22f3      	movs	r2, #243	@ 0xf3
 810360a:	701a      	strb	r2, [r3, #0]
    preparedPayload[11] = static_cast<uint8_t>(static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0x00FF);
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	330b      	adds	r3, #11
 8103610:	2200      	movs	r2, #0
 8103612:	701a      	strb	r2, [r3, #0]
}
 8103614:	bf00      	nop
 8103616:	370c      	adds	r7, #12
 8103618:	46bd      	mov	sp, r7
 810361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810361e:	4770      	bx	lr

08103620 <_ZN7APIDoIP34prepareSecondRequestForDynamicDataEPh11EECUAddress34EDynamicDataIndentifierRequestCode>:

void APIDoIP::prepareSecondRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EDynamicDataIndentifierRequestCode ddirCode)
{
 8103620:	b480      	push	{r7}
 8103622:	b085      	sub	sp, #20
 8103624:	af00      	add	r7, sp, #0
 8103626:	60f8      	str	r0, [r7, #12]
 8103628:	460b      	mov	r3, r1
 810362a:	607a      	str	r2, [r7, #4]
 810362c:	72fb      	strb	r3, [r7, #11]
    // data len
    preparedPayload[0] = 0x00;
 810362e:	68fb      	ldr	r3, [r7, #12]
 8103630:	2200      	movs	r2, #0
 8103632:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8103634:	68fb      	ldr	r3, [r7, #12]
 8103636:	3301      	adds	r3, #1
 8103638:	2200      	movs	r2, #0
 810363a:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 810363c:	68fb      	ldr	r3, [r7, #12]
 810363e:	3302      	adds	r3, #2
 8103640:	2200      	movs	r2, #0
 8103642:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = secondReqDynDataSize;
 8103644:	68fb      	ldr	r3, [r7, #12]
 8103646:	3303      	adds	r3, #3
 8103648:	220a      	movs	r2, #10
 810364a:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 810364c:	68fb      	ldr	r3, [r7, #12]
 810364e:	3304      	adds	r3, #4
 8103650:	2200      	movs	r2, #0
 8103652:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8103654:	68fb      	ldr	r3, [r7, #12]
 8103656:	3305      	adds	r3, #5
 8103658:	2201      	movs	r2, #1
 810365a:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 810365c:	68fb      	ldr	r3, [r7, #12]
 810365e:	3306      	adds	r3, #6
 8103660:	22f4      	movs	r2, #244	@ 0xf4
 8103662:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8103664:	68fb      	ldr	r3, [r7, #12]
 8103666:	3307      	adds	r3, #7
 8103668:	7afa      	ldrb	r2, [r7, #11]
 810366a:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::DYNAMICALLY_DEFINE_DATA_IDENTIFIER);
 810366c:	68fb      	ldr	r3, [r7, #12]
 810366e:	3308      	adds	r3, #8
 8103670:	222c      	movs	r2, #44	@ 0x2c
 8103672:	701a      	strb	r2, [r3, #0]
    // sub SID
    preparedPayload[9] = static_cast<uint8_t>(DynamicallyAssignDataSubSID::REQUEST_ASSIGN);;
 8103674:	68fb      	ldr	r3, [r7, #12]
 8103676:	3309      	adds	r3, #9
 8103678:	2201      	movs	r2, #1
 810367a:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[10] = static_cast<uint8_t>((static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0xFF00) >> 8);
 810367c:	68fb      	ldr	r3, [r7, #12]
 810367e:	330a      	adds	r3, #10
 8103680:	22f3      	movs	r2, #243	@ 0xf3
 8103682:	701a      	strb	r2, [r3, #0]
    preparedPayload[11] = static_cast<uint8_t>(static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0x00FF);
 8103684:	68fb      	ldr	r3, [r7, #12]
 8103686:	330b      	adds	r3, #11
 8103688:	2200      	movs	r2, #0
 810368a:	701a      	strb	r2, [r3, #0]

    // Dynamic data identifier request code
    preparedPayload[12] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0xFF000000) >> 24);
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	0e1a      	lsrs	r2, r3, #24
 8103690:	68fb      	ldr	r3, [r7, #12]
 8103692:	330c      	adds	r3, #12
 8103694:	b2d2      	uxtb	r2, r2
 8103696:	701a      	strb	r2, [r3, #0]
    preparedPayload[13] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0x00FF0000) >> 16);
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	0c1a      	lsrs	r2, r3, #16
 810369c:	68fb      	ldr	r3, [r7, #12]
 810369e:	330d      	adds	r3, #13
 81036a0:	b2d2      	uxtb	r2, r2
 81036a2:	701a      	strb	r2, [r3, #0]
    preparedPayload[14] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0x0000FF00) >> 8);
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	0a1a      	lsrs	r2, r3, #8
 81036a8:	68fb      	ldr	r3, [r7, #12]
 81036aa:	330e      	adds	r3, #14
 81036ac:	b2d2      	uxtb	r2, r2
 81036ae:	701a      	strb	r2, [r3, #0]
    preparedPayload[15] = static_cast<uint8_t>(static_cast<uint32_t>(ddirCode) & 0x000000FF);
 81036b0:	68fb      	ldr	r3, [r7, #12]
 81036b2:	330f      	adds	r3, #15
 81036b4:	687a      	ldr	r2, [r7, #4]
 81036b6:	b2d2      	uxtb	r2, r2
 81036b8:	701a      	strb	r2, [r3, #0]
}
 81036ba:	bf00      	nop
 81036bc:	3714      	adds	r7, #20
 81036be:	46bd      	mov	sp, r7
 81036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036c4:	4770      	bx	lr
	...

081036c8 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE>:

std::optional<SMessage> APIDoIP::extractDataFromResponse(const uint8_t dataPayload[], size_t size, EDoIPRequest dataType)
{
 81036c8:	b5b0      	push	{r4, r5, r7, lr}
 81036ca:	b08c      	sub	sp, #48	@ 0x30
 81036cc:	af00      	add	r7, sp, #0
 81036ce:	60f8      	str	r0, [r7, #12]
 81036d0:	60b9      	str	r1, [r7, #8]
 81036d2:	607a      	str	r2, [r7, #4]
 81036d4:	70fb      	strb	r3, [r7, #3]
    bool sizeMismatch = false;
 81036d6:	2300      	movs	r3, #0
 81036d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SMessage msg;
    msg.event_sender = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 81036dc:	2303      	movs	r3, #3
 81036de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    msg.event_receiver = EVENT_CLIENT_FRONTEND;
 81036e2:	2300      	movs	r3, #0
 81036e4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    switch(dataType)
 81036e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81036ec:	2b0e      	cmp	r3, #14
 81036ee:	f200 8177 	bhi.w	81039e0 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x318>
 81036f2:	a201      	add	r2, pc, #4	@ (adr r2, 81036f8 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x30>)
 81036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81036f8:	08103735 	.word	0x08103735
 81036fc:	08103761 	.word	0x08103761
 8103700:	0810378d 	.word	0x0810378d
 8103704:	081037a7 	.word	0x081037a7
 8103708:	081037c1 	.word	0x081037c1
 810370c:	081037db 	.word	0x081037db
 8103710:	08103807 	.word	0x08103807
 8103714:	08103833 	.word	0x08103833
 8103718:	0810384d 	.word	0x0810384d
 810371c:	08103885 	.word	0x08103885
 8103720:	081038b1 	.word	0x081038b1
 8103724:	081038dd 	.word	0x081038dd
 8103728:	08103909 	.word	0x08103909
 810372c:	0810396f 	.word	0x0810396f
 8103730:	0810399b 	.word	0x0810399b
    {
        case DME_ENGINE_OIL_TEMPERATURE:
        {
            if(size < 2)
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	2b01      	cmp	r3, #1
 8103738:	d803      	bhi.n	8103742 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x7a>
            {
                sizeMismatch = true;
 810373a:	2301      	movs	r3, #1
 810373c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_ENGINE_OIL_TEMPERATURE;
                msg.message_data.dme_engine_oil_temperature = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8103740:	e153      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_ENGINE_OIL_TEMPERATURE;
 8103742:	2300      	movs	r3, #0
 8103744:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_engine_oil_temperature = (dataPayload[0] << 8) | dataPayload[1];
 8103746:	68bb      	ldr	r3, [r7, #8]
 8103748:	781b      	ldrb	r3, [r3, #0]
 810374a:	021b      	lsls	r3, r3, #8
 810374c:	b21a      	sxth	r2, r3
 810374e:	68bb      	ldr	r3, [r7, #8]
 8103750:	3301      	adds	r3, #1
 8103752:	781b      	ldrb	r3, [r3, #0]
 8103754:	b21b      	sxth	r3, r3
 8103756:	4313      	orrs	r3, r2
 8103758:	b21b      	sxth	r3, r3
 810375a:	b29b      	uxth	r3, r3
 810375c:	82bb      	strh	r3, [r7, #20]
            break;
 810375e:	e144      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_ENGINE_ROTATIONAL_SPEED:
        {
            if(size < 2)
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	2b01      	cmp	r3, #1
 8103764:	d803      	bhi.n	810376e <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xa6>
            {
                sizeMismatch = true;
 8103766:	2301      	movs	r3, #1
 8103768:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_ENGINE_ROTATIONAL_SPEED;
                msg.message_data.dme_engine_rotational_speed = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 810376c:	e13d      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_ENGINE_ROTATIONAL_SPEED;
 810376e:	2301      	movs	r3, #1
 8103770:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_engine_rotational_speed = (dataPayload[0] << 8) | dataPayload[1];
 8103772:	68bb      	ldr	r3, [r7, #8]
 8103774:	781b      	ldrb	r3, [r3, #0]
 8103776:	021b      	lsls	r3, r3, #8
 8103778:	b21a      	sxth	r2, r3
 810377a:	68bb      	ldr	r3, [r7, #8]
 810377c:	3301      	adds	r3, #1
 810377e:	781b      	ldrb	r3, [r3, #0]
 8103780:	b21b      	sxth	r3, r3
 8103782:	4313      	orrs	r3, r2
 8103784:	b21b      	sxth	r3, r3
 8103786:	b29b      	uxth	r3, r3
 8103788:	82bb      	strh	r3, [r7, #20]
            break;
 810378a:	e12e      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_COOLANT_TEMPERATURE:
        {
            if(size < 1)
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	2b00      	cmp	r3, #0
 8103790:	d103      	bne.n	810379a <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xd2>
            {
                sizeMismatch = true;
 8103792:	2301      	movs	r3, #1
 8103794:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_COOLANT_TEMPERATURE;
                msg.message_data.dme_coolant_temperature = dataPayload[0];
            }
            break;
 8103798:	e127      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_COOLANT_TEMPERATURE;
 810379a:	2302      	movs	r3, #2
 810379c:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_coolant_temperature = dataPayload[0];
 810379e:	68bb      	ldr	r3, [r7, #8]
 81037a0:	781b      	ldrb	r3, [r3, #0]
 81037a2:	753b      	strb	r3, [r7, #20]
            break;
 81037a4:	e121      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_BATTERY_VOLTAGE:
        {
            if(size < 1)
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	2b00      	cmp	r3, #0
 81037aa:	d103      	bne.n	81037b4 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0xec>
            {
                sizeMismatch = true;
 81037ac:	2301      	movs	r3, #1
 81037ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_BATTERY_VOLTAGE;
                msg.message_data.dme_battery_voltage = dataPayload[0];
            }
            break;
 81037b2:	e11a      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_BATTERY_VOLTAGE;
 81037b4:	2303      	movs	r3, #3
 81037b6:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_battery_voltage = dataPayload[0];
 81037b8:	68bb      	ldr	r3, [r7, #8]
 81037ba:	781b      	ldrb	r3, [r3, #0]
 81037bc:	753b      	strb	r3, [r7, #20]
            break;
 81037be:	e114      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_AMBIENT_TEMPERATURE:
        {
            if(size < 1)
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	2b00      	cmp	r3, #0
 81037c4:	d103      	bne.n	81037ce <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x106>
            {
                sizeMismatch = true;
 81037c6:	2301      	movs	r3, #1
 81037c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_AMBIENT_TEMPERATURE;
                msg.message_data.dme_ambient_temperature = dataPayload[0];
            }
            break;
 81037cc:	e10d      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_AMBIENT_TEMPERATURE;
 81037ce:	2304      	movs	r3, #4
 81037d0:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_ambient_temperature = dataPayload[0];
 81037d2:	68bb      	ldr	r3, [r7, #8]
 81037d4:	781b      	ldrb	r3, [r3, #0]
 81037d6:	753b      	strb	r3, [r7, #20]
            break;
 81037d8:	e107      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_AIR_MASS:
        {
            if(size < 2)
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	2b01      	cmp	r3, #1
 81037de:	d803      	bhi.n	81037e8 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x120>
            {
                sizeMismatch = true;
 81037e0:	2301      	movs	r3, #1
 81037e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_AIR_MASS;
                msg.message_data.dme_air_mass = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 81037e6:	e100      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_AIR_MASS;
 81037e8:	2305      	movs	r3, #5
 81037ea:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_air_mass = (dataPayload[0] << 8) | dataPayload[1];
 81037ec:	68bb      	ldr	r3, [r7, #8]
 81037ee:	781b      	ldrb	r3, [r3, #0]
 81037f0:	021b      	lsls	r3, r3, #8
 81037f2:	b21a      	sxth	r2, r3
 81037f4:	68bb      	ldr	r3, [r7, #8]
 81037f6:	3301      	adds	r3, #1
 81037f8:	781b      	ldrb	r3, [r3, #0]
 81037fa:	b21b      	sxth	r3, r3
 81037fc:	4313      	orrs	r3, r2
 81037fe:	b21b      	sxth	r3, r3
 8103800:	b29b      	uxth	r3, r3
 8103802:	82bb      	strh	r3, [r7, #20]
            break;
 8103804:	e0f1      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_RAIL_PRESSURE:
        {
            if(size < 2)
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	2b01      	cmp	r3, #1
 810380a:	d803      	bhi.n	8103814 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x14c>
            {
                sizeMismatch = true;
 810380c:	2301      	movs	r3, #1
 810380e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_RAIL_PRESSURE;
                msg.message_data.dme_rail_pressure = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8103812:	e0ea      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_RAIL_PRESSURE;
 8103814:	2306      	movs	r3, #6
 8103816:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_rail_pressure = (dataPayload[0] << 8) | dataPayload[1];
 8103818:	68bb      	ldr	r3, [r7, #8]
 810381a:	781b      	ldrb	r3, [r3, #0]
 810381c:	021b      	lsls	r3, r3, #8
 810381e:	b21a      	sxth	r2, r3
 8103820:	68bb      	ldr	r3, [r7, #8]
 8103822:	3301      	adds	r3, #1
 8103824:	781b      	ldrb	r3, [r3, #0]
 8103826:	b21b      	sxth	r3, r3
 8103828:	4313      	orrs	r3, r2
 810382a:	b21b      	sxth	r3, r3
 810382c:	b29b      	uxth	r3, r3
 810382e:	82bb      	strh	r3, [r7, #20]
            break;
 8103830:	e0db      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case DME_ACCELERATOR_PEDAL_POSITION:
        {
            if(size < 1)
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	2b00      	cmp	r3, #0
 8103836:	d103      	bne.n	8103840 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x178>
            {
                sizeMismatch = true;
 8103838:	2301      	movs	r3, #1
 810383a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_DME_ACCELERATOR_PEDAL_POSITION;
                msg.message_data.dme_accelerator_pedal_position = dataPayload[0];
            }
            break;
 810383e:	e0d4      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_DME_ACCELERATOR_PEDAL_POSITION;
 8103840:	2307      	movs	r3, #7
 8103842:	743b      	strb	r3, [r7, #16]
                msg.message_data.dme_accelerator_pedal_position = dataPayload[0];
 8103844:	68bb      	ldr	r3, [r7, #8]
 8103846:	781b      	ldrb	r3, [r3, #0]
 8103848:	753b      	strb	r3, [r7, #20]
            break;
 810384a:	e0ce      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_TOTAL_DISTANCE:
        {
            if(size < 4)
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	2b03      	cmp	r3, #3
 8103850:	d803      	bhi.n	810385a <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x192>
            {
                sizeMismatch = true;
 8103852:	2301      	movs	r3, #1
 8103854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_TOTAL_DISTANCE;
                msg.message_data.kombi_total_distance = (dataPayload[0] << 24) | (dataPayload[1] << 16) | (dataPayload[2] << 8) | dataPayload[3];
            }
            break;
 8103858:	e0c7      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_TOTAL_DISTANCE;
 810385a:	2308      	movs	r3, #8
 810385c:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_total_distance = (dataPayload[0] << 24) | (dataPayload[1] << 16) | (dataPayload[2] << 8) | dataPayload[3];
 810385e:	68bb      	ldr	r3, [r7, #8]
 8103860:	781b      	ldrb	r3, [r3, #0]
 8103862:	061a      	lsls	r2, r3, #24
 8103864:	68bb      	ldr	r3, [r7, #8]
 8103866:	3301      	adds	r3, #1
 8103868:	781b      	ldrb	r3, [r3, #0]
 810386a:	041b      	lsls	r3, r3, #16
 810386c:	431a      	orrs	r2, r3
 810386e:	68bb      	ldr	r3, [r7, #8]
 8103870:	3302      	adds	r3, #2
 8103872:	781b      	ldrb	r3, [r3, #0]
 8103874:	021b      	lsls	r3, r3, #8
 8103876:	4313      	orrs	r3, r2
 8103878:	68ba      	ldr	r2, [r7, #8]
 810387a:	3203      	adds	r2, #3
 810387c:	7812      	ldrb	r2, [r2, #0]
 810387e:	4313      	orrs	r3, r2
 8103880:	617b      	str	r3, [r7, #20]
            break;
 8103882:	e0b2      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_SPEED:
        {
            if(size < 2)
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	2b01      	cmp	r3, #1
 8103888:	d803      	bhi.n	8103892 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x1ca>
            {
                sizeMismatch = true;
 810388a:	2301      	movs	r3, #1
 810388c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_SPEED;
                msg.message_data.kombi_speed = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 8103890:	e0ab      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_SPEED;
 8103892:	2309      	movs	r3, #9
 8103894:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_speed = (dataPayload[0] << 8) | dataPayload[1];
 8103896:	68bb      	ldr	r3, [r7, #8]
 8103898:	781b      	ldrb	r3, [r3, #0]
 810389a:	021b      	lsls	r3, r3, #8
 810389c:	b21a      	sxth	r2, r3
 810389e:	68bb      	ldr	r3, [r7, #8]
 81038a0:	3301      	adds	r3, #1
 81038a2:	781b      	ldrb	r3, [r3, #0]
 81038a4:	b21b      	sxth	r3, r3
 81038a6:	4313      	orrs	r3, r2
 81038a8:	b21b      	sxth	r3, r3
 81038aa:	b29b      	uxth	r3, r3
 81038ac:	82bb      	strh	r3, [r7, #20]
            break;
 81038ae:	e09c      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_OUTSIDE_TEMP_SENSOR:
        {
            if(size < 2)
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	2b01      	cmp	r3, #1
 81038b4:	d803      	bhi.n	81038be <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x1f6>
            {
                sizeMismatch = true;
 81038b6:	2301      	movs	r3, #1
 81038b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_OUTSIDE_TEMP_SENSOR;
                msg.message_data.kombi_outside_temp_sensor = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 81038bc:	e095      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_OUTSIDE_TEMP_SENSOR;
 81038be:	230a      	movs	r3, #10
 81038c0:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_outside_temp_sensor = (dataPayload[0] << 8) | dataPayload[1];
 81038c2:	68bb      	ldr	r3, [r7, #8]
 81038c4:	781b      	ldrb	r3, [r3, #0]
 81038c6:	021b      	lsls	r3, r3, #8
 81038c8:	b21a      	sxth	r2, r3
 81038ca:	68bb      	ldr	r3, [r7, #8]
 81038cc:	3301      	adds	r3, #1
 81038ce:	781b      	ldrb	r3, [r3, #0]
 81038d0:	b21b      	sxth	r3, r3
 81038d2:	4313      	orrs	r3, r2
 81038d4:	b21b      	sxth	r3, r3
 81038d6:	b29b      	uxth	r3, r3
 81038d8:	82bb      	strh	r3, [r7, #20]
            break;
 81038da:	e086      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_ENGINE_SPEED_ON_DISP:
        {
            if(size < 2)
 81038dc:	687b      	ldr	r3, [r7, #4]
 81038de:	2b01      	cmp	r3, #1
 81038e0:	d803      	bhi.n	81038ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x222>
            {
                sizeMismatch = true;
 81038e2:	2301      	movs	r3, #1
 81038e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_ENGINE_SPEED_ON_DISP;
                msg.message_data.kombi_engine_speed_on_disp = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 81038e8:	e07f      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_ENGINE_SPEED_ON_DISP;
 81038ea:	230b      	movs	r3, #11
 81038ec:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_engine_speed_on_disp = (dataPayload[0] << 8) | dataPayload[1];
 81038ee:	68bb      	ldr	r3, [r7, #8]
 81038f0:	781b      	ldrb	r3, [r3, #0]
 81038f2:	021b      	lsls	r3, r3, #8
 81038f4:	b21a      	sxth	r2, r3
 81038f6:	68bb      	ldr	r3, [r7, #8]
 81038f8:	3301      	adds	r3, #1
 81038fa:	781b      	ldrb	r3, [r3, #0]
 81038fc:	b21b      	sxth	r3, r3
 81038fe:	4313      	orrs	r3, r2
 8103900:	b21b      	sxth	r3, r3
 8103902:	b29b      	uxth	r3, r3
 8103904:	82bb      	strh	r3, [r7, #20]
            break;
 8103906:	e070      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case KOMBI_FUEL_LEVEL:
        {
            if(size < 9)
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	2b08      	cmp	r3, #8
 810390c:	d803      	bhi.n	8103916 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x24e>
            {
                sizeMismatch = true;
 810390e:	2301      	movs	r3, #1
 8103910:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_FUEL;
                msg.message_data.kombi_fuel_level[0] = (dataPayload[0] << 16) | (dataPayload[1] << 8) | dataPayload[2];
                msg.message_data.kombi_fuel_level[1] = (dataPayload[3] << 16) | (dataPayload[4] << 8) | dataPayload[5];
                msg.message_data.kombi_fuel_level[2] = (dataPayload[6] << 16) | (dataPayload[7] << 8) | dataPayload[8];
            }
            break;
 8103914:	e069      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_KOMBI_FUEL;
 8103916:	230c      	movs	r3, #12
 8103918:	743b      	strb	r3, [r7, #16]
                msg.message_data.kombi_fuel_level[0] = (dataPayload[0] << 16) | (dataPayload[1] << 8) | dataPayload[2];
 810391a:	68bb      	ldr	r3, [r7, #8]
 810391c:	781b      	ldrb	r3, [r3, #0]
 810391e:	041a      	lsls	r2, r3, #16
 8103920:	68bb      	ldr	r3, [r7, #8]
 8103922:	3301      	adds	r3, #1
 8103924:	781b      	ldrb	r3, [r3, #0]
 8103926:	021b      	lsls	r3, r3, #8
 8103928:	4313      	orrs	r3, r2
 810392a:	68ba      	ldr	r2, [r7, #8]
 810392c:	3202      	adds	r2, #2
 810392e:	7812      	ldrb	r2, [r2, #0]
 8103930:	4313      	orrs	r3, r2
 8103932:	617b      	str	r3, [r7, #20]
                msg.message_data.kombi_fuel_level[1] = (dataPayload[3] << 16) | (dataPayload[4] << 8) | dataPayload[5];
 8103934:	68bb      	ldr	r3, [r7, #8]
 8103936:	3303      	adds	r3, #3
 8103938:	781b      	ldrb	r3, [r3, #0]
 810393a:	041a      	lsls	r2, r3, #16
 810393c:	68bb      	ldr	r3, [r7, #8]
 810393e:	3304      	adds	r3, #4
 8103940:	781b      	ldrb	r3, [r3, #0]
 8103942:	021b      	lsls	r3, r3, #8
 8103944:	4313      	orrs	r3, r2
 8103946:	68ba      	ldr	r2, [r7, #8]
 8103948:	3205      	adds	r2, #5
 810394a:	7812      	ldrb	r2, [r2, #0]
 810394c:	4313      	orrs	r3, r2
 810394e:	61bb      	str	r3, [r7, #24]
                msg.message_data.kombi_fuel_level[2] = (dataPayload[6] << 16) | (dataPayload[7] << 8) | dataPayload[8];
 8103950:	68bb      	ldr	r3, [r7, #8]
 8103952:	3306      	adds	r3, #6
 8103954:	781b      	ldrb	r3, [r3, #0]
 8103956:	041a      	lsls	r2, r3, #16
 8103958:	68bb      	ldr	r3, [r7, #8]
 810395a:	3307      	adds	r3, #7
 810395c:	781b      	ldrb	r3, [r3, #0]
 810395e:	021b      	lsls	r3, r3, #8
 8103960:	4313      	orrs	r3, r2
 8103962:	68ba      	ldr	r2, [r7, #8]
 8103964:	3208      	adds	r2, #8
 8103966:	7812      	ldrb	r2, [r2, #0]
 8103968:	4313      	orrs	r3, r2
 810396a:	61fb      	str	r3, [r7, #28]
            break;
 810396c:	e03d      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case IHKA_EVAPORATOR_TEMPERATURE_SENSOR:
        {
            if(size < 2)
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	2b01      	cmp	r3, #1
 8103972:	d803      	bhi.n	810397c <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x2b4>
            {
                sizeMismatch = true;
 8103974:	2301      	movs	r3, #1
 8103976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            else
            {
                msg.event_type = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR;
                msg.message_data.ihka_evaporator_temperature_sensor = (dataPayload[0] << 8) | dataPayload[1];
            }
            break;
 810397a:	e036      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR;
 810397c:	230d      	movs	r3, #13
 810397e:	743b      	strb	r3, [r7, #16]
                msg.message_data.ihka_evaporator_temperature_sensor = (dataPayload[0] << 8) | dataPayload[1];
 8103980:	68bb      	ldr	r3, [r7, #8]
 8103982:	781b      	ldrb	r3, [r3, #0]
 8103984:	021b      	lsls	r3, r3, #8
 8103986:	b21a      	sxth	r2, r3
 8103988:	68bb      	ldr	r3, [r7, #8]
 810398a:	3301      	adds	r3, #1
 810398c:	781b      	ldrb	r3, [r3, #0]
 810398e:	b21b      	sxth	r3, r3
 8103990:	4313      	orrs	r3, r2
 8103992:	b21b      	sxth	r3, r3
 8103994:	b29b      	uxth	r3, r3
 8103996:	82bb      	strh	r3, [r7, #20]
            break;
 8103998:	e027      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        case IHKA_TEMPERATURE_SELECTOR:
        {
            if(size < 4)
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	2b03      	cmp	r3, #3
 810399e:	d803      	bhi.n	81039a8 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x2e0>
            {
                sizeMismatch = true;
 81039a0:	2301      	movs	r3, #1
 81039a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                //left
                msg.message_data.ihka_temperature_selector[0] = (dataPayload[0] << 8) | dataPayload[1];
                //right
                msg.message_data.ihka_temperature_selector[1] = (dataPayload[2] << 8) | dataPayload[3];
            }
            break;
 81039a6:	e020      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
                msg.event_type = EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR;
 81039a8:	230e      	movs	r3, #14
 81039aa:	743b      	strb	r3, [r7, #16]
                msg.message_data.ihka_temperature_selector[0] = (dataPayload[0] << 8) | dataPayload[1];
 81039ac:	68bb      	ldr	r3, [r7, #8]
 81039ae:	781b      	ldrb	r3, [r3, #0]
 81039b0:	021b      	lsls	r3, r3, #8
 81039b2:	b21a      	sxth	r2, r3
 81039b4:	68bb      	ldr	r3, [r7, #8]
 81039b6:	3301      	adds	r3, #1
 81039b8:	781b      	ldrb	r3, [r3, #0]
 81039ba:	b21b      	sxth	r3, r3
 81039bc:	4313      	orrs	r3, r2
 81039be:	b21b      	sxth	r3, r3
 81039c0:	b29b      	uxth	r3, r3
 81039c2:	82bb      	strh	r3, [r7, #20]
                msg.message_data.ihka_temperature_selector[1] = (dataPayload[2] << 8) | dataPayload[3];
 81039c4:	68bb      	ldr	r3, [r7, #8]
 81039c6:	3302      	adds	r3, #2
 81039c8:	781b      	ldrb	r3, [r3, #0]
 81039ca:	021b      	lsls	r3, r3, #8
 81039cc:	b21a      	sxth	r2, r3
 81039ce:	68bb      	ldr	r3, [r7, #8]
 81039d0:	3303      	adds	r3, #3
 81039d2:	781b      	ldrb	r3, [r3, #0]
 81039d4:	b21b      	sxth	r3, r3
 81039d6:	4313      	orrs	r3, r2
 81039d8:	b21b      	sxth	r3, r3
 81039da:	b29b      	uxth	r3, r3
 81039dc:	82fb      	strh	r3, [r7, #22]
            break;
 81039de:	e004      	b.n	81039ea <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x322>
        }
        default:
            // return, because if data was successfully read then we always need to send a connection event (and in this case we have not)
            return std::nullopt;
 81039e0:	4629      	mov	r1, r5
 81039e2:	68f8      	ldr	r0, [r7, #12]
 81039e4:	f000 f848 	bl	8103a78 <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>
 81039e8:	e015      	b.n	8103a16 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x34e>
    }

    if(sizeMismatch)
 81039ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 81039ee:	2b00      	cmp	r3, #0
 81039f0:	d00b      	beq.n	8103a0a <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x342>
    {
        LOG_DEBUG("Mismatching data size! Read data by identifier could not be completed!");
 81039f2:	f7fd fac5 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81039f6:	4603      	mov	r3, r0
 81039f8:	4909      	ldr	r1, [pc, #36]	@ (8103a20 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x358>)
 81039fa:	4618      	mov	r0, r3
 81039fc:	f7fd fae8 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return std::nullopt;
 8103a00:	4621      	mov	r1, r4
 8103a02:	68f8      	ldr	r0, [r7, #12]
 8103a04:	f000 f838 	bl	8103a78 <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>
 8103a08:	e005      	b.n	8103a16 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE+0x34e>
    }
    else
    {
        return std::optional<SMessage>(msg);
 8103a0a:	f107 0310 	add.w	r3, r7, #16
 8103a0e:	4619      	mov	r1, r3
 8103a10:	68f8      	ldr	r0, [r7, #12]
 8103a12:	f000 f83f 	bl	8103a94 <_ZNSt8optionalI8SMessageEC1IRS0_Lb1EEEOT_>
    }
}
 8103a16:	68f8      	ldr	r0, [r7, #12]
 8103a18:	3730      	adds	r7, #48	@ 0x30
 8103a1a:	46bd      	mov	sp, r7
 8103a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8103a1e:	bf00      	nop
 8103a20:	08124da0 	.word	0x08124da0

08103a24 <_ZNSt22_Optional_payload_baseI8SMessageEC1Ev>:
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
 8103a24:	b580      	push	{r7, lr}
 8103a26:	b082      	sub	sp, #8
 8103a28:	af00      	add	r7, sp, #0
 8103a2a:	6078      	str	r0, [r7, #4]
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	4618      	mov	r0, r3
 8103a30:	f000 f844 	bl	8103abc <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1Ev>
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	2200      	movs	r2, #0
 8103a38:	771a      	strb	r2, [r3, #28]
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	4618      	mov	r0, r3
 8103a3e:	3708      	adds	r7, #8
 8103a40:	46bd      	mov	sp, r7
 8103a42:	bd80      	pop	{r7, pc}

08103a44 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EEC1Ev>:
    struct _Optional_payload<_Tp, true, true, true>
    : _Optional_payload_base<_Tp>
    {
      using _Optional_payload_base<_Tp>::_Optional_payload_base;

      _Optional_payload() = default;
 8103a44:	b580      	push	{r7, lr}
 8103a46:	b082      	sub	sp, #8
 8103a48:	af00      	add	r7, sp, #0
 8103a4a:	6078      	str	r0, [r7, #4]
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	4618      	mov	r0, r3
 8103a50:	f7ff ffe8 	bl	8103a24 <_ZNSt22_Optional_payload_baseI8SMessageEC1Ev>
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	4618      	mov	r0, r3
 8103a58:	3708      	adds	r7, #8
 8103a5a:	46bd      	mov	sp, r7
 8103a5c:	bd80      	pop	{r7, pc}

08103a5e <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1Ev>:
  template<typename _Tp>
    struct _Optional_base<_Tp, true, true>
    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
    {
      // Constructors for disengaged optionals.
      constexpr _Optional_base() = default;
 8103a5e:	b580      	push	{r7, lr}
 8103a60:	b082      	sub	sp, #8
 8103a62:	af00      	add	r7, sp, #0
 8103a64:	6078      	str	r0, [r7, #4]
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	4618      	mov	r0, r3
 8103a6a:	f7ff ffeb 	bl	8103a44 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EEC1Ev>
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	4618      	mov	r0, r3
 8103a72:	3708      	adds	r7, #8
 8103a74:	46bd      	mov	sp, r7
 8103a76:	bd80      	pop	{r7, pc}

08103a78 <_ZNSt8optionalI8SMessageEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() noexcept { }

      constexpr optional(nullopt_t) noexcept { }
 8103a78:	b580      	push	{r7, lr}
 8103a7a:	b082      	sub	sp, #8
 8103a7c:	af00      	add	r7, sp, #0
 8103a7e:	6078      	str	r0, [r7, #4]
 8103a80:	7039      	strb	r1, [r7, #0]
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	4618      	mov	r0, r3
 8103a86:	f7ff ffea 	bl	8103a5e <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1Ev>
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	4618      	mov	r0, r3
 8103a8e:	3708      	adds	r7, #8
 8103a90:	46bd      	mov	sp, r7
 8103a92:	bd80      	pop	{r7, pc}

08103a94 <_ZNSt8optionalI8SMessageEC1IRS0_Lb1EEEOT_>:
      template<typename _Up = _Tp,
	       _Requires<__not_self<_Up>, __not_tag<_Up>,
			 is_constructible<_Tp, _Up>,
			 is_convertible<_Up, _Tp>> = true>
	constexpr
	optional(_Up&& __t)
 8103a94:	b5b0      	push	{r4, r5, r7, lr}
 8103a96:	b082      	sub	sp, #8
 8103a98:	af00      	add	r7, sp, #0
 8103a9a:	6078      	str	r0, [r7, #4]
 8103a9c:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_constructible_v<_Tp, _Up>)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8103a9e:	687c      	ldr	r4, [r7, #4]
 8103aa0:	6838      	ldr	r0, [r7, #0]
 8103aa2:	f000 f816 	bl	8103ad2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8103aa6:	4603      	mov	r3, r0
 8103aa8:	461a      	mov	r2, r3
 8103aaa:	4629      	mov	r1, r5
 8103aac:	4620      	mov	r0, r4
 8103aae:	f000 f82c 	bl	8103b0a <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1IJRS0_ELb0EEESt10in_place_tDpOT_>
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	4618      	mov	r0, r3
 8103ab6:	3708      	adds	r7, #8
 8103ab8:	46bd      	mov	sp, r7
 8103aba:	bdb0      	pop	{r4, r5, r7, pc}

08103abc <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 8103abc:	b480      	push	{r7}
 8103abe:	b083      	sub	sp, #12
 8103ac0:	af00      	add	r7, sp, #0
 8103ac2:	6078      	str	r0, [r7, #4]
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	4618      	mov	r0, r3
 8103ac8:	370c      	adds	r7, #12
 8103aca:	46bd      	mov	sp, r7
 8103acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ad0:	4770      	bx	lr

08103ad2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103ad2:	b480      	push	{r7}
 8103ad4:	b083      	sub	sp, #12
 8103ad6:	af00      	add	r7, sp, #0
 8103ad8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	4618      	mov	r0, r3
 8103ade:	370c      	adds	r7, #12
 8103ae0:	46bd      	mov	sp, r7
 8103ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ae6:	4770      	bx	lr

08103ae8 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJRS0_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8103ae8:	b590      	push	{r4, r7, lr}
 8103aea:	b085      	sub	sp, #20
 8103aec:	af00      	add	r7, sp, #0
 8103aee:	60f8      	str	r0, [r7, #12]
 8103af0:	7239      	strb	r1, [r7, #8]
 8103af2:	607a      	str	r2, [r7, #4]
 8103af4:	68fb      	ldr	r3, [r7, #12]
 8103af6:	687a      	ldr	r2, [r7, #4]
 8103af8:	4621      	mov	r1, r4
 8103afa:	4618      	mov	r0, r3
 8103afc:	f000 f81a 	bl	8103b34 <_ZNSt22_Optional_payload_baseI8SMessageEC1IJRS0_EEESt10in_place_tDpOT_>
 8103b00:	68fb      	ldr	r3, [r7, #12]
 8103b02:	4618      	mov	r0, r3
 8103b04:	3714      	adds	r7, #20
 8103b06:	46bd      	mov	sp, r7
 8103b08:	bd90      	pop	{r4, r7, pc}

08103b0a <_ZNSt14_Optional_baseI8SMessageLb1ELb1EEC1IJRS0_ELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
 8103b0a:	b5b0      	push	{r4, r5, r7, lr}
 8103b0c:	b084      	sub	sp, #16
 8103b0e:	af00      	add	r7, sp, #0
 8103b10:	60f8      	str	r0, [r7, #12]
 8103b12:	7239      	strb	r1, [r7, #8]
 8103b14:	607a      	str	r2, [r7, #4]
	: _M_payload(in_place, std::forward<_Args>(__args)...)
 8103b16:	68fc      	ldr	r4, [r7, #12]
 8103b18:	6878      	ldr	r0, [r7, #4]
 8103b1a:	f7ff ffda 	bl	8103ad2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8103b1e:	4603      	mov	r3, r0
 8103b20:	461a      	mov	r2, r3
 8103b22:	4629      	mov	r1, r5
 8103b24:	4620      	mov	r0, r4
 8103b26:	f7ff ffdf 	bl	8103ae8 <_ZNSt17_Optional_payloadI8SMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJRS0_EEESt10in_place_tDpOT_>
	{ }
 8103b2a:	68fb      	ldr	r3, [r7, #12]
 8103b2c:	4618      	mov	r0, r3
 8103b2e:	3710      	adds	r7, #16
 8103b30:	46bd      	mov	sp, r7
 8103b32:	bdb0      	pop	{r4, r5, r7, pc}

08103b34 <_ZNSt22_Optional_payload_baseI8SMessageEC1IJRS0_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8103b34:	b5b0      	push	{r4, r5, r7, lr}
 8103b36:	b084      	sub	sp, #16
 8103b38:	af00      	add	r7, sp, #0
 8103b3a:	60f8      	str	r0, [r7, #12]
 8103b3c:	7239      	strb	r1, [r7, #8]
 8103b3e:	607a      	str	r2, [r7, #4]
	: _M_payload(__tag, std::forward<_Args>(__args)...),
 8103b40:	68fc      	ldr	r4, [r7, #12]
 8103b42:	6878      	ldr	r0, [r7, #4]
 8103b44:	f7ff ffc5 	bl	8103ad2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8103b48:	4603      	mov	r3, r0
 8103b4a:	461a      	mov	r2, r3
 8103b4c:	4629      	mov	r1, r5
 8103b4e:	4620      	mov	r0, r4
 8103b50:	f000 f808 	bl	8103b64 <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1IJRS0_EEESt10in_place_tDpOT_>
	  _M_engaged(true)
 8103b54:	68fb      	ldr	r3, [r7, #12]
 8103b56:	2201      	movs	r2, #1
 8103b58:	771a      	strb	r2, [r3, #28]
	{ }
 8103b5a:	68fb      	ldr	r3, [r7, #12]
 8103b5c:	4618      	mov	r0, r3
 8103b5e:	3710      	adds	r7, #16
 8103b60:	46bd      	mov	sp, r7
 8103b62:	bdb0      	pop	{r4, r5, r7, pc}

08103b64 <_ZNSt22_Optional_payload_baseI8SMessageE8_StorageIS0_Lb1EEC1IJRS0_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8103b64:	b5b0      	push	{r4, r5, r7, lr}
 8103b66:	b084      	sub	sp, #16
 8103b68:	af00      	add	r7, sp, #0
 8103b6a:	60f8      	str	r0, [r7, #12]
 8103b6c:	7239      	strb	r1, [r7, #8]
 8103b6e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8103b70:	6878      	ldr	r0, [r7, #4]
 8103b72:	f7ff ffae 	bl	8103ad2 <_ZSt7forwardIR8SMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8103b76:	4602      	mov	r2, r0
 8103b78:	68fb      	ldr	r3, [r7, #12]
 8103b7a:	461c      	mov	r4, r3
 8103b7c:	4615      	mov	r5, r2
 8103b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103b82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8103b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    { }
 8103b8a:	68fb      	ldr	r3, [r7, #12]
 8103b8c:	4618      	mov	r0, r3
 8103b8e:	3710      	adds	r7, #16
 8103b90:	46bd      	mov	sp, r7
 8103b92:	bdb0      	pop	{r4, r5, r7, pc}

08103b94 <_Z41__static_initialization_and_destruction_0ii>:
 8103b94:	b580      	push	{r7, lr}
 8103b96:	b0c8      	sub	sp, #288	@ 0x120
 8103b98:	af04      	add	r7, sp, #16
 8103b9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103b9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8103ba2:	6018      	str	r0, [r3, #0]
 8103ba4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103ba8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8103bac:	6019      	str	r1, [r3, #0]
 8103bae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103bb2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8103bb6:	681b      	ldr	r3, [r3, #0]
 8103bb8:	2b01      	cmp	r3, #1
 8103bba:	f040 80d5 	bne.w	8103d68 <_Z41__static_initialization_and_destruction_0ii+0x1d4>
 8103bbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103bc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	f040 80cb 	bne.w	8103d68 <_Z41__static_initialization_and_destruction_0ii+0x1d4>
        
        IHKA_EVAPORATOR_TEMPERATURE_SENSOR = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR,
        IHKA_TEMPERATURE_SELECTOR = EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR,
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8103bd2:	f107 0314 	add.w	r3, r7, #20
 8103bd6:	22f0      	movs	r2, #240	@ 0xf0
 8103bd8:	2100      	movs	r1, #0
 8103bda:	4618      	mov	r0, r3
 8103bdc:	f020 fe52 	bl	8124884 <memset>
 8103be0:	4b6d      	ldr	r3, [pc, #436]	@ (8103d98 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8103be2:	61bb      	str	r3, [r7, #24]
 8103be4:	2301      	movs	r3, #1
 8103be6:	773b      	strb	r3, [r7, #28]
 8103be8:	2312      	movs	r3, #18
 8103bea:	f887 3020 	strb.w	r3, [r7, #32]
 8103bee:	2301      	movs	r3, #1
 8103bf0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8103bf4:	4b69      	ldr	r3, [pc, #420]	@ (8103d9c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8103bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8103bf8:	2301      	movs	r3, #1
 8103bfa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8103bfe:	2312      	movs	r3, #18
 8103c00:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8103c04:	2302      	movs	r3, #2
 8103c06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8103c0a:	4b65      	ldr	r3, [pc, #404]	@ (8103da0 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8103c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103c0e:	2301      	movs	r3, #1
 8103c10:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8103c14:	2312      	movs	r3, #18
 8103c16:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8103c1a:	2303      	movs	r3, #3
 8103c1c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8103c20:	4b60      	ldr	r3, [pc, #384]	@ (8103da4 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8103c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103c24:	2301      	movs	r3, #1
 8103c26:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8103c2a:	2312      	movs	r3, #18
 8103c2c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8103c30:	2304      	movs	r3, #4
 8103c32:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8103c36:	4b5c      	ldr	r3, [pc, #368]	@ (8103da8 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8103c38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8103c3a:	2301      	movs	r3, #1
 8103c3c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8103c40:	2312      	movs	r3, #18
 8103c42:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8103c46:	2305      	movs	r3, #5
 8103c48:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8103c4c:	4b57      	ldr	r3, [pc, #348]	@ (8103dac <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8103c4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8103c50:	2301      	movs	r3, #1
 8103c52:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8103c56:	2312      	movs	r3, #18
 8103c58:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8103c5c:	2306      	movs	r3, #6
 8103c5e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8103c62:	4b53      	ldr	r3, [pc, #332]	@ (8103db0 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8103c64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103c66:	2301      	movs	r3, #1
 8103c68:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8103c6c:	2312      	movs	r3, #18
 8103c6e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8103c72:	2307      	movs	r3, #7
 8103c74:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8103c78:	4b4e      	ldr	r3, [pc, #312]	@ (8103db4 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8103c7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8103c7e:	2301      	movs	r3, #1
 8103c80:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 8103c84:	2312      	movs	r3, #18
 8103c86:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 8103c8a:	2308      	movs	r3, #8
 8103c8c:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 8103c90:	f24d 130d 	movw	r3, #53517	@ 0xd10d
 8103c94:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 8103c98:	2360      	movs	r3, #96	@ 0x60
 8103c9a:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 8103c9e:	2309      	movs	r3, #9
 8103ca0:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8103ca4:	f24d 1307 	movw	r3, #53511	@ 0xd107
 8103ca8:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 8103cac:	2360      	movs	r3, #96	@ 0x60
 8103cae:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 8103cb2:	230a      	movs	r3, #10
 8103cb4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8103cb8:	f24d 1312 	movw	r3, #53522	@ 0xd112
 8103cbc:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
 8103cc0:	2360      	movs	r3, #96	@ 0x60
 8103cc2:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
 8103cc6:	230b      	movs	r3, #11
 8103cc8:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 8103ccc:	f24d 1306 	movw	r3, #53510	@ 0xd106
 8103cd0:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
 8103cd4:	2360      	movs	r3, #96	@ 0x60
 8103cd6:	f887 30d0 	strb.w	r3, [r7, #208]	@ 0xd0
 8103cda:	230c      	movs	r3, #12
 8103cdc:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 8103ce0:	f24d 131f 	movw	r3, #53535	@ 0xd11f
 8103ce4:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
 8103ce8:	2360      	movs	r3, #96	@ 0x60
 8103cea:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 8103cee:	230d      	movs	r3, #13
 8103cf0:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 8103cf4:	f64d 135c 	movw	r3, #55644	@ 0xd95c
 8103cf8:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
 8103cfc:	2378      	movs	r3, #120	@ 0x78
 8103cfe:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
 8103d02:	230e      	movs	r3, #14
 8103d04:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
 8103d08:	f64d 1377 	movw	r3, #55671	@ 0xd977
 8103d0c:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8103d10:	2378      	movs	r3, #120	@ 0x78
 8103d12:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
 8103d16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103d1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8103d1e:	f107 0214 	add.w	r2, r7, #20
 8103d22:	601a      	str	r2, [r3, #0]
 8103d24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8103d2c:	220f      	movs	r2, #15
 8103d2e:	605a      	str	r2, [r3, #4]
 8103d30:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8103d34:	4618      	mov	r0, r3
 8103d36:	f7fd fd07 	bl	8101748 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 8103d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103d3e:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8103d42:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8103d46:	9302      	str	r3, [sp, #8]
 8103d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8103d4c:	9301      	str	r3, [sp, #4]
 8103d4e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8103d52:	9300      	str	r3, [sp, #0]
 8103d54:	2300      	movs	r3, #0
 8103d56:	ca06      	ldmia	r2, {r1, r2}
 8103d58:	4817      	ldr	r0, [pc, #92]	@ (8103db8 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8103d5a:	f7fd fd0c 	bl	8101776 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 8103d5e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8103d62:	4618      	mov	r0, r3
 8103d64:	f7fd fcfc 	bl	8101760 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
 8103d68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103d6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	d10b      	bne.n	8103d8e <_Z41__static_initialization_and_destruction_0ii+0x1fa>
 8103d76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8103d7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8103d7e:	681b      	ldr	r3, [r3, #0]
 8103d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8103d84:	4293      	cmp	r3, r2
 8103d86:	d102      	bne.n	8103d8e <_Z41__static_initialization_and_destruction_0ii+0x1fa>
 8103d88:	480b      	ldr	r0, [pc, #44]	@ (8103db8 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8103d8a:	f7fe ffd9 	bl	8102d40 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
 8103d8e:	bf00      	nop
 8103d90:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8103d94:	46bd      	mov	sp, r7
 8103d96:	bd80      	pop	{r7, pc}
 8103d98:	44020102 	.word	0x44020102
 8103d9c:	48070102 	.word	0x48070102
 8103da0:	43000101 	.word	0x43000101
 8103da4:	46090101 	.word	0x46090101
 8103da8:	42040101 	.word	0x42040101
 8103dac:	42080102 	.word	0x42080102
 8103db0:	481a0102 	.word	0x481a0102
 8103db4:	4a290101 	.word	0x4a290101
 8103db8:	1000022c 	.word	0x1000022c

08103dbc <_GLOBAL__sub_I__ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
 8103dbc:	b580      	push	{r7, lr}
 8103dbe:	af00      	add	r7, sp, #0
 8103dc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8103dc4:	2001      	movs	r0, #1
 8103dc6:	f7ff fee5 	bl	8103b94 <_Z41__static_initialization_and_destruction_0ii>
 8103dca:	bd80      	pop	{r7, pc}

08103dcc <_GLOBAL__sub_D__ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>:
 8103dcc:	b580      	push	{r7, lr}
 8103dce:	af00      	add	r7, sp, #0
 8103dd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8103dd4:	2000      	movs	r0, #0
 8103dd6:	f7ff fedd 	bl	8103b94 <_Z41__static_initialization_and_destruction_0ii>
 8103dda:	bd80      	pop	{r7, pc}

08103ddc <_ZSt26__throw_bad_variant_accessPKc>:
  };

  // Must only be called with a string literal
  inline void
  __throw_bad_variant_access(const char* __what)
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 8103ddc:	b580      	push	{r7, lr}
 8103dde:	b082      	sub	sp, #8
 8103de0:	af00      	add	r7, sp, #0
 8103de2:	6078      	str	r0, [r7, #4]
 8103de4:	f01f fdfc 	bl	81239e0 <abort>

08103de8 <_ZSt26__throw_bad_variant_accessb>:

  inline void
  __throw_bad_variant_access(bool __valueless)
  {
 8103de8:	b580      	push	{r7, lr}
 8103dea:	b082      	sub	sp, #8
 8103dec:	af00      	add	r7, sp, #0
 8103dee:	4603      	mov	r3, r0
 8103df0:	71fb      	strb	r3, [r7, #7]
    if (__valueless) [[__unlikely__]]
 8103df2:	79fb      	ldrb	r3, [r7, #7]
 8103df4:	2b00      	cmp	r3, #0
 8103df6:	d003      	beq.n	8103e00 <_ZSt26__throw_bad_variant_accessb+0x18>
      __throw_bad_variant_access("std::get: variant is valueless");
 8103df8:	4805      	ldr	r0, [pc, #20]	@ (8103e10 <_ZSt26__throw_bad_variant_accessb+0x28>)
 8103dfa:	f7ff ffef 	bl	8103ddc <_ZSt26__throw_bad_variant_accessPKc>
    else
      __throw_bad_variant_access("std::get: wrong index for variant");
  }
 8103dfe:	e002      	b.n	8103e06 <_ZSt26__throw_bad_variant_accessb+0x1e>
      __throw_bad_variant_access("std::get: wrong index for variant");
 8103e00:	4804      	ldr	r0, [pc, #16]	@ (8103e14 <_ZSt26__throw_bad_variant_accessb+0x2c>)
 8103e02:	f7ff ffeb 	bl	8103ddc <_ZSt26__throw_bad_variant_accessPKc>
  }
 8103e06:	bf00      	nop
 8103e08:	3708      	adds	r7, #8
 8103e0a:	46bd      	mov	sp, r7
 8103e0c:	bd80      	pop	{r7, pc}
 8103e0e:	bf00      	nop
 8103e10:	08124de8 	.word	0x08124de8
 8103e14:	08124e08 	.word	0x08124e08

08103e18 <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 8103e18:	b580      	push	{r7, lr}
 8103e1a:	af00      	add	r7, sp, #0
 8103e1c:	f01f fde0 	bl	81239e0 <abort>

08103e20 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv>:

  // Return the index of _Tp in _Types, if it occurs exactly once.
  // Otherwise, return sizeof...(_Types).
  template<typename _Tp, typename... _Types>
    constexpr size_t
    __find_uniq_type_in_pack()
 8103e20:	b480      	push	{r7}
 8103e22:	b085      	sub	sp, #20
 8103e24:	af00      	add	r7, sp, #0
    {
      constexpr size_t __sz = sizeof...(_Types);
 8103e26:	2302      	movs	r3, #2
 8103e28:	607b      	str	r3, [r7, #4]
      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };
 8103e2a:	2300      	movs	r3, #0
 8103e2c:	703b      	strb	r3, [r7, #0]
 8103e2e:	2301      	movs	r3, #1
 8103e30:	707b      	strb	r3, [r7, #1]
      size_t __n = __sz;
 8103e32:	2302      	movs	r3, #2
 8103e34:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 8103e36:	2300      	movs	r3, #0
 8103e38:	60bb      	str	r3, [r7, #8]
 8103e3a:	e00f      	b.n	8103e5c <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x3c>
	{
	  if (__found[__i])
 8103e3c:	463a      	mov	r2, r7
 8103e3e:	68bb      	ldr	r3, [r7, #8]
 8103e40:	4413      	add	r3, r2
 8103e42:	781b      	ldrb	r3, [r3, #0]
 8103e44:	2b00      	cmp	r3, #0
 8103e46:	d006      	beq.n	8103e56 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x36>
	    {
	      if (__n < __sz) // more than one _Tp found
 8103e48:	68fb      	ldr	r3, [r7, #12]
 8103e4a:	2b01      	cmp	r3, #1
 8103e4c:	d801      	bhi.n	8103e52 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x32>
		return __sz;
 8103e4e:	2302      	movs	r3, #2
 8103e50:	e008      	b.n	8103e64 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x44>
	      __n = __i;
 8103e52:	68bb      	ldr	r3, [r7, #8]
 8103e54:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 8103e56:	68bb      	ldr	r3, [r7, #8]
 8103e58:	3301      	adds	r3, #1
 8103e5a:	60bb      	str	r3, [r7, #8]
 8103e5c:	68bb      	ldr	r3, [r7, #8]
 8103e5e:	2b01      	cmp	r3, #1
 8103e60:	d9ec      	bls.n	8103e3c <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv+0x1c>
	    }
	}
      return __n;
 8103e62:	68fb      	ldr	r3, [r7, #12]
    }
 8103e64:	4618      	mov	r0, r3
 8103e66:	3714      	adds	r7, #20
 8103e68:	46bd      	mov	sp, r7
 8103e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e6e:	4770      	bx	lr

08103e70 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv>:
    __find_uniq_type_in_pack()
 8103e70:	b480      	push	{r7}
 8103e72:	b085      	sub	sp, #20
 8103e74:	af00      	add	r7, sp, #0
      constexpr size_t __sz = sizeof...(_Types);
 8103e76:	2302      	movs	r3, #2
 8103e78:	607b      	str	r3, [r7, #4]
      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };
 8103e7a:	2301      	movs	r3, #1
 8103e7c:	703b      	strb	r3, [r7, #0]
 8103e7e:	2300      	movs	r3, #0
 8103e80:	707b      	strb	r3, [r7, #1]
      size_t __n = __sz;
 8103e82:	2302      	movs	r3, #2
 8103e84:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 8103e86:	2300      	movs	r3, #0
 8103e88:	60bb      	str	r3, [r7, #8]
 8103e8a:	e00f      	b.n	8103eac <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x3c>
	  if (__found[__i])
 8103e8c:	463a      	mov	r2, r7
 8103e8e:	68bb      	ldr	r3, [r7, #8]
 8103e90:	4413      	add	r3, r2
 8103e92:	781b      	ldrb	r3, [r3, #0]
 8103e94:	2b00      	cmp	r3, #0
 8103e96:	d006      	beq.n	8103ea6 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x36>
	      if (__n < __sz) // more than one _Tp found
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	2b01      	cmp	r3, #1
 8103e9c:	d801      	bhi.n	8103ea2 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x32>
		return __sz;
 8103e9e:	2302      	movs	r3, #2
 8103ea0:	e008      	b.n	8103eb4 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x44>
	      __n = __i;
 8103ea2:	68bb      	ldr	r3, [r7, #8]
 8103ea4:	60fb      	str	r3, [r7, #12]
      for (size_t __i = 0; __i < __sz; ++__i)
 8103ea6:	68bb      	ldr	r3, [r7, #8]
 8103ea8:	3301      	adds	r3, #1
 8103eaa:	60bb      	str	r3, [r7, #8]
 8103eac:	68bb      	ldr	r3, [r7, #8]
 8103eae:	2b01      	cmp	r3, #1
 8103eb0:	d9ec      	bls.n	8103e8c <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv+0x1c>
      return __n;
 8103eb2:	68fb      	ldr	r3, [r7, #12]
    }
 8103eb4:	4618      	mov	r0, r3
 8103eb6:	3714      	adds	r7, #20
 8103eb8:	46bd      	mov	sp, r7
 8103eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ebe:	4770      	bx	lr

08103ec0 <_ZN17ConnectionManager8instanceEv>:
        EVENT_DATA_REQUESTED,
        EVENT_NO_DATA_TO_REQUEST,
        EVENT_TCP_READ_DATA_BY_ID_RECEIVED
	};

    static ConnectionManager& instance()
 8103ec0:	b580      	push	{r7, lr}
 8103ec2:	af00      	add	r7, sp, #0
    {
        static ConnectionManager connMgrInstance;
 8103ec4:	4b10      	ldr	r3, [pc, #64]	@ (8103f08 <_ZN17ConnectionManager8instanceEv+0x48>)
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	f3bf 8f5b 	dmb	ish
 8103ecc:	f003 0301 	and.w	r3, r3, #1
 8103ed0:	2b00      	cmp	r3, #0
 8103ed2:	bf0c      	ite	eq
 8103ed4:	2301      	moveq	r3, #1
 8103ed6:	2300      	movne	r3, #0
 8103ed8:	b2db      	uxtb	r3, r3
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d010      	beq.n	8103f00 <_ZN17ConnectionManager8instanceEv+0x40>
 8103ede:	480a      	ldr	r0, [pc, #40]	@ (8103f08 <_ZN17ConnectionManager8instanceEv+0x48>)
 8103ee0:	f01f fb4c 	bl	812357c <__cxa_guard_acquire>
 8103ee4:	4603      	mov	r3, r0
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	bf14      	ite	ne
 8103eea:	2301      	movne	r3, #1
 8103eec:	2300      	moveq	r3, #0
 8103eee:	b2db      	uxtb	r3, r3
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d005      	beq.n	8103f00 <_ZN17ConnectionManager8instanceEv+0x40>
 8103ef4:	4805      	ldr	r0, [pc, #20]	@ (8103f0c <_ZN17ConnectionManager8instanceEv+0x4c>)
 8103ef6:	f000 f80b 	bl	8103f10 <_ZN17ConnectionManagerC1Ev>
 8103efa:	4803      	ldr	r0, [pc, #12]	@ (8103f08 <_ZN17ConnectionManager8instanceEv+0x48>)
 8103efc:	f01f fb4a 	bl	8123594 <__cxa_guard_release>
        return connMgrInstance;
 8103f00:	4b02      	ldr	r3, [pc, #8]	@ (8103f0c <_ZN17ConnectionManager8instanceEv+0x4c>)
    }
 8103f02:	4618      	mov	r0, r3
 8103f04:	bd80      	pop	{r7, pc}
 8103f06:	bf00      	nop
 8103f08:	10000274 	.word	0x10000274
 8103f0c:	10000264 	.word	0x10000264

08103f10 <_ZN17ConnectionManagerC1Ev>:

    void processUdpDicovery();

private:

    ConnectionManager(){};
 8103f10:	b480      	push	{r7}
 8103f12:	b083      	sub	sp, #12
 8103f14:	af00      	add	r7, sp, #0
 8103f16:	6078      	str	r0, [r7, #4]
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	2200      	movs	r2, #0
 8103f1c:	605a      	str	r2, [r3, #4]
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	2200      	movs	r2, #0
 8103f22:	609a      	str	r2, [r3, #8]
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	22ff      	movs	r2, #255	@ 0xff
 8103f28:	731a      	strb	r2, [r3, #12]
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	2200      	movs	r2, #0
 8103f2e:	735a      	strb	r2, [r3, #13]
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	4618      	mov	r0, r3
 8103f34:	370c      	adds	r7, #12
 8103f36:	46bd      	mov	sp, r7
 8103f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f3c:	4770      	bx	lr

08103f3e <tcpRecvCb>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t connectionEventsQueue;

extern "C" err_t tcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8103f3e:	b580      	push	{r7, lr}
 8103f40:	b088      	sub	sp, #32
 8103f42:	af02      	add	r7, sp, #8
 8103f44:	60f8      	str	r0, [r7, #12]
 8103f46:	60b9      	str	r1, [r7, #8]
 8103f48:	607a      	str	r2, [r7, #4]
 8103f4a:	70fb      	strb	r3, [r7, #3]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8103f4c:	f7ff ffb8 	bl	8103ec0 <_ZN17ConnectionManager8instanceEv>
 8103f50:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpRecvCb(arg, tpcb, p, err);
 8103f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8103f56:	9300      	str	r3, [sp, #0]
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	68ba      	ldr	r2, [r7, #8]
 8103f5c:	68f9      	ldr	r1, [r7, #12]
 8103f5e:	6978      	ldr	r0, [r7, #20]
 8103f60:	f000 fc80 	bl	8104864 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>
    return ERR_OK;
 8103f64:	2300      	movs	r3, #0
}
 8103f66:	4618      	mov	r0, r3
 8103f68:	3718      	adds	r7, #24
 8103f6a:	46bd      	mov	sp, r7
 8103f6c:	bd80      	pop	{r7, pc}

08103f6e <tcpConnectCb>:

extern "C" err_t tcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8103f6e:	b580      	push	{r7, lr}
 8103f70:	b086      	sub	sp, #24
 8103f72:	af00      	add	r7, sp, #0
 8103f74:	60f8      	str	r0, [r7, #12]
 8103f76:	60b9      	str	r1, [r7, #8]
 8103f78:	4613      	mov	r3, r2
 8103f7a:	71fb      	strb	r3, [r7, #7]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8103f7c:	f7ff ffa0 	bl	8103ec0 <_ZN17ConnectionManager8instanceEv>
 8103f80:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpConnectCb(arg, tpcb, err);
 8103f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8103f86:	68ba      	ldr	r2, [r7, #8]
 8103f88:	68f9      	ldr	r1, [r7, #12]
 8103f8a:	6978      	ldr	r0, [r7, #20]
 8103f8c:	f000 fd66 	bl	8104a5c <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba>
    return ERR_OK;
 8103f90:	2300      	movs	r3, #0
}
 8103f92:	4618      	mov	r0, r3
 8103f94:	3718      	adds	r7, #24
 8103f96:	46bd      	mov	sp, r7
 8103f98:	bd80      	pop	{r7, pc}

08103f9a <tcpErrCb>:

extern "C" void tcpErrCb(void *arg, err_t err)
{
 8103f9a:	b580      	push	{r7, lr}
 8103f9c:	b084      	sub	sp, #16
 8103f9e:	af00      	add	r7, sp, #0
 8103fa0:	6078      	str	r0, [r7, #4]
 8103fa2:	460b      	mov	r3, r1
 8103fa4:	70fb      	strb	r3, [r7, #3]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8103fa6:	f7ff ff8b 	bl	8103ec0 <_ZN17ConnectionManager8instanceEv>
 8103faa:	60f8      	str	r0, [r7, #12]
    connMgrInstance.HandleTcpErrCb(arg, err);
 8103fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8103fb0:	461a      	mov	r2, r3
 8103fb2:	6879      	ldr	r1, [r7, #4]
 8103fb4:	68f8      	ldr	r0, [r7, #12]
 8103fb6:	f000 fdaf 	bl	8104b18 <_ZN17ConnectionManager14HandleTcpErrCbEPva>
}
 8103fba:	bf00      	nop
 8103fbc:	3710      	adds	r7, #16
 8103fbe:	46bd      	mov	sp, r7
 8103fc0:	bd80      	pop	{r7, pc}

08103fc2 <udpRecvCb>:

extern "C" void udpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8103fc2:	b580      	push	{r7, lr}
 8103fc4:	b088      	sub	sp, #32
 8103fc6:	af02      	add	r7, sp, #8
 8103fc8:	60f8      	str	r0, [r7, #12]
 8103fca:	60b9      	str	r1, [r7, #8]
 8103fcc:	607a      	str	r2, [r7, #4]
 8103fce:	603b      	str	r3, [r7, #0]
    ConnectionManager& connMgrInstance = ConnectionManager::instance();
 8103fd0:	f7ff ff76 	bl	8103ec0 <_ZN17ConnectionManager8instanceEv>
 8103fd4:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleUdpRecvCb(arg, pcb, p, addr, port);
 8103fd6:	8c3b      	ldrh	r3, [r7, #32]
 8103fd8:	9301      	str	r3, [sp, #4]
 8103fda:	683b      	ldr	r3, [r7, #0]
 8103fdc:	9300      	str	r3, [sp, #0]
 8103fde:	687b      	ldr	r3, [r7, #4]
 8103fe0:	68ba      	ldr	r2, [r7, #8]
 8103fe2:	68f9      	ldr	r1, [r7, #12]
 8103fe4:	6978      	ldr	r0, [r7, #20]
 8103fe6:	f000 f925 	bl	8104234 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>
}
 8103fea:	bf00      	nop
 8103fec:	3718      	adds	r7, #24
 8103fee:	46bd      	mov	sp, r7
 8103ff0:	bd80      	pop	{r7, pc}
	...

08103ff4 <_ZN17ConnectionManager8sendSSDPEv>:

bool ConnectionManager::sendSSDP()
{
 8103ff4:	b580      	push	{r7, lr}
 8103ff6:	b086      	sub	sp, #24
 8103ff8:	af00      	add	r7, sp, #0
 8103ffa:	6078      	str	r0, [r7, #4]
    constexpr const char *ssdpRequest =
 8103ffc:	4b23      	ldr	r3, [pc, #140]	@ (810408c <_ZN17ConnectionManager8sendSSDPEv+0x98>)
 8103ffe:	617b      	str	r3, [r7, #20]

    ip_addr_t multicastIp;
    struct pbuf *p;
    
    // Set the multicast address for SSDP
    ipaddr_aton(SSDP_MULTICAST_IP, &multicastIp);
 8104000:	f107 030c 	add.w	r3, r7, #12
 8104004:	4619      	mov	r1, r3
 8104006:	4822      	ldr	r0, [pc, #136]	@ (8104090 <_ZN17ConnectionManager8sendSSDPEv+0x9c>)
 8104008:	f015 fbf2 	bl	81197f0 <ip4addr_aton>

    // Allocate buffer for SSDP data
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(ssdpRequest), PBUF_RAM);
 810400c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8104010:	215e      	movs	r1, #94	@ 0x5e
 8104012:	2036      	movs	r0, #54	@ 0x36
 8104014:	f017 fc98 	bl	811b948 <pbuf_alloc>
 8104018:	6138      	str	r0, [r7, #16]
    if (!p)
 810401a:	693b      	ldr	r3, [r7, #16]
 810401c:	2b00      	cmp	r3, #0
 810401e:	d108      	bne.n	8104032 <_ZN17ConnectionManager8sendSSDPEv+0x3e>
    {
        LOG_DEBUG("Failed to allocate pbuf for SSDP.");
 8104020:	f7fc ffae 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104024:	4603      	mov	r3, r0
 8104026:	491b      	ldr	r1, [pc, #108]	@ (8104094 <_ZN17ConnectionManager8sendSSDPEv+0xa0>)
 8104028:	4618      	mov	r0, r3
 810402a:	f7fc ffd1 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 810402e:	2300      	movs	r3, #0
 8104030:	e027      	b.n	8104082 <_ZN17ConnectionManager8sendSSDPEv+0x8e>
    }

    // Copy data to the buffer
    memcpy(p->payload, ssdpRequest, strlen(ssdpRequest));
 8104032:	693b      	ldr	r3, [r7, #16]
 8104034:	685b      	ldr	r3, [r3, #4]
 8104036:	225e      	movs	r2, #94	@ 0x5e
 8104038:	4914      	ldr	r1, [pc, #80]	@ (810408c <_ZN17ConnectionManager8sendSSDPEv+0x98>)
 810403a:	4618      	mov	r0, r3
 810403c:	f020 fd71 	bl	8124b22 <memcpy>

    // Send SSDP
    if (udp_sendto(udp_pcb, p, &multicastIp, 1900) != ERR_OK)
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	6858      	ldr	r0, [r3, #4]
 8104044:	f107 020c 	add.w	r2, r7, #12
 8104048:	f240 736c 	movw	r3, #1900	@ 0x76c
 810404c:	6939      	ldr	r1, [r7, #16]
 810404e:	f01e ffa9 	bl	8122fa4 <udp_sendto>
 8104052:	4603      	mov	r3, r0
 8104054:	2b00      	cmp	r3, #0
 8104056:	bf14      	ite	ne
 8104058:	2301      	movne	r3, #1
 810405a:	2300      	moveq	r3, #0
 810405c:	b2db      	uxtb	r3, r3
 810405e:	2b00      	cmp	r3, #0
 8104060:	d00b      	beq.n	810407a <_ZN17ConnectionManager8sendSSDPEv+0x86>
    {
        LOG_DEBUG("Failed to send SSDP request.");
 8104062:	f7fc ff8d 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104066:	4603      	mov	r3, r0
 8104068:	490b      	ldr	r1, [pc, #44]	@ (8104098 <_ZN17ConnectionManager8sendSSDPEv+0xa4>)
 810406a:	4618      	mov	r0, r3
 810406c:	f7fc ffb0 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8104070:	6938      	ldr	r0, [r7, #16]
 8104072:	f017 ff4b 	bl	811bf0c <pbuf_free>
        return false;
 8104076:	2300      	movs	r3, #0
 8104078:	e003      	b.n	8104082 <_ZN17ConnectionManager8sendSSDPEv+0x8e>
    }

    // Release the buffer
    pbuf_free(p);
 810407a:	6938      	ldr	r0, [r7, #16]
 810407c:	f017 ff46 	bl	811bf0c <pbuf_free>
    return true;
 8104080:	2301      	movs	r3, #1
}
 8104082:	4618      	mov	r0, r3
 8104084:	3718      	adds	r7, #24
 8104086:	46bd      	mov	sp, r7
 8104088:	bd80      	pop	{r7, pc}
 810408a:	bf00      	nop
 810408c:	08124e2c 	.word	0x08124e2c
 8104090:	08124e8c 	.word	0x08124e8c
 8104094:	08124e9c 	.word	0x08124e9c
 8104098:	08124ec0 	.word	0x08124ec0

0810409c <_ZN17ConnectionManager7sendSLPEv>:

bool ConnectionManager::sendSLP()
{
 810409c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810409e:	b08f      	sub	sp, #60	@ 0x3c
 81040a0:	af00      	add	r7, sp, #0
 81040a2:	6078      	str	r0, [r7, #4]
    uint8_t slpRequest[36] =
 81040a4:	4b30      	ldr	r3, [pc, #192]	@ (8104168 <_ZN17ConnectionManager7sendSLPEv+0xcc>)
 81040a6:	f107 0410 	add.w	r4, r7, #16
 81040aa:	461d      	mov	r5, r3
 81040ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81040ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81040b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81040b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81040b4:	682b      	ldr	r3, [r5, #0]
 81040b6:	8023      	strh	r3, [r4, #0]
 81040b8:	2300      	movs	r3, #0
 81040ba:	867b      	strh	r3, [r7, #50]	@ 0x32
    };
    ip_addr_t broadcastIp;
    struct pbuf *p;

    // Set the broadcast address
    ipaddr_aton(BROADCAST_IP, &broadcastIp);
 81040bc:	f107 030c 	add.w	r3, r7, #12
 81040c0:	4619      	mov	r1, r3
 81040c2:	482a      	ldr	r0, [pc, #168]	@ (810416c <_ZN17ConnectionManager7sendSLPEv+0xd0>)
 81040c4:	f015 fb94 	bl	81197f0 <ip4addr_aton>

    // Allocate buffer for SLP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(slpRequest), PBUF_RAM);
 81040c8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81040cc:	2124      	movs	r1, #36	@ 0x24
 81040ce:	2036      	movs	r0, #54	@ 0x36
 81040d0:	f017 fc3a 	bl	811b948 <pbuf_alloc>
 81040d4:	6378      	str	r0, [r7, #52]	@ 0x34
    if (!p)
 81040d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81040d8:	2b00      	cmp	r3, #0
 81040da:	d108      	bne.n	81040ee <_ZN17ConnectionManager7sendSLPEv+0x52>
    {
        LOG_DEBUG("Failed to allocate pbuf for SLP.");
 81040dc:	f7fc ff50 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81040e0:	4603      	mov	r3, r0
 81040e2:	4923      	ldr	r1, [pc, #140]	@ (8104170 <_ZN17ConnectionManager7sendSLPEv+0xd4>)
 81040e4:	4618      	mov	r0, r3
 81040e6:	f7fc ff73 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 81040ea:	2300      	movs	r3, #0
 81040ec:	e037      	b.n	810415e <_ZN17ConnectionManager7sendSLPEv+0xc2>
    }

    // Copy data to the buffer
    memcpy(p->payload, slpRequest, sizeof(slpRequest));
 81040ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81040f0:	685b      	ldr	r3, [r3, #4]
 81040f2:	f107 0410 	add.w	r4, r7, #16
 81040f6:	469c      	mov	ip, r3
 81040f8:	f104 0e20 	add.w	lr, r4, #32
 81040fc:	4665      	mov	r5, ip
 81040fe:	4626      	mov	r6, r4
 8104100:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8104102:	6028      	str	r0, [r5, #0]
 8104104:	6069      	str	r1, [r5, #4]
 8104106:	60aa      	str	r2, [r5, #8]
 8104108:	60eb      	str	r3, [r5, #12]
 810410a:	3410      	adds	r4, #16
 810410c:	f10c 0c10 	add.w	ip, ip, #16
 8104110:	4574      	cmp	r4, lr
 8104112:	d1f3      	bne.n	81040fc <_ZN17ConnectionManager7sendSLPEv+0x60>
 8104114:	4663      	mov	r3, ip
 8104116:	4622      	mov	r2, r4
 8104118:	6810      	ldr	r0, [r2, #0]
 810411a:	6018      	str	r0, [r3, #0]

    // Send SLP
    if (udp_sendto(udp_pcb, p, &broadcastIp, SLP_PORT) != ERR_OK)
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	6858      	ldr	r0, [r3, #4]
 8104120:	f107 020c 	add.w	r2, r7, #12
 8104124:	f240 13ab 	movw	r3, #427	@ 0x1ab
 8104128:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810412a:	f01e ff3b 	bl	8122fa4 <udp_sendto>
 810412e:	4603      	mov	r3, r0
 8104130:	2b00      	cmp	r3, #0
 8104132:	bf14      	ite	ne
 8104134:	2301      	movne	r3, #1
 8104136:	2300      	moveq	r3, #0
 8104138:	b2db      	uxtb	r3, r3
 810413a:	2b00      	cmp	r3, #0
 810413c:	d00b      	beq.n	8104156 <_ZN17ConnectionManager7sendSLPEv+0xba>
    {
        LOG_DEBUG("Failed to send SLP request.");
 810413e:	f7fc ff1f 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104142:	4603      	mov	r3, r0
 8104144:	490b      	ldr	r1, [pc, #44]	@ (8104174 <_ZN17ConnectionManager7sendSLPEv+0xd8>)
 8104146:	4618      	mov	r0, r3
 8104148:	f7fc ff42 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 810414c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810414e:	f017 fedd 	bl	811bf0c <pbuf_free>
        return false;
 8104152:	2300      	movs	r3, #0
 8104154:	e003      	b.n	810415e <_ZN17ConnectionManager7sendSLPEv+0xc2>
    }

    // Release the buffer
    pbuf_free(p);
 8104156:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8104158:	f017 fed8 	bl	811bf0c <pbuf_free>
    return true;
 810415c:	2301      	movs	r3, #1
}
 810415e:	4618      	mov	r0, r3
 8104160:	373c      	adds	r7, #60	@ 0x3c
 8104162:	46bd      	mov	sp, r7
 8104164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8104166:	bf00      	nop
 8104168:	08124f30 	.word	0x08124f30
 810416c:	08124ee0 	.word	0x08124ee0
 8104170:	08124ef0 	.word	0x08124ef0
 8104174:	08124f14 	.word	0x08124f14

08104178 <_ZN17ConnectionManager12sendDoIPInitEv>:


bool ConnectionManager::sendDoIPInit()
{
 8104178:	b580      	push	{r7, lr}
 810417a:	b086      	sub	sp, #24
 810417c:	af00      	add	r7, sp, #0
 810417e:	6078      	str	r0, [r7, #4]
    const char doipRequest[] = "\x00\x00\x00\x00\x00\x11";
 8104180:	4a28      	ldr	r2, [pc, #160]	@ (8104224 <_ZN17ConnectionManager12sendDoIPInitEv+0xac>)
 8104182:	f107 030c 	add.w	r3, r7, #12
 8104186:	e892 0003 	ldmia.w	r2, {r0, r1}
 810418a:	6018      	str	r0, [r3, #0]
 810418c:	3304      	adds	r3, #4
 810418e:	8019      	strh	r1, [r3, #0]
 8104190:	3302      	adds	r3, #2
 8104192:	0c0a      	lsrs	r2, r1, #16
 8104194:	701a      	strb	r2, [r3, #0]
    ip_addr_t broadcastIp;
    struct pbuf *p;

    // Set the broadcast address for DoIP
    ipaddr_aton(BROADCAST_IP, &broadcastIp);
 8104196:	f107 0308 	add.w	r3, r7, #8
 810419a:	4619      	mov	r1, r3
 810419c:	4822      	ldr	r0, [pc, #136]	@ (8104228 <_ZN17ConnectionManager12sendDoIPInitEv+0xb0>)
 810419e:	f015 fb27 	bl	81197f0 <ip4addr_aton>

    // Allocate buffer for DoIP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(doipRequest) - 1, PBUF_RAM);
 81041a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81041a6:	2106      	movs	r1, #6
 81041a8:	2036      	movs	r0, #54	@ 0x36
 81041aa:	f017 fbcd 	bl	811b948 <pbuf_alloc>
 81041ae:	6178      	str	r0, [r7, #20]
    if (!p)
 81041b0:	697b      	ldr	r3, [r7, #20]
 81041b2:	2b00      	cmp	r3, #0
 81041b4:	d108      	bne.n	81041c8 <_ZN17ConnectionManager12sendDoIPInitEv+0x50>
    {
        LOG_DEBUG("Failed to allocate pbuf for DoIP init.");
 81041b6:	f7fc fee3 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81041ba:	4603      	mov	r3, r0
 81041bc:	491b      	ldr	r1, [pc, #108]	@ (810422c <_ZN17ConnectionManager12sendDoIPInitEv+0xb4>)
 81041be:	4618      	mov	r0, r3
 81041c0:	f7fc ff06 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 81041c4:	2300      	movs	r3, #0
 81041c6:	e028      	b.n	810421a <_ZN17ConnectionManager12sendDoIPInitEv+0xa2>
    }

    // Copy data to the buffer
    memcpy(p->payload, doipRequest, sizeof(doipRequest) - 1);
 81041c8:	697b      	ldr	r3, [r7, #20]
 81041ca:	685b      	ldr	r3, [r3, #4]
 81041cc:	f107 010c 	add.w	r1, r7, #12
 81041d0:	2206      	movs	r2, #6
 81041d2:	4618      	mov	r0, r3
 81041d4:	f020 fca5 	bl	8124b22 <memcpy>

    // Send DoIP
    if (udp_sendto(udp_pcb, p, &broadcastIp, UDP_PORT) != ERR_OK)
 81041d8:	687b      	ldr	r3, [r7, #4]
 81041da:	6858      	ldr	r0, [r3, #4]
 81041dc:	f107 0208 	add.w	r2, r7, #8
 81041e0:	f641 239b 	movw	r3, #6811	@ 0x1a9b
 81041e4:	6979      	ldr	r1, [r7, #20]
 81041e6:	f01e fedd 	bl	8122fa4 <udp_sendto>
 81041ea:	4603      	mov	r3, r0
 81041ec:	2b00      	cmp	r3, #0
 81041ee:	bf14      	ite	ne
 81041f0:	2301      	movne	r3, #1
 81041f2:	2300      	moveq	r3, #0
 81041f4:	b2db      	uxtb	r3, r3
 81041f6:	2b00      	cmp	r3, #0
 81041f8:	d00b      	beq.n	8104212 <_ZN17ConnectionManager12sendDoIPInitEv+0x9a>
    {
        LOG_DEBUG("Failed to send DoIP init request.");
 81041fa:	f7fc fec1 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81041fe:	4603      	mov	r3, r0
 8104200:	490b      	ldr	r1, [pc, #44]	@ (8104230 <_ZN17ConnectionManager12sendDoIPInitEv+0xb8>)
 8104202:	4618      	mov	r0, r3
 8104204:	f7fc fee4 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8104208:	6978      	ldr	r0, [r7, #20]
 810420a:	f017 fe7f 	bl	811bf0c <pbuf_free>
        return false;
 810420e:	2300      	movs	r3, #0
 8104210:	e003      	b.n	810421a <_ZN17ConnectionManager12sendDoIPInitEv+0xa2>
    }

    // Release the buffer
    pbuf_free(p);
 8104212:	6978      	ldr	r0, [r7, #20]
 8104214:	f017 fe7a 	bl	811bf0c <pbuf_free>
    return true;
 8104218:	2301      	movs	r3, #1
}
 810421a:	4618      	mov	r0, r3
 810421c:	3718      	adds	r7, #24
 810421e:	46bd      	mov	sp, r7
 8104220:	bd80      	pop	{r7, pc}
 8104222:	bf00      	nop
 8104224:	08124fa0 	.word	0x08124fa0
 8104228:	08124ee0 	.word	0x08124ee0
 810422c:	08124f54 	.word	0x08124f54
 8104230:	08124f7c 	.word	0x08124f7c

08104234 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>:

void ConnectionManager::HandleUdpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8104234:	b590      	push	{r4, r7, lr}
 8104236:	b0a5      	sub	sp, #148	@ 0x94
 8104238:	af00      	add	r7, sp, #0
 810423a:	60f8      	str	r0, [r7, #12]
 810423c:	60b9      	str	r1, [r7, #8]
 810423e:	607a      	str	r2, [r7, #4]
 8104240:	603b      	str	r3, [r7, #0]
    if (!p)
 8104242:	683b      	ldr	r3, [r7, #0]
 8104244:	2b00      	cmp	r3, #0
 8104246:	d107      	bne.n	8104258 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x24>
    {
        LOG_DEBUG("No data received, connection might be closed.");
 8104248:	f7fc fe9a 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810424c:	4603      	mov	r3, r0
 810424e:	499f      	ldr	r1, [pc, #636]	@ (81044cc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x298>)
 8104250:	4618      	mov	r0, r3
 8104252:	f7fc febd 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>

        return;
 8104256:	e1ca      	b.n	81045ee <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
    }

    LOG_DEBUG("Received UDP message from %s:%d", ipaddr_ntoa(addr), port);
 8104258:	f7fc fe92 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810425c:	4604      	mov	r4, r0
 810425e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8104262:	f015 fbef 	bl	8119a44 <ip4addr_ntoa>
 8104266:	4602      	mov	r2, r0
 8104268:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 810426c:	4998      	ldr	r1, [pc, #608]	@ (81044d0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x29c>)
 810426e:	4620      	mov	r0, r4
 8104270:	f7fc feae 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>

    // Validate payload length
    if (p->len < 6)
 8104274:	683b      	ldr	r3, [r7, #0]
 8104276:	895b      	ldrh	r3, [r3, #10]
 8104278:	2b05      	cmp	r3, #5
 810427a:	d80b      	bhi.n	8104294 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x60>
    {
        LOG_DEBUG("Payload too short to process (length: %d bytes).", p->len);
 810427c:	f7fc fe80 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104280:	683b      	ldr	r3, [r7, #0]
 8104282:	895b      	ldrh	r3, [r3, #10]
 8104284:	461a      	mov	r2, r3
 8104286:	4993      	ldr	r1, [pc, #588]	@ (81044d4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2a0>)
 8104288:	f7fc fea2 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 810428c:	6838      	ldr	r0, [r7, #0]
 810428e:	f017 fe3d 	bl	811bf0c <pbuf_free>
        return;
 8104292:	e1ac      	b.n	81045ee <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
    }

    // Cast payload to a uint8_t array for easier processing
    uint8_t *payload = (uint8_t *)p->payload;
 8104294:	683b      	ldr	r3, [r7, #0]
 8104296:	685b      	ldr	r3, [r3, #4]
 8104298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    // Validate frame type based on first 4 bytes (we expected a specific DoIP identification frame)
    if (!(payload[0] == 0x00 && payload[1] == 0x00 && payload[2] == 0x00 && payload[3] == 0x32))
 810429c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81042a0:	781b      	ldrb	r3, [r3, #0]
 81042a2:	2b00      	cmp	r3, #0
 81042a4:	d111      	bne.n	81042ca <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x96>
 81042a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81042aa:	3301      	adds	r3, #1
 81042ac:	781b      	ldrb	r3, [r3, #0]
 81042ae:	2b00      	cmp	r3, #0
 81042b0:	d10b      	bne.n	81042ca <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x96>
 81042b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81042b6:	3302      	adds	r3, #2
 81042b8:	781b      	ldrb	r3, [r3, #0]
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d105      	bne.n	81042ca <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x96>
 81042be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81042c2:	3303      	adds	r3, #3
 81042c4:	781b      	ldrb	r3, [r3, #0]
 81042c6:	2b32      	cmp	r3, #50	@ 0x32
 81042c8:	d00a      	beq.n	81042e0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0xac>
    {
        LOG_DEBUG("Unexpected frame type received, ignoring.");
 81042ca:	f7fc fe59 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81042ce:	4603      	mov	r3, r0
 81042d0:	4981      	ldr	r1, [pc, #516]	@ (81044d8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2a4>)
 81042d2:	4618      	mov	r0, r3
 81042d4:	f7fc fe7c 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 81042d8:	6838      	ldr	r0, [r7, #0]
 81042da:	f017 fe17 	bl	811bf0c <pbuf_free>
        return;
 81042de:	e186      	b.n	81045ee <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
    }

    // Extract length (first 4 bytes) and validate against p->len
    uint32_t dataLength = (payload[0] << 24) | (payload[1] << 16) | (payload[2] << 8) | payload[3];
 81042e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81042e4:	781b      	ldrb	r3, [r3, #0]
 81042e6:	061a      	lsls	r2, r3, #24
 81042e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81042ec:	3301      	adds	r3, #1
 81042ee:	781b      	ldrb	r3, [r3, #0]
 81042f0:	041b      	lsls	r3, r3, #16
 81042f2:	431a      	orrs	r2, r3
 81042f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81042f8:	3302      	adds	r3, #2
 81042fa:	781b      	ldrb	r3, [r3, #0]
 81042fc:	021b      	lsls	r3, r3, #8
 81042fe:	4313      	orrs	r3, r2
 8104300:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8104304:	3203      	adds	r2, #3
 8104306:	7812      	ldrb	r2, [r2, #0]
 8104308:	4313      	orrs	r3, r2
 810430a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    // 6 bytes for header (length + type)
    if (dataLength + 6 > p->len)
 810430e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8104312:	3306      	adds	r3, #6
 8104314:	683a      	ldr	r2, [r7, #0]
 8104316:	8952      	ldrh	r2, [r2, #10]
 8104318:	4293      	cmp	r3, r2
 810431a:	d90c      	bls.n	8104336 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x102>
    {
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", dataLength, p->len);
 810431c:	f7fc fe30 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104320:	683b      	ldr	r3, [r7, #0]
 8104322:	895b      	ldrh	r3, [r3, #10]
 8104324:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8104328:	496c      	ldr	r1, [pc, #432]	@ (81044dc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2a8>)
 810432a:	f7fc fe51 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 810432e:	6838      	ldr	r0, [r7, #0]
 8104330:	f017 fdec 	bl	811bf0c <pbuf_free>
        return;
 8104334:	e15b      	b.n	81045ee <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
    }

    // Process diagnostic data if available
    if (p->len > 14)
 8104336:	683b      	ldr	r3, [r7, #0]
 8104338:	895b      	ldrh	r3, [r3, #10]
 810433a:	2b0e      	cmp	r3, #14
 810433c:	f240 814c 	bls.w	81045d8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3a4>
    {
        uint8_t *diagnosticData = &payload[14];
 8104340:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8104344:	330e      	adds	r3, #14
 8104346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        size_t diagnosticDataLen = p->len - 14;
 810434a:	683b      	ldr	r3, [r7, #0]
 810434c:	895b      	ldrh	r3, [r3, #10]
 810434e:	3b0e      	subs	r3, #14
 8104350:	67fb      	str	r3, [r7, #124]	@ 0x7c

        // Search for MAC and VIN keywords
        char *macStart = (char *)strstr((char *)diagnosticData, "MAC");
 8104352:	4963      	ldr	r1, [pc, #396]	@ (81044e0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2ac>)
 8104354:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8104358:	f020 faaf 	bl	81248ba <strstr>
 810435c:	67b8      	str	r0, [r7, #120]	@ 0x78
        char *vinStart = (char *)strstr((char *)diagnosticData, "VIN");
 810435e:	4961      	ldr	r1, [pc, #388]	@ (81044e4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2b0>)
 8104360:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8104364:	f020 faa9 	bl	81248ba <strstr>
 8104368:	6778      	str	r0, [r7, #116]	@ 0x74

        if (macStart && vinStart)
 810436a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810436c:	2b00      	cmp	r3, #0
 810436e:	f000 812b 	beq.w	81045c8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x394>
 8104372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8104374:	2b00      	cmp	r3, #0
 8104376:	f000 8127 	beq.w	81045c8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x394>
        {
            macStart += strlen("MAC");
 810437a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810437c:	3303      	adds	r3, #3
 810437e:	67bb      	str	r3, [r7, #120]	@ 0x78
            vinStart += strlen("VIN");
 8104380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8104382:	3303      	adds	r3, #3
 8104384:	677b      	str	r3, [r7, #116]	@ 0x74

            // Safely extract MAC Address (12 characters)
            if (macStart + 12 <= (char *)diagnosticData + diagnosticDataLen)
 8104386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8104388:	f103 020c 	add.w	r2, r3, #12
 810438c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8104390:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8104392:	440b      	add	r3, r1
 8104394:	429a      	cmp	r2, r3
 8104396:	f200 80af 	bhi.w	81044f8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2c4>
            {
                char macAddressStr[13] = {0};
 810439a:	2300      	movs	r3, #0
 810439c:	663b      	str	r3, [r7, #96]	@ 0x60
 810439e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 81043a2:	2200      	movs	r2, #0
 81043a4:	601a      	str	r2, [r3, #0]
 81043a6:	605a      	str	r2, [r3, #4]
 81043a8:	721a      	strb	r2, [r3, #8]
                strncpy(macAddressStr, macStart, 12);
 81043aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 81043ae:	220c      	movs	r2, #12
 81043b0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 81043b2:	4618      	mov	r0, r3
 81043b4:	f020 fa6e 	bl	8124894 <strncpy>

                LOG_DEBUG("Extracted MAC address: %s", macAddressStr);
 81043b8:	f7fc fde2 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81043bc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 81043c0:	461a      	mov	r2, r3
 81043c2:	4949      	ldr	r1, [pc, #292]	@ (81044e8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2b4>)
 81043c4:	f7fc fe04 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>

                uint8_t ecuMac[6] = {0};
 81043c8:	2300      	movs	r3, #0
 81043ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 81043cc:	2300      	movs	r3, #0
 81043ce:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                for (int i = 0; i < 6; i++)
 81043d2:	2300      	movs	r3, #0
 81043d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81043d8:	e046      	b.n	8104468 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x234>
                {
                    char byteStr[3] = { macAddressStr[i * 2], macAddressStr[i * 2 + 1], '\0' };
 81043da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81043de:	2100      	movs	r1, #0
 81043e0:	460a      	mov	r2, r1
 81043e2:	801a      	strh	r2, [r3, #0]
 81043e4:	460a      	mov	r2, r1
 81043e6:	709a      	strb	r2, [r3, #2]
 81043e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 81043ec:	005b      	lsls	r3, r3, #1
 81043ee:	3390      	adds	r3, #144	@ 0x90
 81043f0:	443b      	add	r3, r7
 81043f2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 81043f6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 81043fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 81043fe:	005b      	lsls	r3, r3, #1
 8104400:	3301      	adds	r3, #1
 8104402:	3390      	adds	r3, #144	@ 0x90
 8104404:	443b      	add	r3, r7
 8104406:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 810440a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                    char *endPtr;
                    long byteValue = strtol(byteStr, &endPtr, 16);
 810440e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8104412:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8104416:	2210      	movs	r2, #16
 8104418:	4618      	mov	r0, r3
 810441a:	f01f fc5f 	bl	8123cdc <strtol>
 810441e:	6738      	str	r0, [r7, #112]	@ 0x70

                    if (*endPtr != '\0' || byteValue < 0 || byteValue > 0xFF)
 8104420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104422:	781b      	ldrb	r3, [r3, #0]
 8104424:	2b00      	cmp	r3, #0
 8104426:	d105      	bne.n	8104434 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x200>
 8104428:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810442a:	2b00      	cmp	r3, #0
 810442c:	db02      	blt.n	8104434 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x200>
 810442e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104430:	2bff      	cmp	r3, #255	@ 0xff
 8104432:	dd0b      	ble.n	810444c <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x218>
                    {
                        LOG_DEBUG("Failed to parse MAC address byte: %s", byteStr);
 8104434:	f7fc fda4 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104438:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 810443c:	461a      	mov	r2, r3
 810443e:	492b      	ldr	r1, [pc, #172]	@ (81044ec <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2b8>)
 8104440:	f7fc fdc6 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
                        pbuf_free(p);
 8104444:	6838      	ldr	r0, [r7, #0]
 8104446:	f017 fd61 	bl	811bf0c <pbuf_free>
 810444a:	e0d0      	b.n	81045ee <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
                        return;
                    }

                    ecuMac[i] = static_cast<uint8_t>(byteValue);
 810444c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810444e:	b2d9      	uxtb	r1, r3
 8104450:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8104454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8104458:	4413      	add	r3, r2
 810445a:	460a      	mov	r2, r1
 810445c:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < 6; i++)
 810445e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8104462:	3301      	adds	r3, #1
 8104464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8104468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810446c:	2b05      	cmp	r3, #5
 810446e:	ddb4      	ble.n	81043da <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1a6>
                }

                // Add a static ARP entry for ECU
                struct eth_addr ethMac;
                memcpy(ethMac.addr, ecuMac, 6);
 8104470:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8104474:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8104478:	e892 0003 	ldmia.w	r2, {r0, r1}
 810447c:	6018      	str	r0, [r3, #0]
 810447e:	3304      	adds	r3, #4
 8104480:	8019      	strh	r1, [r3, #0]
                if (etharp_add_static_entry(addr, &ethMac) == ERR_OK)
 8104482:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8104486:	4619      	mov	r1, r3
 8104488:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 810448c:	f013 fec0 	bl	8118210 <etharp_add_static_entry>
 8104490:	4603      	mov	r3, r0
 8104492:	2b00      	cmp	r3, #0
 8104494:	bf0c      	ite	eq
 8104496:	2301      	moveq	r3, #1
 8104498:	2300      	movne	r3, #0
 810449a:	b2db      	uxtb	r3, r3
 810449c:	2b00      	cmp	r3, #0
 810449e:	d00c      	beq.n	81044ba <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x286>
                {
                    LOG_DEBUG("ARP entry for ECU added successfully.");
 81044a0:	f7fc fd6e 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81044a4:	4603      	mov	r3, r0
 81044a6:	4912      	ldr	r1, [pc, #72]	@ (81044f0 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2bc>)
 81044a8:	4618      	mov	r0, r3
 81044aa:	f7fc fd91 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
                    ecu_ip_addr = *addr;
 81044ae:	68fb      	ldr	r3, [r7, #12]
 81044b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 81044b4:	6812      	ldr	r2, [r2, #0]
 81044b6:	601a      	str	r2, [r3, #0]
 81044b8:	e025      	b.n	8104506 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2d2>
                }
                else
                {
                    LOG_DEBUG("Failed to add ARP entry for ECU.");
 81044ba:	f7fc fd61 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81044be:	4603      	mov	r3, r0
 81044c0:	490c      	ldr	r1, [pc, #48]	@ (81044f4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2c0>)
 81044c2:	4618      	mov	r0, r3
 81044c4:	f7fc fd84 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 81044c8:	e01d      	b.n	8104506 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2d2>
 81044ca:	bf00      	nop
 81044cc:	08124fa8 	.word	0x08124fa8
 81044d0:	08124fd8 	.word	0x08124fd8
 81044d4:	08124ff8 	.word	0x08124ff8
 81044d8:	0812502c 	.word	0x0812502c
 81044dc:	08125058 	.word	0x08125058
 81044e0:	08125088 	.word	0x08125088
 81044e4:	0812508c 	.word	0x0812508c
 81044e8:	08125090 	.word	0x08125090
 81044ec:	081250ac 	.word	0x081250ac
 81044f0:	081250d4 	.word	0x081250d4
 81044f4:	081250fc 	.word	0x081250fc
                }
            }
            else
            {
                LOG_DEBUG("MAC address extraction exceeds data boundaries.");
 81044f8:	f7fc fd42 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81044fc:	4603      	mov	r3, r0
 81044fe:	493d      	ldr	r1, [pc, #244]	@ (81045f4 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3c0>)
 8104500:	4618      	mov	r0, r3
 8104502:	f7fc fd65 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
            }

            // Safely extract VIN (17 characters)
            if (vinStart + 17 <= (char *)diagnosticData + diagnosticDataLen)
 8104506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8104508:	f103 0211 	add.w	r2, r3, #17
 810450c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8104510:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8104512:	440b      	add	r3, r1
 8104514:	429a      	cmp	r2, r3
 8104516:	d84f      	bhi.n	81045b8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x384>
            {
                char vin[18] = {0};
 8104518:	2300      	movs	r3, #0
 810451a:	637b      	str	r3, [r7, #52]	@ 0x34
 810451c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8104520:	2200      	movs	r2, #0
 8104522:	601a      	str	r2, [r3, #0]
 8104524:	605a      	str	r2, [r3, #4]
 8104526:	609a      	str	r2, [r3, #8]
 8104528:	819a      	strh	r2, [r3, #12]
                strncpy(vin, vinStart, 17);
 810452a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810452e:	2211      	movs	r2, #17
 8104530:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8104532:	4618      	mov	r0, r3
 8104534:	f020 f9ae 	bl	8124894 <strncpy>
                LOG_DEBUG("Extracted VIN: %s", vin);
 8104538:	f7fc fd22 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810453c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8104540:	461a      	mov	r2, r3
 8104542:	492d      	ldr	r1, [pc, #180]	@ (81045f8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3c4>)
 8104544:	f7fc fd44 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>

                EConnectionEvent connEvent = EVENT_DISCOVERY_COMPLETED;
 8104548:	2302      	movs	r3, #2
 810454a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000)) != pdPASS)
 810454e:	4b2b      	ldr	r3, [pc, #172]	@ (81045fc <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3c8>)
 8104550:	6818      	ldr	r0, [r3, #0]
 8104552:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8104556:	2300      	movs	r3, #0
 8104558:	f242 7210 	movw	r2, #10000	@ 0x2710
 810455c:	f010 fae2 	bl	8114b24 <xQueueGenericSend>
 8104560:	4603      	mov	r3, r0
 8104562:	2b01      	cmp	r3, #1
 8104564:	bf14      	ite	ne
 8104566:	2301      	movne	r3, #1
 8104568:	2300      	moveq	r3, #0
 810456a:	b2db      	uxtb	r3, r3
 810456c:	2b00      	cmp	r3, #0
 810456e:	d009      	beq.n	8104584 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x350>
                {
                    //In this case do not notify app and just wait for another message from ecu to try on the next call
                    LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8104570:	f7fc fd06 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104574:	4603      	mov	r3, r0
 8104576:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 810457a:	4921      	ldr	r1, [pc, #132]	@ (8104600 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3cc>)
 810457c:	4618      	mov	r0, r3
 810457e:	f7fc fd27 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 8104582:	e034      	b.n	81045ee <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ba>
                    return;
                }
                
                SMessage msg;
                msg.event_type = EVENT_ECU_CONNECTION_INITIALISED;
 8104584:	2380      	movs	r3, #128	@ 0x80
 8104586:	753b      	strb	r3, [r7, #20]
                msg.event_sender = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8104588:	2303      	movs	r3, #3
 810458a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                msg.event_receiver = EVENT_CLIENT_FRONTEND;
 810458e:	2300      	movs	r3, #0
 8104590:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                strncpy(msg.message_data.ecu_connected_vin, vinStart, 17);
 8104594:	f107 0314 	add.w	r3, r7, #20
 8104598:	3304      	adds	r3, #4
 810459a:	2211      	movs	r2, #17
 810459c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 810459e:	4618      	mov	r0, r3
 81045a0:	f020 f978 	bl	8124894 <strncpy>
                xQueueSend(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(10000));
 81045a4:	4b17      	ldr	r3, [pc, #92]	@ (8104604 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3d0>)
 81045a6:	6818      	ldr	r0, [r3, #0]
 81045a8:	f107 0114 	add.w	r1, r7, #20
 81045ac:	2300      	movs	r3, #0
 81045ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 81045b2:	f010 fab7 	bl	8114b24 <xQueueGenericSend>
            }
            else
            {
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
            }
        }
 81045b6:	e017      	b.n	81045e8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3b4>
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
 81045b8:	f7fc fce2 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81045bc:	4603      	mov	r3, r0
 81045be:	4912      	ldr	r1, [pc, #72]	@ (8104608 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3d4>)
 81045c0:	4618      	mov	r0, r3
 81045c2:	f7fc fd05 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        }
 81045c6:	e00f      	b.n	81045e8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3b4>
        else
        {
            LOG_DEBUG("MAC or VIN markers not found in diagnostic data.");
 81045c8:	f7fc fcda 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81045cc:	4603      	mov	r3, r0
 81045ce:	490f      	ldr	r1, [pc, #60]	@ (810460c <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3d8>)
 81045d0:	4618      	mov	r0, r3
 81045d2:	f7fc fcfd 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 81045d6:	e007      	b.n	81045e8 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3b4>
        }
    }
    else
    {
        LOG_DEBUG("Payload too short to contain diagnostic data (length: %d bytes).", p->len);
 81045d8:	f7fc fcd2 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81045dc:	683b      	ldr	r3, [r7, #0]
 81045de:	895b      	ldrh	r3, [r3, #10]
 81045e0:	461a      	mov	r2, r3
 81045e2:	490b      	ldr	r1, [pc, #44]	@ (8104610 <_ZN17ConnectionManager15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3dc>)
 81045e4:	f7fc fcf4 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }

    // Free the received buffer
    pbuf_free(p);
 81045e8:	6838      	ldr	r0, [r7, #0]
 81045ea:	f017 fc8f 	bl	811bf0c <pbuf_free>
}
 81045ee:	3794      	adds	r7, #148	@ 0x94
 81045f0:	46bd      	mov	sp, r7
 81045f2:	bd90      	pop	{r4, r7, pc}
 81045f4:	08125120 	.word	0x08125120
 81045f8:	08125150 	.word	0x08125150
 81045fc:	10000294 	.word	0x10000294
 8104600:	08125164 	.word	0x08125164
 8104604:	100001cc 	.word	0x100001cc
 8104608:	081251a0 	.word	0x081251a0
 810460c:	081251c8 	.word	0x081251c8
 8104610:	081251fc 	.word	0x081251fc

08104614 <_ZN17ConnectionManager10udpConnectEv>:

void ConnectionManager::udpConnect()
{
 8104614:	b580      	push	{r7, lr}
 8104616:	b082      	sub	sp, #8
 8104618:	af00      	add	r7, sp, #0
 810461a:	6078      	str	r0, [r7, #4]
    udp_pcb = udp_new();
 810461c:	f01e ff62 	bl	81234e4 <udp_new>
 8104620:	4602      	mov	r2, r0
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	605a      	str	r2, [r3, #4]
    if (udp_pcb)
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	685b      	ldr	r3, [r3, #4]
 810462a:	2b00      	cmp	r3, #0
 810462c:	d00e      	beq.n	810464c <_ZN17ConnectionManager10udpConnectEv+0x38>
    {
        udp_bind(udp_pcb, IP_ADDR_ANY, 0);  // Bind PCB with any port
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	685b      	ldr	r3, [r3, #4]
 8104632:	2200      	movs	r2, #0
 8104634:	490b      	ldr	r1, [pc, #44]	@ (8104664 <_ZN17ConnectionManager10udpConnectEv+0x50>)
 8104636:	4618      	mov	r0, r3
 8104638:	f01e fe6a 	bl	8123310 <udp_bind>
        udp_recv(udp_pcb, udpRecvCb, NULL);  // Register the UDP receiver callback (listen for car info)
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	685b      	ldr	r3, [r3, #4]
 8104640:	2200      	movs	r2, #0
 8104642:	4909      	ldr	r1, [pc, #36]	@ (8104668 <_ZN17ConnectionManager10udpConnectEv+0x54>)
 8104644:	4618      	mov	r0, r3
 8104646:	f01e feeb 	bl	8123420 <udp_recv>
    }
    else
    {
        LOG_DEBUG("Failed to create UDP PCB.");
    }
}
 810464a:	e006      	b.n	810465a <_ZN17ConnectionManager10udpConnectEv+0x46>
        LOG_DEBUG("Failed to create UDP PCB.");
 810464c:	f7fc fc98 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104650:	4603      	mov	r3, r0
 8104652:	4906      	ldr	r1, [pc, #24]	@ (810466c <_ZN17ConnectionManager10udpConnectEv+0x58>)
 8104654:	4618      	mov	r0, r3
 8104656:	f7fc fcbb 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
}
 810465a:	bf00      	nop
 810465c:	3708      	adds	r7, #8
 810465e:	46bd      	mov	sp, r7
 8104660:	bd80      	pop	{r7, pc}
 8104662:	bf00      	nop
 8104664:	081285e8 	.word	0x081285e8
 8104668:	08103fc3 	.word	0x08103fc3
 810466c:	08125240 	.word	0x08125240

08104670 <_ZN17ConnectionManager13udpDisconnectEv>:


void ConnectionManager::udpDisconnect()
{
 8104670:	b580      	push	{r7, lr}
 8104672:	b082      	sub	sp, #8
 8104674:	af00      	add	r7, sp, #0
 8104676:	6078      	str	r0, [r7, #4]
    if (udp_pcb != nullptr)
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	685b      	ldr	r3, [r3, #4]
 810467c:	2b00      	cmp	r3, #0
 810467e:	d016      	beq.n	81046ae <_ZN17ConnectionManager13udpDisconnectEv+0x3e>
    {
        // Unregister callbacks
        udp_recv(udp_pcb, nullptr, nullptr); // Wyrejestrowanie callbacka
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	685b      	ldr	r3, [r3, #4]
 8104684:	2200      	movs	r2, #0
 8104686:	2100      	movs	r1, #0
 8104688:	4618      	mov	r0, r3
 810468a:	f01e fec9 	bl	8123420 <udp_recv>
        // Close connection
        udp_remove(udp_pcb);
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	685b      	ldr	r3, [r3, #4]
 8104692:	4618      	mov	r0, r3
 8104694:	f01e fee4 	bl	8123460 <udp_remove>
        udp_pcb = nullptr;
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	2200      	movs	r2, #0
 810469c:	605a      	str	r2, [r3, #4]
        LOG_DEBUG("UDP PCB removed and callback unregistered.");
 810469e:	f7fc fc6f 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81046a2:	4603      	mov	r3, r0
 81046a4:	4907      	ldr	r1, [pc, #28]	@ (81046c4 <_ZN17ConnectionManager13udpDisconnectEv+0x54>)
 81046a6:	4618      	mov	r0, r3
 81046a8:	f7fc fc92 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }
    else
    {
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
    }
}
 81046ac:	e006      	b.n	81046bc <_ZN17ConnectionManager13udpDisconnectEv+0x4c>
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
 81046ae:	f7fc fc67 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81046b2:	4603      	mov	r3, r0
 81046b4:	4904      	ldr	r1, [pc, #16]	@ (81046c8 <_ZN17ConnectionManager13udpDisconnectEv+0x58>)
 81046b6:	4618      	mov	r0, r3
 81046b8:	f7fc fc8a 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
}
 81046bc:	bf00      	nop
 81046be:	3708      	adds	r7, #8
 81046c0:	46bd      	mov	sp, r7
 81046c2:	bd80      	pop	{r7, pc}
 81046c4:	0812525c 	.word	0x0812525c
 81046c8:	08125288 	.word	0x08125288

081046cc <_ZN17ConnectionManager10tcpConnectEv>:

bool ConnectionManager::tcpConnect()
{
 81046cc:	b580      	push	{r7, lr}
 81046ce:	b084      	sub	sp, #16
 81046d0:	af00      	add	r7, sp, #0
 81046d2:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 81046d4:	483a      	ldr	r0, [pc, #232]	@ (81047c0 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 81046d6:	f017 ff5b 	bl	811c590 <sys_mutex_lock>
	tcp_pcb = tcp_new();
 81046da:	f019 fb8f 	bl	811ddfc <tcp_new>
 81046de:	4602      	mov	r2, r0
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	609a      	str	r2, [r3, #8]
    if (!tcp_pcb)
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	689b      	ldr	r3, [r3, #8]
 81046e8:	2b00      	cmp	r3, #0
 81046ea:	d10b      	bne.n	8104704 <_ZN17ConnectionManager10tcpConnectEv+0x38>
    {
        LOG_DEBUG("Failed to create TCP PCB.");
 81046ec:	f7fc fc48 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81046f0:	4603      	mov	r3, r0
 81046f2:	4934      	ldr	r1, [pc, #208]	@ (81047c4 <_ZN17ConnectionManager10tcpConnectEv+0xf8>)
 81046f4:	4618      	mov	r0, r3
 81046f6:	f7fc fc6b 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        UNLOCK_TCPIP_CORE();
 81046fa:	4831      	ldr	r0, [pc, #196]	@ (81047c0 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 81046fc:	f017 ff57 	bl	811c5ae <sys_mutex_unlock>
        return false;
 8104700:	2300      	movs	r3, #0
 8104702:	e059      	b.n	81047b8 <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }

    tcp_nagle_disable(tcp_pcb);
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	689b      	ldr	r3, [r3, #8]
 8104708:	8b5a      	ldrh	r2, [r3, #26]
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	689b      	ldr	r3, [r3, #8]
 810470e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8104712:	b292      	uxth	r2, r2
 8104714:	835a      	strh	r2, [r3, #26]

    err_t bindErr = tcp_bind(tcp_pcb, IP_ADDR_ANY, 0); // Automatically assign port number
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	689b      	ldr	r3, [r3, #8]
 810471a:	2200      	movs	r2, #0
 810471c:	492a      	ldr	r1, [pc, #168]	@ (81047c8 <_ZN17ConnectionManager10tcpConnectEv+0xfc>)
 810471e:	4618      	mov	r0, r3
 8104720:	f018 fa96 	bl	811cc50 <tcp_bind>
 8104724:	4603      	mov	r3, r0
 8104726:	73fb      	strb	r3, [r7, #15]
    if (bindErr != ERR_OK)
 8104728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810472c:	2b00      	cmp	r3, #0
 810472e:	d00f      	beq.n	8104750 <_ZN17ConnectionManager10tcpConnectEv+0x84>
    {
        LOG_DEBUG("Failed to bind TCP PCB: %d", bindErr);
 8104730:	f7fc fc26 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8104738:	461a      	mov	r2, r3
 810473a:	4924      	ldr	r1, [pc, #144]	@ (81047cc <_ZN17ConnectionManager10tcpConnectEv+0x100>)
 810473c:	f7fc fc48 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 8104740:	6878      	ldr	r0, [r7, #4]
 8104742:	f000 f84d 	bl	81047e0 <_ZN17ConnectionManager13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 8104746:	481e      	ldr	r0, [pc, #120]	@ (81047c0 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 8104748:	f017 ff31 	bl	811c5ae <sys_mutex_unlock>
        return false;
 810474c:	2300      	movs	r3, #0
 810474e:	e033      	b.n	81047b8 <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }
    // callback registration
    tcp_arg(tcp_pcb, NULL);
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	689b      	ldr	r3, [r3, #8]
 8104754:	2100      	movs	r1, #0
 8104756:	4618      	mov	r0, r3
 8104758:	f019 fb58 	bl	811de0c <tcp_arg>
    tcp_recv(tcp_pcb, tcpRecvCb);
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	689b      	ldr	r3, [r3, #8]
 8104760:	491b      	ldr	r1, [pc, #108]	@ (81047d0 <_ZN17ConnectionManager10tcpConnectEv+0x104>)
 8104762:	4618      	mov	r0, r3
 8104764:	f019 fb64 	bl	811de30 <tcp_recv>
    tcp_err(tcp_pcb, tcpErrCb);
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	689b      	ldr	r3, [r3, #8]
 810476c:	4919      	ldr	r1, [pc, #100]	@ (81047d4 <_ZN17ConnectionManager10tcpConnectEv+0x108>)
 810476e:	4618      	mov	r0, r3
 8104770:	f019 fb80 	bl	811de74 <tcp_err>

    // establishing connection
    err_t err = tcp_connect(tcp_pcb, &ecu_ip_addr, TCP_PORT_ECU, tcpConnectCb);
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	6898      	ldr	r0, [r3, #8]
 8104778:	6879      	ldr	r1, [r7, #4]
 810477a:	4b17      	ldr	r3, [pc, #92]	@ (81047d8 <_ZN17ConnectionManager10tcpConnectEv+0x10c>)
 810477c:	f641 2291 	movw	r2, #6801	@ 0x1a91
 8104780:	f018 fbec 	bl	811cf5c <tcp_connect>
 8104784:	4603      	mov	r3, r0
 8104786:	73bb      	strb	r3, [r7, #14]
    if (err != ERR_OK)
 8104788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810478c:	2b00      	cmp	r3, #0
 810478e:	d00f      	beq.n	81047b0 <_ZN17ConnectionManager10tcpConnectEv+0xe4>
    {
        LOG_DEBUG("Failed to connect to ECU: %d", err);
 8104790:	f7fc fbf6 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8104798:	461a      	mov	r2, r3
 810479a:	4910      	ldr	r1, [pc, #64]	@ (81047dc <_ZN17ConnectionManager10tcpConnectEv+0x110>)
 810479c:	f7fc fc18 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 81047a0:	6878      	ldr	r0, [r7, #4]
 81047a2:	f000 f81d 	bl	81047e0 <_ZN17ConnectionManager13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 81047a6:	4806      	ldr	r0, [pc, #24]	@ (81047c0 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 81047a8:	f017 ff01 	bl	811c5ae <sys_mutex_unlock>
        return false;
 81047ac:	2300      	movs	r3, #0
 81047ae:	e003      	b.n	81047b8 <_ZN17ConnectionManager10tcpConnectEv+0xec>
    }
    UNLOCK_TCPIP_CORE();
 81047b0:	4803      	ldr	r0, [pc, #12]	@ (81047c0 <_ZN17ConnectionManager10tcpConnectEv+0xf4>)
 81047b2:	f017 fefc 	bl	811c5ae <sys_mutex_unlock>
    return true;
 81047b6:	2301      	movs	r3, #1
}
 81047b8:	4618      	mov	r0, r3
 81047ba:	3710      	adds	r7, #16
 81047bc:	46bd      	mov	sp, r7
 81047be:	bd80      	pop	{r7, pc}
 81047c0:	1000e4f4 	.word	0x1000e4f4
 81047c4:	081252b4 	.word	0x081252b4
 81047c8:	081285e8 	.word	0x081285e8
 81047cc:	081252d0 	.word	0x081252d0
 81047d0:	08103f3f 	.word	0x08103f3f
 81047d4:	08103f9b 	.word	0x08103f9b
 81047d8:	08103f6f 	.word	0x08103f6f
 81047dc:	081252ec 	.word	0x081252ec

081047e0 <_ZN17ConnectionManager13tcpDisconnectEv>:


void ConnectionManager::tcpDisconnect()
{
 81047e0:	b580      	push	{r7, lr}
 81047e2:	b082      	sub	sp, #8
 81047e4:	af00      	add	r7, sp, #0
 81047e6:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 81047e8:	481b      	ldr	r0, [pc, #108]	@ (8104858 <_ZN17ConnectionManager13tcpDisconnectEv+0x78>)
 81047ea:	f017 fed1 	bl	811c590 <sys_mutex_lock>
    if (tcp_pcb != nullptr)
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	689b      	ldr	r3, [r3, #8]
 81047f2:	2b00      	cmp	r3, #0
 81047f4:	d021      	beq.n	810483a <_ZN17ConnectionManager13tcpDisconnectEv+0x5a>
    {
        // Unregister callbacks
        tcp_arg(tcp_pcb, nullptr);
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	689b      	ldr	r3, [r3, #8]
 81047fa:	2100      	movs	r1, #0
 81047fc:	4618      	mov	r0, r3
 81047fe:	f019 fb05 	bl	811de0c <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	689b      	ldr	r3, [r3, #8]
 8104806:	2100      	movs	r1, #0
 8104808:	4618      	mov	r0, r3
 810480a:	f019 fb11 	bl	811de30 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	689b      	ldr	r3, [r3, #8]
 8104812:	2100      	movs	r1, #0
 8104814:	4618      	mov	r0, r3
 8104816:	f019 fb2d 	bl	811de74 <tcp_err>
        // Close connection
        tcp_close(tcp_pcb);
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	689b      	ldr	r3, [r3, #8]
 810481e:	4618      	mov	r0, r3
 8104820:	f018 f920 	bl	811ca64 <tcp_close>
        tcp_pcb = nullptr;
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	2200      	movs	r2, #0
 8104828:	609a      	str	r2, [r3, #8]
        LOG_DEBUG("TCP PCB closed and callbacks unregistered.");
 810482a:	f7fc fba9 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810482e:	4603      	mov	r3, r0
 8104830:	490a      	ldr	r1, [pc, #40]	@ (810485c <_ZN17ConnectionManager13tcpDisconnectEv+0x7c>)
 8104832:	4618      	mov	r0, r3
 8104834:	f7fc fbcc 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 8104838:	e006      	b.n	8104848 <_ZN17ConnectionManager13tcpDisconnectEv+0x68>
    }
    else
    {
        LOG_DEBUG("tcp_pcb is already null, skipping disconnection.");
 810483a:	f7fc fba1 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810483e:	4603      	mov	r3, r0
 8104840:	4907      	ldr	r1, [pc, #28]	@ (8104860 <_ZN17ConnectionManager13tcpDisconnectEv+0x80>)
 8104842:	4618      	mov	r0, r3
 8104844:	f7fc fbc4 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }
    UNLOCK_TCPIP_CORE();
 8104848:	4803      	ldr	r0, [pc, #12]	@ (8104858 <_ZN17ConnectionManager13tcpDisconnectEv+0x78>)
 810484a:	f017 feb0 	bl	811c5ae <sys_mutex_unlock>
}
 810484e:	bf00      	nop
 8104850:	3708      	adds	r7, #8
 8104852:	46bd      	mov	sp, r7
 8104854:	bd80      	pop	{r7, pc}
 8104856:	bf00      	nop
 8104858:	1000e4f4 	.word	0x1000e4f4
 810485c:	0812530c 	.word	0x0812530c
 8104860:	08125338 	.word	0x08125338

08104864 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>:

void ConnectionManager::HandleTcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8104864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8104868:	b08b      	sub	sp, #44	@ 0x2c
 810486a:	af00      	add	r7, sp, #0
 810486c:	60f8      	str	r0, [r7, #12]
 810486e:	60b9      	str	r1, [r7, #8]
 8104870:	607a      	str	r2, [r7, #4]
 8104872:	603b      	str	r3, [r7, #0]
        }
        default:
            // none other messages types are needed to be handled, so discard
            break;
    }
}
 8104874:	466b      	mov	r3, sp
 8104876:	461e      	mov	r6, r3
    if (!p || err != ERR_OK)
 8104878:	683b      	ldr	r3, [r7, #0]
 810487a:	2b00      	cmp	r3, #0
 810487c:	d003      	beq.n	8104886 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x22>
 810487e:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8104882:	2b00      	cmp	r3, #0
 8104884:	d03c      	beq.n	8104900 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x9c>
        tcp_arg(tcp_pcb, nullptr);
 8104886:	68fb      	ldr	r3, [r7, #12]
 8104888:	689b      	ldr	r3, [r3, #8]
 810488a:	2100      	movs	r1, #0
 810488c:	4618      	mov	r0, r3
 810488e:	f019 fabd 	bl	811de0c <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 8104892:	68fb      	ldr	r3, [r7, #12]
 8104894:	689b      	ldr	r3, [r3, #8]
 8104896:	2100      	movs	r1, #0
 8104898:	4618      	mov	r0, r3
 810489a:	f019 fac9 	bl	811de30 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 810489e:	68fb      	ldr	r3, [r7, #12]
 81048a0:	689b      	ldr	r3, [r3, #8]
 81048a2:	2100      	movs	r1, #0
 81048a4:	4618      	mov	r0, r3
 81048a6:	f019 fae5 	bl	811de74 <tcp_err>
        tcp_close(tcp_pcb);
 81048aa:	68fb      	ldr	r3, [r7, #12]
 81048ac:	689b      	ldr	r3, [r3, #8]
 81048ae:	4618      	mov	r0, r3
 81048b0:	f018 f8d8 	bl	811ca64 <tcp_close>
        tcp_pcb = nullptr;
 81048b4:	68fb      	ldr	r3, [r7, #12]
 81048b6:	2200      	movs	r2, #0
 81048b8:	609a      	str	r2, [r3, #8]
        LOG_DEBUG("Connection closed or error occurred.");
 81048ba:	f7fc fb61 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81048be:	4603      	mov	r3, r0
 81048c0:	4961      	ldr	r1, [pc, #388]	@ (8104a48 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e4>)
 81048c2:	4618      	mov	r0, r3
 81048c4:	f7fc fb84 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 81048c8:	2304      	movs	r3, #4
 81048ca:	753b      	strb	r3, [r7, #20]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 81048cc:	4b5f      	ldr	r3, [pc, #380]	@ (8104a4c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e8>)
 81048ce:	6818      	ldr	r0, [r3, #0]
 81048d0:	f107 0114 	add.w	r1, r7, #20
 81048d4:	2300      	movs	r3, #0
 81048d6:	4a5e      	ldr	r2, [pc, #376]	@ (8104a50 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1ec>)
 81048d8:	f010 f924 	bl	8114b24 <xQueueGenericSend>
 81048dc:	4603      	mov	r3, r0
 81048de:	2b01      	cmp	r3, #1
 81048e0:	bf14      	ite	ne
 81048e2:	2301      	movne	r3, #1
 81048e4:	2300      	moveq	r3, #0
 81048e6:	b2db      	uxtb	r3, r3
 81048e8:	2b00      	cmp	r3, #0
 81048ea:	f000 80a8 	beq.w	8104a3e <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81048ee:	f7fc fb47 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 81048f2:	4603      	mov	r3, r0
 81048f4:	7d3a      	ldrb	r2, [r7, #20]
 81048f6:	4957      	ldr	r1, [pc, #348]	@ (8104a54 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1f0>)
 81048f8:	4618      	mov	r0, r3
 81048fa:	f7fc fb69 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 81048fe:	e09e      	b.n	8104a3e <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
    size_t payloadLen = p->len;
 8104900:	683b      	ldr	r3, [r7, #0]
 8104902:	895b      	ldrh	r3, [r3, #10]
 8104904:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t data[payloadLen];
 8104906:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8104908:	460b      	mov	r3, r1
 810490a:	3b01      	subs	r3, #1
 810490c:	623b      	str	r3, [r7, #32]
 810490e:	2300      	movs	r3, #0
 8104910:	4688      	mov	r8, r1
 8104912:	4699      	mov	r9, r3
 8104914:	f04f 0200 	mov.w	r2, #0
 8104918:	f04f 0300 	mov.w	r3, #0
 810491c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8104920:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8104924:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8104928:	2300      	movs	r3, #0
 810492a:	460c      	mov	r4, r1
 810492c:	461d      	mov	r5, r3
 810492e:	f04f 0200 	mov.w	r2, #0
 8104932:	f04f 0300 	mov.w	r3, #0
 8104936:	00eb      	lsls	r3, r5, #3
 8104938:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 810493c:	00e2      	lsls	r2, r4, #3
 810493e:	1dcb      	adds	r3, r1, #7
 8104940:	08db      	lsrs	r3, r3, #3
 8104942:	00db      	lsls	r3, r3, #3
 8104944:	ebad 0d03 	sub.w	sp, sp, r3
 8104948:	466b      	mov	r3, sp
 810494a:	3300      	adds	r3, #0
 810494c:	61fb      	str	r3, [r7, #28]
    std::memcpy(data, p->payload, payloadLen);
 810494e:	683b      	ldr	r3, [r7, #0]
 8104950:	685b      	ldr	r3, [r3, #4]
 8104952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104954:	4619      	mov	r1, r3
 8104956:	69f8      	ldr	r0, [r7, #28]
 8104958:	f020 f8e3 	bl	8124b22 <memcpy>
    tcp_recved(tcp_pcb, p->len);
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	689a      	ldr	r2, [r3, #8]
 8104960:	683b      	ldr	r3, [r7, #0]
 8104962:	895b      	ldrh	r3, [r3, #10]
 8104964:	4619      	mov	r1, r3
 8104966:	4610      	mov	r0, r2
 8104968:	f018 fa64 	bl	811ce34 <tcp_recved>
    pbuf_free(p);
 810496c:	6838      	ldr	r0, [r7, #0]
 810496e:	f017 facd 	bl	811bf0c <pbuf_free>
    const uint32_t udsPayloadLen = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 8104972:	69fb      	ldr	r3, [r7, #28]
 8104974:	781b      	ldrb	r3, [r3, #0]
 8104976:	061a      	lsls	r2, r3, #24
 8104978:	69fb      	ldr	r3, [r7, #28]
 810497a:	785b      	ldrb	r3, [r3, #1]
 810497c:	041b      	lsls	r3, r3, #16
 810497e:	431a      	orrs	r2, r3
 8104980:	69fb      	ldr	r3, [r7, #28]
 8104982:	789b      	ldrb	r3, [r3, #2]
 8104984:	021b      	lsls	r3, r3, #8
 8104986:	4313      	orrs	r3, r2
 8104988:	69fa      	ldr	r2, [r7, #28]
 810498a:	78d2      	ldrb	r2, [r2, #3]
 810498c:	4313      	orrs	r3, r2
 810498e:	61bb      	str	r3, [r7, #24]
    if (udsPayloadLen + 6 > payloadLen)
 8104990:	69bb      	ldr	r3, [r7, #24]
 8104992:	3306      	adds	r3, #6
 8104994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104996:	429a      	cmp	r2, r3
 8104998:	d207      	bcs.n	81049aa <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x146>
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", udsPayloadLen, payloadLen);
 810499a:	f7fc faf1 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 810499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81049a0:	69ba      	ldr	r2, [r7, #24]
 81049a2:	492d      	ldr	r1, [pc, #180]	@ (8104a58 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1f4>)
 81049a4:	f7fc fb14 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        return;
 81049a8:	e049      	b.n	8104a3e <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1da>
    const EECUAddress sourceAddr = static_cast<EECUAddress>(data[6]);
 81049aa:	69fb      	ldr	r3, [r7, #28]
 81049ac:	799b      	ldrb	r3, [r3, #6]
 81049ae:	75fb      	strb	r3, [r7, #23]
    const EECUAddress targetAddr = static_cast<EECUAddress>(data[7]);
 81049b0:	69fb      	ldr	r3, [r7, #28]
 81049b2:	79db      	ldrb	r3, [r3, #7]
 81049b4:	75bb      	strb	r3, [r7, #22]
    if(static_cast<uint8_t>(targetAddr) != DIAGNOSTIC_TOOL_INTERNAL_ADDR)
 81049b6:	7dbb      	ldrb	r3, [r7, #22]
 81049b8:	2bf4      	cmp	r3, #244	@ 0xf4
 81049ba:	d13f      	bne.n	8104a3c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d8>
    EUDSResponseSID SID = static_cast<EUDSResponseSID>(data[8]);
 81049bc:	69fb      	ldr	r3, [r7, #28]
 81049be:	7a1b      	ldrb	r3, [r3, #8]
 81049c0:	757b      	strb	r3, [r7, #21]
    switch(SID)
 81049c2:	7d7b      	ldrb	r3, [r7, #21]
 81049c4:	2b7f      	cmp	r3, #127	@ 0x7f
 81049c6:	d021      	beq.n	8104a0c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1a8>
 81049c8:	7d7b      	ldrb	r3, [r7, #21]
 81049ca:	2b7f      	cmp	r3, #127	@ 0x7f
 81049cc:	d833      	bhi.n	8104a36 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
 81049ce:	7d7b      	ldrb	r3, [r7, #21]
 81049d0:	2b62      	cmp	r3, #98	@ 0x62
 81049d2:	d003      	beq.n	81049dc <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x178>
 81049d4:	7d7b      	ldrb	r3, [r7, #21]
 81049d6:	2b6c      	cmp	r3, #108	@ 0x6c
 81049d8:	d00d      	beq.n	81049f6 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x192>
            break;
 81049da:	e02c      	b.n	8104a36 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
            handleReadDataByIdentifier(&data[11], udsPayloadLen - 5); 
 81049dc:	69fb      	ldr	r3, [r7, #28]
 81049de:	f103 010b 	add.w	r1, r3, #11
 81049e2:	69bb      	ldr	r3, [r7, #24]
 81049e4:	3b05      	subs	r3, #5
 81049e6:	461a      	mov	r2, r3
 81049e8:	68f8      	ldr	r0, [r7, #12]
 81049ea:	f000 f935 	bl	8104c58 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm>
            negativeResponseCount = 0;
 81049ee:	68fb      	ldr	r3, [r7, #12]
 81049f0:	2200      	movs	r2, #0
 81049f2:	735a      	strb	r2, [r3, #13]
            break;
 81049f4:	e020      	b.n	8104a38 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d4>
            handleDynamicallyDefineDataIdentifier(&data[9], sourceAddr);
 81049f6:	69fb      	ldr	r3, [r7, #28]
 81049f8:	3309      	adds	r3, #9
 81049fa:	7dfa      	ldrb	r2, [r7, #23]
 81049fc:	4619      	mov	r1, r3
 81049fe:	68f8      	ldr	r0, [r7, #12]
 8104a00:	f000 f9a2 	bl	8104d48 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress>
            negativeResponseCount = 0;
 8104a04:	68fb      	ldr	r3, [r7, #12]
 8104a06:	2200      	movs	r2, #0
 8104a08:	735a      	strb	r2, [r3, #13]
            break;
 8104a0a:	e015      	b.n	8104a38 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d4>
            negativeResponseCount++;
 8104a0c:	68fb      	ldr	r3, [r7, #12]
 8104a0e:	7b5b      	ldrb	r3, [r3, #13]
 8104a10:	3301      	adds	r3, #1
 8104a12:	b2da      	uxtb	r2, r3
 8104a14:	68fb      	ldr	r3, [r7, #12]
 8104a16:	735a      	strb	r2, [r3, #13]
            if(negativeResponseCount >= 10)
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	7b5b      	ldrb	r3, [r3, #13]
 8104a1c:	2b09      	cmp	r3, #9
 8104a1e:	d90a      	bls.n	8104a36 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d2>
                EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 8104a20:	2304      	movs	r3, #4
 8104a22:	74fb      	strb	r3, [r7, #19]
                xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8104a24:	4b09      	ldr	r3, [pc, #36]	@ (8104a4c <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e8>)
 8104a26:	6818      	ldr	r0, [r3, #0]
 8104a28:	f107 0113 	add.w	r1, r7, #19
 8104a2c:	2300      	movs	r3, #0
 8104a2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8104a32:	f010 f877 	bl	8114b24 <xQueueGenericSend>
            break;
 8104a36:	bf00      	nop
 8104a38:	46b5      	mov	sp, r6
 8104a3a:	e001      	b.n	8104a40 <_ZN17ConnectionManager15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1dc>
        return;
 8104a3c:	bf00      	nop
 8104a3e:	46b5      	mov	sp, r6
}
 8104a40:	372c      	adds	r7, #44	@ 0x2c
 8104a42:	46bd      	mov	sp, r7
 8104a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8104a48:	0812536c 	.word	0x0812536c
 8104a4c:	10000294 	.word	0x10000294
 8104a50:	000186a0 	.word	0x000186a0
 8104a54:	08125164 	.word	0x08125164
 8104a58:	08125058 	.word	0x08125058

08104a5c <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba>:

void ConnectionManager::HandleTcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8104a5c:	b580      	push	{r7, lr}
 8104a5e:	b086      	sub	sp, #24
 8104a60:	af00      	add	r7, sp, #0
 8104a62:	60f8      	str	r0, [r7, #12]
 8104a64:	60b9      	str	r1, [r7, #8]
 8104a66:	607a      	str	r2, [r7, #4]
 8104a68:	70fb      	strb	r3, [r7, #3]
    // accoring to documentation this always call with err == ERR_OK, so this impl is in case of LWiP updates
    if (err != ERR_OK)
 8104a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8104a6e:	2b00      	cmp	r3, #0
 8104a70:	d022      	beq.n	8104ab8 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x5c>
    {
        LOG_DEBUG("Connection failed with error: %d", err);
 8104a72:	f7fc fa85 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8104a7a:	461a      	mov	r2, r3
 8104a7c:	4921      	ldr	r1, [pc, #132]	@ (8104b04 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xa8>)
 8104a7e:	f7fc faa7 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 8104a82:	2304      	movs	r3, #4
 8104a84:	75fb      	strb	r3, [r7, #23]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8104a86:	4b20      	ldr	r3, [pc, #128]	@ (8104b08 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xac>)
 8104a88:	6818      	ldr	r0, [r3, #0]
 8104a8a:	f107 0117 	add.w	r1, r7, #23
 8104a8e:	2300      	movs	r3, #0
 8104a90:	4a1e      	ldr	r2, [pc, #120]	@ (8104b0c <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb0>)
 8104a92:	f010 f847 	bl	8114b24 <xQueueGenericSend>
 8104a96:	4603      	mov	r3, r0
 8104a98:	2b01      	cmp	r3, #1
 8104a9a:	bf14      	ite	ne
 8104a9c:	2301      	movne	r3, #1
 8104a9e:	2300      	moveq	r3, #0
 8104aa0:	b2db      	uxtb	r3, r3
 8104aa2:	2b00      	cmp	r3, #0
 8104aa4:	d029      	beq.n	8104afa <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8104aa6:	f7fc fa6b 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104aaa:	4603      	mov	r3, r0
 8104aac:	7dfa      	ldrb	r2, [r7, #23]
 8104aae:	4918      	ldr	r1, [pc, #96]	@ (8104b10 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb4>)
 8104ab0:	4618      	mov	r0, r3
 8104ab2:	f7fc fa8d 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
        }
    }
}
 8104ab6:	e020      	b.n	8104afa <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
        LOG_DEBUG("Connected to ECU.");
 8104ab8:	f7fc fa62 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104abc:	4603      	mov	r3, r0
 8104abe:	4915      	ldr	r1, [pc, #84]	@ (8104b14 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb8>)
 8104ac0:	4618      	mov	r0, r3
 8104ac2:	f7fc fa85 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTED;
 8104ac6:	2303      	movs	r3, #3
 8104ac8:	75bb      	strb	r3, [r7, #22]
        if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8104aca:	4b0f      	ldr	r3, [pc, #60]	@ (8104b08 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xac>)
 8104acc:	6818      	ldr	r0, [r3, #0]
 8104ace:	f107 0116 	add.w	r1, r7, #22
 8104ad2:	2300      	movs	r3, #0
 8104ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8104b0c <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb0>)
 8104ad6:	f010 f825 	bl	8114b24 <xQueueGenericSend>
 8104ada:	4603      	mov	r3, r0
 8104adc:	2b01      	cmp	r3, #1
 8104ade:	bf14      	ite	ne
 8104ae0:	2301      	movne	r3, #1
 8104ae2:	2300      	moveq	r3, #0
 8104ae4:	b2db      	uxtb	r3, r3
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d007      	beq.n	8104afa <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8104aea:	f7fc fa49 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104aee:	4603      	mov	r3, r0
 8104af0:	7dba      	ldrb	r2, [r7, #22]
 8104af2:	4907      	ldr	r1, [pc, #28]	@ (8104b10 <_ZN17ConnectionManager18HandleTcpConnectCbEPvP7tcp_pcba+0xb4>)
 8104af4:	4618      	mov	r0, r3
 8104af6:	f7fc fa6b 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
}
 8104afa:	bf00      	nop
 8104afc:	3718      	adds	r7, #24
 8104afe:	46bd      	mov	sp, r7
 8104b00:	bd80      	pop	{r7, pc}
 8104b02:	bf00      	nop
 8104b04:	08125394 	.word	0x08125394
 8104b08:	10000294 	.word	0x10000294
 8104b0c:	000186a0 	.word	0x000186a0
 8104b10:	08125164 	.word	0x08125164
 8104b14:	081253b8 	.word	0x081253b8

08104b18 <_ZN17ConnectionManager14HandleTcpErrCbEPva>:

void ConnectionManager::HandleTcpErrCb(void *arg, err_t err)
{
 8104b18:	b580      	push	{r7, lr}
 8104b1a:	b086      	sub	sp, #24
 8104b1c:	af00      	add	r7, sp, #0
 8104b1e:	60f8      	str	r0, [r7, #12]
 8104b20:	60b9      	str	r1, [r7, #8]
 8104b22:	4613      	mov	r3, r2
 8104b24:	71fb      	strb	r3, [r7, #7]
    LOG_DEBUG("TCP connection error: %d", err);
 8104b26:	f7fc fa2b 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8104b2e:	461a      	mov	r2, r3
 8104b30:	4910      	ldr	r1, [pc, #64]	@ (8104b74 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x5c>)
 8104b32:	f7fc fa4d 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 8104b36:	2304      	movs	r3, #4
 8104b38:	75fb      	strb	r3, [r7, #23]
    if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8104b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8104b78 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x60>)
 8104b3c:	6818      	ldr	r0, [r3, #0]
 8104b3e:	f107 0117 	add.w	r1, r7, #23
 8104b42:	2300      	movs	r3, #0
 8104b44:	4a0d      	ldr	r2, [pc, #52]	@ (8104b7c <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x64>)
 8104b46:	f00f ffed 	bl	8114b24 <xQueueGenericSend>
 8104b4a:	4603      	mov	r3, r0
 8104b4c:	2b01      	cmp	r3, #1
 8104b4e:	bf14      	ite	ne
 8104b50:	2301      	movne	r3, #1
 8104b52:	2300      	moveq	r3, #0
 8104b54:	b2db      	uxtb	r3, r3
 8104b56:	2b00      	cmp	r3, #0
 8104b58:	d007      	beq.n	8104b6a <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x52>
    {
        LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8104b5a:	f7fc fa11 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104b5e:	4603      	mov	r3, r0
 8104b60:	7dfa      	ldrb	r2, [r7, #23]
 8104b62:	4907      	ldr	r1, [pc, #28]	@ (8104b80 <_ZN17ConnectionManager14HandleTcpErrCbEPva+0x68>)
 8104b64:	4618      	mov	r0, r3
 8104b66:	f7fc fa33 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }
}
 8104b6a:	bf00      	nop
 8104b6c:	3718      	adds	r7, #24
 8104b6e:	46bd      	mov	sp, r7
 8104b70:	bd80      	pop	{r7, pc}
 8104b72:	bf00      	nop
 8104b74:	081253cc 	.word	0x081253cc
 8104b78:	10000294 	.word	0x10000294
 8104b7c:	000186a0 	.word	0x000186a0
 8104b80:	08125164 	.word	0x08125164

08104b84 <_ZN17ConnectionManager7tcpSendEPhjb>:

bool ConnectionManager::tcpSend(uint8_t udsRequest[], size_t sizeOfUdsRequest, const bool tcpipThreadContext)
{
 8104b84:	b580      	push	{r7, lr}
 8104b86:	b086      	sub	sp, #24
 8104b88:	af00      	add	r7, sp, #0
 8104b8a:	60f8      	str	r0, [r7, #12]
 8104b8c:	60b9      	str	r1, [r7, #8]
 8104b8e:	607a      	str	r2, [r7, #4]
 8104b90:	70fb      	strb	r3, [r7, #3]
    if(!tcpipThreadContext)
 8104b92:	78fb      	ldrb	r3, [r7, #3]
 8104b94:	f083 0301 	eor.w	r3, r3, #1
 8104b98:	b2db      	uxtb	r3, r3
 8104b9a:	2b00      	cmp	r3, #0
 8104b9c:	d002      	beq.n	8104ba4 <_ZN17ConnectionManager7tcpSendEPhjb+0x20>
    {
        LOCK_TCPIP_CORE();
 8104b9e:	481b      	ldr	r0, [pc, #108]	@ (8104c0c <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 8104ba0:	f017 fcf6 	bl	811c590 <sys_mutex_lock>
    }
    err_t res = tcp_write(tcp_pcb, udsRequest, sizeOfUdsRequest, TCP_WRITE_FLAG_COPY);
 8104ba4:	68fb      	ldr	r3, [r7, #12]
 8104ba6:	6898      	ldr	r0, [r3, #8]
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	b29a      	uxth	r2, r3
 8104bac:	2301      	movs	r3, #1
 8104bae:	68b9      	ldr	r1, [r7, #8]
 8104bb0:	f01b fffe 	bl	8120bb0 <tcp_write>
 8104bb4:	4603      	mov	r3, r0
 8104bb6:	75fb      	strb	r3, [r7, #23]
    if (res != ERR_OK)
 8104bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8104bbc:	2b00      	cmp	r3, #0
 8104bbe:	d012      	beq.n	8104be6 <_ZN17ConnectionManager7tcpSendEPhjb+0x62>
    {
        LOG_DEBUG("Failed to send UDS request: %d", res);
 8104bc0:	f7fc f9de 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8104bc8:	461a      	mov	r2, r3
 8104bca:	4911      	ldr	r1, [pc, #68]	@ (8104c10 <_ZN17ConnectionManager7tcpSendEPhjb+0x8c>)
 8104bcc:	f7fc fa00 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
        if(!tcpipThreadContext)
 8104bd0:	78fb      	ldrb	r3, [r7, #3]
 8104bd2:	f083 0301 	eor.w	r3, r3, #1
 8104bd6:	b2db      	uxtb	r3, r3
 8104bd8:	2b00      	cmp	r3, #0
 8104bda:	d002      	beq.n	8104be2 <_ZN17ConnectionManager7tcpSendEPhjb+0x5e>
        {
            UNLOCK_TCPIP_CORE();
 8104bdc:	480b      	ldr	r0, [pc, #44]	@ (8104c0c <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 8104bde:	f017 fce6 	bl	811c5ae <sys_mutex_unlock>
        }
        return false;
 8104be2:	2300      	movs	r3, #0
 8104be4:	e00e      	b.n	8104c04 <_ZN17ConnectionManager7tcpSendEPhjb+0x80>
    }

    tcp_output(tcp_pcb);
 8104be6:	68fb      	ldr	r3, [r7, #12]
 8104be8:	689b      	ldr	r3, [r3, #8]
 8104bea:	4618      	mov	r0, r3
 8104bec:	f01c fdca 	bl	8121784 <tcp_output>
    if(!tcpipThreadContext)
 8104bf0:	78fb      	ldrb	r3, [r7, #3]
 8104bf2:	f083 0301 	eor.w	r3, r3, #1
 8104bf6:	b2db      	uxtb	r3, r3
 8104bf8:	2b00      	cmp	r3, #0
 8104bfa:	d002      	beq.n	8104c02 <_ZN17ConnectionManager7tcpSendEPhjb+0x7e>
    {
        UNLOCK_TCPIP_CORE();
 8104bfc:	4803      	ldr	r0, [pc, #12]	@ (8104c0c <_ZN17ConnectionManager7tcpSendEPhjb+0x88>)
 8104bfe:	f017 fcd6 	bl	811c5ae <sys_mutex_unlock>
    }
    return true;
 8104c02:	2301      	movs	r3, #1
}
 8104c04:	4618      	mov	r0, r3
 8104c06:	3718      	adds	r7, #24
 8104c08:	46bd      	mov	sp, r7
 8104c0a:	bd80      	pop	{r7, pc}
 8104c0c:	1000e4f4 	.word	0x1000e4f4
 8104c10:	081253e8 	.word	0x081253e8

08104c14 <_ZNRSt8optionalI8SMessageE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
 8104c14:	b580      	push	{r7, lr}
 8104c16:	b082      	sub	sp, #8
 8104c18:	af00      	add	r7, sp, #0
 8104c1a:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_is_engaged())
 8104c1c:	6878      	ldr	r0, [r7, #4]
 8104c1e:	f000 f80e 	bl	8104c3e <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 8104c22:	4603      	mov	r3, r0
 8104c24:	2b00      	cmp	r3, #0
 8104c26:	d004      	beq.n	8104c32 <_ZNRSt8optionalI8SMessageE5valueEv+0x1e>
	  return this->_M_get();
 8104c28:	6878      	ldr	r0, [r7, #4]
 8104c2a:	f000 f9c8 	bl	8104fbe <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
 8104c2e:	4603      	mov	r3, r0
 8104c30:	e001      	b.n	8104c36 <_ZNRSt8optionalI8SMessageE5valueEv+0x22>
	__throw_bad_optional_access();
 8104c32:	f7ff f8f1 	bl	8103e18 <_ZSt27__throw_bad_optional_accessv>
      }
 8104c36:	4618      	mov	r0, r3
 8104c38:	3708      	adds	r7, #8
 8104c3a:	46bd      	mov	sp, r7
 8104c3c:	bd80      	pop	{r7, pc}

08104c3e <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 8104c3e:	b480      	push	{r7}
 8104c40:	b083      	sub	sp, #12
 8104c42:	af00      	add	r7, sp, #0
 8104c44:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8104c46:	687b      	ldr	r3, [r7, #4]
 8104c48:	7f1b      	ldrb	r3, [r3, #28]
 8104c4a:	4618      	mov	r0, r3
 8104c4c:	370c      	adds	r7, #12
 8104c4e:	46bd      	mov	sp, r7
 8104c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c54:	4770      	bx	lr
	...

08104c58 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm>:

void ConnectionManager::handleReadDataByIdentifier(uint8_t dataPayload[], uint32_t size)
{
 8104c58:	b5b0      	push	{r4, r5, r7, lr}
 8104c5a:	b094      	sub	sp, #80	@ 0x50
 8104c5c:	af00      	add	r7, sp, #0
 8104c5e:	60f8      	str	r0, [r7, #12]
 8104c60:	60b9      	str	r1, [r7, #8]
 8104c62:	607a      	str	r2, [r7, #4]
    std::optional<SMessage> optMsg = APIDoIP::extractDataFromResponse(dataPayload, size, currently_processed_request);
 8104c64:	68fb      	ldr	r3, [r7, #12]
 8104c66:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8104c6a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8104c6e:	687a      	ldr	r2, [r7, #4]
 8104c70:	68b9      	ldr	r1, [r7, #8]
 8104c72:	f7fe fd29 	bl	81036c8 <_ZN7APIDoIP23extractDataFromResponseEPKhjNS_12EDoIPRequestE>
    if(optMsg.has_value())
 8104c76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8104c7a:	4618      	mov	r0, r3
 8104c7c:	f000 f993 	bl	8104fa6 <_ZNKSt8optionalI8SMessageE9has_valueEv>
 8104c80:	4603      	mov	r3, r0
 8104c82:	2b00      	cmp	r3, #0
 8104c84:	d017      	beq.n	8104cb6 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x5e>
    {
        SMessage msg = optMsg.value();
 8104c86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8104c8a:	4618      	mov	r0, r3
 8104c8c:	f7ff ffc2 	bl	8104c14 <_ZNRSt8optionalI8SMessageE5valueEv>
 8104c90:	4603      	mov	r3, r0
 8104c92:	f107 0410 	add.w	r4, r7, #16
 8104c96:	461d      	mov	r5, r3
 8104c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104c9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8104ca0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        xQueueSend(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(10000));
 8104ca4:	4b14      	ldr	r3, [pc, #80]	@ (8104cf8 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0xa0>)
 8104ca6:	6818      	ldr	r0, [r3, #0]
 8104ca8:	f107 0110 	add.w	r1, r7, #16
 8104cac:	2300      	movs	r3, #0
 8104cae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8104cb2:	f00f ff37 	bl	8114b24 <xQueueGenericSend>
    }
    EConnectionEvent connEvent = EVENT_TCP_READ_DATA_BY_ID_RECEIVED;
 8104cb6:	2308      	movs	r3, #8
 8104cb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8104cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8104cfc <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0xa4>)
 8104cbe:	6818      	ldr	r0, [r3, #0]
 8104cc0:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 8104cc4:	2300      	movs	r3, #0
 8104cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8104d00 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0xa8>)
 8104cc8:	f00f ff2c 	bl	8114b24 <xQueueGenericSend>
 8104ccc:	4603      	mov	r3, r0
 8104cce:	2b01      	cmp	r3, #1
 8104cd0:	bf14      	ite	ne
 8104cd2:	2301      	movne	r3, #1
 8104cd4:	2300      	moveq	r3, #0
 8104cd6:	b2db      	uxtb	r3, r3
 8104cd8:	2b00      	cmp	r3, #0
 8104cda:	d008      	beq.n	8104cee <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0x96>
    {
        LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8104cdc:	f7fc f950 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104ce0:	4603      	mov	r3, r0
 8104ce2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8104ce6:	4907      	ldr	r1, [pc, #28]	@ (8104d04 <_ZN17ConnectionManager26handleReadDataByIdentifierEPhm+0xac>)
 8104ce8:	4618      	mov	r0, r3
 8104cea:	f7fc f971 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
    }
}
 8104cee:	bf00      	nop
 8104cf0:	3750      	adds	r7, #80	@ 0x50
 8104cf2:	46bd      	mov	sp, r7
 8104cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8104cf6:	bf00      	nop
 8104cf8:	100001cc 	.word	0x100001cc
 8104cfc:	10000294 	.word	0x10000294
 8104d00:	000186a0 	.word	0x000186a0
 8104d04:	08125164 	.word	0x08125164

08104d08 <_ZSt17holds_alternativeI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 8104d08:	b590      	push	{r4, r7, lr}
 8104d0a:	b083      	sub	sp, #12
 8104d0c:	af00      	add	r7, sp, #0
 8104d0e:	6078      	str	r0, [r7, #4]
      return __v.index() == std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8104d10:	6878      	ldr	r0, [r7, #4]
 8104d12:	f000 f80d 	bl	8104d30 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 8104d16:	4604      	mov	r4, r0
 8104d18:	f7ff f882 	bl	8103e20 <_ZSt24__find_uniq_type_in_packI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEjv>
 8104d1c:	4603      	mov	r3, r0
 8104d1e:	429c      	cmp	r4, r3
 8104d20:	bf0c      	ite	eq
 8104d22:	2301      	moveq	r3, #1
 8104d24:	2300      	movne	r3, #0
 8104d26:	b2db      	uxtb	r3, r3
    }
 8104d28:	4618      	mov	r0, r3
 8104d2a:	370c      	adds	r7, #12
 8104d2c:	46bd      	mov	sp, r7
 8104d2e:	bd90      	pop	{r4, r7, pc}

08104d30 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>:
	enable_if_t<!__exactly_once<_Tp>> emplace(_Args&&...) = delete;

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
 8104d30:	b480      	push	{r7}
 8104d32:	b083      	sub	sp, #12
 8104d34:	af00      	add	r7, sp, #0
 8104d36:	6078      	str	r0, [r7, #4]
      {
	using __index_type = typename _Base::__index_type;
	if constexpr (__detail::__variant::__never_valueless<_Types...>())
	  return this->_M_index;
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	791b      	ldrb	r3, [r3, #4]
	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
	  return make_signed_t<__index_type>(this->_M_index);
	else
	  return size_t(__index_type(this->_M_index + 1)) - 1;
      }
 8104d3c:	4618      	mov	r0, r3
 8104d3e:	370c      	adds	r7, #12
 8104d40:	46bd      	mov	sp, r7
 8104d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d46:	4770      	bx	lr

08104d48 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress>:

void ConnectionManager::handleDynamicallyDefineDataIdentifier(uint8_t dataPayload[], EECUAddress sourceEcuAddr)
{
 8104d48:	b580      	push	{r7, lr}
 8104d4a:	b094      	sub	sp, #80	@ 0x50
 8104d4c:	af00      	add	r7, sp, #0
 8104d4e:	60f8      	str	r0, [r7, #12]
 8104d50:	60b9      	str	r1, [r7, #8]
 8104d52:	4613      	mov	r3, r2
 8104d54:	71fb      	strb	r3, [r7, #7]
    const auto subSID = static_cast<DynamicallyAssignDataSubSID>(dataPayload[0]);
 8104d56:	68bb      	ldr	r3, [r7, #8]
 8104d58:	781b      	ldrb	r3, [r3, #0]
 8104d5a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    switch(subSID)
 8104d5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8104d62:	2b01      	cmp	r3, #1
 8104d64:	d065      	beq.n	8104e32 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0xea>
 8104d66:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8104d6a:	2b03      	cmp	r3, #3
 8104d6c:	d17b      	bne.n	8104e66 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x11e>
    {
        case DynamicallyAssignDataSubSID::REQUEST_FIRST:
        {
            const size_t totalUDSRequestSize = APIDoIP::secondReqDynDataSize + 6;
 8104d6e:	2310      	movs	r3, #16
 8104d70:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8104d72:	2300      	movs	r3, #0
 8104d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8104d76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8104d7a:	2200      	movs	r2, #0
 8104d7c:	601a      	str	r2, [r3, #0]
 8104d7e:	605a      	str	r2, [r3, #4]
 8104d80:	609a      	str	r2, [r3, #8]
            // response for the first dynamic assign sequence, so send next dynamic assign sequence packet

            auto identifierEntry = APIDoIP::dataIdentifierMap.find(currently_processed_request);
 8104d82:	68fb      	ldr	r3, [r7, #12]
 8104d84:	330c      	adds	r3, #12
 8104d86:	4619      	mov	r1, r3
 8104d88:	4839      	ldr	r0, [pc, #228]	@ (8104e70 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x128>)
 8104d8a:	f000 f937 	bl	8104ffc <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>
 8104d8e:	4603      	mov	r3, r0
 8104d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if(identifierEntry == APIDoIP::dataIdentifierMap.end())
 8104d92:	4837      	ldr	r0, [pc, #220]	@ (8104e70 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x128>)
 8104d94:	f000 f941 	bl	810501a <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>
 8104d98:	4603      	mov	r3, r0
 8104d9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8104d9c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8104da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8104da4:	4611      	mov	r1, r2
 8104da6:	4618      	mov	r0, r3
 8104da8:	f7fd f9dc 	bl	8102164 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 8104dac:	4603      	mov	r3, r0
 8104dae:	2b00      	cmp	r3, #0
 8104db0:	d009      	beq.n	8104dc6 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x7e>
            {
                LOG_DEBUG("[FATAL ERROR] currently processed request invalid: %d", currently_processed_request);
 8104db2:	f7fc f8e5 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104db6:	68fb      	ldr	r3, [r7, #12]
 8104db8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8104dbc:	461a      	mov	r2, r3
 8104dbe:	492d      	ldr	r1, [pc, #180]	@ (8104e74 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x12c>)
 8104dc0:	f7fc f906 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
                return;
 8104dc4:	e050      	b.n	8104e68 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            }
            auto idenidentifierAttributes = identifierEntry->second;
 8104dc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8104dca:	4618      	mov	r0, r3
 8104dcc:	f000 f932 	bl	8105034 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>
 8104dd0:	4602      	mov	r2, r0
 8104dd2:	f107 0320 	add.w	r3, r7, #32
 8104dd6:	3204      	adds	r2, #4
 8104dd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8104dda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if(!std::holds_alternative<EDynamicDataIndentifierRequestCode>(idenidentifierAttributes.first))
 8104dde:	f107 0320 	add.w	r3, r7, #32
 8104de2:	4618      	mov	r0, r3
 8104de4:	f7ff ff90 	bl	8104d08 <_ZSt17holds_alternativeI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EEbRKSt7variantIJDpT0_EE>
 8104de8:	4603      	mov	r3, r0
 8104dea:	f083 0301 	eor.w	r3, r3, #1
 8104dee:	b2db      	uxtb	r3, r3
 8104df0:	2b00      	cmp	r3, #0
 8104df2:	d009      	beq.n	8104e08 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0xc0>
            {
                LOG_DEBUG("[FATAL ERROR] currently processed request has wrong DID assignment: %d", currently_processed_request);
 8104df4:	f7fc f8c4 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104df8:	68fb      	ldr	r3, [r7, #12]
 8104dfa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8104dfe:	461a      	mov	r2, r3
 8104e00:	491d      	ldr	r1, [pc, #116]	@ (8104e78 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x130>)
 8104e02:	f7fc f8e5 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
                return;
 8104e06:	e02f      	b.n	8104e68 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            }
            APIDoIP::prepareSecondRequestForDynamicData(payloadToSend, sourceEcuAddr, std::get<EDynamicDataIndentifierRequestCode>(idenidentifierAttributes.first)); //TODO BATTERY_VOLTAGE na sztywno
 8104e08:	f107 0320 	add.w	r3, r7, #32
 8104e0c:	4618      	mov	r0, r3
 8104e0e:	f000 f920 	bl	8105052 <_ZSt3getI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EERT_RSt7variantIJDpT0_EE>
 8104e12:	4603      	mov	r3, r0
 8104e14:	681a      	ldr	r2, [r3, #0]
 8104e16:	79f9      	ldrb	r1, [r7, #7]
 8104e18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8104e1c:	4618      	mov	r0, r3
 8104e1e:	f7fe fbff 	bl	8103620 <_ZN7APIDoIP34prepareSecondRequestForDynamicDataEPh11EECUAddress34EDynamicDataIndentifierRequestCode>
            tcpSend(payloadToSend, totalUDSRequestSize, true);
 8104e22:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8104e26:	2301      	movs	r3, #1
 8104e28:	2210      	movs	r2, #16
 8104e2a:	68f8      	ldr	r0, [r7, #12]
 8104e2c:	f7ff feaa 	bl	8104b84 <_ZN17ConnectionManager7tcpSendEPhjb>
 8104e30:	e01a      	b.n	8104e68 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
            break;
        }
        case DynamicallyAssignDataSubSID::REQUEST_ASSIGN:
        {
            const size_t totalUDSRequestSize = APIDoIP::dataReqDataSize + 6;
 8104e32:	230b      	movs	r3, #11
 8104e34:	647b      	str	r3, [r7, #68]	@ 0x44
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8104e36:	2300      	movs	r3, #0
 8104e38:	617b      	str	r3, [r7, #20]
 8104e3a:	f107 0318 	add.w	r3, r7, #24
 8104e3e:	2200      	movs	r2, #0
 8104e40:	601a      	str	r2, [r3, #0]
 8104e42:	f8c3 2003 	str.w	r2, [r3, #3]
            // response for the second dynamic assign sequence, so send request for data
            APIDoIP::prepareDataRequest(payloadToSend, sourceEcuAddr, EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0);
 8104e46:	79f9      	ldrb	r1, [r7, #7]
 8104e48:	f107 0314 	add.w	r3, r7, #20
 8104e4c:	f44f 4273 	mov.w	r2, #62208	@ 0xf300
 8104e50:	4618      	mov	r0, r3
 8104e52:	f7fe fb6d 	bl	8103530 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>
            tcpSend(payloadToSend, totalUDSRequestSize, true);
 8104e56:	f107 0114 	add.w	r1, r7, #20
 8104e5a:	2301      	movs	r3, #1
 8104e5c:	220b      	movs	r2, #11
 8104e5e:	68f8      	ldr	r0, [r7, #12]
 8104e60:	f7ff fe90 	bl	8104b84 <_ZN17ConnectionManager7tcpSendEPhjb>
            break;
 8104e64:	e000      	b.n	8104e68 <_ZN17ConnectionManager37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x120>
        }
        default:
            break;
 8104e66:	bf00      	nop
    }
}
 8104e68:	3750      	adds	r7, #80	@ 0x50
 8104e6a:	46bd      	mov	sp, r7
 8104e6c:	bd80      	pop	{r7, pc}
 8104e6e:	bf00      	nop
 8104e70:	10000248 	.word	0x10000248
 8104e74:	08125408 	.word	0x08125408
 8104e78:	08125440 	.word	0x08125440

08104e7c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>:

void ConnectionManager::sendRequestForData(APIDoIP::EDoIPRequest request)
{
 8104e7c:	b590      	push	{r4, r7, lr}
 8104e7e:	b091      	sub	sp, #68	@ 0x44
 8104e80:	af00      	add	r7, sp, #0
 8104e82:	6078      	str	r0, [r7, #4]
 8104e84:	460b      	mov	r3, r1
 8104e86:	70fb      	strb	r3, [r7, #3]
    currently_processed_request = request;
 8104e88:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	731a      	strb	r2, [r3, #12]
    auto identifierEntry = APIDoIP::dataIdentifierMap.find(request);
 8104e90:	1cfb      	adds	r3, r7, #3
 8104e92:	4619      	mov	r1, r3
 8104e94:	4837      	ldr	r0, [pc, #220]	@ (8104f74 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf8>)
 8104e96:	f000 f8b1 	bl	8104ffc <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>
 8104e9a:	4603      	mov	r3, r0
 8104e9c:	633b      	str	r3, [r7, #48]	@ 0x30
    if(identifierEntry == APIDoIP::dataIdentifierMap.end())
 8104e9e:	4835      	ldr	r0, [pc, #212]	@ (8104f74 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf8>)
 8104ea0:	f000 f8bb 	bl	810501a <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>
 8104ea4:	4603      	mov	r3, r0
 8104ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8104ea8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8104eac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8104eb0:	4611      	mov	r1, r2
 8104eb2:	4618      	mov	r0, r3
 8104eb4:	f7fd f956 	bl	8102164 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 8104eb8:	4603      	mov	r3, r0
 8104eba:	2b00      	cmp	r3, #0
 8104ebc:	d009      	beq.n	8104ed2 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0x56>
    {
        LOG_DEBUG("Requested data identifier invalid: %d", request);
 8104ebe:	f7fc f85f 	bl	8100f80 <_ZN10LogPrinter8instanceEv>
 8104ec2:	4603      	mov	r3, r0
 8104ec4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8104ec8:	492b      	ldr	r1, [pc, #172]	@ (8104f78 <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xfc>)
 8104eca:	4618      	mov	r0, r3
 8104ecc:	f7fc f880 	bl	8100fd0 <_ZN10LogPrinter10printDebugEPKcz>
 8104ed0:	e04c      	b.n	8104f6c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf0>
        return;
    }

    auto idenidentifierAttributes = identifierEntry->second;
 8104ed2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8104ed6:	4618      	mov	r0, r3
 8104ed8:	f000 f8ac 	bl	8105034 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>
 8104edc:	4602      	mov	r2, r0
 8104ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104ee2:	3204      	adds	r2, #4
 8104ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8104ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(std::holds_alternative<EUDSDID>(idenidentifierAttributes.first))
 8104eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104eee:	4618      	mov	r0, r3
 8104ef0:	f000 f8bd 	bl	810506e <_ZSt17holds_alternativeI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEbRKSt7variantIJDpT0_EE>
 8104ef4:	4603      	mov	r3, r0
 8104ef6:	2b00      	cmp	r3, #0
 8104ef8:	d020      	beq.n	8104f3c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xc0>
    {
        const size_t totalUDSRequestSize = APIDoIP::dataReqDataSize + 6;
 8104efa:	230b      	movs	r3, #11
 8104efc:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8104efe:	2300      	movs	r3, #0
 8104f00:	61bb      	str	r3, [r7, #24]
 8104f02:	f107 031c 	add.w	r3, r7, #28
 8104f06:	2200      	movs	r2, #0
 8104f08:	601a      	str	r2, [r3, #0]
 8104f0a:	f8c3 2003 	str.w	r2, [r3, #3]
        APIDoIP::prepareDataRequest(payloadToSend, idenidentifierAttributes.second, std::get<EUDSDID>(idenidentifierAttributes.first));
 8104f0e:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8104f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104f16:	4618      	mov	r0, r3
 8104f18:	f000 f8bd 	bl	8105096 <_ZSt3getI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEERT_RSt7variantIJDpT0_EE>
 8104f1c:	4603      	mov	r3, r0
 8104f1e:	881a      	ldrh	r2, [r3, #0]
 8104f20:	f107 0318 	add.w	r3, r7, #24
 8104f24:	4621      	mov	r1, r4
 8104f26:	4618      	mov	r0, r3
 8104f28:	f7fe fb02 	bl	8103530 <_ZN7APIDoIP18prepareDataRequestEPh11EECUAddress7EUDSDID>
        tcpSend(payloadToSend, totalUDSRequestSize, false);
 8104f2c:	f107 0118 	add.w	r1, r7, #24
 8104f30:	2300      	movs	r3, #0
 8104f32:	220b      	movs	r2, #11
 8104f34:	6878      	ldr	r0, [r7, #4]
 8104f36:	f7ff fe25 	bl	8104b84 <_ZN17ConnectionManager7tcpSendEPhjb>
 8104f3a:	e017      	b.n	8104f6c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE+0xf0>
    }
    else
    {
        const size_t totalUDSRequestSize = APIDoIP::firstReqDynDataSize + 6;
 8104f3c:	230c      	movs	r3, #12
 8104f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8104f40:	2300      	movs	r3, #0
 8104f42:	60fb      	str	r3, [r7, #12]
 8104f44:	f107 0310 	add.w	r3, r7, #16
 8104f48:	2200      	movs	r2, #0
 8104f4a:	601a      	str	r2, [r3, #0]
 8104f4c:	605a      	str	r2, [r3, #4]
        APIDoIP::prepareFirstRequestForDynamicData(payloadToSend, idenidentifierAttributes.second);
 8104f4e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8104f52:	f107 030c 	add.w	r3, r7, #12
 8104f56:	4611      	mov	r1, r2
 8104f58:	4618      	mov	r0, r3
 8104f5a:	f7fe fb26 	bl	81035aa <_ZN7APIDoIP33prepareFirstRequestForDynamicDataEPh11EECUAddress>
        tcpSend(payloadToSend, totalUDSRequestSize, false);
 8104f5e:	f107 010c 	add.w	r1, r7, #12
 8104f62:	2300      	movs	r3, #0
 8104f64:	220c      	movs	r2, #12
 8104f66:	6878      	ldr	r0, [r7, #4]
 8104f68:	f7ff fe0c 	bl	8104b84 <_ZN17ConnectionManager7tcpSendEPhjb>
    }
}
 8104f6c:	3744      	adds	r7, #68	@ 0x44
 8104f6e:	46bd      	mov	sp, r7
 8104f70:	bd90      	pop	{r4, r7, pc}
 8104f72:	bf00      	nop
 8104f74:	10000248 	.word	0x10000248
 8104f78:	08125488 	.word	0x08125488

08104f7c <_ZN17ConnectionManager18processUdpDicoveryEv>:

void ConnectionManager::processUdpDicovery()
{
 8104f7c:	b580      	push	{r7, lr}
 8104f7e:	b082      	sub	sp, #8
 8104f80:	af00      	add	r7, sp, #0
 8104f82:	6078      	str	r0, [r7, #4]
    sendSSDP();
 8104f84:	6878      	ldr	r0, [r7, #4]
 8104f86:	f7ff f835 	bl	8103ff4 <_ZN17ConnectionManager8sendSSDPEv>
    sendSLP();
 8104f8a:	6878      	ldr	r0, [r7, #4]
 8104f8c:	f7ff f886 	bl	810409c <_ZN17ConnectionManager7sendSLPEv>
    sendDoIPInit();
 8104f90:	6878      	ldr	r0, [r7, #4]
 8104f92:	f7ff f8f1 	bl	8104178 <_ZN17ConnectionManager12sendDoIPInitEv>
    osDelay(300);
 8104f96:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8104f9a:	f00e fab6 	bl	811350a <osDelay>
 8104f9e:	bf00      	nop
 8104fa0:	3708      	adds	r7, #8
 8104fa2:	46bd      	mov	sp, r7
 8104fa4:	bd80      	pop	{r7, pc}

08104fa6 <_ZNKSt8optionalI8SMessageE9has_valueEv>:
      constexpr bool has_value() const noexcept
 8104fa6:	b580      	push	{r7, lr}
 8104fa8:	b082      	sub	sp, #8
 8104faa:	af00      	add	r7, sp, #0
 8104fac:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8104fae:	6878      	ldr	r0, [r7, #4]
 8104fb0:	f7ff fe45 	bl	8104c3e <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 8104fb4:	4603      	mov	r3, r0
 8104fb6:	4618      	mov	r0, r3
 8104fb8:	3708      	adds	r7, #8
 8104fba:	46bd      	mov	sp, r7
 8104fbc:	bd80      	pop	{r7, pc}

08104fbe <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8104fbe:	b580      	push	{r7, lr}
 8104fc0:	b082      	sub	sp, #8
 8104fc2:	af00      	add	r7, sp, #0
 8104fc4:	6078      	str	r0, [r7, #4]
	__glibcxx_assert(this->_M_is_engaged());
 8104fc6:	f7fc f94f 	bl	8101268 <__is_constant_evaluated>
 8104fca:	4603      	mov	r3, r0
 8104fcc:	2b00      	cmp	r3, #0
 8104fce:	d00a      	beq.n	8104fe6 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x28>
 8104fd0:	6878      	ldr	r0, [r7, #4]
 8104fd2:	f7ff fe34 	bl	8104c3e <_ZNKSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 8104fd6:	4603      	mov	r3, r0
 8104fd8:	f083 0301 	eor.w	r3, r3, #1
 8104fdc:	b2db      	uxtb	r3, r3
 8104fde:	2b00      	cmp	r3, #0
 8104fe0:	d001      	beq.n	8104fe6 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x28>
 8104fe2:	2301      	movs	r3, #1
 8104fe4:	e000      	b.n	8104fe8 <_ZNSt19_Optional_base_implI8SMessageSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x2a>
 8104fe6:	2300      	movs	r3, #0
 8104fe8:	2b00      	cmp	r3, #0
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	4618      	mov	r0, r3
 8104fee:	f000 f860 	bl	81050b2 <_ZNSt22_Optional_payload_baseI8SMessageE6_M_getEv>
 8104ff2:	4603      	mov	r3, r0
      }
 8104ff4:	4618      	mov	r0, r3
 8104ff6:	3708      	adds	r7, #8
 8104ff8:	46bd      	mov	sp, r7
 8104ffa:	bd80      	pop	{r7, pc}

08104ffc <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE4findERSD_>:
	find(const _Kt& __x) -> decltype(_M_h._M_find_tr(__x))
	{ return _M_h._M_find_tr(__x); }
#endif

      const_iterator
      find(const key_type& __x) const
 8104ffc:	b580      	push	{r7, lr}
 8104ffe:	b082      	sub	sp, #8
 8105000:	af00      	add	r7, sp, #0
 8105002:	6078      	str	r0, [r7, #4]
 8105004:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	6839      	ldr	r1, [r7, #0]
 810500a:	4618      	mov	r0, r3
 810500c:	f000 f85c 	bl	81050c8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>
 8105010:	4603      	mov	r3, r0
 8105012:	4618      	mov	r0, r3
 8105014:	3708      	adds	r7, #8
 8105016:	46bd      	mov	sp, r7
 8105018:	bd80      	pop	{r7, pc}

0810501a <_ZNKSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEE3endEv>:
      end() const noexcept
 810501a:	b580      	push	{r7, lr}
 810501c:	b082      	sub	sp, #8
 810501e:	af00      	add	r7, sp, #0
 8105020:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	4618      	mov	r0, r3
 8105026:	f000 f8ad 	bl	8105184 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 810502a:	4603      	mov	r3, r0
 810502c:	4618      	mov	r0, r3
 810502e:	3708      	adds	r7, #8
 8105030:	46bd      	mov	sp, r7
 8105032:	bd80      	pop	{r7, pc}

08105034 <_ZNKSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEptEv>:
      operator->() const noexcept
 8105034:	b580      	push	{r7, lr}
 8105036:	b082      	sub	sp, #8
 8105038:	af00      	add	r7, sp, #0
 810503a:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	3304      	adds	r3, #4
 8105042:	4618      	mov	r0, r3
 8105044:	f7fc ff68 	bl	8101f18 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE9_M_valptrEv>
 8105048:	4603      	mov	r3, r0
 810504a:	4618      	mov	r0, r3
 810504c:	3708      	adds	r7, #8
 810504e:	46bd      	mov	sp, r7
 8105050:	bd80      	pop	{r7, pc}

08105052 <_ZSt3getI34EDynamicDataIndentifierRequestCodeJ7EUDSDIDS0_EERT_RSt7variantIJDpT0_EE>:
    get(variant<_Types...>& __v)
 8105052:	b580      	push	{r7, lr}
 8105054:	b084      	sub	sp, #16
 8105056:	af00      	add	r7, sp, #0
 8105058:	6078      	str	r0, [r7, #4]
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
 810505a:	2301      	movs	r3, #1
 810505c:	60fb      	str	r3, [r7, #12]
      return std::get<__n>(__v);
 810505e:	6878      	ldr	r0, [r7, #4]
 8105060:	f000 f8bf 	bl	81051e2 <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>
 8105064:	4603      	mov	r3, r0
    }
 8105066:	4618      	mov	r0, r3
 8105068:	3710      	adds	r7, #16
 810506a:	46bd      	mov	sp, r7
 810506c:	bd80      	pop	{r7, pc}

0810506e <_ZSt17holds_alternativeI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEbRKSt7variantIJDpT0_EE>:
    holds_alternative(const variant<_Types...>& __v) noexcept
 810506e:	b590      	push	{r4, r7, lr}
 8105070:	b083      	sub	sp, #12
 8105072:	af00      	add	r7, sp, #0
 8105074:	6078      	str	r0, [r7, #4]
      return __v.index() == std::__find_uniq_type_in_pack<_Tp, _Types...>();
 8105076:	6878      	ldr	r0, [r7, #4]
 8105078:	f7ff fe5a 	bl	8104d30 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 810507c:	4604      	mov	r4, r0
 810507e:	f7fe fef7 	bl	8103e70 <_ZSt24__find_uniq_type_in_packI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEEjv>
 8105082:	4603      	mov	r3, r0
 8105084:	429c      	cmp	r4, r3
 8105086:	bf0c      	ite	eq
 8105088:	2301      	moveq	r3, #1
 810508a:	2300      	movne	r3, #0
 810508c:	b2db      	uxtb	r3, r3
    }
 810508e:	4618      	mov	r0, r3
 8105090:	370c      	adds	r7, #12
 8105092:	46bd      	mov	sp, r7
 8105094:	bd90      	pop	{r4, r7, pc}

08105096 <_ZSt3getI7EUDSDIDJS0_34EDynamicDataIndentifierRequestCodeEERT_RSt7variantIJDpT0_EE>:
    get(variant<_Types...>& __v)
 8105096:	b580      	push	{r7, lr}
 8105098:	b084      	sub	sp, #16
 810509a:	af00      	add	r7, sp, #0
 810509c:	6078      	str	r0, [r7, #4]
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
 810509e:	2300      	movs	r3, #0
 81050a0:	60fb      	str	r3, [r7, #12]
      return std::get<__n>(__v);
 81050a2:	6878      	ldr	r0, [r7, #4]
 81050a4:	f000 f8db 	bl	810525e <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>
 81050a8:	4603      	mov	r3, r0
    }
 81050aa:	4618      	mov	r0, r3
 81050ac:	3710      	adds	r7, #16
 81050ae:	46bd      	mov	sp, r7
 81050b0:	bd80      	pop	{r7, pc}

081050b2 <_ZNSt22_Optional_payload_baseI8SMessageE6_M_getEv>:
      _M_get() noexcept
 81050b2:	b480      	push	{r7}
 81050b4:	b083      	sub	sp, #12
 81050b6:	af00      	add	r7, sp, #0
 81050b8:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	4618      	mov	r0, r3
 81050be:	370c      	adds	r7, #12
 81050c0:	46bd      	mov	sp, r7
 81050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050c6:	4770      	bx	lr

081050c8 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81050c8:	b590      	push	{r4, r7, lr}
 81050ca:	b089      	sub	sp, #36	@ 0x24
 81050cc:	af00      	add	r7, sp, #0
 81050ce:	6078      	str	r0, [r7, #4]
 81050d0:	6039      	str	r1, [r7, #0]
      if (size() <= __small_size_threshold())
 81050d2:	6878      	ldr	r0, [r7, #4]
 81050d4:	f7fd f811 	bl	81020fa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 81050d8:	4604      	mov	r4, r0
 81050da:	f7fd f81a 	bl	8102112 <_ZNSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 81050de:	4603      	mov	r3, r0
 81050e0:	429c      	cmp	r4, r3
 81050e2:	bf94      	ite	ls
 81050e4:	2301      	movls	r3, #1
 81050e6:	2300      	movhi	r3, #0
 81050e8:	b2db      	uxtb	r3, r3
 81050ea:	2b00      	cmp	r3, #0
 81050ec:	d02e      	beq.n	810514c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x84>
	  for (auto __it = begin(); __it != end(); ++__it)
 81050ee:	6878      	ldr	r0, [r7, #4]
 81050f0:	f000 f8d3 	bl	810529a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 81050f4:	4603      	mov	r3, r0
 81050f6:	60fb      	str	r3, [r7, #12]
 81050f8:	e010      	b.n	810511c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x54>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 81050fa:	68fb      	ldr	r3, [r7, #12]
 81050fc:	3304      	adds	r3, #4
 81050fe:	461a      	mov	r2, r3
 8105100:	6839      	ldr	r1, [r7, #0]
 8105102:	6878      	ldr	r0, [r7, #4]
 8105104:	f000 f8e9 	bl	81052da <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>
 8105108:	4603      	mov	r3, r0
 810510a:	2b00      	cmp	r3, #0
 810510c:	d001      	beq.n	8105112 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x4a>
	      return __it;
 810510e:	68fb      	ldr	r3, [r7, #12]
 8105110:	e034      	b.n	810517c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0xb4>
	  for (auto __it = begin(); __it != end(); ++__it)
 8105112:	f107 030c 	add.w	r3, r7, #12
 8105116:	4618      	mov	r0, r3
 8105118:	f000 f8d2 	bl	81052c0 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>
 810511c:	6878      	ldr	r0, [r7, #4]
 810511e:	f000 f831 	bl	8105184 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8105122:	4603      	mov	r3, r0
 8105124:	613b      	str	r3, [r7, #16]
 8105126:	f107 0210 	add.w	r2, r7, #16
 810512a:	f107 030c 	add.w	r3, r7, #12
 810512e:	4611      	mov	r1, r2
 8105130:	4618      	mov	r0, r3
 8105132:	f7fd f817 	bl	8102164 <_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEESE_>
 8105136:	4603      	mov	r3, r0
 8105138:	f083 0301 	eor.w	r3, r3, #1
 810513c:	b2db      	uxtb	r3, r3
 810513e:	2b00      	cmp	r3, #0
 8105140:	d1db      	bne.n	81050fa <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0x32>
	  return end();
 8105142:	6878      	ldr	r0, [r7, #4]
 8105144:	f000 f81e 	bl	8105184 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8105148:	4603      	mov	r3, r0
 810514a:	e017      	b.n	810517c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS3_+0xb4>
      __hash_code __code = this->_M_hash_code(__k);
 810514c:	6839      	ldr	r1, [r7, #0]
 810514e:	6878      	ldr	r0, [r7, #4]
 8105150:	f7fd fd85 	bl	8102c5e <_ZNKSt8__detail15_Hash_code_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8105154:	61f8      	str	r0, [r7, #28]
      std::size_t __bkt = _M_bucket_index(__code);
 8105156:	69f9      	ldr	r1, [r7, #28]
 8105158:	6878      	ldr	r0, [r7, #4]
 810515a:	f7fd f872 	bl	8102242 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 810515e:	61b8      	str	r0, [r7, #24]
      return const_iterator(_M_find_node(__bkt, __k, __code));
 8105160:	69fb      	ldr	r3, [r7, #28]
 8105162:	683a      	ldr	r2, [r7, #0]
 8105164:	69b9      	ldr	r1, [r7, #24]
 8105166:	6878      	ldr	r0, [r7, #4]
 8105168:	f000 f8d7 	bl	810531a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 810516c:	4602      	mov	r2, r0
 810516e:	f107 0314 	add.w	r3, r7, #20
 8105172:	4611      	mov	r1, r2
 8105174:	4618      	mov	r0, r3
 8105176:	f000 f8e9 	bl	810534c <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 810517a:	697b      	ldr	r3, [r7, #20]
    }
 810517c:	4618      	mov	r0, r3
 810517e:	3724      	adds	r7, #36	@ 0x24
 8105180:	46bd      	mov	sp, r7
 8105182:	bd90      	pop	{r4, r7, pc}

08105184 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() const noexcept
 8105184:	b580      	push	{r7, lr}
 8105186:	b084      	sub	sp, #16
 8105188:	af00      	add	r7, sp, #0
 810518a:	6078      	str	r0, [r7, #4]
      { return const_iterator(nullptr); }
 810518c:	f107 030c 	add.w	r3, r7, #12
 8105190:	2100      	movs	r1, #0
 8105192:	4618      	mov	r0, r3
 8105194:	f000 f8da 	bl	810534c <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8105198:	68fb      	ldr	r3, [r7, #12]
 810519a:	4618      	mov	r0, r3
 810519c:	3710      	adds	r7, #16
 810519e:	46bd      	mov	sp, r7
 81051a0:	bd80      	pop	{r7, pc}

081051a2 <_ZNSt8__detail9__variant7__get_nILj1ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>:
    __get_n(_Union&& __u) noexcept
 81051a2:	b580      	push	{r7, lr}
 81051a4:	b082      	sub	sp, #8
 81051a6:	af00      	add	r7, sp, #0
 81051a8:	6078      	str	r0, [r7, #4]
	return std::forward<_Union>(__u)._M_rest._M_first._M_get();
 81051aa:	6878      	ldr	r0, [r7, #4]
 81051ac:	f000 f8f8 	bl	81053a0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 81051b0:	4603      	mov	r3, r0
 81051b2:	4618      	mov	r0, r3
 81051b4:	f000 f8ff 	bl	81053b6 <_ZNRSt8__detail9__variant14_UninitializedI34EDynamicDataIndentifierRequestCodeLb1EE6_M_getEv>
 81051b8:	4603      	mov	r3, r0
    }
 81051ba:	4618      	mov	r0, r3
 81051bc:	3708      	adds	r7, #8
 81051be:	46bd      	mov	sp, r7
 81051c0:	bd80      	pop	{r7, pc}

081051c2 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 81051c2:	b580      	push	{r7, lr}
 81051c4:	b082      	sub	sp, #8
 81051c6:	af00      	add	r7, sp, #0
 81051c8:	6078      	str	r0, [r7, #4]
    { return __variant::__get_n<_Np>(std::forward<_Variant>(__v)._M_u); }
 81051ca:	6878      	ldr	r0, [r7, #4]
 81051cc:	f000 f8dd 	bl	810538a <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>
 81051d0:	4603      	mov	r3, r0
 81051d2:	4618      	mov	r0, r3
 81051d4:	f7ff ffe5 	bl	81051a2 <_ZNSt8__detail9__variant7__get_nILj1ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>
 81051d8:	4603      	mov	r3, r0
 81051da:	4618      	mov	r0, r3
 81051dc:	3708      	adds	r7, #8
 81051de:	46bd      	mov	sp, r7
 81051e0:	bd80      	pop	{r7, pc}

081051e2 <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>:
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
 81051e2:	b580      	push	{r7, lr}
 81051e4:	b082      	sub	sp, #8
 81051e6:	af00      	add	r7, sp, #0
 81051e8:	6078      	str	r0, [r7, #4]
    {
      static_assert(_Np < sizeof...(_Types),
		    "The index must be in [0, number of alternatives)");
      if (__v.index() != _Np)
 81051ea:	6878      	ldr	r0, [r7, #4]
 81051ec:	f7ff fda0 	bl	8104d30 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 81051f0:	4603      	mov	r3, r0
 81051f2:	2b01      	cmp	r3, #1
 81051f4:	bf14      	ite	ne
 81051f6:	2301      	movne	r3, #1
 81051f8:	2300      	moveq	r3, #0
 81051fa:	b2db      	uxtb	r3, r3
 81051fc:	2b00      	cmp	r3, #0
 81051fe:	d006      	beq.n	810520e <_ZSt3getILj1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_+0x2c>
	__throw_bad_variant_access(__v.valueless_by_exception());
 8105200:	6878      	ldr	r0, [r7, #4]
 8105202:	f000 f8b2 	bl	810536a <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>
 8105206:	4603      	mov	r3, r0
 8105208:	4618      	mov	r0, r3
 810520a:	f7fe fded 	bl	8103de8 <_ZSt26__throw_bad_variant_accessb>
      return __detail::__variant::__get<_Np>(__v);
 810520e:	6878      	ldr	r0, [r7, #4]
 8105210:	f7ff ffd7 	bl	81051c2 <_ZNSt8__detail9__variant5__getILj1ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>
 8105214:	4603      	mov	r3, r0
    }
 8105216:	4618      	mov	r0, r3
 8105218:	3708      	adds	r7, #8
 810521a:	46bd      	mov	sp, r7
 810521c:	bd80      	pop	{r7, pc}

0810521e <_ZNSt8__detail9__variant7__get_nILj0ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>:
    __get_n(_Union&& __u) noexcept
 810521e:	b580      	push	{r7, lr}
 8105220:	b082      	sub	sp, #8
 8105222:	af00      	add	r7, sp, #0
 8105224:	6078      	str	r0, [r7, #4]
	return std::forward<_Union>(__u)._M_first._M_get();
 8105226:	6878      	ldr	r0, [r7, #4]
 8105228:	f000 f8ba 	bl	81053a0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 810522c:	4603      	mov	r3, r0
 810522e:	4618      	mov	r0, r3
 8105230:	f000 f8cc 	bl	81053cc <_ZNRSt8__detail9__variant14_UninitializedI7EUDSDIDLb1EE6_M_getEv>
 8105234:	4603      	mov	r3, r0
    }
 8105236:	4618      	mov	r0, r3
 8105238:	3708      	adds	r7, #8
 810523a:	46bd      	mov	sp, r7
 810523c:	bd80      	pop	{r7, pc}

0810523e <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>:
    __get(_Variant&& __v) noexcept
 810523e:	b580      	push	{r7, lr}
 8105240:	b082      	sub	sp, #8
 8105242:	af00      	add	r7, sp, #0
 8105244:	6078      	str	r0, [r7, #4]
    { return __variant::__get_n<_Np>(std::forward<_Variant>(__v)._M_u); }
 8105246:	6878      	ldr	r0, [r7, #4]
 8105248:	f000 f89f 	bl	810538a <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810524c:	4603      	mov	r3, r0
 810524e:	4618      	mov	r0, r3
 8105250:	f7ff ffe5 	bl	810521e <_ZNSt8__detail9__variant7__get_nILj0ERNS0_15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEEDcOT0_>
 8105254:	4603      	mov	r3, r0
 8105256:	4618      	mov	r0, r3
 8105258:	3708      	adds	r7, #8
 810525a:	46bd      	mov	sp, r7
 810525c:	bd80      	pop	{r7, pc}

0810525e <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_>:
    get(variant<_Types...>& __v)
 810525e:	b580      	push	{r7, lr}
 8105260:	b082      	sub	sp, #8
 8105262:	af00      	add	r7, sp, #0
 8105264:	6078      	str	r0, [r7, #4]
      if (__v.index() != _Np)
 8105266:	6878      	ldr	r0, [r7, #4]
 8105268:	f7ff fd62 	bl	8104d30 <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE5indexEv>
 810526c:	4603      	mov	r3, r0
 810526e:	2b00      	cmp	r3, #0
 8105270:	bf14      	ite	ne
 8105272:	2301      	movne	r3, #1
 8105274:	2300      	moveq	r3, #0
 8105276:	b2db      	uxtb	r3, r3
 8105278:	2b00      	cmp	r3, #0
 810527a:	d006      	beq.n	810528a <_ZSt3getILj0EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS6_+0x2c>
	__throw_bad_variant_access(__v.valueless_by_exception());
 810527c:	6878      	ldr	r0, [r7, #4]
 810527e:	f000 f874 	bl	810536a <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>
 8105282:	4603      	mov	r3, r0
 8105284:	4618      	mov	r0, r3
 8105286:	f7fe fdaf 	bl	8103de8 <_ZSt26__throw_bad_variant_accessb>
      return __detail::__variant::__get<_Np>(__v);
 810528a:	6878      	ldr	r0, [r7, #4]
 810528c:	f7ff ffd7 	bl	810523e <_ZNSt8__detail9__variant5__getILj0ERSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEDcOT0_>
 8105290:	4603      	mov	r3, r0
    }
 8105292:	4618      	mov	r0, r3
 8105294:	3708      	adds	r7, #8
 8105296:	46bd      	mov	sp, r7
 8105298:	bd80      	pop	{r7, pc}

0810529a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() const noexcept
 810529a:	b580      	push	{r7, lr}
 810529c:	b084      	sub	sp, #16
 810529e:	af00      	add	r7, sp, #0
 81052a0:	6078      	str	r0, [r7, #4]
      { return const_iterator(_M_begin()); }
 81052a2:	6878      	ldr	r0, [r7, #4]
 81052a4:	f7fc fbb2 	bl	8101a0c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 81052a8:	4602      	mov	r2, r0
 81052aa:	f107 030c 	add.w	r3, r7, #12
 81052ae:	4611      	mov	r1, r2
 81052b0:	4618      	mov	r0, r3
 81052b2:	f000 f84b 	bl	810534c <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 81052b6:	68fb      	ldr	r3, [r7, #12]
 81052b8:	4618      	mov	r0, r3
 81052ba:	3710      	adds	r7, #16
 81052bc:	46bd      	mov	sp, r7
 81052be:	bd80      	pop	{r7, pc}

081052c0 <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEppEv>:
      operator++() noexcept
 81052c0:	b580      	push	{r7, lr}
 81052c2:	b082      	sub	sp, #8
 81052c4:	af00      	add	r7, sp, #0
 81052c6:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	4618      	mov	r0, r3
 81052cc:	f7fd f931 	bl	8102532 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_incrEv>
	return *this;
 81052d0:	687b      	ldr	r3, [r7, #4]
      }
 81052d2:	4618      	mov	r0, r3
 81052d4:	3708      	adds	r7, #8
 81052d6:	46bd      	mov	sp, r7
 81052d8:	bd80      	pop	{r7, pc}

081052da <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>:
      _M_key_equals(const _Key& __k,
 81052da:	b590      	push	{r4, r7, lr}
 81052dc:	b087      	sub	sp, #28
 81052de:	af00      	add	r7, sp, #0
 81052e0:	60f8      	str	r0, [r7, #12]
 81052e2:	60b9      	str	r1, [r7, #8]
 81052e4:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 81052e6:	68f8      	ldr	r0, [r7, #12]
 81052e8:	f7fd f933 	bl	8102552 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 81052ec:	4604      	mov	r4, r0
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	4618      	mov	r0, r3
 81052f2:	f7fd f93a 	bl	810256a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEE4_M_vEv>
 81052f6:	4602      	mov	r2, r0
 81052f8:	f107 0314 	add.w	r3, r7, #20
 81052fc:	4611      	mov	r1, r2
 81052fe:	4618      	mov	r0, r3
 8105300:	f7fc fd35 	bl	8101d6e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKN7APIDoIP12EDoIPRequestES2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEEONS0_10__1st_typeIT_E4typeEOSG_>
 8105304:	4603      	mov	r3, r0
 8105306:	461a      	mov	r2, r3
 8105308:	68b9      	ldr	r1, [r7, #8]
 810530a:	4620      	mov	r0, r4
 810530c:	f7fd f939 	bl	8102582 <_ZNKSt8equal_toIN7APIDoIP12EDoIPRequestEEclERKS1_S4_>
 8105310:	4603      	mov	r3, r0
      }
 8105312:	4618      	mov	r0, r3
 8105314:	371c      	adds	r7, #28
 8105316:	46bd      	mov	sp, r7
 8105318:	bd90      	pop	{r4, r7, pc}

0810531a <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 810531a:	b580      	push	{r7, lr}
 810531c:	b086      	sub	sp, #24
 810531e:	af00      	add	r7, sp, #0
 8105320:	60f8      	str	r0, [r7, #12]
 8105322:	60b9      	str	r1, [r7, #8]
 8105324:	607a      	str	r2, [r7, #4]
 8105326:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 8105328:	683b      	ldr	r3, [r7, #0]
 810532a:	687a      	ldr	r2, [r7, #4]
 810532c:	68b9      	ldr	r1, [r7, #8]
 810532e:	68f8      	ldr	r0, [r7, #12]
 8105330:	f000 f857 	bl	81053e2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 8105334:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8105336:	697b      	ldr	r3, [r7, #20]
 8105338:	2b00      	cmp	r3, #0
 810533a:	d002      	beq.n	8105342 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 810533c:	697b      	ldr	r3, [r7, #20]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	e000      	b.n	8105344 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 8105342:	2300      	movs	r3, #0
      }
 8105344:	4618      	mov	r0, r3
 8105346:	3718      	adds	r7, #24
 8105348:	46bd      	mov	sp, r7
 810534a:	bd80      	pop	{r7, pc}

0810534c <_ZNSt8__detail20_Node_const_iteratorISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0ELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>:
      _Node_const_iterator(__node_type* __p) noexcept
 810534c:	b580      	push	{r7, lr}
 810534e:	b082      	sub	sp, #8
 8105350:	af00      	add	r7, sp, #0
 8105352:	6078      	str	r0, [r7, #4]
 8105354:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	6839      	ldr	r1, [r7, #0]
 810535a:	4618      	mov	r0, r3
 810535c:	f7fd f9a9 	bl	81026b2 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EEC1EPNS_10_Hash_nodeISB_Lb0EEE>
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	4618      	mov	r0, r3
 8105364:	3708      	adds	r7, #8
 8105366:	46bd      	mov	sp, r7
 8105368:	bd80      	pop	{r7, pc}

0810536a <_ZNKSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE22valueless_by_exceptionEv>:
      constexpr bool valueless_by_exception() const noexcept
 810536a:	b580      	push	{r7, lr}
 810536c:	b082      	sub	sp, #8
 810536e:	af00      	add	r7, sp, #0
 8105370:	6078      	str	r0, [r7, #4]
      { return !this->_M_valid(); }
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	4618      	mov	r0, r3
 8105376:	f000 f879 	bl	810546c <_ZNKSt8__detail9__variant16_Variant_storageILb1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE8_M_validEv>
 810537a:	4603      	mov	r3, r0
 810537c:	f083 0301 	eor.w	r3, r3, #1
 8105380:	b2db      	uxtb	r3, r3
 8105382:	4618      	mov	r0, r3
 8105384:	3708      	adds	r7, #8
 8105386:	46bd      	mov	sp, r7
 8105388:	bd80      	pop	{r7, pc}

0810538a <_ZSt7forwardIRSt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810538a:	b480      	push	{r7}
 810538c:	b083      	sub	sp, #12
 810538e:	af00      	add	r7, sp, #0
 8105390:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	4618      	mov	r0, r3
 8105396:	370c      	adds	r7, #12
 8105398:	46bd      	mov	sp, r7
 810539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810539e:	4770      	bx	lr

081053a0 <_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81053a0:	b480      	push	{r7}
 81053a2:	b083      	sub	sp, #12
 81053a4:	af00      	add	r7, sp, #0
 81053a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	4618      	mov	r0, r3
 81053ac:	370c      	adds	r7, #12
 81053ae:	46bd      	mov	sp, r7
 81053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053b4:	4770      	bx	lr

081053b6 <_ZNRSt8__detail9__variant14_UninitializedI34EDynamicDataIndentifierRequestCodeLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 81053b6:	b480      	push	{r7}
 81053b8:	b083      	sub	sp, #12
 81053ba:	af00      	add	r7, sp, #0
 81053bc:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	4618      	mov	r0, r3
 81053c2:	370c      	adds	r7, #12
 81053c4:	46bd      	mov	sp, r7
 81053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053ca:	4770      	bx	lr

081053cc <_ZNRSt8__detail9__variant14_UninitializedI7EUDSDIDLb1EE6_M_getEv>:
      constexpr _Type& _M_get() & noexcept
 81053cc:	b480      	push	{r7}
 81053ce:	b083      	sub	sp, #12
 81053d0:	af00      	add	r7, sp, #0
 81053d2:	6078      	str	r0, [r7, #4]
      { return _M_storage; }
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	4618      	mov	r0, r3
 81053d8:	370c      	adds	r7, #12
 81053da:	46bd      	mov	sp, r7
 81053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053e0:	4770      	bx	lr

081053e2 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 81053e2:	b580      	push	{r7, lr}
 81053e4:	b086      	sub	sp, #24
 81053e6:	af00      	add	r7, sp, #0
 81053e8:	60f8      	str	r0, [r7, #12]
 81053ea:	60b9      	str	r1, [r7, #8]
 81053ec:	607a      	str	r2, [r7, #4]
 81053ee:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 81053f0:	68fb      	ldr	r3, [r7, #12]
 81053f2:	681a      	ldr	r2, [r3, #0]
 81053f4:	68bb      	ldr	r3, [r7, #8]
 81053f6:	009b      	lsls	r3, r3, #2
 81053f8:	4413      	add	r3, r2
 81053fa:	681b      	ldr	r3, [r3, #0]
 81053fc:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 81053fe:	697b      	ldr	r3, [r7, #20]
 8105400:	2b00      	cmp	r3, #0
 8105402:	d101      	bne.n	8105408 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 8105404:	2300      	movs	r3, #0
 8105406:	e02d      	b.n	8105464 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8105408:	697b      	ldr	r3, [r7, #20]
 810540a:	681b      	ldr	r3, [r3, #0]
 810540c:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 810540e:	693b      	ldr	r3, [r7, #16]
 8105410:	3304      	adds	r3, #4
 8105412:	683a      	ldr	r2, [r7, #0]
 8105414:	6879      	ldr	r1, [r7, #4]
 8105416:	68f8      	ldr	r0, [r7, #12]
 8105418:	f000 f833 	bl	8105482 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE>
 810541c:	4603      	mov	r3, r0
 810541e:	2b00      	cmp	r3, #0
 8105420:	d001      	beq.n	8105426 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x44>
	    return __prev_p;
 8105422:	697b      	ldr	r3, [r7, #20]
 8105424:	e01e      	b.n	8105464 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8105426:	693b      	ldr	r3, [r7, #16]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	2b00      	cmp	r3, #0
 810542c:	d00c      	beq.n	8105448 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 810542e:	6938      	ldr	r0, [r7, #16]
 8105430:	f7fc fbc5 	bl	8101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 8105434:	4603      	mov	r3, r0
 8105436:	3304      	adds	r3, #4
 8105438:	4619      	mov	r1, r3
 810543a:	68f8      	ldr	r0, [r7, #12]
 810543c:	f7fd fa81 	bl	8102942 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNSC_16_Hash_node_valueISA_Lb0EEE>
 8105440:	4602      	mov	r2, r0
 8105442:	68bb      	ldr	r3, [r7, #8]
 8105444:	4293      	cmp	r3, r2
 8105446:	d001      	beq.n	810544c <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6a>
 8105448:	2301      	movs	r3, #1
 810544a:	e000      	b.n	810544e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6c>
 810544c:	2300      	movs	r3, #0
 810544e:	2b00      	cmp	r3, #0
 8105450:	d106      	bne.n	8105460 <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  __prev_p = __p;
 8105452:	693b      	ldr	r3, [r7, #16]
 8105454:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8105456:	6938      	ldr	r0, [r7, #16]
 8105458:	f7fc fbb1 	bl	8101bbe <_ZNKSt8__detail10_Hash_nodeISt4pairIKN7APIDoIP12EDoIPRequestES1_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEELb0EE7_M_nextEv>
 810545c:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 810545e:	e7d6      	b.n	810540e <_ZNKSt10_HashtableIN7APIDoIP12EDoIPRequestESt4pairIKS1_S2_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEESaISA_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 8105460:	bf00      	nop
      return nullptr;
 8105462:	2300      	movs	r3, #0
    }
 8105464:	4618      	mov	r0, r3
 8105466:	3718      	adds	r7, #24
 8105468:	46bd      	mov	sp, r7
 810546a:	bd80      	pop	{r7, pc}

0810546c <_ZNKSt8__detail9__variant16_Variant_storageILb1EJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE8_M_validEv>:
      _M_valid() const noexcept
 810546c:	b480      	push	{r7}
 810546e:	b083      	sub	sp, #12
 8105470:	af00      	add	r7, sp, #0
 8105472:	6078      	str	r0, [r7, #4]
	  return true;
 8105474:	2301      	movs	r3, #1
      }
 8105476:	4618      	mov	r0, r3
 8105478:	370c      	adds	r7, #12
 810547a:	46bd      	mov	sp, r7
 810547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105480:	4770      	bx	lr

08105482 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8105482:	b580      	push	{r7, lr}
 8105484:	b084      	sub	sp, #16
 8105486:	af00      	add	r7, sp, #0
 8105488:	60f8      	str	r0, [r7, #12]
 810548a:	60b9      	str	r1, [r7, #8]
 810548c:	607a      	str	r2, [r7, #4]
 810548e:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 8105490:	6839      	ldr	r1, [r7, #0]
 8105492:	6878      	ldr	r0, [r7, #4]
 8105494:	f7fd fb4f 	bl	8102b36 <_ZNSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 8105498:	4603      	mov	r3, r0
 810549a:	2b00      	cmp	r3, #0
 810549c:	d009      	beq.n	81054b2 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 810549e:	683a      	ldr	r2, [r7, #0]
 81054a0:	68b9      	ldr	r1, [r7, #8]
 81054a2:	68f8      	ldr	r0, [r7, #12]
 81054a4:	f7ff ff19 	bl	81052da <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueISB_Lb0EEE>
 81054a8:	4603      	mov	r3, r0
 81054aa:	2b00      	cmp	r3, #0
 81054ac:	d001      	beq.n	81054b2 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x30>
 81054ae:	2301      	movs	r3, #1
 81054b0:	e000      	b.n	81054b4 <_ZNKSt8__detail15_Hashtable_baseIN7APIDoIP12EDoIPRequestESt4pairIKS2_S3_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueISB_Lb0EEE+0x32>
 81054b2:	2300      	movs	r3, #0
 81054b4:	4618      	mov	r0, r3
 81054b6:	3710      	adds	r7, #16
 81054b8:	46bd      	mov	sp, r7
 81054ba:	bd80      	pop	{r7, pc}

081054bc <_Z41__static_initialization_and_destruction_0ii>:
 81054bc:	b580      	push	{r7, lr}
 81054be:	b0c8      	sub	sp, #288	@ 0x120
 81054c0:	af04      	add	r7, sp, #16
 81054c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81054c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 81054ca:	6018      	str	r0, [r3, #0]
 81054cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81054d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 81054d4:	6019      	str	r1, [r3, #0]
 81054d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81054da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	2b01      	cmp	r3, #1
 81054e2:	f040 80d5 	bne.w	8105690 <_Z41__static_initialization_and_destruction_0ii+0x1d4>
 81054e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81054ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81054f4:	4293      	cmp	r3, r2
 81054f6:	f040 80cb 	bne.w	8105690 <_Z41__static_initialization_and_destruction_0ii+0x1d4>
 81054fa:	f107 0314 	add.w	r3, r7, #20
 81054fe:	22f0      	movs	r2, #240	@ 0xf0
 8105500:	2100      	movs	r1, #0
 8105502:	4618      	mov	r0, r3
 8105504:	f01f f9be 	bl	8124884 <memset>
 8105508:	4b6d      	ldr	r3, [pc, #436]	@ (81056c0 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 810550a:	61bb      	str	r3, [r7, #24]
 810550c:	2301      	movs	r3, #1
 810550e:	773b      	strb	r3, [r7, #28]
 8105510:	2312      	movs	r3, #18
 8105512:	f887 3020 	strb.w	r3, [r7, #32]
 8105516:	2301      	movs	r3, #1
 8105518:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 810551c:	4b69      	ldr	r3, [pc, #420]	@ (81056c4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 810551e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8105520:	2301      	movs	r3, #1
 8105522:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8105526:	2312      	movs	r3, #18
 8105528:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 810552c:	2302      	movs	r3, #2
 810552e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8105532:	4b65      	ldr	r3, [pc, #404]	@ (81056c8 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8105534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105536:	2301      	movs	r3, #1
 8105538:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 810553c:	2312      	movs	r3, #18
 810553e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8105542:	2303      	movs	r3, #3
 8105544:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8105548:	4b60      	ldr	r3, [pc, #384]	@ (81056cc <_Z41__static_initialization_and_destruction_0ii+0x210>)
 810554a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810554c:	2301      	movs	r3, #1
 810554e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8105552:	2312      	movs	r3, #18
 8105554:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8105558:	2304      	movs	r3, #4
 810555a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 810555e:	4b5c      	ldr	r3, [pc, #368]	@ (81056d0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8105560:	65bb      	str	r3, [r7, #88]	@ 0x58
 8105562:	2301      	movs	r3, #1
 8105564:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8105568:	2312      	movs	r3, #18
 810556a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 810556e:	2305      	movs	r3, #5
 8105570:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8105574:	4b57      	ldr	r3, [pc, #348]	@ (81056d4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8105576:	66bb      	str	r3, [r7, #104]	@ 0x68
 8105578:	2301      	movs	r3, #1
 810557a:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 810557e:	2312      	movs	r3, #18
 8105580:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8105584:	2306      	movs	r3, #6
 8105586:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 810558a:	4b53      	ldr	r3, [pc, #332]	@ (81056d8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 810558c:	67bb      	str	r3, [r7, #120]	@ 0x78
 810558e:	2301      	movs	r3, #1
 8105590:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8105594:	2312      	movs	r3, #18
 8105596:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 810559a:	2307      	movs	r3, #7
 810559c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 81055a0:	4b4e      	ldr	r3, [pc, #312]	@ (81056dc <_Z41__static_initialization_and_destruction_0ii+0x220>)
 81055a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81055a6:	2301      	movs	r3, #1
 81055a8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 81055ac:	2312      	movs	r3, #18
 81055ae:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 81055b2:	2308      	movs	r3, #8
 81055b4:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 81055b8:	f24d 130d 	movw	r3, #53517	@ 0xd10d
 81055bc:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 81055c0:	2360      	movs	r3, #96	@ 0x60
 81055c2:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 81055c6:	2309      	movs	r3, #9
 81055c8:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 81055cc:	f24d 1307 	movw	r3, #53511	@ 0xd107
 81055d0:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 81055d4:	2360      	movs	r3, #96	@ 0x60
 81055d6:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 81055da:	230a      	movs	r3, #10
 81055dc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 81055e0:	f24d 1312 	movw	r3, #53522	@ 0xd112
 81055e4:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
 81055e8:	2360      	movs	r3, #96	@ 0x60
 81055ea:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
 81055ee:	230b      	movs	r3, #11
 81055f0:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 81055f4:	f24d 1306 	movw	r3, #53510	@ 0xd106
 81055f8:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
 81055fc:	2360      	movs	r3, #96	@ 0x60
 81055fe:	f887 30d0 	strb.w	r3, [r7, #208]	@ 0xd0
 8105602:	230c      	movs	r3, #12
 8105604:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 8105608:	f24d 131f 	movw	r3, #53535	@ 0xd11f
 810560c:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
 8105610:	2360      	movs	r3, #96	@ 0x60
 8105612:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 8105616:	230d      	movs	r3, #13
 8105618:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 810561c:	f64d 135c 	movw	r3, #55644	@ 0xd95c
 8105620:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
 8105624:	2378      	movs	r3, #120	@ 0x78
 8105626:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
 810562a:	230e      	movs	r3, #14
 810562c:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
 8105630:	f64d 1377 	movw	r3, #55671	@ 0xd977
 8105634:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8105638:	2378      	movs	r3, #120	@ 0x78
 810563a:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
 810563e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8105642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8105646:	f107 0214 	add.w	r2, r7, #20
 810564a:	601a      	str	r2, [r3, #0]
 810564c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8105650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8105654:	220f      	movs	r2, #15
 8105656:	605a      	str	r2, [r3, #4]
 8105658:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 810565c:	4618      	mov	r0, r3
 810565e:	f7fc f873 	bl	8101748 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 8105662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8105666:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 810566a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 810566e:	9302      	str	r3, [sp, #8]
 8105670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8105674:	9301      	str	r3, [sp, #4]
 8105676:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 810567a:	9300      	str	r3, [sp, #0]
 810567c:	2300      	movs	r3, #0
 810567e:	ca06      	ldmia	r2, {r1, r2}
 8105680:	4817      	ldr	r0, [pc, #92]	@ (81056e0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8105682:	f7fc f878 	bl	8101776 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 8105686:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 810568a:	4618      	mov	r0, r3
 810568c:	f7fc f868 	bl	8101760 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
 8105690:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8105694:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	2b00      	cmp	r3, #0
 810569c:	d10b      	bne.n	81056b6 <_Z41__static_initialization_and_destruction_0ii+0x1fa>
 810569e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81056a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 81056a6:	681b      	ldr	r3, [r3, #0]
 81056a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81056ac:	4293      	cmp	r3, r2
 81056ae:	d102      	bne.n	81056b6 <_Z41__static_initialization_and_destruction_0ii+0x1fa>
 81056b0:	480b      	ldr	r0, [pc, #44]	@ (81056e0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 81056b2:	f7fd fb45 	bl	8102d40 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
 81056b6:	bf00      	nop
 81056b8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 81056bc:	46bd      	mov	sp, r7
 81056be:	bd80      	pop	{r7, pc}
 81056c0:	44020102 	.word	0x44020102
 81056c4:	48070102 	.word	0x48070102
 81056c8:	43000101 	.word	0x43000101
 81056cc:	46090101 	.word	0x46090101
 81056d0:	42040101 	.word	0x42040101
 81056d4:	42080102 	.word	0x42080102
 81056d8:	481a0102 	.word	0x481a0102
 81056dc:	4a290101 	.word	0x4a290101
 81056e0:	10000248 	.word	0x10000248

081056e4 <_GLOBAL__sub_I_tcpRecvCb>:
 81056e4:	b580      	push	{r7, lr}
 81056e6:	af00      	add	r7, sp, #0
 81056e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 81056ec:	2001      	movs	r0, #1
 81056ee:	f7ff fee5 	bl	81054bc <_Z41__static_initialization_and_destruction_0ii>
 81056f2:	bd80      	pop	{r7, pc}

081056f4 <_GLOBAL__sub_D_tcpRecvCb>:
 81056f4:	b580      	push	{r7, lr}
 81056f6:	af00      	add	r7, sp, #0
 81056f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 81056fc:	2000      	movs	r0, #0
 81056fe:	f7ff fedd 	bl	81054bc <_Z41__static_initialization_and_destruction_0ii>
 8105702:	bd80      	pop	{r7, pc}

08105704 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8105704:	b480      	push	{r7}
 8105706:	b083      	sub	sp, #12
 8105708:	af00      	add	r7, sp, #0
 810570a:	6078      	str	r0, [r7, #4]
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	4618      	mov	r0, r3
 8105710:	370c      	adds	r7, #12
 8105712:	46bd      	mov	sp, r7
 8105714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105718:	4770      	bx	lr

0810571a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 810571a:	b480      	push	{r7}
 810571c:	b083      	sub	sp, #12
 810571e:	af00      	add	r7, sp, #0
 8105720:	6078      	str	r0, [r7, #4]
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	4618      	mov	r0, r3
 8105726:	370c      	adds	r7, #12
 8105728:	46bd      	mov	sp, r7
 810572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810572e:	4770      	bx	lr

08105730 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8105730:	b580      	push	{r7, lr}
 8105732:	b082      	sub	sp, #8
 8105734:	af00      	add	r7, sp, #0
 8105736:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	689b      	ldr	r3, [r3, #8]
 810573c:	2b00      	cmp	r3, #0
 810573e:	d005      	beq.n	810574c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	689b      	ldr	r3, [r3, #8]
 8105744:	6878      	ldr	r0, [r7, #4]
 8105746:	6879      	ldr	r1, [r7, #4]
 8105748:	2203      	movs	r2, #3
 810574a:	4798      	blx	r3
    }
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	4618      	mov	r0, r3
 8105750:	3708      	adds	r7, #8
 8105752:	46bd      	mov	sp, r7
 8105754:	bd80      	pop	{r7, pc}

08105756 <_Z24StartTask_DoIPDaemonTaskPv>:

extern QueueHandle_t queueToDoIPDaemonTask;
QueueHandle_t connectionEventsQueue = xQueueCreate(16, sizeof(SMessage));

void StartTask_DoIPDaemonTask(void *argument)
{
 8105756:	b580      	push	{r7, lr}
 8105758:	b08e      	sub	sp, #56	@ 0x38
 810575a:	af00      	add	r7, sp, #0
 810575c:	6078      	str	r0, [r7, #4]
    DoIPDaemonTask doipDaemonTask = DoIPDaemonTask();
 810575e:	f107 0308 	add.w	r3, r7, #8
 8105762:	4618      	mov	r0, r3
 8105764:	f000 f80a 	bl	810577c <_ZN14DoIPDaemonTaskC1Ev>
    /* Infinite loop */
    for (;;) {
        doipDaemonTask.process();
 8105768:	f107 0308 	add.w	r3, r7, #8
 810576c:	4618      	mov	r0, r3
 810576e:	f000 f8b9 	bl	81058e4 <_ZN14DoIPDaemonTask7processEv>
        osDelay(1);
 8105772:	2001      	movs	r0, #1
 8105774:	f00d fec9 	bl	811350a <osDelay>
        doipDaemonTask.process();
 8105778:	bf00      	nop
 810577a:	e7f5      	b.n	8105768 <_Z24StartTask_DoIPDaemonTaskPv+0x12>

0810577c <_ZN14DoIPDaemonTaskC1Ev>:
    }
}


DoIPDaemonTask::DoIPDaemonTask() : event_bus(EventBus(queueToDoIPDaemonTask, EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER)), conn_mgr(CM::instance())
 810577c:	b580      	push	{r7, lr}
 810577e:	b082      	sub	sp, #8
 8105780:	af00      	add	r7, sp, #0
 8105782:	6078      	str	r0, [r7, #4]
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	4a13      	ldr	r2, [pc, #76]	@ (81057d4 <_ZN14DoIPDaemonTaskC1Ev+0x58>)
 8105788:	6811      	ldr	r1, [r2, #0]
 810578a:	2203      	movs	r2, #3
 810578c:	4618      	mov	r0, r3
 810578e:	f000 ff79 	bl	8106684 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	2200      	movs	r2, #0
 8105796:	731a      	strb	r2, [r3, #12]
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	3310      	adds	r3, #16
 810579c:	2200      	movs	r2, #0
 810579e:	601a      	str	r2, [r3, #0]
 81057a0:	605a      	str	r2, [r3, #4]
 81057a2:	609a      	str	r2, [r3, #8]
 81057a4:	60da      	str	r2, [r3, #12]
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	22ff      	movs	r2, #255	@ 0xff
 81057aa:	f883 2020 	strb.w	r2, [r3, #32]
 81057ae:	687b      	ldr	r3, [r7, #4]
 81057b0:	22ff      	movs	r2, #255	@ 0xff
 81057b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	2200      	movs	r2, #0
 81057ba:	625a      	str	r2, [r3, #36]	@ 0x24
 81057bc:	f7fe fb80 	bl	8103ec0 <_ZN17ConnectionManager8instanceEv>
 81057c0:	4602      	mov	r2, r0
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	629a      	str	r2, [r3, #40]	@ 0x28
{
    MX_LWIP_Init();
 81057c6:	f003 fe3d 	bl	8109444 <MX_LWIP_Init>
}
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	4618      	mov	r0, r3
 81057ce:	3708      	adds	r7, #8
 81057d0:	46bd      	mov	sp, r7
 81057d2:	bd80      	pop	{r7, pc}
 81057d4:	100001d4 	.word	0x100001d4

081057d8 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void DoIPDaemonTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, [[maybe_unused]] EEventClient eventReceiver)
{
 81057d8:	b082      	sub	sp, #8
 81057da:	b580      	push	{r7, lr}
 81057dc:	b084      	sub	sp, #16
 81057de:	af00      	add	r7, sp, #0
 81057e0:	6078      	str	r0, [r7, #4]
 81057e2:	f107 0018 	add.w	r0, r7, #24
 81057e6:	e880 000c 	stmia.w	r0, {r2, r3}
 81057ea:	460b      	mov	r3, r1
 81057ec:	70fb      	strb	r3, [r7, #3]
	switch(event)
 81057ee:	78fb      	ldrb	r3, [r7, #3]
 81057f0:	2b83      	cmp	r3, #131	@ 0x83
 81057f2:	d006      	beq.n	8105802 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2a>
 81057f4:	2b83      	cmp	r3, #131	@ 0x83
 81057f6:	dc21      	bgt.n	810583c <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x64>
 81057f8:	2b81      	cmp	r3, #129	@ 0x81
 81057fa:	d013      	beq.n	8105824 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x4c>
 81057fc:	2b82      	cmp	r3, #130	@ 0x82
 81057fe:	d017      	beq.n	8105830 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x58>
        {
            onEventDataUnsubscribe(msg);
            break;
        }
		default:
			break;
 8105800:	e01c      	b.n	810583c <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x64>
            CM::EConnectionEvent connEvent = msg.ethernet_plugged ? CM::EConnectionEvent::EVENT_ETHERNET_CONNECTED : CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED;
 8105802:	7e3b      	ldrb	r3, [r7, #24]
 8105804:	2b00      	cmp	r3, #0
 8105806:	d001      	beq.n	810580c <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x34>
 8105808:	2300      	movs	r3, #0
 810580a:	e000      	b.n	810580e <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x36>
 810580c:	2301      	movs	r3, #1
 810580e:	73fb      	strb	r3, [r7, #15]
            xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8105810:	4b0e      	ldr	r3, [pc, #56]	@ (810584c <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x74>)
 8105812:	6818      	ldr	r0, [r3, #0]
 8105814:	f107 010f 	add.w	r1, r7, #15
 8105818:	2300      	movs	r3, #0
 810581a:	f242 7210 	movw	r2, #10000	@ 0x2710
 810581e:	f00f f981 	bl	8114b24 <xQueueGenericSend>
            break;
 8105822:	e00c      	b.n	810583e <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
            onEventDataSubscribe(msg);
 8105824:	f107 0118 	add.w	r1, r7, #24
 8105828:	6878      	ldr	r0, [r7, #4]
 810582a:	f000 f9e5 	bl	8105bf8 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData>
            break;
 810582e:	e006      	b.n	810583e <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
            onEventDataUnsubscribe(msg);
 8105830:	f107 0118 	add.w	r1, r7, #24
 8105834:	6878      	ldr	r0, [r7, #4]
 8105836:	f000 fa8b 	bl	8105d50 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData>
            break;
 810583a:	e000      	b.n	810583e <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
			break;
 810583c:	bf00      	nop
	}
}
 810583e:	bf00      	nop
 8105840:	3710      	adds	r7, #16
 8105842:	46bd      	mov	sp, r7
 8105844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8105848:	b002      	add	sp, #8
 810584a:	4770      	bx	lr
 810584c:	10000294 	.word	0x10000294

08105850 <_ZN14DoIPDaemonTask17processConnectionEv>:

void DoIPDaemonTask::processConnection()
{
 8105850:	b580      	push	{r7, lr}
 8105852:	b082      	sub	sp, #8
 8105854:	af00      	add	r7, sp, #0
 8105856:	6078      	str	r0, [r7, #4]
    switch(current_connection_state)
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	7b1b      	ldrb	r3, [r3, #12]
 810585c:	2b01      	cmp	r3, #1
 810585e:	d105      	bne.n	810586c <_ZN14DoIPDaemonTask17processConnectionEv+0x1c>
    {
        case STATE_SERVICE_DISCOVERY:
        {
            conn_mgr.processUdpDicovery();
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105864:	4618      	mov	r0, r3
 8105866:	f7ff fb89 	bl	8104f7c <_ZN17ConnectionManager18processUdpDicoveryEv>
            break;
 810586a:	e000      	b.n	810586e <_ZN14DoIPDaemonTask17processConnectionEv+0x1e>
        }
        default:
        {
            // do not do anything, wait for events
            break;
 810586c:	bf00      	nop
        }

    }
}
 810586e:	bf00      	nop
 8105870:	3708      	adds	r7, #8
 8105872:	46bd      	mov	sp, r7
 8105874:	bd80      	pop	{r7, pc}

08105876 <_ZZN14DoIPDaemonTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void DoIPDaemonTask::process()
{
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 8105876:	b082      	sub	sp, #8
 8105878:	b5f0      	push	{r4, r5, r6, r7, lr}
 810587a:	b089      	sub	sp, #36	@ 0x24
 810587c:	af06      	add	r7, sp, #24
 810587e:	6078      	str	r0, [r7, #4]
 8105880:	f107 0020 	add.w	r0, r7, #32
 8105884:	e880 000c 	stmia.w	r0, {r2, r3}
 8105888:	460b      	mov	r3, r1
 810588a:	70fb      	strb	r3, [r7, #3]
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	681d      	ldr	r5, [r3, #0]
 8105890:	78fe      	ldrb	r6, [r7, #3]
 8105892:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8105896:	9304      	str	r3, [sp, #16]
 8105898:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 810589c:	9303      	str	r3, [sp, #12]
 810589e:	466c      	mov	r4, sp
 81058a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81058a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81058a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81058ac:	f107 0320 	add.w	r3, r7, #32
 81058b0:	cb0c      	ldmia	r3, {r2, r3}
 81058b2:	4631      	mov	r1, r6
 81058b4:	4628      	mov	r0, r5
 81058b6:	f7ff ff8f 	bl	81057d8 <_ZN14DoIPDaemonTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 81058ba:	bf00      	nop
 81058bc:	370c      	adds	r7, #12
 81058be:	46bd      	mov	sp, r7
 81058c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 81058c4:	b002      	add	sp, #8
 81058c6:	4770      	bx	lr

081058c8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 81058c8:	b580      	push	{r7, lr}
 81058ca:	b082      	sub	sp, #8
 81058cc:	af00      	add	r7, sp, #0
 81058ce:	6078      	str	r0, [r7, #4]
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	4618      	mov	r0, r3
 81058d4:	f7ff ff2c 	bl	8105730 <_ZNSt14_Function_baseD1Ev>
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	4618      	mov	r0, r3
 81058dc:	3708      	adds	r7, #8
 81058de:	46bd      	mov	sp, r7
 81058e0:	bd80      	pop	{r7, pc}
	...

081058e4 <_ZN14DoIPDaemonTask7processEv>:
{
 81058e4:	b590      	push	{r4, r7, lr}
 81058e6:	b08b      	sub	sp, #44	@ 0x2c
 81058e8:	af00      	add	r7, sp, #0
 81058ea:	6078      	str	r0, [r7, #4]
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 81058ec:	687c      	ldr	r4, [r7, #4]
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	61fb      	str	r3, [r7, #28]
 81058f2:	f107 021c 	add.w	r2, r7, #28
 81058f6:	f107 030c 	add.w	r3, r7, #12
 81058fa:	4611      	mov	r1, r2
 81058fc:	4618      	mov	r0, r3
 81058fe:	f000 fb79 	bl	8105ff4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 8105902:	f107 030c 	add.w	r3, r7, #12
 8105906:	4619      	mov	r1, r3
 8105908:	4620      	mov	r0, r4
 810590a:	f000 ff0e 	bl	810672a <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 810590e:	f107 030c 	add.w	r3, r7, #12
 8105912:	4618      	mov	r0, r3
 8105914:	f7ff ffd8 	bl	81058c8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
    processConnection();
 8105918:	6878      	ldr	r0, [r7, #4]
 810591a:	f7ff ff99 	bl	8105850 <_ZN14DoIPDaemonTask17processConnectionEv>
    
    EConnectionState newState;
    CM::EConnectionEvent connEvent;
    BaseType_t received = pdTRUE;
 810591e:	2301      	movs	r3, #1
 8105920:	627b      	str	r3, [r7, #36]	@ 0x24

	do
	{
		received = xQueueReceive(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(0));
 8105922:	4b14      	ldr	r3, [pc, #80]	@ (8105974 <_ZN14DoIPDaemonTask7processEv+0x90>)
 8105924:	681b      	ldr	r3, [r3, #0]
 8105926:	f107 010b 	add.w	r1, r7, #11
 810592a:	2200      	movs	r2, #0
 810592c:	4618      	mov	r0, r3
 810592e:	f00f fb29 	bl	8114f84 <xQueueReceive>
 8105932:	6278      	str	r0, [r7, #36]	@ 0x24
		if(received == pdTRUE)
 8105934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105936:	2b01      	cmp	r3, #1
 8105938:	d114      	bne.n	8105964 <_ZN14DoIPDaemonTask7processEv+0x80>
		{
			newState = onConnectionEvent(connEvent);
 810593a:	7afb      	ldrb	r3, [r7, #11]
 810593c:	4619      	mov	r1, r3
 810593e:	6878      	ldr	r0, [r7, #4]
 8105940:	f000 f81a 	bl	8105978 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE>
 8105944:	4603      	mov	r3, r0
 8105946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(newState != current_connection_state)
 810594a:	687b      	ldr	r3, [r7, #4]
 810594c:	7b1b      	ldrb	r3, [r3, #12]
 810594e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8105952:	429a      	cmp	r2, r3
 8105954:	d006      	beq.n	8105964 <_ZN14DoIPDaemonTask7processEv+0x80>
            {
                // transtition happened
                current_connection_state = newState;
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 810595c:	731a      	strb	r2, [r3, #12]
                // Process again so that after every onEvent the processing state code is called at least once.
                // The chance of this happening is minimal, but not zero. 
                processConnection();
 810595e:	6878      	ldr	r0, [r7, #4]
 8105960:	f7ff ff76 	bl	8105850 <_ZN14DoIPDaemonTask17processConnectionEv>
            }
		}
	} while(received == pdTRUE);
 8105964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105966:	2b01      	cmp	r3, #1
 8105968:	d0db      	beq.n	8105922 <_ZN14DoIPDaemonTask7processEv+0x3e>
}
 810596a:	bf00      	nop
 810596c:	bf00      	nop
 810596e:	372c      	adds	r7, #44	@ 0x2c
 8105970:	46bd      	mov	sp, r7
 8105972:	bd90      	pop	{r4, r7, pc}
 8105974:	10000294 	.word	0x10000294

08105978 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onConnectionEvent(CM::EConnectionEvent event)
{
 8105978:	b580      	push	{r7, lr}
 810597a:	b082      	sub	sp, #8
 810597c:	af00      	add	r7, sp, #0
 810597e:	6078      	str	r0, [r7, #4]
 8105980:	460b      	mov	r3, r1
 8105982:	70fb      	strb	r3, [r7, #3]
    switch(current_connection_state)
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	7b1b      	ldrb	r3, [r3, #12]
 8105988:	2b04      	cmp	r3, #4
 810598a:	d830      	bhi.n	81059ee <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x76>
 810598c:	a201      	add	r2, pc, #4	@ (adr r2, 8105994 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x1c>)
 810598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105992:	bf00      	nop
 8105994:	081059a9 	.word	0x081059a9
 8105998:	081059b7 	.word	0x081059b7
 810599c:	081059c5 	.word	0x081059c5
 81059a0:	081059d3 	.word	0x081059d3
 81059a4:	081059e1 	.word	0x081059e1
    {
        case STATE_ETHERNET_DISCONNECTED:
        {
            return onEventEthDisconnected(event);
 81059a8:	78fb      	ldrb	r3, [r7, #3]
 81059aa:	4619      	mov	r1, r3
 81059ac:	6878      	ldr	r0, [r7, #4]
 81059ae:	f000 f825 	bl	81059fc <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE>
 81059b2:	4603      	mov	r3, r0
 81059b4:	e01d      	b.n	81059f2 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_SERVICE_DISCOVERY:
        {
            return onEventDiscovery(event);
 81059b6:	78fb      	ldrb	r3, [r7, #3]
 81059b8:	4619      	mov	r1, r3
 81059ba:	6878      	ldr	r0, [r7, #4]
 81059bc:	f000 f834 	bl	8105a28 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE>
 81059c0:	4603      	mov	r3, r0
 81059c2:	e016      	b.n	81059f2 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_CONNECTING_TCP:
        {
            return onEventConnectingTCP(event);
 81059c4:	78fb      	ldrb	r3, [r7, #3]
 81059c6:	4619      	mov	r1, r3
 81059c8:	6878      	ldr	r0, [r7, #4]
 81059ca:	f000 f853 	bl	8105a74 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE>
 81059ce:	4603      	mov	r3, r0
 81059d0:	e00f      	b.n	81059f2 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_CONNECTED_ECU:
        {
            return onEventConnectedECUDefault(event);
 81059d2:	78fb      	ldrb	r3, [r7, #3]
 81059d4:	4619      	mov	r1, r3
 81059d6:	6878      	ldr	r0, [r7, #4]
 81059d8:	f000 f88e 	bl	8105af8 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE>
 81059dc:	4603      	mov	r3, r0
 81059de:	e008      	b.n	81059f2 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        case STATE_WAITING_FOR_DATA_FROM_ECU:
        {
            return onEventWaitingForDataFromECU(event);
 81059e0:	78fb      	ldrb	r3, [r7, #3]
 81059e2:	4619      	mov	r1, r3
 81059e4:	6878      	ldr	r0, [r7, #4]
 81059e6:	f000 f8c1 	bl	8105b6c <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE>
 81059ea:	4603      	mov	r3, r0
 81059ec:	e001      	b.n	81059f2 <_ZN14DoIPDaemonTask17onConnectionEventEN17ConnectionManager16EConnectionEventE+0x7a>
        }
        default:
        {
            return current_connection_state;
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 81059f2:	4618      	mov	r0, r3
 81059f4:	3708      	adds	r7, #8
 81059f6:	46bd      	mov	sp, r7
 81059f8:	bd80      	pop	{r7, pc}
 81059fa:	bf00      	nop

081059fc <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventEthDisconnected(CM::EConnectionEvent event)
{
 81059fc:	b580      	push	{r7, lr}
 81059fe:	b082      	sub	sp, #8
 8105a00:	af00      	add	r7, sp, #0
 8105a02:	6078      	str	r0, [r7, #4]
 8105a04:	460b      	mov	r3, r1
 8105a06:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8105a08:	78fb      	ldrb	r3, [r7, #3]
 8105a0a:	2b00      	cmp	r3, #0
 8105a0c:	d106      	bne.n	8105a1c <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE+0x20>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_CONNECTED:
        {
            conn_mgr.udpConnect();
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a12:	4618      	mov	r0, r3
 8105a14:	f7fe fdfe 	bl	8104614 <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8105a18:	2301      	movs	r3, #1
 8105a1a:	e001      	b.n	8105a20 <_ZN14DoIPDaemonTask22onEventEthDisconnectedEN17ConnectionManager16EConnectionEventE+0x24>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8105a20:	4618      	mov	r0, r3
 8105a22:	3708      	adds	r7, #8
 8105a24:	46bd      	mov	sp, r7
 8105a26:	bd80      	pop	{r7, pc}

08105a28 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventDiscovery(CM::EConnectionEvent event)
{
 8105a28:	b580      	push	{r7, lr}
 8105a2a:	b082      	sub	sp, #8
 8105a2c:	af00      	add	r7, sp, #0
 8105a2e:	6078      	str	r0, [r7, #4]
 8105a30:	460b      	mov	r3, r1
 8105a32:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8105a34:	78fb      	ldrb	r3, [r7, #3]
 8105a36:	2b01      	cmp	r3, #1
 8105a38:	d002      	beq.n	8105a40 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x18>
 8105a3a:	2b02      	cmp	r3, #2
 8105a3c:	d007      	beq.n	8105a4e <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x26>
 8105a3e:	e012      	b.n	8105a66 <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x3e>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            conn_mgr.udpDisconnect();
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a44:	4618      	mov	r0, r3
 8105a46:	f7fe fe13 	bl	8104670 <_ZN17ConnectionManager13udpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 8105a4a:	2300      	movs	r3, #0
 8105a4c:	e00d      	b.n	8105a6a <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x42>
        }
        case CM::EConnectionEvent::EVENT_DISCOVERY_COMPLETED:
        {
            conn_mgr.udpDisconnect();
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a52:	4618      	mov	r0, r3
 8105a54:	f7fe fe0c 	bl	8104670 <_ZN17ConnectionManager13udpDisconnectEv>
            conn_mgr.tcpConnect();
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a5c:	4618      	mov	r0, r3
 8105a5e:	f7fe fe35 	bl	81046cc <_ZN17ConnectionManager10tcpConnectEv>
            return STATE_CONNECTING_TCP;
 8105a62:	2302      	movs	r3, #2
 8105a64:	e001      	b.n	8105a6a <_ZN14DoIPDaemonTask16onEventDiscoveryEN17ConnectionManager16EConnectionEventE+0x42>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8105a6a:	4618      	mov	r0, r3
 8105a6c:	3708      	adds	r7, #8
 8105a6e:	46bd      	mov	sp, r7
 8105a70:	bd80      	pop	{r7, pc}
	...

08105a74 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventConnectingTCP(CM::EConnectionEvent event)
{
 8105a74:	b580      	push	{r7, lr}
 8105a76:	b084      	sub	sp, #16
 8105a78:	af00      	add	r7, sp, #0
 8105a7a:	6078      	str	r0, [r7, #4]
 8105a7c:	460b      	mov	r3, r1
 8105a7e:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8105a80:	78fb      	ldrb	r3, [r7, #3]
 8105a82:	2b04      	cmp	r3, #4
 8105a84:	d00d      	beq.n	8105aa2 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x2e>
 8105a86:	2b04      	cmp	r3, #4
 8105a88:	dc2e      	bgt.n	8105ae8 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x74>
 8105a8a:	2b01      	cmp	r3, #1
 8105a8c:	d002      	beq.n	8105a94 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x20>
 8105a8e:	2b03      	cmp	r3, #3
 8105a90:	d013      	beq.n	8105aba <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x46>
 8105a92:	e029      	b.n	8105ae8 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x74>
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            conn_mgr.tcpDisconnect();
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a98:	4618      	mov	r0, r3
 8105a9a:	f7fe fea1 	bl	81047e0 <_ZN17ConnectionManager13tcpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 8105a9e:	2300      	movs	r3, #0
 8105aa0:	e024      	b.n	8105aec <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105aa6:	4618      	mov	r0, r3
 8105aa8:	f7fe fe9a 	bl	81047e0 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105ab0:	4618      	mov	r0, r3
 8105ab2:	f7fe fdaf 	bl	8104614 <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8105ab6:	2301      	movs	r3, #1
 8105ab8:	e018      	b.n	8105aec <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTED:
        {
        	if((subscribed_data[0] != 0ULL) || (subscribed_data[1] != 0ULL))
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8105ac0:	4313      	orrs	r3, r2
 8105ac2:	d104      	bne.n	8105ace <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x5a>
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8105aca:	4313      	orrs	r3, r2
 8105acc:	d00a      	beq.n	8105ae4 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x70>
        	{
        		CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_DATA_REQUESTED;
 8105ace:	2306      	movs	r3, #6
 8105ad0:	73fb      	strb	r3, [r7, #15]
        		xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8105ad2:	4b08      	ldr	r3, [pc, #32]	@ (8105af4 <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x80>)
 8105ad4:	6818      	ldr	r0, [r3, #0]
 8105ad6:	f107 010f 	add.w	r1, r7, #15
 8105ada:	2300      	movs	r3, #0
 8105adc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105ae0:	f00f f820 	bl	8114b24 <xQueueGenericSend>
        	}
            return STATE_CONNECTED_ECU;
 8105ae4:	2303      	movs	r3, #3
 8105ae6:	e001      	b.n	8105aec <_ZN14DoIPDaemonTask20onEventConnectingTCPEN17ConnectionManager16EConnectionEventE+0x78>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8105aec:	4618      	mov	r0, r3
 8105aee:	3710      	adds	r7, #16
 8105af0:	46bd      	mov	sp, r7
 8105af2:	bd80      	pop	{r7, pc}
 8105af4:	10000294 	.word	0x10000294

08105af8 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventConnectedECUDefault(CM::EConnectionEvent event)
{
 8105af8:	b580      	push	{r7, lr}
 8105afa:	b082      	sub	sp, #8
 8105afc:	af00      	add	r7, sp, #0
 8105afe:	6078      	str	r0, [r7, #4]
 8105b00:	460b      	mov	r3, r1
 8105b02:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8105b04:	78fb      	ldrb	r3, [r7, #3]
 8105b06:	2b06      	cmp	r3, #6
 8105b08:	d019      	beq.n	8105b3e <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x46>
 8105b0a:	2b06      	cmp	r3, #6
 8105b0c:	dc28      	bgt.n	8105b60 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x68>
 8105b0e:	2b01      	cmp	r3, #1
 8105b10:	d002      	beq.n	8105b18 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x20>
 8105b12:	2b04      	cmp	r3, #4
 8105b14:	d007      	beq.n	8105b26 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x2e>
 8105b16:	e023      	b.n	8105b60 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x68>
    {
		case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
		{
			conn_mgr.tcpDisconnect();
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b1c:	4618      	mov	r0, r3
 8105b1e:	f7fe fe5f 	bl	81047e0 <_ZN17ConnectionManager13tcpDisconnectEv>
			return STATE_ETHERNET_DISCONNECTED;
 8105b22:	2300      	movs	r3, #0
 8105b24:	e01e      	b.n	8105b64 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
		}
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b2a:	4618      	mov	r0, r3
 8105b2c:	f7fe fe58 	bl	81047e0 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b34:	4618      	mov	r0, r3
 8105b36:	f7fe fd6d 	bl	8104614 <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8105b3a:	2301      	movs	r3, #1
 8105b3c:	e012      	b.n	8105b64 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
        }
        case CM::EConnectionEvent::EVENT_DATA_REQUESTED:
        {
            if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8105b44:	4313      	orrs	r3, r2
 8105b46:	d106      	bne.n	8105b56 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x5e>
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8105b4e:	4313      	orrs	r3, r2
 8105b50:	d101      	bne.n	8105b56 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x5e>
            {
                return STATE_CONNECTED_ECU;
 8105b52:	2303      	movs	r3, #3
 8105b54:	e006      	b.n	8105b64 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
            }
            else
            {
                sendNextRequest();
 8105b56:	6878      	ldr	r0, [r7, #4]
 8105b58:	f000 f996 	bl	8105e88 <_ZN14DoIPDaemonTask15sendNextRequestEv>
            }
            return STATE_WAITING_FOR_DATA_FROM_ECU;
 8105b5c:	2304      	movs	r3, #4
 8105b5e:	e001      	b.n	8105b64 <_ZN14DoIPDaemonTask26onEventConnectedECUDefaultEN17ConnectionManager16EConnectionEventE+0x6c>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	7b1b      	ldrb	r3, [r3, #12]
        }
    }
}
 8105b64:	4618      	mov	r0, r3
 8105b66:	3708      	adds	r7, #8
 8105b68:	46bd      	mov	sp, r7
 8105b6a:	bd80      	pop	{r7, pc}

08105b6c <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE>:

DoIPDaemonTask::EConnectionState DoIPDaemonTask::onEventWaitingForDataFromECU(CM::EConnectionEvent event)
{
 8105b6c:	b580      	push	{r7, lr}
 8105b6e:	b082      	sub	sp, #8
 8105b70:	af00      	add	r7, sp, #0
 8105b72:	6078      	str	r0, [r7, #4]
 8105b74:	460b      	mov	r3, r1
 8105b76:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8105b78:	78fb      	ldrb	r3, [r7, #3]
 8105b7a:	3b01      	subs	r3, #1
 8105b7c:	2b07      	cmp	r3, #7
 8105b7e:	d834      	bhi.n	8105bea <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x7e>
 8105b80:	a201      	add	r2, pc, #4	@ (adr r2, 8105b88 <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x1c>)
 8105b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b86:	bf00      	nop
 8105b88:	08105ba9 	.word	0x08105ba9
 8105b8c:	08105beb 	.word	0x08105beb
 8105b90:	08105beb 	.word	0x08105beb
 8105b94:	08105bad 	.word	0x08105bad
 8105b98:	08105beb 	.word	0x08105beb
 8105b9c:	08105beb 	.word	0x08105beb
 8105ba0:	08105be7 	.word	0x08105be7
 8105ba4:	08105bc5 	.word	0x08105bc5
    {
        case CM::EConnectionEvent::EVENT_ETHERNET_DISCONNECTED:
        {
            return STATE_ETHERNET_DISCONNECTED;
 8105ba8:	2300      	movs	r3, #0
 8105baa:	e020      	b.n	8105bee <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_TCP_CONNECTION_FAILED:
        {
            conn_mgr.tcpDisconnect();
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105bb0:	4618      	mov	r0, r3
 8105bb2:	f7fe fe15 	bl	81047e0 <_ZN17ConnectionManager13tcpDisconnectEv>
            conn_mgr.udpConnect();
 8105bb6:	687b      	ldr	r3, [r7, #4]
 8105bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105bba:	4618      	mov	r0, r3
 8105bbc:	f7fe fd2a 	bl	8104614 <_ZN17ConnectionManager10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8105bc0:	2301      	movs	r3, #1
 8105bc2:	e014      	b.n	8105bee <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_TCP_READ_DATA_BY_ID_RECEIVED:
        {
            if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8105bca:	4313      	orrs	r3, r2
 8105bcc:	d106      	bne.n	8105bdc <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x70>
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8105bd4:	4313      	orrs	r3, r2
 8105bd6:	d101      	bne.n	8105bdc <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x70>
            {
                return STATE_CONNECTED_ECU;
 8105bd8:	2303      	movs	r3, #3
 8105bda:	e008      	b.n	8105bee <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
            }
            else
            {
                sendNextRequest();
 8105bdc:	6878      	ldr	r0, [r7, #4]
 8105bde:	f000 f953 	bl	8105e88 <_ZN14DoIPDaemonTask15sendNextRequestEv>
            }
            return STATE_WAITING_FOR_DATA_FROM_ECU;
 8105be2:	2304      	movs	r3, #4
 8105be4:	e003      	b.n	8105bee <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        case CM::EConnectionEvent::EVENT_NO_DATA_TO_REQUEST:
        {
            return STATE_CONNECTED_ECU;
 8105be6:	2303      	movs	r3, #3
 8105be8:	e001      	b.n	8105bee <_ZN14DoIPDaemonTask28onEventWaitingForDataFromECUEN17ConnectionManager16EConnectionEventE+0x82>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	7b1b      	ldrb	r3, [r3, #12]
        }
    }   
}
 8105bee:	4618      	mov	r0, r3
 8105bf0:	3708      	adds	r7, #8
 8105bf2:	46bd      	mov	sp, r7
 8105bf4:	bd80      	pop	{r7, pc}
 8105bf6:	bf00      	nop

08105bf8 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData>:

void DoIPDaemonTask::onEventDataSubscribe(const UMessageData& data)
{
 8105bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105bfc:	b089      	sub	sp, #36	@ 0x24
 8105bfe:	af00      	add	r7, sp, #0
 8105c00:	6178      	str	r0, [r7, #20]
 8105c02:	6139      	str	r1, [r7, #16]
    for(int i = 1; i <= data.event_subscriptions[0]; i++)
 8105c04:	2301      	movs	r3, #1
 8105c06:	61fb      	str	r3, [r7, #28]
 8105c08:	e088      	b.n	8105d1c <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x124>
    {
        if(data.event_subscriptions[i] > 63)
 8105c0a:	693a      	ldr	r2, [r7, #16]
 8105c0c:	69fb      	ldr	r3, [r7, #28]
 8105c0e:	4413      	add	r3, r2
 8105c10:	781b      	ldrb	r3, [r3, #0]
 8105c12:	2b3f      	cmp	r3, #63	@ 0x3f
 8105c14:	d93f      	bls.n	8105c96 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x9e>
        {
            subscribed_data[1] |= 1ULL << (data.event_subscriptions[i] - 64);
 8105c16:	697b      	ldr	r3, [r7, #20]
 8105c18:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8105c1c:	693a      	ldr	r2, [r7, #16]
 8105c1e:	69fb      	ldr	r3, [r7, #28]
 8105c20:	4413      	add	r3, r2
 8105c22:	781b      	ldrb	r3, [r3, #0]
 8105c24:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 8105c28:	f04f 0201 	mov.w	r2, #1
 8105c2c:	f04f 0300 	mov.w	r3, #0
 8105c30:	f1a0 0620 	sub.w	r6, r0, #32
 8105c34:	f1c0 0120 	rsb	r1, r0, #32
 8105c38:	fa03 f500 	lsl.w	r5, r3, r0
 8105c3c:	fa02 f606 	lsl.w	r6, r2, r6
 8105c40:	4335      	orrs	r5, r6
 8105c42:	fa22 f101 	lsr.w	r1, r2, r1
 8105c46:	430d      	orrs	r5, r1
 8105c48:	fa02 f400 	lsl.w	r4, r2, r0
 8105c4c:	ea4a 0304 	orr.w	r3, sl, r4
 8105c50:	60bb      	str	r3, [r7, #8]
 8105c52:	ea4b 0305 	orr.w	r3, fp, r5
 8105c56:	60fb      	str	r3, [r7, #12]
 8105c58:	697b      	ldr	r3, [r7, #20]
 8105c5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8105c5e:	e9c3 1206 	strd	r1, r2, [r3, #24]
            if(currently_processed_request == REQUEST_INVALID)
 8105c62:	697b      	ldr	r3, [r7, #20]
 8105c64:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8105c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105c6c:	d153      	bne.n	8105d16 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x11e>
            {
                currently_processed_request = static_cast<EDoIPRequest>(data.event_subscriptions[i]);
 8105c6e:	693a      	ldr	r2, [r7, #16]
 8105c70:	69fb      	ldr	r3, [r7, #28]
 8105c72:	4413      	add	r3, r2
 8105c74:	781b      	ldrb	r3, [r3, #0]
 8105c76:	b25a      	sxtb	r2, r3
 8105c78:	697b      	ldr	r3, [r7, #20]
 8105c7a:	f883 2020 	strb.w	r2, [r3, #32]
                first_in_cycle = currently_processed_request;
 8105c7e:	697b      	ldr	r3, [r7, #20]
 8105c80:	f993 2020 	ldrsb.w	r2, [r3, #32]
 8105c84:	697b      	ldr	r3, [r7, #20]
 8105c86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                last_start_cycle_timestamp = xTaskGetTickCount() * (1000/configTICK_RATE_HZ);
 8105c8a:	f010 fcfd 	bl	8116688 <xTaskGetTickCount>
 8105c8e:	4602      	mov	r2, r0
 8105c90:	697b      	ldr	r3, [r7, #20]
 8105c92:	625a      	str	r2, [r3, #36]	@ 0x24
 8105c94:	e03f      	b.n	8105d16 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x11e>
            }
        }
        else
        {
            subscribed_data[0] |= 1ULL << data.event_subscriptions[i];
 8105c96:	697b      	ldr	r3, [r7, #20]
 8105c98:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8105c9c:	693a      	ldr	r2, [r7, #16]
 8105c9e:	69fb      	ldr	r3, [r7, #28]
 8105ca0:	4413      	add	r3, r2
 8105ca2:	781b      	ldrb	r3, [r3, #0]
 8105ca4:	4618      	mov	r0, r3
 8105ca6:	f04f 0201 	mov.w	r2, #1
 8105caa:	f04f 0300 	mov.w	r3, #0
 8105cae:	f1a0 0620 	sub.w	r6, r0, #32
 8105cb2:	f1c0 0120 	rsb	r1, r0, #32
 8105cb6:	fa03 f900 	lsl.w	r9, r3, r0
 8105cba:	fa02 f606 	lsl.w	r6, r2, r6
 8105cbe:	ea49 0906 	orr.w	r9, r9, r6
 8105cc2:	fa22 f101 	lsr.w	r1, r2, r1
 8105cc6:	ea49 0901 	orr.w	r9, r9, r1
 8105cca:	fa02 f800 	lsl.w	r8, r2, r0
 8105cce:	ea4a 0308 	orr.w	r3, sl, r8
 8105cd2:	603b      	str	r3, [r7, #0]
 8105cd4:	ea4b 0309 	orr.w	r3, fp, r9
 8105cd8:	607b      	str	r3, [r7, #4]
 8105cda:	697b      	ldr	r3, [r7, #20]
 8105cdc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105ce0:	e9c3 1204 	strd	r1, r2, [r3, #16]
            if(currently_processed_request == REQUEST_INVALID)
 8105ce4:	697b      	ldr	r3, [r7, #20]
 8105ce6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8105cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105cee:	d112      	bne.n	8105d16 <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x11e>
            {
                currently_processed_request = static_cast<EDoIPRequest>(data.event_subscriptions[i]);
 8105cf0:	693a      	ldr	r2, [r7, #16]
 8105cf2:	69fb      	ldr	r3, [r7, #28]
 8105cf4:	4413      	add	r3, r2
 8105cf6:	781b      	ldrb	r3, [r3, #0]
 8105cf8:	b25a      	sxtb	r2, r3
 8105cfa:	697b      	ldr	r3, [r7, #20]
 8105cfc:	f883 2020 	strb.w	r2, [r3, #32]
                first_in_cycle = currently_processed_request;
 8105d00:	697b      	ldr	r3, [r7, #20]
 8105d02:	f993 2020 	ldrsb.w	r2, [r3, #32]
 8105d06:	697b      	ldr	r3, [r7, #20]
 8105d08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                last_start_cycle_timestamp = xTaskGetTickCount() * (1000/configTICK_RATE_HZ);
 8105d0c:	f010 fcbc 	bl	8116688 <xTaskGetTickCount>
 8105d10:	4602      	mov	r2, r0
 8105d12:	697b      	ldr	r3, [r7, #20]
 8105d14:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i = 1; i <= data.event_subscriptions[0]; i++)
 8105d16:	69fb      	ldr	r3, [r7, #28]
 8105d18:	3301      	adds	r3, #1
 8105d1a:	61fb      	str	r3, [r7, #28]
 8105d1c:	693b      	ldr	r3, [r7, #16]
 8105d1e:	781b      	ldrb	r3, [r3, #0]
 8105d20:	461a      	mov	r2, r3
 8105d22:	69fb      	ldr	r3, [r7, #28]
 8105d24:	4293      	cmp	r3, r2
 8105d26:	f77f af70 	ble.w	8105c0a <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x12>
            }
        }
    }

    CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_DATA_REQUESTED;
 8105d2a:	2306      	movs	r3, #6
 8105d2c:	76fb      	strb	r3, [r7, #27]
    xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8105d2e:	4b07      	ldr	r3, [pc, #28]	@ (8105d4c <_ZN14DoIPDaemonTask20onEventDataSubscribeERK12UMessageData+0x154>)
 8105d30:	6818      	ldr	r0, [r3, #0]
 8105d32:	f107 011b 	add.w	r1, r7, #27
 8105d36:	2300      	movs	r3, #0
 8105d38:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105d3c:	f00e fef2 	bl	8114b24 <xQueueGenericSend>
}
 8105d40:	bf00      	nop
 8105d42:	3724      	adds	r7, #36	@ 0x24
 8105d44:	46bd      	mov	sp, r7
 8105d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105d4a:	bf00      	nop
 8105d4c:	10000294 	.word	0x10000294

08105d50 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData>:

void DoIPDaemonTask::onEventDataUnsubscribe(const UMessageData& data)
{
 8105d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105d54:	b087      	sub	sp, #28
 8105d56:	af00      	add	r7, sp, #0
 8105d58:	6078      	str	r0, [r7, #4]
 8105d5a:	6039      	str	r1, [r7, #0]
    for (int i = 1; i <= data.event_subscriptions[0]; i++)
 8105d5c:	2101      	movs	r1, #1
 8105d5e:	6179      	str	r1, [r7, #20]
 8105d60:	e017      	b.n	8105d92 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x42>
    {
        if (data.event_subscriptions[i] > 63)
 8105d62:	6838      	ldr	r0, [r7, #0]
 8105d64:	6979      	ldr	r1, [r7, #20]
 8105d66:	4401      	add	r1, r0
 8105d68:	7809      	ldrb	r1, [r1, #0]
 8105d6a:	293f      	cmp	r1, #63	@ 0x3f
 8105d6c:	d907      	bls.n	8105d7e <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x2e>
        {
            subscribed_data[1] &= 0ULL << (data.event_subscriptions[i] - 64);
 8105d6e:	687e      	ldr	r6, [r7, #4]
 8105d70:	f04f 0000 	mov.w	r0, #0
 8105d74:	f04f 0100 	mov.w	r1, #0
 8105d78:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8105d7c:	e006      	b.n	8105d8c <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x3c>
        }
        else
        {
            subscribed_data[0] &= 0ULL << data.event_subscriptions[i];
 8105d7e:	687e      	ldr	r6, [r7, #4]
 8105d80:	f04f 0000 	mov.w	r0, #0
 8105d84:	f04f 0100 	mov.w	r1, #0
 8105d88:	e9c6 0104 	strd	r0, r1, [r6, #16]
    for (int i = 1; i <= data.event_subscriptions[0]; i++)
 8105d8c:	6979      	ldr	r1, [r7, #20]
 8105d8e:	3101      	adds	r1, #1
 8105d90:	6179      	str	r1, [r7, #20]
 8105d92:	6839      	ldr	r1, [r7, #0]
 8105d94:	7809      	ldrb	r1, [r1, #0]
 8105d96:	4608      	mov	r0, r1
 8105d98:	6979      	ldr	r1, [r7, #20]
 8105d9a:	4281      	cmp	r1, r0
 8105d9c:	dde1      	ble.n	8105d62 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x12>
        }
    }

    if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8105d9e:	6879      	ldr	r1, [r7, #4]
 8105da0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8105da4:	4301      	orrs	r1, r0
 8105da6:	d118      	bne.n	8105dda <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x8a>
 8105da8:	6879      	ldr	r1, [r7, #4]
 8105daa:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8105dae:	4301      	orrs	r1, r0
 8105db0:	d113      	bne.n	8105dda <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x8a>
    {
        currently_processed_request = REQUEST_INVALID;
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	22ff      	movs	r2, #255	@ 0xff
 8105db6:	f883 2020 	strb.w	r2, [r3, #32]
        first_in_cycle = REQUEST_INVALID;
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	22ff      	movs	r2, #255	@ 0xff
 8105dbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        CM::EConnectionEvent connEvent = CM::EConnectionEvent::EVENT_NO_DATA_TO_REQUEST;
 8105dc2:	2307      	movs	r3, #7
 8105dc4:	73fb      	strb	r3, [r7, #15]
        xQueueSend(connectionEventsQueue, &(connEvent), static_cast<TickType_t>(10000));
 8105dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8105e84 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x134>)
 8105dc8:	6818      	ldr	r0, [r3, #0]
 8105dca:	f107 010f 	add.w	r1, r7, #15
 8105dce:	2300      	movs	r3, #0
 8105dd0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8105dd4:	f00e fea6 	bl	8114b24 <xQueueGenericSend>
    }
 8105dd8:	e04f      	b.n	8105e7a <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x12a>
    else
    {
        for(int i = 1; i <= 128; i++)
 8105dda:	2101      	movs	r1, #1
 8105ddc:	6139      	str	r1, [r7, #16]
 8105dde:	e048      	b.n	8105e72 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x122>
        {
            if(i < 64)
 8105de0:	6939      	ldr	r1, [r7, #16]
 8105de2:	293f      	cmp	r1, #63	@ 0x3f
 8105de4:	dc20      	bgt.n	8105e28 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0xd8>
            {
                if(subscribed_data[0] & (1ULL << i))
 8105de6:	6879      	ldr	r1, [r7, #4]
 8105de8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8105dec:	693e      	ldr	r6, [r7, #16]
 8105dee:	f1c6 0e20 	rsb	lr, r6, #32
 8105df2:	f1a6 0c20 	sub.w	ip, r6, #32
 8105df6:	fa20 f206 	lsr.w	r2, r0, r6
 8105dfa:	fa01 fe0e 	lsl.w	lr, r1, lr
 8105dfe:	ea42 020e 	orr.w	r2, r2, lr
 8105e02:	fa21 fc0c 	lsr.w	ip, r1, ip
 8105e06:	ea42 020c 	orr.w	r2, r2, ip
 8105e0a:	fa21 f306 	lsr.w	r3, r1, r6
 8105e0e:	f002 0801 	and.w	r8, r2, #1
 8105e12:	f04f 0900 	mov.w	r9, #0
 8105e16:	ea58 0109 	orrs.w	r1, r8, r9
 8105e1a:	d027      	beq.n	8105e6c <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x11c>
                {
                    first_in_cycle = static_cast<EDoIPRequest>(i);
 8105e1c:	693b      	ldr	r3, [r7, #16]
 8105e1e:	b25a      	sxtb	r2, r3
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                    break;
 8105e26:	e028      	b.n	8105e7a <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x12a>
                }
            }
            else
            {
                if(subscribed_data[1] & (1ULL << (i - 64)))
 8105e28:	6879      	ldr	r1, [r7, #4]
 8105e2a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8105e2e:	693e      	ldr	r6, [r7, #16]
 8105e30:	3e40      	subs	r6, #64	@ 0x40
 8105e32:	f1c6 0e20 	rsb	lr, r6, #32
 8105e36:	f1a6 0c20 	sub.w	ip, r6, #32
 8105e3a:	fa20 f406 	lsr.w	r4, r0, r6
 8105e3e:	fa01 fe0e 	lsl.w	lr, r1, lr
 8105e42:	ea44 040e 	orr.w	r4, r4, lr
 8105e46:	fa21 fc0c 	lsr.w	ip, r1, ip
 8105e4a:	ea44 040c 	orr.w	r4, r4, ip
 8105e4e:	fa21 f506 	lsr.w	r5, r1, r6
 8105e52:	f004 0a01 	and.w	sl, r4, #1
 8105e56:	f04f 0b00 	mov.w	fp, #0
 8105e5a:	ea5a 010b 	orrs.w	r1, sl, fp
 8105e5e:	d005      	beq.n	8105e6c <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x11c>
                {
                    first_in_cycle = static_cast<EDoIPRequest>(i);
 8105e60:	693b      	ldr	r3, [r7, #16]
 8105e62:	b25a      	sxtb	r2, r3
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                    break;
 8105e6a:	e006      	b.n	8105e7a <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x12a>
        for(int i = 1; i <= 128; i++)
 8105e6c:	6939      	ldr	r1, [r7, #16]
 8105e6e:	3101      	adds	r1, #1
 8105e70:	6139      	str	r1, [r7, #16]
 8105e72:	6939      	ldr	r1, [r7, #16]
 8105e74:	2980      	cmp	r1, #128	@ 0x80
 8105e76:	ddb3      	ble.n	8105de0 <_ZN14DoIPDaemonTask22onEventDataUnsubscribeERK12UMessageData+0x90>
                }
            }
        }
    }
}
 8105e78:	bf00      	nop
 8105e7a:	bf00      	nop
 8105e7c:	371c      	adds	r7, #28
 8105e7e:	46bd      	mov	sp, r7
 8105e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105e84:	10000294 	.word	0x10000294

08105e88 <_ZN14DoIPDaemonTask15sendNextRequestEv>:

void DoIPDaemonTask::sendNextRequest()
{
 8105e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105e8c:	b091      	sub	sp, #68	@ 0x44
 8105e8e:	af04      	add	r7, sp, #16
 8105e90:	6078      	str	r0, [r7, #4]
    // it is ugly, but it is fast, which is critical here
    for (int i = currently_processed_request + 1; i < 129; i++) //it is 129 on purpose, because after 127th param is processed we will reset index to 0
 8105e92:	6879      	ldr	r1, [r7, #4]
 8105e94:	f991 1020 	ldrsb.w	r1, [r1, #32]
 8105e98:	3101      	adds	r1, #1
 8105e9a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8105e9c:	e08d      	b.n	8105fba <_ZN14DoIPDaemonTask15sendNextRequestEv+0x132>
    {
        if(i > 127)
 8105e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8105ea0:	297f      	cmp	r1, #127	@ 0x7f
 8105ea2:	dd01      	ble.n	8105ea8 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x20>
        {
            i = 0;
 8105ea4:	2100      	movs	r1, #0
 8105ea6:	62f9      	str	r1, [r7, #44]	@ 0x2c
        }
        if(i < 64)
 8105ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8105eaa:	293f      	cmp	r1, #63	@ 0x3f
 8105eac:	dc52      	bgt.n	8105f54 <_ZN14DoIPDaemonTask15sendNextRequestEv+0xcc>
        {
            if (subscribed_data[0] & (1ULL << i))
 8105eae:	6879      	ldr	r1, [r7, #4]
 8105eb0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8105eb4:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8105eb6:	f1c6 0e20 	rsb	lr, r6, #32
 8105eba:	f1a6 0c20 	sub.w	ip, r6, #32
 8105ebe:	fa20 f206 	lsr.w	r2, r0, r6
 8105ec2:	fa01 fe0e 	lsl.w	lr, r1, lr
 8105ec6:	ea42 020e 	orr.w	r2, r2, lr
 8105eca:	fa21 fc0c 	lsr.w	ip, r1, ip
 8105ece:	ea42 020c 	orr.w	r2, r2, ip
 8105ed2:	fa21 f306 	lsr.w	r3, r1, r6
 8105ed6:	f002 0801 	and.w	r8, r2, #1
 8105eda:	f04f 0900 	mov.w	r9, #0
 8105ede:	ea58 0109 	orrs.w	r1, r8, r9
 8105ee2:	d067      	beq.n	8105fb4 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x12c>
            {
                auto dataType = static_cast<EDoIPRequest>(i);
 8105ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105ee6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                currently_processed_request = dataType;
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8105ef0:	f883 2020 	strb.w	r2, [r3, #32]
                if(currently_processed_request == first_in_cycle)
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	f993 2020 	ldrsb.w	r2, [r3, #32]
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8105f00:	429a      	cmp	r2, r3
 8105f02:	d11e      	bne.n	8105f42 <_ZN14DoIPDaemonTask15sendNextRequestEv+0xba>
                {
                    auto current_timestamp = xTaskGetTickCount() * (1000/configTICK_RATE_HZ);
 8105f04:	f010 fbc0 	bl	8116688 <xTaskGetTickCount>
 8105f08:	6278      	str	r0, [r7, #36]	@ 0x24
                    auto ms_diff = current_timestamp - last_start_cycle_timestamp;
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f10:	1ad3      	subs	r3, r2, r3
 8105f12:	623b      	str	r3, [r7, #32]
                    last_start_cycle_timestamp = current_timestamp;
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f18:	625a      	str	r2, [r3, #36]	@ 0x24
                    UMessageData data;
                    data.last_request_cycle_ms = static_cast<uint16_t>(ms_diff);
 8105f1a:	6a3b      	ldr	r3, [r7, #32]
 8105f1c:	b29b      	uxth	r3, r3
 8105f1e:	81bb      	strh	r3, [r7, #12]
                    event_bus.send(EVENT_LAST_REQUEST_CYCLE_TOOK_MS, data, EVENT_CLIENT_FRONTEND);
 8105f20:	687d      	ldr	r5, [r7, #4]
 8105f22:	2300      	movs	r3, #0
 8105f24:	9303      	str	r3, [sp, #12]
 8105f26:	466c      	mov	r4, sp
 8105f28:	f107 0314 	add.w	r3, r7, #20
 8105f2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8105f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8105f34:	f107 030c 	add.w	r3, r7, #12
 8105f38:	cb0c      	ldmia	r3, {r2, r3}
 8105f3a:	2184      	movs	r1, #132	@ 0x84
 8105f3c:	4628      	mov	r0, r5
 8105f3e:	f000 fbbb 	bl	81066b8 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
                }
                conn_mgr.sendRequestForData(dataType);
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f46:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 8105f4a:	4611      	mov	r1, r2
 8105f4c:	4618      	mov	r0, r3
 8105f4e:	f7fe ff95 	bl	8104e7c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>
                break;
 8105f52:	e037      	b.n	8105fc4 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x13c>
            }
        }
        else
        {
            if (subscribed_data[1] & (1ULL << (i - 64)))
 8105f54:	6879      	ldr	r1, [r7, #4]
 8105f56:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8105f5a:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8105f5c:	3e40      	subs	r6, #64	@ 0x40
 8105f5e:	f1c6 0e20 	rsb	lr, r6, #32
 8105f62:	f1a6 0c20 	sub.w	ip, r6, #32
 8105f66:	fa20 f406 	lsr.w	r4, r0, r6
 8105f6a:	fa01 fe0e 	lsl.w	lr, r1, lr
 8105f6e:	ea44 040e 	orr.w	r4, r4, lr
 8105f72:	fa21 fc0c 	lsr.w	ip, r1, ip
 8105f76:	ea44 040c 	orr.w	r4, r4, ip
 8105f7a:	fa21 f506 	lsr.w	r5, r1, r6
 8105f7e:	f004 0a01 	and.w	sl, r4, #1
 8105f82:	f04f 0b00 	mov.w	fp, #0
 8105f86:	ea5a 010b 	orrs.w	r1, sl, fp
 8105f8a:	d013      	beq.n	8105fb4 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x12c>
            {
                auto dataType = static_cast<EDoIPRequest>(i - 64);
 8105f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105f8e:	b2db      	uxtb	r3, r3
 8105f90:	3b40      	subs	r3, #64	@ 0x40
 8105f92:	b2db      	uxtb	r3, r3
 8105f94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                currently_processed_request = dataType;
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8105f9e:	f883 2020 	strb.w	r2, [r3, #32]
                conn_mgr.sendRequestForData(dataType);
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105fa6:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8105faa:	4611      	mov	r1, r2
 8105fac:	4618      	mov	r0, r3
 8105fae:	f7fe ff65 	bl	8104e7c <_ZN17ConnectionManager18sendRequestForDataEN7APIDoIP12EDoIPRequestE>
                break;
 8105fb2:	e007      	b.n	8105fc4 <_ZN14DoIPDaemonTask15sendNextRequestEv+0x13c>
    for (int i = currently_processed_request + 1; i < 129; i++) //it is 129 on purpose, because after 127th param is processed we will reset index to 0
 8105fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8105fb6:	3101      	adds	r1, #1
 8105fb8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8105fba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8105fbc:	2980      	cmp	r1, #128	@ 0x80
 8105fbe:	f77f af6e 	ble.w	8105e9e <_ZN14DoIPDaemonTask15sendNextRequestEv+0x16>
            }
        }
    }
}
 8105fc2:	bf00      	nop
 8105fc4:	bf00      	nop
 8105fc6:	3734      	adds	r7, #52	@ 0x34
 8105fc8:	46bd      	mov	sp, r7
 8105fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08105fce <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8105fce:	b480      	push	{r7}
 8105fd0:	b083      	sub	sp, #12
 8105fd2:	af00      	add	r7, sp, #0
 8105fd4:	6078      	str	r0, [r7, #4]
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	461a      	mov	r2, r3
 8105fda:	2300      	movs	r3, #0
 8105fdc:	6013      	str	r3, [r2, #0]
 8105fde:	6053      	str	r3, [r2, #4]
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	2200      	movs	r2, #0
 8105fe4:	609a      	str	r2, [r3, #8]
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	4618      	mov	r0, r3
 8105fea:	370c      	adds	r7, #12
 8105fec:	46bd      	mov	sp, r7
 8105fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ff2:	4770      	bx	lr

08105ff4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8105ff4:	b590      	push	{r4, r7, lr}
 8105ff6:	b083      	sub	sp, #12
 8105ff8:	af00      	add	r7, sp, #0
 8105ffa:	6078      	str	r0, [r7, #4]
 8105ffc:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8105ffe:	687b      	ldr	r3, [r7, #4]
 8106000:	461a      	mov	r2, r3
 8106002:	2300      	movs	r3, #0
 8106004:	6013      	str	r3, [r2, #0]
 8106006:	6053      	str	r3, [r2, #4]
 8106008:	6093      	str	r3, [r2, #8]
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	4618      	mov	r0, r3
 810600e:	f7ff ffde 	bl	8105fce <_ZNSt14_Function_baseC1Ev>
 8106012:	687b      	ldr	r3, [r7, #4]
 8106014:	2200      	movs	r2, #0
 8106016:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8106018:	6838      	ldr	r0, [r7, #0]
 810601a:	f000 f81b 	bl	8106054 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 810601e:	4603      	mov	r3, r0
 8106020:	2b00      	cmp	r3, #0
 8106022:	d00e      	beq.n	8106042 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8106024:	687c      	ldr	r4, [r7, #4]
 8106026:	6838      	ldr	r0, [r7, #0]
 8106028:	f000 f81f 	bl	810606a <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 810602c:	4603      	mov	r3, r0
 810602e:	4619      	mov	r1, r3
 8106030:	4620      	mov	r0, r4
 8106032:	f000 f825 	bl	8106080 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	4a04      	ldr	r2, [pc, #16]	@ (810604c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 810603a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	4a04      	ldr	r2, [pc, #16]	@ (8106050 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 8106040:	609a      	str	r2, [r3, #8]
	    }
	}
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	4618      	mov	r0, r3
 8106046:	370c      	adds	r7, #12
 8106048:	46bd      	mov	sp, r7
 810604a:	bd90      	pop	{r4, r7, pc}
 810604c:	081060a5 	.word	0x081060a5
 8106050:	081060f5 	.word	0x081060f5

08106054 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8106054:	b480      	push	{r7}
 8106056:	b083      	sub	sp, #12
 8106058:	af00      	add	r7, sp, #0
 810605a:	6078      	str	r0, [r7, #4]
	  { return true; }
 810605c:	2301      	movs	r3, #1
 810605e:	4618      	mov	r0, r3
 8106060:	370c      	adds	r7, #12
 8106062:	46bd      	mov	sp, r7
 8106064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106068:	4770      	bx	lr

0810606a <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810606a:	b480      	push	{r7}
 810606c:	b083      	sub	sp, #12
 810606e:	af00      	add	r7, sp, #0
 8106070:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	4618      	mov	r0, r3
 8106076:	370c      	adds	r7, #12
 8106078:	46bd      	mov	sp, r7
 810607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810607e:	4770      	bx	lr

08106080 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8106080:	b590      	push	{r4, r7, lr}
 8106082:	b083      	sub	sp, #12
 8106084:	af00      	add	r7, sp, #0
 8106086:	6078      	str	r0, [r7, #4]
 8106088:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 810608a:	6838      	ldr	r0, [r7, #0]
 810608c:	f7ff ffed 	bl	810606a <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8106090:	4603      	mov	r3, r0
 8106092:	4622      	mov	r2, r4
 8106094:	4619      	mov	r1, r3
 8106096:	6878      	ldr	r0, [r7, #4]
 8106098:	f000 f84b 	bl	8106132 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 810609c:	bf00      	nop
 810609e:	370c      	adds	r7, #12
 81060a0:	46bd      	mov	sp, r7
 81060a2:	bd90      	pop	{r4, r7, pc}

081060a4 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 81060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81060a8:	b086      	sub	sp, #24
 81060aa:	af02      	add	r7, sp, #8
 81060ac:	60f8      	str	r0, [r7, #12]
 81060ae:	60b9      	str	r1, [r7, #8]
 81060b0:	607a      	str	r2, [r7, #4]
 81060b2:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 81060b4:	68f8      	ldr	r0, [r7, #12]
 81060b6:	f000 f855 	bl	8106164 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81060ba:	4604      	mov	r4, r0
 81060bc:	68b8      	ldr	r0, [r7, #8]
 81060be:	f000 f861 	bl	8106184 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81060c2:	4605      	mov	r5, r0
 81060c4:	6878      	ldr	r0, [r7, #4]
 81060c6:	f000 f868 	bl	810619a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 81060ca:	4606      	mov	r6, r0
 81060cc:	6838      	ldr	r0, [r7, #0]
 81060ce:	f000 f86f 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81060d2:	4680      	mov	r8, r0
 81060d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81060d6:	f000 f86b 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81060da:	4603      	mov	r3, r0
 81060dc:	9300      	str	r3, [sp, #0]
 81060de:	4643      	mov	r3, r8
 81060e0:	4632      	mov	r2, r6
 81060e2:	4629      	mov	r1, r5
 81060e4:	4620      	mov	r0, r4
 81060e6:	f000 f86e 	bl	81061c6 <_ZSt10__invoke_rIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 81060ea:	bf00      	nop
      }
 81060ec:	3710      	adds	r7, #16
 81060ee:	46bd      	mov	sp, r7
 81060f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081060f4 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 81060f4:	b590      	push	{r4, r7, lr}
 81060f6:	b085      	sub	sp, #20
 81060f8:	af00      	add	r7, sp, #0
 81060fa:	60f8      	str	r0, [r7, #12]
 81060fc:	60b9      	str	r1, [r7, #8]
 81060fe:	4613      	mov	r3, r2
 8106100:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8106102:	79fb      	ldrb	r3, [r7, #7]
 8106104:	2b01      	cmp	r3, #1
 8106106:	d109      	bne.n	810611c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8106108:	68b8      	ldr	r0, [r7, #8]
 810610a:	f000 f82b 	bl	8106164 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810610e:	4604      	mov	r4, r0
 8106110:	68f8      	ldr	r0, [r7, #12]
 8106112:	f000 f881 	bl	8106218 <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8106116:	4603      	mov	r3, r0
 8106118:	601c      	str	r4, [r3, #0]
	    break;
 810611a:	e005      	b.n	8106128 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN14DoIPDaemonTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 810611c:	79fb      	ldrb	r3, [r7, #7]
 810611e:	461a      	mov	r2, r3
 8106120:	68b9      	ldr	r1, [r7, #8]
 8106122:	68f8      	ldr	r0, [r7, #12]
 8106124:	f000 f884 	bl	8106230 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8106128:	2300      	movs	r3, #0
      }
 810612a:	4618      	mov	r0, r3
 810612c:	3714      	adds	r7, #20
 810612e:	46bd      	mov	sp, r7
 8106130:	bd90      	pop	{r4, r7, pc}

08106132 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8106132:	b590      	push	{r4, r7, lr}
 8106134:	b085      	sub	sp, #20
 8106136:	af00      	add	r7, sp, #0
 8106138:	60f8      	str	r0, [r7, #12]
 810613a:	60b9      	str	r1, [r7, #8]
 810613c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 810613e:	68f8      	ldr	r0, [r7, #12]
 8106140:	f7ff fae0 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 8106144:	4603      	mov	r3, r0
 8106146:	4619      	mov	r1, r3
 8106148:	2004      	movs	r0, #4
 810614a:	f7fb f895 	bl	8101278 <_ZnwjPv>
 810614e:	4604      	mov	r4, r0
 8106150:	68b8      	ldr	r0, [r7, #8]
 8106152:	f7ff ff8a 	bl	810606a <_ZSt7forwardIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8106156:	4603      	mov	r3, r0
 8106158:	681b      	ldr	r3, [r3, #0]
 810615a:	6023      	str	r3, [r4, #0]
	  }
 810615c:	bf00      	nop
 810615e:	3714      	adds	r7, #20
 8106160:	46bd      	mov	sp, r7
 8106162:	bd90      	pop	{r4, r7, pc}

08106164 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8106164:	b580      	push	{r7, lr}
 8106166:	b084      	sub	sp, #16
 8106168:	af00      	add	r7, sp, #0
 810616a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 810616c:	6878      	ldr	r0, [r7, #4]
 810616e:	f000 f899 	bl	81062a4 <_ZNKSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 8106172:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8106174:	68f8      	ldr	r0, [r7, #12]
 8106176:	f000 f8a1 	bl	81062bc <_ZSt11__addressofIKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 810617a:	4603      	mov	r3, r0
	}
 810617c:	4618      	mov	r0, r3
 810617e:	3710      	adds	r7, #16
 8106180:	46bd      	mov	sp, r7
 8106182:	bd80      	pop	{r7, pc}

08106184 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8106184:	b480      	push	{r7}
 8106186:	b083      	sub	sp, #12
 8106188:	af00      	add	r7, sp, #0
 810618a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	4618      	mov	r0, r3
 8106190:	370c      	adds	r7, #12
 8106192:	46bd      	mov	sp, r7
 8106194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106198:	4770      	bx	lr

0810619a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810619a:	b480      	push	{r7}
 810619c:	b083      	sub	sp, #12
 810619e:	af00      	add	r7, sp, #0
 81061a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	4618      	mov	r0, r3
 81061a6:	370c      	adds	r7, #12
 81061a8:	46bd      	mov	sp, r7
 81061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ae:	4770      	bx	lr

081061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81061b0:	b480      	push	{r7}
 81061b2:	b083      	sub	sp, #12
 81061b4:	af00      	add	r7, sp, #0
 81061b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	4618      	mov	r0, r3
 81061bc:	370c      	adds	r7, #12
 81061be:	46bd      	mov	sp, r7
 81061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061c4:	4770      	bx	lr

081061c6 <_ZSt10__invoke_rIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 81061c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81061ca:	b087      	sub	sp, #28
 81061cc:	af02      	add	r7, sp, #8
 81061ce:	60f8      	str	r0, [r7, #12]
 81061d0:	60b9      	str	r1, [r7, #8]
 81061d2:	607a      	str	r2, [r7, #4]
 81061d4:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 81061d6:	68f8      	ldr	r0, [r7, #12]
 81061d8:	f000 f87b 	bl	81062d2 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 81061dc:	4605      	mov	r5, r0
 81061de:	68b8      	ldr	r0, [r7, #8]
 81061e0:	f7ff ffd0 	bl	8106184 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81061e4:	4606      	mov	r6, r0
 81061e6:	6878      	ldr	r0, [r7, #4]
 81061e8:	f7ff ffd7 	bl	810619a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 81061ec:	4680      	mov	r8, r0
 81061ee:	6838      	ldr	r0, [r7, #0]
 81061f0:	f7ff ffde 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81061f4:	4604      	mov	r4, r0
 81061f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81061f8:	f7ff ffda 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81061fc:	4603      	mov	r3, r0
 81061fe:	9301      	str	r3, [sp, #4]
 8106200:	9400      	str	r4, [sp, #0]
 8106202:	4643      	mov	r3, r8
 8106204:	4632      	mov	r2, r6
 8106206:	4629      	mov	r1, r5
 8106208:	4648      	mov	r0, r9
 810620a:	f000 f86d 	bl	81062e8 <_ZSt13__invoke_implIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 810620e:	bf00      	nop
 8106210:	3714      	adds	r7, #20
 8106212:	46bd      	mov	sp, r7
 8106214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08106218 <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8106218:	b580      	push	{r7, lr}
 810621a:	b082      	sub	sp, #8
 810621c:	af00      	add	r7, sp, #0
 810621e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8106220:	6878      	ldr	r0, [r7, #4]
 8106222:	f7ff fa6f 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 8106226:	4603      	mov	r3, r0
 8106228:	4618      	mov	r0, r3
 810622a:	3708      	adds	r7, #8
 810622c:	46bd      	mov	sp, r7
 810622e:	bd80      	pop	{r7, pc}

08106230 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8106230:	b590      	push	{r4, r7, lr}
 8106232:	b085      	sub	sp, #20
 8106234:	af00      	add	r7, sp, #0
 8106236:	60f8      	str	r0, [r7, #12]
 8106238:	60b9      	str	r1, [r7, #8]
 810623a:	4613      	mov	r3, r2
 810623c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810623e:	79fb      	ldrb	r3, [r7, #7]
 8106240:	2b03      	cmp	r3, #3
 8106242:	d82a      	bhi.n	810629a <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8106244:	a201      	add	r2, pc, #4	@ (adr r2, 810624c <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8106246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810624a:	bf00      	nop
 810624c:	0810625d 	.word	0x0810625d
 8106250:	0810626b 	.word	0x0810626b
 8106254:	0810627f 	.word	0x0810627f
 8106258:	08106291 	.word	0x08106291
	      __dest._M_access<const type_info*>() = nullptr;
 810625c:	68f8      	ldr	r0, [r7, #12]
 810625e:	f000 f876 	bl	810634e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8106262:	4603      	mov	r3, r0
 8106264:	2200      	movs	r2, #0
 8106266:	601a      	str	r2, [r3, #0]
	      break;
 8106268:	e017      	b.n	810629a <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810626a:	68b8      	ldr	r0, [r7, #8]
 810626c:	f7ff ff7a 	bl	8106164 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8106270:	4604      	mov	r4, r0
 8106272:	68f8      	ldr	r0, [r7, #12]
 8106274:	f7ff ffd0 	bl	8106218 <_ZNSt9_Any_data9_M_accessIPZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8106278:	4603      	mov	r3, r0
 810627a:	601c      	str	r4, [r3, #0]
	      break;
 810627c:	e00d      	b.n	810629a <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 810627e:	68b8      	ldr	r0, [r7, #8]
 8106280:	f7ff ff70 	bl	8106164 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8106284:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8106286:	4619      	mov	r1, r3
 8106288:	68f8      	ldr	r0, [r7, #12]
 810628a:	f000 f86c 	bl	8106366 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 810628e:	e004      	b.n	810629a <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8106290:	4621      	mov	r1, r4
 8106292:	68f8      	ldr	r0, [r7, #12]
 8106294:	f000 f879 	bl	810638a <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8106298:	bf00      	nop
	  return false;
 810629a:	2300      	movs	r3, #0
	}
 810629c:	4618      	mov	r0, r3
 810629e:	3714      	adds	r7, #20
 81062a0:	46bd      	mov	sp, r7
 81062a2:	bd90      	pop	{r4, r7, pc}

081062a4 <_ZNKSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 81062a4:	b580      	push	{r7, lr}
 81062a6:	b082      	sub	sp, #8
 81062a8:	af00      	add	r7, sp, #0
 81062aa:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 81062ac:	6878      	ldr	r0, [r7, #4]
 81062ae:	f7ff fa34 	bl	810571a <_ZNKSt9_Any_data9_M_accessEv>
 81062b2:	4603      	mov	r3, r0
 81062b4:	4618      	mov	r0, r3
 81062b6:	3708      	adds	r7, #8
 81062b8:	46bd      	mov	sp, r7
 81062ba:	bd80      	pop	{r7, pc}

081062bc <_ZSt11__addressofIKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 81062bc:	b480      	push	{r7}
 81062be:	b083      	sub	sp, #12
 81062c0:	af00      	add	r7, sp, #0
 81062c2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 81062c4:	687b      	ldr	r3, [r7, #4]
 81062c6:	4618      	mov	r0, r3
 81062c8:	370c      	adds	r7, #12
 81062ca:	46bd      	mov	sp, r7
 81062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062d0:	4770      	bx	lr

081062d2 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81062d2:	b480      	push	{r7}
 81062d4:	b083      	sub	sp, #12
 81062d6:	af00      	add	r7, sp, #0
 81062d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	4618      	mov	r0, r3
 81062de:	370c      	adds	r7, #12
 81062e0:	46bd      	mov	sp, r7
 81062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062e6:	4770      	bx	lr

081062e8 <_ZSt13__invoke_implIvRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 81062e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81062ec:	b08a      	sub	sp, #40	@ 0x28
 81062ee:	af06      	add	r7, sp, #24
 81062f0:	7338      	strb	r0, [r7, #12]
 81062f2:	60b9      	str	r1, [r7, #8]
 81062f4:	607a      	str	r2, [r7, #4]
 81062f6:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 81062f8:	68b8      	ldr	r0, [r7, #8]
 81062fa:	f7ff ffea 	bl	81062d2 <_ZSt7forwardIRZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 81062fe:	4680      	mov	r8, r0
 8106300:	6878      	ldr	r0, [r7, #4]
 8106302:	f7ff ff3f 	bl	8106184 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8106306:	4603      	mov	r3, r0
 8106308:	781e      	ldrb	r6, [r3, #0]
 810630a:	6838      	ldr	r0, [r7, #0]
 810630c:	f7ff ff45 	bl	810619a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8106310:	4604      	mov	r4, r0
 8106312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106314:	f7ff ff4c 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8106318:	4603      	mov	r3, r0
 810631a:	781d      	ldrb	r5, [r3, #0]
 810631c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810631e:	f7ff ff47 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8106322:	4603      	mov	r3, r0
 8106324:	781b      	ldrb	r3, [r3, #0]
 8106326:	9304      	str	r3, [sp, #16]
 8106328:	9503      	str	r5, [sp, #12]
 810632a:	466d      	mov	r5, sp
 810632c:	f104 0308 	add.w	r3, r4, #8
 8106330:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8106334:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8106338:	e894 000c 	ldmia.w	r4, {r2, r3}
 810633c:	4631      	mov	r1, r6
 810633e:	4640      	mov	r0, r8
 8106340:	f7ff fa99 	bl	8105876 <_ZZN14DoIPDaemonTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8106344:	bf00      	nop
 8106346:	3710      	adds	r7, #16
 8106348:	46bd      	mov	sp, r7
 810634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810634e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 810634e:	b580      	push	{r7, lr}
 8106350:	b082      	sub	sp, #8
 8106352:	af00      	add	r7, sp, #0
 8106354:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8106356:	6878      	ldr	r0, [r7, #4]
 8106358:	f7ff f9d4 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 810635c:	4603      	mov	r3, r0
 810635e:	4618      	mov	r0, r3
 8106360:	3708      	adds	r7, #8
 8106362:	46bd      	mov	sp, r7
 8106364:	bd80      	pop	{r7, pc}

08106366 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8106366:	b590      	push	{r4, r7, lr}
 8106368:	b083      	sub	sp, #12
 810636a:	af00      	add	r7, sp, #0
 810636c:	6078      	str	r0, [r7, #4]
 810636e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8106370:	6838      	ldr	r0, [r7, #0]
 8106372:	f000 f816 	bl	81063a2 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8106376:	4603      	mov	r3, r0
 8106378:	4622      	mov	r2, r4
 810637a:	4619      	mov	r1, r3
 810637c:	6878      	ldr	r0, [r7, #4]
 810637e:	f000 f81b 	bl	81063b8 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8106382:	bf00      	nop
 8106384:	370c      	adds	r7, #12
 8106386:	46bd      	mov	sp, r7
 8106388:	bd90      	pop	{r4, r7, pc}

0810638a <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 810638a:	b580      	push	{r7, lr}
 810638c:	b082      	sub	sp, #8
 810638e:	af00      	add	r7, sp, #0
 8106390:	6078      	str	r0, [r7, #4]
 8106392:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8106394:	6878      	ldr	r0, [r7, #4]
 8106396:	f000 f828 	bl	81063ea <_ZNSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 810639a:	bf00      	nop
 810639c:	3708      	adds	r7, #8
 810639e:	46bd      	mov	sp, r7
 81063a0:	bd80      	pop	{r7, pc}

081063a2 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81063a2:	b480      	push	{r7}
 81063a4:	b083      	sub	sp, #12
 81063a6:	af00      	add	r7, sp, #0
 81063a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	4618      	mov	r0, r3
 81063ae:	370c      	adds	r7, #12
 81063b0:	46bd      	mov	sp, r7
 81063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063b6:	4770      	bx	lr

081063b8 <_ZNSt14_Function_base13_Base_managerIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 81063b8:	b590      	push	{r4, r7, lr}
 81063ba:	b085      	sub	sp, #20
 81063bc:	af00      	add	r7, sp, #0
 81063be:	60f8      	str	r0, [r7, #12]
 81063c0:	60b9      	str	r1, [r7, #8]
 81063c2:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 81063c4:	68f8      	ldr	r0, [r7, #12]
 81063c6:	f7ff f99d 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 81063ca:	4603      	mov	r3, r0
 81063cc:	4619      	mov	r1, r3
 81063ce:	2004      	movs	r0, #4
 81063d0:	f7fa ff52 	bl	8101278 <_ZnwjPv>
 81063d4:	4604      	mov	r4, r0
 81063d6:	68b8      	ldr	r0, [r7, #8]
 81063d8:	f7ff ffe3 	bl	81063a2 <_ZSt7forwardIRKZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 81063dc:	4603      	mov	r3, r0
 81063de:	681b      	ldr	r3, [r3, #0]
 81063e0:	6023      	str	r3, [r4, #0]
	  }
 81063e2:	bf00      	nop
 81063e4:	3714      	adds	r7, #20
 81063e6:	46bd      	mov	sp, r7
 81063e8:	bd90      	pop	{r4, r7, pc}

081063ea <_ZNSt9_Any_data9_M_accessIZN14DoIPDaemonTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 81063ea:	b580      	push	{r7, lr}
 81063ec:	b082      	sub	sp, #8
 81063ee:	af00      	add	r7, sp, #0
 81063f0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 81063f2:	6878      	ldr	r0, [r7, #4]
 81063f4:	f7ff f986 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 81063f8:	4603      	mov	r3, r0
 81063fa:	4618      	mov	r0, r3
 81063fc:	3708      	adds	r7, #8
 81063fe:	46bd      	mov	sp, r7
 8106400:	bd80      	pop	{r7, pc}
	...

08106404 <_Z41__static_initialization_and_destruction_0ii>:
 8106404:	b580      	push	{r7, lr}
 8106406:	b0c8      	sub	sp, #288	@ 0x120
 8106408:	af04      	add	r7, sp, #16
 810640a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 810640e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8106412:	6018      	str	r0, [r3, #0]
 8106414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8106418:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 810641c:	6019      	str	r1, [r3, #0]
 810641e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8106422:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8106426:	681b      	ldr	r3, [r3, #0]
 8106428:	2b01      	cmp	r3, #1
 810642a:	f040 80dd 	bne.w	81065e8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>
 810642e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8106432:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8106436:	681b      	ldr	r3, [r3, #0]
 8106438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810643c:	4293      	cmp	r3, r2
 810643e:	f040 80d3 	bne.w	81065e8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>
        
        IHKA_EVAPORATOR_TEMPERATURE_SENSOR = EVENT_DATA_UPDATE_IHKA_EVAPORATOR_TEMPERATURE_SENSOR,
        IHKA_TEMPERATURE_SELECTOR = EVENT_DATA_UPDATE_IHKA_TEMPERATURE_SELECTOR,
    };

    const std::unordered_map<EDoIPRequest, std::pair<std::variant<EUDSDID, EDynamicDataIndentifierRequestCode>, EECUAddress>> dataIdentifierMap =
 8106442:	f107 0314 	add.w	r3, r7, #20
 8106446:	22f0      	movs	r2, #240	@ 0xf0
 8106448:	2100      	movs	r1, #0
 810644a:	4618      	mov	r0, r3
 810644c:	f01e fa1a 	bl	8124884 <memset>
 8106450:	4b71      	ldr	r3, [pc, #452]	@ (8106618 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8106452:	61bb      	str	r3, [r7, #24]
 8106454:	2301      	movs	r3, #1
 8106456:	773b      	strb	r3, [r7, #28]
 8106458:	2312      	movs	r3, #18
 810645a:	f887 3020 	strb.w	r3, [r7, #32]
 810645e:	2301      	movs	r3, #1
 8106460:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8106464:	4b6d      	ldr	r3, [pc, #436]	@ (810661c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8106466:	62bb      	str	r3, [r7, #40]	@ 0x28
 8106468:	2301      	movs	r3, #1
 810646a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 810646e:	2312      	movs	r3, #18
 8106470:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8106474:	2302      	movs	r3, #2
 8106476:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 810647a:	4b69      	ldr	r3, [pc, #420]	@ (8106620 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 810647c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810647e:	2301      	movs	r3, #1
 8106480:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8106484:	2312      	movs	r3, #18
 8106486:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 810648a:	2303      	movs	r3, #3
 810648c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8106490:	4b64      	ldr	r3, [pc, #400]	@ (8106624 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8106492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106494:	2301      	movs	r3, #1
 8106496:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 810649a:	2312      	movs	r3, #18
 810649c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 81064a0:	2304      	movs	r3, #4
 81064a2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 81064a6:	4b60      	ldr	r3, [pc, #384]	@ (8106628 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 81064a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 81064aa:	2301      	movs	r3, #1
 81064ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 81064b0:	2312      	movs	r3, #18
 81064b2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 81064b6:	2305      	movs	r3, #5
 81064b8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 81064bc:	4b5b      	ldr	r3, [pc, #364]	@ (810662c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 81064be:	66bb      	str	r3, [r7, #104]	@ 0x68
 81064c0:	2301      	movs	r3, #1
 81064c2:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 81064c6:	2312      	movs	r3, #18
 81064c8:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 81064cc:	2306      	movs	r3, #6
 81064ce:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 81064d2:	4b57      	ldr	r3, [pc, #348]	@ (8106630 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 81064d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 81064d6:	2301      	movs	r3, #1
 81064d8:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 81064dc:	2312      	movs	r3, #18
 81064de:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 81064e2:	2307      	movs	r3, #7
 81064e4:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 81064e8:	4b52      	ldr	r3, [pc, #328]	@ (8106634 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 81064ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81064ee:	2301      	movs	r3, #1
 81064f0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 81064f4:	2312      	movs	r3, #18
 81064f6:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 81064fa:	2308      	movs	r3, #8
 81064fc:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 8106500:	f24d 130d 	movw	r3, #53517	@ 0xd10d
 8106504:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 8106508:	2360      	movs	r3, #96	@ 0x60
 810650a:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 810650e:	2309      	movs	r3, #9
 8106510:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8106514:	f24d 1307 	movw	r3, #53511	@ 0xd107
 8106518:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 810651c:	2360      	movs	r3, #96	@ 0x60
 810651e:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 8106522:	230a      	movs	r3, #10
 8106524:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8106528:	f24d 1312 	movw	r3, #53522	@ 0xd112
 810652c:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
 8106530:	2360      	movs	r3, #96	@ 0x60
 8106532:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
 8106536:	230b      	movs	r3, #11
 8106538:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 810653c:	f24d 1306 	movw	r3, #53510	@ 0xd106
 8106540:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
 8106544:	2360      	movs	r3, #96	@ 0x60
 8106546:	f887 30d0 	strb.w	r3, [r7, #208]	@ 0xd0
 810654a:	230c      	movs	r3, #12
 810654c:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
 8106550:	f24d 131f 	movw	r3, #53535	@ 0xd11f
 8106554:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
 8106558:	2360      	movs	r3, #96	@ 0x60
 810655a:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 810655e:	230d      	movs	r3, #13
 8106560:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 8106564:	f64d 135c 	movw	r3, #55644	@ 0xd95c
 8106568:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
 810656c:	2378      	movs	r3, #120	@ 0x78
 810656e:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
 8106572:	230e      	movs	r3, #14
 8106574:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
 8106578:	f64d 1377 	movw	r3, #55671	@ 0xd977
 810657c:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 8106580:	2378      	movs	r3, #120	@ 0x78
 8106582:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
 8106586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 810658a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 810658e:	f107 0214 	add.w	r2, r7, #20
 8106592:	601a      	str	r2, [r3, #0]
 8106594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8106598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 810659c:	220f      	movs	r2, #15
 810659e:	605a      	str	r2, [r3, #4]
 81065a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 81065a4:	4618      	mov	r0, r3
 81065a6:	f7fb f8cf 	bl	8101748 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEEC1Ev>
 81065aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81065ae:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 81065b2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 81065b6:	9302      	str	r3, [sp, #8]
 81065b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81065bc:	9301      	str	r3, [sp, #4]
 81065be:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 81065c2:	9300      	str	r3, [sp, #0]
 81065c4:	2300      	movs	r3, #0
 81065c6:	ca06      	ldmia	r2, {r1, r2}
 81065c8:	481b      	ldr	r0, [pc, #108]	@ (8106638 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 81065ca:	f7fb f8d4 	bl	8101776 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEEC1ESt16initializer_listISE_EjRKSA_RKSC_RKSF_>
 81065ce:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 81065d2:	4618      	mov	r0, r3
 81065d4:	f7fb f8c4 	bl	8101760 <_ZNSaISt4pairIKN7APIDoIP12EDoIPRequestES_ISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressEEED1Ev>
QueueHandle_t connectionEventsQueue = xQueueCreate(16, sizeof(SMessage));
 81065d8:	2200      	movs	r2, #0
 81065da:	211c      	movs	r1, #28
 81065dc:	2010      	movs	r0, #16
 81065de:	f00e f91c 	bl	811481a <xQueueGenericCreate>
 81065e2:	4603      	mov	r3, r0
 81065e4:	4a15      	ldr	r2, [pc, #84]	@ (810663c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 81065e6:	6013      	str	r3, [r2, #0]
 81065e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81065ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 81065f0:	681b      	ldr	r3, [r3, #0]
 81065f2:	2b00      	cmp	r3, #0
 81065f4:	d10b      	bne.n	810660e <_Z41__static_initialization_and_destruction_0ii+0x20a>
 81065f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81065fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8106604:	4293      	cmp	r3, r2
 8106606:	d102      	bne.n	810660e <_Z41__static_initialization_and_destruction_0ii+0x20a>
 8106608:	480b      	ldr	r0, [pc, #44]	@ (8106638 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 810660a:	f7fc fb99 	bl	8102d40 <_ZNSt13unordered_mapIN7APIDoIP12EDoIPRequestESt4pairISt7variantIJ7EUDSDID34EDynamicDataIndentifierRequestCodeEE11EECUAddressESt4hashIS1_ESt8equal_toIS1_ESaIS2_IKS1_S8_EEED1Ev>
}
 810660e:	bf00      	nop
 8106610:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8106614:	46bd      	mov	sp, r7
 8106616:	bd80      	pop	{r7, pc}
 8106618:	44020102 	.word	0x44020102
 810661c:	48070102 	.word	0x48070102
 8106620:	43000101 	.word	0x43000101
 8106624:	46090101 	.word	0x46090101
 8106628:	42040101 	.word	0x42040101
 810662c:	42080102 	.word	0x42080102
 8106630:	481a0102 	.word	0x481a0102
 8106634:	4a290101 	.word	0x4a290101
 8106638:	10000278 	.word	0x10000278
 810663c:	10000294 	.word	0x10000294

08106640 <_GLOBAL__sub_I_connectionEventsQueue>:
 8106640:	b580      	push	{r7, lr}
 8106642:	af00      	add	r7, sp, #0
 8106644:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8106648:	2001      	movs	r0, #1
 810664a:	f7ff fedb 	bl	8106404 <_Z41__static_initialization_and_destruction_0ii>
 810664e:	bd80      	pop	{r7, pc}

08106650 <_GLOBAL__sub_D_connectionEventsQueue>:
 8106650:	b580      	push	{r7, lr}
 8106652:	af00      	add	r7, sp, #0
 8106654:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8106658:	2000      	movs	r0, #0
 810665a:	f7ff fed3 	bl	8106404 <_Z41__static_initialization_and_destruction_0ii>
 810665e:	bd80      	pop	{r7, pc}

08106660 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8106660:	b480      	push	{r7}
 8106662:	b083      	sub	sp, #12
 8106664:	af00      	add	r7, sp, #0
 8106666:	6078      	str	r0, [r7, #4]
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	689b      	ldr	r3, [r3, #8]
 810666c:	2b00      	cmp	r3, #0
 810666e:	bf0c      	ite	eq
 8106670:	2301      	moveq	r3, #1
 8106672:	2300      	movne	r3, #0
 8106674:	b2db      	uxtb	r3, r3
 8106676:	4618      	mov	r0, r3
 8106678:	370c      	adds	r7, #12
 810667a:	46bd      	mov	sp, r7
 810667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106680:	4770      	bx	lr
	...

08106684 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 8106684:	b480      	push	{r7}
 8106686:	b085      	sub	sp, #20
 8106688:	af00      	add	r7, sp, #0
 810668a:	60f8      	str	r0, [r7, #12]
 810668c:	60b9      	str	r1, [r7, #8]
 810668e:	4613      	mov	r3, r2
 8106690:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 8106692:	68fb      	ldr	r3, [r7, #12]
 8106694:	68ba      	ldr	r2, [r7, #8]
 8106696:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8106698:	68fb      	ldr	r3, [r7, #12]
 810669a:	79fa      	ldrb	r2, [r7, #7]
 810669c:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 810669e:	4b05      	ldr	r3, [pc, #20]	@ (81066b4 <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 81066a0:	681a      	ldr	r2, [r3, #0]
 81066a2:	68fb      	ldr	r3, [r7, #12]
 81066a4:	609a      	str	r2, [r3, #8]
 81066a6:	68fb      	ldr	r3, [r7, #12]
 81066a8:	4618      	mov	r0, r3
 81066aa:	3714      	adds	r7, #20
 81066ac:	46bd      	mov	sp, r7
 81066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066b2:	4770      	bx	lr
 81066b4:	100001cc 	.word	0x100001cc

081066b8 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>:

bool EventBus::send(EEventType event, UMessageData message, EEventClient eventReceiver)
{
 81066b8:	b082      	sub	sp, #8
 81066ba:	b5b0      	push	{r4, r5, r7, lr}
 81066bc:	b08a      	sub	sp, #40	@ 0x28
 81066be:	af00      	add	r7, sp, #0
 81066c0:	6078      	str	r0, [r7, #4]
 81066c2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 81066c6:	e880 000c 	stmia.w	r0, {r2, r3}
 81066ca:	460b      	mov	r3, r1
 81066cc:	70fb      	strb	r3, [r7, #3]
	if(queue_event_manager)
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	689b      	ldr	r3, [r3, #8]
 81066d2:	2b00      	cmp	r3, #0
 81066d4:	d021      	beq.n	810671a <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
	{
		SMessage msg = {event, message, sender_self, eventReceiver};
 81066d6:	78fb      	ldrb	r3, [r7, #3]
 81066d8:	723b      	strb	r3, [r7, #8]
 81066da:	f107 040c 	add.w	r4, r7, #12
 81066de:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 81066e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81066e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81066e6:	682b      	ldr	r3, [r5, #0]
 81066e8:	6023      	str	r3, [r4, #0]
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	791b      	ldrb	r3, [r3, #4]
 81066ee:	f887 3020 	strb.w	r3, [r7, #32]
 81066f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81066f6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		BaseType_t ret = xQueueSend(queue_event_manager, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 81066fa:	687b      	ldr	r3, [r7, #4]
 81066fc:	6898      	ldr	r0, [r3, #8]
 81066fe:	f107 0108 	add.w	r1, r7, #8
 8106702:	2300      	movs	r3, #0
 8106704:	220a      	movs	r2, #10
 8106706:	f00e fa0d 	bl	8114b24 <xQueueGenericSend>
 810670a:	6278      	str	r0, [r7, #36]	@ 0x24
		if( ret != pdPASS)
 810670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810670e:	2b01      	cmp	r3, #1
 8106710:	d001      	beq.n	8106716 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x5e>
		{
			return false;
 8106712:	2300      	movs	r3, #0
 8106714:	e002      	b.n	810671c <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
		}
		return true;
 8106716:	2301      	movs	r3, #1
 8106718:	e000      	b.n	810671c <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
	}
	return false;
 810671a:	2300      	movs	r3, #0
}
 810671c:	4618      	mov	r0, r3
 810671e:	3728      	adds	r7, #40	@ 0x28
 8106720:	46bd      	mov	sp, r7
 8106722:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8106726:	b002      	add	sp, #8
 8106728:	4770      	bx	lr

0810672a <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>:

void EventBus::receive(OnEventFunction on_event_function)
{
 810672a:	b5b0      	push	{r4, r5, r7, lr}
 810672c:	b090      	sub	sp, #64	@ 0x40
 810672e:	af06      	add	r7, sp, #24
 8106730:	6078      	str	r0, [r7, #4]
 8106732:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	681b      	ldr	r3, [r3, #0]
 8106738:	2b00      	cmp	r3, #0
 810673a:	d025      	beq.n	8106788 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x5e>
	{
		SMessage msg;

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 810673c:	e014      	b.n	8106768 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x3e>
		{
			on_event_function(msg.event_type, msg.message_data, msg.event_sender, msg.event_receiver);
 810673e:	7b3d      	ldrb	r5, [r7, #12]
 8106740:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8106744:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8106748:	9204      	str	r2, [sp, #16]
 810674a:	9303      	str	r3, [sp, #12]
 810674c:	466c      	mov	r4, sp
 810674e:	f107 0318 	add.w	r3, r7, #24
 8106752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8106756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810675a:	f107 0310 	add.w	r3, r7, #16
 810675e:	cb0c      	ldmia	r3, {r2, r3}
 8106760:	4629      	mov	r1, r5
 8106762:	6838      	ldr	r0, [r7, #0]
 8106764:	f000 f814 	bl	8106790 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	681b      	ldr	r3, [r3, #0]
 810676c:	f107 010c 	add.w	r1, r7, #12
 8106770:	2200      	movs	r2, #0
 8106772:	4618      	mov	r0, r3
 8106774:	f00e fc06 	bl	8114f84 <xQueueReceive>
 8106778:	4603      	mov	r3, r0
 810677a:	2b01      	cmp	r3, #1
 810677c:	bf0c      	ite	eq
 810677e:	2301      	moveq	r3, #1
 8106780:	2300      	movne	r3, #0
 8106782:	b2db      	uxtb	r3, r3
 8106784:	2b00      	cmp	r3, #0
 8106786:	d1da      	bne.n	810673e <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x14>
		}
	}
}
 8106788:	bf00      	nop
 810678a:	3728      	adds	r7, #40	@ 0x28
 810678c:	46bd      	mov	sp, r7
 810678e:	bdb0      	pop	{r4, r5, r7, pc}

08106790 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8106790:	b082      	sub	sp, #8
 8106792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8106796:	b085      	sub	sp, #20
 8106798:	af02      	add	r7, sp, #8
 810679a:	6078      	str	r0, [r7, #4]
 810679c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 81067a0:	e880 000c 	stmia.w	r0, {r2, r3}
 81067a4:	460b      	mov	r3, r1
 81067a6:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 81067a8:	687b      	ldr	r3, [r7, #4]
 81067aa:	4618      	mov	r0, r3
 81067ac:	f7ff ff58 	bl	8106660 <_ZNKSt14_Function_base8_M_emptyEv>
 81067b0:	4603      	mov	r3, r0
 81067b2:	2b00      	cmp	r3, #0
 81067b4:	d001      	beq.n	81067ba <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_+0x2a>
	  __throw_bad_function_call();
 81067b6:	f01c ffc7 	bl	8123748 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 81067ba:	687b      	ldr	r3, [r7, #4]
 81067bc:	68dc      	ldr	r4, [r3, #12]
 81067be:	687d      	ldr	r5, [r7, #4]
 81067c0:	1cfb      	adds	r3, r7, #3
 81067c2:	4618      	mov	r0, r3
 81067c4:	f7ff fcde 	bl	8106184 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81067c8:	4606      	mov	r6, r0
 81067ca:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 81067ce:	f7ff fce4 	bl	810619a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 81067d2:	4680      	mov	r8, r0
 81067d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81067d8:	4618      	mov	r0, r3
 81067da:	f7ff fce9 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81067de:	4681      	mov	r9, r0
 81067e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81067e4:	4618      	mov	r0, r3
 81067e6:	f7ff fce3 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81067ea:	4603      	mov	r3, r0
 81067ec:	9300      	str	r3, [sp, #0]
 81067ee:	464b      	mov	r3, r9
 81067f0:	4642      	mov	r2, r8
 81067f2:	4631      	mov	r1, r6
 81067f4:	4628      	mov	r0, r5
 81067f6:	47a0      	blx	r4
 81067f8:	bf00      	nop
      }
 81067fa:	370c      	adds	r7, #12
 81067fc:	46bd      	mov	sp, r7
 81067fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8106802:	b002      	add	sp, #8
 8106804:	4770      	bx	lr

08106806 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 8106806:	b480      	push	{r7}
 8106808:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 810680a:	2300      	movs	r3, #0
#endif
  }
 810680c:	4618      	mov	r0, r3
 810680e:	46bd      	mov	sp, r7
 8106810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106814:	4770      	bx	lr

08106816 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8106816:	b580      	push	{r7, lr}
 8106818:	b082      	sub	sp, #8
 810681a:	af00      	add	r7, sp, #0
 810681c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	2200      	movs	r2, #0
 8106822:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8106824:	6878      	ldr	r0, [r7, #4]
 8106826:	f000 f805 	bl	8106834 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 810682a:	687b      	ldr	r3, [r7, #4]
 810682c:	4618      	mov	r0, r3
 810682e:	3708      	adds	r7, #8
 8106830:	46bd      	mov	sp, r7
 8106832:	bd80      	pop	{r7, pc}

08106834 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8106834:	b480      	push	{r7}
 8106836:	b083      	sub	sp, #12
 8106838:	af00      	add	r7, sp, #0
 810683a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	2200      	movs	r2, #0
 8106840:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8106842:	687a      	ldr	r2, [r7, #4]
 8106844:	687b      	ldr	r3, [r7, #4]
 8106846:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8106848:	687a      	ldr	r2, [r7, #4]
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 810684e:	687b      	ldr	r3, [r7, #4]
 8106850:	2200      	movs	r2, #0
 8106852:	611a      	str	r2, [r3, #16]
    }
 8106854:	bf00      	nop
 8106856:	370c      	adds	r7, #12
 8106858:	46bd      	mov	sp, r7
 810685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810685e:	4770      	bx	lr

08106860 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8106860:	b580      	push	{r7, lr}
 8106862:	b082      	sub	sp, #8
 8106864:	af00      	add	r7, sp, #0
 8106866:	6078      	str	r0, [r7, #4]
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	4618      	mov	r0, r3
 810686c:	f000 f955 	bl	8106b1a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	4618      	mov	r0, r3
 8106874:	3708      	adds	r7, #8
 8106876:	46bd      	mov	sp, r7
 8106878:	bd80      	pop	{r7, pc}

0810687a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 810687a:	b580      	push	{r7, lr}
 810687c:	b082      	sub	sp, #8
 810687e:	af00      	add	r7, sp, #0
 8106880:	6078      	str	r0, [r7, #4]
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	4618      	mov	r0, r3
 8106886:	f7ff ffeb 	bl	8106860 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 810688a:	687b      	ldr	r3, [r7, #4]
 810688c:	4618      	mov	r0, r3
 810688e:	3708      	adds	r7, #8
 8106890:	46bd      	mov	sp, r7
 8106892:	bd80      	pop	{r7, pc}

08106894 <_ZN19EventManagerCM4TaskC1Ev>:
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
		EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER
	};

	EventManagerCM4Task() {};
 8106894:	b580      	push	{r7, lr}
 8106896:	b082      	sub	sp, #8
 8106898:	af00      	add	r7, sp, #0
 810689a:	6078      	str	r0, [r7, #4]
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	4618      	mov	r0, r3
 81068a0:	f7ff ffeb 	bl	810687a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	4618      	mov	r0, r3
 81068a8:	3708      	adds	r7, #8
 81068aa:	46bd      	mov	sp, r7
 81068ac:	bd80      	pop	{r7, pc}
	...

081068b0 <_Z20StartTask_EventMgrM4Pv>:
extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;
extern QueueHandle_t queueToDoIPDaemonTask;

void StartTask_EventMgrM4(void *argument)
{
 81068b0:	b580      	push	{r7, lr}
 81068b2:	b088      	sub	sp, #32
 81068b4:	af00      	add	r7, sp, #0
 81068b6:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 81068b8:	f107 0308 	add.w	r3, r7, #8
 81068bc:	4618      	mov	r0, r3
 81068be:	f7ff ffe9 	bl	8106894 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 81068c2:	4b0d      	ldr	r3, [pc, #52]	@ (81068f8 <_Z20StartTask_EventMgrM4Pv+0x48>)
 81068c4:	681a      	ldr	r2, [r3, #0]
 81068c6:	f107 0308 	add.w	r3, r7, #8
 81068ca:	2107      	movs	r1, #7
 81068cc:	4618      	mov	r0, r3
 81068ce:	f000 f817 	bl	8106900 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER, queueToDoIPDaemonTask);
 81068d2:	4b0a      	ldr	r3, [pc, #40]	@ (81068fc <_Z20StartTask_EventMgrM4Pv+0x4c>)
 81068d4:	681a      	ldr	r2, [r3, #0]
 81068d6:	f107 0308 	add.w	r3, r7, #8
 81068da:	2103      	movs	r1, #3
 81068dc:	4618      	mov	r0, r3
 81068de:	f000 f80f 	bl	8106900 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 81068e2:	f107 0308 	add.w	r3, r7, #8
 81068e6:	4618      	mov	r0, r3
 81068e8:	f000 f81d 	bl	8106926 <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 81068ec:	2001      	movs	r0, #1
 81068ee:	f00c fe0c 	bl	811350a <osDelay>
		eventManagerInstance.process();
 81068f2:	bf00      	nop
 81068f4:	e7f5      	b.n	81068e2 <_Z20StartTask_EventMgrM4Pv+0x32>
 81068f6:	bf00      	nop
 81068f8:	100001d0 	.word	0x100001d0
 81068fc:	100001d4 	.word	0x100001d4

08106900 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 8106900:	b580      	push	{r7, lr}
 8106902:	b086      	sub	sp, #24
 8106904:	af00      	add	r7, sp, #0
 8106906:	60f8      	str	r0, [r7, #12]
 8106908:	460b      	mov	r3, r1
 810690a:	607a      	str	r2, [r7, #4]
 810690c:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 810690e:	68f9      	ldr	r1, [r7, #12]
 8106910:	f107 0010 	add.w	r0, r7, #16
 8106914:	1d3b      	adds	r3, r7, #4
 8106916:	f107 020b 	add.w	r2, r7, #11
 810691a:	f000 f946 	bl	8106baa <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 810691e:	bf00      	nop
 8106920:	3718      	adds	r7, #24
 8106922:	46bd      	mov	sp, r7
 8106924:	bd80      	pop	{r7, pc}

08106926 <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 8106926:	b580      	push	{r7, lr}
 8106928:	b086      	sub	sp, #24
 810692a:	af00      	add	r7, sp, #0
 810692c:	6078      	str	r0, [r7, #4]
	send(receive());
 810692e:	f107 030c 	add.w	r3, r7, #12
 8106932:	6879      	ldr	r1, [r7, #4]
 8106934:	4618      	mov	r0, r3
 8106936:	f000 f81b 	bl	8106970 <_ZN19EventManagerCM4Task7receiveEv>
 810693a:	f107 030c 	add.w	r3, r7, #12
 810693e:	4619      	mov	r1, r3
 8106940:	6878      	ldr	r0, [r7, #4]
 8106942:	f000 f86e 	bl	8106a22 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 8106946:	f107 030c 	add.w	r3, r7, #12
 810694a:	4618      	mov	r0, r3
 810694c:	f000 f9a8 	bl	8106ca0 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 8106950:	bf00      	nop
 8106952:	3718      	adds	r7, #24
 8106954:	46bd      	mov	sp, r7
 8106956:	bd80      	pop	{r7, pc}

08106958 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8106958:	b580      	push	{r7, lr}
 810695a:	b082      	sub	sp, #8
 810695c:	af00      	add	r7, sp, #0
 810695e:	6078      	str	r0, [r7, #4]
 8106960:	6878      	ldr	r0, [r7, #4]
 8106962:	f000 f9b8 	bl	8106cd6 <_ZNSaI8SMessageED1Ev>
 8106966:	687b      	ldr	r3, [r7, #4]
 8106968:	4618      	mov	r0, r3
 810696a:	3708      	adds	r7, #8
 810696c:	46bd      	mov	sp, r7
 810696e:	bd80      	pop	{r7, pc}

08106970 <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 8106970:	b580      	push	{r7, lr}
 8106972:	b08a      	sub	sp, #40	@ 0x28
 8106974:	af00      	add	r7, sp, #0
 8106976:	6078      	str	r0, [r7, #4]
 8106978:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 810697a:	687b      	ldr	r3, [r7, #4]
 810697c:	461a      	mov	r2, r3
 810697e:	2300      	movs	r3, #0
 8106980:	6013      	str	r3, [r2, #0]
 8106982:	6053      	str	r3, [r2, #4]
 8106984:	6093      	str	r3, [r2, #8]
	SMessage msg;

	BaseType_t ret = pdTRUE;
 8106986:	2301      	movs	r3, #1
 8106988:	627b      	str	r3, [r7, #36]	@ 0x24
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 810698a:	4b0d      	ldr	r3, [pc, #52]	@ (81069c0 <_ZN19EventManagerCM4Task7receiveEv+0x50>)
 810698c:	681b      	ldr	r3, [r3, #0]
 810698e:	f107 0108 	add.w	r1, r7, #8
 8106992:	2200      	movs	r2, #0
 8106994:	4618      	mov	r0, r3
 8106996:	f00e faf5 	bl	8114f84 <xQueueReceive>
 810699a:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == pdTRUE)
 810699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810699e:	2b01      	cmp	r3, #1
 81069a0:	d105      	bne.n	81069ae <_ZN19EventManagerCM4Task7receiveEv+0x3e>
		{
			receivedMessages.push_back(msg);
 81069a2:	f107 0308 	add.w	r3, r7, #8
 81069a6:	4619      	mov	r1, r3
 81069a8:	6878      	ldr	r0, [r7, #4]
 81069aa:	f000 f9bd 	bl	8106d28 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	} while(ret == pdTRUE);
 81069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81069b0:	2b01      	cmp	r3, #1
 81069b2:	d0ea      	beq.n	810698a <_ZN19EventManagerCM4Task7receiveEv+0x1a>

	return receivedMessages;
 81069b4:	bf00      	nop
}
 81069b6:	6878      	ldr	r0, [r7, #4]
 81069b8:	3728      	adds	r7, #40	@ 0x28
 81069ba:	46bd      	mov	sp, r7
 81069bc:	bd80      	pop	{r7, pc}
 81069be:	bf00      	nop
 81069c0:	100001cc 	.word	0x100001cc

081069c4 <_ZN9__gnu_cxxeqIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    [[nodiscard]]
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 81069c4:	b590      	push	{r4, r7, lr}
 81069c6:	b083      	sub	sp, #12
 81069c8:	af00      	add	r7, sp, #0
 81069ca:	6078      	str	r0, [r7, #4]
 81069cc:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
 81069ce:	6878      	ldr	r0, [r7, #4]
 81069d0:	f000 f810 	bl	81069f4 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81069d4:	4603      	mov	r3, r0
 81069d6:	681c      	ldr	r4, [r3, #0]
 81069d8:	6838      	ldr	r0, [r7, #0]
 81069da:	f000 f80b 	bl	81069f4 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81069de:	4603      	mov	r3, r0
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	429c      	cmp	r4, r3
 81069e4:	bf0c      	ite	eq
 81069e6:	2301      	moveq	r3, #1
 81069e8:	2300      	movne	r3, #0
 81069ea:	b2db      	uxtb	r3, r3
 81069ec:	4618      	mov	r0, r3
 81069ee:	370c      	adds	r7, #12
 81069f0:	46bd      	mov	sp, r7
 81069f2:	bd90      	pop	{r4, r7, pc}

081069f4 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 81069f4:	b480      	push	{r7}
 81069f6:	b083      	sub	sp, #12
 81069f8:	af00      	add	r7, sp, #0
 81069fa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	4618      	mov	r0, r3
 8106a00:	370c      	adds	r7, #12
 8106a02:	46bd      	mov	sp, r7
 8106a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a08:	4770      	bx	lr

08106a0a <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8106a0a:	b480      	push	{r7}
 8106a0c:	b083      	sub	sp, #12
 8106a0e:	af00      	add	r7, sp, #0
 8106a10:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	4618      	mov	r0, r3
 8106a18:	370c      	adds	r7, #12
 8106a1a:	46bd      	mov	sp, r7
 8106a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a20:	4770      	bx	lr

08106a22 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 8106a22:	b5b0      	push	{r4, r5, r7, lr}
 8106a24:	b092      	sub	sp, #72	@ 0x48
 8106a26:	af00      	add	r7, sp, #0
 8106a28:	6078      	str	r0, [r7, #4]
 8106a2a:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 8106a2c:	683b      	ldr	r3, [r7, #0]
 8106a2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8106a30:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8106a32:	f000 f99f 	bl	8106d74 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 8106a36:	4603      	mov	r3, r0
 8106a38:	61bb      	str	r3, [r7, #24]
 8106a3a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8106a3c:	f000 f9aa 	bl	8106d94 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 8106a40:	4603      	mov	r3, r0
 8106a42:	617b      	str	r3, [r7, #20]
 8106a44:	e056      	b.n	8106af4 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xd2>
 8106a46:	f107 0318 	add.w	r3, r7, #24
 8106a4a:	4618      	mov	r0, r3
 8106a4c:	f7ff ffdd 	bl	8106a0a <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8106a50:	4603      	mov	r3, r0
 8106a52:	f107 041c 	add.w	r4, r7, #28
 8106a56:	461d      	mov	r5, r3
 8106a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8106a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8106a5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8106a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 8106a64:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8106a68:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 8106a6a:	687b      	ldr	r3, [r7, #4]
 8106a6c:	f107 0213 	add.w	r2, r7, #19
 8106a70:	4611      	mov	r1, r2
 8106a72:	4618      	mov	r0, r3
 8106a74:	f000 f9b0 	bl	8106dd8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8106a78:	4603      	mov	r3, r0
 8106a7a:	60fb      	str	r3, [r7, #12]

		QueueHandle_t targetQueue;

		if(it != queue_handles.end())
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	4618      	mov	r0, r3
 8106a80:	f000 f9b9 	bl	8106df6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8106a84:	4603      	mov	r3, r0
 8106a86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106a88:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8106a8c:	f107 030c 	add.w	r3, r7, #12
 8106a90:	4611      	mov	r1, r2
 8106a92:	4618      	mov	r0, r3
 8106a94:	f000 f9bc 	bl	8106e10 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8106a98:	4603      	mov	r3, r0
 8106a9a:	f083 0301 	eor.w	r3, r3, #1
 8106a9e:	b2db      	uxtb	r3, r3
 8106aa0:	2b00      	cmp	r3, #0
 8106aa2:	d00a      	beq.n	8106aba <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x98>
		{
			targetQueue = queue_handles[eventReceiver];
 8106aa4:	687b      	ldr	r3, [r7, #4]
 8106aa6:	f107 0213 	add.w	r2, r7, #19
 8106aaa:	4611      	mov	r1, r2
 8106aac:	4618      	mov	r0, r3
 8106aae:	f000 f9c3 	bl	8106e38 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8106ab2:	4603      	mov	r3, r0
 8106ab4:	681b      	ldr	r3, [r3, #0]
 8106ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8106ab8:	e00c      	b.n	8106ad4 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xb2>
		}
		else
		{
			// if receiver not found, then it means i has to be on CM7 side, so send to IPC connection damon.
			targetQueue = queue_handles[EVENT_QUEUE_DAEMON_NATIVE];
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	2207      	movs	r2, #7
 8106abe:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8106ac2:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8106ac6:	4611      	mov	r1, r2
 8106ac8:	4618      	mov	r0, r3
 8106aca:	f000 fa11 	bl	8106ef0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>
 8106ace:	4603      	mov	r3, r0
 8106ad0:	681b      	ldr	r3, [r3, #0]
 8106ad2:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		if(targetQueue)
 8106ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106ad6:	2b00      	cmp	r3, #0
 8106ad8:	d007      	beq.n	8106aea <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xc8>
		{
			xQueueSend(targetQueue, static_cast<void*>(&msg), portMAX_DELAY);
 8106ada:	f107 011c 	add.w	r1, r7, #28
 8106ade:	2300      	movs	r3, #0
 8106ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8106ae4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8106ae6:	f00e f81d 	bl	8114b24 <xQueueGenericSend>
	for(auto msg : messages)
 8106aea:	f107 0318 	add.w	r3, r7, #24
 8106aee:	4618      	mov	r0, r3
 8106af0:	f000 f961 	bl	8106db6 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 8106af4:	f107 0214 	add.w	r2, r7, #20
 8106af8:	f107 0318 	add.w	r3, r7, #24
 8106afc:	4611      	mov	r1, r2
 8106afe:	4618      	mov	r0, r3
 8106b00:	f7ff ff60 	bl	81069c4 <_ZN9__gnu_cxxeqIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8106b04:	4603      	mov	r3, r0
 8106b06:	f083 0301 	eor.w	r3, r3, #1
 8106b0a:	b2db      	uxtb	r3, r3
 8106b0c:	2b00      	cmp	r3, #0
 8106b0e:	d19a      	bne.n	8106a46 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
		}
	}
}
 8106b10:	bf00      	nop
 8106b12:	bf00      	nop
 8106b14:	3748      	adds	r7, #72	@ 0x48
 8106b16:	46bd      	mov	sp, r7
 8106b18:	bdb0      	pop	{r4, r5, r7, pc}

08106b1a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8106b1a:	b580      	push	{r7, lr}
 8106b1c:	b082      	sub	sp, #8
 8106b1e:	af00      	add	r7, sp, #0
 8106b20:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8106b22:	6878      	ldr	r0, [r7, #4]
 8106b24:	f000 fa44 	bl	8106fb0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	4618      	mov	r0, r3
 8106b2c:	f000 fa4c 	bl	8106fc8 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 8106b30:	687b      	ldr	r3, [r7, #4]
 8106b32:	3304      	adds	r3, #4
 8106b34:	4618      	mov	r0, r3
 8106b36:	f7ff fe6e 	bl	8106816 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8106b3a:	687b      	ldr	r3, [r7, #4]
 8106b3c:	4618      	mov	r0, r3
 8106b3e:	3708      	adds	r7, #8
 8106b40:	46bd      	mov	sp, r7
 8106b42:	bd80      	pop	{r7, pc}

08106b44 <_ZNSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEC1ES2_S5_>:
      pair(const _T1& __x, const _T2& __y)
 8106b44:	b480      	push	{r7}
 8106b46:	b085      	sub	sp, #20
 8106b48:	af00      	add	r7, sp, #0
 8106b4a:	60f8      	str	r0, [r7, #12]
 8106b4c:	60b9      	str	r1, [r7, #8]
 8106b4e:	607a      	str	r2, [r7, #4]
      : first(__x), second(__y)
 8106b50:	68fb      	ldr	r3, [r7, #12]
 8106b52:	68ba      	ldr	r2, [r7, #8]
 8106b54:	601a      	str	r2, [r3, #0]
 8106b56:	68fb      	ldr	r3, [r7, #12]
 8106b58:	687a      	ldr	r2, [r7, #4]
 8106b5a:	605a      	str	r2, [r3, #4]
      { }
 8106b5c:	68fb      	ldr	r3, [r7, #12]
 8106b5e:	4618      	mov	r0, r3
 8106b60:	3714      	adds	r7, #20
 8106b62:	46bd      	mov	sp, r7
 8106b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b68:	4770      	bx	lr

08106b6a <_ZSt3getILj0ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
 8106b6a:	b580      	push	{r7, lr}
 8106b6c:	b082      	sub	sp, #8
 8106b6e:	af00      	add	r7, sp, #0
 8106b70:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
 8106b72:	6878      	ldr	r0, [r7, #4]
 8106b74:	f000 fa3f 	bl	8106ff6 <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>
 8106b78:	4603      	mov	r3, r0
 8106b7a:	4618      	mov	r0, r3
 8106b7c:	f000 fa46 	bl	810700c <_ZNSt10__pair_getILj0EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT_OSt4pairIS8_T0_E>
 8106b80:	4603      	mov	r3, r0
 8106b82:	4618      	mov	r0, r3
 8106b84:	3708      	adds	r7, #8
 8106b86:	46bd      	mov	sp, r7
 8106b88:	bd80      	pop	{r7, pc}

08106b8a <_ZSt3getILj1ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
 8106b8a:	b580      	push	{r7, lr}
 8106b8c:	b082      	sub	sp, #8
 8106b8e:	af00      	add	r7, sp, #0
 8106b90:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
 8106b92:	6878      	ldr	r0, [r7, #4]
 8106b94:	f000 fa2f 	bl	8106ff6 <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>
 8106b98:	4603      	mov	r3, r0
 8106b9a:	4618      	mov	r0, r3
 8106b9c:	f000 fa44 	bl	8107028 <_ZNSt10__pair_getILj1EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT0_OSt4pairIT_S8_E>
 8106ba0:	4603      	mov	r3, r0
 8106ba2:	4618      	mov	r0, r3
 8106ba4:	3708      	adds	r7, #8
 8106ba6:	46bd      	mov	sp, r7
 8106ba8:	bd80      	pop	{r7, pc}

08106baa <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8106baa:	b590      	push	{r4, r7, lr}
 8106bac:	b091      	sub	sp, #68	@ 0x44
 8106bae:	af00      	add	r7, sp, #0
 8106bb0:	60f8      	str	r0, [r7, #12]
 8106bb2:	60b9      	str	r1, [r7, #8]
 8106bb4:	607a      	str	r2, [r7, #4]
 8106bb6:	603b      	str	r3, [r7, #0]
	{
#if __cplusplus >= 201703L
	  if constexpr (sizeof...(_Args) == 2)
	    if constexpr (is_same_v<allocator_type, allocator<value_type>>)
	      {
		auto&& [__a, __v] = pair<_Args&...>(__args...);
 8106bb8:	f107 0318 	add.w	r3, r7, #24
 8106bbc:	683a      	ldr	r2, [r7, #0]
 8106bbe:	6879      	ldr	r1, [r7, #4]
 8106bc0:	4618      	mov	r0, r3
 8106bc2:	f7ff ffbf 	bl	8106b44 <_ZNSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEC1ES2_S5_>
 8106bc6:	f107 0318 	add.w	r3, r7, #24
 8106bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106bcc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8106bce:	f7ff ffcc 	bl	8106b6a <_ZSt3getILj0ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>
 8106bd2:	63b8      	str	r0, [r7, #56]	@ 0x38
 8106bd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8106bd6:	f7ff ffd8 	bl	8106b8a <_ZSt3getILj1ERN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOSA_>
 8106bda:	6378      	str	r0, [r7, #52]	@ 0x34
		if constexpr (__usable_key<decltype(__a)>)
		  {
		    const key_type& __k = __a;
 8106bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106bde:	633b      	str	r3, [r7, #48]	@ 0x30
		    iterator __i = lower_bound(__k);
 8106be0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8106be2:	68b8      	ldr	r0, [r7, #8]
 8106be4:	f000 fa2e 	bl	8107044 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8106be8:	4603      	mov	r3, r0
 8106bea:	617b      	str	r3, [r7, #20]
		    if (__i == end() || key_comp()(__k, (*__i).first))
 8106bec:	68b8      	ldr	r0, [r7, #8]
 8106bee:	f000 f902 	bl	8106df6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8106bf2:	4603      	mov	r3, r0
 8106bf4:	623b      	str	r3, [r7, #32]
 8106bf6:	f107 0220 	add.w	r2, r7, #32
 8106bfa:	f107 0314 	add.w	r3, r7, #20
 8106bfe:	4611      	mov	r1, r2
 8106c00:	4618      	mov	r0, r3
 8106c02:	f000 f905 	bl	8106e10 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8106c06:	4603      	mov	r3, r0
 8106c08:	2b00      	cmp	r3, #0
 8106c0a:	d112      	bne.n	8106c32 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x88>
 8106c0c:	68b8      	ldr	r0, [r7, #8]
 8106c0e:	f000 fa28 	bl	8107062 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8106c12:	f107 0314 	add.w	r3, r7, #20
 8106c16:	4618      	mov	r0, r3
 8106c18:	f000 fa30 	bl	810707c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8106c1c:	4603      	mov	r3, r0
 8106c1e:	461a      	mov	r2, r3
 8106c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106c24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8106c26:	4618      	mov	r0, r3
 8106c28:	f000 fa36 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8106c2c:	4603      	mov	r3, r0
 8106c2e:	2b00      	cmp	r3, #0
 8106c30:	d001      	beq.n	8106c36 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x8c>
 8106c32:	2301      	movs	r3, #1
 8106c34:	e000      	b.n	8106c38 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x8e>
 8106c36:	2300      	movs	r3, #0
 8106c38:	2b00      	cmp	r3, #0
 8106c3a:	d022      	beq.n	8106c82 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0xd8>
		      {
			__i = emplace_hint(__i, std::forward<_Args>(__args)...);
 8106c3c:	f107 0214 	add.w	r2, r7, #20
 8106c40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8106c44:	4611      	mov	r1, r2
 8106c46:	4618      	mov	r0, r3
 8106c48:	f000 fa51 	bl	81070ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8106c4c:	6878      	ldr	r0, [r7, #4]
 8106c4e:	f000 fa38 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8106c52:	4604      	mov	r4, r0
 8106c54:	6838      	ldr	r0, [r7, #0]
 8106c56:	f000 fa3f 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8106c5a:	4603      	mov	r3, r0
 8106c5c:	4622      	mov	r2, r4
 8106c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106c60:	68b8      	ldr	r0, [r7, #8]
 8106c62:	f000 fa54 	bl	810710e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE12emplace_hintIJRS1_RS3_EEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 8106c66:	4603      	mov	r3, r0
 8106c68:	617b      	str	r3, [r7, #20]
			return {__i, true};
 8106c6a:	2301      	movs	r3, #1
 8106c6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8106c70:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 8106c74:	f107 0314 	add.w	r3, r7, #20
 8106c78:	4619      	mov	r1, r3
 8106c7a:	68f8      	ldr	r0, [r7, #12]
 8106c7c:	f000 fa61 	bl	8107142 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
	}
 8106c80:	e00a      	b.n	8106c98 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0xee>
		    return {__i, false};
 8106c82:	2300      	movs	r3, #0
 8106c84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8106c88:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8106c8c:	f107 0314 	add.w	r3, r7, #20
 8106c90:	4619      	mov	r1, r3
 8106c92:	68f8      	ldr	r0, [r7, #12]
 8106c94:	f000 fa55 	bl	8107142 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>
	}
 8106c98:	68f8      	ldr	r0, [r7, #12]
 8106c9a:	3744      	adds	r7, #68	@ 0x44
 8106c9c:	46bd      	mov	sp, r7
 8106c9e:	bd90      	pop	{r4, r7, pc}

08106ca0 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8106ca0:	b5b0      	push	{r4, r5, r7, lr}
 8106ca2:	b082      	sub	sp, #8
 8106ca4:	af00      	add	r7, sp, #0
 8106ca6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106ca8:	687b      	ldr	r3, [r7, #4]
 8106caa:	681c      	ldr	r4, [r3, #0]
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	4618      	mov	r0, r3
 8106cb4:	f000 fa5e 	bl	8107174 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8106cb8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106cba:	461a      	mov	r2, r3
 8106cbc:	4629      	mov	r1, r5
 8106cbe:	4620      	mov	r0, r4
 8106cc0:	f000 fa63 	bl	810718a <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	4618      	mov	r0, r3
 8106cc8:	f000 f810 	bl	8106cec <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	4618      	mov	r0, r3
 8106cd0:	3708      	adds	r7, #8
 8106cd2:	46bd      	mov	sp, r7
 8106cd4:	bdb0      	pop	{r4, r5, r7, pc}

08106cd6 <_ZNSaI8SMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8106cd6:	b480      	push	{r7}
 8106cd8:	b083      	sub	sp, #12
 8106cda:	af00      	add	r7, sp, #0
 8106cdc:	6078      	str	r0, [r7, #4]
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	4618      	mov	r0, r3
 8106ce2:	370c      	adds	r7, #12
 8106ce4:	46bd      	mov	sp, r7
 8106ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cea:	4770      	bx	lr

08106cec <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8106cec:	b580      	push	{r7, lr}
 8106cee:	b082      	sub	sp, #8
 8106cf0:	af00      	add	r7, sp, #0
 8106cf2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	689a      	ldr	r2, [r3, #8]
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	681b      	ldr	r3, [r3, #0]
 8106d00:	1ad3      	subs	r3, r2, r3
 8106d02:	109b      	asrs	r3, r3, #2
 8106d04:	4a07      	ldr	r2, [pc, #28]	@ (8106d24 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 8106d06:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8106d0a:	461a      	mov	r2, r3
 8106d0c:	6878      	ldr	r0, [r7, #4]
 8106d0e:	f000 fa4a 	bl	81071a6 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 8106d12:	687b      	ldr	r3, [r7, #4]
 8106d14:	4618      	mov	r0, r3
 8106d16:	f7ff fe1f 	bl	8106958 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 8106d1a:	687b      	ldr	r3, [r7, #4]
 8106d1c:	4618      	mov	r0, r3
 8106d1e:	3708      	adds	r7, #8
 8106d20:	46bd      	mov	sp, r7
 8106d22:	bd80      	pop	{r7, pc}
 8106d24:	b6db6db7 	.word	0xb6db6db7

08106d28 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8106d28:	b580      	push	{r7, lr}
 8106d2a:	b082      	sub	sp, #8
 8106d2c:	af00      	add	r7, sp, #0
 8106d2e:	6078      	str	r0, [r7, #4]
 8106d30:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8106d32:	687b      	ldr	r3, [r7, #4]
 8106d34:	685a      	ldr	r2, [r3, #4]
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	689b      	ldr	r3, [r3, #8]
 8106d3a:	429a      	cmp	r2, r3
 8106d3c:	d00d      	beq.n	8106d5a <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8106d3e:	6878      	ldr	r0, [r7, #4]
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	685b      	ldr	r3, [r3, #4]
 8106d44:	683a      	ldr	r2, [r7, #0]
 8106d46:	4619      	mov	r1, r3
 8106d48:	f000 fa40 	bl	81071cc <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8106d4c:	687b      	ldr	r3, [r7, #4]
 8106d4e:	685b      	ldr	r3, [r3, #4]
 8106d50:	f103 021c 	add.w	r2, r3, #28
 8106d54:	687b      	ldr	r3, [r7, #4]
 8106d56:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8106d58:	e008      	b.n	8106d6c <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8106d5a:	6878      	ldr	r0, [r7, #4]
 8106d5c:	f000 fa48 	bl	81071f0 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 8106d60:	4603      	mov	r3, r0
 8106d62:	683a      	ldr	r2, [r7, #0]
 8106d64:	4619      	mov	r1, r3
 8106d66:	6878      	ldr	r0, [r7, #4]
 8106d68:	f000 faf0 	bl	810734c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8106d6c:	bf00      	nop
 8106d6e:	3708      	adds	r7, #8
 8106d70:	46bd      	mov	sp, r7
 8106d72:	bd80      	pop	{r7, pc}

08106d74 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8106d74:	b580      	push	{r7, lr}
 8106d76:	b084      	sub	sp, #16
 8106d78:	af00      	add	r7, sp, #0
 8106d7a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8106d7c:	687a      	ldr	r2, [r7, #4]
 8106d7e:	f107 030c 	add.w	r3, r7, #12
 8106d82:	4611      	mov	r1, r2
 8106d84:	4618      	mov	r0, r3
 8106d86:	f000 fb6b 	bl	8107460 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8106d8a:	68fb      	ldr	r3, [r7, #12]
 8106d8c:	4618      	mov	r0, r3
 8106d8e:	3710      	adds	r7, #16
 8106d90:	46bd      	mov	sp, r7
 8106d92:	bd80      	pop	{r7, pc}

08106d94 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8106d94:	b580      	push	{r7, lr}
 8106d96:	b084      	sub	sp, #16
 8106d98:	af00      	add	r7, sp, #0
 8106d9a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	1d1a      	adds	r2, r3, #4
 8106da0:	f107 030c 	add.w	r3, r7, #12
 8106da4:	4611      	mov	r1, r2
 8106da6:	4618      	mov	r0, r3
 8106da8:	f000 fb5a 	bl	8107460 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8106dac:	68fb      	ldr	r3, [r7, #12]
 8106dae:	4618      	mov	r0, r3
 8106db0:	3710      	adds	r7, #16
 8106db2:	46bd      	mov	sp, r7
 8106db4:	bd80      	pop	{r7, pc}

08106db6 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8106db6:	b480      	push	{r7}
 8106db8:	b083      	sub	sp, #12
 8106dba:	af00      	add	r7, sp, #0
 8106dbc:	6078      	str	r0, [r7, #4]
	++_M_current;
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	681b      	ldr	r3, [r3, #0]
 8106dc2:	f103 021c 	add.w	r2, r3, #28
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	601a      	str	r2, [r3, #0]
	return *this;
 8106dca:	687b      	ldr	r3, [r7, #4]
      }
 8106dcc:	4618      	mov	r0, r3
 8106dce:	370c      	adds	r7, #12
 8106dd0:	46bd      	mov	sp, r7
 8106dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dd6:	4770      	bx	lr

08106dd8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8106dd8:	b580      	push	{r7, lr}
 8106dda:	b082      	sub	sp, #8
 8106ddc:	af00      	add	r7, sp, #0
 8106dde:	6078      	str	r0, [r7, #4]
 8106de0:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8106de2:	687b      	ldr	r3, [r7, #4]
 8106de4:	6839      	ldr	r1, [r7, #0]
 8106de6:	4618      	mov	r0, r3
 8106de8:	f000 fb4a 	bl	8107480 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8106dec:	4603      	mov	r3, r0
 8106dee:	4618      	mov	r0, r3
 8106df0:	3708      	adds	r7, #8
 8106df2:	46bd      	mov	sp, r7
 8106df4:	bd80      	pop	{r7, pc}

08106df6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8106df6:	b580      	push	{r7, lr}
 8106df8:	b082      	sub	sp, #8
 8106dfa:	af00      	add	r7, sp, #0
 8106dfc:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	4618      	mov	r0, r3
 8106e02:	f000 fb79 	bl	81074f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8106e06:	4603      	mov	r3, r0
 8106e08:	4618      	mov	r0, r3
 8106e0a:	3708      	adds	r7, #8
 8106e0c:	46bd      	mov	sp, r7
 8106e0e:	bd80      	pop	{r7, pc}

08106e10 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8106e10:	b480      	push	{r7}
 8106e12:	b083      	sub	sp, #12
 8106e14:	af00      	add	r7, sp, #0
 8106e16:	6078      	str	r0, [r7, #4]
 8106e18:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8106e1a:	687b      	ldr	r3, [r7, #4]
 8106e1c:	681a      	ldr	r2, [r3, #0]
 8106e1e:	683b      	ldr	r3, [r7, #0]
 8106e20:	681b      	ldr	r3, [r3, #0]
 8106e22:	429a      	cmp	r2, r3
 8106e24:	bf0c      	ite	eq
 8106e26:	2301      	moveq	r3, #1
 8106e28:	2300      	movne	r3, #0
 8106e2a:	b2db      	uxtb	r3, r3
 8106e2c:	4618      	mov	r0, r3
 8106e2e:	370c      	adds	r7, #12
 8106e30:	46bd      	mov	sp, r7
 8106e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e36:	4770      	bx	lr

08106e38 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8106e38:	b590      	push	{r4, r7, lr}
 8106e3a:	b08b      	sub	sp, #44	@ 0x2c
 8106e3c:	af02      	add	r7, sp, #8
 8106e3e:	6078      	str	r0, [r7, #4]
 8106e40:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8106e42:	6839      	ldr	r1, [r7, #0]
 8106e44:	6878      	ldr	r0, [r7, #4]
 8106e46:	f000 f8fd 	bl	8107044 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8106e4a:	4603      	mov	r3, r0
 8106e4c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8106e4e:	6878      	ldr	r0, [r7, #4]
 8106e50:	f7ff ffd1 	bl	8106df6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8106e54:	4603      	mov	r3, r0
 8106e56:	60fb      	str	r3, [r7, #12]
 8106e58:	f107 020c 	add.w	r2, r7, #12
 8106e5c:	f107 0308 	add.w	r3, r7, #8
 8106e60:	4611      	mov	r1, r2
 8106e62:	4618      	mov	r0, r3
 8106e64:	f7ff ffd4 	bl	8106e10 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8106e68:	4603      	mov	r3, r0
 8106e6a:	2b00      	cmp	r3, #0
 8106e6c:	d112      	bne.n	8106e94 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 8106e6e:	6878      	ldr	r0, [r7, #4]
 8106e70:	f000 f8f7 	bl	8107062 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8106e74:	f107 0308 	add.w	r3, r7, #8
 8106e78:	4618      	mov	r0, r3
 8106e7a:	f000 f8ff 	bl	810707c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8106e7e:	4603      	mov	r3, r0
 8106e80:	461a      	mov	r2, r3
 8106e82:	f107 0310 	add.w	r3, r7, #16
 8106e86:	6839      	ldr	r1, [r7, #0]
 8106e88:	4618      	mov	r0, r3
 8106e8a:	f000 f905 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8106e8e:	4603      	mov	r3, r0
 8106e90:	2b00      	cmp	r3, #0
 8106e92:	d001      	beq.n	8106e98 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8106e94:	2301      	movs	r3, #1
 8106e96:	e000      	b.n	8106e9a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 8106e98:	2300      	movs	r3, #0
 8106e9a:	2b00      	cmp	r3, #0
 8106e9c:	d01b      	beq.n	8106ed6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8106e9e:	687c      	ldr	r4, [r7, #4]
 8106ea0:	f107 0208 	add.w	r2, r7, #8
 8106ea4:	f107 0314 	add.w	r3, r7, #20
 8106ea8:	4611      	mov	r1, r2
 8106eaa:	4618      	mov	r0, r3
 8106eac:	f000 f91f 	bl	81070ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8106eb0:	f107 0318 	add.w	r3, r7, #24
 8106eb4:	6839      	ldr	r1, [r7, #0]
 8106eb6:	4618      	mov	r0, r3
 8106eb8:	f000 fb2f 	bl	810751a <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8106ebc:	f107 0218 	add.w	r2, r7, #24
 8106ec0:	f107 031c 	add.w	r3, r7, #28
 8106ec4:	9300      	str	r3, [sp, #0]
 8106ec6:	4613      	mov	r3, r2
 8106ec8:	4a08      	ldr	r2, [pc, #32]	@ (8106eec <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 8106eca:	6979      	ldr	r1, [r7, #20]
 8106ecc:	4620      	mov	r0, r4
 8106ece:	f000 fb33 	bl	8107538 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8106ed2:	4603      	mov	r3, r0
 8106ed4:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8106ed6:	f107 0308 	add.w	r3, r7, #8
 8106eda:	4618      	mov	r0, r3
 8106edc:	f000 f8ce 	bl	810707c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8106ee0:	4603      	mov	r3, r0
 8106ee2:	3304      	adds	r3, #4
      }
 8106ee4:	4618      	mov	r0, r3
 8106ee6:	3724      	adds	r7, #36	@ 0x24
 8106ee8:	46bd      	mov	sp, r7
 8106eea:	bd90      	pop	{r4, r7, pc}
 8106eec:	0812858c 	.word	0x0812858c

08106ef0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>:
      operator[](key_type&& __k)
 8106ef0:	b590      	push	{r4, r7, lr}
 8106ef2:	b08b      	sub	sp, #44	@ 0x2c
 8106ef4:	af02      	add	r7, sp, #8
 8106ef6:	6078      	str	r0, [r7, #4]
 8106ef8:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8106efa:	6839      	ldr	r1, [r7, #0]
 8106efc:	6878      	ldr	r0, [r7, #4]
 8106efe:	f000 f8a1 	bl	8107044 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8106f02:	4603      	mov	r3, r0
 8106f04:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8106f06:	6878      	ldr	r0, [r7, #4]
 8106f08:	f7ff ff75 	bl	8106df6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8106f0c:	4603      	mov	r3, r0
 8106f0e:	60fb      	str	r3, [r7, #12]
 8106f10:	f107 020c 	add.w	r2, r7, #12
 8106f14:	f107 0308 	add.w	r3, r7, #8
 8106f18:	4611      	mov	r1, r2
 8106f1a:	4618      	mov	r0, r3
 8106f1c:	f7ff ff78 	bl	8106e10 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8106f20:	4603      	mov	r3, r0
 8106f22:	2b00      	cmp	r3, #0
 8106f24:	d112      	bne.n	8106f4c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x5c>
 8106f26:	6878      	ldr	r0, [r7, #4]
 8106f28:	f000 f89b 	bl	8107062 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8106f2c:	f107 0308 	add.w	r3, r7, #8
 8106f30:	4618      	mov	r0, r3
 8106f32:	f000 f8a3 	bl	810707c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8106f36:	4603      	mov	r3, r0
 8106f38:	461a      	mov	r2, r3
 8106f3a:	f107 0310 	add.w	r3, r7, #16
 8106f3e:	6839      	ldr	r1, [r7, #0]
 8106f40:	4618      	mov	r0, r3
 8106f42:	f000 f8a9 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8106f46:	4603      	mov	r3, r0
 8106f48:	2b00      	cmp	r3, #0
 8106f4a:	d001      	beq.n	8106f50 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x60>
 8106f4c:	2301      	movs	r3, #1
 8106f4e:	e000      	b.n	8106f52 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x62>
 8106f50:	2300      	movs	r3, #0
 8106f52:	2b00      	cmp	r3, #0
 8106f54:	d01f      	beq.n	8106f96 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8106f56:	687c      	ldr	r4, [r7, #4]
 8106f58:	f107 0208 	add.w	r2, r7, #8
 8106f5c:	f107 0314 	add.w	r3, r7, #20
 8106f60:	4611      	mov	r1, r2
 8106f62:	4618      	mov	r0, r3
 8106f64:	f000 f8c3 	bl	81070ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					std::forward_as_tuple(std::move(__k)),
 8106f68:	6838      	ldr	r0, [r7, #0]
 8106f6a:	f000 fb2b 	bl	81075c4 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>
 8106f6e:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8106f70:	f107 0318 	add.w	r3, r7, #24
 8106f74:	4611      	mov	r1, r2
 8106f76:	4618      	mov	r0, r3
 8106f78:	f000 fb2f 	bl	81075da <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>
 8106f7c:	f107 0218 	add.w	r2, r7, #24
 8106f80:	f107 031c 	add.w	r3, r7, #28
 8106f84:	9300      	str	r3, [sp, #0]
 8106f86:	4613      	mov	r3, r2
 8106f88:	4a08      	ldr	r2, [pc, #32]	@ (8106fac <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xbc>)
 8106f8a:	6979      	ldr	r1, [r7, #20]
 8106f8c:	4620      	mov	r0, r4
 8106f8e:	f000 fb35 	bl	81075fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8106f92:	4603      	mov	r3, r0
 8106f94:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8106f96:	f107 0308 	add.w	r3, r7, #8
 8106f9a:	4618      	mov	r0, r3
 8106f9c:	f000 f86e 	bl	810707c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8106fa0:	4603      	mov	r3, r0
 8106fa2:	3304      	adds	r3, #4
      }
 8106fa4:	4618      	mov	r0, r3
 8106fa6:	3724      	adds	r7, #36	@ 0x24
 8106fa8:	46bd      	mov	sp, r7
 8106faa:	bd90      	pop	{r4, r7, pc}
 8106fac:	0812858c 	.word	0x0812858c

08106fb0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8106fb0:	b580      	push	{r7, lr}
 8106fb2:	b082      	sub	sp, #8
 8106fb4:	af00      	add	r7, sp, #0
 8106fb6:	6078      	str	r0, [r7, #4]
 8106fb8:	6878      	ldr	r0, [r7, #4]
 8106fba:	f000 fb65 	bl	8107688 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	4618      	mov	r0, r3
 8106fc2:	3708      	adds	r7, #8
 8106fc4:	46bd      	mov	sp, r7
 8106fc6:	bd80      	pop	{r7, pc}

08106fc8 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8106fc8:	b480      	push	{r7}
 8106fca:	b083      	sub	sp, #12
 8106fcc:	af00      	add	r7, sp, #0
 8106fce:	6078      	str	r0, [r7, #4]
      { }
 8106fd0:	687b      	ldr	r3, [r7, #4]
 8106fd2:	4618      	mov	r0, r3
 8106fd4:	370c      	adds	r7, #12
 8106fd6:	46bd      	mov	sp, r7
 8106fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fdc:	4770      	bx	lr

08106fde <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8106fde:	b580      	push	{r7, lr}
 8106fe0:	b082      	sub	sp, #8
 8106fe2:	af00      	add	r7, sp, #0
 8106fe4:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8106fe6:	6878      	ldr	r0, [r7, #4]
 8106fe8:	f000 fb82 	bl	81076f0 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 8106fec:	4603      	mov	r3, r0
 8106fee:	4618      	mov	r0, r3
 8106ff0:	3708      	adds	r7, #8
 8106ff2:	46bd      	mov	sp, r7
 8106ff4:	bd80      	pop	{r7, pc}

08106ff6 <_ZSt4moveIRSt4pairIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8106ff6:	b480      	push	{r7}
 8106ff8:	b083      	sub	sp, #12
 8106ffa:	af00      	add	r7, sp, #0
 8106ffc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	4618      	mov	r0, r3
 8107002:	370c      	adds	r7, #12
 8107004:	46bd      	mov	sp, r7
 8107006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810700a:	4770      	bx	lr

0810700c <_ZNSt10__pair_getILj0EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT_OSt4pairIS8_T0_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 810700c:	b580      	push	{r7, lr}
 810700e:	b082      	sub	sp, #8
 8107010:	af00      	add	r7, sp, #0
 8107012:	6078      	str	r0, [r7, #4]
	{ return std::forward<_Tp1>(__pair.first); }
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	4618      	mov	r0, r3
 810701a:	f000 f852 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810701e:	4603      	mov	r3, r0
 8107020:	4618      	mov	r0, r3
 8107022:	3708      	adds	r7, #8
 8107024:	46bd      	mov	sp, r7
 8107026:	bd80      	pop	{r7, pc}

08107028 <_ZNSt10__pair_getILj1EE10__move_getIRN19EventManagerCM4Task11EEventQueueERP15QueueDefinitionEEOT0_OSt4pairIT_S8_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 8107028:	b580      	push	{r7, lr}
 810702a:	b082      	sub	sp, #8
 810702c:	af00      	add	r7, sp, #0
 810702e:	6078      	str	r0, [r7, #4]
	{ return std::forward<_Tp2>(__pair.second); }
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	685b      	ldr	r3, [r3, #4]
 8107034:	4618      	mov	r0, r3
 8107036:	f000 f84f 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810703a:	4603      	mov	r3, r0
 810703c:	4618      	mov	r0, r3
 810703e:	3708      	adds	r7, #8
 8107040:	46bd      	mov	sp, r7
 8107042:	bd80      	pop	{r7, pc}

08107044 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8107044:	b580      	push	{r7, lr}
 8107046:	b082      	sub	sp, #8
 8107048:	af00      	add	r7, sp, #0
 810704a:	6078      	str	r0, [r7, #4]
 810704c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	6839      	ldr	r1, [r7, #0]
 8107052:	4618      	mov	r0, r3
 8107054:	f000 fb58 	bl	8107708 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8107058:	4603      	mov	r3, r0
 810705a:	4618      	mov	r0, r3
 810705c:	3708      	adds	r7, #8
 810705e:	46bd      	mov	sp, r7
 8107060:	bd80      	pop	{r7, pc}

08107062 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8107062:	b590      	push	{r4, r7, lr}
 8107064:	b083      	sub	sp, #12
 8107066:	af00      	add	r7, sp, #0
 8107068:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 810706a:	687b      	ldr	r3, [r7, #4]
 810706c:	4618      	mov	r0, r3
 810706e:	f000 fb62 	bl	8107736 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8107072:	bf00      	nop
 8107074:	4620      	mov	r0, r4
 8107076:	370c      	adds	r7, #12
 8107078:	46bd      	mov	sp, r7
 810707a:	bd90      	pop	{r4, r7, pc}

0810707c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810707c:	b580      	push	{r7, lr}
 810707e:	b082      	sub	sp, #8
 8107080:	af00      	add	r7, sp, #0
 8107082:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	681b      	ldr	r3, [r3, #0]
 8107088:	4618      	mov	r0, r3
 810708a:	f000 fb5f 	bl	810774c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810708e:	4603      	mov	r3, r0
 8107090:	4618      	mov	r0, r3
 8107092:	3708      	adds	r7, #8
 8107094:	46bd      	mov	sp, r7
 8107096:	bd80      	pop	{r7, pc}

08107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8107098:	b480      	push	{r7}
 810709a:	b085      	sub	sp, #20
 810709c:	af00      	add	r7, sp, #0
 810709e:	60f8      	str	r0, [r7, #12]
 81070a0:	60b9      	str	r1, [r7, #8]
 81070a2:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 81070a4:	68bb      	ldr	r3, [r7, #8]
 81070a6:	781a      	ldrb	r2, [r3, #0]
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	781b      	ldrb	r3, [r3, #0]
 81070ac:	429a      	cmp	r2, r3
 81070ae:	bf34      	ite	cc
 81070b0:	2301      	movcc	r3, #1
 81070b2:	2300      	movcs	r3, #0
 81070b4:	b2db      	uxtb	r3, r3
 81070b6:	4618      	mov	r0, r3
 81070b8:	3714      	adds	r7, #20
 81070ba:	46bd      	mov	sp, r7
 81070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070c0:	4770      	bx	lr

081070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81070c2:	b480      	push	{r7}
 81070c4:	b083      	sub	sp, #12
 81070c6:	af00      	add	r7, sp, #0
 81070c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81070ca:	687b      	ldr	r3, [r7, #4]
 81070cc:	4618      	mov	r0, r3
 81070ce:	370c      	adds	r7, #12
 81070d0:	46bd      	mov	sp, r7
 81070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070d6:	4770      	bx	lr

081070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81070d8:	b480      	push	{r7}
 81070da:	b083      	sub	sp, #12
 81070dc:	af00      	add	r7, sp, #0
 81070de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81070e0:	687b      	ldr	r3, [r7, #4]
 81070e2:	4618      	mov	r0, r3
 81070e4:	370c      	adds	r7, #12
 81070e6:	46bd      	mov	sp, r7
 81070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070ec:	4770      	bx	lr

081070ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 81070ee:	b480      	push	{r7}
 81070f0:	b083      	sub	sp, #12
 81070f2:	af00      	add	r7, sp, #0
 81070f4:	6078      	str	r0, [r7, #4]
 81070f6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 81070f8:	683b      	ldr	r3, [r7, #0]
 81070fa:	681a      	ldr	r2, [r3, #0]
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	601a      	str	r2, [r3, #0]
 8107100:	687b      	ldr	r3, [r7, #4]
 8107102:	4618      	mov	r0, r3
 8107104:	370c      	adds	r7, #12
 8107106:	46bd      	mov	sp, r7
 8107108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810710c:	4770      	bx	lr

0810710e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE12emplace_hintIJRS1_RS3_EEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:
	emplace_hint(const_iterator __pos, _Args&&... __args)
 810710e:	b5b0      	push	{r4, r5, r7, lr}
 8107110:	b084      	sub	sp, #16
 8107112:	af00      	add	r7, sp, #0
 8107114:	60f8      	str	r0, [r7, #12]
 8107116:	60b9      	str	r1, [r7, #8]
 8107118:	607a      	str	r2, [r7, #4]
 810711a:	603b      	str	r3, [r7, #0]
	  return _M_t._M_emplace_hint_unique(__pos,
 810711c:	68fc      	ldr	r4, [r7, #12]
 810711e:	6878      	ldr	r0, [r7, #4]
 8107120:	f7ff ffcf 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8107124:	4605      	mov	r5, r0
 8107126:	6838      	ldr	r0, [r7, #0]
 8107128:	f7ff ffd6 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810712c:	4603      	mov	r3, r0
 810712e:	462a      	mov	r2, r5
 8107130:	68b9      	ldr	r1, [r7, #8]
 8107132:	4620      	mov	r0, r4
 8107134:	f000 fb18 	bl	8107768 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8107138:	4603      	mov	r3, r0
	}
 810713a:	4618      	mov	r0, r3
 810713c:	3710      	adds	r7, #16
 810713e:	46bd      	mov	sp, r7
 8107140:	bdb0      	pop	{r4, r5, r7, pc}

08107142 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IRS7_bEEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 8107142:	b580      	push	{r7, lr}
 8107144:	b084      	sub	sp, #16
 8107146:	af00      	add	r7, sp, #0
 8107148:	60f8      	str	r0, [r7, #12]
 810714a:	60b9      	str	r1, [r7, #8]
 810714c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 810714e:	68b8      	ldr	r0, [r7, #8]
 8107150:	f000 fb4a 	bl	81077e8 <_ZSt7forwardIRSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISA_E4typeE>
 8107154:	4602      	mov	r2, r0
 8107156:	68fb      	ldr	r3, [r7, #12]
 8107158:	6812      	ldr	r2, [r2, #0]
 810715a:	601a      	str	r2, [r3, #0]
 810715c:	6878      	ldr	r0, [r7, #4]
 810715e:	f7fa fb23 	bl	81017a8 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8107162:	4603      	mov	r3, r0
 8107164:	781a      	ldrb	r2, [r3, #0]
 8107166:	68fb      	ldr	r3, [r7, #12]
 8107168:	711a      	strb	r2, [r3, #4]
	{ }
 810716a:	68fb      	ldr	r3, [r7, #12]
 810716c:	4618      	mov	r0, r3
 810716e:	3710      	adds	r7, #16
 8107170:	46bd      	mov	sp, r7
 8107172:	bd80      	pop	{r7, pc}

08107174 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8107174:	b480      	push	{r7}
 8107176:	b083      	sub	sp, #12
 8107178:	af00      	add	r7, sp, #0
 810717a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	4618      	mov	r0, r3
 8107180:	370c      	adds	r7, #12
 8107182:	46bd      	mov	sp, r7
 8107184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107188:	4770      	bx	lr

0810718a <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 810718a:	b580      	push	{r7, lr}
 810718c:	b084      	sub	sp, #16
 810718e:	af00      	add	r7, sp, #0
 8107190:	60f8      	str	r0, [r7, #12]
 8107192:	60b9      	str	r1, [r7, #8]
 8107194:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8107196:	68b9      	ldr	r1, [r7, #8]
 8107198:	68f8      	ldr	r0, [r7, #12]
 810719a:	f000 fc2b 	bl	81079f4 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 810719e:	bf00      	nop
 81071a0:	3710      	adds	r7, #16
 81071a2:	46bd      	mov	sp, r7
 81071a4:	bd80      	pop	{r7, pc}

081071a6 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 81071a6:	b580      	push	{r7, lr}
 81071a8:	b084      	sub	sp, #16
 81071aa:	af00      	add	r7, sp, #0
 81071ac:	60f8      	str	r0, [r7, #12]
 81071ae:	60b9      	str	r1, [r7, #8]
 81071b0:	607a      	str	r2, [r7, #4]
	if (__p)
 81071b2:	68bb      	ldr	r3, [r7, #8]
 81071b4:	2b00      	cmp	r3, #0
 81071b6:	d005      	beq.n	81071c4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 81071b8:	68fb      	ldr	r3, [r7, #12]
 81071ba:	687a      	ldr	r2, [r7, #4]
 81071bc:	68b9      	ldr	r1, [r7, #8]
 81071be:	4618      	mov	r0, r3
 81071c0:	f000 fc2e 	bl	8107a20 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 81071c4:	bf00      	nop
 81071c6:	3710      	adds	r7, #16
 81071c8:	46bd      	mov	sp, r7
 81071ca:	bd80      	pop	{r7, pc}

081071cc <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 81071cc:	b580      	push	{r7, lr}
 81071ce:	b084      	sub	sp, #16
 81071d0:	af00      	add	r7, sp, #0
 81071d2:	60f8      	str	r0, [r7, #12]
 81071d4:	60b9      	str	r1, [r7, #8]
 81071d6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 81071d8:	6878      	ldr	r0, [r7, #4]
 81071da:	f000 fc40 	bl	8107a5e <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 81071de:	4603      	mov	r3, r0
 81071e0:	4619      	mov	r1, r3
 81071e2:	68b8      	ldr	r0, [r7, #8]
 81071e4:	f000 fc46 	bl	8107a74 <_ZSt12construct_atI8SMessageJRKS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 81071e8:	bf00      	nop
 81071ea:	3710      	adds	r7, #16
 81071ec:	46bd      	mov	sp, r7
 81071ee:	bd80      	pop	{r7, pc}

081071f0 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81071f0:	b580      	push	{r7, lr}
 81071f2:	b084      	sub	sp, #16
 81071f4:	af00      	add	r7, sp, #0
 81071f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 81071f8:	687b      	ldr	r3, [r7, #4]
 81071fa:	1d1a      	adds	r2, r3, #4
 81071fc:	f107 030c 	add.w	r3, r7, #12
 8107200:	4611      	mov	r1, r2
 8107202:	4618      	mov	r0, r3
 8107204:	f000 fc52 	bl	8107aac <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8107208:	68fb      	ldr	r3, [r7, #12]
 810720a:	4618      	mov	r0, r3
 810720c:	3710      	adds	r7, #16
 810720e:	46bd      	mov	sp, r7
 8107210:	bd80      	pop	{r7, pc}
	...

08107214 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8107214:	b480      	push	{r7}
 8107216:	b083      	sub	sp, #12
 8107218:	af00      	add	r7, sp, #0
 810721a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 810721c:	687b      	ldr	r3, [r7, #4]
 810721e:	685a      	ldr	r2, [r3, #4]
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	681b      	ldr	r3, [r3, #0]
 8107224:	1ad3      	subs	r3, r2, r3
 8107226:	109b      	asrs	r3, r3, #2
 8107228:	4a04      	ldr	r2, [pc, #16]	@ (810723c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 810722a:	fb02 f303 	mul.w	r3, r2, r3
 810722e:	4618      	mov	r0, r3
 8107230:	370c      	adds	r7, #12
 8107232:	46bd      	mov	sp, r7
 8107234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107238:	4770      	bx	lr
 810723a:	bf00      	nop
 810723c:	b6db6db7 	.word	0xb6db6db7

08107240 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8107240:	b480      	push	{r7}
 8107242:	b083      	sub	sp, #12
 8107244:	af00      	add	r7, sp, #0
 8107246:	6078      	str	r0, [r7, #4]
 8107248:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 810724a:	687b      	ldr	r3, [r7, #4]
 810724c:	681a      	ldr	r2, [r3, #0]
 810724e:	683b      	ldr	r3, [r7, #0]
 8107250:	681b      	ldr	r3, [r3, #0]
 8107252:	429a      	cmp	r2, r3
 8107254:	d201      	bcs.n	810725a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8107256:	683b      	ldr	r3, [r7, #0]
 8107258:	e000      	b.n	810725c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 810725a:	687b      	ldr	r3, [r7, #4]
    }
 810725c:	4618      	mov	r0, r3
 810725e:	370c      	adds	r7, #12
 8107260:	46bd      	mov	sp, r7
 8107262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107266:	4770      	bx	lr

08107268 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8107268:	b590      	push	{r4, r7, lr}
 810726a:	b087      	sub	sp, #28
 810726c:	af00      	add	r7, sp, #0
 810726e:	60f8      	str	r0, [r7, #12]
 8107270:	60b9      	str	r1, [r7, #8]
 8107272:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8107274:	68f8      	ldr	r0, [r7, #12]
 8107276:	f000 fc29 	bl	8107acc <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810727a:	4604      	mov	r4, r0
 810727c:	68f8      	ldr	r0, [r7, #12]
 810727e:	f7ff ffc9 	bl	8107214 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8107282:	4603      	mov	r3, r0
 8107284:	1ae2      	subs	r2, r4, r3
 8107286:	68bb      	ldr	r3, [r7, #8]
 8107288:	429a      	cmp	r2, r3
 810728a:	bf34      	ite	cc
 810728c:	2301      	movcc	r3, #1
 810728e:	2300      	movcs	r3, #0
 8107290:	b2db      	uxtb	r3, r3
 8107292:	2b00      	cmp	r3, #0
 8107294:	d002      	beq.n	810729c <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8107296:	6878      	ldr	r0, [r7, #4]
 8107298:	f01c fa53 	bl	8123742 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 810729c:	68f8      	ldr	r0, [r7, #12]
 810729e:	f7ff ffb9 	bl	8107214 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81072a2:	4604      	mov	r4, r0
 81072a4:	68f8      	ldr	r0, [r7, #12]
 81072a6:	f7ff ffb5 	bl	8107214 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81072aa:	4603      	mov	r3, r0
 81072ac:	613b      	str	r3, [r7, #16]
 81072ae:	f107 0208 	add.w	r2, r7, #8
 81072b2:	f107 0310 	add.w	r3, r7, #16
 81072b6:	4611      	mov	r1, r2
 81072b8:	4618      	mov	r0, r3
 81072ba:	f7ff ffc1 	bl	8107240 <_ZSt3maxIjERKT_S2_S2_>
 81072be:	4603      	mov	r3, r0
 81072c0:	681b      	ldr	r3, [r3, #0]
 81072c2:	4423      	add	r3, r4
 81072c4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 81072c6:	68f8      	ldr	r0, [r7, #12]
 81072c8:	f7ff ffa4 	bl	8107214 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81072cc:	4602      	mov	r2, r0
 81072ce:	697b      	ldr	r3, [r7, #20]
 81072d0:	4293      	cmp	r3, r2
 81072d2:	d306      	bcc.n	81072e2 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 81072d4:	68f8      	ldr	r0, [r7, #12]
 81072d6:	f000 fbf9 	bl	8107acc <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81072da:	4602      	mov	r2, r0
 81072dc:	697b      	ldr	r3, [r7, #20]
 81072de:	4293      	cmp	r3, r2
 81072e0:	d904      	bls.n	81072ec <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 81072e2:	68f8      	ldr	r0, [r7, #12]
 81072e4:	f000 fbf2 	bl	8107acc <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81072e8:	4603      	mov	r3, r0
 81072ea:	e000      	b.n	81072ee <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 81072ec:	697b      	ldr	r3, [r7, #20]
      }
 81072ee:	4618      	mov	r0, r3
 81072f0:	371c      	adds	r7, #28
 81072f2:	46bd      	mov	sp, r7
 81072f4:	bd90      	pop	{r4, r7, pc}
	...

081072f8 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 81072f8:	b590      	push	{r4, r7, lr}
 81072fa:	b083      	sub	sp, #12
 81072fc:	af00      	add	r7, sp, #0
 81072fe:	6078      	str	r0, [r7, #4]
 8107300:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8107302:	6878      	ldr	r0, [r7, #4]
 8107304:	f000 fbf3 	bl	8107aee <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8107308:	4603      	mov	r3, r0
 810730a:	681c      	ldr	r4, [r3, #0]
 810730c:	6838      	ldr	r0, [r7, #0]
 810730e:	f000 fbee 	bl	8107aee <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8107312:	4603      	mov	r3, r0
 8107314:	681b      	ldr	r3, [r3, #0]
 8107316:	1ae3      	subs	r3, r4, r3
 8107318:	109b      	asrs	r3, r3, #2
 810731a:	4a03      	ldr	r2, [pc, #12]	@ (8107328 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 810731c:	fb02 f303 	mul.w	r3, r2, r3
 8107320:	4618      	mov	r0, r3
 8107322:	370c      	adds	r7, #12
 8107324:	46bd      	mov	sp, r7
 8107326:	bd90      	pop	{r4, r7, pc}
 8107328:	b6db6db7 	.word	0xb6db6db7

0810732c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810732c:	b580      	push	{r7, lr}
 810732e:	b084      	sub	sp, #16
 8107330:	af00      	add	r7, sp, #0
 8107332:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8107334:	687a      	ldr	r2, [r7, #4]
 8107336:	f107 030c 	add.w	r3, r7, #12
 810733a:	4611      	mov	r1, r2
 810733c:	4618      	mov	r0, r3
 810733e:	f000 fbb5 	bl	8107aac <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8107342:	68fb      	ldr	r3, [r7, #12]
 8107344:	4618      	mov	r0, r3
 8107346:	3710      	adds	r7, #16
 8107348:	46bd      	mov	sp, r7
 810734a:	bd80      	pop	{r7, pc}

0810734c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 810734c:	b5b0      	push	{r4, r5, r7, lr}
 810734e:	b08c      	sub	sp, #48	@ 0x30
 8107350:	af00      	add	r7, sp, #0
 8107352:	60f8      	str	r0, [r7, #12]
 8107354:	60b9      	str	r1, [r7, #8]
 8107356:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8107358:	4a3f      	ldr	r2, [pc, #252]	@ (8107458 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 810735a:	2101      	movs	r1, #1
 810735c:	68f8      	ldr	r0, [r7, #12]
 810735e:	f7ff ff83 	bl	8107268 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 8107362:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8107364:	68fb      	ldr	r3, [r7, #12]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 810736a:	68fb      	ldr	r3, [r7, #12]
 810736c:	685b      	ldr	r3, [r3, #4]
 810736e:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 8107370:	68f8      	ldr	r0, [r7, #12]
 8107372:	f7ff ffdb 	bl	810732c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8107376:	4603      	mov	r3, r0
 8107378:	617b      	str	r3, [r7, #20]
 810737a:	f107 0214 	add.w	r2, r7, #20
 810737e:	f107 0308 	add.w	r3, r7, #8
 8107382:	4611      	mov	r1, r2
 8107384:	4618      	mov	r0, r3
 8107386:	f7ff ffb7 	bl	81072f8 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 810738a:	4603      	mov	r3, r0
 810738c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 810738e:	68fb      	ldr	r3, [r7, #12]
 8107390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8107392:	4618      	mov	r0, r3
 8107394:	f000 fbb6 	bl	8107b04 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8107398:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 810739a:	69fb      	ldr	r3, [r7, #28]
 810739c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 810739e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 81073a0:	6a3a      	ldr	r2, [r7, #32]
 81073a2:	4613      	mov	r3, r2
 81073a4:	00db      	lsls	r3, r3, #3
 81073a6:	1a9b      	subs	r3, r3, r2
 81073a8:	009b      	lsls	r3, r3, #2
 81073aa:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 81073ac:	69fb      	ldr	r3, [r7, #28]
 81073ae:	189d      	adds	r5, r3, r2
 81073b0:	6878      	ldr	r0, [r7, #4]
 81073b2:	f000 fb54 	bl	8107a5e <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 81073b6:	4603      	mov	r3, r0
 81073b8:	461a      	mov	r2, r3
 81073ba:	4629      	mov	r1, r5
 81073bc:	4620      	mov	r0, r4
 81073be:	f7ff ff05 	bl	81071cc <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 81073c2:	2300      	movs	r3, #0
 81073c4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 81073c6:	f107 0308 	add.w	r3, r7, #8
 81073ca:	4618      	mov	r0, r3
 81073cc:	f000 fb8f 	bl	8107aee <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81073d0:	4603      	mov	r3, r0
 81073d2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 81073d4:	68fb      	ldr	r3, [r7, #12]
 81073d6:	4618      	mov	r0, r3
 81073d8:	f7ff fecc 	bl	8107174 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81073dc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 81073de:	69fa      	ldr	r2, [r7, #28]
 81073e0:	4621      	mov	r1, r4
 81073e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81073e4:	f000 fba2 	bl	8107b2c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 81073e8:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 81073ea:	69bb      	ldr	r3, [r7, #24]
 81073ec:	331c      	adds	r3, #28
 81073ee:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 81073f0:	f107 0308 	add.w	r3, r7, #8
 81073f4:	4618      	mov	r0, r3
 81073f6:	f000 fb7a 	bl	8107aee <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81073fa:	4603      	mov	r3, r0
 81073fc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	4618      	mov	r0, r3
 8107402:	f7ff feb7 	bl	8107174 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8107406:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8107408:	69ba      	ldr	r2, [r7, #24]
 810740a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810740c:	4620      	mov	r0, r4
 810740e:	f000 fb8d 	bl	8107b2c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8107412:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8107414:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8107416:	68fb      	ldr	r3, [r7, #12]
 8107418:	689a      	ldr	r2, [r3, #8]
 810741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810741c:	1ad3      	subs	r3, r2, r3
 810741e:	109b      	asrs	r3, r3, #2
 8107420:	4a0e      	ldr	r2, [pc, #56]	@ (810745c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 8107422:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8107426:	461a      	mov	r2, r3
 8107428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810742a:	f7ff febc 	bl	81071a6 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 810742e:	68fb      	ldr	r3, [r7, #12]
 8107430:	69fa      	ldr	r2, [r7, #28]
 8107432:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	69ba      	ldr	r2, [r7, #24]
 8107438:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 810743a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810743c:	4613      	mov	r3, r2
 810743e:	00db      	lsls	r3, r3, #3
 8107440:	1a9b      	subs	r3, r3, r2
 8107442:	009b      	lsls	r3, r3, #2
 8107444:	461a      	mov	r2, r3
 8107446:	69fb      	ldr	r3, [r7, #28]
 8107448:	441a      	add	r2, r3
 810744a:	68fb      	ldr	r3, [r7, #12]
 810744c:	609a      	str	r2, [r3, #8]
    }
 810744e:	bf00      	nop
 8107450:	3730      	adds	r7, #48	@ 0x30
 8107452:	46bd      	mov	sp, r7
 8107454:	bdb0      	pop	{r4, r5, r7, pc}
 8107456:	bf00      	nop
 8107458:	081254b0 	.word	0x081254b0
 810745c:	b6db6db7 	.word	0xb6db6db7

08107460 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8107460:	b480      	push	{r7}
 8107462:	b083      	sub	sp, #12
 8107464:	af00      	add	r7, sp, #0
 8107466:	6078      	str	r0, [r7, #4]
 8107468:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810746a:	683b      	ldr	r3, [r7, #0]
 810746c:	681a      	ldr	r2, [r3, #0]
 810746e:	687b      	ldr	r3, [r7, #4]
 8107470:	601a      	str	r2, [r3, #0]
 8107472:	687b      	ldr	r3, [r7, #4]
 8107474:	4618      	mov	r0, r3
 8107476:	370c      	adds	r7, #12
 8107478:	46bd      	mov	sp, r7
 810747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810747e:	4770      	bx	lr

08107480 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8107480:	b590      	push	{r4, r7, lr}
 8107482:	b085      	sub	sp, #20
 8107484:	af00      	add	r7, sp, #0
 8107486:	6078      	str	r0, [r7, #4]
 8107488:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 810748a:	6878      	ldr	r0, [r7, #4]
 810748c:	f7ff fda7 	bl	8106fde <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8107490:	4604      	mov	r4, r0
 8107492:	6878      	ldr	r0, [r7, #4]
 8107494:	f000 fb68 	bl	8107b68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8107498:	4602      	mov	r2, r0
 810749a:	683b      	ldr	r3, [r7, #0]
 810749c:	4621      	mov	r1, r4
 810749e:	6878      	ldr	r0, [r7, #4]
 81074a0:	f000 fb6e 	bl	8107b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 81074a4:	4603      	mov	r3, r0
 81074a6:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 81074a8:	6878      	ldr	r0, [r7, #4]
 81074aa:	f000 f825 	bl	81074f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81074ae:	4603      	mov	r3, r0
 81074b0:	60fb      	str	r3, [r7, #12]
 81074b2:	f107 020c 	add.w	r2, r7, #12
 81074b6:	f107 0308 	add.w	r3, r7, #8
 81074ba:	4611      	mov	r1, r2
 81074bc:	4618      	mov	r0, r3
 81074be:	f7ff fca7 	bl	8106e10 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81074c2:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 81074c4:	2b00      	cmp	r3, #0
 81074c6:	d10d      	bne.n	81074e4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 81074c8:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 81074ca:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 81074cc:	4618      	mov	r0, r3
 81074ce:	f000 fb88 	bl	8107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81074d2:	4603      	mov	r3, r0
 81074d4:	461a      	mov	r2, r3
 81074d6:	6839      	ldr	r1, [r7, #0]
 81074d8:	4620      	mov	r0, r4
 81074da:	f7ff fddd 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81074de:	4603      	mov	r3, r0
 81074e0:	2b00      	cmp	r3, #0
 81074e2:	d004      	beq.n	81074ee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 81074e4:	6878      	ldr	r0, [r7, #4]
 81074e6:	f000 f807 	bl	81074f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81074ea:	4603      	mov	r3, r0
 81074ec:	e000      	b.n	81074f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 81074ee:	68bb      	ldr	r3, [r7, #8]
    }
 81074f0:	4618      	mov	r0, r3
 81074f2:	3714      	adds	r7, #20
 81074f4:	46bd      	mov	sp, r7
 81074f6:	bd90      	pop	{r4, r7, pc}

081074f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81074f8:	b580      	push	{r7, lr}
 81074fa:	b084      	sub	sp, #16
 81074fc:	af00      	add	r7, sp, #0
 81074fe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8107500:	687b      	ldr	r3, [r7, #4]
 8107502:	1d1a      	adds	r2, r3, #4
 8107504:	f107 030c 	add.w	r3, r7, #12
 8107508:	4611      	mov	r1, r2
 810750a:	4618      	mov	r0, r3
 810750c:	f000 fa57 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8107510:	68fb      	ldr	r3, [r7, #12]
 8107512:	4618      	mov	r0, r3
 8107514:	3710      	adds	r7, #16
 8107516:	46bd      	mov	sp, r7
 8107518:	bd80      	pop	{r7, pc}

0810751a <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 810751a:	b580      	push	{r7, lr}
 810751c:	b082      	sub	sp, #8
 810751e:	af00      	add	r7, sp, #0
 8107520:	6078      	str	r0, [r7, #4]
 8107522:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	6839      	ldr	r1, [r7, #0]
 8107528:	4618      	mov	r0, r3
 810752a:	f000 fb66 	bl	8107bfa <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 810752e:	687b      	ldr	r3, [r7, #4]
 8107530:	4618      	mov	r0, r3
 8107532:	3708      	adds	r7, #8
 8107534:	46bd      	mov	sp, r7
 8107536:	bd80      	pop	{r7, pc}

08107538 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8107538:	b5b0      	push	{r4, r5, r7, lr}
 810753a:	b08c      	sub	sp, #48	@ 0x30
 810753c:	af02      	add	r7, sp, #8
 810753e:	60f8      	str	r0, [r7, #12]
 8107540:	60b9      	str	r1, [r7, #8]
 8107542:	607a      	str	r2, [r7, #4]
 8107544:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8107546:	6878      	ldr	r0, [r7, #4]
 8107548:	f000 fb66 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810754c:	4604      	mov	r4, r0
 810754e:	6838      	ldr	r0, [r7, #0]
 8107550:	f000 fb6d 	bl	8107c2e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8107554:	4605      	mov	r5, r0
 8107556:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8107558:	f000 fb74 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810755c:	4603      	mov	r3, r0
 810755e:	f107 001c 	add.w	r0, r7, #28
 8107562:	9300      	str	r3, [sp, #0]
 8107564:	462b      	mov	r3, r5
 8107566:	4622      	mov	r2, r4
 8107568:	68f9      	ldr	r1, [r7, #12]
 810756a:	f000 fb76 	bl	8107c5a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 810756e:	f107 031c 	add.w	r3, r7, #28
 8107572:	4618      	mov	r0, r3
 8107574:	f000 f9fc 	bl	8107970 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8107578:	4603      	mov	r3, r0
 810757a:	f107 0014 	add.w	r0, r7, #20
 810757e:	68ba      	ldr	r2, [r7, #8]
 8107580:	68f9      	ldr	r1, [r7, #12]
 8107582:	f000 fb8d 	bl	8107ca0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8107586:	69bb      	ldr	r3, [r7, #24]
 8107588:	2b00      	cmp	r3, #0
 810758a:	d009      	beq.n	81075a0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 810758c:	f107 001c 	add.w	r0, r7, #28
 8107590:	f107 0314 	add.w	r3, r7, #20
 8107594:	e893 0006 	ldmia.w	r3, {r1, r2}
 8107598:	f000 f9f8 	bl	810798c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 810759c:	4604      	mov	r4, r0
 810759e:	e007      	b.n	81075b0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 81075a0:	697a      	ldr	r2, [r7, #20]
 81075a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81075a6:	4611      	mov	r1, r2
 81075a8:	4618      	mov	r0, r3
 81075aa:	f000 fa08 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81075ae:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 81075b0:	f107 031c 	add.w	r3, r7, #28
 81075b4:	4618      	mov	r0, r3
 81075b6:	f000 f941 	bl	810783c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 81075ba:	4623      	mov	r3, r4
 81075bc:	4618      	mov	r0, r3
 81075be:	3728      	adds	r7, #40	@ 0x28
 81075c0:	46bd      	mov	sp, r7
 81075c2:	bdb0      	pop	{r4, r5, r7, pc}

081075c4 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 81075c4:	b480      	push	{r7}
 81075c6:	b083      	sub	sp, #12
 81075c8:	af00      	add	r7, sp, #0
 81075ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	4618      	mov	r0, r3
 81075d0:	370c      	adds	r7, #12
 81075d2:	46bd      	mov	sp, r7
 81075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075d8:	4770      	bx	lr

081075da <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 81075da:	b580      	push	{r7, lr}
 81075dc:	b082      	sub	sp, #8
 81075de:	af00      	add	r7, sp, #0
 81075e0:	6078      	str	r0, [r7, #4]
 81075e2:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 81075e4:	6838      	ldr	r0, [r7, #0]
 81075e6:	f000 fc7e 	bl	8107ee6 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 81075ea:	4603      	mov	r3, r0
 81075ec:	4619      	mov	r1, r3
 81075ee:	6878      	ldr	r0, [r7, #4]
 81075f0:	f000 fc84 	bl	8107efc <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>
 81075f4:	6878      	ldr	r0, [r7, #4]
 81075f6:	3708      	adds	r7, #8
 81075f8:	46bd      	mov	sp, r7
 81075fa:	bd80      	pop	{r7, pc}

081075fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81075fc:	b5b0      	push	{r4, r5, r7, lr}
 81075fe:	b08c      	sub	sp, #48	@ 0x30
 8107600:	af02      	add	r7, sp, #8
 8107602:	60f8      	str	r0, [r7, #12]
 8107604:	60b9      	str	r1, [r7, #8]
 8107606:	607a      	str	r2, [r7, #4]
 8107608:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 810760a:	6878      	ldr	r0, [r7, #4]
 810760c:	f000 fb04 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8107610:	4604      	mov	r4, r0
 8107612:	6838      	ldr	r0, [r7, #0]
 8107614:	f000 fc85 	bl	8107f22 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8107618:	4605      	mov	r5, r0
 810761a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810761c:	f000 fb12 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107620:	4603      	mov	r3, r0
 8107622:	f107 001c 	add.w	r0, r7, #28
 8107626:	9300      	str	r3, [sp, #0]
 8107628:	462b      	mov	r3, r5
 810762a:	4622      	mov	r2, r4
 810762c:	68f9      	ldr	r1, [r7, #12]
 810762e:	f000 fc83 	bl	8107f38 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8107632:	f107 031c 	add.w	r3, r7, #28
 8107636:	4618      	mov	r0, r3
 8107638:	f000 f99a 	bl	8107970 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 810763c:	4603      	mov	r3, r0
 810763e:	f107 0014 	add.w	r0, r7, #20
 8107642:	68ba      	ldr	r2, [r7, #8]
 8107644:	68f9      	ldr	r1, [r7, #12]
 8107646:	f000 fb2b 	bl	8107ca0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 810764a:	69bb      	ldr	r3, [r7, #24]
 810764c:	2b00      	cmp	r3, #0
 810764e:	d009      	beq.n	8107664 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8107650:	f107 001c 	add.w	r0, r7, #28
 8107654:	f107 0314 	add.w	r3, r7, #20
 8107658:	e893 0006 	ldmia.w	r3, {r1, r2}
 810765c:	f000 f996 	bl	810798c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8107660:	4604      	mov	r4, r0
 8107662:	e007      	b.n	8107674 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8107664:	697a      	ldr	r2, [r7, #20]
 8107666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810766a:	4611      	mov	r1, r2
 810766c:	4618      	mov	r0, r3
 810766e:	f000 f9a6 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8107672:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8107674:	f107 031c 	add.w	r3, r7, #28
 8107678:	4618      	mov	r0, r3
 810767a:	f000 f8df 	bl	810783c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 810767e:	4623      	mov	r3, r4
 8107680:	4618      	mov	r0, r3
 8107682:	3728      	adds	r7, #40	@ 0x28
 8107684:	46bd      	mov	sp, r7
 8107686:	bdb0      	pop	{r4, r5, r7, pc}

08107688 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8107688:	b480      	push	{r7}
 810768a:	b083      	sub	sp, #12
 810768c:	af00      	add	r7, sp, #0
 810768e:	6078      	str	r0, [r7, #4]
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	4618      	mov	r0, r3
 8107694:	370c      	adds	r7, #12
 8107696:	46bd      	mov	sp, r7
 8107698:	f85d 7b04 	ldr.w	r7, [sp], #4
 810769c:	4770      	bx	lr

0810769e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 810769e:	b480      	push	{r7}
 81076a0:	b083      	sub	sp, #12
 81076a2:	af00      	add	r7, sp, #0
 81076a4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	68db      	ldr	r3, [r3, #12]
 81076aa:	4618      	mov	r0, r3
 81076ac:	370c      	adds	r7, #12
 81076ae:	46bd      	mov	sp, r7
 81076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076b4:	4770      	bx	lr

081076b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81076b6:	b480      	push	{r7}
 81076b8:	b083      	sub	sp, #12
 81076ba:	af00      	add	r7, sp, #0
 81076bc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	689b      	ldr	r3, [r3, #8]
 81076c2:	4618      	mov	r0, r3
 81076c4:	370c      	adds	r7, #12
 81076c6:	46bd      	mov	sp, r7
 81076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076cc:	4770      	bx	lr

081076ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 81076ce:	b580      	push	{r7, lr}
 81076d0:	b082      	sub	sp, #8
 81076d2:	af00      	add	r7, sp, #0
 81076d4:	6078      	str	r0, [r7, #4]
 81076d6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 81076d8:	6839      	ldr	r1, [r7, #0]
 81076da:	6878      	ldr	r0, [r7, #4]
 81076dc:	f000 fc4f 	bl	8107f7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 81076e0:	6839      	ldr	r1, [r7, #0]
 81076e2:	6878      	ldr	r0, [r7, #4]
 81076e4:	f000 fc60 	bl	8107fa8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 81076e8:	bf00      	nop
 81076ea:	3708      	adds	r7, #8
 81076ec:	46bd      	mov	sp, r7
 81076ee:	bd80      	pop	{r7, pc}

081076f0 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 81076f0:	b480      	push	{r7}
 81076f2:	b083      	sub	sp, #12
 81076f4:	af00      	add	r7, sp, #0
 81076f6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 81076f8:	687b      	ldr	r3, [r7, #4]
 81076fa:	689b      	ldr	r3, [r3, #8]
 81076fc:	4618      	mov	r0, r3
 81076fe:	370c      	adds	r7, #12
 8107700:	46bd      	mov	sp, r7
 8107702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107706:	4770      	bx	lr

08107708 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8107708:	b590      	push	{r4, r7, lr}
 810770a:	b083      	sub	sp, #12
 810770c:	af00      	add	r7, sp, #0
 810770e:	6078      	str	r0, [r7, #4]
 8107710:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8107712:	6878      	ldr	r0, [r7, #4]
 8107714:	f7ff fc63 	bl	8106fde <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8107718:	4604      	mov	r4, r0
 810771a:	6878      	ldr	r0, [r7, #4]
 810771c:	f000 fa24 	bl	8107b68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8107720:	4602      	mov	r2, r0
 8107722:	683b      	ldr	r3, [r7, #0]
 8107724:	4621      	mov	r1, r4
 8107726:	6878      	ldr	r0, [r7, #4]
 8107728:	f000 fa2a 	bl	8107b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 810772c:	4603      	mov	r3, r0
 810772e:	4618      	mov	r0, r3
 8107730:	370c      	adds	r7, #12
 8107732:	46bd      	mov	sp, r7
 8107734:	bd90      	pop	{r4, r7, pc}

08107736 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8107736:	b480      	push	{r7}
 8107738:	b083      	sub	sp, #12
 810773a:	af00      	add	r7, sp, #0
 810773c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 810773e:	bf00      	nop
 8107740:	4618      	mov	r0, r3
 8107742:	370c      	adds	r7, #12
 8107744:	46bd      	mov	sp, r7
 8107746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810774a:	4770      	bx	lr

0810774c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 810774c:	b580      	push	{r7, lr}
 810774e:	b082      	sub	sp, #8
 8107750:	af00      	add	r7, sp, #0
 8107752:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8107754:	687b      	ldr	r3, [r7, #4]
 8107756:	3310      	adds	r3, #16
 8107758:	4618      	mov	r0, r3
 810775a:	f000 fc37 	bl	8107fcc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 810775e:	4603      	mov	r3, r0
 8107760:	4618      	mov	r0, r3
 8107762:	3708      	adds	r7, #8
 8107764:	46bd      	mov	sp, r7
 8107766:	bd80      	pop	{r7, pc}

08107768 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8107768:	b590      	push	{r4, r7, lr}
 810776a:	b08b      	sub	sp, #44	@ 0x2c
 810776c:	af00      	add	r7, sp, #0
 810776e:	60f8      	str	r0, [r7, #12]
 8107770:	60b9      	str	r1, [r7, #8]
 8107772:	607a      	str	r2, [r7, #4]
 8107774:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8107776:	6878      	ldr	r0, [r7, #4]
 8107778:	f7ff fca3 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810777c:	4604      	mov	r4, r0
 810777e:	6838      	ldr	r0, [r7, #0]
 8107780:	f7ff fcaa 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8107784:	4603      	mov	r3, r0
 8107786:	f107 001c 	add.w	r0, r7, #28
 810778a:	4622      	mov	r2, r4
 810778c:	68f9      	ldr	r1, [r7, #12]
 810778e:	f000 f836 	bl	81077fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8107792:	f107 031c 	add.w	r3, r7, #28
 8107796:	4618      	mov	r0, r3
 8107798:	f000 f8ea 	bl	8107970 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 810779c:	4603      	mov	r3, r0
 810779e:	f107 0014 	add.w	r0, r7, #20
 81077a2:	68ba      	ldr	r2, [r7, #8]
 81077a4:	68f9      	ldr	r1, [r7, #12]
 81077a6:	f000 fa7b 	bl	8107ca0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 81077aa:	69bb      	ldr	r3, [r7, #24]
 81077ac:	2b00      	cmp	r3, #0
 81077ae:	d009      	beq.n	81077c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	  return __z._M_insert(__res);
 81077b0:	f107 001c 	add.w	r0, r7, #28
 81077b4:	f107 0314 	add.w	r3, r7, #20
 81077b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 81077bc:	f000 f8e6 	bl	810798c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 81077c0:	4604      	mov	r4, r0
 81077c2:	e007      	b.n	81077d4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRS1_RS5_EEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x6c>
	return iterator(__res.first);
 81077c4:	697a      	ldr	r2, [r7, #20]
 81077c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81077ca:	4611      	mov	r1, r2
 81077cc:	4618      	mov	r0, r3
 81077ce:	f000 f8f6 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81077d2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 81077d4:	f107 031c 	add.w	r3, r7, #28
 81077d8:	4618      	mov	r0, r3
 81077da:	f000 f82f 	bl	810783c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 81077de:	4623      	mov	r3, r4
 81077e0:	4618      	mov	r0, r3
 81077e2:	372c      	adds	r7, #44	@ 0x2c
 81077e4:	46bd      	mov	sp, r7
 81077e6:	bd90      	pop	{r4, r7, pc}

081077e8 <_ZSt7forwardIRSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81077e8:	b480      	push	{r7}
 81077ea:	b083      	sub	sp, #12
 81077ec:	af00      	add	r7, sp, #0
 81077ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81077f0:	687b      	ldr	r3, [r7, #4]
 81077f2:	4618      	mov	r0, r3
 81077f4:	370c      	adds	r7, #12
 81077f6:	46bd      	mov	sp, r7
 81077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077fc:	4770      	bx	lr

081077fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 81077fe:	b590      	push	{r4, r7, lr}
 8107800:	b085      	sub	sp, #20
 8107802:	af00      	add	r7, sp, #0
 8107804:	60f8      	str	r0, [r7, #12]
 8107806:	60b9      	str	r1, [r7, #8]
 8107808:	607a      	str	r2, [r7, #4]
 810780a:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 810780c:	68fb      	ldr	r3, [r7, #12]
 810780e:	68ba      	ldr	r2, [r7, #8]
 8107810:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8107812:	6878      	ldr	r0, [r7, #4]
 8107814:	f7ff fc55 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8107818:	4604      	mov	r4, r0
 810781a:	6838      	ldr	r0, [r7, #0]
 810781c:	f7ff fc5c 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8107820:	4603      	mov	r3, r0
 8107822:	461a      	mov	r2, r3
 8107824:	4621      	mov	r1, r4
 8107826:	68b8      	ldr	r0, [r7, #8]
 8107828:	f000 fbdc 	bl	8107fe4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 810782c:	4602      	mov	r2, r0
 810782e:	68fb      	ldr	r3, [r7, #12]
 8107830:	605a      	str	r2, [r3, #4]
	  { }
 8107832:	68fb      	ldr	r3, [r7, #12]
 8107834:	4618      	mov	r0, r3
 8107836:	3714      	adds	r7, #20
 8107838:	46bd      	mov	sp, r7
 810783a:	bd90      	pop	{r4, r7, pc}

0810783c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 810783c:	b580      	push	{r7, lr}
 810783e:	b082      	sub	sp, #8
 8107840:	af00      	add	r7, sp, #0
 8107842:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	685b      	ldr	r3, [r3, #4]
 8107848:	2b00      	cmp	r3, #0
 810784a:	d007      	beq.n	810785c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 810784c:	687b      	ldr	r3, [r7, #4]
 810784e:	681a      	ldr	r2, [r3, #0]
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	685b      	ldr	r3, [r3, #4]
 8107854:	4619      	mov	r1, r3
 8107856:	4610      	mov	r0, r2
 8107858:	f7ff ff39 	bl	81076ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 810785c:	687b      	ldr	r3, [r7, #4]
 810785e:	4618      	mov	r0, r3
 8107860:	3708      	adds	r7, #8
 8107862:	46bd      	mov	sp, r7
 8107864:	bd80      	pop	{r7, pc}

08107866 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8107866:	b590      	push	{r4, r7, lr}
 8107868:	b08b      	sub	sp, #44	@ 0x2c
 810786a:	af00      	add	r7, sp, #0
 810786c:	60f8      	str	r0, [r7, #12]
 810786e:	60b9      	str	r1, [r7, #8]
 8107870:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8107872:	68b8      	ldr	r0, [r7, #8]
 8107874:	f7ff fbb3 	bl	8106fde <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8107878:	4603      	mov	r3, r0
 810787a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 810787c:	68b8      	ldr	r0, [r7, #8]
 810787e:	f000 f973 	bl	8107b68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8107882:	4603      	mov	r3, r0
 8107884:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8107886:	2301      	movs	r3, #1
 8107888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 810788c:	e01f      	b.n	81078ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 810788e:	69bb      	ldr	r3, [r7, #24]
 8107890:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8107892:	68bc      	ldr	r4, [r7, #8]
 8107894:	69bb      	ldr	r3, [r7, #24]
 8107896:	4618      	mov	r0, r3
 8107898:	f000 fbc0 	bl	810801c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810789c:	4603      	mov	r3, r0
 810789e:	461a      	mov	r2, r3
 81078a0:	6879      	ldr	r1, [r7, #4]
 81078a2:	4620      	mov	r0, r4
 81078a4:	f7ff fbf8 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81078a8:	4603      	mov	r3, r0
 81078aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 81078ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81078b2:	2b00      	cmp	r3, #0
 81078b4:	d005      	beq.n	81078c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 81078b6:	69bb      	ldr	r3, [r7, #24]
 81078b8:	4618      	mov	r0, r3
 81078ba:	f7ff fefc 	bl	81076b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81078be:	4603      	mov	r3, r0
 81078c0:	e004      	b.n	81078cc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 81078c2:	69bb      	ldr	r3, [r7, #24]
 81078c4:	4618      	mov	r0, r3
 81078c6:	f7ff feea 	bl	810769e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81078ca:	4603      	mov	r3, r0
 81078cc:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 81078ce:	69bb      	ldr	r3, [r7, #24]
 81078d0:	2b00      	cmp	r3, #0
 81078d2:	d1dc      	bne.n	810788e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 81078d4:	697a      	ldr	r2, [r7, #20]
 81078d6:	f107 0310 	add.w	r3, r7, #16
 81078da:	4611      	mov	r1, r2
 81078dc:	4618      	mov	r0, r3
 81078de:	f000 f86e 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 81078e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81078e6:	2b00      	cmp	r3, #0
 81078e8:	d01d      	beq.n	8107926 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 81078ea:	68b8      	ldr	r0, [r7, #8]
 81078ec:	f000 fba9 	bl	8108042 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 81078f0:	4603      	mov	r3, r0
 81078f2:	61fb      	str	r3, [r7, #28]
 81078f4:	f107 021c 	add.w	r2, r7, #28
 81078f8:	f107 0310 	add.w	r3, r7, #16
 81078fc:	4611      	mov	r1, r2
 81078fe:	4618      	mov	r0, r3
 8107900:	f7ff fa86 	bl	8106e10 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8107904:	4603      	mov	r3, r0
 8107906:	2b00      	cmp	r3, #0
 8107908:	d008      	beq.n	810791c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 810790a:	f107 0214 	add.w	r2, r7, #20
 810790e:	f107 0318 	add.w	r3, r7, #24
 8107912:	4619      	mov	r1, r3
 8107914:	68f8      	ldr	r0, [r7, #12]
 8107916:	f000 fba5 	bl	8108064 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>
 810791a:	e025      	b.n	8107968 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 810791c:	f107 0310 	add.w	r3, r7, #16
 8107920:	4618      	mov	r0, r3
 8107922:	f000 fbb8 	bl	8108096 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8107926:	68bc      	ldr	r4, [r7, #8]
 8107928:	693b      	ldr	r3, [r7, #16]
 810792a:	4618      	mov	r0, r3
 810792c:	f000 f959 	bl	8107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107930:	4603      	mov	r3, r0
 8107932:	687a      	ldr	r2, [r7, #4]
 8107934:	4619      	mov	r1, r3
 8107936:	4620      	mov	r0, r4
 8107938:	f7ff fbae 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810793c:	4603      	mov	r3, r0
 810793e:	2b00      	cmp	r3, #0
 8107940:	d008      	beq.n	8107954 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8107942:	f107 0214 	add.w	r2, r7, #20
 8107946:	f107 0318 	add.w	r3, r7, #24
 810794a:	4619      	mov	r1, r3
 810794c:	68f8      	ldr	r0, [r7, #12]
 810794e:	f000 fb89 	bl	8108064 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>
 8107952:	e009      	b.n	8107968 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8107954:	2300      	movs	r3, #0
 8107956:	623b      	str	r3, [r7, #32]
 8107958:	f107 0220 	add.w	r2, r7, #32
 810795c:	f107 0310 	add.w	r3, r7, #16
 8107960:	4619      	mov	r1, r3
 8107962:	68f8      	ldr	r0, [r7, #12]
 8107964:	f000 fba8 	bl	81080b8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8107968:	68f8      	ldr	r0, [r7, #12]
 810796a:	372c      	adds	r7, #44	@ 0x2c
 810796c:	46bd      	mov	sp, r7
 810796e:	bd90      	pop	{r4, r7, pc}

08107970 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8107970:	b580      	push	{r7, lr}
 8107972:	b082      	sub	sp, #8
 8107974:	af00      	add	r7, sp, #0
 8107976:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	685b      	ldr	r3, [r3, #4]
 810797c:	4618      	mov	r0, r3
 810797e:	f000 fb4d 	bl	810801c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8107982:	4603      	mov	r3, r0
 8107984:	4618      	mov	r0, r3
 8107986:	3708      	adds	r7, #8
 8107988:	46bd      	mov	sp, r7
 810798a:	bd80      	pop	{r7, pc}

0810798c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 810798c:	b580      	push	{r7, lr}
 810798e:	b086      	sub	sp, #24
 8107990:	af00      	add	r7, sp, #0
 8107992:	60f8      	str	r0, [r7, #12]
 8107994:	1d3b      	adds	r3, r7, #4
 8107996:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 810799a:	68fb      	ldr	r3, [r7, #12]
 810799c:	6818      	ldr	r0, [r3, #0]
 810799e:	6879      	ldr	r1, [r7, #4]
 81079a0:	68ba      	ldr	r2, [r7, #8]
 81079a2:	68fb      	ldr	r3, [r7, #12]
 81079a4:	685b      	ldr	r3, [r3, #4]
 81079a6:	f000 fb9c 	bl	81080e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 81079aa:	4603      	mov	r3, r0
 81079ac:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 81079ae:	68fb      	ldr	r3, [r7, #12]
 81079b0:	2200      	movs	r2, #0
 81079b2:	605a      	str	r2, [r3, #4]
	  return __it;
 81079b4:	697b      	ldr	r3, [r7, #20]
	}
 81079b6:	4618      	mov	r0, r3
 81079b8:	3718      	adds	r7, #24
 81079ba:	46bd      	mov	sp, r7
 81079bc:	bd80      	pop	{r7, pc}

081079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81079be:	b480      	push	{r7}
 81079c0:	b083      	sub	sp, #12
 81079c2:	af00      	add	r7, sp, #0
 81079c4:	6078      	str	r0, [r7, #4]
 81079c6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 81079c8:	687b      	ldr	r3, [r7, #4]
 81079ca:	683a      	ldr	r2, [r7, #0]
 81079cc:	601a      	str	r2, [r3, #0]
 81079ce:	687b      	ldr	r3, [r7, #4]
 81079d0:	4618      	mov	r0, r3
 81079d2:	370c      	adds	r7, #12
 81079d4:	46bd      	mov	sp, r7
 81079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079da:	4770      	bx	lr

081079dc <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 81079dc:	b480      	push	{r7}
 81079de:	b083      	sub	sp, #12
 81079e0:	af00      	add	r7, sp, #0
 81079e2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 81079e4:	687b      	ldr	r3, [r7, #4]
 81079e6:	695b      	ldr	r3, [r3, #20]
 81079e8:	4618      	mov	r0, r3
 81079ea:	370c      	adds	r7, #12
 81079ec:	46bd      	mov	sp, r7
 81079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079f2:	4770      	bx	lr

081079f4 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 81079f4:	b580      	push	{r7, lr}
 81079f6:	b082      	sub	sp, #8
 81079f8:	af00      	add	r7, sp, #0
 81079fa:	6078      	str	r0, [r7, #4]
 81079fc:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
 81079fe:	f7fb fd8f 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 8107a02:	4603      	mov	r3, r0
 8107a04:	2b00      	cmp	r3, #0
 8107a06:	d004      	beq.n	8107a12 <_ZSt8_DestroyIP8SMessageEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8107a08:	6839      	ldr	r1, [r7, #0]
 8107a0a:	6878      	ldr	r0, [r7, #4]
 8107a0c:	f000 fba6 	bl	810815c <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_>
 8107a10:	e003      	b.n	8107a1a <_ZSt8_DestroyIP8SMessageEvT_S2_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8107a12:	6839      	ldr	r1, [r7, #0]
 8107a14:	6878      	ldr	r0, [r7, #4]
 8107a16:	f000 fbba 	bl	810818e <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8107a1a:	3708      	adds	r7, #8
 8107a1c:	46bd      	mov	sp, r7
 8107a1e:	bd80      	pop	{r7, pc}

08107a20 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8107a20:	b580      	push	{r7, lr}
 8107a22:	b088      	sub	sp, #32
 8107a24:	af00      	add	r7, sp, #0
 8107a26:	60f8      	str	r0, [r7, #12]
 8107a28:	60b9      	str	r1, [r7, #8]
 8107a2a:	607a      	str	r2, [r7, #4]
 8107a2c:	68fb      	ldr	r3, [r7, #12]
 8107a2e:	61fb      	str	r3, [r7, #28]
 8107a30:	68bb      	ldr	r3, [r7, #8]
 8107a32:	61bb      	str	r3, [r7, #24]
 8107a34:	687b      	ldr	r3, [r7, #4]
 8107a36:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8107a38:	f7fb fd72 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 8107a3c:	4603      	mov	r3, r0
 8107a3e:	2b00      	cmp	r3, #0
 8107a40:	d003      	beq.n	8107a4a <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8107a42:	69b8      	ldr	r0, [r7, #24]
 8107a44:	f01b fd96 	bl	8123574 <_ZdlPv>
	    return;
 8107a48:	e005      	b.n	8107a56 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8107a4a:	697a      	ldr	r2, [r7, #20]
 8107a4c:	69b9      	ldr	r1, [r7, #24]
 8107a4e:	69f8      	ldr	r0, [r7, #28]
 8107a50:	f000 fdb4 	bl	81085bc <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
      { __a.deallocate(__p, __n); }
 8107a54:	bf00      	nop
 8107a56:	bf00      	nop
 8107a58:	3720      	adds	r7, #32
 8107a5a:	46bd      	mov	sp, r7
 8107a5c:	bd80      	pop	{r7, pc}

08107a5e <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107a5e:	b480      	push	{r7}
 8107a60:	b083      	sub	sp, #12
 8107a62:	af00      	add	r7, sp, #0
 8107a64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107a66:	687b      	ldr	r3, [r7, #4]
 8107a68:	4618      	mov	r0, r3
 8107a6a:	370c      	adds	r7, #12
 8107a6c:	46bd      	mov	sp, r7
 8107a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a72:	4770      	bx	lr

08107a74 <_ZSt12construct_atI8SMessageJRKS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8107a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8107a76:	b083      	sub	sp, #12
 8107a78:	af00      	add	r7, sp, #0
 8107a7a:	6078      	str	r0, [r7, #4]
 8107a7c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8107a7e:	687b      	ldr	r3, [r7, #4]
 8107a80:	4619      	mov	r1, r3
 8107a82:	201c      	movs	r0, #28
 8107a84:	f7f9 fbf8 	bl	8101278 <_ZnwjPv>
 8107a88:	4606      	mov	r6, r0
 8107a8a:	6838      	ldr	r0, [r7, #0]
 8107a8c:	f7ff ffe7 	bl	8107a5e <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8107a90:	4603      	mov	r3, r0
 8107a92:	4634      	mov	r4, r6
 8107a94:	461d      	mov	r5, r3
 8107a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8107a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8107a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8107a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8107aa2:	4633      	mov	r3, r6
 8107aa4:	4618      	mov	r0, r3
 8107aa6:	370c      	adds	r7, #12
 8107aa8:	46bd      	mov	sp, r7
 8107aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08107aac <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8107aac:	b480      	push	{r7}
 8107aae:	b083      	sub	sp, #12
 8107ab0:	af00      	add	r7, sp, #0
 8107ab2:	6078      	str	r0, [r7, #4]
 8107ab4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8107ab6:	683b      	ldr	r3, [r7, #0]
 8107ab8:	681a      	ldr	r2, [r3, #0]
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	601a      	str	r2, [r3, #0]
 8107abe:	687b      	ldr	r3, [r7, #4]
 8107ac0:	4618      	mov	r0, r3
 8107ac2:	370c      	adds	r7, #12
 8107ac4:	46bd      	mov	sp, r7
 8107ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107aca:	4770      	bx	lr

08107acc <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8107acc:	b580      	push	{r7, lr}
 8107ace:	b082      	sub	sp, #8
 8107ad0:	af00      	add	r7, sp, #0
 8107ad2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8107ad4:	687b      	ldr	r3, [r7, #4]
 8107ad6:	4618      	mov	r0, r3
 8107ad8:	f000 fb8e 	bl	81081f8 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8107adc:	4603      	mov	r3, r0
 8107ade:	4618      	mov	r0, r3
 8107ae0:	f000 fb6e 	bl	81081c0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 8107ae4:	4603      	mov	r3, r0
 8107ae6:	4618      	mov	r0, r3
 8107ae8:	3708      	adds	r7, #8
 8107aea:	46bd      	mov	sp, r7
 8107aec:	bd80      	pop	{r7, pc}

08107aee <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8107aee:	b480      	push	{r7}
 8107af0:	b083      	sub	sp, #12
 8107af2:	af00      	add	r7, sp, #0
 8107af4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	4618      	mov	r0, r3
 8107afa:	370c      	adds	r7, #12
 8107afc:	46bd      	mov	sp, r7
 8107afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b02:	4770      	bx	lr

08107b04 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8107b04:	b580      	push	{r7, lr}
 8107b06:	b082      	sub	sp, #8
 8107b08:	af00      	add	r7, sp, #0
 8107b0a:	6078      	str	r0, [r7, #4]
 8107b0c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8107b0e:	683b      	ldr	r3, [r7, #0]
 8107b10:	2b00      	cmp	r3, #0
 8107b12:	d006      	beq.n	8107b22 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	6839      	ldr	r1, [r7, #0]
 8107b18:	4618      	mov	r0, r3
 8107b1a:	f000 fb78 	bl	810820e <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 8107b1e:	4603      	mov	r3, r0
 8107b20:	e000      	b.n	8107b24 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 8107b22:	2300      	movs	r3, #0
      }
 8107b24:	4618      	mov	r0, r3
 8107b26:	3708      	adds	r7, #8
 8107b28:	46bd      	mov	sp, r7
 8107b2a:	bd80      	pop	{r7, pc}

08107b2c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8107b2c:	b580      	push	{r7, lr}
 8107b2e:	b084      	sub	sp, #16
 8107b30:	af00      	add	r7, sp, #0
 8107b32:	60f8      	str	r0, [r7, #12]
 8107b34:	60b9      	str	r1, [r7, #8]
 8107b36:	607a      	str	r2, [r7, #4]
 8107b38:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8107b3a:	683b      	ldr	r3, [r7, #0]
 8107b3c:	687a      	ldr	r2, [r7, #4]
 8107b3e:	68b9      	ldr	r1, [r7, #8]
 8107b40:	68f8      	ldr	r0, [r7, #12]
 8107b42:	f000 fb9c 	bl	810827e <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8107b46:	4603      	mov	r3, r0
      }
 8107b48:	4618      	mov	r0, r3
 8107b4a:	3710      	adds	r7, #16
 8107b4c:	46bd      	mov	sp, r7
 8107b4e:	bd80      	pop	{r7, pc}

08107b50 <_ZNSt16allocator_traitsISaI8SMessageEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8107b50:	b580      	push	{r7, lr}
 8107b52:	b082      	sub	sp, #8
 8107b54:	af00      	add	r7, sp, #0
 8107b56:	6078      	str	r0, [r7, #4]
 8107b58:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8107b5a:	6838      	ldr	r0, [r7, #0]
 8107b5c:	f000 fbac 	bl	81082b8 <_ZSt10destroy_atI8SMessageEvPT_>
	}
 8107b60:	bf00      	nop
 8107b62:	3708      	adds	r7, #8
 8107b64:	46bd      	mov	sp, r7
 8107b66:	bd80      	pop	{r7, pc}

08107b68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8107b68:	b480      	push	{r7}
 8107b6a:	b083      	sub	sp, #12
 8107b6c:	af00      	add	r7, sp, #0
 8107b6e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	3304      	adds	r3, #4
 8107b74:	4618      	mov	r0, r3
 8107b76:	370c      	adds	r7, #12
 8107b78:	46bd      	mov	sp, r7
 8107b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b7e:	4770      	bx	lr

08107b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8107b80:	b590      	push	{r4, r7, lr}
 8107b82:	b087      	sub	sp, #28
 8107b84:	af00      	add	r7, sp, #0
 8107b86:	60f8      	str	r0, [r7, #12]
 8107b88:	60b9      	str	r1, [r7, #8]
 8107b8a:	607a      	str	r2, [r7, #4]
 8107b8c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8107b8e:	e01a      	b.n	8107bc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8107b90:	68fc      	ldr	r4, [r7, #12]
 8107b92:	68b8      	ldr	r0, [r7, #8]
 8107b94:	f000 fa42 	bl	810801c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8107b98:	4603      	mov	r3, r0
 8107b9a:	683a      	ldr	r2, [r7, #0]
 8107b9c:	4619      	mov	r1, r3
 8107b9e:	4620      	mov	r0, r4
 8107ba0:	f7ff fa7a 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8107ba4:	4603      	mov	r3, r0
 8107ba6:	f083 0301 	eor.w	r3, r3, #1
 8107baa:	b2db      	uxtb	r3, r3
 8107bac:	2b00      	cmp	r3, #0
 8107bae:	d006      	beq.n	8107bbe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8107bb0:	68bb      	ldr	r3, [r7, #8]
 8107bb2:	607b      	str	r3, [r7, #4]
 8107bb4:	68b8      	ldr	r0, [r7, #8]
 8107bb6:	f7ff fd7e 	bl	81076b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8107bba:	60b8      	str	r0, [r7, #8]
 8107bbc:	e003      	b.n	8107bc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 8107bbe:	68b8      	ldr	r0, [r7, #8]
 8107bc0:	f7ff fd6d 	bl	810769e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8107bc4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8107bc6:	68bb      	ldr	r3, [r7, #8]
 8107bc8:	2b00      	cmp	r3, #0
 8107bca:	d1e1      	bne.n	8107b90 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 8107bcc:	f107 0314 	add.w	r3, r7, #20
 8107bd0:	6879      	ldr	r1, [r7, #4]
 8107bd2:	4618      	mov	r0, r3
 8107bd4:	f7ff fef3 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8107bd8:	697b      	ldr	r3, [r7, #20]
    }
 8107bda:	4618      	mov	r0, r3
 8107bdc:	371c      	adds	r7, #28
 8107bde:	46bd      	mov	sp, r7
 8107be0:	bd90      	pop	{r4, r7, pc}

08107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8107be2:	b580      	push	{r7, lr}
 8107be4:	b082      	sub	sp, #8
 8107be6:	af00      	add	r7, sp, #0
 8107be8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8107bea:	6878      	ldr	r0, [r7, #4]
 8107bec:	f000 fa16 	bl	810801c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8107bf0:	4603      	mov	r3, r0
 8107bf2:	4618      	mov	r0, r3
 8107bf4:	3708      	adds	r7, #8
 8107bf6:	46bd      	mov	sp, r7
 8107bf8:	bd80      	pop	{r7, pc}

08107bfa <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 8107bfa:	b580      	push	{r7, lr}
 8107bfc:	b082      	sub	sp, #8
 8107bfe:	af00      	add	r7, sp, #0
 8107c00:	6078      	str	r0, [r7, #4]
 8107c02:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	6839      	ldr	r1, [r7, #0]
 8107c08:	4618      	mov	r0, r3
 8107c0a:	f000 fb5f 	bl	81082cc <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 8107c0e:	687b      	ldr	r3, [r7, #4]
 8107c10:	4618      	mov	r0, r3
 8107c12:	3708      	adds	r7, #8
 8107c14:	46bd      	mov	sp, r7
 8107c16:	bd80      	pop	{r7, pc}

08107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107c18:	b480      	push	{r7}
 8107c1a:	b083      	sub	sp, #12
 8107c1c:	af00      	add	r7, sp, #0
 8107c1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	4618      	mov	r0, r3
 8107c24:	370c      	adds	r7, #12
 8107c26:	46bd      	mov	sp, r7
 8107c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c2c:	4770      	bx	lr

08107c2e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107c2e:	b480      	push	{r7}
 8107c30:	b083      	sub	sp, #12
 8107c32:	af00      	add	r7, sp, #0
 8107c34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	4618      	mov	r0, r3
 8107c3a:	370c      	adds	r7, #12
 8107c3c:	46bd      	mov	sp, r7
 8107c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c42:	4770      	bx	lr

08107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107c44:	b480      	push	{r7}
 8107c46:	b083      	sub	sp, #12
 8107c48:	af00      	add	r7, sp, #0
 8107c4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107c4c:	687b      	ldr	r3, [r7, #4]
 8107c4e:	4618      	mov	r0, r3
 8107c50:	370c      	adds	r7, #12
 8107c52:	46bd      	mov	sp, r7
 8107c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c58:	4770      	bx	lr

08107c5a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8107c5a:	b5b0      	push	{r4, r5, r7, lr}
 8107c5c:	b084      	sub	sp, #16
 8107c5e:	af00      	add	r7, sp, #0
 8107c60:	60f8      	str	r0, [r7, #12]
 8107c62:	60b9      	str	r1, [r7, #8]
 8107c64:	607a      	str	r2, [r7, #4]
 8107c66:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8107c68:	68fb      	ldr	r3, [r7, #12]
 8107c6a:	68ba      	ldr	r2, [r7, #8]
 8107c6c:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8107c6e:	6878      	ldr	r0, [r7, #4]
 8107c70:	f7ff ffd2 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8107c74:	4604      	mov	r4, r0
 8107c76:	6838      	ldr	r0, [r7, #0]
 8107c78:	f7ff ffd9 	bl	8107c2e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8107c7c:	4605      	mov	r5, r0
 8107c7e:	6a38      	ldr	r0, [r7, #32]
 8107c80:	f7ff ffe0 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107c84:	4603      	mov	r3, r0
 8107c86:	462a      	mov	r2, r5
 8107c88:	4621      	mov	r1, r4
 8107c8a:	68b8      	ldr	r0, [r7, #8]
 8107c8c:	f000 fb2d 	bl	81082ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8107c90:	4602      	mov	r2, r0
 8107c92:	68fb      	ldr	r3, [r7, #12]
 8107c94:	605a      	str	r2, [r3, #4]
	  { }
 8107c96:	68fb      	ldr	r3, [r7, #12]
 8107c98:	4618      	mov	r0, r3
 8107c9a:	3710      	adds	r7, #16
 8107c9c:	46bd      	mov	sp, r7
 8107c9e:	bdb0      	pop	{r4, r5, r7, pc}

08107ca0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8107ca0:	b590      	push	{r4, r7, lr}
 8107ca2:	b08d      	sub	sp, #52	@ 0x34
 8107ca4:	af00      	add	r7, sp, #0
 8107ca6:	60f8      	str	r0, [r7, #12]
 8107ca8:	60b9      	str	r1, [r7, #8]
 8107caa:	607a      	str	r2, [r7, #4]
 8107cac:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8107cae:	1d3b      	adds	r3, r7, #4
 8107cb0:	4618      	mov	r0, r3
 8107cb2:	f000 fb3d 	bl	8108330 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 8107cb6:	4603      	mov	r3, r0
 8107cb8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8107cba:	69bc      	ldr	r4, [r7, #24]
 8107cbc:	68b8      	ldr	r0, [r7, #8]
 8107cbe:	f7ff ff53 	bl	8107b68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8107cc2:	4603      	mov	r3, r0
 8107cc4:	429c      	cmp	r4, r3
 8107cc6:	bf0c      	ite	eq
 8107cc8:	2301      	moveq	r3, #1
 8107cca:	2300      	movne	r3, #0
 8107ccc:	b2db      	uxtb	r3, r3
 8107cce:	2b00      	cmp	r3, #0
 8107cd0:	d030      	beq.n	8107d34 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8107cd2:	68b8      	ldr	r0, [r7, #8]
 8107cd4:	f7ff fe82 	bl	81079dc <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8107cd8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8107cda:	2b00      	cmp	r3, #0
 8107cdc:	d013      	beq.n	8107d06 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8107cde:	68bc      	ldr	r4, [r7, #8]
 8107ce0:	68b8      	ldr	r0, [r7, #8]
 8107ce2:	f000 fb36 	bl	8108352 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8107ce6:	4603      	mov	r3, r0
 8107ce8:	681b      	ldr	r3, [r3, #0]
 8107cea:	4618      	mov	r0, r3
 8107cec:	f7ff ff79 	bl	8107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107cf0:	4603      	mov	r3, r0
 8107cf2:	683a      	ldr	r2, [r7, #0]
 8107cf4:	4619      	mov	r1, r3
 8107cf6:	4620      	mov	r0, r4
 8107cf8:	f7ff f9ce 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8107cfc:	4603      	mov	r3, r0
 8107cfe:	2b00      	cmp	r3, #0
 8107d00:	d001      	beq.n	8107d06 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8107d02:	2301      	movs	r3, #1
 8107d04:	e000      	b.n	8107d08 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8107d06:	2300      	movs	r3, #0
	  if (size() > 0
 8107d08:	2b00      	cmp	r3, #0
 8107d0a:	d00c      	beq.n	8107d26 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8107d0c:	2300      	movs	r3, #0
 8107d0e:	61fb      	str	r3, [r7, #28]
 8107d10:	68b8      	ldr	r0, [r7, #8]
 8107d12:	f000 fb1e 	bl	8108352 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8107d16:	4602      	mov	r2, r0
 8107d18:	f107 031c 	add.w	r3, r7, #28
 8107d1c:	4619      	mov	r1, r3
 8107d1e:	68f8      	ldr	r0, [r7, #12]
 8107d20:	f000 f9ca 	bl	81080b8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8107d24:	e0db      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8107d26:	68fb      	ldr	r3, [r7, #12]
 8107d28:	683a      	ldr	r2, [r7, #0]
 8107d2a:	68b9      	ldr	r1, [r7, #8]
 8107d2c:	4618      	mov	r0, r3
 8107d2e:	f7ff fd9a 	bl	8107866 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8107d32:	e0d4      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8107d34:	68bc      	ldr	r4, [r7, #8]
 8107d36:	69bb      	ldr	r3, [r7, #24]
 8107d38:	4618      	mov	r0, r3
 8107d3a:	f7ff ff52 	bl	8107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107d3e:	4603      	mov	r3, r0
 8107d40:	461a      	mov	r2, r3
 8107d42:	6839      	ldr	r1, [r7, #0]
 8107d44:	4620      	mov	r0, r4
 8107d46:	f7ff f9a7 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8107d4a:	4603      	mov	r3, r0
 8107d4c:	2b00      	cmp	r3, #0
 8107d4e:	d057      	beq.n	8107e00 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8107d50:	69bb      	ldr	r3, [r7, #24]
 8107d52:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8107d54:	69bc      	ldr	r4, [r7, #24]
 8107d56:	68b8      	ldr	r0, [r7, #8]
 8107d58:	f000 fb07 	bl	810836a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8107d5c:	4603      	mov	r3, r0
 8107d5e:	681b      	ldr	r3, [r3, #0]
 8107d60:	429c      	cmp	r4, r3
 8107d62:	bf0c      	ite	eq
 8107d64:	2301      	moveq	r3, #1
 8107d66:	2300      	movne	r3, #0
 8107d68:	b2db      	uxtb	r3, r3
 8107d6a:	2b00      	cmp	r3, #0
 8107d6c:	d00d      	beq.n	8107d8a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8107d6e:	68b8      	ldr	r0, [r7, #8]
 8107d70:	f000 fafb 	bl	810836a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8107d74:	4604      	mov	r4, r0
 8107d76:	68b8      	ldr	r0, [r7, #8]
 8107d78:	f000 faf7 	bl	810836a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8107d7c:	4603      	mov	r3, r0
 8107d7e:	461a      	mov	r2, r3
 8107d80:	4621      	mov	r1, r4
 8107d82:	68f8      	ldr	r0, [r7, #12]
 8107d84:	f000 fafd 	bl	8108382 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 8107d88:	e0a9      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8107d8a:	68bc      	ldr	r4, [r7, #8]
 8107d8c:	f107 0314 	add.w	r3, r7, #20
 8107d90:	4618      	mov	r0, r3
 8107d92:	f000 f980 	bl	8108096 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 8107d96:	4603      	mov	r3, r0
 8107d98:	681b      	ldr	r3, [r3, #0]
 8107d9a:	4618      	mov	r0, r3
 8107d9c:	f7ff ff21 	bl	8107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107da0:	4603      	mov	r3, r0
 8107da2:	683a      	ldr	r2, [r7, #0]
 8107da4:	4619      	mov	r1, r3
 8107da6:	4620      	mov	r0, r4
 8107da8:	f7ff f976 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8107dac:	4603      	mov	r3, r0
 8107dae:	2b00      	cmp	r3, #0
 8107db0:	d01f      	beq.n	8107df2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8107db2:	697b      	ldr	r3, [r7, #20]
 8107db4:	4618      	mov	r0, r3
 8107db6:	f7ff fc72 	bl	810769e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8107dba:	4603      	mov	r3, r0
 8107dbc:	2b00      	cmp	r3, #0
 8107dbe:	bf0c      	ite	eq
 8107dc0:	2301      	moveq	r3, #1
 8107dc2:	2300      	movne	r3, #0
 8107dc4:	b2db      	uxtb	r3, r3
 8107dc6:	2b00      	cmp	r3, #0
 8107dc8:	d00a      	beq.n	8107de0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8107dca:	2300      	movs	r3, #0
 8107dcc:	623b      	str	r3, [r7, #32]
 8107dce:	f107 0214 	add.w	r2, r7, #20
 8107dd2:	f107 0320 	add.w	r3, r7, #32
 8107dd6:	4619      	mov	r1, r3
 8107dd8:	68f8      	ldr	r0, [r7, #12]
 8107dda:	f000 f96d 	bl	81080b8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8107dde:	e07e      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8107de0:	f107 0218 	add.w	r2, r7, #24
 8107de4:	f107 0318 	add.w	r3, r7, #24
 8107de8:	4619      	mov	r1, r3
 8107dea:	68f8      	ldr	r0, [r7, #12]
 8107dec:	f000 fac9 	bl	8108382 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 8107df0:	e075      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8107df2:	68fb      	ldr	r3, [r7, #12]
 8107df4:	683a      	ldr	r2, [r7, #0]
 8107df6:	68b9      	ldr	r1, [r7, #8]
 8107df8:	4618      	mov	r0, r3
 8107dfa:	f7ff fd34 	bl	8107866 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8107dfe:	e06e      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8107e00:	68bc      	ldr	r4, [r7, #8]
 8107e02:	69bb      	ldr	r3, [r7, #24]
 8107e04:	4618      	mov	r0, r3
 8107e06:	f7ff feec 	bl	8107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107e0a:	4603      	mov	r3, r0
 8107e0c:	683a      	ldr	r2, [r7, #0]
 8107e0e:	4619      	mov	r1, r3
 8107e10:	4620      	mov	r0, r4
 8107e12:	f7ff f941 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8107e16:	4603      	mov	r3, r0
 8107e18:	2b00      	cmp	r3, #0
 8107e1a:	d056      	beq.n	8107eca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8107e1c:	69bb      	ldr	r3, [r7, #24]
 8107e1e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8107e20:	69bc      	ldr	r4, [r7, #24]
 8107e22:	68b8      	ldr	r0, [r7, #8]
 8107e24:	f000 fa95 	bl	8108352 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8107e28:	4603      	mov	r3, r0
 8107e2a:	681b      	ldr	r3, [r3, #0]
 8107e2c:	429c      	cmp	r4, r3
 8107e2e:	bf0c      	ite	eq
 8107e30:	2301      	moveq	r3, #1
 8107e32:	2300      	movne	r3, #0
 8107e34:	b2db      	uxtb	r3, r3
 8107e36:	2b00      	cmp	r3, #0
 8107e38:	d00c      	beq.n	8107e54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8107e3a:	2300      	movs	r3, #0
 8107e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8107e3e:	68b8      	ldr	r0, [r7, #8]
 8107e40:	f000 fa87 	bl	8108352 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8107e44:	4602      	mov	r2, r0
 8107e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107e4a:	4619      	mov	r1, r3
 8107e4c:	68f8      	ldr	r0, [r7, #12]
 8107e4e:	f000 f933 	bl	81080b8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8107e52:	e044      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8107e54:	68bc      	ldr	r4, [r7, #8]
 8107e56:	f107 0310 	add.w	r3, r7, #16
 8107e5a:	4618      	mov	r0, r3
 8107e5c:	f000 faaa 	bl	81083b4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 8107e60:	4603      	mov	r3, r0
 8107e62:	681b      	ldr	r3, [r3, #0]
 8107e64:	4618      	mov	r0, r3
 8107e66:	f7ff febc 	bl	8107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8107e6a:	4603      	mov	r3, r0
 8107e6c:	461a      	mov	r2, r3
 8107e6e:	6839      	ldr	r1, [r7, #0]
 8107e70:	4620      	mov	r0, r4
 8107e72:	f7ff f911 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8107e76:	4603      	mov	r3, r0
 8107e78:	2b00      	cmp	r3, #0
 8107e7a:	d01f      	beq.n	8107ebc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8107e7c:	69bb      	ldr	r3, [r7, #24]
 8107e7e:	4618      	mov	r0, r3
 8107e80:	f7ff fc0d 	bl	810769e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8107e84:	4603      	mov	r3, r0
 8107e86:	2b00      	cmp	r3, #0
 8107e88:	bf0c      	ite	eq
 8107e8a:	2301      	moveq	r3, #1
 8107e8c:	2300      	movne	r3, #0
 8107e8e:	b2db      	uxtb	r3, r3
 8107e90:	2b00      	cmp	r3, #0
 8107e92:	d00a      	beq.n	8107eaa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8107e94:	2300      	movs	r3, #0
 8107e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8107e98:	f107 0218 	add.w	r2, r7, #24
 8107e9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8107ea0:	4619      	mov	r1, r3
 8107ea2:	68f8      	ldr	r0, [r7, #12]
 8107ea4:	f000 f908 	bl	81080b8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8107ea8:	e019      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8107eaa:	f107 0210 	add.w	r2, r7, #16
 8107eae:	f107 0310 	add.w	r3, r7, #16
 8107eb2:	4619      	mov	r1, r3
 8107eb4:	68f8      	ldr	r0, [r7, #12]
 8107eb6:	f000 fa64 	bl	8108382 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
 8107eba:	e010      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8107ebc:	68fb      	ldr	r3, [r7, #12]
 8107ebe:	683a      	ldr	r2, [r7, #0]
 8107ec0:	68b9      	ldr	r1, [r7, #8]
 8107ec2:	4618      	mov	r0, r3
 8107ec4:	f7ff fccf 	bl	8107866 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8107ec8:	e009      	b.n	8107ede <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8107eca:	2300      	movs	r3, #0
 8107ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107ece:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8107ed2:	f107 0318 	add.w	r3, r7, #24
 8107ed6:	4619      	mov	r1, r3
 8107ed8:	68f8      	ldr	r0, [r7, #12]
 8107eda:	f000 f8ed 	bl	81080b8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
    }
 8107ede:	68f8      	ldr	r0, [r7, #12]
 8107ee0:	3734      	adds	r7, #52	@ 0x34
 8107ee2:	46bd      	mov	sp, r7
 8107ee4:	bd90      	pop	{r4, r7, pc}

08107ee6 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107ee6:	b480      	push	{r7}
 8107ee8:	b083      	sub	sp, #12
 8107eea:	af00      	add	r7, sp, #0
 8107eec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	4618      	mov	r0, r3
 8107ef2:	370c      	adds	r7, #12
 8107ef4:	46bd      	mov	sp, r7
 8107ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107efa:	4770      	bx	lr

08107efc <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8107efc:	b590      	push	{r4, r7, lr}
 8107efe:	b083      	sub	sp, #12
 8107f00:	af00      	add	r7, sp, #0
 8107f02:	6078      	str	r0, [r7, #4]
 8107f04:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8107f06:	687c      	ldr	r4, [r7, #4]
 8107f08:	6838      	ldr	r0, [r7, #0]
 8107f0a:	f7ff ffec 	bl	8107ee6 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107f0e:	4603      	mov	r3, r0
 8107f10:	4619      	mov	r1, r3
 8107f12:	4620      	mov	r0, r4
 8107f14:	f000 fa5f 	bl	81083d6 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>
 8107f18:	687b      	ldr	r3, [r7, #4]
 8107f1a:	4618      	mov	r0, r3
 8107f1c:	370c      	adds	r7, #12
 8107f1e:	46bd      	mov	sp, r7
 8107f20:	bd90      	pop	{r4, r7, pc}

08107f22 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107f22:	b480      	push	{r7}
 8107f24:	b083      	sub	sp, #12
 8107f26:	af00      	add	r7, sp, #0
 8107f28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	4618      	mov	r0, r3
 8107f2e:	370c      	adds	r7, #12
 8107f30:	46bd      	mov	sp, r7
 8107f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f36:	4770      	bx	lr

08107f38 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8107f38:	b5b0      	push	{r4, r5, r7, lr}
 8107f3a:	b084      	sub	sp, #16
 8107f3c:	af00      	add	r7, sp, #0
 8107f3e:	60f8      	str	r0, [r7, #12]
 8107f40:	60b9      	str	r1, [r7, #8]
 8107f42:	607a      	str	r2, [r7, #4]
 8107f44:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8107f46:	68fb      	ldr	r3, [r7, #12]
 8107f48:	68ba      	ldr	r2, [r7, #8]
 8107f4a:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8107f4c:	6878      	ldr	r0, [r7, #4]
 8107f4e:	f7ff fe63 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8107f52:	4604      	mov	r4, r0
 8107f54:	6838      	ldr	r0, [r7, #0]
 8107f56:	f7ff ffe4 	bl	8107f22 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8107f5a:	4605      	mov	r5, r0
 8107f5c:	6a38      	ldr	r0, [r7, #32]
 8107f5e:	f7ff fe71 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8107f62:	4603      	mov	r3, r0
 8107f64:	462a      	mov	r2, r5
 8107f66:	4621      	mov	r1, r4
 8107f68:	68b8      	ldr	r0, [r7, #8]
 8107f6a:	f000 fa47 	bl	81083fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8107f6e:	4602      	mov	r2, r0
 8107f70:	68fb      	ldr	r3, [r7, #12]
 8107f72:	605a      	str	r2, [r3, #4]
	  { }
 8107f74:	68fb      	ldr	r3, [r7, #12]
 8107f76:	4618      	mov	r0, r3
 8107f78:	3710      	adds	r7, #16
 8107f7a:	46bd      	mov	sp, r7
 8107f7c:	bdb0      	pop	{r4, r5, r7, pc}

08107f7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8107f7e:	b590      	push	{r4, r7, lr}
 8107f80:	b083      	sub	sp, #12
 8107f82:	af00      	add	r7, sp, #0
 8107f84:	6078      	str	r0, [r7, #4]
 8107f86:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8107f88:	6878      	ldr	r0, [r7, #4]
 8107f8a:	f000 fa5a 	bl	8108442 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8107f8e:	4604      	mov	r4, r0
 8107f90:	6838      	ldr	r0, [r7, #0]
 8107f92:	f7ff fbdb 	bl	810774c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8107f96:	4603      	mov	r3, r0
 8107f98:	4619      	mov	r1, r3
 8107f9a:	4620      	mov	r0, r4
 8107f9c:	f000 fa5c 	bl	8108458 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 8107fa0:	bf00      	nop
 8107fa2:	370c      	adds	r7, #12
 8107fa4:	46bd      	mov	sp, r7
 8107fa6:	bd90      	pop	{r4, r7, pc}

08107fa8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8107fa8:	b580      	push	{r7, lr}
 8107faa:	b082      	sub	sp, #8
 8107fac:	af00      	add	r7, sp, #0
 8107fae:	6078      	str	r0, [r7, #4]
 8107fb0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8107fb2:	6878      	ldr	r0, [r7, #4]
 8107fb4:	f000 fa45 	bl	8108442 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8107fb8:	4603      	mov	r3, r0
 8107fba:	2201      	movs	r2, #1
 8107fbc:	6839      	ldr	r1, [r7, #0]
 8107fbe:	4618      	mov	r0, r3
 8107fc0:	f000 fa56 	bl	8108470 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 8107fc4:	bf00      	nop
 8107fc6:	3708      	adds	r7, #8
 8107fc8:	46bd      	mov	sp, r7
 8107fca:	bd80      	pop	{r7, pc}

08107fcc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      _M_ptr() noexcept
 8107fcc:	b580      	push	{r7, lr}
 8107fce:	b082      	sub	sp, #8
 8107fd0:	af00      	add	r7, sp, #0
 8107fd2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8107fd4:	6878      	ldr	r0, [r7, #4]
 8107fd6:	f000 fa6a 	bl	81084ae <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8107fda:	4603      	mov	r3, r0
 8107fdc:	4618      	mov	r0, r3
 8107fde:	3708      	adds	r7, #8
 8107fe0:	46bd      	mov	sp, r7
 8107fe2:	bd80      	pop	{r7, pc}

08107fe4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8107fe4:	b590      	push	{r4, r7, lr}
 8107fe6:	b087      	sub	sp, #28
 8107fe8:	af00      	add	r7, sp, #0
 8107fea:	60f8      	str	r0, [r7, #12]
 8107fec:	60b9      	str	r1, [r7, #8]
 8107fee:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 8107ff0:	68f8      	ldr	r0, [r7, #12]
 8107ff2:	f000 fa67 	bl	81084c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8107ff6:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8107ff8:	68b8      	ldr	r0, [r7, #8]
 8107ffa:	f7ff f862 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8107ffe:	4604      	mov	r4, r0
 8108000:	6878      	ldr	r0, [r7, #4]
 8108002:	f7ff f869 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8108006:	4603      	mov	r3, r0
 8108008:	4622      	mov	r2, r4
 810800a:	6979      	ldr	r1, [r7, #20]
 810800c:	68f8      	ldr	r0, [r7, #12]
 810800e:	f000 fa6a 	bl	81084e6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8108012:	697b      	ldr	r3, [r7, #20]
	}
 8108014:	4618      	mov	r0, r3
 8108016:	371c      	adds	r7, #28
 8108018:	46bd      	mov	sp, r7
 810801a:	bd90      	pop	{r4, r7, pc}

0810801c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 810801c:	b580      	push	{r7, lr}
 810801e:	b084      	sub	sp, #16
 8108020:	af00      	add	r7, sp, #0
 8108022:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8108024:	6878      	ldr	r0, [r7, #4]
 8108026:	f000 fa83 	bl	8108530 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810802a:	4602      	mov	r2, r0
 810802c:	f107 030c 	add.w	r3, r7, #12
 8108030:	4611      	mov	r1, r2
 8108032:	4618      	mov	r0, r3
 8108034:	f000 fa8a 	bl	810854c <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 8108038:	4603      	mov	r3, r0
      }
 810803a:	4618      	mov	r0, r3
 810803c:	3710      	adds	r7, #16
 810803e:	46bd      	mov	sp, r7
 8108040:	bd80      	pop	{r7, pc}

08108042 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8108042:	b580      	push	{r7, lr}
 8108044:	b084      	sub	sp, #16
 8108046:	af00      	add	r7, sp, #0
 8108048:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	68da      	ldr	r2, [r3, #12]
 810804e:	f107 030c 	add.w	r3, r7, #12
 8108052:	4611      	mov	r1, r2
 8108054:	4618      	mov	r0, r3
 8108056:	f7ff fcb2 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810805a:	68fb      	ldr	r3, [r7, #12]
 810805c:	4618      	mov	r0, r3
 810805e:	3710      	adds	r7, #16
 8108060:	46bd      	mov	sp, r7
 8108062:	bd80      	pop	{r7, pc}

08108064 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 8108064:	b580      	push	{r7, lr}
 8108066:	b084      	sub	sp, #16
 8108068:	af00      	add	r7, sp, #0
 810806a:	60f8      	str	r0, [r7, #12]
 810806c:	60b9      	str	r1, [r7, #8]
 810806e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8108070:	68b8      	ldr	r0, [r7, #8]
 8108072:	f000 fa77 	bl	8108564 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 8108076:	4603      	mov	r3, r0
 8108078:	681a      	ldr	r2, [r3, #0]
 810807a:	68fb      	ldr	r3, [r7, #12]
 810807c:	601a      	str	r2, [r3, #0]
 810807e:	6878      	ldr	r0, [r7, #4]
 8108080:	f000 fa7b 	bl	810857a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8108084:	4603      	mov	r3, r0
 8108086:	681a      	ldr	r2, [r3, #0]
 8108088:	68fb      	ldr	r3, [r7, #12]
 810808a:	605a      	str	r2, [r3, #4]
	{ }
 810808c:	68fb      	ldr	r3, [r7, #12]
 810808e:	4618      	mov	r0, r3
 8108090:	3710      	adds	r7, #16
 8108092:	46bd      	mov	sp, r7
 8108094:	bd80      	pop	{r7, pc}

08108096 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8108096:	b580      	push	{r7, lr}
 8108098:	b082      	sub	sp, #8
 810809a:	af00      	add	r7, sp, #0
 810809c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	681b      	ldr	r3, [r3, #0]
 81080a2:	4618      	mov	r0, r3
 81080a4:	f01b fae1 	bl	812366a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 81080a8:	4602      	mov	r2, r0
 81080aa:	687b      	ldr	r3, [r7, #4]
 81080ac:	601a      	str	r2, [r3, #0]
	return *this;
 81080ae:	687b      	ldr	r3, [r7, #4]
      }
 81080b0:	4618      	mov	r0, r3
 81080b2:	3708      	adds	r7, #8
 81080b4:	46bd      	mov	sp, r7
 81080b6:	bd80      	pop	{r7, pc}

081080b8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>:
      pair(const _T1& __x, const _T2& __y)
 81080b8:	b480      	push	{r7}
 81080ba:	b085      	sub	sp, #20
 81080bc:	af00      	add	r7, sp, #0
 81080be:	60f8      	str	r0, [r7, #12]
 81080c0:	60b9      	str	r1, [r7, #8]
 81080c2:	607a      	str	r2, [r7, #4]
      : first(__x), second(__y)
 81080c4:	68bb      	ldr	r3, [r7, #8]
 81080c6:	681a      	ldr	r2, [r3, #0]
 81080c8:	68fb      	ldr	r3, [r7, #12]
 81080ca:	601a      	str	r2, [r3, #0]
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	681a      	ldr	r2, [r3, #0]
 81080d0:	68fb      	ldr	r3, [r7, #12]
 81080d2:	605a      	str	r2, [r3, #4]
      { }
 81080d4:	68fb      	ldr	r3, [r7, #12]
 81080d6:	4618      	mov	r0, r3
 81080d8:	3714      	adds	r7, #20
 81080da:	46bd      	mov	sp, r7
 81080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080e0:	4770      	bx	lr

081080e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81080e2:	b5b0      	push	{r4, r5, r7, lr}
 81080e4:	b086      	sub	sp, #24
 81080e6:	af00      	add	r7, sp, #0
 81080e8:	60f8      	str	r0, [r7, #12]
 81080ea:	60b9      	str	r1, [r7, #8]
 81080ec:	607a      	str	r2, [r7, #4]
 81080ee:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 81080f0:	68bb      	ldr	r3, [r7, #8]
 81080f2:	2b00      	cmp	r3, #0
 81080f4:	d117      	bne.n	8108126 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 81080f6:	68f8      	ldr	r0, [r7, #12]
 81080f8:	f7ff fd36 	bl	8107b68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81080fc:	4602      	mov	r2, r0
 81080fe:	687b      	ldr	r3, [r7, #4]
 8108100:	4293      	cmp	r3, r2
 8108102:	d010      	beq.n	8108126 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8108104:	68fc      	ldr	r4, [r7, #12]
 8108106:	6838      	ldr	r0, [r7, #0]
 8108108:	f7ff ff88 	bl	810801c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810810c:	4605      	mov	r5, r0
 810810e:	6878      	ldr	r0, [r7, #4]
 8108110:	f7ff fd67 	bl	8107be2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8108114:	4603      	mov	r3, r0
 8108116:	461a      	mov	r2, r3
 8108118:	4629      	mov	r1, r5
 810811a:	4620      	mov	r0, r4
 810811c:	f7fe ffbc 	bl	8107098 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8108120:	4603      	mov	r3, r0
 8108122:	2b00      	cmp	r3, #0
 8108124:	d001      	beq.n	810812a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8108126:	2301      	movs	r3, #1
 8108128:	e000      	b.n	810812c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 810812a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 810812c:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 810812e:	68fb      	ldr	r3, [r7, #12]
 8108130:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8108132:	7df8      	ldrb	r0, [r7, #23]
 8108134:	687a      	ldr	r2, [r7, #4]
 8108136:	6839      	ldr	r1, [r7, #0]
 8108138:	f01b fa99 	bl	812366e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 810813c:	68fb      	ldr	r3, [r7, #12]
 810813e:	695b      	ldr	r3, [r3, #20]
 8108140:	1c5a      	adds	r2, r3, #1
 8108142:	68fb      	ldr	r3, [r7, #12]
 8108144:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8108146:	f107 0310 	add.w	r3, r7, #16
 810814a:	6839      	ldr	r1, [r7, #0]
 810814c:	4618      	mov	r0, r3
 810814e:	f7ff fc36 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8108152:	693b      	ldr	r3, [r7, #16]
    }
 8108154:	4618      	mov	r0, r3
 8108156:	3718      	adds	r7, #24
 8108158:	46bd      	mov	sp, r7
 810815a:	bdb0      	pop	{r4, r5, r7, pc}

0810815c <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 810815c:	b580      	push	{r7, lr}
 810815e:	b082      	sub	sp, #8
 8108160:	af00      	add	r7, sp, #0
 8108162:	6078      	str	r0, [r7, #4]
 8108164:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8108166:	e009      	b.n	810817c <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8108168:	6878      	ldr	r0, [r7, #4]
 810816a:	f000 fa11 	bl	8108590 <_ZSt11__addressofI8SMessageEPT_RS1_>
 810816e:	4603      	mov	r3, r0
 8108170:	4618      	mov	r0, r3
 8108172:	f000 fa18 	bl	81085a6 <_ZSt8_DestroyI8SMessageEvPT_>
	  for (; __first != __last; ++__first)
 8108176:	687b      	ldr	r3, [r7, #4]
 8108178:	331c      	adds	r3, #28
 810817a:	607b      	str	r3, [r7, #4]
 810817c:	687a      	ldr	r2, [r7, #4]
 810817e:	683b      	ldr	r3, [r7, #0]
 8108180:	429a      	cmp	r2, r3
 8108182:	d1f1      	bne.n	8108168 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8SMessageEEvT_S4_+0xc>
	}
 8108184:	bf00      	nop
 8108186:	bf00      	nop
 8108188:	3708      	adds	r7, #8
 810818a:	46bd      	mov	sp, r7
 810818c:	bd80      	pop	{r7, pc}

0810818e <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 810818e:	b480      	push	{r7}
 8108190:	b083      	sub	sp, #12
 8108192:	af00      	add	r7, sp, #0
 8108194:	6078      	str	r0, [r7, #4]
 8108196:	6039      	str	r1, [r7, #0]
 8108198:	bf00      	nop
 810819a:	370c      	adds	r7, #12
 810819c:	46bd      	mov	sp, r7
 810819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081a2:	4770      	bx	lr

081081a4 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 81081a4:	b480      	push	{r7}
 81081a6:	b083      	sub	sp, #12
 81081a8:	af00      	add	r7, sp, #0
 81081aa:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 81081ac:	4b03      	ldr	r3, [pc, #12]	@ (81081bc <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_+0x18>)
      }
 81081ae:	4618      	mov	r0, r3
 81081b0:	370c      	adds	r7, #12
 81081b2:	46bd      	mov	sp, r7
 81081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081b8:	4770      	bx	lr
 81081ba:	bf00      	nop
 81081bc:	09249249 	.word	0x09249249

081081c0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 81081c0:	b580      	push	{r7, lr}
 81081c2:	b084      	sub	sp, #16
 81081c4:	af00      	add	r7, sp, #0
 81081c6:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 81081c8:	4b0a      	ldr	r3, [pc, #40]	@ (81081f4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 81081ca:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 81081cc:	6878      	ldr	r0, [r7, #4]
 81081ce:	f7ff ffe9 	bl	81081a4 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 81081d2:	4603      	mov	r3, r0
 81081d4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 81081d6:	f107 0208 	add.w	r2, r7, #8
 81081da:	f107 030c 	add.w	r3, r7, #12
 81081de:	4611      	mov	r1, r2
 81081e0:	4618      	mov	r0, r3
 81081e2:	f000 f9fd 	bl	81085e0 <_ZSt3minIjERKT_S2_S2_>
 81081e6:	4603      	mov	r3, r0
 81081e8:	681b      	ldr	r3, [r3, #0]
      }
 81081ea:	4618      	mov	r0, r3
 81081ec:	3710      	adds	r7, #16
 81081ee:	46bd      	mov	sp, r7
 81081f0:	bd80      	pop	{r7, pc}
 81081f2:	bf00      	nop
 81081f4:	04924924 	.word	0x04924924

081081f8 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 81081f8:	b480      	push	{r7}
 81081fa:	b083      	sub	sp, #12
 81081fc:	af00      	add	r7, sp, #0
 81081fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	4618      	mov	r0, r3
 8108204:	370c      	adds	r7, #12
 8108206:	46bd      	mov	sp, r7
 8108208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810820c:	4770      	bx	lr

0810820e <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 810820e:	b5b0      	push	{r4, r5, r7, lr}
 8108210:	b084      	sub	sp, #16
 8108212:	af00      	add	r7, sp, #0
 8108214:	6078      	str	r0, [r7, #4]
 8108216:	6039      	str	r1, [r7, #0]
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	60fb      	str	r3, [r7, #12]
 810821c:	683b      	ldr	r3, [r7, #0]
 810821e:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8108220:	f7fb f97e 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 8108224:	4603      	mov	r3, r0
 8108226:	2b00      	cmp	r3, #0
 8108228:	d01d      	beq.n	8108266 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 810822a:	68bb      	ldr	r3, [r7, #8]
 810822c:	2100      	movs	r1, #0
 810822e:	221c      	movs	r2, #28
 8108230:	fba3 4502 	umull	r4, r5, r3, r2
 8108234:	f04f 0200 	mov.w	r2, #0
 8108238:	f04f 0300 	mov.w	r3, #0
 810823c:	002a      	movs	r2, r5
 810823e:	2300      	movs	r3, #0
 8108240:	2a00      	cmp	r2, #0
 8108242:	d000      	beq.n	8108246 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x38>
 8108244:	2101      	movs	r1, #1
 8108246:	4623      	mov	r3, r4
 8108248:	60bb      	str	r3, [r7, #8]
 810824a:	460b      	mov	r3, r1
 810824c:	f003 0301 	and.w	r3, r3, #1
 8108250:	b2db      	uxtb	r3, r3
 8108252:	2b00      	cmp	r3, #0
 8108254:	d001      	beq.n	810825a <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x4c>
	      std::__throw_bad_array_new_length();
 8108256:	f01b fa71 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 810825a:	68bb      	ldr	r3, [r7, #8]
 810825c:	4618      	mov	r0, r3
 810825e:	f01b f99c 	bl	812359a <_Znwj>
 8108262:	4603      	mov	r3, r0
 8108264:	e007      	b.n	8108276 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8108266:	68bb      	ldr	r3, [r7, #8]
 8108268:	2200      	movs	r2, #0
 810826a:	4619      	mov	r1, r3
 810826c:	68f8      	ldr	r0, [r7, #12]
 810826e:	f000 fafd 	bl	810886c <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 8108272:	4603      	mov	r3, r0
 8108274:	bf00      	nop
      { return __a.allocate(__n); }
 8108276:	4618      	mov	r0, r3
 8108278:	3710      	adds	r7, #16
 810827a:	46bd      	mov	sp, r7
 810827c:	bdb0      	pop	{r4, r5, r7, pc}

0810827e <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 810827e:	b5b0      	push	{r4, r5, r7, lr}
 8108280:	b084      	sub	sp, #16
 8108282:	af00      	add	r7, sp, #0
 8108284:	60f8      	str	r0, [r7, #12]
 8108286:	60b9      	str	r1, [r7, #8]
 8108288:	607a      	str	r2, [r7, #4]
 810828a:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 810828c:	68f8      	ldr	r0, [r7, #12]
 810828e:	f000 f9bb 	bl	8108608 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8108292:	4604      	mov	r4, r0
 8108294:	68b8      	ldr	r0, [r7, #8]
 8108296:	f000 f9b7 	bl	8108608 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810829a:	4605      	mov	r5, r0
 810829c:	6878      	ldr	r0, [r7, #4]
 810829e:	f000 f9b3 	bl	8108608 <_ZSt12__niter_baseIP8SMessageET_S2_>
 81082a2:	4602      	mov	r2, r0
 81082a4:	683b      	ldr	r3, [r7, #0]
 81082a6:	4629      	mov	r1, r5
 81082a8:	4620      	mov	r0, r4
 81082aa:	f000 f9c9 	bl	8108640 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 81082ae:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 81082b0:	4618      	mov	r0, r3
 81082b2:	3710      	adds	r7, #16
 81082b4:	46bd      	mov	sp, r7
 81082b6:	bdb0      	pop	{r4, r5, r7, pc}

081082b8 <_ZSt10destroy_atI8SMessageEvPT_>:
    destroy_at(_Tp* __location)
 81082b8:	b480      	push	{r7}
 81082ba:	b083      	sub	sp, #12
 81082bc:	af00      	add	r7, sp, #0
 81082be:	6078      	str	r0, [r7, #4]
    }
 81082c0:	bf00      	nop
 81082c2:	370c      	adds	r7, #12
 81082c4:	46bd      	mov	sp, r7
 81082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082ca:	4770      	bx	lr

081082cc <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 81082cc:	b480      	push	{r7}
 81082ce:	b083      	sub	sp, #12
 81082d0:	af00      	add	r7, sp, #0
 81082d2:	6078      	str	r0, [r7, #4]
 81082d4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 81082d6:	687b      	ldr	r3, [r7, #4]
 81082d8:	683a      	ldr	r2, [r7, #0]
 81082da:	601a      	str	r2, [r3, #0]
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	4618      	mov	r0, r3
 81082e0:	370c      	adds	r7, #12
 81082e2:	46bd      	mov	sp, r7
 81082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082e8:	4770      	bx	lr

081082ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81082ea:	b5b0      	push	{r4, r5, r7, lr}
 81082ec:	b088      	sub	sp, #32
 81082ee:	af02      	add	r7, sp, #8
 81082f0:	60f8      	str	r0, [r7, #12]
 81082f2:	60b9      	str	r1, [r7, #8]
 81082f4:	607a      	str	r2, [r7, #4]
 81082f6:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 81082f8:	68f8      	ldr	r0, [r7, #12]
 81082fa:	f000 f8e3 	bl	81084c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81082fe:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8108300:	68b8      	ldr	r0, [r7, #8]
 8108302:	f7ff fc89 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8108306:	4604      	mov	r4, r0
 8108308:	6878      	ldr	r0, [r7, #4]
 810830a:	f7ff fc90 	bl	8107c2e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810830e:	4605      	mov	r5, r0
 8108310:	6838      	ldr	r0, [r7, #0]
 8108312:	f7ff fc97 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8108316:	4603      	mov	r3, r0
 8108318:	9300      	str	r3, [sp, #0]
 810831a:	462b      	mov	r3, r5
 810831c:	4622      	mov	r2, r4
 810831e:	6979      	ldr	r1, [r7, #20]
 8108320:	68f8      	ldr	r0, [r7, #12]
 8108322:	f000 f9d3 	bl	81086cc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8108326:	697b      	ldr	r3, [r7, #20]
	}
 8108328:	4618      	mov	r0, r3
 810832a:	3718      	adds	r7, #24
 810832c:	46bd      	mov	sp, r7
 810832e:	bdb0      	pop	{r4, r5, r7, pc}

08108330 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8108330:	b580      	push	{r7, lr}
 8108332:	b084      	sub	sp, #16
 8108334:	af00      	add	r7, sp, #0
 8108336:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8108338:	687b      	ldr	r3, [r7, #4]
 810833a:	681a      	ldr	r2, [r3, #0]
 810833c:	f107 030c 	add.w	r3, r7, #12
 8108340:	4611      	mov	r1, r2
 8108342:	4618      	mov	r0, r3
 8108344:	f7ff fb3b 	bl	81079be <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8108348:	68fb      	ldr	r3, [r7, #12]
 810834a:	4618      	mov	r0, r3
 810834c:	3710      	adds	r7, #16
 810834e:	46bd      	mov	sp, r7
 8108350:	bd80      	pop	{r7, pc}

08108352 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8108352:	b480      	push	{r7}
 8108354:	b083      	sub	sp, #12
 8108356:	af00      	add	r7, sp, #0
 8108358:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	3310      	adds	r3, #16
 810835e:	4618      	mov	r0, r3
 8108360:	370c      	adds	r7, #12
 8108362:	46bd      	mov	sp, r7
 8108364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108368:	4770      	bx	lr

0810836a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 810836a:	b480      	push	{r7}
 810836c:	b083      	sub	sp, #12
 810836e:	af00      	add	r7, sp, #0
 8108370:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8108372:	687b      	ldr	r3, [r7, #4]
 8108374:	330c      	adds	r3, #12
 8108376:	4618      	mov	r0, r3
 8108378:	370c      	adds	r7, #12
 810837a:	46bd      	mov	sp, r7
 810837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108380:	4770      	bx	lr

08108382 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 8108382:	b580      	push	{r7, lr}
 8108384:	b084      	sub	sp, #16
 8108386:	af00      	add	r7, sp, #0
 8108388:	60f8      	str	r0, [r7, #12]
 810838a:	60b9      	str	r1, [r7, #8]
 810838c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 810838e:	68b8      	ldr	r0, [r7, #8]
 8108390:	f000 f8f3 	bl	810857a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8108394:	4603      	mov	r3, r0
 8108396:	681a      	ldr	r2, [r3, #0]
 8108398:	68fb      	ldr	r3, [r7, #12]
 810839a:	601a      	str	r2, [r3, #0]
 810839c:	6878      	ldr	r0, [r7, #4]
 810839e:	f000 f8ec 	bl	810857a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 81083a2:	4603      	mov	r3, r0
 81083a4:	681a      	ldr	r2, [r3, #0]
 81083a6:	68fb      	ldr	r3, [r7, #12]
 81083a8:	605a      	str	r2, [r3, #4]
	{ }
 81083aa:	68fb      	ldr	r3, [r7, #12]
 81083ac:	4618      	mov	r0, r3
 81083ae:	3710      	adds	r7, #16
 81083b0:	46bd      	mov	sp, r7
 81083b2:	bd80      	pop	{r7, pc}

081083b4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 81083b4:	b580      	push	{r7, lr}
 81083b6:	b082      	sub	sp, #8
 81083b8:	af00      	add	r7, sp, #0
 81083ba:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 81083bc:	687b      	ldr	r3, [r7, #4]
 81083be:	681b      	ldr	r3, [r3, #0]
 81083c0:	4618      	mov	r0, r3
 81083c2:	f01b f950 	bl	8123666 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 81083c6:	4602      	mov	r2, r0
 81083c8:	687b      	ldr	r3, [r7, #4]
 81083ca:	601a      	str	r2, [r3, #0]
	return *this;
 81083cc:	687b      	ldr	r3, [r7, #4]
      }
 81083ce:	4618      	mov	r0, r3
 81083d0:	3708      	adds	r7, #8
 81083d2:	46bd      	mov	sp, r7
 81083d4:	bd80      	pop	{r7, pc}

081083d6 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 81083d6:	b590      	push	{r4, r7, lr}
 81083d8:	b083      	sub	sp, #12
 81083da:	af00      	add	r7, sp, #0
 81083dc:	6078      	str	r0, [r7, #4]
 81083de:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 81083e0:	687c      	ldr	r4, [r7, #4]
 81083e2:	6838      	ldr	r0, [r7, #0]
 81083e4:	f7ff fd7f 	bl	8107ee6 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 81083e8:	4603      	mov	r3, r0
 81083ea:	4619      	mov	r1, r3
 81083ec:	4620      	mov	r0, r4
 81083ee:	f000 f99a 	bl	8108726 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>
	{ }
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	4618      	mov	r0, r3
 81083f6:	370c      	adds	r7, #12
 81083f8:	46bd      	mov	sp, r7
 81083fa:	bd90      	pop	{r4, r7, pc}

081083fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81083fc:	b5b0      	push	{r4, r5, r7, lr}
 81083fe:	b088      	sub	sp, #32
 8108400:	af02      	add	r7, sp, #8
 8108402:	60f8      	str	r0, [r7, #12]
 8108404:	60b9      	str	r1, [r7, #8]
 8108406:	607a      	str	r2, [r7, #4]
 8108408:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 810840a:	68f8      	ldr	r0, [r7, #12]
 810840c:	f000 f85a 	bl	81084c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8108410:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8108412:	68b8      	ldr	r0, [r7, #8]
 8108414:	f7ff fc00 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8108418:	4604      	mov	r4, r0
 810841a:	6878      	ldr	r0, [r7, #4]
 810841c:	f7ff fd81 	bl	8107f22 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8108420:	4605      	mov	r5, r0
 8108422:	6838      	ldr	r0, [r7, #0]
 8108424:	f7ff fc0e 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8108428:	4603      	mov	r3, r0
 810842a:	9300      	str	r3, [sp, #0]
 810842c:	462b      	mov	r3, r5
 810842e:	4622      	mov	r2, r4
 8108430:	6979      	ldr	r1, [r7, #20]
 8108432:	68f8      	ldr	r0, [r7, #12]
 8108434:	f000 f987 	bl	8108746 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8108438:	697b      	ldr	r3, [r7, #20]
	}
 810843a:	4618      	mov	r0, r3
 810843c:	3718      	adds	r7, #24
 810843e:	46bd      	mov	sp, r7
 8108440:	bdb0      	pop	{r4, r5, r7, pc}

08108442 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8108442:	b480      	push	{r7}
 8108444:	b083      	sub	sp, #12
 8108446:	af00      	add	r7, sp, #0
 8108448:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810844a:	687b      	ldr	r3, [r7, #4]
 810844c:	4618      	mov	r0, r3
 810844e:	370c      	adds	r7, #12
 8108450:	46bd      	mov	sp, r7
 8108452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108456:	4770      	bx	lr

08108458 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8108458:	b580      	push	{r7, lr}
 810845a:	b082      	sub	sp, #8
 810845c:	af00      	add	r7, sp, #0
 810845e:	6078      	str	r0, [r7, #4]
 8108460:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8108462:	6838      	ldr	r0, [r7, #0]
 8108464:	f000 f99c 	bl	81087a0 <_ZSt10destroy_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEvPT_>
	}
 8108468:	bf00      	nop
 810846a:	3708      	adds	r7, #8
 810846c:	46bd      	mov	sp, r7
 810846e:	bd80      	pop	{r7, pc}

08108470 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8108470:	b580      	push	{r7, lr}
 8108472:	b088      	sub	sp, #32
 8108474:	af00      	add	r7, sp, #0
 8108476:	60f8      	str	r0, [r7, #12]
 8108478:	60b9      	str	r1, [r7, #8]
 810847a:	607a      	str	r2, [r7, #4]
 810847c:	68fb      	ldr	r3, [r7, #12]
 810847e:	61fb      	str	r3, [r7, #28]
 8108480:	68bb      	ldr	r3, [r7, #8]
 8108482:	61bb      	str	r3, [r7, #24]
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8108488:	f7fb f84a 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 810848c:	4603      	mov	r3, r0
 810848e:	2b00      	cmp	r3, #0
 8108490:	d003      	beq.n	810849a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8108492:	69b8      	ldr	r0, [r7, #24]
 8108494:	f01b f86e 	bl	8123574 <_ZdlPv>
	    return;
 8108498:	e005      	b.n	81084a6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 810849a:	697a      	ldr	r2, [r7, #20]
 810849c:	69b9      	ldr	r1, [r7, #24]
 810849e:	69f8      	ldr	r0, [r7, #28]
 81084a0:	f000 fa85 	bl	81089ae <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 81084a4:	bf00      	nop
 81084a6:	bf00      	nop
 81084a8:	3720      	adds	r7, #32
 81084aa:	46bd      	mov	sp, r7
 81084ac:	bd80      	pop	{r7, pc}

081084ae <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 81084ae:	b480      	push	{r7}
 81084b0:	b083      	sub	sp, #12
 81084b2:	af00      	add	r7, sp, #0
 81084b4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 81084b6:	687b      	ldr	r3, [r7, #4]
 81084b8:	4618      	mov	r0, r3
 81084ba:	370c      	adds	r7, #12
 81084bc:	46bd      	mov	sp, r7
 81084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084c2:	4770      	bx	lr

081084c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 81084c4:	b580      	push	{r7, lr}
 81084c6:	b082      	sub	sp, #8
 81084c8:	af00      	add	r7, sp, #0
 81084ca:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 81084cc:	6878      	ldr	r0, [r7, #4]
 81084ce:	f7ff ffb8 	bl	8108442 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81084d2:	4603      	mov	r3, r0
 81084d4:	2101      	movs	r1, #1
 81084d6:	4618      	mov	r0, r3
 81084d8:	f000 f96c 	bl	81087b4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 81084dc:	4603      	mov	r3, r0
 81084de:	4618      	mov	r0, r3
 81084e0:	3708      	adds	r7, #8
 81084e2:	46bd      	mov	sp, r7
 81084e4:	bd80      	pop	{r7, pc}

081084e6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 81084e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 81084e8:	b085      	sub	sp, #20
 81084ea:	af00      	add	r7, sp, #0
 81084ec:	60f8      	str	r0, [r7, #12]
 81084ee:	60b9      	str	r1, [r7, #8]
 81084f0:	607a      	str	r2, [r7, #4]
 81084f2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 81084f4:	68bb      	ldr	r3, [r7, #8]
 81084f6:	4619      	mov	r1, r3
 81084f8:	2018      	movs	r0, #24
 81084fa:	f7f8 febd 	bl	8101278 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 81084fe:	68f8      	ldr	r0, [r7, #12]
 8108500:	f7ff ff9f 	bl	8108442 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8108504:	4604      	mov	r4, r0
 8108506:	68b8      	ldr	r0, [r7, #8]
 8108508:	f7ff f920 	bl	810774c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810850c:	4605      	mov	r5, r0
 810850e:	6878      	ldr	r0, [r7, #4]
 8108510:	f7fe fdd7 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8108514:	4606      	mov	r6, r0
 8108516:	6838      	ldr	r0, [r7, #0]
 8108518:	f7fe fdde 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810851c:	4603      	mov	r3, r0
 810851e:	4632      	mov	r2, r6
 8108520:	4629      	mov	r1, r5
 8108522:	4620      	mov	r0, r4
 8108524:	f000 f97e 	bl	8108824 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8108528:	bf00      	nop
 810852a:	3714      	adds	r7, #20
 810852c:	46bd      	mov	sp, r7
 810852e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108530 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8108530:	b580      	push	{r7, lr}
 8108532:	b082      	sub	sp, #8
 8108534:	af00      	add	r7, sp, #0
 8108536:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8108538:	687b      	ldr	r3, [r7, #4]
 810853a:	3310      	adds	r3, #16
 810853c:	4618      	mov	r0, r3
 810853e:	f000 f989 	bl	8108854 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8108542:	4603      	mov	r3, r0
 8108544:	4618      	mov	r0, r3
 8108546:	3708      	adds	r7, #8
 8108548:	46bd      	mov	sp, r7
 810854a:	bd80      	pop	{r7, pc}

0810854c <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 810854c:	b480      	push	{r7}
 810854e:	b083      	sub	sp, #12
 8108550:	af00      	add	r7, sp, #0
 8108552:	6078      	str	r0, [r7, #4]
 8108554:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8108556:	683b      	ldr	r3, [r7, #0]
 8108558:	4618      	mov	r0, r3
 810855a:	370c      	adds	r7, #12
 810855c:	46bd      	mov	sp, r7
 810855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108562:	4770      	bx	lr

08108564 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8108564:	b480      	push	{r7}
 8108566:	b083      	sub	sp, #12
 8108568:	af00      	add	r7, sp, #0
 810856a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810856c:	687b      	ldr	r3, [r7, #4]
 810856e:	4618      	mov	r0, r3
 8108570:	370c      	adds	r7, #12
 8108572:	46bd      	mov	sp, r7
 8108574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108578:	4770      	bx	lr

0810857a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810857a:	b480      	push	{r7}
 810857c:	b083      	sub	sp, #12
 810857e:	af00      	add	r7, sp, #0
 8108580:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8108582:	687b      	ldr	r3, [r7, #4]
 8108584:	4618      	mov	r0, r3
 8108586:	370c      	adds	r7, #12
 8108588:	46bd      	mov	sp, r7
 810858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810858e:	4770      	bx	lr

08108590 <_ZSt11__addressofI8SMessageEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8108590:	b480      	push	{r7}
 8108592:	b083      	sub	sp, #12
 8108594:	af00      	add	r7, sp, #0
 8108596:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8108598:	687b      	ldr	r3, [r7, #4]
 810859a:	4618      	mov	r0, r3
 810859c:	370c      	adds	r7, #12
 810859e:	46bd      	mov	sp, r7
 81085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085a4:	4770      	bx	lr

081085a6 <_ZSt8_DestroyI8SMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 81085a6:	b580      	push	{r7, lr}
 81085a8:	b082      	sub	sp, #8
 81085aa:	af00      	add	r7, sp, #0
 81085ac:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 81085ae:	6878      	ldr	r0, [r7, #4]
 81085b0:	f7ff fe82 	bl	81082b8 <_ZSt10destroy_atI8SMessageEvPT_>
    }
 81085b4:	bf00      	nop
 81085b6:	3708      	adds	r7, #8
 81085b8:	46bd      	mov	sp, r7
 81085ba:	bd80      	pop	{r7, pc}

081085bc <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81085bc:	b580      	push	{r7, lr}
 81085be:	b084      	sub	sp, #16
 81085c0:	af00      	add	r7, sp, #0
 81085c2:	60f8      	str	r0, [r7, #12]
 81085c4:	60b9      	str	r1, [r7, #8]
 81085c6:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81085c8:	687a      	ldr	r2, [r7, #4]
 81085ca:	4613      	mov	r3, r2
 81085cc:	00db      	lsls	r3, r3, #3
 81085ce:	1a9b      	subs	r3, r3, r2
 81085d0:	009b      	lsls	r3, r3, #2
 81085d2:	4619      	mov	r1, r3
 81085d4:	68b8      	ldr	r0, [r7, #8]
 81085d6:	f01a ffcf 	bl	8123578 <_ZdlPvj>
      }
 81085da:	3710      	adds	r7, #16
 81085dc:	46bd      	mov	sp, r7
 81085de:	bd80      	pop	{r7, pc}

081085e0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 81085e0:	b480      	push	{r7}
 81085e2:	b083      	sub	sp, #12
 81085e4:	af00      	add	r7, sp, #0
 81085e6:	6078      	str	r0, [r7, #4]
 81085e8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 81085ea:	683b      	ldr	r3, [r7, #0]
 81085ec:	681a      	ldr	r2, [r3, #0]
 81085ee:	687b      	ldr	r3, [r7, #4]
 81085f0:	681b      	ldr	r3, [r3, #0]
 81085f2:	429a      	cmp	r2, r3
 81085f4:	d201      	bcs.n	81085fa <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 81085f6:	683b      	ldr	r3, [r7, #0]
 81085f8:	e000      	b.n	81085fc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 81085fa:	687b      	ldr	r3, [r7, #4]
    }
 81085fc:	4618      	mov	r0, r3
 81085fe:	370c      	adds	r7, #12
 8108600:	46bd      	mov	sp, r7
 8108602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108606:	4770      	bx	lr

08108608 <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8108608:	b480      	push	{r7}
 810860a:	b083      	sub	sp, #12
 810860c:	af00      	add	r7, sp, #0
 810860e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8108610:	687b      	ldr	r3, [r7, #4]
 8108612:	4618      	mov	r0, r3
 8108614:	370c      	adds	r7, #12
 8108616:	46bd      	mov	sp, r7
 8108618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810861c:	4770      	bx	lr

0810861e <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810861e:	b480      	push	{r7}
 8108620:	b083      	sub	sp, #12
 8108622:	af00      	add	r7, sp, #0
 8108624:	6078      	str	r0, [r7, #4]
 8108626:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8108628:	683b      	ldr	r3, [r7, #0]
 810862a:	681a      	ldr	r2, [r3, #0]
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	601a      	str	r2, [r3, #0]
 8108630:	687b      	ldr	r3, [r7, #4]
 8108632:	4618      	mov	r0, r3
 8108634:	370c      	adds	r7, #12
 8108636:	46bd      	mov	sp, r7
 8108638:	f85d 7b04 	ldr.w	r7, [sp], #4
 810863c:	4770      	bx	lr
	...

08108640 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8108640:	b580      	push	{r7, lr}
 8108642:	b086      	sub	sp, #24
 8108644:	af00      	add	r7, sp, #0
 8108646:	60f8      	str	r0, [r7, #12]
 8108648:	60b9      	str	r1, [r7, #8]
 810864a:	607a      	str	r2, [r7, #4]
 810864c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 810864e:	68ba      	ldr	r2, [r7, #8]
 8108650:	68fb      	ldr	r3, [r7, #12]
 8108652:	1ad3      	subs	r3, r2, r3
 8108654:	109b      	asrs	r3, r3, #2
 8108656:	4a1c      	ldr	r2, [pc, #112]	@ (81086c8 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x88>)
 8108658:	fb02 f303 	mul.w	r3, r2, r3
 810865c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 810865e:	697b      	ldr	r3, [r7, #20]
 8108660:	2b00      	cmp	r3, #0
 8108662:	dd25      	ble.n	81086b0 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x70>
	  if (std::is_constant_evaluated())
 8108664:	f7fe f8cf 	bl	8106806 <_ZSt21is_constant_evaluatedv>
 8108668:	4603      	mov	r3, r0
 810866a:	2b00      	cmp	r3, #0
 810866c:	d016      	beq.n	810869c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x5c>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 810866e:	1d3a      	adds	r2, r7, #4
 8108670:	f107 0310 	add.w	r3, r7, #16
 8108674:	4611      	mov	r1, r2
 8108676:	4618      	mov	r0, r3
 8108678:	f7ff ffd1 	bl	810861e <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEC1ERKS2_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 810867c:	683b      	ldr	r3, [r7, #0]
 810867e:	693a      	ldr	r2, [r7, #16]
 8108680:	68b9      	ldr	r1, [r7, #8]
 8108682:	68f8      	ldr	r0, [r7, #12]
 8108684:	f000 f922 	bl	81088cc <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_>
 8108688:	4603      	mov	r3, r0
 810868a:	613b      	str	r3, [r7, #16]
	      return __out.base();
 810868c:	f107 0310 	add.w	r3, r7, #16
 8108690:	4618      	mov	r0, r3
 8108692:	f000 f949 	bl	8108928 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevE4baseEv>
 8108696:	4603      	mov	r3, r0
 8108698:	681b      	ldr	r3, [r3, #0]
 810869a:	e010      	b.n	81086be <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x7e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810869c:	6878      	ldr	r0, [r7, #4]
 810869e:	697a      	ldr	r2, [r7, #20]
 81086a0:	4613      	mov	r3, r2
 81086a2:	00db      	lsls	r3, r3, #3
 81086a4:	1a9b      	subs	r3, r3, r2
 81086a6:	009b      	lsls	r3, r3, #2
 81086a8:	461a      	mov	r2, r3
 81086aa:	68f9      	ldr	r1, [r7, #12]
 81086ac:	f01c f8d0 	bl	8124850 <memmove>
      return __result + __count;
 81086b0:	6879      	ldr	r1, [r7, #4]
 81086b2:	697a      	ldr	r2, [r7, #20]
 81086b4:	4613      	mov	r3, r2
 81086b6:	00db      	lsls	r3, r3, #3
 81086b8:	1a9b      	subs	r3, r3, r2
 81086ba:	009b      	lsls	r3, r3, #2
 81086bc:	440b      	add	r3, r1
    }
 81086be:	4618      	mov	r0, r3
 81086c0:	3718      	adds	r7, #24
 81086c2:	46bd      	mov	sp, r7
 81086c4:	bd80      	pop	{r7, pc}
 81086c6:	bf00      	nop
 81086c8:	b6db6db7 	.word	0xb6db6db7

081086cc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 81086cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81086d0:	b086      	sub	sp, #24
 81086d2:	af02      	add	r7, sp, #8
 81086d4:	60f8      	str	r0, [r7, #12]
 81086d6:	60b9      	str	r1, [r7, #8]
 81086d8:	607a      	str	r2, [r7, #4]
 81086da:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 81086dc:	68bb      	ldr	r3, [r7, #8]
 81086de:	4619      	mov	r1, r3
 81086e0:	2018      	movs	r0, #24
 81086e2:	f7f8 fdc9 	bl	8101278 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 81086e6:	68f8      	ldr	r0, [r7, #12]
 81086e8:	f7ff feab 	bl	8108442 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81086ec:	4604      	mov	r4, r0
 81086ee:	68b8      	ldr	r0, [r7, #8]
 81086f0:	f7ff f82c 	bl	810774c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81086f4:	4605      	mov	r5, r0
 81086f6:	6878      	ldr	r0, [r7, #4]
 81086f8:	f7ff fa8e 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81086fc:	4606      	mov	r6, r0
 81086fe:	6838      	ldr	r0, [r7, #0]
 8108700:	f7ff fa95 	bl	8107c2e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8108704:	4680      	mov	r8, r0
 8108706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108708:	f7ff fa9c 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810870c:	4603      	mov	r3, r0
 810870e:	9300      	str	r3, [sp, #0]
 8108710:	4643      	mov	r3, r8
 8108712:	4632      	mov	r2, r6
 8108714:	4629      	mov	r1, r5
 8108716:	4620      	mov	r0, r4
 8108718:	f000 f911 	bl	810893e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 810871c:	bf00      	nop
 810871e:	3710      	adds	r7, #16
 8108720:	46bd      	mov	sp, r7
 8108722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08108726 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8108726:	b580      	push	{r7, lr}
 8108728:	b082      	sub	sp, #8
 810872a:	af00      	add	r7, sp, #0
 810872c:	6078      	str	r0, [r7, #4]
 810872e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8108730:	6838      	ldr	r0, [r7, #0]
 8108732:	f7ff fbd8 	bl	8107ee6 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8108736:	4602      	mov	r2, r0
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	601a      	str	r2, [r3, #0]
 810873c:	687b      	ldr	r3, [r7, #4]
 810873e:	4618      	mov	r0, r3
 8108740:	3708      	adds	r7, #8
 8108742:	46bd      	mov	sp, r7
 8108744:	bd80      	pop	{r7, pc}

08108746 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8108746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810874a:	b086      	sub	sp, #24
 810874c:	af02      	add	r7, sp, #8
 810874e:	60f8      	str	r0, [r7, #12]
 8108750:	60b9      	str	r1, [r7, #8]
 8108752:	607a      	str	r2, [r7, #4]
 8108754:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8108756:	68bb      	ldr	r3, [r7, #8]
 8108758:	4619      	mov	r1, r3
 810875a:	2018      	movs	r0, #24
 810875c:	f7f8 fd8c 	bl	8101278 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8108760:	68f8      	ldr	r0, [r7, #12]
 8108762:	f7ff fe6e 	bl	8108442 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8108766:	4604      	mov	r4, r0
 8108768:	68b8      	ldr	r0, [r7, #8]
 810876a:	f7fe ffef 	bl	810774c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810876e:	4605      	mov	r5, r0
 8108770:	6878      	ldr	r0, [r7, #4]
 8108772:	f7ff fa51 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8108776:	4606      	mov	r6, r0
 8108778:	6838      	ldr	r0, [r7, #0]
 810877a:	f7ff fbd2 	bl	8107f22 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810877e:	4680      	mov	r8, r0
 8108780:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108782:	f7ff fa5f 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8108786:	4603      	mov	r3, r0
 8108788:	9300      	str	r3, [sp, #0]
 810878a:	4643      	mov	r3, r8
 810878c:	4632      	mov	r2, r6
 810878e:	4629      	mov	r1, r5
 8108790:	4620      	mov	r0, r4
 8108792:	f000 f8f0 	bl	8108976 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8108796:	bf00      	nop
 8108798:	3710      	adds	r7, #16
 810879a:	46bd      	mov	sp, r7
 810879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081087a0 <_ZSt10destroy_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEvPT_>:
    destroy_at(_Tp* __location)
 81087a0:	b480      	push	{r7}
 81087a2:	b083      	sub	sp, #12
 81087a4:	af00      	add	r7, sp, #0
 81087a6:	6078      	str	r0, [r7, #4]
    }
 81087a8:	bf00      	nop
 81087aa:	370c      	adds	r7, #12
 81087ac:	46bd      	mov	sp, r7
 81087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087b2:	4770      	bx	lr

081087b4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 81087b4:	b5b0      	push	{r4, r5, r7, lr}
 81087b6:	b084      	sub	sp, #16
 81087b8:	af00      	add	r7, sp, #0
 81087ba:	6078      	str	r0, [r7, #4]
 81087bc:	6039      	str	r1, [r7, #0]
 81087be:	687b      	ldr	r3, [r7, #4]
 81087c0:	60fb      	str	r3, [r7, #12]
 81087c2:	683b      	ldr	r3, [r7, #0]
 81087c4:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 81087c6:	f7fa feab 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 81087ca:	4603      	mov	r3, r0
 81087cc:	2b00      	cmp	r3, #0
 81087ce:	d01d      	beq.n	810880c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x58>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 81087d0:	68bb      	ldr	r3, [r7, #8]
 81087d2:	2100      	movs	r1, #0
 81087d4:	2218      	movs	r2, #24
 81087d6:	fba3 4502 	umull	r4, r5, r3, r2
 81087da:	f04f 0200 	mov.w	r2, #0
 81087de:	f04f 0300 	mov.w	r3, #0
 81087e2:	002a      	movs	r2, r5
 81087e4:	2300      	movs	r3, #0
 81087e6:	2a00      	cmp	r2, #0
 81087e8:	d000      	beq.n	81087ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x38>
 81087ea:	2101      	movs	r1, #1
 81087ec:	4623      	mov	r3, r4
 81087ee:	60bb      	str	r3, [r7, #8]
 81087f0:	460b      	mov	r3, r1
 81087f2:	f003 0301 	and.w	r3, r3, #1
 81087f6:	b2db      	uxtb	r3, r3
 81087f8:	2b00      	cmp	r3, #0
 81087fa:	d001      	beq.n	8108800 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x4c>
	      std::__throw_bad_array_new_length();
 81087fc:	f01a ff9e 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8108800:	68bb      	ldr	r3, [r7, #8]
 8108802:	4618      	mov	r0, r3
 8108804:	f01a fec9 	bl	812359a <_Znwj>
 8108808:	4603      	mov	r3, r0
 810880a:	e007      	b.n	810881c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j+0x68>
	return __allocator_base<_Tp>::allocate(__n, 0);
 810880c:	68bb      	ldr	r3, [r7, #8]
 810880e:	2200      	movs	r2, #0
 8108810:	4619      	mov	r1, r3
 8108812:	68f8      	ldr	r0, [r7, #12]
 8108814:	f000 f9be 	bl	8108b94 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 8108818:	4603      	mov	r3, r0
 810881a:	bf00      	nop
      { return __a.allocate(__n); }
 810881c:	4618      	mov	r0, r3
 810881e:	3710      	adds	r7, #16
 8108820:	46bd      	mov	sp, r7
 8108822:	bdb0      	pop	{r4, r5, r7, pc}

08108824 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8108824:	b590      	push	{r4, r7, lr}
 8108826:	b085      	sub	sp, #20
 8108828:	af00      	add	r7, sp, #0
 810882a:	60f8      	str	r0, [r7, #12]
 810882c:	60b9      	str	r1, [r7, #8]
 810882e:	607a      	str	r2, [r7, #4]
 8108830:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8108832:	6878      	ldr	r0, [r7, #4]
 8108834:	f7fe fc45 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8108838:	4604      	mov	r4, r0
 810883a:	6838      	ldr	r0, [r7, #0]
 810883c:	f7fe fc4c 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8108840:	4603      	mov	r3, r0
 8108842:	461a      	mov	r2, r3
 8108844:	4621      	mov	r1, r4
 8108846:	68b8      	ldr	r0, [r7, #8]
 8108848:	f000 f8c3 	bl	81089d2 <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRS2_RS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 810884c:	bf00      	nop
 810884e:	3714      	adds	r7, #20
 8108850:	46bd      	mov	sp, r7
 8108852:	bd90      	pop	{r4, r7, pc}

08108854 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8108854:	b580      	push	{r7, lr}
 8108856:	b082      	sub	sp, #8
 8108858:	af00      	add	r7, sp, #0
 810885a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 810885c:	6878      	ldr	r0, [r7, #4]
 810885e:	f000 f8d6 	bl	8108a0e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8108862:	4603      	mov	r3, r0
 8108864:	4618      	mov	r0, r3
 8108866:	3708      	adds	r7, #8
 8108868:	46bd      	mov	sp, r7
 810886a:	bd80      	pop	{r7, pc}

0810886c <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810886c:	b580      	push	{r7, lr}
 810886e:	b084      	sub	sp, #16
 8108870:	af00      	add	r7, sp, #0
 8108872:	60f8      	str	r0, [r7, #12]
 8108874:	60b9      	str	r1, [r7, #8]
 8108876:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8108878:	68f8      	ldr	r0, [r7, #12]
 810887a:	f000 f8d3 	bl	8108a24 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 810887e:	4602      	mov	r2, r0
 8108880:	68bb      	ldr	r3, [r7, #8]
 8108882:	4293      	cmp	r3, r2
 8108884:	bf8c      	ite	hi
 8108886:	2301      	movhi	r3, #1
 8108888:	2300      	movls	r3, #0
 810888a:	b2db      	uxtb	r3, r3
 810888c:	2b00      	cmp	r3, #0
 810888e:	bf14      	ite	ne
 8108890:	2301      	movne	r3, #1
 8108892:	2300      	moveq	r3, #0
 8108894:	b2db      	uxtb	r3, r3
 8108896:	2b00      	cmp	r3, #0
 8108898:	d007      	beq.n	81088aa <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810889a:	68bb      	ldr	r3, [r7, #8]
 810889c:	4a0a      	ldr	r2, [pc, #40]	@ (81088c8 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x5c>)
 810889e:	4293      	cmp	r3, r2
 81088a0:	d901      	bls.n	81088a6 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81088a2:	f01a ff4b 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81088a6:	f01a ff46 	bl	8123736 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81088aa:	68ba      	ldr	r2, [r7, #8]
 81088ac:	4613      	mov	r3, r2
 81088ae:	00db      	lsls	r3, r3, #3
 81088b0:	1a9b      	subs	r3, r3, r2
 81088b2:	009b      	lsls	r3, r3, #2
 81088b4:	4618      	mov	r0, r3
 81088b6:	f01a fe70 	bl	812359a <_Znwj>
 81088ba:	4603      	mov	r3, r0
 81088bc:	bf00      	nop
      }
 81088be:	4618      	mov	r0, r3
 81088c0:	3710      	adds	r7, #16
 81088c2:	46bd      	mov	sp, r7
 81088c4:	bd80      	pop	{r7, pc}
 81088c6:	bf00      	nop
 81088c8:	09249249 	.word	0x09249249

081088cc <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 81088cc:	b590      	push	{r4, r7, lr}
 81088ce:	b087      	sub	sp, #28
 81088d0:	af00      	add	r7, sp, #0
 81088d2:	60f8      	str	r0, [r7, #12]
 81088d4:	60b9      	str	r1, [r7, #8]
 81088d6:	607a      	str	r2, [r7, #4]
 81088d8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 81088da:	687b      	ldr	r3, [r7, #4]
 81088dc:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 81088de:	e01a      	b.n	8108916 <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 81088e0:	f107 0314 	add.w	r3, r7, #20
 81088e4:	4618      	mov	r0, r3
 81088e6:	f000 f8bc 	bl	8108a62 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevEdeEv>
 81088ea:	4603      	mov	r3, r0
 81088ec:	4618      	mov	r0, r3
 81088ee:	f7ff fe4f 	bl	8108590 <_ZSt11__addressofI8SMessageEPT_RS1_>
 81088f2:	4604      	mov	r4, r0
 81088f4:	68f8      	ldr	r0, [r7, #12]
 81088f6:	f7ff fe4b 	bl	8108590 <_ZSt11__addressofI8SMessageEPT_RS1_>
 81088fa:	4603      	mov	r3, r0
 81088fc:	683a      	ldr	r2, [r7, #0]
 81088fe:	4619      	mov	r1, r3
 8108900:	4620      	mov	r0, r4
 8108902:	f000 f8ba 	bl	8108a7a <_ZSt19__relocate_object_aI8SMessageS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8108906:	68fb      	ldr	r3, [r7, #12]
 8108908:	331c      	adds	r3, #28
 810890a:	60fb      	str	r3, [r7, #12]
 810890c:	f107 0314 	add.w	r3, r7, #20
 8108910:	4618      	mov	r0, r3
 8108912:	f000 f895 	bl	8108a40 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEppEv>
 8108916:	68fa      	ldr	r2, [r7, #12]
 8108918:	68bb      	ldr	r3, [r7, #8]
 810891a:	429a      	cmp	r2, r3
 810891c:	d1e0      	bne.n	81088e0 <_ZSt14__relocate_a_1IP8SMessageN9__gnu_cxx17__normal_iteratorIS1_vEESaIS0_EET0_T_S7_S6_RT1_+0x14>
      return __cur;
 810891e:	697b      	ldr	r3, [r7, #20]
    }
 8108920:	4618      	mov	r0, r3
 8108922:	371c      	adds	r7, #28
 8108924:	46bd      	mov	sp, r7
 8108926:	bd90      	pop	{r4, r7, pc}

08108928 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8108928:	b480      	push	{r7}
 810892a:	b083      	sub	sp, #12
 810892c:	af00      	add	r7, sp, #0
 810892e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	4618      	mov	r0, r3
 8108934:	370c      	adds	r7, #12
 8108936:	46bd      	mov	sp, r7
 8108938:	f85d 7b04 	ldr.w	r7, [sp], #4
 810893c:	4770      	bx	lr

0810893e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810893e:	b5b0      	push	{r4, r5, r7, lr}
 8108940:	b084      	sub	sp, #16
 8108942:	af00      	add	r7, sp, #0
 8108944:	60f8      	str	r0, [r7, #12]
 8108946:	60b9      	str	r1, [r7, #8]
 8108948:	607a      	str	r2, [r7, #4]
 810894a:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810894c:	6878      	ldr	r0, [r7, #4]
 810894e:	f7ff f963 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8108952:	4604      	mov	r4, r0
 8108954:	6838      	ldr	r0, [r7, #0]
 8108956:	f7ff f96a 	bl	8107c2e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810895a:	4605      	mov	r5, r0
 810895c:	6a38      	ldr	r0, [r7, #32]
 810895e:	f7ff f971 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8108962:	4603      	mov	r3, r0
 8108964:	462a      	mov	r2, r5
 8108966:	4621      	mov	r1, r4
 8108968:	68b8      	ldr	r0, [r7, #8]
 810896a:	f000 f8b1 	bl	8108ad0 <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 810896e:	bf00      	nop
 8108970:	3710      	adds	r7, #16
 8108972:	46bd      	mov	sp, r7
 8108974:	bdb0      	pop	{r4, r5, r7, pc}

08108976 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8108976:	b5b0      	push	{r4, r5, r7, lr}
 8108978:	b084      	sub	sp, #16
 810897a:	af00      	add	r7, sp, #0
 810897c:	60f8      	str	r0, [r7, #12]
 810897e:	60b9      	str	r1, [r7, #8]
 8108980:	607a      	str	r2, [r7, #4]
 8108982:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8108984:	6878      	ldr	r0, [r7, #4]
 8108986:	f7ff f947 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810898a:	4604      	mov	r4, r0
 810898c:	6838      	ldr	r0, [r7, #0]
 810898e:	f7ff fac8 	bl	8107f22 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8108992:	4605      	mov	r5, r0
 8108994:	6a38      	ldr	r0, [r7, #32]
 8108996:	f7ff f955 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810899a:	4603      	mov	r3, r0
 810899c:	462a      	mov	r2, r5
 810899e:	4621      	mov	r1, r4
 81089a0:	68b8      	ldr	r0, [r7, #8]
 81089a2:	f000 f8ce 	bl	8108b42 <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJOS2_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 81089a6:	bf00      	nop
 81089a8:	3710      	adds	r7, #16
 81089aa:	46bd      	mov	sp, r7
 81089ac:	bdb0      	pop	{r4, r5, r7, pc}

081089ae <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81089ae:	b580      	push	{r7, lr}
 81089b0:	b084      	sub	sp, #16
 81089b2:	af00      	add	r7, sp, #0
 81089b4:	60f8      	str	r0, [r7, #12]
 81089b6:	60b9      	str	r1, [r7, #8]
 81089b8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81089ba:	687a      	ldr	r2, [r7, #4]
 81089bc:	4613      	mov	r3, r2
 81089be:	005b      	lsls	r3, r3, #1
 81089c0:	4413      	add	r3, r2
 81089c2:	00db      	lsls	r3, r3, #3
 81089c4:	4619      	mov	r1, r3
 81089c6:	68b8      	ldr	r0, [r7, #8]
 81089c8:	f01a fdd6 	bl	8123578 <_ZdlPvj>
      }
 81089cc:	3710      	adds	r7, #16
 81089ce:	46bd      	mov	sp, r7
 81089d0:	bd80      	pop	{r7, pc}

081089d2 <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRS2_RS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 81089d2:	b5b0      	push	{r4, r5, r7, lr}
 81089d4:	b084      	sub	sp, #16
 81089d6:	af00      	add	r7, sp, #0
 81089d8:	60f8      	str	r0, [r7, #12]
 81089da:	60b9      	str	r1, [r7, #8]
 81089dc:	607a      	str	r2, [r7, #4]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 81089de:	68fb      	ldr	r3, [r7, #12]
 81089e0:	4619      	mov	r1, r3
 81089e2:	2008      	movs	r0, #8
 81089e4:	f7f8 fc48 	bl	8101278 <_ZnwjPv>
 81089e8:	4604      	mov	r4, r0
 81089ea:	68b8      	ldr	r0, [r7, #8]
 81089ec:	f7fe fb69 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81089f0:	4605      	mov	r5, r0
 81089f2:	6878      	ldr	r0, [r7, #4]
 81089f4:	f7fe fb70 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81089f8:	4603      	mov	r3, r0
 81089fa:	461a      	mov	r2, r3
 81089fc:	4629      	mov	r1, r5
 81089fe:	4620      	mov	r0, r4
 8108a00:	f000 f8f8 	bl	8108bf4 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_EEOT_OT0_>
 8108a04:	4623      	mov	r3, r4
 8108a06:	4618      	mov	r0, r3
 8108a08:	3710      	adds	r7, #16
 8108a0a:	46bd      	mov	sp, r7
 8108a0c:	bdb0      	pop	{r4, r5, r7, pc}

08108a0e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8108a0e:	b480      	push	{r7}
 8108a10:	b083      	sub	sp, #12
 8108a12:	af00      	add	r7, sp, #0
 8108a14:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8108a16:	687b      	ldr	r3, [r7, #4]
 8108a18:	4618      	mov	r0, r3
 8108a1a:	370c      	adds	r7, #12
 8108a1c:	46bd      	mov	sp, r7
 8108a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a22:	4770      	bx	lr

08108a24 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8108a24:	b480      	push	{r7}
 8108a26:	b083      	sub	sp, #12
 8108a28:	af00      	add	r7, sp, #0
 8108a2a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8108a2c:	4b03      	ldr	r3, [pc, #12]	@ (8108a3c <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
      }
 8108a2e:	4618      	mov	r0, r3
 8108a30:	370c      	adds	r7, #12
 8108a32:	46bd      	mov	sp, r7
 8108a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a38:	4770      	bx	lr
 8108a3a:	bf00      	nop
 8108a3c:	04924924 	.word	0x04924924

08108a40 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessagevEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8108a40:	b480      	push	{r7}
 8108a42:	b083      	sub	sp, #12
 8108a44:	af00      	add	r7, sp, #0
 8108a46:	6078      	str	r0, [r7, #4]
	++_M_current;
 8108a48:	687b      	ldr	r3, [r7, #4]
 8108a4a:	681b      	ldr	r3, [r3, #0]
 8108a4c:	f103 021c 	add.w	r2, r3, #28
 8108a50:	687b      	ldr	r3, [r7, #4]
 8108a52:	601a      	str	r2, [r3, #0]
	return *this;
 8108a54:	687b      	ldr	r3, [r7, #4]
      }
 8108a56:	4618      	mov	r0, r3
 8108a58:	370c      	adds	r7, #12
 8108a5a:	46bd      	mov	sp, r7
 8108a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a60:	4770      	bx	lr

08108a62 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessagevEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8108a62:	b480      	push	{r7}
 8108a64:	b083      	sub	sp, #12
 8108a66:	af00      	add	r7, sp, #0
 8108a68:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	681b      	ldr	r3, [r3, #0]
 8108a6e:	4618      	mov	r0, r3
 8108a70:	370c      	adds	r7, #12
 8108a72:	46bd      	mov	sp, r7
 8108a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a78:	4770      	bx	lr

08108a7a <_ZSt19__relocate_object_aI8SMessageS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8108a7a:	b580      	push	{r7, lr}
 8108a7c:	b084      	sub	sp, #16
 8108a7e:	af00      	add	r7, sp, #0
 8108a80:	60f8      	str	r0, [r7, #12]
 8108a82:	60b9      	str	r1, [r7, #8]
 8108a84:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8108a86:	68b8      	ldr	r0, [r7, #8]
 8108a88:	f000 f8cd 	bl	8108c26 <_ZSt4moveIR8SMessageEONSt16remove_referenceIT_E4typeEOS3_>
 8108a8c:	4603      	mov	r3, r0
 8108a8e:	461a      	mov	r2, r3
 8108a90:	68f9      	ldr	r1, [r7, #12]
 8108a92:	6878      	ldr	r0, [r7, #4]
 8108a94:	f000 f8d2 	bl	8108c3c <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8108a98:	68b8      	ldr	r0, [r7, #8]
 8108a9a:	f7ff fd79 	bl	8108590 <_ZSt11__addressofI8SMessageEPT_RS1_>
 8108a9e:	4603      	mov	r3, r0
 8108aa0:	4619      	mov	r1, r3
 8108aa2:	6878      	ldr	r0, [r7, #4]
 8108aa4:	f7ff f854 	bl	8107b50 <_ZNSt16allocator_traitsISaI8SMessageEE7destroyIS0_EEvRS1_PT_>
    }
 8108aa8:	bf00      	nop
 8108aaa:	3710      	adds	r7, #16
 8108aac:	46bd      	mov	sp, r7
 8108aae:	bd80      	pop	{r7, pc}

08108ab0 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 8108ab0:	b580      	push	{r7, lr}
 8108ab2:	b082      	sub	sp, #8
 8108ab4:	af00      	add	r7, sp, #0
 8108ab6:	6078      	str	r0, [r7, #4]
 8108ab8:	6039      	str	r1, [r7, #0]
 8108aba:	687b      	ldr	r3, [r7, #4]
 8108abc:	683a      	ldr	r2, [r7, #0]
 8108abe:	4611      	mov	r1, r2
 8108ac0:	4618      	mov	r0, r3
 8108ac2:	f000 f8cd 	bl	8108c60 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	4618      	mov	r0, r3
 8108aca:	3708      	adds	r7, #8
 8108acc:	46bd      	mov	sp, r7
 8108ace:	bd80      	pop	{r7, pc}

08108ad0 <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8108ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108ad2:	b087      	sub	sp, #28
 8108ad4:	af00      	add	r7, sp, #0
 8108ad6:	60f8      	str	r0, [r7, #12]
 8108ad8:	60b9      	str	r1, [r7, #8]
 8108ada:	607a      	str	r2, [r7, #4]
 8108adc:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8108ade:	68fb      	ldr	r3, [r7, #12]
 8108ae0:	4619      	mov	r1, r3
 8108ae2:	2008      	movs	r0, #8
 8108ae4:	f7f8 fbc8 	bl	8101278 <_ZnwjPv>
 8108ae8:	4604      	mov	r4, r0
 8108aea:	68b8      	ldr	r0, [r7, #8]
 8108aec:	f7ff f894 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8108af0:	6878      	ldr	r0, [r7, #4]
 8108af2:	f7ff f89c 	bl	8107c2e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8108af6:	4602      	mov	r2, r0
 8108af8:	f107 0314 	add.w	r3, r7, #20
 8108afc:	4611      	mov	r1, r2
 8108afe:	4618      	mov	r0, r3
 8108b00:	f7ff ffd6 	bl	8108ab0 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8108b04:	6838      	ldr	r0, [r7, #0]
 8108b06:	f7ff f89d 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8108b0a:	f107 0214 	add.w	r2, r7, #20
 8108b0e:	4633      	mov	r3, r6
 8108b10:	4629      	mov	r1, r5
 8108b12:	4620      	mov	r0, r4
 8108b14:	f000 f8b4 	bl	8108c80 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8108b18:	4623      	mov	r3, r4
 8108b1a:	4618      	mov	r0, r3
 8108b1c:	371c      	adds	r7, #28
 8108b1e:	46bd      	mov	sp, r7
 8108b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108b22 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
 8108b22:	b580      	push	{r7, lr}
 8108b24:	b082      	sub	sp, #8
 8108b26:	af00      	add	r7, sp, #0
 8108b28:	6078      	str	r0, [r7, #4]
 8108b2a:	6039      	str	r1, [r7, #0]
 8108b2c:	687b      	ldr	r3, [r7, #4]
 8108b2e:	683a      	ldr	r2, [r7, #0]
 8108b30:	4611      	mov	r1, r2
 8108b32:	4618      	mov	r0, r3
 8108b34:	f000 f8b8 	bl	8108ca8 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8108b38:	687b      	ldr	r3, [r7, #4]
 8108b3a:	4618      	mov	r0, r3
 8108b3c:	3708      	adds	r7, #8
 8108b3e:	46bd      	mov	sp, r7
 8108b40:	bd80      	pop	{r7, pc}

08108b42 <_ZSt12construct_atISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEJRKSt21piecewise_construct_tSt5tupleIJOS2_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8108b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108b44:	b087      	sub	sp, #28
 8108b46:	af00      	add	r7, sp, #0
 8108b48:	60f8      	str	r0, [r7, #12]
 8108b4a:	60b9      	str	r1, [r7, #8]
 8108b4c:	607a      	str	r2, [r7, #4]
 8108b4e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8108b50:	68fb      	ldr	r3, [r7, #12]
 8108b52:	4619      	mov	r1, r3
 8108b54:	2008      	movs	r0, #8
 8108b56:	f7f8 fb8f 	bl	8101278 <_ZnwjPv>
 8108b5a:	4604      	mov	r4, r0
 8108b5c:	68b8      	ldr	r0, [r7, #8]
 8108b5e:	f7ff f85b 	bl	8107c18 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8108b62:	6878      	ldr	r0, [r7, #4]
 8108b64:	f7ff f9dd 	bl	8107f22 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8108b68:	4602      	mov	r2, r0
 8108b6a:	f107 0314 	add.w	r3, r7, #20
 8108b6e:	4611      	mov	r1, r2
 8108b70:	4618      	mov	r0, r3
 8108b72:	f7ff ffd6 	bl	8108b22 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8108b76:	6838      	ldr	r0, [r7, #0]
 8108b78:	f7ff f864 	bl	8107c44 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8108b7c:	f107 0214 	add.w	r2, r7, #20
 8108b80:	4633      	mov	r3, r6
 8108b82:	4629      	mov	r1, r5
 8108b84:	4620      	mov	r0, r4
 8108b86:	f000 f89f 	bl	8108cc8 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8108b8a:	4623      	mov	r3, r4
 8108b8c:	4618      	mov	r0, r3
 8108b8e:	371c      	adds	r7, #28
 8108b90:	46bd      	mov	sp, r7
 8108b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108b94 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8108b94:	b580      	push	{r7, lr}
 8108b96:	b084      	sub	sp, #16
 8108b98:	af00      	add	r7, sp, #0
 8108b9a:	60f8      	str	r0, [r7, #12]
 8108b9c:	60b9      	str	r1, [r7, #8]
 8108b9e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8108ba0:	68f8      	ldr	r0, [r7, #12]
 8108ba2:	f000 f8a5 	bl	8108cf0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 8108ba6:	4602      	mov	r2, r0
 8108ba8:	68bb      	ldr	r3, [r7, #8]
 8108baa:	4293      	cmp	r3, r2
 8108bac:	bf8c      	ite	hi
 8108bae:	2301      	movhi	r3, #1
 8108bb0:	2300      	movls	r3, #0
 8108bb2:	b2db      	uxtb	r3, r3
 8108bb4:	2b00      	cmp	r3, #0
 8108bb6:	bf14      	ite	ne
 8108bb8:	2301      	movne	r3, #1
 8108bba:	2300      	moveq	r3, #0
 8108bbc:	b2db      	uxtb	r3, r3
 8108bbe:	2b00      	cmp	r3, #0
 8108bc0:	d007      	beq.n	8108bd2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8108bc2:	68bb      	ldr	r3, [r7, #8]
 8108bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8108bf0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x5c>)
 8108bc6:	4293      	cmp	r3, r2
 8108bc8:	d901      	bls.n	8108bce <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8108bca:	f01a fdb7 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8108bce:	f01a fdb2 	bl	8123736 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8108bd2:	68ba      	ldr	r2, [r7, #8]
 8108bd4:	4613      	mov	r3, r2
 8108bd6:	005b      	lsls	r3, r3, #1
 8108bd8:	4413      	add	r3, r2
 8108bda:	00db      	lsls	r3, r3, #3
 8108bdc:	4618      	mov	r0, r3
 8108bde:	f01a fcdc 	bl	812359a <_Znwj>
 8108be2:	4603      	mov	r3, r0
 8108be4:	bf00      	nop
      }
 8108be6:	4618      	mov	r0, r3
 8108be8:	3710      	adds	r7, #16
 8108bea:	46bd      	mov	sp, r7
 8108bec:	bd80      	pop	{r7, pc}
 8108bee:	bf00      	nop
 8108bf0:	0aaaaaaa 	.word	0x0aaaaaaa

08108bf4 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
 8108bf4:	b580      	push	{r7, lr}
 8108bf6:	b084      	sub	sp, #16
 8108bf8:	af00      	add	r7, sp, #0
 8108bfa:	60f8      	str	r0, [r7, #12]
 8108bfc:	60b9      	str	r1, [r7, #8]
 8108bfe:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8108c00:	68b8      	ldr	r0, [r7, #8]
 8108c02:	f7fe fa5e 	bl	81070c2 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8108c06:	4603      	mov	r3, r0
 8108c08:	781a      	ldrb	r2, [r3, #0]
 8108c0a:	68fb      	ldr	r3, [r7, #12]
 8108c0c:	701a      	strb	r2, [r3, #0]
 8108c0e:	6878      	ldr	r0, [r7, #4]
 8108c10:	f7fe fa62 	bl	81070d8 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8108c14:	4603      	mov	r3, r0
 8108c16:	681a      	ldr	r2, [r3, #0]
 8108c18:	68fb      	ldr	r3, [r7, #12]
 8108c1a:	605a      	str	r2, [r3, #4]
	{ }
 8108c1c:	68fb      	ldr	r3, [r7, #12]
 8108c1e:	4618      	mov	r0, r3
 8108c20:	3710      	adds	r7, #16
 8108c22:	46bd      	mov	sp, r7
 8108c24:	bd80      	pop	{r7, pc}

08108c26 <_ZSt4moveIR8SMessageEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8108c26:	b480      	push	{r7}
 8108c28:	b083      	sub	sp, #12
 8108c2a:	af00      	add	r7, sp, #0
 8108c2c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8108c2e:	687b      	ldr	r3, [r7, #4]
 8108c30:	4618      	mov	r0, r3
 8108c32:	370c      	adds	r7, #12
 8108c34:	46bd      	mov	sp, r7
 8108c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c3a:	4770      	bx	lr

08108c3c <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8108c3c:	b580      	push	{r7, lr}
 8108c3e:	b084      	sub	sp, #16
 8108c40:	af00      	add	r7, sp, #0
 8108c42:	60f8      	str	r0, [r7, #12]
 8108c44:	60b9      	str	r1, [r7, #8]
 8108c46:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8108c48:	6878      	ldr	r0, [r7, #4]
 8108c4a:	f000 f85f 	bl	8108d0c <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>
 8108c4e:	4603      	mov	r3, r0
 8108c50:	4619      	mov	r1, r3
 8108c52:	68b8      	ldr	r0, [r7, #8]
 8108c54:	f000 f865 	bl	8108d22 <_ZSt12construct_atI8SMessageJS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>
	}
 8108c58:	bf00      	nop
 8108c5a:	3710      	adds	r7, #16
 8108c5c:	46bd      	mov	sp, r7
 8108c5e:	bd80      	pop	{r7, pc}

08108c60 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8108c60:	b480      	push	{r7}
 8108c62:	b083      	sub	sp, #12
 8108c64:	af00      	add	r7, sp, #0
 8108c66:	6078      	str	r0, [r7, #4]
 8108c68:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	683a      	ldr	r2, [r7, #0]
 8108c6e:	6812      	ldr	r2, [r2, #0]
 8108c70:	601a      	str	r2, [r3, #0]
      { }
 8108c72:	687b      	ldr	r3, [r7, #4]
 8108c74:	4618      	mov	r0, r3
 8108c76:	370c      	adds	r7, #12
 8108c78:	46bd      	mov	sp, r7
 8108c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c7e:	4770      	bx	lr

08108c80 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8108c80:	b5b0      	push	{r4, r5, r7, lr}
 8108c82:	b086      	sub	sp, #24
 8108c84:	af02      	add	r7, sp, #8
 8108c86:	60f8      	str	r0, [r7, #12]
 8108c88:	7239      	strb	r1, [r7, #8]
 8108c8a:	607a      	str	r2, [r7, #4]
 8108c8c:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8108c8e:	463a      	mov	r2, r7
 8108c90:	f88d 4000 	strb.w	r4, [sp]
 8108c94:	462b      	mov	r3, r5
 8108c96:	6879      	ldr	r1, [r7, #4]
 8108c98:	68f8      	ldr	r0, [r7, #12]
 8108c9a:	f000 f85e 	bl	8108d5a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8108c9e:	68fb      	ldr	r3, [r7, #12]
 8108ca0:	4618      	mov	r0, r3
 8108ca2:	3710      	adds	r7, #16
 8108ca4:	46bd      	mov	sp, r7
 8108ca6:	bdb0      	pop	{r4, r5, r7, pc}

08108ca8 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8108ca8:	b480      	push	{r7}
 8108caa:	b083      	sub	sp, #12
 8108cac:	af00      	add	r7, sp, #0
 8108cae:	6078      	str	r0, [r7, #4]
 8108cb0:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8108cb2:	687b      	ldr	r3, [r7, #4]
 8108cb4:	683a      	ldr	r2, [r7, #0]
 8108cb6:	6812      	ldr	r2, [r2, #0]
 8108cb8:	601a      	str	r2, [r3, #0]
      { }
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	4618      	mov	r0, r3
 8108cbe:	370c      	adds	r7, #12
 8108cc0:	46bd      	mov	sp, r7
 8108cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cc6:	4770      	bx	lr

08108cc8 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8108cc8:	b5b0      	push	{r4, r5, r7, lr}
 8108cca:	b086      	sub	sp, #24
 8108ccc:	af02      	add	r7, sp, #8
 8108cce:	60f8      	str	r0, [r7, #12]
 8108cd0:	7239      	strb	r1, [r7, #8]
 8108cd2:	607a      	str	r2, [r7, #4]
 8108cd4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8108cd6:	463a      	mov	r2, r7
 8108cd8:	f88d 4000 	strb.w	r4, [sp]
 8108cdc:	462b      	mov	r3, r5
 8108cde:	6879      	ldr	r1, [r7, #4]
 8108ce0:	68f8      	ldr	r0, [r7, #12]
 8108ce2:	f000 f854 	bl	8108d8e <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8108ce6:	68fb      	ldr	r3, [r7, #12]
 8108ce8:	4618      	mov	r0, r3
 8108cea:	3710      	adds	r7, #16
 8108cec:	46bd      	mov	sp, r7
 8108cee:	bdb0      	pop	{r4, r5, r7, pc}

08108cf0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8108cf0:	b480      	push	{r7}
 8108cf2:	b083      	sub	sp, #12
 8108cf4:	af00      	add	r7, sp, #0
 8108cf6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8108cf8:	4b03      	ldr	r3, [pc, #12]	@ (8108d08 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 8108cfa:	4618      	mov	r0, r3
 8108cfc:	370c      	adds	r7, #12
 8108cfe:	46bd      	mov	sp, r7
 8108d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d04:	4770      	bx	lr
 8108d06:	bf00      	nop
 8108d08:	05555555 	.word	0x05555555

08108d0c <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8108d0c:	b480      	push	{r7}
 8108d0e:	b083      	sub	sp, #12
 8108d10:	af00      	add	r7, sp, #0
 8108d12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8108d14:	687b      	ldr	r3, [r7, #4]
 8108d16:	4618      	mov	r0, r3
 8108d18:	370c      	adds	r7, #12
 8108d1a:	46bd      	mov	sp, r7
 8108d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d20:	4770      	bx	lr

08108d22 <_ZSt12construct_atI8SMessageJS0_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS2_DpOS3_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8108d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108d24:	b083      	sub	sp, #12
 8108d26:	af00      	add	r7, sp, #0
 8108d28:	6078      	str	r0, [r7, #4]
 8108d2a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	4619      	mov	r1, r3
 8108d30:	201c      	movs	r0, #28
 8108d32:	f7f8 faa1 	bl	8101278 <_ZnwjPv>
 8108d36:	4606      	mov	r6, r0
 8108d38:	6838      	ldr	r0, [r7, #0]
 8108d3a:	f7ff ffe7 	bl	8108d0c <_ZSt7forwardI8SMessageEOT_RNSt16remove_referenceIS1_E4typeE>
 8108d3e:	4603      	mov	r3, r0
 8108d40:	4634      	mov	r4, r6
 8108d42:	461d      	mov	r5, r3
 8108d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108d48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8108d4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8108d50:	4633      	mov	r3, r6
 8108d52:	4618      	mov	r0, r3
 8108d54:	370c      	adds	r7, #12
 8108d56:	46bd      	mov	sp, r7
 8108d58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108d5a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8108d5a:	b580      	push	{r7, lr}
 8108d5c:	b084      	sub	sp, #16
 8108d5e:	af00      	add	r7, sp, #0
 8108d60:	60f8      	str	r0, [r7, #12]
 8108d62:	60b9      	str	r1, [r7, #8]
 8108d64:	607a      	str	r2, [r7, #4]
 8108d66:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8108d68:	68b8      	ldr	r0, [r7, #8]
 8108d6a:	f000 f82a 	bl	8108dc2 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8108d6e:	4603      	mov	r3, r0
 8108d70:	4618      	mov	r0, r3
 8108d72:	f000 f833 	bl	8108ddc <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 8108d76:	4603      	mov	r3, r0
 8108d78:	781a      	ldrb	r2, [r3, #0]
 8108d7a:	68fb      	ldr	r3, [r7, #12]
 8108d7c:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8108d7e:	68fb      	ldr	r3, [r7, #12]
 8108d80:	2200      	movs	r2, #0
 8108d82:	605a      	str	r2, [r3, #4]
      { }
 8108d84:	68fb      	ldr	r3, [r7, #12]
 8108d86:	4618      	mov	r0, r3
 8108d88:	3710      	adds	r7, #16
 8108d8a:	46bd      	mov	sp, r7
 8108d8c:	bd80      	pop	{r7, pc}

08108d8e <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8108d8e:	b580      	push	{r7, lr}
 8108d90:	b084      	sub	sp, #16
 8108d92:	af00      	add	r7, sp, #0
 8108d94:	60f8      	str	r0, [r7, #12]
 8108d96:	60b9      	str	r1, [r7, #8]
 8108d98:	607a      	str	r2, [r7, #4]
 8108d9a:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8108d9c:	68b8      	ldr	r0, [r7, #8]
 8108d9e:	f000 f828 	bl	8108df2 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8108da2:	4603      	mov	r3, r0
 8108da4:	4618      	mov	r0, r3
 8108da6:	f000 f831 	bl	8108e0c <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8108daa:	4603      	mov	r3, r0
 8108dac:	781a      	ldrb	r2, [r3, #0]
 8108dae:	68fb      	ldr	r3, [r7, #12]
 8108db0:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8108db2:	68fb      	ldr	r3, [r7, #12]
 8108db4:	2200      	movs	r2, #0
 8108db6:	605a      	str	r2, [r3, #4]
      { }
 8108db8:	68fb      	ldr	r3, [r7, #12]
 8108dba:	4618      	mov	r0, r3
 8108dbc:	3710      	adds	r7, #16
 8108dbe:	46bd      	mov	sp, r7
 8108dc0:	bd80      	pop	{r7, pc}

08108dc2 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8108dc2:	b580      	push	{r7, lr}
 8108dc4:	b082      	sub	sp, #8
 8108dc6:	af00      	add	r7, sp, #0
 8108dc8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	4618      	mov	r0, r3
 8108dce:	f000 f828 	bl	8108e22 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8108dd2:	4603      	mov	r3, r0
 8108dd4:	4618      	mov	r0, r3
 8108dd6:	3708      	adds	r7, #8
 8108dd8:	46bd      	mov	sp, r7
 8108dda:	bd80      	pop	{r7, pc}

08108ddc <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8108ddc:	b480      	push	{r7}
 8108dde:	b083      	sub	sp, #12
 8108de0:	af00      	add	r7, sp, #0
 8108de2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8108de4:	687b      	ldr	r3, [r7, #4]
 8108de6:	4618      	mov	r0, r3
 8108de8:	370c      	adds	r7, #12
 8108dea:	46bd      	mov	sp, r7
 8108dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108df0:	4770      	bx	lr

08108df2 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8108df2:	b580      	push	{r7, lr}
 8108df4:	b082      	sub	sp, #8
 8108df6:	af00      	add	r7, sp, #0
 8108df8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	4618      	mov	r0, r3
 8108dfe:	f000 f81c 	bl	8108e3a <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8108e02:	4603      	mov	r3, r0
 8108e04:	4618      	mov	r0, r3
 8108e06:	3708      	adds	r7, #8
 8108e08:	46bd      	mov	sp, r7
 8108e0a:	bd80      	pop	{r7, pc}

08108e0c <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8108e0c:	b480      	push	{r7}
 8108e0e:	b083      	sub	sp, #12
 8108e10:	af00      	add	r7, sp, #0
 8108e12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	4618      	mov	r0, r3
 8108e18:	370c      	adds	r7, #12
 8108e1a:	46bd      	mov	sp, r7
 8108e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e20:	4770      	bx	lr

08108e22 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8108e22:	b580      	push	{r7, lr}
 8108e24:	b082      	sub	sp, #8
 8108e26:	af00      	add	r7, sp, #0
 8108e28:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8108e2a:	6878      	ldr	r0, [r7, #4]
 8108e2c:	f000 f811 	bl	8108e52 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 8108e30:	4603      	mov	r3, r0
 8108e32:	4618      	mov	r0, r3
 8108e34:	3708      	adds	r7, #8
 8108e36:	46bd      	mov	sp, r7
 8108e38:	bd80      	pop	{r7, pc}

08108e3a <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8108e3a:	b580      	push	{r7, lr}
 8108e3c:	b082      	sub	sp, #8
 8108e3e:	af00      	add	r7, sp, #0
 8108e40:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8108e42:	6878      	ldr	r0, [r7, #4]
 8108e44:	f000 f812 	bl	8108e6c <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>
 8108e48:	4603      	mov	r3, r0
 8108e4a:	4618      	mov	r0, r3
 8108e4c:	3708      	adds	r7, #8
 8108e4e:	46bd      	mov	sp, r7
 8108e50:	bd80      	pop	{r7, pc}

08108e52 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8108e52:	b580      	push	{r7, lr}
 8108e54:	b082      	sub	sp, #8
 8108e56:	af00      	add	r7, sp, #0
 8108e58:	6078      	str	r0, [r7, #4]
 8108e5a:	687b      	ldr	r3, [r7, #4]
 8108e5c:	4618      	mov	r0, r3
 8108e5e:	f000 f812 	bl	8108e86 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 8108e62:	4603      	mov	r3, r0
 8108e64:	4618      	mov	r0, r3
 8108e66:	3708      	adds	r7, #8
 8108e68:	46bd      	mov	sp, r7
 8108e6a:	bd80      	pop	{r7, pc}

08108e6c <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>:
 8108e6c:	b580      	push	{r7, lr}
 8108e6e:	b082      	sub	sp, #8
 8108e70:	af00      	add	r7, sp, #0
 8108e72:	6078      	str	r0, [r7, #4]
 8108e74:	687b      	ldr	r3, [r7, #4]
 8108e76:	4618      	mov	r0, r3
 8108e78:	f000 f811 	bl	8108e9e <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>
 8108e7c:	4603      	mov	r3, r0
 8108e7e:	4618      	mov	r0, r3
 8108e80:	3708      	adds	r7, #8
 8108e82:	46bd      	mov	sp, r7
 8108e84:	bd80      	pop	{r7, pc}

08108e86 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8108e86:	b480      	push	{r7}
 8108e88:	b083      	sub	sp, #12
 8108e8a:	af00      	add	r7, sp, #0
 8108e8c:	6078      	str	r0, [r7, #4]
 8108e8e:	687b      	ldr	r3, [r7, #4]
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	4618      	mov	r0, r3
 8108e94:	370c      	adds	r7, #12
 8108e96:	46bd      	mov	sp, r7
 8108e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e9c:	4770      	bx	lr

08108e9e <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>:
 8108e9e:	b480      	push	{r7}
 8108ea0:	b083      	sub	sp, #12
 8108ea2:	af00      	add	r7, sp, #0
 8108ea4:	6078      	str	r0, [r7, #4]
 8108ea6:	687b      	ldr	r3, [r7, #4]
 8108ea8:	681b      	ldr	r3, [r3, #0]
 8108eaa:	4618      	mov	r0, r3
 8108eac:	370c      	adds	r7, #12
 8108eae:	46bd      	mov	sp, r7
 8108eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108eb4:	4770      	bx	lr

08108eb6 <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 8108eb6:	b580      	push	{r7, lr}
 8108eb8:	b086      	sub	sp, #24
 8108eba:	af00      	add	r7, sp, #0
 8108ebc:	6078      	str	r0, [r7, #4]
	ipc_start();
 8108ebe:	f7f8 f903 	bl	81010c8 <ipc_start>
	IPCDaemonNativeTask IPCDaemonNativeTaskInstance;
 8108ec2:	f107 030c 	add.w	r3, r7, #12
 8108ec6:	4618      	mov	r0, r3
 8108ec8:	f000 f80a 	bl	8108ee0 <_ZN19IPCDaemonNativeTaskC1Ev>

	for(;;)
	{
		IPCDaemonNativeTaskInstance.process();
 8108ecc:	f107 030c 	add.w	r3, r7, #12
 8108ed0:	4618      	mov	r0, r3
 8108ed2:	f000 f8b9 	bl	8109048 <_ZN19IPCDaemonNativeTask7processEv>
		osDelay(1);
 8108ed6:	2001      	movs	r0, #1
 8108ed8:	f00a fb17 	bl	811350a <osDelay>
		IPCDaemonNativeTaskInstance.process();
 8108edc:	bf00      	nop
 8108ede:	e7f5      	b.n	8108ecc <_Z18StartTask_EDaemonNPv+0x16>

08108ee0 <_ZN19IPCDaemonNativeTaskC1Ev>:
	}
}

IPCDaemonNativeTask::IPCDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8108ee0:	b580      	push	{r7, lr}
 8108ee2:	b082      	sub	sp, #8
 8108ee4:	af00      	add	r7, sp, #0
 8108ee6:	6078      	str	r0, [r7, #4]
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	4a05      	ldr	r2, [pc, #20]	@ (8108f00 <_ZN19IPCDaemonNativeTaskC1Ev+0x20>)
 8108eec:	6811      	ldr	r1, [r2, #0]
 8108eee:	2207      	movs	r2, #7
 8108ef0:	4618      	mov	r0, r3
 8108ef2:	f7fd fbc7 	bl	8106684 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 8108ef6:	687b      	ldr	r3, [r7, #4]
 8108ef8:	4618      	mov	r0, r3
 8108efa:	3708      	adds	r7, #8
 8108efc:	46bd      	mov	sp, r7
 8108efe:	bd80      	pop	{r7, pc}
 8108f00:	100001d0 	.word	0x100001d0

08108f04 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void IPCDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
{
 8108f04:	b082      	sub	sp, #8
 8108f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108f08:	b08f      	sub	sp, #60	@ 0x3c
 8108f0a:	af04      	add	r7, sp, #16
 8108f0c:	6078      	str	r0, [r7, #4]
 8108f0e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8108f12:	e880 000c 	stmia.w	r0, {r2, r3}
 8108f16:	460b      	mov	r3, r1
 8108f18:	70fb      	strb	r3, [r7, #3]
	switch(eventReceiver)
 8108f1a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8108f1e:	2b05      	cmp	r3, #5
 8108f20:	d023      	beq.n	8108f6a <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
 8108f22:	2b05      	cmp	r3, #5
 8108f24:	dc34      	bgt.n	8108f90 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
 8108f26:	2b00      	cmp	r3, #0
 8108f28:	d002      	beq.n	8108f30 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2c>
 8108f2a:	2b03      	cmp	r3, #3
 8108f2c:	d01d      	beq.n	8108f6a <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
	// if recipient is on CM4 side, then forward to event manager.
	case EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER:
	case EVENT_CLIENT_THERMOMETER:
		event_bus.send(event, msg, eventReceiver);
	default:
		break;;
 8108f2e:	e02f      	b.n	8108f90 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
		sMsg.event_type = event;
 8108f30:	78fb      	ldrb	r3, [r7, #3]
 8108f32:	723b      	strb	r3, [r7, #8]
		sMsg.message_data = msg;
 8108f34:	f107 040c 	add.w	r4, r7, #12
 8108f38:	f107 0540 	add.w	r5, r7, #64	@ 0x40
 8108f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108f40:	682b      	ldr	r3, [r5, #0]
 8108f42:	6023      	str	r3, [r4, #0]
		sMsg.event_sender = eventSender;
 8108f44:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8108f48:	f887 3020 	strb.w	r3, [r7, #32]
		sMsg.event_receiver = eventReceiver;
 8108f4c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8108f50:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		size_t len = sizeof(sMsg);
 8108f54:	231c      	movs	r3, #28
 8108f56:	627b      	str	r3, [r7, #36]	@ 0x24
		ipc_sendmsg(&sMsg, len, 1000);
 8108f58:	f107 0308 	add.w	r3, r7, #8
 8108f5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8108f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108f62:	4618      	mov	r0, r3
 8108f64:	f7f8 f936 	bl	81011d4 <ipc_sendmsg>
		break;
 8108f68:	e013      	b.n	8108f92 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8e>
		event_bus.send(event, msg, eventReceiver);
 8108f6a:	687d      	ldr	r5, [r7, #4]
 8108f6c:	78fe      	ldrb	r6, [r7, #3]
 8108f6e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8108f72:	9303      	str	r3, [sp, #12]
 8108f74:	466c      	mov	r4, sp
 8108f76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8108f7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108f7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8108f82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8108f86:	cb0c      	ldmia	r3, {r2, r3}
 8108f88:	4631      	mov	r1, r6
 8108f8a:	4628      	mov	r0, r5
 8108f8c:	f7fd fb94 	bl	81066b8 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
		break;;
 8108f90:	bf00      	nop
	}
}
 8108f92:	bf00      	nop
 8108f94:	372c      	adds	r7, #44	@ 0x2c
 8108f96:	46bd      	mov	sp, r7
 8108f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8108f9c:	b002      	add	sp, #8
 8108f9e:	4770      	bx	lr

08108fa0 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>:

void IPCDaemonNativeTask::processIpcReceive()
{
 8108fa0:	b5b0      	push	{r4, r5, r7, lr}
 8108fa2:	b092      	sub	sp, #72	@ 0x48
 8108fa4:	af06      	add	r7, sp, #24
 8108fa6:	6078      	str	r0, [r7, #4]
	SMessage sMsg;
	size_t len = sizeof(sMsg);
 8108fa8:	231c      	movs	r3, #28
 8108faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	size_t ret = ipc_recvmsg(&sMsg, len, 0);
 8108fac:	f107 030c 	add.w	r3, r7, #12
 8108fb0:	2200      	movs	r2, #0
 8108fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8108fb4:	4618      	mov	r0, r3
 8108fb6:	f7f8 f935 	bl	8101224 <ipc_recvmsg>
 8108fba:	62b8      	str	r0, [r7, #40]	@ 0x28
	if(ret == len)
 8108fbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8108fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108fc0:	429a      	cmp	r2, r3
 8108fc2:	d114      	bne.n	8108fee <_ZN19IPCDaemonNativeTask17processIpcReceiveEv+0x4e>
	{
		OnEvent(sMsg.event_type, sMsg.message_data, sMsg.event_sender, sMsg.event_receiver);
 8108fc4:	7b3d      	ldrb	r5, [r7, #12]
 8108fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8108fca:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8108fce:	9204      	str	r2, [sp, #16]
 8108fd0:	9303      	str	r3, [sp, #12]
 8108fd2:	466c      	mov	r4, sp
 8108fd4:	f107 0318 	add.w	r3, r7, #24
 8108fd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8108fe0:	f107 0310 	add.w	r3, r7, #16
 8108fe4:	cb0c      	ldmia	r3, {r2, r3}
 8108fe6:	4629      	mov	r1, r5
 8108fe8:	6878      	ldr	r0, [r7, #4]
 8108fea:	f7ff ff8b 	bl	8108f04 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
	}
}
 8108fee:	bf00      	nop
 8108ff0:	3730      	adds	r7, #48	@ 0x30
 8108ff2:	46bd      	mov	sp, r7
 8108ff4:	bdb0      	pop	{r4, r5, r7, pc}

08108ff6 <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void IPCDaemonNativeTask::process()
{
	processIpcReceive();
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 8108ff6:	b082      	sub	sp, #8
 8108ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108ffa:	b089      	sub	sp, #36	@ 0x24
 8108ffc:	af06      	add	r7, sp, #24
 8108ffe:	6078      	str	r0, [r7, #4]
 8109000:	f107 0020 	add.w	r0, r7, #32
 8109004:	e880 000c 	stmia.w	r0, {r2, r3}
 8109008:	460b      	mov	r3, r1
 810900a:	70fb      	strb	r3, [r7, #3]
 810900c:	687b      	ldr	r3, [r7, #4]
 810900e:	681d      	ldr	r5, [r3, #0]
                      {this->OnEvent(event, msg, eventSender, eventReceiver);});
 8109010:	78fe      	ldrb	r6, [r7, #3]
 8109012:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8109016:	9304      	str	r3, [sp, #16]
 8109018:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 810901c:	9303      	str	r3, [sp, #12]
 810901e:	466c      	mov	r4, sp
 8109020:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8109024:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8109028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810902c:	f107 0320 	add.w	r3, r7, #32
 8109030:	cb0c      	ldmia	r3, {r2, r3}
 8109032:	4631      	mov	r1, r6
 8109034:	4628      	mov	r0, r5
 8109036:	f7ff ff65 	bl	8108f04 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 810903a:	bf00      	nop
 810903c:	370c      	adds	r7, #12
 810903e:	46bd      	mov	sp, r7
 8109040:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8109044:	b002      	add	sp, #8
 8109046:	4770      	bx	lr

08109048 <_ZN19IPCDaemonNativeTask7processEv>:
{
 8109048:	b590      	push	{r4, r7, lr}
 810904a:	b089      	sub	sp, #36	@ 0x24
 810904c:	af00      	add	r7, sp, #0
 810904e:	6078      	str	r0, [r7, #4]
	processIpcReceive();
 8109050:	6878      	ldr	r0, [r7, #4]
 8109052:	f7ff ffa5 	bl	8108fa0 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 8109056:	687c      	ldr	r4, [r7, #4]
 8109058:	687b      	ldr	r3, [r7, #4]
 810905a:	61fb      	str	r3, [r7, #28]
 810905c:	f107 021c 	add.w	r2, r7, #28
 8109060:	f107 030c 	add.w	r3, r7, #12
 8109064:	4611      	mov	r1, r2
 8109066:	4618      	mov	r0, r3
 8109068:	f000 f810 	bl	810908c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 810906c:	f107 030c 	add.w	r3, r7, #12
 8109070:	4619      	mov	r1, r3
 8109072:	4620      	mov	r0, r4
 8109074:	f7fd fb59 	bl	810672a <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 8109078:	f107 030c 	add.w	r3, r7, #12
 810907c:	4618      	mov	r0, r3
 810907e:	f7fc fc23 	bl	81058c8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
}
 8109082:	bf00      	nop
 8109084:	3724      	adds	r7, #36	@ 0x24
 8109086:	46bd      	mov	sp, r7
 8109088:	bd90      	pop	{r4, r7, pc}
	...

0810908c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
	function(_Functor&& __f)
 810908c:	b590      	push	{r4, r7, lr}
 810908e:	b083      	sub	sp, #12
 8109090:	af00      	add	r7, sp, #0
 8109092:	6078      	str	r0, [r7, #4]
 8109094:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	461a      	mov	r2, r3
 810909a:	2300      	movs	r3, #0
 810909c:	6013      	str	r3, [r2, #0]
 810909e:	6053      	str	r3, [r2, #4]
 81090a0:	6093      	str	r3, [r2, #8]
 81090a2:	687b      	ldr	r3, [r7, #4]
 81090a4:	4618      	mov	r0, r3
 81090a6:	f7fc ff92 	bl	8105fce <_ZNSt14_Function_baseC1Ev>
 81090aa:	687b      	ldr	r3, [r7, #4]
 81090ac:	2200      	movs	r2, #0
 81090ae:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 81090b0:	6838      	ldr	r0, [r7, #0]
 81090b2:	f000 f81b 	bl	81090ec <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 81090b6:	4603      	mov	r3, r0
 81090b8:	2b00      	cmp	r3, #0
 81090ba:	d00e      	beq.n	81090da <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 81090bc:	687c      	ldr	r4, [r7, #4]
 81090be:	6838      	ldr	r0, [r7, #0]
 81090c0:	f000 f81f 	bl	8109102 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 81090c4:	4603      	mov	r3, r0
 81090c6:	4619      	mov	r1, r3
 81090c8:	4620      	mov	r0, r4
 81090ca:	f000 f825 	bl	8109118 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	4a04      	ldr	r2, [pc, #16]	@ (81090e4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 81090d2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 81090d4:	687b      	ldr	r3, [r7, #4]
 81090d6:	4a04      	ldr	r2, [pc, #16]	@ (81090e8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 81090d8:	609a      	str	r2, [r3, #8]
	}
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	4618      	mov	r0, r3
 81090de:	370c      	adds	r7, #12
 81090e0:	46bd      	mov	sp, r7
 81090e2:	bd90      	pop	{r4, r7, pc}
 81090e4:	0810913d 	.word	0x0810913d
 81090e8:	0810918d 	.word	0x0810918d

081090ec <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 81090ec:	b480      	push	{r7}
 81090ee:	b083      	sub	sp, #12
 81090f0:	af00      	add	r7, sp, #0
 81090f2:	6078      	str	r0, [r7, #4]
	  { return true; }
 81090f4:	2301      	movs	r3, #1
 81090f6:	4618      	mov	r0, r3
 81090f8:	370c      	adds	r7, #12
 81090fa:	46bd      	mov	sp, r7
 81090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109100:	4770      	bx	lr

08109102 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8109102:	b480      	push	{r7}
 8109104:	b083      	sub	sp, #12
 8109106:	af00      	add	r7, sp, #0
 8109108:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810910a:	687b      	ldr	r3, [r7, #4]
 810910c:	4618      	mov	r0, r3
 810910e:	370c      	adds	r7, #12
 8109110:	46bd      	mov	sp, r7
 8109112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109116:	4770      	bx	lr

08109118 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8109118:	b590      	push	{r4, r7, lr}
 810911a:	b083      	sub	sp, #12
 810911c:	af00      	add	r7, sp, #0
 810911e:	6078      	str	r0, [r7, #4]
 8109120:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8109122:	6838      	ldr	r0, [r7, #0]
 8109124:	f7ff ffed 	bl	8109102 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8109128:	4603      	mov	r3, r0
 810912a:	4622      	mov	r2, r4
 810912c:	4619      	mov	r1, r3
 810912e:	6878      	ldr	r0, [r7, #4]
 8109130:	f000 f84b 	bl	81091ca <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8109134:	bf00      	nop
 8109136:	370c      	adds	r7, #12
 8109138:	46bd      	mov	sp, r7
 810913a:	bd90      	pop	{r4, r7, pc}

0810913c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 810913c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109140:	b086      	sub	sp, #24
 8109142:	af02      	add	r7, sp, #8
 8109144:	60f8      	str	r0, [r7, #12]
 8109146:	60b9      	str	r1, [r7, #8]
 8109148:	607a      	str	r2, [r7, #4]
 810914a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 810914c:	68f8      	ldr	r0, [r7, #12]
 810914e:	f000 f855 	bl	81091fc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8109152:	4604      	mov	r4, r0
 8109154:	68b8      	ldr	r0, [r7, #8]
 8109156:	f7fd f815 	bl	8106184 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810915a:	4605      	mov	r5, r0
 810915c:	6878      	ldr	r0, [r7, #4]
 810915e:	f7fd f81c 	bl	810619a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8109162:	4606      	mov	r6, r0
 8109164:	6838      	ldr	r0, [r7, #0]
 8109166:	f7fd f823 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810916a:	4680      	mov	r8, r0
 810916c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810916e:	f7fd f81f 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8109172:	4603      	mov	r3, r0
 8109174:	9300      	str	r3, [sp, #0]
 8109176:	4643      	mov	r3, r8
 8109178:	4632      	mov	r2, r6
 810917a:	4629      	mov	r1, r5
 810917c:	4620      	mov	r0, r4
 810917e:	f000 f84d 	bl	810921c <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 8109182:	bf00      	nop
      }
 8109184:	3710      	adds	r7, #16
 8109186:	46bd      	mov	sp, r7
 8109188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810918c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 810918c:	b590      	push	{r4, r7, lr}
 810918e:	b085      	sub	sp, #20
 8109190:	af00      	add	r7, sp, #0
 8109192:	60f8      	str	r0, [r7, #12]
 8109194:	60b9      	str	r1, [r7, #8]
 8109196:	4613      	mov	r3, r2
 8109198:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 810919a:	79fb      	ldrb	r3, [r7, #7]
 810919c:	2b01      	cmp	r3, #1
 810919e:	d109      	bne.n	81091b4 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 81091a0:	68b8      	ldr	r0, [r7, #8]
 81091a2:	f000 f82b 	bl	81091fc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81091a6:	4604      	mov	r4, r0
 81091a8:	68f8      	ldr	r0, [r7, #12]
 81091aa:	f000 f860 	bl	810926e <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 81091ae:	4603      	mov	r3, r0
 81091b0:	601c      	str	r4, [r3, #0]
	    break;
 81091b2:	e005      	b.n	81091c0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 81091b4:	79fb      	ldrb	r3, [r7, #7]
 81091b6:	461a      	mov	r2, r3
 81091b8:	68b9      	ldr	r1, [r7, #8]
 81091ba:	68f8      	ldr	r0, [r7, #12]
 81091bc:	f000 f864 	bl	8109288 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 81091c0:	2300      	movs	r3, #0
      }
 81091c2:	4618      	mov	r0, r3
 81091c4:	3714      	adds	r7, #20
 81091c6:	46bd      	mov	sp, r7
 81091c8:	bd90      	pop	{r4, r7, pc}

081091ca <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 81091ca:	b590      	push	{r4, r7, lr}
 81091cc:	b085      	sub	sp, #20
 81091ce:	af00      	add	r7, sp, #0
 81091d0:	60f8      	str	r0, [r7, #12]
 81091d2:	60b9      	str	r1, [r7, #8]
 81091d4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 81091d6:	68f8      	ldr	r0, [r7, #12]
 81091d8:	f7fc fa94 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 81091dc:	4603      	mov	r3, r0
 81091de:	4619      	mov	r1, r3
 81091e0:	2004      	movs	r0, #4
 81091e2:	f7f8 f849 	bl	8101278 <_ZnwjPv>
 81091e6:	4604      	mov	r4, r0
 81091e8:	68b8      	ldr	r0, [r7, #8]
 81091ea:	f7ff ff8a 	bl	8109102 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 81091ee:	4603      	mov	r3, r0
 81091f0:	681b      	ldr	r3, [r3, #0]
 81091f2:	6023      	str	r3, [r4, #0]
	  }
 81091f4:	bf00      	nop
 81091f6:	3714      	adds	r7, #20
 81091f8:	46bd      	mov	sp, r7
 81091fa:	bd90      	pop	{r4, r7, pc}

081091fc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 81091fc:	b580      	push	{r7, lr}
 81091fe:	b084      	sub	sp, #16
 8109200:	af00      	add	r7, sp, #0
 8109202:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8109204:	6878      	ldr	r0, [r7, #4]
 8109206:	f000 f879 	bl	81092fc <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 810920a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 810920c:	68f8      	ldr	r0, [r7, #12]
 810920e:	f000 f881 	bl	8109314 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 8109212:	4603      	mov	r3, r0
	}
 8109214:	4618      	mov	r0, r3
 8109216:	3710      	adds	r7, #16
 8109218:	46bd      	mov	sp, r7
 810921a:	bd80      	pop	{r7, pc}

0810921c <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES7_E4typeEOS8_DpOS9_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 810921c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8109220:	b087      	sub	sp, #28
 8109222:	af02      	add	r7, sp, #8
 8109224:	60f8      	str	r0, [r7, #12]
 8109226:	60b9      	str	r1, [r7, #8]
 8109228:	607a      	str	r2, [r7, #4]
 810922a:	603b      	str	r3, [r7, #0]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 810922c:	68f8      	ldr	r0, [r7, #12]
 810922e:	f000 f87c 	bl	810932a <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8109232:	4605      	mov	r5, r0
 8109234:	68b8      	ldr	r0, [r7, #8]
 8109236:	f7fc ffa5 	bl	8106184 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810923a:	4606      	mov	r6, r0
 810923c:	6878      	ldr	r0, [r7, #4]
 810923e:	f7fc ffac 	bl	810619a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8109242:	4680      	mov	r8, r0
 8109244:	6838      	ldr	r0, [r7, #0]
 8109246:	f7fc ffb3 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810924a:	4604      	mov	r4, r0
 810924c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810924e:	f7fc ffaf 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8109252:	4603      	mov	r3, r0
 8109254:	9301      	str	r3, [sp, #4]
 8109256:	9400      	str	r4, [sp, #0]
 8109258:	4643      	mov	r3, r8
 810925a:	4632      	mov	r2, r6
 810925c:	4629      	mov	r1, r5
 810925e:	4648      	mov	r0, r9
 8109260:	f000 f86e 	bl	8109340 <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8109264:	bf00      	nop
 8109266:	3714      	adds	r7, #20
 8109268:	46bd      	mov	sp, r7
 810926a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810926e <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810926e:	b580      	push	{r7, lr}
 8109270:	b082      	sub	sp, #8
 8109272:	af00      	add	r7, sp, #0
 8109274:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8109276:	6878      	ldr	r0, [r7, #4]
 8109278:	f7fc fa44 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 810927c:	4603      	mov	r3, r0
 810927e:	4618      	mov	r0, r3
 8109280:	3708      	adds	r7, #8
 8109282:	46bd      	mov	sp, r7
 8109284:	bd80      	pop	{r7, pc}
	...

08109288 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8109288:	b590      	push	{r4, r7, lr}
 810928a:	b085      	sub	sp, #20
 810928c:	af00      	add	r7, sp, #0
 810928e:	60f8      	str	r0, [r7, #12]
 8109290:	60b9      	str	r1, [r7, #8]
 8109292:	4613      	mov	r3, r2
 8109294:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8109296:	79fb      	ldrb	r3, [r7, #7]
 8109298:	2b03      	cmp	r3, #3
 810929a:	d82a      	bhi.n	81092f2 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 810929c:	a201      	add	r2, pc, #4	@ (adr r2, 81092a4 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 810929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81092a2:	bf00      	nop
 81092a4:	081092b5 	.word	0x081092b5
 81092a8:	081092c3 	.word	0x081092c3
 81092ac:	081092d7 	.word	0x081092d7
 81092b0:	081092e9 	.word	0x081092e9
	      __dest._M_access<const type_info*>() = nullptr;
 81092b4:	68f8      	ldr	r0, [r7, #12]
 81092b6:	f7fd f84a 	bl	810634e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 81092ba:	4603      	mov	r3, r0
 81092bc:	2200      	movs	r2, #0
 81092be:	601a      	str	r2, [r3, #0]
	      break;
 81092c0:	e017      	b.n	81092f2 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 81092c2:	68b8      	ldr	r0, [r7, #8]
 81092c4:	f7ff ff9a 	bl	81091fc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81092c8:	4604      	mov	r4, r0
 81092ca:	68f8      	ldr	r0, [r7, #12]
 81092cc:	f7ff ffcf 	bl	810926e <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 81092d0:	4603      	mov	r3, r0
 81092d2:	601c      	str	r4, [r3, #0]
	      break;
 81092d4:	e00d      	b.n	81092f2 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 81092d6:	68b8      	ldr	r0, [r7, #8]
 81092d8:	f7ff ff90 	bl	81091fc <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81092dc:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 81092de:	4619      	mov	r1, r3
 81092e0:	68f8      	ldr	r0, [r7, #12]
 81092e2:	f000 f860 	bl	81093a6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 81092e6:	e004      	b.n	81092f2 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 81092e8:	4621      	mov	r1, r4
 81092ea:	68f8      	ldr	r0, [r7, #12]
 81092ec:	f000 f86d 	bl	81093ca <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 81092f0:	bf00      	nop
	  return false;
 81092f2:	2300      	movs	r3, #0
	}
 81092f4:	4618      	mov	r0, r3
 81092f6:	3714      	adds	r7, #20
 81092f8:	46bd      	mov	sp, r7
 81092fa:	bd90      	pop	{r4, r7, pc}

081092fc <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 81092fc:	b580      	push	{r7, lr}
 81092fe:	b082      	sub	sp, #8
 8109300:	af00      	add	r7, sp, #0
 8109302:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8109304:	6878      	ldr	r0, [r7, #4]
 8109306:	f7fc fa08 	bl	810571a <_ZNKSt9_Any_data9_M_accessEv>
 810930a:	4603      	mov	r3, r0
 810930c:	4618      	mov	r0, r3
 810930e:	3708      	adds	r7, #8
 8109310:	46bd      	mov	sp, r7
 8109312:	bd80      	pop	{r7, pc}

08109314 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8109314:	b480      	push	{r7}
 8109316:	b083      	sub	sp, #12
 8109318:	af00      	add	r7, sp, #0
 810931a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	4618      	mov	r0, r3
 8109320:	370c      	adds	r7, #12
 8109322:	46bd      	mov	sp, r7
 8109324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109328:	4770      	bx	lr

0810932a <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810932a:	b480      	push	{r7}
 810932c:	b083      	sub	sp, #12
 810932e:	af00      	add	r7, sp, #0
 8109330:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8109332:	687b      	ldr	r3, [r7, #4]
 8109334:	4618      	mov	r0, r3
 8109336:	370c      	adds	r7, #12
 8109338:	46bd      	mov	sp, r7
 810933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810933e:	4770      	bx	lr

08109340 <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8109340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109344:	b08a      	sub	sp, #40	@ 0x28
 8109346:	af06      	add	r7, sp, #24
 8109348:	7338      	strb	r0, [r7, #12]
 810934a:	60b9      	str	r1, [r7, #8]
 810934c:	607a      	str	r2, [r7, #4]
 810934e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8109350:	68b8      	ldr	r0, [r7, #8]
 8109352:	f7ff ffea 	bl	810932a <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8109356:	4680      	mov	r8, r0
 8109358:	6878      	ldr	r0, [r7, #4]
 810935a:	f7fc ff13 	bl	8106184 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810935e:	4603      	mov	r3, r0
 8109360:	781e      	ldrb	r6, [r3, #0]
 8109362:	6838      	ldr	r0, [r7, #0]
 8109364:	f7fc ff19 	bl	810619a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8109368:	4604      	mov	r4, r0
 810936a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810936c:	f7fc ff20 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8109370:	4603      	mov	r3, r0
 8109372:	781d      	ldrb	r5, [r3, #0]
 8109374:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109376:	f7fc ff1b 	bl	81061b0 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810937a:	4603      	mov	r3, r0
 810937c:	781b      	ldrb	r3, [r3, #0]
 810937e:	9304      	str	r3, [sp, #16]
 8109380:	9503      	str	r5, [sp, #12]
 8109382:	466d      	mov	r5, sp
 8109384:	f104 0308 	add.w	r3, r4, #8
 8109388:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810938c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8109390:	e894 000c 	ldmia.w	r4, {r2, r3}
 8109394:	4631      	mov	r1, r6
 8109396:	4640      	mov	r0, r8
 8109398:	f7ff fe2d 	bl	8108ff6 <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 810939c:	bf00      	nop
 810939e:	3710      	adds	r7, #16
 81093a0:	46bd      	mov	sp, r7
 81093a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081093a6 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 81093a6:	b590      	push	{r4, r7, lr}
 81093a8:	b083      	sub	sp, #12
 81093aa:	af00      	add	r7, sp, #0
 81093ac:	6078      	str	r0, [r7, #4]
 81093ae:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 81093b0:	6838      	ldr	r0, [r7, #0]
 81093b2:	f000 f816 	bl	81093e2 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 81093b6:	4603      	mov	r3, r0
 81093b8:	4622      	mov	r2, r4
 81093ba:	4619      	mov	r1, r3
 81093bc:	6878      	ldr	r0, [r7, #4]
 81093be:	f000 f81b 	bl	81093f8 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 81093c2:	bf00      	nop
 81093c4:	370c      	adds	r7, #12
 81093c6:	46bd      	mov	sp, r7
 81093c8:	bd90      	pop	{r4, r7, pc}

081093ca <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 81093ca:	b580      	push	{r7, lr}
 81093cc:	b082      	sub	sp, #8
 81093ce:	af00      	add	r7, sp, #0
 81093d0:	6078      	str	r0, [r7, #4]
 81093d2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 81093d4:	6878      	ldr	r0, [r7, #4]
 81093d6:	f000 f828 	bl	810942a <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 81093da:	bf00      	nop
 81093dc:	3708      	adds	r7, #8
 81093de:	46bd      	mov	sp, r7
 81093e0:	bd80      	pop	{r7, pc}

081093e2 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81093e2:	b480      	push	{r7}
 81093e4:	b083      	sub	sp, #12
 81093e6:	af00      	add	r7, sp, #0
 81093e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	4618      	mov	r0, r3
 81093ee:	370c      	adds	r7, #12
 81093f0:	46bd      	mov	sp, r7
 81093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093f6:	4770      	bx	lr

081093f8 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 81093f8:	b590      	push	{r4, r7, lr}
 81093fa:	b085      	sub	sp, #20
 81093fc:	af00      	add	r7, sp, #0
 81093fe:	60f8      	str	r0, [r7, #12]
 8109400:	60b9      	str	r1, [r7, #8]
 8109402:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8109404:	68f8      	ldr	r0, [r7, #12]
 8109406:	f7fc f97d 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 810940a:	4603      	mov	r3, r0
 810940c:	4619      	mov	r1, r3
 810940e:	2004      	movs	r0, #4
 8109410:	f7f7 ff32 	bl	8101278 <_ZnwjPv>
 8109414:	4604      	mov	r4, r0
 8109416:	68b8      	ldr	r0, [r7, #8]
 8109418:	f7ff ffe3 	bl	81093e2 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 810941c:	4603      	mov	r3, r0
 810941e:	681b      	ldr	r3, [r3, #0]
 8109420:	6023      	str	r3, [r4, #0]
	  }
 8109422:	bf00      	nop
 8109424:	3714      	adds	r7, #20
 8109426:	46bd      	mov	sp, r7
 8109428:	bd90      	pop	{r4, r7, pc}

0810942a <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810942a:	b580      	push	{r7, lr}
 810942c:	b082      	sub	sp, #8
 810942e:	af00      	add	r7, sp, #0
 8109430:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8109432:	6878      	ldr	r0, [r7, #4]
 8109434:	f7fc f966 	bl	8105704 <_ZNSt9_Any_data9_M_accessEv>
 8109438:	4603      	mov	r3, r0
 810943a:	4618      	mov	r0, r3
 810943c:	3708      	adds	r7, #8
 810943e:	46bd      	mov	sp, r7
 8109440:	bd80      	pop	{r7, pc}
	...

08109444 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8109444:	b580      	push	{r7, lr}
 8109446:	b084      	sub	sp, #16
 8109448:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 810944a:	4b92      	ldr	r3, [pc, #584]	@ (8109694 <MX_LWIP_Init+0x250>)
 810944c:	22a9      	movs	r2, #169	@ 0xa9
 810944e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8109450:	4b90      	ldr	r3, [pc, #576]	@ (8109694 <MX_LWIP_Init+0x250>)
 8109452:	22fe      	movs	r2, #254	@ 0xfe
 8109454:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8109456:	4b8f      	ldr	r3, [pc, #572]	@ (8109694 <MX_LWIP_Init+0x250>)
 8109458:	2201      	movs	r2, #1
 810945a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 810945c:	4b8d      	ldr	r3, [pc, #564]	@ (8109694 <MX_LWIP_Init+0x250>)
 810945e:	2201      	movs	r2, #1
 8109460:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8109462:	4b8d      	ldr	r3, [pc, #564]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109464:	22ff      	movs	r2, #255	@ 0xff
 8109466:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8109468:	4b8b      	ldr	r3, [pc, #556]	@ (8109698 <MX_LWIP_Init+0x254>)
 810946a:	22ff      	movs	r2, #255	@ 0xff
 810946c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 810946e:	4b8a      	ldr	r3, [pc, #552]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109470:	2200      	movs	r2, #0
 8109472:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8109474:	4b88      	ldr	r3, [pc, #544]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109476:	2200      	movs	r2, #0
 8109478:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 810947a:	4b88      	ldr	r3, [pc, #544]	@ (810969c <MX_LWIP_Init+0x258>)
 810947c:	2200      	movs	r2, #0
 810947e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8109480:	4b86      	ldr	r3, [pc, #536]	@ (810969c <MX_LWIP_Init+0x258>)
 8109482:	2200      	movs	r2, #0
 8109484:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8109486:	4b85      	ldr	r3, [pc, #532]	@ (810969c <MX_LWIP_Init+0x258>)
 8109488:	2200      	movs	r2, #0
 810948a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 810948c:	4b83      	ldr	r3, [pc, #524]	@ (810969c <MX_LWIP_Init+0x258>)
 810948e:	2200      	movs	r2, #0
 8109490:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8109492:	2100      	movs	r1, #0
 8109494:	2000      	movs	r0, #0
 8109496:	f019 f9db 	bl	8122850 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 810949a:	4b7e      	ldr	r3, [pc, #504]	@ (8109694 <MX_LWIP_Init+0x250>)
 810949c:	781b      	ldrb	r3, [r3, #0]
 810949e:	061a      	lsls	r2, r3, #24
 81094a0:	4b7c      	ldr	r3, [pc, #496]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094a2:	785b      	ldrb	r3, [r3, #1]
 81094a4:	041b      	lsls	r3, r3, #16
 81094a6:	431a      	orrs	r2, r3
 81094a8:	4b7a      	ldr	r3, [pc, #488]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094aa:	789b      	ldrb	r3, [r3, #2]
 81094ac:	021b      	lsls	r3, r3, #8
 81094ae:	4313      	orrs	r3, r2
 81094b0:	4a78      	ldr	r2, [pc, #480]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094b2:	78d2      	ldrb	r2, [r2, #3]
 81094b4:	4313      	orrs	r3, r2
 81094b6:	061a      	lsls	r2, r3, #24
 81094b8:	4b76      	ldr	r3, [pc, #472]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094ba:	781b      	ldrb	r3, [r3, #0]
 81094bc:	0619      	lsls	r1, r3, #24
 81094be:	4b75      	ldr	r3, [pc, #468]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094c0:	785b      	ldrb	r3, [r3, #1]
 81094c2:	041b      	lsls	r3, r3, #16
 81094c4:	4319      	orrs	r1, r3
 81094c6:	4b73      	ldr	r3, [pc, #460]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094c8:	789b      	ldrb	r3, [r3, #2]
 81094ca:	021b      	lsls	r3, r3, #8
 81094cc:	430b      	orrs	r3, r1
 81094ce:	4971      	ldr	r1, [pc, #452]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094d0:	78c9      	ldrb	r1, [r1, #3]
 81094d2:	430b      	orrs	r3, r1
 81094d4:	021b      	lsls	r3, r3, #8
 81094d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81094da:	431a      	orrs	r2, r3
 81094dc:	4b6d      	ldr	r3, [pc, #436]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094de:	781b      	ldrb	r3, [r3, #0]
 81094e0:	0619      	lsls	r1, r3, #24
 81094e2:	4b6c      	ldr	r3, [pc, #432]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094e4:	785b      	ldrb	r3, [r3, #1]
 81094e6:	041b      	lsls	r3, r3, #16
 81094e8:	4319      	orrs	r1, r3
 81094ea:	4b6a      	ldr	r3, [pc, #424]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094ec:	789b      	ldrb	r3, [r3, #2]
 81094ee:	021b      	lsls	r3, r3, #8
 81094f0:	430b      	orrs	r3, r1
 81094f2:	4968      	ldr	r1, [pc, #416]	@ (8109694 <MX_LWIP_Init+0x250>)
 81094f4:	78c9      	ldrb	r1, [r1, #3]
 81094f6:	430b      	orrs	r3, r1
 81094f8:	0a1b      	lsrs	r3, r3, #8
 81094fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 81094fe:	431a      	orrs	r2, r3
 8109500:	4b64      	ldr	r3, [pc, #400]	@ (8109694 <MX_LWIP_Init+0x250>)
 8109502:	781b      	ldrb	r3, [r3, #0]
 8109504:	0619      	lsls	r1, r3, #24
 8109506:	4b63      	ldr	r3, [pc, #396]	@ (8109694 <MX_LWIP_Init+0x250>)
 8109508:	785b      	ldrb	r3, [r3, #1]
 810950a:	041b      	lsls	r3, r3, #16
 810950c:	4319      	orrs	r1, r3
 810950e:	4b61      	ldr	r3, [pc, #388]	@ (8109694 <MX_LWIP_Init+0x250>)
 8109510:	789b      	ldrb	r3, [r3, #2]
 8109512:	021b      	lsls	r3, r3, #8
 8109514:	430b      	orrs	r3, r1
 8109516:	495f      	ldr	r1, [pc, #380]	@ (8109694 <MX_LWIP_Init+0x250>)
 8109518:	78c9      	ldrb	r1, [r1, #3]
 810951a:	430b      	orrs	r3, r1
 810951c:	0e1b      	lsrs	r3, r3, #24
 810951e:	4313      	orrs	r3, r2
 8109520:	4a5f      	ldr	r2, [pc, #380]	@ (81096a0 <MX_LWIP_Init+0x25c>)
 8109522:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8109524:	4b5c      	ldr	r3, [pc, #368]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109526:	781b      	ldrb	r3, [r3, #0]
 8109528:	061a      	lsls	r2, r3, #24
 810952a:	4b5b      	ldr	r3, [pc, #364]	@ (8109698 <MX_LWIP_Init+0x254>)
 810952c:	785b      	ldrb	r3, [r3, #1]
 810952e:	041b      	lsls	r3, r3, #16
 8109530:	431a      	orrs	r2, r3
 8109532:	4b59      	ldr	r3, [pc, #356]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109534:	789b      	ldrb	r3, [r3, #2]
 8109536:	021b      	lsls	r3, r3, #8
 8109538:	4313      	orrs	r3, r2
 810953a:	4a57      	ldr	r2, [pc, #348]	@ (8109698 <MX_LWIP_Init+0x254>)
 810953c:	78d2      	ldrb	r2, [r2, #3]
 810953e:	4313      	orrs	r3, r2
 8109540:	061a      	lsls	r2, r3, #24
 8109542:	4b55      	ldr	r3, [pc, #340]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109544:	781b      	ldrb	r3, [r3, #0]
 8109546:	0619      	lsls	r1, r3, #24
 8109548:	4b53      	ldr	r3, [pc, #332]	@ (8109698 <MX_LWIP_Init+0x254>)
 810954a:	785b      	ldrb	r3, [r3, #1]
 810954c:	041b      	lsls	r3, r3, #16
 810954e:	4319      	orrs	r1, r3
 8109550:	4b51      	ldr	r3, [pc, #324]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109552:	789b      	ldrb	r3, [r3, #2]
 8109554:	021b      	lsls	r3, r3, #8
 8109556:	430b      	orrs	r3, r1
 8109558:	494f      	ldr	r1, [pc, #316]	@ (8109698 <MX_LWIP_Init+0x254>)
 810955a:	78c9      	ldrb	r1, [r1, #3]
 810955c:	430b      	orrs	r3, r1
 810955e:	021b      	lsls	r3, r3, #8
 8109560:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109564:	431a      	orrs	r2, r3
 8109566:	4b4c      	ldr	r3, [pc, #304]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109568:	781b      	ldrb	r3, [r3, #0]
 810956a:	0619      	lsls	r1, r3, #24
 810956c:	4b4a      	ldr	r3, [pc, #296]	@ (8109698 <MX_LWIP_Init+0x254>)
 810956e:	785b      	ldrb	r3, [r3, #1]
 8109570:	041b      	lsls	r3, r3, #16
 8109572:	4319      	orrs	r1, r3
 8109574:	4b48      	ldr	r3, [pc, #288]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109576:	789b      	ldrb	r3, [r3, #2]
 8109578:	021b      	lsls	r3, r3, #8
 810957a:	430b      	orrs	r3, r1
 810957c:	4946      	ldr	r1, [pc, #280]	@ (8109698 <MX_LWIP_Init+0x254>)
 810957e:	78c9      	ldrb	r1, [r1, #3]
 8109580:	430b      	orrs	r3, r1
 8109582:	0a1b      	lsrs	r3, r3, #8
 8109584:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8109588:	431a      	orrs	r2, r3
 810958a:	4b43      	ldr	r3, [pc, #268]	@ (8109698 <MX_LWIP_Init+0x254>)
 810958c:	781b      	ldrb	r3, [r3, #0]
 810958e:	0619      	lsls	r1, r3, #24
 8109590:	4b41      	ldr	r3, [pc, #260]	@ (8109698 <MX_LWIP_Init+0x254>)
 8109592:	785b      	ldrb	r3, [r3, #1]
 8109594:	041b      	lsls	r3, r3, #16
 8109596:	4319      	orrs	r1, r3
 8109598:	4b3f      	ldr	r3, [pc, #252]	@ (8109698 <MX_LWIP_Init+0x254>)
 810959a:	789b      	ldrb	r3, [r3, #2]
 810959c:	021b      	lsls	r3, r3, #8
 810959e:	430b      	orrs	r3, r1
 81095a0:	493d      	ldr	r1, [pc, #244]	@ (8109698 <MX_LWIP_Init+0x254>)
 81095a2:	78c9      	ldrb	r1, [r1, #3]
 81095a4:	430b      	orrs	r3, r1
 81095a6:	0e1b      	lsrs	r3, r3, #24
 81095a8:	4313      	orrs	r3, r2
 81095aa:	4a3e      	ldr	r2, [pc, #248]	@ (81096a4 <MX_LWIP_Init+0x260>)
 81095ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 81095ae:	4b3b      	ldr	r3, [pc, #236]	@ (810969c <MX_LWIP_Init+0x258>)
 81095b0:	781b      	ldrb	r3, [r3, #0]
 81095b2:	061a      	lsls	r2, r3, #24
 81095b4:	4b39      	ldr	r3, [pc, #228]	@ (810969c <MX_LWIP_Init+0x258>)
 81095b6:	785b      	ldrb	r3, [r3, #1]
 81095b8:	041b      	lsls	r3, r3, #16
 81095ba:	431a      	orrs	r2, r3
 81095bc:	4b37      	ldr	r3, [pc, #220]	@ (810969c <MX_LWIP_Init+0x258>)
 81095be:	789b      	ldrb	r3, [r3, #2]
 81095c0:	021b      	lsls	r3, r3, #8
 81095c2:	4313      	orrs	r3, r2
 81095c4:	4a35      	ldr	r2, [pc, #212]	@ (810969c <MX_LWIP_Init+0x258>)
 81095c6:	78d2      	ldrb	r2, [r2, #3]
 81095c8:	4313      	orrs	r3, r2
 81095ca:	061a      	lsls	r2, r3, #24
 81095cc:	4b33      	ldr	r3, [pc, #204]	@ (810969c <MX_LWIP_Init+0x258>)
 81095ce:	781b      	ldrb	r3, [r3, #0]
 81095d0:	0619      	lsls	r1, r3, #24
 81095d2:	4b32      	ldr	r3, [pc, #200]	@ (810969c <MX_LWIP_Init+0x258>)
 81095d4:	785b      	ldrb	r3, [r3, #1]
 81095d6:	041b      	lsls	r3, r3, #16
 81095d8:	4319      	orrs	r1, r3
 81095da:	4b30      	ldr	r3, [pc, #192]	@ (810969c <MX_LWIP_Init+0x258>)
 81095dc:	789b      	ldrb	r3, [r3, #2]
 81095de:	021b      	lsls	r3, r3, #8
 81095e0:	430b      	orrs	r3, r1
 81095e2:	492e      	ldr	r1, [pc, #184]	@ (810969c <MX_LWIP_Init+0x258>)
 81095e4:	78c9      	ldrb	r1, [r1, #3]
 81095e6:	430b      	orrs	r3, r1
 81095e8:	021b      	lsls	r3, r3, #8
 81095ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81095ee:	431a      	orrs	r2, r3
 81095f0:	4b2a      	ldr	r3, [pc, #168]	@ (810969c <MX_LWIP_Init+0x258>)
 81095f2:	781b      	ldrb	r3, [r3, #0]
 81095f4:	0619      	lsls	r1, r3, #24
 81095f6:	4b29      	ldr	r3, [pc, #164]	@ (810969c <MX_LWIP_Init+0x258>)
 81095f8:	785b      	ldrb	r3, [r3, #1]
 81095fa:	041b      	lsls	r3, r3, #16
 81095fc:	4319      	orrs	r1, r3
 81095fe:	4b27      	ldr	r3, [pc, #156]	@ (810969c <MX_LWIP_Init+0x258>)
 8109600:	789b      	ldrb	r3, [r3, #2]
 8109602:	021b      	lsls	r3, r3, #8
 8109604:	430b      	orrs	r3, r1
 8109606:	4925      	ldr	r1, [pc, #148]	@ (810969c <MX_LWIP_Init+0x258>)
 8109608:	78c9      	ldrb	r1, [r1, #3]
 810960a:	430b      	orrs	r3, r1
 810960c:	0a1b      	lsrs	r3, r3, #8
 810960e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8109612:	431a      	orrs	r2, r3
 8109614:	4b21      	ldr	r3, [pc, #132]	@ (810969c <MX_LWIP_Init+0x258>)
 8109616:	781b      	ldrb	r3, [r3, #0]
 8109618:	0619      	lsls	r1, r3, #24
 810961a:	4b20      	ldr	r3, [pc, #128]	@ (810969c <MX_LWIP_Init+0x258>)
 810961c:	785b      	ldrb	r3, [r3, #1]
 810961e:	041b      	lsls	r3, r3, #16
 8109620:	4319      	orrs	r1, r3
 8109622:	4b1e      	ldr	r3, [pc, #120]	@ (810969c <MX_LWIP_Init+0x258>)
 8109624:	789b      	ldrb	r3, [r3, #2]
 8109626:	021b      	lsls	r3, r3, #8
 8109628:	430b      	orrs	r3, r1
 810962a:	491c      	ldr	r1, [pc, #112]	@ (810969c <MX_LWIP_Init+0x258>)
 810962c:	78c9      	ldrb	r1, [r1, #3]
 810962e:	430b      	orrs	r3, r1
 8109630:	0e1b      	lsrs	r3, r3, #24
 8109632:	4313      	orrs	r3, r2
 8109634:	4a1c      	ldr	r2, [pc, #112]	@ (81096a8 <MX_LWIP_Init+0x264>)
 8109636:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8109638:	4b1c      	ldr	r3, [pc, #112]	@ (81096ac <MX_LWIP_Init+0x268>)
 810963a:	9302      	str	r3, [sp, #8]
 810963c:	4b1c      	ldr	r3, [pc, #112]	@ (81096b0 <MX_LWIP_Init+0x26c>)
 810963e:	9301      	str	r3, [sp, #4]
 8109640:	2300      	movs	r3, #0
 8109642:	9300      	str	r3, [sp, #0]
 8109644:	4b18      	ldr	r3, [pc, #96]	@ (81096a8 <MX_LWIP_Init+0x264>)
 8109646:	4a17      	ldr	r2, [pc, #92]	@ (81096a4 <MX_LWIP_Init+0x260>)
 8109648:	4915      	ldr	r1, [pc, #84]	@ (81096a0 <MX_LWIP_Init+0x25c>)
 810964a:	481a      	ldr	r0, [pc, #104]	@ (81096b4 <MX_LWIP_Init+0x270>)
 810964c:	f011 fdee 	bl	811b22c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8109650:	4818      	ldr	r0, [pc, #96]	@ (81096b4 <MX_LWIP_Init+0x270>)
 8109652:	f011 ff9d 	bl	811b590 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8109656:	4817      	ldr	r0, [pc, #92]	@ (81096b4 <MX_LWIP_Init+0x270>)
 8109658:	f011 ffaa 	bl	811b5b0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 810965c:	4916      	ldr	r1, [pc, #88]	@ (81096b8 <MX_LWIP_Init+0x274>)
 810965e:	4815      	ldr	r0, [pc, #84]	@ (81096b4 <MX_LWIP_Init+0x270>)
 8109660:	f012 f8a8 	bl	811b7b4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8109664:	2224      	movs	r2, #36	@ 0x24
 8109666:	2100      	movs	r1, #0
 8109668:	4814      	ldr	r0, [pc, #80]	@ (81096bc <MX_LWIP_Init+0x278>)
 810966a:	f01b f90b 	bl	8124884 <memset>
  attributes.name = "EthLink";
 810966e:	4b13      	ldr	r3, [pc, #76]	@ (81096bc <MX_LWIP_Init+0x278>)
 8109670:	4a13      	ldr	r2, [pc, #76]	@ (81096c0 <MX_LWIP_Init+0x27c>)
 8109672:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8109674:	4b11      	ldr	r3, [pc, #68]	@ (81096bc <MX_LWIP_Init+0x278>)
 8109676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810967a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 810967c:	4b0f      	ldr	r3, [pc, #60]	@ (81096bc <MX_LWIP_Init+0x278>)
 810967e:	2210      	movs	r2, #16
 8109680:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8109682:	4a0e      	ldr	r2, [pc, #56]	@ (81096bc <MX_LWIP_Init+0x278>)
 8109684:	490b      	ldr	r1, [pc, #44]	@ (81096b4 <MX_LWIP_Init+0x270>)
 8109686:	480f      	ldr	r0, [pc, #60]	@ (81096c4 <MX_LWIP_Init+0x280>)
 8109688:	f009 fead 	bl	81133e6 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 810968c:	bf00      	nop
 810968e:	46bd      	mov	sp, r7
 8109690:	bd80      	pop	{r7, pc}
 8109692:	bf00      	nop
 8109694:	100002d8 	.word	0x100002d8
 8109698:	100002dc 	.word	0x100002dc
 810969c:	100002e0 	.word	0x100002e0
 81096a0:	100002cc 	.word	0x100002cc
 81096a4:	100002d0 	.word	0x100002d0
 81096a8:	100002d4 	.word	0x100002d4
 81096ac:	0812278d 	.word	0x0812278d
 81096b0:	08109c15 	.word	0x08109c15
 81096b4:	10000298 	.word	0x10000298
 81096b8:	081096c9 	.word	0x081096c9
 81096bc:	100002e4 	.word	0x100002e4
 81096c0:	081254cc 	.word	0x081254cc
 81096c4:	08109ed5 	.word	0x08109ed5

081096c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 81096c8:	b580      	push	{r7, lr}
 81096ca:	b090      	sub	sp, #64	@ 0x40
 81096cc:	af00      	add	r7, sp, #0
 81096ce:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 81096d0:	687b      	ldr	r3, [r7, #4]
 81096d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81096d6:	f003 0301 	and.w	r3, r3, #1
 81096da:	b2db      	uxtb	r3, r3
 81096dc:	2b00      	cmp	r3, #0
 81096de:	d015      	beq.n	810970c <ethernet_link_status_updated+0x44>
  {
/* USER CODE BEGIN 5 */
	SMessage msg;
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 81096e0:	2383      	movs	r3, #131	@ 0x83
 81096e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	msg.message_data.ethernet_plugged = true;
 81096e6:	2301      	movs	r3, #1
 81096e8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 81096ec:	2304      	movs	r3, #4
 81096ee:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 81096f2:	2303      	movs	r3, #3
 81096f4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 81096f8:	4b10      	ldr	r3, [pc, #64]	@ (810973c <ethernet_link_status_updated+0x74>)
 81096fa:	6818      	ldr	r0, [r3, #0]
 81096fc:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8109700:	2300      	movs	r3, #0
 8109702:	f04f 32ff 	mov.w	r2, #4294967295
 8109706:	f00b fa0d 	bl	8114b24 <xQueueGenericSend>
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
/* USER CODE END 6 */
  }
}
 810970a:	e012      	b.n	8109732 <ethernet_link_status_updated+0x6a>
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 810970c:	2383      	movs	r3, #131	@ 0x83
 810970e:	723b      	strb	r3, [r7, #8]
	msg.message_data.ethernet_plugged = false;
 8109710:	2300      	movs	r3, #0
 8109712:	733b      	strb	r3, [r7, #12]
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 8109714:	2304      	movs	r3, #4
 8109716:	f887 3020 	strb.w	r3, [r7, #32]
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 810971a:	2303      	movs	r3, #3
 810971c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 8109720:	4b06      	ldr	r3, [pc, #24]	@ (810973c <ethernet_link_status_updated+0x74>)
 8109722:	6818      	ldr	r0, [r3, #0]
 8109724:	f107 0108 	add.w	r1, r7, #8
 8109728:	2300      	movs	r3, #0
 810972a:	f04f 32ff 	mov.w	r2, #4294967295
 810972e:	f00b f9f9 	bl	8114b24 <xQueueGenericSend>
}
 8109732:	bf00      	nop
 8109734:	3740      	adds	r7, #64	@ 0x40
 8109736:	46bd      	mov	sp, r7
 8109738:	bd80      	pop	{r7, pc}
 810973a:	bf00      	nop
 810973c:	100001cc 	.word	0x100001cc

08109740 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8109740:	b580      	push	{r7, lr}
 8109742:	b082      	sub	sp, #8
 8109744:	af00      	add	r7, sp, #0
 8109746:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8109748:	4b04      	ldr	r3, [pc, #16]	@ (810975c <HAL_ETH_RxCpltCallback+0x1c>)
 810974a:	681b      	ldr	r3, [r3, #0]
 810974c:	4618      	mov	r0, r3
 810974e:	f00a f8e1 	bl	8113914 <osSemaphoreRelease>
}
 8109752:	bf00      	nop
 8109754:	3708      	adds	r7, #8
 8109756:	46bd      	mov	sp, r7
 8109758:	bd80      	pop	{r7, pc}
 810975a:	bf00      	nop
 810975c:	10000310 	.word	0x10000310

08109760 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8109760:	b580      	push	{r7, lr}
 8109762:	b082      	sub	sp, #8
 8109764:	af00      	add	r7, sp, #0
 8109766:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8109768:	4b04      	ldr	r3, [pc, #16]	@ (810977c <HAL_ETH_TxCpltCallback+0x1c>)
 810976a:	681b      	ldr	r3, [r3, #0]
 810976c:	4618      	mov	r0, r3
 810976e:	f00a f8d1 	bl	8113914 <osSemaphoreRelease>
}
 8109772:	bf00      	nop
 8109774:	3708      	adds	r7, #8
 8109776:	46bd      	mov	sp, r7
 8109778:	bd80      	pop	{r7, pc}
 810977a:	bf00      	nop
 810977c:	10000314 	.word	0x10000314

08109780 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8109780:	b580      	push	{r7, lr}
 8109782:	b082      	sub	sp, #8
 8109784:	af00      	add	r7, sp, #0
 8109786:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8109788:	6878      	ldr	r0, [r7, #4]
 810978a:	f004 faa4 	bl	810dcd6 <HAL_ETH_GetDMAError>
 810978e:	4603      	mov	r3, r0
 8109790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109794:	2b80      	cmp	r3, #128	@ 0x80
 8109796:	d104      	bne.n	81097a2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8109798:	4b04      	ldr	r3, [pc, #16]	@ (81097ac <HAL_ETH_ErrorCallback+0x2c>)
 810979a:	681b      	ldr	r3, [r3, #0]
 810979c:	4618      	mov	r0, r3
 810979e:	f00a f8b9 	bl	8113914 <osSemaphoreRelease>
  }
}
 81097a2:	bf00      	nop
 81097a4:	3708      	adds	r7, #8
 81097a6:	46bd      	mov	sp, r7
 81097a8:	bd80      	pop	{r7, pc}
 81097aa:	bf00      	nop
 81097ac:	10000310 	.word	0x10000310

081097b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 81097b0:	b580      	push	{r7, lr}
 81097b2:	b0aa      	sub	sp, #168	@ 0xa8
 81097b4:	af00      	add	r7, sp, #0
 81097b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 81097b8:	2300      	movs	r3, #0
 81097ba:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 81097be:	2300      	movs	r3, #0
 81097c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 81097c4:	2300      	movs	r3, #0
 81097c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 81097ca:	f107 0310 	add.w	r3, r7, #16
 81097ce:	2264      	movs	r2, #100	@ 0x64
 81097d0:	2100      	movs	r1, #0
 81097d2:	4618      	mov	r0, r3
 81097d4:	f01b f856 	bl	8124884 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 81097d8:	4b89      	ldr	r3, [pc, #548]	@ (8109a00 <low_level_init+0x250>)
 81097da:	4a8a      	ldr	r2, [pc, #552]	@ (8109a04 <low_level_init+0x254>)
 81097dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81097de:	2300      	movs	r3, #0
 81097e0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 81097e2:	2380      	movs	r3, #128	@ 0x80
 81097e4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 81097e6:	23e1      	movs	r3, #225	@ 0xe1
 81097e8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 81097ea:	2300      	movs	r3, #0
 81097ec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 81097ee:	2300      	movs	r3, #0
 81097f0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 81097f2:	2300      	movs	r3, #0
 81097f4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 81097f6:	4a82      	ldr	r2, [pc, #520]	@ (8109a00 <low_level_init+0x250>)
 81097f8:	f107 0308 	add.w	r3, r7, #8
 81097fc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81097fe:	4b80      	ldr	r3, [pc, #512]	@ (8109a00 <low_level_init+0x250>)
 8109800:	2201      	movs	r2, #1
 8109802:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8109804:	4b7e      	ldr	r3, [pc, #504]	@ (8109a00 <low_level_init+0x250>)
 8109806:	4a80      	ldr	r2, [pc, #512]	@ (8109a08 <low_level_init+0x258>)
 8109808:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 810980a:	4b7d      	ldr	r3, [pc, #500]	@ (8109a00 <low_level_init+0x250>)
 810980c:	4a7f      	ldr	r2, [pc, #508]	@ (8109a0c <low_level_init+0x25c>)
 810980e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8109810:	4b7b      	ldr	r3, [pc, #492]	@ (8109a00 <low_level_init+0x250>)
 8109812:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8109816:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8109818:	4879      	ldr	r0, [pc, #484]	@ (8109a00 <low_level_init+0x250>)
 810981a:	f003 fa6b 	bl	810ccf4 <HAL_ETH_Init>
 810981e:	4603      	mov	r3, r0
 8109820:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8109824:	2238      	movs	r2, #56	@ 0x38
 8109826:	2100      	movs	r1, #0
 8109828:	4879      	ldr	r0, [pc, #484]	@ (8109a10 <low_level_init+0x260>)
 810982a:	f01b f82b 	bl	8124884 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 810982e:	4b78      	ldr	r3, [pc, #480]	@ (8109a10 <low_level_init+0x260>)
 8109830:	2221      	movs	r2, #33	@ 0x21
 8109832:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8109834:	4b76      	ldr	r3, [pc, #472]	@ (8109a10 <low_level_init+0x260>)
 8109836:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 810983a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 810983c:	4b74      	ldr	r3, [pc, #464]	@ (8109a10 <low_level_init+0x260>)
 810983e:	2200      	movs	r2, #0
 8109840:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8109842:	4874      	ldr	r0, [pc, #464]	@ (8109a14 <low_level_init+0x264>)
 8109844:	f011 fbac 	bl	811afa0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8109848:	687b      	ldr	r3, [r7, #4]
 810984a:	2206      	movs	r2, #6
 810984c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8109850:	4b6b      	ldr	r3, [pc, #428]	@ (8109a00 <low_level_init+0x250>)
 8109852:	685b      	ldr	r3, [r3, #4]
 8109854:	781a      	ldrb	r2, [r3, #0]
 8109856:	687b      	ldr	r3, [r7, #4]
 8109858:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 810985c:	4b68      	ldr	r3, [pc, #416]	@ (8109a00 <low_level_init+0x250>)
 810985e:	685b      	ldr	r3, [r3, #4]
 8109860:	785a      	ldrb	r2, [r3, #1]
 8109862:	687b      	ldr	r3, [r7, #4]
 8109864:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8109868:	4b65      	ldr	r3, [pc, #404]	@ (8109a00 <low_level_init+0x250>)
 810986a:	685b      	ldr	r3, [r3, #4]
 810986c:	789a      	ldrb	r2, [r3, #2]
 810986e:	687b      	ldr	r3, [r7, #4]
 8109870:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8109874:	4b62      	ldr	r3, [pc, #392]	@ (8109a00 <low_level_init+0x250>)
 8109876:	685b      	ldr	r3, [r3, #4]
 8109878:	78da      	ldrb	r2, [r3, #3]
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8109880:	4b5f      	ldr	r3, [pc, #380]	@ (8109a00 <low_level_init+0x250>)
 8109882:	685b      	ldr	r3, [r3, #4]
 8109884:	791a      	ldrb	r2, [r3, #4]
 8109886:	687b      	ldr	r3, [r7, #4]
 8109888:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 810988c:	4b5c      	ldr	r3, [pc, #368]	@ (8109a00 <low_level_init+0x250>)
 810988e:	685b      	ldr	r3, [r3, #4]
 8109890:	795a      	ldrb	r2, [r3, #5]
 8109892:	687b      	ldr	r3, [r7, #4]
 8109894:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8109898:	687b      	ldr	r3, [r7, #4]
 810989a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 810989e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 81098a0:	687b      	ldr	r3, [r7, #4]
 81098a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81098a6:	f043 030a 	orr.w	r3, r3, #10
 81098aa:	b2da      	uxtb	r2, r3
 81098ac:	687b      	ldr	r3, [r7, #4]
 81098ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 81098b2:	2200      	movs	r2, #0
 81098b4:	2100      	movs	r1, #0
 81098b6:	2001      	movs	r0, #1
 81098b8:	f009 ff50 	bl	811375c <osSemaphoreNew>
 81098bc:	4603      	mov	r3, r0
 81098be:	4a56      	ldr	r2, [pc, #344]	@ (8109a18 <low_level_init+0x268>)
 81098c0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 81098c2:	2200      	movs	r2, #0
 81098c4:	2100      	movs	r1, #0
 81098c6:	2001      	movs	r0, #1
 81098c8:	f009 ff48 	bl	811375c <osSemaphoreNew>
 81098cc:	4603      	mov	r3, r0
 81098ce:	4a53      	ldr	r2, [pc, #332]	@ (8109a1c <low_level_init+0x26c>)
 81098d0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 81098d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 81098d6:	2224      	movs	r2, #36	@ 0x24
 81098d8:	2100      	movs	r1, #0
 81098da:	4618      	mov	r0, r3
 81098dc:	f01a ffd2 	bl	8124884 <memset>
  attributes.name = "EthIf";
 81098e0:	4b4f      	ldr	r3, [pc, #316]	@ (8109a20 <low_level_init+0x270>)
 81098e2:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 81098e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81098e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 81098ec:	2330      	movs	r3, #48	@ 0x30
 81098ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 81098f2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 81098f6:	461a      	mov	r2, r3
 81098f8:	6879      	ldr	r1, [r7, #4]
 81098fa:	484a      	ldr	r0, [pc, #296]	@ (8109a24 <low_level_init+0x274>)
 81098fc:	f009 fd73 	bl	81133e6 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8109900:	4949      	ldr	r1, [pc, #292]	@ (8109a28 <low_level_init+0x278>)
 8109902:	484a      	ldr	r0, [pc, #296]	@ (8109a2c <low_level_init+0x27c>)
 8109904:	f002 ff4d 	bl	810c7a2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8109908:	4848      	ldr	r0, [pc, #288]	@ (8109a2c <low_level_init+0x27c>)
 810990a:	f002 ff7c 	bl	810c806 <LAN8742_Init>
 810990e:	4603      	mov	r3, r0
 8109910:	2b00      	cmp	r3, #0
 8109912:	d006      	beq.n	8109922 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8109914:	6878      	ldr	r0, [r7, #4]
 8109916:	f011 ff1d 	bl	811b754 <netif_set_link_down>
    netif_set_down(netif);
 810991a:	6878      	ldr	r0, [r7, #4]
 810991c:	f011 feb4 	bl	811b688 <netif_set_down>
 8109920:	e06b      	b.n	81099fa <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8109922:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8109926:	2b00      	cmp	r3, #0
 8109928:	d165      	bne.n	81099f6 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810992a:	4840      	ldr	r0, [pc, #256]	@ (8109a2c <low_level_init+0x27c>)
 810992c:	f002 ffb8 	bl	810c8a0 <LAN8742_GetLinkState>
 8109930:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8109934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8109938:	2b01      	cmp	r3, #1
 810993a:	dc06      	bgt.n	810994a <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 810993c:	6878      	ldr	r0, [r7, #4]
 810993e:	f011 ff09 	bl	811b754 <netif_set_link_down>
      netif_set_down(netif);
 8109942:	6878      	ldr	r0, [r7, #4]
 8109944:	f011 fea0 	bl	811b688 <netif_set_down>
 8109948:	e057      	b.n	81099fa <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 810994a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810994e:	3b02      	subs	r3, #2
 8109950:	2b03      	cmp	r3, #3
 8109952:	d82b      	bhi.n	81099ac <low_level_init+0x1fc>
 8109954:	a201      	add	r2, pc, #4	@ (adr r2, 810995c <low_level_init+0x1ac>)
 8109956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810995a:	bf00      	nop
 810995c:	0810996d 	.word	0x0810996d
 8109960:	0810997f 	.word	0x0810997f
 8109964:	0810998f 	.word	0x0810998f
 8109968:	0810999f 	.word	0x0810999f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 810996c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8109970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8109974:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8109978:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810997c:	e01f      	b.n	81099be <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 810997e:	2300      	movs	r3, #0
 8109980:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8109984:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8109988:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810998c:	e017      	b.n	81099be <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 810998e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8109992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8109996:	2300      	movs	r3, #0
 8109998:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810999c:	e00f      	b.n	81099be <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 810999e:	2300      	movs	r3, #0
 81099a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 81099a4:	2300      	movs	r3, #0
 81099a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81099aa:	e008      	b.n	81099be <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 81099ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81099b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 81099b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81099b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81099bc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 81099be:	f107 0310 	add.w	r3, r7, #16
 81099c2:	4619      	mov	r1, r3
 81099c4:	480e      	ldr	r0, [pc, #56]	@ (8109a00 <low_level_init+0x250>)
 81099c6:	f003 ff3b 	bl	810d840 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 81099ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 81099ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 81099d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 81099d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 81099d6:	f107 0310 	add.w	r3, r7, #16
 81099da:	4619      	mov	r1, r3
 81099dc:	4808      	ldr	r0, [pc, #32]	@ (8109a00 <low_level_init+0x250>)
 81099de:	f004 f903 	bl	810dbe8 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 81099e2:	4807      	ldr	r0, [pc, #28]	@ (8109a00 <low_level_init+0x250>)
 81099e4:	f003 fa84 	bl	810cef0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 81099e8:	6878      	ldr	r0, [r7, #4]
 81099ea:	f011 fde1 	bl	811b5b0 <netif_set_up>
    netif_set_link_up(netif);
 81099ee:	6878      	ldr	r0, [r7, #4]
 81099f0:	f011 fe7c 	bl	811b6ec <netif_set_link_up>
 81099f4:	e001      	b.n	81099fa <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 81099f6:	f7f7 fea1 	bl	810173c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 81099fa:	37a8      	adds	r7, #168	@ 0xa8
 81099fc:	46bd      	mov	sp, r7
 81099fe:	bd80      	pop	{r7, pc}
 8109a00:	10000318 	.word	0x10000318
 8109a04:	40028000 	.word	0x40028000
 8109a08:	10040100 	.word	0x10040100
 8109a0c:	10040000 	.word	0x10040000
 8109a10:	100003c8 	.word	0x100003c8
 8109a14:	08128590 	.word	0x08128590
 8109a18:	10000310 	.word	0x10000310
 8109a1c:	10000314 	.word	0x10000314
 8109a20:	081254d4 	.word	0x081254d4
 8109a24:	08109bc1 	.word	0x08109bc1
 8109a28:	10000000 	.word	0x10000000
 8109a2c:	10000400 	.word	0x10000400

08109a30 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8109a30:	b580      	push	{r7, lr}
 8109a32:	b092      	sub	sp, #72	@ 0x48
 8109a34:	af00      	add	r7, sp, #0
 8109a36:	6078      	str	r0, [r7, #4]
 8109a38:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8109a3a:	2300      	movs	r3, #0
 8109a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8109a3e:	2300      	movs	r3, #0
 8109a40:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8109a42:	2300      	movs	r3, #0
 8109a44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8109a48:	f107 030c 	add.w	r3, r7, #12
 8109a4c:	2230      	movs	r2, #48	@ 0x30
 8109a4e:	2100      	movs	r1, #0
 8109a50:	4618      	mov	r0, r3
 8109a52:	f01a ff17 	bl	8124884 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8109a56:	f107 030c 	add.w	r3, r7, #12
 8109a5a:	2230      	movs	r2, #48	@ 0x30
 8109a5c:	2100      	movs	r1, #0
 8109a5e:	4618      	mov	r0, r3
 8109a60:	f01a ff10 	bl	8124884 <memset>

  for(q = p; q != NULL; q = q->next)
 8109a64:	683b      	ldr	r3, [r7, #0]
 8109a66:	643b      	str	r3, [r7, #64]	@ 0x40
 8109a68:	e045      	b.n	8109af6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8109a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109a6c:	2b03      	cmp	r3, #3
 8109a6e:	d902      	bls.n	8109a76 <low_level_output+0x46>
      return ERR_IF;
 8109a70:	f06f 030b 	mvn.w	r3, #11
 8109a74:	e07f      	b.n	8109b76 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8109a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109a78:	6859      	ldr	r1, [r3, #4]
 8109a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109a7c:	4613      	mov	r3, r2
 8109a7e:	005b      	lsls	r3, r3, #1
 8109a80:	4413      	add	r3, r2
 8109a82:	009b      	lsls	r3, r3, #2
 8109a84:	3348      	adds	r3, #72	@ 0x48
 8109a86:	443b      	add	r3, r7
 8109a88:	3b3c      	subs	r3, #60	@ 0x3c
 8109a8a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8109a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109a8e:	895b      	ldrh	r3, [r3, #10]
 8109a90:	4619      	mov	r1, r3
 8109a92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109a94:	4613      	mov	r3, r2
 8109a96:	005b      	lsls	r3, r3, #1
 8109a98:	4413      	add	r3, r2
 8109a9a:	009b      	lsls	r3, r3, #2
 8109a9c:	3348      	adds	r3, #72	@ 0x48
 8109a9e:	443b      	add	r3, r7
 8109aa0:	3b38      	subs	r3, #56	@ 0x38
 8109aa2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8109aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109aa6:	2b00      	cmp	r3, #0
 8109aa8:	d011      	beq.n	8109ace <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8109aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109aac:	1e5a      	subs	r2, r3, #1
 8109aae:	f107 000c 	add.w	r0, r7, #12
 8109ab2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8109ab4:	460b      	mov	r3, r1
 8109ab6:	005b      	lsls	r3, r3, #1
 8109ab8:	440b      	add	r3, r1
 8109aba:	009b      	lsls	r3, r3, #2
 8109abc:	18c1      	adds	r1, r0, r3
 8109abe:	4613      	mov	r3, r2
 8109ac0:	005b      	lsls	r3, r3, #1
 8109ac2:	4413      	add	r3, r2
 8109ac4:	009b      	lsls	r3, r3, #2
 8109ac6:	3348      	adds	r3, #72	@ 0x48
 8109ac8:	443b      	add	r3, r7
 8109aca:	3b34      	subs	r3, #52	@ 0x34
 8109acc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8109ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109ad0:	681b      	ldr	r3, [r3, #0]
 8109ad2:	2b00      	cmp	r3, #0
 8109ad4:	d109      	bne.n	8109aea <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8109ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109ad8:	4613      	mov	r3, r2
 8109ada:	005b      	lsls	r3, r3, #1
 8109adc:	4413      	add	r3, r2
 8109ade:	009b      	lsls	r3, r3, #2
 8109ae0:	3348      	adds	r3, #72	@ 0x48
 8109ae2:	443b      	add	r3, r7
 8109ae4:	3b34      	subs	r3, #52	@ 0x34
 8109ae6:	2200      	movs	r2, #0
 8109ae8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8109aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109aec:	3301      	adds	r3, #1
 8109aee:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8109af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109af2:	681b      	ldr	r3, [r3, #0]
 8109af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8109af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109af8:	2b00      	cmp	r3, #0
 8109afa:	d1b6      	bne.n	8109a6a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8109afc:	683b      	ldr	r3, [r7, #0]
 8109afe:	891b      	ldrh	r3, [r3, #8]
 8109b00:	461a      	mov	r2, r3
 8109b02:	4b1f      	ldr	r3, [pc, #124]	@ (8109b80 <low_level_output+0x150>)
 8109b04:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8109b06:	4a1e      	ldr	r2, [pc, #120]	@ (8109b80 <low_level_output+0x150>)
 8109b08:	f107 030c 	add.w	r3, r7, #12
 8109b0c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8109b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8109b80 <low_level_output+0x150>)
 8109b10:	683b      	ldr	r3, [r7, #0]
 8109b12:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8109b14:	6838      	ldr	r0, [r7, #0]
 8109b16:	f012 fa9f 	bl	811c058 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8109b1a:	4919      	ldr	r1, [pc, #100]	@ (8109b80 <low_level_output+0x150>)
 8109b1c:	4819      	ldr	r0, [pc, #100]	@ (8109b84 <low_level_output+0x154>)
 8109b1e:	f003 fad4 	bl	810d0ca <HAL_ETH_Transmit_IT>
 8109b22:	4603      	mov	r3, r0
 8109b24:	2b00      	cmp	r3, #0
 8109b26:	d103      	bne.n	8109b30 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8109b28:	2300      	movs	r3, #0
 8109b2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8109b2e:	e01b      	b.n	8109b68 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8109b30:	4814      	ldr	r0, [pc, #80]	@ (8109b84 <low_level_output+0x154>)
 8109b32:	f004 f8c3 	bl	810dcbc <HAL_ETH_GetError>
 8109b36:	4603      	mov	r3, r0
 8109b38:	f003 0302 	and.w	r3, r3, #2
 8109b3c:	2b00      	cmp	r3, #0
 8109b3e:	d00d      	beq.n	8109b5c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8109b40:	4b11      	ldr	r3, [pc, #68]	@ (8109b88 <low_level_output+0x158>)
 8109b42:	681b      	ldr	r3, [r3, #0]
 8109b44:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8109b48:	4618      	mov	r0, r3
 8109b4a:	f009 fe91 	bl	8113870 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8109b4e:	480d      	ldr	r0, [pc, #52]	@ (8109b84 <low_level_output+0x154>)
 8109b50:	f003 fc42 	bl	810d3d8 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8109b54:	23fe      	movs	r3, #254	@ 0xfe
 8109b56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8109b5a:	e005      	b.n	8109b68 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8109b5c:	6838      	ldr	r0, [r7, #0]
 8109b5e:	f012 f9d5 	bl	811bf0c <pbuf_free>
        errval =  ERR_IF;
 8109b62:	23f4      	movs	r3, #244	@ 0xf4
 8109b64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8109b68:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8109b6c:	f113 0f02 	cmn.w	r3, #2
 8109b70:	d0d3      	beq.n	8109b1a <low_level_output+0xea>

  return errval;
 8109b72:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8109b76:	4618      	mov	r0, r3
 8109b78:	3748      	adds	r7, #72	@ 0x48
 8109b7a:	46bd      	mov	sp, r7
 8109b7c:	bd80      	pop	{r7, pc}
 8109b7e:	bf00      	nop
 8109b80:	100003c8 	.word	0x100003c8
 8109b84:	10000318 	.word	0x10000318
 8109b88:	10000314 	.word	0x10000314

08109b8c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8109b8c:	b580      	push	{r7, lr}
 8109b8e:	b084      	sub	sp, #16
 8109b90:	af00      	add	r7, sp, #0
 8109b92:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8109b94:	2300      	movs	r3, #0
 8109b96:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8109b98:	4b07      	ldr	r3, [pc, #28]	@ (8109bb8 <low_level_input+0x2c>)
 8109b9a:	781b      	ldrb	r3, [r3, #0]
 8109b9c:	2b00      	cmp	r3, #0
 8109b9e:	d105      	bne.n	8109bac <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8109ba0:	f107 030c 	add.w	r3, r7, #12
 8109ba4:	4619      	mov	r1, r3
 8109ba6:	4805      	ldr	r0, [pc, #20]	@ (8109bbc <low_level_input+0x30>)
 8109ba8:	f003 fae0 	bl	810d16c <HAL_ETH_ReadData>
  }

  return p;
 8109bac:	68fb      	ldr	r3, [r7, #12]
}
 8109bae:	4618      	mov	r0, r3
 8109bb0:	3710      	adds	r7, #16
 8109bb2:	46bd      	mov	sp, r7
 8109bb4:	bd80      	pop	{r7, pc}
 8109bb6:	bf00      	nop
 8109bb8:	1000030c 	.word	0x1000030c
 8109bbc:	10000318 	.word	0x10000318

08109bc0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8109bc0:	b580      	push	{r7, lr}
 8109bc2:	b084      	sub	sp, #16
 8109bc4:	af00      	add	r7, sp, #0
 8109bc6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8109bc8:	2300      	movs	r3, #0
 8109bca:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8109bcc:	687b      	ldr	r3, [r7, #4]
 8109bce:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8109bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8109c10 <ethernetif_input+0x50>)
 8109bd2:	681b      	ldr	r3, [r3, #0]
 8109bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8109bd8:	4618      	mov	r0, r3
 8109bda:	f009 fe49 	bl	8113870 <osSemaphoreAcquire>
 8109bde:	4603      	mov	r3, r0
 8109be0:	2b00      	cmp	r3, #0
 8109be2:	d1f5      	bne.n	8109bd0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8109be4:	68b8      	ldr	r0, [r7, #8]
 8109be6:	f7ff ffd1 	bl	8109b8c <low_level_input>
 8109bea:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8109bec:	68fb      	ldr	r3, [r7, #12]
 8109bee:	2b00      	cmp	r3, #0
 8109bf0:	d00a      	beq.n	8109c08 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8109bf2:	68bb      	ldr	r3, [r7, #8]
 8109bf4:	691b      	ldr	r3, [r3, #16]
 8109bf6:	68b9      	ldr	r1, [r7, #8]
 8109bf8:	68f8      	ldr	r0, [r7, #12]
 8109bfa:	4798      	blx	r3
 8109bfc:	4603      	mov	r3, r0
 8109bfe:	2b00      	cmp	r3, #0
 8109c00:	d002      	beq.n	8109c08 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8109c02:	68f8      	ldr	r0, [r7, #12]
 8109c04:	f012 f982 	bl	811bf0c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8109c08:	68fb      	ldr	r3, [r7, #12]
 8109c0a:	2b00      	cmp	r3, #0
 8109c0c:	d1ea      	bne.n	8109be4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8109c0e:	e7df      	b.n	8109bd0 <ethernetif_input+0x10>
 8109c10:	10000310 	.word	0x10000310

08109c14 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8109c14:	b580      	push	{r7, lr}
 8109c16:	b082      	sub	sp, #8
 8109c18:	af00      	add	r7, sp, #0
 8109c1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	2b00      	cmp	r3, #0
 8109c20:	d106      	bne.n	8109c30 <ethernetif_init+0x1c>
 8109c22:	4b0e      	ldr	r3, [pc, #56]	@ (8109c5c <ethernetif_init+0x48>)
 8109c24:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8109c28:	490d      	ldr	r1, [pc, #52]	@ (8109c60 <ethernetif_init+0x4c>)
 8109c2a:	480e      	ldr	r0, [pc, #56]	@ (8109c64 <ethernetif_init+0x50>)
 8109c2c:	f01a fd16 	bl	812465c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8109c30:	687b      	ldr	r3, [r7, #4]
 8109c32:	2273      	movs	r2, #115	@ 0x73
 8109c34:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8109c38:	687b      	ldr	r3, [r7, #4]
 8109c3a:	2274      	movs	r2, #116	@ 0x74
 8109c3c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8109c40:	687b      	ldr	r3, [r7, #4]
 8109c42:	4a09      	ldr	r2, [pc, #36]	@ (8109c68 <ethernetif_init+0x54>)
 8109c44:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8109c46:	687b      	ldr	r3, [r7, #4]
 8109c48:	4a08      	ldr	r2, [pc, #32]	@ (8109c6c <ethernetif_init+0x58>)
 8109c4a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8109c4c:	6878      	ldr	r0, [r7, #4]
 8109c4e:	f7ff fdaf 	bl	81097b0 <low_level_init>

  return ERR_OK;
 8109c52:	2300      	movs	r3, #0
}
 8109c54:	4618      	mov	r0, r3
 8109c56:	3708      	adds	r7, #8
 8109c58:	46bd      	mov	sp, r7
 8109c5a:	bd80      	pop	{r7, pc}
 8109c5c:	081254dc 	.word	0x081254dc
 8109c60:	08125540 	.word	0x08125540
 8109c64:	08125550 	.word	0x08125550
 8109c68:	081184ed 	.word	0x081184ed
 8109c6c:	08109a31 	.word	0x08109a31

08109c70 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8109c70:	b580      	push	{r7, lr}
 8109c72:	b084      	sub	sp, #16
 8109c74:	af00      	add	r7, sp, #0
 8109c76:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8109c78:	687b      	ldr	r3, [r7, #4]
 8109c7a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8109c7c:	68f9      	ldr	r1, [r7, #12]
 8109c7e:	4809      	ldr	r0, [pc, #36]	@ (8109ca4 <pbuf_free_custom+0x34>)
 8109c80:	f011 fa7e 	bl	811b180 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8109c84:	4b08      	ldr	r3, [pc, #32]	@ (8109ca8 <pbuf_free_custom+0x38>)
 8109c86:	781b      	ldrb	r3, [r3, #0]
 8109c88:	2b01      	cmp	r3, #1
 8109c8a:	d107      	bne.n	8109c9c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8109c8c:	4b06      	ldr	r3, [pc, #24]	@ (8109ca8 <pbuf_free_custom+0x38>)
 8109c8e:	2200      	movs	r2, #0
 8109c90:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8109c92:	4b06      	ldr	r3, [pc, #24]	@ (8109cac <pbuf_free_custom+0x3c>)
 8109c94:	681b      	ldr	r3, [r3, #0]
 8109c96:	4618      	mov	r0, r3
 8109c98:	f009 fe3c 	bl	8113914 <osSemaphoreRelease>
  }
}
 8109c9c:	bf00      	nop
 8109c9e:	3710      	adds	r7, #16
 8109ca0:	46bd      	mov	sp, r7
 8109ca2:	bd80      	pop	{r7, pc}
 8109ca4:	08128590 	.word	0x08128590
 8109ca8:	1000030c 	.word	0x1000030c
 8109cac:	10000310 	.word	0x10000310

08109cb0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8109cb0:	b580      	push	{r7, lr}
 8109cb2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8109cb4:	f002 ff0a 	bl	810cacc <HAL_GetTick>
 8109cb8:	4603      	mov	r3, r0
}
 8109cba:	4618      	mov	r0, r3
 8109cbc:	bd80      	pop	{r7, pc}
	...

08109cc0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8109cc0:	b580      	push	{r7, lr}
 8109cc2:	b08e      	sub	sp, #56	@ 0x38
 8109cc4:	af00      	add	r7, sp, #0
 8109cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8109cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109ccc:	2200      	movs	r2, #0
 8109cce:	601a      	str	r2, [r3, #0]
 8109cd0:	605a      	str	r2, [r3, #4]
 8109cd2:	609a      	str	r2, [r3, #8]
 8109cd4:	60da      	str	r2, [r3, #12]
 8109cd6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8109cd8:	687b      	ldr	r3, [r7, #4]
 8109cda:	681b      	ldr	r3, [r3, #0]
 8109cdc:	4a51      	ldr	r2, [pc, #324]	@ (8109e24 <HAL_ETH_MspInit+0x164>)
 8109cde:	4293      	cmp	r3, r2
 8109ce0:	f040 809b 	bne.w	8109e1a <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8109ce4:	4b50      	ldr	r3, [pc, #320]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109ce6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8109cea:	4a4f      	ldr	r2, [pc, #316]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8109cf0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8109cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109cf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8109cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8109cfe:	623b      	str	r3, [r7, #32]
 8109d00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8109d02:	4b49      	ldr	r3, [pc, #292]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8109d08:	4a47      	ldr	r2, [pc, #284]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8109d0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8109d12:	4b45      	ldr	r3, [pc, #276]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8109d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109d1c:	61fb      	str	r3, [r7, #28]
 8109d1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8109d20:	4b41      	ldr	r3, [pc, #260]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8109d26:	4a40      	ldr	r2, [pc, #256]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109d2c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8109d30:	4b3d      	ldr	r3, [pc, #244]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8109d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109d3a:	61bb      	str	r3, [r7, #24]
 8109d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8109d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109d44:	4a38      	ldr	r2, [pc, #224]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8109d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8109d4e:	4b36      	ldr	r3, [pc, #216]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109d58:	617b      	str	r3, [r7, #20]
 8109d5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8109d5c:	4b32      	ldr	r3, [pc, #200]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109d62:	4a31      	ldr	r2, [pc, #196]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d64:	f043 0304 	orr.w	r3, r3, #4
 8109d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8109d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109d72:	f003 0304 	and.w	r3, r3, #4
 8109d76:	613b      	str	r3, [r7, #16]
 8109d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8109d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109d80:	4a29      	ldr	r2, [pc, #164]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d82:	f043 0301 	orr.w	r3, r3, #1
 8109d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8109d8a:	4b27      	ldr	r3, [pc, #156]	@ (8109e28 <HAL_ETH_MspInit+0x168>)
 8109d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109d90:	f003 0301 	and.w	r3, r3, #1
 8109d94:	60fb      	str	r3, [r7, #12]
 8109d96:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8109d98:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8109d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8109d9e:	2302      	movs	r3, #2
 8109da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8109da2:	2300      	movs	r3, #0
 8109da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8109da6:	2303      	movs	r3, #3
 8109da8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8109daa:	230b      	movs	r3, #11
 8109dac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8109dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109db2:	4619      	mov	r1, r3
 8109db4:	481d      	ldr	r0, [pc, #116]	@ (8109e2c <HAL_ETH_MspInit+0x16c>)
 8109db6:	f004 fd1b 	bl	810e7f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8109dba:	2332      	movs	r3, #50	@ 0x32
 8109dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8109dbe:	2302      	movs	r3, #2
 8109dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8109dc2:	2300      	movs	r3, #0
 8109dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8109dc6:	2303      	movs	r3, #3
 8109dc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8109dca:	230b      	movs	r3, #11
 8109dcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8109dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109dd2:	4619      	mov	r1, r3
 8109dd4:	4816      	ldr	r0, [pc, #88]	@ (8109e30 <HAL_ETH_MspInit+0x170>)
 8109dd6:	f004 fd0b 	bl	810e7f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8109dda:	2386      	movs	r3, #134	@ 0x86
 8109ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8109dde:	2302      	movs	r3, #2
 8109de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8109de2:	2300      	movs	r3, #0
 8109de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8109de6:	2303      	movs	r3, #3
 8109de8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8109dea:	230b      	movs	r3, #11
 8109dec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8109dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109df2:	4619      	mov	r1, r3
 8109df4:	480f      	ldr	r0, [pc, #60]	@ (8109e34 <HAL_ETH_MspInit+0x174>)
 8109df6:	f004 fcfb 	bl	810e7f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8109dfa:	2200      	movs	r2, #0
 8109dfc:	2105      	movs	r1, #5
 8109dfe:	203d      	movs	r0, #61	@ 0x3d
 8109e00:	f002 ff3c 	bl	810cc7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8109e04:	203d      	movs	r0, #61	@ 0x3d
 8109e06:	f002 ff53 	bl	810ccb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 6, 0);
 8109e0a:	2200      	movs	r2, #0
 8109e0c:	2106      	movs	r1, #6
 8109e0e:	203e      	movs	r0, #62	@ 0x3e
 8109e10:	f002 ff34 	bl	810cc7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8109e14:	203e      	movs	r0, #62	@ 0x3e
 8109e16:	f002 ff4b 	bl	810ccb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8109e1a:	bf00      	nop
 8109e1c:	3738      	adds	r7, #56	@ 0x38
 8109e1e:	46bd      	mov	sp, r7
 8109e20:	bd80      	pop	{r7, pc}
 8109e22:	bf00      	nop
 8109e24:	40028000 	.word	0x40028000
 8109e28:	58024400 	.word	0x58024400
 8109e2c:	58021800 	.word	0x58021800
 8109e30:	58020800 	.word	0x58020800
 8109e34:	58020000 	.word	0x58020000

08109e38 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8109e38:	b580      	push	{r7, lr}
 8109e3a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8109e3c:	4802      	ldr	r0, [pc, #8]	@ (8109e48 <ETH_PHY_IO_Init+0x10>)
 8109e3e:	f003 feed 	bl	810dc1c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8109e42:	2300      	movs	r3, #0
}
 8109e44:	4618      	mov	r0, r3
 8109e46:	bd80      	pop	{r7, pc}
 8109e48:	10000318 	.word	0x10000318

08109e4c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8109e4c:	b480      	push	{r7}
 8109e4e:	af00      	add	r7, sp, #0
  return 0;
 8109e50:	2300      	movs	r3, #0
}
 8109e52:	4618      	mov	r0, r3
 8109e54:	46bd      	mov	sp, r7
 8109e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e5a:	4770      	bx	lr

08109e5c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8109e5c:	b580      	push	{r7, lr}
 8109e5e:	b084      	sub	sp, #16
 8109e60:	af00      	add	r7, sp, #0
 8109e62:	60f8      	str	r0, [r7, #12]
 8109e64:	60b9      	str	r1, [r7, #8]
 8109e66:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8109e68:	687b      	ldr	r3, [r7, #4]
 8109e6a:	68ba      	ldr	r2, [r7, #8]
 8109e6c:	68f9      	ldr	r1, [r7, #12]
 8109e6e:	4807      	ldr	r0, [pc, #28]	@ (8109e8c <ETH_PHY_IO_ReadReg+0x30>)
 8109e70:	f003 fc3e 	bl	810d6f0 <HAL_ETH_ReadPHYRegister>
 8109e74:	4603      	mov	r3, r0
 8109e76:	2b00      	cmp	r3, #0
 8109e78:	d002      	beq.n	8109e80 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8109e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8109e7e:	e000      	b.n	8109e82 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8109e80:	2300      	movs	r3, #0
}
 8109e82:	4618      	mov	r0, r3
 8109e84:	3710      	adds	r7, #16
 8109e86:	46bd      	mov	sp, r7
 8109e88:	bd80      	pop	{r7, pc}
 8109e8a:	bf00      	nop
 8109e8c:	10000318 	.word	0x10000318

08109e90 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8109e90:	b580      	push	{r7, lr}
 8109e92:	b084      	sub	sp, #16
 8109e94:	af00      	add	r7, sp, #0
 8109e96:	60f8      	str	r0, [r7, #12]
 8109e98:	60b9      	str	r1, [r7, #8]
 8109e9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	68ba      	ldr	r2, [r7, #8]
 8109ea0:	68f9      	ldr	r1, [r7, #12]
 8109ea2:	4807      	ldr	r0, [pc, #28]	@ (8109ec0 <ETH_PHY_IO_WriteReg+0x30>)
 8109ea4:	f003 fc78 	bl	810d798 <HAL_ETH_WritePHYRegister>
 8109ea8:	4603      	mov	r3, r0
 8109eaa:	2b00      	cmp	r3, #0
 8109eac:	d002      	beq.n	8109eb4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8109eae:	f04f 33ff 	mov.w	r3, #4294967295
 8109eb2:	e000      	b.n	8109eb6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8109eb4:	2300      	movs	r3, #0
}
 8109eb6:	4618      	mov	r0, r3
 8109eb8:	3710      	adds	r7, #16
 8109eba:	46bd      	mov	sp, r7
 8109ebc:	bd80      	pop	{r7, pc}
 8109ebe:	bf00      	nop
 8109ec0:	10000318 	.word	0x10000318

08109ec4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8109ec4:	b580      	push	{r7, lr}
 8109ec6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8109ec8:	f002 fe00 	bl	810cacc <HAL_GetTick>
 8109ecc:	4603      	mov	r3, r0
}
 8109ece:	4618      	mov	r0, r3
 8109ed0:	bd80      	pop	{r7, pc}
	...

08109ed4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8109ed4:	b580      	push	{r7, lr}
 8109ed6:	b0a0      	sub	sp, #128	@ 0x80
 8109ed8:	af00      	add	r7, sp, #0
 8109eda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8109edc:	f107 0308 	add.w	r3, r7, #8
 8109ee0:	2264      	movs	r2, #100	@ 0x64
 8109ee2:	2100      	movs	r1, #0
 8109ee4:	4618      	mov	r0, r3
 8109ee6:	f01a fccd 	bl	8124884 <memset>
  int32_t PHYLinkState = 0;
 8109eea:	2300      	movs	r3, #0
 8109eec:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8109eee:	2300      	movs	r3, #0
 8109ef0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8109ef2:	2300      	movs	r3, #0
 8109ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8109ef6:	2300      	movs	r3, #0
 8109ef8:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8109efa:	687b      	ldr	r3, [r7, #4]
 8109efc:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8109efe:	483a      	ldr	r0, [pc, #232]	@ (8109fe8 <ethernet_link_thread+0x114>)
 8109f00:	f002 fcce 	bl	810c8a0 <LAN8742_GetLinkState>
 8109f04:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8109f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8109f08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8109f0c:	089b      	lsrs	r3, r3, #2
 8109f0e:	f003 0301 	and.w	r3, r3, #1
 8109f12:	b2db      	uxtb	r3, r3
 8109f14:	2b00      	cmp	r3, #0
 8109f16:	d00c      	beq.n	8109f32 <ethernet_link_thread+0x5e>
 8109f18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8109f1a:	2b01      	cmp	r3, #1
 8109f1c:	dc09      	bgt.n	8109f32 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8109f1e:	4833      	ldr	r0, [pc, #204]	@ (8109fec <ethernet_link_thread+0x118>)
 8109f20:	f003 f85b 	bl	810cfda <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8109f24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8109f26:	f011 fbaf 	bl	811b688 <netif_set_down>
    netif_set_link_down(netif);
 8109f2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8109f2c:	f011 fc12 	bl	811b754 <netif_set_link_down>
 8109f30:	e055      	b.n	8109fde <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8109f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8109f34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8109f38:	f003 0304 	and.w	r3, r3, #4
 8109f3c:	2b00      	cmp	r3, #0
 8109f3e:	d14e      	bne.n	8109fde <ethernet_link_thread+0x10a>
 8109f40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8109f42:	2b01      	cmp	r3, #1
 8109f44:	dd4b      	ble.n	8109fde <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8109f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8109f48:	3b02      	subs	r3, #2
 8109f4a:	2b03      	cmp	r3, #3
 8109f4c:	d82a      	bhi.n	8109fa4 <ethernet_link_thread+0xd0>
 8109f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8109f54 <ethernet_link_thread+0x80>)
 8109f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f54:	08109f65 	.word	0x08109f65
 8109f58:	08109f77 	.word	0x08109f77
 8109f5c:	08109f87 	.word	0x08109f87
 8109f60:	08109f97 	.word	0x08109f97
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8109f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8109f68:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8109f6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8109f6e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8109f70:	2301      	movs	r3, #1
 8109f72:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8109f74:	e017      	b.n	8109fa6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8109f76:	2300      	movs	r3, #0
 8109f78:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8109f7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8109f7e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8109f80:	2301      	movs	r3, #1
 8109f82:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8109f84:	e00f      	b.n	8109fa6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8109f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8109f8a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8109f8c:	2300      	movs	r3, #0
 8109f8e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8109f90:	2301      	movs	r3, #1
 8109f92:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8109f94:	e007      	b.n	8109fa6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8109f96:	2300      	movs	r3, #0
 8109f98:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8109f9a:	2300      	movs	r3, #0
 8109f9c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8109f9e:	2301      	movs	r3, #1
 8109fa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8109fa2:	e000      	b.n	8109fa6 <ethernet_link_thread+0xd2>
    default:
      break;
 8109fa4:	bf00      	nop
    }

    if(linkchanged)
 8109fa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8109fa8:	2b00      	cmp	r3, #0
 8109faa:	d018      	beq.n	8109fde <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8109fac:	f107 0308 	add.w	r3, r7, #8
 8109fb0:	4619      	mov	r1, r3
 8109fb2:	480e      	ldr	r0, [pc, #56]	@ (8109fec <ethernet_link_thread+0x118>)
 8109fb4:	f003 fc44 	bl	810d840 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8109fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8109fba:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8109fbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8109fbe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8109fc0:	f107 0308 	add.w	r3, r7, #8
 8109fc4:	4619      	mov	r1, r3
 8109fc6:	4809      	ldr	r0, [pc, #36]	@ (8109fec <ethernet_link_thread+0x118>)
 8109fc8:	f003 fe0e 	bl	810dbe8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8109fcc:	4807      	ldr	r0, [pc, #28]	@ (8109fec <ethernet_link_thread+0x118>)
 8109fce:	f002 ff8f 	bl	810cef0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8109fd2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8109fd4:	f011 faec 	bl	811b5b0 <netif_set_up>
      netif_set_link_up(netif);
 8109fd8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8109fda:	f011 fb87 	bl	811b6ec <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8109fde:	2064      	movs	r0, #100	@ 0x64
 8109fe0:	f009 fa93 	bl	811350a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8109fe4:	e78b      	b.n	8109efe <ethernet_link_thread+0x2a>
 8109fe6:	bf00      	nop
 8109fe8:	10000400 	.word	0x10000400
 8109fec:	10000318 	.word	0x10000318

08109ff0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8109ff0:	b580      	push	{r7, lr}
 8109ff2:	b086      	sub	sp, #24
 8109ff4:	af02      	add	r7, sp, #8
 8109ff6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8109ff8:	4812      	ldr	r0, [pc, #72]	@ (810a044 <HAL_ETH_RxAllocateCallback+0x54>)
 8109ffa:	f011 f84d 	bl	811b098 <memp_malloc_pool>
 8109ffe:	60f8      	str	r0, [r7, #12]
  if (p)
 810a000:	68fb      	ldr	r3, [r7, #12]
 810a002:	2b00      	cmp	r3, #0
 810a004:	d014      	beq.n	810a030 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 810a006:	68fb      	ldr	r3, [r7, #12]
 810a008:	f103 0220 	add.w	r2, r3, #32
 810a00c:	687b      	ldr	r3, [r7, #4]
 810a00e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 810a010:	68fb      	ldr	r3, [r7, #12]
 810a012:	4a0d      	ldr	r2, [pc, #52]	@ (810a048 <HAL_ETH_RxAllocateCallback+0x58>)
 810a014:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 810a016:	687b      	ldr	r3, [r7, #4]
 810a018:	681b      	ldr	r3, [r3, #0]
 810a01a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810a01e:	9201      	str	r2, [sp, #4]
 810a020:	9300      	str	r3, [sp, #0]
 810a022:	68fb      	ldr	r3, [r7, #12]
 810a024:	2241      	movs	r2, #65	@ 0x41
 810a026:	2100      	movs	r1, #0
 810a028:	2000      	movs	r0, #0
 810a02a:	f011 fdb7 	bl	811bb9c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 810a02e:	e005      	b.n	810a03c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 810a030:	4b06      	ldr	r3, [pc, #24]	@ (810a04c <HAL_ETH_RxAllocateCallback+0x5c>)
 810a032:	2201      	movs	r2, #1
 810a034:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 810a036:	687b      	ldr	r3, [r7, #4]
 810a038:	2200      	movs	r2, #0
 810a03a:	601a      	str	r2, [r3, #0]
}
 810a03c:	bf00      	nop
 810a03e:	3710      	adds	r7, #16
 810a040:	46bd      	mov	sp, r7
 810a042:	bd80      	pop	{r7, pc}
 810a044:	08128590 	.word	0x08128590
 810a048:	08109c71 	.word	0x08109c71
 810a04c:	1000030c 	.word	0x1000030c

0810a050 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 810a050:	b480      	push	{r7}
 810a052:	b089      	sub	sp, #36	@ 0x24
 810a054:	af00      	add	r7, sp, #0
 810a056:	60f8      	str	r0, [r7, #12]
 810a058:	60b9      	str	r1, [r7, #8]
 810a05a:	607a      	str	r2, [r7, #4]
 810a05c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 810a05e:	68fb      	ldr	r3, [r7, #12]
 810a060:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 810a062:	68bb      	ldr	r3, [r7, #8]
 810a064:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 810a066:	2300      	movs	r3, #0
 810a068:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 810a06a:	687b      	ldr	r3, [r7, #4]
 810a06c:	3b20      	subs	r3, #32
 810a06e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 810a070:	69fb      	ldr	r3, [r7, #28]
 810a072:	2200      	movs	r2, #0
 810a074:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 810a076:	69fb      	ldr	r3, [r7, #28]
 810a078:	2200      	movs	r2, #0
 810a07a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 810a07c:	69fb      	ldr	r3, [r7, #28]
 810a07e:	887a      	ldrh	r2, [r7, #2]
 810a080:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 810a082:	69bb      	ldr	r3, [r7, #24]
 810a084:	681b      	ldr	r3, [r3, #0]
 810a086:	2b00      	cmp	r3, #0
 810a088:	d103      	bne.n	810a092 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 810a08a:	69bb      	ldr	r3, [r7, #24]
 810a08c:	69fa      	ldr	r2, [r7, #28]
 810a08e:	601a      	str	r2, [r3, #0]
 810a090:	e003      	b.n	810a09a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 810a092:	697b      	ldr	r3, [r7, #20]
 810a094:	681b      	ldr	r3, [r3, #0]
 810a096:	69fa      	ldr	r2, [r7, #28]
 810a098:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 810a09a:	697b      	ldr	r3, [r7, #20]
 810a09c:	69fa      	ldr	r2, [r7, #28]
 810a09e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 810a0a0:	69bb      	ldr	r3, [r7, #24]
 810a0a2:	681b      	ldr	r3, [r3, #0]
 810a0a4:	61fb      	str	r3, [r7, #28]
 810a0a6:	e009      	b.n	810a0bc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 810a0a8:	69fb      	ldr	r3, [r7, #28]
 810a0aa:	891a      	ldrh	r2, [r3, #8]
 810a0ac:	887b      	ldrh	r3, [r7, #2]
 810a0ae:	4413      	add	r3, r2
 810a0b0:	b29a      	uxth	r2, r3
 810a0b2:	69fb      	ldr	r3, [r7, #28]
 810a0b4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 810a0b6:	69fb      	ldr	r3, [r7, #28]
 810a0b8:	681b      	ldr	r3, [r3, #0]
 810a0ba:	61fb      	str	r3, [r7, #28]
 810a0bc:	69fb      	ldr	r3, [r7, #28]
 810a0be:	2b00      	cmp	r3, #0
 810a0c0:	d1f2      	bne.n	810a0a8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 810a0c2:	bf00      	nop
 810a0c4:	bf00      	nop
 810a0c6:	3724      	adds	r7, #36	@ 0x24
 810a0c8:	46bd      	mov	sp, r7
 810a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0ce:	4770      	bx	lr

0810a0d0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 810a0d0:	b580      	push	{r7, lr}
 810a0d2:	b082      	sub	sp, #8
 810a0d4:	af00      	add	r7, sp, #0
 810a0d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 810a0d8:	6878      	ldr	r0, [r7, #4]
 810a0da:	f011 ff17 	bl	811bf0c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 810a0de:	bf00      	nop
 810a0e0:	3708      	adds	r7, #8
 810a0e2:	46bd      	mov	sp, r7
 810a0e4:	bd80      	pop	{r7, pc}
	...

0810a0e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810a0e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810a120 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810a0ec:	f002 fc60 	bl	810c9b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810a0f0:	480c      	ldr	r0, [pc, #48]	@ (810a124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810a0f2:	490d      	ldr	r1, [pc, #52]	@ (810a128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810a0f4:	4a0d      	ldr	r2, [pc, #52]	@ (810a12c <LoopFillZerobss+0x1a>)
  movs r3, #0
 810a0f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810a0f8:	e002      	b.n	810a100 <LoopCopyDataInit>

0810a0fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810a0fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810a0fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810a0fe:	3304      	adds	r3, #4

0810a100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810a100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810a102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810a104:	d3f9      	bcc.n	810a0fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810a106:	4a0a      	ldr	r2, [pc, #40]	@ (810a130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810a108:	4c0a      	ldr	r4, [pc, #40]	@ (810a134 <LoopFillZerobss+0x22>)
  movs r3, #0
 810a10a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810a10c:	e001      	b.n	810a112 <LoopFillZerobss>

0810a10e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810a10e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810a110:	3204      	adds	r2, #4

0810a112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810a112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810a114:	d3fb      	bcc.n	810a10e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810a116:	f01a fcdd 	bl	8124ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810a11a:	f7f7 f921 	bl	8101360 <main>
  bx  lr
 810a11e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810a120:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810a124:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810a128:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 810a12c:	08128d20 	.word	0x08128d20
  ldr r2, =_sbss
 810a130:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 810a134:	1000e658 	.word	0x1000e658

0810a138 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810a138:	e7fe      	b.n	810a138 <ADC3_IRQHandler>

0810a13a <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 810a13a:	b480      	push	{r7}
 810a13c:	b083      	sub	sp, #12
 810a13e:	af00      	add	r7, sp, #0
 810a140:	6078      	str	r0, [r7, #4]
 810a142:	6039      	str	r1, [r7, #0]
 810a144:	687b      	ldr	r3, [r7, #4]
 810a146:	4618      	mov	r0, r3
 810a148:	370c      	adds	r7, #12
 810a14a:	46bd      	mov	sp, r7
 810a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a150:	4770      	bx	lr

0810a152 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 810a152:	b480      	push	{r7}
 810a154:	b083      	sub	sp, #12
 810a156:	af00      	add	r7, sp, #0
 810a158:	7138      	strb	r0, [r7, #4]
 810a15a:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 810a15c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 810a160:	b2db      	uxtb	r3, r3
 810a162:	09db      	lsrs	r3, r3, #7
 810a164:	b2db      	uxtb	r3, r3
 810a166:	4618      	mov	r0, r3
 810a168:	370c      	adds	r7, #12
 810a16a:	46bd      	mov	sp, r7
 810a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a170:	4770      	bx	lr

0810a172 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 810a172:	b480      	push	{r7}
 810a174:	af00      	add	r7, sp, #0
 810a176:	bf00      	nop
 810a178:	4618      	mov	r0, r3
 810a17a:	46bd      	mov	sp, r7
 810a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a180:	4770      	bx	lr

0810a182 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 810a182:	b480      	push	{r7}
 810a184:	b083      	sub	sp, #12
 810a186:	af00      	add	r7, sp, #0
 810a188:	7138      	strb	r0, [r7, #4]
 810a18a:	bf00      	nop
 810a18c:	4618      	mov	r0, r3
 810a18e:	370c      	adds	r7, #12
 810a190:	46bd      	mov	sp, r7
 810a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a196:	4770      	bx	lr

0810a198 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 810a198:	b480      	push	{r7}
 810a19a:	b083      	sub	sp, #12
 810a19c:	af00      	add	r7, sp, #0
 810a19e:	6078      	str	r0, [r7, #4]
 810a1a0:	687b      	ldr	r3, [r7, #4]
 810a1a2:	fab3 f383 	clz	r3, r3
 810a1a6:	f1c3 031f 	rsb	r3, r3, #31
 810a1aa:	4618      	mov	r0, r3
 810a1ac:	370c      	adds	r7, #12
 810a1ae:	46bd      	mov	sp, r7
 810a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1b4:	4770      	bx	lr

0810a1b6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 810a1b6:	b580      	push	{r7, lr}
 810a1b8:	b082      	sub	sp, #8
 810a1ba:	af00      	add	r7, sp, #0
 810a1bc:	ed87 0a01 	vstr	s0, [r7, #4]
 810a1c0:	ed97 0a01 	vldr	s0, [r7, #4]
 810a1c4:	f019 fbe8 	bl	8123998 <roundf>
 810a1c8:	eef0 7a40 	vmov.f32	s15, s0
 810a1cc:	eeb0 0a67 	vmov.f32	s0, s15
 810a1d0:	3708      	adds	r7, #8
 810a1d2:	46bd      	mov	sp, r7
 810a1d4:	bd80      	pop	{r7, pc}
	...

0810a1d8 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 810a1d8:	b480      	push	{r7}
 810a1da:	af00      	add	r7, sp, #0
 810a1dc:	4b02      	ldr	r3, [pc, #8]	@ (810a1e8 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 810a1de:	4618      	mov	r0, r3
 810a1e0:	46bd      	mov	sp, r7
 810a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1e6:	4770      	bx	lr
 810a1e8:	ffff8000 	.word	0xffff8000

0810a1ec <_Z15StartTask_CTempPv>:
constexpr uint16_t MCP9808_I2C_ADDRESS 	= 0x18 << 1;  // MCP9808 address (shift for HAL I2C)
constexpr uint8_t  MCP9808_TEMP_REG    	= 0x05;       // Temperature register


void StartTask_CTemp(void *argument)
{
 810a1ec:	b580      	push	{r7, lr}
 810a1ee:	b088      	sub	sp, #32
 810a1f0:	af00      	add	r7, sp, #0
 810a1f2:	6078      	str	r0, [r7, #4]
	TemperatureTask TemperatureTaskInstance;
 810a1f4:	f107 0308 	add.w	r3, r7, #8
 810a1f8:	4618      	mov	r0, r3
 810a1fa:	f000 f831 	bl	810a260 <_ZN15TemperatureTaskC1Ev>

    for (;;)
    {
    	TemperatureTaskInstance.process();
 810a1fe:	f107 0308 	add.w	r3, r7, #8
 810a202:	4618      	mov	r0, r3
 810a204:	f000 f848 	bl	810a298 <_ZN15TemperatureTask7processEv>
    	osDelay(2000);
 810a208:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 810a20c:	f009 f97d 	bl	811350a <osDelay>
    	TemperatureTaskInstance.process();
 810a210:	bf00      	nop
 810a212:	e7f4      	b.n	810a1fe <_Z15StartTask_CTempPv+0x12>

0810a214 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 810a214:	b580      	push	{r7, lr}
 810a216:	b082      	sub	sp, #8
 810a218:	af00      	add	r7, sp, #0
 810a21a:	6078      	str	r0, [r7, #4]
 810a21c:	6878      	ldr	r0, [r7, #4]
 810a21e:	f000 f9da 	bl	810a5d6 <_ZNSaIfED1Ev>
 810a222:	687b      	ldr	r3, [r7, #4]
 810a224:	4618      	mov	r0, r3
 810a226:	3708      	adds	r7, #8
 810a228:	46bd      	mov	sp, r7
 810a22a:	bd80      	pop	{r7, pc}

0810a22c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 810a22c:	b580      	push	{r7, lr}
 810a22e:	b082      	sub	sp, #8
 810a230:	af00      	add	r7, sp, #0
 810a232:	6078      	str	r0, [r7, #4]
 810a234:	687b      	ldr	r3, [r7, #4]
 810a236:	4618      	mov	r0, r3
 810a238:	f000 f9bd 	bl	810a5b6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 810a23c:	687b      	ldr	r3, [r7, #4]
 810a23e:	4618      	mov	r0, r3
 810a240:	3708      	adds	r7, #8
 810a242:	46bd      	mov	sp, r7
 810a244:	bd80      	pop	{r7, pc}

0810a246 <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 810a246:	b580      	push	{r7, lr}
 810a248:	b082      	sub	sp, #8
 810a24a:	af00      	add	r7, sp, #0
 810a24c:	6078      	str	r0, [r7, #4]
 810a24e:	687b      	ldr	r3, [r7, #4]
 810a250:	4618      	mov	r0, r3
 810a252:	f7ff ffeb 	bl	810a22c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 810a256:	687b      	ldr	r3, [r7, #4]
 810a258:	4618      	mov	r0, r3
 810a25a:	3708      	adds	r7, #8
 810a25c:	46bd      	mov	sp, r7
 810a25e:	bd80      	pop	{r7, pc}

0810a260 <_ZN15TemperatureTaskC1Ev>:
    }
}

TemperatureTask::TemperatureTask() : event_bus(EventBus(queueToTemperature, EVENT_CLIENT_THERMOMETER))
 810a260:	b580      	push	{r7, lr}
 810a262:	b082      	sub	sp, #8
 810a264:	af00      	add	r7, sp, #0
 810a266:	6078      	str	r0, [r7, #4]
 810a268:	687b      	ldr	r3, [r7, #4]
 810a26a:	4618      	mov	r0, r3
 810a26c:	f7ff ffeb 	bl	810a246 <_ZNSt6vectorIfSaIfEEC1Ev>
 810a270:	687b      	ldr	r3, [r7, #4]
 810a272:	330c      	adds	r3, #12
 810a274:	4a07      	ldr	r2, [pc, #28]	@ (810a294 <_ZN15TemperatureTaskC1Ev+0x34>)
 810a276:	6811      	ldr	r1, [r2, #0]
 810a278:	2205      	movs	r2, #5
 810a27a:	4618      	mov	r0, r3
 810a27c:	f7fc fa02 	bl	8106684 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
{
	measurements.reserve(MEASUREMENTS_COUNT);
 810a280:	687b      	ldr	r3, [r7, #4]
 810a282:	2106      	movs	r1, #6
 810a284:	4618      	mov	r0, r3
 810a286:	f000 f9db 	bl	810a640 <_ZNSt6vectorIfSaIfEE7reserveEj>
}
 810a28a:	687b      	ldr	r3, [r7, #4]
 810a28c:	4618      	mov	r0, r3
 810a28e:	3708      	adds	r7, #8
 810a290:	46bd      	mov	sp, r7
 810a292:	bd80      	pop	{r7, pc}
 810a294:	100001d8 	.word	0x100001d8

0810a298 <_ZN15TemperatureTask7processEv>:

void TemperatureTask::process()
{
 810a298:	b5f0      	push	{r4, r5, r6, r7, lr}
 810a29a:	b08f      	sub	sp, #60	@ 0x3c
 810a29c:	af04      	add	r7, sp, #16
 810a29e:	6078      	str	r0, [r7, #4]
	uint32_t err = doMeasurement();
 810a2a0:	6878      	ldr	r0, [r7, #4]
 810a2a2:	f000 f8b5 	bl	810a410 <_ZN15TemperatureTask13doMeasurementEv>
 810a2a6:	6278      	str	r0, [r7, #36]	@ 0x24
	if( err != HAL_I2C_ERROR_NONE)
 810a2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a2aa:	2b00      	cmp	r3, #0
 810a2ac:	d130      	bne.n	810a310 <_ZN15TemperatureTask7processEv+0x78>
	{
		return;
	}
	short int measurement = getMedian();
 810a2ae:	6878      	ldr	r0, [r7, #4]
 810a2b0:	f000 f834 	bl	810a31c <_ZN15TemperatureTask9getMedianEv>
 810a2b4:	4603      	mov	r3, r0
 810a2b6:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(measurement == std::numeric_limits<short int>::min())
 810a2b8:	f7ff ff8e 	bl	810a1d8 <_ZNSt14numeric_limitsIsE3minEv>
 810a2bc:	4603      	mov	r3, r0
 810a2be:	461a      	mov	r2, r3
 810a2c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810a2c4:	4293      	cmp	r3, r2
 810a2c6:	bf0c      	ite	eq
 810a2c8:	2301      	moveq	r3, #1
 810a2ca:	2300      	movne	r3, #0
 810a2cc:	b2db      	uxtb	r3, r3
 810a2ce:	2b00      	cmp	r3, #0
 810a2d0:	d120      	bne.n	810a314 <_ZN15TemperatureTask7processEv+0x7c>
	{
		return;
	}
	EEventClient receiver = EVENT_CLIENT_FRONTEND;
 810a2d2:	2300      	movs	r3, #0
 810a2d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	EEventType event = EVENT_UPDATE_ROOM_TEMPERATURE;
 810a2d8:	2387      	movs	r3, #135	@ 0x87
 810a2da:	f887 3020 	strb.w	r3, [r7, #32]
	UMessageData data;
	data.room_temperature = measurement;
 810a2de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810a2e0:	81bb      	strh	r3, [r7, #12]
	event_bus.send(event, data, receiver);
 810a2e2:	687b      	ldr	r3, [r7, #4]
 810a2e4:	f103 050c 	add.w	r5, r3, #12
 810a2e8:	f897 6020 	ldrb.w	r6, [r7, #32]
 810a2ec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810a2f0:	9303      	str	r3, [sp, #12]
 810a2f2:	466c      	mov	r4, sp
 810a2f4:	f107 0314 	add.w	r3, r7, #20
 810a2f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810a2fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810a300:	f107 030c 	add.w	r3, r7, #12
 810a304:	cb0c      	ldmia	r3, {r2, r3}
 810a306:	4631      	mov	r1, r6
 810a308:	4628      	mov	r0, r5
 810a30a:	f7fc f9d5 	bl	81066b8 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
 810a30e:	e002      	b.n	810a316 <_ZN15TemperatureTask7processEv+0x7e>
		return;
 810a310:	bf00      	nop
 810a312:	e000      	b.n	810a316 <_ZN15TemperatureTask7processEv+0x7e>
		return;
 810a314:	bf00      	nop
}
 810a316:	372c      	adds	r7, #44	@ 0x2c
 810a318:	46bd      	mov	sp, r7
 810a31a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810a31c <_ZN15TemperatureTask9getMedianEv>:

short int TemperatureTask::getMedian()
{
 810a31c:	b590      	push	{r4, r7, lr}
 810a31e:	ed2d 8b02 	vpush	{d8}
 810a322:	b089      	sub	sp, #36	@ 0x24
 810a324:	af00      	add	r7, sp, #0
 810a326:	6078      	str	r0, [r7, #4]
	short int median = std::numeric_limits<short>::min();
 810a328:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a32c:	83fb      	strh	r3, [r7, #30]
	size_t currMesSize = measurements.size();
 810a32e:	687b      	ldr	r3, [r7, #4]
 810a330:	4618      	mov	r0, r3
 810a332:	f000 f974 	bl	810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810a336:	61b8      	str	r0, [r7, #24]

	if(currMesSize > 0)
 810a338:	69bb      	ldr	r3, [r7, #24]
 810a33a:	2b00      	cmp	r3, #0
 810a33c:	d05f      	beq.n	810a3fe <_ZN15TemperatureTask9getMedianEv+0xe2>
	{
		std::vector<float> sortedCopy = measurements;
 810a33e:	687a      	ldr	r2, [r7, #4]
 810a340:	f107 030c 	add.w	r3, r7, #12
 810a344:	4611      	mov	r1, r2
 810a346:	4618      	mov	r0, r3
 810a348:	f000 f9d4 	bl	810a6f4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
		std::sort(sortedCopy.begin(), sortedCopy.end());
 810a34c:	f107 030c 	add.w	r3, r7, #12
 810a350:	4618      	mov	r0, r3
 810a352:	f000 fa0c 	bl	810a76e <_ZNSt6vectorIfSaIfEE5beginEv>
 810a356:	4604      	mov	r4, r0
 810a358:	f107 030c 	add.w	r3, r7, #12
 810a35c:	4618      	mov	r0, r3
 810a35e:	f000 fa16 	bl	810a78e <_ZNSt6vectorIfSaIfEE3endEv>
 810a362:	4603      	mov	r3, r0
 810a364:	4619      	mov	r1, r3
 810a366:	4620      	mov	r0, r4
 810a368:	f000 fa22 	bl	810a7b0 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

		if(currMesSize % 2 == 0)
 810a36c:	69bb      	ldr	r3, [r7, #24]
 810a36e:	f003 0301 	and.w	r3, r3, #1
 810a372:	2b00      	cmp	r3, #0
 810a374:	d128      	bne.n	810a3c8 <_ZN15TemperatureTask9getMedianEv+0xac>
		{
			median = static_cast<short int>(std::round((sortedCopy[currMesSize / 2 - 1] + sortedCopy[currMesSize / 2]) / 2));
 810a376:	69bb      	ldr	r3, [r7, #24]
 810a378:	085b      	lsrs	r3, r3, #1
 810a37a:	1e5a      	subs	r2, r3, #1
 810a37c:	f107 030c 	add.w	r3, r7, #12
 810a380:	4611      	mov	r1, r2
 810a382:	4618      	mov	r0, r3
 810a384:	f000 fa24 	bl	810a7d0 <_ZNSt6vectorIfSaIfEEixEj>
 810a388:	4603      	mov	r3, r0
 810a38a:	ed93 8a00 	vldr	s16, [r3]
 810a38e:	69bb      	ldr	r3, [r7, #24]
 810a390:	085a      	lsrs	r2, r3, #1
 810a392:	f107 030c 	add.w	r3, r7, #12
 810a396:	4611      	mov	r1, r2
 810a398:	4618      	mov	r0, r3
 810a39a:	f000 fa19 	bl	810a7d0 <_ZNSt6vectorIfSaIfEEixEj>
 810a39e:	4603      	mov	r3, r0
 810a3a0:	edd3 7a00 	vldr	s15, [r3]
 810a3a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 810a3a8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 810a3ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 810a3b0:	eeb0 0a47 	vmov.f32	s0, s14
 810a3b4:	f7ff feff 	bl	810a1b6 <_ZSt5roundf>
 810a3b8:	eef0 7a40 	vmov.f32	s15, s0
 810a3bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810a3c0:	ee17 3a90 	vmov	r3, s15
 810a3c4:	83fb      	strh	r3, [r7, #30]
 810a3c6:	e015      	b.n	810a3f4 <_ZN15TemperatureTask9getMedianEv+0xd8>
		}
		else
		{
			median = static_cast<short int>(std::round(sortedCopy[currMesSize / 2]));
 810a3c8:	69bb      	ldr	r3, [r7, #24]
 810a3ca:	085a      	lsrs	r2, r3, #1
 810a3cc:	f107 030c 	add.w	r3, r7, #12
 810a3d0:	4611      	mov	r1, r2
 810a3d2:	4618      	mov	r0, r3
 810a3d4:	f000 f9fc 	bl	810a7d0 <_ZNSt6vectorIfSaIfEEixEj>
 810a3d8:	4603      	mov	r3, r0
 810a3da:	edd3 7a00 	vldr	s15, [r3]
 810a3de:	eeb0 0a67 	vmov.f32	s0, s15
 810a3e2:	f7ff fee8 	bl	810a1b6 <_ZSt5roundf>
 810a3e6:	eef0 7a40 	vmov.f32	s15, s0
 810a3ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810a3ee:	ee17 3a90 	vmov	r3, s15
 810a3f2:	83fb      	strh	r3, [r7, #30]
		}
	}
 810a3f4:	f107 030c 	add.w	r3, r7, #12
 810a3f8:	4618      	mov	r0, r3
 810a3fa:	f000 f8c1 	bl	810a580 <_ZNSt6vectorIfSaIfEED1Ev>
	return median;
 810a3fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 810a402:	4618      	mov	r0, r3
 810a404:	3724      	adds	r7, #36	@ 0x24
 810a406:	46bd      	mov	sp, r7
 810a408:	ecbd 8b02 	vpop	{d8}
 810a40c:	bd90      	pop	{r4, r7, pc}
	...

0810a410 <_ZN15TemperatureTask13doMeasurementEv>:

uint32_t TemperatureTask::doMeasurement()
{
 810a410:	b5b0      	push	{r4, r5, r7, lr}
 810a412:	ed2d 8b02 	vpush	{d8}
 810a416:	b090      	sub	sp, #64	@ 0x40
 810a418:	af04      	add	r7, sp, #16
 810a41a:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

    if (HAL_I2C_Mem_Read(&hi2c4, MCP9808_I2C_ADDRESS, MCP9808_TEMP_REG, I2C_MEMADD_SIZE_8BIT, data, 2, 1000u) != HAL_OK)
 810a41c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810a420:	9302      	str	r3, [sp, #8]
 810a422:	2302      	movs	r3, #2
 810a424:	9301      	str	r3, [sp, #4]
 810a426:	f107 030c 	add.w	r3, r7, #12
 810a42a:	9300      	str	r3, [sp, #0]
 810a42c:	2301      	movs	r3, #1
 810a42e:	2205      	movs	r2, #5
 810a430:	2130      	movs	r1, #48	@ 0x30
 810a432:	4852      	ldr	r0, [pc, #328]	@ (810a57c <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 810a434:	f004 fdc4 	bl	810efc0 <HAL_I2C_Mem_Read>
 810a438:	4603      	mov	r3, r0
 810a43a:	2b00      	cmp	r3, #0
 810a43c:	bf14      	ite	ne
 810a43e:	2301      	movne	r3, #1
 810a440:	2300      	moveq	r3, #0
 810a442:	b2db      	uxtb	r3, r3
 810a444:	2b00      	cmp	r3, #0
 810a446:	d00b      	beq.n	810a460 <_ZN15TemperatureTask13doMeasurementEv+0x50>
    {
    	uint32_t err = HAL_I2C_GetError(&hi2c4);
 810a448:	484c      	ldr	r0, [pc, #304]	@ (810a57c <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 810a44a:	f004 fed3 	bl	810f1f4 <HAL_I2C_GetError>
 810a44e:	61b8      	str	r0, [r7, #24]
        // Error handling - restart I2C4 interface
    	HAL_I2C_DeInit(&hi2c4);
 810a450:	484a      	ldr	r0, [pc, #296]	@ (810a57c <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 810a452:	f004 fd86 	bl	810ef62 <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c4);
 810a456:	4849      	ldr	r0, [pc, #292]	@ (810a57c <_ZN15TemperatureTask13doMeasurementEv+0x16c>)
 810a458:	f004 fce8 	bl	810ee2c <HAL_I2C_Init>
    	//do not block other tasks, try again later.
    	return err;
 810a45c:	69bb      	ldr	r3, [r7, #24]
 810a45e:	e086      	b.n	810a56e <_ZN15TemperatureTask13doMeasurementEv+0x15e>
    }

	uint16_t dataLong;
	float tmpVal = 0;
 810a460:	f04f 0300 	mov.w	r3, #0
 810a464:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float tmpValDec;

	dataLong = ((data[0] << 8u) | data[1]);
 810a466:	7b3b      	ldrb	r3, [r7, #12]
 810a468:	021b      	lsls	r3, r3, #8
 810a46a:	b21a      	sxth	r2, r3
 810a46c:	7b7b      	ldrb	r3, [r7, #13]
 810a46e:	b21b      	sxth	r3, r3
 810a470:	4313      	orrs	r3, r2
 810a472:	b21b      	sxth	r3, r3
 810a474:	847b      	strh	r3, [r7, #34]	@ 0x22
	/* Extract the integer part from the fixed point value */
	tmpVal = ((dataLong & 0x0FFF) >> 4);
 810a476:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810a478:	091b      	lsrs	r3, r3, #4
 810a47a:	b29b      	uxth	r3, r3
 810a47c:	b2db      	uxtb	r3, r3
 810a47e:	ee07 3a90 	vmov	s15, r3
 810a482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810a486:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* Extract decimal part */
	tmpValDec = 0.0625;
 810a48a:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 810a48e:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 810a490:	2300      	movs	r3, #0
 810a492:	627b      	str	r3, [r7, #36]	@ 0x24
 810a494:	e01c      	b.n	810a4d0 <_ZN15TemperatureTask13doMeasurementEv+0xc0>
	{
		tmpVal += ((dataLong >> i) & 0x0001) * tmpValDec;
 810a496:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 810a498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a49a:	fa42 f303 	asr.w	r3, r2, r3
 810a49e:	f003 0301 	and.w	r3, r3, #1
 810a4a2:	ee07 3a90 	vmov	s15, r3
 810a4a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810a4aa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 810a4ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a4b2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 810a4b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 810a4ba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		tmpValDec *= 2u;
 810a4be:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 810a4c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810a4c6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 810a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a4cc:	3301      	adds	r3, #1
 810a4ce:	627b      	str	r3, [r7, #36]	@ 0x24
 810a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a4d2:	2b03      	cmp	r3, #3
 810a4d4:	dddf      	ble.n	810a496 <_ZN15TemperatureTask13doMeasurementEv+0x86>
	}

	short int measurement = static_cast<short int>(tmpVal);
 810a4d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 810a4da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810a4de:	ee17 3a90 	vmov	r3, s15
 810a4e2:	843b      	strh	r3, [r7, #32]

	size_t currMesSize = measurements.size();
 810a4e4:	687b      	ldr	r3, [r7, #4]
 810a4e6:	4618      	mov	r0, r3
 810a4e8:	f000 f899 	bl	810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810a4ec:	61f8      	str	r0, [r7, #28]

	if(currMesSize < MEASUREMENTS_COUNT)
 810a4ee:	69fb      	ldr	r3, [r7, #28]
 810a4f0:	2b05      	cmp	r3, #5
 810a4f2:	d80f      	bhi.n	810a514 <_ZN15TemperatureTask13doMeasurementEv+0x104>
	{
		measurements.push_back(measurement);
 810a4f4:	687b      	ldr	r3, [r7, #4]
 810a4f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a4fa:	ee07 2a90 	vmov	s15, r2
 810a4fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810a502:	edc7 7a04 	vstr	s15, [r7, #16]
 810a506:	f107 0210 	add.w	r2, r7, #16
 810a50a:	4611      	mov	r1, r2
 810a50c:	4618      	mov	r0, r3
 810a50e:	f000 f96f 	bl	810a7f0 <_ZNSt6vectorIfSaIfEE9push_backEOf>
 810a512:	e02b      	b.n	810a56c <_ZN15TemperatureTask13doMeasurementEv+0x15c>
	}
	else
	{
		std::rotate(measurements.begin(), measurements.begin() + 1, measurements.end());
 810a514:	687b      	ldr	r3, [r7, #4]
 810a516:	4618      	mov	r0, r3
 810a518:	f000 f929 	bl	810a76e <_ZNSt6vectorIfSaIfEE5beginEv>
 810a51c:	4604      	mov	r4, r0
 810a51e:	687b      	ldr	r3, [r7, #4]
 810a520:	4618      	mov	r0, r3
 810a522:	f000 f924 	bl	810a76e <_ZNSt6vectorIfSaIfEE5beginEv>
 810a526:	4603      	mov	r3, r0
 810a528:	617b      	str	r3, [r7, #20]
 810a52a:	f107 0314 	add.w	r3, r7, #20
 810a52e:	2101      	movs	r1, #1
 810a530:	4618      	mov	r0, r3
 810a532:	f000 f96e 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810a536:	4605      	mov	r5, r0
 810a538:	687b      	ldr	r3, [r7, #4]
 810a53a:	4618      	mov	r0, r3
 810a53c:	f000 f927 	bl	810a78e <_ZNSt6vectorIfSaIfEE3endEv>
 810a540:	4603      	mov	r3, r0
 810a542:	461a      	mov	r2, r3
 810a544:	4629      	mov	r1, r5
 810a546:	4620      	mov	r0, r4
 810a548:	f000 f97b 	bl	810a842 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>
		measurements[currMesSize - 1] = measurement;
 810a54c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810a550:	ee07 3a90 	vmov	s15, r3
 810a554:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 810a558:	687a      	ldr	r2, [r7, #4]
 810a55a:	69fb      	ldr	r3, [r7, #28]
 810a55c:	3b01      	subs	r3, #1
 810a55e:	4619      	mov	r1, r3
 810a560:	4610      	mov	r0, r2
 810a562:	f000 f935 	bl	810a7d0 <_ZNSt6vectorIfSaIfEEixEj>
 810a566:	4603      	mov	r3, r0
 810a568:	ed83 8a00 	vstr	s16, [r3]
	}
	return HAL_I2C_ERROR_NONE;
 810a56c:	2300      	movs	r3, #0
}
 810a56e:	4618      	mov	r0, r3
 810a570:	3730      	adds	r7, #48	@ 0x30
 810a572:	46bd      	mov	sp, r7
 810a574:	ecbd 8b02 	vpop	{d8}
 810a578:	bdb0      	pop	{r4, r5, r7, pc}
 810a57a:	bf00      	nop
 810a57c:	100000d0 	.word	0x100000d0

0810a580 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 810a580:	b5b0      	push	{r4, r5, r7, lr}
 810a582:	b082      	sub	sp, #8
 810a584:	af00      	add	r7, sp, #0
 810a586:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 810a588:	687b      	ldr	r3, [r7, #4]
 810a58a:	681c      	ldr	r4, [r3, #0]
 810a58c:	687b      	ldr	r3, [r7, #4]
 810a58e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 810a590:	687b      	ldr	r3, [r7, #4]
 810a592:	4618      	mov	r0, r3
 810a594:	f000 f96b 	bl	810a86e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810a598:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 810a59a:	461a      	mov	r2, r3
 810a59c:	4629      	mov	r1, r5
 810a59e:	4620      	mov	r0, r4
 810a5a0:	f000 f970 	bl	810a884 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 810a5a4:	687b      	ldr	r3, [r7, #4]
 810a5a6:	4618      	mov	r0, r3
 810a5a8:	f000 f820 	bl	810a5ec <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 810a5ac:	687b      	ldr	r3, [r7, #4]
 810a5ae:	4618      	mov	r0, r3
 810a5b0:	3708      	adds	r7, #8
 810a5b2:	46bd      	mov	sp, r7
 810a5b4:	bdb0      	pop	{r4, r5, r7, pc}

0810a5b6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 810a5b6:	b580      	push	{r7, lr}
 810a5b8:	b082      	sub	sp, #8
 810a5ba:	af00      	add	r7, sp, #0
 810a5bc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 810a5be:	6878      	ldr	r0, [r7, #4]
 810a5c0:	f000 f96e 	bl	810a8a0 <_ZNSaIfEC1Ev>
 810a5c4:	687b      	ldr	r3, [r7, #4]
 810a5c6:	4618      	mov	r0, r3
 810a5c8:	f000 f976 	bl	810a8b8 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 810a5cc:	687b      	ldr	r3, [r7, #4]
 810a5ce:	4618      	mov	r0, r3
 810a5d0:	3708      	adds	r7, #8
 810a5d2:	46bd      	mov	sp, r7
 810a5d4:	bd80      	pop	{r7, pc}

0810a5d6 <_ZNSaIfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 810a5d6:	b480      	push	{r7}
 810a5d8:	b083      	sub	sp, #12
 810a5da:	af00      	add	r7, sp, #0
 810a5dc:	6078      	str	r0, [r7, #4]
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	4618      	mov	r0, r3
 810a5e2:	370c      	adds	r7, #12
 810a5e4:	46bd      	mov	sp, r7
 810a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a5ea:	4770      	bx	lr

0810a5ec <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 810a5ec:	b580      	push	{r7, lr}
 810a5ee:	b082      	sub	sp, #8
 810a5f0:	af00      	add	r7, sp, #0
 810a5f2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 810a5f8:	687b      	ldr	r3, [r7, #4]
 810a5fa:	689a      	ldr	r2, [r3, #8]
 810a5fc:	687b      	ldr	r3, [r7, #4]
 810a5fe:	681b      	ldr	r3, [r3, #0]
 810a600:	1ad3      	subs	r3, r2, r3
 810a602:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 810a604:	461a      	mov	r2, r3
 810a606:	6878      	ldr	r0, [r7, #4]
 810a608:	f000 f96a 	bl	810a8e0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 810a60c:	687b      	ldr	r3, [r7, #4]
 810a60e:	4618      	mov	r0, r3
 810a610:	f7ff fe00 	bl	810a214 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 810a614:	687b      	ldr	r3, [r7, #4]
 810a616:	4618      	mov	r0, r3
 810a618:	3708      	adds	r7, #8
 810a61a:	46bd      	mov	sp, r7
 810a61c:	bd80      	pop	{r7, pc}

0810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 810a61e:	b480      	push	{r7}
 810a620:	b083      	sub	sp, #12
 810a622:	af00      	add	r7, sp, #0
 810a624:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	685a      	ldr	r2, [r3, #4]
 810a62a:	687b      	ldr	r3, [r7, #4]
 810a62c:	681b      	ldr	r3, [r3, #0]
 810a62e:	1ad3      	subs	r3, r2, r3
 810a630:	109b      	asrs	r3, r3, #2
 810a632:	4618      	mov	r0, r3
 810a634:	370c      	adds	r7, #12
 810a636:	46bd      	mov	sp, r7
 810a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a63c:	4770      	bx	lr
	...

0810a640 <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 810a640:	b5b0      	push	{r4, r5, r7, lr}
 810a642:	b084      	sub	sp, #16
 810a644:	af00      	add	r7, sp, #0
 810a646:	6078      	str	r0, [r7, #4]
 810a648:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 810a64a:	6878      	ldr	r0, [r7, #4]
 810a64c:	f000 f95b 	bl	810a906 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810a650:	4602      	mov	r2, r0
 810a652:	683b      	ldr	r3, [r7, #0]
 810a654:	4293      	cmp	r3, r2
 810a656:	bf8c      	ite	hi
 810a658:	2301      	movhi	r3, #1
 810a65a:	2300      	movls	r3, #0
 810a65c:	b2db      	uxtb	r3, r3
 810a65e:	2b00      	cmp	r3, #0
 810a660:	d002      	beq.n	810a668 <_ZNSt6vectorIfSaIfEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 810a662:	4823      	ldr	r0, [pc, #140]	@ (810a6f0 <_ZNSt6vectorIfSaIfEE7reserveEj+0xb0>)
 810a664:	f019 f86d 	bl	8123742 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 810a668:	6878      	ldr	r0, [r7, #4]
 810a66a:	f000 f95d 	bl	810a928 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 810a66e:	4602      	mov	r2, r0
 810a670:	683b      	ldr	r3, [r7, #0]
 810a672:	4293      	cmp	r3, r2
 810a674:	bf8c      	ite	hi
 810a676:	2301      	movhi	r3, #1
 810a678:	2300      	movls	r3, #0
 810a67a:	b2db      	uxtb	r3, r3
 810a67c:	2b00      	cmp	r3, #0
 810a67e:	d033      	beq.n	810a6e8 <_ZNSt6vectorIfSaIfEE7reserveEj+0xa8>
	  const size_type __old_size = size();
 810a680:	6878      	ldr	r0, [r7, #4]
 810a682:	f7ff ffcc 	bl	810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810a686:	60f8      	str	r0, [r7, #12]
	      __tmp = this->_M_allocate(__n);
 810a688:	687b      	ldr	r3, [r7, #4]
 810a68a:	6839      	ldr	r1, [r7, #0]
 810a68c:	4618      	mov	r0, r3
 810a68e:	f000 f95b 	bl	810a948 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810a692:	60b8      	str	r0, [r7, #8]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 810a694:	687b      	ldr	r3, [r7, #4]
 810a696:	681c      	ldr	r4, [r3, #0]
 810a698:	687b      	ldr	r3, [r7, #4]
 810a69a:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 810a69c:	687b      	ldr	r3, [r7, #4]
 810a69e:	4618      	mov	r0, r3
 810a6a0:	f000 f8e5 	bl	810a86e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810a6a4:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 810a6a6:	68ba      	ldr	r2, [r7, #8]
 810a6a8:	4629      	mov	r1, r5
 810a6aa:	4620      	mov	r0, r4
 810a6ac:	f000 f960 	bl	810a970 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
	  _M_deallocate(this->_M_impl._M_start,
 810a6b0:	6878      	ldr	r0, [r7, #4]
 810a6b2:	687b      	ldr	r3, [r7, #4]
 810a6b4:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 810a6b6:	687b      	ldr	r3, [r7, #4]
 810a6b8:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 810a6ba:	687b      	ldr	r3, [r7, #4]
 810a6bc:	681b      	ldr	r3, [r3, #0]
 810a6be:	1ad3      	subs	r3, r2, r3
 810a6c0:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 810a6c2:	461a      	mov	r2, r3
 810a6c4:	f000 f90c 	bl	810a8e0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 810a6c8:	687b      	ldr	r3, [r7, #4]
 810a6ca:	68ba      	ldr	r2, [r7, #8]
 810a6cc:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 810a6ce:	68fb      	ldr	r3, [r7, #12]
 810a6d0:	009b      	lsls	r3, r3, #2
 810a6d2:	68ba      	ldr	r2, [r7, #8]
 810a6d4:	441a      	add	r2, r3
 810a6d6:	687b      	ldr	r3, [r7, #4]
 810a6d8:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810a6da:	687b      	ldr	r3, [r7, #4]
 810a6dc:	681a      	ldr	r2, [r3, #0]
 810a6de:	683b      	ldr	r3, [r7, #0]
 810a6e0:	009b      	lsls	r3, r3, #2
 810a6e2:	441a      	add	r2, r3
 810a6e4:	687b      	ldr	r3, [r7, #4]
 810a6e6:	609a      	str	r2, [r3, #8]
    }
 810a6e8:	bf00      	nop
 810a6ea:	3710      	adds	r7, #16
 810a6ec:	46bd      	mov	sp, r7
 810a6ee:	bdb0      	pop	{r4, r5, r7, pc}
 810a6f0:	08125578 	.word	0x08125578

0810a6f4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 810a6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 810a6f6:	b085      	sub	sp, #20
 810a6f8:	af00      	add	r7, sp, #0
 810a6fa:	6078      	str	r0, [r7, #4]
 810a6fc:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 810a6fe:	687c      	ldr	r4, [r7, #4]
 810a700:	6838      	ldr	r0, [r7, #0]
 810a702:	f7ff ff8c 	bl	810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810a706:	4605      	mov	r5, r0
 810a708:	683b      	ldr	r3, [r7, #0]
 810a70a:	4618      	mov	r0, r3
 810a70c:	f000 f942 	bl	810a994 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810a710:	4602      	mov	r2, r0
 810a712:	f107 030c 	add.w	r3, r7, #12
 810a716:	4611      	mov	r1, r2
 810a718:	4618      	mov	r0, r3
 810a71a:	f000 f946 	bl	810a9aa <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 810a71e:	f107 030c 	add.w	r3, r7, #12
 810a722:	461a      	mov	r2, r3
 810a724:	4629      	mov	r1, r5
 810a726:	4620      	mov	r0, r4
 810a728:	f000 f94d 	bl	810a9c6 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 810a72c:	f107 030c 	add.w	r3, r7, #12
 810a730:	4618      	mov	r0, r3
 810a732:	f7ff ff50 	bl	810a5d6 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 810a736:	6838      	ldr	r0, [r7, #0]
 810a738:	f000 f959 	bl	810a9ee <_ZNKSt6vectorIfSaIfEE5beginEv>
 810a73c:	4605      	mov	r5, r0
 810a73e:	6838      	ldr	r0, [r7, #0]
 810a740:	f000 f965 	bl	810aa0e <_ZNKSt6vectorIfSaIfEE3endEv>
 810a744:	4606      	mov	r6, r0
 810a746:	687b      	ldr	r3, [r7, #4]
 810a748:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 810a74a:	687b      	ldr	r3, [r7, #4]
 810a74c:	4618      	mov	r0, r3
 810a74e:	f000 f88e 	bl	810a86e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810a752:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 810a754:	4622      	mov	r2, r4
 810a756:	4631      	mov	r1, r6
 810a758:	4628      	mov	r0, r5
 810a75a:	f000 f969 	bl	810aa30 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 810a75e:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	605a      	str	r2, [r3, #4]
      }
 810a764:	687b      	ldr	r3, [r7, #4]
 810a766:	4618      	mov	r0, r3
 810a768:	3714      	adds	r7, #20
 810a76a:	46bd      	mov	sp, r7
 810a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810a76e <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810a76e:	b580      	push	{r7, lr}
 810a770:	b084      	sub	sp, #16
 810a772:	af00      	add	r7, sp, #0
 810a774:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 810a776:	687a      	ldr	r2, [r7, #4]
 810a778:	f107 030c 	add.w	r3, r7, #12
 810a77c:	4611      	mov	r1, r2
 810a77e:	4618      	mov	r0, r3
 810a780:	f000 f974 	bl	810aa6c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810a784:	68fb      	ldr	r3, [r7, #12]
 810a786:	4618      	mov	r0, r3
 810a788:	3710      	adds	r7, #16
 810a78a:	46bd      	mov	sp, r7
 810a78c:	bd80      	pop	{r7, pc}

0810a78e <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810a78e:	b580      	push	{r7, lr}
 810a790:	b084      	sub	sp, #16
 810a792:	af00      	add	r7, sp, #0
 810a794:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 810a796:	687b      	ldr	r3, [r7, #4]
 810a798:	1d1a      	adds	r2, r3, #4
 810a79a:	f107 030c 	add.w	r3, r7, #12
 810a79e:	4611      	mov	r1, r2
 810a7a0:	4618      	mov	r0, r3
 810a7a2:	f000 f963 	bl	810aa6c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810a7a6:	68fb      	ldr	r3, [r7, #12]
 810a7a8:	4618      	mov	r0, r3
 810a7aa:	3710      	adds	r7, #16
 810a7ac:	46bd      	mov	sp, r7
 810a7ae:	bd80      	pop	{r7, pc}

0810a7b0 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 810a7b0:	b590      	push	{r4, r7, lr}
 810a7b2:	b083      	sub	sp, #12
 810a7b4:	af00      	add	r7, sp, #0
 810a7b6:	6078      	str	r0, [r7, #4]
 810a7b8:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 810a7ba:	f7ff fcda 	bl	810a172 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 810a7be:	4622      	mov	r2, r4
 810a7c0:	6839      	ldr	r1, [r7, #0]
 810a7c2:	6878      	ldr	r0, [r7, #4]
 810a7c4:	f000 f99a 	bl	810aafc <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810a7c8:	bf00      	nop
 810a7ca:	370c      	adds	r7, #12
 810a7cc:	46bd      	mov	sp, r7
 810a7ce:	bd90      	pop	{r4, r7, pc}

0810a7d0 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 810a7d0:	b480      	push	{r7}
 810a7d2:	b083      	sub	sp, #12
 810a7d4:	af00      	add	r7, sp, #0
 810a7d6:	6078      	str	r0, [r7, #4]
 810a7d8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	681a      	ldr	r2, [r3, #0]
 810a7de:	683b      	ldr	r3, [r7, #0]
 810a7e0:	009b      	lsls	r3, r3, #2
 810a7e2:	4413      	add	r3, r2
      }
 810a7e4:	4618      	mov	r0, r3
 810a7e6:	370c      	adds	r7, #12
 810a7e8:	46bd      	mov	sp, r7
 810a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7ee:	4770      	bx	lr

0810a7f0 <_ZNSt6vectorIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 810a7f0:	b580      	push	{r7, lr}
 810a7f2:	b082      	sub	sp, #8
 810a7f4:	af00      	add	r7, sp, #0
 810a7f6:	6078      	str	r0, [r7, #4]
 810a7f8:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 810a7fa:	6838      	ldr	r0, [r7, #0]
 810a7fc:	f000 f9ae 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810a800:	4603      	mov	r3, r0
 810a802:	4619      	mov	r1, r3
 810a804:	6878      	ldr	r0, [r7, #4]
 810a806:	f000 f9b4 	bl	810ab72 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_>
 810a80a:	bf00      	nop
 810a80c:	3708      	adds	r7, #8
 810a80e:	46bd      	mov	sp, r7
 810a810:	bd80      	pop	{r7, pc}

0810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 810a812:	b580      	push	{r7, lr}
 810a814:	b084      	sub	sp, #16
 810a816:	af00      	add	r7, sp, #0
 810a818:	6078      	str	r0, [r7, #4]
 810a81a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 810a81c:	687b      	ldr	r3, [r7, #4]
 810a81e:	681a      	ldr	r2, [r3, #0]
 810a820:	683b      	ldr	r3, [r7, #0]
 810a822:	009b      	lsls	r3, r3, #2
 810a824:	4413      	add	r3, r2
 810a826:	60fb      	str	r3, [r7, #12]
 810a828:	f107 020c 	add.w	r2, r7, #12
 810a82c:	f107 0308 	add.w	r3, r7, #8
 810a830:	4611      	mov	r1, r2
 810a832:	4618      	mov	r0, r3
 810a834:	f000 f91a 	bl	810aa6c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810a838:	68bb      	ldr	r3, [r7, #8]
 810a83a:	4618      	mov	r0, r3
 810a83c:	3710      	adds	r7, #16
 810a83e:	46bd      	mov	sp, r7
 810a840:	bd80      	pop	{r7, pc}

0810a842 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 810a842:	b590      	push	{r4, r7, lr}
 810a844:	b085      	sub	sp, #20
 810a846:	af00      	add	r7, sp, #0
 810a848:	60f8      	str	r0, [r7, #12]
 810a84a:	60b9      	str	r1, [r7, #8]
 810a84c:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 810a84e:	f107 030c 	add.w	r3, r7, #12
 810a852:	4618      	mov	r0, r3
 810a854:	f000 f9bf 	bl	810abd6 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__rotate(__first, __middle, __last,
 810a858:	4623      	mov	r3, r4
 810a85a:	687a      	ldr	r2, [r7, #4]
 810a85c:	68b9      	ldr	r1, [r7, #8]
 810a85e:	68f8      	ldr	r0, [r7, #12]
 810a860:	f000 f9c3 	bl	810abea <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 810a864:	4603      	mov	r3, r0
    }
 810a866:	4618      	mov	r0, r3
 810a868:	3714      	adds	r7, #20
 810a86a:	46bd      	mov	sp, r7
 810a86c:	bd90      	pop	{r4, r7, pc}

0810a86e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 810a86e:	b480      	push	{r7}
 810a870:	b083      	sub	sp, #12
 810a872:	af00      	add	r7, sp, #0
 810a874:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810a876:	687b      	ldr	r3, [r7, #4]
 810a878:	4618      	mov	r0, r3
 810a87a:	370c      	adds	r7, #12
 810a87c:	46bd      	mov	sp, r7
 810a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a882:	4770      	bx	lr

0810a884 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 810a884:	b580      	push	{r7, lr}
 810a886:	b084      	sub	sp, #16
 810a888:	af00      	add	r7, sp, #0
 810a88a:	60f8      	str	r0, [r7, #12]
 810a88c:	60b9      	str	r1, [r7, #8]
 810a88e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 810a890:	68b9      	ldr	r1, [r7, #8]
 810a892:	68f8      	ldr	r0, [r7, #12]
 810a894:	f000 fb1a 	bl	810aecc <_ZSt8_DestroyIPfEvT_S1_>
    }
 810a898:	bf00      	nop
 810a89a:	3710      	adds	r7, #16
 810a89c:	46bd      	mov	sp, r7
 810a89e:	bd80      	pop	{r7, pc}

0810a8a0 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 810a8a0:	b580      	push	{r7, lr}
 810a8a2:	b082      	sub	sp, #8
 810a8a4:	af00      	add	r7, sp, #0
 810a8a6:	6078      	str	r0, [r7, #4]
 810a8a8:	6878      	ldr	r0, [r7, #4]
 810a8aa:	f000 fb25 	bl	810aef8 <_ZNSt15__new_allocatorIfEC1Ev>
 810a8ae:	687b      	ldr	r3, [r7, #4]
 810a8b0:	4618      	mov	r0, r3
 810a8b2:	3708      	adds	r7, #8
 810a8b4:	46bd      	mov	sp, r7
 810a8b6:	bd80      	pop	{r7, pc}

0810a8b8 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 810a8b8:	b480      	push	{r7}
 810a8ba:	b083      	sub	sp, #12
 810a8bc:	af00      	add	r7, sp, #0
 810a8be:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 810a8c0:	687b      	ldr	r3, [r7, #4]
 810a8c2:	2200      	movs	r2, #0
 810a8c4:	601a      	str	r2, [r3, #0]
 810a8c6:	687b      	ldr	r3, [r7, #4]
 810a8c8:	2200      	movs	r2, #0
 810a8ca:	605a      	str	r2, [r3, #4]
 810a8cc:	687b      	ldr	r3, [r7, #4]
 810a8ce:	2200      	movs	r2, #0
 810a8d0:	609a      	str	r2, [r3, #8]
	{ }
 810a8d2:	687b      	ldr	r3, [r7, #4]
 810a8d4:	4618      	mov	r0, r3
 810a8d6:	370c      	adds	r7, #12
 810a8d8:	46bd      	mov	sp, r7
 810a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a8de:	4770      	bx	lr

0810a8e0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 810a8e0:	b580      	push	{r7, lr}
 810a8e2:	b084      	sub	sp, #16
 810a8e4:	af00      	add	r7, sp, #0
 810a8e6:	60f8      	str	r0, [r7, #12]
 810a8e8:	60b9      	str	r1, [r7, #8]
 810a8ea:	607a      	str	r2, [r7, #4]
	if (__p)
 810a8ec:	68bb      	ldr	r3, [r7, #8]
 810a8ee:	2b00      	cmp	r3, #0
 810a8f0:	d005      	beq.n	810a8fe <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 810a8f2:	68fb      	ldr	r3, [r7, #12]
 810a8f4:	687a      	ldr	r2, [r7, #4]
 810a8f6:	68b9      	ldr	r1, [r7, #8]
 810a8f8:	4618      	mov	r0, r3
 810a8fa:	f000 fb08 	bl	810af0e <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 810a8fe:	bf00      	nop
 810a900:	3710      	adds	r7, #16
 810a902:	46bd      	mov	sp, r7
 810a904:	bd80      	pop	{r7, pc}

0810a906 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 810a906:	b580      	push	{r7, lr}
 810a908:	b082      	sub	sp, #8
 810a90a:	af00      	add	r7, sp, #0
 810a90c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 810a90e:	687b      	ldr	r3, [r7, #4]
 810a910:	4618      	mov	r0, r3
 810a912:	f000 f83f 	bl	810a994 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810a916:	4603      	mov	r3, r0
 810a918:	4618      	mov	r0, r3
 810a91a:	f000 fb23 	bl	810af64 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 810a91e:	4603      	mov	r3, r0
 810a920:	4618      	mov	r0, r3
 810a922:	3708      	adds	r7, #8
 810a924:	46bd      	mov	sp, r7
 810a926:	bd80      	pop	{r7, pc}

0810a928 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 810a928:	b480      	push	{r7}
 810a92a:	b083      	sub	sp, #12
 810a92c:	af00      	add	r7, sp, #0
 810a92e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 810a930:	687b      	ldr	r3, [r7, #4]
 810a932:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 810a934:	687b      	ldr	r3, [r7, #4]
 810a936:	681b      	ldr	r3, [r3, #0]
 810a938:	1ad3      	subs	r3, r2, r3
 810a93a:	109b      	asrs	r3, r3, #2
 810a93c:	4618      	mov	r0, r3
 810a93e:	370c      	adds	r7, #12
 810a940:	46bd      	mov	sp, r7
 810a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a946:	4770      	bx	lr

0810a948 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 810a948:	b580      	push	{r7, lr}
 810a94a:	b082      	sub	sp, #8
 810a94c:	af00      	add	r7, sp, #0
 810a94e:	6078      	str	r0, [r7, #4]
 810a950:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 810a952:	683b      	ldr	r3, [r7, #0]
 810a954:	2b00      	cmp	r3, #0
 810a956:	d006      	beq.n	810a966 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 810a958:	687b      	ldr	r3, [r7, #4]
 810a95a:	6839      	ldr	r1, [r7, #0]
 810a95c:	4618      	mov	r0, r3
 810a95e:	f000 fb1b 	bl	810af98 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 810a962:	4603      	mov	r3, r0
 810a964:	e000      	b.n	810a968 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 810a966:	2300      	movs	r3, #0
      }
 810a968:	4618      	mov	r0, r3
 810a96a:	3708      	adds	r7, #8
 810a96c:	46bd      	mov	sp, r7
 810a96e:	bd80      	pop	{r7, pc}

0810a970 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 810a970:	b580      	push	{r7, lr}
 810a972:	b084      	sub	sp, #16
 810a974:	af00      	add	r7, sp, #0
 810a976:	60f8      	str	r0, [r7, #12]
 810a978:	60b9      	str	r1, [r7, #8]
 810a97a:	607a      	str	r2, [r7, #4]
 810a97c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 810a97e:	683b      	ldr	r3, [r7, #0]
 810a980:	687a      	ldr	r2, [r7, #4]
 810a982:	68b9      	ldr	r1, [r7, #8]
 810a984:	68f8      	ldr	r0, [r7, #12]
 810a986:	f000 fb38 	bl	810affa <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 810a98a:	4603      	mov	r3, r0
      }
 810a98c:	4618      	mov	r0, r3
 810a98e:	3710      	adds	r7, #16
 810a990:	46bd      	mov	sp, r7
 810a992:	bd80      	pop	{r7, pc}

0810a994 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 810a994:	b480      	push	{r7}
 810a996:	b083      	sub	sp, #12
 810a998:	af00      	add	r7, sp, #0
 810a99a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810a99c:	687b      	ldr	r3, [r7, #4]
 810a99e:	4618      	mov	r0, r3
 810a9a0:	370c      	adds	r7, #12
 810a9a2:	46bd      	mov	sp, r7
 810a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9a8:	4770      	bx	lr

0810a9aa <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 810a9aa:	b580      	push	{r7, lr}
 810a9ac:	b082      	sub	sp, #8
 810a9ae:	af00      	add	r7, sp, #0
 810a9b0:	6078      	str	r0, [r7, #4]
 810a9b2:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 810a9b4:	687b      	ldr	r3, [r7, #4]
 810a9b6:	6839      	ldr	r1, [r7, #0]
 810a9b8:	4618      	mov	r0, r3
 810a9ba:	f000 fb3b 	bl	810b034 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 810a9be:	6878      	ldr	r0, [r7, #4]
 810a9c0:	3708      	adds	r7, #8
 810a9c2:	46bd      	mov	sp, r7
 810a9c4:	bd80      	pop	{r7, pc}

0810a9c6 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 810a9c6:	b580      	push	{r7, lr}
 810a9c8:	b084      	sub	sp, #16
 810a9ca:	af00      	add	r7, sp, #0
 810a9cc:	60f8      	str	r0, [r7, #12]
 810a9ce:	60b9      	str	r1, [r7, #8]
 810a9d0:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 810a9d2:	68fb      	ldr	r3, [r7, #12]
 810a9d4:	6879      	ldr	r1, [r7, #4]
 810a9d6:	4618      	mov	r0, r3
 810a9d8:	f000 fb39 	bl	810b04e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 810a9dc:	68b9      	ldr	r1, [r7, #8]
 810a9de:	68f8      	ldr	r0, [r7, #12]
 810a9e0:	f000 fb47 	bl	810b072 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 810a9e4:	68fb      	ldr	r3, [r7, #12]
 810a9e6:	4618      	mov	r0, r3
 810a9e8:	3710      	adds	r7, #16
 810a9ea:	46bd      	mov	sp, r7
 810a9ec:	bd80      	pop	{r7, pc}

0810a9ee <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 810a9ee:	b580      	push	{r7, lr}
 810a9f0:	b084      	sub	sp, #16
 810a9f2:	af00      	add	r7, sp, #0
 810a9f4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 810a9f6:	687a      	ldr	r2, [r7, #4]
 810a9f8:	f107 030c 	add.w	r3, r7, #12
 810a9fc:	4611      	mov	r1, r2
 810a9fe:	4618      	mov	r0, r3
 810aa00:	f000 fb52 	bl	810b0a8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 810aa04:	68fb      	ldr	r3, [r7, #12]
 810aa06:	4618      	mov	r0, r3
 810aa08:	3710      	adds	r7, #16
 810aa0a:	46bd      	mov	sp, r7
 810aa0c:	bd80      	pop	{r7, pc}

0810aa0e <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 810aa0e:	b580      	push	{r7, lr}
 810aa10:	b084      	sub	sp, #16
 810aa12:	af00      	add	r7, sp, #0
 810aa14:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 810aa16:	687b      	ldr	r3, [r7, #4]
 810aa18:	1d1a      	adds	r2, r3, #4
 810aa1a:	f107 030c 	add.w	r3, r7, #12
 810aa1e:	4611      	mov	r1, r2
 810aa20:	4618      	mov	r0, r3
 810aa22:	f000 fb41 	bl	810b0a8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 810aa26:	68fb      	ldr	r3, [r7, #12]
 810aa28:	4618      	mov	r0, r3
 810aa2a:	3710      	adds	r7, #16
 810aa2c:	46bd      	mov	sp, r7
 810aa2e:	bd80      	pop	{r7, pc}

0810aa30 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 810aa30:	b580      	push	{r7, lr}
 810aa32:	b084      	sub	sp, #16
 810aa34:	af00      	add	r7, sp, #0
 810aa36:	60f8      	str	r0, [r7, #12]
 810aa38:	60b9      	str	r1, [r7, #8]
 810aa3a:	607a      	str	r2, [r7, #4]
 810aa3c:	603b      	str	r3, [r7, #0]
      if (std::is_constant_evaluated())
 810aa3e:	f7fb fee2 	bl	8106806 <_ZSt21is_constant_evaluatedv>
 810aa42:	4603      	mov	r3, r0
 810aa44:	2b00      	cmp	r3, #0
 810aa46:	d006      	beq.n	810aa56 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E+0x26>
	return std::__do_uninit_copy(__first, __last, __result);
 810aa48:	687a      	ldr	r2, [r7, #4]
 810aa4a:	68b9      	ldr	r1, [r7, #8]
 810aa4c:	68f8      	ldr	r0, [r7, #12]
 810aa4e:	f000 fb5e 	bl	810b10e <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810aa52:	4603      	mov	r3, r0
 810aa54:	e006      	b.n	810aa64 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E+0x34>
      return std::uninitialized_copy(__first, __last, __result);
 810aa56:	687a      	ldr	r2, [r7, #4]
 810aa58:	68b9      	ldr	r1, [r7, #8]
 810aa5a:	68f8      	ldr	r0, [r7, #12]
 810aa5c:	f000 fb89 	bl	810b172 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810aa60:	4603      	mov	r3, r0
 810aa62:	bf00      	nop
    }
 810aa64:	4618      	mov	r0, r3
 810aa66:	3710      	adds	r7, #16
 810aa68:	46bd      	mov	sp, r7
 810aa6a:	bd80      	pop	{r7, pc}

0810aa6c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810aa6c:	b480      	push	{r7}
 810aa6e:	b083      	sub	sp, #12
 810aa70:	af00      	add	r7, sp, #0
 810aa72:	6078      	str	r0, [r7, #4]
 810aa74:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810aa76:	683b      	ldr	r3, [r7, #0]
 810aa78:	681a      	ldr	r2, [r3, #0]
 810aa7a:	687b      	ldr	r3, [r7, #4]
 810aa7c:	601a      	str	r2, [r3, #0]
 810aa7e:	687b      	ldr	r3, [r7, #4]
 810aa80:	4618      	mov	r0, r3
 810aa82:	370c      	adds	r7, #12
 810aa84:	46bd      	mov	sp, r7
 810aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa8a:	4770      	bx	lr

0810aa8c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 810aa8c:	b590      	push	{r4, r7, lr}
 810aa8e:	b083      	sub	sp, #12
 810aa90:	af00      	add	r7, sp, #0
 810aa92:	6078      	str	r0, [r7, #4]
 810aa94:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 810aa96:	6878      	ldr	r0, [r7, #4]
 810aa98:	f000 f810 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810aa9c:	4603      	mov	r3, r0
 810aa9e:	681c      	ldr	r4, [r3, #0]
 810aaa0:	6838      	ldr	r0, [r7, #0]
 810aaa2:	f000 f80b 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810aaa6:	4603      	mov	r3, r0
 810aaa8:	681b      	ldr	r3, [r3, #0]
 810aaaa:	429c      	cmp	r4, r3
 810aaac:	bf0c      	ite	eq
 810aaae:	2301      	moveq	r3, #1
 810aab0:	2300      	movne	r3, #0
 810aab2:	b2db      	uxtb	r3, r3
 810aab4:	4618      	mov	r0, r3
 810aab6:	370c      	adds	r7, #12
 810aab8:	46bd      	mov	sp, r7
 810aaba:	bd90      	pop	{r4, r7, pc}

0810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810aabc:	b480      	push	{r7}
 810aabe:	b083      	sub	sp, #12
 810aac0:	af00      	add	r7, sp, #0
 810aac2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810aac4:	687b      	ldr	r3, [r7, #4]
 810aac6:	4618      	mov	r0, r3
 810aac8:	370c      	adds	r7, #12
 810aaca:	46bd      	mov	sp, r7
 810aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aad0:	4770      	bx	lr

0810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 810aad2:	b590      	push	{r4, r7, lr}
 810aad4:	b083      	sub	sp, #12
 810aad6:	af00      	add	r7, sp, #0
 810aad8:	6078      	str	r0, [r7, #4]
 810aada:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 810aadc:	6878      	ldr	r0, [r7, #4]
 810aade:	f7ff ffed 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810aae2:	4603      	mov	r3, r0
 810aae4:	681c      	ldr	r4, [r3, #0]
 810aae6:	6838      	ldr	r0, [r7, #0]
 810aae8:	f7ff ffe8 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810aaec:	4603      	mov	r3, r0
 810aaee:	681b      	ldr	r3, [r3, #0]
 810aaf0:	1ae3      	subs	r3, r4, r3
 810aaf2:	109b      	asrs	r3, r3, #2
 810aaf4:	4618      	mov	r0, r3
 810aaf6:	370c      	adds	r7, #12
 810aaf8:	46bd      	mov	sp, r7
 810aafa:	bd90      	pop	{r4, r7, pc}

0810aafc <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810aafc:	b5b0      	push	{r4, r5, r7, lr}
 810aafe:	b084      	sub	sp, #16
 810ab00:	af00      	add	r7, sp, #0
 810ab02:	60f8      	str	r0, [r7, #12]
 810ab04:	60b9      	str	r1, [r7, #8]
 810ab06:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 810ab08:	f107 0208 	add.w	r2, r7, #8
 810ab0c:	f107 030c 	add.w	r3, r7, #12
 810ab10:	4611      	mov	r1, r2
 810ab12:	4618      	mov	r0, r3
 810ab14:	f7ff ffba 	bl	810aa8c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810ab18:	4603      	mov	r3, r0
 810ab1a:	f083 0301 	eor.w	r3, r3, #1
 810ab1e:	b2db      	uxtb	r3, r3
 810ab20:	2b00      	cmp	r3, #0
 810ab22:	d017      	beq.n	810ab54 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 810ab24:	f107 020c 	add.w	r2, r7, #12
 810ab28:	f107 0308 	add.w	r3, r7, #8
 810ab2c:	4611      	mov	r1, r2
 810ab2e:	4618      	mov	r0, r3
 810ab30:	f7ff ffcf 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810ab34:	4603      	mov	r3, r0
 810ab36:	4618      	mov	r0, r3
 810ab38:	f7ff fb2e 	bl	810a198 <_ZSt4__lgi>
 810ab3c:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 810ab3e:	005a      	lsls	r2, r3, #1
 810ab40:	462b      	mov	r3, r5
 810ab42:	68b9      	ldr	r1, [r7, #8]
 810ab44:	68f8      	ldr	r0, [r7, #12]
 810ab46:	f000 fb28 	bl	810b19a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 810ab4a:	4622      	mov	r2, r4
 810ab4c:	68b9      	ldr	r1, [r7, #8]
 810ab4e:	68f8      	ldr	r0, [r7, #12]
 810ab50:	f000 fb5a 	bl	810b208 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810ab54:	bf00      	nop
 810ab56:	3710      	adds	r7, #16
 810ab58:	46bd      	mov	sp, r7
 810ab5a:	bdb0      	pop	{r4, r5, r7, pc}

0810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810ab5c:	b480      	push	{r7}
 810ab5e:	b083      	sub	sp, #12
 810ab60:	af00      	add	r7, sp, #0
 810ab62:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810ab64:	687b      	ldr	r3, [r7, #4]
 810ab66:	4618      	mov	r0, r3
 810ab68:	370c      	adds	r7, #12
 810ab6a:	46bd      	mov	sp, r7
 810ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab70:	4770      	bx	lr

0810ab72 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_>:
      vector<_Tp, _Alloc>::
 810ab72:	b5b0      	push	{r4, r5, r7, lr}
 810ab74:	b082      	sub	sp, #8
 810ab76:	af00      	add	r7, sp, #0
 810ab78:	6078      	str	r0, [r7, #4]
 810ab7a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 810ab7c:	687b      	ldr	r3, [r7, #4]
 810ab7e:	685a      	ldr	r2, [r3, #4]
 810ab80:	687b      	ldr	r3, [r7, #4]
 810ab82:	689b      	ldr	r3, [r3, #8]
 810ab84:	429a      	cmp	r2, r3
 810ab86:	d011      	beq.n	810abac <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 810ab88:	687c      	ldr	r4, [r7, #4]
 810ab8a:	687b      	ldr	r3, [r7, #4]
 810ab8c:	685d      	ldr	r5, [r3, #4]
 810ab8e:	6838      	ldr	r0, [r7, #0]
 810ab90:	f000 fb72 	bl	810b278 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810ab94:	4603      	mov	r3, r0
 810ab96:	461a      	mov	r2, r3
 810ab98:	4629      	mov	r1, r5
 810ab9a:	4620      	mov	r0, r4
 810ab9c:	f000 fb77 	bl	810b28e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 810aba0:	687b      	ldr	r3, [r7, #4]
 810aba2:	685b      	ldr	r3, [r3, #4]
 810aba4:	1d1a      	adds	r2, r3, #4
 810aba6:	687b      	ldr	r3, [r7, #4]
 810aba8:	605a      	str	r2, [r3, #4]
 810abaa:	e00c      	b.n	810abc6 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEERfDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 810abac:	6878      	ldr	r0, [r7, #4]
 810abae:	f7ff fdee 	bl	810a78e <_ZNSt6vectorIfSaIfEE3endEv>
 810abb2:	4604      	mov	r4, r0
 810abb4:	6838      	ldr	r0, [r7, #0]
 810abb6:	f000 fb5f 	bl	810b278 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810abba:	4603      	mov	r3, r0
 810abbc:	461a      	mov	r2, r3
 810abbe:	4621      	mov	r1, r4
 810abc0:	6878      	ldr	r0, [r7, #4]
 810abc2:	f000 fbbd 	bl	810b340 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
	return back();
 810abc6:	6878      	ldr	r0, [r7, #4]
 810abc8:	f000 fc36 	bl	810b438 <_ZNSt6vectorIfSaIfEE4backEv>
 810abcc:	4603      	mov	r3, r0
      }
 810abce:	4618      	mov	r0, r3
 810abd0:	3708      	adds	r7, #8
 810abd2:	46bd      	mov	sp, r7
 810abd4:	bdb0      	pop	{r4, r5, r7, pc}

0810abd6 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 810abd6:	b480      	push	{r7}
 810abd8:	b083      	sub	sp, #12
 810abda:	af00      	add	r7, sp, #0
 810abdc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 810abde:	4618      	mov	r0, r3
 810abe0:	370c      	adds	r7, #12
 810abe2:	46bd      	mov	sp, r7
 810abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abe8:	4770      	bx	lr

0810abea <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 810abea:	b590      	push	{r4, r7, lr}
 810abec:	b095      	sub	sp, #84	@ 0x54
 810abee:	af00      	add	r7, sp, #0
 810abf0:	60f8      	str	r0, [r7, #12]
 810abf2:	60b9      	str	r1, [r7, #8]
 810abf4:	607a      	str	r2, [r7, #4]
 810abf6:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 810abf8:	f107 0208 	add.w	r2, r7, #8
 810abfc:	f107 030c 	add.w	r3, r7, #12
 810ac00:	4611      	mov	r1, r2
 810ac02:	4618      	mov	r0, r3
 810ac04:	f7ff ff42 	bl	810aa8c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810ac08:	4603      	mov	r3, r0
 810ac0a:	2b00      	cmp	r3, #0
 810ac0c:	d001      	beq.n	810ac12 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 810ac0e:	687b      	ldr	r3, [r7, #4]
 810ac10:	e158      	b.n	810aec4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last == __middle)
 810ac12:	f107 0208 	add.w	r2, r7, #8
 810ac16:	1d3b      	adds	r3, r7, #4
 810ac18:	4611      	mov	r1, r2
 810ac1a:	4618      	mov	r0, r3
 810ac1c:	f7ff ff36 	bl	810aa8c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810ac20:	4603      	mov	r3, r0
 810ac22:	2b00      	cmp	r3, #0
 810ac24:	d001      	beq.n	810ac2a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 810ac26:	68fb      	ldr	r3, [r7, #12]
 810ac28:	e14c      	b.n	810aec4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 810ac2a:	f107 020c 	add.w	r2, r7, #12
 810ac2e:	1d3b      	adds	r3, r7, #4
 810ac30:	4611      	mov	r1, r2
 810ac32:	4618      	mov	r0, r3
 810ac34:	f7ff ff4d 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810ac38:	4603      	mov	r3, r0
 810ac3a:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __k = __middle - __first;
 810ac3c:	f107 020c 	add.w	r2, r7, #12
 810ac40:	f107 0308 	add.w	r3, r7, #8
 810ac44:	4611      	mov	r1, r2
 810ac46:	4618      	mov	r0, r3
 810ac48:	f7ff ff43 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810ac4c:	4603      	mov	r3, r0
 810ac4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__k == __n - __k)
 810ac50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ac52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ac54:	1ad2      	subs	r2, r2, r3
 810ac56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ac58:	429a      	cmp	r2, r3
 810ac5a:	d106      	bne.n	810ac6a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 810ac5c:	68ba      	ldr	r2, [r7, #8]
 810ac5e:	68b9      	ldr	r1, [r7, #8]
 810ac60:	68f8      	ldr	r0, [r7, #12]
 810ac62:	f000 fc04 	bl	810b46e <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	  return __middle;
 810ac66:	68bb      	ldr	r3, [r7, #8]
 810ac68:	e12c      	b.n	810aec4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 810ac6a:	68fb      	ldr	r3, [r7, #12]
 810ac6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 810ac6e:	f107 0208 	add.w	r2, r7, #8
 810ac72:	1d3b      	adds	r3, r7, #4
 810ac74:	4611      	mov	r1, r2
 810ac76:	4618      	mov	r0, r3
 810ac78:	f7ff ff2b 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810ac7c:	4602      	mov	r2, r0
 810ac7e:	f107 030c 	add.w	r3, r7, #12
 810ac82:	4611      	mov	r1, r2
 810ac84:	4618      	mov	r0, r3
 810ac86:	f7ff fdc4 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ac8a:	4603      	mov	r3, r0
 810ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__k < __n - __k)
 810ac8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ac90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ac92:	1ad2      	subs	r2, r2, r3
 810ac94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ac96:	429a      	cmp	r2, r3
 810ac98:	f340 8081 	ble.w	810ad9e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 810ac9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ac9e:	2b01      	cmp	r3, #1
 810aca0:	d140      	bne.n	810ad24 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 810aca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810aca6:	4618      	mov	r0, r3
 810aca8:	f000 fc08 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810acac:	4603      	mov	r3, r0
 810acae:	4618      	mov	r0, r3
 810acb0:	f7ff ff54 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810acb4:	4603      	mov	r3, r0
 810acb6:	681b      	ldr	r3, [r3, #0]
 810acb8:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 810acba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810acbe:	2101      	movs	r1, #1
 810acc0:	4618      	mov	r0, r3
 810acc2:	f7ff fda6 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810acc6:	4604      	mov	r4, r0
 810acc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810acca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810acce:	4611      	mov	r1, r2
 810acd0:	4618      	mov	r0, r3
 810acd2:	f7ff fd9e 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810acd6:	4603      	mov	r3, r0
 810acd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810acda:	4619      	mov	r1, r3
 810acdc:	4620      	mov	r0, r4
 810acde:	f000 fbf9 	bl	810b4d4 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 810ace2:	f107 031c 	add.w	r3, r7, #28
 810ace6:	4618      	mov	r0, r3
 810ace8:	f7ff ff38 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810acec:	4603      	mov	r3, r0
 810acee:	681c      	ldr	r4, [r3, #0]
 810acf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810acf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810acf6:	4611      	mov	r1, r2
 810acf8:	4618      	mov	r0, r3
 810acfa:	f7ff fd8a 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810acfe:	4603      	mov	r3, r0
 810ad00:	63bb      	str	r3, [r7, #56]	@ 0x38
 810ad02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810ad06:	2101      	movs	r1, #1
 810ad08:	4618      	mov	r0, r3
 810ad0a:	f000 fbfb 	bl	810b504 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810ad0e:	4603      	mov	r3, r0
 810ad10:	637b      	str	r3, [r7, #52]	@ 0x34
 810ad12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810ad16:	4618      	mov	r0, r3
 810ad18:	f000 fbd0 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ad1c:	4603      	mov	r3, r0
 810ad1e:	601c      	str	r4, [r3, #0]
		  return __ret;
 810ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ad22:	e0cf      	b.n	810aec4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 810ad24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ad26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810ad2a:	4611      	mov	r1, r2
 810ad2c:	4618      	mov	r0, r3
 810ad2e:	f7ff fd70 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ad32:	4603      	mov	r3, r0
 810ad34:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810ad36:	2300      	movs	r3, #0
 810ad38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810ad3a:	e010      	b.n	810ad5e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x174>
		  std::iter_swap(__p, __q);
 810ad3c:	6a39      	ldr	r1, [r7, #32]
 810ad3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ad40:	f000 fbf9 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
		  ++__p;
 810ad44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810ad48:	4618      	mov	r0, r3
 810ad4a:	f000 fc0b 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
		  ++__q;
 810ad4e:	f107 0320 	add.w	r3, r7, #32
 810ad52:	4618      	mov	r0, r3
 810ad54:	f000 fc06 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810ad58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ad5a:	3301      	adds	r3, #1
 810ad5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810ad5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ad60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ad62:	1ad3      	subs	r3, r2, r3
 810ad64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810ad66:	429a      	cmp	r2, r3
 810ad68:	dbe8      	blt.n	810ad3c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x152>
	      __n %= __k;
 810ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ad6e:	fb93 f1f2 	sdiv	r1, r3, r2
 810ad72:	fb01 f202 	mul.w	r2, r1, r2
 810ad76:	1a9b      	subs	r3, r3, r2
 810ad78:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 810ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad7c:	2b00      	cmp	r3, #0
 810ad7e:	d101      	bne.n	810ad84 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 810ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ad82:	e09f      	b.n	810aec4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 810ad84:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810ad88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810ad8c:	4611      	mov	r1, r2
 810ad8e:	4618      	mov	r0, r3
 810ad90:	f000 fbf8 	bl	810b584 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 810ad94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ad96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ad98:	1ad3      	subs	r3, r2, r3
 810ad9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810ad9c:	e777      	b.n	810ac8e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 810ad9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ada0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ada2:	1ad3      	subs	r3, r2, r3
 810ada4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 810ada6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ada8:	2b01      	cmp	r3, #1
 810adaa:	d149      	bne.n	810ae40 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 810adac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810adae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810adb2:	4611      	mov	r1, r2
 810adb4:	4618      	mov	r0, r3
 810adb6:	f7ff fd2c 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810adba:	4603      	mov	r3, r0
 810adbc:	643b      	str	r3, [r7, #64]	@ 0x40
 810adbe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810adc2:	2101      	movs	r1, #1
 810adc4:	4618      	mov	r0, r3
 810adc6:	f000 fb9d 	bl	810b504 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810adca:	4603      	mov	r3, r0
 810adcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810adce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 810add2:	4618      	mov	r0, r3
 810add4:	f000 fb72 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810add8:	4603      	mov	r3, r0
 810adda:	4618      	mov	r0, r3
 810addc:	f7ff febe 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ade0:	4603      	mov	r3, r0
 810ade2:	681b      	ldr	r3, [r3, #0]
 810ade4:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 810ade6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ade8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810adec:	4611      	mov	r1, r2
 810adee:	4618      	mov	r0, r3
 810adf0:	f7ff fd0f 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810adf4:	4603      	mov	r3, r0
 810adf6:	647b      	str	r3, [r7, #68]	@ 0x44
 810adf8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 810adfc:	2101      	movs	r1, #1
 810adfe:	4618      	mov	r0, r3
 810ae00:	f000 fb80 	bl	810b504 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810ae04:	4604      	mov	r4, r0
 810ae06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ae08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810ae0c:	4611      	mov	r1, r2
 810ae0e:	4618      	mov	r0, r3
 810ae10:	f7ff fcff 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ae14:	4603      	mov	r3, r0
 810ae16:	461a      	mov	r2, r3
 810ae18:	4621      	mov	r1, r4
 810ae1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ae1c:	f000 fbd1 	bl	810b5c2 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 810ae20:	f107 0314 	add.w	r3, r7, #20
 810ae24:	4618      	mov	r0, r3
 810ae26:	f7ff fe99 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ae2a:	4603      	mov	r3, r0
 810ae2c:	681c      	ldr	r4, [r3, #0]
 810ae2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810ae32:	4618      	mov	r0, r3
 810ae34:	f000 fb42 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810ae38:	4603      	mov	r3, r0
 810ae3a:	601c      	str	r4, [r3, #0]
		  return __ret;
 810ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ae3e:	e041      	b.n	810aec4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 810ae40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ae42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810ae46:	4611      	mov	r1, r2
 810ae48:	4618      	mov	r0, r3
 810ae4a:	f7ff fce2 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810ae4e:	4603      	mov	r3, r0
 810ae50:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 810ae52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ae54:	f107 0318 	add.w	r3, r7, #24
 810ae58:	4611      	mov	r1, r2
 810ae5a:	4618      	mov	r0, r3
 810ae5c:	f000 fb52 	bl	810b504 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810ae60:	4603      	mov	r3, r0
 810ae62:	62bb      	str	r3, [r7, #40]	@ 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810ae64:	2300      	movs	r3, #0
 810ae66:	64bb      	str	r3, [r7, #72]	@ 0x48
 810ae68:	e010      	b.n	810ae8c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2a2>
		  --__p;
 810ae6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810ae6e:	4618      	mov	r0, r3
 810ae70:	f000 fbbf 	bl	810b5f2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  --__q;
 810ae74:	f107 0318 	add.w	r3, r7, #24
 810ae78:	4618      	mov	r0, r3
 810ae7a:	f000 fbba 	bl	810b5f2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  std::iter_swap(__p, __q);
 810ae7e:	69b9      	ldr	r1, [r7, #24]
 810ae80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ae82:	f000 fb58 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 810ae86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ae88:	3301      	adds	r3, #1
 810ae8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810ae8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ae8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ae90:	1ad3      	subs	r3, r2, r3
 810ae92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810ae94:	429a      	cmp	r2, r3
 810ae96:	dbe8      	blt.n	810ae6a <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x280>
	      __n %= __k;
 810ae98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ae9c:	fb93 f1f2 	sdiv	r1, r3, r2
 810aea0:	fb01 f202 	mul.w	r2, r1, r2
 810aea4:	1a9b      	subs	r3, r3, r2
 810aea6:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 810aea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aeaa:	2b00      	cmp	r3, #0
 810aeac:	d101      	bne.n	810aeb2 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 810aeae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aeb0:	e008      	b.n	810aec4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 810aeb2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810aeb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810aeba:	4611      	mov	r1, r2
 810aebc:	4618      	mov	r0, r3
 810aebe:	f000 fb61 	bl	810b584 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 810aec2:	e6e4      	b.n	810ac8e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 810aec4:	4618      	mov	r0, r3
 810aec6:	3754      	adds	r7, #84	@ 0x54
 810aec8:	46bd      	mov	sp, r7
 810aeca:	bd90      	pop	{r4, r7, pc}

0810aecc <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 810aecc:	b580      	push	{r7, lr}
 810aece:	b082      	sub	sp, #8
 810aed0:	af00      	add	r7, sp, #0
 810aed2:	6078      	str	r0, [r7, #4]
 810aed4:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 810aed6:	f7f8 fb23 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 810aeda:	4603      	mov	r3, r0
 810aedc:	2b00      	cmp	r3, #0
 810aede:	d004      	beq.n	810aeea <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 810aee0:	6839      	ldr	r1, [r7, #0]
 810aee2:	6878      	ldr	r0, [r7, #4]
 810aee4:	f000 fb95 	bl	810b612 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 810aee8:	e003      	b.n	810aef2 <_ZSt8_DestroyIPfEvT_S1_+0x26>
	__destroy(__first, __last);
 810aeea:	6839      	ldr	r1, [r7, #0]
 810aeec:	6878      	ldr	r0, [r7, #4]
 810aeee:	f000 fba9 	bl	810b644 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 810aef2:	3708      	adds	r7, #8
 810aef4:	46bd      	mov	sp, r7
 810aef6:	bd80      	pop	{r7, pc}

0810aef8 <_ZNSt15__new_allocatorIfEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 810aef8:	b480      	push	{r7}
 810aefa:	b083      	sub	sp, #12
 810aefc:	af00      	add	r7, sp, #0
 810aefe:	6078      	str	r0, [r7, #4]
 810af00:	687b      	ldr	r3, [r7, #4]
 810af02:	4618      	mov	r0, r3
 810af04:	370c      	adds	r7, #12
 810af06:	46bd      	mov	sp, r7
 810af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af0c:	4770      	bx	lr

0810af0e <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810af0e:	b580      	push	{r7, lr}
 810af10:	b088      	sub	sp, #32
 810af12:	af00      	add	r7, sp, #0
 810af14:	60f8      	str	r0, [r7, #12]
 810af16:	60b9      	str	r1, [r7, #8]
 810af18:	607a      	str	r2, [r7, #4]
 810af1a:	68fb      	ldr	r3, [r7, #12]
 810af1c:	61fb      	str	r3, [r7, #28]
 810af1e:	68bb      	ldr	r3, [r7, #8]
 810af20:	61bb      	str	r3, [r7, #24]
 810af22:	687b      	ldr	r3, [r7, #4]
 810af24:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 810af26:	f7f8 fafb 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 810af2a:	4603      	mov	r3, r0
 810af2c:	2b00      	cmp	r3, #0
 810af2e:	d003      	beq.n	810af38 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	    ::operator delete(__p);
 810af30:	69b8      	ldr	r0, [r7, #24]
 810af32:	f018 fb1f 	bl	8123574 <_ZdlPv>
	    return;
 810af36:	e005      	b.n	810af44 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 810af38:	697a      	ldr	r2, [r7, #20]
 810af3a:	69b9      	ldr	r1, [r7, #24]
 810af3c:	69f8      	ldr	r0, [r7, #28]
 810af3e:	f000 fdd4 	bl	810baea <_ZNSt15__new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 810af42:	bf00      	nop
 810af44:	bf00      	nop
 810af46:	3720      	adds	r7, #32
 810af48:	46bd      	mov	sp, r7
 810af4a:	bd80      	pop	{r7, pc}

0810af4c <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810af4c:	b480      	push	{r7}
 810af4e:	b083      	sub	sp, #12
 810af50:	af00      	add	r7, sp, #0
 810af52:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 810af54:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      }
 810af58:	4618      	mov	r0, r3
 810af5a:	370c      	adds	r7, #12
 810af5c:	46bd      	mov	sp, r7
 810af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af62:	4770      	bx	lr

0810af64 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 810af64:	b580      	push	{r7, lr}
 810af66:	b084      	sub	sp, #16
 810af68:	af00      	add	r7, sp, #0
 810af6a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 810af6c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 810af70:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 810af72:	6878      	ldr	r0, [r7, #4]
 810af74:	f7ff ffea 	bl	810af4c <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 810af78:	4603      	mov	r3, r0
 810af7a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 810af7c:	f107 0208 	add.w	r2, r7, #8
 810af80:	f107 030c 	add.w	r3, r7, #12
 810af84:	4611      	mov	r1, r2
 810af86:	4618      	mov	r0, r3
 810af88:	f7fd fb2a 	bl	81085e0 <_ZSt3minIjERKT_S2_S2_>
 810af8c:	4603      	mov	r3, r0
 810af8e:	681b      	ldr	r3, [r3, #0]
      }
 810af90:	4618      	mov	r0, r3
 810af92:	3710      	adds	r7, #16
 810af94:	46bd      	mov	sp, r7
 810af96:	bd80      	pop	{r7, pc}

0810af98 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 810af98:	b580      	push	{r7, lr}
 810af9a:	b084      	sub	sp, #16
 810af9c:	af00      	add	r7, sp, #0
 810af9e:	6078      	str	r0, [r7, #4]
 810afa0:	6039      	str	r1, [r7, #0]
 810afa2:	687b      	ldr	r3, [r7, #4]
 810afa4:	60fb      	str	r3, [r7, #12]
 810afa6:	683b      	ldr	r3, [r7, #0]
 810afa8:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 810afaa:	f7f8 fab9 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 810afae:	4603      	mov	r3, r0
 810afb0:	2b00      	cmp	r3, #0
 810afb2:	d016      	beq.n	810afe2 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 810afb4:	68bb      	ldr	r3, [r7, #8]
 810afb6:	2200      	movs	r2, #0
 810afb8:	0099      	lsls	r1, r3, #2
 810afba:	0f9b      	lsrs	r3, r3, #30
 810afbc:	2b00      	cmp	r3, #0
 810afbe:	d000      	beq.n	810afc2 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
 810afc0:	2201      	movs	r2, #1
 810afc2:	460b      	mov	r3, r1
 810afc4:	60bb      	str	r3, [r7, #8]
 810afc6:	4613      	mov	r3, r2
 810afc8:	f003 0301 	and.w	r3, r3, #1
 810afcc:	b2db      	uxtb	r3, r3
 810afce:	2b00      	cmp	r3, #0
 810afd0:	d001      	beq.n	810afd6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x3e>
	      std::__throw_bad_array_new_length();
 810afd2:	f018 fbb3 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 810afd6:	68bb      	ldr	r3, [r7, #8]
 810afd8:	4618      	mov	r0, r3
 810afda:	f018 fade 	bl	812359a <_Znwj>
 810afde:	4603      	mov	r3, r0
 810afe0:	e007      	b.n	810aff2 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 810afe2:	68bb      	ldr	r3, [r7, #8]
 810afe4:	2200      	movs	r2, #0
 810afe6:	4619      	mov	r1, r3
 810afe8:	68f8      	ldr	r0, [r7, #12]
 810afea:	f000 fd8d 	bl	810bb08 <_ZNSt15__new_allocatorIfE8allocateEjPKv>
 810afee:	4603      	mov	r3, r0
 810aff0:	bf00      	nop
      { return __a.allocate(__n); }
 810aff2:	4618      	mov	r0, r3
 810aff4:	3710      	adds	r7, #16
 810aff6:	46bd      	mov	sp, r7
 810aff8:	bd80      	pop	{r7, pc}

0810affa <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 810affa:	b5b0      	push	{r4, r5, r7, lr}
 810affc:	b084      	sub	sp, #16
 810affe:	af00      	add	r7, sp, #0
 810b000:	60f8      	str	r0, [r7, #12]
 810b002:	60b9      	str	r1, [r7, #8]
 810b004:	607a      	str	r2, [r7, #4]
 810b006:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 810b008:	68f8      	ldr	r0, [r7, #12]
 810b00a:	f000 fb26 	bl	810b65a <_ZSt12__niter_baseIPfET_S1_>
 810b00e:	4604      	mov	r4, r0
 810b010:	68b8      	ldr	r0, [r7, #8]
 810b012:	f000 fb22 	bl	810b65a <_ZSt12__niter_baseIPfET_S1_>
 810b016:	4605      	mov	r5, r0
 810b018:	6878      	ldr	r0, [r7, #4]
 810b01a:	f000 fb1e 	bl	810b65a <_ZSt12__niter_baseIPfET_S1_>
 810b01e:	4602      	mov	r2, r0
 810b020:	683b      	ldr	r3, [r7, #0]
 810b022:	4629      	mov	r1, r5
 810b024:	4620      	mov	r0, r4
 810b026:	f000 fb33 	bl	810b690 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 810b02a:	4603      	mov	r3, r0
    }
 810b02c:	4618      	mov	r0, r3
 810b02e:	3710      	adds	r7, #16
 810b030:	46bd      	mov	sp, r7
 810b032:	bdb0      	pop	{r4, r5, r7, pc}

0810b034 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 810b034:	b580      	push	{r7, lr}
 810b036:	b082      	sub	sp, #8
 810b038:	af00      	add	r7, sp, #0
 810b03a:	6078      	str	r0, [r7, #4]
 810b03c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 810b03e:	6839      	ldr	r1, [r7, #0]
 810b040:	6878      	ldr	r0, [r7, #4]
 810b042:	f000 fb5f 	bl	810b704 <_ZNSaIfEC1ERKS_>
 810b046:	6878      	ldr	r0, [r7, #4]
 810b048:	3708      	adds	r7, #8
 810b04a:	46bd      	mov	sp, r7
 810b04c:	bd80      	pop	{r7, pc}

0810b04e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 810b04e:	b580      	push	{r7, lr}
 810b050:	b082      	sub	sp, #8
 810b052:	af00      	add	r7, sp, #0
 810b054:	6078      	str	r0, [r7, #4]
 810b056:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 810b058:	6839      	ldr	r1, [r7, #0]
 810b05a:	6878      	ldr	r0, [r7, #4]
 810b05c:	f000 fb52 	bl	810b704 <_ZNSaIfEC1ERKS_>
 810b060:	687b      	ldr	r3, [r7, #4]
 810b062:	4618      	mov	r0, r3
 810b064:	f7ff fc28 	bl	810a8b8 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 810b068:	687b      	ldr	r3, [r7, #4]
 810b06a:	4618      	mov	r0, r3
 810b06c:	3708      	adds	r7, #8
 810b06e:	46bd      	mov	sp, r7
 810b070:	bd80      	pop	{r7, pc}

0810b072 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 810b072:	b580      	push	{r7, lr}
 810b074:	b082      	sub	sp, #8
 810b076:	af00      	add	r7, sp, #0
 810b078:	6078      	str	r0, [r7, #4]
 810b07a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 810b07c:	6839      	ldr	r1, [r7, #0]
 810b07e:	6878      	ldr	r0, [r7, #4]
 810b080:	f7ff fc62 	bl	810a948 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810b084:	4602      	mov	r2, r0
 810b086:	687b      	ldr	r3, [r7, #4]
 810b088:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 810b08a:	687b      	ldr	r3, [r7, #4]
 810b08c:	681a      	ldr	r2, [r3, #0]
 810b08e:	687b      	ldr	r3, [r7, #4]
 810b090:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810b092:	687b      	ldr	r3, [r7, #4]
 810b094:	681a      	ldr	r2, [r3, #0]
 810b096:	683b      	ldr	r3, [r7, #0]
 810b098:	009b      	lsls	r3, r3, #2
 810b09a:	441a      	add	r2, r3
 810b09c:	687b      	ldr	r3, [r7, #4]
 810b09e:	609a      	str	r2, [r3, #8]
      }
 810b0a0:	bf00      	nop
 810b0a2:	3708      	adds	r7, #8
 810b0a4:	46bd      	mov	sp, r7
 810b0a6:	bd80      	pop	{r7, pc}

0810b0a8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810b0a8:	b480      	push	{r7}
 810b0aa:	b083      	sub	sp, #12
 810b0ac:	af00      	add	r7, sp, #0
 810b0ae:	6078      	str	r0, [r7, #4]
 810b0b0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810b0b2:	683b      	ldr	r3, [r7, #0]
 810b0b4:	681a      	ldr	r2, [r3, #0]
 810b0b6:	687b      	ldr	r3, [r7, #4]
 810b0b8:	601a      	str	r2, [r3, #0]
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	4618      	mov	r0, r3
 810b0be:	370c      	adds	r7, #12
 810b0c0:	46bd      	mov	sp, r7
 810b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0c6:	4770      	bx	lr

0810b0c8 <_ZN9__gnu_cxxeqIPKfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 810b0c8:	b590      	push	{r4, r7, lr}
 810b0ca:	b083      	sub	sp, #12
 810b0cc:	af00      	add	r7, sp, #0
 810b0ce:	6078      	str	r0, [r7, #4]
 810b0d0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 810b0d2:	6878      	ldr	r0, [r7, #4]
 810b0d4:	f000 f810 	bl	810b0f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810b0d8:	4603      	mov	r3, r0
 810b0da:	681c      	ldr	r4, [r3, #0]
 810b0dc:	6838      	ldr	r0, [r7, #0]
 810b0de:	f000 f80b 	bl	810b0f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810b0e2:	4603      	mov	r3, r0
 810b0e4:	681b      	ldr	r3, [r3, #0]
 810b0e6:	429c      	cmp	r4, r3
 810b0e8:	bf0c      	ite	eq
 810b0ea:	2301      	moveq	r3, #1
 810b0ec:	2300      	movne	r3, #0
 810b0ee:	b2db      	uxtb	r3, r3
 810b0f0:	4618      	mov	r0, r3
 810b0f2:	370c      	adds	r7, #12
 810b0f4:	46bd      	mov	sp, r7
 810b0f6:	bd90      	pop	{r4, r7, pc}

0810b0f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810b0f8:	b480      	push	{r7}
 810b0fa:	b083      	sub	sp, #12
 810b0fc:	af00      	add	r7, sp, #0
 810b0fe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810b100:	687b      	ldr	r3, [r7, #4]
 810b102:	4618      	mov	r0, r3
 810b104:	370c      	adds	r7, #12
 810b106:	46bd      	mov	sp, r7
 810b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b10c:	4770      	bx	lr

0810b10e <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 810b10e:	b590      	push	{r4, r7, lr}
 810b110:	b087      	sub	sp, #28
 810b112:	af00      	add	r7, sp, #0
 810b114:	60f8      	str	r0, [r7, #12]
 810b116:	60b9      	str	r1, [r7, #8]
 810b118:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 810b11a:	687b      	ldr	r3, [r7, #4]
 810b11c:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 810b11e:	e015      	b.n	810b14c <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 810b120:	6978      	ldr	r0, [r7, #20]
 810b122:	f000 fb0d 	bl	810b740 <_ZSt11__addressofIfEPT_RS0_>
 810b126:	4604      	mov	r4, r0
 810b128:	f107 030c 	add.w	r3, r7, #12
 810b12c:	4618      	mov	r0, r3
 810b12e:	f000 fb12 	bl	810b756 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEdeEv>
 810b132:	4603      	mov	r3, r0
 810b134:	4619      	mov	r1, r3
 810b136:	4620      	mov	r0, r4
 810b138:	f000 fb19 	bl	810b76e <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 810b13c:	f107 030c 	add.w	r3, r7, #12
 810b140:	4618      	mov	r0, r3
 810b142:	f000 faed 	bl	810b720 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEppEv>
 810b146:	697b      	ldr	r3, [r7, #20]
 810b148:	3304      	adds	r3, #4
 810b14a:	617b      	str	r3, [r7, #20]
 810b14c:	f107 0208 	add.w	r2, r7, #8
 810b150:	f107 030c 	add.w	r3, r7, #12
 810b154:	4611      	mov	r1, r2
 810b156:	4618      	mov	r0, r3
 810b158:	f7ff ffb6 	bl	810b0c8 <_ZN9__gnu_cxxeqIPKfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 810b15c:	4603      	mov	r3, r0
 810b15e:	f083 0301 	eor.w	r3, r3, #1
 810b162:	b2db      	uxtb	r3, r3
 810b164:	2b00      	cmp	r3, #0
 810b166:	d1db      	bne.n	810b120 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_+0x12>
	  return __cur;
 810b168:	697b      	ldr	r3, [r7, #20]
    }
 810b16a:	4618      	mov	r0, r3
 810b16c:	371c      	adds	r7, #28
 810b16e:	46bd      	mov	sp, r7
 810b170:	bd90      	pop	{r4, r7, pc}

0810b172 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 810b172:	b580      	push	{r7, lr}
 810b174:	b086      	sub	sp, #24
 810b176:	af00      	add	r7, sp, #0
 810b178:	60f8      	str	r0, [r7, #12]
 810b17a:	60b9      	str	r1, [r7, #8]
 810b17c:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 810b17e:	2301      	movs	r3, #1
 810b180:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 810b182:	2301      	movs	r3, #1
 810b184:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 810b186:	687a      	ldr	r2, [r7, #4]
 810b188:	68b9      	ldr	r1, [r7, #8]
 810b18a:	68f8      	ldr	r0, [r7, #12]
 810b18c:	f000 fb11 	bl	810b7b2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 810b190:	4603      	mov	r3, r0
    }
 810b192:	4618      	mov	r0, r3
 810b194:	3718      	adds	r7, #24
 810b196:	46bd      	mov	sp, r7
 810b198:	bd80      	pop	{r7, pc}

0810b19a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 810b19a:	b5f0      	push	{r4, r5, r6, r7, lr}
 810b19c:	b087      	sub	sp, #28
 810b19e:	af00      	add	r7, sp, #0
 810b1a0:	60f8      	str	r0, [r7, #12]
 810b1a2:	60b9      	str	r1, [r7, #8]
 810b1a4:	607a      	str	r2, [r7, #4]
 810b1a6:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 810b1a8:	e01b      	b.n	810b1e2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 810b1aa:	687b      	ldr	r3, [r7, #4]
 810b1ac:	2b00      	cmp	r3, #0
 810b1ae:	d106      	bne.n	810b1be <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 810b1b0:	4633      	mov	r3, r6
 810b1b2:	68ba      	ldr	r2, [r7, #8]
 810b1b4:	68b9      	ldr	r1, [r7, #8]
 810b1b6:	68f8      	ldr	r0, [r7, #12]
 810b1b8:	f000 fb0b 	bl	810b7d2 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 810b1bc:	e021      	b.n	810b202 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 810b1be:	687b      	ldr	r3, [r7, #4]
 810b1c0:	3b01      	subs	r3, #1
 810b1c2:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 810b1c4:	462a      	mov	r2, r5
 810b1c6:	68b9      	ldr	r1, [r7, #8]
 810b1c8:	68f8      	ldr	r0, [r7, #12]
 810b1ca:	f000 fb19 	bl	810b800 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 810b1ce:	4603      	mov	r3, r0
 810b1d0:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 810b1d2:	4623      	mov	r3, r4
 810b1d4:	687a      	ldr	r2, [r7, #4]
 810b1d6:	68b9      	ldr	r1, [r7, #8]
 810b1d8:	6978      	ldr	r0, [r7, #20]
 810b1da:	f7ff ffde 	bl	810b19a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 810b1de:	697b      	ldr	r3, [r7, #20]
 810b1e0:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 810b1e2:	f107 020c 	add.w	r2, r7, #12
 810b1e6:	f107 0308 	add.w	r3, r7, #8
 810b1ea:	4611      	mov	r1, r2
 810b1ec:	4618      	mov	r0, r3
 810b1ee:	f7ff fc70 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810b1f2:	4603      	mov	r3, r0
 810b1f4:	2b10      	cmp	r3, #16
 810b1f6:	bfcc      	ite	gt
 810b1f8:	2301      	movgt	r3, #1
 810b1fa:	2300      	movle	r3, #0
 810b1fc:	b2db      	uxtb	r3, r3
 810b1fe:	2b00      	cmp	r3, #0
 810b200:	d1d3      	bne.n	810b1aa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 810b202:	371c      	adds	r7, #28
 810b204:	46bd      	mov	sp, r7
 810b206:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810b208 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 810b208:	b5f0      	push	{r4, r5, r6, r7, lr}
 810b20a:	b085      	sub	sp, #20
 810b20c:	af00      	add	r7, sp, #0
 810b20e:	60f8      	str	r0, [r7, #12]
 810b210:	60b9      	str	r1, [r7, #8]
 810b212:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 810b214:	f107 020c 	add.w	r2, r7, #12
 810b218:	f107 0308 	add.w	r3, r7, #8
 810b21c:	4611      	mov	r1, r2
 810b21e:	4618      	mov	r0, r3
 810b220:	f7ff fc57 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810b224:	4603      	mov	r3, r0
 810b226:	2b10      	cmp	r3, #16
 810b228:	bfcc      	ite	gt
 810b22a:	2301      	movgt	r3, #1
 810b22c:	2300      	movle	r3, #0
 810b22e:	b2db      	uxtb	r3, r3
 810b230:	2b00      	cmp	r3, #0
 810b232:	d018      	beq.n	810b266 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 810b234:	f107 030c 	add.w	r3, r7, #12
 810b238:	2110      	movs	r1, #16
 810b23a:	4618      	mov	r0, r3
 810b23c:	f7ff fae9 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b240:	4603      	mov	r3, r0
 810b242:	4632      	mov	r2, r6
 810b244:	4619      	mov	r1, r3
 810b246:	68f8      	ldr	r0, [r7, #12]
 810b248:	f000 fb1a 	bl	810b880 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 810b24c:	f107 030c 	add.w	r3, r7, #12
 810b250:	2110      	movs	r1, #16
 810b252:	4618      	mov	r0, r3
 810b254:	f7ff fadd 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b258:	4603      	mov	r3, r0
 810b25a:	462a      	mov	r2, r5
 810b25c:	68b9      	ldr	r1, [r7, #8]
 810b25e:	4618      	mov	r0, r3
 810b260:	f000 fb77 	bl	810b952 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810b264:	e004      	b.n	810b270 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 810b266:	4622      	mov	r2, r4
 810b268:	68b9      	ldr	r1, [r7, #8]
 810b26a:	68f8      	ldr	r0, [r7, #12]
 810b26c:	f000 fb08 	bl	810b880 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 810b270:	bf00      	nop
 810b272:	3714      	adds	r7, #20
 810b274:	46bd      	mov	sp, r7
 810b276:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810b278 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810b278:	b480      	push	{r7}
 810b27a:	b083      	sub	sp, #12
 810b27c:	af00      	add	r7, sp, #0
 810b27e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810b280:	687b      	ldr	r3, [r7, #4]
 810b282:	4618      	mov	r0, r3
 810b284:	370c      	adds	r7, #12
 810b286:	46bd      	mov	sp, r7
 810b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b28c:	4770      	bx	lr

0810b28e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810b28e:	b580      	push	{r7, lr}
 810b290:	b084      	sub	sp, #16
 810b292:	af00      	add	r7, sp, #0
 810b294:	60f8      	str	r0, [r7, #12]
 810b296:	60b9      	str	r1, [r7, #8]
 810b298:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810b29a:	6878      	ldr	r0, [r7, #4]
 810b29c:	f7ff ffec 	bl	810b278 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810b2a0:	4603      	mov	r3, r0
 810b2a2:	4619      	mov	r1, r3
 810b2a4:	68b8      	ldr	r0, [r7, #8]
 810b2a6:	f000 fb7c 	bl	810b9a2 <_ZSt12construct_atIfJfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 810b2aa:	bf00      	nop
 810b2ac:	3710      	adds	r7, #16
 810b2ae:	46bd      	mov	sp, r7
 810b2b0:	bd80      	pop	{r7, pc}

0810b2b2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 810b2b2:	b590      	push	{r4, r7, lr}
 810b2b4:	b087      	sub	sp, #28
 810b2b6:	af00      	add	r7, sp, #0
 810b2b8:	60f8      	str	r0, [r7, #12]
 810b2ba:	60b9      	str	r1, [r7, #8]
 810b2bc:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 810b2be:	68f8      	ldr	r0, [r7, #12]
 810b2c0:	f7ff fb21 	bl	810a906 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810b2c4:	4604      	mov	r4, r0
 810b2c6:	68f8      	ldr	r0, [r7, #12]
 810b2c8:	f7ff f9a9 	bl	810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810b2cc:	4603      	mov	r3, r0
 810b2ce:	1ae2      	subs	r2, r4, r3
 810b2d0:	68bb      	ldr	r3, [r7, #8]
 810b2d2:	429a      	cmp	r2, r3
 810b2d4:	bf34      	ite	cc
 810b2d6:	2301      	movcc	r3, #1
 810b2d8:	2300      	movcs	r3, #0
 810b2da:	b2db      	uxtb	r3, r3
 810b2dc:	2b00      	cmp	r3, #0
 810b2de:	d002      	beq.n	810b2e6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 810b2e0:	6878      	ldr	r0, [r7, #4]
 810b2e2:	f018 fa2e 	bl	8123742 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 810b2e6:	68f8      	ldr	r0, [r7, #12]
 810b2e8:	f7ff f999 	bl	810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810b2ec:	4604      	mov	r4, r0
 810b2ee:	68f8      	ldr	r0, [r7, #12]
 810b2f0:	f7ff f995 	bl	810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810b2f4:	4603      	mov	r3, r0
 810b2f6:	613b      	str	r3, [r7, #16]
 810b2f8:	f107 0208 	add.w	r2, r7, #8
 810b2fc:	f107 0310 	add.w	r3, r7, #16
 810b300:	4611      	mov	r1, r2
 810b302:	4618      	mov	r0, r3
 810b304:	f7fb ff9c 	bl	8107240 <_ZSt3maxIjERKT_S2_S2_>
 810b308:	4603      	mov	r3, r0
 810b30a:	681b      	ldr	r3, [r3, #0]
 810b30c:	4423      	add	r3, r4
 810b30e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 810b310:	68f8      	ldr	r0, [r7, #12]
 810b312:	f7ff f984 	bl	810a61e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810b316:	4602      	mov	r2, r0
 810b318:	697b      	ldr	r3, [r7, #20]
 810b31a:	4293      	cmp	r3, r2
 810b31c:	d306      	bcc.n	810b32c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 810b31e:	68f8      	ldr	r0, [r7, #12]
 810b320:	f7ff faf1 	bl	810a906 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810b324:	4602      	mov	r2, r0
 810b326:	697b      	ldr	r3, [r7, #20]
 810b328:	4293      	cmp	r3, r2
 810b32a:	d904      	bls.n	810b336 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 810b32c:	68f8      	ldr	r0, [r7, #12]
 810b32e:	f7ff faea 	bl	810a906 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810b332:	4603      	mov	r3, r0
 810b334:	e000      	b.n	810b338 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 810b336:	697b      	ldr	r3, [r7, #20]
      }
 810b338:	4618      	mov	r0, r3
 810b33a:	371c      	adds	r7, #28
 810b33c:	46bd      	mov	sp, r7
 810b33e:	bd90      	pop	{r4, r7, pc}

0810b340 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 810b340:	b5b0      	push	{r4, r5, r7, lr}
 810b342:	b08c      	sub	sp, #48	@ 0x30
 810b344:	af00      	add	r7, sp, #0
 810b346:	60f8      	str	r0, [r7, #12]
 810b348:	60b9      	str	r1, [r7, #8]
 810b34a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 810b34c:	4a39      	ldr	r2, [pc, #228]	@ (810b434 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 810b34e:	2101      	movs	r1, #1
 810b350:	68f8      	ldr	r0, [r7, #12]
 810b352:	f7ff ffae 	bl	810b2b2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 810b356:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 810b358:	68fb      	ldr	r3, [r7, #12]
 810b35a:	681b      	ldr	r3, [r3, #0]
 810b35c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 810b35e:	68fb      	ldr	r3, [r7, #12]
 810b360:	685b      	ldr	r3, [r3, #4]
 810b362:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 810b364:	68f8      	ldr	r0, [r7, #12]
 810b366:	f7ff fa02 	bl	810a76e <_ZNSt6vectorIfSaIfEE5beginEv>
 810b36a:	4603      	mov	r3, r0
 810b36c:	617b      	str	r3, [r7, #20]
 810b36e:	f107 0214 	add.w	r2, r7, #20
 810b372:	f107 0308 	add.w	r3, r7, #8
 810b376:	4611      	mov	r1, r2
 810b378:	4618      	mov	r0, r3
 810b37a:	f7ff fbaa 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810b37e:	4603      	mov	r3, r0
 810b380:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 810b382:	68fb      	ldr	r3, [r7, #12]
 810b384:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b386:	4618      	mov	r0, r3
 810b388:	f7ff fade 	bl	810a948 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810b38c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 810b38e:	69fb      	ldr	r3, [r7, #28]
 810b390:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 810b392:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 810b394:	6a3b      	ldr	r3, [r7, #32]
 810b396:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 810b398:	69fa      	ldr	r2, [r7, #28]
 810b39a:	18d5      	adds	r5, r2, r3
 810b39c:	6878      	ldr	r0, [r7, #4]
 810b39e:	f7ff ff6b 	bl	810b278 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810b3a2:	4603      	mov	r3, r0
 810b3a4:	461a      	mov	r2, r3
 810b3a6:	4629      	mov	r1, r5
 810b3a8:	4620      	mov	r0, r4
 810b3aa:	f7ff ff70 	bl	810b28e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 810b3ae:	2300      	movs	r3, #0
 810b3b0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810b3b2:	f107 0308 	add.w	r3, r7, #8
 810b3b6:	4618      	mov	r0, r3
 810b3b8:	f7ff fb80 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810b3bc:	4603      	mov	r3, r0
 810b3be:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 810b3c0:	68fb      	ldr	r3, [r7, #12]
 810b3c2:	4618      	mov	r0, r3
 810b3c4:	f7ff fa53 	bl	810a86e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810b3c8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810b3ca:	69fa      	ldr	r2, [r7, #28]
 810b3cc:	4621      	mov	r1, r4
 810b3ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b3d0:	f7ff face 	bl	810a970 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 810b3d4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 810b3d6:	69bb      	ldr	r3, [r7, #24]
 810b3d8:	3304      	adds	r3, #4
 810b3da:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 810b3dc:	f107 0308 	add.w	r3, r7, #8
 810b3e0:	4618      	mov	r0, r3
 810b3e2:	f7ff fb6b 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810b3e6:	4603      	mov	r3, r0
 810b3e8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 810b3ea:	68fb      	ldr	r3, [r7, #12]
 810b3ec:	4618      	mov	r0, r3
 810b3ee:	f7ff fa3e 	bl	810a86e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810b3f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 810b3f4:	69ba      	ldr	r2, [r7, #24]
 810b3f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810b3f8:	4620      	mov	r0, r4
 810b3fa:	f7ff fab9 	bl	810a970 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 810b3fe:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 810b400:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 810b402:	68fb      	ldr	r3, [r7, #12]
 810b404:	689a      	ldr	r2, [r3, #8]
 810b406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b408:	1ad3      	subs	r3, r2, r3
 810b40a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 810b40c:	461a      	mov	r2, r3
 810b40e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b410:	f7ff fa66 	bl	810a8e0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 810b414:	68fb      	ldr	r3, [r7, #12]
 810b416:	69fa      	ldr	r2, [r7, #28]
 810b418:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 810b41a:	68fb      	ldr	r3, [r7, #12]
 810b41c:	69ba      	ldr	r2, [r7, #24]
 810b41e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 810b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b422:	009b      	lsls	r3, r3, #2
 810b424:	69fa      	ldr	r2, [r7, #28]
 810b426:	441a      	add	r2, r3
 810b428:	68fb      	ldr	r3, [r7, #12]
 810b42a:	609a      	str	r2, [r3, #8]
    }
 810b42c:	bf00      	nop
 810b42e:	3730      	adds	r7, #48	@ 0x30
 810b430:	46bd      	mov	sp, r7
 810b432:	bdb0      	pop	{r4, r5, r7, pc}
 810b434:	08125588 	.word	0x08125588

0810b438 <_ZNSt6vectorIfSaIfEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 810b438:	b580      	push	{r7, lr}
 810b43a:	b084      	sub	sp, #16
 810b43c:	af00      	add	r7, sp, #0
 810b43e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 810b440:	6878      	ldr	r0, [r7, #4]
 810b442:	f7ff f9a4 	bl	810a78e <_ZNSt6vectorIfSaIfEE3endEv>
 810b446:	4603      	mov	r3, r0
 810b448:	60fb      	str	r3, [r7, #12]
 810b44a:	f107 030c 	add.w	r3, r7, #12
 810b44e:	2101      	movs	r1, #1
 810b450:	4618      	mov	r0, r3
 810b452:	f000 f857 	bl	810b504 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810b456:	4603      	mov	r3, r0
 810b458:	60bb      	str	r3, [r7, #8]
 810b45a:	f107 0308 	add.w	r3, r7, #8
 810b45e:	4618      	mov	r0, r3
 810b460:	f000 f82c 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b464:	4603      	mov	r3, r0
      }
 810b466:	4618      	mov	r0, r3
 810b468:	3710      	adds	r7, #16
 810b46a:	46bd      	mov	sp, r7
 810b46c:	bd80      	pop	{r7, pc}

0810b46e <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 810b46e:	b580      	push	{r7, lr}
 810b470:	b084      	sub	sp, #16
 810b472:	af00      	add	r7, sp, #0
 810b474:	60f8      	str	r0, [r7, #12]
 810b476:	60b9      	str	r1, [r7, #8]
 810b478:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 810b47a:	e00c      	b.n	810b496 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0x28>
	std::iter_swap(__first1, __first2);
 810b47c:	6879      	ldr	r1, [r7, #4]
 810b47e:	68f8      	ldr	r0, [r7, #12]
 810b480:	f000 f859 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 810b484:	f107 030c 	add.w	r3, r7, #12
 810b488:	4618      	mov	r0, r3
 810b48a:	f000 f86b 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810b48e:	1d3b      	adds	r3, r7, #4
 810b490:	4618      	mov	r0, r3
 810b492:	f000 f867 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810b496:	f107 0208 	add.w	r2, r7, #8
 810b49a:	f107 030c 	add.w	r3, r7, #12
 810b49e:	4611      	mov	r1, r2
 810b4a0:	4618      	mov	r0, r3
 810b4a2:	f7ff faf3 	bl	810aa8c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810b4a6:	4603      	mov	r3, r0
 810b4a8:	f083 0301 	eor.w	r3, r3, #1
 810b4ac:	b2db      	uxtb	r3, r3
 810b4ae:	2b00      	cmp	r3, #0
 810b4b0:	d1e4      	bne.n	810b47c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0xe>
      return __first2;
 810b4b2:	687b      	ldr	r3, [r7, #4]
    }
 810b4b4:	4618      	mov	r0, r3
 810b4b6:	3710      	adds	r7, #16
 810b4b8:	46bd      	mov	sp, r7
 810b4ba:	bd80      	pop	{r7, pc}

0810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810b4bc:	b480      	push	{r7}
 810b4be:	b083      	sub	sp, #12
 810b4c0:	af00      	add	r7, sp, #0
 810b4c2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810b4c4:	687b      	ldr	r3, [r7, #4]
 810b4c6:	681b      	ldr	r3, [r3, #0]
 810b4c8:	4618      	mov	r0, r3
 810b4ca:	370c      	adds	r7, #12
 810b4cc:	46bd      	mov	sp, r7
 810b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4d2:	4770      	bx	lr

0810b4d4 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 810b4d4:	b590      	push	{r4, r7, lr}
 810b4d6:	b085      	sub	sp, #20
 810b4d8:	af00      	add	r7, sp, #0
 810b4da:	60f8      	str	r0, [r7, #12]
 810b4dc:	60b9      	str	r1, [r7, #8]
 810b4de:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 810b4e0:	68f8      	ldr	r0, [r7, #12]
 810b4e2:	f000 fa80 	bl	810b9e6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810b4e6:	4604      	mov	r4, r0
 810b4e8:	68b8      	ldr	r0, [r7, #8]
 810b4ea:	f000 fa7c 	bl	810b9e6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810b4ee:	4603      	mov	r3, r0
 810b4f0:	687a      	ldr	r2, [r7, #4]
 810b4f2:	4619      	mov	r1, r3
 810b4f4:	4620      	mov	r0, r4
 810b4f6:	f000 fa81 	bl	810b9fc <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 810b4fa:	4603      	mov	r3, r0
    }
 810b4fc:	4618      	mov	r0, r3
 810b4fe:	3714      	adds	r7, #20
 810b500:	46bd      	mov	sp, r7
 810b502:	bd90      	pop	{r4, r7, pc}

0810b504 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 810b504:	b580      	push	{r7, lr}
 810b506:	b084      	sub	sp, #16
 810b508:	af00      	add	r7, sp, #0
 810b50a:	6078      	str	r0, [r7, #4]
 810b50c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 810b50e:	687b      	ldr	r3, [r7, #4]
 810b510:	681a      	ldr	r2, [r3, #0]
 810b512:	683b      	ldr	r3, [r7, #0]
 810b514:	009b      	lsls	r3, r3, #2
 810b516:	425b      	negs	r3, r3
 810b518:	4413      	add	r3, r2
 810b51a:	60fb      	str	r3, [r7, #12]
 810b51c:	f107 020c 	add.w	r2, r7, #12
 810b520:	f107 0308 	add.w	r3, r7, #8
 810b524:	4611      	mov	r1, r2
 810b526:	4618      	mov	r0, r3
 810b528:	f7ff faa0 	bl	810aa6c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810b52c:	68bb      	ldr	r3, [r7, #8]
 810b52e:	4618      	mov	r0, r3
 810b530:	3710      	adds	r7, #16
 810b532:	46bd      	mov	sp, r7
 810b534:	bd80      	pop	{r7, pc}

0810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 810b536:	b590      	push	{r4, r7, lr}
 810b538:	b083      	sub	sp, #12
 810b53a:	af00      	add	r7, sp, #0
 810b53c:	6078      	str	r0, [r7, #4]
 810b53e:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 810b540:	1d3b      	adds	r3, r7, #4
 810b542:	4618      	mov	r0, r3
 810b544:	f7ff ffba 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b548:	4604      	mov	r4, r0
 810b54a:	463b      	mov	r3, r7
 810b54c:	4618      	mov	r0, r3
 810b54e:	f7ff ffb5 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b552:	4603      	mov	r3, r0
 810b554:	4619      	mov	r1, r3
 810b556:	4620      	mov	r0, r4
 810b558:	f000 fa71 	bl	810ba3e <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 810b55c:	bf00      	nop
 810b55e:	370c      	adds	r7, #12
 810b560:	46bd      	mov	sp, r7
 810b562:	bd90      	pop	{r4, r7, pc}

0810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810b564:	b480      	push	{r7}
 810b566:	b083      	sub	sp, #12
 810b568:	af00      	add	r7, sp, #0
 810b56a:	6078      	str	r0, [r7, #4]
	++_M_current;
 810b56c:	687b      	ldr	r3, [r7, #4]
 810b56e:	681b      	ldr	r3, [r3, #0]
 810b570:	1d1a      	adds	r2, r3, #4
 810b572:	687b      	ldr	r3, [r7, #4]
 810b574:	601a      	str	r2, [r3, #0]
	return *this;
 810b576:	687b      	ldr	r3, [r7, #4]
      }
 810b578:	4618      	mov	r0, r3
 810b57a:	370c      	adds	r7, #12
 810b57c:	46bd      	mov	sp, r7
 810b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b582:	4770      	bx	lr

0810b584 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 810b584:	b580      	push	{r7, lr}
 810b586:	b084      	sub	sp, #16
 810b588:	af00      	add	r7, sp, #0
 810b58a:	6078      	str	r0, [r7, #4]
 810b58c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810b58e:	6878      	ldr	r0, [r7, #4]
 810b590:	f000 fa74 	bl	810ba7c <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810b594:	4603      	mov	r3, r0
 810b596:	681b      	ldr	r3, [r3, #0]
 810b598:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810b59a:	6838      	ldr	r0, [r7, #0]
 810b59c:	f000 fa6e 	bl	810ba7c <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810b5a0:	4603      	mov	r3, r0
 810b5a2:	681a      	ldr	r2, [r3, #0]
 810b5a4:	687b      	ldr	r3, [r7, #4]
 810b5a6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810b5a8:	f107 030c 	add.w	r3, r7, #12
 810b5ac:	4618      	mov	r0, r3
 810b5ae:	f000 fa65 	bl	810ba7c <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 810b5b2:	4603      	mov	r3, r0
 810b5b4:	681a      	ldr	r2, [r3, #0]
 810b5b6:	683b      	ldr	r3, [r7, #0]
 810b5b8:	601a      	str	r2, [r3, #0]
    }
 810b5ba:	bf00      	nop
 810b5bc:	3710      	adds	r7, #16
 810b5be:	46bd      	mov	sp, r7
 810b5c0:	bd80      	pop	{r7, pc}

0810b5c2 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 810b5c2:	b590      	push	{r4, r7, lr}
 810b5c4:	b085      	sub	sp, #20
 810b5c6:	af00      	add	r7, sp, #0
 810b5c8:	60f8      	str	r0, [r7, #12]
 810b5ca:	60b9      	str	r1, [r7, #8]
 810b5cc:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 810b5ce:	68f8      	ldr	r0, [r7, #12]
 810b5d0:	f000 fa09 	bl	810b9e6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810b5d4:	4604      	mov	r4, r0
 810b5d6:	68b8      	ldr	r0, [r7, #8]
 810b5d8:	f000 fa05 	bl	810b9e6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 810b5dc:	4603      	mov	r3, r0
 810b5de:	687a      	ldr	r2, [r7, #4]
 810b5e0:	4619      	mov	r1, r3
 810b5e2:	4620      	mov	r0, r4
 810b5e4:	f000 fa55 	bl	810ba92 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 810b5e8:	4603      	mov	r3, r0
    }
 810b5ea:	4618      	mov	r0, r3
 810b5ec:	3714      	adds	r7, #20
 810b5ee:	46bd      	mov	sp, r7
 810b5f0:	bd90      	pop	{r4, r7, pc}

0810b5f2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 810b5f2:	b480      	push	{r7}
 810b5f4:	b083      	sub	sp, #12
 810b5f6:	af00      	add	r7, sp, #0
 810b5f8:	6078      	str	r0, [r7, #4]
	--_M_current;
 810b5fa:	687b      	ldr	r3, [r7, #4]
 810b5fc:	681b      	ldr	r3, [r3, #0]
 810b5fe:	1f1a      	subs	r2, r3, #4
 810b600:	687b      	ldr	r3, [r7, #4]
 810b602:	601a      	str	r2, [r3, #0]
	return *this;
 810b604:	687b      	ldr	r3, [r7, #4]
      }
 810b606:	4618      	mov	r0, r3
 810b608:	370c      	adds	r7, #12
 810b60a:	46bd      	mov	sp, r7
 810b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b610:	4770      	bx	lr

0810b612 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 810b612:	b580      	push	{r7, lr}
 810b614:	b082      	sub	sp, #8
 810b616:	af00      	add	r7, sp, #0
 810b618:	6078      	str	r0, [r7, #4]
 810b61a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 810b61c:	e009      	b.n	810b632 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 810b61e:	6878      	ldr	r0, [r7, #4]
 810b620:	f000 f88e 	bl	810b740 <_ZSt11__addressofIfEPT_RS0_>
 810b624:	4603      	mov	r3, r0
 810b626:	4618      	mov	r0, r3
 810b628:	f000 fa54 	bl	810bad4 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 810b62c:	687b      	ldr	r3, [r7, #4]
 810b62e:	3304      	adds	r3, #4
 810b630:	607b      	str	r3, [r7, #4]
 810b632:	687a      	ldr	r2, [r7, #4]
 810b634:	683b      	ldr	r3, [r7, #0]
 810b636:	429a      	cmp	r2, r3
 810b638:	d1f1      	bne.n	810b61e <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 810b63a:	bf00      	nop
 810b63c:	bf00      	nop
 810b63e:	3708      	adds	r7, #8
 810b640:	46bd      	mov	sp, r7
 810b642:	bd80      	pop	{r7, pc}

0810b644 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 810b644:	b480      	push	{r7}
 810b646:	b083      	sub	sp, #12
 810b648:	af00      	add	r7, sp, #0
 810b64a:	6078      	str	r0, [r7, #4]
 810b64c:	6039      	str	r1, [r7, #0]
 810b64e:	bf00      	nop
 810b650:	370c      	adds	r7, #12
 810b652:	46bd      	mov	sp, r7
 810b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b658:	4770      	bx	lr

0810b65a <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 810b65a:	b480      	push	{r7}
 810b65c:	b083      	sub	sp, #12
 810b65e:	af00      	add	r7, sp, #0
 810b660:	6078      	str	r0, [r7, #4]
    { return __it; }
 810b662:	687b      	ldr	r3, [r7, #4]
 810b664:	4618      	mov	r0, r3
 810b666:	370c      	adds	r7, #12
 810b668:	46bd      	mov	sp, r7
 810b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b66e:	4770      	bx	lr

0810b670 <_ZN9__gnu_cxx17__normal_iteratorIPfvEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810b670:	b480      	push	{r7}
 810b672:	b083      	sub	sp, #12
 810b674:	af00      	add	r7, sp, #0
 810b676:	6078      	str	r0, [r7, #4]
 810b678:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810b67a:	683b      	ldr	r3, [r7, #0]
 810b67c:	681a      	ldr	r2, [r3, #0]
 810b67e:	687b      	ldr	r3, [r7, #4]
 810b680:	601a      	str	r2, [r3, #0]
 810b682:	687b      	ldr	r3, [r7, #4]
 810b684:	4618      	mov	r0, r3
 810b686:	370c      	adds	r7, #12
 810b688:	46bd      	mov	sp, r7
 810b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b68e:	4770      	bx	lr

0810b690 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 810b690:	b580      	push	{r7, lr}
 810b692:	b086      	sub	sp, #24
 810b694:	af00      	add	r7, sp, #0
 810b696:	60f8      	str	r0, [r7, #12]
 810b698:	60b9      	str	r1, [r7, #8]
 810b69a:	607a      	str	r2, [r7, #4]
 810b69c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 810b69e:	68ba      	ldr	r2, [r7, #8]
 810b6a0:	68fb      	ldr	r3, [r7, #12]
 810b6a2:	1ad3      	subs	r3, r2, r3
 810b6a4:	109b      	asrs	r3, r3, #2
 810b6a6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 810b6a8:	697b      	ldr	r3, [r7, #20]
 810b6aa:	2b00      	cmp	r3, #0
 810b6ac:	dd22      	ble.n	810b6f4 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x64>
	  if (std::is_constant_evaluated())
 810b6ae:	f7fb f8aa 	bl	8106806 <_ZSt21is_constant_evaluatedv>
 810b6b2:	4603      	mov	r3, r0
 810b6b4:	2b00      	cmp	r3, #0
 810b6b6:	d016      	beq.n	810b6e6 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x56>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 810b6b8:	1d3a      	adds	r2, r7, #4
 810b6ba:	f107 0310 	add.w	r3, r7, #16
 810b6be:	4611      	mov	r1, r2
 810b6c0:	4618      	mov	r0, r3
 810b6c2:	f7ff ffd5 	bl	810b670 <_ZN9__gnu_cxx17__normal_iteratorIPfvEC1ERKS1_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 810b6c6:	683b      	ldr	r3, [r7, #0]
 810b6c8:	693a      	ldr	r2, [r7, #16]
 810b6ca:	68b9      	ldr	r1, [r7, #8]
 810b6cc:	68f8      	ldr	r0, [r7, #12]
 810b6ce:	f000 fa45 	bl	810bb5c <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_>
 810b6d2:	4603      	mov	r3, r0
 810b6d4:	613b      	str	r3, [r7, #16]
	      return __out.base();
 810b6d6:	f107 0310 	add.w	r3, r7, #16
 810b6da:	4618      	mov	r0, r3
 810b6dc:	f000 fa6c 	bl	810bbb8 <_ZNK9__gnu_cxx17__normal_iteratorIPfvE4baseEv>
 810b6e0:	4603      	mov	r3, r0
 810b6e2:	681b      	ldr	r3, [r3, #0]
 810b6e4:	e00a      	b.n	810b6fc <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810b6e6:	6878      	ldr	r0, [r7, #4]
 810b6e8:	697b      	ldr	r3, [r7, #20]
 810b6ea:	009b      	lsls	r3, r3, #2
 810b6ec:	461a      	mov	r2, r3
 810b6ee:	68f9      	ldr	r1, [r7, #12]
 810b6f0:	f019 f8ae 	bl	8124850 <memmove>
      return __result + __count;
 810b6f4:	687a      	ldr	r2, [r7, #4]
 810b6f6:	697b      	ldr	r3, [r7, #20]
 810b6f8:	009b      	lsls	r3, r3, #2
 810b6fa:	4413      	add	r3, r2
    }
 810b6fc:	4618      	mov	r0, r3
 810b6fe:	3718      	adds	r7, #24
 810b700:	46bd      	mov	sp, r7
 810b702:	bd80      	pop	{r7, pc}

0810b704 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 810b704:	b580      	push	{r7, lr}
 810b706:	b082      	sub	sp, #8
 810b708:	af00      	add	r7, sp, #0
 810b70a:	6078      	str	r0, [r7, #4]
 810b70c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 810b70e:	6839      	ldr	r1, [r7, #0]
 810b710:	6878      	ldr	r0, [r7, #4]
 810b712:	f000 fa5c 	bl	810bbce <_ZNSt15__new_allocatorIfEC1ERKS0_>
 810b716:	687b      	ldr	r3, [r7, #4]
 810b718:	4618      	mov	r0, r3
 810b71a:	3708      	adds	r7, #8
 810b71c:	46bd      	mov	sp, r7
 810b71e:	bd80      	pop	{r7, pc}

0810b720 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810b720:	b480      	push	{r7}
 810b722:	b083      	sub	sp, #12
 810b724:	af00      	add	r7, sp, #0
 810b726:	6078      	str	r0, [r7, #4]
	++_M_current;
 810b728:	687b      	ldr	r3, [r7, #4]
 810b72a:	681b      	ldr	r3, [r3, #0]
 810b72c:	1d1a      	adds	r2, r3, #4
 810b72e:	687b      	ldr	r3, [r7, #4]
 810b730:	601a      	str	r2, [r3, #0]
	return *this;
 810b732:	687b      	ldr	r3, [r7, #4]
      }
 810b734:	4618      	mov	r0, r3
 810b736:	370c      	adds	r7, #12
 810b738:	46bd      	mov	sp, r7
 810b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b73e:	4770      	bx	lr

0810b740 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 810b740:	b480      	push	{r7}
 810b742:	b083      	sub	sp, #12
 810b744:	af00      	add	r7, sp, #0
 810b746:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 810b748:	687b      	ldr	r3, [r7, #4]
 810b74a:	4618      	mov	r0, r3
 810b74c:	370c      	adds	r7, #12
 810b74e:	46bd      	mov	sp, r7
 810b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b754:	4770      	bx	lr

0810b756 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810b756:	b480      	push	{r7}
 810b758:	b083      	sub	sp, #12
 810b75a:	af00      	add	r7, sp, #0
 810b75c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810b75e:	687b      	ldr	r3, [r7, #4]
 810b760:	681b      	ldr	r3, [r3, #0]
 810b762:	4618      	mov	r0, r3
 810b764:	370c      	adds	r7, #12
 810b766:	46bd      	mov	sp, r7
 810b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b76c:	4770      	bx	lr

0810b76e <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 810b76e:	b590      	push	{r4, r7, lr}
 810b770:	b083      	sub	sp, #12
 810b772:	af00      	add	r7, sp, #0
 810b774:	6078      	str	r0, [r7, #4]
 810b776:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 810b778:	f7f7 fed2 	bl	8103520 <_ZSt23__is_constant_evaluatedv>
 810b77c:	4603      	mov	r3, r0
 810b77e:	2b00      	cmp	r3, #0
 810b780:	d008      	beq.n	810b794 <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_+0x26>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 810b782:	6838      	ldr	r0, [r7, #0]
 810b784:	f000 fa2f 	bl	810bbe6 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810b788:	4603      	mov	r3, r0
 810b78a:	4619      	mov	r1, r3
 810b78c:	6878      	ldr	r0, [r7, #4]
 810b78e:	f000 fa35 	bl	810bbfc <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
 810b792:	e00b      	b.n	810b7ac <_ZSt10_ConstructIfJRKfEEvPT_DpOT0_+0x3e>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 810b794:	687b      	ldr	r3, [r7, #4]
 810b796:	4619      	mov	r1, r3
 810b798:	2004      	movs	r0, #4
 810b79a:	f7f5 fd6d 	bl	8101278 <_ZnwjPv>
 810b79e:	4604      	mov	r4, r0
 810b7a0:	6838      	ldr	r0, [r7, #0]
 810b7a2:	f000 fa20 	bl	810bbe6 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810b7a6:	4603      	mov	r3, r0
 810b7a8:	681b      	ldr	r3, [r3, #0]
 810b7aa:	6023      	str	r3, [r4, #0]
    }
 810b7ac:	370c      	adds	r7, #12
 810b7ae:	46bd      	mov	sp, r7
 810b7b0:	bd90      	pop	{r4, r7, pc}

0810b7b2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810b7b2:	b580      	push	{r7, lr}
 810b7b4:	b084      	sub	sp, #16
 810b7b6:	af00      	add	r7, sp, #0
 810b7b8:	60f8      	str	r0, [r7, #12]
 810b7ba:	60b9      	str	r1, [r7, #8]
 810b7bc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810b7be:	687a      	ldr	r2, [r7, #4]
 810b7c0:	68b9      	ldr	r1, [r7, #8]
 810b7c2:	68f8      	ldr	r0, [r7, #12]
 810b7c4:	f000 fa30 	bl	810bc28 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 810b7c8:	4603      	mov	r3, r0
 810b7ca:	4618      	mov	r0, r3
 810b7cc:	3710      	adds	r7, #16
 810b7ce:	46bd      	mov	sp, r7
 810b7d0:	bd80      	pop	{r7, pc}

0810b7d2 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 810b7d2:	b590      	push	{r4, r7, lr}
 810b7d4:	b085      	sub	sp, #20
 810b7d6:	af00      	add	r7, sp, #0
 810b7d8:	60f8      	str	r0, [r7, #12]
 810b7da:	60b9      	str	r1, [r7, #8]
 810b7dc:	607a      	str	r2, [r7, #4]
 810b7de:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 810b7e0:	4623      	mov	r3, r4
 810b7e2:	687a      	ldr	r2, [r7, #4]
 810b7e4:	68b9      	ldr	r1, [r7, #8]
 810b7e6:	68f8      	ldr	r0, [r7, #12]
 810b7e8:	f000 fa6e 	bl	810bcc8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 810b7ec:	463b      	mov	r3, r7
 810b7ee:	461a      	mov	r2, r3
 810b7f0:	68b9      	ldr	r1, [r7, #8]
 810b7f2:	68f8      	ldr	r0, [r7, #12]
 810b7f4:	f000 faa6 	bl	810bd44 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 810b7f8:	bf00      	nop
 810b7fa:	3714      	adds	r7, #20
 810b7fc:	46bd      	mov	sp, r7
 810b7fe:	bd90      	pop	{r4, r7, pc}

0810b800 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 810b800:	b5f0      	push	{r4, r5, r6, r7, lr}
 810b802:	b089      	sub	sp, #36	@ 0x24
 810b804:	af02      	add	r7, sp, #8
 810b806:	60f8      	str	r0, [r7, #12]
 810b808:	60b9      	str	r1, [r7, #8]
 810b80a:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 810b80c:	f107 020c 	add.w	r2, r7, #12
 810b810:	f107 0308 	add.w	r3, r7, #8
 810b814:	4611      	mov	r1, r2
 810b816:	4618      	mov	r0, r3
 810b818:	f7ff f95b 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810b81c:	4603      	mov	r3, r0
 810b81e:	0fda      	lsrs	r2, r3, #31
 810b820:	4413      	add	r3, r2
 810b822:	105b      	asrs	r3, r3, #1
 810b824:	461a      	mov	r2, r3
 810b826:	f107 030c 	add.w	r3, r7, #12
 810b82a:	4611      	mov	r1, r2
 810b82c:	4618      	mov	r0, r3
 810b82e:	f7fe fff0 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b832:	4603      	mov	r3, r0
 810b834:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 810b836:	f107 030c 	add.w	r3, r7, #12
 810b83a:	2101      	movs	r1, #1
 810b83c:	4618      	mov	r0, r3
 810b83e:	f7fe ffe8 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b842:	4604      	mov	r4, r0
 810b844:	f107 0308 	add.w	r3, r7, #8
 810b848:	2101      	movs	r1, #1
 810b84a:	4618      	mov	r0, r3
 810b84c:	f7ff fe5a 	bl	810b504 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810b850:	4603      	mov	r3, r0
 810b852:	f88d 5000 	strb.w	r5, [sp]
 810b856:	697a      	ldr	r2, [r7, #20]
 810b858:	4621      	mov	r1, r4
 810b85a:	68f8      	ldr	r0, [r7, #12]
 810b85c:	f000 fa99 	bl	810bd92 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 810b860:	f107 030c 	add.w	r3, r7, #12
 810b864:	2101      	movs	r1, #1
 810b866:	4618      	mov	r0, r3
 810b868:	f7fe ffd3 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b86c:	4633      	mov	r3, r6
 810b86e:	68fa      	ldr	r2, [r7, #12]
 810b870:	68b9      	ldr	r1, [r7, #8]
 810b872:	f000 fae3 	bl	810be3c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 810b876:	4603      	mov	r3, r0
    }
 810b878:	4618      	mov	r0, r3
 810b87a:	371c      	adds	r7, #28
 810b87c:	46bd      	mov	sp, r7
 810b87e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810b880 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 810b880:	b5f0      	push	{r4, r5, r6, r7, lr}
 810b882:	b087      	sub	sp, #28
 810b884:	af00      	add	r7, sp, #0
 810b886:	60f8      	str	r0, [r7, #12]
 810b888:	60b9      	str	r1, [r7, #8]
 810b88a:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 810b88c:	f107 0208 	add.w	r2, r7, #8
 810b890:	f107 030c 	add.w	r3, r7, #12
 810b894:	4611      	mov	r1, r2
 810b896:	4618      	mov	r0, r3
 810b898:	f7ff f8f8 	bl	810aa8c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810b89c:	4603      	mov	r3, r0
 810b89e:	2b00      	cmp	r3, #0
 810b8a0:	d153      	bne.n	810b94a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 810b8a2:	f107 030c 	add.w	r3, r7, #12
 810b8a6:	2101      	movs	r1, #1
 810b8a8:	4618      	mov	r0, r3
 810b8aa:	f7fe ffb2 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b8ae:	4603      	mov	r3, r0
 810b8b0:	617b      	str	r3, [r7, #20]
 810b8b2:	e03b      	b.n	810b92c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 810b8b4:	1d3b      	adds	r3, r7, #4
 810b8b6:	68fa      	ldr	r2, [r7, #12]
 810b8b8:	6979      	ldr	r1, [r7, #20]
 810b8ba:	4618      	mov	r0, r3
 810b8bc:	f000 fb11 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810b8c0:	4603      	mov	r3, r0
 810b8c2:	2b00      	cmp	r3, #0
 810b8c4:	d026      	beq.n	810b914 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 810b8c6:	f107 0314 	add.w	r3, r7, #20
 810b8ca:	4618      	mov	r0, r3
 810b8cc:	f7ff fdf6 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b8d0:	4603      	mov	r3, r0
 810b8d2:	4618      	mov	r0, r3
 810b8d4:	f7ff f942 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b8d8:	4603      	mov	r3, r0
 810b8da:	681b      	ldr	r3, [r3, #0]
 810b8dc:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 810b8de:	f107 0314 	add.w	r3, r7, #20
 810b8e2:	2101      	movs	r1, #1
 810b8e4:	4618      	mov	r0, r3
 810b8e6:	f7fe ff94 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810b8ea:	4603      	mov	r3, r0
 810b8ec:	461a      	mov	r2, r3
 810b8ee:	6979      	ldr	r1, [r7, #20]
 810b8f0:	68f8      	ldr	r0, [r7, #12]
 810b8f2:	f7ff fe66 	bl	810b5c2 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 810b8f6:	f107 0310 	add.w	r3, r7, #16
 810b8fa:	4618      	mov	r0, r3
 810b8fc:	f7ff f92e 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810b900:	4603      	mov	r3, r0
 810b902:	681c      	ldr	r4, [r3, #0]
 810b904:	f107 030c 	add.w	r3, r7, #12
 810b908:	4618      	mov	r0, r3
 810b90a:	f7ff fdd7 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810b90e:	4603      	mov	r3, r0
 810b910:	601c      	str	r4, [r3, #0]
 810b912:	e006      	b.n	810b922 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810b914:	4630      	mov	r0, r6
 810b916:	f7fe fc34 	bl	810a182 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 810b91a:	4629      	mov	r1, r5
 810b91c:	6978      	ldr	r0, [r7, #20]
 810b91e:	f000 fb05 	bl	810bf2c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 810b922:	f107 0314 	add.w	r3, r7, #20
 810b926:	4618      	mov	r0, r3
 810b928:	f7ff fe1c 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810b92c:	f107 0208 	add.w	r2, r7, #8
 810b930:	f107 0314 	add.w	r3, r7, #20
 810b934:	4611      	mov	r1, r2
 810b936:	4618      	mov	r0, r3
 810b938:	f7ff f8a8 	bl	810aa8c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810b93c:	4603      	mov	r3, r0
 810b93e:	f083 0301 	eor.w	r3, r3, #1
 810b942:	b2db      	uxtb	r3, r3
 810b944:	2b00      	cmp	r3, #0
 810b946:	d1b5      	bne.n	810b8b4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 810b948:	e000      	b.n	810b94c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 810b94a:	bf00      	nop
    }
 810b94c:	371c      	adds	r7, #28
 810b94e:	46bd      	mov	sp, r7
 810b950:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810b952 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 810b952:	b5b0      	push	{r4, r5, r7, lr}
 810b954:	b086      	sub	sp, #24
 810b956:	af00      	add	r7, sp, #0
 810b958:	60f8      	str	r0, [r7, #12]
 810b95a:	60b9      	str	r1, [r7, #8]
 810b95c:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 810b95e:	68fb      	ldr	r3, [r7, #12]
 810b960:	617b      	str	r3, [r7, #20]
 810b962:	e00b      	b.n	810b97c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810b964:	4628      	mov	r0, r5
 810b966:	f7fe fc0c 	bl	810a182 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 810b96a:	4621      	mov	r1, r4
 810b96c:	6978      	ldr	r0, [r7, #20]
 810b96e:	f000 fadd 	bl	810bf2c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 810b972:	f107 0314 	add.w	r3, r7, #20
 810b976:	4618      	mov	r0, r3
 810b978:	f7ff fdf4 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810b97c:	f107 0208 	add.w	r2, r7, #8
 810b980:	f107 0314 	add.w	r3, r7, #20
 810b984:	4611      	mov	r1, r2
 810b986:	4618      	mov	r0, r3
 810b988:	f7ff f880 	bl	810aa8c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810b98c:	4603      	mov	r3, r0
 810b98e:	f083 0301 	eor.w	r3, r3, #1
 810b992:	b2db      	uxtb	r3, r3
 810b994:	2b00      	cmp	r3, #0
 810b996:	d1e5      	bne.n	810b964 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 810b998:	bf00      	nop
 810b99a:	bf00      	nop
 810b99c:	3718      	adds	r7, #24
 810b99e:	46bd      	mov	sp, r7
 810b9a0:	bdb0      	pop	{r4, r5, r7, pc}

0810b9a2 <_ZSt12construct_atIfJfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810b9a2:	b590      	push	{r4, r7, lr}
 810b9a4:	b083      	sub	sp, #12
 810b9a6:	af00      	add	r7, sp, #0
 810b9a8:	6078      	str	r0, [r7, #4]
 810b9aa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810b9ac:	687b      	ldr	r3, [r7, #4]
 810b9ae:	4619      	mov	r1, r3
 810b9b0:	2004      	movs	r0, #4
 810b9b2:	f7f5 fc61 	bl	8101278 <_ZnwjPv>
 810b9b6:	4604      	mov	r4, r0
 810b9b8:	6838      	ldr	r0, [r7, #0]
 810b9ba:	f7ff fc5d 	bl	810b278 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810b9be:	4603      	mov	r3, r0
 810b9c0:	681b      	ldr	r3, [r3, #0]
 810b9c2:	6023      	str	r3, [r4, #0]
 810b9c4:	4623      	mov	r3, r4
 810b9c6:	4618      	mov	r0, r3
 810b9c8:	370c      	adds	r7, #12
 810b9ca:	46bd      	mov	sp, r7
 810b9cc:	bd90      	pop	{r4, r7, pc}

0810b9ce <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 810b9ce:	b580      	push	{r7, lr}
 810b9d0:	b082      	sub	sp, #8
 810b9d2:	af00      	add	r7, sp, #0
 810b9d4:	6078      	str	r0, [r7, #4]
 810b9d6:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 810b9d8:	6838      	ldr	r0, [r7, #0]
 810b9da:	f000 faf2 	bl	810bfc2 <_ZSt10destroy_atIfEvPT_>
	}
 810b9de:	bf00      	nop
 810b9e0:	3708      	adds	r7, #8
 810b9e2:	46bd      	mov	sp, r7
 810b9e4:	bd80      	pop	{r7, pc}

0810b9e6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 810b9e6:	b480      	push	{r7}
 810b9e8:	b083      	sub	sp, #12
 810b9ea:	af00      	add	r7, sp, #0
 810b9ec:	6078      	str	r0, [r7, #4]
    { return __it; }
 810b9ee:	687b      	ldr	r3, [r7, #4]
 810b9f0:	4618      	mov	r0, r3
 810b9f2:	370c      	adds	r7, #12
 810b9f4:	46bd      	mov	sp, r7
 810b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9fa:	4770      	bx	lr

0810b9fc <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810b9fc:	b5b0      	push	{r4, r5, r7, lr}
 810b9fe:	b084      	sub	sp, #16
 810ba00:	af00      	add	r7, sp, #0
 810ba02:	60f8      	str	r0, [r7, #12]
 810ba04:	60b9      	str	r1, [r7, #8]
 810ba06:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810ba08:	68f8      	ldr	r0, [r7, #12]
 810ba0a:	f000 fae4 	bl	810bfd6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810ba0e:	4604      	mov	r4, r0
 810ba10:	68b8      	ldr	r0, [r7, #8]
 810ba12:	f000 fae0 	bl	810bfd6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810ba16:	4605      	mov	r5, r0
 810ba18:	6878      	ldr	r0, [r7, #4]
 810ba1a:	f000 fadc 	bl	810bfd6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810ba1e:	4603      	mov	r3, r0
 810ba20:	461a      	mov	r2, r3
 810ba22:	4629      	mov	r1, r5
 810ba24:	4620      	mov	r0, r4
 810ba26:	f000 fae4 	bl	810bff2 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 810ba2a:	4603      	mov	r3, r0
 810ba2c:	4619      	mov	r1, r3
 810ba2e:	6878      	ldr	r0, [r7, #4]
 810ba30:	f000 faef 	bl	810c012 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 810ba34:	4603      	mov	r3, r0
    }
 810ba36:	4618      	mov	r0, r3
 810ba38:	3710      	adds	r7, #16
 810ba3a:	46bd      	mov	sp, r7
 810ba3c:	bdb0      	pop	{r4, r5, r7, pc}

0810ba3e <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 810ba3e:	b580      	push	{r7, lr}
 810ba40:	b084      	sub	sp, #16
 810ba42:	af00      	add	r7, sp, #0
 810ba44:	6078      	str	r0, [r7, #4]
 810ba46:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810ba48:	6878      	ldr	r0, [r7, #4]
 810ba4a:	f7ff f887 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ba4e:	4603      	mov	r3, r0
 810ba50:	681b      	ldr	r3, [r3, #0]
 810ba52:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810ba54:	6838      	ldr	r0, [r7, #0]
 810ba56:	f7ff f881 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ba5a:	4603      	mov	r3, r0
 810ba5c:	681a      	ldr	r2, [r3, #0]
 810ba5e:	687b      	ldr	r3, [r7, #4]
 810ba60:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810ba62:	f107 030c 	add.w	r3, r7, #12
 810ba66:	4618      	mov	r0, r3
 810ba68:	f7ff f878 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810ba6c:	4603      	mov	r3, r0
 810ba6e:	681a      	ldr	r2, [r3, #0]
 810ba70:	683b      	ldr	r3, [r7, #0]
 810ba72:	601a      	str	r2, [r3, #0]
    }
 810ba74:	bf00      	nop
 810ba76:	3710      	adds	r7, #16
 810ba78:	46bd      	mov	sp, r7
 810ba7a:	bd80      	pop	{r7, pc}

0810ba7c <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810ba7c:	b480      	push	{r7}
 810ba7e:	b083      	sub	sp, #12
 810ba80:	af00      	add	r7, sp, #0
 810ba82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810ba84:	687b      	ldr	r3, [r7, #4]
 810ba86:	4618      	mov	r0, r3
 810ba88:	370c      	adds	r7, #12
 810ba8a:	46bd      	mov	sp, r7
 810ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba90:	4770      	bx	lr

0810ba92 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 810ba92:	b5b0      	push	{r4, r5, r7, lr}
 810ba94:	b084      	sub	sp, #16
 810ba96:	af00      	add	r7, sp, #0
 810ba98:	60f8      	str	r0, [r7, #12]
 810ba9a:	60b9      	str	r1, [r7, #8]
 810ba9c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810ba9e:	68f8      	ldr	r0, [r7, #12]
 810baa0:	f000 fa99 	bl	810bfd6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810baa4:	4604      	mov	r4, r0
 810baa6:	68b8      	ldr	r0, [r7, #8]
 810baa8:	f000 fa95 	bl	810bfd6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810baac:	4605      	mov	r5, r0
 810baae:	6878      	ldr	r0, [r7, #4]
 810bab0:	f000 fa91 	bl	810bfd6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810bab4:	4603      	mov	r3, r0
 810bab6:	461a      	mov	r2, r3
 810bab8:	4629      	mov	r1, r5
 810baba:	4620      	mov	r0, r4
 810babc:	f000 fac0 	bl	810c040 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 810bac0:	4603      	mov	r3, r0
 810bac2:	4619      	mov	r1, r3
 810bac4:	6878      	ldr	r0, [r7, #4]
 810bac6:	f000 faa4 	bl	810c012 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 810baca:	4603      	mov	r3, r0
    }
 810bacc:	4618      	mov	r0, r3
 810bace:	3710      	adds	r7, #16
 810bad0:	46bd      	mov	sp, r7
 810bad2:	bdb0      	pop	{r4, r5, r7, pc}

0810bad4 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 810bad4:	b580      	push	{r7, lr}
 810bad6:	b082      	sub	sp, #8
 810bad8:	af00      	add	r7, sp, #0
 810bada:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 810badc:	6878      	ldr	r0, [r7, #4]
 810bade:	f000 fa70 	bl	810bfc2 <_ZSt10destroy_atIfEvPT_>
    }
 810bae2:	bf00      	nop
 810bae4:	3708      	adds	r7, #8
 810bae6:	46bd      	mov	sp, r7
 810bae8:	bd80      	pop	{r7, pc}

0810baea <_ZNSt15__new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 810baea:	b580      	push	{r7, lr}
 810baec:	b084      	sub	sp, #16
 810baee:	af00      	add	r7, sp, #0
 810baf0:	60f8      	str	r0, [r7, #12]
 810baf2:	60b9      	str	r1, [r7, #8]
 810baf4:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 810baf6:	687b      	ldr	r3, [r7, #4]
 810baf8:	009b      	lsls	r3, r3, #2
 810bafa:	4619      	mov	r1, r3
 810bafc:	68b8      	ldr	r0, [r7, #8]
 810bafe:	f017 fd3b 	bl	8123578 <_ZdlPvj>
      }
 810bb02:	3710      	adds	r7, #16
 810bb04:	46bd      	mov	sp, r7
 810bb06:	bd80      	pop	{r7, pc}

0810bb08 <_ZNSt15__new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810bb08:	b580      	push	{r7, lr}
 810bb0a:	b084      	sub	sp, #16
 810bb0c:	af00      	add	r7, sp, #0
 810bb0e:	60f8      	str	r0, [r7, #12]
 810bb10:	60b9      	str	r1, [r7, #8]
 810bb12:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810bb14:	68f8      	ldr	r0, [r7, #12]
 810bb16:	f000 faa3 	bl	810c060 <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 810bb1a:	4602      	mov	r2, r0
 810bb1c:	68bb      	ldr	r3, [r7, #8]
 810bb1e:	4293      	cmp	r3, r2
 810bb20:	bf8c      	ite	hi
 810bb22:	2301      	movhi	r3, #1
 810bb24:	2300      	movls	r3, #0
 810bb26:	b2db      	uxtb	r3, r3
 810bb28:	2b00      	cmp	r3, #0
 810bb2a:	bf14      	ite	ne
 810bb2c:	2301      	movne	r3, #1
 810bb2e:	2300      	moveq	r3, #0
 810bb30:	b2db      	uxtb	r3, r3
 810bb32:	2b00      	cmp	r3, #0
 810bb34:	d007      	beq.n	810bb46 <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810bb36:	68bb      	ldr	r3, [r7, #8]
 810bb38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bb3c:	d301      	bcc.n	810bb42 <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 810bb3e:	f017 fdfd 	bl	812373c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810bb42:	f017 fdf8 	bl	8123736 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810bb46:	68bb      	ldr	r3, [r7, #8]
 810bb48:	009b      	lsls	r3, r3, #2
 810bb4a:	4618      	mov	r0, r3
 810bb4c:	f017 fd25 	bl	812359a <_Znwj>
 810bb50:	4603      	mov	r3, r0
 810bb52:	bf00      	nop
      }
 810bb54:	4618      	mov	r0, r3
 810bb56:	3710      	adds	r7, #16
 810bb58:	46bd      	mov	sp, r7
 810bb5a:	bd80      	pop	{r7, pc}

0810bb5c <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 810bb5c:	b590      	push	{r4, r7, lr}
 810bb5e:	b087      	sub	sp, #28
 810bb60:	af00      	add	r7, sp, #0
 810bb62:	60f8      	str	r0, [r7, #12]
 810bb64:	60b9      	str	r1, [r7, #8]
 810bb66:	607a      	str	r2, [r7, #4]
 810bb68:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 810bb6a:	687b      	ldr	r3, [r7, #4]
 810bb6c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 810bb6e:	e01a      	b.n	810bba6 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 810bb70:	f107 0314 	add.w	r3, r7, #20
 810bb74:	4618      	mov	r0, r3
 810bb76:	f000 fa8f 	bl	810c098 <_ZNK9__gnu_cxx17__normal_iteratorIPfvEdeEv>
 810bb7a:	4603      	mov	r3, r0
 810bb7c:	4618      	mov	r0, r3
 810bb7e:	f7ff fddf 	bl	810b740 <_ZSt11__addressofIfEPT_RS0_>
 810bb82:	4604      	mov	r4, r0
 810bb84:	68f8      	ldr	r0, [r7, #12]
 810bb86:	f7ff fddb 	bl	810b740 <_ZSt11__addressofIfEPT_RS0_>
 810bb8a:	4603      	mov	r3, r0
 810bb8c:	683a      	ldr	r2, [r7, #0]
 810bb8e:	4619      	mov	r1, r3
 810bb90:	4620      	mov	r0, r4
 810bb92:	f000 fa8d 	bl	810c0b0 <_ZSt19__relocate_object_aIffSaIfEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 810bb96:	68fb      	ldr	r3, [r7, #12]
 810bb98:	3304      	adds	r3, #4
 810bb9a:	60fb      	str	r3, [r7, #12]
 810bb9c:	f107 0314 	add.w	r3, r7, #20
 810bba0:	4618      	mov	r0, r3
 810bba2:	f000 fa69 	bl	810c078 <_ZN9__gnu_cxx17__normal_iteratorIPfvEppEv>
 810bba6:	68fa      	ldr	r2, [r7, #12]
 810bba8:	68bb      	ldr	r3, [r7, #8]
 810bbaa:	429a      	cmp	r2, r3
 810bbac:	d1e0      	bne.n	810bb70 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_+0x14>
      return __cur;
 810bbae:	697b      	ldr	r3, [r7, #20]
    }
 810bbb0:	4618      	mov	r0, r3
 810bbb2:	371c      	adds	r7, #28
 810bbb4:	46bd      	mov	sp, r7
 810bbb6:	bd90      	pop	{r4, r7, pc}

0810bbb8 <_ZNK9__gnu_cxx17__normal_iteratorIPfvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810bbb8:	b480      	push	{r7}
 810bbba:	b083      	sub	sp, #12
 810bbbc:	af00      	add	r7, sp, #0
 810bbbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810bbc0:	687b      	ldr	r3, [r7, #4]
 810bbc2:	4618      	mov	r0, r3
 810bbc4:	370c      	adds	r7, #12
 810bbc6:	46bd      	mov	sp, r7
 810bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbcc:	4770      	bx	lr

0810bbce <_ZNSt15__new_allocatorIfEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 810bbce:	b480      	push	{r7}
 810bbd0:	b083      	sub	sp, #12
 810bbd2:	af00      	add	r7, sp, #0
 810bbd4:	6078      	str	r0, [r7, #4]
 810bbd6:	6039      	str	r1, [r7, #0]
 810bbd8:	687b      	ldr	r3, [r7, #4]
 810bbda:	4618      	mov	r0, r3
 810bbdc:	370c      	adds	r7, #12
 810bbde:	46bd      	mov	sp, r7
 810bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbe4:	4770      	bx	lr

0810bbe6 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810bbe6:	b480      	push	{r7}
 810bbe8:	b083      	sub	sp, #12
 810bbea:	af00      	add	r7, sp, #0
 810bbec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810bbee:	687b      	ldr	r3, [r7, #4]
 810bbf0:	4618      	mov	r0, r3
 810bbf2:	370c      	adds	r7, #12
 810bbf4:	46bd      	mov	sp, r7
 810bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbfa:	4770      	bx	lr

0810bbfc <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 810bbfc:	b590      	push	{r4, r7, lr}
 810bbfe:	b083      	sub	sp, #12
 810bc00:	af00      	add	r7, sp, #0
 810bc02:	6078      	str	r0, [r7, #4]
 810bc04:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 810bc06:	687b      	ldr	r3, [r7, #4]
 810bc08:	4619      	mov	r1, r3
 810bc0a:	2004      	movs	r0, #4
 810bc0c:	f7f5 fb34 	bl	8101278 <_ZnwjPv>
 810bc10:	4604      	mov	r4, r0
 810bc12:	6838      	ldr	r0, [r7, #0]
 810bc14:	f7ff ffe7 	bl	810bbe6 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 810bc18:	4603      	mov	r3, r0
 810bc1a:	681b      	ldr	r3, [r3, #0]
 810bc1c:	6023      	str	r3, [r4, #0]
 810bc1e:	4623      	mov	r3, r4
 810bc20:	4618      	mov	r0, r3
 810bc22:	370c      	adds	r7, #12
 810bc24:	46bd      	mov	sp, r7
 810bc26:	bd90      	pop	{r4, r7, pc}

0810bc28 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 810bc28:	b590      	push	{r4, r7, lr}
 810bc2a:	b085      	sub	sp, #20
 810bc2c:	af00      	add	r7, sp, #0
 810bc2e:	60f8      	str	r0, [r7, #12]
 810bc30:	60b9      	str	r1, [r7, #8]
 810bc32:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 810bc34:	68f8      	ldr	r0, [r7, #12]
 810bc36:	f000 fa56 	bl	810c0e6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810bc3a:	4604      	mov	r4, r0
 810bc3c:	68b8      	ldr	r0, [r7, #8]
 810bc3e:	f000 fa52 	bl	810c0e6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810bc42:	4603      	mov	r3, r0
 810bc44:	687a      	ldr	r2, [r7, #4]
 810bc46:	4619      	mov	r1, r3
 810bc48:	4620      	mov	r0, r4
 810bc4a:	f000 fa57 	bl	810c0fc <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 810bc4e:	4603      	mov	r3, r0
    }
 810bc50:	4618      	mov	r0, r3
 810bc52:	3714      	adds	r7, #20
 810bc54:	46bd      	mov	sp, r7
 810bc56:	bd90      	pop	{r4, r7, pc}

0810bc58 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	}

      template<typename _Tp, typename _Up>
	[[nodiscard]]
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 810bc58:	b480      	push	{r7}
 810bc5a:	b085      	sub	sp, #20
 810bc5c:	af00      	add	r7, sp, #0
 810bc5e:	60f8      	str	r0, [r7, #12]
 810bc60:	60b9      	str	r1, [r7, #8]
 810bc62:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 810bc64:	68bb      	ldr	r3, [r7, #8]
 810bc66:	681a      	ldr	r2, [r3, #0]
 810bc68:	687b      	ldr	r3, [r7, #4]
 810bc6a:	681b      	ldr	r3, [r3, #0]
 810bc6c:	429a      	cmp	r2, r3
 810bc6e:	d009      	beq.n	810bc84 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 810bc70:	68bb      	ldr	r3, [r7, #8]
 810bc72:	681a      	ldr	r2, [r3, #0]
 810bc74:	687b      	ldr	r3, [r7, #4]
 810bc76:	681b      	ldr	r3, [r3, #0]
 810bc78:	429a      	cmp	r2, r3
 810bc7a:	d201      	bcs.n	810bc80 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 810bc7c:	23ff      	movs	r3, #255	@ 0xff
 810bc7e:	e002      	b.n	810bc86 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 810bc80:	2301      	movs	r3, #1
 810bc82:	e000      	b.n	810bc86 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 810bc84:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 810bc86:	4618      	mov	r0, r3
 810bc88:	3714      	adds	r7, #20
 810bc8a:	46bd      	mov	sp, r7
 810bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc90:	4770      	bx	lr
	...

0810bc94 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 810bc94:	b590      	push	{r4, r7, lr}
 810bc96:	b083      	sub	sp, #12
 810bc98:	af00      	add	r7, sp, #0
 810bc9a:	6078      	str	r0, [r7, #4]
 810bc9c:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 810bc9e:	6878      	ldr	r0, [r7, #4]
 810bca0:	f7fe ff0c 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810bca4:	4604      	mov	r4, r0
 810bca6:	6838      	ldr	r0, [r7, #0]
 810bca8:	f7fe ff08 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810bcac:	4603      	mov	r3, r0
 810bcae:	461a      	mov	r2, r3
 810bcb0:	4621      	mov	r1, r4
 810bcb2:	4804      	ldr	r0, [pc, #16]	@ (810bcc4 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 810bcb4:	f7ff ffd0 	bl	810bc58 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 810bcb8:	4603      	mov	r3, r0
 810bcba:	4618      	mov	r0, r3
 810bcbc:	370c      	adds	r7, #12
 810bcbe:	46bd      	mov	sp, r7
 810bcc0:	bd90      	pop	{r4, r7, pc}
 810bcc2:	bf00      	nop
 810bcc4:	0812859c 	.word	0x0812859c

0810bcc8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 810bcc8:	b590      	push	{r4, r7, lr}
 810bcca:	b087      	sub	sp, #28
 810bccc:	af00      	add	r7, sp, #0
 810bcce:	60f8      	str	r0, [r7, #12]
 810bcd0:	60b9      	str	r1, [r7, #8]
 810bcd2:	607a      	str	r2, [r7, #4]
 810bcd4:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 810bcd6:	463b      	mov	r3, r7
 810bcd8:	461a      	mov	r2, r3
 810bcda:	68b9      	ldr	r1, [r7, #8]
 810bcdc:	68f8      	ldr	r0, [r7, #12]
 810bcde:	f000 fa30 	bl	810c142 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 810bce2:	68bb      	ldr	r3, [r7, #8]
 810bce4:	613b      	str	r3, [r7, #16]
 810bce6:	e013      	b.n	810bd10 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 810bce8:	463b      	mov	r3, r7
 810bcea:	68fa      	ldr	r2, [r7, #12]
 810bcec:	6939      	ldr	r1, [r7, #16]
 810bcee:	4618      	mov	r0, r3
 810bcf0:	f000 f8f7 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810bcf4:	4603      	mov	r3, r0
 810bcf6:	2b00      	cmp	r3, #0
 810bcf8:	d005      	beq.n	810bd06 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 810bcfa:	463b      	mov	r3, r7
 810bcfc:	693a      	ldr	r2, [r7, #16]
 810bcfe:	68b9      	ldr	r1, [r7, #8]
 810bd00:	68f8      	ldr	r0, [r7, #12]
 810bd02:	f000 fa74 	bl	810c1ee <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 810bd06:	f107 0310 	add.w	r3, r7, #16
 810bd0a:	4618      	mov	r0, r3
 810bd0c:	f7ff fc2a 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810bd10:	1d3a      	adds	r2, r7, #4
 810bd12:	f107 0310 	add.w	r3, r7, #16
 810bd16:	4611      	mov	r1, r2
 810bd18:	4618      	mov	r0, r3
 810bd1a:	f7ff ffbb 	bl	810bc94 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 810bd1e:	4604      	mov	r4, r0
 810bd20:	f107 0314 	add.w	r3, r7, #20
 810bd24:	2100      	movs	r1, #0
 810bd26:	4618      	mov	r0, r3
 810bd28:	f7fe fa07 	bl	810a13a <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 810bd2c:	7d39      	ldrb	r1, [r7, #20]
 810bd2e:	4620      	mov	r0, r4
 810bd30:	f7fe fa0f 	bl	810a152 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 810bd34:	4603      	mov	r3, r0
 810bd36:	2b00      	cmp	r3, #0
 810bd38:	d1d6      	bne.n	810bce8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 810bd3a:	bf00      	nop
 810bd3c:	bf00      	nop
 810bd3e:	371c      	adds	r7, #28
 810bd40:	46bd      	mov	sp, r7
 810bd42:	bd90      	pop	{r4, r7, pc}

0810bd44 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810bd44:	b580      	push	{r7, lr}
 810bd46:	b084      	sub	sp, #16
 810bd48:	af00      	add	r7, sp, #0
 810bd4a:	60f8      	str	r0, [r7, #12]
 810bd4c:	60b9      	str	r1, [r7, #8]
 810bd4e:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 810bd50:	e00a      	b.n	810bd68 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 810bd52:	f107 0308 	add.w	r3, r7, #8
 810bd56:	4618      	mov	r0, r3
 810bd58:	f7ff fc4b 	bl	810b5f2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 810bd5c:	687b      	ldr	r3, [r7, #4]
 810bd5e:	68ba      	ldr	r2, [r7, #8]
 810bd60:	68b9      	ldr	r1, [r7, #8]
 810bd62:	68f8      	ldr	r0, [r7, #12]
 810bd64:	f000 fa43 	bl	810c1ee <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 810bd68:	f107 020c 	add.w	r2, r7, #12
 810bd6c:	f107 0308 	add.w	r3, r7, #8
 810bd70:	4611      	mov	r1, r2
 810bd72:	4618      	mov	r0, r3
 810bd74:	f7fe fead 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810bd78:	4603      	mov	r3, r0
 810bd7a:	2b01      	cmp	r3, #1
 810bd7c:	bfcc      	ite	gt
 810bd7e:	2301      	movgt	r3, #1
 810bd80:	2300      	movle	r3, #0
 810bd82:	b2db      	uxtb	r3, r3
 810bd84:	2b00      	cmp	r3, #0
 810bd86:	d1e4      	bne.n	810bd52 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 810bd88:	bf00      	nop
 810bd8a:	bf00      	nop
 810bd8c:	3710      	adds	r7, #16
 810bd8e:	46bd      	mov	sp, r7
 810bd90:	bd80      	pop	{r7, pc}

0810bd92 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 810bd92:	b580      	push	{r7, lr}
 810bd94:	b084      	sub	sp, #16
 810bd96:	af00      	add	r7, sp, #0
 810bd98:	60f8      	str	r0, [r7, #12]
 810bd9a:	60b9      	str	r1, [r7, #8]
 810bd9c:	607a      	str	r2, [r7, #4]
 810bd9e:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 810bda0:	687a      	ldr	r2, [r7, #4]
 810bda2:	68b9      	ldr	r1, [r7, #8]
 810bda4:	f107 0018 	add.w	r0, r7, #24
 810bda8:	f000 f89b 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810bdac:	4603      	mov	r3, r0
 810bdae:	2b00      	cmp	r3, #0
 810bdb0:	d020      	beq.n	810bdf4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 810bdb2:	683a      	ldr	r2, [r7, #0]
 810bdb4:	6879      	ldr	r1, [r7, #4]
 810bdb6:	f107 0018 	add.w	r0, r7, #24
 810bdba:	f000 f892 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810bdbe:	4603      	mov	r3, r0
 810bdc0:	2b00      	cmp	r3, #0
 810bdc2:	d004      	beq.n	810bdce <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 810bdc4:	6879      	ldr	r1, [r7, #4]
 810bdc6:	68f8      	ldr	r0, [r7, #12]
 810bdc8:	f7ff fbb5 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810bdcc:	e032      	b.n	810be34 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 810bdce:	683a      	ldr	r2, [r7, #0]
 810bdd0:	68b9      	ldr	r1, [r7, #8]
 810bdd2:	f107 0018 	add.w	r0, r7, #24
 810bdd6:	f000 f884 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810bdda:	4603      	mov	r3, r0
 810bddc:	2b00      	cmp	r3, #0
 810bdde:	d004      	beq.n	810bdea <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 810bde0:	6839      	ldr	r1, [r7, #0]
 810bde2:	68f8      	ldr	r0, [r7, #12]
 810bde4:	f7ff fba7 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810bde8:	e024      	b.n	810be34 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 810bdea:	68b9      	ldr	r1, [r7, #8]
 810bdec:	68f8      	ldr	r0, [r7, #12]
 810bdee:	f7ff fba2 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810bdf2:	e01f      	b.n	810be34 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 810bdf4:	683a      	ldr	r2, [r7, #0]
 810bdf6:	68b9      	ldr	r1, [r7, #8]
 810bdf8:	f107 0018 	add.w	r0, r7, #24
 810bdfc:	f000 f871 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810be00:	4603      	mov	r3, r0
 810be02:	2b00      	cmp	r3, #0
 810be04:	d004      	beq.n	810be10 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 810be06:	68b9      	ldr	r1, [r7, #8]
 810be08:	68f8      	ldr	r0, [r7, #12]
 810be0a:	f7ff fb94 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810be0e:	e011      	b.n	810be34 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 810be10:	683a      	ldr	r2, [r7, #0]
 810be12:	6879      	ldr	r1, [r7, #4]
 810be14:	f107 0018 	add.w	r0, r7, #24
 810be18:	f000 f863 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810be1c:	4603      	mov	r3, r0
 810be1e:	2b00      	cmp	r3, #0
 810be20:	d004      	beq.n	810be2c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 810be22:	6839      	ldr	r1, [r7, #0]
 810be24:	68f8      	ldr	r0, [r7, #12]
 810be26:	f7ff fb86 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810be2a:	e003      	b.n	810be34 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 810be2c:	6879      	ldr	r1, [r7, #4]
 810be2e:	68f8      	ldr	r0, [r7, #12]
 810be30:	f7ff fb81 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810be34:	bf00      	nop
 810be36:	3710      	adds	r7, #16
 810be38:	46bd      	mov	sp, r7
 810be3a:	bd80      	pop	{r7, pc}

0810be3c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 810be3c:	b590      	push	{r4, r7, lr}
 810be3e:	b087      	sub	sp, #28
 810be40:	af00      	add	r7, sp, #0
 810be42:	60f8      	str	r0, [r7, #12]
 810be44:	60b9      	str	r1, [r7, #8]
 810be46:	607a      	str	r2, [r7, #4]
 810be48:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 810be4a:	e004      	b.n	810be56 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 810be4c:	f107 030c 	add.w	r3, r7, #12
 810be50:	4618      	mov	r0, r3
 810be52:	f7ff fb87 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 810be56:	463b      	mov	r3, r7
 810be58:	687a      	ldr	r2, [r7, #4]
 810be5a:	68f9      	ldr	r1, [r7, #12]
 810be5c:	4618      	mov	r0, r3
 810be5e:	f000 f840 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810be62:	4603      	mov	r3, r0
 810be64:	2b00      	cmp	r3, #0
 810be66:	d1f1      	bne.n	810be4c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 810be68:	f107 0308 	add.w	r3, r7, #8
 810be6c:	4618      	mov	r0, r3
 810be6e:	f7ff fbc0 	bl	810b5f2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810be72:	e004      	b.n	810be7e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 810be74:	f107 0308 	add.w	r3, r7, #8
 810be78:	4618      	mov	r0, r3
 810be7a:	f7ff fbba 	bl	810b5f2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810be7e:	463b      	mov	r3, r7
 810be80:	68ba      	ldr	r2, [r7, #8]
 810be82:	6879      	ldr	r1, [r7, #4]
 810be84:	4618      	mov	r0, r3
 810be86:	f000 f82c 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810be8a:	4603      	mov	r3, r0
 810be8c:	2b00      	cmp	r3, #0
 810be8e:	d1f1      	bne.n	810be74 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 810be90:	f107 0208 	add.w	r2, r7, #8
 810be94:	f107 030c 	add.w	r3, r7, #12
 810be98:	4611      	mov	r1, r2
 810be9a:	4618      	mov	r0, r3
 810be9c:	f7ff fefa 	bl	810bc94 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 810bea0:	4604      	mov	r4, r0
 810bea2:	f107 0314 	add.w	r3, r7, #20
 810bea6:	2100      	movs	r1, #0
 810bea8:	4618      	mov	r0, r3
 810beaa:	f7fe f946 	bl	810a13a <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 810beae:	7d39      	ldrb	r1, [r7, #20]
 810beb0:	4620      	mov	r0, r4
 810beb2:	f7fe f94e 	bl	810a152 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 810beb6:	4603      	mov	r3, r0
 810beb8:	f083 0301 	eor.w	r3, r3, #1
 810bebc:	b2db      	uxtb	r3, r3
 810bebe:	2b00      	cmp	r3, #0
 810bec0:	d001      	beq.n	810bec6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 810bec2:	68fb      	ldr	r3, [r7, #12]
 810bec4:	e009      	b.n	810beda <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 810bec6:	68b9      	ldr	r1, [r7, #8]
 810bec8:	68f8      	ldr	r0, [r7, #12]
 810beca:	f7ff fb34 	bl	810b536 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 810bece:	f107 030c 	add.w	r3, r7, #12
 810bed2:	4618      	mov	r0, r3
 810bed4:	f7ff fb46 	bl	810b564 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 810bed8:	e7bd      	b.n	810be56 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 810beda:	4618      	mov	r0, r3
 810bedc:	371c      	adds	r7, #28
 810bede:	46bd      	mov	sp, r7
 810bee0:	bd90      	pop	{r4, r7, pc}

0810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 810bee2:	b580      	push	{r7, lr}
 810bee4:	ed2d 8b02 	vpush	{d8}
 810bee8:	b084      	sub	sp, #16
 810beea:	af00      	add	r7, sp, #0
 810beec:	60f8      	str	r0, [r7, #12]
 810beee:	60b9      	str	r1, [r7, #8]
 810bef0:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 810bef2:	f107 0308 	add.w	r3, r7, #8
 810bef6:	4618      	mov	r0, r3
 810bef8:	f7ff fae0 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810befc:	4603      	mov	r3, r0
 810befe:	ed93 8a00 	vldr	s16, [r3]
 810bf02:	1d3b      	adds	r3, r7, #4
 810bf04:	4618      	mov	r0, r3
 810bf06:	f7ff fad9 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bf0a:	4603      	mov	r3, r0
 810bf0c:	edd3 7a00 	vldr	s15, [r3]
 810bf10:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810bf14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bf18:	bf4c      	ite	mi
 810bf1a:	2301      	movmi	r3, #1
 810bf1c:	2300      	movpl	r3, #0
 810bf1e:	b2db      	uxtb	r3, r3
 810bf20:	4618      	mov	r0, r3
 810bf22:	3710      	adds	r7, #16
 810bf24:	46bd      	mov	sp, r7
 810bf26:	ecbd 8b02 	vpop	{d8}
 810bf2a:	bd80      	pop	{r7, pc}

0810bf2c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 810bf2c:	b590      	push	{r4, r7, lr}
 810bf2e:	b085      	sub	sp, #20
 810bf30:	af00      	add	r7, sp, #0
 810bf32:	6078      	str	r0, [r7, #4]
 810bf34:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 810bf36:	1d3b      	adds	r3, r7, #4
 810bf38:	4618      	mov	r0, r3
 810bf3a:	f7ff fabf 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bf3e:	4603      	mov	r3, r0
 810bf40:	4618      	mov	r0, r3
 810bf42:	f7fe fe0b 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810bf46:	4603      	mov	r3, r0
 810bf48:	681b      	ldr	r3, [r3, #0]
 810bf4a:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 810bf4c:	687b      	ldr	r3, [r7, #4]
 810bf4e:	60bb      	str	r3, [r7, #8]
      --__next;
 810bf50:	f107 0308 	add.w	r3, r7, #8
 810bf54:	4618      	mov	r0, r3
 810bf56:	f7ff fb4c 	bl	810b5f2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 810bf5a:	e017      	b.n	810bf8c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 810bf5c:	f107 0308 	add.w	r3, r7, #8
 810bf60:	4618      	mov	r0, r3
 810bf62:	f7ff faab 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bf66:	4603      	mov	r3, r0
 810bf68:	4618      	mov	r0, r3
 810bf6a:	f7fe fdf7 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810bf6e:	4603      	mov	r3, r0
 810bf70:	681c      	ldr	r4, [r3, #0]
 810bf72:	1d3b      	adds	r3, r7, #4
 810bf74:	4618      	mov	r0, r3
 810bf76:	f7ff faa1 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bf7a:	4603      	mov	r3, r0
 810bf7c:	601c      	str	r4, [r3, #0]
	  __last = __next;
 810bf7e:	68bb      	ldr	r3, [r7, #8]
 810bf80:	607b      	str	r3, [r7, #4]
	  --__next;
 810bf82:	f107 0308 	add.w	r3, r7, #8
 810bf86:	4618      	mov	r0, r3
 810bf88:	f7ff fb33 	bl	810b5f2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 810bf8c:	f107 010c 	add.w	r1, r7, #12
 810bf90:	463b      	mov	r3, r7
 810bf92:	68ba      	ldr	r2, [r7, #8]
 810bf94:	4618      	mov	r0, r3
 810bf96:	f000 f96a 	bl	810c26e <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 810bf9a:	4603      	mov	r3, r0
 810bf9c:	2b00      	cmp	r3, #0
 810bf9e:	d1dd      	bne.n	810bf5c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 810bfa0:	f107 030c 	add.w	r3, r7, #12
 810bfa4:	4618      	mov	r0, r3
 810bfa6:	f7fe fdd9 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810bfaa:	4603      	mov	r3, r0
 810bfac:	681c      	ldr	r4, [r3, #0]
 810bfae:	1d3b      	adds	r3, r7, #4
 810bfb0:	4618      	mov	r0, r3
 810bfb2:	f7ff fa83 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810bfb6:	4603      	mov	r3, r0
 810bfb8:	601c      	str	r4, [r3, #0]
    }
 810bfba:	bf00      	nop
 810bfbc:	3714      	adds	r7, #20
 810bfbe:	46bd      	mov	sp, r7
 810bfc0:	bd90      	pop	{r4, r7, pc}

0810bfc2 <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 810bfc2:	b480      	push	{r7}
 810bfc4:	b083      	sub	sp, #12
 810bfc6:	af00      	add	r7, sp, #0
 810bfc8:	6078      	str	r0, [r7, #4]
    }
 810bfca:	bf00      	nop
 810bfcc:	370c      	adds	r7, #12
 810bfce:	46bd      	mov	sp, r7
 810bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfd4:	4770      	bx	lr

0810bfd6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 810bfd6:	b580      	push	{r7, lr}
 810bfd8:	b082      	sub	sp, #8
 810bfda:	af00      	add	r7, sp, #0
 810bfdc:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 810bfde:	1d3b      	adds	r3, r7, #4
 810bfe0:	4618      	mov	r0, r3
 810bfe2:	f7fe fd6b 	bl	810aabc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810bfe6:	4603      	mov	r3, r0
 810bfe8:	681b      	ldr	r3, [r3, #0]
 810bfea:	4618      	mov	r0, r3
 810bfec:	3708      	adds	r7, #8
 810bfee:	46bd      	mov	sp, r7
 810bff0:	bd80      	pop	{r7, pc}

0810bff2 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 810bff2:	b580      	push	{r7, lr}
 810bff4:	b084      	sub	sp, #16
 810bff6:	af00      	add	r7, sp, #0
 810bff8:	60f8      	str	r0, [r7, #12]
 810bffa:	60b9      	str	r1, [r7, #8]
 810bffc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810bffe:	687a      	ldr	r2, [r7, #4]
 810c000:	68b9      	ldr	r1, [r7, #8]
 810c002:	68f8      	ldr	r0, [r7, #12]
 810c004:	f000 f953 	bl	810c2ae <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 810c008:	4603      	mov	r3, r0
 810c00a:	4618      	mov	r0, r3
 810c00c:	3710      	adds	r7, #16
 810c00e:	46bd      	mov	sp, r7
 810c010:	bd80      	pop	{r7, pc}

0810c012 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 810c012:	b580      	push	{r7, lr}
 810c014:	b082      	sub	sp, #8
 810c016:	af00      	add	r7, sp, #0
 810c018:	6078      	str	r0, [r7, #4]
 810c01a:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 810c01c:	6878      	ldr	r0, [r7, #4]
 810c01e:	f7ff ffda 	bl	810bfd6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 810c022:	4602      	mov	r2, r0
 810c024:	683b      	ldr	r3, [r7, #0]
 810c026:	1a9b      	subs	r3, r3, r2
 810c028:	109b      	asrs	r3, r3, #2
 810c02a:	461a      	mov	r2, r3
 810c02c:	1d3b      	adds	r3, r7, #4
 810c02e:	4611      	mov	r1, r2
 810c030:	4618      	mov	r0, r3
 810c032:	f7fe fbee 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c036:	4603      	mov	r3, r0
 810c038:	4618      	mov	r0, r3
 810c03a:	3708      	adds	r7, #8
 810c03c:	46bd      	mov	sp, r7
 810c03e:	bd80      	pop	{r7, pc}

0810c040 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 810c040:	b580      	push	{r7, lr}
 810c042:	b084      	sub	sp, #16
 810c044:	af00      	add	r7, sp, #0
 810c046:	60f8      	str	r0, [r7, #12]
 810c048:	60b9      	str	r1, [r7, #8]
 810c04a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 810c04c:	687a      	ldr	r2, [r7, #4]
 810c04e:	68b9      	ldr	r1, [r7, #8]
 810c050:	68f8      	ldr	r0, [r7, #12]
 810c052:	f000 f949 	bl	810c2e8 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 810c056:	4603      	mov	r3, r0
 810c058:	4618      	mov	r0, r3
 810c05a:	3710      	adds	r7, #16
 810c05c:	46bd      	mov	sp, r7
 810c05e:	bd80      	pop	{r7, pc}

0810c060 <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 810c060:	b480      	push	{r7}
 810c062:	b083      	sub	sp, #12
 810c064:	af00      	add	r7, sp, #0
 810c066:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 810c068:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 810c06c:	4618      	mov	r0, r3
 810c06e:	370c      	adds	r7, #12
 810c070:	46bd      	mov	sp, r7
 810c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c076:	4770      	bx	lr

0810c078 <_ZN9__gnu_cxx17__normal_iteratorIPfvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810c078:	b480      	push	{r7}
 810c07a:	b083      	sub	sp, #12
 810c07c:	af00      	add	r7, sp, #0
 810c07e:	6078      	str	r0, [r7, #4]
	++_M_current;
 810c080:	687b      	ldr	r3, [r7, #4]
 810c082:	681b      	ldr	r3, [r3, #0]
 810c084:	1d1a      	adds	r2, r3, #4
 810c086:	687b      	ldr	r3, [r7, #4]
 810c088:	601a      	str	r2, [r3, #0]
	return *this;
 810c08a:	687b      	ldr	r3, [r7, #4]
      }
 810c08c:	4618      	mov	r0, r3
 810c08e:	370c      	adds	r7, #12
 810c090:	46bd      	mov	sp, r7
 810c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c096:	4770      	bx	lr

0810c098 <_ZNK9__gnu_cxx17__normal_iteratorIPfvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810c098:	b480      	push	{r7}
 810c09a:	b083      	sub	sp, #12
 810c09c:	af00      	add	r7, sp, #0
 810c09e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810c0a0:	687b      	ldr	r3, [r7, #4]
 810c0a2:	681b      	ldr	r3, [r3, #0]
 810c0a4:	4618      	mov	r0, r3
 810c0a6:	370c      	adds	r7, #12
 810c0a8:	46bd      	mov	sp, r7
 810c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0ae:	4770      	bx	lr

0810c0b0 <_ZSt19__relocate_object_aIffSaIfEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 810c0b0:	b580      	push	{r7, lr}
 810c0b2:	b084      	sub	sp, #16
 810c0b4:	af00      	add	r7, sp, #0
 810c0b6:	60f8      	str	r0, [r7, #12]
 810c0b8:	60b9      	str	r1, [r7, #8]
 810c0ba:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 810c0bc:	68b8      	ldr	r0, [r7, #8]
 810c0be:	f7fe fd4d 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c0c2:	4603      	mov	r3, r0
 810c0c4:	461a      	mov	r2, r3
 810c0c6:	68f9      	ldr	r1, [r7, #12]
 810c0c8:	6878      	ldr	r0, [r7, #4]
 810c0ca:	f7ff f8e0 	bl	810b28e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 810c0ce:	68b8      	ldr	r0, [r7, #8]
 810c0d0:	f7ff fb36 	bl	810b740 <_ZSt11__addressofIfEPT_RS0_>
 810c0d4:	4603      	mov	r3, r0
 810c0d6:	4619      	mov	r1, r3
 810c0d8:	6878      	ldr	r0, [r7, #4]
 810c0da:	f7ff fc78 	bl	810b9ce <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
    }
 810c0de:	bf00      	nop
 810c0e0:	3710      	adds	r7, #16
 810c0e2:	46bd      	mov	sp, r7
 810c0e4:	bd80      	pop	{r7, pc}

0810c0e6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 810c0e6:	b480      	push	{r7}
 810c0e8:	b083      	sub	sp, #12
 810c0ea:	af00      	add	r7, sp, #0
 810c0ec:	6078      	str	r0, [r7, #4]
    { return __it; }
 810c0ee:	687b      	ldr	r3, [r7, #4]
 810c0f0:	4618      	mov	r0, r3
 810c0f2:	370c      	adds	r7, #12
 810c0f4:	46bd      	mov	sp, r7
 810c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0fa:	4770      	bx	lr

0810c0fc <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810c0fc:	b5b0      	push	{r4, r5, r7, lr}
 810c0fe:	b084      	sub	sp, #16
 810c100:	af00      	add	r7, sp, #0
 810c102:	60f8      	str	r0, [r7, #12]
 810c104:	60b9      	str	r1, [r7, #8]
 810c106:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810c108:	68f8      	ldr	r0, [r7, #12]
 810c10a:	f000 f90a 	bl	810c322 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 810c10e:	4604      	mov	r4, r0
 810c110:	68b8      	ldr	r0, [r7, #8]
 810c112:	f000 f906 	bl	810c322 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 810c116:	4605      	mov	r5, r0
 810c118:	687b      	ldr	r3, [r7, #4]
 810c11a:	4618      	mov	r0, r3
 810c11c:	f7ff fa9d 	bl	810b65a <_ZSt12__niter_baseIPfET_S1_>
 810c120:	4603      	mov	r3, r0
 810c122:	461a      	mov	r2, r3
 810c124:	4629      	mov	r1, r5
 810c126:	4620      	mov	r0, r4
 810c128:	f000 f909 	bl	810c33e <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 810c12c:	4602      	mov	r2, r0
 810c12e:	1d3b      	adds	r3, r7, #4
 810c130:	4611      	mov	r1, r2
 810c132:	4618      	mov	r0, r3
 810c134:	f000 f913 	bl	810c35e <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 810c138:	4603      	mov	r3, r0
    }
 810c13a:	4618      	mov	r0, r3
 810c13c:	3710      	adds	r7, #16
 810c13e:	46bd      	mov	sp, r7
 810c140:	bdb0      	pop	{r4, r5, r7, pc}

0810c142 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810c142:	b590      	push	{r4, r7, lr}
 810c144:	b089      	sub	sp, #36	@ 0x24
 810c146:	af00      	add	r7, sp, #0
 810c148:	60f8      	str	r0, [r7, #12]
 810c14a:	60b9      	str	r1, [r7, #8]
 810c14c:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 810c14e:	f107 020c 	add.w	r2, r7, #12
 810c152:	f107 0308 	add.w	r3, r7, #8
 810c156:	4611      	mov	r1, r2
 810c158:	4618      	mov	r0, r3
 810c15a:	f7fe fcba 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810c15e:	4603      	mov	r3, r0
 810c160:	2b01      	cmp	r3, #1
 810c162:	bfd4      	ite	le
 810c164:	2301      	movle	r3, #1
 810c166:	2300      	movgt	r3, #0
 810c168:	b2db      	uxtb	r3, r3
 810c16a:	2b00      	cmp	r3, #0
 810c16c:	d139      	bne.n	810c1e2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 810c16e:	f107 020c 	add.w	r2, r7, #12
 810c172:	f107 0308 	add.w	r3, r7, #8
 810c176:	4611      	mov	r1, r2
 810c178:	4618      	mov	r0, r3
 810c17a:	f7fe fcaa 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810c17e:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 810c180:	69bb      	ldr	r3, [r7, #24]
 810c182:	3b02      	subs	r3, #2
 810c184:	0fda      	lsrs	r2, r3, #31
 810c186:	4413      	add	r3, r2
 810c188:	105b      	asrs	r3, r3, #1
 810c18a:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 810c18c:	f107 030c 	add.w	r3, r7, #12
 810c190:	69f9      	ldr	r1, [r7, #28]
 810c192:	4618      	mov	r0, r3
 810c194:	f7fe fb3d 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c198:	4603      	mov	r3, r0
 810c19a:	617b      	str	r3, [r7, #20]
 810c19c:	f107 0314 	add.w	r3, r7, #20
 810c1a0:	4618      	mov	r0, r3
 810c1a2:	f7ff f98b 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c1a6:	4603      	mov	r3, r0
 810c1a8:	4618      	mov	r0, r3
 810c1aa:	f7fe fcd7 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c1ae:	4603      	mov	r3, r0
 810c1b0:	681b      	ldr	r3, [r3, #0]
 810c1b2:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 810c1b4:	f107 0310 	add.w	r3, r7, #16
 810c1b8:	4618      	mov	r0, r3
 810c1ba:	f7fe fccf 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c1be:	4603      	mov	r3, r0
 810c1c0:	edd3 7a00 	vldr	s15, [r3]
 810c1c4:	4623      	mov	r3, r4
 810c1c6:	eeb0 0a67 	vmov.f32	s0, s15
 810c1ca:	69ba      	ldr	r2, [r7, #24]
 810c1cc:	69f9      	ldr	r1, [r7, #28]
 810c1ce:	68f8      	ldr	r0, [r7, #12]
 810c1d0:	f000 f8d1 	bl	810c376 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 810c1d4:	69fb      	ldr	r3, [r7, #28]
 810c1d6:	2b00      	cmp	r3, #0
 810c1d8:	d005      	beq.n	810c1e6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 810c1da:	69fb      	ldr	r3, [r7, #28]
 810c1dc:	3b01      	subs	r3, #1
 810c1de:	61fb      	str	r3, [r7, #28]
      while (true)
 810c1e0:	e7d4      	b.n	810c18c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 810c1e2:	bf00      	nop
 810c1e4:	e000      	b.n	810c1e8 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 810c1e6:	bf00      	nop
    }
 810c1e8:	3724      	adds	r7, #36	@ 0x24
 810c1ea:	46bd      	mov	sp, r7
 810c1ec:	bd90      	pop	{r4, r7, pc}

0810c1ee <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810c1ee:	b5b0      	push	{r4, r5, r7, lr}
 810c1f0:	b086      	sub	sp, #24
 810c1f2:	af00      	add	r7, sp, #0
 810c1f4:	60f8      	str	r0, [r7, #12]
 810c1f6:	60b9      	str	r1, [r7, #8]
 810c1f8:	607a      	str	r2, [r7, #4]
 810c1fa:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 810c1fc:	1d3b      	adds	r3, r7, #4
 810c1fe:	4618      	mov	r0, r3
 810c200:	f7ff f95c 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c204:	4603      	mov	r3, r0
 810c206:	4618      	mov	r0, r3
 810c208:	f7fe fca8 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c20c:	4603      	mov	r3, r0
 810c20e:	681b      	ldr	r3, [r3, #0]
 810c210:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 810c212:	f107 030c 	add.w	r3, r7, #12
 810c216:	4618      	mov	r0, r3
 810c218:	f7ff f950 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c21c:	4603      	mov	r3, r0
 810c21e:	4618      	mov	r0, r3
 810c220:	f7fe fc9c 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c224:	4603      	mov	r3, r0
 810c226:	681c      	ldr	r4, [r3, #0]
 810c228:	1d3b      	adds	r3, r7, #4
 810c22a:	4618      	mov	r0, r3
 810c22c:	f7ff f946 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c230:	4603      	mov	r3, r0
 810c232:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 810c234:	f107 020c 	add.w	r2, r7, #12
 810c238:	f107 0308 	add.w	r3, r7, #8
 810c23c:	4611      	mov	r1, r2
 810c23e:	4618      	mov	r0, r3
 810c240:	f7fe fc47 	bl	810aad2 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810c244:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 810c246:	f107 0314 	add.w	r3, r7, #20
 810c24a:	4618      	mov	r0, r3
 810c24c:	f7fe fc86 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c250:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 810c252:	edd3 7a00 	vldr	s15, [r3]
 810c256:	462b      	mov	r3, r5
 810c258:	eeb0 0a67 	vmov.f32	s0, s15
 810c25c:	4622      	mov	r2, r4
 810c25e:	2100      	movs	r1, #0
 810c260:	68f8      	ldr	r0, [r7, #12]
 810c262:	f000 f888 	bl	810c376 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 810c266:	bf00      	nop
 810c268:	3718      	adds	r7, #24
 810c26a:	46bd      	mov	sp, r7
 810c26c:	bdb0      	pop	{r4, r5, r7, pc}

0810c26e <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 810c26e:	b580      	push	{r7, lr}
 810c270:	ed2d 8b02 	vpush	{d8}
 810c274:	b084      	sub	sp, #16
 810c276:	af00      	add	r7, sp, #0
 810c278:	60f8      	str	r0, [r7, #12]
 810c27a:	60b9      	str	r1, [r7, #8]
 810c27c:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 810c27e:	68bb      	ldr	r3, [r7, #8]
 810c280:	ed93 8a00 	vldr	s16, [r3]
 810c284:	1d3b      	adds	r3, r7, #4
 810c286:	4618      	mov	r0, r3
 810c288:	f7ff f918 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c28c:	4603      	mov	r3, r0
 810c28e:	edd3 7a00 	vldr	s15, [r3]
 810c292:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810c296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c29a:	bf4c      	ite	mi
 810c29c:	2301      	movmi	r3, #1
 810c29e:	2300      	movpl	r3, #0
 810c2a0:	b2db      	uxtb	r3, r3
 810c2a2:	4618      	mov	r0, r3
 810c2a4:	3710      	adds	r7, #16
 810c2a6:	46bd      	mov	sp, r7
 810c2a8:	ecbd 8b02 	vpop	{d8}
 810c2ac:	bd80      	pop	{r7, pc}

0810c2ae <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 810c2ae:	b580      	push	{r7, lr}
 810c2b0:	b084      	sub	sp, #16
 810c2b2:	af00      	add	r7, sp, #0
 810c2b4:	60f8      	str	r0, [r7, #12]
 810c2b6:	60b9      	str	r1, [r7, #8]
 810c2b8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810c2ba:	f7fa faa4 	bl	8106806 <_ZSt21is_constant_evaluatedv>
 810c2be:	4603      	mov	r3, r0
 810c2c0:	2b00      	cmp	r3, #0
 810c2c2:	d006      	beq.n	810c2d2 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 810c2c4:	687a      	ldr	r2, [r7, #4]
 810c2c6:	68b9      	ldr	r1, [r7, #8]
 810c2c8:	68f8      	ldr	r0, [r7, #12]
 810c2ca:	f000 f8fc 	bl	810c4c6 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 810c2ce:	4603      	mov	r3, r0
 810c2d0:	e006      	b.n	810c2e0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 810c2d2:	687a      	ldr	r2, [r7, #4]
 810c2d4:	68b9      	ldr	r1, [r7, #8]
 810c2d6:	68f8      	ldr	r0, [r7, #12]
 810c2d8:	f000 f919 	bl	810c50e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 810c2dc:	4603      	mov	r3, r0
 810c2de:	bf00      	nop
    }
 810c2e0:	4618      	mov	r0, r3
 810c2e2:	3710      	adds	r7, #16
 810c2e4:	46bd      	mov	sp, r7
 810c2e6:	bd80      	pop	{r7, pc}

0810c2e8 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 810c2e8:	b580      	push	{r7, lr}
 810c2ea:	b084      	sub	sp, #16
 810c2ec:	af00      	add	r7, sp, #0
 810c2ee:	60f8      	str	r0, [r7, #12]
 810c2f0:	60b9      	str	r1, [r7, #8]
 810c2f2:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810c2f4:	f7fa fa87 	bl	8106806 <_ZSt21is_constant_evaluatedv>
 810c2f8:	4603      	mov	r3, r0
 810c2fa:	2b00      	cmp	r3, #0
 810c2fc:	d006      	beq.n	810c30c <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 810c2fe:	687a      	ldr	r2, [r7, #4]
 810c300:	68b9      	ldr	r1, [r7, #8]
 810c302:	68f8      	ldr	r0, [r7, #12]
 810c304:	f000 f920 	bl	810c548 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 810c308:	4603      	mov	r3, r0
 810c30a:	e006      	b.n	810c31a <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 810c30c:	687a      	ldr	r2, [r7, #4]
 810c30e:	68b9      	ldr	r1, [r7, #8]
 810c310:	68f8      	ldr	r0, [r7, #12]
 810c312:	f000 f93d 	bl	810c590 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 810c316:	4603      	mov	r3, r0
								 __result);
 810c318:	bf00      	nop
    }
 810c31a:	4618      	mov	r0, r3
 810c31c:	3710      	adds	r7, #16
 810c31e:	46bd      	mov	sp, r7
 810c320:	bd80      	pop	{r7, pc}

0810c322 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 810c322:	b580      	push	{r7, lr}
 810c324:	b082      	sub	sp, #8
 810c326:	af00      	add	r7, sp, #0
 810c328:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 810c32a:	1d3b      	adds	r3, r7, #4
 810c32c:	4618      	mov	r0, r3
 810c32e:	f7fe fee3 	bl	810b0f8 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 810c332:	4603      	mov	r3, r0
 810c334:	681b      	ldr	r3, [r3, #0]
 810c336:	4618      	mov	r0, r3
 810c338:	3708      	adds	r7, #8
 810c33a:	46bd      	mov	sp, r7
 810c33c:	bd80      	pop	{r7, pc}

0810c33e <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 810c33e:	b580      	push	{r7, lr}
 810c340:	b084      	sub	sp, #16
 810c342:	af00      	add	r7, sp, #0
 810c344:	60f8      	str	r0, [r7, #12]
 810c346:	60b9      	str	r1, [r7, #8]
 810c348:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810c34a:	687a      	ldr	r2, [r7, #4]
 810c34c:	68b9      	ldr	r1, [r7, #8]
 810c34e:	68f8      	ldr	r0, [r7, #12]
 810c350:	f000 f940 	bl	810c5d4 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 810c354:	4603      	mov	r3, r0
 810c356:	4618      	mov	r0, r3
 810c358:	3710      	adds	r7, #16
 810c35a:	46bd      	mov	sp, r7
 810c35c:	bd80      	pop	{r7, pc}

0810c35e <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 810c35e:	b480      	push	{r7}
 810c360:	b083      	sub	sp, #12
 810c362:	af00      	add	r7, sp, #0
 810c364:	6078      	str	r0, [r7, #4]
 810c366:	6039      	str	r1, [r7, #0]
    { return __res; }
 810c368:	683b      	ldr	r3, [r7, #0]
 810c36a:	4618      	mov	r0, r3
 810c36c:	370c      	adds	r7, #12
 810c36e:	46bd      	mov	sp, r7
 810c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c374:	4770      	bx	lr

0810c376 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 810c376:	b590      	push	{r4, r7, lr}
 810c378:	b08f      	sub	sp, #60	@ 0x3c
 810c37a:	af00      	add	r7, sp, #0
 810c37c:	6178      	str	r0, [r7, #20]
 810c37e:	6139      	str	r1, [r7, #16]
 810c380:	60fa      	str	r2, [r7, #12]
 810c382:	ed87 0a02 	vstr	s0, [r7, #8]
 810c386:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 810c388:	693b      	ldr	r3, [r7, #16]
 810c38a:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 810c38c:	693b      	ldr	r3, [r7, #16]
 810c38e:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 810c390:	e042      	b.n	810c418 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 810c392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c394:	3301      	adds	r3, #1
 810c396:	005b      	lsls	r3, r3, #1
 810c398:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 810c39a:	f107 0314 	add.w	r3, r7, #20
 810c39e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810c3a0:	4618      	mov	r0, r3
 810c3a2:	f7fe fa36 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c3a6:	4604      	mov	r4, r0
 810c3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c3aa:	1e5a      	subs	r2, r3, #1
 810c3ac:	f107 0314 	add.w	r3, r7, #20
 810c3b0:	4611      	mov	r1, r2
 810c3b2:	4618      	mov	r0, r3
 810c3b4:	f7fe fa2d 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c3b8:	4602      	mov	r2, r0
 810c3ba:	1d3b      	adds	r3, r7, #4
 810c3bc:	4621      	mov	r1, r4
 810c3be:	4618      	mov	r0, r3
 810c3c0:	f7ff fd8f 	bl	810bee2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810c3c4:	4603      	mov	r3, r0
 810c3c6:	2b00      	cmp	r3, #0
 810c3c8:	d002      	beq.n	810c3d0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 810c3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c3cc:	3b01      	subs	r3, #1
 810c3ce:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 810c3d0:	f107 0314 	add.w	r3, r7, #20
 810c3d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810c3d6:	4618      	mov	r0, r3
 810c3d8:	f7fe fa1b 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c3dc:	4603      	mov	r3, r0
 810c3de:	623b      	str	r3, [r7, #32]
 810c3e0:	f107 0320 	add.w	r3, r7, #32
 810c3e4:	4618      	mov	r0, r3
 810c3e6:	f7ff f869 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c3ea:	4603      	mov	r3, r0
 810c3ec:	4618      	mov	r0, r3
 810c3ee:	f7fe fbb5 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c3f2:	4603      	mov	r3, r0
 810c3f4:	681c      	ldr	r4, [r3, #0]
 810c3f6:	f107 0314 	add.w	r3, r7, #20
 810c3fa:	6939      	ldr	r1, [r7, #16]
 810c3fc:	4618      	mov	r0, r3
 810c3fe:	f7fe fa08 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c402:	4603      	mov	r3, r0
 810c404:	627b      	str	r3, [r7, #36]	@ 0x24
 810c406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c40a:	4618      	mov	r0, r3
 810c40c:	f7ff f856 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c410:	4603      	mov	r3, r0
 810c412:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 810c414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c416:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 810c418:	68fb      	ldr	r3, [r7, #12]
 810c41a:	3b01      	subs	r3, #1
 810c41c:	0fda      	lsrs	r2, r3, #31
 810c41e:	4413      	add	r3, r2
 810c420:	105b      	asrs	r3, r3, #1
 810c422:	461a      	mov	r2, r3
 810c424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c426:	4293      	cmp	r3, r2
 810c428:	dbb3      	blt.n	810c392 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 810c42a:	68fb      	ldr	r3, [r7, #12]
 810c42c:	f003 0301 	and.w	r3, r3, #1
 810c430:	2b00      	cmp	r3, #0
 810c432:	d133      	bne.n	810c49c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 810c434:	68fb      	ldr	r3, [r7, #12]
 810c436:	3b02      	subs	r3, #2
 810c438:	0fda      	lsrs	r2, r3, #31
 810c43a:	4413      	add	r3, r2
 810c43c:	105b      	asrs	r3, r3, #1
 810c43e:	461a      	mov	r2, r3
 810c440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c442:	4293      	cmp	r3, r2
 810c444:	d12a      	bne.n	810c49c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 810c446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c448:	3301      	adds	r3, #1
 810c44a:	005b      	lsls	r3, r3, #1
 810c44c:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 810c44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c450:	1e5a      	subs	r2, r3, #1
 810c452:	f107 0314 	add.w	r3, r7, #20
 810c456:	4611      	mov	r1, r2
 810c458:	4618      	mov	r0, r3
 810c45a:	f7fe f9da 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c45e:	4603      	mov	r3, r0
 810c460:	62bb      	str	r3, [r7, #40]	@ 0x28
 810c462:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810c466:	4618      	mov	r0, r3
 810c468:	f7ff f828 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c46c:	4603      	mov	r3, r0
 810c46e:	4618      	mov	r0, r3
 810c470:	f7fe fb74 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c474:	4603      	mov	r3, r0
 810c476:	681c      	ldr	r4, [r3, #0]
 810c478:	f107 0314 	add.w	r3, r7, #20
 810c47c:	6939      	ldr	r1, [r7, #16]
 810c47e:	4618      	mov	r0, r3
 810c480:	f7fe f9c7 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c484:	4603      	mov	r3, r0
 810c486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810c488:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810c48c:	4618      	mov	r0, r3
 810c48e:	f7ff f815 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c492:	4603      	mov	r3, r0
 810c494:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 810c496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c498:	3b01      	subs	r3, #1
 810c49a:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 810c49c:	f107 0308 	add.w	r3, r7, #8
 810c4a0:	4618      	mov	r0, r3
 810c4a2:	f7fe fb5b 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c4a6:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 810c4a8:	edd3 7a00 	vldr	s15, [r3]
 810c4ac:	f107 031c 	add.w	r3, r7, #28
 810c4b0:	eeb0 0a67 	vmov.f32	s0, s15
 810c4b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c4b6:	6939      	ldr	r1, [r7, #16]
 810c4b8:	6978      	ldr	r0, [r7, #20]
 810c4ba:	f000 f8a8 	bl	810c60e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 810c4be:	bf00      	nop
 810c4c0:	373c      	adds	r7, #60	@ 0x3c
 810c4c2:	46bd      	mov	sp, r7
 810c4c4:	bd90      	pop	{r4, r7, pc}

0810c4c6 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 810c4c6:	b580      	push	{r7, lr}
 810c4c8:	b086      	sub	sp, #24
 810c4ca:	af00      	add	r7, sp, #0
 810c4cc:	60f8      	str	r0, [r7, #12]
 810c4ce:	60b9      	str	r1, [r7, #8]
 810c4d0:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810c4d2:	68ba      	ldr	r2, [r7, #8]
 810c4d4:	68fb      	ldr	r3, [r7, #12]
 810c4d6:	1ad3      	subs	r3, r2, r3
 810c4d8:	109b      	asrs	r3, r3, #2
 810c4da:	617b      	str	r3, [r7, #20]
 810c4dc:	e00f      	b.n	810c4fe <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x38>
	      *__result = std::move(*__first);
 810c4de:	68f8      	ldr	r0, [r7, #12]
 810c4e0:	f7fe fb3c 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c4e4:	4603      	mov	r3, r0
 810c4e6:	681a      	ldr	r2, [r3, #0]
 810c4e8:	687b      	ldr	r3, [r7, #4]
 810c4ea:	601a      	str	r2, [r3, #0]
	      ++__first;
 810c4ec:	68fb      	ldr	r3, [r7, #12]
 810c4ee:	3304      	adds	r3, #4
 810c4f0:	60fb      	str	r3, [r7, #12]
	      ++__result;
 810c4f2:	687b      	ldr	r3, [r7, #4]
 810c4f4:	3304      	adds	r3, #4
 810c4f6:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810c4f8:	697b      	ldr	r3, [r7, #20]
 810c4fa:	3b01      	subs	r3, #1
 810c4fc:	617b      	str	r3, [r7, #20]
 810c4fe:	697b      	ldr	r3, [r7, #20]
 810c500:	2b00      	cmp	r3, #0
 810c502:	dcec      	bgt.n	810c4de <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 810c504:	687b      	ldr	r3, [r7, #4]
	}
 810c506:	4618      	mov	r0, r3
 810c508:	3718      	adds	r7, #24
 810c50a:	46bd      	mov	sp, r7
 810c50c:	bd80      	pop	{r7, pc}

0810c50e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810c50e:	b580      	push	{r7, lr}
 810c510:	b086      	sub	sp, #24
 810c512:	af00      	add	r7, sp, #0
 810c514:	60f8      	str	r0, [r7, #12]
 810c516:	60b9      	str	r1, [r7, #8]
 810c518:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810c51a:	68ba      	ldr	r2, [r7, #8]
 810c51c:	68fb      	ldr	r3, [r7, #12]
 810c51e:	1ad3      	subs	r3, r2, r3
 810c520:	109b      	asrs	r3, r3, #2
 810c522:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810c524:	697b      	ldr	r3, [r7, #20]
 810c526:	2b00      	cmp	r3, #0
 810c528:	d006      	beq.n	810c538 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810c52a:	697b      	ldr	r3, [r7, #20]
 810c52c:	009b      	lsls	r3, r3, #2
 810c52e:	461a      	mov	r2, r3
 810c530:	68f9      	ldr	r1, [r7, #12]
 810c532:	6878      	ldr	r0, [r7, #4]
 810c534:	f018 f98c 	bl	8124850 <memmove>
	  return __result + _Num;
 810c538:	697b      	ldr	r3, [r7, #20]
 810c53a:	009b      	lsls	r3, r3, #2
 810c53c:	687a      	ldr	r2, [r7, #4]
 810c53e:	4413      	add	r3, r2
	}
 810c540:	4618      	mov	r0, r3
 810c542:	3718      	adds	r7, #24
 810c544:	46bd      	mov	sp, r7
 810c546:	bd80      	pop	{r7, pc}

0810c548 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 810c548:	b580      	push	{r7, lr}
 810c54a:	b086      	sub	sp, #24
 810c54c:	af00      	add	r7, sp, #0
 810c54e:	60f8      	str	r0, [r7, #12]
 810c550:	60b9      	str	r1, [r7, #8]
 810c552:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 810c554:	68ba      	ldr	r2, [r7, #8]
 810c556:	68fb      	ldr	r3, [r7, #12]
 810c558:	1ad3      	subs	r3, r2, r3
 810c55a:	109b      	asrs	r3, r3, #2
 810c55c:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 810c55e:	e00f      	b.n	810c580 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 810c560:	68bb      	ldr	r3, [r7, #8]
 810c562:	3b04      	subs	r3, #4
 810c564:	60bb      	str	r3, [r7, #8]
 810c566:	68b8      	ldr	r0, [r7, #8]
 810c568:	f7fe faf8 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c56c:	4603      	mov	r3, r0
 810c56e:	681a      	ldr	r2, [r3, #0]
 810c570:	687b      	ldr	r3, [r7, #4]
 810c572:	3b04      	subs	r3, #4
 810c574:	607b      	str	r3, [r7, #4]
 810c576:	687b      	ldr	r3, [r7, #4]
 810c578:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 810c57a:	697b      	ldr	r3, [r7, #20]
 810c57c:	3b01      	subs	r3, #1
 810c57e:	617b      	str	r3, [r7, #20]
 810c580:	697b      	ldr	r3, [r7, #20]
 810c582:	2b00      	cmp	r3, #0
 810c584:	dcec      	bgt.n	810c560 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 810c586:	687b      	ldr	r3, [r7, #4]
	}
 810c588:	4618      	mov	r0, r3
 810c58a:	3718      	adds	r7, #24
 810c58c:	46bd      	mov	sp, r7
 810c58e:	bd80      	pop	{r7, pc}

0810c590 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810c590:	b580      	push	{r7, lr}
 810c592:	b086      	sub	sp, #24
 810c594:	af00      	add	r7, sp, #0
 810c596:	60f8      	str	r0, [r7, #12]
 810c598:	60b9      	str	r1, [r7, #8]
 810c59a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810c59c:	68ba      	ldr	r2, [r7, #8]
 810c59e:	68fb      	ldr	r3, [r7, #12]
 810c5a0:	1ad3      	subs	r3, r2, r3
 810c5a2:	109b      	asrs	r3, r3, #2
 810c5a4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810c5a6:	697b      	ldr	r3, [r7, #20]
 810c5a8:	2b00      	cmp	r3, #0
 810c5aa:	d00a      	beq.n	810c5c2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 810c5ac:	697b      	ldr	r3, [r7, #20]
 810c5ae:	009b      	lsls	r3, r3, #2
 810c5b0:	425b      	negs	r3, r3
 810c5b2:	687a      	ldr	r2, [r7, #4]
 810c5b4:	18d0      	adds	r0, r2, r3
 810c5b6:	697b      	ldr	r3, [r7, #20]
 810c5b8:	009b      	lsls	r3, r3, #2
 810c5ba:	461a      	mov	r2, r3
 810c5bc:	68f9      	ldr	r1, [r7, #12]
 810c5be:	f018 f947 	bl	8124850 <memmove>
	  return __result - _Num;
 810c5c2:	697b      	ldr	r3, [r7, #20]
 810c5c4:	009b      	lsls	r3, r3, #2
 810c5c6:	425b      	negs	r3, r3
 810c5c8:	687a      	ldr	r2, [r7, #4]
 810c5ca:	4413      	add	r3, r2
	}
 810c5cc:	4618      	mov	r0, r3
 810c5ce:	3718      	adds	r7, #24
 810c5d0:	46bd      	mov	sp, r7
 810c5d2:	bd80      	pop	{r7, pc}

0810c5d4 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 810c5d4:	b580      	push	{r7, lr}
 810c5d6:	b084      	sub	sp, #16
 810c5d8:	af00      	add	r7, sp, #0
 810c5da:	60f8      	str	r0, [r7, #12]
 810c5dc:	60b9      	str	r1, [r7, #8]
 810c5de:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 810c5e0:	f7fa f911 	bl	8106806 <_ZSt21is_constant_evaluatedv>
 810c5e4:	4603      	mov	r3, r0
 810c5e6:	2b00      	cmp	r3, #0
 810c5e8:	d006      	beq.n	810c5f8 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 810c5ea:	687a      	ldr	r2, [r7, #4]
 810c5ec:	68b9      	ldr	r1, [r7, #8]
 810c5ee:	68f8      	ldr	r0, [r7, #12]
 810c5f0:	f000 f87a 	bl	810c6e8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 810c5f4:	4603      	mov	r3, r0
 810c5f6:	e006      	b.n	810c606 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 810c5f8:	687a      	ldr	r2, [r7, #4]
 810c5fa:	68b9      	ldr	r1, [r7, #8]
 810c5fc:	68f8      	ldr	r0, [r7, #12]
 810c5fe:	f000 f896 	bl	810c72e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 810c602:	4603      	mov	r3, r0
 810c604:	bf00      	nop
    }
 810c606:	4618      	mov	r0, r3
 810c608:	3710      	adds	r7, #16
 810c60a:	46bd      	mov	sp, r7
 810c60c:	bd80      	pop	{r7, pc}

0810c60e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 810c60e:	b590      	push	{r4, r7, lr}
 810c610:	b08b      	sub	sp, #44	@ 0x2c
 810c612:	af00      	add	r7, sp, #0
 810c614:	6178      	str	r0, [r7, #20]
 810c616:	6139      	str	r1, [r7, #16]
 810c618:	60fa      	str	r2, [r7, #12]
 810c61a:	ed87 0a02 	vstr	s0, [r7, #8]
 810c61e:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 810c620:	693b      	ldr	r3, [r7, #16]
 810c622:	3b01      	subs	r3, #1
 810c624:	0fda      	lsrs	r2, r3, #31
 810c626:	4413      	add	r3, r2
 810c628:	105b      	asrs	r3, r3, #1
 810c62a:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 810c62c:	e029      	b.n	810c682 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 810c62e:	f107 0314 	add.w	r3, r7, #20
 810c632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c634:	4618      	mov	r0, r3
 810c636:	f7fe f8ec 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c63a:	4603      	mov	r3, r0
 810c63c:	61bb      	str	r3, [r7, #24]
 810c63e:	f107 0318 	add.w	r3, r7, #24
 810c642:	4618      	mov	r0, r3
 810c644:	f7fe ff3a 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c648:	4603      	mov	r3, r0
 810c64a:	4618      	mov	r0, r3
 810c64c:	f7fe fa86 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c650:	4603      	mov	r3, r0
 810c652:	681c      	ldr	r4, [r3, #0]
 810c654:	f107 0314 	add.w	r3, r7, #20
 810c658:	6939      	ldr	r1, [r7, #16]
 810c65a:	4618      	mov	r0, r3
 810c65c:	f7fe f8d9 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c660:	4603      	mov	r3, r0
 810c662:	61fb      	str	r3, [r7, #28]
 810c664:	f107 031c 	add.w	r3, r7, #28
 810c668:	4618      	mov	r0, r3
 810c66a:	f7fe ff27 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c66e:	4603      	mov	r3, r0
 810c670:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 810c672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c674:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 810c676:	693b      	ldr	r3, [r7, #16]
 810c678:	3b01      	subs	r3, #1
 810c67a:	0fda      	lsrs	r2, r3, #31
 810c67c:	4413      	add	r3, r2
 810c67e:	105b      	asrs	r3, r3, #1
 810c680:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 810c682:	693a      	ldr	r2, [r7, #16]
 810c684:	68fb      	ldr	r3, [r7, #12]
 810c686:	429a      	cmp	r2, r3
 810c688:	dd11      	ble.n	810c6ae <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 810c68a:	f107 0314 	add.w	r3, r7, #20
 810c68e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c690:	4618      	mov	r0, r3
 810c692:	f7fe f8be 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c696:	4601      	mov	r1, r0
 810c698:	f107 0308 	add.w	r3, r7, #8
 810c69c:	461a      	mov	r2, r3
 810c69e:	6878      	ldr	r0, [r7, #4]
 810c6a0:	f000 f862 	bl	810c768 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 810c6a4:	4603      	mov	r3, r0
 810c6a6:	2b00      	cmp	r3, #0
 810c6a8:	d001      	beq.n	810c6ae <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 810c6aa:	2301      	movs	r3, #1
 810c6ac:	e000      	b.n	810c6b0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 810c6ae:	2300      	movs	r3, #0
 810c6b0:	2b00      	cmp	r3, #0
 810c6b2:	d1bc      	bne.n	810c62e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 810c6b4:	f107 0308 	add.w	r3, r7, #8
 810c6b8:	4618      	mov	r0, r3
 810c6ba:	f7fe fa4f 	bl	810ab5c <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810c6be:	4603      	mov	r3, r0
 810c6c0:	681c      	ldr	r4, [r3, #0]
 810c6c2:	f107 0314 	add.w	r3, r7, #20
 810c6c6:	6939      	ldr	r1, [r7, #16]
 810c6c8:	4618      	mov	r0, r3
 810c6ca:	f7fe f8a2 	bl	810a812 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810c6ce:	4603      	mov	r3, r0
 810c6d0:	623b      	str	r3, [r7, #32]
 810c6d2:	f107 0320 	add.w	r3, r7, #32
 810c6d6:	4618      	mov	r0, r3
 810c6d8:	f7fe fef0 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c6dc:	4603      	mov	r3, r0
 810c6de:	601c      	str	r4, [r3, #0]
    }
 810c6e0:	bf00      	nop
 810c6e2:	372c      	adds	r7, #44	@ 0x2c
 810c6e4:	46bd      	mov	sp, r7
 810c6e6:	bd90      	pop	{r4, r7, pc}

0810c6e8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 810c6e8:	b480      	push	{r7}
 810c6ea:	b087      	sub	sp, #28
 810c6ec:	af00      	add	r7, sp, #0
 810c6ee:	60f8      	str	r0, [r7, #12]
 810c6f0:	60b9      	str	r1, [r7, #8]
 810c6f2:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810c6f4:	68ba      	ldr	r2, [r7, #8]
 810c6f6:	68fb      	ldr	r3, [r7, #12]
 810c6f8:	1ad3      	subs	r3, r2, r3
 810c6fa:	109b      	asrs	r3, r3, #2
 810c6fc:	617b      	str	r3, [r7, #20]
 810c6fe:	e00c      	b.n	810c71a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 810c700:	68fb      	ldr	r3, [r7, #12]
 810c702:	681a      	ldr	r2, [r3, #0]
 810c704:	687b      	ldr	r3, [r7, #4]
 810c706:	601a      	str	r2, [r3, #0]
	      ++__first;
 810c708:	68fb      	ldr	r3, [r7, #12]
 810c70a:	3304      	adds	r3, #4
 810c70c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 810c70e:	687b      	ldr	r3, [r7, #4]
 810c710:	3304      	adds	r3, #4
 810c712:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 810c714:	697b      	ldr	r3, [r7, #20]
 810c716:	3b01      	subs	r3, #1
 810c718:	617b      	str	r3, [r7, #20]
 810c71a:	697b      	ldr	r3, [r7, #20]
 810c71c:	2b00      	cmp	r3, #0
 810c71e:	dcef      	bgt.n	810c700 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 810c720:	687b      	ldr	r3, [r7, #4]
	}
 810c722:	4618      	mov	r0, r3
 810c724:	371c      	adds	r7, #28
 810c726:	46bd      	mov	sp, r7
 810c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c72c:	4770      	bx	lr

0810c72e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810c72e:	b580      	push	{r7, lr}
 810c730:	b086      	sub	sp, #24
 810c732:	af00      	add	r7, sp, #0
 810c734:	60f8      	str	r0, [r7, #12]
 810c736:	60b9      	str	r1, [r7, #8]
 810c738:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810c73a:	68ba      	ldr	r2, [r7, #8]
 810c73c:	68fb      	ldr	r3, [r7, #12]
 810c73e:	1ad3      	subs	r3, r2, r3
 810c740:	109b      	asrs	r3, r3, #2
 810c742:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810c744:	697b      	ldr	r3, [r7, #20]
 810c746:	2b00      	cmp	r3, #0
 810c748:	d006      	beq.n	810c758 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810c74a:	697b      	ldr	r3, [r7, #20]
 810c74c:	009b      	lsls	r3, r3, #2
 810c74e:	461a      	mov	r2, r3
 810c750:	68f9      	ldr	r1, [r7, #12]
 810c752:	6878      	ldr	r0, [r7, #4]
 810c754:	f018 f87c 	bl	8124850 <memmove>
	  return __result + _Num;
 810c758:	697b      	ldr	r3, [r7, #20]
 810c75a:	009b      	lsls	r3, r3, #2
 810c75c:	687a      	ldr	r2, [r7, #4]
 810c75e:	4413      	add	r3, r2
	}
 810c760:	4618      	mov	r0, r3
 810c762:	3718      	adds	r7, #24
 810c764:	46bd      	mov	sp, r7
 810c766:	bd80      	pop	{r7, pc}

0810c768 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 810c768:	b580      	push	{r7, lr}
 810c76a:	b084      	sub	sp, #16
 810c76c:	af00      	add	r7, sp, #0
 810c76e:	60f8      	str	r0, [r7, #12]
 810c770:	60b9      	str	r1, [r7, #8]
 810c772:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 810c774:	f107 0308 	add.w	r3, r7, #8
 810c778:	4618      	mov	r0, r3
 810c77a:	f7fe fe9f 	bl	810b4bc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810c77e:	4603      	mov	r3, r0
 810c780:	ed93 7a00 	vldr	s14, [r3]
 810c784:	687b      	ldr	r3, [r7, #4]
 810c786:	edd3 7a00 	vldr	s15, [r3]
 810c78a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 810c78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c792:	bf4c      	ite	mi
 810c794:	2301      	movmi	r3, #1
 810c796:	2300      	movpl	r3, #0
 810c798:	b2db      	uxtb	r3, r3
 810c79a:	4618      	mov	r0, r3
 810c79c:	3710      	adds	r7, #16
 810c79e:	46bd      	mov	sp, r7
 810c7a0:	bd80      	pop	{r7, pc}

0810c7a2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 810c7a2:	b480      	push	{r7}
 810c7a4:	b083      	sub	sp, #12
 810c7a6:	af00      	add	r7, sp, #0
 810c7a8:	6078      	str	r0, [r7, #4]
 810c7aa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 810c7ac:	687b      	ldr	r3, [r7, #4]
 810c7ae:	2b00      	cmp	r3, #0
 810c7b0:	d00b      	beq.n	810c7ca <LAN8742_RegisterBusIO+0x28>
 810c7b2:	683b      	ldr	r3, [r7, #0]
 810c7b4:	68db      	ldr	r3, [r3, #12]
 810c7b6:	2b00      	cmp	r3, #0
 810c7b8:	d007      	beq.n	810c7ca <LAN8742_RegisterBusIO+0x28>
 810c7ba:	683b      	ldr	r3, [r7, #0]
 810c7bc:	689b      	ldr	r3, [r3, #8]
 810c7be:	2b00      	cmp	r3, #0
 810c7c0:	d003      	beq.n	810c7ca <LAN8742_RegisterBusIO+0x28>
 810c7c2:	683b      	ldr	r3, [r7, #0]
 810c7c4:	691b      	ldr	r3, [r3, #16]
 810c7c6:	2b00      	cmp	r3, #0
 810c7c8:	d102      	bne.n	810c7d0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 810c7ca:	f04f 33ff 	mov.w	r3, #4294967295
 810c7ce:	e014      	b.n	810c7fa <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 810c7d0:	683b      	ldr	r3, [r7, #0]
 810c7d2:	681a      	ldr	r2, [r3, #0]
 810c7d4:	687b      	ldr	r3, [r7, #4]
 810c7d6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 810c7d8:	683b      	ldr	r3, [r7, #0]
 810c7da:	685a      	ldr	r2, [r3, #4]
 810c7dc:	687b      	ldr	r3, [r7, #4]
 810c7de:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 810c7e0:	683b      	ldr	r3, [r7, #0]
 810c7e2:	68da      	ldr	r2, [r3, #12]
 810c7e4:	687b      	ldr	r3, [r7, #4]
 810c7e6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 810c7e8:	683b      	ldr	r3, [r7, #0]
 810c7ea:	689a      	ldr	r2, [r3, #8]
 810c7ec:	687b      	ldr	r3, [r7, #4]
 810c7ee:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 810c7f0:	683b      	ldr	r3, [r7, #0]
 810c7f2:	691a      	ldr	r2, [r3, #16]
 810c7f4:	687b      	ldr	r3, [r7, #4]
 810c7f6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 810c7f8:	2300      	movs	r3, #0
}
 810c7fa:	4618      	mov	r0, r3
 810c7fc:	370c      	adds	r7, #12
 810c7fe:	46bd      	mov	sp, r7
 810c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c804:	4770      	bx	lr

0810c806 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 810c806:	b580      	push	{r7, lr}
 810c808:	b086      	sub	sp, #24
 810c80a:	af00      	add	r7, sp, #0
 810c80c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 810c80e:	2300      	movs	r3, #0
 810c810:	60fb      	str	r3, [r7, #12]
 810c812:	2300      	movs	r3, #0
 810c814:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 810c816:	2300      	movs	r3, #0
 810c818:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 810c81a:	687b      	ldr	r3, [r7, #4]
 810c81c:	685b      	ldr	r3, [r3, #4]
 810c81e:	2b00      	cmp	r3, #0
 810c820:	d139      	bne.n	810c896 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 810c822:	687b      	ldr	r3, [r7, #4]
 810c824:	689b      	ldr	r3, [r3, #8]
 810c826:	2b00      	cmp	r3, #0
 810c828:	d002      	beq.n	810c830 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 810c82a:	687b      	ldr	r3, [r7, #4]
 810c82c:	689b      	ldr	r3, [r3, #8]
 810c82e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 810c830:	687b      	ldr	r3, [r7, #4]
 810c832:	2220      	movs	r2, #32
 810c834:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810c836:	2300      	movs	r3, #0
 810c838:	617b      	str	r3, [r7, #20]
 810c83a:	e01c      	b.n	810c876 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 810c83c:	687b      	ldr	r3, [r7, #4]
 810c83e:	695b      	ldr	r3, [r3, #20]
 810c840:	f107 020c 	add.w	r2, r7, #12
 810c844:	2112      	movs	r1, #18
 810c846:	6978      	ldr	r0, [r7, #20]
 810c848:	4798      	blx	r3
 810c84a:	4603      	mov	r3, r0
 810c84c:	2b00      	cmp	r3, #0
 810c84e:	da03      	bge.n	810c858 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 810c850:	f06f 0304 	mvn.w	r3, #4
 810c854:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 810c856:	e00b      	b.n	810c870 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 810c858:	68fb      	ldr	r3, [r7, #12]
 810c85a:	f003 031f 	and.w	r3, r3, #31
 810c85e:	697a      	ldr	r2, [r7, #20]
 810c860:	429a      	cmp	r2, r3
 810c862:	d105      	bne.n	810c870 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 810c864:	687b      	ldr	r3, [r7, #4]
 810c866:	697a      	ldr	r2, [r7, #20]
 810c868:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 810c86a:	2300      	movs	r3, #0
 810c86c:	613b      	str	r3, [r7, #16]
         break;
 810c86e:	e005      	b.n	810c87c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810c870:	697b      	ldr	r3, [r7, #20]
 810c872:	3301      	adds	r3, #1
 810c874:	617b      	str	r3, [r7, #20]
 810c876:	697b      	ldr	r3, [r7, #20]
 810c878:	2b1f      	cmp	r3, #31
 810c87a:	d9df      	bls.n	810c83c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 810c87c:	687b      	ldr	r3, [r7, #4]
 810c87e:	681b      	ldr	r3, [r3, #0]
 810c880:	2b1f      	cmp	r3, #31
 810c882:	d902      	bls.n	810c88a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 810c884:	f06f 0302 	mvn.w	r3, #2
 810c888:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 810c88a:	693b      	ldr	r3, [r7, #16]
 810c88c:	2b00      	cmp	r3, #0
 810c88e:	d102      	bne.n	810c896 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 810c890:	687b      	ldr	r3, [r7, #4]
 810c892:	2201      	movs	r2, #1
 810c894:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 810c896:	693b      	ldr	r3, [r7, #16]
 }
 810c898:	4618      	mov	r0, r3
 810c89a:	3718      	adds	r7, #24
 810c89c:	46bd      	mov	sp, r7
 810c89e:	bd80      	pop	{r7, pc}

0810c8a0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 810c8a0:	b580      	push	{r7, lr}
 810c8a2:	b084      	sub	sp, #16
 810c8a4:	af00      	add	r7, sp, #0
 810c8a6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 810c8a8:	2300      	movs	r3, #0
 810c8aa:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 810c8ac:	687b      	ldr	r3, [r7, #4]
 810c8ae:	695b      	ldr	r3, [r3, #20]
 810c8b0:	687a      	ldr	r2, [r7, #4]
 810c8b2:	6810      	ldr	r0, [r2, #0]
 810c8b4:	f107 020c 	add.w	r2, r7, #12
 810c8b8:	2101      	movs	r1, #1
 810c8ba:	4798      	blx	r3
 810c8bc:	4603      	mov	r3, r0
 810c8be:	2b00      	cmp	r3, #0
 810c8c0:	da02      	bge.n	810c8c8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 810c8c2:	f06f 0304 	mvn.w	r3, #4
 810c8c6:	e06e      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 810c8c8:	687b      	ldr	r3, [r7, #4]
 810c8ca:	695b      	ldr	r3, [r3, #20]
 810c8cc:	687a      	ldr	r2, [r7, #4]
 810c8ce:	6810      	ldr	r0, [r2, #0]
 810c8d0:	f107 020c 	add.w	r2, r7, #12
 810c8d4:	2101      	movs	r1, #1
 810c8d6:	4798      	blx	r3
 810c8d8:	4603      	mov	r3, r0
 810c8da:	2b00      	cmp	r3, #0
 810c8dc:	da02      	bge.n	810c8e4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 810c8de:	f06f 0304 	mvn.w	r3, #4
 810c8e2:	e060      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 810c8e4:	68fb      	ldr	r3, [r7, #12]
 810c8e6:	f003 0304 	and.w	r3, r3, #4
 810c8ea:	2b00      	cmp	r3, #0
 810c8ec:	d101      	bne.n	810c8f2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 810c8ee:	2301      	movs	r3, #1
 810c8f0:	e059      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 810c8f2:	687b      	ldr	r3, [r7, #4]
 810c8f4:	695b      	ldr	r3, [r3, #20]
 810c8f6:	687a      	ldr	r2, [r7, #4]
 810c8f8:	6810      	ldr	r0, [r2, #0]
 810c8fa:	f107 020c 	add.w	r2, r7, #12
 810c8fe:	2100      	movs	r1, #0
 810c900:	4798      	blx	r3
 810c902:	4603      	mov	r3, r0
 810c904:	2b00      	cmp	r3, #0
 810c906:	da02      	bge.n	810c90e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 810c908:	f06f 0304 	mvn.w	r3, #4
 810c90c:	e04b      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 810c90e:	68fb      	ldr	r3, [r7, #12]
 810c910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810c914:	2b00      	cmp	r3, #0
 810c916:	d11b      	bne.n	810c950 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 810c918:	68fb      	ldr	r3, [r7, #12]
 810c91a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810c91e:	2b00      	cmp	r3, #0
 810c920:	d006      	beq.n	810c930 <LAN8742_GetLinkState+0x90>
 810c922:	68fb      	ldr	r3, [r7, #12]
 810c924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810c928:	2b00      	cmp	r3, #0
 810c92a:	d001      	beq.n	810c930 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 810c92c:	2302      	movs	r3, #2
 810c92e:	e03a      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 810c930:	68fb      	ldr	r3, [r7, #12]
 810c932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810c936:	2b00      	cmp	r3, #0
 810c938:	d001      	beq.n	810c93e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810c93a:	2303      	movs	r3, #3
 810c93c:	e033      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 810c93e:	68fb      	ldr	r3, [r7, #12]
 810c940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810c944:	2b00      	cmp	r3, #0
 810c946:	d001      	beq.n	810c94c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810c948:	2304      	movs	r3, #4
 810c94a:	e02c      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 810c94c:	2305      	movs	r3, #5
 810c94e:	e02a      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 810c950:	687b      	ldr	r3, [r7, #4]
 810c952:	695b      	ldr	r3, [r3, #20]
 810c954:	687a      	ldr	r2, [r7, #4]
 810c956:	6810      	ldr	r0, [r2, #0]
 810c958:	f107 020c 	add.w	r2, r7, #12
 810c95c:	211f      	movs	r1, #31
 810c95e:	4798      	blx	r3
 810c960:	4603      	mov	r3, r0
 810c962:	2b00      	cmp	r3, #0
 810c964:	da02      	bge.n	810c96c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 810c966:	f06f 0304 	mvn.w	r3, #4
 810c96a:	e01c      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 810c96c:	68fb      	ldr	r3, [r7, #12]
 810c96e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810c972:	2b00      	cmp	r3, #0
 810c974:	d101      	bne.n	810c97a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 810c976:	2306      	movs	r3, #6
 810c978:	e015      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 810c97a:	68fb      	ldr	r3, [r7, #12]
 810c97c:	f003 031c 	and.w	r3, r3, #28
 810c980:	2b18      	cmp	r3, #24
 810c982:	d101      	bne.n	810c988 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 810c984:	2302      	movs	r3, #2
 810c986:	e00e      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 810c988:	68fb      	ldr	r3, [r7, #12]
 810c98a:	f003 031c 	and.w	r3, r3, #28
 810c98e:	2b08      	cmp	r3, #8
 810c990:	d101      	bne.n	810c996 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810c992:	2303      	movs	r3, #3
 810c994:	e007      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 810c996:	68fb      	ldr	r3, [r7, #12]
 810c998:	f003 031c 	and.w	r3, r3, #28
 810c99c:	2b14      	cmp	r3, #20
 810c99e:	d101      	bne.n	810c9a4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810c9a0:	2304      	movs	r3, #4
 810c9a2:	e000      	b.n	810c9a6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 810c9a4:	2305      	movs	r3, #5
    }
  }
}
 810c9a6:	4618      	mov	r0, r3
 810c9a8:	3710      	adds	r7, #16
 810c9aa:	46bd      	mov	sp, r7
 810c9ac:	bd80      	pop	{r7, pc}
	...

0810c9b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810c9b0:	b480      	push	{r7}
 810c9b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810c9b4:	4b0b      	ldr	r3, [pc, #44]	@ (810c9e4 <SystemInit+0x34>)
 810c9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c9ba:	4a0a      	ldr	r2, [pc, #40]	@ (810c9e4 <SystemInit+0x34>)
 810c9bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810c9c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810c9c4:	4b07      	ldr	r3, [pc, #28]	@ (810c9e4 <SystemInit+0x34>)
 810c9c6:	691b      	ldr	r3, [r3, #16]
 810c9c8:	4a06      	ldr	r2, [pc, #24]	@ (810c9e4 <SystemInit+0x34>)
 810c9ca:	f043 0310 	orr.w	r3, r3, #16
 810c9ce:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810c9d0:	4b04      	ldr	r3, [pc, #16]	@ (810c9e4 <SystemInit+0x34>)
 810c9d2:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 810c9d6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810c9d8:	bf00      	nop
 810c9da:	46bd      	mov	sp, r7
 810c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9e0:	4770      	bx	lr
 810c9e2:	bf00      	nop
 810c9e4:	e000ed00 	.word	0xe000ed00

0810c9e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810c9e8:	b580      	push	{r7, lr}
 810c9ea:	b082      	sub	sp, #8
 810c9ec:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810c9ee:	4b28      	ldr	r3, [pc, #160]	@ (810ca90 <HAL_Init+0xa8>)
 810c9f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810c9f4:	4a26      	ldr	r2, [pc, #152]	@ (810ca90 <HAL_Init+0xa8>)
 810c9f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810c9fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810c9fe:	4b24      	ldr	r3, [pc, #144]	@ (810ca90 <HAL_Init+0xa8>)
 810ca00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810ca04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810ca08:	603b      	str	r3, [r7, #0]
 810ca0a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810ca0c:	4b21      	ldr	r3, [pc, #132]	@ (810ca94 <HAL_Init+0xac>)
 810ca0e:	681b      	ldr	r3, [r3, #0]
 810ca10:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810ca14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810ca18:	4a1e      	ldr	r2, [pc, #120]	@ (810ca94 <HAL_Init+0xac>)
 810ca1a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810ca1e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810ca20:	4b1c      	ldr	r3, [pc, #112]	@ (810ca94 <HAL_Init+0xac>)
 810ca22:	681b      	ldr	r3, [r3, #0]
 810ca24:	4a1b      	ldr	r2, [pc, #108]	@ (810ca94 <HAL_Init+0xac>)
 810ca26:	f043 0301 	orr.w	r3, r3, #1
 810ca2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810ca2c:	2003      	movs	r0, #3
 810ca2e:	f000 f91a 	bl	810cc66 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810ca32:	f002 ff79 	bl	810f928 <HAL_RCC_GetSysClockFreq>
 810ca36:	4602      	mov	r2, r0
 810ca38:	4b15      	ldr	r3, [pc, #84]	@ (810ca90 <HAL_Init+0xa8>)
 810ca3a:	699b      	ldr	r3, [r3, #24]
 810ca3c:	0a1b      	lsrs	r3, r3, #8
 810ca3e:	f003 030f 	and.w	r3, r3, #15
 810ca42:	4915      	ldr	r1, [pc, #84]	@ (810ca98 <HAL_Init+0xb0>)
 810ca44:	5ccb      	ldrb	r3, [r1, r3]
 810ca46:	f003 031f 	and.w	r3, r3, #31
 810ca4a:	fa22 f303 	lsr.w	r3, r2, r3
 810ca4e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810ca50:	4b0f      	ldr	r3, [pc, #60]	@ (810ca90 <HAL_Init+0xa8>)
 810ca52:	699b      	ldr	r3, [r3, #24]
 810ca54:	f003 030f 	and.w	r3, r3, #15
 810ca58:	4a0f      	ldr	r2, [pc, #60]	@ (810ca98 <HAL_Init+0xb0>)
 810ca5a:	5cd3      	ldrb	r3, [r2, r3]
 810ca5c:	f003 031f 	and.w	r3, r3, #31
 810ca60:	687a      	ldr	r2, [r7, #4]
 810ca62:	fa22 f303 	lsr.w	r3, r2, r3
 810ca66:	4a0d      	ldr	r2, [pc, #52]	@ (810ca9c <HAL_Init+0xb4>)
 810ca68:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810ca6a:	4b0c      	ldr	r3, [pc, #48]	@ (810ca9c <HAL_Init+0xb4>)
 810ca6c:	681b      	ldr	r3, [r3, #0]
 810ca6e:	4a0c      	ldr	r2, [pc, #48]	@ (810caa0 <HAL_Init+0xb8>)
 810ca70:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810ca72:	2000      	movs	r0, #0
 810ca74:	f7f6 fbde 	bl	8103234 <HAL_InitTick>
 810ca78:	4603      	mov	r3, r0
 810ca7a:	2b00      	cmp	r3, #0
 810ca7c:	d001      	beq.n	810ca82 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810ca7e:	2301      	movs	r3, #1
 810ca80:	e002      	b.n	810ca88 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810ca82:	f7f6 fab7 	bl	8102ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810ca86:	2300      	movs	r3, #0
}
 810ca88:	4618      	mov	r0, r3
 810ca8a:	3708      	adds	r7, #8
 810ca8c:	46bd      	mov	sp, r7
 810ca8e:	bd80      	pop	{r7, pc}
 810ca90:	58024400 	.word	0x58024400
 810ca94:	40024400 	.word	0x40024400
 810ca98:	081285a0 	.word	0x081285a0
 810ca9c:	10000018 	.word	0x10000018
 810caa0:	10000014 	.word	0x10000014

0810caa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810caa4:	b480      	push	{r7}
 810caa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810caa8:	4b06      	ldr	r3, [pc, #24]	@ (810cac4 <HAL_IncTick+0x20>)
 810caaa:	781b      	ldrb	r3, [r3, #0]
 810caac:	461a      	mov	r2, r3
 810caae:	4b06      	ldr	r3, [pc, #24]	@ (810cac8 <HAL_IncTick+0x24>)
 810cab0:	681b      	ldr	r3, [r3, #0]
 810cab2:	4413      	add	r3, r2
 810cab4:	4a04      	ldr	r2, [pc, #16]	@ (810cac8 <HAL_IncTick+0x24>)
 810cab6:	6013      	str	r3, [r2, #0]
}
 810cab8:	bf00      	nop
 810caba:	46bd      	mov	sp, r7
 810cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cac0:	4770      	bx	lr
 810cac2:	bf00      	nop
 810cac4:	10000020 	.word	0x10000020
 810cac8:	10000420 	.word	0x10000420

0810cacc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810cacc:	b480      	push	{r7}
 810cace:	af00      	add	r7, sp, #0
  return uwTick;
 810cad0:	4b03      	ldr	r3, [pc, #12]	@ (810cae0 <HAL_GetTick+0x14>)
 810cad2:	681b      	ldr	r3, [r3, #0]
}
 810cad4:	4618      	mov	r0, r3
 810cad6:	46bd      	mov	sp, r7
 810cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cadc:	4770      	bx	lr
 810cade:	bf00      	nop
 810cae0:	10000420 	.word	0x10000420

0810cae4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 810cae4:	b480      	push	{r7}
 810cae6:	b083      	sub	sp, #12
 810cae8:	af00      	add	r7, sp, #0
 810caea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 810caec:	4b06      	ldr	r3, [pc, #24]	@ (810cb08 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810caee:	685b      	ldr	r3, [r3, #4]
 810caf0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 810caf4:	4904      	ldr	r1, [pc, #16]	@ (810cb08 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810caf6:	687b      	ldr	r3, [r7, #4]
 810caf8:	4313      	orrs	r3, r2
 810cafa:	604b      	str	r3, [r1, #4]
}
 810cafc:	bf00      	nop
 810cafe:	370c      	adds	r7, #12
 810cb00:	46bd      	mov	sp, r7
 810cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb06:	4770      	bx	lr
 810cb08:	58000400 	.word	0x58000400

0810cb0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810cb0c:	b480      	push	{r7}
 810cb0e:	b085      	sub	sp, #20
 810cb10:	af00      	add	r7, sp, #0
 810cb12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810cb14:	687b      	ldr	r3, [r7, #4]
 810cb16:	f003 0307 	and.w	r3, r3, #7
 810cb1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810cb1c:	4b0c      	ldr	r3, [pc, #48]	@ (810cb50 <__NVIC_SetPriorityGrouping+0x44>)
 810cb1e:	68db      	ldr	r3, [r3, #12]
 810cb20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810cb22:	68ba      	ldr	r2, [r7, #8]
 810cb24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 810cb28:	4013      	ands	r3, r2
 810cb2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810cb2c:	68fb      	ldr	r3, [r7, #12]
 810cb2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810cb30:	68bb      	ldr	r3, [r7, #8]
 810cb32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810cb34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810cb38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810cb3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810cb3e:	4a04      	ldr	r2, [pc, #16]	@ (810cb50 <__NVIC_SetPriorityGrouping+0x44>)
 810cb40:	68bb      	ldr	r3, [r7, #8]
 810cb42:	60d3      	str	r3, [r2, #12]
}
 810cb44:	bf00      	nop
 810cb46:	3714      	adds	r7, #20
 810cb48:	46bd      	mov	sp, r7
 810cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb4e:	4770      	bx	lr
 810cb50:	e000ed00 	.word	0xe000ed00

0810cb54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810cb54:	b480      	push	{r7}
 810cb56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810cb58:	4b04      	ldr	r3, [pc, #16]	@ (810cb6c <__NVIC_GetPriorityGrouping+0x18>)
 810cb5a:	68db      	ldr	r3, [r3, #12]
 810cb5c:	0a1b      	lsrs	r3, r3, #8
 810cb5e:	f003 0307 	and.w	r3, r3, #7
}
 810cb62:	4618      	mov	r0, r3
 810cb64:	46bd      	mov	sp, r7
 810cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb6a:	4770      	bx	lr
 810cb6c:	e000ed00 	.word	0xe000ed00

0810cb70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810cb70:	b480      	push	{r7}
 810cb72:	b083      	sub	sp, #12
 810cb74:	af00      	add	r7, sp, #0
 810cb76:	4603      	mov	r3, r0
 810cb78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810cb7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810cb7e:	2b00      	cmp	r3, #0
 810cb80:	db0b      	blt.n	810cb9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810cb82:	88fb      	ldrh	r3, [r7, #6]
 810cb84:	f003 021f 	and.w	r2, r3, #31
 810cb88:	4907      	ldr	r1, [pc, #28]	@ (810cba8 <__NVIC_EnableIRQ+0x38>)
 810cb8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810cb8e:	095b      	lsrs	r3, r3, #5
 810cb90:	2001      	movs	r0, #1
 810cb92:	fa00 f202 	lsl.w	r2, r0, r2
 810cb96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810cb9a:	bf00      	nop
 810cb9c:	370c      	adds	r7, #12
 810cb9e:	46bd      	mov	sp, r7
 810cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cba4:	4770      	bx	lr
 810cba6:	bf00      	nop
 810cba8:	e000e100 	.word	0xe000e100

0810cbac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810cbac:	b480      	push	{r7}
 810cbae:	b083      	sub	sp, #12
 810cbb0:	af00      	add	r7, sp, #0
 810cbb2:	4603      	mov	r3, r0
 810cbb4:	6039      	str	r1, [r7, #0]
 810cbb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810cbb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810cbbc:	2b00      	cmp	r3, #0
 810cbbe:	db0a      	blt.n	810cbd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810cbc0:	683b      	ldr	r3, [r7, #0]
 810cbc2:	b2da      	uxtb	r2, r3
 810cbc4:	490c      	ldr	r1, [pc, #48]	@ (810cbf8 <__NVIC_SetPriority+0x4c>)
 810cbc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810cbca:	0112      	lsls	r2, r2, #4
 810cbcc:	b2d2      	uxtb	r2, r2
 810cbce:	440b      	add	r3, r1
 810cbd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810cbd4:	e00a      	b.n	810cbec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810cbd6:	683b      	ldr	r3, [r7, #0]
 810cbd8:	b2da      	uxtb	r2, r3
 810cbda:	4908      	ldr	r1, [pc, #32]	@ (810cbfc <__NVIC_SetPriority+0x50>)
 810cbdc:	88fb      	ldrh	r3, [r7, #6]
 810cbde:	f003 030f 	and.w	r3, r3, #15
 810cbe2:	3b04      	subs	r3, #4
 810cbe4:	0112      	lsls	r2, r2, #4
 810cbe6:	b2d2      	uxtb	r2, r2
 810cbe8:	440b      	add	r3, r1
 810cbea:	761a      	strb	r2, [r3, #24]
}
 810cbec:	bf00      	nop
 810cbee:	370c      	adds	r7, #12
 810cbf0:	46bd      	mov	sp, r7
 810cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbf6:	4770      	bx	lr
 810cbf8:	e000e100 	.word	0xe000e100
 810cbfc:	e000ed00 	.word	0xe000ed00

0810cc00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810cc00:	b480      	push	{r7}
 810cc02:	b089      	sub	sp, #36	@ 0x24
 810cc04:	af00      	add	r7, sp, #0
 810cc06:	60f8      	str	r0, [r7, #12]
 810cc08:	60b9      	str	r1, [r7, #8]
 810cc0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810cc0c:	68fb      	ldr	r3, [r7, #12]
 810cc0e:	f003 0307 	and.w	r3, r3, #7
 810cc12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810cc14:	69fb      	ldr	r3, [r7, #28]
 810cc16:	f1c3 0307 	rsb	r3, r3, #7
 810cc1a:	2b04      	cmp	r3, #4
 810cc1c:	bf28      	it	cs
 810cc1e:	2304      	movcs	r3, #4
 810cc20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810cc22:	69fb      	ldr	r3, [r7, #28]
 810cc24:	3304      	adds	r3, #4
 810cc26:	2b06      	cmp	r3, #6
 810cc28:	d902      	bls.n	810cc30 <NVIC_EncodePriority+0x30>
 810cc2a:	69fb      	ldr	r3, [r7, #28]
 810cc2c:	3b03      	subs	r3, #3
 810cc2e:	e000      	b.n	810cc32 <NVIC_EncodePriority+0x32>
 810cc30:	2300      	movs	r3, #0
 810cc32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810cc34:	f04f 32ff 	mov.w	r2, #4294967295
 810cc38:	69bb      	ldr	r3, [r7, #24]
 810cc3a:	fa02 f303 	lsl.w	r3, r2, r3
 810cc3e:	43da      	mvns	r2, r3
 810cc40:	68bb      	ldr	r3, [r7, #8]
 810cc42:	401a      	ands	r2, r3
 810cc44:	697b      	ldr	r3, [r7, #20]
 810cc46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810cc48:	f04f 31ff 	mov.w	r1, #4294967295
 810cc4c:	697b      	ldr	r3, [r7, #20]
 810cc4e:	fa01 f303 	lsl.w	r3, r1, r3
 810cc52:	43d9      	mvns	r1, r3
 810cc54:	687b      	ldr	r3, [r7, #4]
 810cc56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810cc58:	4313      	orrs	r3, r2
         );
}
 810cc5a:	4618      	mov	r0, r3
 810cc5c:	3724      	adds	r7, #36	@ 0x24
 810cc5e:	46bd      	mov	sp, r7
 810cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc64:	4770      	bx	lr

0810cc66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810cc66:	b580      	push	{r7, lr}
 810cc68:	b082      	sub	sp, #8
 810cc6a:	af00      	add	r7, sp, #0
 810cc6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810cc6e:	6878      	ldr	r0, [r7, #4]
 810cc70:	f7ff ff4c 	bl	810cb0c <__NVIC_SetPriorityGrouping>
}
 810cc74:	bf00      	nop
 810cc76:	3708      	adds	r7, #8
 810cc78:	46bd      	mov	sp, r7
 810cc7a:	bd80      	pop	{r7, pc}

0810cc7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810cc7c:	b580      	push	{r7, lr}
 810cc7e:	b086      	sub	sp, #24
 810cc80:	af00      	add	r7, sp, #0
 810cc82:	4603      	mov	r3, r0
 810cc84:	60b9      	str	r1, [r7, #8]
 810cc86:	607a      	str	r2, [r7, #4]
 810cc88:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810cc8a:	f7ff ff63 	bl	810cb54 <__NVIC_GetPriorityGrouping>
 810cc8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810cc90:	687a      	ldr	r2, [r7, #4]
 810cc92:	68b9      	ldr	r1, [r7, #8]
 810cc94:	6978      	ldr	r0, [r7, #20]
 810cc96:	f7ff ffb3 	bl	810cc00 <NVIC_EncodePriority>
 810cc9a:	4602      	mov	r2, r0
 810cc9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810cca0:	4611      	mov	r1, r2
 810cca2:	4618      	mov	r0, r3
 810cca4:	f7ff ff82 	bl	810cbac <__NVIC_SetPriority>
}
 810cca8:	bf00      	nop
 810ccaa:	3718      	adds	r7, #24
 810ccac:	46bd      	mov	sp, r7
 810ccae:	bd80      	pop	{r7, pc}

0810ccb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810ccb0:	b580      	push	{r7, lr}
 810ccb2:	b082      	sub	sp, #8
 810ccb4:	af00      	add	r7, sp, #0
 810ccb6:	4603      	mov	r3, r0
 810ccb8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810ccba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810ccbe:	4618      	mov	r0, r3
 810ccc0:	f7ff ff56 	bl	810cb70 <__NVIC_EnableIRQ>
}
 810ccc4:	bf00      	nop
 810ccc6:	3708      	adds	r7, #8
 810ccc8:	46bd      	mov	sp, r7
 810ccca:	bd80      	pop	{r7, pc}

0810cccc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810cccc:	b480      	push	{r7}
 810ccce:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810ccd0:	4b07      	ldr	r3, [pc, #28]	@ (810ccf0 <HAL_GetCurrentCPUID+0x24>)
 810ccd2:	681b      	ldr	r3, [r3, #0]
 810ccd4:	091b      	lsrs	r3, r3, #4
 810ccd6:	f003 030f 	and.w	r3, r3, #15
 810ccda:	2b07      	cmp	r3, #7
 810ccdc:	d101      	bne.n	810cce2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810ccde:	2303      	movs	r3, #3
 810cce0:	e000      	b.n	810cce4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810cce2:	2301      	movs	r3, #1
  }
}
 810cce4:	4618      	mov	r0, r3
 810cce6:	46bd      	mov	sp, r7
 810cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccec:	4770      	bx	lr
 810ccee:	bf00      	nop
 810ccf0:	e000ed00 	.word	0xe000ed00

0810ccf4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 810ccf4:	b580      	push	{r7, lr}
 810ccf6:	b084      	sub	sp, #16
 810ccf8:	af00      	add	r7, sp, #0
 810ccfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 810ccfc:	687b      	ldr	r3, [r7, #4]
 810ccfe:	2b00      	cmp	r3, #0
 810cd00:	d101      	bne.n	810cd06 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810cd02:	2301      	movs	r3, #1
 810cd04:	e0e7      	b.n	810ced6 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 810cd06:	687b      	ldr	r3, [r7, #4]
 810cd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810cd0c:	2b00      	cmp	r3, #0
 810cd0e:	d106      	bne.n	810cd1e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810cd10:	687b      	ldr	r3, [r7, #4]
 810cd12:	2223      	movs	r2, #35	@ 0x23
 810cd14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 810cd18:	6878      	ldr	r0, [r7, #4]
 810cd1a:	f7fc ffd1 	bl	8109cc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810cd1e:	4b70      	ldr	r3, [pc, #448]	@ (810cee0 <HAL_ETH_Init+0x1ec>)
 810cd20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810cd24:	4a6e      	ldr	r2, [pc, #440]	@ (810cee0 <HAL_ETH_Init+0x1ec>)
 810cd26:	f043 0302 	orr.w	r3, r3, #2
 810cd2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810cd2e:	4b6c      	ldr	r3, [pc, #432]	@ (810cee0 <HAL_ETH_Init+0x1ec>)
 810cd30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810cd34:	f003 0302 	and.w	r3, r3, #2
 810cd38:	60bb      	str	r3, [r7, #8]
 810cd3a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 810cd3c:	687b      	ldr	r3, [r7, #4]
 810cd3e:	7a1b      	ldrb	r3, [r3, #8]
 810cd40:	2b00      	cmp	r3, #0
 810cd42:	d103      	bne.n	810cd4c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 810cd44:	2000      	movs	r0, #0
 810cd46:	f7ff fecd 	bl	810cae4 <HAL_SYSCFG_ETHInterfaceSelect>
 810cd4a:	e003      	b.n	810cd54 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 810cd4c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810cd50:	f7ff fec8 	bl	810cae4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 810cd54:	4b63      	ldr	r3, [pc, #396]	@ (810cee4 <HAL_ETH_Init+0x1f0>)
 810cd56:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 810cd58:	687b      	ldr	r3, [r7, #4]
 810cd5a:	681b      	ldr	r3, [r3, #0]
 810cd5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cd60:	681b      	ldr	r3, [r3, #0]
 810cd62:	687a      	ldr	r2, [r7, #4]
 810cd64:	6812      	ldr	r2, [r2, #0]
 810cd66:	f043 0301 	orr.w	r3, r3, #1
 810cd6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810cd6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 810cd70:	f7ff feac 	bl	810cacc <HAL_GetTick>
 810cd74:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810cd76:	e011      	b.n	810cd9c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 810cd78:	f7ff fea8 	bl	810cacc <HAL_GetTick>
 810cd7c:	4602      	mov	r2, r0
 810cd7e:	68fb      	ldr	r3, [r7, #12]
 810cd80:	1ad3      	subs	r3, r2, r3
 810cd82:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 810cd86:	d909      	bls.n	810cd9c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 810cd88:	687b      	ldr	r3, [r7, #4]
 810cd8a:	2204      	movs	r2, #4
 810cd8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 810cd90:	687b      	ldr	r3, [r7, #4]
 810cd92:	22e0      	movs	r2, #224	@ 0xe0
 810cd94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 810cd98:	2301      	movs	r3, #1
 810cd9a:	e09c      	b.n	810ced6 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810cd9c:	687b      	ldr	r3, [r7, #4]
 810cd9e:	681b      	ldr	r3, [r3, #0]
 810cda0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cda4:	681b      	ldr	r3, [r3, #0]
 810cda6:	f003 0301 	and.w	r3, r3, #1
 810cdaa:	2b00      	cmp	r3, #0
 810cdac:	d1e4      	bne.n	810cd78 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 810cdae:	6878      	ldr	r0, [r7, #4]
 810cdb0:	f000 ff34 	bl	810dc1c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 810cdb4:	f002 ff32 	bl	810fc1c <HAL_RCC_GetHCLKFreq>
 810cdb8:	4603      	mov	r3, r0
 810cdba:	4a4b      	ldr	r2, [pc, #300]	@ (810cee8 <HAL_ETH_Init+0x1f4>)
 810cdbc:	fba2 2303 	umull	r2, r3, r2, r3
 810cdc0:	0c9a      	lsrs	r2, r3, #18
 810cdc2:	687b      	ldr	r3, [r7, #4]
 810cdc4:	681b      	ldr	r3, [r3, #0]
 810cdc6:	3a01      	subs	r2, #1
 810cdc8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 810cdcc:	6878      	ldr	r0, [r7, #4]
 810cdce:	f001 f931 	bl	810e034 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 810cdd2:	687b      	ldr	r3, [r7, #4]
 810cdd4:	681b      	ldr	r3, [r3, #0]
 810cdd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cdda:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810cdde:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 810cde2:	687a      	ldr	r2, [r7, #4]
 810cde4:	6812      	ldr	r2, [r2, #0]
 810cde6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810cdea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810cdee:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810cdf2:	687b      	ldr	r3, [r7, #4]
 810cdf4:	695b      	ldr	r3, [r3, #20]
 810cdf6:	f003 0303 	and.w	r3, r3, #3
 810cdfa:	2b00      	cmp	r3, #0
 810cdfc:	d009      	beq.n	810ce12 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810cdfe:	687b      	ldr	r3, [r7, #4]
 810ce00:	2201      	movs	r2, #1
 810ce02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 810ce06:	687b      	ldr	r3, [r7, #4]
 810ce08:	22e0      	movs	r2, #224	@ 0xe0
 810ce0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810ce0e:	2301      	movs	r3, #1
 810ce10:	e061      	b.n	810ced6 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810ce12:	687b      	ldr	r3, [r7, #4]
 810ce14:	681b      	ldr	r3, [r3, #0]
 810ce16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810ce1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810ce1e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810ce22:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 810ce26:	687a      	ldr	r2, [r7, #4]
 810ce28:	6952      	ldr	r2, [r2, #20]
 810ce2a:	0051      	lsls	r1, r2, #1
 810ce2c:	687a      	ldr	r2, [r7, #4]
 810ce2e:	6812      	ldr	r2, [r2, #0]
 810ce30:	430b      	orrs	r3, r1
 810ce32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810ce36:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810ce3a:	6878      	ldr	r0, [r7, #4]
 810ce3c:	f001 f997 	bl	810e16e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 810ce40:	6878      	ldr	r0, [r7, #4]
 810ce42:	f001 f9dd 	bl	810e200 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 810ce46:	687b      	ldr	r3, [r7, #4]
 810ce48:	685b      	ldr	r3, [r3, #4]
 810ce4a:	3305      	adds	r3, #5
 810ce4c:	781b      	ldrb	r3, [r3, #0]
 810ce4e:	021a      	lsls	r2, r3, #8
 810ce50:	687b      	ldr	r3, [r7, #4]
 810ce52:	685b      	ldr	r3, [r3, #4]
 810ce54:	3304      	adds	r3, #4
 810ce56:	781b      	ldrb	r3, [r3, #0]
 810ce58:	4619      	mov	r1, r3
 810ce5a:	687b      	ldr	r3, [r7, #4]
 810ce5c:	681b      	ldr	r3, [r3, #0]
 810ce5e:	430a      	orrs	r2, r1
 810ce60:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810ce64:	687b      	ldr	r3, [r7, #4]
 810ce66:	685b      	ldr	r3, [r3, #4]
 810ce68:	3303      	adds	r3, #3
 810ce6a:	781b      	ldrb	r3, [r3, #0]
 810ce6c:	061a      	lsls	r2, r3, #24
 810ce6e:	687b      	ldr	r3, [r7, #4]
 810ce70:	685b      	ldr	r3, [r3, #4]
 810ce72:	3302      	adds	r3, #2
 810ce74:	781b      	ldrb	r3, [r3, #0]
 810ce76:	041b      	lsls	r3, r3, #16
 810ce78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810ce7a:	687b      	ldr	r3, [r7, #4]
 810ce7c:	685b      	ldr	r3, [r3, #4]
 810ce7e:	3301      	adds	r3, #1
 810ce80:	781b      	ldrb	r3, [r3, #0]
 810ce82:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810ce84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810ce86:	687b      	ldr	r3, [r7, #4]
 810ce88:	685b      	ldr	r3, [r3, #4]
 810ce8a:	781b      	ldrb	r3, [r3, #0]
 810ce8c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810ce8e:	687b      	ldr	r3, [r7, #4]
 810ce90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810ce92:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810ce94:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 810ce98:	687b      	ldr	r3, [r7, #4]
 810ce9a:	681b      	ldr	r3, [r3, #0]
 810ce9c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 810cea0:	687b      	ldr	r3, [r7, #4]
 810cea2:	681a      	ldr	r2, [r3, #0]
 810cea4:	4b11      	ldr	r3, [pc, #68]	@ (810ceec <HAL_ETH_Init+0x1f8>)
 810cea6:	430b      	orrs	r3, r1
 810cea8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 810ceac:	687b      	ldr	r3, [r7, #4]
 810ceae:	681b      	ldr	r3, [r3, #0]
 810ceb0:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 810ceb4:	687a      	ldr	r2, [r7, #4]
 810ceb6:	6812      	ldr	r2, [r2, #0]
 810ceb8:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 810cebc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 810cec0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 810cec4:	687b      	ldr	r3, [r7, #4]
 810cec6:	2200      	movs	r2, #0
 810cec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 810cecc:	687b      	ldr	r3, [r7, #4]
 810cece:	2210      	movs	r2, #16
 810ced0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ced4:	2300      	movs	r3, #0
}
 810ced6:	4618      	mov	r0, r3
 810ced8:	3710      	adds	r7, #16
 810ceda:	46bd      	mov	sp, r7
 810cedc:	bd80      	pop	{r7, pc}
 810cede:	bf00      	nop
 810cee0:	58024400 	.word	0x58024400
 810cee4:	58000400 	.word	0x58000400
 810cee8:	431bde83 	.word	0x431bde83
 810ceec:	0c020060 	.word	0x0c020060

0810cef0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 810cef0:	b580      	push	{r7, lr}
 810cef2:	b082      	sub	sp, #8
 810cef4:	af00      	add	r7, sp, #0
 810cef6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 810cef8:	687b      	ldr	r3, [r7, #4]
 810cefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810cefe:	2b10      	cmp	r3, #16
 810cf00:	d166      	bne.n	810cfd0 <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810cf02:	687b      	ldr	r3, [r7, #4]
 810cf04:	2223      	movs	r2, #35	@ 0x23
 810cf06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 810cf0a:	687b      	ldr	r3, [r7, #4]
 810cf0c:	2201      	movs	r2, #1
 810cf0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 810cf10:	687b      	ldr	r3, [r7, #4]
 810cf12:	2204      	movs	r2, #4
 810cf14:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 810cf16:	6878      	ldr	r0, [r7, #4]
 810cf18:	f000 f9e5 	bl	810d2e6 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 810cf1c:	687b      	ldr	r3, [r7, #4]
 810cf1e:	681b      	ldr	r3, [r3, #0]
 810cf20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cf24:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810cf28:	687a      	ldr	r2, [r7, #4]
 810cf2a:	6812      	ldr	r2, [r2, #0]
 810cf2c:	f043 0301 	orr.w	r3, r3, #1
 810cf30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810cf34:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810cf38:	687b      	ldr	r3, [r7, #4]
 810cf3a:	681b      	ldr	r3, [r3, #0]
 810cf3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cf40:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810cf44:	687a      	ldr	r2, [r7, #4]
 810cf46:	6812      	ldr	r2, [r2, #0]
 810cf48:	f043 0301 	orr.w	r3, r3, #1
 810cf4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810cf50:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 810cf54:	687b      	ldr	r3, [r7, #4]
 810cf56:	681b      	ldr	r3, [r3, #0]
 810cf58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cf5c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810cf60:	687a      	ldr	r2, [r7, #4]
 810cf62:	6812      	ldr	r2, [r2, #0]
 810cf64:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 810cf68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810cf6c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810cf70:	687b      	ldr	r3, [r7, #4]
 810cf72:	681b      	ldr	r3, [r3, #0]
 810cf74:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 810cf78:	687b      	ldr	r3, [r7, #4]
 810cf7a:	681b      	ldr	r3, [r3, #0]
 810cf7c:	f042 0201 	orr.w	r2, r2, #1
 810cf80:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810cf84:	687b      	ldr	r3, [r7, #4]
 810cf86:	681b      	ldr	r3, [r3, #0]
 810cf88:	681a      	ldr	r2, [r3, #0]
 810cf8a:	687b      	ldr	r3, [r7, #4]
 810cf8c:	681b      	ldr	r3, [r3, #0]
 810cf8e:	f042 0202 	orr.w	r2, r2, #2
 810cf92:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 810cf94:	687b      	ldr	r3, [r7, #4]
 810cf96:	681b      	ldr	r3, [r3, #0]
 810cf98:	681a      	ldr	r2, [r3, #0]
 810cf9a:	687b      	ldr	r3, [r7, #4]
 810cf9c:	681b      	ldr	r3, [r3, #0]
 810cf9e:	f042 0201 	orr.w	r2, r2, #1
 810cfa2:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 810cfa4:	687b      	ldr	r3, [r7, #4]
 810cfa6:	681b      	ldr	r3, [r3, #0]
 810cfa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cfac:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810cfb0:	687a      	ldr	r2, [r7, #4]
 810cfb2:	6812      	ldr	r2, [r2, #0]
 810cfb4:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 810cfb8:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 810cfbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810cfc0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 810cfc4:	687b      	ldr	r3, [r7, #4]
 810cfc6:	2223      	movs	r2, #35	@ 0x23
 810cfc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 810cfcc:	2300      	movs	r3, #0
 810cfce:	e000      	b.n	810cfd2 <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 810cfd0:	2301      	movs	r3, #1
  }
}
 810cfd2:	4618      	mov	r0, r3
 810cfd4:	3708      	adds	r7, #8
 810cfd6:	46bd      	mov	sp, r7
 810cfd8:	bd80      	pop	{r7, pc}

0810cfda <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 810cfda:	b480      	push	{r7}
 810cfdc:	b085      	sub	sp, #20
 810cfde:	af00      	add	r7, sp, #0
 810cfe0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810cfe2:	687b      	ldr	r3, [r7, #4]
 810cfe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810cfe8:	2b23      	cmp	r3, #35	@ 0x23
 810cfea:	d167      	bne.n	810d0bc <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 810cfec:	687b      	ldr	r3, [r7, #4]
 810cfee:	2223      	movs	r2, #35	@ 0x23
 810cff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 810cff4:	687b      	ldr	r3, [r7, #4]
 810cff6:	681b      	ldr	r3, [r3, #0]
 810cff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810cffc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810d000:	687a      	ldr	r2, [r7, #4]
 810d002:	6812      	ldr	r2, [r2, #0]
 810d004:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 810d008:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 810d00c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d010:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	681b      	ldr	r3, [r3, #0]
 810d018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d01c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810d020:	687a      	ldr	r2, [r7, #4]
 810d022:	6812      	ldr	r2, [r2, #0]
 810d024:	f023 0301 	bic.w	r3, r3, #1
 810d028:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d02c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810d030:	687b      	ldr	r3, [r7, #4]
 810d032:	681b      	ldr	r3, [r3, #0]
 810d034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d038:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810d03c:	687a      	ldr	r2, [r7, #4]
 810d03e:	6812      	ldr	r2, [r2, #0]
 810d040:	f023 0301 	bic.w	r3, r3, #1
 810d044:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d048:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 810d04c:	687b      	ldr	r3, [r7, #4]
 810d04e:	681b      	ldr	r3, [r3, #0]
 810d050:	681a      	ldr	r2, [r3, #0]
 810d052:	687b      	ldr	r3, [r7, #4]
 810d054:	681b      	ldr	r3, [r3, #0]
 810d056:	f022 0201 	bic.w	r2, r2, #1
 810d05a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810d05c:	687b      	ldr	r3, [r7, #4]
 810d05e:	681b      	ldr	r3, [r3, #0]
 810d060:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 810d064:	687b      	ldr	r3, [r7, #4]
 810d066:	681b      	ldr	r3, [r3, #0]
 810d068:	f042 0201 	orr.w	r2, r2, #1
 810d06c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810d070:	687b      	ldr	r3, [r7, #4]
 810d072:	681b      	ldr	r3, [r3, #0]
 810d074:	681a      	ldr	r2, [r3, #0]
 810d076:	687b      	ldr	r3, [r7, #4]
 810d078:	681b      	ldr	r3, [r3, #0]
 810d07a:	f022 0202 	bic.w	r2, r2, #2
 810d07e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810d080:	2300      	movs	r3, #0
 810d082:	60fb      	str	r3, [r7, #12]
 810d084:	e00e      	b.n	810d0a4 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 810d086:	687b      	ldr	r3, [r7, #4]
 810d088:	68fa      	ldr	r2, [r7, #12]
 810d08a:	3212      	adds	r2, #18
 810d08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d090:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 810d092:	68bb      	ldr	r3, [r7, #8]
 810d094:	68db      	ldr	r3, [r3, #12]
 810d096:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810d09a:	68bb      	ldr	r3, [r7, #8]
 810d09c:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810d09e:	68fb      	ldr	r3, [r7, #12]
 810d0a0:	3301      	adds	r3, #1
 810d0a2:	60fb      	str	r3, [r7, #12]
 810d0a4:	68fb      	ldr	r3, [r7, #12]
 810d0a6:	2b03      	cmp	r3, #3
 810d0a8:	d9ed      	bls.n	810d086 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 810d0aa:	687b      	ldr	r3, [r7, #4]
 810d0ac:	2200      	movs	r2, #0
 810d0ae:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 810d0b0:	687b      	ldr	r3, [r7, #4]
 810d0b2:	2210      	movs	r2, #16
 810d0b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 810d0b8:	2300      	movs	r3, #0
 810d0ba:	e000      	b.n	810d0be <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 810d0bc:	2301      	movs	r3, #1
  }
}
 810d0be:	4618      	mov	r0, r3
 810d0c0:	3714      	adds	r7, #20
 810d0c2:	46bd      	mov	sp, r7
 810d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0c8:	4770      	bx	lr

0810d0ca <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 810d0ca:	b580      	push	{r7, lr}
 810d0cc:	b082      	sub	sp, #8
 810d0ce:	af00      	add	r7, sp, #0
 810d0d0:	6078      	str	r0, [r7, #4]
 810d0d2:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 810d0d4:	683b      	ldr	r3, [r7, #0]
 810d0d6:	2b00      	cmp	r3, #0
 810d0d8:	d109      	bne.n	810d0ee <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 810d0da:	687b      	ldr	r3, [r7, #4]
 810d0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d0e0:	f043 0201 	orr.w	r2, r3, #1
 810d0e4:	687b      	ldr	r3, [r7, #4]
 810d0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 810d0ea:	2301      	movs	r3, #1
 810d0ec:	e03a      	b.n	810d164 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810d0ee:	687b      	ldr	r3, [r7, #4]
 810d0f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810d0f4:	2b23      	cmp	r3, #35	@ 0x23
 810d0f6:	d134      	bne.n	810d162 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 810d0f8:	683b      	ldr	r3, [r7, #0]
 810d0fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810d0fc:	687b      	ldr	r3, [r7, #4]
 810d0fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 810d100:	2201      	movs	r2, #1
 810d102:	6839      	ldr	r1, [r7, #0]
 810d104:	6878      	ldr	r0, [r7, #4]
 810d106:	f001 f8d8 	bl	810e2ba <ETH_Prepare_Tx_Descriptors>
 810d10a:	4603      	mov	r3, r0
 810d10c:	2b00      	cmp	r3, #0
 810d10e:	d009      	beq.n	810d124 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 810d110:	687b      	ldr	r3, [r7, #4]
 810d112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d116:	f043 0202 	orr.w	r2, r3, #2
 810d11a:	687b      	ldr	r3, [r7, #4]
 810d11c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 810d120:	2301      	movs	r3, #1
 810d122:	e01f      	b.n	810d164 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 810d124:	f3bf 8f4f 	dsb	sy
}
 810d128:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 810d12a:	687b      	ldr	r3, [r7, #4]
 810d12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d12e:	1c5a      	adds	r2, r3, #1
 810d130:	687b      	ldr	r3, [r7, #4]
 810d132:	629a      	str	r2, [r3, #40]	@ 0x28
 810d134:	687b      	ldr	r3, [r7, #4]
 810d136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d138:	2b03      	cmp	r3, #3
 810d13a:	d904      	bls.n	810d146 <HAL_ETH_Transmit_IT+0x7c>
 810d13c:	687b      	ldr	r3, [r7, #4]
 810d13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d140:	1f1a      	subs	r2, r3, #4
 810d142:	687b      	ldr	r3, [r7, #4]
 810d144:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 810d146:	687b      	ldr	r3, [r7, #4]
 810d148:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 810d14a:	687b      	ldr	r3, [r7, #4]
 810d14c:	681a      	ldr	r2, [r3, #0]
 810d14e:	687b      	ldr	r3, [r7, #4]
 810d150:	3106      	adds	r1, #6
 810d152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810d156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d15a:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 810d15e:	2300      	movs	r3, #0
 810d160:	e000      	b.n	810d164 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 810d162:	2301      	movs	r3, #1
  }
}
 810d164:	4618      	mov	r0, r3
 810d166:	3708      	adds	r7, #8
 810d168:	46bd      	mov	sp, r7
 810d16a:	bd80      	pop	{r7, pc}

0810d16c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 810d16c:	b580      	push	{r7, lr}
 810d16e:	b088      	sub	sp, #32
 810d170:	af00      	add	r7, sp, #0
 810d172:	6078      	str	r0, [r7, #4]
 810d174:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 810d176:	2300      	movs	r3, #0
 810d178:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 810d17a:	2300      	movs	r3, #0
 810d17c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 810d17e:	683b      	ldr	r3, [r7, #0]
 810d180:	2b00      	cmp	r3, #0
 810d182:	d109      	bne.n	810d198 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 810d184:	687b      	ldr	r3, [r7, #4]
 810d186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d18a:	f043 0201 	orr.w	r2, r3, #1
 810d18e:	687b      	ldr	r3, [r7, #4]
 810d190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 810d194:	2301      	movs	r3, #1
 810d196:	e0a2      	b.n	810d2de <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 810d198:	687b      	ldr	r3, [r7, #4]
 810d19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810d19e:	2b23      	cmp	r3, #35	@ 0x23
 810d1a0:	d001      	beq.n	810d1a6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 810d1a2:	2301      	movs	r3, #1
 810d1a4:	e09b      	b.n	810d2de <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 810d1a6:	687b      	ldr	r3, [r7, #4]
 810d1a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810d1aa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810d1ac:	687b      	ldr	r3, [r7, #4]
 810d1ae:	69fa      	ldr	r2, [r7, #28]
 810d1b0:	3212      	adds	r2, #18
 810d1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d1b6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 810d1b8:	687b      	ldr	r3, [r7, #4]
 810d1ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810d1bc:	f1c3 0304 	rsb	r3, r3, #4
 810d1c0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810d1c2:	e064      	b.n	810d28e <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 810d1c4:	69bb      	ldr	r3, [r7, #24]
 810d1c6:	68db      	ldr	r3, [r3, #12]
 810d1c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810d1cc:	2b00      	cmp	r3, #0
 810d1ce:	d007      	beq.n	810d1e0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 810d1d0:	69bb      	ldr	r3, [r7, #24]
 810d1d2:	685a      	ldr	r2, [r3, #4]
 810d1d4:	687b      	ldr	r3, [r7, #4]
 810d1d6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 810d1d8:	69bb      	ldr	r3, [r7, #24]
 810d1da:	681a      	ldr	r2, [r3, #0]
 810d1dc:	687b      	ldr	r3, [r7, #4]
 810d1de:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 810d1e0:	69bb      	ldr	r3, [r7, #24]
 810d1e2:	68db      	ldr	r3, [r3, #12]
 810d1e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810d1e8:	2b00      	cmp	r3, #0
 810d1ea:	d103      	bne.n	810d1f4 <HAL_ETH_ReadData+0x88>
 810d1ec:	687b      	ldr	r3, [r7, #4]
 810d1ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810d1f0:	2b00      	cmp	r3, #0
 810d1f2:	d03a      	beq.n	810d26a <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 810d1f4:	69bb      	ldr	r3, [r7, #24]
 810d1f6:	68db      	ldr	r3, [r3, #12]
 810d1f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810d1fc:	2b00      	cmp	r3, #0
 810d1fe:	d005      	beq.n	810d20c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 810d200:	687b      	ldr	r3, [r7, #4]
 810d202:	2200      	movs	r2, #0
 810d204:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 810d206:	687b      	ldr	r3, [r7, #4]
 810d208:	2200      	movs	r2, #0
 810d20a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 810d20c:	69bb      	ldr	r3, [r7, #24]
 810d20e:	68db      	ldr	r3, [r3, #12]
 810d210:	f3c3 020e 	ubfx	r2, r3, #0, #15
 810d214:	687b      	ldr	r3, [r7, #4]
 810d216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810d218:	1ad3      	subs	r3, r2, r3
 810d21a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 810d21c:	69bb      	ldr	r3, [r7, #24]
 810d21e:	68db      	ldr	r3, [r3, #12]
 810d220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810d224:	2b00      	cmp	r3, #0
 810d226:	d005      	beq.n	810d234 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 810d228:	69bb      	ldr	r3, [r7, #24]
 810d22a:	68da      	ldr	r2, [r3, #12]
 810d22c:	687b      	ldr	r3, [r7, #4]
 810d22e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 810d230:	2301      	movs	r3, #1
 810d232:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 810d234:	687b      	ldr	r3, [r7, #4]
 810d236:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 810d23a:	687b      	ldr	r3, [r7, #4]
 810d23c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 810d240:	69bb      	ldr	r3, [r7, #24]
 810d242:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 810d244:	461a      	mov	r2, r3
 810d246:	68bb      	ldr	r3, [r7, #8]
 810d248:	b29b      	uxth	r3, r3
 810d24a:	f7fc ff01 	bl	810a050 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 810d24e:	687b      	ldr	r3, [r7, #4]
 810d250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810d252:	1c5a      	adds	r2, r3, #1
 810d254:	687b      	ldr	r3, [r7, #4]
 810d256:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 810d258:	687b      	ldr	r3, [r7, #4]
 810d25a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810d25c:	68bb      	ldr	r3, [r7, #8]
 810d25e:	441a      	add	r2, r3
 810d260:	687b      	ldr	r3, [r7, #4]
 810d262:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 810d264:	69bb      	ldr	r3, [r7, #24]
 810d266:	2200      	movs	r2, #0
 810d268:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 810d26a:	69fb      	ldr	r3, [r7, #28]
 810d26c:	3301      	adds	r3, #1
 810d26e:	61fb      	str	r3, [r7, #28]
 810d270:	69fb      	ldr	r3, [r7, #28]
 810d272:	2b03      	cmp	r3, #3
 810d274:	d902      	bls.n	810d27c <HAL_ETH_ReadData+0x110>
 810d276:	69fb      	ldr	r3, [r7, #28]
 810d278:	3b04      	subs	r3, #4
 810d27a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810d27c:	687b      	ldr	r3, [r7, #4]
 810d27e:	69fa      	ldr	r2, [r7, #28]
 810d280:	3212      	adds	r2, #18
 810d282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d286:	61bb      	str	r3, [r7, #24]
    desccnt++;
 810d288:	697b      	ldr	r3, [r7, #20]
 810d28a:	3301      	adds	r3, #1
 810d28c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810d28e:	69bb      	ldr	r3, [r7, #24]
 810d290:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 810d292:	2b00      	cmp	r3, #0
 810d294:	db06      	blt.n	810d2a4 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810d296:	697a      	ldr	r2, [r7, #20]
 810d298:	68fb      	ldr	r3, [r7, #12]
 810d29a:	429a      	cmp	r2, r3
 810d29c:	d202      	bcs.n	810d2a4 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 810d29e:	7cfb      	ldrb	r3, [r7, #19]
 810d2a0:	2b00      	cmp	r3, #0
 810d2a2:	d08f      	beq.n	810d1c4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 810d2a4:	687b      	ldr	r3, [r7, #4]
 810d2a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810d2a8:	697b      	ldr	r3, [r7, #20]
 810d2aa:	441a      	add	r2, r3
 810d2ac:	687b      	ldr	r3, [r7, #4]
 810d2ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 810d2b0:	687b      	ldr	r3, [r7, #4]
 810d2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810d2b4:	2b00      	cmp	r3, #0
 810d2b6:	d002      	beq.n	810d2be <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 810d2b8:	6878      	ldr	r0, [r7, #4]
 810d2ba:	f000 f814 	bl	810d2e6 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 810d2be:	687b      	ldr	r3, [r7, #4]
 810d2c0:	69fa      	ldr	r2, [r7, #28]
 810d2c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 810d2c4:	7cfb      	ldrb	r3, [r7, #19]
 810d2c6:	2b01      	cmp	r3, #1
 810d2c8:	d108      	bne.n	810d2dc <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 810d2ca:	687b      	ldr	r3, [r7, #4]
 810d2cc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 810d2ce:	683b      	ldr	r3, [r7, #0]
 810d2d0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 810d2d2:	687b      	ldr	r3, [r7, #4]
 810d2d4:	2200      	movs	r2, #0
 810d2d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 810d2d8:	2300      	movs	r3, #0
 810d2da:	e000      	b.n	810d2de <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 810d2dc:	2301      	movs	r3, #1
}
 810d2de:	4618      	mov	r0, r3
 810d2e0:	3720      	adds	r7, #32
 810d2e2:	46bd      	mov	sp, r7
 810d2e4:	bd80      	pop	{r7, pc}

0810d2e6 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 810d2e6:	b580      	push	{r7, lr}
 810d2e8:	b088      	sub	sp, #32
 810d2ea:	af00      	add	r7, sp, #0
 810d2ec:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 810d2ee:	2300      	movs	r3, #0
 810d2f0:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 810d2f2:	2301      	movs	r3, #1
 810d2f4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 810d2f6:	687b      	ldr	r3, [r7, #4]
 810d2f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810d2fa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810d2fc:	687b      	ldr	r3, [r7, #4]
 810d2fe:	69fa      	ldr	r2, [r7, #28]
 810d300:	3212      	adds	r2, #18
 810d302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d306:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 810d308:	687b      	ldr	r3, [r7, #4]
 810d30a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810d30c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 810d30e:	e038      	b.n	810d382 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 810d310:	697b      	ldr	r3, [r7, #20]
 810d312:	691b      	ldr	r3, [r3, #16]
 810d314:	2b00      	cmp	r3, #0
 810d316:	d112      	bne.n	810d33e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 810d318:	f107 0308 	add.w	r3, r7, #8
 810d31c:	4618      	mov	r0, r3
 810d31e:	f7fc fe67 	bl	8109ff0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 810d322:	68bb      	ldr	r3, [r7, #8]
 810d324:	2b00      	cmp	r3, #0
 810d326:	d102      	bne.n	810d32e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 810d328:	2300      	movs	r3, #0
 810d32a:	74fb      	strb	r3, [r7, #19]
 810d32c:	e007      	b.n	810d33e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 810d32e:	68bb      	ldr	r3, [r7, #8]
 810d330:	461a      	mov	r2, r3
 810d332:	697b      	ldr	r3, [r7, #20]
 810d334:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 810d336:	68bb      	ldr	r3, [r7, #8]
 810d338:	461a      	mov	r2, r3
 810d33a:	697b      	ldr	r3, [r7, #20]
 810d33c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 810d33e:	7cfb      	ldrb	r3, [r7, #19]
 810d340:	2b00      	cmp	r3, #0
 810d342:	d01e      	beq.n	810d382 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 810d344:	687b      	ldr	r3, [r7, #4]
 810d346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d348:	2b00      	cmp	r3, #0
 810d34a:	d004      	beq.n	810d356 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 810d34c:	697b      	ldr	r3, [r7, #20]
 810d34e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 810d352:	60da      	str	r2, [r3, #12]
 810d354:	e003      	b.n	810d35e <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 810d356:	697b      	ldr	r3, [r7, #20]
 810d358:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 810d35c:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 810d35e:	69fb      	ldr	r3, [r7, #28]
 810d360:	3301      	adds	r3, #1
 810d362:	61fb      	str	r3, [r7, #28]
 810d364:	69fb      	ldr	r3, [r7, #28]
 810d366:	2b03      	cmp	r3, #3
 810d368:	d902      	bls.n	810d370 <ETH_UpdateDescriptor+0x8a>
 810d36a:	69fb      	ldr	r3, [r7, #28]
 810d36c:	3b04      	subs	r3, #4
 810d36e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810d370:	687b      	ldr	r3, [r7, #4]
 810d372:	69fa      	ldr	r2, [r7, #28]
 810d374:	3212      	adds	r2, #18
 810d376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d37a:	617b      	str	r3, [r7, #20]
      desccount--;
 810d37c:	69bb      	ldr	r3, [r7, #24]
 810d37e:	3b01      	subs	r3, #1
 810d380:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 810d382:	69bb      	ldr	r3, [r7, #24]
 810d384:	2b00      	cmp	r3, #0
 810d386:	d002      	beq.n	810d38e <ETH_UpdateDescriptor+0xa8>
 810d388:	7cfb      	ldrb	r3, [r7, #19]
 810d38a:	2b00      	cmp	r3, #0
 810d38c:	d1c0      	bne.n	810d310 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 810d38e:	687b      	ldr	r3, [r7, #4]
 810d390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810d392:	69ba      	ldr	r2, [r7, #24]
 810d394:	429a      	cmp	r2, r3
 810d396:	d01b      	beq.n	810d3d0 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 810d398:	69fb      	ldr	r3, [r7, #28]
 810d39a:	3301      	adds	r3, #1
 810d39c:	f003 0303 	and.w	r3, r3, #3
 810d3a0:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 810d3a2:	f3bf 8f5f 	dmb	sy
}
 810d3a6:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 810d3a8:	687b      	ldr	r3, [r7, #4]
 810d3aa:	6919      	ldr	r1, [r3, #16]
 810d3ac:	68fa      	ldr	r2, [r7, #12]
 810d3ae:	4613      	mov	r3, r2
 810d3b0:	005b      	lsls	r3, r3, #1
 810d3b2:	4413      	add	r3, r2
 810d3b4:	00db      	lsls	r3, r3, #3
 810d3b6:	18ca      	adds	r2, r1, r3
 810d3b8:	687b      	ldr	r3, [r7, #4]
 810d3ba:	681b      	ldr	r3, [r3, #0]
 810d3bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d3c0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 810d3c4:	687b      	ldr	r3, [r7, #4]
 810d3c6:	69fa      	ldr	r2, [r7, #28]
 810d3c8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 810d3ca:	687b      	ldr	r3, [r7, #4]
 810d3cc:	69ba      	ldr	r2, [r7, #24]
 810d3ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 810d3d0:	bf00      	nop
 810d3d2:	3720      	adds	r7, #32
 810d3d4:	46bd      	mov	sp, r7
 810d3d6:	bd80      	pop	{r7, pc}

0810d3d8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 810d3d8:	b580      	push	{r7, lr}
 810d3da:	b086      	sub	sp, #24
 810d3dc:	af00      	add	r7, sp, #0
 810d3de:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 810d3e0:	687b      	ldr	r3, [r7, #4]
 810d3e2:	3318      	adds	r3, #24
 810d3e4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 810d3e6:	68bb      	ldr	r3, [r7, #8]
 810d3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d3ea:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 810d3ec:	68bb      	ldr	r3, [r7, #8]
 810d3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d3f0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 810d3f2:	2301      	movs	r3, #1
 810d3f4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 810d3f6:	e047      	b.n	810d488 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 810d3f8:	2301      	movs	r3, #1
 810d3fa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 810d3fc:	697b      	ldr	r3, [r7, #20]
 810d3fe:	3b01      	subs	r3, #1
 810d400:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 810d402:	68ba      	ldr	r2, [r7, #8]
 810d404:	693b      	ldr	r3, [r7, #16]
 810d406:	3304      	adds	r3, #4
 810d408:	009b      	lsls	r3, r3, #2
 810d40a:	4413      	add	r3, r2
 810d40c:	685b      	ldr	r3, [r3, #4]
 810d40e:	2b00      	cmp	r3, #0
 810d410:	d10a      	bne.n	810d428 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 810d412:	693b      	ldr	r3, [r7, #16]
 810d414:	3301      	adds	r3, #1
 810d416:	613b      	str	r3, [r7, #16]
 810d418:	693b      	ldr	r3, [r7, #16]
 810d41a:	2b03      	cmp	r3, #3
 810d41c:	d902      	bls.n	810d424 <HAL_ETH_ReleaseTxPacket+0x4c>
 810d41e:	693b      	ldr	r3, [r7, #16]
 810d420:	3b04      	subs	r3, #4
 810d422:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 810d424:	2300      	movs	r3, #0
 810d426:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 810d428:	7bbb      	ldrb	r3, [r7, #14]
 810d42a:	2b00      	cmp	r3, #0
 810d42c:	d02c      	beq.n	810d488 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 810d42e:	687b      	ldr	r3, [r7, #4]
 810d430:	68d9      	ldr	r1, [r3, #12]
 810d432:	693a      	ldr	r2, [r7, #16]
 810d434:	4613      	mov	r3, r2
 810d436:	005b      	lsls	r3, r3, #1
 810d438:	4413      	add	r3, r2
 810d43a:	00db      	lsls	r3, r3, #3
 810d43c:	440b      	add	r3, r1
 810d43e:	68db      	ldr	r3, [r3, #12]
 810d440:	2b00      	cmp	r3, #0
 810d442:	db1f      	blt.n	810d484 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 810d444:	68ba      	ldr	r2, [r7, #8]
 810d446:	693b      	ldr	r3, [r7, #16]
 810d448:	3304      	adds	r3, #4
 810d44a:	009b      	lsls	r3, r3, #2
 810d44c:	4413      	add	r3, r2
 810d44e:	685b      	ldr	r3, [r3, #4]
 810d450:	4618      	mov	r0, r3
 810d452:	f7fc fe3d 	bl	810a0d0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 810d456:	68ba      	ldr	r2, [r7, #8]
 810d458:	693b      	ldr	r3, [r7, #16]
 810d45a:	3304      	adds	r3, #4
 810d45c:	009b      	lsls	r3, r3, #2
 810d45e:	4413      	add	r3, r2
 810d460:	2200      	movs	r2, #0
 810d462:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 810d464:	693b      	ldr	r3, [r7, #16]
 810d466:	3301      	adds	r3, #1
 810d468:	613b      	str	r3, [r7, #16]
 810d46a:	693b      	ldr	r3, [r7, #16]
 810d46c:	2b03      	cmp	r3, #3
 810d46e:	d902      	bls.n	810d476 <HAL_ETH_ReleaseTxPacket+0x9e>
 810d470:	693b      	ldr	r3, [r7, #16]
 810d472:	3b04      	subs	r3, #4
 810d474:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 810d476:	68bb      	ldr	r3, [r7, #8]
 810d478:	697a      	ldr	r2, [r7, #20]
 810d47a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 810d47c:	68bb      	ldr	r3, [r7, #8]
 810d47e:	693a      	ldr	r2, [r7, #16]
 810d480:	62da      	str	r2, [r3, #44]	@ 0x2c
 810d482:	e001      	b.n	810d488 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 810d484:	2300      	movs	r3, #0
 810d486:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 810d488:	697b      	ldr	r3, [r7, #20]
 810d48a:	2b00      	cmp	r3, #0
 810d48c:	d002      	beq.n	810d494 <HAL_ETH_ReleaseTxPacket+0xbc>
 810d48e:	7bfb      	ldrb	r3, [r7, #15]
 810d490:	2b00      	cmp	r3, #0
 810d492:	d1b1      	bne.n	810d3f8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 810d494:	2300      	movs	r3, #0
}
 810d496:	4618      	mov	r0, r3
 810d498:	3718      	adds	r7, #24
 810d49a:	46bd      	mov	sp, r7
 810d49c:	bd80      	pop	{r7, pc}
	...

0810d4a0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 810d4a0:	b580      	push	{r7, lr}
 810d4a2:	b088      	sub	sp, #32
 810d4a4:	af00      	add	r7, sp, #0
 810d4a6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 810d4a8:	687b      	ldr	r3, [r7, #4]
 810d4aa:	681b      	ldr	r3, [r3, #0]
 810d4ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810d4b0:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 810d4b2:	687b      	ldr	r3, [r7, #4]
 810d4b4:	681b      	ldr	r3, [r3, #0]
 810d4b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d4ba:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810d4be:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 810d4c0:	687b      	ldr	r3, [r7, #4]
 810d4c2:	681b      	ldr	r3, [r3, #0]
 810d4c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d4c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810d4cc:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 810d4ce:	4b77      	ldr	r3, [pc, #476]	@ (810d6ac <HAL_ETH_IRQHandler+0x20c>)
 810d4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d4d2:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 810d4d4:	4b76      	ldr	r3, [pc, #472]	@ (810d6b0 <HAL_ETH_IRQHandler+0x210>)
 810d4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d4d8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 810d4da:	69bb      	ldr	r3, [r7, #24]
 810d4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d4e0:	2b00      	cmp	r3, #0
 810d4e2:	d010      	beq.n	810d506 <HAL_ETH_IRQHandler+0x66>
 810d4e4:	697b      	ldr	r3, [r7, #20]
 810d4e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d4ea:	2b00      	cmp	r3, #0
 810d4ec:	d00b      	beq.n	810d506 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 810d4ee:	687b      	ldr	r3, [r7, #4]
 810d4f0:	681b      	ldr	r3, [r3, #0]
 810d4f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d4f6:	461a      	mov	r2, r3
 810d4f8:	f248 0340 	movw	r3, #32832	@ 0x8040
 810d4fc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 810d500:	6878      	ldr	r0, [r7, #4]
 810d502:	f7fc f91d 	bl	8109740 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 810d506:	69bb      	ldr	r3, [r7, #24]
 810d508:	f003 0301 	and.w	r3, r3, #1
 810d50c:	2b00      	cmp	r3, #0
 810d50e:	d010      	beq.n	810d532 <HAL_ETH_IRQHandler+0x92>
 810d510:	697b      	ldr	r3, [r7, #20]
 810d512:	f003 0301 	and.w	r3, r3, #1
 810d516:	2b00      	cmp	r3, #0
 810d518:	d00b      	beq.n	810d532 <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 810d51a:	687b      	ldr	r3, [r7, #4]
 810d51c:	681b      	ldr	r3, [r3, #0]
 810d51e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d522:	461a      	mov	r2, r3
 810d524:	f248 0301 	movw	r3, #32769	@ 0x8001
 810d528:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 810d52c:	6878      	ldr	r0, [r7, #4]
 810d52e:	f7fc f917 	bl	8109760 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 810d532:	69bb      	ldr	r3, [r7, #24]
 810d534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810d538:	2b00      	cmp	r3, #0
 810d53a:	d047      	beq.n	810d5cc <HAL_ETH_IRQHandler+0x12c>
 810d53c:	697b      	ldr	r3, [r7, #20]
 810d53e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810d542:	2b00      	cmp	r3, #0
 810d544:	d042      	beq.n	810d5cc <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 810d546:	687b      	ldr	r3, [r7, #4]
 810d548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d54c:	f043 0208 	orr.w	r2, r3, #8
 810d550:	687b      	ldr	r3, [r7, #4]
 810d552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 810d556:	69bb      	ldr	r3, [r7, #24]
 810d558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810d55c:	2b00      	cmp	r3, #0
 810d55e:	d01e      	beq.n	810d59e <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 810d560:	687b      	ldr	r3, [r7, #4]
 810d562:	681b      	ldr	r3, [r3, #0]
 810d564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d568:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 810d56c:	f241 1302 	movw	r3, #4354	@ 0x1102
 810d570:	4013      	ands	r3, r2
 810d572:	687a      	ldr	r2, [r7, #4]
 810d574:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 810d578:	687b      	ldr	r3, [r7, #4]
 810d57a:	681b      	ldr	r3, [r3, #0]
 810d57c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d580:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810d584:	687a      	ldr	r2, [r7, #4]
 810d586:	6812      	ldr	r2, [r2, #0]
 810d588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 810d58c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810d590:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 810d594:	687b      	ldr	r3, [r7, #4]
 810d596:	22e0      	movs	r2, #224	@ 0xe0
 810d598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 810d59c:	e013      	b.n	810d5c6 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 810d59e:	687b      	ldr	r3, [r7, #4]
 810d5a0:	681b      	ldr	r3, [r3, #0]
 810d5a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d5a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810d5aa:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 810d5ae:	687b      	ldr	r3, [r7, #4]
 810d5b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 810d5b4:	687b      	ldr	r3, [r7, #4]
 810d5b6:	681b      	ldr	r3, [r3, #0]
 810d5b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810d5bc:	461a      	mov	r2, r3
 810d5be:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 810d5c2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 810d5c6:	6878      	ldr	r0, [r7, #4]
 810d5c8:	f7fc f8da 	bl	8109780 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 810d5cc:	69fb      	ldr	r3, [r7, #28]
 810d5ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810d5d2:	2b00      	cmp	r3, #0
 810d5d4:	d104      	bne.n	810d5e0 <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 810d5d6:	69fb      	ldr	r3, [r7, #28]
 810d5d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 810d5dc:	2b00      	cmp	r3, #0
 810d5de:	d019      	beq.n	810d614 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 810d5e0:	687b      	ldr	r3, [r7, #4]
 810d5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d5e6:	f043 0210 	orr.w	r2, r3, #16
 810d5ea:	687b      	ldr	r3, [r7, #4]
 810d5ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 810d5f0:	687b      	ldr	r3, [r7, #4]
 810d5f2:	681b      	ldr	r3, [r3, #0]
 810d5f4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 810d5f8:	687b      	ldr	r3, [r7, #4]
 810d5fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 810d5fe:	687b      	ldr	r3, [r7, #4]
 810d600:	22e0      	movs	r2, #224	@ 0xe0
 810d602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 810d606:	6878      	ldr	r0, [r7, #4]
 810d608:	f7fc f8ba 	bl	8109780 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 810d60c:	687b      	ldr	r3, [r7, #4]
 810d60e:	2200      	movs	r2, #0
 810d610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 810d614:	69fb      	ldr	r3, [r7, #28]
 810d616:	f003 0310 	and.w	r3, r3, #16
 810d61a:	2b00      	cmp	r3, #0
 810d61c:	d00f      	beq.n	810d63e <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 810d61e:	687b      	ldr	r3, [r7, #4]
 810d620:	681b      	ldr	r3, [r3, #0]
 810d622:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810d626:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 810d62a:	687b      	ldr	r3, [r7, #4]
 810d62c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 810d630:	6878      	ldr	r0, [r7, #4]
 810d632:	f000 f83f 	bl	810d6b4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 810d636:	687b      	ldr	r3, [r7, #4]
 810d638:	2200      	movs	r2, #0
 810d63a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 810d63e:	69fb      	ldr	r3, [r7, #28]
 810d640:	f003 0320 	and.w	r3, r3, #32
 810d644:	2b00      	cmp	r3, #0
 810d646:	d00f      	beq.n	810d668 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 810d648:	687b      	ldr	r3, [r7, #4]
 810d64a:	681b      	ldr	r3, [r3, #0]
 810d64c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 810d650:	f003 020f 	and.w	r2, r3, #15
 810d654:	687b      	ldr	r3, [r7, #4]
 810d656:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 810d65a:	6878      	ldr	r0, [r7, #4]
 810d65c:	f000 f834 	bl	810d6c8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 810d660:	687b      	ldr	r3, [r7, #4]
 810d662:	2200      	movs	r2, #0
 810d664:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 810d668:	f7ff fb30 	bl	810cccc <HAL_GetCurrentCPUID>
 810d66c:	4603      	mov	r3, r0
 810d66e:	2b03      	cmp	r3, #3
 810d670:	d10c      	bne.n	810d68c <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810d672:	693b      	ldr	r3, [r7, #16]
 810d674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810d678:	2b00      	cmp	r3, #0
 810d67a:	d013      	beq.n	810d6a4 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810d67c:	4b0b      	ldr	r3, [pc, #44]	@ (810d6ac <HAL_ETH_IRQHandler+0x20c>)
 810d67e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810d682:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 810d684:	6878      	ldr	r0, [r7, #4]
 810d686:	f000 f829 	bl	810d6dc <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 810d68a:	e00b      	b.n	810d6a4 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810d68c:	68fb      	ldr	r3, [r7, #12]
 810d68e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810d692:	2b00      	cmp	r3, #0
 810d694:	d006      	beq.n	810d6a4 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810d696:	4b06      	ldr	r3, [pc, #24]	@ (810d6b0 <HAL_ETH_IRQHandler+0x210>)
 810d698:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810d69c:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 810d69e:	6878      	ldr	r0, [r7, #4]
 810d6a0:	f000 f81c 	bl	810d6dc <HAL_ETH_WakeUpCallback>
}
 810d6a4:	bf00      	nop
 810d6a6:	3720      	adds	r7, #32
 810d6a8:	46bd      	mov	sp, r7
 810d6aa:	bd80      	pop	{r7, pc}
 810d6ac:	58000080 	.word	0x58000080
 810d6b0:	580000c0 	.word	0x580000c0

0810d6b4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 810d6b4:	b480      	push	{r7}
 810d6b6:	b083      	sub	sp, #12
 810d6b8:	af00      	add	r7, sp, #0
 810d6ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 810d6bc:	bf00      	nop
 810d6be:	370c      	adds	r7, #12
 810d6c0:	46bd      	mov	sp, r7
 810d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d6c6:	4770      	bx	lr

0810d6c8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 810d6c8:	b480      	push	{r7}
 810d6ca:	b083      	sub	sp, #12
 810d6cc:	af00      	add	r7, sp, #0
 810d6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 810d6d0:	bf00      	nop
 810d6d2:	370c      	adds	r7, #12
 810d6d4:	46bd      	mov	sp, r7
 810d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d6da:	4770      	bx	lr

0810d6dc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 810d6dc:	b480      	push	{r7}
 810d6de:	b083      	sub	sp, #12
 810d6e0:	af00      	add	r7, sp, #0
 810d6e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 810d6e4:	bf00      	nop
 810d6e6:	370c      	adds	r7, #12
 810d6e8:	46bd      	mov	sp, r7
 810d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d6ee:	4770      	bx	lr

0810d6f0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 810d6f0:	b580      	push	{r7, lr}
 810d6f2:	b086      	sub	sp, #24
 810d6f4:	af00      	add	r7, sp, #0
 810d6f6:	60f8      	str	r0, [r7, #12]
 810d6f8:	60b9      	str	r1, [r7, #8]
 810d6fa:	607a      	str	r2, [r7, #4]
 810d6fc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 810d6fe:	68fb      	ldr	r3, [r7, #12]
 810d700:	681b      	ldr	r3, [r3, #0]
 810d702:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810d706:	f003 0301 	and.w	r3, r3, #1
 810d70a:	2b00      	cmp	r3, #0
 810d70c:	d001      	beq.n	810d712 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 810d70e:	2301      	movs	r3, #1
 810d710:	e03e      	b.n	810d790 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810d712:	68fb      	ldr	r3, [r7, #12]
 810d714:	681b      	ldr	r3, [r3, #0]
 810d716:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810d71a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 810d71c:	697b      	ldr	r3, [r7, #20]
 810d71e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810d722:	68bb      	ldr	r3, [r7, #8]
 810d724:	055b      	lsls	r3, r3, #21
 810d726:	4313      	orrs	r3, r2
 810d728:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810d72a:	697b      	ldr	r3, [r7, #20]
 810d72c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 810d730:	687b      	ldr	r3, [r7, #4]
 810d732:	041b      	lsls	r3, r3, #16
 810d734:	4313      	orrs	r3, r2
 810d736:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 810d738:	697b      	ldr	r3, [r7, #20]
 810d73a:	f043 030c 	orr.w	r3, r3, #12
 810d73e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810d740:	697b      	ldr	r3, [r7, #20]
 810d742:	f043 0301 	orr.w	r3, r3, #1
 810d746:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 810d748:	68fb      	ldr	r3, [r7, #12]
 810d74a:	681b      	ldr	r3, [r3, #0]
 810d74c:	697a      	ldr	r2, [r7, #20]
 810d74e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810d752:	f7ff f9bb 	bl	810cacc <HAL_GetTick>
 810d756:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810d758:	e009      	b.n	810d76e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810d75a:	f7ff f9b7 	bl	810cacc <HAL_GetTick>
 810d75e:	4602      	mov	r2, r0
 810d760:	693b      	ldr	r3, [r7, #16]
 810d762:	1ad3      	subs	r3, r2, r3
 810d764:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810d768:	d901      	bls.n	810d76e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 810d76a:	2301      	movs	r3, #1
 810d76c:	e010      	b.n	810d790 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810d76e:	68fb      	ldr	r3, [r7, #12]
 810d770:	681b      	ldr	r3, [r3, #0]
 810d772:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810d776:	f003 0301 	and.w	r3, r3, #1
 810d77a:	2b00      	cmp	r3, #0
 810d77c:	d1ed      	bne.n	810d75a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 810d77e:	68fb      	ldr	r3, [r7, #12]
 810d780:	681b      	ldr	r3, [r3, #0]
 810d782:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 810d786:	b29b      	uxth	r3, r3
 810d788:	461a      	mov	r2, r3
 810d78a:	683b      	ldr	r3, [r7, #0]
 810d78c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810d78e:	2300      	movs	r3, #0
}
 810d790:	4618      	mov	r0, r3
 810d792:	3718      	adds	r7, #24
 810d794:	46bd      	mov	sp, r7
 810d796:	bd80      	pop	{r7, pc}

0810d798 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 810d798:	b580      	push	{r7, lr}
 810d79a:	b086      	sub	sp, #24
 810d79c:	af00      	add	r7, sp, #0
 810d79e:	60f8      	str	r0, [r7, #12]
 810d7a0:	60b9      	str	r1, [r7, #8]
 810d7a2:	607a      	str	r2, [r7, #4]
 810d7a4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 810d7a6:	68fb      	ldr	r3, [r7, #12]
 810d7a8:	681b      	ldr	r3, [r3, #0]
 810d7aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810d7ae:	f003 0301 	and.w	r3, r3, #1
 810d7b2:	2b00      	cmp	r3, #0
 810d7b4:	d001      	beq.n	810d7ba <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 810d7b6:	2301      	movs	r3, #1
 810d7b8:	e03c      	b.n	810d834 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810d7ba:	68fb      	ldr	r3, [r7, #12]
 810d7bc:	681b      	ldr	r3, [r3, #0]
 810d7be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810d7c2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 810d7c4:	697b      	ldr	r3, [r7, #20]
 810d7c6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810d7ca:	68bb      	ldr	r3, [r7, #8]
 810d7cc:	055b      	lsls	r3, r3, #21
 810d7ce:	4313      	orrs	r3, r2
 810d7d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810d7d2:	697b      	ldr	r3, [r7, #20]
 810d7d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 810d7d8:	687b      	ldr	r3, [r7, #4]
 810d7da:	041b      	lsls	r3, r3, #16
 810d7dc:	4313      	orrs	r3, r2
 810d7de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 810d7e0:	697b      	ldr	r3, [r7, #20]
 810d7e2:	f023 030c 	bic.w	r3, r3, #12
 810d7e6:	f043 0304 	orr.w	r3, r3, #4
 810d7ea:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810d7ec:	697b      	ldr	r3, [r7, #20]
 810d7ee:	f043 0301 	orr.w	r3, r3, #1
 810d7f2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 810d7f4:	683b      	ldr	r3, [r7, #0]
 810d7f6:	b29a      	uxth	r2, r3
 810d7f8:	4b10      	ldr	r3, [pc, #64]	@ (810d83c <HAL_ETH_WritePHYRegister+0xa4>)
 810d7fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 810d7fe:	4a0f      	ldr	r2, [pc, #60]	@ (810d83c <HAL_ETH_WritePHYRegister+0xa4>)
 810d800:	697b      	ldr	r3, [r7, #20]
 810d802:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810d806:	f7ff f961 	bl	810cacc <HAL_GetTick>
 810d80a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810d80c:	e009      	b.n	810d822 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810d80e:	f7ff f95d 	bl	810cacc <HAL_GetTick>
 810d812:	4602      	mov	r2, r0
 810d814:	693b      	ldr	r3, [r7, #16]
 810d816:	1ad3      	subs	r3, r2, r3
 810d818:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810d81c:	d901      	bls.n	810d822 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 810d81e:	2301      	movs	r3, #1
 810d820:	e008      	b.n	810d834 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810d822:	68fb      	ldr	r3, [r7, #12]
 810d824:	681b      	ldr	r3, [r3, #0]
 810d826:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810d82a:	f003 0301 	and.w	r3, r3, #1
 810d82e:	2b00      	cmp	r3, #0
 810d830:	d1ed      	bne.n	810d80e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 810d832:	2300      	movs	r3, #0
}
 810d834:	4618      	mov	r0, r3
 810d836:	3718      	adds	r7, #24
 810d838:	46bd      	mov	sp, r7
 810d83a:	bd80      	pop	{r7, pc}
 810d83c:	40028000 	.word	0x40028000

0810d840 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 810d840:	b480      	push	{r7}
 810d842:	b083      	sub	sp, #12
 810d844:	af00      	add	r7, sp, #0
 810d846:	6078      	str	r0, [r7, #4]
 810d848:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810d84a:	683b      	ldr	r3, [r7, #0]
 810d84c:	2b00      	cmp	r3, #0
 810d84e:	d101      	bne.n	810d854 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 810d850:	2301      	movs	r3, #1
 810d852:	e1c3      	b.n	810dbdc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 810d854:	687b      	ldr	r3, [r7, #4]
 810d856:	681b      	ldr	r3, [r3, #0]
 810d858:	681b      	ldr	r3, [r3, #0]
 810d85a:	f003 020c 	and.w	r2, r3, #12
 810d85e:	683b      	ldr	r3, [r7, #0]
 810d860:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 810d862:	687b      	ldr	r3, [r7, #4]
 810d864:	681b      	ldr	r3, [r3, #0]
 810d866:	681b      	ldr	r3, [r3, #0]
 810d868:	f003 0310 	and.w	r3, r3, #16
 810d86c:	2b00      	cmp	r3, #0
 810d86e:	bf14      	ite	ne
 810d870:	2301      	movne	r3, #1
 810d872:	2300      	moveq	r3, #0
 810d874:	b2db      	uxtb	r3, r3
 810d876:	461a      	mov	r2, r3
 810d878:	683b      	ldr	r3, [r7, #0]
 810d87a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 810d87e:	687b      	ldr	r3, [r7, #4]
 810d880:	681b      	ldr	r3, [r3, #0]
 810d882:	681b      	ldr	r3, [r3, #0]
 810d884:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 810d888:	683b      	ldr	r3, [r7, #0]
 810d88a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 810d88c:	687b      	ldr	r3, [r7, #4]
 810d88e:	681b      	ldr	r3, [r3, #0]
 810d890:	681b      	ldr	r3, [r3, #0]
 810d892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810d896:	2b00      	cmp	r3, #0
 810d898:	bf0c      	ite	eq
 810d89a:	2301      	moveq	r3, #1
 810d89c:	2300      	movne	r3, #0
 810d89e:	b2db      	uxtb	r3, r3
 810d8a0:	461a      	mov	r2, r3
 810d8a2:	683b      	ldr	r3, [r7, #0]
 810d8a4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810d8a8:	687b      	ldr	r3, [r7, #4]
 810d8aa:	681b      	ldr	r3, [r3, #0]
 810d8ac:	681b      	ldr	r3, [r3, #0]
 810d8ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 810d8b2:	2b00      	cmp	r3, #0
 810d8b4:	bf14      	ite	ne
 810d8b6:	2301      	movne	r3, #1
 810d8b8:	2300      	moveq	r3, #0
 810d8ba:	b2db      	uxtb	r3, r3
 810d8bc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810d8be:	683b      	ldr	r3, [r7, #0]
 810d8c0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 810d8c2:	687b      	ldr	r3, [r7, #4]
 810d8c4:	681b      	ldr	r3, [r3, #0]
 810d8c6:	681b      	ldr	r3, [r3, #0]
 810d8c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810d8cc:	2b00      	cmp	r3, #0
 810d8ce:	bf0c      	ite	eq
 810d8d0:	2301      	moveq	r3, #1
 810d8d2:	2300      	movne	r3, #0
 810d8d4:	b2db      	uxtb	r3, r3
 810d8d6:	461a      	mov	r2, r3
 810d8d8:	683b      	ldr	r3, [r7, #0]
 810d8da:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810d8dc:	687b      	ldr	r3, [r7, #4]
 810d8de:	681b      	ldr	r3, [r3, #0]
 810d8e0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 810d8e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810d8e6:	2b00      	cmp	r3, #0
 810d8e8:	bf14      	ite	ne
 810d8ea:	2301      	movne	r3, #1
 810d8ec:	2300      	moveq	r3, #0
 810d8ee:	b2db      	uxtb	r3, r3
 810d8f0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810d8f2:	683b      	ldr	r3, [r7, #0]
 810d8f4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 810d8f6:	687b      	ldr	r3, [r7, #4]
 810d8f8:	681b      	ldr	r3, [r3, #0]
 810d8fa:	681b      	ldr	r3, [r3, #0]
 810d8fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810d900:	2b00      	cmp	r3, #0
 810d902:	bf14      	ite	ne
 810d904:	2301      	movne	r3, #1
 810d906:	2300      	moveq	r3, #0
 810d908:	b2db      	uxtb	r3, r3
 810d90a:	461a      	mov	r2, r3
 810d90c:	683b      	ldr	r3, [r7, #0]
 810d90e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 810d910:	687b      	ldr	r3, [r7, #4]
 810d912:	681b      	ldr	r3, [r3, #0]
 810d914:	681b      	ldr	r3, [r3, #0]
 810d916:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 810d91a:	683b      	ldr	r3, [r7, #0]
 810d91c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 810d91e:	687b      	ldr	r3, [r7, #4]
 810d920:	681b      	ldr	r3, [r3, #0]
 810d922:	681b      	ldr	r3, [r3, #0]
 810d924:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 810d928:	683b      	ldr	r3, [r7, #0]
 810d92a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 810d92c:	687b      	ldr	r3, [r7, #4]
 810d92e:	681b      	ldr	r3, [r3, #0]
 810d930:	681b      	ldr	r3, [r3, #0]
 810d932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810d936:	2b00      	cmp	r3, #0
 810d938:	bf14      	ite	ne
 810d93a:	2301      	movne	r3, #1
 810d93c:	2300      	moveq	r3, #0
 810d93e:	b2db      	uxtb	r3, r3
 810d940:	461a      	mov	r2, r3
 810d942:	683b      	ldr	r3, [r7, #0]
 810d944:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 810d946:	687b      	ldr	r3, [r7, #4]
 810d948:	681b      	ldr	r3, [r3, #0]
 810d94a:	681b      	ldr	r3, [r3, #0]
 810d94c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810d950:	2b00      	cmp	r3, #0
 810d952:	bf0c      	ite	eq
 810d954:	2301      	moveq	r3, #1
 810d956:	2300      	movne	r3, #0
 810d958:	b2db      	uxtb	r3, r3
 810d95a:	461a      	mov	r2, r3
 810d95c:	683b      	ldr	r3, [r7, #0]
 810d95e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 810d960:	687b      	ldr	r3, [r7, #4]
 810d962:	681b      	ldr	r3, [r3, #0]
 810d964:	681b      	ldr	r3, [r3, #0]
 810d966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810d96a:	2b00      	cmp	r3, #0
 810d96c:	bf0c      	ite	eq
 810d96e:	2301      	moveq	r3, #1
 810d970:	2300      	movne	r3, #0
 810d972:	b2db      	uxtb	r3, r3
 810d974:	461a      	mov	r2, r3
 810d976:	683b      	ldr	r3, [r7, #0]
 810d978:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 810d97a:	687b      	ldr	r3, [r7, #4]
 810d97c:	681b      	ldr	r3, [r3, #0]
 810d97e:	681b      	ldr	r3, [r3, #0]
 810d980:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810d984:	2b00      	cmp	r3, #0
 810d986:	bf14      	ite	ne
 810d988:	2301      	movne	r3, #1
 810d98a:	2300      	moveq	r3, #0
 810d98c:	b2db      	uxtb	r3, r3
 810d98e:	461a      	mov	r2, r3
 810d990:	683b      	ldr	r3, [r7, #0]
 810d992:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 810d994:	687b      	ldr	r3, [r7, #4]
 810d996:	681b      	ldr	r3, [r3, #0]
 810d998:	681b      	ldr	r3, [r3, #0]
 810d99a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810d99e:	2b00      	cmp	r3, #0
 810d9a0:	bf14      	ite	ne
 810d9a2:	2301      	movne	r3, #1
 810d9a4:	2300      	moveq	r3, #0
 810d9a6:	b2db      	uxtb	r3, r3
 810d9a8:	461a      	mov	r2, r3
 810d9aa:	683b      	ldr	r3, [r7, #0]
 810d9ac:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 810d9ae:	687b      	ldr	r3, [r7, #4]
 810d9b0:	681b      	ldr	r3, [r3, #0]
 810d9b2:	681b      	ldr	r3, [r3, #0]
 810d9b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810d9b8:	2b00      	cmp	r3, #0
 810d9ba:	bf14      	ite	ne
 810d9bc:	2301      	movne	r3, #1
 810d9be:	2300      	moveq	r3, #0
 810d9c0:	b2db      	uxtb	r3, r3
 810d9c2:	461a      	mov	r2, r3
 810d9c4:	683b      	ldr	r3, [r7, #0]
 810d9c6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810d9c8:	687b      	ldr	r3, [r7, #4]
 810d9ca:	681b      	ldr	r3, [r3, #0]
 810d9cc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 810d9ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810d9d2:	2b00      	cmp	r3, #0
 810d9d4:	bf14      	ite	ne
 810d9d6:	2301      	movne	r3, #1
 810d9d8:	2300      	moveq	r3, #0
 810d9da:	b2db      	uxtb	r3, r3
 810d9dc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810d9de:	683b      	ldr	r3, [r7, #0]
 810d9e0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 810d9e2:	687b      	ldr	r3, [r7, #4]
 810d9e4:	681b      	ldr	r3, [r3, #0]
 810d9e6:	681b      	ldr	r3, [r3, #0]
 810d9e8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 810d9ec:	683b      	ldr	r3, [r7, #0]
 810d9ee:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 810d9f0:	687b      	ldr	r3, [r7, #4]
 810d9f2:	681b      	ldr	r3, [r3, #0]
 810d9f4:	681b      	ldr	r3, [r3, #0]
 810d9f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810d9fa:	2b00      	cmp	r3, #0
 810d9fc:	bf14      	ite	ne
 810d9fe:	2301      	movne	r3, #1
 810da00:	2300      	moveq	r3, #0
 810da02:	b2db      	uxtb	r3, r3
 810da04:	461a      	mov	r2, r3
 810da06:	683b      	ldr	r3, [r7, #0]
 810da08:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 810da0a:	687b      	ldr	r3, [r7, #4]
 810da0c:	681b      	ldr	r3, [r3, #0]
 810da0e:	681b      	ldr	r3, [r3, #0]
 810da10:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 810da14:	683b      	ldr	r3, [r7, #0]
 810da16:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 810da18:	687b      	ldr	r3, [r7, #4]
 810da1a:	681b      	ldr	r3, [r3, #0]
 810da1c:	685b      	ldr	r3, [r3, #4]
 810da1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 810da22:	683b      	ldr	r3, [r7, #0]
 810da24:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 810da26:	687b      	ldr	r3, [r7, #4]
 810da28:	681b      	ldr	r3, [r3, #0]
 810da2a:	685b      	ldr	r3, [r3, #4]
 810da2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810da30:	2b00      	cmp	r3, #0
 810da32:	bf0c      	ite	eq
 810da34:	2301      	moveq	r3, #1
 810da36:	2300      	movne	r3, #0
 810da38:	b2db      	uxtb	r3, r3
 810da3a:	461a      	mov	r2, r3
 810da3c:	683b      	ldr	r3, [r7, #0]
 810da3e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 810da42:	687b      	ldr	r3, [r7, #4]
 810da44:	681b      	ldr	r3, [r3, #0]
 810da46:	685b      	ldr	r3, [r3, #4]
 810da48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810da4c:	2b00      	cmp	r3, #0
 810da4e:	bf14      	ite	ne
 810da50:	2301      	movne	r3, #1
 810da52:	2300      	moveq	r3, #0
 810da54:	b2db      	uxtb	r3, r3
 810da56:	461a      	mov	r2, r3
 810da58:	683b      	ldr	r3, [r7, #0]
 810da5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810da5e:	687b      	ldr	r3, [r7, #4]
 810da60:	681b      	ldr	r3, [r3, #0]
 810da62:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 810da64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810da68:	2b00      	cmp	r3, #0
 810da6a:	bf14      	ite	ne
 810da6c:	2301      	movne	r3, #1
 810da6e:	2300      	moveq	r3, #0
 810da70:	b2db      	uxtb	r3, r3
 810da72:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810da74:	683b      	ldr	r3, [r7, #0]
 810da76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810da7a:	687b      	ldr	r3, [r7, #4]
 810da7c:	681b      	ldr	r3, [r3, #0]
 810da7e:	685b      	ldr	r3, [r3, #4]
 810da80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 810da84:	2b00      	cmp	r3, #0
 810da86:	bf14      	ite	ne
 810da88:	2301      	movne	r3, #1
 810da8a:	2300      	moveq	r3, #0
 810da8c:	b2db      	uxtb	r3, r3
 810da8e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810da90:	683b      	ldr	r3, [r7, #0]
 810da92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 810da96:	687b      	ldr	r3, [r7, #4]
 810da98:	681b      	ldr	r3, [r3, #0]
 810da9a:	685b      	ldr	r3, [r3, #4]
 810da9c:	0e5b      	lsrs	r3, r3, #25
 810da9e:	f003 021f 	and.w	r2, r3, #31
 810daa2:	683b      	ldr	r3, [r7, #0]
 810daa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 810daa6:	687b      	ldr	r3, [r7, #4]
 810daa8:	681b      	ldr	r3, [r3, #0]
 810daaa:	68db      	ldr	r3, [r3, #12]
 810daac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810dab0:	2b00      	cmp	r3, #0
 810dab2:	bf14      	ite	ne
 810dab4:	2301      	movne	r3, #1
 810dab6:	2300      	moveq	r3, #0
 810dab8:	b2db      	uxtb	r3, r3
 810daba:	461a      	mov	r2, r3
 810dabc:	683b      	ldr	r3, [r7, #0]
 810dabe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 810dac2:	687b      	ldr	r3, [r7, #4]
 810dac4:	681b      	ldr	r3, [r3, #0]
 810dac6:	68db      	ldr	r3, [r3, #12]
 810dac8:	f003 020f 	and.w	r2, r3, #15
 810dacc:	683b      	ldr	r3, [r7, #0]
 810dace:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 810dad0:	687b      	ldr	r3, [r7, #4]
 810dad2:	681b      	ldr	r3, [r3, #0]
 810dad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810dad6:	f003 0302 	and.w	r3, r3, #2
 810dada:	2b00      	cmp	r3, #0
 810dadc:	bf14      	ite	ne
 810dade:	2301      	movne	r3, #1
 810dae0:	2300      	moveq	r3, #0
 810dae2:	b2db      	uxtb	r3, r3
 810dae4:	461a      	mov	r2, r3
 810dae6:	683b      	ldr	r3, [r7, #0]
 810dae8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 810daec:	687b      	ldr	r3, [r7, #4]
 810daee:	681b      	ldr	r3, [r3, #0]
 810daf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810daf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810daf6:	2b00      	cmp	r3, #0
 810daf8:	bf0c      	ite	eq
 810dafa:	2301      	moveq	r3, #1
 810dafc:	2300      	movne	r3, #0
 810dafe:	b2db      	uxtb	r3, r3
 810db00:	461a      	mov	r2, r3
 810db02:	683b      	ldr	r3, [r7, #0]
 810db04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 810db08:	687b      	ldr	r3, [r7, #4]
 810db0a:	681b      	ldr	r3, [r3, #0]
 810db0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810db0e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810db12:	683b      	ldr	r3, [r7, #0]
 810db14:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 810db16:	687b      	ldr	r3, [r7, #4]
 810db18:	681b      	ldr	r3, [r3, #0]
 810db1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810db1c:	0c1b      	lsrs	r3, r3, #16
 810db1e:	b29a      	uxth	r2, r3
 810db20:	683b      	ldr	r3, [r7, #0]
 810db22:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 810db24:	687b      	ldr	r3, [r7, #4]
 810db26:	681b      	ldr	r3, [r3, #0]
 810db28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810db2c:	f003 0301 	and.w	r3, r3, #1
 810db30:	2b00      	cmp	r3, #0
 810db32:	bf14      	ite	ne
 810db34:	2301      	movne	r3, #1
 810db36:	2300      	moveq	r3, #0
 810db38:	b2db      	uxtb	r3, r3
 810db3a:	461a      	mov	r2, r3
 810db3c:	683b      	ldr	r3, [r7, #0]
 810db3e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810db42:	687b      	ldr	r3, [r7, #4]
 810db44:	681b      	ldr	r3, [r3, #0]
 810db46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810db4a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810db4e:	2b00      	cmp	r3, #0
 810db50:	bf14      	ite	ne
 810db52:	2301      	movne	r3, #1
 810db54:	2300      	moveq	r3, #0
 810db56:	b2db      	uxtb	r3, r3
 810db58:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810db5a:	683b      	ldr	r3, [r7, #0]
 810db5c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 810db60:	687b      	ldr	r3, [r7, #4]
 810db62:	681b      	ldr	r3, [r3, #0]
 810db64:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810db68:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 810db6c:	683b      	ldr	r3, [r7, #0]
 810db6e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 810db70:	687b      	ldr	r3, [r7, #4]
 810db72:	681b      	ldr	r3, [r3, #0]
 810db74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810db78:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 810db7c:	683b      	ldr	r3, [r7, #0]
 810db7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810db80:	687b      	ldr	r3, [r7, #4]
 810db82:	681b      	ldr	r3, [r3, #0]
 810db84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 810db88:	f003 0308 	and.w	r3, r3, #8
 810db8c:	2b00      	cmp	r3, #0
 810db8e:	bf14      	ite	ne
 810db90:	2301      	movne	r3, #1
 810db92:	2300      	moveq	r3, #0
 810db94:	b2db      	uxtb	r3, r3
 810db96:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810db98:	683b      	ldr	r3, [r7, #0]
 810db9a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 810db9e:	687b      	ldr	r3, [r7, #4]
 810dba0:	681b      	ldr	r3, [r3, #0]
 810dba2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810dba6:	f003 0310 	and.w	r3, r3, #16
 810dbaa:	2b00      	cmp	r3, #0
 810dbac:	bf14      	ite	ne
 810dbae:	2301      	movne	r3, #1
 810dbb0:	2300      	moveq	r3, #0
 810dbb2:	b2db      	uxtb	r3, r3
 810dbb4:	461a      	mov	r2, r3
 810dbb6:	683b      	ldr	r3, [r7, #0]
 810dbb8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810dbbc:	687b      	ldr	r3, [r7, #4]
 810dbbe:	681b      	ldr	r3, [r3, #0]
 810dbc0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 810dbc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810dbc8:	2b00      	cmp	r3, #0
 810dbca:	bf0c      	ite	eq
 810dbcc:	2301      	moveq	r3, #1
 810dbce:	2300      	movne	r3, #0
 810dbd0:	b2db      	uxtb	r3, r3
 810dbd2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810dbd4:	683b      	ldr	r3, [r7, #0]
 810dbd6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 810dbda:	2300      	movs	r3, #0
}
 810dbdc:	4618      	mov	r0, r3
 810dbde:	370c      	adds	r7, #12
 810dbe0:	46bd      	mov	sp, r7
 810dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dbe6:	4770      	bx	lr

0810dbe8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 810dbe8:	b580      	push	{r7, lr}
 810dbea:	b082      	sub	sp, #8
 810dbec:	af00      	add	r7, sp, #0
 810dbee:	6078      	str	r0, [r7, #4]
 810dbf0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810dbf2:	683b      	ldr	r3, [r7, #0]
 810dbf4:	2b00      	cmp	r3, #0
 810dbf6:	d101      	bne.n	810dbfc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 810dbf8:	2301      	movs	r3, #1
 810dbfa:	e00b      	b.n	810dc14 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 810dbfc:	687b      	ldr	r3, [r7, #4]
 810dbfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810dc02:	2b10      	cmp	r3, #16
 810dc04:	d105      	bne.n	810dc12 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 810dc06:	6839      	ldr	r1, [r7, #0]
 810dc08:	6878      	ldr	r0, [r7, #4]
 810dc0a:	f000 f871 	bl	810dcf0 <ETH_SetMACConfig>

    return HAL_OK;
 810dc0e:	2300      	movs	r3, #0
 810dc10:	e000      	b.n	810dc14 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 810dc12:	2301      	movs	r3, #1
  }
}
 810dc14:	4618      	mov	r0, r3
 810dc16:	3708      	adds	r7, #8
 810dc18:	46bd      	mov	sp, r7
 810dc1a:	bd80      	pop	{r7, pc}

0810dc1c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 810dc1c:	b580      	push	{r7, lr}
 810dc1e:	b084      	sub	sp, #16
 810dc20:	af00      	add	r7, sp, #0
 810dc22:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 810dc24:	687b      	ldr	r3, [r7, #4]
 810dc26:	681b      	ldr	r3, [r3, #0]
 810dc28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810dc2c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810dc2e:	68fb      	ldr	r3, [r7, #12]
 810dc30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810dc34:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 810dc36:	f001 fff1 	bl	810fc1c <HAL_RCC_GetHCLKFreq>
 810dc3a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 810dc3c:	68bb      	ldr	r3, [r7, #8]
 810dc3e:	4a1a      	ldr	r2, [pc, #104]	@ (810dca8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 810dc40:	4293      	cmp	r3, r2
 810dc42:	d804      	bhi.n	810dc4e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 810dc44:	68fb      	ldr	r3, [r7, #12]
 810dc46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810dc4a:	60fb      	str	r3, [r7, #12]
 810dc4c:	e022      	b.n	810dc94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810dc4e:	68bb      	ldr	r3, [r7, #8]
 810dc50:	4a16      	ldr	r2, [pc, #88]	@ (810dcac <HAL_ETH_SetMDIOClockRange+0x90>)
 810dc52:	4293      	cmp	r3, r2
 810dc54:	d204      	bcs.n	810dc60 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810dc56:	68fb      	ldr	r3, [r7, #12]
 810dc58:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 810dc5c:	60fb      	str	r3, [r7, #12]
 810dc5e:	e019      	b.n	810dc94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 810dc60:	68bb      	ldr	r3, [r7, #8]
 810dc62:	4a13      	ldr	r2, [pc, #76]	@ (810dcb0 <HAL_ETH_SetMDIOClockRange+0x94>)
 810dc64:	4293      	cmp	r3, r2
 810dc66:	d915      	bls.n	810dc94 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 810dc68:	68bb      	ldr	r3, [r7, #8]
 810dc6a:	4a12      	ldr	r2, [pc, #72]	@ (810dcb4 <HAL_ETH_SetMDIOClockRange+0x98>)
 810dc6c:	4293      	cmp	r3, r2
 810dc6e:	d804      	bhi.n	810dc7a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810dc70:	68fb      	ldr	r3, [r7, #12]
 810dc72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810dc76:	60fb      	str	r3, [r7, #12]
 810dc78:	e00c      	b.n	810dc94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 810dc7a:	68bb      	ldr	r3, [r7, #8]
 810dc7c:	4a0e      	ldr	r2, [pc, #56]	@ (810dcb8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 810dc7e:	4293      	cmp	r3, r2
 810dc80:	d804      	bhi.n	810dc8c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810dc82:	68fb      	ldr	r3, [r7, #12]
 810dc84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810dc88:	60fb      	str	r3, [r7, #12]
 810dc8a:	e003      	b.n	810dc94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 810dc8c:	68fb      	ldr	r3, [r7, #12]
 810dc8e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 810dc92:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 810dc94:	687b      	ldr	r3, [r7, #4]
 810dc96:	681b      	ldr	r3, [r3, #0]
 810dc98:	68fa      	ldr	r2, [r7, #12]
 810dc9a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 810dc9e:	bf00      	nop
 810dca0:	3710      	adds	r7, #16
 810dca2:	46bd      	mov	sp, r7
 810dca4:	bd80      	pop	{r7, pc}
 810dca6:	bf00      	nop
 810dca8:	02160ebf 	.word	0x02160ebf
 810dcac:	03938700 	.word	0x03938700
 810dcb0:	05f5e0ff 	.word	0x05f5e0ff
 810dcb4:	08f0d17f 	.word	0x08f0d17f
 810dcb8:	0ee6b27f 	.word	0x0ee6b27f

0810dcbc <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 810dcbc:	b480      	push	{r7}
 810dcbe:	b083      	sub	sp, #12
 810dcc0:	af00      	add	r7, sp, #0
 810dcc2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 810dcc4:	687b      	ldr	r3, [r7, #4]
 810dcc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 810dcca:	4618      	mov	r0, r3
 810dccc:	370c      	adds	r7, #12
 810dcce:	46bd      	mov	sp, r7
 810dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dcd4:	4770      	bx	lr

0810dcd6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 810dcd6:	b480      	push	{r7}
 810dcd8:	b083      	sub	sp, #12
 810dcda:	af00      	add	r7, sp, #0
 810dcdc:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 810dcde:	687b      	ldr	r3, [r7, #4]
 810dce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 810dce4:	4618      	mov	r0, r3
 810dce6:	370c      	adds	r7, #12
 810dce8:	46bd      	mov	sp, r7
 810dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dcee:	4770      	bx	lr

0810dcf0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 810dcf0:	b480      	push	{r7}
 810dcf2:	b085      	sub	sp, #20
 810dcf4:	af00      	add	r7, sp, #0
 810dcf6:	6078      	str	r0, [r7, #4]
 810dcf8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 810dcfa:	683b      	ldr	r3, [r7, #0]
 810dcfc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810dcfe:	683b      	ldr	r3, [r7, #0]
 810dd00:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810dd02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810dd04:	683b      	ldr	r3, [r7, #0]
 810dd06:	791b      	ldrb	r3, [r3, #4]
 810dd08:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 810dd0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810dd0c:	683b      	ldr	r3, [r7, #0]
 810dd0e:	7b1b      	ldrb	r3, [r3, #12]
 810dd10:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810dd12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810dd14:	683b      	ldr	r3, [r7, #0]
 810dd16:	7b5b      	ldrb	r3, [r3, #13]
 810dd18:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810dd1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 810dd1c:	683b      	ldr	r3, [r7, #0]
 810dd1e:	7b9b      	ldrb	r3, [r3, #14]
 810dd20:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810dd22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 810dd24:	683b      	ldr	r3, [r7, #0]
 810dd26:	7bdb      	ldrb	r3, [r3, #15]
 810dd28:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 810dd2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810dd2c:	683a      	ldr	r2, [r7, #0]
 810dd2e:	7c12      	ldrb	r2, [r2, #16]
 810dd30:	2a00      	cmp	r2, #0
 810dd32:	d102      	bne.n	810dd3a <ETH_SetMACConfig+0x4a>
 810dd34:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 810dd38:	e000      	b.n	810dd3c <ETH_SetMACConfig+0x4c>
 810dd3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 810dd3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810dd3e:	683a      	ldr	r2, [r7, #0]
 810dd40:	7c52      	ldrb	r2, [r2, #17]
 810dd42:	2a00      	cmp	r2, #0
 810dd44:	d102      	bne.n	810dd4c <ETH_SetMACConfig+0x5c>
 810dd46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 810dd4a:	e000      	b.n	810dd4e <ETH_SetMACConfig+0x5e>
 810dd4c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810dd4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810dd50:	683b      	ldr	r3, [r7, #0]
 810dd52:	7c9b      	ldrb	r3, [r3, #18]
 810dd54:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810dd56:	431a      	orrs	r2, r3
               macconf->Speed |
 810dd58:	683b      	ldr	r3, [r7, #0]
 810dd5a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 810dd5c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810dd5e:	683b      	ldr	r3, [r7, #0]
 810dd60:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810dd62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 810dd64:	683b      	ldr	r3, [r7, #0]
 810dd66:	7f1b      	ldrb	r3, [r3, #28]
 810dd68:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 810dd6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810dd6c:	683b      	ldr	r3, [r7, #0]
 810dd6e:	7f5b      	ldrb	r3, [r3, #29]
 810dd70:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810dd72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810dd74:	683a      	ldr	r2, [r7, #0]
 810dd76:	7f92      	ldrb	r2, [r2, #30]
 810dd78:	2a00      	cmp	r2, #0
 810dd7a:	d102      	bne.n	810dd82 <ETH_SetMACConfig+0x92>
 810dd7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810dd80:	e000      	b.n	810dd84 <ETH_SetMACConfig+0x94>
 810dd82:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810dd84:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810dd86:	683b      	ldr	r3, [r7, #0]
 810dd88:	7fdb      	ldrb	r3, [r3, #31]
 810dd8a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810dd8c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810dd8e:	683a      	ldr	r2, [r7, #0]
 810dd90:	f892 2020 	ldrb.w	r2, [r2, #32]
 810dd94:	2a00      	cmp	r2, #0
 810dd96:	d102      	bne.n	810dd9e <ETH_SetMACConfig+0xae>
 810dd98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810dd9c:	e000      	b.n	810dda0 <ETH_SetMACConfig+0xb0>
 810dd9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810dda0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810dda2:	683b      	ldr	r3, [r7, #0]
 810dda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810dda6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 810dda8:	683b      	ldr	r3, [r7, #0]
 810ddaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ddae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 810ddb0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 810ddb2:	683b      	ldr	r3, [r7, #0]
 810ddb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 810ddb6:	4313      	orrs	r3, r2
 810ddb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810ddba:	687b      	ldr	r3, [r7, #4]
 810ddbc:	681b      	ldr	r3, [r3, #0]
 810ddbe:	681a      	ldr	r2, [r3, #0]
 810ddc0:	4b57      	ldr	r3, [pc, #348]	@ (810df20 <ETH_SetMACConfig+0x230>)
 810ddc2:	4013      	ands	r3, r2
 810ddc4:	687a      	ldr	r2, [r7, #4]
 810ddc6:	6812      	ldr	r2, [r2, #0]
 810ddc8:	68f9      	ldr	r1, [r7, #12]
 810ddca:	430b      	orrs	r3, r1
 810ddcc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810ddce:	683b      	ldr	r3, [r7, #0]
 810ddd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ddd2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810ddd4:	683b      	ldr	r3, [r7, #0]
 810ddd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810ddda:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810dddc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810ddde:	683b      	ldr	r3, [r7, #0]
 810dde0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810dde4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810dde6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 810dde8:	683b      	ldr	r3, [r7, #0]
 810ddea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 810ddee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810ddf0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 810ddf2:	683a      	ldr	r2, [r7, #0]
 810ddf4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 810ddf8:	2a00      	cmp	r2, #0
 810ddfa:	d102      	bne.n	810de02 <ETH_SetMACConfig+0x112>
 810ddfc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810de00:	e000      	b.n	810de04 <ETH_SetMACConfig+0x114>
 810de02:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 810de04:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 810de06:	683b      	ldr	r3, [r7, #0]
 810de08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810de0a:	4313      	orrs	r3, r2
 810de0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810de0e:	687b      	ldr	r3, [r7, #4]
 810de10:	681b      	ldr	r3, [r3, #0]
 810de12:	685a      	ldr	r2, [r3, #4]
 810de14:	4b43      	ldr	r3, [pc, #268]	@ (810df24 <ETH_SetMACConfig+0x234>)
 810de16:	4013      	ands	r3, r2
 810de18:	687a      	ldr	r2, [r7, #4]
 810de1a:	6812      	ldr	r2, [r2, #0]
 810de1c:	68f9      	ldr	r1, [r7, #12]
 810de1e:	430b      	orrs	r3, r1
 810de20:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810de22:	683b      	ldr	r3, [r7, #0]
 810de24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810de28:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 810de2a:	683b      	ldr	r3, [r7, #0]
 810de2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810de2e:	4313      	orrs	r3, r2
 810de30:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810de32:	687b      	ldr	r3, [r7, #4]
 810de34:	681b      	ldr	r3, [r3, #0]
 810de36:	68db      	ldr	r3, [r3, #12]
 810de38:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 810de3c:	f023 0301 	bic.w	r3, r3, #1
 810de40:	687a      	ldr	r2, [r7, #4]
 810de42:	6812      	ldr	r2, [r2, #0]
 810de44:	68f9      	ldr	r1, [r7, #12]
 810de46:	430b      	orrs	r3, r1
 810de48:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810de4a:	683b      	ldr	r3, [r7, #0]
 810de4c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810de50:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810de52:	683b      	ldr	r3, [r7, #0]
 810de54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810de56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 810de58:	683a      	ldr	r2, [r7, #0]
 810de5a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810de5e:	2a00      	cmp	r2, #0
 810de60:	d101      	bne.n	810de66 <ETH_SetMACConfig+0x176>
 810de62:	2280      	movs	r2, #128	@ 0x80
 810de64:	e000      	b.n	810de68 <ETH_SetMACConfig+0x178>
 810de66:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 810de68:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 810de6a:	683b      	ldr	r3, [r7, #0]
 810de6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810de6e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810de70:	4313      	orrs	r3, r2
 810de72:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 810de74:	687b      	ldr	r3, [r7, #4]
 810de76:	681b      	ldr	r3, [r3, #0]
 810de78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810de7a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810de7e:	4013      	ands	r3, r2
 810de80:	687a      	ldr	r2, [r7, #4]
 810de82:	6812      	ldr	r2, [r2, #0]
 810de84:	68f9      	ldr	r1, [r7, #12]
 810de86:	430b      	orrs	r3, r1
 810de88:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810de8a:	683b      	ldr	r3, [r7, #0]
 810de8c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 810de90:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810de92:	683b      	ldr	r3, [r7, #0]
 810de94:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 810de98:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810de9a:	4313      	orrs	r3, r2
 810de9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810de9e:	687b      	ldr	r3, [r7, #4]
 810dea0:	681b      	ldr	r3, [r3, #0]
 810dea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810dea6:	f023 0103 	bic.w	r1, r3, #3
 810deaa:	687b      	ldr	r3, [r7, #4]
 810deac:	681b      	ldr	r3, [r3, #0]
 810deae:	68fa      	ldr	r2, [r7, #12]
 810deb0:	430a      	orrs	r2, r1
 810deb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 810deb6:	687b      	ldr	r3, [r7, #4]
 810deb8:	681b      	ldr	r3, [r3, #0]
 810deba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810debe:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 810dec2:	683b      	ldr	r3, [r7, #0]
 810dec4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810dec6:	687b      	ldr	r3, [r7, #4]
 810dec8:	681b      	ldr	r3, [r3, #0]
 810deca:	430a      	orrs	r2, r1
 810decc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 810ded0:	683b      	ldr	r3, [r7, #0]
 810ded2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810ded4:	683a      	ldr	r2, [r7, #0]
 810ded6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 810deda:	2a00      	cmp	r2, #0
 810dedc:	d101      	bne.n	810dee2 <ETH_SetMACConfig+0x1f2>
 810dede:	2240      	movs	r2, #64	@ 0x40
 810dee0:	e000      	b.n	810dee4 <ETH_SetMACConfig+0x1f4>
 810dee2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 810dee4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 810dee6:	683b      	ldr	r3, [r7, #0]
 810dee8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 810deec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810deee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 810def0:	683b      	ldr	r3, [r7, #0]
 810def2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 810def6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 810def8:	4313      	orrs	r3, r2
 810defa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 810defc:	687b      	ldr	r3, [r7, #4]
 810defe:	681b      	ldr	r3, [r3, #0]
 810df00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810df04:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 810df08:	687b      	ldr	r3, [r7, #4]
 810df0a:	681b      	ldr	r3, [r3, #0]
 810df0c:	68fa      	ldr	r2, [r7, #12]
 810df0e:	430a      	orrs	r2, r1
 810df10:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 810df14:	bf00      	nop
 810df16:	3714      	adds	r7, #20
 810df18:	46bd      	mov	sp, r7
 810df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df1e:	4770      	bx	lr
 810df20:	00048083 	.word	0x00048083
 810df24:	c0f88000 	.word	0xc0f88000

0810df28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 810df28:	b480      	push	{r7}
 810df2a:	b085      	sub	sp, #20
 810df2c:	af00      	add	r7, sp, #0
 810df2e:	6078      	str	r0, [r7, #4]
 810df30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810df32:	687b      	ldr	r3, [r7, #4]
 810df34:	681b      	ldr	r3, [r3, #0]
 810df36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810df3a:	681b      	ldr	r3, [r3, #0]
 810df3c:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 810df40:	f023 0302 	bic.w	r3, r3, #2
 810df44:	683a      	ldr	r2, [r7, #0]
 810df46:	6811      	ldr	r1, [r2, #0]
 810df48:	687a      	ldr	r2, [r7, #4]
 810df4a:	6812      	ldr	r2, [r2, #0]
 810df4c:	430b      	orrs	r3, r1
 810df4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810df52:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810df54:	683b      	ldr	r3, [r7, #0]
 810df56:	791b      	ldrb	r3, [r3, #4]
 810df58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 810df5a:	683b      	ldr	r3, [r7, #0]
 810df5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810df5e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810df60:	683b      	ldr	r3, [r7, #0]
 810df62:	7b1b      	ldrb	r3, [r3, #12]
 810df64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810df66:	4313      	orrs	r3, r2
 810df68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810df6a:	687b      	ldr	r3, [r7, #4]
 810df6c:	681b      	ldr	r3, [r3, #0]
 810df6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810df72:	685b      	ldr	r3, [r3, #4]
 810df74:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 810df78:	f023 0301 	bic.w	r3, r3, #1
 810df7c:	687a      	ldr	r2, [r7, #4]
 810df7e:	6812      	ldr	r2, [r2, #0]
 810df80:	68f9      	ldr	r1, [r7, #12]
 810df82:	430b      	orrs	r3, r1
 810df84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810df88:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810df8a:	683b      	ldr	r3, [r7, #0]
 810df8c:	7b5b      	ldrb	r3, [r3, #13]
 810df8e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 810df90:	683b      	ldr	r3, [r7, #0]
 810df92:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810df94:	4313      	orrs	r3, r2
 810df96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 810df98:	687b      	ldr	r3, [r7, #4]
 810df9a:	681b      	ldr	r3, [r3, #0]
 810df9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810dfa0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 810dfa4:	4b21      	ldr	r3, [pc, #132]	@ (810e02c <ETH_SetDMAConfig+0x104>)
 810dfa6:	4013      	ands	r3, r2
 810dfa8:	687a      	ldr	r2, [r7, #4]
 810dfaa:	6812      	ldr	r2, [r2, #0]
 810dfac:	68f9      	ldr	r1, [r7, #12]
 810dfae:	430b      	orrs	r3, r1
 810dfb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810dfb4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 810dfb8:	683b      	ldr	r3, [r7, #0]
 810dfba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 810dfbc:	683b      	ldr	r3, [r7, #0]
 810dfbe:	7d1b      	ldrb	r3, [r3, #20]
 810dfc0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 810dfc2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 810dfc4:	683b      	ldr	r3, [r7, #0]
 810dfc6:	7f5b      	ldrb	r3, [r3, #29]
 810dfc8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810dfca:	4313      	orrs	r3, r2
 810dfcc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810dfce:	687b      	ldr	r3, [r7, #4]
 810dfd0:	681b      	ldr	r3, [r3, #0]
 810dfd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810dfd6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810dfda:	4b15      	ldr	r3, [pc, #84]	@ (810e030 <ETH_SetDMAConfig+0x108>)
 810dfdc:	4013      	ands	r3, r2
 810dfde:	687a      	ldr	r2, [r7, #4]
 810dfe0:	6812      	ldr	r2, [r2, #0]
 810dfe2:	68f9      	ldr	r1, [r7, #12]
 810dfe4:	430b      	orrs	r3, r1
 810dfe6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810dfea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810dfee:	683b      	ldr	r3, [r7, #0]
 810dff0:	7f1b      	ldrb	r3, [r3, #28]
 810dff2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 810dff4:	683b      	ldr	r3, [r7, #0]
 810dff6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810dff8:	4313      	orrs	r3, r2
 810dffa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 810dffc:	687b      	ldr	r3, [r7, #4]
 810dffe:	681b      	ldr	r3, [r3, #0]
 810e000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810e004:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810e008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810e00c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810e010:	687a      	ldr	r2, [r7, #4]
 810e012:	6812      	ldr	r2, [r2, #0]
 810e014:	68f9      	ldr	r1, [r7, #12]
 810e016:	430b      	orrs	r3, r1
 810e018:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810e01c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 810e020:	bf00      	nop
 810e022:	3714      	adds	r7, #20
 810e024:	46bd      	mov	sp, r7
 810e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e02a:	4770      	bx	lr
 810e02c:	fffec000 	.word	0xfffec000
 810e030:	ffc0efef 	.word	0xffc0efef

0810e034 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 810e034:	b580      	push	{r7, lr}
 810e036:	b0a4      	sub	sp, #144	@ 0x90
 810e038:	af00      	add	r7, sp, #0
 810e03a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 810e03c:	2301      	movs	r3, #1
 810e03e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810e042:	2300      	movs	r3, #0
 810e044:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 810e046:	2300      	movs	r3, #0
 810e048:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 810e04c:	2300      	movs	r3, #0
 810e04e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810e052:	2301      	movs	r3, #1
 810e054:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 810e058:	2301      	movs	r3, #1
 810e05a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810e05e:	2301      	movs	r3, #1
 810e060:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 810e064:	2300      	movs	r3, #0
 810e066:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810e06a:	2301      	movs	r3, #1
 810e06c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810e070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810e074:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 810e076:	2300      	movs	r3, #0
 810e078:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 810e07c:	2300      	movs	r3, #0
 810e07e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810e080:	2300      	movs	r3, #0
 810e082:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 810e086:	2300      	movs	r3, #0
 810e088:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 810e08c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 810e090:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810e092:	2300      	movs	r3, #0
 810e094:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 810e098:	2300      	movs	r3, #0
 810e09a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 810e09c:	2301      	movs	r3, #1
 810e09e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810e0a2:	2300      	movs	r3, #0
 810e0a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 810e0a8:	2300      	movs	r3, #0
 810e0aa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810e0ae:	2300      	movs	r3, #0
 810e0b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 810e0b2:	2300      	movs	r3, #0
 810e0b4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 810e0b6:	2300      	movs	r3, #0
 810e0b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810e0ba:	2300      	movs	r3, #0
 810e0bc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 810e0c0:	2300      	movs	r3, #0
 810e0c2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 810e0c6:	2301      	movs	r3, #1
 810e0c8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 810e0cc:	2320      	movs	r3, #32
 810e0ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 810e0d2:	2301      	movs	r3, #1
 810e0d4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 810e0d8:	2300      	movs	r3, #0
 810e0da:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810e0de:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 810e0e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 810e0e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810e0e8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 810e0ea:	2300      	movs	r3, #0
 810e0ec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 810e0f0:	2302      	movs	r3, #2
 810e0f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 810e0f6:	2300      	movs	r3, #0
 810e0f8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 810e0fc:	2300      	movs	r3, #0
 810e0fe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 810e102:	2300      	movs	r3, #0
 810e104:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 810e108:	2301      	movs	r3, #1
 810e10a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810e10e:	2300      	movs	r3, #0
 810e110:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810e112:	2301      	movs	r3, #1
 810e114:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 810e118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810e11c:	4619      	mov	r1, r3
 810e11e:	6878      	ldr	r0, [r7, #4]
 810e120:	f7ff fde6 	bl	810dcf0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 810e124:	2301      	movs	r3, #1
 810e126:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 810e128:	2301      	movs	r3, #1
 810e12a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 810e12c:	2300      	movs	r3, #0
 810e12e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810e130:	2300      	movs	r3, #0
 810e132:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 810e136:	2300      	movs	r3, #0
 810e138:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 810e13a:	2300      	movs	r3, #0
 810e13c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810e13e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810e142:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 810e144:	2300      	movs	r3, #0
 810e146:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 810e148:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810e14c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810e14e:	2300      	movs	r3, #0
 810e150:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 810e154:	f44f 7306 	mov.w	r3, #536	@ 0x218
 810e158:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 810e15a:	f107 0308 	add.w	r3, r7, #8
 810e15e:	4619      	mov	r1, r3
 810e160:	6878      	ldr	r0, [r7, #4]
 810e162:	f7ff fee1 	bl	810df28 <ETH_SetDMAConfig>
}
 810e166:	bf00      	nop
 810e168:	3790      	adds	r7, #144	@ 0x90
 810e16a:	46bd      	mov	sp, r7
 810e16c:	bd80      	pop	{r7, pc}

0810e16e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810e16e:	b480      	push	{r7}
 810e170:	b085      	sub	sp, #20
 810e172:	af00      	add	r7, sp, #0
 810e174:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810e176:	2300      	movs	r3, #0
 810e178:	60fb      	str	r3, [r7, #12]
 810e17a:	e01d      	b.n	810e1b8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810e17c:	687b      	ldr	r3, [r7, #4]
 810e17e:	68d9      	ldr	r1, [r3, #12]
 810e180:	68fa      	ldr	r2, [r7, #12]
 810e182:	4613      	mov	r3, r2
 810e184:	005b      	lsls	r3, r3, #1
 810e186:	4413      	add	r3, r2
 810e188:	00db      	lsls	r3, r3, #3
 810e18a:	440b      	add	r3, r1
 810e18c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810e18e:	68bb      	ldr	r3, [r7, #8]
 810e190:	2200      	movs	r2, #0
 810e192:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810e194:	68bb      	ldr	r3, [r7, #8]
 810e196:	2200      	movs	r2, #0
 810e198:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810e19a:	68bb      	ldr	r3, [r7, #8]
 810e19c:	2200      	movs	r2, #0
 810e19e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 810e1a0:	68bb      	ldr	r3, [r7, #8]
 810e1a2:	2200      	movs	r2, #0
 810e1a4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 810e1a6:	68b9      	ldr	r1, [r7, #8]
 810e1a8:	687b      	ldr	r3, [r7, #4]
 810e1aa:	68fa      	ldr	r2, [r7, #12]
 810e1ac:	3206      	adds	r2, #6
 810e1ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810e1b2:	68fb      	ldr	r3, [r7, #12]
 810e1b4:	3301      	adds	r3, #1
 810e1b6:	60fb      	str	r3, [r7, #12]
 810e1b8:	68fb      	ldr	r3, [r7, #12]
 810e1ba:	2b03      	cmp	r3, #3
 810e1bc:	d9de      	bls.n	810e17c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810e1be:	687b      	ldr	r3, [r7, #4]
 810e1c0:	2200      	movs	r2, #0
 810e1c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 810e1c4:	687b      	ldr	r3, [r7, #4]
 810e1c6:	681b      	ldr	r3, [r3, #0]
 810e1c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810e1cc:	461a      	mov	r2, r3
 810e1ce:	2303      	movs	r3, #3
 810e1d0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 810e1d4:	687b      	ldr	r3, [r7, #4]
 810e1d6:	68da      	ldr	r2, [r3, #12]
 810e1d8:	687b      	ldr	r3, [r7, #4]
 810e1da:	681b      	ldr	r3, [r3, #0]
 810e1dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810e1e0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 810e1e4:	687b      	ldr	r3, [r7, #4]
 810e1e6:	68da      	ldr	r2, [r3, #12]
 810e1e8:	687b      	ldr	r3, [r7, #4]
 810e1ea:	681b      	ldr	r3, [r3, #0]
 810e1ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810e1f0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 810e1f4:	bf00      	nop
 810e1f6:	3714      	adds	r7, #20
 810e1f8:	46bd      	mov	sp, r7
 810e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1fe:	4770      	bx	lr

0810e200 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 810e200:	b480      	push	{r7}
 810e202:	b085      	sub	sp, #20
 810e204:	af00      	add	r7, sp, #0
 810e206:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810e208:	2300      	movs	r3, #0
 810e20a:	60fb      	str	r3, [r7, #12]
 810e20c:	e023      	b.n	810e256 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810e20e:	687b      	ldr	r3, [r7, #4]
 810e210:	6919      	ldr	r1, [r3, #16]
 810e212:	68fa      	ldr	r2, [r7, #12]
 810e214:	4613      	mov	r3, r2
 810e216:	005b      	lsls	r3, r3, #1
 810e218:	4413      	add	r3, r2
 810e21a:	00db      	lsls	r3, r3, #3
 810e21c:	440b      	add	r3, r1
 810e21e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 810e220:	68bb      	ldr	r3, [r7, #8]
 810e222:	2200      	movs	r2, #0
 810e224:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 810e226:	68bb      	ldr	r3, [r7, #8]
 810e228:	2200      	movs	r2, #0
 810e22a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 810e22c:	68bb      	ldr	r3, [r7, #8]
 810e22e:	2200      	movs	r2, #0
 810e230:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 810e232:	68bb      	ldr	r3, [r7, #8]
 810e234:	2200      	movs	r2, #0
 810e236:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 810e238:	68bb      	ldr	r3, [r7, #8]
 810e23a:	2200      	movs	r2, #0
 810e23c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 810e23e:	68bb      	ldr	r3, [r7, #8]
 810e240:	2200      	movs	r2, #0
 810e242:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 810e244:	68b9      	ldr	r1, [r7, #8]
 810e246:	687b      	ldr	r3, [r7, #4]
 810e248:	68fa      	ldr	r2, [r7, #12]
 810e24a:	3212      	adds	r2, #18
 810e24c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810e250:	68fb      	ldr	r3, [r7, #12]
 810e252:	3301      	adds	r3, #1
 810e254:	60fb      	str	r3, [r7, #12]
 810e256:	68fb      	ldr	r3, [r7, #12]
 810e258:	2b03      	cmp	r3, #3
 810e25a:	d9d8      	bls.n	810e20e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	2200      	movs	r2, #0
 810e260:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 810e262:	687b      	ldr	r3, [r7, #4]
 810e264:	2200      	movs	r2, #0
 810e266:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 810e268:	687b      	ldr	r3, [r7, #4]
 810e26a:	2200      	movs	r2, #0
 810e26c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810e26e:	687b      	ldr	r3, [r7, #4]
 810e270:	2200      	movs	r2, #0
 810e272:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 810e274:	687b      	ldr	r3, [r7, #4]
 810e276:	2200      	movs	r2, #0
 810e278:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 810e27a:	687b      	ldr	r3, [r7, #4]
 810e27c:	681b      	ldr	r3, [r3, #0]
 810e27e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810e282:	461a      	mov	r2, r3
 810e284:	2303      	movs	r3, #3
 810e286:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810e28a:	687b      	ldr	r3, [r7, #4]
 810e28c:	691a      	ldr	r2, [r3, #16]
 810e28e:	687b      	ldr	r3, [r7, #4]
 810e290:	681b      	ldr	r3, [r3, #0]
 810e292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810e296:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810e29a:	687b      	ldr	r3, [r7, #4]
 810e29c:	691b      	ldr	r3, [r3, #16]
 810e29e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 810e2a2:	687b      	ldr	r3, [r7, #4]
 810e2a4:	681b      	ldr	r3, [r3, #0]
 810e2a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810e2aa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810e2ae:	bf00      	nop
 810e2b0:	3714      	adds	r7, #20
 810e2b2:	46bd      	mov	sp, r7
 810e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2b8:	4770      	bx	lr

0810e2ba <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 810e2ba:	b480      	push	{r7}
 810e2bc:	b091      	sub	sp, #68	@ 0x44
 810e2be:	af00      	add	r7, sp, #0
 810e2c0:	60f8      	str	r0, [r7, #12]
 810e2c2:	60b9      	str	r1, [r7, #8]
 810e2c4:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 810e2c6:	68fb      	ldr	r3, [r7, #12]
 810e2c8:	3318      	adds	r3, #24
 810e2ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 810e2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e2ce:	691b      	ldr	r3, [r3, #16]
 810e2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 810e2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e2d4:	691b      	ldr	r3, [r3, #16]
 810e2d6:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 810e2d8:	2300      	movs	r3, #0
 810e2da:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810e2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e2de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810e2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810e2e4:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 810e2e6:	68bb      	ldr	r3, [r7, #8]
 810e2e8:	689b      	ldr	r3, [r3, #8]
 810e2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 810e2ec:	2300      	movs	r3, #0
 810e2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 810e2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2f2:	68db      	ldr	r3, [r3, #12]
 810e2f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810e2f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810e2fc:	d007      	beq.n	810e30e <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 810e2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e302:	3304      	adds	r3, #4
 810e304:	009b      	lsls	r3, r3, #2
 810e306:	4413      	add	r3, r2
 810e308:	685b      	ldr	r3, [r3, #4]
 810e30a:	2b00      	cmp	r3, #0
 810e30c:	d001      	beq.n	810e312 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 810e30e:	2302      	movs	r3, #2
 810e310:	e267      	b.n	810e7e2 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810e312:	68bb      	ldr	r3, [r7, #8]
 810e314:	681b      	ldr	r3, [r3, #0]
 810e316:	f003 0304 	and.w	r3, r3, #4
 810e31a:	2b00      	cmp	r3, #0
 810e31c:	d044      	beq.n	810e3a8 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 810e31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e320:	68db      	ldr	r3, [r3, #12]
 810e322:	0c1b      	lsrs	r3, r3, #16
 810e324:	041b      	lsls	r3, r3, #16
 810e326:	68ba      	ldr	r2, [r7, #8]
 810e328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810e32a:	431a      	orrs	r2, r3
 810e32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e32e:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 810e330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e332:	68db      	ldr	r3, [r3, #12]
 810e334:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810e338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e33a:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 810e33c:	68fb      	ldr	r3, [r7, #12]
 810e33e:	681b      	ldr	r3, [r3, #0]
 810e340:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810e342:	68fb      	ldr	r3, [r7, #12]
 810e344:	681b      	ldr	r3, [r3, #0]
 810e346:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 810e34a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 810e34c:	68bb      	ldr	r3, [r7, #8]
 810e34e:	681b      	ldr	r3, [r3, #0]
 810e350:	f003 0308 	and.w	r3, r3, #8
 810e354:	2b00      	cmp	r3, #0
 810e356:	d027      	beq.n	810e3a8 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 810e358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e35a:	689b      	ldr	r3, [r3, #8]
 810e35c:	b29a      	uxth	r2, r3
 810e35e:	68bb      	ldr	r3, [r7, #8]
 810e360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e362:	041b      	lsls	r3, r3, #16
 810e364:	431a      	orrs	r2, r3
 810e366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e368:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 810e36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e36c:	68db      	ldr	r3, [r3, #12]
 810e36e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 810e372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e374:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 810e376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e378:	68db      	ldr	r3, [r3, #12]
 810e37a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 810e37e:	68bb      	ldr	r3, [r7, #8]
 810e380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810e382:	431a      	orrs	r2, r3
 810e384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e386:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 810e388:	68fb      	ldr	r3, [r7, #12]
 810e38a:	681b      	ldr	r3, [r3, #0]
 810e38c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810e38e:	68fb      	ldr	r3, [r7, #12]
 810e390:	681b      	ldr	r3, [r3, #0]
 810e392:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 810e396:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 810e398:	68fb      	ldr	r3, [r7, #12]
 810e39a:	681b      	ldr	r3, [r3, #0]
 810e39c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810e39e:	68fb      	ldr	r3, [r7, #12]
 810e3a0:	681b      	ldr	r3, [r3, #0]
 810e3a2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 810e3a6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810e3a8:	68bb      	ldr	r3, [r7, #8]
 810e3aa:	681b      	ldr	r3, [r3, #0]
 810e3ac:	f003 0310 	and.w	r3, r3, #16
 810e3b0:	2b00      	cmp	r3, #0
 810e3b2:	d010      	beq.n	810e3d6 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 810e3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e3b6:	689b      	ldr	r3, [r3, #8]
 810e3b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810e3bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810e3c0:	68ba      	ldr	r2, [r7, #8]
 810e3c2:	6992      	ldr	r2, [r2, #24]
 810e3c4:	431a      	orrs	r2, r3
 810e3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e3c8:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 810e3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e3cc:	68db      	ldr	r3, [r3, #12]
 810e3ce:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 810e3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e3d4:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810e3d6:	68bb      	ldr	r3, [r7, #8]
 810e3d8:	681b      	ldr	r3, [r3, #0]
 810e3da:	f003 0304 	and.w	r3, r3, #4
 810e3de:	2b00      	cmp	r3, #0
 810e3e0:	d105      	bne.n	810e3ee <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 810e3e2:	68bb      	ldr	r3, [r7, #8]
 810e3e4:	681b      	ldr	r3, [r3, #0]
 810e3e6:	f003 0310 	and.w	r3, r3, #16
 810e3ea:	2b00      	cmp	r3, #0
 810e3ec:	d036      	beq.n	810e45c <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 810e3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e3f0:	68db      	ldr	r3, [r3, #12]
 810e3f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810e3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e3f8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810e3fa:	f3bf 8f5f 	dmb	sy
}
 810e3fe:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 810e400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e402:	68db      	ldr	r3, [r3, #12]
 810e404:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810e408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e40a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810e40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e40e:	3301      	adds	r3, #1
 810e410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810e412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e414:	2b03      	cmp	r3, #3
 810e416:	d902      	bls.n	810e41e <ETH_Prepare_Tx_Descriptors+0x164>
 810e418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e41a:	3b04      	subs	r3, #4
 810e41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810e41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e420:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810e422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810e426:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 810e428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e42a:	3301      	adds	r3, #1
 810e42c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 810e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e430:	68db      	ldr	r3, [r3, #12]
 810e432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810e436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810e43a:	d10f      	bne.n	810e45c <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 810e43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e43e:	6a3a      	ldr	r2, [r7, #32]
 810e440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810e444:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 810e446:	f3bf 8f5f 	dmb	sy
}
 810e44a:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 810e44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e44e:	68db      	ldr	r3, [r3, #12]
 810e450:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810e454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e456:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 810e458:	2302      	movs	r3, #2
 810e45a:	e1c2      	b.n	810e7e2 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 810e45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e45e:	3301      	adds	r3, #1
 810e460:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 810e462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e464:	681b      	ldr	r3, [r3, #0]
 810e466:	461a      	mov	r2, r3
 810e468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e46a:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810e46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e46e:	689b      	ldr	r3, [r3, #8]
 810e470:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810e474:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810e478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e47a:	6852      	ldr	r2, [r2, #4]
 810e47c:	431a      	orrs	r2, r3
 810e47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e480:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 810e482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e484:	689b      	ldr	r3, [r3, #8]
 810e486:	2b00      	cmp	r3, #0
 810e488:	d014      	beq.n	810e4b4 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 810e48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e48c:	689b      	ldr	r3, [r3, #8]
 810e48e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 810e490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e492:	681b      	ldr	r3, [r3, #0]
 810e494:	461a      	mov	r2, r3
 810e496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e498:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810e49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e49c:	689b      	ldr	r3, [r3, #8]
 810e49e:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810e4a2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810e4a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e4a8:	6852      	ldr	r2, [r2, #4]
 810e4aa:	0412      	lsls	r2, r2, #16
 810e4ac:	431a      	orrs	r2, r3
 810e4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4b0:	609a      	str	r2, [r3, #8]
 810e4b2:	e00a      	b.n	810e4ca <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810e4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4b6:	2200      	movs	r2, #0
 810e4b8:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810e4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4bc:	689b      	ldr	r3, [r3, #8]
 810e4be:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810e4c2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810e4c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e4c8:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810e4ca:	68bb      	ldr	r3, [r7, #8]
 810e4cc:	681b      	ldr	r3, [r3, #0]
 810e4ce:	f003 0310 	and.w	r3, r3, #16
 810e4d2:	2b00      	cmp	r3, #0
 810e4d4:	d019      	beq.n	810e50a <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 810e4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4d8:	68db      	ldr	r3, [r3, #12]
 810e4da:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 810e4de:	68bb      	ldr	r3, [r7, #8]
 810e4e0:	6a1b      	ldr	r3, [r3, #32]
 810e4e2:	04db      	lsls	r3, r3, #19
 810e4e4:	431a      	orrs	r2, r3
 810e4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4e8:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 810e4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4ec:	68db      	ldr	r3, [r3, #12]
 810e4ee:	0c9b      	lsrs	r3, r3, #18
 810e4f0:	049b      	lsls	r3, r3, #18
 810e4f2:	68ba      	ldr	r2, [r7, #8]
 810e4f4:	69d2      	ldr	r2, [r2, #28]
 810e4f6:	431a      	orrs	r2, r3
 810e4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4fa:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810e4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4fe:	68db      	ldr	r3, [r3, #12]
 810e500:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 810e504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e506:	60da      	str	r2, [r3, #12]
 810e508:	e028      	b.n	810e55c <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 810e50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e50c:	68db      	ldr	r3, [r3, #12]
 810e50e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810e512:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810e516:	68ba      	ldr	r2, [r7, #8]
 810e518:	6852      	ldr	r2, [r2, #4]
 810e51a:	431a      	orrs	r2, r3
 810e51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e51e:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810e520:	68bb      	ldr	r3, [r7, #8]
 810e522:	681b      	ldr	r3, [r3, #0]
 810e524:	f003 0301 	and.w	r3, r3, #1
 810e528:	2b00      	cmp	r3, #0
 810e52a:	d008      	beq.n	810e53e <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810e52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e52e:	68db      	ldr	r3, [r3, #12]
 810e530:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 810e534:	68bb      	ldr	r3, [r7, #8]
 810e536:	695b      	ldr	r3, [r3, #20]
 810e538:	431a      	orrs	r2, r3
 810e53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e53c:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 810e53e:	68bb      	ldr	r3, [r7, #8]
 810e540:	681b      	ldr	r3, [r3, #0]
 810e542:	f003 0320 	and.w	r3, r3, #32
 810e546:	2b00      	cmp	r3, #0
 810e548:	d008      	beq.n	810e55c <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 810e54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e54c:	68db      	ldr	r3, [r3, #12]
 810e54e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 810e552:	68bb      	ldr	r3, [r7, #8]
 810e554:	691b      	ldr	r3, [r3, #16]
 810e556:	431a      	orrs	r2, r3
 810e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e55a:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810e55c:	68bb      	ldr	r3, [r7, #8]
 810e55e:	681b      	ldr	r3, [r3, #0]
 810e560:	f003 0304 	and.w	r3, r3, #4
 810e564:	2b00      	cmp	r3, #0
 810e566:	d008      	beq.n	810e57a <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 810e568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e56a:	689b      	ldr	r3, [r3, #8]
 810e56c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810e570:	68bb      	ldr	r3, [r7, #8]
 810e572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e574:	431a      	orrs	r2, r3
 810e576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e578:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 810e57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e57c:	68db      	ldr	r3, [r3, #12]
 810e57e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810e582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e584:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 810e586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e588:	68db      	ldr	r3, [r3, #12]
 810e58a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810e58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e590:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810e592:	f3bf 8f5f 	dmb	sy
}
 810e596:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810e598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e59a:	68db      	ldr	r3, [r3, #12]
 810e59c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810e5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e5a2:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 810e5a4:	68bb      	ldr	r3, [r7, #8]
 810e5a6:	681b      	ldr	r3, [r3, #0]
 810e5a8:	f003 0302 	and.w	r3, r3, #2
 810e5ac:	2b00      	cmp	r3, #0
 810e5ae:	f000 80d9 	beq.w	810e764 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 810e5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e5b4:	68db      	ldr	r3, [r3, #12]
 810e5b6:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 810e5ba:	68bb      	ldr	r3, [r7, #8]
 810e5bc:	68db      	ldr	r3, [r3, #12]
 810e5be:	431a      	orrs	r2, r3
 810e5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e5c2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 810e5c4:	e0ce      	b.n	810e764 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810e5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e5c8:	68db      	ldr	r3, [r3, #12]
 810e5ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 810e5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e5d0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810e5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e5d4:	3301      	adds	r3, #1
 810e5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810e5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e5da:	2b03      	cmp	r3, #3
 810e5dc:	d902      	bls.n	810e5e4 <ETH_Prepare_Tx_Descriptors+0x32a>
 810e5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e5e0:	3b04      	subs	r3, #4
 810e5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810e5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e5e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810e5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810e5ec:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 810e5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e5f0:	68db      	ldr	r3, [r3, #12]
 810e5f2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 810e5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e5f8:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 810e5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e5fc:	68db      	ldr	r3, [r3, #12]
 810e5fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810e602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810e606:	d007      	beq.n	810e618 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 810e608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e60c:	3304      	adds	r3, #4
 810e60e:	009b      	lsls	r3, r3, #2
 810e610:	4413      	add	r3, r2
 810e612:	685b      	ldr	r3, [r3, #4]
 810e614:	2b00      	cmp	r3, #0
 810e616:	d029      	beq.n	810e66c <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 810e618:	6a3b      	ldr	r3, [r7, #32]
 810e61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810e61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e61e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810e620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810e624:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 810e626:	2300      	movs	r3, #0
 810e628:	63bb      	str	r3, [r7, #56]	@ 0x38
 810e62a:	e019      	b.n	810e660 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 810e62c:	f3bf 8f5f 	dmb	sy
}
 810e630:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810e632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e634:	68db      	ldr	r3, [r3, #12]
 810e636:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e63c:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 810e63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e640:	3301      	adds	r3, #1
 810e642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810e644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e646:	2b03      	cmp	r3, #3
 810e648:	d902      	bls.n	810e650 <ETH_Prepare_Tx_Descriptors+0x396>
 810e64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e64c:	3b04      	subs	r3, #4
 810e64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810e650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e652:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810e654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810e658:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 810e65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e65c:	3301      	adds	r3, #1
 810e65e:	63bb      	str	r3, [r7, #56]	@ 0x38
 810e660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810e662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e664:	429a      	cmp	r2, r3
 810e666:	d3e1      	bcc.n	810e62c <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 810e668:	2302      	movs	r3, #2
 810e66a:	e0ba      	b.n	810e7e2 <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 810e66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e66e:	3301      	adds	r3, #1
 810e670:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 810e672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e674:	689b      	ldr	r3, [r3, #8]
 810e676:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 810e678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e67a:	681b      	ldr	r3, [r3, #0]
 810e67c:	461a      	mov	r2, r3
 810e67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e680:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810e682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e684:	689b      	ldr	r3, [r3, #8]
 810e686:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810e68a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810e68e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e690:	6852      	ldr	r2, [r2, #4]
 810e692:	431a      	orrs	r2, r3
 810e694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e696:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 810e698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e69a:	689b      	ldr	r3, [r3, #8]
 810e69c:	2b00      	cmp	r3, #0
 810e69e:	d014      	beq.n	810e6ca <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 810e6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e6a2:	689b      	ldr	r3, [r3, #8]
 810e6a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 810e6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e6a8:	681b      	ldr	r3, [r3, #0]
 810e6aa:	461a      	mov	r2, r3
 810e6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e6ae:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e6b2:	689b      	ldr	r3, [r3, #8]
 810e6b4:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810e6b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810e6bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e6be:	6852      	ldr	r2, [r2, #4]
 810e6c0:	0412      	lsls	r2, r2, #16
 810e6c2:	431a      	orrs	r2, r3
 810e6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e6c6:	609a      	str	r2, [r3, #8]
 810e6c8:	e00a      	b.n	810e6e0 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810e6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e6cc:	2200      	movs	r2, #0
 810e6ce:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810e6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e6d2:	689b      	ldr	r3, [r3, #8]
 810e6d4:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810e6d8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810e6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e6de:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810e6e0:	68bb      	ldr	r3, [r7, #8]
 810e6e2:	681b      	ldr	r3, [r3, #0]
 810e6e4:	f003 0310 	and.w	r3, r3, #16
 810e6e8:	2b00      	cmp	r3, #0
 810e6ea:	d00f      	beq.n	810e70c <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 810e6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e6ee:	68db      	ldr	r3, [r3, #12]
 810e6f0:	0c9b      	lsrs	r3, r3, #18
 810e6f2:	049b      	lsls	r3, r3, #18
 810e6f4:	68ba      	ldr	r2, [r7, #8]
 810e6f6:	69d2      	ldr	r2, [r2, #28]
 810e6f8:	431a      	orrs	r2, r3
 810e6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e6fc:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810e6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e700:	68db      	ldr	r3, [r3, #12]
 810e702:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 810e706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e708:	60da      	str	r2, [r3, #12]
 810e70a:	e019      	b.n	810e740 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 810e70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e70e:	68db      	ldr	r3, [r3, #12]
 810e710:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810e714:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810e718:	68ba      	ldr	r2, [r7, #8]
 810e71a:	6852      	ldr	r2, [r2, #4]
 810e71c:	431a      	orrs	r2, r3
 810e71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e720:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810e722:	68bb      	ldr	r3, [r7, #8]
 810e724:	681b      	ldr	r3, [r3, #0]
 810e726:	f003 0301 	and.w	r3, r3, #1
 810e72a:	2b00      	cmp	r3, #0
 810e72c:	d008      	beq.n	810e740 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810e72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e730:	68db      	ldr	r3, [r3, #12]
 810e732:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 810e736:	68bb      	ldr	r3, [r7, #8]
 810e738:	695b      	ldr	r3, [r3, #20]
 810e73a:	431a      	orrs	r2, r3
 810e73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e73e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 810e740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e742:	3301      	adds	r3, #1
 810e744:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 810e746:	f3bf 8f5f 	dmb	sy
}
 810e74a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810e74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e74e:	68db      	ldr	r3, [r3, #12]
 810e750:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810e754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e756:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 810e758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e75a:	68db      	ldr	r3, [r3, #12]
 810e75c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810e760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e762:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 810e764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e766:	689b      	ldr	r3, [r3, #8]
 810e768:	2b00      	cmp	r3, #0
 810e76a:	f47f af2c 	bne.w	810e5c6 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 810e76e:	687b      	ldr	r3, [r7, #4]
 810e770:	2b00      	cmp	r3, #0
 810e772:	d006      	beq.n	810e782 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810e774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e776:	689b      	ldr	r3, [r3, #8]
 810e778:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810e77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e77e:	609a      	str	r2, [r3, #8]
 810e780:	e005      	b.n	810e78e <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810e782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e784:	689b      	ldr	r3, [r3, #8]
 810e786:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810e78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e78c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810e78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e790:	68db      	ldr	r3, [r3, #12]
 810e792:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810e796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e798:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 810e79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e79c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e79e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810e7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e7a2:	3304      	adds	r3, #4
 810e7a4:	009b      	lsls	r3, r3, #2
 810e7a6:	440b      	add	r3, r1
 810e7a8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 810e7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810e7ae:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810e7b0:	f3ef 8310 	mrs	r3, PRIMASK
 810e7b4:	613b      	str	r3, [r7, #16]
  return(result);
 810e7b6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 810e7b8:	61fb      	str	r3, [r7, #28]
 810e7ba:	2301      	movs	r3, #1
 810e7bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810e7be:	697b      	ldr	r3, [r7, #20]
 810e7c0:	f383 8810 	msr	PRIMASK, r3
}
 810e7c4:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 810e7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810e7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e7cc:	4413      	add	r3, r2
 810e7ce:	1c5a      	adds	r2, r3, #1
 810e7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7d2:	629a      	str	r2, [r3, #40]	@ 0x28
 810e7d4:	69fb      	ldr	r3, [r7, #28]
 810e7d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810e7d8:	69bb      	ldr	r3, [r7, #24]
 810e7da:	f383 8810 	msr	PRIMASK, r3
}
 810e7de:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 810e7e0:	2300      	movs	r3, #0
}
 810e7e2:	4618      	mov	r0, r3
 810e7e4:	3744      	adds	r7, #68	@ 0x44
 810e7e6:	46bd      	mov	sp, r7
 810e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e7ec:	4770      	bx	lr
	...

0810e7f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810e7f0:	b480      	push	{r7}
 810e7f2:	b089      	sub	sp, #36	@ 0x24
 810e7f4:	af00      	add	r7, sp, #0
 810e7f6:	6078      	str	r0, [r7, #4]
 810e7f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810e7fa:	2300      	movs	r3, #0
 810e7fc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810e7fe:	4b89      	ldr	r3, [pc, #548]	@ (810ea24 <HAL_GPIO_Init+0x234>)
 810e800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810e802:	e194      	b.n	810eb2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810e804:	683b      	ldr	r3, [r7, #0]
 810e806:	681a      	ldr	r2, [r3, #0]
 810e808:	2101      	movs	r1, #1
 810e80a:	69fb      	ldr	r3, [r7, #28]
 810e80c:	fa01 f303 	lsl.w	r3, r1, r3
 810e810:	4013      	ands	r3, r2
 810e812:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810e814:	693b      	ldr	r3, [r7, #16]
 810e816:	2b00      	cmp	r3, #0
 810e818:	f000 8186 	beq.w	810eb28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810e81c:	683b      	ldr	r3, [r7, #0]
 810e81e:	685b      	ldr	r3, [r3, #4]
 810e820:	f003 0303 	and.w	r3, r3, #3
 810e824:	2b01      	cmp	r3, #1
 810e826:	d005      	beq.n	810e834 <HAL_GPIO_Init+0x44>
 810e828:	683b      	ldr	r3, [r7, #0]
 810e82a:	685b      	ldr	r3, [r3, #4]
 810e82c:	f003 0303 	and.w	r3, r3, #3
 810e830:	2b02      	cmp	r3, #2
 810e832:	d130      	bne.n	810e896 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810e834:	687b      	ldr	r3, [r7, #4]
 810e836:	689b      	ldr	r3, [r3, #8]
 810e838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810e83a:	69fb      	ldr	r3, [r7, #28]
 810e83c:	005b      	lsls	r3, r3, #1
 810e83e:	2203      	movs	r2, #3
 810e840:	fa02 f303 	lsl.w	r3, r2, r3
 810e844:	43db      	mvns	r3, r3
 810e846:	69ba      	ldr	r2, [r7, #24]
 810e848:	4013      	ands	r3, r2
 810e84a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810e84c:	683b      	ldr	r3, [r7, #0]
 810e84e:	68da      	ldr	r2, [r3, #12]
 810e850:	69fb      	ldr	r3, [r7, #28]
 810e852:	005b      	lsls	r3, r3, #1
 810e854:	fa02 f303 	lsl.w	r3, r2, r3
 810e858:	69ba      	ldr	r2, [r7, #24]
 810e85a:	4313      	orrs	r3, r2
 810e85c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810e85e:	687b      	ldr	r3, [r7, #4]
 810e860:	69ba      	ldr	r2, [r7, #24]
 810e862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810e864:	687b      	ldr	r3, [r7, #4]
 810e866:	685b      	ldr	r3, [r3, #4]
 810e868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810e86a:	2201      	movs	r2, #1
 810e86c:	69fb      	ldr	r3, [r7, #28]
 810e86e:	fa02 f303 	lsl.w	r3, r2, r3
 810e872:	43db      	mvns	r3, r3
 810e874:	69ba      	ldr	r2, [r7, #24]
 810e876:	4013      	ands	r3, r2
 810e878:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810e87a:	683b      	ldr	r3, [r7, #0]
 810e87c:	685b      	ldr	r3, [r3, #4]
 810e87e:	091b      	lsrs	r3, r3, #4
 810e880:	f003 0201 	and.w	r2, r3, #1
 810e884:	69fb      	ldr	r3, [r7, #28]
 810e886:	fa02 f303 	lsl.w	r3, r2, r3
 810e88a:	69ba      	ldr	r2, [r7, #24]
 810e88c:	4313      	orrs	r3, r2
 810e88e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810e890:	687b      	ldr	r3, [r7, #4]
 810e892:	69ba      	ldr	r2, [r7, #24]
 810e894:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810e896:	683b      	ldr	r3, [r7, #0]
 810e898:	685b      	ldr	r3, [r3, #4]
 810e89a:	f003 0303 	and.w	r3, r3, #3
 810e89e:	2b03      	cmp	r3, #3
 810e8a0:	d017      	beq.n	810e8d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810e8a2:	687b      	ldr	r3, [r7, #4]
 810e8a4:	68db      	ldr	r3, [r3, #12]
 810e8a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810e8a8:	69fb      	ldr	r3, [r7, #28]
 810e8aa:	005b      	lsls	r3, r3, #1
 810e8ac:	2203      	movs	r2, #3
 810e8ae:	fa02 f303 	lsl.w	r3, r2, r3
 810e8b2:	43db      	mvns	r3, r3
 810e8b4:	69ba      	ldr	r2, [r7, #24]
 810e8b6:	4013      	ands	r3, r2
 810e8b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810e8ba:	683b      	ldr	r3, [r7, #0]
 810e8bc:	689a      	ldr	r2, [r3, #8]
 810e8be:	69fb      	ldr	r3, [r7, #28]
 810e8c0:	005b      	lsls	r3, r3, #1
 810e8c2:	fa02 f303 	lsl.w	r3, r2, r3
 810e8c6:	69ba      	ldr	r2, [r7, #24]
 810e8c8:	4313      	orrs	r3, r2
 810e8ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810e8cc:	687b      	ldr	r3, [r7, #4]
 810e8ce:	69ba      	ldr	r2, [r7, #24]
 810e8d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810e8d2:	683b      	ldr	r3, [r7, #0]
 810e8d4:	685b      	ldr	r3, [r3, #4]
 810e8d6:	f003 0303 	and.w	r3, r3, #3
 810e8da:	2b02      	cmp	r3, #2
 810e8dc:	d123      	bne.n	810e926 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810e8de:	69fb      	ldr	r3, [r7, #28]
 810e8e0:	08da      	lsrs	r2, r3, #3
 810e8e2:	687b      	ldr	r3, [r7, #4]
 810e8e4:	3208      	adds	r2, #8
 810e8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810e8ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810e8ec:	69fb      	ldr	r3, [r7, #28]
 810e8ee:	f003 0307 	and.w	r3, r3, #7
 810e8f2:	009b      	lsls	r3, r3, #2
 810e8f4:	220f      	movs	r2, #15
 810e8f6:	fa02 f303 	lsl.w	r3, r2, r3
 810e8fa:	43db      	mvns	r3, r3
 810e8fc:	69ba      	ldr	r2, [r7, #24]
 810e8fe:	4013      	ands	r3, r2
 810e900:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810e902:	683b      	ldr	r3, [r7, #0]
 810e904:	691a      	ldr	r2, [r3, #16]
 810e906:	69fb      	ldr	r3, [r7, #28]
 810e908:	f003 0307 	and.w	r3, r3, #7
 810e90c:	009b      	lsls	r3, r3, #2
 810e90e:	fa02 f303 	lsl.w	r3, r2, r3
 810e912:	69ba      	ldr	r2, [r7, #24]
 810e914:	4313      	orrs	r3, r2
 810e916:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810e918:	69fb      	ldr	r3, [r7, #28]
 810e91a:	08da      	lsrs	r2, r3, #3
 810e91c:	687b      	ldr	r3, [r7, #4]
 810e91e:	3208      	adds	r2, #8
 810e920:	69b9      	ldr	r1, [r7, #24]
 810e922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810e926:	687b      	ldr	r3, [r7, #4]
 810e928:	681b      	ldr	r3, [r3, #0]
 810e92a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810e92c:	69fb      	ldr	r3, [r7, #28]
 810e92e:	005b      	lsls	r3, r3, #1
 810e930:	2203      	movs	r2, #3
 810e932:	fa02 f303 	lsl.w	r3, r2, r3
 810e936:	43db      	mvns	r3, r3
 810e938:	69ba      	ldr	r2, [r7, #24]
 810e93a:	4013      	ands	r3, r2
 810e93c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810e93e:	683b      	ldr	r3, [r7, #0]
 810e940:	685b      	ldr	r3, [r3, #4]
 810e942:	f003 0203 	and.w	r2, r3, #3
 810e946:	69fb      	ldr	r3, [r7, #28]
 810e948:	005b      	lsls	r3, r3, #1
 810e94a:	fa02 f303 	lsl.w	r3, r2, r3
 810e94e:	69ba      	ldr	r2, [r7, #24]
 810e950:	4313      	orrs	r3, r2
 810e952:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810e954:	687b      	ldr	r3, [r7, #4]
 810e956:	69ba      	ldr	r2, [r7, #24]
 810e958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810e95a:	683b      	ldr	r3, [r7, #0]
 810e95c:	685b      	ldr	r3, [r3, #4]
 810e95e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810e962:	2b00      	cmp	r3, #0
 810e964:	f000 80e0 	beq.w	810eb28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810e968:	4b2f      	ldr	r3, [pc, #188]	@ (810ea28 <HAL_GPIO_Init+0x238>)
 810e96a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810e96e:	4a2e      	ldr	r2, [pc, #184]	@ (810ea28 <HAL_GPIO_Init+0x238>)
 810e970:	f043 0302 	orr.w	r3, r3, #2
 810e974:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810e978:	4b2b      	ldr	r3, [pc, #172]	@ (810ea28 <HAL_GPIO_Init+0x238>)
 810e97a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810e97e:	f003 0302 	and.w	r3, r3, #2
 810e982:	60fb      	str	r3, [r7, #12]
 810e984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810e986:	4a29      	ldr	r2, [pc, #164]	@ (810ea2c <HAL_GPIO_Init+0x23c>)
 810e988:	69fb      	ldr	r3, [r7, #28]
 810e98a:	089b      	lsrs	r3, r3, #2
 810e98c:	3302      	adds	r3, #2
 810e98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810e992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810e994:	69fb      	ldr	r3, [r7, #28]
 810e996:	f003 0303 	and.w	r3, r3, #3
 810e99a:	009b      	lsls	r3, r3, #2
 810e99c:	220f      	movs	r2, #15
 810e99e:	fa02 f303 	lsl.w	r3, r2, r3
 810e9a2:	43db      	mvns	r3, r3
 810e9a4:	69ba      	ldr	r2, [r7, #24]
 810e9a6:	4013      	ands	r3, r2
 810e9a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810e9aa:	687b      	ldr	r3, [r7, #4]
 810e9ac:	4a20      	ldr	r2, [pc, #128]	@ (810ea30 <HAL_GPIO_Init+0x240>)
 810e9ae:	4293      	cmp	r3, r2
 810e9b0:	d052      	beq.n	810ea58 <HAL_GPIO_Init+0x268>
 810e9b2:	687b      	ldr	r3, [r7, #4]
 810e9b4:	4a1f      	ldr	r2, [pc, #124]	@ (810ea34 <HAL_GPIO_Init+0x244>)
 810e9b6:	4293      	cmp	r3, r2
 810e9b8:	d031      	beq.n	810ea1e <HAL_GPIO_Init+0x22e>
 810e9ba:	687b      	ldr	r3, [r7, #4]
 810e9bc:	4a1e      	ldr	r2, [pc, #120]	@ (810ea38 <HAL_GPIO_Init+0x248>)
 810e9be:	4293      	cmp	r3, r2
 810e9c0:	d02b      	beq.n	810ea1a <HAL_GPIO_Init+0x22a>
 810e9c2:	687b      	ldr	r3, [r7, #4]
 810e9c4:	4a1d      	ldr	r2, [pc, #116]	@ (810ea3c <HAL_GPIO_Init+0x24c>)
 810e9c6:	4293      	cmp	r3, r2
 810e9c8:	d025      	beq.n	810ea16 <HAL_GPIO_Init+0x226>
 810e9ca:	687b      	ldr	r3, [r7, #4]
 810e9cc:	4a1c      	ldr	r2, [pc, #112]	@ (810ea40 <HAL_GPIO_Init+0x250>)
 810e9ce:	4293      	cmp	r3, r2
 810e9d0:	d01f      	beq.n	810ea12 <HAL_GPIO_Init+0x222>
 810e9d2:	687b      	ldr	r3, [r7, #4]
 810e9d4:	4a1b      	ldr	r2, [pc, #108]	@ (810ea44 <HAL_GPIO_Init+0x254>)
 810e9d6:	4293      	cmp	r3, r2
 810e9d8:	d019      	beq.n	810ea0e <HAL_GPIO_Init+0x21e>
 810e9da:	687b      	ldr	r3, [r7, #4]
 810e9dc:	4a1a      	ldr	r2, [pc, #104]	@ (810ea48 <HAL_GPIO_Init+0x258>)
 810e9de:	4293      	cmp	r3, r2
 810e9e0:	d013      	beq.n	810ea0a <HAL_GPIO_Init+0x21a>
 810e9e2:	687b      	ldr	r3, [r7, #4]
 810e9e4:	4a19      	ldr	r2, [pc, #100]	@ (810ea4c <HAL_GPIO_Init+0x25c>)
 810e9e6:	4293      	cmp	r3, r2
 810e9e8:	d00d      	beq.n	810ea06 <HAL_GPIO_Init+0x216>
 810e9ea:	687b      	ldr	r3, [r7, #4]
 810e9ec:	4a18      	ldr	r2, [pc, #96]	@ (810ea50 <HAL_GPIO_Init+0x260>)
 810e9ee:	4293      	cmp	r3, r2
 810e9f0:	d007      	beq.n	810ea02 <HAL_GPIO_Init+0x212>
 810e9f2:	687b      	ldr	r3, [r7, #4]
 810e9f4:	4a17      	ldr	r2, [pc, #92]	@ (810ea54 <HAL_GPIO_Init+0x264>)
 810e9f6:	4293      	cmp	r3, r2
 810e9f8:	d101      	bne.n	810e9fe <HAL_GPIO_Init+0x20e>
 810e9fa:	2309      	movs	r3, #9
 810e9fc:	e02d      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810e9fe:	230a      	movs	r3, #10
 810ea00:	e02b      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea02:	2308      	movs	r3, #8
 810ea04:	e029      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea06:	2307      	movs	r3, #7
 810ea08:	e027      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea0a:	2306      	movs	r3, #6
 810ea0c:	e025      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea0e:	2305      	movs	r3, #5
 810ea10:	e023      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea12:	2304      	movs	r3, #4
 810ea14:	e021      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea16:	2303      	movs	r3, #3
 810ea18:	e01f      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea1a:	2302      	movs	r3, #2
 810ea1c:	e01d      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea1e:	2301      	movs	r3, #1
 810ea20:	e01b      	b.n	810ea5a <HAL_GPIO_Init+0x26a>
 810ea22:	bf00      	nop
 810ea24:	580000c0 	.word	0x580000c0
 810ea28:	58024400 	.word	0x58024400
 810ea2c:	58000400 	.word	0x58000400
 810ea30:	58020000 	.word	0x58020000
 810ea34:	58020400 	.word	0x58020400
 810ea38:	58020800 	.word	0x58020800
 810ea3c:	58020c00 	.word	0x58020c00
 810ea40:	58021000 	.word	0x58021000
 810ea44:	58021400 	.word	0x58021400
 810ea48:	58021800 	.word	0x58021800
 810ea4c:	58021c00 	.word	0x58021c00
 810ea50:	58022000 	.word	0x58022000
 810ea54:	58022400 	.word	0x58022400
 810ea58:	2300      	movs	r3, #0
 810ea5a:	69fa      	ldr	r2, [r7, #28]
 810ea5c:	f002 0203 	and.w	r2, r2, #3
 810ea60:	0092      	lsls	r2, r2, #2
 810ea62:	4093      	lsls	r3, r2
 810ea64:	69ba      	ldr	r2, [r7, #24]
 810ea66:	4313      	orrs	r3, r2
 810ea68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810ea6a:	4938      	ldr	r1, [pc, #224]	@ (810eb4c <HAL_GPIO_Init+0x35c>)
 810ea6c:	69fb      	ldr	r3, [r7, #28]
 810ea6e:	089b      	lsrs	r3, r3, #2
 810ea70:	3302      	adds	r3, #2
 810ea72:	69ba      	ldr	r2, [r7, #24]
 810ea74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810ea78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810ea7c:	681b      	ldr	r3, [r3, #0]
 810ea7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810ea80:	693b      	ldr	r3, [r7, #16]
 810ea82:	43db      	mvns	r3, r3
 810ea84:	69ba      	ldr	r2, [r7, #24]
 810ea86:	4013      	ands	r3, r2
 810ea88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810ea8a:	683b      	ldr	r3, [r7, #0]
 810ea8c:	685b      	ldr	r3, [r3, #4]
 810ea8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810ea92:	2b00      	cmp	r3, #0
 810ea94:	d003      	beq.n	810ea9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810ea96:	69ba      	ldr	r2, [r7, #24]
 810ea98:	693b      	ldr	r3, [r7, #16]
 810ea9a:	4313      	orrs	r3, r2
 810ea9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810ea9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810eaa2:	69bb      	ldr	r3, [r7, #24]
 810eaa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810eaa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810eaaa:	685b      	ldr	r3, [r3, #4]
 810eaac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810eaae:	693b      	ldr	r3, [r7, #16]
 810eab0:	43db      	mvns	r3, r3
 810eab2:	69ba      	ldr	r2, [r7, #24]
 810eab4:	4013      	ands	r3, r2
 810eab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810eab8:	683b      	ldr	r3, [r7, #0]
 810eaba:	685b      	ldr	r3, [r3, #4]
 810eabc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810eac0:	2b00      	cmp	r3, #0
 810eac2:	d003      	beq.n	810eacc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810eac4:	69ba      	ldr	r2, [r7, #24]
 810eac6:	693b      	ldr	r3, [r7, #16]
 810eac8:	4313      	orrs	r3, r2
 810eaca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810eacc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810ead0:	69bb      	ldr	r3, [r7, #24]
 810ead2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810ead4:	697b      	ldr	r3, [r7, #20]
 810ead6:	685b      	ldr	r3, [r3, #4]
 810ead8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810eada:	693b      	ldr	r3, [r7, #16]
 810eadc:	43db      	mvns	r3, r3
 810eade:	69ba      	ldr	r2, [r7, #24]
 810eae0:	4013      	ands	r3, r2
 810eae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810eae4:	683b      	ldr	r3, [r7, #0]
 810eae6:	685b      	ldr	r3, [r3, #4]
 810eae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810eaec:	2b00      	cmp	r3, #0
 810eaee:	d003      	beq.n	810eaf8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810eaf0:	69ba      	ldr	r2, [r7, #24]
 810eaf2:	693b      	ldr	r3, [r7, #16]
 810eaf4:	4313      	orrs	r3, r2
 810eaf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810eaf8:	697b      	ldr	r3, [r7, #20]
 810eafa:	69ba      	ldr	r2, [r7, #24]
 810eafc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810eafe:	697b      	ldr	r3, [r7, #20]
 810eb00:	681b      	ldr	r3, [r3, #0]
 810eb02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810eb04:	693b      	ldr	r3, [r7, #16]
 810eb06:	43db      	mvns	r3, r3
 810eb08:	69ba      	ldr	r2, [r7, #24]
 810eb0a:	4013      	ands	r3, r2
 810eb0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810eb0e:	683b      	ldr	r3, [r7, #0]
 810eb10:	685b      	ldr	r3, [r3, #4]
 810eb12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810eb16:	2b00      	cmp	r3, #0
 810eb18:	d003      	beq.n	810eb22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810eb1a:	69ba      	ldr	r2, [r7, #24]
 810eb1c:	693b      	ldr	r3, [r7, #16]
 810eb1e:	4313      	orrs	r3, r2
 810eb20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810eb22:	697b      	ldr	r3, [r7, #20]
 810eb24:	69ba      	ldr	r2, [r7, #24]
 810eb26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810eb28:	69fb      	ldr	r3, [r7, #28]
 810eb2a:	3301      	adds	r3, #1
 810eb2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810eb2e:	683b      	ldr	r3, [r7, #0]
 810eb30:	681a      	ldr	r2, [r3, #0]
 810eb32:	69fb      	ldr	r3, [r7, #28]
 810eb34:	fa22 f303 	lsr.w	r3, r2, r3
 810eb38:	2b00      	cmp	r3, #0
 810eb3a:	f47f ae63 	bne.w	810e804 <HAL_GPIO_Init+0x14>
  }
}
 810eb3e:	bf00      	nop
 810eb40:	bf00      	nop
 810eb42:	3724      	adds	r7, #36	@ 0x24
 810eb44:	46bd      	mov	sp, r7
 810eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb4a:	4770      	bx	lr
 810eb4c:	58000400 	.word	0x58000400

0810eb50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 810eb50:	b480      	push	{r7}
 810eb52:	b087      	sub	sp, #28
 810eb54:	af00      	add	r7, sp, #0
 810eb56:	6078      	str	r0, [r7, #4]
 810eb58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810eb5a:	2300      	movs	r3, #0
 810eb5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810eb5e:	4b75      	ldr	r3, [pc, #468]	@ (810ed34 <HAL_GPIO_DeInit+0x1e4>)
 810eb60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 810eb62:	e0d9      	b.n	810ed18 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 810eb64:	2201      	movs	r2, #1
 810eb66:	697b      	ldr	r3, [r7, #20]
 810eb68:	fa02 f303 	lsl.w	r3, r2, r3
 810eb6c:	683a      	ldr	r2, [r7, #0]
 810eb6e:	4013      	ands	r3, r2
 810eb70:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 810eb72:	68fb      	ldr	r3, [r7, #12]
 810eb74:	2b00      	cmp	r3, #0
 810eb76:	f000 80cc 	beq.w	810ed12 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 810eb7a:	4a6f      	ldr	r2, [pc, #444]	@ (810ed38 <HAL_GPIO_DeInit+0x1e8>)
 810eb7c:	697b      	ldr	r3, [r7, #20]
 810eb7e:	089b      	lsrs	r3, r3, #2
 810eb80:	3302      	adds	r3, #2
 810eb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810eb86:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 810eb88:	697b      	ldr	r3, [r7, #20]
 810eb8a:	f003 0303 	and.w	r3, r3, #3
 810eb8e:	009b      	lsls	r3, r3, #2
 810eb90:	220f      	movs	r2, #15
 810eb92:	fa02 f303 	lsl.w	r3, r2, r3
 810eb96:	68ba      	ldr	r2, [r7, #8]
 810eb98:	4013      	ands	r3, r2
 810eb9a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 810eb9c:	687b      	ldr	r3, [r7, #4]
 810eb9e:	4a67      	ldr	r2, [pc, #412]	@ (810ed3c <HAL_GPIO_DeInit+0x1ec>)
 810eba0:	4293      	cmp	r3, r2
 810eba2:	d037      	beq.n	810ec14 <HAL_GPIO_DeInit+0xc4>
 810eba4:	687b      	ldr	r3, [r7, #4]
 810eba6:	4a66      	ldr	r2, [pc, #408]	@ (810ed40 <HAL_GPIO_DeInit+0x1f0>)
 810eba8:	4293      	cmp	r3, r2
 810ebaa:	d031      	beq.n	810ec10 <HAL_GPIO_DeInit+0xc0>
 810ebac:	687b      	ldr	r3, [r7, #4]
 810ebae:	4a65      	ldr	r2, [pc, #404]	@ (810ed44 <HAL_GPIO_DeInit+0x1f4>)
 810ebb0:	4293      	cmp	r3, r2
 810ebb2:	d02b      	beq.n	810ec0c <HAL_GPIO_DeInit+0xbc>
 810ebb4:	687b      	ldr	r3, [r7, #4]
 810ebb6:	4a64      	ldr	r2, [pc, #400]	@ (810ed48 <HAL_GPIO_DeInit+0x1f8>)
 810ebb8:	4293      	cmp	r3, r2
 810ebba:	d025      	beq.n	810ec08 <HAL_GPIO_DeInit+0xb8>
 810ebbc:	687b      	ldr	r3, [r7, #4]
 810ebbe:	4a63      	ldr	r2, [pc, #396]	@ (810ed4c <HAL_GPIO_DeInit+0x1fc>)
 810ebc0:	4293      	cmp	r3, r2
 810ebc2:	d01f      	beq.n	810ec04 <HAL_GPIO_DeInit+0xb4>
 810ebc4:	687b      	ldr	r3, [r7, #4]
 810ebc6:	4a62      	ldr	r2, [pc, #392]	@ (810ed50 <HAL_GPIO_DeInit+0x200>)
 810ebc8:	4293      	cmp	r3, r2
 810ebca:	d019      	beq.n	810ec00 <HAL_GPIO_DeInit+0xb0>
 810ebcc:	687b      	ldr	r3, [r7, #4]
 810ebce:	4a61      	ldr	r2, [pc, #388]	@ (810ed54 <HAL_GPIO_DeInit+0x204>)
 810ebd0:	4293      	cmp	r3, r2
 810ebd2:	d013      	beq.n	810ebfc <HAL_GPIO_DeInit+0xac>
 810ebd4:	687b      	ldr	r3, [r7, #4]
 810ebd6:	4a60      	ldr	r2, [pc, #384]	@ (810ed58 <HAL_GPIO_DeInit+0x208>)
 810ebd8:	4293      	cmp	r3, r2
 810ebda:	d00d      	beq.n	810ebf8 <HAL_GPIO_DeInit+0xa8>
 810ebdc:	687b      	ldr	r3, [r7, #4]
 810ebde:	4a5f      	ldr	r2, [pc, #380]	@ (810ed5c <HAL_GPIO_DeInit+0x20c>)
 810ebe0:	4293      	cmp	r3, r2
 810ebe2:	d007      	beq.n	810ebf4 <HAL_GPIO_DeInit+0xa4>
 810ebe4:	687b      	ldr	r3, [r7, #4]
 810ebe6:	4a5e      	ldr	r2, [pc, #376]	@ (810ed60 <HAL_GPIO_DeInit+0x210>)
 810ebe8:	4293      	cmp	r3, r2
 810ebea:	d101      	bne.n	810ebf0 <HAL_GPIO_DeInit+0xa0>
 810ebec:	2309      	movs	r3, #9
 810ebee:	e012      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ebf0:	230a      	movs	r3, #10
 810ebf2:	e010      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ebf4:	2308      	movs	r3, #8
 810ebf6:	e00e      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ebf8:	2307      	movs	r3, #7
 810ebfa:	e00c      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ebfc:	2306      	movs	r3, #6
 810ebfe:	e00a      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ec00:	2305      	movs	r3, #5
 810ec02:	e008      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ec04:	2304      	movs	r3, #4
 810ec06:	e006      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ec08:	2303      	movs	r3, #3
 810ec0a:	e004      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ec0c:	2302      	movs	r3, #2
 810ec0e:	e002      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ec10:	2301      	movs	r3, #1
 810ec12:	e000      	b.n	810ec16 <HAL_GPIO_DeInit+0xc6>
 810ec14:	2300      	movs	r3, #0
 810ec16:	697a      	ldr	r2, [r7, #20]
 810ec18:	f002 0203 	and.w	r2, r2, #3
 810ec1c:	0092      	lsls	r2, r2, #2
 810ec1e:	4093      	lsls	r3, r2
 810ec20:	68ba      	ldr	r2, [r7, #8]
 810ec22:	429a      	cmp	r2, r3
 810ec24:	d136      	bne.n	810ec94 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 810ec26:	693b      	ldr	r3, [r7, #16]
 810ec28:	681a      	ldr	r2, [r3, #0]
 810ec2a:	68fb      	ldr	r3, [r7, #12]
 810ec2c:	43db      	mvns	r3, r3
 810ec2e:	401a      	ands	r2, r3
 810ec30:	693b      	ldr	r3, [r7, #16]
 810ec32:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 810ec34:	693b      	ldr	r3, [r7, #16]
 810ec36:	685a      	ldr	r2, [r3, #4]
 810ec38:	68fb      	ldr	r3, [r7, #12]
 810ec3a:	43db      	mvns	r3, r3
 810ec3c:	401a      	ands	r2, r3
 810ec3e:	693b      	ldr	r3, [r7, #16]
 810ec40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 810ec42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810ec46:	685a      	ldr	r2, [r3, #4]
 810ec48:	68fb      	ldr	r3, [r7, #12]
 810ec4a:	43db      	mvns	r3, r3
 810ec4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810ec50:	4013      	ands	r3, r2
 810ec52:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 810ec54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810ec58:	681a      	ldr	r2, [r3, #0]
 810ec5a:	68fb      	ldr	r3, [r7, #12]
 810ec5c:	43db      	mvns	r3, r3
 810ec5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810ec62:	4013      	ands	r3, r2
 810ec64:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 810ec66:	697b      	ldr	r3, [r7, #20]
 810ec68:	f003 0303 	and.w	r3, r3, #3
 810ec6c:	009b      	lsls	r3, r3, #2
 810ec6e:	220f      	movs	r2, #15
 810ec70:	fa02 f303 	lsl.w	r3, r2, r3
 810ec74:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 810ec76:	4a30      	ldr	r2, [pc, #192]	@ (810ed38 <HAL_GPIO_DeInit+0x1e8>)
 810ec78:	697b      	ldr	r3, [r7, #20]
 810ec7a:	089b      	lsrs	r3, r3, #2
 810ec7c:	3302      	adds	r3, #2
 810ec7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 810ec82:	68bb      	ldr	r3, [r7, #8]
 810ec84:	43da      	mvns	r2, r3
 810ec86:	482c      	ldr	r0, [pc, #176]	@ (810ed38 <HAL_GPIO_DeInit+0x1e8>)
 810ec88:	697b      	ldr	r3, [r7, #20]
 810ec8a:	089b      	lsrs	r3, r3, #2
 810ec8c:	400a      	ands	r2, r1
 810ec8e:	3302      	adds	r3, #2
 810ec90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 810ec94:	687b      	ldr	r3, [r7, #4]
 810ec96:	681a      	ldr	r2, [r3, #0]
 810ec98:	697b      	ldr	r3, [r7, #20]
 810ec9a:	005b      	lsls	r3, r3, #1
 810ec9c:	2103      	movs	r1, #3
 810ec9e:	fa01 f303 	lsl.w	r3, r1, r3
 810eca2:	431a      	orrs	r2, r3
 810eca4:	687b      	ldr	r3, [r7, #4]
 810eca6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 810eca8:	697b      	ldr	r3, [r7, #20]
 810ecaa:	08da      	lsrs	r2, r3, #3
 810ecac:	687b      	ldr	r3, [r7, #4]
 810ecae:	3208      	adds	r2, #8
 810ecb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810ecb4:	697b      	ldr	r3, [r7, #20]
 810ecb6:	f003 0307 	and.w	r3, r3, #7
 810ecba:	009b      	lsls	r3, r3, #2
 810ecbc:	220f      	movs	r2, #15
 810ecbe:	fa02 f303 	lsl.w	r3, r2, r3
 810ecc2:	43db      	mvns	r3, r3
 810ecc4:	697a      	ldr	r2, [r7, #20]
 810ecc6:	08d2      	lsrs	r2, r2, #3
 810ecc8:	4019      	ands	r1, r3
 810ecca:	687b      	ldr	r3, [r7, #4]
 810eccc:	3208      	adds	r2, #8
 810ecce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810ecd2:	687b      	ldr	r3, [r7, #4]
 810ecd4:	68da      	ldr	r2, [r3, #12]
 810ecd6:	697b      	ldr	r3, [r7, #20]
 810ecd8:	005b      	lsls	r3, r3, #1
 810ecda:	2103      	movs	r1, #3
 810ecdc:	fa01 f303 	lsl.w	r3, r1, r3
 810ece0:	43db      	mvns	r3, r3
 810ece2:	401a      	ands	r2, r3
 810ece4:	687b      	ldr	r3, [r7, #4]
 810ece6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 810ece8:	687b      	ldr	r3, [r7, #4]
 810ecea:	685a      	ldr	r2, [r3, #4]
 810ecec:	2101      	movs	r1, #1
 810ecee:	697b      	ldr	r3, [r7, #20]
 810ecf0:	fa01 f303 	lsl.w	r3, r1, r3
 810ecf4:	43db      	mvns	r3, r3
 810ecf6:	401a      	ands	r2, r3
 810ecf8:	687b      	ldr	r3, [r7, #4]
 810ecfa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810ecfc:	687b      	ldr	r3, [r7, #4]
 810ecfe:	689a      	ldr	r2, [r3, #8]
 810ed00:	697b      	ldr	r3, [r7, #20]
 810ed02:	005b      	lsls	r3, r3, #1
 810ed04:	2103      	movs	r1, #3
 810ed06:	fa01 f303 	lsl.w	r3, r1, r3
 810ed0a:	43db      	mvns	r3, r3
 810ed0c:	401a      	ands	r2, r3
 810ed0e:	687b      	ldr	r3, [r7, #4]
 810ed10:	609a      	str	r2, [r3, #8]
    }

    position++;
 810ed12:	697b      	ldr	r3, [r7, #20]
 810ed14:	3301      	adds	r3, #1
 810ed16:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 810ed18:	683a      	ldr	r2, [r7, #0]
 810ed1a:	697b      	ldr	r3, [r7, #20]
 810ed1c:	fa22 f303 	lsr.w	r3, r2, r3
 810ed20:	2b00      	cmp	r3, #0
 810ed22:	f47f af1f 	bne.w	810eb64 <HAL_GPIO_DeInit+0x14>
  }
}
 810ed26:	bf00      	nop
 810ed28:	bf00      	nop
 810ed2a:	371c      	adds	r7, #28
 810ed2c:	46bd      	mov	sp, r7
 810ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed32:	4770      	bx	lr
 810ed34:	580000c0 	.word	0x580000c0
 810ed38:	58000400 	.word	0x58000400
 810ed3c:	58020000 	.word	0x58020000
 810ed40:	58020400 	.word	0x58020400
 810ed44:	58020800 	.word	0x58020800
 810ed48:	58020c00 	.word	0x58020c00
 810ed4c:	58021000 	.word	0x58021000
 810ed50:	58021400 	.word	0x58021400
 810ed54:	58021800 	.word	0x58021800
 810ed58:	58021c00 	.word	0x58021c00
 810ed5c:	58022000 	.word	0x58022000
 810ed60:	58022400 	.word	0x58022400

0810ed64 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 810ed64:	b480      	push	{r7}
 810ed66:	b083      	sub	sp, #12
 810ed68:	af00      	add	r7, sp, #0
 810ed6a:	6078      	str	r0, [r7, #4]
 810ed6c:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810ed6e:	490e      	ldr	r1, [pc, #56]	@ (810eda8 <HAL_HSEM_Take+0x44>)
 810ed70:	683b      	ldr	r3, [r7, #0]
 810ed72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810ed76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810ed7a:	687a      	ldr	r2, [r7, #4]
 810ed7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 810ed80:	4a09      	ldr	r2, [pc, #36]	@ (810eda8 <HAL_HSEM_Take+0x44>)
 810ed82:	687b      	ldr	r3, [r7, #4]
 810ed84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810ed88:	683b      	ldr	r3, [r7, #0]
 810ed8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810ed8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810ed92:	429a      	cmp	r2, r3
 810ed94:	d101      	bne.n	810ed9a <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810ed96:	2300      	movs	r3, #0
 810ed98:	e000      	b.n	810ed9c <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810ed9a:	2301      	movs	r3, #1
}
 810ed9c:	4618      	mov	r0, r3
 810ed9e:	370c      	adds	r7, #12
 810eda0:	46bd      	mov	sp, r7
 810eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eda6:	4770      	bx	lr
 810eda8:	58026400 	.word	0x58026400

0810edac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810edac:	b480      	push	{r7}
 810edae:	b083      	sub	sp, #12
 810edb0:	af00      	add	r7, sp, #0
 810edb2:	6078      	str	r0, [r7, #4]
 810edb4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810edb6:	4906      	ldr	r1, [pc, #24]	@ (810edd0 <HAL_HSEM_Release+0x24>)
 810edb8:	683b      	ldr	r3, [r7, #0]
 810edba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810edbe:	687b      	ldr	r3, [r7, #4]
 810edc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 810edc4:	bf00      	nop
 810edc6:	370c      	adds	r7, #12
 810edc8:	46bd      	mov	sp, r7
 810edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810edce:	4770      	bx	lr
 810edd0:	58026400 	.word	0x58026400

0810edd4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810edd4:	b480      	push	{r7}
 810edd6:	b083      	sub	sp, #12
 810edd8:	af00      	add	r7, sp, #0
 810edda:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810eddc:	4b05      	ldr	r3, [pc, #20]	@ (810edf4 <HAL_HSEM_ActivateNotification+0x20>)
 810edde:	681a      	ldr	r2, [r3, #0]
 810ede0:	4904      	ldr	r1, [pc, #16]	@ (810edf4 <HAL_HSEM_ActivateNotification+0x20>)
 810ede2:	687b      	ldr	r3, [r7, #4]
 810ede4:	4313      	orrs	r3, r2
 810ede6:	600b      	str	r3, [r1, #0]
#endif
}
 810ede8:	bf00      	nop
 810edea:	370c      	adds	r7, #12
 810edec:	46bd      	mov	sp, r7
 810edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810edf2:	4770      	bx	lr
 810edf4:	58026510 	.word	0x58026510

0810edf8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810edf8:	b580      	push	{r7, lr}
 810edfa:	b082      	sub	sp, #8
 810edfc:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810edfe:	4b0a      	ldr	r3, [pc, #40]	@ (810ee28 <HAL_HSEM_IRQHandler+0x30>)
 810ee00:	68db      	ldr	r3, [r3, #12]
 810ee02:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810ee04:	4b08      	ldr	r3, [pc, #32]	@ (810ee28 <HAL_HSEM_IRQHandler+0x30>)
 810ee06:	681a      	ldr	r2, [r3, #0]
 810ee08:	687b      	ldr	r3, [r7, #4]
 810ee0a:	43db      	mvns	r3, r3
 810ee0c:	4906      	ldr	r1, [pc, #24]	@ (810ee28 <HAL_HSEM_IRQHandler+0x30>)
 810ee0e:	4013      	ands	r3, r2
 810ee10:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810ee12:	4a05      	ldr	r2, [pc, #20]	@ (810ee28 <HAL_HSEM_IRQHandler+0x30>)
 810ee14:	687b      	ldr	r3, [r7, #4]
 810ee16:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810ee18:	6878      	ldr	r0, [r7, #4]
 810ee1a:	f7f2 f90f 	bl	810103c <HAL_HSEM_FreeCallback>
}
 810ee1e:	bf00      	nop
 810ee20:	3708      	adds	r7, #8
 810ee22:	46bd      	mov	sp, r7
 810ee24:	bd80      	pop	{r7, pc}
 810ee26:	bf00      	nop
 810ee28:	58026510 	.word	0x58026510

0810ee2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810ee2c:	b580      	push	{r7, lr}
 810ee2e:	b082      	sub	sp, #8
 810ee30:	af00      	add	r7, sp, #0
 810ee32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810ee34:	687b      	ldr	r3, [r7, #4]
 810ee36:	2b00      	cmp	r3, #0
 810ee38:	d101      	bne.n	810ee3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810ee3a:	2301      	movs	r3, #1
 810ee3c:	e08d      	b.n	810ef5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810ee3e:	687b      	ldr	r3, [r7, #4]
 810ee40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810ee44:	b2db      	uxtb	r3, r3
 810ee46:	2b00      	cmp	r3, #0
 810ee48:	d106      	bne.n	810ee58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810ee4a:	687b      	ldr	r3, [r7, #4]
 810ee4c:	2200      	movs	r2, #0
 810ee4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810ee52:	6878      	ldr	r0, [r7, #4]
 810ee54:	f7f4 f8f4 	bl	8103040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810ee58:	687b      	ldr	r3, [r7, #4]
 810ee5a:	2224      	movs	r2, #36	@ 0x24
 810ee5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810ee60:	687b      	ldr	r3, [r7, #4]
 810ee62:	681b      	ldr	r3, [r3, #0]
 810ee64:	681a      	ldr	r2, [r3, #0]
 810ee66:	687b      	ldr	r3, [r7, #4]
 810ee68:	681b      	ldr	r3, [r3, #0]
 810ee6a:	f022 0201 	bic.w	r2, r2, #1
 810ee6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810ee70:	687b      	ldr	r3, [r7, #4]
 810ee72:	685a      	ldr	r2, [r3, #4]
 810ee74:	687b      	ldr	r3, [r7, #4]
 810ee76:	681b      	ldr	r3, [r3, #0]
 810ee78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 810ee7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810ee7e:	687b      	ldr	r3, [r7, #4]
 810ee80:	681b      	ldr	r3, [r3, #0]
 810ee82:	689a      	ldr	r2, [r3, #8]
 810ee84:	687b      	ldr	r3, [r7, #4]
 810ee86:	681b      	ldr	r3, [r3, #0]
 810ee88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810ee8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810ee8e:	687b      	ldr	r3, [r7, #4]
 810ee90:	68db      	ldr	r3, [r3, #12]
 810ee92:	2b01      	cmp	r3, #1
 810ee94:	d107      	bne.n	810eea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810ee96:	687b      	ldr	r3, [r7, #4]
 810ee98:	689a      	ldr	r2, [r3, #8]
 810ee9a:	687b      	ldr	r3, [r7, #4]
 810ee9c:	681b      	ldr	r3, [r3, #0]
 810ee9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810eea2:	609a      	str	r2, [r3, #8]
 810eea4:	e006      	b.n	810eeb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810eea6:	687b      	ldr	r3, [r7, #4]
 810eea8:	689a      	ldr	r2, [r3, #8]
 810eeaa:	687b      	ldr	r3, [r7, #4]
 810eeac:	681b      	ldr	r3, [r3, #0]
 810eeae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810eeb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810eeb4:	687b      	ldr	r3, [r7, #4]
 810eeb6:	68db      	ldr	r3, [r3, #12]
 810eeb8:	2b02      	cmp	r3, #2
 810eeba:	d108      	bne.n	810eece <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810eebc:	687b      	ldr	r3, [r7, #4]
 810eebe:	681b      	ldr	r3, [r3, #0]
 810eec0:	685a      	ldr	r2, [r3, #4]
 810eec2:	687b      	ldr	r3, [r7, #4]
 810eec4:	681b      	ldr	r3, [r3, #0]
 810eec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810eeca:	605a      	str	r2, [r3, #4]
 810eecc:	e007      	b.n	810eede <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810eece:	687b      	ldr	r3, [r7, #4]
 810eed0:	681b      	ldr	r3, [r3, #0]
 810eed2:	685a      	ldr	r2, [r3, #4]
 810eed4:	687b      	ldr	r3, [r7, #4]
 810eed6:	681b      	ldr	r3, [r3, #0]
 810eed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 810eedc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810eede:	687b      	ldr	r3, [r7, #4]
 810eee0:	681b      	ldr	r3, [r3, #0]
 810eee2:	685b      	ldr	r3, [r3, #4]
 810eee4:	687a      	ldr	r2, [r7, #4]
 810eee6:	6812      	ldr	r2, [r2, #0]
 810eee8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810eeec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810eef0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810eef2:	687b      	ldr	r3, [r7, #4]
 810eef4:	681b      	ldr	r3, [r3, #0]
 810eef6:	68da      	ldr	r2, [r3, #12]
 810eef8:	687b      	ldr	r3, [r7, #4]
 810eefa:	681b      	ldr	r3, [r3, #0]
 810eefc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810ef00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810ef02:	687b      	ldr	r3, [r7, #4]
 810ef04:	691a      	ldr	r2, [r3, #16]
 810ef06:	687b      	ldr	r3, [r7, #4]
 810ef08:	695b      	ldr	r3, [r3, #20]
 810ef0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810ef0e:	687b      	ldr	r3, [r7, #4]
 810ef10:	699b      	ldr	r3, [r3, #24]
 810ef12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810ef14:	687b      	ldr	r3, [r7, #4]
 810ef16:	681b      	ldr	r3, [r3, #0]
 810ef18:	430a      	orrs	r2, r1
 810ef1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810ef1c:	687b      	ldr	r3, [r7, #4]
 810ef1e:	69d9      	ldr	r1, [r3, #28]
 810ef20:	687b      	ldr	r3, [r7, #4]
 810ef22:	6a1a      	ldr	r2, [r3, #32]
 810ef24:	687b      	ldr	r3, [r7, #4]
 810ef26:	681b      	ldr	r3, [r3, #0]
 810ef28:	430a      	orrs	r2, r1
 810ef2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810ef2c:	687b      	ldr	r3, [r7, #4]
 810ef2e:	681b      	ldr	r3, [r3, #0]
 810ef30:	681a      	ldr	r2, [r3, #0]
 810ef32:	687b      	ldr	r3, [r7, #4]
 810ef34:	681b      	ldr	r3, [r3, #0]
 810ef36:	f042 0201 	orr.w	r2, r2, #1
 810ef3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810ef3c:	687b      	ldr	r3, [r7, #4]
 810ef3e:	2200      	movs	r2, #0
 810ef40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810ef42:	687b      	ldr	r3, [r7, #4]
 810ef44:	2220      	movs	r2, #32
 810ef46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810ef4a:	687b      	ldr	r3, [r7, #4]
 810ef4c:	2200      	movs	r2, #0
 810ef4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810ef50:	687b      	ldr	r3, [r7, #4]
 810ef52:	2200      	movs	r2, #0
 810ef54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 810ef58:	2300      	movs	r3, #0
}
 810ef5a:	4618      	mov	r0, r3
 810ef5c:	3708      	adds	r7, #8
 810ef5e:	46bd      	mov	sp, r7
 810ef60:	bd80      	pop	{r7, pc}

0810ef62 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 810ef62:	b580      	push	{r7, lr}
 810ef64:	b082      	sub	sp, #8
 810ef66:	af00      	add	r7, sp, #0
 810ef68:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810ef6a:	687b      	ldr	r3, [r7, #4]
 810ef6c:	2b00      	cmp	r3, #0
 810ef6e:	d101      	bne.n	810ef74 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 810ef70:	2301      	movs	r3, #1
 810ef72:	e021      	b.n	810efb8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 810ef74:	687b      	ldr	r3, [r7, #4]
 810ef76:	2224      	movs	r2, #36	@ 0x24
 810ef78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 810ef7c:	687b      	ldr	r3, [r7, #4]
 810ef7e:	681b      	ldr	r3, [r3, #0]
 810ef80:	681a      	ldr	r2, [r3, #0]
 810ef82:	687b      	ldr	r3, [r7, #4]
 810ef84:	681b      	ldr	r3, [r3, #0]
 810ef86:	f022 0201 	bic.w	r2, r2, #1
 810ef8a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 810ef8c:	6878      	ldr	r0, [r7, #4]
 810ef8e:	f7f4 f8c1 	bl	8103114 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810ef92:	687b      	ldr	r3, [r7, #4]
 810ef94:	2200      	movs	r2, #0
 810ef96:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 810ef98:	687b      	ldr	r3, [r7, #4]
 810ef9a:	2200      	movs	r2, #0
 810ef9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810efa0:	687b      	ldr	r3, [r7, #4]
 810efa2:	2200      	movs	r2, #0
 810efa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810efa6:	687b      	ldr	r3, [r7, #4]
 810efa8:	2200      	movs	r2, #0
 810efaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 810efae:	687b      	ldr	r3, [r7, #4]
 810efb0:	2200      	movs	r2, #0
 810efb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 810efb6:	2300      	movs	r3, #0
}
 810efb8:	4618      	mov	r0, r3
 810efba:	3708      	adds	r7, #8
 810efbc:	46bd      	mov	sp, r7
 810efbe:	bd80      	pop	{r7, pc}

0810efc0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810efc0:	b580      	push	{r7, lr}
 810efc2:	b088      	sub	sp, #32
 810efc4:	af02      	add	r7, sp, #8
 810efc6:	60f8      	str	r0, [r7, #12]
 810efc8:	4608      	mov	r0, r1
 810efca:	4611      	mov	r1, r2
 810efcc:	461a      	mov	r2, r3
 810efce:	4603      	mov	r3, r0
 810efd0:	817b      	strh	r3, [r7, #10]
 810efd2:	460b      	mov	r3, r1
 810efd4:	813b      	strh	r3, [r7, #8]
 810efd6:	4613      	mov	r3, r2
 810efd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810efda:	68fb      	ldr	r3, [r7, #12]
 810efdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810efe0:	b2db      	uxtb	r3, r3
 810efe2:	2b20      	cmp	r3, #32
 810efe4:	f040 80fd 	bne.w	810f1e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810efe8:	6a3b      	ldr	r3, [r7, #32]
 810efea:	2b00      	cmp	r3, #0
 810efec:	d002      	beq.n	810eff4 <HAL_I2C_Mem_Read+0x34>
 810efee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810eff0:	2b00      	cmp	r3, #0
 810eff2:	d105      	bne.n	810f000 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810eff4:	68fb      	ldr	r3, [r7, #12]
 810eff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810effa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 810effc:	2301      	movs	r3, #1
 810effe:	e0f1      	b.n	810f1e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810f000:	68fb      	ldr	r3, [r7, #12]
 810f002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810f006:	2b01      	cmp	r3, #1
 810f008:	d101      	bne.n	810f00e <HAL_I2C_Mem_Read+0x4e>
 810f00a:	2302      	movs	r3, #2
 810f00c:	e0ea      	b.n	810f1e4 <HAL_I2C_Mem_Read+0x224>
 810f00e:	68fb      	ldr	r3, [r7, #12]
 810f010:	2201      	movs	r2, #1
 810f012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810f016:	f7fd fd59 	bl	810cacc <HAL_GetTick>
 810f01a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810f01c:	697b      	ldr	r3, [r7, #20]
 810f01e:	9300      	str	r3, [sp, #0]
 810f020:	2319      	movs	r3, #25
 810f022:	2201      	movs	r2, #1
 810f024:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810f028:	68f8      	ldr	r0, [r7, #12]
 810f02a:	f000 f967 	bl	810f2fc <I2C_WaitOnFlagUntilTimeout>
 810f02e:	4603      	mov	r3, r0
 810f030:	2b00      	cmp	r3, #0
 810f032:	d001      	beq.n	810f038 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810f034:	2301      	movs	r3, #1
 810f036:	e0d5      	b.n	810f1e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810f038:	68fb      	ldr	r3, [r7, #12]
 810f03a:	2222      	movs	r2, #34	@ 0x22
 810f03c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810f040:	68fb      	ldr	r3, [r7, #12]
 810f042:	2240      	movs	r2, #64	@ 0x40
 810f044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810f048:	68fb      	ldr	r3, [r7, #12]
 810f04a:	2200      	movs	r2, #0
 810f04c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810f04e:	68fb      	ldr	r3, [r7, #12]
 810f050:	6a3a      	ldr	r2, [r7, #32]
 810f052:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810f054:	68fb      	ldr	r3, [r7, #12]
 810f056:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810f058:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810f05a:	68fb      	ldr	r3, [r7, #12]
 810f05c:	2200      	movs	r2, #0
 810f05e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810f060:	88f8      	ldrh	r0, [r7, #6]
 810f062:	893a      	ldrh	r2, [r7, #8]
 810f064:	8979      	ldrh	r1, [r7, #10]
 810f066:	697b      	ldr	r3, [r7, #20]
 810f068:	9301      	str	r3, [sp, #4]
 810f06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f06c:	9300      	str	r3, [sp, #0]
 810f06e:	4603      	mov	r3, r0
 810f070:	68f8      	ldr	r0, [r7, #12]
 810f072:	f000 f8cb 	bl	810f20c <I2C_RequestMemoryRead>
 810f076:	4603      	mov	r3, r0
 810f078:	2b00      	cmp	r3, #0
 810f07a:	d005      	beq.n	810f088 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810f07c:	68fb      	ldr	r3, [r7, #12]
 810f07e:	2200      	movs	r2, #0
 810f080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 810f084:	2301      	movs	r3, #1
 810f086:	e0ad      	b.n	810f1e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810f088:	68fb      	ldr	r3, [r7, #12]
 810f08a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810f08c:	b29b      	uxth	r3, r3
 810f08e:	2bff      	cmp	r3, #255	@ 0xff
 810f090:	d90e      	bls.n	810f0b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810f092:	68fb      	ldr	r3, [r7, #12]
 810f094:	22ff      	movs	r2, #255	@ 0xff
 810f096:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810f098:	68fb      	ldr	r3, [r7, #12]
 810f09a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810f09c:	b2da      	uxtb	r2, r3
 810f09e:	8979      	ldrh	r1, [r7, #10]
 810f0a0:	4b52      	ldr	r3, [pc, #328]	@ (810f1ec <HAL_I2C_Mem_Read+0x22c>)
 810f0a2:	9300      	str	r3, [sp, #0]
 810f0a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810f0a8:	68f8      	ldr	r0, [r7, #12]
 810f0aa:	f000 faeb 	bl	810f684 <I2C_TransferConfig>
 810f0ae:	e00f      	b.n	810f0d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810f0b0:	68fb      	ldr	r3, [r7, #12]
 810f0b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810f0b4:	b29a      	uxth	r2, r3
 810f0b6:	68fb      	ldr	r3, [r7, #12]
 810f0b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810f0ba:	68fb      	ldr	r3, [r7, #12]
 810f0bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810f0be:	b2da      	uxtb	r2, r3
 810f0c0:	8979      	ldrh	r1, [r7, #10]
 810f0c2:	4b4a      	ldr	r3, [pc, #296]	@ (810f1ec <HAL_I2C_Mem_Read+0x22c>)
 810f0c4:	9300      	str	r3, [sp, #0]
 810f0c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810f0ca:	68f8      	ldr	r0, [r7, #12]
 810f0cc:	f000 fada 	bl	810f684 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810f0d0:	697b      	ldr	r3, [r7, #20]
 810f0d2:	9300      	str	r3, [sp, #0]
 810f0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0d6:	2200      	movs	r2, #0
 810f0d8:	2104      	movs	r1, #4
 810f0da:	68f8      	ldr	r0, [r7, #12]
 810f0dc:	f000 f90e 	bl	810f2fc <I2C_WaitOnFlagUntilTimeout>
 810f0e0:	4603      	mov	r3, r0
 810f0e2:	2b00      	cmp	r3, #0
 810f0e4:	d001      	beq.n	810f0ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810f0e6:	2301      	movs	r3, #1
 810f0e8:	e07c      	b.n	810f1e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810f0ea:	68fb      	ldr	r3, [r7, #12]
 810f0ec:	681b      	ldr	r3, [r3, #0]
 810f0ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810f0f0:	68fb      	ldr	r3, [r7, #12]
 810f0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f0f4:	b2d2      	uxtb	r2, r2
 810f0f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810f0f8:	68fb      	ldr	r3, [r7, #12]
 810f0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f0fc:	1c5a      	adds	r2, r3, #1
 810f0fe:	68fb      	ldr	r3, [r7, #12]
 810f100:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 810f102:	68fb      	ldr	r3, [r7, #12]
 810f104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810f106:	3b01      	subs	r3, #1
 810f108:	b29a      	uxth	r2, r3
 810f10a:	68fb      	ldr	r3, [r7, #12]
 810f10c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810f10e:	68fb      	ldr	r3, [r7, #12]
 810f110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810f112:	b29b      	uxth	r3, r3
 810f114:	3b01      	subs	r3, #1
 810f116:	b29a      	uxth	r2, r3
 810f118:	68fb      	ldr	r3, [r7, #12]
 810f11a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810f11c:	68fb      	ldr	r3, [r7, #12]
 810f11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810f120:	b29b      	uxth	r3, r3
 810f122:	2b00      	cmp	r3, #0
 810f124:	d034      	beq.n	810f190 <HAL_I2C_Mem_Read+0x1d0>
 810f126:	68fb      	ldr	r3, [r7, #12]
 810f128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810f12a:	2b00      	cmp	r3, #0
 810f12c:	d130      	bne.n	810f190 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810f12e:	697b      	ldr	r3, [r7, #20]
 810f130:	9300      	str	r3, [sp, #0]
 810f132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f134:	2200      	movs	r2, #0
 810f136:	2180      	movs	r1, #128	@ 0x80
 810f138:	68f8      	ldr	r0, [r7, #12]
 810f13a:	f000 f8df 	bl	810f2fc <I2C_WaitOnFlagUntilTimeout>
 810f13e:	4603      	mov	r3, r0
 810f140:	2b00      	cmp	r3, #0
 810f142:	d001      	beq.n	810f148 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810f144:	2301      	movs	r3, #1
 810f146:	e04d      	b.n	810f1e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810f148:	68fb      	ldr	r3, [r7, #12]
 810f14a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810f14c:	b29b      	uxth	r3, r3
 810f14e:	2bff      	cmp	r3, #255	@ 0xff
 810f150:	d90e      	bls.n	810f170 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810f152:	68fb      	ldr	r3, [r7, #12]
 810f154:	22ff      	movs	r2, #255	@ 0xff
 810f156:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 810f158:	68fb      	ldr	r3, [r7, #12]
 810f15a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810f15c:	b2da      	uxtb	r2, r3
 810f15e:	8979      	ldrh	r1, [r7, #10]
 810f160:	2300      	movs	r3, #0
 810f162:	9300      	str	r3, [sp, #0]
 810f164:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810f168:	68f8      	ldr	r0, [r7, #12]
 810f16a:	f000 fa8b 	bl	810f684 <I2C_TransferConfig>
 810f16e:	e00f      	b.n	810f190 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810f170:	68fb      	ldr	r3, [r7, #12]
 810f172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810f174:	b29a      	uxth	r2, r3
 810f176:	68fb      	ldr	r3, [r7, #12]
 810f178:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810f17a:	68fb      	ldr	r3, [r7, #12]
 810f17c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810f17e:	b2da      	uxtb	r2, r3
 810f180:	8979      	ldrh	r1, [r7, #10]
 810f182:	2300      	movs	r3, #0
 810f184:	9300      	str	r3, [sp, #0]
 810f186:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810f18a:	68f8      	ldr	r0, [r7, #12]
 810f18c:	f000 fa7a 	bl	810f684 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810f190:	68fb      	ldr	r3, [r7, #12]
 810f192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810f194:	b29b      	uxth	r3, r3
 810f196:	2b00      	cmp	r3, #0
 810f198:	d19a      	bne.n	810f0d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810f19a:	697a      	ldr	r2, [r7, #20]
 810f19c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810f19e:	68f8      	ldr	r0, [r7, #12]
 810f1a0:	f000 f94c 	bl	810f43c <I2C_WaitOnSTOPFlagUntilTimeout>
 810f1a4:	4603      	mov	r3, r0
 810f1a6:	2b00      	cmp	r3, #0
 810f1a8:	d001      	beq.n	810f1ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810f1aa:	2301      	movs	r3, #1
 810f1ac:	e01a      	b.n	810f1e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810f1ae:	68fb      	ldr	r3, [r7, #12]
 810f1b0:	681b      	ldr	r3, [r3, #0]
 810f1b2:	2220      	movs	r2, #32
 810f1b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810f1b6:	68fb      	ldr	r3, [r7, #12]
 810f1b8:	681b      	ldr	r3, [r3, #0]
 810f1ba:	6859      	ldr	r1, [r3, #4]
 810f1bc:	68fb      	ldr	r3, [r7, #12]
 810f1be:	681a      	ldr	r2, [r3, #0]
 810f1c0:	4b0b      	ldr	r3, [pc, #44]	@ (810f1f0 <HAL_I2C_Mem_Read+0x230>)
 810f1c2:	400b      	ands	r3, r1
 810f1c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810f1c6:	68fb      	ldr	r3, [r7, #12]
 810f1c8:	2220      	movs	r2, #32
 810f1ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810f1ce:	68fb      	ldr	r3, [r7, #12]
 810f1d0:	2200      	movs	r2, #0
 810f1d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810f1d6:	68fb      	ldr	r3, [r7, #12]
 810f1d8:	2200      	movs	r2, #0
 810f1da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810f1de:	2300      	movs	r3, #0
 810f1e0:	e000      	b.n	810f1e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810f1e2:	2302      	movs	r3, #2
  }
}
 810f1e4:	4618      	mov	r0, r3
 810f1e6:	3718      	adds	r7, #24
 810f1e8:	46bd      	mov	sp, r7
 810f1ea:	bd80      	pop	{r7, pc}
 810f1ec:	80002400 	.word	0x80002400
 810f1f0:	fe00e800 	.word	0xfe00e800

0810f1f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 810f1f4:	b480      	push	{r7}
 810f1f6:	b083      	sub	sp, #12
 810f1f8:	af00      	add	r7, sp, #0
 810f1fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 810f1fc:	687b      	ldr	r3, [r7, #4]
 810f1fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 810f200:	4618      	mov	r0, r3
 810f202:	370c      	adds	r7, #12
 810f204:	46bd      	mov	sp, r7
 810f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f20a:	4770      	bx	lr

0810f20c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 810f20c:	b580      	push	{r7, lr}
 810f20e:	b086      	sub	sp, #24
 810f210:	af02      	add	r7, sp, #8
 810f212:	60f8      	str	r0, [r7, #12]
 810f214:	4608      	mov	r0, r1
 810f216:	4611      	mov	r1, r2
 810f218:	461a      	mov	r2, r3
 810f21a:	4603      	mov	r3, r0
 810f21c:	817b      	strh	r3, [r7, #10]
 810f21e:	460b      	mov	r3, r1
 810f220:	813b      	strh	r3, [r7, #8]
 810f222:	4613      	mov	r3, r2
 810f224:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810f226:	88fb      	ldrh	r3, [r7, #6]
 810f228:	b2da      	uxtb	r2, r3
 810f22a:	8979      	ldrh	r1, [r7, #10]
 810f22c:	4b20      	ldr	r3, [pc, #128]	@ (810f2b0 <I2C_RequestMemoryRead+0xa4>)
 810f22e:	9300      	str	r3, [sp, #0]
 810f230:	2300      	movs	r3, #0
 810f232:	68f8      	ldr	r0, [r7, #12]
 810f234:	f000 fa26 	bl	810f684 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810f238:	69fa      	ldr	r2, [r7, #28]
 810f23a:	69b9      	ldr	r1, [r7, #24]
 810f23c:	68f8      	ldr	r0, [r7, #12]
 810f23e:	f000 f8b6 	bl	810f3ae <I2C_WaitOnTXISFlagUntilTimeout>
 810f242:	4603      	mov	r3, r0
 810f244:	2b00      	cmp	r3, #0
 810f246:	d001      	beq.n	810f24c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810f248:	2301      	movs	r3, #1
 810f24a:	e02c      	b.n	810f2a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810f24c:	88fb      	ldrh	r3, [r7, #6]
 810f24e:	2b01      	cmp	r3, #1
 810f250:	d105      	bne.n	810f25e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810f252:	893b      	ldrh	r3, [r7, #8]
 810f254:	b2da      	uxtb	r2, r3
 810f256:	68fb      	ldr	r3, [r7, #12]
 810f258:	681b      	ldr	r3, [r3, #0]
 810f25a:	629a      	str	r2, [r3, #40]	@ 0x28
 810f25c:	e015      	b.n	810f28a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810f25e:	893b      	ldrh	r3, [r7, #8]
 810f260:	0a1b      	lsrs	r3, r3, #8
 810f262:	b29b      	uxth	r3, r3
 810f264:	b2da      	uxtb	r2, r3
 810f266:	68fb      	ldr	r3, [r7, #12]
 810f268:	681b      	ldr	r3, [r3, #0]
 810f26a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810f26c:	69fa      	ldr	r2, [r7, #28]
 810f26e:	69b9      	ldr	r1, [r7, #24]
 810f270:	68f8      	ldr	r0, [r7, #12]
 810f272:	f000 f89c 	bl	810f3ae <I2C_WaitOnTXISFlagUntilTimeout>
 810f276:	4603      	mov	r3, r0
 810f278:	2b00      	cmp	r3, #0
 810f27a:	d001      	beq.n	810f280 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 810f27c:	2301      	movs	r3, #1
 810f27e:	e012      	b.n	810f2a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810f280:	893b      	ldrh	r3, [r7, #8]
 810f282:	b2da      	uxtb	r2, r3
 810f284:	68fb      	ldr	r3, [r7, #12]
 810f286:	681b      	ldr	r3, [r3, #0]
 810f288:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810f28a:	69fb      	ldr	r3, [r7, #28]
 810f28c:	9300      	str	r3, [sp, #0]
 810f28e:	69bb      	ldr	r3, [r7, #24]
 810f290:	2200      	movs	r2, #0
 810f292:	2140      	movs	r1, #64	@ 0x40
 810f294:	68f8      	ldr	r0, [r7, #12]
 810f296:	f000 f831 	bl	810f2fc <I2C_WaitOnFlagUntilTimeout>
 810f29a:	4603      	mov	r3, r0
 810f29c:	2b00      	cmp	r3, #0
 810f29e:	d001      	beq.n	810f2a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810f2a0:	2301      	movs	r3, #1
 810f2a2:	e000      	b.n	810f2a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810f2a4:	2300      	movs	r3, #0
}
 810f2a6:	4618      	mov	r0, r3
 810f2a8:	3710      	adds	r7, #16
 810f2aa:	46bd      	mov	sp, r7
 810f2ac:	bd80      	pop	{r7, pc}
 810f2ae:	bf00      	nop
 810f2b0:	80002000 	.word	0x80002000

0810f2b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810f2b4:	b480      	push	{r7}
 810f2b6:	b083      	sub	sp, #12
 810f2b8:	af00      	add	r7, sp, #0
 810f2ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810f2bc:	687b      	ldr	r3, [r7, #4]
 810f2be:	681b      	ldr	r3, [r3, #0]
 810f2c0:	699b      	ldr	r3, [r3, #24]
 810f2c2:	f003 0302 	and.w	r3, r3, #2
 810f2c6:	2b02      	cmp	r3, #2
 810f2c8:	d103      	bne.n	810f2d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810f2ca:	687b      	ldr	r3, [r7, #4]
 810f2cc:	681b      	ldr	r3, [r3, #0]
 810f2ce:	2200      	movs	r2, #0
 810f2d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810f2d2:	687b      	ldr	r3, [r7, #4]
 810f2d4:	681b      	ldr	r3, [r3, #0]
 810f2d6:	699b      	ldr	r3, [r3, #24]
 810f2d8:	f003 0301 	and.w	r3, r3, #1
 810f2dc:	2b01      	cmp	r3, #1
 810f2de:	d007      	beq.n	810f2f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810f2e0:	687b      	ldr	r3, [r7, #4]
 810f2e2:	681b      	ldr	r3, [r3, #0]
 810f2e4:	699a      	ldr	r2, [r3, #24]
 810f2e6:	687b      	ldr	r3, [r7, #4]
 810f2e8:	681b      	ldr	r3, [r3, #0]
 810f2ea:	f042 0201 	orr.w	r2, r2, #1
 810f2ee:	619a      	str	r2, [r3, #24]
  }
}
 810f2f0:	bf00      	nop
 810f2f2:	370c      	adds	r7, #12
 810f2f4:	46bd      	mov	sp, r7
 810f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f2fa:	4770      	bx	lr

0810f2fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810f2fc:	b580      	push	{r7, lr}
 810f2fe:	b084      	sub	sp, #16
 810f300:	af00      	add	r7, sp, #0
 810f302:	60f8      	str	r0, [r7, #12]
 810f304:	60b9      	str	r1, [r7, #8]
 810f306:	603b      	str	r3, [r7, #0]
 810f308:	4613      	mov	r3, r2
 810f30a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810f30c:	e03b      	b.n	810f386 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810f30e:	69ba      	ldr	r2, [r7, #24]
 810f310:	6839      	ldr	r1, [r7, #0]
 810f312:	68f8      	ldr	r0, [r7, #12]
 810f314:	f000 f8d6 	bl	810f4c4 <I2C_IsErrorOccurred>
 810f318:	4603      	mov	r3, r0
 810f31a:	2b00      	cmp	r3, #0
 810f31c:	d001      	beq.n	810f322 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 810f31e:	2301      	movs	r3, #1
 810f320:	e041      	b.n	810f3a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810f322:	683b      	ldr	r3, [r7, #0]
 810f324:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f328:	d02d      	beq.n	810f386 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810f32a:	f7fd fbcf 	bl	810cacc <HAL_GetTick>
 810f32e:	4602      	mov	r2, r0
 810f330:	69bb      	ldr	r3, [r7, #24]
 810f332:	1ad3      	subs	r3, r2, r3
 810f334:	683a      	ldr	r2, [r7, #0]
 810f336:	429a      	cmp	r2, r3
 810f338:	d302      	bcc.n	810f340 <I2C_WaitOnFlagUntilTimeout+0x44>
 810f33a:	683b      	ldr	r3, [r7, #0]
 810f33c:	2b00      	cmp	r3, #0
 810f33e:	d122      	bne.n	810f386 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 810f340:	68fb      	ldr	r3, [r7, #12]
 810f342:	681b      	ldr	r3, [r3, #0]
 810f344:	699a      	ldr	r2, [r3, #24]
 810f346:	68bb      	ldr	r3, [r7, #8]
 810f348:	4013      	ands	r3, r2
 810f34a:	68ba      	ldr	r2, [r7, #8]
 810f34c:	429a      	cmp	r2, r3
 810f34e:	bf0c      	ite	eq
 810f350:	2301      	moveq	r3, #1
 810f352:	2300      	movne	r3, #0
 810f354:	b2db      	uxtb	r3, r3
 810f356:	461a      	mov	r2, r3
 810f358:	79fb      	ldrb	r3, [r7, #7]
 810f35a:	429a      	cmp	r2, r3
 810f35c:	d113      	bne.n	810f386 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810f35e:	68fb      	ldr	r3, [r7, #12]
 810f360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810f362:	f043 0220 	orr.w	r2, r3, #32
 810f366:	68fb      	ldr	r3, [r7, #12]
 810f368:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810f36a:	68fb      	ldr	r3, [r7, #12]
 810f36c:	2220      	movs	r2, #32
 810f36e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810f372:	68fb      	ldr	r3, [r7, #12]
 810f374:	2200      	movs	r2, #0
 810f376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810f37a:	68fb      	ldr	r3, [r7, #12]
 810f37c:	2200      	movs	r2, #0
 810f37e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 810f382:	2301      	movs	r3, #1
 810f384:	e00f      	b.n	810f3a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810f386:	68fb      	ldr	r3, [r7, #12]
 810f388:	681b      	ldr	r3, [r3, #0]
 810f38a:	699a      	ldr	r2, [r3, #24]
 810f38c:	68bb      	ldr	r3, [r7, #8]
 810f38e:	4013      	ands	r3, r2
 810f390:	68ba      	ldr	r2, [r7, #8]
 810f392:	429a      	cmp	r2, r3
 810f394:	bf0c      	ite	eq
 810f396:	2301      	moveq	r3, #1
 810f398:	2300      	movne	r3, #0
 810f39a:	b2db      	uxtb	r3, r3
 810f39c:	461a      	mov	r2, r3
 810f39e:	79fb      	ldrb	r3, [r7, #7]
 810f3a0:	429a      	cmp	r2, r3
 810f3a2:	d0b4      	beq.n	810f30e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810f3a4:	2300      	movs	r3, #0
}
 810f3a6:	4618      	mov	r0, r3
 810f3a8:	3710      	adds	r7, #16
 810f3aa:	46bd      	mov	sp, r7
 810f3ac:	bd80      	pop	{r7, pc}

0810f3ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810f3ae:	b580      	push	{r7, lr}
 810f3b0:	b084      	sub	sp, #16
 810f3b2:	af00      	add	r7, sp, #0
 810f3b4:	60f8      	str	r0, [r7, #12]
 810f3b6:	60b9      	str	r1, [r7, #8]
 810f3b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810f3ba:	e033      	b.n	810f424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810f3bc:	687a      	ldr	r2, [r7, #4]
 810f3be:	68b9      	ldr	r1, [r7, #8]
 810f3c0:	68f8      	ldr	r0, [r7, #12]
 810f3c2:	f000 f87f 	bl	810f4c4 <I2C_IsErrorOccurred>
 810f3c6:	4603      	mov	r3, r0
 810f3c8:	2b00      	cmp	r3, #0
 810f3ca:	d001      	beq.n	810f3d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810f3cc:	2301      	movs	r3, #1
 810f3ce:	e031      	b.n	810f434 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810f3d0:	68bb      	ldr	r3, [r7, #8]
 810f3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f3d6:	d025      	beq.n	810f424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810f3d8:	f7fd fb78 	bl	810cacc <HAL_GetTick>
 810f3dc:	4602      	mov	r2, r0
 810f3de:	687b      	ldr	r3, [r7, #4]
 810f3e0:	1ad3      	subs	r3, r2, r3
 810f3e2:	68ba      	ldr	r2, [r7, #8]
 810f3e4:	429a      	cmp	r2, r3
 810f3e6:	d302      	bcc.n	810f3ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810f3e8:	68bb      	ldr	r3, [r7, #8]
 810f3ea:	2b00      	cmp	r3, #0
 810f3ec:	d11a      	bne.n	810f424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810f3ee:	68fb      	ldr	r3, [r7, #12]
 810f3f0:	681b      	ldr	r3, [r3, #0]
 810f3f2:	699b      	ldr	r3, [r3, #24]
 810f3f4:	f003 0302 	and.w	r3, r3, #2
 810f3f8:	2b02      	cmp	r3, #2
 810f3fa:	d013      	beq.n	810f424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810f3fc:	68fb      	ldr	r3, [r7, #12]
 810f3fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810f400:	f043 0220 	orr.w	r2, r3, #32
 810f404:	68fb      	ldr	r3, [r7, #12]
 810f406:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810f408:	68fb      	ldr	r3, [r7, #12]
 810f40a:	2220      	movs	r2, #32
 810f40c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810f410:	68fb      	ldr	r3, [r7, #12]
 810f412:	2200      	movs	r2, #0
 810f414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810f418:	68fb      	ldr	r3, [r7, #12]
 810f41a:	2200      	movs	r2, #0
 810f41c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810f420:	2301      	movs	r3, #1
 810f422:	e007      	b.n	810f434 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810f424:	68fb      	ldr	r3, [r7, #12]
 810f426:	681b      	ldr	r3, [r3, #0]
 810f428:	699b      	ldr	r3, [r3, #24]
 810f42a:	f003 0302 	and.w	r3, r3, #2
 810f42e:	2b02      	cmp	r3, #2
 810f430:	d1c4      	bne.n	810f3bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810f432:	2300      	movs	r3, #0
}
 810f434:	4618      	mov	r0, r3
 810f436:	3710      	adds	r7, #16
 810f438:	46bd      	mov	sp, r7
 810f43a:	bd80      	pop	{r7, pc}

0810f43c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810f43c:	b580      	push	{r7, lr}
 810f43e:	b084      	sub	sp, #16
 810f440:	af00      	add	r7, sp, #0
 810f442:	60f8      	str	r0, [r7, #12]
 810f444:	60b9      	str	r1, [r7, #8]
 810f446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810f448:	e02f      	b.n	810f4aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810f44a:	687a      	ldr	r2, [r7, #4]
 810f44c:	68b9      	ldr	r1, [r7, #8]
 810f44e:	68f8      	ldr	r0, [r7, #12]
 810f450:	f000 f838 	bl	810f4c4 <I2C_IsErrorOccurred>
 810f454:	4603      	mov	r3, r0
 810f456:	2b00      	cmp	r3, #0
 810f458:	d001      	beq.n	810f45e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810f45a:	2301      	movs	r3, #1
 810f45c:	e02d      	b.n	810f4ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810f45e:	f7fd fb35 	bl	810cacc <HAL_GetTick>
 810f462:	4602      	mov	r2, r0
 810f464:	687b      	ldr	r3, [r7, #4]
 810f466:	1ad3      	subs	r3, r2, r3
 810f468:	68ba      	ldr	r2, [r7, #8]
 810f46a:	429a      	cmp	r2, r3
 810f46c:	d302      	bcc.n	810f474 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810f46e:	68bb      	ldr	r3, [r7, #8]
 810f470:	2b00      	cmp	r3, #0
 810f472:	d11a      	bne.n	810f4aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 810f474:	68fb      	ldr	r3, [r7, #12]
 810f476:	681b      	ldr	r3, [r3, #0]
 810f478:	699b      	ldr	r3, [r3, #24]
 810f47a:	f003 0320 	and.w	r3, r3, #32
 810f47e:	2b20      	cmp	r3, #32
 810f480:	d013      	beq.n	810f4aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810f482:	68fb      	ldr	r3, [r7, #12]
 810f484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810f486:	f043 0220 	orr.w	r2, r3, #32
 810f48a:	68fb      	ldr	r3, [r7, #12]
 810f48c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810f48e:	68fb      	ldr	r3, [r7, #12]
 810f490:	2220      	movs	r2, #32
 810f492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810f496:	68fb      	ldr	r3, [r7, #12]
 810f498:	2200      	movs	r2, #0
 810f49a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810f49e:	68fb      	ldr	r3, [r7, #12]
 810f4a0:	2200      	movs	r2, #0
 810f4a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 810f4a6:	2301      	movs	r3, #1
 810f4a8:	e007      	b.n	810f4ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810f4aa:	68fb      	ldr	r3, [r7, #12]
 810f4ac:	681b      	ldr	r3, [r3, #0]
 810f4ae:	699b      	ldr	r3, [r3, #24]
 810f4b0:	f003 0320 	and.w	r3, r3, #32
 810f4b4:	2b20      	cmp	r3, #32
 810f4b6:	d1c8      	bne.n	810f44a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810f4b8:	2300      	movs	r3, #0
}
 810f4ba:	4618      	mov	r0, r3
 810f4bc:	3710      	adds	r7, #16
 810f4be:	46bd      	mov	sp, r7
 810f4c0:	bd80      	pop	{r7, pc}
	...

0810f4c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810f4c4:	b580      	push	{r7, lr}
 810f4c6:	b08a      	sub	sp, #40	@ 0x28
 810f4c8:	af00      	add	r7, sp, #0
 810f4ca:	60f8      	str	r0, [r7, #12]
 810f4cc:	60b9      	str	r1, [r7, #8]
 810f4ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810f4d0:	2300      	movs	r3, #0
 810f4d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810f4d6:	68fb      	ldr	r3, [r7, #12]
 810f4d8:	681b      	ldr	r3, [r3, #0]
 810f4da:	699b      	ldr	r3, [r3, #24]
 810f4dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810f4de:	2300      	movs	r3, #0
 810f4e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810f4e2:	687b      	ldr	r3, [r7, #4]
 810f4e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810f4e6:	69bb      	ldr	r3, [r7, #24]
 810f4e8:	f003 0310 	and.w	r3, r3, #16
 810f4ec:	2b00      	cmp	r3, #0
 810f4ee:	d068      	beq.n	810f5c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810f4f0:	68fb      	ldr	r3, [r7, #12]
 810f4f2:	681b      	ldr	r3, [r3, #0]
 810f4f4:	2210      	movs	r2, #16
 810f4f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810f4f8:	e049      	b.n	810f58e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810f4fa:	68bb      	ldr	r3, [r7, #8]
 810f4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f500:	d045      	beq.n	810f58e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810f502:	f7fd fae3 	bl	810cacc <HAL_GetTick>
 810f506:	4602      	mov	r2, r0
 810f508:	69fb      	ldr	r3, [r7, #28]
 810f50a:	1ad3      	subs	r3, r2, r3
 810f50c:	68ba      	ldr	r2, [r7, #8]
 810f50e:	429a      	cmp	r2, r3
 810f510:	d302      	bcc.n	810f518 <I2C_IsErrorOccurred+0x54>
 810f512:	68bb      	ldr	r3, [r7, #8]
 810f514:	2b00      	cmp	r3, #0
 810f516:	d13a      	bne.n	810f58e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810f518:	68fb      	ldr	r3, [r7, #12]
 810f51a:	681b      	ldr	r3, [r3, #0]
 810f51c:	685b      	ldr	r3, [r3, #4]
 810f51e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810f522:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810f524:	68fb      	ldr	r3, [r7, #12]
 810f526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810f52a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 810f52c:	68fb      	ldr	r3, [r7, #12]
 810f52e:	681b      	ldr	r3, [r3, #0]
 810f530:	699b      	ldr	r3, [r3, #24]
 810f532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810f536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810f53a:	d121      	bne.n	810f580 <I2C_IsErrorOccurred+0xbc>
 810f53c:	697b      	ldr	r3, [r7, #20]
 810f53e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810f542:	d01d      	beq.n	810f580 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 810f544:	7cfb      	ldrb	r3, [r7, #19]
 810f546:	2b20      	cmp	r3, #32
 810f548:	d01a      	beq.n	810f580 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810f54a:	68fb      	ldr	r3, [r7, #12]
 810f54c:	681b      	ldr	r3, [r3, #0]
 810f54e:	685a      	ldr	r2, [r3, #4]
 810f550:	68fb      	ldr	r3, [r7, #12]
 810f552:	681b      	ldr	r3, [r3, #0]
 810f554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810f558:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810f55a:	f7fd fab7 	bl	810cacc <HAL_GetTick>
 810f55e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810f560:	e00e      	b.n	810f580 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810f562:	f7fd fab3 	bl	810cacc <HAL_GetTick>
 810f566:	4602      	mov	r2, r0
 810f568:	69fb      	ldr	r3, [r7, #28]
 810f56a:	1ad3      	subs	r3, r2, r3
 810f56c:	2b19      	cmp	r3, #25
 810f56e:	d907      	bls.n	810f580 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810f570:	6a3b      	ldr	r3, [r7, #32]
 810f572:	f043 0320 	orr.w	r3, r3, #32
 810f576:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810f578:	2301      	movs	r3, #1
 810f57a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810f57e:	e006      	b.n	810f58e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810f580:	68fb      	ldr	r3, [r7, #12]
 810f582:	681b      	ldr	r3, [r3, #0]
 810f584:	699b      	ldr	r3, [r3, #24]
 810f586:	f003 0320 	and.w	r3, r3, #32
 810f58a:	2b20      	cmp	r3, #32
 810f58c:	d1e9      	bne.n	810f562 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810f58e:	68fb      	ldr	r3, [r7, #12]
 810f590:	681b      	ldr	r3, [r3, #0]
 810f592:	699b      	ldr	r3, [r3, #24]
 810f594:	f003 0320 	and.w	r3, r3, #32
 810f598:	2b20      	cmp	r3, #32
 810f59a:	d003      	beq.n	810f5a4 <I2C_IsErrorOccurred+0xe0>
 810f59c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f5a0:	2b00      	cmp	r3, #0
 810f5a2:	d0aa      	beq.n	810f4fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810f5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f5a8:	2b00      	cmp	r3, #0
 810f5aa:	d103      	bne.n	810f5b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810f5ac:	68fb      	ldr	r3, [r7, #12]
 810f5ae:	681b      	ldr	r3, [r3, #0]
 810f5b0:	2220      	movs	r2, #32
 810f5b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810f5b4:	6a3b      	ldr	r3, [r7, #32]
 810f5b6:	f043 0304 	orr.w	r3, r3, #4
 810f5ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810f5bc:	2301      	movs	r3, #1
 810f5be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810f5c2:	68fb      	ldr	r3, [r7, #12]
 810f5c4:	681b      	ldr	r3, [r3, #0]
 810f5c6:	699b      	ldr	r3, [r3, #24]
 810f5c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810f5ca:	69bb      	ldr	r3, [r7, #24]
 810f5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810f5d0:	2b00      	cmp	r3, #0
 810f5d2:	d00b      	beq.n	810f5ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810f5d4:	6a3b      	ldr	r3, [r7, #32]
 810f5d6:	f043 0301 	orr.w	r3, r3, #1
 810f5da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810f5dc:	68fb      	ldr	r3, [r7, #12]
 810f5de:	681b      	ldr	r3, [r3, #0]
 810f5e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810f5e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810f5e6:	2301      	movs	r3, #1
 810f5e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810f5ec:	69bb      	ldr	r3, [r7, #24]
 810f5ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810f5f2:	2b00      	cmp	r3, #0
 810f5f4:	d00b      	beq.n	810f60e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810f5f6:	6a3b      	ldr	r3, [r7, #32]
 810f5f8:	f043 0308 	orr.w	r3, r3, #8
 810f5fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810f5fe:	68fb      	ldr	r3, [r7, #12]
 810f600:	681b      	ldr	r3, [r3, #0]
 810f602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810f606:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810f608:	2301      	movs	r3, #1
 810f60a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810f60e:	69bb      	ldr	r3, [r7, #24]
 810f610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810f614:	2b00      	cmp	r3, #0
 810f616:	d00b      	beq.n	810f630 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810f618:	6a3b      	ldr	r3, [r7, #32]
 810f61a:	f043 0302 	orr.w	r3, r3, #2
 810f61e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810f620:	68fb      	ldr	r3, [r7, #12]
 810f622:	681b      	ldr	r3, [r3, #0]
 810f624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810f628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810f62a:	2301      	movs	r3, #1
 810f62c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 810f630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f634:	2b00      	cmp	r3, #0
 810f636:	d01c      	beq.n	810f672 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810f638:	68f8      	ldr	r0, [r7, #12]
 810f63a:	f7ff fe3b 	bl	810f2b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810f63e:	68fb      	ldr	r3, [r7, #12]
 810f640:	681b      	ldr	r3, [r3, #0]
 810f642:	6859      	ldr	r1, [r3, #4]
 810f644:	68fb      	ldr	r3, [r7, #12]
 810f646:	681a      	ldr	r2, [r3, #0]
 810f648:	4b0d      	ldr	r3, [pc, #52]	@ (810f680 <I2C_IsErrorOccurred+0x1bc>)
 810f64a:	400b      	ands	r3, r1
 810f64c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810f64e:	68fb      	ldr	r3, [r7, #12]
 810f650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810f652:	6a3b      	ldr	r3, [r7, #32]
 810f654:	431a      	orrs	r2, r3
 810f656:	68fb      	ldr	r3, [r7, #12]
 810f658:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810f65a:	68fb      	ldr	r3, [r7, #12]
 810f65c:	2220      	movs	r2, #32
 810f65e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810f662:	68fb      	ldr	r3, [r7, #12]
 810f664:	2200      	movs	r2, #0
 810f666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810f66a:	68fb      	ldr	r3, [r7, #12]
 810f66c:	2200      	movs	r2, #0
 810f66e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810f672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810f676:	4618      	mov	r0, r3
 810f678:	3728      	adds	r7, #40	@ 0x28
 810f67a:	46bd      	mov	sp, r7
 810f67c:	bd80      	pop	{r7, pc}
 810f67e:	bf00      	nop
 810f680:	fe00e800 	.word	0xfe00e800

0810f684 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810f684:	b480      	push	{r7}
 810f686:	b087      	sub	sp, #28
 810f688:	af00      	add	r7, sp, #0
 810f68a:	60f8      	str	r0, [r7, #12]
 810f68c:	607b      	str	r3, [r7, #4]
 810f68e:	460b      	mov	r3, r1
 810f690:	817b      	strh	r3, [r7, #10]
 810f692:	4613      	mov	r3, r2
 810f694:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810f696:	897b      	ldrh	r3, [r7, #10]
 810f698:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810f69c:	7a7b      	ldrb	r3, [r7, #9]
 810f69e:	041b      	lsls	r3, r3, #16
 810f6a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810f6a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810f6a6:	687b      	ldr	r3, [r7, #4]
 810f6a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810f6aa:	6a3b      	ldr	r3, [r7, #32]
 810f6ac:	4313      	orrs	r3, r2
 810f6ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810f6b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810f6b4:	68fb      	ldr	r3, [r7, #12]
 810f6b6:	681b      	ldr	r3, [r3, #0]
 810f6b8:	685a      	ldr	r2, [r3, #4]
 810f6ba:	6a3b      	ldr	r3, [r7, #32]
 810f6bc:	0d5b      	lsrs	r3, r3, #21
 810f6be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 810f6c2:	4b08      	ldr	r3, [pc, #32]	@ (810f6e4 <I2C_TransferConfig+0x60>)
 810f6c4:	430b      	orrs	r3, r1
 810f6c6:	43db      	mvns	r3, r3
 810f6c8:	ea02 0103 	and.w	r1, r2, r3
 810f6cc:	68fb      	ldr	r3, [r7, #12]
 810f6ce:	681b      	ldr	r3, [r3, #0]
 810f6d0:	697a      	ldr	r2, [r7, #20]
 810f6d2:	430a      	orrs	r2, r1
 810f6d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810f6d6:	bf00      	nop
 810f6d8:	371c      	adds	r7, #28
 810f6da:	46bd      	mov	sp, r7
 810f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f6e0:	4770      	bx	lr
 810f6e2:	bf00      	nop
 810f6e4:	03ff63ff 	.word	0x03ff63ff

0810f6e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810f6e8:	b480      	push	{r7}
 810f6ea:	b083      	sub	sp, #12
 810f6ec:	af00      	add	r7, sp, #0
 810f6ee:	6078      	str	r0, [r7, #4]
 810f6f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810f6f2:	687b      	ldr	r3, [r7, #4]
 810f6f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810f6f8:	b2db      	uxtb	r3, r3
 810f6fa:	2b20      	cmp	r3, #32
 810f6fc:	d138      	bne.n	810f770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810f6fe:	687b      	ldr	r3, [r7, #4]
 810f700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810f704:	2b01      	cmp	r3, #1
 810f706:	d101      	bne.n	810f70c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810f708:	2302      	movs	r3, #2
 810f70a:	e032      	b.n	810f772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810f70c:	687b      	ldr	r3, [r7, #4]
 810f70e:	2201      	movs	r2, #1
 810f710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810f714:	687b      	ldr	r3, [r7, #4]
 810f716:	2224      	movs	r2, #36	@ 0x24
 810f718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810f71c:	687b      	ldr	r3, [r7, #4]
 810f71e:	681b      	ldr	r3, [r3, #0]
 810f720:	681a      	ldr	r2, [r3, #0]
 810f722:	687b      	ldr	r3, [r7, #4]
 810f724:	681b      	ldr	r3, [r3, #0]
 810f726:	f022 0201 	bic.w	r2, r2, #1
 810f72a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810f72c:	687b      	ldr	r3, [r7, #4]
 810f72e:	681b      	ldr	r3, [r3, #0]
 810f730:	681a      	ldr	r2, [r3, #0]
 810f732:	687b      	ldr	r3, [r7, #4]
 810f734:	681b      	ldr	r3, [r3, #0]
 810f736:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 810f73a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810f73c:	687b      	ldr	r3, [r7, #4]
 810f73e:	681b      	ldr	r3, [r3, #0]
 810f740:	6819      	ldr	r1, [r3, #0]
 810f742:	687b      	ldr	r3, [r7, #4]
 810f744:	681b      	ldr	r3, [r3, #0]
 810f746:	683a      	ldr	r2, [r7, #0]
 810f748:	430a      	orrs	r2, r1
 810f74a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810f74c:	687b      	ldr	r3, [r7, #4]
 810f74e:	681b      	ldr	r3, [r3, #0]
 810f750:	681a      	ldr	r2, [r3, #0]
 810f752:	687b      	ldr	r3, [r7, #4]
 810f754:	681b      	ldr	r3, [r3, #0]
 810f756:	f042 0201 	orr.w	r2, r2, #1
 810f75a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810f75c:	687b      	ldr	r3, [r7, #4]
 810f75e:	2220      	movs	r2, #32
 810f760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810f764:	687b      	ldr	r3, [r7, #4]
 810f766:	2200      	movs	r2, #0
 810f768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810f76c:	2300      	movs	r3, #0
 810f76e:	e000      	b.n	810f772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810f770:	2302      	movs	r3, #2
  }
}
 810f772:	4618      	mov	r0, r3
 810f774:	370c      	adds	r7, #12
 810f776:	46bd      	mov	sp, r7
 810f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f77c:	4770      	bx	lr

0810f77e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810f77e:	b480      	push	{r7}
 810f780:	b085      	sub	sp, #20
 810f782:	af00      	add	r7, sp, #0
 810f784:	6078      	str	r0, [r7, #4]
 810f786:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810f788:	687b      	ldr	r3, [r7, #4]
 810f78a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810f78e:	b2db      	uxtb	r3, r3
 810f790:	2b20      	cmp	r3, #32
 810f792:	d139      	bne.n	810f808 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810f794:	687b      	ldr	r3, [r7, #4]
 810f796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810f79a:	2b01      	cmp	r3, #1
 810f79c:	d101      	bne.n	810f7a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810f79e:	2302      	movs	r3, #2
 810f7a0:	e033      	b.n	810f80a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810f7a2:	687b      	ldr	r3, [r7, #4]
 810f7a4:	2201      	movs	r2, #1
 810f7a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810f7aa:	687b      	ldr	r3, [r7, #4]
 810f7ac:	2224      	movs	r2, #36	@ 0x24
 810f7ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810f7b2:	687b      	ldr	r3, [r7, #4]
 810f7b4:	681b      	ldr	r3, [r3, #0]
 810f7b6:	681a      	ldr	r2, [r3, #0]
 810f7b8:	687b      	ldr	r3, [r7, #4]
 810f7ba:	681b      	ldr	r3, [r3, #0]
 810f7bc:	f022 0201 	bic.w	r2, r2, #1
 810f7c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810f7c2:	687b      	ldr	r3, [r7, #4]
 810f7c4:	681b      	ldr	r3, [r3, #0]
 810f7c6:	681b      	ldr	r3, [r3, #0]
 810f7c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810f7ca:	68fb      	ldr	r3, [r7, #12]
 810f7cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810f7d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810f7d2:	683b      	ldr	r3, [r7, #0]
 810f7d4:	021b      	lsls	r3, r3, #8
 810f7d6:	68fa      	ldr	r2, [r7, #12]
 810f7d8:	4313      	orrs	r3, r2
 810f7da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810f7dc:	687b      	ldr	r3, [r7, #4]
 810f7de:	681b      	ldr	r3, [r3, #0]
 810f7e0:	68fa      	ldr	r2, [r7, #12]
 810f7e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810f7e4:	687b      	ldr	r3, [r7, #4]
 810f7e6:	681b      	ldr	r3, [r3, #0]
 810f7e8:	681a      	ldr	r2, [r3, #0]
 810f7ea:	687b      	ldr	r3, [r7, #4]
 810f7ec:	681b      	ldr	r3, [r3, #0]
 810f7ee:	f042 0201 	orr.w	r2, r2, #1
 810f7f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810f7f4:	687b      	ldr	r3, [r7, #4]
 810f7f6:	2220      	movs	r2, #32
 810f7f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810f7fc:	687b      	ldr	r3, [r7, #4]
 810f7fe:	2200      	movs	r2, #0
 810f800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810f804:	2300      	movs	r3, #0
 810f806:	e000      	b.n	810f80a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810f808:	2302      	movs	r3, #2
  }
}
 810f80a:	4618      	mov	r0, r3
 810f80c:	3714      	adds	r7, #20
 810f80e:	46bd      	mov	sp, r7
 810f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f814:	4770      	bx	lr
	...

0810f818 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810f818:	b580      	push	{r7, lr}
 810f81a:	b084      	sub	sp, #16
 810f81c:	af00      	add	r7, sp, #0
 810f81e:	60f8      	str	r0, [r7, #12]
 810f820:	460b      	mov	r3, r1
 810f822:	607a      	str	r2, [r7, #4]
 810f824:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810f826:	4b37      	ldr	r3, [pc, #220]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f828:	681b      	ldr	r3, [r3, #0]
 810f82a:	f023 0201 	bic.w	r2, r3, #1
 810f82e:	4935      	ldr	r1, [pc, #212]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f830:	68fb      	ldr	r3, [r7, #12]
 810f832:	4313      	orrs	r3, r2
 810f834:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810f836:	687b      	ldr	r3, [r7, #4]
 810f838:	2b00      	cmp	r3, #0
 810f83a:	d123      	bne.n	810f884 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810f83c:	f7fd fa46 	bl	810cccc <HAL_GetCurrentCPUID>
 810f840:	4603      	mov	r3, r0
 810f842:	2b03      	cmp	r3, #3
 810f844:	d158      	bne.n	810f8f8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810f846:	4b2f      	ldr	r3, [pc, #188]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f848:	691b      	ldr	r3, [r3, #16]
 810f84a:	4a2e      	ldr	r2, [pc, #184]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f84c:	f023 0301 	bic.w	r3, r3, #1
 810f850:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810f852:	4b2d      	ldr	r3, [pc, #180]	@ (810f908 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810f854:	691b      	ldr	r3, [r3, #16]
 810f856:	4a2c      	ldr	r2, [pc, #176]	@ (810f908 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810f858:	f043 0304 	orr.w	r3, r3, #4
 810f85c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810f85e:	f3bf 8f4f 	dsb	sy
}
 810f862:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810f864:	f3bf 8f6f 	isb	sy
}
 810f868:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810f86a:	7afb      	ldrb	r3, [r7, #11]
 810f86c:	2b01      	cmp	r3, #1
 810f86e:	d101      	bne.n	810f874 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810f870:	bf30      	wfi
 810f872:	e000      	b.n	810f876 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810f874:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810f876:	4b24      	ldr	r3, [pc, #144]	@ (810f908 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810f878:	691b      	ldr	r3, [r3, #16]
 810f87a:	4a23      	ldr	r2, [pc, #140]	@ (810f908 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810f87c:	f023 0304 	bic.w	r3, r3, #4
 810f880:	6113      	str	r3, [r2, #16]
 810f882:	e03c      	b.n	810f8fe <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810f884:	687b      	ldr	r3, [r7, #4]
 810f886:	2b01      	cmp	r3, #1
 810f888:	d123      	bne.n	810f8d2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810f88a:	f7fd fa1f 	bl	810cccc <HAL_GetCurrentCPUID>
 810f88e:	4603      	mov	r3, r0
 810f890:	2b01      	cmp	r3, #1
 810f892:	d133      	bne.n	810f8fc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810f894:	4b1b      	ldr	r3, [pc, #108]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f896:	695b      	ldr	r3, [r3, #20]
 810f898:	4a1a      	ldr	r2, [pc, #104]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f89a:	f023 0302 	bic.w	r3, r3, #2
 810f89e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810f8a0:	4b19      	ldr	r3, [pc, #100]	@ (810f908 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810f8a2:	691b      	ldr	r3, [r3, #16]
 810f8a4:	4a18      	ldr	r2, [pc, #96]	@ (810f908 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810f8a6:	f043 0304 	orr.w	r3, r3, #4
 810f8aa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810f8ac:	f3bf 8f4f 	dsb	sy
}
 810f8b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810f8b2:	f3bf 8f6f 	isb	sy
}
 810f8b6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810f8b8:	7afb      	ldrb	r3, [r7, #11]
 810f8ba:	2b01      	cmp	r3, #1
 810f8bc:	d101      	bne.n	810f8c2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810f8be:	bf30      	wfi
 810f8c0:	e000      	b.n	810f8c4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810f8c2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810f8c4:	4b10      	ldr	r3, [pc, #64]	@ (810f908 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810f8c6:	691b      	ldr	r3, [r3, #16]
 810f8c8:	4a0f      	ldr	r2, [pc, #60]	@ (810f908 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810f8ca:	f023 0304 	bic.w	r3, r3, #4
 810f8ce:	6113      	str	r3, [r2, #16]
 810f8d0:	e015      	b.n	810f8fe <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810f8d2:	f7fd f9fb 	bl	810cccc <HAL_GetCurrentCPUID>
 810f8d6:	4603      	mov	r3, r0
 810f8d8:	2b03      	cmp	r3, #3
 810f8da:	d106      	bne.n	810f8ea <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810f8dc:	4b09      	ldr	r3, [pc, #36]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f8de:	691b      	ldr	r3, [r3, #16]
 810f8e0:	4a08      	ldr	r2, [pc, #32]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f8e2:	f023 0304 	bic.w	r3, r3, #4
 810f8e6:	6113      	str	r3, [r2, #16]
 810f8e8:	e009      	b.n	810f8fe <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810f8ea:	4b06      	ldr	r3, [pc, #24]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f8ec:	695b      	ldr	r3, [r3, #20]
 810f8ee:	4a05      	ldr	r2, [pc, #20]	@ (810f904 <HAL_PWREx_EnterSTOPMode+0xec>)
 810f8f0:	f023 0304 	bic.w	r3, r3, #4
 810f8f4:	6153      	str	r3, [r2, #20]
 810f8f6:	e002      	b.n	810f8fe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810f8f8:	bf00      	nop
 810f8fa:	e000      	b.n	810f8fe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810f8fc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810f8fe:	3710      	adds	r7, #16
 810f900:	46bd      	mov	sp, r7
 810f902:	bd80      	pop	{r7, pc}
 810f904:	58024800 	.word	0x58024800
 810f908:	e000ed00 	.word	0xe000ed00

0810f90c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810f90c:	b580      	push	{r7, lr}
 810f90e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810f910:	f7fd f9dc 	bl	810cccc <HAL_GetCurrentCPUID>
 810f914:	4603      	mov	r3, r0
 810f916:	2b03      	cmp	r3, #3
 810f918:	d101      	bne.n	810f91e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810f91a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810f91c:	e001      	b.n	810f922 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810f91e:	bf40      	sev
    __WFE ();
 810f920:	bf20      	wfe
}
 810f922:	bf00      	nop
 810f924:	bd80      	pop	{r7, pc}
	...

0810f928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810f928:	b480      	push	{r7}
 810f92a:	b089      	sub	sp, #36	@ 0x24
 810f92c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810f92e:	4bb3      	ldr	r3, [pc, #716]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f930:	691b      	ldr	r3, [r3, #16]
 810f932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810f936:	2b18      	cmp	r3, #24
 810f938:	f200 8155 	bhi.w	810fbe6 <HAL_RCC_GetSysClockFreq+0x2be>
 810f93c:	a201      	add	r2, pc, #4	@ (adr r2, 810f944 <HAL_RCC_GetSysClockFreq+0x1c>)
 810f93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f942:	bf00      	nop
 810f944:	0810f9a9 	.word	0x0810f9a9
 810f948:	0810fbe7 	.word	0x0810fbe7
 810f94c:	0810fbe7 	.word	0x0810fbe7
 810f950:	0810fbe7 	.word	0x0810fbe7
 810f954:	0810fbe7 	.word	0x0810fbe7
 810f958:	0810fbe7 	.word	0x0810fbe7
 810f95c:	0810fbe7 	.word	0x0810fbe7
 810f960:	0810fbe7 	.word	0x0810fbe7
 810f964:	0810f9cf 	.word	0x0810f9cf
 810f968:	0810fbe7 	.word	0x0810fbe7
 810f96c:	0810fbe7 	.word	0x0810fbe7
 810f970:	0810fbe7 	.word	0x0810fbe7
 810f974:	0810fbe7 	.word	0x0810fbe7
 810f978:	0810fbe7 	.word	0x0810fbe7
 810f97c:	0810fbe7 	.word	0x0810fbe7
 810f980:	0810fbe7 	.word	0x0810fbe7
 810f984:	0810f9d5 	.word	0x0810f9d5
 810f988:	0810fbe7 	.word	0x0810fbe7
 810f98c:	0810fbe7 	.word	0x0810fbe7
 810f990:	0810fbe7 	.word	0x0810fbe7
 810f994:	0810fbe7 	.word	0x0810fbe7
 810f998:	0810fbe7 	.word	0x0810fbe7
 810f99c:	0810fbe7 	.word	0x0810fbe7
 810f9a0:	0810fbe7 	.word	0x0810fbe7
 810f9a4:	0810f9db 	.word	0x0810f9db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810f9a8:	4b94      	ldr	r3, [pc, #592]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f9aa:	681b      	ldr	r3, [r3, #0]
 810f9ac:	f003 0320 	and.w	r3, r3, #32
 810f9b0:	2b00      	cmp	r3, #0
 810f9b2:	d009      	beq.n	810f9c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810f9b4:	4b91      	ldr	r3, [pc, #580]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f9b6:	681b      	ldr	r3, [r3, #0]
 810f9b8:	08db      	lsrs	r3, r3, #3
 810f9ba:	f003 0303 	and.w	r3, r3, #3
 810f9be:	4a90      	ldr	r2, [pc, #576]	@ (810fc00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810f9c0:	fa22 f303 	lsr.w	r3, r2, r3
 810f9c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810f9c6:	e111      	b.n	810fbec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810f9c8:	4b8d      	ldr	r3, [pc, #564]	@ (810fc00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810f9ca:	61bb      	str	r3, [r7, #24]
      break;
 810f9cc:	e10e      	b.n	810fbec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810f9ce:	4b8d      	ldr	r3, [pc, #564]	@ (810fc04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810f9d0:	61bb      	str	r3, [r7, #24]
      break;
 810f9d2:	e10b      	b.n	810fbec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810f9d4:	4b8c      	ldr	r3, [pc, #560]	@ (810fc08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810f9d6:	61bb      	str	r3, [r7, #24]
      break;
 810f9d8:	e108      	b.n	810fbec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810f9da:	4b88      	ldr	r3, [pc, #544]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f9de:	f003 0303 	and.w	r3, r3, #3
 810f9e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810f9e4:	4b85      	ldr	r3, [pc, #532]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f9e8:	091b      	lsrs	r3, r3, #4
 810f9ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810f9ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810f9f0:	4b82      	ldr	r3, [pc, #520]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f9f4:	f003 0301 	and.w	r3, r3, #1
 810f9f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810f9fa:	4b80      	ldr	r3, [pc, #512]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810f9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810f9fe:	08db      	lsrs	r3, r3, #3
 810fa00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810fa04:	68fa      	ldr	r2, [r7, #12]
 810fa06:	fb02 f303 	mul.w	r3, r2, r3
 810fa0a:	ee07 3a90 	vmov	s15, r3
 810fa0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810fa12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810fa16:	693b      	ldr	r3, [r7, #16]
 810fa18:	2b00      	cmp	r3, #0
 810fa1a:	f000 80e1 	beq.w	810fbe0 <HAL_RCC_GetSysClockFreq+0x2b8>
 810fa1e:	697b      	ldr	r3, [r7, #20]
 810fa20:	2b02      	cmp	r3, #2
 810fa22:	f000 8083 	beq.w	810fb2c <HAL_RCC_GetSysClockFreq+0x204>
 810fa26:	697b      	ldr	r3, [r7, #20]
 810fa28:	2b02      	cmp	r3, #2
 810fa2a:	f200 80a1 	bhi.w	810fb70 <HAL_RCC_GetSysClockFreq+0x248>
 810fa2e:	697b      	ldr	r3, [r7, #20]
 810fa30:	2b00      	cmp	r3, #0
 810fa32:	d003      	beq.n	810fa3c <HAL_RCC_GetSysClockFreq+0x114>
 810fa34:	697b      	ldr	r3, [r7, #20]
 810fa36:	2b01      	cmp	r3, #1
 810fa38:	d056      	beq.n	810fae8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810fa3a:	e099      	b.n	810fb70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810fa3c:	4b6f      	ldr	r3, [pc, #444]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810fa3e:	681b      	ldr	r3, [r3, #0]
 810fa40:	f003 0320 	and.w	r3, r3, #32
 810fa44:	2b00      	cmp	r3, #0
 810fa46:	d02d      	beq.n	810faa4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810fa48:	4b6c      	ldr	r3, [pc, #432]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810fa4a:	681b      	ldr	r3, [r3, #0]
 810fa4c:	08db      	lsrs	r3, r3, #3
 810fa4e:	f003 0303 	and.w	r3, r3, #3
 810fa52:	4a6b      	ldr	r2, [pc, #428]	@ (810fc00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810fa54:	fa22 f303 	lsr.w	r3, r2, r3
 810fa58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810fa5a:	687b      	ldr	r3, [r7, #4]
 810fa5c:	ee07 3a90 	vmov	s15, r3
 810fa60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810fa64:	693b      	ldr	r3, [r7, #16]
 810fa66:	ee07 3a90 	vmov	s15, r3
 810fa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810fa6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810fa72:	4b62      	ldr	r3, [pc, #392]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810fa74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810fa76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810fa7a:	ee07 3a90 	vmov	s15, r3
 810fa7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810fa82:	ed97 6a02 	vldr	s12, [r7, #8]
 810fa86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810fc0c <HAL_RCC_GetSysClockFreq+0x2e4>
 810fa8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810fa8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810fa92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810fa96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810fa9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fa9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810faa2:	e087      	b.n	810fbb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810faa4:	693b      	ldr	r3, [r7, #16]
 810faa6:	ee07 3a90 	vmov	s15, r3
 810faaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810faae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810fc10 <HAL_RCC_GetSysClockFreq+0x2e8>
 810fab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810fab6:	4b51      	ldr	r3, [pc, #324]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810fab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810faba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810fabe:	ee07 3a90 	vmov	s15, r3
 810fac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810fac6:	ed97 6a02 	vldr	s12, [r7, #8]
 810faca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810fc0c <HAL_RCC_GetSysClockFreq+0x2e4>
 810face:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810fad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810fad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810fada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810fade:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810fae6:	e065      	b.n	810fbb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810fae8:	693b      	ldr	r3, [r7, #16]
 810faea:	ee07 3a90 	vmov	s15, r3
 810faee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810faf2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810fc14 <HAL_RCC_GetSysClockFreq+0x2ec>
 810faf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810fafa:	4b40      	ldr	r3, [pc, #256]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810fafc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810fafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810fb02:	ee07 3a90 	vmov	s15, r3
 810fb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810fb0a:	ed97 6a02 	vldr	s12, [r7, #8]
 810fb0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810fc0c <HAL_RCC_GetSysClockFreq+0x2e4>
 810fb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810fb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810fb1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810fb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810fb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fb26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810fb2a:	e043      	b.n	810fbb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810fb2c:	693b      	ldr	r3, [r7, #16]
 810fb2e:	ee07 3a90 	vmov	s15, r3
 810fb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810fb36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810fc18 <HAL_RCC_GetSysClockFreq+0x2f0>
 810fb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810fb3e:	4b2f      	ldr	r3, [pc, #188]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810fb40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810fb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810fb46:	ee07 3a90 	vmov	s15, r3
 810fb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810fb4e:	ed97 6a02 	vldr	s12, [r7, #8]
 810fb52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810fc0c <HAL_RCC_GetSysClockFreq+0x2e4>
 810fb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810fb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810fb5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810fb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810fb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fb6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810fb6e:	e021      	b.n	810fbb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810fb70:	693b      	ldr	r3, [r7, #16]
 810fb72:	ee07 3a90 	vmov	s15, r3
 810fb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810fb7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810fc14 <HAL_RCC_GetSysClockFreq+0x2ec>
 810fb7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810fb82:	4b1e      	ldr	r3, [pc, #120]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810fb84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810fb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810fb8a:	ee07 3a90 	vmov	s15, r3
 810fb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810fb92:	ed97 6a02 	vldr	s12, [r7, #8]
 810fb96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810fc0c <HAL_RCC_GetSysClockFreq+0x2e4>
 810fb9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810fb9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810fba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810fba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810fbaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fbae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810fbb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810fbb4:	4b11      	ldr	r3, [pc, #68]	@ (810fbfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810fbb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810fbb8:	0a5b      	lsrs	r3, r3, #9
 810fbba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810fbbe:	3301      	adds	r3, #1
 810fbc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810fbc2:	683b      	ldr	r3, [r7, #0]
 810fbc4:	ee07 3a90 	vmov	s15, r3
 810fbc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810fbcc:	edd7 6a07 	vldr	s13, [r7, #28]
 810fbd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810fbd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810fbd8:	ee17 3a90 	vmov	r3, s15
 810fbdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810fbde:	e005      	b.n	810fbec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810fbe0:	2300      	movs	r3, #0
 810fbe2:	61bb      	str	r3, [r7, #24]
      break;
 810fbe4:	e002      	b.n	810fbec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810fbe6:	4b07      	ldr	r3, [pc, #28]	@ (810fc04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810fbe8:	61bb      	str	r3, [r7, #24]
      break;
 810fbea:	bf00      	nop
  }

  return sysclockfreq;
 810fbec:	69bb      	ldr	r3, [r7, #24]
}
 810fbee:	4618      	mov	r0, r3
 810fbf0:	3724      	adds	r7, #36	@ 0x24
 810fbf2:	46bd      	mov	sp, r7
 810fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fbf8:	4770      	bx	lr
 810fbfa:	bf00      	nop
 810fbfc:	58024400 	.word	0x58024400
 810fc00:	03d09000 	.word	0x03d09000
 810fc04:	003d0900 	.word	0x003d0900
 810fc08:	017d7840 	.word	0x017d7840
 810fc0c:	46000000 	.word	0x46000000
 810fc10:	4c742400 	.word	0x4c742400
 810fc14:	4a742400 	.word	0x4a742400
 810fc18:	4bbebc20 	.word	0x4bbebc20

0810fc1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810fc1c:	b580      	push	{r7, lr}
 810fc1e:	b082      	sub	sp, #8
 810fc20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810fc22:	f7ff fe81 	bl	810f928 <HAL_RCC_GetSysClockFreq>
 810fc26:	4602      	mov	r2, r0
 810fc28:	4b11      	ldr	r3, [pc, #68]	@ (810fc70 <HAL_RCC_GetHCLKFreq+0x54>)
 810fc2a:	699b      	ldr	r3, [r3, #24]
 810fc2c:	0a1b      	lsrs	r3, r3, #8
 810fc2e:	f003 030f 	and.w	r3, r3, #15
 810fc32:	4910      	ldr	r1, [pc, #64]	@ (810fc74 <HAL_RCC_GetHCLKFreq+0x58>)
 810fc34:	5ccb      	ldrb	r3, [r1, r3]
 810fc36:	f003 031f 	and.w	r3, r3, #31
 810fc3a:	fa22 f303 	lsr.w	r3, r2, r3
 810fc3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810fc40:	4b0b      	ldr	r3, [pc, #44]	@ (810fc70 <HAL_RCC_GetHCLKFreq+0x54>)
 810fc42:	699b      	ldr	r3, [r3, #24]
 810fc44:	f003 030f 	and.w	r3, r3, #15
 810fc48:	4a0a      	ldr	r2, [pc, #40]	@ (810fc74 <HAL_RCC_GetHCLKFreq+0x58>)
 810fc4a:	5cd3      	ldrb	r3, [r2, r3]
 810fc4c:	f003 031f 	and.w	r3, r3, #31
 810fc50:	687a      	ldr	r2, [r7, #4]
 810fc52:	fa22 f303 	lsr.w	r3, r2, r3
 810fc56:	4a08      	ldr	r2, [pc, #32]	@ (810fc78 <HAL_RCC_GetHCLKFreq+0x5c>)
 810fc58:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810fc5a:	4b07      	ldr	r3, [pc, #28]	@ (810fc78 <HAL_RCC_GetHCLKFreq+0x5c>)
 810fc5c:	681b      	ldr	r3, [r3, #0]
 810fc5e:	4a07      	ldr	r2, [pc, #28]	@ (810fc7c <HAL_RCC_GetHCLKFreq+0x60>)
 810fc60:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810fc62:	4b05      	ldr	r3, [pc, #20]	@ (810fc78 <HAL_RCC_GetHCLKFreq+0x5c>)
 810fc64:	681b      	ldr	r3, [r3, #0]
}
 810fc66:	4618      	mov	r0, r3
 810fc68:	3708      	adds	r7, #8
 810fc6a:	46bd      	mov	sp, r7
 810fc6c:	bd80      	pop	{r7, pc}
 810fc6e:	bf00      	nop
 810fc70:	58024400 	.word	0x58024400
 810fc74:	081285a0 	.word	0x081285a0
 810fc78:	10000018 	.word	0x10000018
 810fc7c:	10000014 	.word	0x10000014

0810fc80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810fc80:	b580      	push	{r7, lr}
 810fc82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810fc84:	f7ff ffca 	bl	810fc1c <HAL_RCC_GetHCLKFreq>
 810fc88:	4602      	mov	r2, r0
 810fc8a:	4b06      	ldr	r3, [pc, #24]	@ (810fca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 810fc8c:	69db      	ldr	r3, [r3, #28]
 810fc8e:	091b      	lsrs	r3, r3, #4
 810fc90:	f003 0307 	and.w	r3, r3, #7
 810fc94:	4904      	ldr	r1, [pc, #16]	@ (810fca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 810fc96:	5ccb      	ldrb	r3, [r1, r3]
 810fc98:	f003 031f 	and.w	r3, r3, #31
 810fc9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810fca0:	4618      	mov	r0, r3
 810fca2:	bd80      	pop	{r7, pc}
 810fca4:	58024400 	.word	0x58024400
 810fca8:	081285a0 	.word	0x081285a0

0810fcac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810fcac:	b580      	push	{r7, lr}
 810fcae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810fcb0:	f7ff ffb4 	bl	810fc1c <HAL_RCC_GetHCLKFreq>
 810fcb4:	4602      	mov	r2, r0
 810fcb6:	4b06      	ldr	r3, [pc, #24]	@ (810fcd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 810fcb8:	69db      	ldr	r3, [r3, #28]
 810fcba:	0a1b      	lsrs	r3, r3, #8
 810fcbc:	f003 0307 	and.w	r3, r3, #7
 810fcc0:	4904      	ldr	r1, [pc, #16]	@ (810fcd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 810fcc2:	5ccb      	ldrb	r3, [r1, r3]
 810fcc4:	f003 031f 	and.w	r3, r3, #31
 810fcc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810fccc:	4618      	mov	r0, r3
 810fcce:	bd80      	pop	{r7, pc}
 810fcd0:	58024400 	.word	0x58024400
 810fcd4:	081285a0 	.word	0x081285a0

0810fcd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810fcd8:	b480      	push	{r7}
 810fcda:	b083      	sub	sp, #12
 810fcdc:	af00      	add	r7, sp, #0
 810fcde:	6078      	str	r0, [r7, #4]
 810fce0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810fce2:	687b      	ldr	r3, [r7, #4]
 810fce4:	223f      	movs	r2, #63	@ 0x3f
 810fce6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810fce8:	4b1a      	ldr	r3, [pc, #104]	@ (810fd54 <HAL_RCC_GetClockConfig+0x7c>)
 810fcea:	691b      	ldr	r3, [r3, #16]
 810fcec:	f003 0207 	and.w	r2, r3, #7
 810fcf0:	687b      	ldr	r3, [r7, #4]
 810fcf2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810fcf4:	4b17      	ldr	r3, [pc, #92]	@ (810fd54 <HAL_RCC_GetClockConfig+0x7c>)
 810fcf6:	699b      	ldr	r3, [r3, #24]
 810fcf8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 810fcfc:	687b      	ldr	r3, [r7, #4]
 810fcfe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810fd00:	4b14      	ldr	r3, [pc, #80]	@ (810fd54 <HAL_RCC_GetClockConfig+0x7c>)
 810fd02:	699b      	ldr	r3, [r3, #24]
 810fd04:	f003 020f 	and.w	r2, r3, #15
 810fd08:	687b      	ldr	r3, [r7, #4]
 810fd0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810fd0c:	4b11      	ldr	r3, [pc, #68]	@ (810fd54 <HAL_RCC_GetClockConfig+0x7c>)
 810fd0e:	699b      	ldr	r3, [r3, #24]
 810fd10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810fd14:	687b      	ldr	r3, [r7, #4]
 810fd16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810fd18:	4b0e      	ldr	r3, [pc, #56]	@ (810fd54 <HAL_RCC_GetClockConfig+0x7c>)
 810fd1a:	69db      	ldr	r3, [r3, #28]
 810fd1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810fd20:	687b      	ldr	r3, [r7, #4]
 810fd22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810fd24:	4b0b      	ldr	r3, [pc, #44]	@ (810fd54 <HAL_RCC_GetClockConfig+0x7c>)
 810fd26:	69db      	ldr	r3, [r3, #28]
 810fd28:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810fd2c:	687b      	ldr	r3, [r7, #4]
 810fd2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810fd30:	4b08      	ldr	r3, [pc, #32]	@ (810fd54 <HAL_RCC_GetClockConfig+0x7c>)
 810fd32:	6a1b      	ldr	r3, [r3, #32]
 810fd34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810fd38:	687b      	ldr	r3, [r7, #4]
 810fd3a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810fd3c:	4b06      	ldr	r3, [pc, #24]	@ (810fd58 <HAL_RCC_GetClockConfig+0x80>)
 810fd3e:	681b      	ldr	r3, [r3, #0]
 810fd40:	f003 020f 	and.w	r2, r3, #15
 810fd44:	683b      	ldr	r3, [r7, #0]
 810fd46:	601a      	str	r2, [r3, #0]
}
 810fd48:	bf00      	nop
 810fd4a:	370c      	adds	r7, #12
 810fd4c:	46bd      	mov	sp, r7
 810fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fd52:	4770      	bx	lr
 810fd54:	58024400 	.word	0x58024400
 810fd58:	52002000 	.word	0x52002000

0810fd5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810fd5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810fd60:	b0cc      	sub	sp, #304	@ 0x130
 810fd62:	af00      	add	r7, sp, #0
 810fd64:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810fd68:	2300      	movs	r3, #0
 810fd6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810fd6e:	2300      	movs	r3, #0
 810fd70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810fd74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fd7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810fd80:	2500      	movs	r5, #0
 810fd82:	ea54 0305 	orrs.w	r3, r4, r5
 810fd86:	d049      	beq.n	810fe1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810fd88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fd8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810fd8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810fd92:	d02f      	beq.n	810fdf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810fd94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810fd98:	d828      	bhi.n	810fdec <HAL_RCCEx_PeriphCLKConfig+0x90>
 810fd9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810fd9e:	d01a      	beq.n	810fdd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810fda0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810fda4:	d822      	bhi.n	810fdec <HAL_RCCEx_PeriphCLKConfig+0x90>
 810fda6:	2b00      	cmp	r3, #0
 810fda8:	d003      	beq.n	810fdb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810fdaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810fdae:	d007      	beq.n	810fdc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810fdb0:	e01c      	b.n	810fdec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810fdb2:	4bb8      	ldr	r3, [pc, #736]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810fdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fdb6:	4ab7      	ldr	r2, [pc, #732]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810fdb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810fdbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810fdbe:	e01a      	b.n	810fdf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810fdc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fdc4:	3308      	adds	r3, #8
 810fdc6:	2102      	movs	r1, #2
 810fdc8:	4618      	mov	r0, r3
 810fdca:	f001 fccf 	bl	811176c <RCCEx_PLL2_Config>
 810fdce:	4603      	mov	r3, r0
 810fdd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810fdd4:	e00f      	b.n	810fdf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810fdd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fdda:	3328      	adds	r3, #40	@ 0x28
 810fddc:	2102      	movs	r1, #2
 810fdde:	4618      	mov	r0, r3
 810fde0:	f001 fd76 	bl	81118d0 <RCCEx_PLL3_Config>
 810fde4:	4603      	mov	r3, r0
 810fde6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810fdea:	e004      	b.n	810fdf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810fdec:	2301      	movs	r3, #1
 810fdee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810fdf2:	e000      	b.n	810fdf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810fdf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810fdf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fdfa:	2b00      	cmp	r3, #0
 810fdfc:	d10a      	bne.n	810fe14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810fdfe:	4ba5      	ldr	r3, [pc, #660]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810fe00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fe02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810fe06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810fe0c:	4aa1      	ldr	r2, [pc, #644]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810fe0e:	430b      	orrs	r3, r1
 810fe10:	6513      	str	r3, [r2, #80]	@ 0x50
 810fe12:	e003      	b.n	810fe1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810fe14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fe18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810fe1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe20:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fe24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810fe28:	f04f 0900 	mov.w	r9, #0
 810fe2c:	ea58 0309 	orrs.w	r3, r8, r9
 810fe30:	d047      	beq.n	810fec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810fe32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810fe38:	2b04      	cmp	r3, #4
 810fe3a:	d82a      	bhi.n	810fe92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810fe3c:	a201      	add	r2, pc, #4	@ (adr r2, 810fe44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810fe3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fe42:	bf00      	nop
 810fe44:	0810fe59 	.word	0x0810fe59
 810fe48:	0810fe67 	.word	0x0810fe67
 810fe4c:	0810fe7d 	.word	0x0810fe7d
 810fe50:	0810fe9b 	.word	0x0810fe9b
 810fe54:	0810fe9b 	.word	0x0810fe9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810fe58:	4b8e      	ldr	r3, [pc, #568]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810fe5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fe5c:	4a8d      	ldr	r2, [pc, #564]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810fe5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810fe62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810fe64:	e01a      	b.n	810fe9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810fe66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe6a:	3308      	adds	r3, #8
 810fe6c:	2100      	movs	r1, #0
 810fe6e:	4618      	mov	r0, r3
 810fe70:	f001 fc7c 	bl	811176c <RCCEx_PLL2_Config>
 810fe74:	4603      	mov	r3, r0
 810fe76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810fe7a:	e00f      	b.n	810fe9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810fe7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fe80:	3328      	adds	r3, #40	@ 0x28
 810fe82:	2100      	movs	r1, #0
 810fe84:	4618      	mov	r0, r3
 810fe86:	f001 fd23 	bl	81118d0 <RCCEx_PLL3_Config>
 810fe8a:	4603      	mov	r3, r0
 810fe8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810fe90:	e004      	b.n	810fe9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810fe92:	2301      	movs	r3, #1
 810fe94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810fe98:	e000      	b.n	810fe9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810fe9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810fe9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810fea0:	2b00      	cmp	r3, #0
 810fea2:	d10a      	bne.n	810feba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810fea4:	4b7b      	ldr	r3, [pc, #492]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810fea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fea8:	f023 0107 	bic.w	r1, r3, #7
 810feac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810feb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810feb2:	4a78      	ldr	r2, [pc, #480]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810feb4:	430b      	orrs	r3, r1
 810feb6:	6513      	str	r3, [r2, #80]	@ 0x50
 810feb8:	e003      	b.n	810fec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810feba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810febe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810fec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810feca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810fece:	f04f 0b00 	mov.w	fp, #0
 810fed2:	ea5a 030b 	orrs.w	r3, sl, fp
 810fed6:	d04c      	beq.n	810ff72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810fed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fedc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810fede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810fee2:	d030      	beq.n	810ff46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810fee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810fee8:	d829      	bhi.n	810ff3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810feea:	2bc0      	cmp	r3, #192	@ 0xc0
 810feec:	d02d      	beq.n	810ff4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810feee:	2bc0      	cmp	r3, #192	@ 0xc0
 810fef0:	d825      	bhi.n	810ff3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810fef2:	2b80      	cmp	r3, #128	@ 0x80
 810fef4:	d018      	beq.n	810ff28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810fef6:	2b80      	cmp	r3, #128	@ 0x80
 810fef8:	d821      	bhi.n	810ff3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810fefa:	2b00      	cmp	r3, #0
 810fefc:	d002      	beq.n	810ff04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810fefe:	2b40      	cmp	r3, #64	@ 0x40
 810ff00:	d007      	beq.n	810ff12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810ff02:	e01c      	b.n	810ff3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810ff04:	4b63      	ldr	r3, [pc, #396]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810ff06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ff08:	4a62      	ldr	r2, [pc, #392]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810ff0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ff0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810ff10:	e01c      	b.n	810ff4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810ff12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff16:	3308      	adds	r3, #8
 810ff18:	2100      	movs	r1, #0
 810ff1a:	4618      	mov	r0, r3
 810ff1c:	f001 fc26 	bl	811176c <RCCEx_PLL2_Config>
 810ff20:	4603      	mov	r3, r0
 810ff22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810ff26:	e011      	b.n	810ff4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810ff28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff2c:	3328      	adds	r3, #40	@ 0x28
 810ff2e:	2100      	movs	r1, #0
 810ff30:	4618      	mov	r0, r3
 810ff32:	f001 fccd 	bl	81118d0 <RCCEx_PLL3_Config>
 810ff36:	4603      	mov	r3, r0
 810ff38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810ff3c:	e006      	b.n	810ff4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ff3e:	2301      	movs	r3, #1
 810ff40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ff44:	e002      	b.n	810ff4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810ff46:	bf00      	nop
 810ff48:	e000      	b.n	810ff4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810ff4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ff4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ff50:	2b00      	cmp	r3, #0
 810ff52:	d10a      	bne.n	810ff6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810ff54:	4b4f      	ldr	r3, [pc, #316]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810ff56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ff58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810ff5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810ff62:	4a4c      	ldr	r2, [pc, #304]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810ff64:	430b      	orrs	r3, r1
 810ff66:	6513      	str	r3, [r2, #80]	@ 0x50
 810ff68:	e003      	b.n	810ff72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ff6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ff6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810ff72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ff7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810ff7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810ff82:	2300      	movs	r3, #0
 810ff84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810ff88:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810ff8c:	460b      	mov	r3, r1
 810ff8e:	4313      	orrs	r3, r2
 810ff90:	d053      	beq.n	811003a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810ff92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ff96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810ff9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810ff9e:	d035      	beq.n	811000c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810ffa0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810ffa4:	d82e      	bhi.n	8110004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810ffa6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810ffaa:	d031      	beq.n	8110010 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810ffac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810ffb0:	d828      	bhi.n	8110004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810ffb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810ffb6:	d01a      	beq.n	810ffee <HAL_RCCEx_PeriphCLKConfig+0x292>
 810ffb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810ffbc:	d822      	bhi.n	8110004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810ffbe:	2b00      	cmp	r3, #0
 810ffc0:	d003      	beq.n	810ffca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810ffc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810ffc6:	d007      	beq.n	810ffd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810ffc8:	e01c      	b.n	8110004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810ffca:	4b32      	ldr	r3, [pc, #200]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810ffcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ffce:	4a31      	ldr	r2, [pc, #196]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810ffd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ffd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810ffd6:	e01c      	b.n	8110012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810ffd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ffdc:	3308      	adds	r3, #8
 810ffde:	2100      	movs	r1, #0
 810ffe0:	4618      	mov	r0, r3
 810ffe2:	f001 fbc3 	bl	811176c <RCCEx_PLL2_Config>
 810ffe6:	4603      	mov	r3, r0
 810ffe8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810ffec:	e011      	b.n	8110012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810ffee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810fff2:	3328      	adds	r3, #40	@ 0x28
 810fff4:	2100      	movs	r1, #0
 810fff6:	4618      	mov	r0, r3
 810fff8:	f001 fc6a 	bl	81118d0 <RCCEx_PLL3_Config>
 810fffc:	4603      	mov	r3, r0
 810fffe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8110002:	e006      	b.n	8110012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8110004:	2301      	movs	r3, #1
 8110006:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 811000a:	e002      	b.n	8110012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 811000c:	bf00      	nop
 811000e:	e000      	b.n	8110012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8110010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110012:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110016:	2b00      	cmp	r3, #0
 8110018:	d10b      	bne.n	8110032 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 811001a:	4b1e      	ldr	r3, [pc, #120]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 811001c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811001e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8110022:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 811002a:	4a1a      	ldr	r2, [pc, #104]	@ (8110094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 811002c:	430b      	orrs	r3, r1
 811002e:	6593      	str	r3, [r2, #88]	@ 0x58
 8110030:	e003      	b.n	811003a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110032:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110036:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 811003a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811003e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110042:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8110046:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 811004a:	2300      	movs	r3, #0
 811004c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8110050:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8110054:	460b      	mov	r3, r1
 8110056:	4313      	orrs	r3, r2
 8110058:	d056      	beq.n	8110108 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 811005a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811005e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8110062:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8110066:	d038      	beq.n	81100da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8110068:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 811006c:	d831      	bhi.n	81100d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 811006e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8110072:	d034      	beq.n	81100de <HAL_RCCEx_PeriphCLKConfig+0x382>
 8110074:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8110078:	d82b      	bhi.n	81100d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 811007a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 811007e:	d01d      	beq.n	81100bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8110080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8110084:	d825      	bhi.n	81100d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8110086:	2b00      	cmp	r3, #0
 8110088:	d006      	beq.n	8110098 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 811008a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 811008e:	d00a      	beq.n	81100a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8110090:	e01f      	b.n	81100d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8110092:	bf00      	nop
 8110094:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8110098:	4ba2      	ldr	r3, [pc, #648]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 811009a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811009c:	4aa1      	ldr	r2, [pc, #644]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 811009e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81100a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81100a4:	e01c      	b.n	81100e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81100a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81100aa:	3308      	adds	r3, #8
 81100ac:	2100      	movs	r1, #0
 81100ae:	4618      	mov	r0, r3
 81100b0:	f001 fb5c 	bl	811176c <RCCEx_PLL2_Config>
 81100b4:	4603      	mov	r3, r0
 81100b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81100ba:	e011      	b.n	81100e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81100bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81100c0:	3328      	adds	r3, #40	@ 0x28
 81100c2:	2100      	movs	r1, #0
 81100c4:	4618      	mov	r0, r3
 81100c6:	f001 fc03 	bl	81118d0 <RCCEx_PLL3_Config>
 81100ca:	4603      	mov	r3, r0
 81100cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81100d0:	e006      	b.n	81100e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81100d2:	2301      	movs	r3, #1
 81100d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81100d8:	e002      	b.n	81100e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81100da:	bf00      	nop
 81100dc:	e000      	b.n	81100e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81100de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81100e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81100e4:	2b00      	cmp	r3, #0
 81100e6:	d10b      	bne.n	8110100 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81100e8:	4b8e      	ldr	r3, [pc, #568]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81100ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81100ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81100f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81100f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81100f8:	4a8a      	ldr	r2, [pc, #552]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81100fa:	430b      	orrs	r3, r1
 81100fc:	6593      	str	r3, [r2, #88]	@ 0x58
 81100fe:	e003      	b.n	8110108 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110100:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110104:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8110108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110110:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8110114:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8110118:	2300      	movs	r3, #0
 811011a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 811011e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8110122:	460b      	mov	r3, r1
 8110124:	4313      	orrs	r3, r2
 8110126:	d03a      	beq.n	811019e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8110128:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811012c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811012e:	2b30      	cmp	r3, #48	@ 0x30
 8110130:	d01f      	beq.n	8110172 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8110132:	2b30      	cmp	r3, #48	@ 0x30
 8110134:	d819      	bhi.n	811016a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8110136:	2b20      	cmp	r3, #32
 8110138:	d00c      	beq.n	8110154 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 811013a:	2b20      	cmp	r3, #32
 811013c:	d815      	bhi.n	811016a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 811013e:	2b00      	cmp	r3, #0
 8110140:	d019      	beq.n	8110176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8110142:	2b10      	cmp	r3, #16
 8110144:	d111      	bne.n	811016a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8110146:	4b77      	ldr	r3, [pc, #476]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8110148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811014a:	4a76      	ldr	r2, [pc, #472]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 811014c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8110150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8110152:	e011      	b.n	8110178 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8110154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110158:	3308      	adds	r3, #8
 811015a:	2102      	movs	r1, #2
 811015c:	4618      	mov	r0, r3
 811015e:	f001 fb05 	bl	811176c <RCCEx_PLL2_Config>
 8110162:	4603      	mov	r3, r0
 8110164:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8110168:	e006      	b.n	8110178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 811016a:	2301      	movs	r3, #1
 811016c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110170:	e002      	b.n	8110178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8110172:	bf00      	nop
 8110174:	e000      	b.n	8110178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8110176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110178:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811017c:	2b00      	cmp	r3, #0
 811017e:	d10a      	bne.n	8110196 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8110180:	4b68      	ldr	r3, [pc, #416]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8110182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8110184:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8110188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811018c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811018e:	4a65      	ldr	r2, [pc, #404]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8110190:	430b      	orrs	r3, r1
 8110192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8110194:	e003      	b.n	811019e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110196:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811019a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 811019e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81101a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81101a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81101aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81101ae:	2300      	movs	r3, #0
 81101b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81101b4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81101b8:	460b      	mov	r3, r1
 81101ba:	4313      	orrs	r3, r2
 81101bc:	d051      	beq.n	8110262 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81101be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81101c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81101c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81101c8:	d035      	beq.n	8110236 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81101ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81101ce:	d82e      	bhi.n	811022e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81101d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81101d4:	d031      	beq.n	811023a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81101d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81101da:	d828      	bhi.n	811022e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81101dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81101e0:	d01a      	beq.n	8110218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81101e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81101e6:	d822      	bhi.n	811022e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81101e8:	2b00      	cmp	r3, #0
 81101ea:	d003      	beq.n	81101f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81101ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81101f0:	d007      	beq.n	8110202 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81101f2:	e01c      	b.n	811022e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81101f4:	4b4b      	ldr	r3, [pc, #300]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81101f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81101f8:	4a4a      	ldr	r2, [pc, #296]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81101fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81101fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8110200:	e01c      	b.n	811023c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8110202:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110206:	3308      	adds	r3, #8
 8110208:	2100      	movs	r1, #0
 811020a:	4618      	mov	r0, r3
 811020c:	f001 faae 	bl	811176c <RCCEx_PLL2_Config>
 8110210:	4603      	mov	r3, r0
 8110212:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8110216:	e011      	b.n	811023c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8110218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811021c:	3328      	adds	r3, #40	@ 0x28
 811021e:	2100      	movs	r1, #0
 8110220:	4618      	mov	r0, r3
 8110222:	f001 fb55 	bl	81118d0 <RCCEx_PLL3_Config>
 8110226:	4603      	mov	r3, r0
 8110228:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 811022c:	e006      	b.n	811023c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 811022e:	2301      	movs	r3, #1
 8110230:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110234:	e002      	b.n	811023c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8110236:	bf00      	nop
 8110238:	e000      	b.n	811023c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 811023a:	bf00      	nop
    }

    if (ret == HAL_OK)
 811023c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110240:	2b00      	cmp	r3, #0
 8110242:	d10a      	bne.n	811025a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8110244:	4b37      	ldr	r3, [pc, #220]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8110246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110248:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 811024c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110252:	4a34      	ldr	r2, [pc, #208]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8110254:	430b      	orrs	r3, r1
 8110256:	6513      	str	r3, [r2, #80]	@ 0x50
 8110258:	e003      	b.n	8110262 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 811025a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811025e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8110262:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110266:	e9d3 2300 	ldrd	r2, r3, [r3]
 811026a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 811026e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8110272:	2300      	movs	r3, #0
 8110274:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8110278:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 811027c:	460b      	mov	r3, r1
 811027e:	4313      	orrs	r3, r2
 8110280:	d056      	beq.n	8110330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8110282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8110288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 811028c:	d033      	beq.n	81102f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 811028e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8110292:	d82c      	bhi.n	81102ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8110294:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8110298:	d02f      	beq.n	81102fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 811029a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 811029e:	d826      	bhi.n	81102ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 81102a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81102a4:	d02b      	beq.n	81102fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81102a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81102aa:	d820      	bhi.n	81102ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 81102ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81102b0:	d012      	beq.n	81102d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81102b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81102b6:	d81a      	bhi.n	81102ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 81102b8:	2b00      	cmp	r3, #0
 81102ba:	d022      	beq.n	8110302 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81102bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81102c0:	d115      	bne.n	81102ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81102c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81102c6:	3308      	adds	r3, #8
 81102c8:	2101      	movs	r1, #1
 81102ca:	4618      	mov	r0, r3
 81102cc:	f001 fa4e 	bl	811176c <RCCEx_PLL2_Config>
 81102d0:	4603      	mov	r3, r0
 81102d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81102d6:	e015      	b.n	8110304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81102d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81102dc:	3328      	adds	r3, #40	@ 0x28
 81102de:	2101      	movs	r1, #1
 81102e0:	4618      	mov	r0, r3
 81102e2:	f001 faf5 	bl	81118d0 <RCCEx_PLL3_Config>
 81102e6:	4603      	mov	r3, r0
 81102e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81102ec:	e00a      	b.n	8110304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81102ee:	2301      	movs	r3, #1
 81102f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81102f4:	e006      	b.n	8110304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81102f6:	bf00      	nop
 81102f8:	e004      	b.n	8110304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81102fa:	bf00      	nop
 81102fc:	e002      	b.n	8110304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81102fe:	bf00      	nop
 8110300:	e000      	b.n	8110304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8110302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110304:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110308:	2b00      	cmp	r3, #0
 811030a:	d10d      	bne.n	8110328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 811030c:	4b05      	ldr	r3, [pc, #20]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 811030e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110310:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8110314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 811031a:	4a02      	ldr	r2, [pc, #8]	@ (8110324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 811031c:	430b      	orrs	r3, r1
 811031e:	6513      	str	r3, [r2, #80]	@ 0x50
 8110320:	e006      	b.n	8110330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8110322:	bf00      	nop
 8110324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110328:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811032c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8110330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110338:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 811033c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8110340:	2300      	movs	r3, #0
 8110342:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8110346:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 811034a:	460b      	mov	r3, r1
 811034c:	4313      	orrs	r3, r2
 811034e:	d055      	beq.n	81103fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8110350:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8110358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 811035c:	d033      	beq.n	81103c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 811035e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8110362:	d82c      	bhi.n	81103be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8110364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8110368:	d02f      	beq.n	81103ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 811036a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811036e:	d826      	bhi.n	81103be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8110370:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8110374:	d02b      	beq.n	81103ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8110376:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 811037a:	d820      	bhi.n	81103be <HAL_RCCEx_PeriphCLKConfig+0x662>
 811037c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8110380:	d012      	beq.n	81103a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8110382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8110386:	d81a      	bhi.n	81103be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8110388:	2b00      	cmp	r3, #0
 811038a:	d022      	beq.n	81103d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 811038c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8110390:	d115      	bne.n	81103be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8110392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110396:	3308      	adds	r3, #8
 8110398:	2101      	movs	r1, #1
 811039a:	4618      	mov	r0, r3
 811039c:	f001 f9e6 	bl	811176c <RCCEx_PLL2_Config>
 81103a0:	4603      	mov	r3, r0
 81103a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81103a6:	e015      	b.n	81103d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81103a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81103ac:	3328      	adds	r3, #40	@ 0x28
 81103ae:	2101      	movs	r1, #1
 81103b0:	4618      	mov	r0, r3
 81103b2:	f001 fa8d 	bl	81118d0 <RCCEx_PLL3_Config>
 81103b6:	4603      	mov	r3, r0
 81103b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81103bc:	e00a      	b.n	81103d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81103be:	2301      	movs	r3, #1
 81103c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81103c4:	e006      	b.n	81103d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81103c6:	bf00      	nop
 81103c8:	e004      	b.n	81103d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81103ca:	bf00      	nop
 81103cc:	e002      	b.n	81103d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81103ce:	bf00      	nop
 81103d0:	e000      	b.n	81103d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81103d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81103d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81103d8:	2b00      	cmp	r3, #0
 81103da:	d10b      	bne.n	81103f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81103dc:	4bb7      	ldr	r3, [pc, #732]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81103de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81103e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81103e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81103e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81103ec:	4ab3      	ldr	r2, [pc, #716]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81103ee:	430b      	orrs	r3, r1
 81103f0:	6593      	str	r3, [r2, #88]	@ 0x58
 81103f2:	e003      	b.n	81103fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81103f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81103f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 81103fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110404:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8110408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 811040c:	2300      	movs	r3, #0
 811040e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8110412:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8110416:	460b      	mov	r3, r1
 8110418:	4313      	orrs	r3, r2
 811041a:	d02a      	beq.n	8110472 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 811041c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110422:	2b00      	cmp	r3, #0
 8110424:	d011      	beq.n	811044a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8110426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 811042a:	d10a      	bne.n	8110442 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 811042c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110430:	3308      	adds	r3, #8
 8110432:	2101      	movs	r1, #1
 8110434:	4618      	mov	r0, r3
 8110436:	f001 f999 	bl	811176c <RCCEx_PLL2_Config>
 811043a:	4603      	mov	r3, r0
 811043c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8110440:	e004      	b.n	811044c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110442:	2301      	movs	r3, #1
 8110444:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110448:	e000      	b.n	811044c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 811044a:	bf00      	nop
    }

    if (ret == HAL_OK)
 811044c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110450:	2b00      	cmp	r3, #0
 8110452:	d10a      	bne.n	811046a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8110454:	4b99      	ldr	r3, [pc, #612]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8110458:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 811045c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110462:	4a96      	ldr	r2, [pc, #600]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110464:	430b      	orrs	r3, r1
 8110466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8110468:	e003      	b.n	8110472 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 811046a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811046e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8110472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110476:	e9d3 2300 	ldrd	r2, r3, [r3]
 811047a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 811047e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8110482:	2300      	movs	r3, #0
 8110484:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8110488:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 811048c:	460b      	mov	r3, r1
 811048e:	4313      	orrs	r3, r2
 8110490:	d037      	beq.n	8110502 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8110492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8110498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 811049c:	d00e      	beq.n	81104bc <HAL_RCCEx_PeriphCLKConfig+0x760>
 811049e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81104a2:	d816      	bhi.n	81104d2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 81104a4:	2b00      	cmp	r3, #0
 81104a6:	d018      	beq.n	81104da <HAL_RCCEx_PeriphCLKConfig+0x77e>
 81104a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81104ac:	d111      	bne.n	81104d2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81104ae:	4b83      	ldr	r3, [pc, #524]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81104b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81104b2:	4a82      	ldr	r2, [pc, #520]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81104b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81104b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81104ba:	e00f      	b.n	81104dc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81104bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81104c0:	3308      	adds	r3, #8
 81104c2:	2101      	movs	r1, #1
 81104c4:	4618      	mov	r0, r3
 81104c6:	f001 f951 	bl	811176c <RCCEx_PLL2_Config>
 81104ca:	4603      	mov	r3, r0
 81104cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81104d0:	e004      	b.n	81104dc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81104d2:	2301      	movs	r3, #1
 81104d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81104d8:	e000      	b.n	81104dc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 81104da:	bf00      	nop
    }

    if (ret == HAL_OK)
 81104dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81104e0:	2b00      	cmp	r3, #0
 81104e2:	d10a      	bne.n	81104fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81104e4:	4b75      	ldr	r3, [pc, #468]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81104e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81104e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81104ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81104f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81104f2:	4a72      	ldr	r2, [pc, #456]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81104f4:	430b      	orrs	r3, r1
 81104f6:	6513      	str	r3, [r2, #80]	@ 0x50
 81104f8:	e003      	b.n	8110502 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81104fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81104fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8110502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110506:	e9d3 2300 	ldrd	r2, r3, [r3]
 811050a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 811050e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8110512:	2300      	movs	r3, #0
 8110514:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8110518:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 811051c:	460b      	mov	r3, r1
 811051e:	4313      	orrs	r3, r2
 8110520:	d03a      	beq.n	8110598 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8110522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8110528:	2b03      	cmp	r3, #3
 811052a:	d81d      	bhi.n	8110568 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 811052c:	a201      	add	r2, pc, #4	@ (adr r2, 8110534 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 811052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110532:	bf00      	nop
 8110534:	08110571 	.word	0x08110571
 8110538:	08110545 	.word	0x08110545
 811053c:	08110553 	.word	0x08110553
 8110540:	08110571 	.word	0x08110571
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8110544:	4b5d      	ldr	r3, [pc, #372]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110548:	4a5c      	ldr	r2, [pc, #368]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 811054a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 811054e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8110550:	e00f      	b.n	8110572 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8110552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110556:	3308      	adds	r3, #8
 8110558:	2102      	movs	r1, #2
 811055a:	4618      	mov	r0, r3
 811055c:	f001 f906 	bl	811176c <RCCEx_PLL2_Config>
 8110560:	4603      	mov	r3, r0
 8110562:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8110566:	e004      	b.n	8110572 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8110568:	2301      	movs	r3, #1
 811056a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 811056e:	e000      	b.n	8110572 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8110570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110572:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110576:	2b00      	cmp	r3, #0
 8110578:	d10a      	bne.n	8110590 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 811057a:	4b50      	ldr	r3, [pc, #320]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 811057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811057e:	f023 0103 	bic.w	r1, r3, #3
 8110582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8110588:	4a4c      	ldr	r2, [pc, #304]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 811058a:	430b      	orrs	r3, r1
 811058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 811058e:	e003      	b.n	8110598 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110590:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110594:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8110598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81105a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81105a8:	2300      	movs	r3, #0
 81105aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81105ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81105b2:	460b      	mov	r3, r1
 81105b4:	4313      	orrs	r3, r2
 81105b6:	f000 80a0 	beq.w	81106fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81105ba:	4b41      	ldr	r3, [pc, #260]	@ (81106c0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81105bc:	681b      	ldr	r3, [r3, #0]
 81105be:	4a40      	ldr	r2, [pc, #256]	@ (81106c0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81105c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81105c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81105c6:	f7fc fa81 	bl	810cacc <HAL_GetTick>
 81105ca:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81105ce:	e00b      	b.n	81105e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81105d0:	f7fc fa7c 	bl	810cacc <HAL_GetTick>
 81105d4:	4602      	mov	r2, r0
 81105d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81105da:	1ad3      	subs	r3, r2, r3
 81105dc:	2b64      	cmp	r3, #100	@ 0x64
 81105de:	d903      	bls.n	81105e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 81105e0:	2303      	movs	r3, #3
 81105e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81105e6:	e005      	b.n	81105f4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81105e8:	4b35      	ldr	r3, [pc, #212]	@ (81106c0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81105ea:	681b      	ldr	r3, [r3, #0]
 81105ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81105f0:	2b00      	cmp	r3, #0
 81105f2:	d0ed      	beq.n	81105d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 81105f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81105f8:	2b00      	cmp	r3, #0
 81105fa:	d17a      	bne.n	81106f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81105fc:	4b2f      	ldr	r3, [pc, #188]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81105fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8110600:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110604:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8110608:	4053      	eors	r3, r2
 811060a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 811060e:	2b00      	cmp	r3, #0
 8110610:	d015      	beq.n	811063e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8110612:	4b2a      	ldr	r3, [pc, #168]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 811061a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 811061e:	4b27      	ldr	r3, [pc, #156]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110622:	4a26      	ldr	r2, [pc, #152]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8110628:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 811062a:	4b24      	ldr	r3, [pc, #144]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 811062c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811062e:	4a23      	ldr	r2, [pc, #140]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8110634:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8110636:	4a21      	ldr	r2, [pc, #132]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110638:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 811063c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 811063e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110642:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8110646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 811064a:	d118      	bne.n	811067e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 811064c:	f7fc fa3e 	bl	810cacc <HAL_GetTick>
 8110650:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8110654:	e00d      	b.n	8110672 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8110656:	f7fc fa39 	bl	810cacc <HAL_GetTick>
 811065a:	4602      	mov	r2, r0
 811065c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8110660:	1ad2      	subs	r2, r2, r3
 8110662:	f241 3388 	movw	r3, #5000	@ 0x1388
 8110666:	429a      	cmp	r2, r3
 8110668:	d903      	bls.n	8110672 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 811066a:	2303      	movs	r3, #3
 811066c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8110670:	e005      	b.n	811067e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8110672:	4b12      	ldr	r3, [pc, #72]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8110674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110676:	f003 0302 	and.w	r3, r3, #2
 811067a:	2b00      	cmp	r3, #0
 811067c:	d0eb      	beq.n	8110656 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 811067e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110682:	2b00      	cmp	r3, #0
 8110684:	d130      	bne.n	81106e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8110686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811068a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 811068e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8110692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8110696:	d115      	bne.n	81106c4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8110698:	4b08      	ldr	r3, [pc, #32]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 811069a:	691b      	ldr	r3, [r3, #16]
 811069c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81106a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81106a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81106a8:	091b      	lsrs	r3, r3, #4
 81106aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81106ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81106b2:	4a02      	ldr	r2, [pc, #8]	@ (81106bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81106b4:	430b      	orrs	r3, r1
 81106b6:	6113      	str	r3, [r2, #16]
 81106b8:	e00a      	b.n	81106d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 81106ba:	bf00      	nop
 81106bc:	58024400 	.word	0x58024400
 81106c0:	58024800 	.word	0x58024800
 81106c4:	4bd4      	ldr	r3, [pc, #848]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81106c6:	691b      	ldr	r3, [r3, #16]
 81106c8:	4ad3      	ldr	r2, [pc, #844]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81106ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81106ce:	6113      	str	r3, [r2, #16]
 81106d0:	4bd1      	ldr	r3, [pc, #836]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81106d2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81106d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81106d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81106dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81106e0:	4acd      	ldr	r2, [pc, #820]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81106e2:	430b      	orrs	r3, r1
 81106e4:	6713      	str	r3, [r2, #112]	@ 0x70
 81106e6:	e008      	b.n	81106fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81106e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81106ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 81106f0:	e003      	b.n	81106fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81106f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81106f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81106fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81106fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110702:	f002 0301 	and.w	r3, r2, #1
 8110706:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 811070a:	2300      	movs	r3, #0
 811070c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8110710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8110714:	460b      	mov	r3, r1
 8110716:	4313      	orrs	r3, r2
 8110718:	f000 808b 	beq.w	8110832 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 811071c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8110724:	2b28      	cmp	r3, #40	@ 0x28
 8110726:	d86b      	bhi.n	8110800 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8110728:	a201      	add	r2, pc, #4	@ (adr r2, 8110730 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 811072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811072e:	bf00      	nop
 8110730:	08110809 	.word	0x08110809
 8110734:	08110801 	.word	0x08110801
 8110738:	08110801 	.word	0x08110801
 811073c:	08110801 	.word	0x08110801
 8110740:	08110801 	.word	0x08110801
 8110744:	08110801 	.word	0x08110801
 8110748:	08110801 	.word	0x08110801
 811074c:	08110801 	.word	0x08110801
 8110750:	081107d5 	.word	0x081107d5
 8110754:	08110801 	.word	0x08110801
 8110758:	08110801 	.word	0x08110801
 811075c:	08110801 	.word	0x08110801
 8110760:	08110801 	.word	0x08110801
 8110764:	08110801 	.word	0x08110801
 8110768:	08110801 	.word	0x08110801
 811076c:	08110801 	.word	0x08110801
 8110770:	081107eb 	.word	0x081107eb
 8110774:	08110801 	.word	0x08110801
 8110778:	08110801 	.word	0x08110801
 811077c:	08110801 	.word	0x08110801
 8110780:	08110801 	.word	0x08110801
 8110784:	08110801 	.word	0x08110801
 8110788:	08110801 	.word	0x08110801
 811078c:	08110801 	.word	0x08110801
 8110790:	08110809 	.word	0x08110809
 8110794:	08110801 	.word	0x08110801
 8110798:	08110801 	.word	0x08110801
 811079c:	08110801 	.word	0x08110801
 81107a0:	08110801 	.word	0x08110801
 81107a4:	08110801 	.word	0x08110801
 81107a8:	08110801 	.word	0x08110801
 81107ac:	08110801 	.word	0x08110801
 81107b0:	08110809 	.word	0x08110809
 81107b4:	08110801 	.word	0x08110801
 81107b8:	08110801 	.word	0x08110801
 81107bc:	08110801 	.word	0x08110801
 81107c0:	08110801 	.word	0x08110801
 81107c4:	08110801 	.word	0x08110801
 81107c8:	08110801 	.word	0x08110801
 81107cc:	08110801 	.word	0x08110801
 81107d0:	08110809 	.word	0x08110809
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81107d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81107d8:	3308      	adds	r3, #8
 81107da:	2101      	movs	r1, #1
 81107dc:	4618      	mov	r0, r3
 81107de:	f000 ffc5 	bl	811176c <RCCEx_PLL2_Config>
 81107e2:	4603      	mov	r3, r0
 81107e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81107e8:	e00f      	b.n	811080a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81107ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81107ee:	3328      	adds	r3, #40	@ 0x28
 81107f0:	2101      	movs	r1, #1
 81107f2:	4618      	mov	r0, r3
 81107f4:	f001 f86c 	bl	81118d0 <RCCEx_PLL3_Config>
 81107f8:	4603      	mov	r3, r0
 81107fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81107fe:	e004      	b.n	811080a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110800:	2301      	movs	r3, #1
 8110802:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110806:	e000      	b.n	811080a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8110808:	bf00      	nop
    }

    if (ret == HAL_OK)
 811080a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811080e:	2b00      	cmp	r3, #0
 8110810:	d10b      	bne.n	811082a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8110812:	4b81      	ldr	r3, [pc, #516]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8110814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110816:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 811081a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811081e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8110822:	4a7d      	ldr	r2, [pc, #500]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8110824:	430b      	orrs	r3, r1
 8110826:	6553      	str	r3, [r2, #84]	@ 0x54
 8110828:	e003      	b.n	8110832 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 811082a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811082e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8110832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110836:	e9d3 2300 	ldrd	r2, r3, [r3]
 811083a:	f002 0302 	and.w	r3, r2, #2
 811083e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8110842:	2300      	movs	r3, #0
 8110844:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8110848:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 811084c:	460b      	mov	r3, r1
 811084e:	4313      	orrs	r3, r2
 8110850:	d042      	beq.n	81108d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8110852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110856:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8110858:	2b05      	cmp	r3, #5
 811085a:	d825      	bhi.n	81108a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 811085c:	a201      	add	r2, pc, #4	@ (adr r2, 8110864 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 811085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110862:	bf00      	nop
 8110864:	081108b1 	.word	0x081108b1
 8110868:	0811087d 	.word	0x0811087d
 811086c:	08110893 	.word	0x08110893
 8110870:	081108b1 	.word	0x081108b1
 8110874:	081108b1 	.word	0x081108b1
 8110878:	081108b1 	.word	0x081108b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 811087c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110880:	3308      	adds	r3, #8
 8110882:	2101      	movs	r1, #1
 8110884:	4618      	mov	r0, r3
 8110886:	f000 ff71 	bl	811176c <RCCEx_PLL2_Config>
 811088a:	4603      	mov	r3, r0
 811088c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8110890:	e00f      	b.n	81108b2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8110892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110896:	3328      	adds	r3, #40	@ 0x28
 8110898:	2101      	movs	r1, #1
 811089a:	4618      	mov	r0, r3
 811089c:	f001 f818 	bl	81118d0 <RCCEx_PLL3_Config>
 81108a0:	4603      	mov	r3, r0
 81108a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81108a6:	e004      	b.n	81108b2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81108a8:	2301      	movs	r3, #1
 81108aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81108ae:	e000      	b.n	81108b2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 81108b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81108b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81108b6:	2b00      	cmp	r3, #0
 81108b8:	d10a      	bne.n	81108d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81108ba:	4b57      	ldr	r3, [pc, #348]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81108bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81108be:	f023 0107 	bic.w	r1, r3, #7
 81108c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81108c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81108c8:	4a53      	ldr	r2, [pc, #332]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81108ca:	430b      	orrs	r3, r1
 81108cc:	6553      	str	r3, [r2, #84]	@ 0x54
 81108ce:	e003      	b.n	81108d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81108d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81108d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81108d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81108dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81108e0:	f002 0304 	and.w	r3, r2, #4
 81108e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81108e8:	2300      	movs	r3, #0
 81108ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81108ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81108f2:	460b      	mov	r3, r1
 81108f4:	4313      	orrs	r3, r2
 81108f6:	d044      	beq.n	8110982 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81108f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81108fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8110900:	2b05      	cmp	r3, #5
 8110902:	d825      	bhi.n	8110950 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8110904:	a201      	add	r2, pc, #4	@ (adr r2, 811090c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8110906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811090a:	bf00      	nop
 811090c:	08110959 	.word	0x08110959
 8110910:	08110925 	.word	0x08110925
 8110914:	0811093b 	.word	0x0811093b
 8110918:	08110959 	.word	0x08110959
 811091c:	08110959 	.word	0x08110959
 8110920:	08110959 	.word	0x08110959
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8110924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110928:	3308      	adds	r3, #8
 811092a:	2101      	movs	r1, #1
 811092c:	4618      	mov	r0, r3
 811092e:	f000 ff1d 	bl	811176c <RCCEx_PLL2_Config>
 8110932:	4603      	mov	r3, r0
 8110934:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8110938:	e00f      	b.n	811095a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 811093a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811093e:	3328      	adds	r3, #40	@ 0x28
 8110940:	2101      	movs	r1, #1
 8110942:	4618      	mov	r0, r3
 8110944:	f000 ffc4 	bl	81118d0 <RCCEx_PLL3_Config>
 8110948:	4603      	mov	r3, r0
 811094a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 811094e:	e004      	b.n	811095a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110950:	2301      	movs	r3, #1
 8110952:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110956:	e000      	b.n	811095a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8110958:	bf00      	nop
    }

    if (ret == HAL_OK)
 811095a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811095e:	2b00      	cmp	r3, #0
 8110960:	d10b      	bne.n	811097a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8110962:	4b2d      	ldr	r3, [pc, #180]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8110964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110966:	f023 0107 	bic.w	r1, r3, #7
 811096a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 811096e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8110972:	4a29      	ldr	r2, [pc, #164]	@ (8110a18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8110974:	430b      	orrs	r3, r1
 8110976:	6593      	str	r3, [r2, #88]	@ 0x58
 8110978:	e003      	b.n	8110982 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 811097a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811097e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8110982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110986:	e9d3 2300 	ldrd	r2, r3, [r3]
 811098a:	f002 0320 	and.w	r3, r2, #32
 811098e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8110992:	2300      	movs	r3, #0
 8110994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8110998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 811099c:	460b      	mov	r3, r1
 811099e:	4313      	orrs	r3, r2
 81109a0:	d057      	beq.n	8110a52 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81109a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81109a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81109aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81109ae:	d035      	beq.n	8110a1c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 81109b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81109b4:	d82c      	bhi.n	8110a10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81109b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81109ba:	d031      	beq.n	8110a20 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 81109bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81109c0:	d826      	bhi.n	8110a10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81109c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81109c6:	d02d      	beq.n	8110a24 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 81109c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81109cc:	d820      	bhi.n	8110a10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81109ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81109d2:	d012      	beq.n	81109fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 81109d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81109d8:	d81a      	bhi.n	8110a10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81109da:	2b00      	cmp	r3, #0
 81109dc:	d024      	beq.n	8110a28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 81109de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81109e2:	d115      	bne.n	8110a10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81109e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81109e8:	3308      	adds	r3, #8
 81109ea:	2100      	movs	r1, #0
 81109ec:	4618      	mov	r0, r3
 81109ee:	f000 febd 	bl	811176c <RCCEx_PLL2_Config>
 81109f2:	4603      	mov	r3, r0
 81109f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81109f8:	e017      	b.n	8110a2a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81109fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81109fe:	3328      	adds	r3, #40	@ 0x28
 8110a00:	2102      	movs	r1, #2
 8110a02:	4618      	mov	r0, r3
 8110a04:	f000 ff64 	bl	81118d0 <RCCEx_PLL3_Config>
 8110a08:	4603      	mov	r3, r0
 8110a0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8110a0e:	e00c      	b.n	8110a2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110a10:	2301      	movs	r3, #1
 8110a12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110a16:	e008      	b.n	8110a2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8110a18:	58024400 	.word	0x58024400
        break;
 8110a1c:	bf00      	nop
 8110a1e:	e004      	b.n	8110a2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8110a20:	bf00      	nop
 8110a22:	e002      	b.n	8110a2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8110a24:	bf00      	nop
 8110a26:	e000      	b.n	8110a2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8110a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110a2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110a2e:	2b00      	cmp	r3, #0
 8110a30:	d10b      	bne.n	8110a4a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8110a32:	4bc2      	ldr	r3, [pc, #776]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110a36:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8110a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8110a42:	4abe      	ldr	r2, [pc, #760]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110a44:	430b      	orrs	r3, r1
 8110a46:	6553      	str	r3, [r2, #84]	@ 0x54
 8110a48:	e003      	b.n	8110a52 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110a4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110a4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8110a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110a5a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8110a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8110a62:	2300      	movs	r3, #0
 8110a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8110a68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8110a6c:	460b      	mov	r3, r1
 8110a6e:	4313      	orrs	r3, r2
 8110a70:	d055      	beq.n	8110b1e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8110a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110a76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8110a7a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8110a7e:	d033      	beq.n	8110ae8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8110a80:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8110a84:	d82c      	bhi.n	8110ae0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8110a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8110a8a:	d02f      	beq.n	8110aec <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8110a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8110a90:	d826      	bhi.n	8110ae0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8110a92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8110a96:	d02b      	beq.n	8110af0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8110a98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8110a9c:	d820      	bhi.n	8110ae0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8110a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8110aa2:	d012      	beq.n	8110aca <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8110aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8110aa8:	d81a      	bhi.n	8110ae0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8110aaa:	2b00      	cmp	r3, #0
 8110aac:	d022      	beq.n	8110af4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8110aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8110ab2:	d115      	bne.n	8110ae0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8110ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110ab8:	3308      	adds	r3, #8
 8110aba:	2100      	movs	r1, #0
 8110abc:	4618      	mov	r0, r3
 8110abe:	f000 fe55 	bl	811176c <RCCEx_PLL2_Config>
 8110ac2:	4603      	mov	r3, r0
 8110ac4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8110ac8:	e015      	b.n	8110af6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8110aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110ace:	3328      	adds	r3, #40	@ 0x28
 8110ad0:	2102      	movs	r1, #2
 8110ad2:	4618      	mov	r0, r3
 8110ad4:	f000 fefc 	bl	81118d0 <RCCEx_PLL3_Config>
 8110ad8:	4603      	mov	r3, r0
 8110ada:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8110ade:	e00a      	b.n	8110af6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110ae0:	2301      	movs	r3, #1
 8110ae2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110ae6:	e006      	b.n	8110af6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8110ae8:	bf00      	nop
 8110aea:	e004      	b.n	8110af6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8110aec:	bf00      	nop
 8110aee:	e002      	b.n	8110af6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8110af0:	bf00      	nop
 8110af2:	e000      	b.n	8110af6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8110af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110af6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110afa:	2b00      	cmp	r3, #0
 8110afc:	d10b      	bne.n	8110b16 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8110afe:	4b8f      	ldr	r3, [pc, #572]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110b02:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8110b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110b0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8110b0e:	4a8b      	ldr	r2, [pc, #556]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110b10:	430b      	orrs	r3, r1
 8110b12:	6593      	str	r3, [r2, #88]	@ 0x58
 8110b14:	e003      	b.n	8110b1e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110b16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110b1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8110b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110b26:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8110b2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8110b2e:	2300      	movs	r3, #0
 8110b30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8110b34:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8110b38:	460b      	mov	r3, r1
 8110b3a:	4313      	orrs	r3, r2
 8110b3c:	d055      	beq.n	8110bea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8110b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110b42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8110b46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8110b4a:	d033      	beq.n	8110bb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8110b4c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8110b50:	d82c      	bhi.n	8110bac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8110b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8110b56:	d02f      	beq.n	8110bb8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8110b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8110b5c:	d826      	bhi.n	8110bac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8110b5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8110b62:	d02b      	beq.n	8110bbc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8110b64:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8110b68:	d820      	bhi.n	8110bac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8110b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8110b6e:	d012      	beq.n	8110b96 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8110b70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8110b74:	d81a      	bhi.n	8110bac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8110b76:	2b00      	cmp	r3, #0
 8110b78:	d022      	beq.n	8110bc0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8110b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8110b7e:	d115      	bne.n	8110bac <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8110b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110b84:	3308      	adds	r3, #8
 8110b86:	2100      	movs	r1, #0
 8110b88:	4618      	mov	r0, r3
 8110b8a:	f000 fdef 	bl	811176c <RCCEx_PLL2_Config>
 8110b8e:	4603      	mov	r3, r0
 8110b90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8110b94:	e015      	b.n	8110bc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8110b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110b9a:	3328      	adds	r3, #40	@ 0x28
 8110b9c:	2102      	movs	r1, #2
 8110b9e:	4618      	mov	r0, r3
 8110ba0:	f000 fe96 	bl	81118d0 <RCCEx_PLL3_Config>
 8110ba4:	4603      	mov	r3, r0
 8110ba6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8110baa:	e00a      	b.n	8110bc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110bac:	2301      	movs	r3, #1
 8110bae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110bb2:	e006      	b.n	8110bc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8110bb4:	bf00      	nop
 8110bb6:	e004      	b.n	8110bc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8110bb8:	bf00      	nop
 8110bba:	e002      	b.n	8110bc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8110bbc:	bf00      	nop
 8110bbe:	e000      	b.n	8110bc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8110bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110bc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110bc6:	2b00      	cmp	r3, #0
 8110bc8:	d10b      	bne.n	8110be2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8110bca:	4b5c      	ldr	r3, [pc, #368]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110bce:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8110bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110bd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8110bda:	4a58      	ldr	r2, [pc, #352]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110bdc:	430b      	orrs	r3, r1
 8110bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8110be0:	e003      	b.n	8110bea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110be2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110be6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8110bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110bf2:	f002 0308 	and.w	r3, r2, #8
 8110bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8110bfa:	2300      	movs	r3, #0
 8110bfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8110c00:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8110c04:	460b      	mov	r3, r1
 8110c06:	4313      	orrs	r3, r2
 8110c08:	d01e      	beq.n	8110c48 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8110c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8110c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8110c16:	d10c      	bne.n	8110c32 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8110c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110c1c:	3328      	adds	r3, #40	@ 0x28
 8110c1e:	2102      	movs	r1, #2
 8110c20:	4618      	mov	r0, r3
 8110c22:	f000 fe55 	bl	81118d0 <RCCEx_PLL3_Config>
 8110c26:	4603      	mov	r3, r0
 8110c28:	2b00      	cmp	r3, #0
 8110c2a:	d002      	beq.n	8110c32 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8110c2c:	2301      	movs	r3, #1
 8110c2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8110c32:	4b42      	ldr	r3, [pc, #264]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110c36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8110c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8110c42:	4a3e      	ldr	r2, [pc, #248]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110c44:	430b      	orrs	r3, r1
 8110c46:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8110c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c50:	f002 0310 	and.w	r3, r2, #16
 8110c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8110c58:	2300      	movs	r3, #0
 8110c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8110c5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8110c62:	460b      	mov	r3, r1
 8110c64:	4313      	orrs	r3, r2
 8110c66:	d01e      	beq.n	8110ca6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8110c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8110c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8110c74:	d10c      	bne.n	8110c90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8110c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110c7a:	3328      	adds	r3, #40	@ 0x28
 8110c7c:	2102      	movs	r1, #2
 8110c7e:	4618      	mov	r0, r3
 8110c80:	f000 fe26 	bl	81118d0 <RCCEx_PLL3_Config>
 8110c84:	4603      	mov	r3, r0
 8110c86:	2b00      	cmp	r3, #0
 8110c88:	d002      	beq.n	8110c90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8110c8a:	2301      	movs	r3, #1
 8110c8c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8110c90:	4b2a      	ldr	r3, [pc, #168]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110c94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8110c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8110ca0:	4a26      	ldr	r2, [pc, #152]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110ca2:	430b      	orrs	r3, r1
 8110ca4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8110ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110cae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8110cb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8110cb6:	2300      	movs	r3, #0
 8110cb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8110cbc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8110cc0:	460b      	mov	r3, r1
 8110cc2:	4313      	orrs	r3, r2
 8110cc4:	d040      	beq.n	8110d48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8110cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110cca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8110cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8110cd2:	d022      	beq.n	8110d1a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8110cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8110cd8:	d81b      	bhi.n	8110d12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8110cda:	2b00      	cmp	r3, #0
 8110cdc:	d003      	beq.n	8110ce6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8110cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8110ce2:	d00b      	beq.n	8110cfc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8110ce4:	e015      	b.n	8110d12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8110ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110cea:	3308      	adds	r3, #8
 8110cec:	2100      	movs	r1, #0
 8110cee:	4618      	mov	r0, r3
 8110cf0:	f000 fd3c 	bl	811176c <RCCEx_PLL2_Config>
 8110cf4:	4603      	mov	r3, r0
 8110cf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8110cfa:	e00f      	b.n	8110d1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8110cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110d00:	3328      	adds	r3, #40	@ 0x28
 8110d02:	2102      	movs	r1, #2
 8110d04:	4618      	mov	r0, r3
 8110d06:	f000 fde3 	bl	81118d0 <RCCEx_PLL3_Config>
 8110d0a:	4603      	mov	r3, r0
 8110d0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8110d10:	e004      	b.n	8110d1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110d12:	2301      	movs	r3, #1
 8110d14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110d18:	e000      	b.n	8110d1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8110d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110d1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110d20:	2b00      	cmp	r3, #0
 8110d22:	d10d      	bne.n	8110d40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8110d24:	4b05      	ldr	r3, [pc, #20]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110d28:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8110d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110d30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8110d34:	4a01      	ldr	r2, [pc, #4]	@ (8110d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8110d36:	430b      	orrs	r3, r1
 8110d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8110d3a:	e005      	b.n	8110d48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8110d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110d40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110d44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8110d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110d50:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8110d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8110d56:	2300      	movs	r3, #0
 8110d58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8110d5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8110d5e:	460b      	mov	r3, r1
 8110d60:	4313      	orrs	r3, r2
 8110d62:	d03b      	beq.n	8110ddc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8110d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110d6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8110d70:	d01f      	beq.n	8110db2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8110d72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8110d76:	d818      	bhi.n	8110daa <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8110d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8110d7c:	d003      	beq.n	8110d86 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8110d7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8110d82:	d007      	beq.n	8110d94 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8110d84:	e011      	b.n	8110daa <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8110d86:	4b64      	ldr	r3, [pc, #400]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110d8a:	4a63      	ldr	r2, [pc, #396]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8110d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8110d92:	e00f      	b.n	8110db4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8110d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110d98:	3328      	adds	r3, #40	@ 0x28
 8110d9a:	2101      	movs	r1, #1
 8110d9c:	4618      	mov	r0, r3
 8110d9e:	f000 fd97 	bl	81118d0 <RCCEx_PLL3_Config>
 8110da2:	4603      	mov	r3, r0
 8110da4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8110da8:	e004      	b.n	8110db4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110daa:	2301      	movs	r3, #1
 8110dac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110db0:	e000      	b.n	8110db4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8110db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110db4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110db8:	2b00      	cmp	r3, #0
 8110dba:	d10b      	bne.n	8110dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8110dbc:	4b56      	ldr	r3, [pc, #344]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110dc0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8110dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110dcc:	4a52      	ldr	r2, [pc, #328]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110dce:	430b      	orrs	r3, r1
 8110dd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8110dd2:	e003      	b.n	8110ddc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110dd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110dd8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8110ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110de4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8110de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8110dea:	2300      	movs	r3, #0
 8110dec:	677b      	str	r3, [r7, #116]	@ 0x74
 8110dee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8110df2:	460b      	mov	r3, r1
 8110df4:	4313      	orrs	r3, r2
 8110df6:	d031      	beq.n	8110e5c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8110df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110dfe:	2b00      	cmp	r3, #0
 8110e00:	d003      	beq.n	8110e0a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8110e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8110e06:	d007      	beq.n	8110e18 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8110e08:	e011      	b.n	8110e2e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8110e0a:	4b43      	ldr	r3, [pc, #268]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110e0e:	4a42      	ldr	r2, [pc, #264]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8110e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8110e16:	e00e      	b.n	8110e36 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8110e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110e1c:	3308      	adds	r3, #8
 8110e1e:	2102      	movs	r1, #2
 8110e20:	4618      	mov	r0, r3
 8110e22:	f000 fca3 	bl	811176c <RCCEx_PLL2_Config>
 8110e26:	4603      	mov	r3, r0
 8110e28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8110e2c:	e003      	b.n	8110e36 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8110e2e:	2301      	movs	r3, #1
 8110e30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110e36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110e3a:	2b00      	cmp	r3, #0
 8110e3c:	d10a      	bne.n	8110e54 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8110e3e:	4b36      	ldr	r3, [pc, #216]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8110e42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8110e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110e4c:	4a32      	ldr	r2, [pc, #200]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110e4e:	430b      	orrs	r3, r1
 8110e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8110e52:	e003      	b.n	8110e5c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110e54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110e58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8110e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8110e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8110e6a:	2300      	movs	r3, #0
 8110e6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8110e6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8110e72:	460b      	mov	r3, r1
 8110e74:	4313      	orrs	r3, r2
 8110e76:	d00c      	beq.n	8110e92 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8110e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110e7c:	3328      	adds	r3, #40	@ 0x28
 8110e7e:	2102      	movs	r1, #2
 8110e80:	4618      	mov	r0, r3
 8110e82:	f000 fd25 	bl	81118d0 <RCCEx_PLL3_Config>
 8110e86:	4603      	mov	r3, r0
 8110e88:	2b00      	cmp	r3, #0
 8110e8a:	d002      	beq.n	8110e92 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8110e8c:	2301      	movs	r3, #1
 8110e8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8110e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8110e9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8110ea0:	2300      	movs	r3, #0
 8110ea2:	667b      	str	r3, [r7, #100]	@ 0x64
 8110ea4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8110ea8:	460b      	mov	r3, r1
 8110eaa:	4313      	orrs	r3, r2
 8110eac:	d03a      	beq.n	8110f24 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8110eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8110eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8110eba:	d018      	beq.n	8110eee <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8110ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8110ec0:	d811      	bhi.n	8110ee6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8110ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8110ec6:	d014      	beq.n	8110ef2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8110ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8110ecc:	d80b      	bhi.n	8110ee6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8110ece:	2b00      	cmp	r3, #0
 8110ed0:	d011      	beq.n	8110ef6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8110ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8110ed6:	d106      	bne.n	8110ee6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8110ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110edc:	4a0e      	ldr	r2, [pc, #56]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8110ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8110ee4:	e008      	b.n	8110ef8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8110ee6:	2301      	movs	r3, #1
 8110ee8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8110eec:	e004      	b.n	8110ef8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8110eee:	bf00      	nop
 8110ef0:	e002      	b.n	8110ef8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8110ef2:	bf00      	nop
 8110ef4:	e000      	b.n	8110ef8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8110ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8110ef8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110efc:	2b00      	cmp	r3, #0
 8110efe:	d10d      	bne.n	8110f1c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8110f00:	4b05      	ldr	r3, [pc, #20]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110f04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8110f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8110f10:	4a01      	ldr	r2, [pc, #4]	@ (8110f18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8110f12:	430b      	orrs	r3, r1
 8110f14:	6553      	str	r3, [r2, #84]	@ 0x54
 8110f16:	e005      	b.n	8110f24 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8110f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8110f1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8110f20:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8110f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110f2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8110f30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8110f32:	2300      	movs	r3, #0
 8110f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8110f36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8110f3a:	460b      	mov	r3, r1
 8110f3c:	4313      	orrs	r3, r2
 8110f3e:	d009      	beq.n	8110f54 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8110f40:	4baa      	ldr	r3, [pc, #680]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110f44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8110f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110f4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110f4e:	4aa7      	ldr	r2, [pc, #668]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110f50:	430b      	orrs	r3, r1
 8110f52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8110f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110f5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8110f60:	653b      	str	r3, [r7, #80]	@ 0x50
 8110f62:	2300      	movs	r3, #0
 8110f64:	657b      	str	r3, [r7, #84]	@ 0x54
 8110f66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8110f6a:	460b      	mov	r3, r1
 8110f6c:	4313      	orrs	r3, r2
 8110f6e:	d00a      	beq.n	8110f86 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8110f70:	4b9e      	ldr	r3, [pc, #632]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110f72:	691b      	ldr	r3, [r3, #16]
 8110f74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8110f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110f7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8110f80:	4a9a      	ldr	r2, [pc, #616]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110f82:	430b      	orrs	r3, r1
 8110f84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8110f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110f8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8110f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8110f94:	2300      	movs	r3, #0
 8110f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8110f98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8110f9c:	460b      	mov	r3, r1
 8110f9e:	4313      	orrs	r3, r2
 8110fa0:	d009      	beq.n	8110fb6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8110fa2:	4b92      	ldr	r3, [pc, #584]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110fa6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8110faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110fb0:	4a8e      	ldr	r2, [pc, #568]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110fb2:	430b      	orrs	r3, r1
 8110fb4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8110fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110fbe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8110fc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8110fc4:	2300      	movs	r3, #0
 8110fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8110fc8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8110fcc:	460b      	mov	r3, r1
 8110fce:	4313      	orrs	r3, r2
 8110fd0:	d00e      	beq.n	8110ff0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8110fd2:	4b86      	ldr	r3, [pc, #536]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110fd4:	691b      	ldr	r3, [r3, #16]
 8110fd6:	4a85      	ldr	r2, [pc, #532]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110fd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8110fdc:	6113      	str	r3, [r2, #16]
 8110fde:	4b83      	ldr	r3, [pc, #524]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110fe0:	6919      	ldr	r1, [r3, #16]
 8110fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110fe6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8110fea:	4a80      	ldr	r2, [pc, #512]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8110fec:	430b      	orrs	r3, r1
 8110fee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8110ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8110ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110ff8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8110ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8110ffe:	2300      	movs	r3, #0
 8111000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8111002:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8111006:	460b      	mov	r3, r1
 8111008:	4313      	orrs	r3, r2
 811100a:	d009      	beq.n	8111020 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 811100c:	4b77      	ldr	r3, [pc, #476]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811100e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8111010:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8111014:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811101a:	4a74      	ldr	r2, [pc, #464]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811101c:	430b      	orrs	r3, r1
 811101e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8111020:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111028:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 811102c:	633b      	str	r3, [r7, #48]	@ 0x30
 811102e:	2300      	movs	r3, #0
 8111030:	637b      	str	r3, [r7, #52]	@ 0x34
 8111032:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8111036:	460b      	mov	r3, r1
 8111038:	4313      	orrs	r3, r2
 811103a:	d00a      	beq.n	8111052 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 811103c:	4b6b      	ldr	r3, [pc, #428]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811103e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8111040:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8111044:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811104c:	4a67      	ldr	r2, [pc, #412]	@ (81111ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 811104e:	430b      	orrs	r3, r1
 8111050:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8111052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111056:	e9d3 2300 	ldrd	r2, r3, [r3]
 811105a:	2100      	movs	r1, #0
 811105c:	62b9      	str	r1, [r7, #40]	@ 0x28
 811105e:	f003 0301 	and.w	r3, r3, #1
 8111062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8111064:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8111068:	460b      	mov	r3, r1
 811106a:	4313      	orrs	r3, r2
 811106c:	d011      	beq.n	8111092 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 811106e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111072:	3308      	adds	r3, #8
 8111074:	2100      	movs	r1, #0
 8111076:	4618      	mov	r0, r3
 8111078:	f000 fb78 	bl	811176c <RCCEx_PLL2_Config>
 811107c:	4603      	mov	r3, r0
 811107e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8111082:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8111086:	2b00      	cmp	r3, #0
 8111088:	d003      	beq.n	8111092 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811108a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811108e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8111092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111096:	e9d3 2300 	ldrd	r2, r3, [r3]
 811109a:	2100      	movs	r1, #0
 811109c:	6239      	str	r1, [r7, #32]
 811109e:	f003 0302 	and.w	r3, r3, #2
 81110a2:	627b      	str	r3, [r7, #36]	@ 0x24
 81110a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81110a8:	460b      	mov	r3, r1
 81110aa:	4313      	orrs	r3, r2
 81110ac:	d011      	beq.n	81110d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81110ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81110b2:	3308      	adds	r3, #8
 81110b4:	2101      	movs	r1, #1
 81110b6:	4618      	mov	r0, r3
 81110b8:	f000 fb58 	bl	811176c <RCCEx_PLL2_Config>
 81110bc:	4603      	mov	r3, r0
 81110be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81110c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81110c6:	2b00      	cmp	r3, #0
 81110c8:	d003      	beq.n	81110d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81110ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81110ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81110d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81110d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81110da:	2100      	movs	r1, #0
 81110dc:	61b9      	str	r1, [r7, #24]
 81110de:	f003 0304 	and.w	r3, r3, #4
 81110e2:	61fb      	str	r3, [r7, #28]
 81110e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81110e8:	460b      	mov	r3, r1
 81110ea:	4313      	orrs	r3, r2
 81110ec:	d011      	beq.n	8111112 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81110ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81110f2:	3308      	adds	r3, #8
 81110f4:	2102      	movs	r1, #2
 81110f6:	4618      	mov	r0, r3
 81110f8:	f000 fb38 	bl	811176c <RCCEx_PLL2_Config>
 81110fc:	4603      	mov	r3, r0
 81110fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8111102:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8111106:	2b00      	cmp	r3, #0
 8111108:	d003      	beq.n	8111112 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811110a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811110e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8111112:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111116:	e9d3 2300 	ldrd	r2, r3, [r3]
 811111a:	2100      	movs	r1, #0
 811111c:	6139      	str	r1, [r7, #16]
 811111e:	f003 0308 	and.w	r3, r3, #8
 8111122:	617b      	str	r3, [r7, #20]
 8111124:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8111128:	460b      	mov	r3, r1
 811112a:	4313      	orrs	r3, r2
 811112c:	d011      	beq.n	8111152 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 811112e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111132:	3328      	adds	r3, #40	@ 0x28
 8111134:	2100      	movs	r1, #0
 8111136:	4618      	mov	r0, r3
 8111138:	f000 fbca 	bl	81118d0 <RCCEx_PLL3_Config>
 811113c:	4603      	mov	r3, r0
 811113e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8111142:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8111146:	2b00      	cmp	r3, #0
 8111148:	d003      	beq.n	8111152 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811114a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811114e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8111152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111156:	e9d3 2300 	ldrd	r2, r3, [r3]
 811115a:	2100      	movs	r1, #0
 811115c:	60b9      	str	r1, [r7, #8]
 811115e:	f003 0310 	and.w	r3, r3, #16
 8111162:	60fb      	str	r3, [r7, #12]
 8111164:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8111168:	460b      	mov	r3, r1
 811116a:	4313      	orrs	r3, r2
 811116c:	d011      	beq.n	8111192 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 811116e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111172:	3328      	adds	r3, #40	@ 0x28
 8111174:	2101      	movs	r1, #1
 8111176:	4618      	mov	r0, r3
 8111178:	f000 fbaa 	bl	81118d0 <RCCEx_PLL3_Config>
 811117c:	4603      	mov	r3, r0
 811117e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8111182:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8111186:	2b00      	cmp	r3, #0
 8111188:	d003      	beq.n	8111192 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 811118a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 811118e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8111192:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8111196:	e9d3 2300 	ldrd	r2, r3, [r3]
 811119a:	2100      	movs	r1, #0
 811119c:	6039      	str	r1, [r7, #0]
 811119e:	f003 0320 	and.w	r3, r3, #32
 81111a2:	607b      	str	r3, [r7, #4]
 81111a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81111a8:	460b      	mov	r3, r1
 81111aa:	4313      	orrs	r3, r2
 81111ac:	d011      	beq.n	81111d2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81111ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81111b2:	3328      	adds	r3, #40	@ 0x28
 81111b4:	2102      	movs	r1, #2
 81111b6:	4618      	mov	r0, r3
 81111b8:	f000 fb8a 	bl	81118d0 <RCCEx_PLL3_Config>
 81111bc:	4603      	mov	r3, r0
 81111be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81111c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81111c6:	2b00      	cmp	r3, #0
 81111c8:	d003      	beq.n	81111d2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81111ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81111ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81111d2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81111d6:	2b00      	cmp	r3, #0
 81111d8:	d101      	bne.n	81111de <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81111da:	2300      	movs	r3, #0
 81111dc:	e000      	b.n	81111e0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81111de:	2301      	movs	r3, #1
}
 81111e0:	4618      	mov	r0, r3
 81111e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81111e6:	46bd      	mov	sp, r7
 81111e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81111ec:	58024400 	.word	0x58024400

081111f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81111f0:	b580      	push	{r7, lr}
 81111f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81111f4:	f7fe fd12 	bl	810fc1c <HAL_RCC_GetHCLKFreq>
 81111f8:	4602      	mov	r2, r0
 81111fa:	4b06      	ldr	r3, [pc, #24]	@ (8111214 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81111fc:	6a1b      	ldr	r3, [r3, #32]
 81111fe:	091b      	lsrs	r3, r3, #4
 8111200:	f003 0307 	and.w	r3, r3, #7
 8111204:	4904      	ldr	r1, [pc, #16]	@ (8111218 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8111206:	5ccb      	ldrb	r3, [r1, r3]
 8111208:	f003 031f 	and.w	r3, r3, #31
 811120c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8111210:	4618      	mov	r0, r3
 8111212:	bd80      	pop	{r7, pc}
 8111214:	58024400 	.word	0x58024400
 8111218:	081285a0 	.word	0x081285a0

0811121c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 811121c:	b480      	push	{r7}
 811121e:	b089      	sub	sp, #36	@ 0x24
 8111220:	af00      	add	r7, sp, #0
 8111222:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8111224:	4ba1      	ldr	r3, [pc, #644]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8111226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8111228:	f003 0303 	and.w	r3, r3, #3
 811122c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 811122e:	4b9f      	ldr	r3, [pc, #636]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8111230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8111232:	0b1b      	lsrs	r3, r3, #12
 8111234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8111238:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 811123a:	4b9c      	ldr	r3, [pc, #624]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811123c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811123e:	091b      	lsrs	r3, r3, #4
 8111240:	f003 0301 	and.w	r3, r3, #1
 8111244:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8111246:	4b99      	ldr	r3, [pc, #612]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8111248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 811124a:	08db      	lsrs	r3, r3, #3
 811124c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8111250:	693a      	ldr	r2, [r7, #16]
 8111252:	fb02 f303 	mul.w	r3, r2, r3
 8111256:	ee07 3a90 	vmov	s15, r3
 811125a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811125e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8111262:	697b      	ldr	r3, [r7, #20]
 8111264:	2b00      	cmp	r3, #0
 8111266:	f000 8111 	beq.w	811148c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 811126a:	69bb      	ldr	r3, [r7, #24]
 811126c:	2b02      	cmp	r3, #2
 811126e:	f000 8083 	beq.w	8111378 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8111272:	69bb      	ldr	r3, [r7, #24]
 8111274:	2b02      	cmp	r3, #2
 8111276:	f200 80a1 	bhi.w	81113bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 811127a:	69bb      	ldr	r3, [r7, #24]
 811127c:	2b00      	cmp	r3, #0
 811127e:	d003      	beq.n	8111288 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8111280:	69bb      	ldr	r3, [r7, #24]
 8111282:	2b01      	cmp	r3, #1
 8111284:	d056      	beq.n	8111334 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8111286:	e099      	b.n	81113bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8111288:	4b88      	ldr	r3, [pc, #544]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811128a:	681b      	ldr	r3, [r3, #0]
 811128c:	f003 0320 	and.w	r3, r3, #32
 8111290:	2b00      	cmp	r3, #0
 8111292:	d02d      	beq.n	81112f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8111294:	4b85      	ldr	r3, [pc, #532]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8111296:	681b      	ldr	r3, [r3, #0]
 8111298:	08db      	lsrs	r3, r3, #3
 811129a:	f003 0303 	and.w	r3, r3, #3
 811129e:	4a84      	ldr	r2, [pc, #528]	@ (81114b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81112a0:	fa22 f303 	lsr.w	r3, r2, r3
 81112a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81112a6:	68bb      	ldr	r3, [r7, #8]
 81112a8:	ee07 3a90 	vmov	s15, r3
 81112ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81112b0:	697b      	ldr	r3, [r7, #20]
 81112b2:	ee07 3a90 	vmov	s15, r3
 81112b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81112ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81112be:	4b7b      	ldr	r3, [pc, #492]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81112c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81112c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81112c6:	ee07 3a90 	vmov	s15, r3
 81112ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81112ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81112d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81114b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81112d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81112da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81112de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81112e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81112e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81112ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81112ee:	e087      	b.n	8111400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81112f0:	697b      	ldr	r3, [r7, #20]
 81112f2:	ee07 3a90 	vmov	s15, r3
 81112f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81112fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81114b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81112fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111302:	4b6a      	ldr	r3, [pc, #424]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8111304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811130a:	ee07 3a90 	vmov	s15, r3
 811130e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111312:	ed97 6a03 	vldr	s12, [r7, #12]
 8111316:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81114b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 811131a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 811131e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8111326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 811132a:	ee67 7a27 	vmul.f32	s15, s14, s15
 811132e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8111332:	e065      	b.n	8111400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8111334:	697b      	ldr	r3, [r7, #20]
 8111336:	ee07 3a90 	vmov	s15, r3
 811133a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811133e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81114bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8111342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111346:	4b59      	ldr	r3, [pc, #356]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8111348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 811134a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811134e:	ee07 3a90 	vmov	s15, r3
 8111352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111356:	ed97 6a03 	vldr	s12, [r7, #12]
 811135a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81114b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 811135e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8111362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 811136a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 811136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8111372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8111376:	e043      	b.n	8111400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8111378:	697b      	ldr	r3, [r7, #20]
 811137a:	ee07 3a90 	vmov	s15, r3
 811137e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111382:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81114c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8111386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 811138a:	4b48      	ldr	r3, [pc, #288]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811138c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 811138e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8111392:	ee07 3a90 	vmov	s15, r3
 8111396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 811139a:	ed97 6a03 	vldr	s12, [r7, #12]
 811139e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81114b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81113a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81113a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81113aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81113ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81113b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81113b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81113ba:	e021      	b.n	8111400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81113bc:	697b      	ldr	r3, [r7, #20]
 81113be:	ee07 3a90 	vmov	s15, r3
 81113c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81113c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81114bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81113ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81113ce:	4b37      	ldr	r3, [pc, #220]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81113d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81113d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81113d6:	ee07 3a90 	vmov	s15, r3
 81113da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81113de:	ed97 6a03 	vldr	s12, [r7, #12]
 81113e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81114b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81113e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81113ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81113ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81113f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81113f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81113fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81113fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8111400:	4b2a      	ldr	r3, [pc, #168]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8111402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111404:	0a5b      	lsrs	r3, r3, #9
 8111406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 811140a:	ee07 3a90 	vmov	s15, r3
 811140e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8111416:	ee37 7a87 	vadd.f32	s14, s15, s14
 811141a:	edd7 6a07 	vldr	s13, [r7, #28]
 811141e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8111422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8111426:	ee17 2a90 	vmov	r2, s15
 811142a:	687b      	ldr	r3, [r7, #4]
 811142c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 811142e:	4b1f      	ldr	r3, [pc, #124]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8111430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111432:	0c1b      	lsrs	r3, r3, #16
 8111434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8111438:	ee07 3a90 	vmov	s15, r3
 811143c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111440:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8111444:	ee37 7a87 	vadd.f32	s14, s15, s14
 8111448:	edd7 6a07 	vldr	s13, [r7, #28]
 811144c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8111450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8111454:	ee17 2a90 	vmov	r2, s15
 8111458:	687b      	ldr	r3, [r7, #4]
 811145a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 811145c:	4b13      	ldr	r3, [pc, #76]	@ (81114ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 811145e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111460:	0e1b      	lsrs	r3, r3, #24
 8111462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8111466:	ee07 3a90 	vmov	s15, r3
 811146a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811146e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8111472:	ee37 7a87 	vadd.f32	s14, s15, s14
 8111476:	edd7 6a07 	vldr	s13, [r7, #28]
 811147a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 811147e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8111482:	ee17 2a90 	vmov	r2, s15
 8111486:	687b      	ldr	r3, [r7, #4]
 8111488:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 811148a:	e008      	b.n	811149e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 811148c:	687b      	ldr	r3, [r7, #4]
 811148e:	2200      	movs	r2, #0
 8111490:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8111492:	687b      	ldr	r3, [r7, #4]
 8111494:	2200      	movs	r2, #0
 8111496:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8111498:	687b      	ldr	r3, [r7, #4]
 811149a:	2200      	movs	r2, #0
 811149c:	609a      	str	r2, [r3, #8]
}
 811149e:	bf00      	nop
 81114a0:	3724      	adds	r7, #36	@ 0x24
 81114a2:	46bd      	mov	sp, r7
 81114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81114a8:	4770      	bx	lr
 81114aa:	bf00      	nop
 81114ac:	58024400 	.word	0x58024400
 81114b0:	03d09000 	.word	0x03d09000
 81114b4:	46000000 	.word	0x46000000
 81114b8:	4c742400 	.word	0x4c742400
 81114bc:	4a742400 	.word	0x4a742400
 81114c0:	4bbebc20 	.word	0x4bbebc20

081114c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81114c4:	b480      	push	{r7}
 81114c6:	b089      	sub	sp, #36	@ 0x24
 81114c8:	af00      	add	r7, sp, #0
 81114ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81114cc:	4ba1      	ldr	r3, [pc, #644]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81114ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81114d0:	f003 0303 	and.w	r3, r3, #3
 81114d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81114d6:	4b9f      	ldr	r3, [pc, #636]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81114d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81114da:	0d1b      	lsrs	r3, r3, #20
 81114dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81114e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81114e2:	4b9c      	ldr	r3, [pc, #624]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81114e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81114e6:	0a1b      	lsrs	r3, r3, #8
 81114e8:	f003 0301 	and.w	r3, r3, #1
 81114ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81114ee:	4b99      	ldr	r3, [pc, #612]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81114f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81114f2:	08db      	lsrs	r3, r3, #3
 81114f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81114f8:	693a      	ldr	r2, [r7, #16]
 81114fa:	fb02 f303 	mul.w	r3, r2, r3
 81114fe:	ee07 3a90 	vmov	s15, r3
 8111502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111506:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 811150a:	697b      	ldr	r3, [r7, #20]
 811150c:	2b00      	cmp	r3, #0
 811150e:	f000 8111 	beq.w	8111734 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8111512:	69bb      	ldr	r3, [r7, #24]
 8111514:	2b02      	cmp	r3, #2
 8111516:	f000 8083 	beq.w	8111620 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 811151a:	69bb      	ldr	r3, [r7, #24]
 811151c:	2b02      	cmp	r3, #2
 811151e:	f200 80a1 	bhi.w	8111664 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8111522:	69bb      	ldr	r3, [r7, #24]
 8111524:	2b00      	cmp	r3, #0
 8111526:	d003      	beq.n	8111530 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8111528:	69bb      	ldr	r3, [r7, #24]
 811152a:	2b01      	cmp	r3, #1
 811152c:	d056      	beq.n	81115dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 811152e:	e099      	b.n	8111664 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8111530:	4b88      	ldr	r3, [pc, #544]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8111532:	681b      	ldr	r3, [r3, #0]
 8111534:	f003 0320 	and.w	r3, r3, #32
 8111538:	2b00      	cmp	r3, #0
 811153a:	d02d      	beq.n	8111598 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 811153c:	4b85      	ldr	r3, [pc, #532]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 811153e:	681b      	ldr	r3, [r3, #0]
 8111540:	08db      	lsrs	r3, r3, #3
 8111542:	f003 0303 	and.w	r3, r3, #3
 8111546:	4a84      	ldr	r2, [pc, #528]	@ (8111758 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8111548:	fa22 f303 	lsr.w	r3, r2, r3
 811154c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 811154e:	68bb      	ldr	r3, [r7, #8]
 8111550:	ee07 3a90 	vmov	s15, r3
 8111554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111558:	697b      	ldr	r3, [r7, #20]
 811155a:	ee07 3a90 	vmov	s15, r3
 811155e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111566:	4b7b      	ldr	r3, [pc, #492]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8111568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811156a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811156e:	ee07 3a90 	vmov	s15, r3
 8111572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111576:	ed97 6a03 	vldr	s12, [r7, #12]
 811157a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 811175c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 811157e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8111582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 811158a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 811158e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8111592:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8111596:	e087      	b.n	81116a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8111598:	697b      	ldr	r3, [r7, #20]
 811159a:	ee07 3a90 	vmov	s15, r3
 811159e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81115a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8111760 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81115a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81115aa:	4b6a      	ldr	r3, [pc, #424]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81115ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81115ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81115b2:	ee07 3a90 	vmov	s15, r3
 81115b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81115ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81115be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 811175c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81115c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81115c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81115ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81115ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81115d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81115d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81115da:	e065      	b.n	81116a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81115dc:	697b      	ldr	r3, [r7, #20]
 81115de:	ee07 3a90 	vmov	s15, r3
 81115e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81115e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8111764 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81115ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81115ee:	4b59      	ldr	r3, [pc, #356]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81115f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81115f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81115f6:	ee07 3a90 	vmov	s15, r3
 81115fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81115fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8111602:	eddf 5a56 	vldr	s11, [pc, #344]	@ 811175c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8111606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 811160a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 811160e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8111612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8111616:	ee67 7a27 	vmul.f32	s15, s14, s15
 811161a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 811161e:	e043      	b.n	81116a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8111620:	697b      	ldr	r3, [r7, #20]
 8111622:	ee07 3a90 	vmov	s15, r3
 8111626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811162a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8111768 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 811162e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111632:	4b48      	ldr	r3, [pc, #288]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8111634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811163a:	ee07 3a90 	vmov	s15, r3
 811163e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111642:	ed97 6a03 	vldr	s12, [r7, #12]
 8111646:	eddf 5a45 	vldr	s11, [pc, #276]	@ 811175c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 811164a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 811164e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8111656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 811165a:	ee67 7a27 	vmul.f32	s15, s14, s15
 811165e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8111662:	e021      	b.n	81116a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8111664:	697b      	ldr	r3, [r7, #20]
 8111666:	ee07 3a90 	vmov	s15, r3
 811166a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 811166e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8111764 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8111672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8111676:	4b37      	ldr	r3, [pc, #220]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8111678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811167a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 811167e:	ee07 3a90 	vmov	s15, r3
 8111682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8111686:	ed97 6a03 	vldr	s12, [r7, #12]
 811168a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 811175c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 811168e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8111692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8111696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 811169a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 811169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81116a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81116a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81116a8:	4b2a      	ldr	r3, [pc, #168]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81116aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81116ac:	0a5b      	lsrs	r3, r3, #9
 81116ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81116b2:	ee07 3a90 	vmov	s15, r3
 81116b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81116ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81116be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81116c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81116c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81116ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81116ce:	ee17 2a90 	vmov	r2, s15
 81116d2:	687b      	ldr	r3, [r7, #4]
 81116d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81116d6:	4b1f      	ldr	r3, [pc, #124]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81116d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81116da:	0c1b      	lsrs	r3, r3, #16
 81116dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81116e0:	ee07 3a90 	vmov	s15, r3
 81116e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81116e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81116ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 81116f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81116f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81116f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81116fc:	ee17 2a90 	vmov	r2, s15
 8111700:	687b      	ldr	r3, [r7, #4]
 8111702:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8111704:	4b13      	ldr	r3, [pc, #76]	@ (8111754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8111706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111708:	0e1b      	lsrs	r3, r3, #24
 811170a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 811170e:	ee07 3a90 	vmov	s15, r3
 8111712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8111716:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 811171a:	ee37 7a87 	vadd.f32	s14, s15, s14
 811171e:	edd7 6a07 	vldr	s13, [r7, #28]
 8111722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8111726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 811172a:	ee17 2a90 	vmov	r2, s15
 811172e:	687b      	ldr	r3, [r7, #4]
 8111730:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8111732:	e008      	b.n	8111746 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8111734:	687b      	ldr	r3, [r7, #4]
 8111736:	2200      	movs	r2, #0
 8111738:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 811173a:	687b      	ldr	r3, [r7, #4]
 811173c:	2200      	movs	r2, #0
 811173e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8111740:	687b      	ldr	r3, [r7, #4]
 8111742:	2200      	movs	r2, #0
 8111744:	609a      	str	r2, [r3, #8]
}
 8111746:	bf00      	nop
 8111748:	3724      	adds	r7, #36	@ 0x24
 811174a:	46bd      	mov	sp, r7
 811174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111750:	4770      	bx	lr
 8111752:	bf00      	nop
 8111754:	58024400 	.word	0x58024400
 8111758:	03d09000 	.word	0x03d09000
 811175c:	46000000 	.word	0x46000000
 8111760:	4c742400 	.word	0x4c742400
 8111764:	4a742400 	.word	0x4a742400
 8111768:	4bbebc20 	.word	0x4bbebc20

0811176c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 811176c:	b580      	push	{r7, lr}
 811176e:	b084      	sub	sp, #16
 8111770:	af00      	add	r7, sp, #0
 8111772:	6078      	str	r0, [r7, #4]
 8111774:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8111776:	2300      	movs	r3, #0
 8111778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 811177a:	4b54      	ldr	r3, [pc, #336]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 811177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811177e:	f003 0303 	and.w	r3, r3, #3
 8111782:	2b03      	cmp	r3, #3
 8111784:	d101      	bne.n	811178a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8111786:	2301      	movs	r3, #1
 8111788:	e09b      	b.n	81118c2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 811178a:	4b50      	ldr	r3, [pc, #320]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 811178c:	681b      	ldr	r3, [r3, #0]
 811178e:	4a4f      	ldr	r2, [pc, #316]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111790:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8111794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8111796:	f7fb f999 	bl	810cacc <HAL_GetTick>
 811179a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 811179c:	e008      	b.n	81117b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 811179e:	f7fb f995 	bl	810cacc <HAL_GetTick>
 81117a2:	4602      	mov	r2, r0
 81117a4:	68bb      	ldr	r3, [r7, #8]
 81117a6:	1ad3      	subs	r3, r2, r3
 81117a8:	2b02      	cmp	r3, #2
 81117aa:	d901      	bls.n	81117b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81117ac:	2303      	movs	r3, #3
 81117ae:	e088      	b.n	81118c2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81117b0:	4b46      	ldr	r3, [pc, #280]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 81117b2:	681b      	ldr	r3, [r3, #0]
 81117b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81117b8:	2b00      	cmp	r3, #0
 81117ba:	d1f0      	bne.n	811179e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81117bc:	4b43      	ldr	r3, [pc, #268]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 81117be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81117c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81117c4:	687b      	ldr	r3, [r7, #4]
 81117c6:	681b      	ldr	r3, [r3, #0]
 81117c8:	031b      	lsls	r3, r3, #12
 81117ca:	4940      	ldr	r1, [pc, #256]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 81117cc:	4313      	orrs	r3, r2
 81117ce:	628b      	str	r3, [r1, #40]	@ 0x28
 81117d0:	687b      	ldr	r3, [r7, #4]
 81117d2:	685b      	ldr	r3, [r3, #4]
 81117d4:	3b01      	subs	r3, #1
 81117d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81117da:	687b      	ldr	r3, [r7, #4]
 81117dc:	689b      	ldr	r3, [r3, #8]
 81117de:	3b01      	subs	r3, #1
 81117e0:	025b      	lsls	r3, r3, #9
 81117e2:	b29b      	uxth	r3, r3
 81117e4:	431a      	orrs	r2, r3
 81117e6:	687b      	ldr	r3, [r7, #4]
 81117e8:	68db      	ldr	r3, [r3, #12]
 81117ea:	3b01      	subs	r3, #1
 81117ec:	041b      	lsls	r3, r3, #16
 81117ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81117f2:	431a      	orrs	r2, r3
 81117f4:	687b      	ldr	r3, [r7, #4]
 81117f6:	691b      	ldr	r3, [r3, #16]
 81117f8:	3b01      	subs	r3, #1
 81117fa:	061b      	lsls	r3, r3, #24
 81117fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8111800:	4932      	ldr	r1, [pc, #200]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111802:	4313      	orrs	r3, r2
 8111804:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8111806:	4b31      	ldr	r3, [pc, #196]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811180a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 811180e:	687b      	ldr	r3, [r7, #4]
 8111810:	695b      	ldr	r3, [r3, #20]
 8111812:	492e      	ldr	r1, [pc, #184]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111814:	4313      	orrs	r3, r2
 8111816:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8111818:	4b2c      	ldr	r3, [pc, #176]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 811181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811181c:	f023 0220 	bic.w	r2, r3, #32
 8111820:	687b      	ldr	r3, [r7, #4]
 8111822:	699b      	ldr	r3, [r3, #24]
 8111824:	4929      	ldr	r1, [pc, #164]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111826:	4313      	orrs	r3, r2
 8111828:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 811182a:	4b28      	ldr	r3, [pc, #160]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 811182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811182e:	4a27      	ldr	r2, [pc, #156]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111830:	f023 0310 	bic.w	r3, r3, #16
 8111834:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8111836:	4b25      	ldr	r3, [pc, #148]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 811183a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 811183e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8111842:	687a      	ldr	r2, [r7, #4]
 8111844:	69d2      	ldr	r2, [r2, #28]
 8111846:	00d2      	lsls	r2, r2, #3
 8111848:	4920      	ldr	r1, [pc, #128]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 811184a:	4313      	orrs	r3, r2
 811184c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 811184e:	4b1f      	ldr	r3, [pc, #124]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111852:	4a1e      	ldr	r2, [pc, #120]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111854:	f043 0310 	orr.w	r3, r3, #16
 8111858:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 811185a:	683b      	ldr	r3, [r7, #0]
 811185c:	2b00      	cmp	r3, #0
 811185e:	d106      	bne.n	811186e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8111860:	4b1a      	ldr	r3, [pc, #104]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111864:	4a19      	ldr	r2, [pc, #100]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111866:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 811186a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 811186c:	e00f      	b.n	811188e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 811186e:	683b      	ldr	r3, [r7, #0]
 8111870:	2b01      	cmp	r3, #1
 8111872:	d106      	bne.n	8111882 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8111874:	4b15      	ldr	r3, [pc, #84]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111878:	4a14      	ldr	r2, [pc, #80]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 811187a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 811187e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8111880:	e005      	b.n	811188e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8111882:	4b12      	ldr	r3, [pc, #72]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111886:	4a11      	ldr	r2, [pc, #68]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111888:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 811188c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 811188e:	4b0f      	ldr	r3, [pc, #60]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111890:	681b      	ldr	r3, [r3, #0]
 8111892:	4a0e      	ldr	r2, [pc, #56]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 8111894:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8111898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 811189a:	f7fb f917 	bl	810cacc <HAL_GetTick>
 811189e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81118a0:	e008      	b.n	81118b4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81118a2:	f7fb f913 	bl	810cacc <HAL_GetTick>
 81118a6:	4602      	mov	r2, r0
 81118a8:	68bb      	ldr	r3, [r7, #8]
 81118aa:	1ad3      	subs	r3, r2, r3
 81118ac:	2b02      	cmp	r3, #2
 81118ae:	d901      	bls.n	81118b4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81118b0:	2303      	movs	r3, #3
 81118b2:	e006      	b.n	81118c2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81118b4:	4b05      	ldr	r3, [pc, #20]	@ (81118cc <RCCEx_PLL2_Config+0x160>)
 81118b6:	681b      	ldr	r3, [r3, #0]
 81118b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81118bc:	2b00      	cmp	r3, #0
 81118be:	d0f0      	beq.n	81118a2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81118c0:	7bfb      	ldrb	r3, [r7, #15]
}
 81118c2:	4618      	mov	r0, r3
 81118c4:	3710      	adds	r7, #16
 81118c6:	46bd      	mov	sp, r7
 81118c8:	bd80      	pop	{r7, pc}
 81118ca:	bf00      	nop
 81118cc:	58024400 	.word	0x58024400

081118d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81118d0:	b580      	push	{r7, lr}
 81118d2:	b084      	sub	sp, #16
 81118d4:	af00      	add	r7, sp, #0
 81118d6:	6078      	str	r0, [r7, #4]
 81118d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81118da:	2300      	movs	r3, #0
 81118dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81118de:	4b54      	ldr	r3, [pc, #336]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81118e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81118e2:	f003 0303 	and.w	r3, r3, #3
 81118e6:	2b03      	cmp	r3, #3
 81118e8:	d101      	bne.n	81118ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81118ea:	2301      	movs	r3, #1
 81118ec:	e09b      	b.n	8111a26 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81118ee:	4b50      	ldr	r3, [pc, #320]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81118f0:	681b      	ldr	r3, [r3, #0]
 81118f2:	4a4f      	ldr	r2, [pc, #316]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81118f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81118f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81118fa:	f7fb f8e7 	bl	810cacc <HAL_GetTick>
 81118fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8111900:	e008      	b.n	8111914 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8111902:	f7fb f8e3 	bl	810cacc <HAL_GetTick>
 8111906:	4602      	mov	r2, r0
 8111908:	68bb      	ldr	r3, [r7, #8]
 811190a:	1ad3      	subs	r3, r2, r3
 811190c:	2b02      	cmp	r3, #2
 811190e:	d901      	bls.n	8111914 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8111910:	2303      	movs	r3, #3
 8111912:	e088      	b.n	8111a26 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8111914:	4b46      	ldr	r3, [pc, #280]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 8111916:	681b      	ldr	r3, [r3, #0]
 8111918:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 811191c:	2b00      	cmp	r3, #0
 811191e:	d1f0      	bne.n	8111902 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8111920:	4b43      	ldr	r3, [pc, #268]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 8111922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8111924:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8111928:	687b      	ldr	r3, [r7, #4]
 811192a:	681b      	ldr	r3, [r3, #0]
 811192c:	051b      	lsls	r3, r3, #20
 811192e:	4940      	ldr	r1, [pc, #256]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 8111930:	4313      	orrs	r3, r2
 8111932:	628b      	str	r3, [r1, #40]	@ 0x28
 8111934:	687b      	ldr	r3, [r7, #4]
 8111936:	685b      	ldr	r3, [r3, #4]
 8111938:	3b01      	subs	r3, #1
 811193a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 811193e:	687b      	ldr	r3, [r7, #4]
 8111940:	689b      	ldr	r3, [r3, #8]
 8111942:	3b01      	subs	r3, #1
 8111944:	025b      	lsls	r3, r3, #9
 8111946:	b29b      	uxth	r3, r3
 8111948:	431a      	orrs	r2, r3
 811194a:	687b      	ldr	r3, [r7, #4]
 811194c:	68db      	ldr	r3, [r3, #12]
 811194e:	3b01      	subs	r3, #1
 8111950:	041b      	lsls	r3, r3, #16
 8111952:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8111956:	431a      	orrs	r2, r3
 8111958:	687b      	ldr	r3, [r7, #4]
 811195a:	691b      	ldr	r3, [r3, #16]
 811195c:	3b01      	subs	r3, #1
 811195e:	061b      	lsls	r3, r3, #24
 8111960:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8111964:	4932      	ldr	r1, [pc, #200]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 8111966:	4313      	orrs	r3, r2
 8111968:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 811196a:	4b31      	ldr	r3, [pc, #196]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 811196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811196e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8111972:	687b      	ldr	r3, [r7, #4]
 8111974:	695b      	ldr	r3, [r3, #20]
 8111976:	492e      	ldr	r1, [pc, #184]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 8111978:	4313      	orrs	r3, r2
 811197a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 811197c:	4b2c      	ldr	r3, [pc, #176]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 811197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111980:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8111984:	687b      	ldr	r3, [r7, #4]
 8111986:	699b      	ldr	r3, [r3, #24]
 8111988:	4929      	ldr	r1, [pc, #164]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 811198a:	4313      	orrs	r3, r2
 811198c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 811198e:	4b28      	ldr	r3, [pc, #160]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 8111990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111992:	4a27      	ldr	r2, [pc, #156]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 8111994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8111998:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 811199a:	4b25      	ldr	r3, [pc, #148]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 811199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811199e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81119a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81119a6:	687a      	ldr	r2, [r7, #4]
 81119a8:	69d2      	ldr	r2, [r2, #28]
 81119aa:	00d2      	lsls	r2, r2, #3
 81119ac:	4920      	ldr	r1, [pc, #128]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119ae:	4313      	orrs	r3, r2
 81119b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81119b2:	4b1f      	ldr	r3, [pc, #124]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81119b6:	4a1e      	ldr	r2, [pc, #120]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81119bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81119be:	683b      	ldr	r3, [r7, #0]
 81119c0:	2b00      	cmp	r3, #0
 81119c2:	d106      	bne.n	81119d2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81119c4:	4b1a      	ldr	r3, [pc, #104]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81119c8:	4a19      	ldr	r2, [pc, #100]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81119ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81119d0:	e00f      	b.n	81119f2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81119d2:	683b      	ldr	r3, [r7, #0]
 81119d4:	2b01      	cmp	r3, #1
 81119d6:	d106      	bne.n	81119e6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81119d8:	4b15      	ldr	r3, [pc, #84]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81119dc:	4a14      	ldr	r2, [pc, #80]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81119e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81119e4:	e005      	b.n	81119f2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81119e6:	4b12      	ldr	r3, [pc, #72]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81119ea:	4a11      	ldr	r2, [pc, #68]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81119f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81119f2:	4b0f      	ldr	r3, [pc, #60]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119f4:	681b      	ldr	r3, [r3, #0]
 81119f6:	4a0e      	ldr	r2, [pc, #56]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 81119f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81119fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81119fe:	f7fb f865 	bl	810cacc <HAL_GetTick>
 8111a02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8111a04:	e008      	b.n	8111a18 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8111a06:	f7fb f861 	bl	810cacc <HAL_GetTick>
 8111a0a:	4602      	mov	r2, r0
 8111a0c:	68bb      	ldr	r3, [r7, #8]
 8111a0e:	1ad3      	subs	r3, r2, r3
 8111a10:	2b02      	cmp	r3, #2
 8111a12:	d901      	bls.n	8111a18 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8111a14:	2303      	movs	r3, #3
 8111a16:	e006      	b.n	8111a26 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8111a18:	4b05      	ldr	r3, [pc, #20]	@ (8111a30 <RCCEx_PLL3_Config+0x160>)
 8111a1a:	681b      	ldr	r3, [r3, #0]
 8111a1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8111a20:	2b00      	cmp	r3, #0
 8111a22:	d0f0      	beq.n	8111a06 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8111a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8111a26:	4618      	mov	r0, r3
 8111a28:	3710      	adds	r7, #16
 8111a2a:	46bd      	mov	sp, r7
 8111a2c:	bd80      	pop	{r7, pc}
 8111a2e:	bf00      	nop
 8111a30:	58024400 	.word	0x58024400

08111a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8111a34:	b580      	push	{r7, lr}
 8111a36:	b082      	sub	sp, #8
 8111a38:	af00      	add	r7, sp, #0
 8111a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8111a3c:	687b      	ldr	r3, [r7, #4]
 8111a3e:	2b00      	cmp	r3, #0
 8111a40:	d101      	bne.n	8111a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8111a42:	2301      	movs	r3, #1
 8111a44:	e049      	b.n	8111ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8111a46:	687b      	ldr	r3, [r7, #4]
 8111a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8111a4c:	b2db      	uxtb	r3, r3
 8111a4e:	2b00      	cmp	r3, #0
 8111a50:	d106      	bne.n	8111a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8111a52:	687b      	ldr	r3, [r7, #4]
 8111a54:	2200      	movs	r2, #0
 8111a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8111a5a:	6878      	ldr	r0, [r7, #4]
 8111a5c:	f000 f841 	bl	8111ae2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8111a60:	687b      	ldr	r3, [r7, #4]
 8111a62:	2202      	movs	r2, #2
 8111a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8111a68:	687b      	ldr	r3, [r7, #4]
 8111a6a:	681a      	ldr	r2, [r3, #0]
 8111a6c:	687b      	ldr	r3, [r7, #4]
 8111a6e:	3304      	adds	r3, #4
 8111a70:	4619      	mov	r1, r3
 8111a72:	4610      	mov	r0, r2
 8111a74:	f000 f9e8 	bl	8111e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8111a78:	687b      	ldr	r3, [r7, #4]
 8111a7a:	2201      	movs	r2, #1
 8111a7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8111a80:	687b      	ldr	r3, [r7, #4]
 8111a82:	2201      	movs	r2, #1
 8111a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8111a88:	687b      	ldr	r3, [r7, #4]
 8111a8a:	2201      	movs	r2, #1
 8111a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8111a90:	687b      	ldr	r3, [r7, #4]
 8111a92:	2201      	movs	r2, #1
 8111a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8111a98:	687b      	ldr	r3, [r7, #4]
 8111a9a:	2201      	movs	r2, #1
 8111a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8111aa0:	687b      	ldr	r3, [r7, #4]
 8111aa2:	2201      	movs	r2, #1
 8111aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8111aa8:	687b      	ldr	r3, [r7, #4]
 8111aaa:	2201      	movs	r2, #1
 8111aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8111ab0:	687b      	ldr	r3, [r7, #4]
 8111ab2:	2201      	movs	r2, #1
 8111ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8111ab8:	687b      	ldr	r3, [r7, #4]
 8111aba:	2201      	movs	r2, #1
 8111abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8111ac0:	687b      	ldr	r3, [r7, #4]
 8111ac2:	2201      	movs	r2, #1
 8111ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8111ac8:	687b      	ldr	r3, [r7, #4]
 8111aca:	2201      	movs	r2, #1
 8111acc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8111ad0:	687b      	ldr	r3, [r7, #4]
 8111ad2:	2201      	movs	r2, #1
 8111ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8111ad8:	2300      	movs	r3, #0
}
 8111ada:	4618      	mov	r0, r3
 8111adc:	3708      	adds	r7, #8
 8111ade:	46bd      	mov	sp, r7
 8111ae0:	bd80      	pop	{r7, pc}

08111ae2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8111ae2:	b480      	push	{r7}
 8111ae4:	b083      	sub	sp, #12
 8111ae6:	af00      	add	r7, sp, #0
 8111ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8111aea:	bf00      	nop
 8111aec:	370c      	adds	r7, #12
 8111aee:	46bd      	mov	sp, r7
 8111af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111af4:	4770      	bx	lr
	...

08111af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8111af8:	b480      	push	{r7}
 8111afa:	b085      	sub	sp, #20
 8111afc:	af00      	add	r7, sp, #0
 8111afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8111b00:	687b      	ldr	r3, [r7, #4]
 8111b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8111b06:	b2db      	uxtb	r3, r3
 8111b08:	2b01      	cmp	r3, #1
 8111b0a:	d001      	beq.n	8111b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8111b0c:	2301      	movs	r3, #1
 8111b0e:	e054      	b.n	8111bba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8111b10:	687b      	ldr	r3, [r7, #4]
 8111b12:	2202      	movs	r2, #2
 8111b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8111b18:	687b      	ldr	r3, [r7, #4]
 8111b1a:	681b      	ldr	r3, [r3, #0]
 8111b1c:	68da      	ldr	r2, [r3, #12]
 8111b1e:	687b      	ldr	r3, [r7, #4]
 8111b20:	681b      	ldr	r3, [r3, #0]
 8111b22:	f042 0201 	orr.w	r2, r2, #1
 8111b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8111b28:	687b      	ldr	r3, [r7, #4]
 8111b2a:	681b      	ldr	r3, [r3, #0]
 8111b2c:	4a26      	ldr	r2, [pc, #152]	@ (8111bc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8111b2e:	4293      	cmp	r3, r2
 8111b30:	d022      	beq.n	8111b78 <HAL_TIM_Base_Start_IT+0x80>
 8111b32:	687b      	ldr	r3, [r7, #4]
 8111b34:	681b      	ldr	r3, [r3, #0]
 8111b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8111b3a:	d01d      	beq.n	8111b78 <HAL_TIM_Base_Start_IT+0x80>
 8111b3c:	687b      	ldr	r3, [r7, #4]
 8111b3e:	681b      	ldr	r3, [r3, #0]
 8111b40:	4a22      	ldr	r2, [pc, #136]	@ (8111bcc <HAL_TIM_Base_Start_IT+0xd4>)
 8111b42:	4293      	cmp	r3, r2
 8111b44:	d018      	beq.n	8111b78 <HAL_TIM_Base_Start_IT+0x80>
 8111b46:	687b      	ldr	r3, [r7, #4]
 8111b48:	681b      	ldr	r3, [r3, #0]
 8111b4a:	4a21      	ldr	r2, [pc, #132]	@ (8111bd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8111b4c:	4293      	cmp	r3, r2
 8111b4e:	d013      	beq.n	8111b78 <HAL_TIM_Base_Start_IT+0x80>
 8111b50:	687b      	ldr	r3, [r7, #4]
 8111b52:	681b      	ldr	r3, [r3, #0]
 8111b54:	4a1f      	ldr	r2, [pc, #124]	@ (8111bd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8111b56:	4293      	cmp	r3, r2
 8111b58:	d00e      	beq.n	8111b78 <HAL_TIM_Base_Start_IT+0x80>
 8111b5a:	687b      	ldr	r3, [r7, #4]
 8111b5c:	681b      	ldr	r3, [r3, #0]
 8111b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8111bd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8111b60:	4293      	cmp	r3, r2
 8111b62:	d009      	beq.n	8111b78 <HAL_TIM_Base_Start_IT+0x80>
 8111b64:	687b      	ldr	r3, [r7, #4]
 8111b66:	681b      	ldr	r3, [r3, #0]
 8111b68:	4a1c      	ldr	r2, [pc, #112]	@ (8111bdc <HAL_TIM_Base_Start_IT+0xe4>)
 8111b6a:	4293      	cmp	r3, r2
 8111b6c:	d004      	beq.n	8111b78 <HAL_TIM_Base_Start_IT+0x80>
 8111b6e:	687b      	ldr	r3, [r7, #4]
 8111b70:	681b      	ldr	r3, [r3, #0]
 8111b72:	4a1b      	ldr	r2, [pc, #108]	@ (8111be0 <HAL_TIM_Base_Start_IT+0xe8>)
 8111b74:	4293      	cmp	r3, r2
 8111b76:	d115      	bne.n	8111ba4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8111b78:	687b      	ldr	r3, [r7, #4]
 8111b7a:	681b      	ldr	r3, [r3, #0]
 8111b7c:	689a      	ldr	r2, [r3, #8]
 8111b7e:	4b19      	ldr	r3, [pc, #100]	@ (8111be4 <HAL_TIM_Base_Start_IT+0xec>)
 8111b80:	4013      	ands	r3, r2
 8111b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8111b84:	68fb      	ldr	r3, [r7, #12]
 8111b86:	2b06      	cmp	r3, #6
 8111b88:	d015      	beq.n	8111bb6 <HAL_TIM_Base_Start_IT+0xbe>
 8111b8a:	68fb      	ldr	r3, [r7, #12]
 8111b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8111b90:	d011      	beq.n	8111bb6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8111b92:	687b      	ldr	r3, [r7, #4]
 8111b94:	681b      	ldr	r3, [r3, #0]
 8111b96:	681a      	ldr	r2, [r3, #0]
 8111b98:	687b      	ldr	r3, [r7, #4]
 8111b9a:	681b      	ldr	r3, [r3, #0]
 8111b9c:	f042 0201 	orr.w	r2, r2, #1
 8111ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8111ba2:	e008      	b.n	8111bb6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8111ba4:	687b      	ldr	r3, [r7, #4]
 8111ba6:	681b      	ldr	r3, [r3, #0]
 8111ba8:	681a      	ldr	r2, [r3, #0]
 8111baa:	687b      	ldr	r3, [r7, #4]
 8111bac:	681b      	ldr	r3, [r3, #0]
 8111bae:	f042 0201 	orr.w	r2, r2, #1
 8111bb2:	601a      	str	r2, [r3, #0]
 8111bb4:	e000      	b.n	8111bb8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8111bb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8111bb8:	2300      	movs	r3, #0
}
 8111bba:	4618      	mov	r0, r3
 8111bbc:	3714      	adds	r7, #20
 8111bbe:	46bd      	mov	sp, r7
 8111bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111bc4:	4770      	bx	lr
 8111bc6:	bf00      	nop
 8111bc8:	40010000 	.word	0x40010000
 8111bcc:	40000400 	.word	0x40000400
 8111bd0:	40000800 	.word	0x40000800
 8111bd4:	40000c00 	.word	0x40000c00
 8111bd8:	40010400 	.word	0x40010400
 8111bdc:	40001800 	.word	0x40001800
 8111be0:	40014000 	.word	0x40014000
 8111be4:	00010007 	.word	0x00010007

08111be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8111be8:	b580      	push	{r7, lr}
 8111bea:	b084      	sub	sp, #16
 8111bec:	af00      	add	r7, sp, #0
 8111bee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8111bf0:	687b      	ldr	r3, [r7, #4]
 8111bf2:	681b      	ldr	r3, [r3, #0]
 8111bf4:	68db      	ldr	r3, [r3, #12]
 8111bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8111bf8:	687b      	ldr	r3, [r7, #4]
 8111bfa:	681b      	ldr	r3, [r3, #0]
 8111bfc:	691b      	ldr	r3, [r3, #16]
 8111bfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8111c00:	68bb      	ldr	r3, [r7, #8]
 8111c02:	f003 0302 	and.w	r3, r3, #2
 8111c06:	2b00      	cmp	r3, #0
 8111c08:	d020      	beq.n	8111c4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8111c0a:	68fb      	ldr	r3, [r7, #12]
 8111c0c:	f003 0302 	and.w	r3, r3, #2
 8111c10:	2b00      	cmp	r3, #0
 8111c12:	d01b      	beq.n	8111c4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8111c14:	687b      	ldr	r3, [r7, #4]
 8111c16:	681b      	ldr	r3, [r3, #0]
 8111c18:	f06f 0202 	mvn.w	r2, #2
 8111c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8111c1e:	687b      	ldr	r3, [r7, #4]
 8111c20:	2201      	movs	r2, #1
 8111c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8111c24:	687b      	ldr	r3, [r7, #4]
 8111c26:	681b      	ldr	r3, [r3, #0]
 8111c28:	699b      	ldr	r3, [r3, #24]
 8111c2a:	f003 0303 	and.w	r3, r3, #3
 8111c2e:	2b00      	cmp	r3, #0
 8111c30:	d003      	beq.n	8111c3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8111c32:	6878      	ldr	r0, [r7, #4]
 8111c34:	f000 f8e9 	bl	8111e0a <HAL_TIM_IC_CaptureCallback>
 8111c38:	e005      	b.n	8111c46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8111c3a:	6878      	ldr	r0, [r7, #4]
 8111c3c:	f000 f8db 	bl	8111df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8111c40:	6878      	ldr	r0, [r7, #4]
 8111c42:	f000 f8ec 	bl	8111e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8111c46:	687b      	ldr	r3, [r7, #4]
 8111c48:	2200      	movs	r2, #0
 8111c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8111c4c:	68bb      	ldr	r3, [r7, #8]
 8111c4e:	f003 0304 	and.w	r3, r3, #4
 8111c52:	2b00      	cmp	r3, #0
 8111c54:	d020      	beq.n	8111c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8111c56:	68fb      	ldr	r3, [r7, #12]
 8111c58:	f003 0304 	and.w	r3, r3, #4
 8111c5c:	2b00      	cmp	r3, #0
 8111c5e:	d01b      	beq.n	8111c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8111c60:	687b      	ldr	r3, [r7, #4]
 8111c62:	681b      	ldr	r3, [r3, #0]
 8111c64:	f06f 0204 	mvn.w	r2, #4
 8111c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8111c6a:	687b      	ldr	r3, [r7, #4]
 8111c6c:	2202      	movs	r2, #2
 8111c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8111c70:	687b      	ldr	r3, [r7, #4]
 8111c72:	681b      	ldr	r3, [r3, #0]
 8111c74:	699b      	ldr	r3, [r3, #24]
 8111c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8111c7a:	2b00      	cmp	r3, #0
 8111c7c:	d003      	beq.n	8111c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8111c7e:	6878      	ldr	r0, [r7, #4]
 8111c80:	f000 f8c3 	bl	8111e0a <HAL_TIM_IC_CaptureCallback>
 8111c84:	e005      	b.n	8111c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8111c86:	6878      	ldr	r0, [r7, #4]
 8111c88:	f000 f8b5 	bl	8111df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8111c8c:	6878      	ldr	r0, [r7, #4]
 8111c8e:	f000 f8c6 	bl	8111e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8111c92:	687b      	ldr	r3, [r7, #4]
 8111c94:	2200      	movs	r2, #0
 8111c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8111c98:	68bb      	ldr	r3, [r7, #8]
 8111c9a:	f003 0308 	and.w	r3, r3, #8
 8111c9e:	2b00      	cmp	r3, #0
 8111ca0:	d020      	beq.n	8111ce4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8111ca2:	68fb      	ldr	r3, [r7, #12]
 8111ca4:	f003 0308 	and.w	r3, r3, #8
 8111ca8:	2b00      	cmp	r3, #0
 8111caa:	d01b      	beq.n	8111ce4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8111cac:	687b      	ldr	r3, [r7, #4]
 8111cae:	681b      	ldr	r3, [r3, #0]
 8111cb0:	f06f 0208 	mvn.w	r2, #8
 8111cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8111cb6:	687b      	ldr	r3, [r7, #4]
 8111cb8:	2204      	movs	r2, #4
 8111cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8111cbc:	687b      	ldr	r3, [r7, #4]
 8111cbe:	681b      	ldr	r3, [r3, #0]
 8111cc0:	69db      	ldr	r3, [r3, #28]
 8111cc2:	f003 0303 	and.w	r3, r3, #3
 8111cc6:	2b00      	cmp	r3, #0
 8111cc8:	d003      	beq.n	8111cd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8111cca:	6878      	ldr	r0, [r7, #4]
 8111ccc:	f000 f89d 	bl	8111e0a <HAL_TIM_IC_CaptureCallback>
 8111cd0:	e005      	b.n	8111cde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8111cd2:	6878      	ldr	r0, [r7, #4]
 8111cd4:	f000 f88f 	bl	8111df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8111cd8:	6878      	ldr	r0, [r7, #4]
 8111cda:	f000 f8a0 	bl	8111e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8111cde:	687b      	ldr	r3, [r7, #4]
 8111ce0:	2200      	movs	r2, #0
 8111ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8111ce4:	68bb      	ldr	r3, [r7, #8]
 8111ce6:	f003 0310 	and.w	r3, r3, #16
 8111cea:	2b00      	cmp	r3, #0
 8111cec:	d020      	beq.n	8111d30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8111cee:	68fb      	ldr	r3, [r7, #12]
 8111cf0:	f003 0310 	and.w	r3, r3, #16
 8111cf4:	2b00      	cmp	r3, #0
 8111cf6:	d01b      	beq.n	8111d30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8111cf8:	687b      	ldr	r3, [r7, #4]
 8111cfa:	681b      	ldr	r3, [r3, #0]
 8111cfc:	f06f 0210 	mvn.w	r2, #16
 8111d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8111d02:	687b      	ldr	r3, [r7, #4]
 8111d04:	2208      	movs	r2, #8
 8111d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8111d08:	687b      	ldr	r3, [r7, #4]
 8111d0a:	681b      	ldr	r3, [r3, #0]
 8111d0c:	69db      	ldr	r3, [r3, #28]
 8111d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8111d12:	2b00      	cmp	r3, #0
 8111d14:	d003      	beq.n	8111d1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8111d16:	6878      	ldr	r0, [r7, #4]
 8111d18:	f000 f877 	bl	8111e0a <HAL_TIM_IC_CaptureCallback>
 8111d1c:	e005      	b.n	8111d2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8111d1e:	6878      	ldr	r0, [r7, #4]
 8111d20:	f000 f869 	bl	8111df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8111d24:	6878      	ldr	r0, [r7, #4]
 8111d26:	f000 f87a 	bl	8111e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8111d2a:	687b      	ldr	r3, [r7, #4]
 8111d2c:	2200      	movs	r2, #0
 8111d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8111d30:	68bb      	ldr	r3, [r7, #8]
 8111d32:	f003 0301 	and.w	r3, r3, #1
 8111d36:	2b00      	cmp	r3, #0
 8111d38:	d00c      	beq.n	8111d54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8111d3a:	68fb      	ldr	r3, [r7, #12]
 8111d3c:	f003 0301 	and.w	r3, r3, #1
 8111d40:	2b00      	cmp	r3, #0
 8111d42:	d007      	beq.n	8111d54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8111d44:	687b      	ldr	r3, [r7, #4]
 8111d46:	681b      	ldr	r3, [r3, #0]
 8111d48:	f06f 0201 	mvn.w	r2, #1
 8111d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8111d4e:	6878      	ldr	r0, [r7, #4]
 8111d50:	f7ef fce2 	bl	8101718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8111d54:	68bb      	ldr	r3, [r7, #8]
 8111d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8111d5a:	2b00      	cmp	r3, #0
 8111d5c:	d104      	bne.n	8111d68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8111d5e:	68bb      	ldr	r3, [r7, #8]
 8111d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8111d64:	2b00      	cmp	r3, #0
 8111d66:	d00c      	beq.n	8111d82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8111d68:	68fb      	ldr	r3, [r7, #12]
 8111d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8111d6e:	2b00      	cmp	r3, #0
 8111d70:	d007      	beq.n	8111d82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8111d72:	687b      	ldr	r3, [r7, #4]
 8111d74:	681b      	ldr	r3, [r3, #0]
 8111d76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8111d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8111d7c:	6878      	ldr	r0, [r7, #4]
 8111d7e:	f000 f913 	bl	8111fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8111d82:	68bb      	ldr	r3, [r7, #8]
 8111d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8111d88:	2b00      	cmp	r3, #0
 8111d8a:	d00c      	beq.n	8111da6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8111d8c:	68fb      	ldr	r3, [r7, #12]
 8111d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8111d92:	2b00      	cmp	r3, #0
 8111d94:	d007      	beq.n	8111da6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8111d96:	687b      	ldr	r3, [r7, #4]
 8111d98:	681b      	ldr	r3, [r3, #0]
 8111d9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8111d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8111da0:	6878      	ldr	r0, [r7, #4]
 8111da2:	f000 f90b 	bl	8111fbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8111da6:	68bb      	ldr	r3, [r7, #8]
 8111da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8111dac:	2b00      	cmp	r3, #0
 8111dae:	d00c      	beq.n	8111dca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8111db0:	68fb      	ldr	r3, [r7, #12]
 8111db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8111db6:	2b00      	cmp	r3, #0
 8111db8:	d007      	beq.n	8111dca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8111dba:	687b      	ldr	r3, [r7, #4]
 8111dbc:	681b      	ldr	r3, [r3, #0]
 8111dbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8111dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8111dc4:	6878      	ldr	r0, [r7, #4]
 8111dc6:	f000 f834 	bl	8111e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8111dca:	68bb      	ldr	r3, [r7, #8]
 8111dcc:	f003 0320 	and.w	r3, r3, #32
 8111dd0:	2b00      	cmp	r3, #0
 8111dd2:	d00c      	beq.n	8111dee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8111dd4:	68fb      	ldr	r3, [r7, #12]
 8111dd6:	f003 0320 	and.w	r3, r3, #32
 8111dda:	2b00      	cmp	r3, #0
 8111ddc:	d007      	beq.n	8111dee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8111dde:	687b      	ldr	r3, [r7, #4]
 8111de0:	681b      	ldr	r3, [r3, #0]
 8111de2:	f06f 0220 	mvn.w	r2, #32
 8111de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8111de8:	6878      	ldr	r0, [r7, #4]
 8111dea:	f000 f8d3 	bl	8111f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8111dee:	bf00      	nop
 8111df0:	3710      	adds	r7, #16
 8111df2:	46bd      	mov	sp, r7
 8111df4:	bd80      	pop	{r7, pc}

08111df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8111df6:	b480      	push	{r7}
 8111df8:	b083      	sub	sp, #12
 8111dfa:	af00      	add	r7, sp, #0
 8111dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8111dfe:	bf00      	nop
 8111e00:	370c      	adds	r7, #12
 8111e02:	46bd      	mov	sp, r7
 8111e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111e08:	4770      	bx	lr

08111e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8111e0a:	b480      	push	{r7}
 8111e0c:	b083      	sub	sp, #12
 8111e0e:	af00      	add	r7, sp, #0
 8111e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8111e12:	bf00      	nop
 8111e14:	370c      	adds	r7, #12
 8111e16:	46bd      	mov	sp, r7
 8111e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111e1c:	4770      	bx	lr

08111e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8111e1e:	b480      	push	{r7}
 8111e20:	b083      	sub	sp, #12
 8111e22:	af00      	add	r7, sp, #0
 8111e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8111e26:	bf00      	nop
 8111e28:	370c      	adds	r7, #12
 8111e2a:	46bd      	mov	sp, r7
 8111e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111e30:	4770      	bx	lr

08111e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8111e32:	b480      	push	{r7}
 8111e34:	b083      	sub	sp, #12
 8111e36:	af00      	add	r7, sp, #0
 8111e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8111e3a:	bf00      	nop
 8111e3c:	370c      	adds	r7, #12
 8111e3e:	46bd      	mov	sp, r7
 8111e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111e44:	4770      	bx	lr
	...

08111e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8111e48:	b480      	push	{r7}
 8111e4a:	b085      	sub	sp, #20
 8111e4c:	af00      	add	r7, sp, #0
 8111e4e:	6078      	str	r0, [r7, #4]
 8111e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8111e52:	687b      	ldr	r3, [r7, #4]
 8111e54:	681b      	ldr	r3, [r3, #0]
 8111e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8111e58:	687b      	ldr	r3, [r7, #4]
 8111e5a:	4a46      	ldr	r2, [pc, #280]	@ (8111f74 <TIM_Base_SetConfig+0x12c>)
 8111e5c:	4293      	cmp	r3, r2
 8111e5e:	d013      	beq.n	8111e88 <TIM_Base_SetConfig+0x40>
 8111e60:	687b      	ldr	r3, [r7, #4]
 8111e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8111e66:	d00f      	beq.n	8111e88 <TIM_Base_SetConfig+0x40>
 8111e68:	687b      	ldr	r3, [r7, #4]
 8111e6a:	4a43      	ldr	r2, [pc, #268]	@ (8111f78 <TIM_Base_SetConfig+0x130>)
 8111e6c:	4293      	cmp	r3, r2
 8111e6e:	d00b      	beq.n	8111e88 <TIM_Base_SetConfig+0x40>
 8111e70:	687b      	ldr	r3, [r7, #4]
 8111e72:	4a42      	ldr	r2, [pc, #264]	@ (8111f7c <TIM_Base_SetConfig+0x134>)
 8111e74:	4293      	cmp	r3, r2
 8111e76:	d007      	beq.n	8111e88 <TIM_Base_SetConfig+0x40>
 8111e78:	687b      	ldr	r3, [r7, #4]
 8111e7a:	4a41      	ldr	r2, [pc, #260]	@ (8111f80 <TIM_Base_SetConfig+0x138>)
 8111e7c:	4293      	cmp	r3, r2
 8111e7e:	d003      	beq.n	8111e88 <TIM_Base_SetConfig+0x40>
 8111e80:	687b      	ldr	r3, [r7, #4]
 8111e82:	4a40      	ldr	r2, [pc, #256]	@ (8111f84 <TIM_Base_SetConfig+0x13c>)
 8111e84:	4293      	cmp	r3, r2
 8111e86:	d108      	bne.n	8111e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8111e88:	68fb      	ldr	r3, [r7, #12]
 8111e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8111e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8111e90:	683b      	ldr	r3, [r7, #0]
 8111e92:	685b      	ldr	r3, [r3, #4]
 8111e94:	68fa      	ldr	r2, [r7, #12]
 8111e96:	4313      	orrs	r3, r2
 8111e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8111e9a:	687b      	ldr	r3, [r7, #4]
 8111e9c:	4a35      	ldr	r2, [pc, #212]	@ (8111f74 <TIM_Base_SetConfig+0x12c>)
 8111e9e:	4293      	cmp	r3, r2
 8111ea0:	d01f      	beq.n	8111ee2 <TIM_Base_SetConfig+0x9a>
 8111ea2:	687b      	ldr	r3, [r7, #4]
 8111ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8111ea8:	d01b      	beq.n	8111ee2 <TIM_Base_SetConfig+0x9a>
 8111eaa:	687b      	ldr	r3, [r7, #4]
 8111eac:	4a32      	ldr	r2, [pc, #200]	@ (8111f78 <TIM_Base_SetConfig+0x130>)
 8111eae:	4293      	cmp	r3, r2
 8111eb0:	d017      	beq.n	8111ee2 <TIM_Base_SetConfig+0x9a>
 8111eb2:	687b      	ldr	r3, [r7, #4]
 8111eb4:	4a31      	ldr	r2, [pc, #196]	@ (8111f7c <TIM_Base_SetConfig+0x134>)
 8111eb6:	4293      	cmp	r3, r2
 8111eb8:	d013      	beq.n	8111ee2 <TIM_Base_SetConfig+0x9a>
 8111eba:	687b      	ldr	r3, [r7, #4]
 8111ebc:	4a30      	ldr	r2, [pc, #192]	@ (8111f80 <TIM_Base_SetConfig+0x138>)
 8111ebe:	4293      	cmp	r3, r2
 8111ec0:	d00f      	beq.n	8111ee2 <TIM_Base_SetConfig+0x9a>
 8111ec2:	687b      	ldr	r3, [r7, #4]
 8111ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8111f84 <TIM_Base_SetConfig+0x13c>)
 8111ec6:	4293      	cmp	r3, r2
 8111ec8:	d00b      	beq.n	8111ee2 <TIM_Base_SetConfig+0x9a>
 8111eca:	687b      	ldr	r3, [r7, #4]
 8111ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8111f88 <TIM_Base_SetConfig+0x140>)
 8111ece:	4293      	cmp	r3, r2
 8111ed0:	d007      	beq.n	8111ee2 <TIM_Base_SetConfig+0x9a>
 8111ed2:	687b      	ldr	r3, [r7, #4]
 8111ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8111f8c <TIM_Base_SetConfig+0x144>)
 8111ed6:	4293      	cmp	r3, r2
 8111ed8:	d003      	beq.n	8111ee2 <TIM_Base_SetConfig+0x9a>
 8111eda:	687b      	ldr	r3, [r7, #4]
 8111edc:	4a2c      	ldr	r2, [pc, #176]	@ (8111f90 <TIM_Base_SetConfig+0x148>)
 8111ede:	4293      	cmp	r3, r2
 8111ee0:	d108      	bne.n	8111ef4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8111ee2:	68fb      	ldr	r3, [r7, #12]
 8111ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8111ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8111eea:	683b      	ldr	r3, [r7, #0]
 8111eec:	68db      	ldr	r3, [r3, #12]
 8111eee:	68fa      	ldr	r2, [r7, #12]
 8111ef0:	4313      	orrs	r3, r2
 8111ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8111ef4:	68fb      	ldr	r3, [r7, #12]
 8111ef6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8111efa:	683b      	ldr	r3, [r7, #0]
 8111efc:	695b      	ldr	r3, [r3, #20]
 8111efe:	4313      	orrs	r3, r2
 8111f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8111f02:	687b      	ldr	r3, [r7, #4]
 8111f04:	68fa      	ldr	r2, [r7, #12]
 8111f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8111f08:	683b      	ldr	r3, [r7, #0]
 8111f0a:	689a      	ldr	r2, [r3, #8]
 8111f0c:	687b      	ldr	r3, [r7, #4]
 8111f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8111f10:	683b      	ldr	r3, [r7, #0]
 8111f12:	681a      	ldr	r2, [r3, #0]
 8111f14:	687b      	ldr	r3, [r7, #4]
 8111f16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8111f18:	687b      	ldr	r3, [r7, #4]
 8111f1a:	4a16      	ldr	r2, [pc, #88]	@ (8111f74 <TIM_Base_SetConfig+0x12c>)
 8111f1c:	4293      	cmp	r3, r2
 8111f1e:	d00f      	beq.n	8111f40 <TIM_Base_SetConfig+0xf8>
 8111f20:	687b      	ldr	r3, [r7, #4]
 8111f22:	4a18      	ldr	r2, [pc, #96]	@ (8111f84 <TIM_Base_SetConfig+0x13c>)
 8111f24:	4293      	cmp	r3, r2
 8111f26:	d00b      	beq.n	8111f40 <TIM_Base_SetConfig+0xf8>
 8111f28:	687b      	ldr	r3, [r7, #4]
 8111f2a:	4a17      	ldr	r2, [pc, #92]	@ (8111f88 <TIM_Base_SetConfig+0x140>)
 8111f2c:	4293      	cmp	r3, r2
 8111f2e:	d007      	beq.n	8111f40 <TIM_Base_SetConfig+0xf8>
 8111f30:	687b      	ldr	r3, [r7, #4]
 8111f32:	4a16      	ldr	r2, [pc, #88]	@ (8111f8c <TIM_Base_SetConfig+0x144>)
 8111f34:	4293      	cmp	r3, r2
 8111f36:	d003      	beq.n	8111f40 <TIM_Base_SetConfig+0xf8>
 8111f38:	687b      	ldr	r3, [r7, #4]
 8111f3a:	4a15      	ldr	r2, [pc, #84]	@ (8111f90 <TIM_Base_SetConfig+0x148>)
 8111f3c:	4293      	cmp	r3, r2
 8111f3e:	d103      	bne.n	8111f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8111f40:	683b      	ldr	r3, [r7, #0]
 8111f42:	691a      	ldr	r2, [r3, #16]
 8111f44:	687b      	ldr	r3, [r7, #4]
 8111f46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8111f48:	687b      	ldr	r3, [r7, #4]
 8111f4a:	2201      	movs	r2, #1
 8111f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8111f4e:	687b      	ldr	r3, [r7, #4]
 8111f50:	691b      	ldr	r3, [r3, #16]
 8111f52:	f003 0301 	and.w	r3, r3, #1
 8111f56:	2b01      	cmp	r3, #1
 8111f58:	d105      	bne.n	8111f66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8111f5a:	687b      	ldr	r3, [r7, #4]
 8111f5c:	691b      	ldr	r3, [r3, #16]
 8111f5e:	f023 0201 	bic.w	r2, r3, #1
 8111f62:	687b      	ldr	r3, [r7, #4]
 8111f64:	611a      	str	r2, [r3, #16]
  }
}
 8111f66:	bf00      	nop
 8111f68:	3714      	adds	r7, #20
 8111f6a:	46bd      	mov	sp, r7
 8111f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111f70:	4770      	bx	lr
 8111f72:	bf00      	nop
 8111f74:	40010000 	.word	0x40010000
 8111f78:	40000400 	.word	0x40000400
 8111f7c:	40000800 	.word	0x40000800
 8111f80:	40000c00 	.word	0x40000c00
 8111f84:	40010400 	.word	0x40010400
 8111f88:	40014000 	.word	0x40014000
 8111f8c:	40014400 	.word	0x40014400
 8111f90:	40014800 	.word	0x40014800

08111f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8111f94:	b480      	push	{r7}
 8111f96:	b083      	sub	sp, #12
 8111f98:	af00      	add	r7, sp, #0
 8111f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8111f9c:	bf00      	nop
 8111f9e:	370c      	adds	r7, #12
 8111fa0:	46bd      	mov	sp, r7
 8111fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111fa6:	4770      	bx	lr

08111fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8111fa8:	b480      	push	{r7}
 8111faa:	b083      	sub	sp, #12
 8111fac:	af00      	add	r7, sp, #0
 8111fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8111fb0:	bf00      	nop
 8111fb2:	370c      	adds	r7, #12
 8111fb4:	46bd      	mov	sp, r7
 8111fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111fba:	4770      	bx	lr

08111fbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8111fbc:	b480      	push	{r7}
 8111fbe:	b083      	sub	sp, #12
 8111fc0:	af00      	add	r7, sp, #0
 8111fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8111fc4:	bf00      	nop
 8111fc6:	370c      	adds	r7, #12
 8111fc8:	46bd      	mov	sp, r7
 8111fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111fce:	4770      	bx	lr

08111fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8111fd0:	b580      	push	{r7, lr}
 8111fd2:	b082      	sub	sp, #8
 8111fd4:	af00      	add	r7, sp, #0
 8111fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8111fd8:	687b      	ldr	r3, [r7, #4]
 8111fda:	2b00      	cmp	r3, #0
 8111fdc:	d101      	bne.n	8111fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8111fde:	2301      	movs	r3, #1
 8111fe0:	e042      	b.n	8112068 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8111fe2:	687b      	ldr	r3, [r7, #4]
 8111fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8111fe8:	2b00      	cmp	r3, #0
 8111fea:	d106      	bne.n	8111ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8111fec:	687b      	ldr	r3, [r7, #4]
 8111fee:	2200      	movs	r2, #0
 8111ff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8111ff4:	6878      	ldr	r0, [r7, #4]
 8111ff6:	f7f1 f8b3 	bl	8103160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8111ffa:	687b      	ldr	r3, [r7, #4]
 8111ffc:	2224      	movs	r2, #36	@ 0x24
 8111ffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8112002:	687b      	ldr	r3, [r7, #4]
 8112004:	681b      	ldr	r3, [r3, #0]
 8112006:	681a      	ldr	r2, [r3, #0]
 8112008:	687b      	ldr	r3, [r7, #4]
 811200a:	681b      	ldr	r3, [r3, #0]
 811200c:	f022 0201 	bic.w	r2, r2, #1
 8112010:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8112012:	687b      	ldr	r3, [r7, #4]
 8112014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112016:	2b00      	cmp	r3, #0
 8112018:	d002      	beq.n	8112020 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 811201a:	6878      	ldr	r0, [r7, #4]
 811201c:	f000 fe1e 	bl	8112c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8112020:	6878      	ldr	r0, [r7, #4]
 8112022:	f000 f8b3 	bl	811218c <UART_SetConfig>
 8112026:	4603      	mov	r3, r0
 8112028:	2b01      	cmp	r3, #1
 811202a:	d101      	bne.n	8112030 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 811202c:	2301      	movs	r3, #1
 811202e:	e01b      	b.n	8112068 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8112030:	687b      	ldr	r3, [r7, #4]
 8112032:	681b      	ldr	r3, [r3, #0]
 8112034:	685a      	ldr	r2, [r3, #4]
 8112036:	687b      	ldr	r3, [r7, #4]
 8112038:	681b      	ldr	r3, [r3, #0]
 811203a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 811203e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8112040:	687b      	ldr	r3, [r7, #4]
 8112042:	681b      	ldr	r3, [r3, #0]
 8112044:	689a      	ldr	r2, [r3, #8]
 8112046:	687b      	ldr	r3, [r7, #4]
 8112048:	681b      	ldr	r3, [r3, #0]
 811204a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 811204e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8112050:	687b      	ldr	r3, [r7, #4]
 8112052:	681b      	ldr	r3, [r3, #0]
 8112054:	681a      	ldr	r2, [r3, #0]
 8112056:	687b      	ldr	r3, [r7, #4]
 8112058:	681b      	ldr	r3, [r3, #0]
 811205a:	f042 0201 	orr.w	r2, r2, #1
 811205e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8112060:	6878      	ldr	r0, [r7, #4]
 8112062:	f000 fe9d 	bl	8112da0 <UART_CheckIdleState>
 8112066:	4603      	mov	r3, r0
}
 8112068:	4618      	mov	r0, r3
 811206a:	3708      	adds	r7, #8
 811206c:	46bd      	mov	sp, r7
 811206e:	bd80      	pop	{r7, pc}

08112070 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8112070:	b580      	push	{r7, lr}
 8112072:	b08a      	sub	sp, #40	@ 0x28
 8112074:	af02      	add	r7, sp, #8
 8112076:	60f8      	str	r0, [r7, #12]
 8112078:	60b9      	str	r1, [r7, #8]
 811207a:	603b      	str	r3, [r7, #0]
 811207c:	4613      	mov	r3, r2
 811207e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8112080:	68fb      	ldr	r3, [r7, #12]
 8112082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8112086:	2b20      	cmp	r3, #32
 8112088:	d17b      	bne.n	8112182 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 811208a:	68bb      	ldr	r3, [r7, #8]
 811208c:	2b00      	cmp	r3, #0
 811208e:	d002      	beq.n	8112096 <HAL_UART_Transmit+0x26>
 8112090:	88fb      	ldrh	r3, [r7, #6]
 8112092:	2b00      	cmp	r3, #0
 8112094:	d101      	bne.n	811209a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8112096:	2301      	movs	r3, #1
 8112098:	e074      	b.n	8112184 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 811209a:	68fb      	ldr	r3, [r7, #12]
 811209c:	2200      	movs	r2, #0
 811209e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81120a2:	68fb      	ldr	r3, [r7, #12]
 81120a4:	2221      	movs	r2, #33	@ 0x21
 81120a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81120aa:	f7fa fd0f 	bl	810cacc <HAL_GetTick>
 81120ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81120b0:	68fb      	ldr	r3, [r7, #12]
 81120b2:	88fa      	ldrh	r2, [r7, #6]
 81120b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 81120b8:	68fb      	ldr	r3, [r7, #12]
 81120ba:	88fa      	ldrh	r2, [r7, #6]
 81120bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81120c0:	68fb      	ldr	r3, [r7, #12]
 81120c2:	689b      	ldr	r3, [r3, #8]
 81120c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81120c8:	d108      	bne.n	81120dc <HAL_UART_Transmit+0x6c>
 81120ca:	68fb      	ldr	r3, [r7, #12]
 81120cc:	691b      	ldr	r3, [r3, #16]
 81120ce:	2b00      	cmp	r3, #0
 81120d0:	d104      	bne.n	81120dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 81120d2:	2300      	movs	r3, #0
 81120d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81120d6:	68bb      	ldr	r3, [r7, #8]
 81120d8:	61bb      	str	r3, [r7, #24]
 81120da:	e003      	b.n	81120e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81120dc:	68bb      	ldr	r3, [r7, #8]
 81120de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81120e0:	2300      	movs	r3, #0
 81120e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81120e4:	e030      	b.n	8112148 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81120e6:	683b      	ldr	r3, [r7, #0]
 81120e8:	9300      	str	r3, [sp, #0]
 81120ea:	697b      	ldr	r3, [r7, #20]
 81120ec:	2200      	movs	r2, #0
 81120ee:	2180      	movs	r1, #128	@ 0x80
 81120f0:	68f8      	ldr	r0, [r7, #12]
 81120f2:	f000 feff 	bl	8112ef4 <UART_WaitOnFlagUntilTimeout>
 81120f6:	4603      	mov	r3, r0
 81120f8:	2b00      	cmp	r3, #0
 81120fa:	d005      	beq.n	8112108 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81120fc:	68fb      	ldr	r3, [r7, #12]
 81120fe:	2220      	movs	r2, #32
 8112100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8112104:	2303      	movs	r3, #3
 8112106:	e03d      	b.n	8112184 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8112108:	69fb      	ldr	r3, [r7, #28]
 811210a:	2b00      	cmp	r3, #0
 811210c:	d10b      	bne.n	8112126 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 811210e:	69bb      	ldr	r3, [r7, #24]
 8112110:	881b      	ldrh	r3, [r3, #0]
 8112112:	461a      	mov	r2, r3
 8112114:	68fb      	ldr	r3, [r7, #12]
 8112116:	681b      	ldr	r3, [r3, #0]
 8112118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 811211c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 811211e:	69bb      	ldr	r3, [r7, #24]
 8112120:	3302      	adds	r3, #2
 8112122:	61bb      	str	r3, [r7, #24]
 8112124:	e007      	b.n	8112136 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8112126:	69fb      	ldr	r3, [r7, #28]
 8112128:	781a      	ldrb	r2, [r3, #0]
 811212a:	68fb      	ldr	r3, [r7, #12]
 811212c:	681b      	ldr	r3, [r3, #0]
 811212e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8112130:	69fb      	ldr	r3, [r7, #28]
 8112132:	3301      	adds	r3, #1
 8112134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8112136:	68fb      	ldr	r3, [r7, #12]
 8112138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 811213c:	b29b      	uxth	r3, r3
 811213e:	3b01      	subs	r3, #1
 8112140:	b29a      	uxth	r2, r3
 8112142:	68fb      	ldr	r3, [r7, #12]
 8112144:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8112148:	68fb      	ldr	r3, [r7, #12]
 811214a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 811214e:	b29b      	uxth	r3, r3
 8112150:	2b00      	cmp	r3, #0
 8112152:	d1c8      	bne.n	81120e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8112154:	683b      	ldr	r3, [r7, #0]
 8112156:	9300      	str	r3, [sp, #0]
 8112158:	697b      	ldr	r3, [r7, #20]
 811215a:	2200      	movs	r2, #0
 811215c:	2140      	movs	r1, #64	@ 0x40
 811215e:	68f8      	ldr	r0, [r7, #12]
 8112160:	f000 fec8 	bl	8112ef4 <UART_WaitOnFlagUntilTimeout>
 8112164:	4603      	mov	r3, r0
 8112166:	2b00      	cmp	r3, #0
 8112168:	d005      	beq.n	8112176 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 811216a:	68fb      	ldr	r3, [r7, #12]
 811216c:	2220      	movs	r2, #32
 811216e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8112172:	2303      	movs	r3, #3
 8112174:	e006      	b.n	8112184 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8112176:	68fb      	ldr	r3, [r7, #12]
 8112178:	2220      	movs	r2, #32
 811217a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 811217e:	2300      	movs	r3, #0
 8112180:	e000      	b.n	8112184 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8112182:	2302      	movs	r3, #2
  }
}
 8112184:	4618      	mov	r0, r3
 8112186:	3720      	adds	r7, #32
 8112188:	46bd      	mov	sp, r7
 811218a:	bd80      	pop	{r7, pc}

0811218c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 811218c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8112190:	b092      	sub	sp, #72	@ 0x48
 8112192:	af00      	add	r7, sp, #0
 8112194:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8112196:	2300      	movs	r3, #0
 8112198:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 811219c:	697b      	ldr	r3, [r7, #20]
 811219e:	689a      	ldr	r2, [r3, #8]
 81121a0:	697b      	ldr	r3, [r7, #20]
 81121a2:	691b      	ldr	r3, [r3, #16]
 81121a4:	431a      	orrs	r2, r3
 81121a6:	697b      	ldr	r3, [r7, #20]
 81121a8:	695b      	ldr	r3, [r3, #20]
 81121aa:	431a      	orrs	r2, r3
 81121ac:	697b      	ldr	r3, [r7, #20]
 81121ae:	69db      	ldr	r3, [r3, #28]
 81121b0:	4313      	orrs	r3, r2
 81121b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81121b4:	697b      	ldr	r3, [r7, #20]
 81121b6:	681b      	ldr	r3, [r3, #0]
 81121b8:	681a      	ldr	r2, [r3, #0]
 81121ba:	4bbd      	ldr	r3, [pc, #756]	@ (81124b0 <UART_SetConfig+0x324>)
 81121bc:	4013      	ands	r3, r2
 81121be:	697a      	ldr	r2, [r7, #20]
 81121c0:	6812      	ldr	r2, [r2, #0]
 81121c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81121c4:	430b      	orrs	r3, r1
 81121c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81121c8:	697b      	ldr	r3, [r7, #20]
 81121ca:	681b      	ldr	r3, [r3, #0]
 81121cc:	685b      	ldr	r3, [r3, #4]
 81121ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81121d2:	697b      	ldr	r3, [r7, #20]
 81121d4:	68da      	ldr	r2, [r3, #12]
 81121d6:	697b      	ldr	r3, [r7, #20]
 81121d8:	681b      	ldr	r3, [r3, #0]
 81121da:	430a      	orrs	r2, r1
 81121dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81121de:	697b      	ldr	r3, [r7, #20]
 81121e0:	699b      	ldr	r3, [r3, #24]
 81121e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81121e4:	697b      	ldr	r3, [r7, #20]
 81121e6:	681b      	ldr	r3, [r3, #0]
 81121e8:	4ab2      	ldr	r2, [pc, #712]	@ (81124b4 <UART_SetConfig+0x328>)
 81121ea:	4293      	cmp	r3, r2
 81121ec:	d004      	beq.n	81121f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81121ee:	697b      	ldr	r3, [r7, #20]
 81121f0:	6a1b      	ldr	r3, [r3, #32]
 81121f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81121f4:	4313      	orrs	r3, r2
 81121f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81121f8:	697b      	ldr	r3, [r7, #20]
 81121fa:	681b      	ldr	r3, [r3, #0]
 81121fc:	689b      	ldr	r3, [r3, #8]
 81121fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8112202:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8112206:	697a      	ldr	r2, [r7, #20]
 8112208:	6812      	ldr	r2, [r2, #0]
 811220a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 811220c:	430b      	orrs	r3, r1
 811220e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8112210:	697b      	ldr	r3, [r7, #20]
 8112212:	681b      	ldr	r3, [r3, #0]
 8112214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112216:	f023 010f 	bic.w	r1, r3, #15
 811221a:	697b      	ldr	r3, [r7, #20]
 811221c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811221e:	697b      	ldr	r3, [r7, #20]
 8112220:	681b      	ldr	r3, [r3, #0]
 8112222:	430a      	orrs	r2, r1
 8112224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8112226:	697b      	ldr	r3, [r7, #20]
 8112228:	681b      	ldr	r3, [r3, #0]
 811222a:	4aa3      	ldr	r2, [pc, #652]	@ (81124b8 <UART_SetConfig+0x32c>)
 811222c:	4293      	cmp	r3, r2
 811222e:	d177      	bne.n	8112320 <UART_SetConfig+0x194>
 8112230:	4ba2      	ldr	r3, [pc, #648]	@ (81124bc <UART_SetConfig+0x330>)
 8112232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8112238:	2b28      	cmp	r3, #40	@ 0x28
 811223a:	d86d      	bhi.n	8112318 <UART_SetConfig+0x18c>
 811223c:	a201      	add	r2, pc, #4	@ (adr r2, 8112244 <UART_SetConfig+0xb8>)
 811223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112242:	bf00      	nop
 8112244:	081122e9 	.word	0x081122e9
 8112248:	08112319 	.word	0x08112319
 811224c:	08112319 	.word	0x08112319
 8112250:	08112319 	.word	0x08112319
 8112254:	08112319 	.word	0x08112319
 8112258:	08112319 	.word	0x08112319
 811225c:	08112319 	.word	0x08112319
 8112260:	08112319 	.word	0x08112319
 8112264:	081122f1 	.word	0x081122f1
 8112268:	08112319 	.word	0x08112319
 811226c:	08112319 	.word	0x08112319
 8112270:	08112319 	.word	0x08112319
 8112274:	08112319 	.word	0x08112319
 8112278:	08112319 	.word	0x08112319
 811227c:	08112319 	.word	0x08112319
 8112280:	08112319 	.word	0x08112319
 8112284:	081122f9 	.word	0x081122f9
 8112288:	08112319 	.word	0x08112319
 811228c:	08112319 	.word	0x08112319
 8112290:	08112319 	.word	0x08112319
 8112294:	08112319 	.word	0x08112319
 8112298:	08112319 	.word	0x08112319
 811229c:	08112319 	.word	0x08112319
 81122a0:	08112319 	.word	0x08112319
 81122a4:	08112301 	.word	0x08112301
 81122a8:	08112319 	.word	0x08112319
 81122ac:	08112319 	.word	0x08112319
 81122b0:	08112319 	.word	0x08112319
 81122b4:	08112319 	.word	0x08112319
 81122b8:	08112319 	.word	0x08112319
 81122bc:	08112319 	.word	0x08112319
 81122c0:	08112319 	.word	0x08112319
 81122c4:	08112309 	.word	0x08112309
 81122c8:	08112319 	.word	0x08112319
 81122cc:	08112319 	.word	0x08112319
 81122d0:	08112319 	.word	0x08112319
 81122d4:	08112319 	.word	0x08112319
 81122d8:	08112319 	.word	0x08112319
 81122dc:	08112319 	.word	0x08112319
 81122e0:	08112319 	.word	0x08112319
 81122e4:	08112311 	.word	0x08112311
 81122e8:	2301      	movs	r3, #1
 81122ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81122ee:	e220      	b.n	8112732 <UART_SetConfig+0x5a6>
 81122f0:	2304      	movs	r3, #4
 81122f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81122f6:	e21c      	b.n	8112732 <UART_SetConfig+0x5a6>
 81122f8:	2308      	movs	r3, #8
 81122fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81122fe:	e218      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112300:	2310      	movs	r3, #16
 8112302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112306:	e214      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112308:	2320      	movs	r3, #32
 811230a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811230e:	e210      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112310:	2340      	movs	r3, #64	@ 0x40
 8112312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112316:	e20c      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112318:	2380      	movs	r3, #128	@ 0x80
 811231a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811231e:	e208      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112320:	697b      	ldr	r3, [r7, #20]
 8112322:	681b      	ldr	r3, [r3, #0]
 8112324:	4a66      	ldr	r2, [pc, #408]	@ (81124c0 <UART_SetConfig+0x334>)
 8112326:	4293      	cmp	r3, r2
 8112328:	d130      	bne.n	811238c <UART_SetConfig+0x200>
 811232a:	4b64      	ldr	r3, [pc, #400]	@ (81124bc <UART_SetConfig+0x330>)
 811232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811232e:	f003 0307 	and.w	r3, r3, #7
 8112332:	2b05      	cmp	r3, #5
 8112334:	d826      	bhi.n	8112384 <UART_SetConfig+0x1f8>
 8112336:	a201      	add	r2, pc, #4	@ (adr r2, 811233c <UART_SetConfig+0x1b0>)
 8112338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811233c:	08112355 	.word	0x08112355
 8112340:	0811235d 	.word	0x0811235d
 8112344:	08112365 	.word	0x08112365
 8112348:	0811236d 	.word	0x0811236d
 811234c:	08112375 	.word	0x08112375
 8112350:	0811237d 	.word	0x0811237d
 8112354:	2300      	movs	r3, #0
 8112356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811235a:	e1ea      	b.n	8112732 <UART_SetConfig+0x5a6>
 811235c:	2304      	movs	r3, #4
 811235e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112362:	e1e6      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112364:	2308      	movs	r3, #8
 8112366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811236a:	e1e2      	b.n	8112732 <UART_SetConfig+0x5a6>
 811236c:	2310      	movs	r3, #16
 811236e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112372:	e1de      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112374:	2320      	movs	r3, #32
 8112376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811237a:	e1da      	b.n	8112732 <UART_SetConfig+0x5a6>
 811237c:	2340      	movs	r3, #64	@ 0x40
 811237e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112382:	e1d6      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112384:	2380      	movs	r3, #128	@ 0x80
 8112386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811238a:	e1d2      	b.n	8112732 <UART_SetConfig+0x5a6>
 811238c:	697b      	ldr	r3, [r7, #20]
 811238e:	681b      	ldr	r3, [r3, #0]
 8112390:	4a4c      	ldr	r2, [pc, #304]	@ (81124c4 <UART_SetConfig+0x338>)
 8112392:	4293      	cmp	r3, r2
 8112394:	d130      	bne.n	81123f8 <UART_SetConfig+0x26c>
 8112396:	4b49      	ldr	r3, [pc, #292]	@ (81124bc <UART_SetConfig+0x330>)
 8112398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811239a:	f003 0307 	and.w	r3, r3, #7
 811239e:	2b05      	cmp	r3, #5
 81123a0:	d826      	bhi.n	81123f0 <UART_SetConfig+0x264>
 81123a2:	a201      	add	r2, pc, #4	@ (adr r2, 81123a8 <UART_SetConfig+0x21c>)
 81123a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81123a8:	081123c1 	.word	0x081123c1
 81123ac:	081123c9 	.word	0x081123c9
 81123b0:	081123d1 	.word	0x081123d1
 81123b4:	081123d9 	.word	0x081123d9
 81123b8:	081123e1 	.word	0x081123e1
 81123bc:	081123e9 	.word	0x081123e9
 81123c0:	2300      	movs	r3, #0
 81123c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81123c6:	e1b4      	b.n	8112732 <UART_SetConfig+0x5a6>
 81123c8:	2304      	movs	r3, #4
 81123ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81123ce:	e1b0      	b.n	8112732 <UART_SetConfig+0x5a6>
 81123d0:	2308      	movs	r3, #8
 81123d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81123d6:	e1ac      	b.n	8112732 <UART_SetConfig+0x5a6>
 81123d8:	2310      	movs	r3, #16
 81123da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81123de:	e1a8      	b.n	8112732 <UART_SetConfig+0x5a6>
 81123e0:	2320      	movs	r3, #32
 81123e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81123e6:	e1a4      	b.n	8112732 <UART_SetConfig+0x5a6>
 81123e8:	2340      	movs	r3, #64	@ 0x40
 81123ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81123ee:	e1a0      	b.n	8112732 <UART_SetConfig+0x5a6>
 81123f0:	2380      	movs	r3, #128	@ 0x80
 81123f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81123f6:	e19c      	b.n	8112732 <UART_SetConfig+0x5a6>
 81123f8:	697b      	ldr	r3, [r7, #20]
 81123fa:	681b      	ldr	r3, [r3, #0]
 81123fc:	4a32      	ldr	r2, [pc, #200]	@ (81124c8 <UART_SetConfig+0x33c>)
 81123fe:	4293      	cmp	r3, r2
 8112400:	d130      	bne.n	8112464 <UART_SetConfig+0x2d8>
 8112402:	4b2e      	ldr	r3, [pc, #184]	@ (81124bc <UART_SetConfig+0x330>)
 8112404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112406:	f003 0307 	and.w	r3, r3, #7
 811240a:	2b05      	cmp	r3, #5
 811240c:	d826      	bhi.n	811245c <UART_SetConfig+0x2d0>
 811240e:	a201      	add	r2, pc, #4	@ (adr r2, 8112414 <UART_SetConfig+0x288>)
 8112410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112414:	0811242d 	.word	0x0811242d
 8112418:	08112435 	.word	0x08112435
 811241c:	0811243d 	.word	0x0811243d
 8112420:	08112445 	.word	0x08112445
 8112424:	0811244d 	.word	0x0811244d
 8112428:	08112455 	.word	0x08112455
 811242c:	2300      	movs	r3, #0
 811242e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112432:	e17e      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112434:	2304      	movs	r3, #4
 8112436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811243a:	e17a      	b.n	8112732 <UART_SetConfig+0x5a6>
 811243c:	2308      	movs	r3, #8
 811243e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112442:	e176      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112444:	2310      	movs	r3, #16
 8112446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811244a:	e172      	b.n	8112732 <UART_SetConfig+0x5a6>
 811244c:	2320      	movs	r3, #32
 811244e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112452:	e16e      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112454:	2340      	movs	r3, #64	@ 0x40
 8112456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811245a:	e16a      	b.n	8112732 <UART_SetConfig+0x5a6>
 811245c:	2380      	movs	r3, #128	@ 0x80
 811245e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112462:	e166      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112464:	697b      	ldr	r3, [r7, #20]
 8112466:	681b      	ldr	r3, [r3, #0]
 8112468:	4a18      	ldr	r2, [pc, #96]	@ (81124cc <UART_SetConfig+0x340>)
 811246a:	4293      	cmp	r3, r2
 811246c:	d140      	bne.n	81124f0 <UART_SetConfig+0x364>
 811246e:	4b13      	ldr	r3, [pc, #76]	@ (81124bc <UART_SetConfig+0x330>)
 8112470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112472:	f003 0307 	and.w	r3, r3, #7
 8112476:	2b05      	cmp	r3, #5
 8112478:	d836      	bhi.n	81124e8 <UART_SetConfig+0x35c>
 811247a:	a201      	add	r2, pc, #4	@ (adr r2, 8112480 <UART_SetConfig+0x2f4>)
 811247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112480:	08112499 	.word	0x08112499
 8112484:	081124a1 	.word	0x081124a1
 8112488:	081124a9 	.word	0x081124a9
 811248c:	081124d1 	.word	0x081124d1
 8112490:	081124d9 	.word	0x081124d9
 8112494:	081124e1 	.word	0x081124e1
 8112498:	2300      	movs	r3, #0
 811249a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811249e:	e148      	b.n	8112732 <UART_SetConfig+0x5a6>
 81124a0:	2304      	movs	r3, #4
 81124a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81124a6:	e144      	b.n	8112732 <UART_SetConfig+0x5a6>
 81124a8:	2308      	movs	r3, #8
 81124aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81124ae:	e140      	b.n	8112732 <UART_SetConfig+0x5a6>
 81124b0:	cfff69f3 	.word	0xcfff69f3
 81124b4:	58000c00 	.word	0x58000c00
 81124b8:	40011000 	.word	0x40011000
 81124bc:	58024400 	.word	0x58024400
 81124c0:	40004400 	.word	0x40004400
 81124c4:	40004800 	.word	0x40004800
 81124c8:	40004c00 	.word	0x40004c00
 81124cc:	40005000 	.word	0x40005000
 81124d0:	2310      	movs	r3, #16
 81124d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81124d6:	e12c      	b.n	8112732 <UART_SetConfig+0x5a6>
 81124d8:	2320      	movs	r3, #32
 81124da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81124de:	e128      	b.n	8112732 <UART_SetConfig+0x5a6>
 81124e0:	2340      	movs	r3, #64	@ 0x40
 81124e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81124e6:	e124      	b.n	8112732 <UART_SetConfig+0x5a6>
 81124e8:	2380      	movs	r3, #128	@ 0x80
 81124ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81124ee:	e120      	b.n	8112732 <UART_SetConfig+0x5a6>
 81124f0:	697b      	ldr	r3, [r7, #20]
 81124f2:	681b      	ldr	r3, [r3, #0]
 81124f4:	4acb      	ldr	r2, [pc, #812]	@ (8112824 <UART_SetConfig+0x698>)
 81124f6:	4293      	cmp	r3, r2
 81124f8:	d176      	bne.n	81125e8 <UART_SetConfig+0x45c>
 81124fa:	4bcb      	ldr	r3, [pc, #812]	@ (8112828 <UART_SetConfig+0x69c>)
 81124fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81124fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8112502:	2b28      	cmp	r3, #40	@ 0x28
 8112504:	d86c      	bhi.n	81125e0 <UART_SetConfig+0x454>
 8112506:	a201      	add	r2, pc, #4	@ (adr r2, 811250c <UART_SetConfig+0x380>)
 8112508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811250c:	081125b1 	.word	0x081125b1
 8112510:	081125e1 	.word	0x081125e1
 8112514:	081125e1 	.word	0x081125e1
 8112518:	081125e1 	.word	0x081125e1
 811251c:	081125e1 	.word	0x081125e1
 8112520:	081125e1 	.word	0x081125e1
 8112524:	081125e1 	.word	0x081125e1
 8112528:	081125e1 	.word	0x081125e1
 811252c:	081125b9 	.word	0x081125b9
 8112530:	081125e1 	.word	0x081125e1
 8112534:	081125e1 	.word	0x081125e1
 8112538:	081125e1 	.word	0x081125e1
 811253c:	081125e1 	.word	0x081125e1
 8112540:	081125e1 	.word	0x081125e1
 8112544:	081125e1 	.word	0x081125e1
 8112548:	081125e1 	.word	0x081125e1
 811254c:	081125c1 	.word	0x081125c1
 8112550:	081125e1 	.word	0x081125e1
 8112554:	081125e1 	.word	0x081125e1
 8112558:	081125e1 	.word	0x081125e1
 811255c:	081125e1 	.word	0x081125e1
 8112560:	081125e1 	.word	0x081125e1
 8112564:	081125e1 	.word	0x081125e1
 8112568:	081125e1 	.word	0x081125e1
 811256c:	081125c9 	.word	0x081125c9
 8112570:	081125e1 	.word	0x081125e1
 8112574:	081125e1 	.word	0x081125e1
 8112578:	081125e1 	.word	0x081125e1
 811257c:	081125e1 	.word	0x081125e1
 8112580:	081125e1 	.word	0x081125e1
 8112584:	081125e1 	.word	0x081125e1
 8112588:	081125e1 	.word	0x081125e1
 811258c:	081125d1 	.word	0x081125d1
 8112590:	081125e1 	.word	0x081125e1
 8112594:	081125e1 	.word	0x081125e1
 8112598:	081125e1 	.word	0x081125e1
 811259c:	081125e1 	.word	0x081125e1
 81125a0:	081125e1 	.word	0x081125e1
 81125a4:	081125e1 	.word	0x081125e1
 81125a8:	081125e1 	.word	0x081125e1
 81125ac:	081125d9 	.word	0x081125d9
 81125b0:	2301      	movs	r3, #1
 81125b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81125b6:	e0bc      	b.n	8112732 <UART_SetConfig+0x5a6>
 81125b8:	2304      	movs	r3, #4
 81125ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81125be:	e0b8      	b.n	8112732 <UART_SetConfig+0x5a6>
 81125c0:	2308      	movs	r3, #8
 81125c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81125c6:	e0b4      	b.n	8112732 <UART_SetConfig+0x5a6>
 81125c8:	2310      	movs	r3, #16
 81125ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81125ce:	e0b0      	b.n	8112732 <UART_SetConfig+0x5a6>
 81125d0:	2320      	movs	r3, #32
 81125d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81125d6:	e0ac      	b.n	8112732 <UART_SetConfig+0x5a6>
 81125d8:	2340      	movs	r3, #64	@ 0x40
 81125da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81125de:	e0a8      	b.n	8112732 <UART_SetConfig+0x5a6>
 81125e0:	2380      	movs	r3, #128	@ 0x80
 81125e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81125e6:	e0a4      	b.n	8112732 <UART_SetConfig+0x5a6>
 81125e8:	697b      	ldr	r3, [r7, #20]
 81125ea:	681b      	ldr	r3, [r3, #0]
 81125ec:	4a8f      	ldr	r2, [pc, #572]	@ (811282c <UART_SetConfig+0x6a0>)
 81125ee:	4293      	cmp	r3, r2
 81125f0:	d130      	bne.n	8112654 <UART_SetConfig+0x4c8>
 81125f2:	4b8d      	ldr	r3, [pc, #564]	@ (8112828 <UART_SetConfig+0x69c>)
 81125f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81125f6:	f003 0307 	and.w	r3, r3, #7
 81125fa:	2b05      	cmp	r3, #5
 81125fc:	d826      	bhi.n	811264c <UART_SetConfig+0x4c0>
 81125fe:	a201      	add	r2, pc, #4	@ (adr r2, 8112604 <UART_SetConfig+0x478>)
 8112600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112604:	0811261d 	.word	0x0811261d
 8112608:	08112625 	.word	0x08112625
 811260c:	0811262d 	.word	0x0811262d
 8112610:	08112635 	.word	0x08112635
 8112614:	0811263d 	.word	0x0811263d
 8112618:	08112645 	.word	0x08112645
 811261c:	2300      	movs	r3, #0
 811261e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112622:	e086      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112624:	2304      	movs	r3, #4
 8112626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811262a:	e082      	b.n	8112732 <UART_SetConfig+0x5a6>
 811262c:	2308      	movs	r3, #8
 811262e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112632:	e07e      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112634:	2310      	movs	r3, #16
 8112636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811263a:	e07a      	b.n	8112732 <UART_SetConfig+0x5a6>
 811263c:	2320      	movs	r3, #32
 811263e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112642:	e076      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112644:	2340      	movs	r3, #64	@ 0x40
 8112646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811264a:	e072      	b.n	8112732 <UART_SetConfig+0x5a6>
 811264c:	2380      	movs	r3, #128	@ 0x80
 811264e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112652:	e06e      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112654:	697b      	ldr	r3, [r7, #20]
 8112656:	681b      	ldr	r3, [r3, #0]
 8112658:	4a75      	ldr	r2, [pc, #468]	@ (8112830 <UART_SetConfig+0x6a4>)
 811265a:	4293      	cmp	r3, r2
 811265c:	d130      	bne.n	81126c0 <UART_SetConfig+0x534>
 811265e:	4b72      	ldr	r3, [pc, #456]	@ (8112828 <UART_SetConfig+0x69c>)
 8112660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112662:	f003 0307 	and.w	r3, r3, #7
 8112666:	2b05      	cmp	r3, #5
 8112668:	d826      	bhi.n	81126b8 <UART_SetConfig+0x52c>
 811266a:	a201      	add	r2, pc, #4	@ (adr r2, 8112670 <UART_SetConfig+0x4e4>)
 811266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112670:	08112689 	.word	0x08112689
 8112674:	08112691 	.word	0x08112691
 8112678:	08112699 	.word	0x08112699
 811267c:	081126a1 	.word	0x081126a1
 8112680:	081126a9 	.word	0x081126a9
 8112684:	081126b1 	.word	0x081126b1
 8112688:	2300      	movs	r3, #0
 811268a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811268e:	e050      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112690:	2304      	movs	r3, #4
 8112692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112696:	e04c      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112698:	2308      	movs	r3, #8
 811269a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811269e:	e048      	b.n	8112732 <UART_SetConfig+0x5a6>
 81126a0:	2310      	movs	r3, #16
 81126a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81126a6:	e044      	b.n	8112732 <UART_SetConfig+0x5a6>
 81126a8:	2320      	movs	r3, #32
 81126aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81126ae:	e040      	b.n	8112732 <UART_SetConfig+0x5a6>
 81126b0:	2340      	movs	r3, #64	@ 0x40
 81126b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81126b6:	e03c      	b.n	8112732 <UART_SetConfig+0x5a6>
 81126b8:	2380      	movs	r3, #128	@ 0x80
 81126ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81126be:	e038      	b.n	8112732 <UART_SetConfig+0x5a6>
 81126c0:	697b      	ldr	r3, [r7, #20]
 81126c2:	681b      	ldr	r3, [r3, #0]
 81126c4:	4a5b      	ldr	r2, [pc, #364]	@ (8112834 <UART_SetConfig+0x6a8>)
 81126c6:	4293      	cmp	r3, r2
 81126c8:	d130      	bne.n	811272c <UART_SetConfig+0x5a0>
 81126ca:	4b57      	ldr	r3, [pc, #348]	@ (8112828 <UART_SetConfig+0x69c>)
 81126cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81126ce:	f003 0307 	and.w	r3, r3, #7
 81126d2:	2b05      	cmp	r3, #5
 81126d4:	d826      	bhi.n	8112724 <UART_SetConfig+0x598>
 81126d6:	a201      	add	r2, pc, #4	@ (adr r2, 81126dc <UART_SetConfig+0x550>)
 81126d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81126dc:	081126f5 	.word	0x081126f5
 81126e0:	081126fd 	.word	0x081126fd
 81126e4:	08112705 	.word	0x08112705
 81126e8:	0811270d 	.word	0x0811270d
 81126ec:	08112715 	.word	0x08112715
 81126f0:	0811271d 	.word	0x0811271d
 81126f4:	2302      	movs	r3, #2
 81126f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81126fa:	e01a      	b.n	8112732 <UART_SetConfig+0x5a6>
 81126fc:	2304      	movs	r3, #4
 81126fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112702:	e016      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112704:	2308      	movs	r3, #8
 8112706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811270a:	e012      	b.n	8112732 <UART_SetConfig+0x5a6>
 811270c:	2310      	movs	r3, #16
 811270e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112712:	e00e      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112714:	2320      	movs	r3, #32
 8112716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811271a:	e00a      	b.n	8112732 <UART_SetConfig+0x5a6>
 811271c:	2340      	movs	r3, #64	@ 0x40
 811271e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8112722:	e006      	b.n	8112732 <UART_SetConfig+0x5a6>
 8112724:	2380      	movs	r3, #128	@ 0x80
 8112726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 811272a:	e002      	b.n	8112732 <UART_SetConfig+0x5a6>
 811272c:	2380      	movs	r3, #128	@ 0x80
 811272e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8112732:	697b      	ldr	r3, [r7, #20]
 8112734:	681b      	ldr	r3, [r3, #0]
 8112736:	4a3f      	ldr	r2, [pc, #252]	@ (8112834 <UART_SetConfig+0x6a8>)
 8112738:	4293      	cmp	r3, r2
 811273a:	f040 80f8 	bne.w	811292e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 811273e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8112742:	2b20      	cmp	r3, #32
 8112744:	dc46      	bgt.n	81127d4 <UART_SetConfig+0x648>
 8112746:	2b02      	cmp	r3, #2
 8112748:	f2c0 8082 	blt.w	8112850 <UART_SetConfig+0x6c4>
 811274c:	3b02      	subs	r3, #2
 811274e:	2b1e      	cmp	r3, #30
 8112750:	d87e      	bhi.n	8112850 <UART_SetConfig+0x6c4>
 8112752:	a201      	add	r2, pc, #4	@ (adr r2, 8112758 <UART_SetConfig+0x5cc>)
 8112754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112758:	081127db 	.word	0x081127db
 811275c:	08112851 	.word	0x08112851
 8112760:	081127e3 	.word	0x081127e3
 8112764:	08112851 	.word	0x08112851
 8112768:	08112851 	.word	0x08112851
 811276c:	08112851 	.word	0x08112851
 8112770:	081127f3 	.word	0x081127f3
 8112774:	08112851 	.word	0x08112851
 8112778:	08112851 	.word	0x08112851
 811277c:	08112851 	.word	0x08112851
 8112780:	08112851 	.word	0x08112851
 8112784:	08112851 	.word	0x08112851
 8112788:	08112851 	.word	0x08112851
 811278c:	08112851 	.word	0x08112851
 8112790:	08112803 	.word	0x08112803
 8112794:	08112851 	.word	0x08112851
 8112798:	08112851 	.word	0x08112851
 811279c:	08112851 	.word	0x08112851
 81127a0:	08112851 	.word	0x08112851
 81127a4:	08112851 	.word	0x08112851
 81127a8:	08112851 	.word	0x08112851
 81127ac:	08112851 	.word	0x08112851
 81127b0:	08112851 	.word	0x08112851
 81127b4:	08112851 	.word	0x08112851
 81127b8:	08112851 	.word	0x08112851
 81127bc:	08112851 	.word	0x08112851
 81127c0:	08112851 	.word	0x08112851
 81127c4:	08112851 	.word	0x08112851
 81127c8:	08112851 	.word	0x08112851
 81127cc:	08112851 	.word	0x08112851
 81127d0:	08112843 	.word	0x08112843
 81127d4:	2b40      	cmp	r3, #64	@ 0x40
 81127d6:	d037      	beq.n	8112848 <UART_SetConfig+0x6bc>
 81127d8:	e03a      	b.n	8112850 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81127da:	f7fe fd09 	bl	81111f0 <HAL_RCCEx_GetD3PCLK1Freq>
 81127de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81127e0:	e03c      	b.n	811285c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81127e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81127e6:	4618      	mov	r0, r3
 81127e8:	f7fe fd18 	bl	811121c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81127ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81127ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81127f0:	e034      	b.n	811285c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81127f2:	f107 0318 	add.w	r3, r7, #24
 81127f6:	4618      	mov	r0, r3
 81127f8:	f7fe fe64 	bl	81114c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81127fc:	69fb      	ldr	r3, [r7, #28]
 81127fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112800:	e02c      	b.n	811285c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8112802:	4b09      	ldr	r3, [pc, #36]	@ (8112828 <UART_SetConfig+0x69c>)
 8112804:	681b      	ldr	r3, [r3, #0]
 8112806:	f003 0320 	and.w	r3, r3, #32
 811280a:	2b00      	cmp	r3, #0
 811280c:	d016      	beq.n	811283c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 811280e:	4b06      	ldr	r3, [pc, #24]	@ (8112828 <UART_SetConfig+0x69c>)
 8112810:	681b      	ldr	r3, [r3, #0]
 8112812:	08db      	lsrs	r3, r3, #3
 8112814:	f003 0303 	and.w	r3, r3, #3
 8112818:	4a07      	ldr	r2, [pc, #28]	@ (8112838 <UART_SetConfig+0x6ac>)
 811281a:	fa22 f303 	lsr.w	r3, r2, r3
 811281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8112820:	e01c      	b.n	811285c <UART_SetConfig+0x6d0>
 8112822:	bf00      	nop
 8112824:	40011400 	.word	0x40011400
 8112828:	58024400 	.word	0x58024400
 811282c:	40007800 	.word	0x40007800
 8112830:	40007c00 	.word	0x40007c00
 8112834:	58000c00 	.word	0x58000c00
 8112838:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 811283c:	4b9d      	ldr	r3, [pc, #628]	@ (8112ab4 <UART_SetConfig+0x928>)
 811283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112840:	e00c      	b.n	811285c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8112842:	4b9d      	ldr	r3, [pc, #628]	@ (8112ab8 <UART_SetConfig+0x92c>)
 8112844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112846:	e009      	b.n	811285c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8112848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 811284c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 811284e:	e005      	b.n	811285c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8112850:	2300      	movs	r3, #0
 8112852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8112854:	2301      	movs	r3, #1
 8112856:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 811285a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 811285c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811285e:	2b00      	cmp	r3, #0
 8112860:	f000 81de 	beq.w	8112c20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8112864:	697b      	ldr	r3, [r7, #20]
 8112866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112868:	4a94      	ldr	r2, [pc, #592]	@ (8112abc <UART_SetConfig+0x930>)
 811286a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 811286e:	461a      	mov	r2, r3
 8112870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112872:	fbb3 f3f2 	udiv	r3, r3, r2
 8112876:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8112878:	697b      	ldr	r3, [r7, #20]
 811287a:	685a      	ldr	r2, [r3, #4]
 811287c:	4613      	mov	r3, r2
 811287e:	005b      	lsls	r3, r3, #1
 8112880:	4413      	add	r3, r2
 8112882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112884:	429a      	cmp	r2, r3
 8112886:	d305      	bcc.n	8112894 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8112888:	697b      	ldr	r3, [r7, #20]
 811288a:	685b      	ldr	r3, [r3, #4]
 811288c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 811288e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112890:	429a      	cmp	r2, r3
 8112892:	d903      	bls.n	811289c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8112894:	2301      	movs	r3, #1
 8112896:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 811289a:	e1c1      	b.n	8112c20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 811289c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811289e:	2200      	movs	r2, #0
 81128a0:	60bb      	str	r3, [r7, #8]
 81128a2:	60fa      	str	r2, [r7, #12]
 81128a4:	697b      	ldr	r3, [r7, #20]
 81128a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81128a8:	4a84      	ldr	r2, [pc, #528]	@ (8112abc <UART_SetConfig+0x930>)
 81128aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81128ae:	b29b      	uxth	r3, r3
 81128b0:	2200      	movs	r2, #0
 81128b2:	603b      	str	r3, [r7, #0]
 81128b4:	607a      	str	r2, [r7, #4]
 81128b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81128ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81128be:	f7ee f9d5 	bl	8100c6c <__aeabi_uldivmod>
 81128c2:	4602      	mov	r2, r0
 81128c4:	460b      	mov	r3, r1
 81128c6:	4610      	mov	r0, r2
 81128c8:	4619      	mov	r1, r3
 81128ca:	f04f 0200 	mov.w	r2, #0
 81128ce:	f04f 0300 	mov.w	r3, #0
 81128d2:	020b      	lsls	r3, r1, #8
 81128d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81128d8:	0202      	lsls	r2, r0, #8
 81128da:	6979      	ldr	r1, [r7, #20]
 81128dc:	6849      	ldr	r1, [r1, #4]
 81128de:	0849      	lsrs	r1, r1, #1
 81128e0:	2000      	movs	r0, #0
 81128e2:	460c      	mov	r4, r1
 81128e4:	4605      	mov	r5, r0
 81128e6:	eb12 0804 	adds.w	r8, r2, r4
 81128ea:	eb43 0905 	adc.w	r9, r3, r5
 81128ee:	697b      	ldr	r3, [r7, #20]
 81128f0:	685b      	ldr	r3, [r3, #4]
 81128f2:	2200      	movs	r2, #0
 81128f4:	469a      	mov	sl, r3
 81128f6:	4693      	mov	fp, r2
 81128f8:	4652      	mov	r2, sl
 81128fa:	465b      	mov	r3, fp
 81128fc:	4640      	mov	r0, r8
 81128fe:	4649      	mov	r1, r9
 8112900:	f7ee f9b4 	bl	8100c6c <__aeabi_uldivmod>
 8112904:	4602      	mov	r2, r0
 8112906:	460b      	mov	r3, r1
 8112908:	4613      	mov	r3, r2
 811290a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 811290c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811290e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8112912:	d308      	bcc.n	8112926 <UART_SetConfig+0x79a>
 8112914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 811291a:	d204      	bcs.n	8112926 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 811291c:	697b      	ldr	r3, [r7, #20]
 811291e:	681b      	ldr	r3, [r3, #0]
 8112920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8112922:	60da      	str	r2, [r3, #12]
 8112924:	e17c      	b.n	8112c20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8112926:	2301      	movs	r3, #1
 8112928:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 811292c:	e178      	b.n	8112c20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 811292e:	697b      	ldr	r3, [r7, #20]
 8112930:	69db      	ldr	r3, [r3, #28]
 8112932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8112936:	f040 80c5 	bne.w	8112ac4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 811293a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 811293e:	2b20      	cmp	r3, #32
 8112940:	dc48      	bgt.n	81129d4 <UART_SetConfig+0x848>
 8112942:	2b00      	cmp	r3, #0
 8112944:	db7b      	blt.n	8112a3e <UART_SetConfig+0x8b2>
 8112946:	2b20      	cmp	r3, #32
 8112948:	d879      	bhi.n	8112a3e <UART_SetConfig+0x8b2>
 811294a:	a201      	add	r2, pc, #4	@ (adr r2, 8112950 <UART_SetConfig+0x7c4>)
 811294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112950:	081129db 	.word	0x081129db
 8112954:	081129e3 	.word	0x081129e3
 8112958:	08112a3f 	.word	0x08112a3f
 811295c:	08112a3f 	.word	0x08112a3f
 8112960:	081129eb 	.word	0x081129eb
 8112964:	08112a3f 	.word	0x08112a3f
 8112968:	08112a3f 	.word	0x08112a3f
 811296c:	08112a3f 	.word	0x08112a3f
 8112970:	081129fb 	.word	0x081129fb
 8112974:	08112a3f 	.word	0x08112a3f
 8112978:	08112a3f 	.word	0x08112a3f
 811297c:	08112a3f 	.word	0x08112a3f
 8112980:	08112a3f 	.word	0x08112a3f
 8112984:	08112a3f 	.word	0x08112a3f
 8112988:	08112a3f 	.word	0x08112a3f
 811298c:	08112a3f 	.word	0x08112a3f
 8112990:	08112a0b 	.word	0x08112a0b
 8112994:	08112a3f 	.word	0x08112a3f
 8112998:	08112a3f 	.word	0x08112a3f
 811299c:	08112a3f 	.word	0x08112a3f
 81129a0:	08112a3f 	.word	0x08112a3f
 81129a4:	08112a3f 	.word	0x08112a3f
 81129a8:	08112a3f 	.word	0x08112a3f
 81129ac:	08112a3f 	.word	0x08112a3f
 81129b0:	08112a3f 	.word	0x08112a3f
 81129b4:	08112a3f 	.word	0x08112a3f
 81129b8:	08112a3f 	.word	0x08112a3f
 81129bc:	08112a3f 	.word	0x08112a3f
 81129c0:	08112a3f 	.word	0x08112a3f
 81129c4:	08112a3f 	.word	0x08112a3f
 81129c8:	08112a3f 	.word	0x08112a3f
 81129cc:	08112a3f 	.word	0x08112a3f
 81129d0:	08112a31 	.word	0x08112a31
 81129d4:	2b40      	cmp	r3, #64	@ 0x40
 81129d6:	d02e      	beq.n	8112a36 <UART_SetConfig+0x8aa>
 81129d8:	e031      	b.n	8112a3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81129da:	f7fd f951 	bl	810fc80 <HAL_RCC_GetPCLK1Freq>
 81129de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81129e0:	e033      	b.n	8112a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81129e2:	f7fd f963 	bl	810fcac <HAL_RCC_GetPCLK2Freq>
 81129e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81129e8:	e02f      	b.n	8112a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81129ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81129ee:	4618      	mov	r0, r3
 81129f0:	f7fe fc14 	bl	811121c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81129f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81129f8:	e027      	b.n	8112a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81129fa:	f107 0318 	add.w	r3, r7, #24
 81129fe:	4618      	mov	r0, r3
 8112a00:	f7fe fd60 	bl	81114c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8112a04:	69fb      	ldr	r3, [r7, #28]
 8112a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112a08:	e01f      	b.n	8112a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8112a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8112ac0 <UART_SetConfig+0x934>)
 8112a0c:	681b      	ldr	r3, [r3, #0]
 8112a0e:	f003 0320 	and.w	r3, r3, #32
 8112a12:	2b00      	cmp	r3, #0
 8112a14:	d009      	beq.n	8112a2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8112a16:	4b2a      	ldr	r3, [pc, #168]	@ (8112ac0 <UART_SetConfig+0x934>)
 8112a18:	681b      	ldr	r3, [r3, #0]
 8112a1a:	08db      	lsrs	r3, r3, #3
 8112a1c:	f003 0303 	and.w	r3, r3, #3
 8112a20:	4a24      	ldr	r2, [pc, #144]	@ (8112ab4 <UART_SetConfig+0x928>)
 8112a22:	fa22 f303 	lsr.w	r3, r2, r3
 8112a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8112a28:	e00f      	b.n	8112a4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8112a2a:	4b22      	ldr	r3, [pc, #136]	@ (8112ab4 <UART_SetConfig+0x928>)
 8112a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112a2e:	e00c      	b.n	8112a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8112a30:	4b21      	ldr	r3, [pc, #132]	@ (8112ab8 <UART_SetConfig+0x92c>)
 8112a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112a34:	e009      	b.n	8112a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8112a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8112a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112a3c:	e005      	b.n	8112a4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8112a3e:	2300      	movs	r3, #0
 8112a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8112a42:	2301      	movs	r3, #1
 8112a44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8112a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8112a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112a4c:	2b00      	cmp	r3, #0
 8112a4e:	f000 80e7 	beq.w	8112c20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8112a52:	697b      	ldr	r3, [r7, #20]
 8112a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112a56:	4a19      	ldr	r2, [pc, #100]	@ (8112abc <UART_SetConfig+0x930>)
 8112a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8112a5c:	461a      	mov	r2, r3
 8112a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8112a64:	005a      	lsls	r2, r3, #1
 8112a66:	697b      	ldr	r3, [r7, #20]
 8112a68:	685b      	ldr	r3, [r3, #4]
 8112a6a:	085b      	lsrs	r3, r3, #1
 8112a6c:	441a      	add	r2, r3
 8112a6e:	697b      	ldr	r3, [r7, #20]
 8112a70:	685b      	ldr	r3, [r3, #4]
 8112a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8112a76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8112a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112a7a:	2b0f      	cmp	r3, #15
 8112a7c:	d916      	bls.n	8112aac <UART_SetConfig+0x920>
 8112a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8112a84:	d212      	bcs.n	8112aac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8112a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112a88:	b29b      	uxth	r3, r3
 8112a8a:	f023 030f 	bic.w	r3, r3, #15
 8112a8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8112a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112a92:	085b      	lsrs	r3, r3, #1
 8112a94:	b29b      	uxth	r3, r3
 8112a96:	f003 0307 	and.w	r3, r3, #7
 8112a9a:	b29a      	uxth	r2, r3
 8112a9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8112a9e:	4313      	orrs	r3, r2
 8112aa0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8112aa2:	697b      	ldr	r3, [r7, #20]
 8112aa4:	681b      	ldr	r3, [r3, #0]
 8112aa6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8112aa8:	60da      	str	r2, [r3, #12]
 8112aaa:	e0b9      	b.n	8112c20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8112aac:	2301      	movs	r3, #1
 8112aae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8112ab2:	e0b5      	b.n	8112c20 <UART_SetConfig+0xa94>
 8112ab4:	03d09000 	.word	0x03d09000
 8112ab8:	003d0900 	.word	0x003d0900
 8112abc:	081285b0 	.word	0x081285b0
 8112ac0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8112ac4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8112ac8:	2b20      	cmp	r3, #32
 8112aca:	dc49      	bgt.n	8112b60 <UART_SetConfig+0x9d4>
 8112acc:	2b00      	cmp	r3, #0
 8112ace:	db7c      	blt.n	8112bca <UART_SetConfig+0xa3e>
 8112ad0:	2b20      	cmp	r3, #32
 8112ad2:	d87a      	bhi.n	8112bca <UART_SetConfig+0xa3e>
 8112ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8112adc <UART_SetConfig+0x950>)
 8112ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8112ada:	bf00      	nop
 8112adc:	08112b67 	.word	0x08112b67
 8112ae0:	08112b6f 	.word	0x08112b6f
 8112ae4:	08112bcb 	.word	0x08112bcb
 8112ae8:	08112bcb 	.word	0x08112bcb
 8112aec:	08112b77 	.word	0x08112b77
 8112af0:	08112bcb 	.word	0x08112bcb
 8112af4:	08112bcb 	.word	0x08112bcb
 8112af8:	08112bcb 	.word	0x08112bcb
 8112afc:	08112b87 	.word	0x08112b87
 8112b00:	08112bcb 	.word	0x08112bcb
 8112b04:	08112bcb 	.word	0x08112bcb
 8112b08:	08112bcb 	.word	0x08112bcb
 8112b0c:	08112bcb 	.word	0x08112bcb
 8112b10:	08112bcb 	.word	0x08112bcb
 8112b14:	08112bcb 	.word	0x08112bcb
 8112b18:	08112bcb 	.word	0x08112bcb
 8112b1c:	08112b97 	.word	0x08112b97
 8112b20:	08112bcb 	.word	0x08112bcb
 8112b24:	08112bcb 	.word	0x08112bcb
 8112b28:	08112bcb 	.word	0x08112bcb
 8112b2c:	08112bcb 	.word	0x08112bcb
 8112b30:	08112bcb 	.word	0x08112bcb
 8112b34:	08112bcb 	.word	0x08112bcb
 8112b38:	08112bcb 	.word	0x08112bcb
 8112b3c:	08112bcb 	.word	0x08112bcb
 8112b40:	08112bcb 	.word	0x08112bcb
 8112b44:	08112bcb 	.word	0x08112bcb
 8112b48:	08112bcb 	.word	0x08112bcb
 8112b4c:	08112bcb 	.word	0x08112bcb
 8112b50:	08112bcb 	.word	0x08112bcb
 8112b54:	08112bcb 	.word	0x08112bcb
 8112b58:	08112bcb 	.word	0x08112bcb
 8112b5c:	08112bbd 	.word	0x08112bbd
 8112b60:	2b40      	cmp	r3, #64	@ 0x40
 8112b62:	d02e      	beq.n	8112bc2 <UART_SetConfig+0xa36>
 8112b64:	e031      	b.n	8112bca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8112b66:	f7fd f88b 	bl	810fc80 <HAL_RCC_GetPCLK1Freq>
 8112b6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8112b6c:	e033      	b.n	8112bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8112b6e:	f7fd f89d 	bl	810fcac <HAL_RCC_GetPCLK2Freq>
 8112b72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8112b74:	e02f      	b.n	8112bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8112b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8112b7a:	4618      	mov	r0, r3
 8112b7c:	f7fe fb4e 	bl	811121c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8112b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112b84:	e027      	b.n	8112bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8112b86:	f107 0318 	add.w	r3, r7, #24
 8112b8a:	4618      	mov	r0, r3
 8112b8c:	f7fe fc9a 	bl	81114c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8112b90:	69fb      	ldr	r3, [r7, #28]
 8112b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112b94:	e01f      	b.n	8112bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8112b96:	4b2d      	ldr	r3, [pc, #180]	@ (8112c4c <UART_SetConfig+0xac0>)
 8112b98:	681b      	ldr	r3, [r3, #0]
 8112b9a:	f003 0320 	and.w	r3, r3, #32
 8112b9e:	2b00      	cmp	r3, #0
 8112ba0:	d009      	beq.n	8112bb6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8112ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8112c4c <UART_SetConfig+0xac0>)
 8112ba4:	681b      	ldr	r3, [r3, #0]
 8112ba6:	08db      	lsrs	r3, r3, #3
 8112ba8:	f003 0303 	and.w	r3, r3, #3
 8112bac:	4a28      	ldr	r2, [pc, #160]	@ (8112c50 <UART_SetConfig+0xac4>)
 8112bae:	fa22 f303 	lsr.w	r3, r2, r3
 8112bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8112bb4:	e00f      	b.n	8112bd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8112bb6:	4b26      	ldr	r3, [pc, #152]	@ (8112c50 <UART_SetConfig+0xac4>)
 8112bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112bba:	e00c      	b.n	8112bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8112bbc:	4b25      	ldr	r3, [pc, #148]	@ (8112c54 <UART_SetConfig+0xac8>)
 8112bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112bc0:	e009      	b.n	8112bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8112bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8112bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8112bc8:	e005      	b.n	8112bd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8112bca:	2300      	movs	r3, #0
 8112bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8112bce:	2301      	movs	r3, #1
 8112bd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8112bd4:	bf00      	nop
    }

    if (pclk != 0U)
 8112bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112bd8:	2b00      	cmp	r3, #0
 8112bda:	d021      	beq.n	8112c20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8112bdc:	697b      	ldr	r3, [r7, #20]
 8112bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112be0:	4a1d      	ldr	r2, [pc, #116]	@ (8112c58 <UART_SetConfig+0xacc>)
 8112be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8112be6:	461a      	mov	r2, r3
 8112be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112bea:	fbb3 f2f2 	udiv	r2, r3, r2
 8112bee:	697b      	ldr	r3, [r7, #20]
 8112bf0:	685b      	ldr	r3, [r3, #4]
 8112bf2:	085b      	lsrs	r3, r3, #1
 8112bf4:	441a      	add	r2, r3
 8112bf6:	697b      	ldr	r3, [r7, #20]
 8112bf8:	685b      	ldr	r3, [r3, #4]
 8112bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8112bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8112c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112c02:	2b0f      	cmp	r3, #15
 8112c04:	d909      	bls.n	8112c1a <UART_SetConfig+0xa8e>
 8112c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8112c0c:	d205      	bcs.n	8112c1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8112c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112c10:	b29a      	uxth	r2, r3
 8112c12:	697b      	ldr	r3, [r7, #20]
 8112c14:	681b      	ldr	r3, [r3, #0]
 8112c16:	60da      	str	r2, [r3, #12]
 8112c18:	e002      	b.n	8112c20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8112c1a:	2301      	movs	r3, #1
 8112c1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8112c20:	697b      	ldr	r3, [r7, #20]
 8112c22:	2201      	movs	r2, #1
 8112c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8112c28:	697b      	ldr	r3, [r7, #20]
 8112c2a:	2201      	movs	r2, #1
 8112c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8112c30:	697b      	ldr	r3, [r7, #20]
 8112c32:	2200      	movs	r2, #0
 8112c34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8112c36:	697b      	ldr	r3, [r7, #20]
 8112c38:	2200      	movs	r2, #0
 8112c3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8112c3c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8112c40:	4618      	mov	r0, r3
 8112c42:	3748      	adds	r7, #72	@ 0x48
 8112c44:	46bd      	mov	sp, r7
 8112c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8112c4a:	bf00      	nop
 8112c4c:	58024400 	.word	0x58024400
 8112c50:	03d09000 	.word	0x03d09000
 8112c54:	003d0900 	.word	0x003d0900
 8112c58:	081285b0 	.word	0x081285b0

08112c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8112c5c:	b480      	push	{r7}
 8112c5e:	b083      	sub	sp, #12
 8112c60:	af00      	add	r7, sp, #0
 8112c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8112c64:	687b      	ldr	r3, [r7, #4]
 8112c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112c68:	f003 0308 	and.w	r3, r3, #8
 8112c6c:	2b00      	cmp	r3, #0
 8112c6e:	d00a      	beq.n	8112c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8112c70:	687b      	ldr	r3, [r7, #4]
 8112c72:	681b      	ldr	r3, [r3, #0]
 8112c74:	685b      	ldr	r3, [r3, #4]
 8112c76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8112c7a:	687b      	ldr	r3, [r7, #4]
 8112c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8112c7e:	687b      	ldr	r3, [r7, #4]
 8112c80:	681b      	ldr	r3, [r3, #0]
 8112c82:	430a      	orrs	r2, r1
 8112c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8112c86:	687b      	ldr	r3, [r7, #4]
 8112c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112c8a:	f003 0301 	and.w	r3, r3, #1
 8112c8e:	2b00      	cmp	r3, #0
 8112c90:	d00a      	beq.n	8112ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8112c92:	687b      	ldr	r3, [r7, #4]
 8112c94:	681b      	ldr	r3, [r3, #0]
 8112c96:	685b      	ldr	r3, [r3, #4]
 8112c98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8112c9c:	687b      	ldr	r3, [r7, #4]
 8112c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112ca0:	687b      	ldr	r3, [r7, #4]
 8112ca2:	681b      	ldr	r3, [r3, #0]
 8112ca4:	430a      	orrs	r2, r1
 8112ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8112ca8:	687b      	ldr	r3, [r7, #4]
 8112caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112cac:	f003 0302 	and.w	r3, r3, #2
 8112cb0:	2b00      	cmp	r3, #0
 8112cb2:	d00a      	beq.n	8112cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8112cb4:	687b      	ldr	r3, [r7, #4]
 8112cb6:	681b      	ldr	r3, [r3, #0]
 8112cb8:	685b      	ldr	r3, [r3, #4]
 8112cba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8112cbe:	687b      	ldr	r3, [r7, #4]
 8112cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8112cc2:	687b      	ldr	r3, [r7, #4]
 8112cc4:	681b      	ldr	r3, [r3, #0]
 8112cc6:	430a      	orrs	r2, r1
 8112cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8112cca:	687b      	ldr	r3, [r7, #4]
 8112ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112cce:	f003 0304 	and.w	r3, r3, #4
 8112cd2:	2b00      	cmp	r3, #0
 8112cd4:	d00a      	beq.n	8112cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8112cd6:	687b      	ldr	r3, [r7, #4]
 8112cd8:	681b      	ldr	r3, [r3, #0]
 8112cda:	685b      	ldr	r3, [r3, #4]
 8112cdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8112ce0:	687b      	ldr	r3, [r7, #4]
 8112ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8112ce4:	687b      	ldr	r3, [r7, #4]
 8112ce6:	681b      	ldr	r3, [r3, #0]
 8112ce8:	430a      	orrs	r2, r1
 8112cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8112cec:	687b      	ldr	r3, [r7, #4]
 8112cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112cf0:	f003 0310 	and.w	r3, r3, #16
 8112cf4:	2b00      	cmp	r3, #0
 8112cf6:	d00a      	beq.n	8112d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8112cf8:	687b      	ldr	r3, [r7, #4]
 8112cfa:	681b      	ldr	r3, [r3, #0]
 8112cfc:	689b      	ldr	r3, [r3, #8]
 8112cfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8112d02:	687b      	ldr	r3, [r7, #4]
 8112d04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8112d06:	687b      	ldr	r3, [r7, #4]
 8112d08:	681b      	ldr	r3, [r3, #0]
 8112d0a:	430a      	orrs	r2, r1
 8112d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8112d0e:	687b      	ldr	r3, [r7, #4]
 8112d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112d12:	f003 0320 	and.w	r3, r3, #32
 8112d16:	2b00      	cmp	r3, #0
 8112d18:	d00a      	beq.n	8112d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8112d1a:	687b      	ldr	r3, [r7, #4]
 8112d1c:	681b      	ldr	r3, [r3, #0]
 8112d1e:	689b      	ldr	r3, [r3, #8]
 8112d20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8112d24:	687b      	ldr	r3, [r7, #4]
 8112d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8112d28:	687b      	ldr	r3, [r7, #4]
 8112d2a:	681b      	ldr	r3, [r3, #0]
 8112d2c:	430a      	orrs	r2, r1
 8112d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8112d30:	687b      	ldr	r3, [r7, #4]
 8112d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8112d38:	2b00      	cmp	r3, #0
 8112d3a:	d01a      	beq.n	8112d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8112d3c:	687b      	ldr	r3, [r7, #4]
 8112d3e:	681b      	ldr	r3, [r3, #0]
 8112d40:	685b      	ldr	r3, [r3, #4]
 8112d42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8112d46:	687b      	ldr	r3, [r7, #4]
 8112d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8112d4a:	687b      	ldr	r3, [r7, #4]
 8112d4c:	681b      	ldr	r3, [r3, #0]
 8112d4e:	430a      	orrs	r2, r1
 8112d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8112d52:	687b      	ldr	r3, [r7, #4]
 8112d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8112d5a:	d10a      	bne.n	8112d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8112d5c:	687b      	ldr	r3, [r7, #4]
 8112d5e:	681b      	ldr	r3, [r3, #0]
 8112d60:	685b      	ldr	r3, [r3, #4]
 8112d62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8112d66:	687b      	ldr	r3, [r7, #4]
 8112d68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8112d6a:	687b      	ldr	r3, [r7, #4]
 8112d6c:	681b      	ldr	r3, [r3, #0]
 8112d6e:	430a      	orrs	r2, r1
 8112d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8112d72:	687b      	ldr	r3, [r7, #4]
 8112d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8112d7a:	2b00      	cmp	r3, #0
 8112d7c:	d00a      	beq.n	8112d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8112d7e:	687b      	ldr	r3, [r7, #4]
 8112d80:	681b      	ldr	r3, [r3, #0]
 8112d82:	685b      	ldr	r3, [r3, #4]
 8112d84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8112d88:	687b      	ldr	r3, [r7, #4]
 8112d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8112d8c:	687b      	ldr	r3, [r7, #4]
 8112d8e:	681b      	ldr	r3, [r3, #0]
 8112d90:	430a      	orrs	r2, r1
 8112d92:	605a      	str	r2, [r3, #4]
  }
}
 8112d94:	bf00      	nop
 8112d96:	370c      	adds	r7, #12
 8112d98:	46bd      	mov	sp, r7
 8112d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112d9e:	4770      	bx	lr

08112da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8112da0:	b580      	push	{r7, lr}
 8112da2:	b098      	sub	sp, #96	@ 0x60
 8112da4:	af02      	add	r7, sp, #8
 8112da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8112da8:	687b      	ldr	r3, [r7, #4]
 8112daa:	2200      	movs	r2, #0
 8112dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8112db0:	f7f9 fe8c 	bl	810cacc <HAL_GetTick>
 8112db4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8112db6:	687b      	ldr	r3, [r7, #4]
 8112db8:	681b      	ldr	r3, [r3, #0]
 8112dba:	681b      	ldr	r3, [r3, #0]
 8112dbc:	f003 0308 	and.w	r3, r3, #8
 8112dc0:	2b08      	cmp	r3, #8
 8112dc2:	d12f      	bne.n	8112e24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8112dc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8112dc8:	9300      	str	r3, [sp, #0]
 8112dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8112dcc:	2200      	movs	r2, #0
 8112dce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8112dd2:	6878      	ldr	r0, [r7, #4]
 8112dd4:	f000 f88e 	bl	8112ef4 <UART_WaitOnFlagUntilTimeout>
 8112dd8:	4603      	mov	r3, r0
 8112dda:	2b00      	cmp	r3, #0
 8112ddc:	d022      	beq.n	8112e24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8112dde:	687b      	ldr	r3, [r7, #4]
 8112de0:	681b      	ldr	r3, [r3, #0]
 8112de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8112de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112de6:	e853 3f00 	ldrex	r3, [r3]
 8112dea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8112dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8112df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8112df4:	687b      	ldr	r3, [r7, #4]
 8112df6:	681b      	ldr	r3, [r3, #0]
 8112df8:	461a      	mov	r2, r3
 8112dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8112dfe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8112e00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8112e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8112e04:	e841 2300 	strex	r3, r2, [r1]
 8112e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8112e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112e0c:	2b00      	cmp	r3, #0
 8112e0e:	d1e6      	bne.n	8112dde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8112e10:	687b      	ldr	r3, [r7, #4]
 8112e12:	2220      	movs	r2, #32
 8112e14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8112e18:	687b      	ldr	r3, [r7, #4]
 8112e1a:	2200      	movs	r2, #0
 8112e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8112e20:	2303      	movs	r3, #3
 8112e22:	e063      	b.n	8112eec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8112e24:	687b      	ldr	r3, [r7, #4]
 8112e26:	681b      	ldr	r3, [r3, #0]
 8112e28:	681b      	ldr	r3, [r3, #0]
 8112e2a:	f003 0304 	and.w	r3, r3, #4
 8112e2e:	2b04      	cmp	r3, #4
 8112e30:	d149      	bne.n	8112ec6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8112e32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8112e36:	9300      	str	r3, [sp, #0]
 8112e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8112e3a:	2200      	movs	r2, #0
 8112e3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8112e40:	6878      	ldr	r0, [r7, #4]
 8112e42:	f000 f857 	bl	8112ef4 <UART_WaitOnFlagUntilTimeout>
 8112e46:	4603      	mov	r3, r0
 8112e48:	2b00      	cmp	r3, #0
 8112e4a:	d03c      	beq.n	8112ec6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8112e4c:	687b      	ldr	r3, [r7, #4]
 8112e4e:	681b      	ldr	r3, [r3, #0]
 8112e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8112e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112e54:	e853 3f00 	ldrex	r3, [r3]
 8112e58:	623b      	str	r3, [r7, #32]
   return(result);
 8112e5a:	6a3b      	ldr	r3, [r7, #32]
 8112e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8112e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8112e62:	687b      	ldr	r3, [r7, #4]
 8112e64:	681b      	ldr	r3, [r3, #0]
 8112e66:	461a      	mov	r2, r3
 8112e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8112e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8112e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8112e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112e72:	e841 2300 	strex	r3, r2, [r1]
 8112e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8112e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112e7a:	2b00      	cmp	r3, #0
 8112e7c:	d1e6      	bne.n	8112e4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8112e7e:	687b      	ldr	r3, [r7, #4]
 8112e80:	681b      	ldr	r3, [r3, #0]
 8112e82:	3308      	adds	r3, #8
 8112e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8112e86:	693b      	ldr	r3, [r7, #16]
 8112e88:	e853 3f00 	ldrex	r3, [r3]
 8112e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8112e8e:	68fb      	ldr	r3, [r7, #12]
 8112e90:	f023 0301 	bic.w	r3, r3, #1
 8112e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8112e96:	687b      	ldr	r3, [r7, #4]
 8112e98:	681b      	ldr	r3, [r3, #0]
 8112e9a:	3308      	adds	r3, #8
 8112e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8112e9e:	61fa      	str	r2, [r7, #28]
 8112ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8112ea2:	69b9      	ldr	r1, [r7, #24]
 8112ea4:	69fa      	ldr	r2, [r7, #28]
 8112ea6:	e841 2300 	strex	r3, r2, [r1]
 8112eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8112eac:	697b      	ldr	r3, [r7, #20]
 8112eae:	2b00      	cmp	r3, #0
 8112eb0:	d1e5      	bne.n	8112e7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8112eb2:	687b      	ldr	r3, [r7, #4]
 8112eb4:	2220      	movs	r2, #32
 8112eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8112eba:	687b      	ldr	r3, [r7, #4]
 8112ebc:	2200      	movs	r2, #0
 8112ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8112ec2:	2303      	movs	r3, #3
 8112ec4:	e012      	b.n	8112eec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8112ec6:	687b      	ldr	r3, [r7, #4]
 8112ec8:	2220      	movs	r2, #32
 8112eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8112ece:	687b      	ldr	r3, [r7, #4]
 8112ed0:	2220      	movs	r2, #32
 8112ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8112ed6:	687b      	ldr	r3, [r7, #4]
 8112ed8:	2200      	movs	r2, #0
 8112eda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8112edc:	687b      	ldr	r3, [r7, #4]
 8112ede:	2200      	movs	r2, #0
 8112ee0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8112ee2:	687b      	ldr	r3, [r7, #4]
 8112ee4:	2200      	movs	r2, #0
 8112ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8112eea:	2300      	movs	r3, #0
}
 8112eec:	4618      	mov	r0, r3
 8112eee:	3758      	adds	r7, #88	@ 0x58
 8112ef0:	46bd      	mov	sp, r7
 8112ef2:	bd80      	pop	{r7, pc}

08112ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8112ef4:	b580      	push	{r7, lr}
 8112ef6:	b084      	sub	sp, #16
 8112ef8:	af00      	add	r7, sp, #0
 8112efa:	60f8      	str	r0, [r7, #12]
 8112efc:	60b9      	str	r1, [r7, #8]
 8112efe:	603b      	str	r3, [r7, #0]
 8112f00:	4613      	mov	r3, r2
 8112f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8112f04:	e04f      	b.n	8112fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8112f06:	69bb      	ldr	r3, [r7, #24]
 8112f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8112f0c:	d04b      	beq.n	8112fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8112f0e:	f7f9 fddd 	bl	810cacc <HAL_GetTick>
 8112f12:	4602      	mov	r2, r0
 8112f14:	683b      	ldr	r3, [r7, #0]
 8112f16:	1ad3      	subs	r3, r2, r3
 8112f18:	69ba      	ldr	r2, [r7, #24]
 8112f1a:	429a      	cmp	r2, r3
 8112f1c:	d302      	bcc.n	8112f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8112f1e:	69bb      	ldr	r3, [r7, #24]
 8112f20:	2b00      	cmp	r3, #0
 8112f22:	d101      	bne.n	8112f28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8112f24:	2303      	movs	r3, #3
 8112f26:	e04e      	b.n	8112fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8112f28:	68fb      	ldr	r3, [r7, #12]
 8112f2a:	681b      	ldr	r3, [r3, #0]
 8112f2c:	681b      	ldr	r3, [r3, #0]
 8112f2e:	f003 0304 	and.w	r3, r3, #4
 8112f32:	2b00      	cmp	r3, #0
 8112f34:	d037      	beq.n	8112fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8112f36:	68bb      	ldr	r3, [r7, #8]
 8112f38:	2b80      	cmp	r3, #128	@ 0x80
 8112f3a:	d034      	beq.n	8112fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8112f3c:	68bb      	ldr	r3, [r7, #8]
 8112f3e:	2b40      	cmp	r3, #64	@ 0x40
 8112f40:	d031      	beq.n	8112fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8112f42:	68fb      	ldr	r3, [r7, #12]
 8112f44:	681b      	ldr	r3, [r3, #0]
 8112f46:	69db      	ldr	r3, [r3, #28]
 8112f48:	f003 0308 	and.w	r3, r3, #8
 8112f4c:	2b08      	cmp	r3, #8
 8112f4e:	d110      	bne.n	8112f72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8112f50:	68fb      	ldr	r3, [r7, #12]
 8112f52:	681b      	ldr	r3, [r3, #0]
 8112f54:	2208      	movs	r2, #8
 8112f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8112f58:	68f8      	ldr	r0, [r7, #12]
 8112f5a:	f000 f838 	bl	8112fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8112f5e:	68fb      	ldr	r3, [r7, #12]
 8112f60:	2208      	movs	r2, #8
 8112f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8112f66:	68fb      	ldr	r3, [r7, #12]
 8112f68:	2200      	movs	r2, #0
 8112f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8112f6e:	2301      	movs	r3, #1
 8112f70:	e029      	b.n	8112fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8112f72:	68fb      	ldr	r3, [r7, #12]
 8112f74:	681b      	ldr	r3, [r3, #0]
 8112f76:	69db      	ldr	r3, [r3, #28]
 8112f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8112f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8112f80:	d111      	bne.n	8112fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8112f82:	68fb      	ldr	r3, [r7, #12]
 8112f84:	681b      	ldr	r3, [r3, #0]
 8112f86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8112f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8112f8c:	68f8      	ldr	r0, [r7, #12]
 8112f8e:	f000 f81e 	bl	8112fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8112f92:	68fb      	ldr	r3, [r7, #12]
 8112f94:	2220      	movs	r2, #32
 8112f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8112f9a:	68fb      	ldr	r3, [r7, #12]
 8112f9c:	2200      	movs	r2, #0
 8112f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8112fa2:	2303      	movs	r3, #3
 8112fa4:	e00f      	b.n	8112fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8112fa6:	68fb      	ldr	r3, [r7, #12]
 8112fa8:	681b      	ldr	r3, [r3, #0]
 8112faa:	69da      	ldr	r2, [r3, #28]
 8112fac:	68bb      	ldr	r3, [r7, #8]
 8112fae:	4013      	ands	r3, r2
 8112fb0:	68ba      	ldr	r2, [r7, #8]
 8112fb2:	429a      	cmp	r2, r3
 8112fb4:	bf0c      	ite	eq
 8112fb6:	2301      	moveq	r3, #1
 8112fb8:	2300      	movne	r3, #0
 8112fba:	b2db      	uxtb	r3, r3
 8112fbc:	461a      	mov	r2, r3
 8112fbe:	79fb      	ldrb	r3, [r7, #7]
 8112fc0:	429a      	cmp	r2, r3
 8112fc2:	d0a0      	beq.n	8112f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8112fc4:	2300      	movs	r3, #0
}
 8112fc6:	4618      	mov	r0, r3
 8112fc8:	3710      	adds	r7, #16
 8112fca:	46bd      	mov	sp, r7
 8112fcc:	bd80      	pop	{r7, pc}

08112fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8112fce:	b480      	push	{r7}
 8112fd0:	b095      	sub	sp, #84	@ 0x54
 8112fd2:	af00      	add	r7, sp, #0
 8112fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8112fd6:	687b      	ldr	r3, [r7, #4]
 8112fd8:	681b      	ldr	r3, [r3, #0]
 8112fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8112fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112fde:	e853 3f00 	ldrex	r3, [r3]
 8112fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8112fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8112fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8112fec:	687b      	ldr	r3, [r7, #4]
 8112fee:	681b      	ldr	r3, [r3, #0]
 8112ff0:	461a      	mov	r2, r3
 8112ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8112ff6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8112ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8112ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8112ffc:	e841 2300 	strex	r3, r2, [r1]
 8113000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8113002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113004:	2b00      	cmp	r3, #0
 8113006:	d1e6      	bne.n	8112fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8113008:	687b      	ldr	r3, [r7, #4]
 811300a:	681b      	ldr	r3, [r3, #0]
 811300c:	3308      	adds	r3, #8
 811300e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8113010:	6a3b      	ldr	r3, [r7, #32]
 8113012:	e853 3f00 	ldrex	r3, [r3]
 8113016:	61fb      	str	r3, [r7, #28]
   return(result);
 8113018:	69fb      	ldr	r3, [r7, #28]
 811301a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 811301e:	f023 0301 	bic.w	r3, r3, #1
 8113022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8113024:	687b      	ldr	r3, [r7, #4]
 8113026:	681b      	ldr	r3, [r3, #0]
 8113028:	3308      	adds	r3, #8
 811302a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 811302c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 811302e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8113030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8113032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8113034:	e841 2300 	strex	r3, r2, [r1]
 8113038:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 811303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811303c:	2b00      	cmp	r3, #0
 811303e:	d1e3      	bne.n	8113008 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8113040:	687b      	ldr	r3, [r7, #4]
 8113042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113044:	2b01      	cmp	r3, #1
 8113046:	d118      	bne.n	811307a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8113048:	687b      	ldr	r3, [r7, #4]
 811304a:	681b      	ldr	r3, [r3, #0]
 811304c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811304e:	68fb      	ldr	r3, [r7, #12]
 8113050:	e853 3f00 	ldrex	r3, [r3]
 8113054:	60bb      	str	r3, [r7, #8]
   return(result);
 8113056:	68bb      	ldr	r3, [r7, #8]
 8113058:	f023 0310 	bic.w	r3, r3, #16
 811305c:	647b      	str	r3, [r7, #68]	@ 0x44
 811305e:	687b      	ldr	r3, [r7, #4]
 8113060:	681b      	ldr	r3, [r3, #0]
 8113062:	461a      	mov	r2, r3
 8113064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113066:	61bb      	str	r3, [r7, #24]
 8113068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811306a:	6979      	ldr	r1, [r7, #20]
 811306c:	69ba      	ldr	r2, [r7, #24]
 811306e:	e841 2300 	strex	r3, r2, [r1]
 8113072:	613b      	str	r3, [r7, #16]
   return(result);
 8113074:	693b      	ldr	r3, [r7, #16]
 8113076:	2b00      	cmp	r3, #0
 8113078:	d1e6      	bne.n	8113048 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 811307a:	687b      	ldr	r3, [r7, #4]
 811307c:	2220      	movs	r2, #32
 811307e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8113082:	687b      	ldr	r3, [r7, #4]
 8113084:	2200      	movs	r2, #0
 8113086:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8113088:	687b      	ldr	r3, [r7, #4]
 811308a:	2200      	movs	r2, #0
 811308c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 811308e:	bf00      	nop
 8113090:	3754      	adds	r7, #84	@ 0x54
 8113092:	46bd      	mov	sp, r7
 8113094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113098:	4770      	bx	lr

0811309a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 811309a:	b480      	push	{r7}
 811309c:	b085      	sub	sp, #20
 811309e:	af00      	add	r7, sp, #0
 81130a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81130a2:	687b      	ldr	r3, [r7, #4]
 81130a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81130a8:	2b01      	cmp	r3, #1
 81130aa:	d101      	bne.n	81130b0 <HAL_UARTEx_DisableFifoMode+0x16>
 81130ac:	2302      	movs	r3, #2
 81130ae:	e027      	b.n	8113100 <HAL_UARTEx_DisableFifoMode+0x66>
 81130b0:	687b      	ldr	r3, [r7, #4]
 81130b2:	2201      	movs	r2, #1
 81130b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81130b8:	687b      	ldr	r3, [r7, #4]
 81130ba:	2224      	movs	r2, #36	@ 0x24
 81130bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81130c0:	687b      	ldr	r3, [r7, #4]
 81130c2:	681b      	ldr	r3, [r3, #0]
 81130c4:	681b      	ldr	r3, [r3, #0]
 81130c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81130c8:	687b      	ldr	r3, [r7, #4]
 81130ca:	681b      	ldr	r3, [r3, #0]
 81130cc:	681a      	ldr	r2, [r3, #0]
 81130ce:	687b      	ldr	r3, [r7, #4]
 81130d0:	681b      	ldr	r3, [r3, #0]
 81130d2:	f022 0201 	bic.w	r2, r2, #1
 81130d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81130d8:	68fb      	ldr	r3, [r7, #12]
 81130da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 81130de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81130e0:	687b      	ldr	r3, [r7, #4]
 81130e2:	2200      	movs	r2, #0
 81130e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81130e6:	687b      	ldr	r3, [r7, #4]
 81130e8:	681b      	ldr	r3, [r3, #0]
 81130ea:	68fa      	ldr	r2, [r7, #12]
 81130ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81130ee:	687b      	ldr	r3, [r7, #4]
 81130f0:	2220      	movs	r2, #32
 81130f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81130f6:	687b      	ldr	r3, [r7, #4]
 81130f8:	2200      	movs	r2, #0
 81130fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81130fe:	2300      	movs	r3, #0
}
 8113100:	4618      	mov	r0, r3
 8113102:	3714      	adds	r7, #20
 8113104:	46bd      	mov	sp, r7
 8113106:	f85d 7b04 	ldr.w	r7, [sp], #4
 811310a:	4770      	bx	lr

0811310c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 811310c:	b580      	push	{r7, lr}
 811310e:	b084      	sub	sp, #16
 8113110:	af00      	add	r7, sp, #0
 8113112:	6078      	str	r0, [r7, #4]
 8113114:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8113116:	687b      	ldr	r3, [r7, #4]
 8113118:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 811311c:	2b01      	cmp	r3, #1
 811311e:	d101      	bne.n	8113124 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8113120:	2302      	movs	r3, #2
 8113122:	e02d      	b.n	8113180 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8113124:	687b      	ldr	r3, [r7, #4]
 8113126:	2201      	movs	r2, #1
 8113128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 811312c:	687b      	ldr	r3, [r7, #4]
 811312e:	2224      	movs	r2, #36	@ 0x24
 8113130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8113134:	687b      	ldr	r3, [r7, #4]
 8113136:	681b      	ldr	r3, [r3, #0]
 8113138:	681b      	ldr	r3, [r3, #0]
 811313a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 811313c:	687b      	ldr	r3, [r7, #4]
 811313e:	681b      	ldr	r3, [r3, #0]
 8113140:	681a      	ldr	r2, [r3, #0]
 8113142:	687b      	ldr	r3, [r7, #4]
 8113144:	681b      	ldr	r3, [r3, #0]
 8113146:	f022 0201 	bic.w	r2, r2, #1
 811314a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 811314c:	687b      	ldr	r3, [r7, #4]
 811314e:	681b      	ldr	r3, [r3, #0]
 8113150:	689b      	ldr	r3, [r3, #8]
 8113152:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8113156:	687b      	ldr	r3, [r7, #4]
 8113158:	681b      	ldr	r3, [r3, #0]
 811315a:	683a      	ldr	r2, [r7, #0]
 811315c:	430a      	orrs	r2, r1
 811315e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8113160:	6878      	ldr	r0, [r7, #4]
 8113162:	f000 f84f 	bl	8113204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8113166:	687b      	ldr	r3, [r7, #4]
 8113168:	681b      	ldr	r3, [r3, #0]
 811316a:	68fa      	ldr	r2, [r7, #12]
 811316c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 811316e:	687b      	ldr	r3, [r7, #4]
 8113170:	2220      	movs	r2, #32
 8113172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8113176:	687b      	ldr	r3, [r7, #4]
 8113178:	2200      	movs	r2, #0
 811317a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 811317e:	2300      	movs	r3, #0
}
 8113180:	4618      	mov	r0, r3
 8113182:	3710      	adds	r7, #16
 8113184:	46bd      	mov	sp, r7
 8113186:	bd80      	pop	{r7, pc}

08113188 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8113188:	b580      	push	{r7, lr}
 811318a:	b084      	sub	sp, #16
 811318c:	af00      	add	r7, sp, #0
 811318e:	6078      	str	r0, [r7, #4]
 8113190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8113192:	687b      	ldr	r3, [r7, #4]
 8113194:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8113198:	2b01      	cmp	r3, #1
 811319a:	d101      	bne.n	81131a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 811319c:	2302      	movs	r3, #2
 811319e:	e02d      	b.n	81131fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81131a0:	687b      	ldr	r3, [r7, #4]
 81131a2:	2201      	movs	r2, #1
 81131a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81131a8:	687b      	ldr	r3, [r7, #4]
 81131aa:	2224      	movs	r2, #36	@ 0x24
 81131ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81131b0:	687b      	ldr	r3, [r7, #4]
 81131b2:	681b      	ldr	r3, [r3, #0]
 81131b4:	681b      	ldr	r3, [r3, #0]
 81131b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81131b8:	687b      	ldr	r3, [r7, #4]
 81131ba:	681b      	ldr	r3, [r3, #0]
 81131bc:	681a      	ldr	r2, [r3, #0]
 81131be:	687b      	ldr	r3, [r7, #4]
 81131c0:	681b      	ldr	r3, [r3, #0]
 81131c2:	f022 0201 	bic.w	r2, r2, #1
 81131c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81131c8:	687b      	ldr	r3, [r7, #4]
 81131ca:	681b      	ldr	r3, [r3, #0]
 81131cc:	689b      	ldr	r3, [r3, #8]
 81131ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 81131d2:	687b      	ldr	r3, [r7, #4]
 81131d4:	681b      	ldr	r3, [r3, #0]
 81131d6:	683a      	ldr	r2, [r7, #0]
 81131d8:	430a      	orrs	r2, r1
 81131da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81131dc:	6878      	ldr	r0, [r7, #4]
 81131de:	f000 f811 	bl	8113204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81131e2:	687b      	ldr	r3, [r7, #4]
 81131e4:	681b      	ldr	r3, [r3, #0]
 81131e6:	68fa      	ldr	r2, [r7, #12]
 81131e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81131ea:	687b      	ldr	r3, [r7, #4]
 81131ec:	2220      	movs	r2, #32
 81131ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81131f2:	687b      	ldr	r3, [r7, #4]
 81131f4:	2200      	movs	r2, #0
 81131f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81131fa:	2300      	movs	r3, #0
}
 81131fc:	4618      	mov	r0, r3
 81131fe:	3710      	adds	r7, #16
 8113200:	46bd      	mov	sp, r7
 8113202:	bd80      	pop	{r7, pc}

08113204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8113204:	b480      	push	{r7}
 8113206:	b085      	sub	sp, #20
 8113208:	af00      	add	r7, sp, #0
 811320a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 811320c:	687b      	ldr	r3, [r7, #4]
 811320e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8113210:	2b00      	cmp	r3, #0
 8113212:	d108      	bne.n	8113226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8113214:	687b      	ldr	r3, [r7, #4]
 8113216:	2201      	movs	r2, #1
 8113218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 811321c:	687b      	ldr	r3, [r7, #4]
 811321e:	2201      	movs	r2, #1
 8113220:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8113224:	e031      	b.n	811328a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8113226:	2310      	movs	r3, #16
 8113228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 811322a:	2310      	movs	r3, #16
 811322c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 811322e:	687b      	ldr	r3, [r7, #4]
 8113230:	681b      	ldr	r3, [r3, #0]
 8113232:	689b      	ldr	r3, [r3, #8]
 8113234:	0e5b      	lsrs	r3, r3, #25
 8113236:	b2db      	uxtb	r3, r3
 8113238:	f003 0307 	and.w	r3, r3, #7
 811323c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 811323e:	687b      	ldr	r3, [r7, #4]
 8113240:	681b      	ldr	r3, [r3, #0]
 8113242:	689b      	ldr	r3, [r3, #8]
 8113244:	0f5b      	lsrs	r3, r3, #29
 8113246:	b2db      	uxtb	r3, r3
 8113248:	f003 0307 	and.w	r3, r3, #7
 811324c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 811324e:	7bbb      	ldrb	r3, [r7, #14]
 8113250:	7b3a      	ldrb	r2, [r7, #12]
 8113252:	4911      	ldr	r1, [pc, #68]	@ (8113298 <UARTEx_SetNbDataToProcess+0x94>)
 8113254:	5c8a      	ldrb	r2, [r1, r2]
 8113256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 811325a:	7b3a      	ldrb	r2, [r7, #12]
 811325c:	490f      	ldr	r1, [pc, #60]	@ (811329c <UARTEx_SetNbDataToProcess+0x98>)
 811325e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8113260:	fb93 f3f2 	sdiv	r3, r3, r2
 8113264:	b29a      	uxth	r2, r3
 8113266:	687b      	ldr	r3, [r7, #4]
 8113268:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 811326c:	7bfb      	ldrb	r3, [r7, #15]
 811326e:	7b7a      	ldrb	r2, [r7, #13]
 8113270:	4909      	ldr	r1, [pc, #36]	@ (8113298 <UARTEx_SetNbDataToProcess+0x94>)
 8113272:	5c8a      	ldrb	r2, [r1, r2]
 8113274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8113278:	7b7a      	ldrb	r2, [r7, #13]
 811327a:	4908      	ldr	r1, [pc, #32]	@ (811329c <UARTEx_SetNbDataToProcess+0x98>)
 811327c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 811327e:	fb93 f3f2 	sdiv	r3, r3, r2
 8113282:	b29a      	uxth	r2, r3
 8113284:	687b      	ldr	r3, [r7, #4]
 8113286:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 811328a:	bf00      	nop
 811328c:	3714      	adds	r7, #20
 811328e:	46bd      	mov	sp, r7
 8113290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113294:	4770      	bx	lr
 8113296:	bf00      	nop
 8113298:	081285c8 	.word	0x081285c8
 811329c:	081285d0 	.word	0x081285d0

081132a0 <__NVIC_SetPriority>:
{
 81132a0:	b480      	push	{r7}
 81132a2:	b083      	sub	sp, #12
 81132a4:	af00      	add	r7, sp, #0
 81132a6:	4603      	mov	r3, r0
 81132a8:	6039      	str	r1, [r7, #0]
 81132aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81132ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81132b0:	2b00      	cmp	r3, #0
 81132b2:	db0a      	blt.n	81132ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81132b4:	683b      	ldr	r3, [r7, #0]
 81132b6:	b2da      	uxtb	r2, r3
 81132b8:	490c      	ldr	r1, [pc, #48]	@ (81132ec <__NVIC_SetPriority+0x4c>)
 81132ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81132be:	0112      	lsls	r2, r2, #4
 81132c0:	b2d2      	uxtb	r2, r2
 81132c2:	440b      	add	r3, r1
 81132c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81132c8:	e00a      	b.n	81132e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81132ca:	683b      	ldr	r3, [r7, #0]
 81132cc:	b2da      	uxtb	r2, r3
 81132ce:	4908      	ldr	r1, [pc, #32]	@ (81132f0 <__NVIC_SetPriority+0x50>)
 81132d0:	88fb      	ldrh	r3, [r7, #6]
 81132d2:	f003 030f 	and.w	r3, r3, #15
 81132d6:	3b04      	subs	r3, #4
 81132d8:	0112      	lsls	r2, r2, #4
 81132da:	b2d2      	uxtb	r2, r2
 81132dc:	440b      	add	r3, r1
 81132de:	761a      	strb	r2, [r3, #24]
}
 81132e0:	bf00      	nop
 81132e2:	370c      	adds	r7, #12
 81132e4:	46bd      	mov	sp, r7
 81132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81132ea:	4770      	bx	lr
 81132ec:	e000e100 	.word	0xe000e100
 81132f0:	e000ed00 	.word	0xe000ed00

081132f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81132f4:	b580      	push	{r7, lr}
 81132f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81132f8:	4b05      	ldr	r3, [pc, #20]	@ (8113310 <SysTick_Handler+0x1c>)
 81132fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81132fc:	f003 fd56 	bl	8116dac <xTaskGetSchedulerState>
 8113300:	4603      	mov	r3, r0
 8113302:	2b01      	cmp	r3, #1
 8113304:	d001      	beq.n	811330a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8113306:	f001 f90f 	bl	8114528 <xPortSysTickHandler>
  }
}
 811330a:	bf00      	nop
 811330c:	bd80      	pop	{r7, pc}
 811330e:	bf00      	nop
 8113310:	e000e010 	.word	0xe000e010

08113314 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8113314:	b580      	push	{r7, lr}
 8113316:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8113318:	2100      	movs	r1, #0
 811331a:	f06f 0004 	mvn.w	r0, #4
 811331e:	f7ff ffbf 	bl	81132a0 <__NVIC_SetPriority>
#endif
}
 8113322:	bf00      	nop
 8113324:	bd80      	pop	{r7, pc}
	...

08113328 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8113328:	b480      	push	{r7}
 811332a:	b083      	sub	sp, #12
 811332c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811332e:	f3ef 8305 	mrs	r3, IPSR
 8113332:	603b      	str	r3, [r7, #0]
  return(result);
 8113334:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8113336:	2b00      	cmp	r3, #0
 8113338:	d003      	beq.n	8113342 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 811333a:	f06f 0305 	mvn.w	r3, #5
 811333e:	607b      	str	r3, [r7, #4]
 8113340:	e00c      	b.n	811335c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8113342:	4b0a      	ldr	r3, [pc, #40]	@ (811336c <osKernelInitialize+0x44>)
 8113344:	681b      	ldr	r3, [r3, #0]
 8113346:	2b00      	cmp	r3, #0
 8113348:	d105      	bne.n	8113356 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 811334a:	4b08      	ldr	r3, [pc, #32]	@ (811336c <osKernelInitialize+0x44>)
 811334c:	2201      	movs	r2, #1
 811334e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8113350:	2300      	movs	r3, #0
 8113352:	607b      	str	r3, [r7, #4]
 8113354:	e002      	b.n	811335c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8113356:	f04f 33ff 	mov.w	r3, #4294967295
 811335a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 811335c:	687b      	ldr	r3, [r7, #4]
}
 811335e:	4618      	mov	r0, r3
 8113360:	370c      	adds	r7, #12
 8113362:	46bd      	mov	sp, r7
 8113364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113368:	4770      	bx	lr
 811336a:	bf00      	nop
 811336c:	10000424 	.word	0x10000424

08113370 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8113370:	b580      	push	{r7, lr}
 8113372:	b082      	sub	sp, #8
 8113374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113376:	f3ef 8305 	mrs	r3, IPSR
 811337a:	603b      	str	r3, [r7, #0]
  return(result);
 811337c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 811337e:	2b00      	cmp	r3, #0
 8113380:	d003      	beq.n	811338a <osKernelStart+0x1a>
    stat = osErrorISR;
 8113382:	f06f 0305 	mvn.w	r3, #5
 8113386:	607b      	str	r3, [r7, #4]
 8113388:	e010      	b.n	81133ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 811338a:	4b0b      	ldr	r3, [pc, #44]	@ (81133b8 <osKernelStart+0x48>)
 811338c:	681b      	ldr	r3, [r3, #0]
 811338e:	2b01      	cmp	r3, #1
 8113390:	d109      	bne.n	81133a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8113392:	f7ff ffbf 	bl	8113314 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8113396:	4b08      	ldr	r3, [pc, #32]	@ (81133b8 <osKernelStart+0x48>)
 8113398:	2202      	movs	r2, #2
 811339a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 811339c:	f003 f858 	bl	8116450 <vTaskStartScheduler>
      stat = osOK;
 81133a0:	2300      	movs	r3, #0
 81133a2:	607b      	str	r3, [r7, #4]
 81133a4:	e002      	b.n	81133ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 81133a6:	f04f 33ff 	mov.w	r3, #4294967295
 81133aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81133ac:	687b      	ldr	r3, [r7, #4]
}
 81133ae:	4618      	mov	r0, r3
 81133b0:	3708      	adds	r7, #8
 81133b2:	46bd      	mov	sp, r7
 81133b4:	bd80      	pop	{r7, pc}
 81133b6:	bf00      	nop
 81133b8:	10000424 	.word	0x10000424

081133bc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 81133bc:	b580      	push	{r7, lr}
 81133be:	b082      	sub	sp, #8
 81133c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81133c2:	f3ef 8305 	mrs	r3, IPSR
 81133c6:	603b      	str	r3, [r7, #0]
  return(result);
 81133c8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 81133ca:	2b00      	cmp	r3, #0
 81133cc:	d003      	beq.n	81133d6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 81133ce:	f003 f96b 	bl	81166a8 <xTaskGetTickCountFromISR>
 81133d2:	6078      	str	r0, [r7, #4]
 81133d4:	e002      	b.n	81133dc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 81133d6:	f003 f957 	bl	8116688 <xTaskGetTickCount>
 81133da:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 81133dc:	687b      	ldr	r3, [r7, #4]
}
 81133de:	4618      	mov	r0, r3
 81133e0:	3708      	adds	r7, #8
 81133e2:	46bd      	mov	sp, r7
 81133e4:	bd80      	pop	{r7, pc}

081133e6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81133e6:	b580      	push	{r7, lr}
 81133e8:	b08e      	sub	sp, #56	@ 0x38
 81133ea:	af04      	add	r7, sp, #16
 81133ec:	60f8      	str	r0, [r7, #12]
 81133ee:	60b9      	str	r1, [r7, #8]
 81133f0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81133f2:	2300      	movs	r3, #0
 81133f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81133f6:	f3ef 8305 	mrs	r3, IPSR
 81133fa:	617b      	str	r3, [r7, #20]
  return(result);
 81133fc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81133fe:	2b00      	cmp	r3, #0
 8113400:	d17e      	bne.n	8113500 <osThreadNew+0x11a>
 8113402:	68fb      	ldr	r3, [r7, #12]
 8113404:	2b00      	cmp	r3, #0
 8113406:	d07b      	beq.n	8113500 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8113408:	2380      	movs	r3, #128	@ 0x80
 811340a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 811340c:	2318      	movs	r3, #24
 811340e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8113410:	2300      	movs	r3, #0
 8113412:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8113414:	f04f 33ff 	mov.w	r3, #4294967295
 8113418:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 811341a:	687b      	ldr	r3, [r7, #4]
 811341c:	2b00      	cmp	r3, #0
 811341e:	d045      	beq.n	81134ac <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8113420:	687b      	ldr	r3, [r7, #4]
 8113422:	681b      	ldr	r3, [r3, #0]
 8113424:	2b00      	cmp	r3, #0
 8113426:	d002      	beq.n	811342e <osThreadNew+0x48>
        name = attr->name;
 8113428:	687b      	ldr	r3, [r7, #4]
 811342a:	681b      	ldr	r3, [r3, #0]
 811342c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 811342e:	687b      	ldr	r3, [r7, #4]
 8113430:	699b      	ldr	r3, [r3, #24]
 8113432:	2b00      	cmp	r3, #0
 8113434:	d002      	beq.n	811343c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8113436:	687b      	ldr	r3, [r7, #4]
 8113438:	699b      	ldr	r3, [r3, #24]
 811343a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 811343c:	69fb      	ldr	r3, [r7, #28]
 811343e:	2b00      	cmp	r3, #0
 8113440:	d008      	beq.n	8113454 <osThreadNew+0x6e>
 8113442:	69fb      	ldr	r3, [r7, #28]
 8113444:	2b38      	cmp	r3, #56	@ 0x38
 8113446:	d805      	bhi.n	8113454 <osThreadNew+0x6e>
 8113448:	687b      	ldr	r3, [r7, #4]
 811344a:	685b      	ldr	r3, [r3, #4]
 811344c:	f003 0301 	and.w	r3, r3, #1
 8113450:	2b00      	cmp	r3, #0
 8113452:	d001      	beq.n	8113458 <osThreadNew+0x72>
        return (NULL);
 8113454:	2300      	movs	r3, #0
 8113456:	e054      	b.n	8113502 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8113458:	687b      	ldr	r3, [r7, #4]
 811345a:	695b      	ldr	r3, [r3, #20]
 811345c:	2b00      	cmp	r3, #0
 811345e:	d003      	beq.n	8113468 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8113460:	687b      	ldr	r3, [r7, #4]
 8113462:	695b      	ldr	r3, [r3, #20]
 8113464:	089b      	lsrs	r3, r3, #2
 8113466:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8113468:	687b      	ldr	r3, [r7, #4]
 811346a:	689b      	ldr	r3, [r3, #8]
 811346c:	2b00      	cmp	r3, #0
 811346e:	d00e      	beq.n	811348e <osThreadNew+0xa8>
 8113470:	687b      	ldr	r3, [r7, #4]
 8113472:	68db      	ldr	r3, [r3, #12]
 8113474:	2ba7      	cmp	r3, #167	@ 0xa7
 8113476:	d90a      	bls.n	811348e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8113478:	687b      	ldr	r3, [r7, #4]
 811347a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 811347c:	2b00      	cmp	r3, #0
 811347e:	d006      	beq.n	811348e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8113480:	687b      	ldr	r3, [r7, #4]
 8113482:	695b      	ldr	r3, [r3, #20]
 8113484:	2b00      	cmp	r3, #0
 8113486:	d002      	beq.n	811348e <osThreadNew+0xa8>
        mem = 1;
 8113488:	2301      	movs	r3, #1
 811348a:	61bb      	str	r3, [r7, #24]
 811348c:	e010      	b.n	81134b0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 811348e:	687b      	ldr	r3, [r7, #4]
 8113490:	689b      	ldr	r3, [r3, #8]
 8113492:	2b00      	cmp	r3, #0
 8113494:	d10c      	bne.n	81134b0 <osThreadNew+0xca>
 8113496:	687b      	ldr	r3, [r7, #4]
 8113498:	68db      	ldr	r3, [r3, #12]
 811349a:	2b00      	cmp	r3, #0
 811349c:	d108      	bne.n	81134b0 <osThreadNew+0xca>
 811349e:	687b      	ldr	r3, [r7, #4]
 81134a0:	691b      	ldr	r3, [r3, #16]
 81134a2:	2b00      	cmp	r3, #0
 81134a4:	d104      	bne.n	81134b0 <osThreadNew+0xca>
          mem = 0;
 81134a6:	2300      	movs	r3, #0
 81134a8:	61bb      	str	r3, [r7, #24]
 81134aa:	e001      	b.n	81134b0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81134ac:	2300      	movs	r3, #0
 81134ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81134b0:	69bb      	ldr	r3, [r7, #24]
 81134b2:	2b01      	cmp	r3, #1
 81134b4:	d110      	bne.n	81134d8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81134b6:	687b      	ldr	r3, [r7, #4]
 81134b8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81134ba:	687a      	ldr	r2, [r7, #4]
 81134bc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81134be:	9202      	str	r2, [sp, #8]
 81134c0:	9301      	str	r3, [sp, #4]
 81134c2:	69fb      	ldr	r3, [r7, #28]
 81134c4:	9300      	str	r3, [sp, #0]
 81134c6:	68bb      	ldr	r3, [r7, #8]
 81134c8:	6a3a      	ldr	r2, [r7, #32]
 81134ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81134cc:	68f8      	ldr	r0, [r7, #12]
 81134ce:	f002 fdcb 	bl	8116068 <xTaskCreateStatic>
 81134d2:	4603      	mov	r3, r0
 81134d4:	613b      	str	r3, [r7, #16]
 81134d6:	e013      	b.n	8113500 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81134d8:	69bb      	ldr	r3, [r7, #24]
 81134da:	2b00      	cmp	r3, #0
 81134dc:	d110      	bne.n	8113500 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81134de:	6a3b      	ldr	r3, [r7, #32]
 81134e0:	b29a      	uxth	r2, r3
 81134e2:	f107 0310 	add.w	r3, r7, #16
 81134e6:	9301      	str	r3, [sp, #4]
 81134e8:	69fb      	ldr	r3, [r7, #28]
 81134ea:	9300      	str	r3, [sp, #0]
 81134ec:	68bb      	ldr	r3, [r7, #8]
 81134ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81134f0:	68f8      	ldr	r0, [r7, #12]
 81134f2:	f002 fe19 	bl	8116128 <xTaskCreate>
 81134f6:	4603      	mov	r3, r0
 81134f8:	2b01      	cmp	r3, #1
 81134fa:	d001      	beq.n	8113500 <osThreadNew+0x11a>
            hTask = NULL;
 81134fc:	2300      	movs	r3, #0
 81134fe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8113500:	693b      	ldr	r3, [r7, #16]
}
 8113502:	4618      	mov	r0, r3
 8113504:	3728      	adds	r7, #40	@ 0x28
 8113506:	46bd      	mov	sp, r7
 8113508:	bd80      	pop	{r7, pc}

0811350a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 811350a:	b580      	push	{r7, lr}
 811350c:	b084      	sub	sp, #16
 811350e:	af00      	add	r7, sp, #0
 8113510:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113512:	f3ef 8305 	mrs	r3, IPSR
 8113516:	60bb      	str	r3, [r7, #8]
  return(result);
 8113518:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 811351a:	2b00      	cmp	r3, #0
 811351c:	d003      	beq.n	8113526 <osDelay+0x1c>
    stat = osErrorISR;
 811351e:	f06f 0305 	mvn.w	r3, #5
 8113522:	60fb      	str	r3, [r7, #12]
 8113524:	e007      	b.n	8113536 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8113526:	2300      	movs	r3, #0
 8113528:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 811352a:	687b      	ldr	r3, [r7, #4]
 811352c:	2b00      	cmp	r3, #0
 811352e:	d002      	beq.n	8113536 <osDelay+0x2c>
      vTaskDelay(ticks);
 8113530:	6878      	ldr	r0, [r7, #4]
 8113532:	f002 ff57 	bl	81163e4 <vTaskDelay>
    }
  }

  return (stat);
 8113536:	68fb      	ldr	r3, [r7, #12]
}
 8113538:	4618      	mov	r0, r3
 811353a:	3710      	adds	r7, #16
 811353c:	46bd      	mov	sp, r7
 811353e:	bd80      	pop	{r7, pc}

08113540 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8113540:	b580      	push	{r7, lr}
 8113542:	b088      	sub	sp, #32
 8113544:	af00      	add	r7, sp, #0
 8113546:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8113548:	2300      	movs	r3, #0
 811354a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811354c:	f3ef 8305 	mrs	r3, IPSR
 8113550:	60bb      	str	r3, [r7, #8]
  return(result);
 8113552:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8113554:	2b00      	cmp	r3, #0
 8113556:	d174      	bne.n	8113642 <osMutexNew+0x102>
    if (attr != NULL) {
 8113558:	687b      	ldr	r3, [r7, #4]
 811355a:	2b00      	cmp	r3, #0
 811355c:	d003      	beq.n	8113566 <osMutexNew+0x26>
      type = attr->attr_bits;
 811355e:	687b      	ldr	r3, [r7, #4]
 8113560:	685b      	ldr	r3, [r3, #4]
 8113562:	61bb      	str	r3, [r7, #24]
 8113564:	e001      	b.n	811356a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8113566:	2300      	movs	r3, #0
 8113568:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 811356a:	69bb      	ldr	r3, [r7, #24]
 811356c:	f003 0301 	and.w	r3, r3, #1
 8113570:	2b00      	cmp	r3, #0
 8113572:	d002      	beq.n	811357a <osMutexNew+0x3a>
      rmtx = 1U;
 8113574:	2301      	movs	r3, #1
 8113576:	617b      	str	r3, [r7, #20]
 8113578:	e001      	b.n	811357e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 811357a:	2300      	movs	r3, #0
 811357c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 811357e:	69bb      	ldr	r3, [r7, #24]
 8113580:	f003 0308 	and.w	r3, r3, #8
 8113584:	2b00      	cmp	r3, #0
 8113586:	d15c      	bne.n	8113642 <osMutexNew+0x102>
      mem = -1;
 8113588:	f04f 33ff 	mov.w	r3, #4294967295
 811358c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 811358e:	687b      	ldr	r3, [r7, #4]
 8113590:	2b00      	cmp	r3, #0
 8113592:	d015      	beq.n	81135c0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8113594:	687b      	ldr	r3, [r7, #4]
 8113596:	689b      	ldr	r3, [r3, #8]
 8113598:	2b00      	cmp	r3, #0
 811359a:	d006      	beq.n	81135aa <osMutexNew+0x6a>
 811359c:	687b      	ldr	r3, [r7, #4]
 811359e:	68db      	ldr	r3, [r3, #12]
 81135a0:	2b4f      	cmp	r3, #79	@ 0x4f
 81135a2:	d902      	bls.n	81135aa <osMutexNew+0x6a>
          mem = 1;
 81135a4:	2301      	movs	r3, #1
 81135a6:	613b      	str	r3, [r7, #16]
 81135a8:	e00c      	b.n	81135c4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 81135aa:	687b      	ldr	r3, [r7, #4]
 81135ac:	689b      	ldr	r3, [r3, #8]
 81135ae:	2b00      	cmp	r3, #0
 81135b0:	d108      	bne.n	81135c4 <osMutexNew+0x84>
 81135b2:	687b      	ldr	r3, [r7, #4]
 81135b4:	68db      	ldr	r3, [r3, #12]
 81135b6:	2b00      	cmp	r3, #0
 81135b8:	d104      	bne.n	81135c4 <osMutexNew+0x84>
            mem = 0;
 81135ba:	2300      	movs	r3, #0
 81135bc:	613b      	str	r3, [r7, #16]
 81135be:	e001      	b.n	81135c4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 81135c0:	2300      	movs	r3, #0
 81135c2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 81135c4:	693b      	ldr	r3, [r7, #16]
 81135c6:	2b01      	cmp	r3, #1
 81135c8:	d112      	bne.n	81135f0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 81135ca:	697b      	ldr	r3, [r7, #20]
 81135cc:	2b00      	cmp	r3, #0
 81135ce:	d007      	beq.n	81135e0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 81135d0:	687b      	ldr	r3, [r7, #4]
 81135d2:	689b      	ldr	r3, [r3, #8]
 81135d4:	4619      	mov	r1, r3
 81135d6:	2004      	movs	r0, #4
 81135d8:	f001 f9af 	bl	811493a <xQueueCreateMutexStatic>
 81135dc:	61f8      	str	r0, [r7, #28]
 81135de:	e016      	b.n	811360e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 81135e0:	687b      	ldr	r3, [r7, #4]
 81135e2:	689b      	ldr	r3, [r3, #8]
 81135e4:	4619      	mov	r1, r3
 81135e6:	2001      	movs	r0, #1
 81135e8:	f001 f9a7 	bl	811493a <xQueueCreateMutexStatic>
 81135ec:	61f8      	str	r0, [r7, #28]
 81135ee:	e00e      	b.n	811360e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 81135f0:	693b      	ldr	r3, [r7, #16]
 81135f2:	2b00      	cmp	r3, #0
 81135f4:	d10b      	bne.n	811360e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 81135f6:	697b      	ldr	r3, [r7, #20]
 81135f8:	2b00      	cmp	r3, #0
 81135fa:	d004      	beq.n	8113606 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 81135fc:	2004      	movs	r0, #4
 81135fe:	f001 f984 	bl	811490a <xQueueCreateMutex>
 8113602:	61f8      	str	r0, [r7, #28]
 8113604:	e003      	b.n	811360e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8113606:	2001      	movs	r0, #1
 8113608:	f001 f97f 	bl	811490a <xQueueCreateMutex>
 811360c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 811360e:	69fb      	ldr	r3, [r7, #28]
 8113610:	2b00      	cmp	r3, #0
 8113612:	d00c      	beq.n	811362e <osMutexNew+0xee>
        if (attr != NULL) {
 8113614:	687b      	ldr	r3, [r7, #4]
 8113616:	2b00      	cmp	r3, #0
 8113618:	d003      	beq.n	8113622 <osMutexNew+0xe2>
          name = attr->name;
 811361a:	687b      	ldr	r3, [r7, #4]
 811361c:	681b      	ldr	r3, [r3, #0]
 811361e:	60fb      	str	r3, [r7, #12]
 8113620:	e001      	b.n	8113626 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8113622:	2300      	movs	r3, #0
 8113624:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8113626:	68f9      	ldr	r1, [r7, #12]
 8113628:	69f8      	ldr	r0, [r7, #28]
 811362a:	f002 f86b 	bl	8115704 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 811362e:	69fb      	ldr	r3, [r7, #28]
 8113630:	2b00      	cmp	r3, #0
 8113632:	d006      	beq.n	8113642 <osMutexNew+0x102>
 8113634:	697b      	ldr	r3, [r7, #20]
 8113636:	2b00      	cmp	r3, #0
 8113638:	d003      	beq.n	8113642 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 811363a:	69fb      	ldr	r3, [r7, #28]
 811363c:	f043 0301 	orr.w	r3, r3, #1
 8113640:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8113642:	69fb      	ldr	r3, [r7, #28]
}
 8113644:	4618      	mov	r0, r3
 8113646:	3720      	adds	r7, #32
 8113648:	46bd      	mov	sp, r7
 811364a:	bd80      	pop	{r7, pc}

0811364c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 811364c:	b580      	push	{r7, lr}
 811364e:	b086      	sub	sp, #24
 8113650:	af00      	add	r7, sp, #0
 8113652:	6078      	str	r0, [r7, #4]
 8113654:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8113656:	687b      	ldr	r3, [r7, #4]
 8113658:	f023 0301 	bic.w	r3, r3, #1
 811365c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 811365e:	687b      	ldr	r3, [r7, #4]
 8113660:	f003 0301 	and.w	r3, r3, #1
 8113664:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8113666:	2300      	movs	r3, #0
 8113668:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811366a:	f3ef 8305 	mrs	r3, IPSR
 811366e:	60bb      	str	r3, [r7, #8]
  return(result);
 8113670:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8113672:	2b00      	cmp	r3, #0
 8113674:	d003      	beq.n	811367e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8113676:	f06f 0305 	mvn.w	r3, #5
 811367a:	617b      	str	r3, [r7, #20]
 811367c:	e02c      	b.n	81136d8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 811367e:	693b      	ldr	r3, [r7, #16]
 8113680:	2b00      	cmp	r3, #0
 8113682:	d103      	bne.n	811368c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8113684:	f06f 0303 	mvn.w	r3, #3
 8113688:	617b      	str	r3, [r7, #20]
 811368a:	e025      	b.n	81136d8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 811368c:	68fb      	ldr	r3, [r7, #12]
 811368e:	2b00      	cmp	r3, #0
 8113690:	d011      	beq.n	81136b6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8113692:	6839      	ldr	r1, [r7, #0]
 8113694:	6938      	ldr	r0, [r7, #16]
 8113696:	f001 f9a0 	bl	81149da <xQueueTakeMutexRecursive>
 811369a:	4603      	mov	r3, r0
 811369c:	2b01      	cmp	r3, #1
 811369e:	d01b      	beq.n	81136d8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 81136a0:	683b      	ldr	r3, [r7, #0]
 81136a2:	2b00      	cmp	r3, #0
 81136a4:	d003      	beq.n	81136ae <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 81136a6:	f06f 0301 	mvn.w	r3, #1
 81136aa:	617b      	str	r3, [r7, #20]
 81136ac:	e014      	b.n	81136d8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 81136ae:	f06f 0302 	mvn.w	r3, #2
 81136b2:	617b      	str	r3, [r7, #20]
 81136b4:	e010      	b.n	81136d8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 81136b6:	6839      	ldr	r1, [r7, #0]
 81136b8:	6938      	ldr	r0, [r7, #16]
 81136ba:	f001 fd45 	bl	8115148 <xQueueSemaphoreTake>
 81136be:	4603      	mov	r3, r0
 81136c0:	2b01      	cmp	r3, #1
 81136c2:	d009      	beq.n	81136d8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 81136c4:	683b      	ldr	r3, [r7, #0]
 81136c6:	2b00      	cmp	r3, #0
 81136c8:	d003      	beq.n	81136d2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 81136ca:	f06f 0301 	mvn.w	r3, #1
 81136ce:	617b      	str	r3, [r7, #20]
 81136d0:	e002      	b.n	81136d8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 81136d2:	f06f 0302 	mvn.w	r3, #2
 81136d6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 81136d8:	697b      	ldr	r3, [r7, #20]
}
 81136da:	4618      	mov	r0, r3
 81136dc:	3718      	adds	r7, #24
 81136de:	46bd      	mov	sp, r7
 81136e0:	bd80      	pop	{r7, pc}

081136e2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 81136e2:	b580      	push	{r7, lr}
 81136e4:	b086      	sub	sp, #24
 81136e6:	af00      	add	r7, sp, #0
 81136e8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 81136ea:	687b      	ldr	r3, [r7, #4]
 81136ec:	f023 0301 	bic.w	r3, r3, #1
 81136f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 81136f2:	687b      	ldr	r3, [r7, #4]
 81136f4:	f003 0301 	and.w	r3, r3, #1
 81136f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 81136fa:	2300      	movs	r3, #0
 81136fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81136fe:	f3ef 8305 	mrs	r3, IPSR
 8113702:	60bb      	str	r3, [r7, #8]
  return(result);
 8113704:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8113706:	2b00      	cmp	r3, #0
 8113708:	d003      	beq.n	8113712 <osMutexRelease+0x30>
    stat = osErrorISR;
 811370a:	f06f 0305 	mvn.w	r3, #5
 811370e:	617b      	str	r3, [r7, #20]
 8113710:	e01f      	b.n	8113752 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8113712:	693b      	ldr	r3, [r7, #16]
 8113714:	2b00      	cmp	r3, #0
 8113716:	d103      	bne.n	8113720 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8113718:	f06f 0303 	mvn.w	r3, #3
 811371c:	617b      	str	r3, [r7, #20]
 811371e:	e018      	b.n	8113752 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8113720:	68fb      	ldr	r3, [r7, #12]
 8113722:	2b00      	cmp	r3, #0
 8113724:	d009      	beq.n	811373a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8113726:	6938      	ldr	r0, [r7, #16]
 8113728:	f001 f922 	bl	8114970 <xQueueGiveMutexRecursive>
 811372c:	4603      	mov	r3, r0
 811372e:	2b01      	cmp	r3, #1
 8113730:	d00f      	beq.n	8113752 <osMutexRelease+0x70>
        stat = osErrorResource;
 8113732:	f06f 0302 	mvn.w	r3, #2
 8113736:	617b      	str	r3, [r7, #20]
 8113738:	e00b      	b.n	8113752 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 811373a:	2300      	movs	r3, #0
 811373c:	2200      	movs	r2, #0
 811373e:	2100      	movs	r1, #0
 8113740:	6938      	ldr	r0, [r7, #16]
 8113742:	f001 f9ef 	bl	8114b24 <xQueueGenericSend>
 8113746:	4603      	mov	r3, r0
 8113748:	2b01      	cmp	r3, #1
 811374a:	d002      	beq.n	8113752 <osMutexRelease+0x70>
        stat = osErrorResource;
 811374c:	f06f 0302 	mvn.w	r3, #2
 8113750:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8113752:	697b      	ldr	r3, [r7, #20]
}
 8113754:	4618      	mov	r0, r3
 8113756:	3718      	adds	r7, #24
 8113758:	46bd      	mov	sp, r7
 811375a:	bd80      	pop	{r7, pc}

0811375c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 811375c:	b580      	push	{r7, lr}
 811375e:	b08a      	sub	sp, #40	@ 0x28
 8113760:	af02      	add	r7, sp, #8
 8113762:	60f8      	str	r0, [r7, #12]
 8113764:	60b9      	str	r1, [r7, #8]
 8113766:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8113768:	2300      	movs	r3, #0
 811376a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811376c:	f3ef 8305 	mrs	r3, IPSR
 8113770:	613b      	str	r3, [r7, #16]
  return(result);
 8113772:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8113774:	2b00      	cmp	r3, #0
 8113776:	d175      	bne.n	8113864 <osSemaphoreNew+0x108>
 8113778:	68fb      	ldr	r3, [r7, #12]
 811377a:	2b00      	cmp	r3, #0
 811377c:	d072      	beq.n	8113864 <osSemaphoreNew+0x108>
 811377e:	68ba      	ldr	r2, [r7, #8]
 8113780:	68fb      	ldr	r3, [r7, #12]
 8113782:	429a      	cmp	r2, r3
 8113784:	d86e      	bhi.n	8113864 <osSemaphoreNew+0x108>
    mem = -1;
 8113786:	f04f 33ff 	mov.w	r3, #4294967295
 811378a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 811378c:	687b      	ldr	r3, [r7, #4]
 811378e:	2b00      	cmp	r3, #0
 8113790:	d015      	beq.n	81137be <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8113792:	687b      	ldr	r3, [r7, #4]
 8113794:	689b      	ldr	r3, [r3, #8]
 8113796:	2b00      	cmp	r3, #0
 8113798:	d006      	beq.n	81137a8 <osSemaphoreNew+0x4c>
 811379a:	687b      	ldr	r3, [r7, #4]
 811379c:	68db      	ldr	r3, [r3, #12]
 811379e:	2b4f      	cmp	r3, #79	@ 0x4f
 81137a0:	d902      	bls.n	81137a8 <osSemaphoreNew+0x4c>
        mem = 1;
 81137a2:	2301      	movs	r3, #1
 81137a4:	61bb      	str	r3, [r7, #24]
 81137a6:	e00c      	b.n	81137c2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 81137a8:	687b      	ldr	r3, [r7, #4]
 81137aa:	689b      	ldr	r3, [r3, #8]
 81137ac:	2b00      	cmp	r3, #0
 81137ae:	d108      	bne.n	81137c2 <osSemaphoreNew+0x66>
 81137b0:	687b      	ldr	r3, [r7, #4]
 81137b2:	68db      	ldr	r3, [r3, #12]
 81137b4:	2b00      	cmp	r3, #0
 81137b6:	d104      	bne.n	81137c2 <osSemaphoreNew+0x66>
          mem = 0;
 81137b8:	2300      	movs	r3, #0
 81137ba:	61bb      	str	r3, [r7, #24]
 81137bc:	e001      	b.n	81137c2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 81137be:	2300      	movs	r3, #0
 81137c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 81137c2:	69bb      	ldr	r3, [r7, #24]
 81137c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81137c8:	d04c      	beq.n	8113864 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 81137ca:	68fb      	ldr	r3, [r7, #12]
 81137cc:	2b01      	cmp	r3, #1
 81137ce:	d128      	bne.n	8113822 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 81137d0:	69bb      	ldr	r3, [r7, #24]
 81137d2:	2b01      	cmp	r3, #1
 81137d4:	d10a      	bne.n	81137ec <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 81137d6:	687b      	ldr	r3, [r7, #4]
 81137d8:	689b      	ldr	r3, [r3, #8]
 81137da:	2203      	movs	r2, #3
 81137dc:	9200      	str	r2, [sp, #0]
 81137de:	2200      	movs	r2, #0
 81137e0:	2100      	movs	r1, #0
 81137e2:	2001      	movs	r0, #1
 81137e4:	f000 ff9c 	bl	8114720 <xQueueGenericCreateStatic>
 81137e8:	61f8      	str	r0, [r7, #28]
 81137ea:	e005      	b.n	81137f8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 81137ec:	2203      	movs	r2, #3
 81137ee:	2100      	movs	r1, #0
 81137f0:	2001      	movs	r0, #1
 81137f2:	f001 f812 	bl	811481a <xQueueGenericCreate>
 81137f6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 81137f8:	69fb      	ldr	r3, [r7, #28]
 81137fa:	2b00      	cmp	r3, #0
 81137fc:	d022      	beq.n	8113844 <osSemaphoreNew+0xe8>
 81137fe:	68bb      	ldr	r3, [r7, #8]
 8113800:	2b00      	cmp	r3, #0
 8113802:	d01f      	beq.n	8113844 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8113804:	2300      	movs	r3, #0
 8113806:	2200      	movs	r2, #0
 8113808:	2100      	movs	r1, #0
 811380a:	69f8      	ldr	r0, [r7, #28]
 811380c:	f001 f98a 	bl	8114b24 <xQueueGenericSend>
 8113810:	4603      	mov	r3, r0
 8113812:	2b01      	cmp	r3, #1
 8113814:	d016      	beq.n	8113844 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8113816:	69f8      	ldr	r0, [r7, #28]
 8113818:	f001 fe28 	bl	811546c <vQueueDelete>
            hSemaphore = NULL;
 811381c:	2300      	movs	r3, #0
 811381e:	61fb      	str	r3, [r7, #28]
 8113820:	e010      	b.n	8113844 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8113822:	69bb      	ldr	r3, [r7, #24]
 8113824:	2b01      	cmp	r3, #1
 8113826:	d108      	bne.n	811383a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8113828:	687b      	ldr	r3, [r7, #4]
 811382a:	689b      	ldr	r3, [r3, #8]
 811382c:	461a      	mov	r2, r3
 811382e:	68b9      	ldr	r1, [r7, #8]
 8113830:	68f8      	ldr	r0, [r7, #12]
 8113832:	f001 f909 	bl	8114a48 <xQueueCreateCountingSemaphoreStatic>
 8113836:	61f8      	str	r0, [r7, #28]
 8113838:	e004      	b.n	8113844 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 811383a:	68b9      	ldr	r1, [r7, #8]
 811383c:	68f8      	ldr	r0, [r7, #12]
 811383e:	f001 f93c 	bl	8114aba <xQueueCreateCountingSemaphore>
 8113842:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8113844:	69fb      	ldr	r3, [r7, #28]
 8113846:	2b00      	cmp	r3, #0
 8113848:	d00c      	beq.n	8113864 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 811384a:	687b      	ldr	r3, [r7, #4]
 811384c:	2b00      	cmp	r3, #0
 811384e:	d003      	beq.n	8113858 <osSemaphoreNew+0xfc>
          name = attr->name;
 8113850:	687b      	ldr	r3, [r7, #4]
 8113852:	681b      	ldr	r3, [r3, #0]
 8113854:	617b      	str	r3, [r7, #20]
 8113856:	e001      	b.n	811385c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8113858:	2300      	movs	r3, #0
 811385a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 811385c:	6979      	ldr	r1, [r7, #20]
 811385e:	69f8      	ldr	r0, [r7, #28]
 8113860:	f001 ff50 	bl	8115704 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8113864:	69fb      	ldr	r3, [r7, #28]
}
 8113866:	4618      	mov	r0, r3
 8113868:	3720      	adds	r7, #32
 811386a:	46bd      	mov	sp, r7
 811386c:	bd80      	pop	{r7, pc}
	...

08113870 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8113870:	b580      	push	{r7, lr}
 8113872:	b086      	sub	sp, #24
 8113874:	af00      	add	r7, sp, #0
 8113876:	6078      	str	r0, [r7, #4]
 8113878:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 811387a:	687b      	ldr	r3, [r7, #4]
 811387c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 811387e:	2300      	movs	r3, #0
 8113880:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8113882:	693b      	ldr	r3, [r7, #16]
 8113884:	2b00      	cmp	r3, #0
 8113886:	d103      	bne.n	8113890 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8113888:	f06f 0303 	mvn.w	r3, #3
 811388c:	617b      	str	r3, [r7, #20]
 811388e:	e039      	b.n	8113904 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113890:	f3ef 8305 	mrs	r3, IPSR
 8113894:	60fb      	str	r3, [r7, #12]
  return(result);
 8113896:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8113898:	2b00      	cmp	r3, #0
 811389a:	d022      	beq.n	81138e2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 811389c:	683b      	ldr	r3, [r7, #0]
 811389e:	2b00      	cmp	r3, #0
 81138a0:	d003      	beq.n	81138aa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 81138a2:	f06f 0303 	mvn.w	r3, #3
 81138a6:	617b      	str	r3, [r7, #20]
 81138a8:	e02c      	b.n	8113904 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 81138aa:	2300      	movs	r3, #0
 81138ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 81138ae:	f107 0308 	add.w	r3, r7, #8
 81138b2:	461a      	mov	r2, r3
 81138b4:	2100      	movs	r1, #0
 81138b6:	6938      	ldr	r0, [r7, #16]
 81138b8:	f001 fd56 	bl	8115368 <xQueueReceiveFromISR>
 81138bc:	4603      	mov	r3, r0
 81138be:	2b01      	cmp	r3, #1
 81138c0:	d003      	beq.n	81138ca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 81138c2:	f06f 0302 	mvn.w	r3, #2
 81138c6:	617b      	str	r3, [r7, #20]
 81138c8:	e01c      	b.n	8113904 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 81138ca:	68bb      	ldr	r3, [r7, #8]
 81138cc:	2b00      	cmp	r3, #0
 81138ce:	d019      	beq.n	8113904 <osSemaphoreAcquire+0x94>
 81138d0:	4b0f      	ldr	r3, [pc, #60]	@ (8113910 <osSemaphoreAcquire+0xa0>)
 81138d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81138d6:	601a      	str	r2, [r3, #0]
 81138d8:	f3bf 8f4f 	dsb	sy
 81138dc:	f3bf 8f6f 	isb	sy
 81138e0:	e010      	b.n	8113904 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 81138e2:	6839      	ldr	r1, [r7, #0]
 81138e4:	6938      	ldr	r0, [r7, #16]
 81138e6:	f001 fc2f 	bl	8115148 <xQueueSemaphoreTake>
 81138ea:	4603      	mov	r3, r0
 81138ec:	2b01      	cmp	r3, #1
 81138ee:	d009      	beq.n	8113904 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 81138f0:	683b      	ldr	r3, [r7, #0]
 81138f2:	2b00      	cmp	r3, #0
 81138f4:	d003      	beq.n	81138fe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 81138f6:	f06f 0301 	mvn.w	r3, #1
 81138fa:	617b      	str	r3, [r7, #20]
 81138fc:	e002      	b.n	8113904 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 81138fe:	f06f 0302 	mvn.w	r3, #2
 8113902:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8113904:	697b      	ldr	r3, [r7, #20]
}
 8113906:	4618      	mov	r0, r3
 8113908:	3718      	adds	r7, #24
 811390a:	46bd      	mov	sp, r7
 811390c:	bd80      	pop	{r7, pc}
 811390e:	bf00      	nop
 8113910:	e000ed04 	.word	0xe000ed04

08113914 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8113914:	b580      	push	{r7, lr}
 8113916:	b086      	sub	sp, #24
 8113918:	af00      	add	r7, sp, #0
 811391a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 811391c:	687b      	ldr	r3, [r7, #4]
 811391e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8113920:	2300      	movs	r3, #0
 8113922:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8113924:	693b      	ldr	r3, [r7, #16]
 8113926:	2b00      	cmp	r3, #0
 8113928:	d103      	bne.n	8113932 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 811392a:	f06f 0303 	mvn.w	r3, #3
 811392e:	617b      	str	r3, [r7, #20]
 8113930:	e02c      	b.n	811398c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113932:	f3ef 8305 	mrs	r3, IPSR
 8113936:	60fb      	str	r3, [r7, #12]
  return(result);
 8113938:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 811393a:	2b00      	cmp	r3, #0
 811393c:	d01a      	beq.n	8113974 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 811393e:	2300      	movs	r3, #0
 8113940:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8113942:	f107 0308 	add.w	r3, r7, #8
 8113946:	4619      	mov	r1, r3
 8113948:	6938      	ldr	r0, [r7, #16]
 811394a:	f001 fa8b 	bl	8114e64 <xQueueGiveFromISR>
 811394e:	4603      	mov	r3, r0
 8113950:	2b01      	cmp	r3, #1
 8113952:	d003      	beq.n	811395c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8113954:	f06f 0302 	mvn.w	r3, #2
 8113958:	617b      	str	r3, [r7, #20]
 811395a:	e017      	b.n	811398c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 811395c:	68bb      	ldr	r3, [r7, #8]
 811395e:	2b00      	cmp	r3, #0
 8113960:	d014      	beq.n	811398c <osSemaphoreRelease+0x78>
 8113962:	4b0d      	ldr	r3, [pc, #52]	@ (8113998 <osSemaphoreRelease+0x84>)
 8113964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8113968:	601a      	str	r2, [r3, #0]
 811396a:	f3bf 8f4f 	dsb	sy
 811396e:	f3bf 8f6f 	isb	sy
 8113972:	e00b      	b.n	811398c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8113974:	2300      	movs	r3, #0
 8113976:	2200      	movs	r2, #0
 8113978:	2100      	movs	r1, #0
 811397a:	6938      	ldr	r0, [r7, #16]
 811397c:	f001 f8d2 	bl	8114b24 <xQueueGenericSend>
 8113980:	4603      	mov	r3, r0
 8113982:	2b01      	cmp	r3, #1
 8113984:	d002      	beq.n	811398c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8113986:	f06f 0302 	mvn.w	r3, #2
 811398a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 811398c:	697b      	ldr	r3, [r7, #20]
}
 811398e:	4618      	mov	r0, r3
 8113990:	3718      	adds	r7, #24
 8113992:	46bd      	mov	sp, r7
 8113994:	bd80      	pop	{r7, pc}
 8113996:	bf00      	nop
 8113998:	e000ed04 	.word	0xe000ed04

0811399c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 811399c:	b580      	push	{r7, lr}
 811399e:	b08a      	sub	sp, #40	@ 0x28
 81139a0:	af02      	add	r7, sp, #8
 81139a2:	60f8      	str	r0, [r7, #12]
 81139a4:	60b9      	str	r1, [r7, #8]
 81139a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 81139a8:	2300      	movs	r3, #0
 81139aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81139ac:	f3ef 8305 	mrs	r3, IPSR
 81139b0:	613b      	str	r3, [r7, #16]
  return(result);
 81139b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 81139b4:	2b00      	cmp	r3, #0
 81139b6:	d15f      	bne.n	8113a78 <osMessageQueueNew+0xdc>
 81139b8:	68fb      	ldr	r3, [r7, #12]
 81139ba:	2b00      	cmp	r3, #0
 81139bc:	d05c      	beq.n	8113a78 <osMessageQueueNew+0xdc>
 81139be:	68bb      	ldr	r3, [r7, #8]
 81139c0:	2b00      	cmp	r3, #0
 81139c2:	d059      	beq.n	8113a78 <osMessageQueueNew+0xdc>
    mem = -1;
 81139c4:	f04f 33ff 	mov.w	r3, #4294967295
 81139c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81139ca:	687b      	ldr	r3, [r7, #4]
 81139cc:	2b00      	cmp	r3, #0
 81139ce:	d029      	beq.n	8113a24 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 81139d0:	687b      	ldr	r3, [r7, #4]
 81139d2:	689b      	ldr	r3, [r3, #8]
 81139d4:	2b00      	cmp	r3, #0
 81139d6:	d012      	beq.n	81139fe <osMessageQueueNew+0x62>
 81139d8:	687b      	ldr	r3, [r7, #4]
 81139da:	68db      	ldr	r3, [r3, #12]
 81139dc:	2b4f      	cmp	r3, #79	@ 0x4f
 81139de:	d90e      	bls.n	81139fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 81139e0:	687b      	ldr	r3, [r7, #4]
 81139e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 81139e4:	2b00      	cmp	r3, #0
 81139e6:	d00a      	beq.n	81139fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 81139e8:	687b      	ldr	r3, [r7, #4]
 81139ea:	695a      	ldr	r2, [r3, #20]
 81139ec:	68fb      	ldr	r3, [r7, #12]
 81139ee:	68b9      	ldr	r1, [r7, #8]
 81139f0:	fb01 f303 	mul.w	r3, r1, r3
 81139f4:	429a      	cmp	r2, r3
 81139f6:	d302      	bcc.n	81139fe <osMessageQueueNew+0x62>
        mem = 1;
 81139f8:	2301      	movs	r3, #1
 81139fa:	61bb      	str	r3, [r7, #24]
 81139fc:	e014      	b.n	8113a28 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81139fe:	687b      	ldr	r3, [r7, #4]
 8113a00:	689b      	ldr	r3, [r3, #8]
 8113a02:	2b00      	cmp	r3, #0
 8113a04:	d110      	bne.n	8113a28 <osMessageQueueNew+0x8c>
 8113a06:	687b      	ldr	r3, [r7, #4]
 8113a08:	68db      	ldr	r3, [r3, #12]
 8113a0a:	2b00      	cmp	r3, #0
 8113a0c:	d10c      	bne.n	8113a28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8113a0e:	687b      	ldr	r3, [r7, #4]
 8113a10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8113a12:	2b00      	cmp	r3, #0
 8113a14:	d108      	bne.n	8113a28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8113a16:	687b      	ldr	r3, [r7, #4]
 8113a18:	695b      	ldr	r3, [r3, #20]
 8113a1a:	2b00      	cmp	r3, #0
 8113a1c:	d104      	bne.n	8113a28 <osMessageQueueNew+0x8c>
          mem = 0;
 8113a1e:	2300      	movs	r3, #0
 8113a20:	61bb      	str	r3, [r7, #24]
 8113a22:	e001      	b.n	8113a28 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8113a24:	2300      	movs	r3, #0
 8113a26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8113a28:	69bb      	ldr	r3, [r7, #24]
 8113a2a:	2b01      	cmp	r3, #1
 8113a2c:	d10b      	bne.n	8113a46 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8113a2e:	687b      	ldr	r3, [r7, #4]
 8113a30:	691a      	ldr	r2, [r3, #16]
 8113a32:	687b      	ldr	r3, [r7, #4]
 8113a34:	689b      	ldr	r3, [r3, #8]
 8113a36:	2100      	movs	r1, #0
 8113a38:	9100      	str	r1, [sp, #0]
 8113a3a:	68b9      	ldr	r1, [r7, #8]
 8113a3c:	68f8      	ldr	r0, [r7, #12]
 8113a3e:	f000 fe6f 	bl	8114720 <xQueueGenericCreateStatic>
 8113a42:	61f8      	str	r0, [r7, #28]
 8113a44:	e008      	b.n	8113a58 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8113a46:	69bb      	ldr	r3, [r7, #24]
 8113a48:	2b00      	cmp	r3, #0
 8113a4a:	d105      	bne.n	8113a58 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8113a4c:	2200      	movs	r2, #0
 8113a4e:	68b9      	ldr	r1, [r7, #8]
 8113a50:	68f8      	ldr	r0, [r7, #12]
 8113a52:	f000 fee2 	bl	811481a <xQueueGenericCreate>
 8113a56:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8113a58:	69fb      	ldr	r3, [r7, #28]
 8113a5a:	2b00      	cmp	r3, #0
 8113a5c:	d00c      	beq.n	8113a78 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8113a5e:	687b      	ldr	r3, [r7, #4]
 8113a60:	2b00      	cmp	r3, #0
 8113a62:	d003      	beq.n	8113a6c <osMessageQueueNew+0xd0>
        name = attr->name;
 8113a64:	687b      	ldr	r3, [r7, #4]
 8113a66:	681b      	ldr	r3, [r3, #0]
 8113a68:	617b      	str	r3, [r7, #20]
 8113a6a:	e001      	b.n	8113a70 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8113a6c:	2300      	movs	r3, #0
 8113a6e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8113a70:	6979      	ldr	r1, [r7, #20]
 8113a72:	69f8      	ldr	r0, [r7, #28]
 8113a74:	f001 fe46 	bl	8115704 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8113a78:	69fb      	ldr	r3, [r7, #28]
}
 8113a7a:	4618      	mov	r0, r3
 8113a7c:	3720      	adds	r7, #32
 8113a7e:	46bd      	mov	sp, r7
 8113a80:	bd80      	pop	{r7, pc}
	...

08113a84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8113a84:	b580      	push	{r7, lr}
 8113a86:	b088      	sub	sp, #32
 8113a88:	af00      	add	r7, sp, #0
 8113a8a:	60f8      	str	r0, [r7, #12]
 8113a8c:	60b9      	str	r1, [r7, #8]
 8113a8e:	603b      	str	r3, [r7, #0]
 8113a90:	4613      	mov	r3, r2
 8113a92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8113a94:	68fb      	ldr	r3, [r7, #12]
 8113a96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8113a98:	2300      	movs	r3, #0
 8113a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113a9c:	f3ef 8305 	mrs	r3, IPSR
 8113aa0:	617b      	str	r3, [r7, #20]
  return(result);
 8113aa2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8113aa4:	2b00      	cmp	r3, #0
 8113aa6:	d028      	beq.n	8113afa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8113aa8:	69bb      	ldr	r3, [r7, #24]
 8113aaa:	2b00      	cmp	r3, #0
 8113aac:	d005      	beq.n	8113aba <osMessageQueuePut+0x36>
 8113aae:	68bb      	ldr	r3, [r7, #8]
 8113ab0:	2b00      	cmp	r3, #0
 8113ab2:	d002      	beq.n	8113aba <osMessageQueuePut+0x36>
 8113ab4:	683b      	ldr	r3, [r7, #0]
 8113ab6:	2b00      	cmp	r3, #0
 8113ab8:	d003      	beq.n	8113ac2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8113aba:	f06f 0303 	mvn.w	r3, #3
 8113abe:	61fb      	str	r3, [r7, #28]
 8113ac0:	e038      	b.n	8113b34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8113ac2:	2300      	movs	r3, #0
 8113ac4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8113ac6:	f107 0210 	add.w	r2, r7, #16
 8113aca:	2300      	movs	r3, #0
 8113acc:	68b9      	ldr	r1, [r7, #8]
 8113ace:	69b8      	ldr	r0, [r7, #24]
 8113ad0:	f001 f92a 	bl	8114d28 <xQueueGenericSendFromISR>
 8113ad4:	4603      	mov	r3, r0
 8113ad6:	2b01      	cmp	r3, #1
 8113ad8:	d003      	beq.n	8113ae2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8113ada:	f06f 0302 	mvn.w	r3, #2
 8113ade:	61fb      	str	r3, [r7, #28]
 8113ae0:	e028      	b.n	8113b34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8113ae2:	693b      	ldr	r3, [r7, #16]
 8113ae4:	2b00      	cmp	r3, #0
 8113ae6:	d025      	beq.n	8113b34 <osMessageQueuePut+0xb0>
 8113ae8:	4b15      	ldr	r3, [pc, #84]	@ (8113b40 <osMessageQueuePut+0xbc>)
 8113aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8113aee:	601a      	str	r2, [r3, #0]
 8113af0:	f3bf 8f4f 	dsb	sy
 8113af4:	f3bf 8f6f 	isb	sy
 8113af8:	e01c      	b.n	8113b34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8113afa:	69bb      	ldr	r3, [r7, #24]
 8113afc:	2b00      	cmp	r3, #0
 8113afe:	d002      	beq.n	8113b06 <osMessageQueuePut+0x82>
 8113b00:	68bb      	ldr	r3, [r7, #8]
 8113b02:	2b00      	cmp	r3, #0
 8113b04:	d103      	bne.n	8113b0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8113b06:	f06f 0303 	mvn.w	r3, #3
 8113b0a:	61fb      	str	r3, [r7, #28]
 8113b0c:	e012      	b.n	8113b34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8113b0e:	2300      	movs	r3, #0
 8113b10:	683a      	ldr	r2, [r7, #0]
 8113b12:	68b9      	ldr	r1, [r7, #8]
 8113b14:	69b8      	ldr	r0, [r7, #24]
 8113b16:	f001 f805 	bl	8114b24 <xQueueGenericSend>
 8113b1a:	4603      	mov	r3, r0
 8113b1c:	2b01      	cmp	r3, #1
 8113b1e:	d009      	beq.n	8113b34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8113b20:	683b      	ldr	r3, [r7, #0]
 8113b22:	2b00      	cmp	r3, #0
 8113b24:	d003      	beq.n	8113b2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8113b26:	f06f 0301 	mvn.w	r3, #1
 8113b2a:	61fb      	str	r3, [r7, #28]
 8113b2c:	e002      	b.n	8113b34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8113b2e:	f06f 0302 	mvn.w	r3, #2
 8113b32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8113b34:	69fb      	ldr	r3, [r7, #28]
}
 8113b36:	4618      	mov	r0, r3
 8113b38:	3720      	adds	r7, #32
 8113b3a:	46bd      	mov	sp, r7
 8113b3c:	bd80      	pop	{r7, pc}
 8113b3e:	bf00      	nop
 8113b40:	e000ed04 	.word	0xe000ed04

08113b44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8113b44:	b580      	push	{r7, lr}
 8113b46:	b088      	sub	sp, #32
 8113b48:	af00      	add	r7, sp, #0
 8113b4a:	60f8      	str	r0, [r7, #12]
 8113b4c:	60b9      	str	r1, [r7, #8]
 8113b4e:	607a      	str	r2, [r7, #4]
 8113b50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8113b52:	68fb      	ldr	r3, [r7, #12]
 8113b54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8113b56:	2300      	movs	r3, #0
 8113b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113b5a:	f3ef 8305 	mrs	r3, IPSR
 8113b5e:	617b      	str	r3, [r7, #20]
  return(result);
 8113b60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8113b62:	2b00      	cmp	r3, #0
 8113b64:	d028      	beq.n	8113bb8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8113b66:	69bb      	ldr	r3, [r7, #24]
 8113b68:	2b00      	cmp	r3, #0
 8113b6a:	d005      	beq.n	8113b78 <osMessageQueueGet+0x34>
 8113b6c:	68bb      	ldr	r3, [r7, #8]
 8113b6e:	2b00      	cmp	r3, #0
 8113b70:	d002      	beq.n	8113b78 <osMessageQueueGet+0x34>
 8113b72:	683b      	ldr	r3, [r7, #0]
 8113b74:	2b00      	cmp	r3, #0
 8113b76:	d003      	beq.n	8113b80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8113b78:	f06f 0303 	mvn.w	r3, #3
 8113b7c:	61fb      	str	r3, [r7, #28]
 8113b7e:	e037      	b.n	8113bf0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8113b80:	2300      	movs	r3, #0
 8113b82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8113b84:	f107 0310 	add.w	r3, r7, #16
 8113b88:	461a      	mov	r2, r3
 8113b8a:	68b9      	ldr	r1, [r7, #8]
 8113b8c:	69b8      	ldr	r0, [r7, #24]
 8113b8e:	f001 fbeb 	bl	8115368 <xQueueReceiveFromISR>
 8113b92:	4603      	mov	r3, r0
 8113b94:	2b01      	cmp	r3, #1
 8113b96:	d003      	beq.n	8113ba0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8113b98:	f06f 0302 	mvn.w	r3, #2
 8113b9c:	61fb      	str	r3, [r7, #28]
 8113b9e:	e027      	b.n	8113bf0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8113ba0:	693b      	ldr	r3, [r7, #16]
 8113ba2:	2b00      	cmp	r3, #0
 8113ba4:	d024      	beq.n	8113bf0 <osMessageQueueGet+0xac>
 8113ba6:	4b15      	ldr	r3, [pc, #84]	@ (8113bfc <osMessageQueueGet+0xb8>)
 8113ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8113bac:	601a      	str	r2, [r3, #0]
 8113bae:	f3bf 8f4f 	dsb	sy
 8113bb2:	f3bf 8f6f 	isb	sy
 8113bb6:	e01b      	b.n	8113bf0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8113bb8:	69bb      	ldr	r3, [r7, #24]
 8113bba:	2b00      	cmp	r3, #0
 8113bbc:	d002      	beq.n	8113bc4 <osMessageQueueGet+0x80>
 8113bbe:	68bb      	ldr	r3, [r7, #8]
 8113bc0:	2b00      	cmp	r3, #0
 8113bc2:	d103      	bne.n	8113bcc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8113bc4:	f06f 0303 	mvn.w	r3, #3
 8113bc8:	61fb      	str	r3, [r7, #28]
 8113bca:	e011      	b.n	8113bf0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8113bcc:	683a      	ldr	r2, [r7, #0]
 8113bce:	68b9      	ldr	r1, [r7, #8]
 8113bd0:	69b8      	ldr	r0, [r7, #24]
 8113bd2:	f001 f9d7 	bl	8114f84 <xQueueReceive>
 8113bd6:	4603      	mov	r3, r0
 8113bd8:	2b01      	cmp	r3, #1
 8113bda:	d009      	beq.n	8113bf0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8113bdc:	683b      	ldr	r3, [r7, #0]
 8113bde:	2b00      	cmp	r3, #0
 8113be0:	d003      	beq.n	8113bea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8113be2:	f06f 0301 	mvn.w	r3, #1
 8113be6:	61fb      	str	r3, [r7, #28]
 8113be8:	e002      	b.n	8113bf0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8113bea:	f06f 0302 	mvn.w	r3, #2
 8113bee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8113bf0:	69fb      	ldr	r3, [r7, #28]
}
 8113bf2:	4618      	mov	r0, r3
 8113bf4:	3720      	adds	r7, #32
 8113bf6:	46bd      	mov	sp, r7
 8113bf8:	bd80      	pop	{r7, pc}
 8113bfa:	bf00      	nop
 8113bfc:	e000ed04 	.word	0xe000ed04

08113c00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8113c00:	b480      	push	{r7}
 8113c02:	b085      	sub	sp, #20
 8113c04:	af00      	add	r7, sp, #0
 8113c06:	60f8      	str	r0, [r7, #12]
 8113c08:	60b9      	str	r1, [r7, #8]
 8113c0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8113c0c:	68fb      	ldr	r3, [r7, #12]
 8113c0e:	4a07      	ldr	r2, [pc, #28]	@ (8113c2c <vApplicationGetIdleTaskMemory+0x2c>)
 8113c10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8113c12:	68bb      	ldr	r3, [r7, #8]
 8113c14:	4a06      	ldr	r2, [pc, #24]	@ (8113c30 <vApplicationGetIdleTaskMemory+0x30>)
 8113c16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8113c18:	687b      	ldr	r3, [r7, #4]
 8113c1a:	2280      	movs	r2, #128	@ 0x80
 8113c1c:	601a      	str	r2, [r3, #0]
}
 8113c1e:	bf00      	nop
 8113c20:	3714      	adds	r7, #20
 8113c22:	46bd      	mov	sp, r7
 8113c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113c28:	4770      	bx	lr
 8113c2a:	bf00      	nop
 8113c2c:	10000428 	.word	0x10000428
 8113c30:	100004d0 	.word	0x100004d0

08113c34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8113c34:	b480      	push	{r7}
 8113c36:	b085      	sub	sp, #20
 8113c38:	af00      	add	r7, sp, #0
 8113c3a:	60f8      	str	r0, [r7, #12]
 8113c3c:	60b9      	str	r1, [r7, #8]
 8113c3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8113c40:	68fb      	ldr	r3, [r7, #12]
 8113c42:	4a07      	ldr	r2, [pc, #28]	@ (8113c60 <vApplicationGetTimerTaskMemory+0x2c>)
 8113c44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8113c46:	68bb      	ldr	r3, [r7, #8]
 8113c48:	4a06      	ldr	r2, [pc, #24]	@ (8113c64 <vApplicationGetTimerTaskMemory+0x30>)
 8113c4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8113c4c:	687b      	ldr	r3, [r7, #4]
 8113c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8113c52:	601a      	str	r2, [r3, #0]
}
 8113c54:	bf00      	nop
 8113c56:	3714      	adds	r7, #20
 8113c58:	46bd      	mov	sp, r7
 8113c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113c5e:	4770      	bx	lr
 8113c60:	100006d0 	.word	0x100006d0
 8113c64:	10000778 	.word	0x10000778

08113c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8113c68:	b580      	push	{r7, lr}
 8113c6a:	b08a      	sub	sp, #40	@ 0x28
 8113c6c:	af00      	add	r7, sp, #0
 8113c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8113c70:	2300      	movs	r3, #0
 8113c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8113c74:	f002 fc5c 	bl	8116530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8113c78:	4b5c      	ldr	r3, [pc, #368]	@ (8113dec <pvPortMalloc+0x184>)
 8113c7a:	681b      	ldr	r3, [r3, #0]
 8113c7c:	2b00      	cmp	r3, #0
 8113c7e:	d101      	bne.n	8113c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8113c80:	f000 f924 	bl	8113ecc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8113c84:	4b5a      	ldr	r3, [pc, #360]	@ (8113df0 <pvPortMalloc+0x188>)
 8113c86:	681a      	ldr	r2, [r3, #0]
 8113c88:	687b      	ldr	r3, [r7, #4]
 8113c8a:	4013      	ands	r3, r2
 8113c8c:	2b00      	cmp	r3, #0
 8113c8e:	f040 8095 	bne.w	8113dbc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8113c92:	687b      	ldr	r3, [r7, #4]
 8113c94:	2b00      	cmp	r3, #0
 8113c96:	d01e      	beq.n	8113cd6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8113c98:	2208      	movs	r2, #8
 8113c9a:	687b      	ldr	r3, [r7, #4]
 8113c9c:	4413      	add	r3, r2
 8113c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8113ca0:	687b      	ldr	r3, [r7, #4]
 8113ca2:	f003 0307 	and.w	r3, r3, #7
 8113ca6:	2b00      	cmp	r3, #0
 8113ca8:	d015      	beq.n	8113cd6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8113caa:	687b      	ldr	r3, [r7, #4]
 8113cac:	f023 0307 	bic.w	r3, r3, #7
 8113cb0:	3308      	adds	r3, #8
 8113cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8113cb4:	687b      	ldr	r3, [r7, #4]
 8113cb6:	f003 0307 	and.w	r3, r3, #7
 8113cba:	2b00      	cmp	r3, #0
 8113cbc:	d00b      	beq.n	8113cd6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8113cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113cc2:	f383 8811 	msr	BASEPRI, r3
 8113cc6:	f3bf 8f6f 	isb	sy
 8113cca:	f3bf 8f4f 	dsb	sy
 8113cce:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8113cd0:	bf00      	nop
 8113cd2:	bf00      	nop
 8113cd4:	e7fd      	b.n	8113cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8113cd6:	687b      	ldr	r3, [r7, #4]
 8113cd8:	2b00      	cmp	r3, #0
 8113cda:	d06f      	beq.n	8113dbc <pvPortMalloc+0x154>
 8113cdc:	4b45      	ldr	r3, [pc, #276]	@ (8113df4 <pvPortMalloc+0x18c>)
 8113cde:	681b      	ldr	r3, [r3, #0]
 8113ce0:	687a      	ldr	r2, [r7, #4]
 8113ce2:	429a      	cmp	r2, r3
 8113ce4:	d86a      	bhi.n	8113dbc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8113ce6:	4b44      	ldr	r3, [pc, #272]	@ (8113df8 <pvPortMalloc+0x190>)
 8113ce8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8113cea:	4b43      	ldr	r3, [pc, #268]	@ (8113df8 <pvPortMalloc+0x190>)
 8113cec:	681b      	ldr	r3, [r3, #0]
 8113cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8113cf0:	e004      	b.n	8113cfc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8113cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113cf4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8113cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113cf8:	681b      	ldr	r3, [r3, #0]
 8113cfa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8113cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113cfe:	685b      	ldr	r3, [r3, #4]
 8113d00:	687a      	ldr	r2, [r7, #4]
 8113d02:	429a      	cmp	r2, r3
 8113d04:	d903      	bls.n	8113d0e <pvPortMalloc+0xa6>
 8113d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d08:	681b      	ldr	r3, [r3, #0]
 8113d0a:	2b00      	cmp	r3, #0
 8113d0c:	d1f1      	bne.n	8113cf2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8113d0e:	4b37      	ldr	r3, [pc, #220]	@ (8113dec <pvPortMalloc+0x184>)
 8113d10:	681b      	ldr	r3, [r3, #0]
 8113d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113d14:	429a      	cmp	r2, r3
 8113d16:	d051      	beq.n	8113dbc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8113d18:	6a3b      	ldr	r3, [r7, #32]
 8113d1a:	681b      	ldr	r3, [r3, #0]
 8113d1c:	2208      	movs	r2, #8
 8113d1e:	4413      	add	r3, r2
 8113d20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8113d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d24:	681a      	ldr	r2, [r3, #0]
 8113d26:	6a3b      	ldr	r3, [r7, #32]
 8113d28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8113d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d2c:	685a      	ldr	r2, [r3, #4]
 8113d2e:	687b      	ldr	r3, [r7, #4]
 8113d30:	1ad2      	subs	r2, r2, r3
 8113d32:	2308      	movs	r3, #8
 8113d34:	005b      	lsls	r3, r3, #1
 8113d36:	429a      	cmp	r2, r3
 8113d38:	d920      	bls.n	8113d7c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8113d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113d3c:	687b      	ldr	r3, [r7, #4]
 8113d3e:	4413      	add	r3, r2
 8113d40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8113d42:	69bb      	ldr	r3, [r7, #24]
 8113d44:	f003 0307 	and.w	r3, r3, #7
 8113d48:	2b00      	cmp	r3, #0
 8113d4a:	d00b      	beq.n	8113d64 <pvPortMalloc+0xfc>
	__asm volatile
 8113d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113d50:	f383 8811 	msr	BASEPRI, r3
 8113d54:	f3bf 8f6f 	isb	sy
 8113d58:	f3bf 8f4f 	dsb	sy
 8113d5c:	613b      	str	r3, [r7, #16]
}
 8113d5e:	bf00      	nop
 8113d60:	bf00      	nop
 8113d62:	e7fd      	b.n	8113d60 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8113d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d66:	685a      	ldr	r2, [r3, #4]
 8113d68:	687b      	ldr	r3, [r7, #4]
 8113d6a:	1ad2      	subs	r2, r2, r3
 8113d6c:	69bb      	ldr	r3, [r7, #24]
 8113d6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8113d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d72:	687a      	ldr	r2, [r7, #4]
 8113d74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8113d76:	69b8      	ldr	r0, [r7, #24]
 8113d78:	f000 f90a 	bl	8113f90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8113d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8113df4 <pvPortMalloc+0x18c>)
 8113d7e:	681a      	ldr	r2, [r3, #0]
 8113d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d82:	685b      	ldr	r3, [r3, #4]
 8113d84:	1ad3      	subs	r3, r2, r3
 8113d86:	4a1b      	ldr	r2, [pc, #108]	@ (8113df4 <pvPortMalloc+0x18c>)
 8113d88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8113d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8113df4 <pvPortMalloc+0x18c>)
 8113d8c:	681a      	ldr	r2, [r3, #0]
 8113d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8113dfc <pvPortMalloc+0x194>)
 8113d90:	681b      	ldr	r3, [r3, #0]
 8113d92:	429a      	cmp	r2, r3
 8113d94:	d203      	bcs.n	8113d9e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8113d96:	4b17      	ldr	r3, [pc, #92]	@ (8113df4 <pvPortMalloc+0x18c>)
 8113d98:	681b      	ldr	r3, [r3, #0]
 8113d9a:	4a18      	ldr	r2, [pc, #96]	@ (8113dfc <pvPortMalloc+0x194>)
 8113d9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8113d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113da0:	685a      	ldr	r2, [r3, #4]
 8113da2:	4b13      	ldr	r3, [pc, #76]	@ (8113df0 <pvPortMalloc+0x188>)
 8113da4:	681b      	ldr	r3, [r3, #0]
 8113da6:	431a      	orrs	r2, r3
 8113da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113daa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8113dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113dae:	2200      	movs	r2, #0
 8113db0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8113db2:	4b13      	ldr	r3, [pc, #76]	@ (8113e00 <pvPortMalloc+0x198>)
 8113db4:	681b      	ldr	r3, [r3, #0]
 8113db6:	3301      	adds	r3, #1
 8113db8:	4a11      	ldr	r2, [pc, #68]	@ (8113e00 <pvPortMalloc+0x198>)
 8113dba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8113dbc:	f002 fbc6 	bl	811654c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8113dc0:	69fb      	ldr	r3, [r7, #28]
 8113dc2:	f003 0307 	and.w	r3, r3, #7
 8113dc6:	2b00      	cmp	r3, #0
 8113dc8:	d00b      	beq.n	8113de2 <pvPortMalloc+0x17a>
	__asm volatile
 8113dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113dce:	f383 8811 	msr	BASEPRI, r3
 8113dd2:	f3bf 8f6f 	isb	sy
 8113dd6:	f3bf 8f4f 	dsb	sy
 8113dda:	60fb      	str	r3, [r7, #12]
}
 8113ddc:	bf00      	nop
 8113dde:	bf00      	nop
 8113de0:	e7fd      	b.n	8113dde <pvPortMalloc+0x176>
	return pvReturn;
 8113de2:	69fb      	ldr	r3, [r7, #28]
}
 8113de4:	4618      	mov	r0, r3
 8113de6:	3728      	adds	r7, #40	@ 0x28
 8113de8:	46bd      	mov	sp, r7
 8113dea:	bd80      	pop	{r7, pc}
 8113dec:	1000ab80 	.word	0x1000ab80
 8113df0:	1000ab94 	.word	0x1000ab94
 8113df4:	1000ab84 	.word	0x1000ab84
 8113df8:	1000ab78 	.word	0x1000ab78
 8113dfc:	1000ab88 	.word	0x1000ab88
 8113e00:	1000ab8c 	.word	0x1000ab8c

08113e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8113e04:	b580      	push	{r7, lr}
 8113e06:	b086      	sub	sp, #24
 8113e08:	af00      	add	r7, sp, #0
 8113e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8113e0c:	687b      	ldr	r3, [r7, #4]
 8113e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8113e10:	687b      	ldr	r3, [r7, #4]
 8113e12:	2b00      	cmp	r3, #0
 8113e14:	d04f      	beq.n	8113eb6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8113e16:	2308      	movs	r3, #8
 8113e18:	425b      	negs	r3, r3
 8113e1a:	697a      	ldr	r2, [r7, #20]
 8113e1c:	4413      	add	r3, r2
 8113e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8113e20:	697b      	ldr	r3, [r7, #20]
 8113e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8113e24:	693b      	ldr	r3, [r7, #16]
 8113e26:	685a      	ldr	r2, [r3, #4]
 8113e28:	4b25      	ldr	r3, [pc, #148]	@ (8113ec0 <vPortFree+0xbc>)
 8113e2a:	681b      	ldr	r3, [r3, #0]
 8113e2c:	4013      	ands	r3, r2
 8113e2e:	2b00      	cmp	r3, #0
 8113e30:	d10b      	bne.n	8113e4a <vPortFree+0x46>
	__asm volatile
 8113e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113e36:	f383 8811 	msr	BASEPRI, r3
 8113e3a:	f3bf 8f6f 	isb	sy
 8113e3e:	f3bf 8f4f 	dsb	sy
 8113e42:	60fb      	str	r3, [r7, #12]
}
 8113e44:	bf00      	nop
 8113e46:	bf00      	nop
 8113e48:	e7fd      	b.n	8113e46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8113e4a:	693b      	ldr	r3, [r7, #16]
 8113e4c:	681b      	ldr	r3, [r3, #0]
 8113e4e:	2b00      	cmp	r3, #0
 8113e50:	d00b      	beq.n	8113e6a <vPortFree+0x66>
	__asm volatile
 8113e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113e56:	f383 8811 	msr	BASEPRI, r3
 8113e5a:	f3bf 8f6f 	isb	sy
 8113e5e:	f3bf 8f4f 	dsb	sy
 8113e62:	60bb      	str	r3, [r7, #8]
}
 8113e64:	bf00      	nop
 8113e66:	bf00      	nop
 8113e68:	e7fd      	b.n	8113e66 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8113e6a:	693b      	ldr	r3, [r7, #16]
 8113e6c:	685a      	ldr	r2, [r3, #4]
 8113e6e:	4b14      	ldr	r3, [pc, #80]	@ (8113ec0 <vPortFree+0xbc>)
 8113e70:	681b      	ldr	r3, [r3, #0]
 8113e72:	4013      	ands	r3, r2
 8113e74:	2b00      	cmp	r3, #0
 8113e76:	d01e      	beq.n	8113eb6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8113e78:	693b      	ldr	r3, [r7, #16]
 8113e7a:	681b      	ldr	r3, [r3, #0]
 8113e7c:	2b00      	cmp	r3, #0
 8113e7e:	d11a      	bne.n	8113eb6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8113e80:	693b      	ldr	r3, [r7, #16]
 8113e82:	685a      	ldr	r2, [r3, #4]
 8113e84:	4b0e      	ldr	r3, [pc, #56]	@ (8113ec0 <vPortFree+0xbc>)
 8113e86:	681b      	ldr	r3, [r3, #0]
 8113e88:	43db      	mvns	r3, r3
 8113e8a:	401a      	ands	r2, r3
 8113e8c:	693b      	ldr	r3, [r7, #16]
 8113e8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8113e90:	f002 fb4e 	bl	8116530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8113e94:	693b      	ldr	r3, [r7, #16]
 8113e96:	685a      	ldr	r2, [r3, #4]
 8113e98:	4b0a      	ldr	r3, [pc, #40]	@ (8113ec4 <vPortFree+0xc0>)
 8113e9a:	681b      	ldr	r3, [r3, #0]
 8113e9c:	4413      	add	r3, r2
 8113e9e:	4a09      	ldr	r2, [pc, #36]	@ (8113ec4 <vPortFree+0xc0>)
 8113ea0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8113ea2:	6938      	ldr	r0, [r7, #16]
 8113ea4:	f000 f874 	bl	8113f90 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8113ea8:	4b07      	ldr	r3, [pc, #28]	@ (8113ec8 <vPortFree+0xc4>)
 8113eaa:	681b      	ldr	r3, [r3, #0]
 8113eac:	3301      	adds	r3, #1
 8113eae:	4a06      	ldr	r2, [pc, #24]	@ (8113ec8 <vPortFree+0xc4>)
 8113eb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8113eb2:	f002 fb4b 	bl	811654c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8113eb6:	bf00      	nop
 8113eb8:	3718      	adds	r7, #24
 8113eba:	46bd      	mov	sp, r7
 8113ebc:	bd80      	pop	{r7, pc}
 8113ebe:	bf00      	nop
 8113ec0:	1000ab94 	.word	0x1000ab94
 8113ec4:	1000ab84 	.word	0x1000ab84
 8113ec8:	1000ab90 	.word	0x1000ab90

08113ecc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8113ecc:	b480      	push	{r7}
 8113ece:	b085      	sub	sp, #20
 8113ed0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8113ed2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8113ed6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8113ed8:	4b27      	ldr	r3, [pc, #156]	@ (8113f78 <prvHeapInit+0xac>)
 8113eda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8113edc:	68fb      	ldr	r3, [r7, #12]
 8113ede:	f003 0307 	and.w	r3, r3, #7
 8113ee2:	2b00      	cmp	r3, #0
 8113ee4:	d00c      	beq.n	8113f00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8113ee6:	68fb      	ldr	r3, [r7, #12]
 8113ee8:	3307      	adds	r3, #7
 8113eea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8113eec:	68fb      	ldr	r3, [r7, #12]
 8113eee:	f023 0307 	bic.w	r3, r3, #7
 8113ef2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8113ef4:	68ba      	ldr	r2, [r7, #8]
 8113ef6:	68fb      	ldr	r3, [r7, #12]
 8113ef8:	1ad3      	subs	r3, r2, r3
 8113efa:	4a1f      	ldr	r2, [pc, #124]	@ (8113f78 <prvHeapInit+0xac>)
 8113efc:	4413      	add	r3, r2
 8113efe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8113f00:	68fb      	ldr	r3, [r7, #12]
 8113f02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8113f04:	4a1d      	ldr	r2, [pc, #116]	@ (8113f7c <prvHeapInit+0xb0>)
 8113f06:	687b      	ldr	r3, [r7, #4]
 8113f08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8113f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8113f7c <prvHeapInit+0xb0>)
 8113f0c:	2200      	movs	r2, #0
 8113f0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8113f10:	687b      	ldr	r3, [r7, #4]
 8113f12:	68ba      	ldr	r2, [r7, #8]
 8113f14:	4413      	add	r3, r2
 8113f16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8113f18:	2208      	movs	r2, #8
 8113f1a:	68fb      	ldr	r3, [r7, #12]
 8113f1c:	1a9b      	subs	r3, r3, r2
 8113f1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8113f20:	68fb      	ldr	r3, [r7, #12]
 8113f22:	f023 0307 	bic.w	r3, r3, #7
 8113f26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8113f28:	68fb      	ldr	r3, [r7, #12]
 8113f2a:	4a15      	ldr	r2, [pc, #84]	@ (8113f80 <prvHeapInit+0xb4>)
 8113f2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8113f2e:	4b14      	ldr	r3, [pc, #80]	@ (8113f80 <prvHeapInit+0xb4>)
 8113f30:	681b      	ldr	r3, [r3, #0]
 8113f32:	2200      	movs	r2, #0
 8113f34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8113f36:	4b12      	ldr	r3, [pc, #72]	@ (8113f80 <prvHeapInit+0xb4>)
 8113f38:	681b      	ldr	r3, [r3, #0]
 8113f3a:	2200      	movs	r2, #0
 8113f3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8113f3e:	687b      	ldr	r3, [r7, #4]
 8113f40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8113f42:	683b      	ldr	r3, [r7, #0]
 8113f44:	68fa      	ldr	r2, [r7, #12]
 8113f46:	1ad2      	subs	r2, r2, r3
 8113f48:	683b      	ldr	r3, [r7, #0]
 8113f4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8113f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8113f80 <prvHeapInit+0xb4>)
 8113f4e:	681a      	ldr	r2, [r3, #0]
 8113f50:	683b      	ldr	r3, [r7, #0]
 8113f52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8113f54:	683b      	ldr	r3, [r7, #0]
 8113f56:	685b      	ldr	r3, [r3, #4]
 8113f58:	4a0a      	ldr	r2, [pc, #40]	@ (8113f84 <prvHeapInit+0xb8>)
 8113f5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8113f5c:	683b      	ldr	r3, [r7, #0]
 8113f5e:	685b      	ldr	r3, [r3, #4]
 8113f60:	4a09      	ldr	r2, [pc, #36]	@ (8113f88 <prvHeapInit+0xbc>)
 8113f62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8113f64:	4b09      	ldr	r3, [pc, #36]	@ (8113f8c <prvHeapInit+0xc0>)
 8113f66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8113f6a:	601a      	str	r2, [r3, #0]
}
 8113f6c:	bf00      	nop
 8113f6e:	3714      	adds	r7, #20
 8113f70:	46bd      	mov	sp, r7
 8113f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113f76:	4770      	bx	lr
 8113f78:	10000b78 	.word	0x10000b78
 8113f7c:	1000ab78 	.word	0x1000ab78
 8113f80:	1000ab80 	.word	0x1000ab80
 8113f84:	1000ab88 	.word	0x1000ab88
 8113f88:	1000ab84 	.word	0x1000ab84
 8113f8c:	1000ab94 	.word	0x1000ab94

08113f90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8113f90:	b480      	push	{r7}
 8113f92:	b085      	sub	sp, #20
 8113f94:	af00      	add	r7, sp, #0
 8113f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8113f98:	4b28      	ldr	r3, [pc, #160]	@ (811403c <prvInsertBlockIntoFreeList+0xac>)
 8113f9a:	60fb      	str	r3, [r7, #12]
 8113f9c:	e002      	b.n	8113fa4 <prvInsertBlockIntoFreeList+0x14>
 8113f9e:	68fb      	ldr	r3, [r7, #12]
 8113fa0:	681b      	ldr	r3, [r3, #0]
 8113fa2:	60fb      	str	r3, [r7, #12]
 8113fa4:	68fb      	ldr	r3, [r7, #12]
 8113fa6:	681b      	ldr	r3, [r3, #0]
 8113fa8:	687a      	ldr	r2, [r7, #4]
 8113faa:	429a      	cmp	r2, r3
 8113fac:	d8f7      	bhi.n	8113f9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8113fae:	68fb      	ldr	r3, [r7, #12]
 8113fb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8113fb2:	68fb      	ldr	r3, [r7, #12]
 8113fb4:	685b      	ldr	r3, [r3, #4]
 8113fb6:	68ba      	ldr	r2, [r7, #8]
 8113fb8:	4413      	add	r3, r2
 8113fba:	687a      	ldr	r2, [r7, #4]
 8113fbc:	429a      	cmp	r2, r3
 8113fbe:	d108      	bne.n	8113fd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8113fc0:	68fb      	ldr	r3, [r7, #12]
 8113fc2:	685a      	ldr	r2, [r3, #4]
 8113fc4:	687b      	ldr	r3, [r7, #4]
 8113fc6:	685b      	ldr	r3, [r3, #4]
 8113fc8:	441a      	add	r2, r3
 8113fca:	68fb      	ldr	r3, [r7, #12]
 8113fcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8113fce:	68fb      	ldr	r3, [r7, #12]
 8113fd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8113fd2:	687b      	ldr	r3, [r7, #4]
 8113fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8113fd6:	687b      	ldr	r3, [r7, #4]
 8113fd8:	685b      	ldr	r3, [r3, #4]
 8113fda:	68ba      	ldr	r2, [r7, #8]
 8113fdc:	441a      	add	r2, r3
 8113fde:	68fb      	ldr	r3, [r7, #12]
 8113fe0:	681b      	ldr	r3, [r3, #0]
 8113fe2:	429a      	cmp	r2, r3
 8113fe4:	d118      	bne.n	8114018 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8113fe6:	68fb      	ldr	r3, [r7, #12]
 8113fe8:	681a      	ldr	r2, [r3, #0]
 8113fea:	4b15      	ldr	r3, [pc, #84]	@ (8114040 <prvInsertBlockIntoFreeList+0xb0>)
 8113fec:	681b      	ldr	r3, [r3, #0]
 8113fee:	429a      	cmp	r2, r3
 8113ff0:	d00d      	beq.n	811400e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8113ff2:	687b      	ldr	r3, [r7, #4]
 8113ff4:	685a      	ldr	r2, [r3, #4]
 8113ff6:	68fb      	ldr	r3, [r7, #12]
 8113ff8:	681b      	ldr	r3, [r3, #0]
 8113ffa:	685b      	ldr	r3, [r3, #4]
 8113ffc:	441a      	add	r2, r3
 8113ffe:	687b      	ldr	r3, [r7, #4]
 8114000:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8114002:	68fb      	ldr	r3, [r7, #12]
 8114004:	681b      	ldr	r3, [r3, #0]
 8114006:	681a      	ldr	r2, [r3, #0]
 8114008:	687b      	ldr	r3, [r7, #4]
 811400a:	601a      	str	r2, [r3, #0]
 811400c:	e008      	b.n	8114020 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 811400e:	4b0c      	ldr	r3, [pc, #48]	@ (8114040 <prvInsertBlockIntoFreeList+0xb0>)
 8114010:	681a      	ldr	r2, [r3, #0]
 8114012:	687b      	ldr	r3, [r7, #4]
 8114014:	601a      	str	r2, [r3, #0]
 8114016:	e003      	b.n	8114020 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8114018:	68fb      	ldr	r3, [r7, #12]
 811401a:	681a      	ldr	r2, [r3, #0]
 811401c:	687b      	ldr	r3, [r7, #4]
 811401e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8114020:	68fa      	ldr	r2, [r7, #12]
 8114022:	687b      	ldr	r3, [r7, #4]
 8114024:	429a      	cmp	r2, r3
 8114026:	d002      	beq.n	811402e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8114028:	68fb      	ldr	r3, [r7, #12]
 811402a:	687a      	ldr	r2, [r7, #4]
 811402c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811402e:	bf00      	nop
 8114030:	3714      	adds	r7, #20
 8114032:	46bd      	mov	sp, r7
 8114034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114038:	4770      	bx	lr
 811403a:	bf00      	nop
 811403c:	1000ab78 	.word	0x1000ab78
 8114040:	1000ab80 	.word	0x1000ab80

08114044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8114044:	b480      	push	{r7}
 8114046:	b083      	sub	sp, #12
 8114048:	af00      	add	r7, sp, #0
 811404a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 811404c:	687b      	ldr	r3, [r7, #4]
 811404e:	f103 0208 	add.w	r2, r3, #8
 8114052:	687b      	ldr	r3, [r7, #4]
 8114054:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8114056:	687b      	ldr	r3, [r7, #4]
 8114058:	f04f 32ff 	mov.w	r2, #4294967295
 811405c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 811405e:	687b      	ldr	r3, [r7, #4]
 8114060:	f103 0208 	add.w	r2, r3, #8
 8114064:	687b      	ldr	r3, [r7, #4]
 8114066:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8114068:	687b      	ldr	r3, [r7, #4]
 811406a:	f103 0208 	add.w	r2, r3, #8
 811406e:	687b      	ldr	r3, [r7, #4]
 8114070:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8114072:	687b      	ldr	r3, [r7, #4]
 8114074:	2200      	movs	r2, #0
 8114076:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8114078:	bf00      	nop
 811407a:	370c      	adds	r7, #12
 811407c:	46bd      	mov	sp, r7
 811407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114082:	4770      	bx	lr

08114084 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8114084:	b480      	push	{r7}
 8114086:	b083      	sub	sp, #12
 8114088:	af00      	add	r7, sp, #0
 811408a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 811408c:	687b      	ldr	r3, [r7, #4]
 811408e:	2200      	movs	r2, #0
 8114090:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8114092:	bf00      	nop
 8114094:	370c      	adds	r7, #12
 8114096:	46bd      	mov	sp, r7
 8114098:	f85d 7b04 	ldr.w	r7, [sp], #4
 811409c:	4770      	bx	lr

0811409e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 811409e:	b480      	push	{r7}
 81140a0:	b085      	sub	sp, #20
 81140a2:	af00      	add	r7, sp, #0
 81140a4:	6078      	str	r0, [r7, #4]
 81140a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81140a8:	687b      	ldr	r3, [r7, #4]
 81140aa:	685b      	ldr	r3, [r3, #4]
 81140ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81140ae:	683b      	ldr	r3, [r7, #0]
 81140b0:	68fa      	ldr	r2, [r7, #12]
 81140b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81140b4:	68fb      	ldr	r3, [r7, #12]
 81140b6:	689a      	ldr	r2, [r3, #8]
 81140b8:	683b      	ldr	r3, [r7, #0]
 81140ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81140bc:	68fb      	ldr	r3, [r7, #12]
 81140be:	689b      	ldr	r3, [r3, #8]
 81140c0:	683a      	ldr	r2, [r7, #0]
 81140c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81140c4:	68fb      	ldr	r3, [r7, #12]
 81140c6:	683a      	ldr	r2, [r7, #0]
 81140c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81140ca:	683b      	ldr	r3, [r7, #0]
 81140cc:	687a      	ldr	r2, [r7, #4]
 81140ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81140d0:	687b      	ldr	r3, [r7, #4]
 81140d2:	681b      	ldr	r3, [r3, #0]
 81140d4:	1c5a      	adds	r2, r3, #1
 81140d6:	687b      	ldr	r3, [r7, #4]
 81140d8:	601a      	str	r2, [r3, #0]
}
 81140da:	bf00      	nop
 81140dc:	3714      	adds	r7, #20
 81140de:	46bd      	mov	sp, r7
 81140e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81140e4:	4770      	bx	lr

081140e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81140e6:	b480      	push	{r7}
 81140e8:	b085      	sub	sp, #20
 81140ea:	af00      	add	r7, sp, #0
 81140ec:	6078      	str	r0, [r7, #4]
 81140ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81140f0:	683b      	ldr	r3, [r7, #0]
 81140f2:	681b      	ldr	r3, [r3, #0]
 81140f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81140f6:	68bb      	ldr	r3, [r7, #8]
 81140f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81140fc:	d103      	bne.n	8114106 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81140fe:	687b      	ldr	r3, [r7, #4]
 8114100:	691b      	ldr	r3, [r3, #16]
 8114102:	60fb      	str	r3, [r7, #12]
 8114104:	e00c      	b.n	8114120 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8114106:	687b      	ldr	r3, [r7, #4]
 8114108:	3308      	adds	r3, #8
 811410a:	60fb      	str	r3, [r7, #12]
 811410c:	e002      	b.n	8114114 <vListInsert+0x2e>
 811410e:	68fb      	ldr	r3, [r7, #12]
 8114110:	685b      	ldr	r3, [r3, #4]
 8114112:	60fb      	str	r3, [r7, #12]
 8114114:	68fb      	ldr	r3, [r7, #12]
 8114116:	685b      	ldr	r3, [r3, #4]
 8114118:	681b      	ldr	r3, [r3, #0]
 811411a:	68ba      	ldr	r2, [r7, #8]
 811411c:	429a      	cmp	r2, r3
 811411e:	d2f6      	bcs.n	811410e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8114120:	68fb      	ldr	r3, [r7, #12]
 8114122:	685a      	ldr	r2, [r3, #4]
 8114124:	683b      	ldr	r3, [r7, #0]
 8114126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8114128:	683b      	ldr	r3, [r7, #0]
 811412a:	685b      	ldr	r3, [r3, #4]
 811412c:	683a      	ldr	r2, [r7, #0]
 811412e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8114130:	683b      	ldr	r3, [r7, #0]
 8114132:	68fa      	ldr	r2, [r7, #12]
 8114134:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8114136:	68fb      	ldr	r3, [r7, #12]
 8114138:	683a      	ldr	r2, [r7, #0]
 811413a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 811413c:	683b      	ldr	r3, [r7, #0]
 811413e:	687a      	ldr	r2, [r7, #4]
 8114140:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8114142:	687b      	ldr	r3, [r7, #4]
 8114144:	681b      	ldr	r3, [r3, #0]
 8114146:	1c5a      	adds	r2, r3, #1
 8114148:	687b      	ldr	r3, [r7, #4]
 811414a:	601a      	str	r2, [r3, #0]
}
 811414c:	bf00      	nop
 811414e:	3714      	adds	r7, #20
 8114150:	46bd      	mov	sp, r7
 8114152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114156:	4770      	bx	lr

08114158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8114158:	b480      	push	{r7}
 811415a:	b085      	sub	sp, #20
 811415c:	af00      	add	r7, sp, #0
 811415e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8114160:	687b      	ldr	r3, [r7, #4]
 8114162:	691b      	ldr	r3, [r3, #16]
 8114164:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8114166:	687b      	ldr	r3, [r7, #4]
 8114168:	685b      	ldr	r3, [r3, #4]
 811416a:	687a      	ldr	r2, [r7, #4]
 811416c:	6892      	ldr	r2, [r2, #8]
 811416e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8114170:	687b      	ldr	r3, [r7, #4]
 8114172:	689b      	ldr	r3, [r3, #8]
 8114174:	687a      	ldr	r2, [r7, #4]
 8114176:	6852      	ldr	r2, [r2, #4]
 8114178:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 811417a:	68fb      	ldr	r3, [r7, #12]
 811417c:	685b      	ldr	r3, [r3, #4]
 811417e:	687a      	ldr	r2, [r7, #4]
 8114180:	429a      	cmp	r2, r3
 8114182:	d103      	bne.n	811418c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8114184:	687b      	ldr	r3, [r7, #4]
 8114186:	689a      	ldr	r2, [r3, #8]
 8114188:	68fb      	ldr	r3, [r7, #12]
 811418a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 811418c:	687b      	ldr	r3, [r7, #4]
 811418e:	2200      	movs	r2, #0
 8114190:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8114192:	68fb      	ldr	r3, [r7, #12]
 8114194:	681b      	ldr	r3, [r3, #0]
 8114196:	1e5a      	subs	r2, r3, #1
 8114198:	68fb      	ldr	r3, [r7, #12]
 811419a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 811419c:	68fb      	ldr	r3, [r7, #12]
 811419e:	681b      	ldr	r3, [r3, #0]
}
 81141a0:	4618      	mov	r0, r3
 81141a2:	3714      	adds	r7, #20
 81141a4:	46bd      	mov	sp, r7
 81141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81141aa:	4770      	bx	lr

081141ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81141ac:	b480      	push	{r7}
 81141ae:	b085      	sub	sp, #20
 81141b0:	af00      	add	r7, sp, #0
 81141b2:	60f8      	str	r0, [r7, #12]
 81141b4:	60b9      	str	r1, [r7, #8]
 81141b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81141b8:	68fb      	ldr	r3, [r7, #12]
 81141ba:	3b04      	subs	r3, #4
 81141bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81141be:	68fb      	ldr	r3, [r7, #12]
 81141c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81141c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81141c6:	68fb      	ldr	r3, [r7, #12]
 81141c8:	3b04      	subs	r3, #4
 81141ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81141cc:	68bb      	ldr	r3, [r7, #8]
 81141ce:	f023 0201 	bic.w	r2, r3, #1
 81141d2:	68fb      	ldr	r3, [r7, #12]
 81141d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81141d6:	68fb      	ldr	r3, [r7, #12]
 81141d8:	3b04      	subs	r3, #4
 81141da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81141dc:	4a0c      	ldr	r2, [pc, #48]	@ (8114210 <pxPortInitialiseStack+0x64>)
 81141de:	68fb      	ldr	r3, [r7, #12]
 81141e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81141e2:	68fb      	ldr	r3, [r7, #12]
 81141e4:	3b14      	subs	r3, #20
 81141e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81141e8:	687a      	ldr	r2, [r7, #4]
 81141ea:	68fb      	ldr	r3, [r7, #12]
 81141ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81141ee:	68fb      	ldr	r3, [r7, #12]
 81141f0:	3b04      	subs	r3, #4
 81141f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81141f4:	68fb      	ldr	r3, [r7, #12]
 81141f6:	f06f 0202 	mvn.w	r2, #2
 81141fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81141fc:	68fb      	ldr	r3, [r7, #12]
 81141fe:	3b20      	subs	r3, #32
 8114200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8114202:	68fb      	ldr	r3, [r7, #12]
}
 8114204:	4618      	mov	r0, r3
 8114206:	3714      	adds	r7, #20
 8114208:	46bd      	mov	sp, r7
 811420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811420e:	4770      	bx	lr
 8114210:	08114215 	.word	0x08114215

08114214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8114214:	b480      	push	{r7}
 8114216:	b085      	sub	sp, #20
 8114218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 811421a:	2300      	movs	r3, #0
 811421c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 811421e:	4b13      	ldr	r3, [pc, #76]	@ (811426c <prvTaskExitError+0x58>)
 8114220:	681b      	ldr	r3, [r3, #0]
 8114222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114226:	d00b      	beq.n	8114240 <prvTaskExitError+0x2c>
	__asm volatile
 8114228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811422c:	f383 8811 	msr	BASEPRI, r3
 8114230:	f3bf 8f6f 	isb	sy
 8114234:	f3bf 8f4f 	dsb	sy
 8114238:	60fb      	str	r3, [r7, #12]
}
 811423a:	bf00      	nop
 811423c:	bf00      	nop
 811423e:	e7fd      	b.n	811423c <prvTaskExitError+0x28>
	__asm volatile
 8114240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114244:	f383 8811 	msr	BASEPRI, r3
 8114248:	f3bf 8f6f 	isb	sy
 811424c:	f3bf 8f4f 	dsb	sy
 8114250:	60bb      	str	r3, [r7, #8]
}
 8114252:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8114254:	bf00      	nop
 8114256:	687b      	ldr	r3, [r7, #4]
 8114258:	2b00      	cmp	r3, #0
 811425a:	d0fc      	beq.n	8114256 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 811425c:	bf00      	nop
 811425e:	bf00      	nop
 8114260:	3714      	adds	r7, #20
 8114262:	46bd      	mov	sp, r7
 8114264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114268:	4770      	bx	lr
 811426a:	bf00      	nop
 811426c:	10000024 	.word	0x10000024

08114270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8114270:	4b07      	ldr	r3, [pc, #28]	@ (8114290 <pxCurrentTCBConst2>)
 8114272:	6819      	ldr	r1, [r3, #0]
 8114274:	6808      	ldr	r0, [r1, #0]
 8114276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811427a:	f380 8809 	msr	PSP, r0
 811427e:	f3bf 8f6f 	isb	sy
 8114282:	f04f 0000 	mov.w	r0, #0
 8114286:	f380 8811 	msr	BASEPRI, r0
 811428a:	4770      	bx	lr
 811428c:	f3af 8000 	nop.w

08114290 <pxCurrentTCBConst2>:
 8114290:	1000abe0 	.word	0x1000abe0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8114294:	bf00      	nop
 8114296:	bf00      	nop

08114298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8114298:	4808      	ldr	r0, [pc, #32]	@ (81142bc <prvPortStartFirstTask+0x24>)
 811429a:	6800      	ldr	r0, [r0, #0]
 811429c:	6800      	ldr	r0, [r0, #0]
 811429e:	f380 8808 	msr	MSP, r0
 81142a2:	f04f 0000 	mov.w	r0, #0
 81142a6:	f380 8814 	msr	CONTROL, r0
 81142aa:	b662      	cpsie	i
 81142ac:	b661      	cpsie	f
 81142ae:	f3bf 8f4f 	dsb	sy
 81142b2:	f3bf 8f6f 	isb	sy
 81142b6:	df00      	svc	0
 81142b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81142ba:	bf00      	nop
 81142bc:	e000ed08 	.word	0xe000ed08

081142c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81142c0:	b580      	push	{r7, lr}
 81142c2:	b086      	sub	sp, #24
 81142c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81142c6:	4b47      	ldr	r3, [pc, #284]	@ (81143e4 <xPortStartScheduler+0x124>)
 81142c8:	681b      	ldr	r3, [r3, #0]
 81142ca:	4a47      	ldr	r2, [pc, #284]	@ (81143e8 <xPortStartScheduler+0x128>)
 81142cc:	4293      	cmp	r3, r2
 81142ce:	d10b      	bne.n	81142e8 <xPortStartScheduler+0x28>
	__asm volatile
 81142d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81142d4:	f383 8811 	msr	BASEPRI, r3
 81142d8:	f3bf 8f6f 	isb	sy
 81142dc:	f3bf 8f4f 	dsb	sy
 81142e0:	613b      	str	r3, [r7, #16]
}
 81142e2:	bf00      	nop
 81142e4:	bf00      	nop
 81142e6:	e7fd      	b.n	81142e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81142e8:	4b3e      	ldr	r3, [pc, #248]	@ (81143e4 <xPortStartScheduler+0x124>)
 81142ea:	681b      	ldr	r3, [r3, #0]
 81142ec:	4a3f      	ldr	r2, [pc, #252]	@ (81143ec <xPortStartScheduler+0x12c>)
 81142ee:	4293      	cmp	r3, r2
 81142f0:	d10b      	bne.n	811430a <xPortStartScheduler+0x4a>
	__asm volatile
 81142f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81142f6:	f383 8811 	msr	BASEPRI, r3
 81142fa:	f3bf 8f6f 	isb	sy
 81142fe:	f3bf 8f4f 	dsb	sy
 8114302:	60fb      	str	r3, [r7, #12]
}
 8114304:	bf00      	nop
 8114306:	bf00      	nop
 8114308:	e7fd      	b.n	8114306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 811430a:	4b39      	ldr	r3, [pc, #228]	@ (81143f0 <xPortStartScheduler+0x130>)
 811430c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 811430e:	697b      	ldr	r3, [r7, #20]
 8114310:	781b      	ldrb	r3, [r3, #0]
 8114312:	b2db      	uxtb	r3, r3
 8114314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8114316:	697b      	ldr	r3, [r7, #20]
 8114318:	22ff      	movs	r2, #255	@ 0xff
 811431a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 811431c:	697b      	ldr	r3, [r7, #20]
 811431e:	781b      	ldrb	r3, [r3, #0]
 8114320:	b2db      	uxtb	r3, r3
 8114322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8114324:	78fb      	ldrb	r3, [r7, #3]
 8114326:	b2db      	uxtb	r3, r3
 8114328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 811432c:	b2da      	uxtb	r2, r3
 811432e:	4b31      	ldr	r3, [pc, #196]	@ (81143f4 <xPortStartScheduler+0x134>)
 8114330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8114332:	4b31      	ldr	r3, [pc, #196]	@ (81143f8 <xPortStartScheduler+0x138>)
 8114334:	2207      	movs	r2, #7
 8114336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8114338:	e009      	b.n	811434e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 811433a:	4b2f      	ldr	r3, [pc, #188]	@ (81143f8 <xPortStartScheduler+0x138>)
 811433c:	681b      	ldr	r3, [r3, #0]
 811433e:	3b01      	subs	r3, #1
 8114340:	4a2d      	ldr	r2, [pc, #180]	@ (81143f8 <xPortStartScheduler+0x138>)
 8114342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8114344:	78fb      	ldrb	r3, [r7, #3]
 8114346:	b2db      	uxtb	r3, r3
 8114348:	005b      	lsls	r3, r3, #1
 811434a:	b2db      	uxtb	r3, r3
 811434c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 811434e:	78fb      	ldrb	r3, [r7, #3]
 8114350:	b2db      	uxtb	r3, r3
 8114352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8114356:	2b80      	cmp	r3, #128	@ 0x80
 8114358:	d0ef      	beq.n	811433a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 811435a:	4b27      	ldr	r3, [pc, #156]	@ (81143f8 <xPortStartScheduler+0x138>)
 811435c:	681b      	ldr	r3, [r3, #0]
 811435e:	f1c3 0307 	rsb	r3, r3, #7
 8114362:	2b04      	cmp	r3, #4
 8114364:	d00b      	beq.n	811437e <xPortStartScheduler+0xbe>
	__asm volatile
 8114366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811436a:	f383 8811 	msr	BASEPRI, r3
 811436e:	f3bf 8f6f 	isb	sy
 8114372:	f3bf 8f4f 	dsb	sy
 8114376:	60bb      	str	r3, [r7, #8]
}
 8114378:	bf00      	nop
 811437a:	bf00      	nop
 811437c:	e7fd      	b.n	811437a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 811437e:	4b1e      	ldr	r3, [pc, #120]	@ (81143f8 <xPortStartScheduler+0x138>)
 8114380:	681b      	ldr	r3, [r3, #0]
 8114382:	021b      	lsls	r3, r3, #8
 8114384:	4a1c      	ldr	r2, [pc, #112]	@ (81143f8 <xPortStartScheduler+0x138>)
 8114386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8114388:	4b1b      	ldr	r3, [pc, #108]	@ (81143f8 <xPortStartScheduler+0x138>)
 811438a:	681b      	ldr	r3, [r3, #0]
 811438c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8114390:	4a19      	ldr	r2, [pc, #100]	@ (81143f8 <xPortStartScheduler+0x138>)
 8114392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8114394:	687b      	ldr	r3, [r7, #4]
 8114396:	b2da      	uxtb	r2, r3
 8114398:	697b      	ldr	r3, [r7, #20]
 811439a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 811439c:	4b17      	ldr	r3, [pc, #92]	@ (81143fc <xPortStartScheduler+0x13c>)
 811439e:	681b      	ldr	r3, [r3, #0]
 81143a0:	4a16      	ldr	r2, [pc, #88]	@ (81143fc <xPortStartScheduler+0x13c>)
 81143a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81143a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81143a8:	4b14      	ldr	r3, [pc, #80]	@ (81143fc <xPortStartScheduler+0x13c>)
 81143aa:	681b      	ldr	r3, [r3, #0]
 81143ac:	4a13      	ldr	r2, [pc, #76]	@ (81143fc <xPortStartScheduler+0x13c>)
 81143ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81143b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81143b4:	f000 f8da 	bl	811456c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81143b8:	4b11      	ldr	r3, [pc, #68]	@ (8114400 <xPortStartScheduler+0x140>)
 81143ba:	2200      	movs	r2, #0
 81143bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81143be:	f000 f8f9 	bl	81145b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81143c2:	4b10      	ldr	r3, [pc, #64]	@ (8114404 <xPortStartScheduler+0x144>)
 81143c4:	681b      	ldr	r3, [r3, #0]
 81143c6:	4a0f      	ldr	r2, [pc, #60]	@ (8114404 <xPortStartScheduler+0x144>)
 81143c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 81143cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81143ce:	f7ff ff63 	bl	8114298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81143d2:	f002 fa35 	bl	8116840 <vTaskSwitchContext>
	prvTaskExitError();
 81143d6:	f7ff ff1d 	bl	8114214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81143da:	2300      	movs	r3, #0
}
 81143dc:	4618      	mov	r0, r3
 81143de:	3718      	adds	r7, #24
 81143e0:	46bd      	mov	sp, r7
 81143e2:	bd80      	pop	{r7, pc}
 81143e4:	e000ed00 	.word	0xe000ed00
 81143e8:	410fc271 	.word	0x410fc271
 81143ec:	410fc270 	.word	0x410fc270
 81143f0:	e000e400 	.word	0xe000e400
 81143f4:	1000ab98 	.word	0x1000ab98
 81143f8:	1000ab9c 	.word	0x1000ab9c
 81143fc:	e000ed20 	.word	0xe000ed20
 8114400:	10000024 	.word	0x10000024
 8114404:	e000ef34 	.word	0xe000ef34

08114408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8114408:	b480      	push	{r7}
 811440a:	b083      	sub	sp, #12
 811440c:	af00      	add	r7, sp, #0
	__asm volatile
 811440e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114412:	f383 8811 	msr	BASEPRI, r3
 8114416:	f3bf 8f6f 	isb	sy
 811441a:	f3bf 8f4f 	dsb	sy
 811441e:	607b      	str	r3, [r7, #4]
}
 8114420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8114422:	4b10      	ldr	r3, [pc, #64]	@ (8114464 <vPortEnterCritical+0x5c>)
 8114424:	681b      	ldr	r3, [r3, #0]
 8114426:	3301      	adds	r3, #1
 8114428:	4a0e      	ldr	r2, [pc, #56]	@ (8114464 <vPortEnterCritical+0x5c>)
 811442a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 811442c:	4b0d      	ldr	r3, [pc, #52]	@ (8114464 <vPortEnterCritical+0x5c>)
 811442e:	681b      	ldr	r3, [r3, #0]
 8114430:	2b01      	cmp	r3, #1
 8114432:	d110      	bne.n	8114456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8114434:	4b0c      	ldr	r3, [pc, #48]	@ (8114468 <vPortEnterCritical+0x60>)
 8114436:	681b      	ldr	r3, [r3, #0]
 8114438:	b2db      	uxtb	r3, r3
 811443a:	2b00      	cmp	r3, #0
 811443c:	d00b      	beq.n	8114456 <vPortEnterCritical+0x4e>
	__asm volatile
 811443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114442:	f383 8811 	msr	BASEPRI, r3
 8114446:	f3bf 8f6f 	isb	sy
 811444a:	f3bf 8f4f 	dsb	sy
 811444e:	603b      	str	r3, [r7, #0]
}
 8114450:	bf00      	nop
 8114452:	bf00      	nop
 8114454:	e7fd      	b.n	8114452 <vPortEnterCritical+0x4a>
	}
}
 8114456:	bf00      	nop
 8114458:	370c      	adds	r7, #12
 811445a:	46bd      	mov	sp, r7
 811445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114460:	4770      	bx	lr
 8114462:	bf00      	nop
 8114464:	10000024 	.word	0x10000024
 8114468:	e000ed04 	.word	0xe000ed04

0811446c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 811446c:	b480      	push	{r7}
 811446e:	b083      	sub	sp, #12
 8114470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8114472:	4b12      	ldr	r3, [pc, #72]	@ (81144bc <vPortExitCritical+0x50>)
 8114474:	681b      	ldr	r3, [r3, #0]
 8114476:	2b00      	cmp	r3, #0
 8114478:	d10b      	bne.n	8114492 <vPortExitCritical+0x26>
	__asm volatile
 811447a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811447e:	f383 8811 	msr	BASEPRI, r3
 8114482:	f3bf 8f6f 	isb	sy
 8114486:	f3bf 8f4f 	dsb	sy
 811448a:	607b      	str	r3, [r7, #4]
}
 811448c:	bf00      	nop
 811448e:	bf00      	nop
 8114490:	e7fd      	b.n	811448e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8114492:	4b0a      	ldr	r3, [pc, #40]	@ (81144bc <vPortExitCritical+0x50>)
 8114494:	681b      	ldr	r3, [r3, #0]
 8114496:	3b01      	subs	r3, #1
 8114498:	4a08      	ldr	r2, [pc, #32]	@ (81144bc <vPortExitCritical+0x50>)
 811449a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 811449c:	4b07      	ldr	r3, [pc, #28]	@ (81144bc <vPortExitCritical+0x50>)
 811449e:	681b      	ldr	r3, [r3, #0]
 81144a0:	2b00      	cmp	r3, #0
 81144a2:	d105      	bne.n	81144b0 <vPortExitCritical+0x44>
 81144a4:	2300      	movs	r3, #0
 81144a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81144a8:	683b      	ldr	r3, [r7, #0]
 81144aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81144ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81144b0:	bf00      	nop
 81144b2:	370c      	adds	r7, #12
 81144b4:	46bd      	mov	sp, r7
 81144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81144ba:	4770      	bx	lr
 81144bc:	10000024 	.word	0x10000024

081144c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81144c0:	f3ef 8009 	mrs	r0, PSP
 81144c4:	f3bf 8f6f 	isb	sy
 81144c8:	4b15      	ldr	r3, [pc, #84]	@ (8114520 <pxCurrentTCBConst>)
 81144ca:	681a      	ldr	r2, [r3, #0]
 81144cc:	f01e 0f10 	tst.w	lr, #16
 81144d0:	bf08      	it	eq
 81144d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81144d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81144da:	6010      	str	r0, [r2, #0]
 81144dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81144e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81144e4:	f380 8811 	msr	BASEPRI, r0
 81144e8:	f3bf 8f4f 	dsb	sy
 81144ec:	f3bf 8f6f 	isb	sy
 81144f0:	f002 f9a6 	bl	8116840 <vTaskSwitchContext>
 81144f4:	f04f 0000 	mov.w	r0, #0
 81144f8:	f380 8811 	msr	BASEPRI, r0
 81144fc:	bc09      	pop	{r0, r3}
 81144fe:	6819      	ldr	r1, [r3, #0]
 8114500:	6808      	ldr	r0, [r1, #0]
 8114502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114506:	f01e 0f10 	tst.w	lr, #16
 811450a:	bf08      	it	eq
 811450c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8114510:	f380 8809 	msr	PSP, r0
 8114514:	f3bf 8f6f 	isb	sy
 8114518:	4770      	bx	lr
 811451a:	bf00      	nop
 811451c:	f3af 8000 	nop.w

08114520 <pxCurrentTCBConst>:
 8114520:	1000abe0 	.word	0x1000abe0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8114524:	bf00      	nop
 8114526:	bf00      	nop

08114528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8114528:	b580      	push	{r7, lr}
 811452a:	b082      	sub	sp, #8
 811452c:	af00      	add	r7, sp, #0
	__asm volatile
 811452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114532:	f383 8811 	msr	BASEPRI, r3
 8114536:	f3bf 8f6f 	isb	sy
 811453a:	f3bf 8f4f 	dsb	sy
 811453e:	607b      	str	r3, [r7, #4]
}
 8114540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8114542:	f002 f8c3 	bl	81166cc <xTaskIncrementTick>
 8114546:	4603      	mov	r3, r0
 8114548:	2b00      	cmp	r3, #0
 811454a:	d003      	beq.n	8114554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 811454c:	4b06      	ldr	r3, [pc, #24]	@ (8114568 <xPortSysTickHandler+0x40>)
 811454e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8114552:	601a      	str	r2, [r3, #0]
 8114554:	2300      	movs	r3, #0
 8114556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8114558:	683b      	ldr	r3, [r7, #0]
 811455a:	f383 8811 	msr	BASEPRI, r3
}
 811455e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8114560:	bf00      	nop
 8114562:	3708      	adds	r7, #8
 8114564:	46bd      	mov	sp, r7
 8114566:	bd80      	pop	{r7, pc}
 8114568:	e000ed04 	.word	0xe000ed04

0811456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 811456c:	b480      	push	{r7}
 811456e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8114570:	4b0b      	ldr	r3, [pc, #44]	@ (81145a0 <vPortSetupTimerInterrupt+0x34>)
 8114572:	2200      	movs	r2, #0
 8114574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8114576:	4b0b      	ldr	r3, [pc, #44]	@ (81145a4 <vPortSetupTimerInterrupt+0x38>)
 8114578:	2200      	movs	r2, #0
 811457a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 811457c:	4b0a      	ldr	r3, [pc, #40]	@ (81145a8 <vPortSetupTimerInterrupt+0x3c>)
 811457e:	681b      	ldr	r3, [r3, #0]
 8114580:	4a0a      	ldr	r2, [pc, #40]	@ (81145ac <vPortSetupTimerInterrupt+0x40>)
 8114582:	fba2 2303 	umull	r2, r3, r2, r3
 8114586:	099b      	lsrs	r3, r3, #6
 8114588:	4a09      	ldr	r2, [pc, #36]	@ (81145b0 <vPortSetupTimerInterrupt+0x44>)
 811458a:	3b01      	subs	r3, #1
 811458c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 811458e:	4b04      	ldr	r3, [pc, #16]	@ (81145a0 <vPortSetupTimerInterrupt+0x34>)
 8114590:	2207      	movs	r2, #7
 8114592:	601a      	str	r2, [r3, #0]
}
 8114594:	bf00      	nop
 8114596:	46bd      	mov	sp, r7
 8114598:	f85d 7b04 	ldr.w	r7, [sp], #4
 811459c:	4770      	bx	lr
 811459e:	bf00      	nop
 81145a0:	e000e010 	.word	0xe000e010
 81145a4:	e000e018 	.word	0xe000e018
 81145a8:	10000018 	.word	0x10000018
 81145ac:	10624dd3 	.word	0x10624dd3
 81145b0:	e000e014 	.word	0xe000e014

081145b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81145b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 81145c4 <vPortEnableVFP+0x10>
 81145b8:	6801      	ldr	r1, [r0, #0]
 81145ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81145be:	6001      	str	r1, [r0, #0]
 81145c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81145c2:	bf00      	nop
 81145c4:	e000ed88 	.word	0xe000ed88

081145c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81145c8:	b480      	push	{r7}
 81145ca:	b085      	sub	sp, #20
 81145cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81145ce:	f3ef 8305 	mrs	r3, IPSR
 81145d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81145d4:	68fb      	ldr	r3, [r7, #12]
 81145d6:	2b0f      	cmp	r3, #15
 81145d8:	d915      	bls.n	8114606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81145da:	4a18      	ldr	r2, [pc, #96]	@ (811463c <vPortValidateInterruptPriority+0x74>)
 81145dc:	68fb      	ldr	r3, [r7, #12]
 81145de:	4413      	add	r3, r2
 81145e0:	781b      	ldrb	r3, [r3, #0]
 81145e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81145e4:	4b16      	ldr	r3, [pc, #88]	@ (8114640 <vPortValidateInterruptPriority+0x78>)
 81145e6:	781b      	ldrb	r3, [r3, #0]
 81145e8:	7afa      	ldrb	r2, [r7, #11]
 81145ea:	429a      	cmp	r2, r3
 81145ec:	d20b      	bcs.n	8114606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 81145ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81145f2:	f383 8811 	msr	BASEPRI, r3
 81145f6:	f3bf 8f6f 	isb	sy
 81145fa:	f3bf 8f4f 	dsb	sy
 81145fe:	607b      	str	r3, [r7, #4]
}
 8114600:	bf00      	nop
 8114602:	bf00      	nop
 8114604:	e7fd      	b.n	8114602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8114606:	4b0f      	ldr	r3, [pc, #60]	@ (8114644 <vPortValidateInterruptPriority+0x7c>)
 8114608:	681b      	ldr	r3, [r3, #0]
 811460a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 811460e:	4b0e      	ldr	r3, [pc, #56]	@ (8114648 <vPortValidateInterruptPriority+0x80>)
 8114610:	681b      	ldr	r3, [r3, #0]
 8114612:	429a      	cmp	r2, r3
 8114614:	d90b      	bls.n	811462e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8114616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811461a:	f383 8811 	msr	BASEPRI, r3
 811461e:	f3bf 8f6f 	isb	sy
 8114622:	f3bf 8f4f 	dsb	sy
 8114626:	603b      	str	r3, [r7, #0]
}
 8114628:	bf00      	nop
 811462a:	bf00      	nop
 811462c:	e7fd      	b.n	811462a <vPortValidateInterruptPriority+0x62>
	}
 811462e:	bf00      	nop
 8114630:	3714      	adds	r7, #20
 8114632:	46bd      	mov	sp, r7
 8114634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114638:	4770      	bx	lr
 811463a:	bf00      	nop
 811463c:	e000e3f0 	.word	0xe000e3f0
 8114640:	1000ab98 	.word	0x1000ab98
 8114644:	e000ed0c 	.word	0xe000ed0c
 8114648:	1000ab9c 	.word	0x1000ab9c

0811464c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 811464c:	b580      	push	{r7, lr}
 811464e:	b084      	sub	sp, #16
 8114650:	af00      	add	r7, sp, #0
 8114652:	6078      	str	r0, [r7, #4]
 8114654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8114656:	687b      	ldr	r3, [r7, #4]
 8114658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 811465a:	68fb      	ldr	r3, [r7, #12]
 811465c:	2b00      	cmp	r3, #0
 811465e:	d10b      	bne.n	8114678 <xQueueGenericReset+0x2c>
	__asm volatile
 8114660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114664:	f383 8811 	msr	BASEPRI, r3
 8114668:	f3bf 8f6f 	isb	sy
 811466c:	f3bf 8f4f 	dsb	sy
 8114670:	60bb      	str	r3, [r7, #8]
}
 8114672:	bf00      	nop
 8114674:	bf00      	nop
 8114676:	e7fd      	b.n	8114674 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8114678:	f7ff fec6 	bl	8114408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 811467c:	68fb      	ldr	r3, [r7, #12]
 811467e:	681a      	ldr	r2, [r3, #0]
 8114680:	68fb      	ldr	r3, [r7, #12]
 8114682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114684:	68f9      	ldr	r1, [r7, #12]
 8114686:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8114688:	fb01 f303 	mul.w	r3, r1, r3
 811468c:	441a      	add	r2, r3
 811468e:	68fb      	ldr	r3, [r7, #12]
 8114690:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8114692:	68fb      	ldr	r3, [r7, #12]
 8114694:	2200      	movs	r2, #0
 8114696:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8114698:	68fb      	ldr	r3, [r7, #12]
 811469a:	681a      	ldr	r2, [r3, #0]
 811469c:	68fb      	ldr	r3, [r7, #12]
 811469e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81146a0:	68fb      	ldr	r3, [r7, #12]
 81146a2:	681a      	ldr	r2, [r3, #0]
 81146a4:	68fb      	ldr	r3, [r7, #12]
 81146a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81146a8:	3b01      	subs	r3, #1
 81146aa:	68f9      	ldr	r1, [r7, #12]
 81146ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81146ae:	fb01 f303 	mul.w	r3, r1, r3
 81146b2:	441a      	add	r2, r3
 81146b4:	68fb      	ldr	r3, [r7, #12]
 81146b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81146b8:	68fb      	ldr	r3, [r7, #12]
 81146ba:	22ff      	movs	r2, #255	@ 0xff
 81146bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81146c0:	68fb      	ldr	r3, [r7, #12]
 81146c2:	22ff      	movs	r2, #255	@ 0xff
 81146c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 81146c8:	683b      	ldr	r3, [r7, #0]
 81146ca:	2b00      	cmp	r3, #0
 81146cc:	d114      	bne.n	81146f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81146ce:	68fb      	ldr	r3, [r7, #12]
 81146d0:	691b      	ldr	r3, [r3, #16]
 81146d2:	2b00      	cmp	r3, #0
 81146d4:	d01a      	beq.n	811470c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81146d6:	68fb      	ldr	r3, [r7, #12]
 81146d8:	3310      	adds	r3, #16
 81146da:	4618      	mov	r0, r3
 81146dc:	f002 f968 	bl	81169b0 <xTaskRemoveFromEventList>
 81146e0:	4603      	mov	r3, r0
 81146e2:	2b00      	cmp	r3, #0
 81146e4:	d012      	beq.n	811470c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81146e6:	4b0d      	ldr	r3, [pc, #52]	@ (811471c <xQueueGenericReset+0xd0>)
 81146e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81146ec:	601a      	str	r2, [r3, #0]
 81146ee:	f3bf 8f4f 	dsb	sy
 81146f2:	f3bf 8f6f 	isb	sy
 81146f6:	e009      	b.n	811470c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81146f8:	68fb      	ldr	r3, [r7, #12]
 81146fa:	3310      	adds	r3, #16
 81146fc:	4618      	mov	r0, r3
 81146fe:	f7ff fca1 	bl	8114044 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8114702:	68fb      	ldr	r3, [r7, #12]
 8114704:	3324      	adds	r3, #36	@ 0x24
 8114706:	4618      	mov	r0, r3
 8114708:	f7ff fc9c 	bl	8114044 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 811470c:	f7ff feae 	bl	811446c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8114710:	2301      	movs	r3, #1
}
 8114712:	4618      	mov	r0, r3
 8114714:	3710      	adds	r7, #16
 8114716:	46bd      	mov	sp, r7
 8114718:	bd80      	pop	{r7, pc}
 811471a:	bf00      	nop
 811471c:	e000ed04 	.word	0xe000ed04

08114720 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8114720:	b580      	push	{r7, lr}
 8114722:	b08e      	sub	sp, #56	@ 0x38
 8114724:	af02      	add	r7, sp, #8
 8114726:	60f8      	str	r0, [r7, #12]
 8114728:	60b9      	str	r1, [r7, #8]
 811472a:	607a      	str	r2, [r7, #4]
 811472c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 811472e:	68fb      	ldr	r3, [r7, #12]
 8114730:	2b00      	cmp	r3, #0
 8114732:	d10b      	bne.n	811474c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8114734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114738:	f383 8811 	msr	BASEPRI, r3
 811473c:	f3bf 8f6f 	isb	sy
 8114740:	f3bf 8f4f 	dsb	sy
 8114744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8114746:	bf00      	nop
 8114748:	bf00      	nop
 811474a:	e7fd      	b.n	8114748 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 811474c:	683b      	ldr	r3, [r7, #0]
 811474e:	2b00      	cmp	r3, #0
 8114750:	d10b      	bne.n	811476a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8114752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114756:	f383 8811 	msr	BASEPRI, r3
 811475a:	f3bf 8f6f 	isb	sy
 811475e:	f3bf 8f4f 	dsb	sy
 8114762:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8114764:	bf00      	nop
 8114766:	bf00      	nop
 8114768:	e7fd      	b.n	8114766 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 811476a:	687b      	ldr	r3, [r7, #4]
 811476c:	2b00      	cmp	r3, #0
 811476e:	d002      	beq.n	8114776 <xQueueGenericCreateStatic+0x56>
 8114770:	68bb      	ldr	r3, [r7, #8]
 8114772:	2b00      	cmp	r3, #0
 8114774:	d001      	beq.n	811477a <xQueueGenericCreateStatic+0x5a>
 8114776:	2301      	movs	r3, #1
 8114778:	e000      	b.n	811477c <xQueueGenericCreateStatic+0x5c>
 811477a:	2300      	movs	r3, #0
 811477c:	2b00      	cmp	r3, #0
 811477e:	d10b      	bne.n	8114798 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8114780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114784:	f383 8811 	msr	BASEPRI, r3
 8114788:	f3bf 8f6f 	isb	sy
 811478c:	f3bf 8f4f 	dsb	sy
 8114790:	623b      	str	r3, [r7, #32]
}
 8114792:	bf00      	nop
 8114794:	bf00      	nop
 8114796:	e7fd      	b.n	8114794 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8114798:	687b      	ldr	r3, [r7, #4]
 811479a:	2b00      	cmp	r3, #0
 811479c:	d102      	bne.n	81147a4 <xQueueGenericCreateStatic+0x84>
 811479e:	68bb      	ldr	r3, [r7, #8]
 81147a0:	2b00      	cmp	r3, #0
 81147a2:	d101      	bne.n	81147a8 <xQueueGenericCreateStatic+0x88>
 81147a4:	2301      	movs	r3, #1
 81147a6:	e000      	b.n	81147aa <xQueueGenericCreateStatic+0x8a>
 81147a8:	2300      	movs	r3, #0
 81147aa:	2b00      	cmp	r3, #0
 81147ac:	d10b      	bne.n	81147c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 81147ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81147b2:	f383 8811 	msr	BASEPRI, r3
 81147b6:	f3bf 8f6f 	isb	sy
 81147ba:	f3bf 8f4f 	dsb	sy
 81147be:	61fb      	str	r3, [r7, #28]
}
 81147c0:	bf00      	nop
 81147c2:	bf00      	nop
 81147c4:	e7fd      	b.n	81147c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81147c6:	2350      	movs	r3, #80	@ 0x50
 81147c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81147ca:	697b      	ldr	r3, [r7, #20]
 81147cc:	2b50      	cmp	r3, #80	@ 0x50
 81147ce:	d00b      	beq.n	81147e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81147d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81147d4:	f383 8811 	msr	BASEPRI, r3
 81147d8:	f3bf 8f6f 	isb	sy
 81147dc:	f3bf 8f4f 	dsb	sy
 81147e0:	61bb      	str	r3, [r7, #24]
}
 81147e2:	bf00      	nop
 81147e4:	bf00      	nop
 81147e6:	e7fd      	b.n	81147e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81147e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81147ea:	683b      	ldr	r3, [r7, #0]
 81147ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 81147ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81147f0:	2b00      	cmp	r3, #0
 81147f2:	d00d      	beq.n	8114810 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81147f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81147f6:	2201      	movs	r2, #1
 81147f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81147fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8114800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114802:	9300      	str	r3, [sp, #0]
 8114804:	4613      	mov	r3, r2
 8114806:	687a      	ldr	r2, [r7, #4]
 8114808:	68b9      	ldr	r1, [r7, #8]
 811480a:	68f8      	ldr	r0, [r7, #12]
 811480c:	f000 f840 	bl	8114890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8114810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8114812:	4618      	mov	r0, r3
 8114814:	3730      	adds	r7, #48	@ 0x30
 8114816:	46bd      	mov	sp, r7
 8114818:	bd80      	pop	{r7, pc}

0811481a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 811481a:	b580      	push	{r7, lr}
 811481c:	b08a      	sub	sp, #40	@ 0x28
 811481e:	af02      	add	r7, sp, #8
 8114820:	60f8      	str	r0, [r7, #12]
 8114822:	60b9      	str	r1, [r7, #8]
 8114824:	4613      	mov	r3, r2
 8114826:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8114828:	68fb      	ldr	r3, [r7, #12]
 811482a:	2b00      	cmp	r3, #0
 811482c:	d10b      	bne.n	8114846 <xQueueGenericCreate+0x2c>
	__asm volatile
 811482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114832:	f383 8811 	msr	BASEPRI, r3
 8114836:	f3bf 8f6f 	isb	sy
 811483a:	f3bf 8f4f 	dsb	sy
 811483e:	613b      	str	r3, [r7, #16]
}
 8114840:	bf00      	nop
 8114842:	bf00      	nop
 8114844:	e7fd      	b.n	8114842 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8114846:	68fb      	ldr	r3, [r7, #12]
 8114848:	68ba      	ldr	r2, [r7, #8]
 811484a:	fb02 f303 	mul.w	r3, r2, r3
 811484e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8114850:	69fb      	ldr	r3, [r7, #28]
 8114852:	3350      	adds	r3, #80	@ 0x50
 8114854:	4618      	mov	r0, r3
 8114856:	f7ff fa07 	bl	8113c68 <pvPortMalloc>
 811485a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 811485c:	69bb      	ldr	r3, [r7, #24]
 811485e:	2b00      	cmp	r3, #0
 8114860:	d011      	beq.n	8114886 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8114862:	69bb      	ldr	r3, [r7, #24]
 8114864:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8114866:	697b      	ldr	r3, [r7, #20]
 8114868:	3350      	adds	r3, #80	@ 0x50
 811486a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 811486c:	69bb      	ldr	r3, [r7, #24]
 811486e:	2200      	movs	r2, #0
 8114870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8114874:	79fa      	ldrb	r2, [r7, #7]
 8114876:	69bb      	ldr	r3, [r7, #24]
 8114878:	9300      	str	r3, [sp, #0]
 811487a:	4613      	mov	r3, r2
 811487c:	697a      	ldr	r2, [r7, #20]
 811487e:	68b9      	ldr	r1, [r7, #8]
 8114880:	68f8      	ldr	r0, [r7, #12]
 8114882:	f000 f805 	bl	8114890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8114886:	69bb      	ldr	r3, [r7, #24]
	}
 8114888:	4618      	mov	r0, r3
 811488a:	3720      	adds	r7, #32
 811488c:	46bd      	mov	sp, r7
 811488e:	bd80      	pop	{r7, pc}

08114890 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8114890:	b580      	push	{r7, lr}
 8114892:	b084      	sub	sp, #16
 8114894:	af00      	add	r7, sp, #0
 8114896:	60f8      	str	r0, [r7, #12]
 8114898:	60b9      	str	r1, [r7, #8]
 811489a:	607a      	str	r2, [r7, #4]
 811489c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 811489e:	68bb      	ldr	r3, [r7, #8]
 81148a0:	2b00      	cmp	r3, #0
 81148a2:	d103      	bne.n	81148ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 81148a4:	69bb      	ldr	r3, [r7, #24]
 81148a6:	69ba      	ldr	r2, [r7, #24]
 81148a8:	601a      	str	r2, [r3, #0]
 81148aa:	e002      	b.n	81148b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 81148ac:	69bb      	ldr	r3, [r7, #24]
 81148ae:	687a      	ldr	r2, [r7, #4]
 81148b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 81148b2:	69bb      	ldr	r3, [r7, #24]
 81148b4:	68fa      	ldr	r2, [r7, #12]
 81148b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 81148b8:	69bb      	ldr	r3, [r7, #24]
 81148ba:	68ba      	ldr	r2, [r7, #8]
 81148bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 81148be:	2101      	movs	r1, #1
 81148c0:	69b8      	ldr	r0, [r7, #24]
 81148c2:	f7ff fec3 	bl	811464c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 81148c6:	69bb      	ldr	r3, [r7, #24]
 81148c8:	78fa      	ldrb	r2, [r7, #3]
 81148ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81148ce:	bf00      	nop
 81148d0:	3710      	adds	r7, #16
 81148d2:	46bd      	mov	sp, r7
 81148d4:	bd80      	pop	{r7, pc}

081148d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 81148d6:	b580      	push	{r7, lr}
 81148d8:	b082      	sub	sp, #8
 81148da:	af00      	add	r7, sp, #0
 81148dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 81148de:	687b      	ldr	r3, [r7, #4]
 81148e0:	2b00      	cmp	r3, #0
 81148e2:	d00e      	beq.n	8114902 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 81148e4:	687b      	ldr	r3, [r7, #4]
 81148e6:	2200      	movs	r2, #0
 81148e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 81148ea:	687b      	ldr	r3, [r7, #4]
 81148ec:	2200      	movs	r2, #0
 81148ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 81148f0:	687b      	ldr	r3, [r7, #4]
 81148f2:	2200      	movs	r2, #0
 81148f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 81148f6:	2300      	movs	r3, #0
 81148f8:	2200      	movs	r2, #0
 81148fa:	2100      	movs	r1, #0
 81148fc:	6878      	ldr	r0, [r7, #4]
 81148fe:	f000 f911 	bl	8114b24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8114902:	bf00      	nop
 8114904:	3708      	adds	r7, #8
 8114906:	46bd      	mov	sp, r7
 8114908:	bd80      	pop	{r7, pc}

0811490a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 811490a:	b580      	push	{r7, lr}
 811490c:	b086      	sub	sp, #24
 811490e:	af00      	add	r7, sp, #0
 8114910:	4603      	mov	r3, r0
 8114912:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8114914:	2301      	movs	r3, #1
 8114916:	617b      	str	r3, [r7, #20]
 8114918:	2300      	movs	r3, #0
 811491a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 811491c:	79fb      	ldrb	r3, [r7, #7]
 811491e:	461a      	mov	r2, r3
 8114920:	6939      	ldr	r1, [r7, #16]
 8114922:	6978      	ldr	r0, [r7, #20]
 8114924:	f7ff ff79 	bl	811481a <xQueueGenericCreate>
 8114928:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 811492a:	68f8      	ldr	r0, [r7, #12]
 811492c:	f7ff ffd3 	bl	81148d6 <prvInitialiseMutex>

		return xNewQueue;
 8114930:	68fb      	ldr	r3, [r7, #12]
	}
 8114932:	4618      	mov	r0, r3
 8114934:	3718      	adds	r7, #24
 8114936:	46bd      	mov	sp, r7
 8114938:	bd80      	pop	{r7, pc}

0811493a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 811493a:	b580      	push	{r7, lr}
 811493c:	b088      	sub	sp, #32
 811493e:	af02      	add	r7, sp, #8
 8114940:	4603      	mov	r3, r0
 8114942:	6039      	str	r1, [r7, #0]
 8114944:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8114946:	2301      	movs	r3, #1
 8114948:	617b      	str	r3, [r7, #20]
 811494a:	2300      	movs	r3, #0
 811494c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 811494e:	79fb      	ldrb	r3, [r7, #7]
 8114950:	9300      	str	r3, [sp, #0]
 8114952:	683b      	ldr	r3, [r7, #0]
 8114954:	2200      	movs	r2, #0
 8114956:	6939      	ldr	r1, [r7, #16]
 8114958:	6978      	ldr	r0, [r7, #20]
 811495a:	f7ff fee1 	bl	8114720 <xQueueGenericCreateStatic>
 811495e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8114960:	68f8      	ldr	r0, [r7, #12]
 8114962:	f7ff ffb8 	bl	81148d6 <prvInitialiseMutex>

		return xNewQueue;
 8114966:	68fb      	ldr	r3, [r7, #12]
	}
 8114968:	4618      	mov	r0, r3
 811496a:	3718      	adds	r7, #24
 811496c:	46bd      	mov	sp, r7
 811496e:	bd80      	pop	{r7, pc}

08114970 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8114970:	b590      	push	{r4, r7, lr}
 8114972:	b087      	sub	sp, #28
 8114974:	af00      	add	r7, sp, #0
 8114976:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8114978:	687b      	ldr	r3, [r7, #4]
 811497a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 811497c:	693b      	ldr	r3, [r7, #16]
 811497e:	2b00      	cmp	r3, #0
 8114980:	d10b      	bne.n	811499a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8114982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114986:	f383 8811 	msr	BASEPRI, r3
 811498a:	f3bf 8f6f 	isb	sy
 811498e:	f3bf 8f4f 	dsb	sy
 8114992:	60fb      	str	r3, [r7, #12]
}
 8114994:	bf00      	nop
 8114996:	bf00      	nop
 8114998:	e7fd      	b.n	8114996 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 811499a:	693b      	ldr	r3, [r7, #16]
 811499c:	689c      	ldr	r4, [r3, #8]
 811499e:	f002 f9f5 	bl	8116d8c <xTaskGetCurrentTaskHandle>
 81149a2:	4603      	mov	r3, r0
 81149a4:	429c      	cmp	r4, r3
 81149a6:	d111      	bne.n	81149cc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 81149a8:	693b      	ldr	r3, [r7, #16]
 81149aa:	68db      	ldr	r3, [r3, #12]
 81149ac:	1e5a      	subs	r2, r3, #1
 81149ae:	693b      	ldr	r3, [r7, #16]
 81149b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 81149b2:	693b      	ldr	r3, [r7, #16]
 81149b4:	68db      	ldr	r3, [r3, #12]
 81149b6:	2b00      	cmp	r3, #0
 81149b8:	d105      	bne.n	81149c6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 81149ba:	2300      	movs	r3, #0
 81149bc:	2200      	movs	r2, #0
 81149be:	2100      	movs	r1, #0
 81149c0:	6938      	ldr	r0, [r7, #16]
 81149c2:	f000 f8af 	bl	8114b24 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 81149c6:	2301      	movs	r3, #1
 81149c8:	617b      	str	r3, [r7, #20]
 81149ca:	e001      	b.n	81149d0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 81149cc:	2300      	movs	r3, #0
 81149ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 81149d0:	697b      	ldr	r3, [r7, #20]
	}
 81149d2:	4618      	mov	r0, r3
 81149d4:	371c      	adds	r7, #28
 81149d6:	46bd      	mov	sp, r7
 81149d8:	bd90      	pop	{r4, r7, pc}

081149da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 81149da:	b590      	push	{r4, r7, lr}
 81149dc:	b087      	sub	sp, #28
 81149de:	af00      	add	r7, sp, #0
 81149e0:	6078      	str	r0, [r7, #4]
 81149e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 81149e4:	687b      	ldr	r3, [r7, #4]
 81149e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 81149e8:	693b      	ldr	r3, [r7, #16]
 81149ea:	2b00      	cmp	r3, #0
 81149ec:	d10b      	bne.n	8114a06 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 81149ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81149f2:	f383 8811 	msr	BASEPRI, r3
 81149f6:	f3bf 8f6f 	isb	sy
 81149fa:	f3bf 8f4f 	dsb	sy
 81149fe:	60fb      	str	r3, [r7, #12]
}
 8114a00:	bf00      	nop
 8114a02:	bf00      	nop
 8114a04:	e7fd      	b.n	8114a02 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8114a06:	693b      	ldr	r3, [r7, #16]
 8114a08:	689c      	ldr	r4, [r3, #8]
 8114a0a:	f002 f9bf 	bl	8116d8c <xTaskGetCurrentTaskHandle>
 8114a0e:	4603      	mov	r3, r0
 8114a10:	429c      	cmp	r4, r3
 8114a12:	d107      	bne.n	8114a24 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8114a14:	693b      	ldr	r3, [r7, #16]
 8114a16:	68db      	ldr	r3, [r3, #12]
 8114a18:	1c5a      	adds	r2, r3, #1
 8114a1a:	693b      	ldr	r3, [r7, #16]
 8114a1c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8114a1e:	2301      	movs	r3, #1
 8114a20:	617b      	str	r3, [r7, #20]
 8114a22:	e00c      	b.n	8114a3e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8114a24:	6839      	ldr	r1, [r7, #0]
 8114a26:	6938      	ldr	r0, [r7, #16]
 8114a28:	f000 fb8e 	bl	8115148 <xQueueSemaphoreTake>
 8114a2c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8114a2e:	697b      	ldr	r3, [r7, #20]
 8114a30:	2b00      	cmp	r3, #0
 8114a32:	d004      	beq.n	8114a3e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8114a34:	693b      	ldr	r3, [r7, #16]
 8114a36:	68db      	ldr	r3, [r3, #12]
 8114a38:	1c5a      	adds	r2, r3, #1
 8114a3a:	693b      	ldr	r3, [r7, #16]
 8114a3c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8114a3e:	697b      	ldr	r3, [r7, #20]
	}
 8114a40:	4618      	mov	r0, r3
 8114a42:	371c      	adds	r7, #28
 8114a44:	46bd      	mov	sp, r7
 8114a46:	bd90      	pop	{r4, r7, pc}

08114a48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8114a48:	b580      	push	{r7, lr}
 8114a4a:	b08a      	sub	sp, #40	@ 0x28
 8114a4c:	af02      	add	r7, sp, #8
 8114a4e:	60f8      	str	r0, [r7, #12]
 8114a50:	60b9      	str	r1, [r7, #8]
 8114a52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8114a54:	68fb      	ldr	r3, [r7, #12]
 8114a56:	2b00      	cmp	r3, #0
 8114a58:	d10b      	bne.n	8114a72 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8114a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114a5e:	f383 8811 	msr	BASEPRI, r3
 8114a62:	f3bf 8f6f 	isb	sy
 8114a66:	f3bf 8f4f 	dsb	sy
 8114a6a:	61bb      	str	r3, [r7, #24]
}
 8114a6c:	bf00      	nop
 8114a6e:	bf00      	nop
 8114a70:	e7fd      	b.n	8114a6e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8114a72:	68ba      	ldr	r2, [r7, #8]
 8114a74:	68fb      	ldr	r3, [r7, #12]
 8114a76:	429a      	cmp	r2, r3
 8114a78:	d90b      	bls.n	8114a92 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8114a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114a7e:	f383 8811 	msr	BASEPRI, r3
 8114a82:	f3bf 8f6f 	isb	sy
 8114a86:	f3bf 8f4f 	dsb	sy
 8114a8a:	617b      	str	r3, [r7, #20]
}
 8114a8c:	bf00      	nop
 8114a8e:	bf00      	nop
 8114a90:	e7fd      	b.n	8114a8e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8114a92:	2302      	movs	r3, #2
 8114a94:	9300      	str	r3, [sp, #0]
 8114a96:	687b      	ldr	r3, [r7, #4]
 8114a98:	2200      	movs	r2, #0
 8114a9a:	2100      	movs	r1, #0
 8114a9c:	68f8      	ldr	r0, [r7, #12]
 8114a9e:	f7ff fe3f 	bl	8114720 <xQueueGenericCreateStatic>
 8114aa2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8114aa4:	69fb      	ldr	r3, [r7, #28]
 8114aa6:	2b00      	cmp	r3, #0
 8114aa8:	d002      	beq.n	8114ab0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8114aaa:	69fb      	ldr	r3, [r7, #28]
 8114aac:	68ba      	ldr	r2, [r7, #8]
 8114aae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8114ab0:	69fb      	ldr	r3, [r7, #28]
	}
 8114ab2:	4618      	mov	r0, r3
 8114ab4:	3720      	adds	r7, #32
 8114ab6:	46bd      	mov	sp, r7
 8114ab8:	bd80      	pop	{r7, pc}

08114aba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8114aba:	b580      	push	{r7, lr}
 8114abc:	b086      	sub	sp, #24
 8114abe:	af00      	add	r7, sp, #0
 8114ac0:	6078      	str	r0, [r7, #4]
 8114ac2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8114ac4:	687b      	ldr	r3, [r7, #4]
 8114ac6:	2b00      	cmp	r3, #0
 8114ac8:	d10b      	bne.n	8114ae2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8114aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114ace:	f383 8811 	msr	BASEPRI, r3
 8114ad2:	f3bf 8f6f 	isb	sy
 8114ad6:	f3bf 8f4f 	dsb	sy
 8114ada:	613b      	str	r3, [r7, #16]
}
 8114adc:	bf00      	nop
 8114ade:	bf00      	nop
 8114ae0:	e7fd      	b.n	8114ade <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8114ae2:	683a      	ldr	r2, [r7, #0]
 8114ae4:	687b      	ldr	r3, [r7, #4]
 8114ae6:	429a      	cmp	r2, r3
 8114ae8:	d90b      	bls.n	8114b02 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8114aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114aee:	f383 8811 	msr	BASEPRI, r3
 8114af2:	f3bf 8f6f 	isb	sy
 8114af6:	f3bf 8f4f 	dsb	sy
 8114afa:	60fb      	str	r3, [r7, #12]
}
 8114afc:	bf00      	nop
 8114afe:	bf00      	nop
 8114b00:	e7fd      	b.n	8114afe <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8114b02:	2202      	movs	r2, #2
 8114b04:	2100      	movs	r1, #0
 8114b06:	6878      	ldr	r0, [r7, #4]
 8114b08:	f7ff fe87 	bl	811481a <xQueueGenericCreate>
 8114b0c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8114b0e:	697b      	ldr	r3, [r7, #20]
 8114b10:	2b00      	cmp	r3, #0
 8114b12:	d002      	beq.n	8114b1a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8114b14:	697b      	ldr	r3, [r7, #20]
 8114b16:	683a      	ldr	r2, [r7, #0]
 8114b18:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8114b1a:	697b      	ldr	r3, [r7, #20]
	}
 8114b1c:	4618      	mov	r0, r3
 8114b1e:	3718      	adds	r7, #24
 8114b20:	46bd      	mov	sp, r7
 8114b22:	bd80      	pop	{r7, pc}

08114b24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8114b24:	b580      	push	{r7, lr}
 8114b26:	b08e      	sub	sp, #56	@ 0x38
 8114b28:	af00      	add	r7, sp, #0
 8114b2a:	60f8      	str	r0, [r7, #12]
 8114b2c:	60b9      	str	r1, [r7, #8]
 8114b2e:	607a      	str	r2, [r7, #4]
 8114b30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8114b32:	2300      	movs	r3, #0
 8114b34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8114b36:	68fb      	ldr	r3, [r7, #12]
 8114b38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8114b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114b3c:	2b00      	cmp	r3, #0
 8114b3e:	d10b      	bne.n	8114b58 <xQueueGenericSend+0x34>
	__asm volatile
 8114b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114b44:	f383 8811 	msr	BASEPRI, r3
 8114b48:	f3bf 8f6f 	isb	sy
 8114b4c:	f3bf 8f4f 	dsb	sy
 8114b50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8114b52:	bf00      	nop
 8114b54:	bf00      	nop
 8114b56:	e7fd      	b.n	8114b54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8114b58:	68bb      	ldr	r3, [r7, #8]
 8114b5a:	2b00      	cmp	r3, #0
 8114b5c:	d103      	bne.n	8114b66 <xQueueGenericSend+0x42>
 8114b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114b62:	2b00      	cmp	r3, #0
 8114b64:	d101      	bne.n	8114b6a <xQueueGenericSend+0x46>
 8114b66:	2301      	movs	r3, #1
 8114b68:	e000      	b.n	8114b6c <xQueueGenericSend+0x48>
 8114b6a:	2300      	movs	r3, #0
 8114b6c:	2b00      	cmp	r3, #0
 8114b6e:	d10b      	bne.n	8114b88 <xQueueGenericSend+0x64>
	__asm volatile
 8114b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114b74:	f383 8811 	msr	BASEPRI, r3
 8114b78:	f3bf 8f6f 	isb	sy
 8114b7c:	f3bf 8f4f 	dsb	sy
 8114b80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8114b82:	bf00      	nop
 8114b84:	bf00      	nop
 8114b86:	e7fd      	b.n	8114b84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8114b88:	683b      	ldr	r3, [r7, #0]
 8114b8a:	2b02      	cmp	r3, #2
 8114b8c:	d103      	bne.n	8114b96 <xQueueGenericSend+0x72>
 8114b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114b92:	2b01      	cmp	r3, #1
 8114b94:	d101      	bne.n	8114b9a <xQueueGenericSend+0x76>
 8114b96:	2301      	movs	r3, #1
 8114b98:	e000      	b.n	8114b9c <xQueueGenericSend+0x78>
 8114b9a:	2300      	movs	r3, #0
 8114b9c:	2b00      	cmp	r3, #0
 8114b9e:	d10b      	bne.n	8114bb8 <xQueueGenericSend+0x94>
	__asm volatile
 8114ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114ba4:	f383 8811 	msr	BASEPRI, r3
 8114ba8:	f3bf 8f6f 	isb	sy
 8114bac:	f3bf 8f4f 	dsb	sy
 8114bb0:	623b      	str	r3, [r7, #32]
}
 8114bb2:	bf00      	nop
 8114bb4:	bf00      	nop
 8114bb6:	e7fd      	b.n	8114bb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8114bb8:	f002 f8f8 	bl	8116dac <xTaskGetSchedulerState>
 8114bbc:	4603      	mov	r3, r0
 8114bbe:	2b00      	cmp	r3, #0
 8114bc0:	d102      	bne.n	8114bc8 <xQueueGenericSend+0xa4>
 8114bc2:	687b      	ldr	r3, [r7, #4]
 8114bc4:	2b00      	cmp	r3, #0
 8114bc6:	d101      	bne.n	8114bcc <xQueueGenericSend+0xa8>
 8114bc8:	2301      	movs	r3, #1
 8114bca:	e000      	b.n	8114bce <xQueueGenericSend+0xaa>
 8114bcc:	2300      	movs	r3, #0
 8114bce:	2b00      	cmp	r3, #0
 8114bd0:	d10b      	bne.n	8114bea <xQueueGenericSend+0xc6>
	__asm volatile
 8114bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114bd6:	f383 8811 	msr	BASEPRI, r3
 8114bda:	f3bf 8f6f 	isb	sy
 8114bde:	f3bf 8f4f 	dsb	sy
 8114be2:	61fb      	str	r3, [r7, #28]
}
 8114be4:	bf00      	nop
 8114be6:	bf00      	nop
 8114be8:	e7fd      	b.n	8114be6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8114bea:	f7ff fc0d 	bl	8114408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8114bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8114bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114bf6:	429a      	cmp	r2, r3
 8114bf8:	d302      	bcc.n	8114c00 <xQueueGenericSend+0xdc>
 8114bfa:	683b      	ldr	r3, [r7, #0]
 8114bfc:	2b02      	cmp	r3, #2
 8114bfe:	d129      	bne.n	8114c54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8114c00:	683a      	ldr	r2, [r7, #0]
 8114c02:	68b9      	ldr	r1, [r7, #8]
 8114c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8114c06:	f000 fc6d 	bl	81154e4 <prvCopyDataToQueue>
 8114c0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8114c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114c10:	2b00      	cmp	r3, #0
 8114c12:	d010      	beq.n	8114c36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8114c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114c16:	3324      	adds	r3, #36	@ 0x24
 8114c18:	4618      	mov	r0, r3
 8114c1a:	f001 fec9 	bl	81169b0 <xTaskRemoveFromEventList>
 8114c1e:	4603      	mov	r3, r0
 8114c20:	2b00      	cmp	r3, #0
 8114c22:	d013      	beq.n	8114c4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8114c24:	4b3f      	ldr	r3, [pc, #252]	@ (8114d24 <xQueueGenericSend+0x200>)
 8114c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8114c2a:	601a      	str	r2, [r3, #0]
 8114c2c:	f3bf 8f4f 	dsb	sy
 8114c30:	f3bf 8f6f 	isb	sy
 8114c34:	e00a      	b.n	8114c4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8114c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114c38:	2b00      	cmp	r3, #0
 8114c3a:	d007      	beq.n	8114c4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8114c3c:	4b39      	ldr	r3, [pc, #228]	@ (8114d24 <xQueueGenericSend+0x200>)
 8114c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8114c42:	601a      	str	r2, [r3, #0]
 8114c44:	f3bf 8f4f 	dsb	sy
 8114c48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8114c4c:	f7ff fc0e 	bl	811446c <vPortExitCritical>
				return pdPASS;
 8114c50:	2301      	movs	r3, #1
 8114c52:	e063      	b.n	8114d1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8114c54:	687b      	ldr	r3, [r7, #4]
 8114c56:	2b00      	cmp	r3, #0
 8114c58:	d103      	bne.n	8114c62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8114c5a:	f7ff fc07 	bl	811446c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8114c5e:	2300      	movs	r3, #0
 8114c60:	e05c      	b.n	8114d1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8114c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114c64:	2b00      	cmp	r3, #0
 8114c66:	d106      	bne.n	8114c76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8114c68:	f107 0314 	add.w	r3, r7, #20
 8114c6c:	4618      	mov	r0, r3
 8114c6e:	f001 ff2b 	bl	8116ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8114c72:	2301      	movs	r3, #1
 8114c74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8114c76:	f7ff fbf9 	bl	811446c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8114c7a:	f001 fc59 	bl	8116530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8114c7e:	f7ff fbc3 	bl	8114408 <vPortEnterCritical>
 8114c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114c84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8114c88:	b25b      	sxtb	r3, r3
 8114c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114c8e:	d103      	bne.n	8114c98 <xQueueGenericSend+0x174>
 8114c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114c92:	2200      	movs	r2, #0
 8114c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8114c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8114c9e:	b25b      	sxtb	r3, r3
 8114ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114ca4:	d103      	bne.n	8114cae <xQueueGenericSend+0x18a>
 8114ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114ca8:	2200      	movs	r2, #0
 8114caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8114cae:	f7ff fbdd 	bl	811446c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8114cb2:	1d3a      	adds	r2, r7, #4
 8114cb4:	f107 0314 	add.w	r3, r7, #20
 8114cb8:	4611      	mov	r1, r2
 8114cba:	4618      	mov	r0, r3
 8114cbc:	f001 ff1a 	bl	8116af4 <xTaskCheckForTimeOut>
 8114cc0:	4603      	mov	r3, r0
 8114cc2:	2b00      	cmp	r3, #0
 8114cc4:	d124      	bne.n	8114d10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8114cc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8114cc8:	f000 fd04 	bl	81156d4 <prvIsQueueFull>
 8114ccc:	4603      	mov	r3, r0
 8114cce:	2b00      	cmp	r3, #0
 8114cd0:	d018      	beq.n	8114d04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8114cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114cd4:	3310      	adds	r3, #16
 8114cd6:	687a      	ldr	r2, [r7, #4]
 8114cd8:	4611      	mov	r1, r2
 8114cda:	4618      	mov	r0, r3
 8114cdc:	f001 fe16 	bl	811690c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8114ce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8114ce2:	f000 fc8f 	bl	8115604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8114ce6:	f001 fc31 	bl	811654c <xTaskResumeAll>
 8114cea:	4603      	mov	r3, r0
 8114cec:	2b00      	cmp	r3, #0
 8114cee:	f47f af7c 	bne.w	8114bea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8114cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8114d24 <xQueueGenericSend+0x200>)
 8114cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8114cf8:	601a      	str	r2, [r3, #0]
 8114cfa:	f3bf 8f4f 	dsb	sy
 8114cfe:	f3bf 8f6f 	isb	sy
 8114d02:	e772      	b.n	8114bea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8114d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8114d06:	f000 fc7d 	bl	8115604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8114d0a:	f001 fc1f 	bl	811654c <xTaskResumeAll>
 8114d0e:	e76c      	b.n	8114bea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8114d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8114d12:	f000 fc77 	bl	8115604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8114d16:	f001 fc19 	bl	811654c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8114d1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8114d1c:	4618      	mov	r0, r3
 8114d1e:	3738      	adds	r7, #56	@ 0x38
 8114d20:	46bd      	mov	sp, r7
 8114d22:	bd80      	pop	{r7, pc}
 8114d24:	e000ed04 	.word	0xe000ed04

08114d28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8114d28:	b580      	push	{r7, lr}
 8114d2a:	b090      	sub	sp, #64	@ 0x40
 8114d2c:	af00      	add	r7, sp, #0
 8114d2e:	60f8      	str	r0, [r7, #12]
 8114d30:	60b9      	str	r1, [r7, #8]
 8114d32:	607a      	str	r2, [r7, #4]
 8114d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8114d36:	68fb      	ldr	r3, [r7, #12]
 8114d38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8114d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114d3c:	2b00      	cmp	r3, #0
 8114d3e:	d10b      	bne.n	8114d58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8114d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114d44:	f383 8811 	msr	BASEPRI, r3
 8114d48:	f3bf 8f6f 	isb	sy
 8114d4c:	f3bf 8f4f 	dsb	sy
 8114d50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8114d52:	bf00      	nop
 8114d54:	bf00      	nop
 8114d56:	e7fd      	b.n	8114d54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8114d58:	68bb      	ldr	r3, [r7, #8]
 8114d5a:	2b00      	cmp	r3, #0
 8114d5c:	d103      	bne.n	8114d66 <xQueueGenericSendFromISR+0x3e>
 8114d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114d62:	2b00      	cmp	r3, #0
 8114d64:	d101      	bne.n	8114d6a <xQueueGenericSendFromISR+0x42>
 8114d66:	2301      	movs	r3, #1
 8114d68:	e000      	b.n	8114d6c <xQueueGenericSendFromISR+0x44>
 8114d6a:	2300      	movs	r3, #0
 8114d6c:	2b00      	cmp	r3, #0
 8114d6e:	d10b      	bne.n	8114d88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8114d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114d74:	f383 8811 	msr	BASEPRI, r3
 8114d78:	f3bf 8f6f 	isb	sy
 8114d7c:	f3bf 8f4f 	dsb	sy
 8114d80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8114d82:	bf00      	nop
 8114d84:	bf00      	nop
 8114d86:	e7fd      	b.n	8114d84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8114d88:	683b      	ldr	r3, [r7, #0]
 8114d8a:	2b02      	cmp	r3, #2
 8114d8c:	d103      	bne.n	8114d96 <xQueueGenericSendFromISR+0x6e>
 8114d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114d92:	2b01      	cmp	r3, #1
 8114d94:	d101      	bne.n	8114d9a <xQueueGenericSendFromISR+0x72>
 8114d96:	2301      	movs	r3, #1
 8114d98:	e000      	b.n	8114d9c <xQueueGenericSendFromISR+0x74>
 8114d9a:	2300      	movs	r3, #0
 8114d9c:	2b00      	cmp	r3, #0
 8114d9e:	d10b      	bne.n	8114db8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8114da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114da4:	f383 8811 	msr	BASEPRI, r3
 8114da8:	f3bf 8f6f 	isb	sy
 8114dac:	f3bf 8f4f 	dsb	sy
 8114db0:	623b      	str	r3, [r7, #32]
}
 8114db2:	bf00      	nop
 8114db4:	bf00      	nop
 8114db6:	e7fd      	b.n	8114db4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8114db8:	f7ff fc06 	bl	81145c8 <vPortValidateInterruptPriority>
	__asm volatile
 8114dbc:	f3ef 8211 	mrs	r2, BASEPRI
 8114dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114dc4:	f383 8811 	msr	BASEPRI, r3
 8114dc8:	f3bf 8f6f 	isb	sy
 8114dcc:	f3bf 8f4f 	dsb	sy
 8114dd0:	61fa      	str	r2, [r7, #28]
 8114dd2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8114dd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8114dd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8114dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8114ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114de0:	429a      	cmp	r2, r3
 8114de2:	d302      	bcc.n	8114dea <xQueueGenericSendFromISR+0xc2>
 8114de4:	683b      	ldr	r3, [r7, #0]
 8114de6:	2b02      	cmp	r3, #2
 8114de8:	d12f      	bne.n	8114e4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8114dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8114df0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8114df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8114df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8114dfa:	683a      	ldr	r2, [r7, #0]
 8114dfc:	68b9      	ldr	r1, [r7, #8]
 8114dfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8114e00:	f000 fb70 	bl	81154e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8114e04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8114e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114e0c:	d112      	bne.n	8114e34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8114e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114e12:	2b00      	cmp	r3, #0
 8114e14:	d016      	beq.n	8114e44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8114e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e18:	3324      	adds	r3, #36	@ 0x24
 8114e1a:	4618      	mov	r0, r3
 8114e1c:	f001 fdc8 	bl	81169b0 <xTaskRemoveFromEventList>
 8114e20:	4603      	mov	r3, r0
 8114e22:	2b00      	cmp	r3, #0
 8114e24:	d00e      	beq.n	8114e44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8114e26:	687b      	ldr	r3, [r7, #4]
 8114e28:	2b00      	cmp	r3, #0
 8114e2a:	d00b      	beq.n	8114e44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8114e2c:	687b      	ldr	r3, [r7, #4]
 8114e2e:	2201      	movs	r2, #1
 8114e30:	601a      	str	r2, [r3, #0]
 8114e32:	e007      	b.n	8114e44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8114e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8114e38:	3301      	adds	r3, #1
 8114e3a:	b2db      	uxtb	r3, r3
 8114e3c:	b25a      	sxtb	r2, r3
 8114e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8114e44:	2301      	movs	r3, #1
 8114e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8114e48:	e001      	b.n	8114e4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8114e4a:	2300      	movs	r3, #0
 8114e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8114e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114e50:	617b      	str	r3, [r7, #20]
	__asm volatile
 8114e52:	697b      	ldr	r3, [r7, #20]
 8114e54:	f383 8811 	msr	BASEPRI, r3
}
 8114e58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8114e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8114e5c:	4618      	mov	r0, r3
 8114e5e:	3740      	adds	r7, #64	@ 0x40
 8114e60:	46bd      	mov	sp, r7
 8114e62:	bd80      	pop	{r7, pc}

08114e64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8114e64:	b580      	push	{r7, lr}
 8114e66:	b08e      	sub	sp, #56	@ 0x38
 8114e68:	af00      	add	r7, sp, #0
 8114e6a:	6078      	str	r0, [r7, #4]
 8114e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8114e6e:	687b      	ldr	r3, [r7, #4]
 8114e70:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8114e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114e74:	2b00      	cmp	r3, #0
 8114e76:	d10b      	bne.n	8114e90 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8114e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114e7c:	f383 8811 	msr	BASEPRI, r3
 8114e80:	f3bf 8f6f 	isb	sy
 8114e84:	f3bf 8f4f 	dsb	sy
 8114e88:	623b      	str	r3, [r7, #32]
}
 8114e8a:	bf00      	nop
 8114e8c:	bf00      	nop
 8114e8e:	e7fd      	b.n	8114e8c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8114e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114e94:	2b00      	cmp	r3, #0
 8114e96:	d00b      	beq.n	8114eb0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8114e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114e9c:	f383 8811 	msr	BASEPRI, r3
 8114ea0:	f3bf 8f6f 	isb	sy
 8114ea4:	f3bf 8f4f 	dsb	sy
 8114ea8:	61fb      	str	r3, [r7, #28]
}
 8114eaa:	bf00      	nop
 8114eac:	bf00      	nop
 8114eae:	e7fd      	b.n	8114eac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8114eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114eb2:	681b      	ldr	r3, [r3, #0]
 8114eb4:	2b00      	cmp	r3, #0
 8114eb6:	d103      	bne.n	8114ec0 <xQueueGiveFromISR+0x5c>
 8114eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114eba:	689b      	ldr	r3, [r3, #8]
 8114ebc:	2b00      	cmp	r3, #0
 8114ebe:	d101      	bne.n	8114ec4 <xQueueGiveFromISR+0x60>
 8114ec0:	2301      	movs	r3, #1
 8114ec2:	e000      	b.n	8114ec6 <xQueueGiveFromISR+0x62>
 8114ec4:	2300      	movs	r3, #0
 8114ec6:	2b00      	cmp	r3, #0
 8114ec8:	d10b      	bne.n	8114ee2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8114eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114ece:	f383 8811 	msr	BASEPRI, r3
 8114ed2:	f3bf 8f6f 	isb	sy
 8114ed6:	f3bf 8f4f 	dsb	sy
 8114eda:	61bb      	str	r3, [r7, #24]
}
 8114edc:	bf00      	nop
 8114ede:	bf00      	nop
 8114ee0:	e7fd      	b.n	8114ede <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8114ee2:	f7ff fb71 	bl	81145c8 <vPortValidateInterruptPriority>
	__asm volatile
 8114ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8114eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114eee:	f383 8811 	msr	BASEPRI, r3
 8114ef2:	f3bf 8f6f 	isb	sy
 8114ef6:	f3bf 8f4f 	dsb	sy
 8114efa:	617a      	str	r2, [r7, #20]
 8114efc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8114efe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8114f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8114f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8114f06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8114f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8114f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8114f0e:	429a      	cmp	r2, r3
 8114f10:	d22b      	bcs.n	8114f6a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8114f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114f14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8114f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8114f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114f1e:	1c5a      	adds	r2, r3, #1
 8114f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114f22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8114f24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8114f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114f2c:	d112      	bne.n	8114f54 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8114f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114f32:	2b00      	cmp	r3, #0
 8114f34:	d016      	beq.n	8114f64 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8114f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114f38:	3324      	adds	r3, #36	@ 0x24
 8114f3a:	4618      	mov	r0, r3
 8114f3c:	f001 fd38 	bl	81169b0 <xTaskRemoveFromEventList>
 8114f40:	4603      	mov	r3, r0
 8114f42:	2b00      	cmp	r3, #0
 8114f44:	d00e      	beq.n	8114f64 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8114f46:	683b      	ldr	r3, [r7, #0]
 8114f48:	2b00      	cmp	r3, #0
 8114f4a:	d00b      	beq.n	8114f64 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8114f4c:	683b      	ldr	r3, [r7, #0]
 8114f4e:	2201      	movs	r2, #1
 8114f50:	601a      	str	r2, [r3, #0]
 8114f52:	e007      	b.n	8114f64 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8114f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8114f58:	3301      	adds	r3, #1
 8114f5a:	b2db      	uxtb	r3, r3
 8114f5c:	b25a      	sxtb	r2, r3
 8114f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8114f64:	2301      	movs	r3, #1
 8114f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8114f68:	e001      	b.n	8114f6e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8114f6a:	2300      	movs	r3, #0
 8114f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8114f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114f70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8114f72:	68fb      	ldr	r3, [r7, #12]
 8114f74:	f383 8811 	msr	BASEPRI, r3
}
 8114f78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8114f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8114f7c:	4618      	mov	r0, r3
 8114f7e:	3738      	adds	r7, #56	@ 0x38
 8114f80:	46bd      	mov	sp, r7
 8114f82:	bd80      	pop	{r7, pc}

08114f84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8114f84:	b580      	push	{r7, lr}
 8114f86:	b08c      	sub	sp, #48	@ 0x30
 8114f88:	af00      	add	r7, sp, #0
 8114f8a:	60f8      	str	r0, [r7, #12]
 8114f8c:	60b9      	str	r1, [r7, #8]
 8114f8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8114f90:	2300      	movs	r3, #0
 8114f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8114f94:	68fb      	ldr	r3, [r7, #12]
 8114f96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8114f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114f9a:	2b00      	cmp	r3, #0
 8114f9c:	d10b      	bne.n	8114fb6 <xQueueReceive+0x32>
	__asm volatile
 8114f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114fa2:	f383 8811 	msr	BASEPRI, r3
 8114fa6:	f3bf 8f6f 	isb	sy
 8114faa:	f3bf 8f4f 	dsb	sy
 8114fae:	623b      	str	r3, [r7, #32]
}
 8114fb0:	bf00      	nop
 8114fb2:	bf00      	nop
 8114fb4:	e7fd      	b.n	8114fb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8114fb6:	68bb      	ldr	r3, [r7, #8]
 8114fb8:	2b00      	cmp	r3, #0
 8114fba:	d103      	bne.n	8114fc4 <xQueueReceive+0x40>
 8114fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8114fc0:	2b00      	cmp	r3, #0
 8114fc2:	d101      	bne.n	8114fc8 <xQueueReceive+0x44>
 8114fc4:	2301      	movs	r3, #1
 8114fc6:	e000      	b.n	8114fca <xQueueReceive+0x46>
 8114fc8:	2300      	movs	r3, #0
 8114fca:	2b00      	cmp	r3, #0
 8114fcc:	d10b      	bne.n	8114fe6 <xQueueReceive+0x62>
	__asm volatile
 8114fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114fd2:	f383 8811 	msr	BASEPRI, r3
 8114fd6:	f3bf 8f6f 	isb	sy
 8114fda:	f3bf 8f4f 	dsb	sy
 8114fde:	61fb      	str	r3, [r7, #28]
}
 8114fe0:	bf00      	nop
 8114fe2:	bf00      	nop
 8114fe4:	e7fd      	b.n	8114fe2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8114fe6:	f001 fee1 	bl	8116dac <xTaskGetSchedulerState>
 8114fea:	4603      	mov	r3, r0
 8114fec:	2b00      	cmp	r3, #0
 8114fee:	d102      	bne.n	8114ff6 <xQueueReceive+0x72>
 8114ff0:	687b      	ldr	r3, [r7, #4]
 8114ff2:	2b00      	cmp	r3, #0
 8114ff4:	d101      	bne.n	8114ffa <xQueueReceive+0x76>
 8114ff6:	2301      	movs	r3, #1
 8114ff8:	e000      	b.n	8114ffc <xQueueReceive+0x78>
 8114ffa:	2300      	movs	r3, #0
 8114ffc:	2b00      	cmp	r3, #0
 8114ffe:	d10b      	bne.n	8115018 <xQueueReceive+0x94>
	__asm volatile
 8115000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115004:	f383 8811 	msr	BASEPRI, r3
 8115008:	f3bf 8f6f 	isb	sy
 811500c:	f3bf 8f4f 	dsb	sy
 8115010:	61bb      	str	r3, [r7, #24]
}
 8115012:	bf00      	nop
 8115014:	bf00      	nop
 8115016:	e7fd      	b.n	8115014 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8115018:	f7ff f9f6 	bl	8114408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 811501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811501e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8115020:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8115022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115024:	2b00      	cmp	r3, #0
 8115026:	d01f      	beq.n	8115068 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8115028:	68b9      	ldr	r1, [r7, #8]
 811502a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811502c:	f000 fac4 	bl	81155b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8115030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115032:	1e5a      	subs	r2, r3, #1
 8115034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115036:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8115038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811503a:	691b      	ldr	r3, [r3, #16]
 811503c:	2b00      	cmp	r3, #0
 811503e:	d00f      	beq.n	8115060 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8115040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115042:	3310      	adds	r3, #16
 8115044:	4618      	mov	r0, r3
 8115046:	f001 fcb3 	bl	81169b0 <xTaskRemoveFromEventList>
 811504a:	4603      	mov	r3, r0
 811504c:	2b00      	cmp	r3, #0
 811504e:	d007      	beq.n	8115060 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8115050:	4b3c      	ldr	r3, [pc, #240]	@ (8115144 <xQueueReceive+0x1c0>)
 8115052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115056:	601a      	str	r2, [r3, #0]
 8115058:	f3bf 8f4f 	dsb	sy
 811505c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8115060:	f7ff fa04 	bl	811446c <vPortExitCritical>
				return pdPASS;
 8115064:	2301      	movs	r3, #1
 8115066:	e069      	b.n	811513c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8115068:	687b      	ldr	r3, [r7, #4]
 811506a:	2b00      	cmp	r3, #0
 811506c:	d103      	bne.n	8115076 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811506e:	f7ff f9fd 	bl	811446c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8115072:	2300      	movs	r3, #0
 8115074:	e062      	b.n	811513c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8115076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115078:	2b00      	cmp	r3, #0
 811507a:	d106      	bne.n	811508a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811507c:	f107 0310 	add.w	r3, r7, #16
 8115080:	4618      	mov	r0, r3
 8115082:	f001 fd21 	bl	8116ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8115086:	2301      	movs	r3, #1
 8115088:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 811508a:	f7ff f9ef 	bl	811446c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 811508e:	f001 fa4f 	bl	8116530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8115092:	f7ff f9b9 	bl	8114408 <vPortEnterCritical>
 8115096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 811509c:	b25b      	sxtb	r3, r3
 811509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81150a2:	d103      	bne.n	81150ac <xQueueReceive+0x128>
 81150a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81150a6:	2200      	movs	r2, #0
 81150a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81150ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81150ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81150b2:	b25b      	sxtb	r3, r3
 81150b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81150b8:	d103      	bne.n	81150c2 <xQueueReceive+0x13e>
 81150ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81150bc:	2200      	movs	r2, #0
 81150be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81150c2:	f7ff f9d3 	bl	811446c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81150c6:	1d3a      	adds	r2, r7, #4
 81150c8:	f107 0310 	add.w	r3, r7, #16
 81150cc:	4611      	mov	r1, r2
 81150ce:	4618      	mov	r0, r3
 81150d0:	f001 fd10 	bl	8116af4 <xTaskCheckForTimeOut>
 81150d4:	4603      	mov	r3, r0
 81150d6:	2b00      	cmp	r3, #0
 81150d8:	d123      	bne.n	8115122 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81150da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81150dc:	f000 fae4 	bl	81156a8 <prvIsQueueEmpty>
 81150e0:	4603      	mov	r3, r0
 81150e2:	2b00      	cmp	r3, #0
 81150e4:	d017      	beq.n	8115116 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81150e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81150e8:	3324      	adds	r3, #36	@ 0x24
 81150ea:	687a      	ldr	r2, [r7, #4]
 81150ec:	4611      	mov	r1, r2
 81150ee:	4618      	mov	r0, r3
 81150f0:	f001 fc0c 	bl	811690c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81150f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81150f6:	f000 fa85 	bl	8115604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81150fa:	f001 fa27 	bl	811654c <xTaskResumeAll>
 81150fe:	4603      	mov	r3, r0
 8115100:	2b00      	cmp	r3, #0
 8115102:	d189      	bne.n	8115018 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8115104:	4b0f      	ldr	r3, [pc, #60]	@ (8115144 <xQueueReceive+0x1c0>)
 8115106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811510a:	601a      	str	r2, [r3, #0]
 811510c:	f3bf 8f4f 	dsb	sy
 8115110:	f3bf 8f6f 	isb	sy
 8115114:	e780      	b.n	8115018 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8115116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8115118:	f000 fa74 	bl	8115604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 811511c:	f001 fa16 	bl	811654c <xTaskResumeAll>
 8115120:	e77a      	b.n	8115018 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8115122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8115124:	f000 fa6e 	bl	8115604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8115128:	f001 fa10 	bl	811654c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 811512c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811512e:	f000 fabb 	bl	81156a8 <prvIsQueueEmpty>
 8115132:	4603      	mov	r3, r0
 8115134:	2b00      	cmp	r3, #0
 8115136:	f43f af6f 	beq.w	8115018 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 811513a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 811513c:	4618      	mov	r0, r3
 811513e:	3730      	adds	r7, #48	@ 0x30
 8115140:	46bd      	mov	sp, r7
 8115142:	bd80      	pop	{r7, pc}
 8115144:	e000ed04 	.word	0xe000ed04

08115148 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8115148:	b580      	push	{r7, lr}
 811514a:	b08e      	sub	sp, #56	@ 0x38
 811514c:	af00      	add	r7, sp, #0
 811514e:	6078      	str	r0, [r7, #4]
 8115150:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8115152:	2300      	movs	r3, #0
 8115154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8115156:	687b      	ldr	r3, [r7, #4]
 8115158:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 811515a:	2300      	movs	r3, #0
 811515c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 811515e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115160:	2b00      	cmp	r3, #0
 8115162:	d10b      	bne.n	811517c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8115164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115168:	f383 8811 	msr	BASEPRI, r3
 811516c:	f3bf 8f6f 	isb	sy
 8115170:	f3bf 8f4f 	dsb	sy
 8115174:	623b      	str	r3, [r7, #32]
}
 8115176:	bf00      	nop
 8115178:	bf00      	nop
 811517a:	e7fd      	b.n	8115178 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 811517c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8115180:	2b00      	cmp	r3, #0
 8115182:	d00b      	beq.n	811519c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8115184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115188:	f383 8811 	msr	BASEPRI, r3
 811518c:	f3bf 8f6f 	isb	sy
 8115190:	f3bf 8f4f 	dsb	sy
 8115194:	61fb      	str	r3, [r7, #28]
}
 8115196:	bf00      	nop
 8115198:	bf00      	nop
 811519a:	e7fd      	b.n	8115198 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 811519c:	f001 fe06 	bl	8116dac <xTaskGetSchedulerState>
 81151a0:	4603      	mov	r3, r0
 81151a2:	2b00      	cmp	r3, #0
 81151a4:	d102      	bne.n	81151ac <xQueueSemaphoreTake+0x64>
 81151a6:	683b      	ldr	r3, [r7, #0]
 81151a8:	2b00      	cmp	r3, #0
 81151aa:	d101      	bne.n	81151b0 <xQueueSemaphoreTake+0x68>
 81151ac:	2301      	movs	r3, #1
 81151ae:	e000      	b.n	81151b2 <xQueueSemaphoreTake+0x6a>
 81151b0:	2300      	movs	r3, #0
 81151b2:	2b00      	cmp	r3, #0
 81151b4:	d10b      	bne.n	81151ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 81151b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81151ba:	f383 8811 	msr	BASEPRI, r3
 81151be:	f3bf 8f6f 	isb	sy
 81151c2:	f3bf 8f4f 	dsb	sy
 81151c6:	61bb      	str	r3, [r7, #24]
}
 81151c8:	bf00      	nop
 81151ca:	bf00      	nop
 81151cc:	e7fd      	b.n	81151ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81151ce:	f7ff f91b 	bl	8114408 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 81151d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81151d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81151d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 81151d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81151da:	2b00      	cmp	r3, #0
 81151dc:	d024      	beq.n	8115228 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 81151de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81151e0:	1e5a      	subs	r2, r3, #1
 81151e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81151e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81151e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81151e8:	681b      	ldr	r3, [r3, #0]
 81151ea:	2b00      	cmp	r3, #0
 81151ec:	d104      	bne.n	81151f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 81151ee:	f001 ff57 	bl	81170a0 <pvTaskIncrementMutexHeldCount>
 81151f2:	4602      	mov	r2, r0
 81151f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81151f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81151f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81151fa:	691b      	ldr	r3, [r3, #16]
 81151fc:	2b00      	cmp	r3, #0
 81151fe:	d00f      	beq.n	8115220 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8115200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115202:	3310      	adds	r3, #16
 8115204:	4618      	mov	r0, r3
 8115206:	f001 fbd3 	bl	81169b0 <xTaskRemoveFromEventList>
 811520a:	4603      	mov	r3, r0
 811520c:	2b00      	cmp	r3, #0
 811520e:	d007      	beq.n	8115220 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8115210:	4b54      	ldr	r3, [pc, #336]	@ (8115364 <xQueueSemaphoreTake+0x21c>)
 8115212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115216:	601a      	str	r2, [r3, #0]
 8115218:	f3bf 8f4f 	dsb	sy
 811521c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8115220:	f7ff f924 	bl	811446c <vPortExitCritical>
				return pdPASS;
 8115224:	2301      	movs	r3, #1
 8115226:	e098      	b.n	811535a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8115228:	683b      	ldr	r3, [r7, #0]
 811522a:	2b00      	cmp	r3, #0
 811522c:	d112      	bne.n	8115254 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 811522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115230:	2b00      	cmp	r3, #0
 8115232:	d00b      	beq.n	811524c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8115234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115238:	f383 8811 	msr	BASEPRI, r3
 811523c:	f3bf 8f6f 	isb	sy
 8115240:	f3bf 8f4f 	dsb	sy
 8115244:	617b      	str	r3, [r7, #20]
}
 8115246:	bf00      	nop
 8115248:	bf00      	nop
 811524a:	e7fd      	b.n	8115248 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 811524c:	f7ff f90e 	bl	811446c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8115250:	2300      	movs	r3, #0
 8115252:	e082      	b.n	811535a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8115254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8115256:	2b00      	cmp	r3, #0
 8115258:	d106      	bne.n	8115268 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811525a:	f107 030c 	add.w	r3, r7, #12
 811525e:	4618      	mov	r0, r3
 8115260:	f001 fc32 	bl	8116ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8115264:	2301      	movs	r3, #1
 8115266:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8115268:	f7ff f900 	bl	811446c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 811526c:	f001 f960 	bl	8116530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8115270:	f7ff f8ca 	bl	8114408 <vPortEnterCritical>
 8115274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115276:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 811527a:	b25b      	sxtb	r3, r3
 811527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115280:	d103      	bne.n	811528a <xQueueSemaphoreTake+0x142>
 8115282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115284:	2200      	movs	r2, #0
 8115286:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 811528a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811528c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8115290:	b25b      	sxtb	r3, r3
 8115292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115296:	d103      	bne.n	81152a0 <xQueueSemaphoreTake+0x158>
 8115298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811529a:	2200      	movs	r2, #0
 811529c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81152a0:	f7ff f8e4 	bl	811446c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81152a4:	463a      	mov	r2, r7
 81152a6:	f107 030c 	add.w	r3, r7, #12
 81152aa:	4611      	mov	r1, r2
 81152ac:	4618      	mov	r0, r3
 81152ae:	f001 fc21 	bl	8116af4 <xTaskCheckForTimeOut>
 81152b2:	4603      	mov	r3, r0
 81152b4:	2b00      	cmp	r3, #0
 81152b6:	d132      	bne.n	811531e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81152b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81152ba:	f000 f9f5 	bl	81156a8 <prvIsQueueEmpty>
 81152be:	4603      	mov	r3, r0
 81152c0:	2b00      	cmp	r3, #0
 81152c2:	d026      	beq.n	8115312 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81152c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81152c6:	681b      	ldr	r3, [r3, #0]
 81152c8:	2b00      	cmp	r3, #0
 81152ca:	d109      	bne.n	81152e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 81152cc:	f7ff f89c 	bl	8114408 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 81152d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81152d2:	689b      	ldr	r3, [r3, #8]
 81152d4:	4618      	mov	r0, r3
 81152d6:	f001 fd87 	bl	8116de8 <xTaskPriorityInherit>
 81152da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 81152dc:	f7ff f8c6 	bl	811446c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81152e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81152e2:	3324      	adds	r3, #36	@ 0x24
 81152e4:	683a      	ldr	r2, [r7, #0]
 81152e6:	4611      	mov	r1, r2
 81152e8:	4618      	mov	r0, r3
 81152ea:	f001 fb0f 	bl	811690c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81152ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81152f0:	f000 f988 	bl	8115604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81152f4:	f001 f92a 	bl	811654c <xTaskResumeAll>
 81152f8:	4603      	mov	r3, r0
 81152fa:	2b00      	cmp	r3, #0
 81152fc:	f47f af67 	bne.w	81151ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8115300:	4b18      	ldr	r3, [pc, #96]	@ (8115364 <xQueueSemaphoreTake+0x21c>)
 8115302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115306:	601a      	str	r2, [r3, #0]
 8115308:	f3bf 8f4f 	dsb	sy
 811530c:	f3bf 8f6f 	isb	sy
 8115310:	e75d      	b.n	81151ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8115312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115314:	f000 f976 	bl	8115604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8115318:	f001 f918 	bl	811654c <xTaskResumeAll>
 811531c:	e757      	b.n	81151ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 811531e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115320:	f000 f970 	bl	8115604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8115324:	f001 f912 	bl	811654c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8115328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811532a:	f000 f9bd 	bl	81156a8 <prvIsQueueEmpty>
 811532e:	4603      	mov	r3, r0
 8115330:	2b00      	cmp	r3, #0
 8115332:	f43f af4c 	beq.w	81151ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8115336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115338:	2b00      	cmp	r3, #0
 811533a:	d00d      	beq.n	8115358 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 811533c:	f7ff f864 	bl	8114408 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8115340:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115342:	f000 f8b7 	bl	81154b4 <prvGetDisinheritPriorityAfterTimeout>
 8115346:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8115348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811534a:	689b      	ldr	r3, [r3, #8]
 811534c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811534e:	4618      	mov	r0, r3
 8115350:	f001 fe22 	bl	8116f98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8115354:	f7ff f88a 	bl	811446c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8115358:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 811535a:	4618      	mov	r0, r3
 811535c:	3738      	adds	r7, #56	@ 0x38
 811535e:	46bd      	mov	sp, r7
 8115360:	bd80      	pop	{r7, pc}
 8115362:	bf00      	nop
 8115364:	e000ed04 	.word	0xe000ed04

08115368 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8115368:	b580      	push	{r7, lr}
 811536a:	b08e      	sub	sp, #56	@ 0x38
 811536c:	af00      	add	r7, sp, #0
 811536e:	60f8      	str	r0, [r7, #12]
 8115370:	60b9      	str	r1, [r7, #8]
 8115372:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8115374:	68fb      	ldr	r3, [r7, #12]
 8115376:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8115378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811537a:	2b00      	cmp	r3, #0
 811537c:	d10b      	bne.n	8115396 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 811537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115382:	f383 8811 	msr	BASEPRI, r3
 8115386:	f3bf 8f6f 	isb	sy
 811538a:	f3bf 8f4f 	dsb	sy
 811538e:	623b      	str	r3, [r7, #32]
}
 8115390:	bf00      	nop
 8115392:	bf00      	nop
 8115394:	e7fd      	b.n	8115392 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8115396:	68bb      	ldr	r3, [r7, #8]
 8115398:	2b00      	cmp	r3, #0
 811539a:	d103      	bne.n	81153a4 <xQueueReceiveFromISR+0x3c>
 811539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81153a0:	2b00      	cmp	r3, #0
 81153a2:	d101      	bne.n	81153a8 <xQueueReceiveFromISR+0x40>
 81153a4:	2301      	movs	r3, #1
 81153a6:	e000      	b.n	81153aa <xQueueReceiveFromISR+0x42>
 81153a8:	2300      	movs	r3, #0
 81153aa:	2b00      	cmp	r3, #0
 81153ac:	d10b      	bne.n	81153c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 81153ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81153b2:	f383 8811 	msr	BASEPRI, r3
 81153b6:	f3bf 8f6f 	isb	sy
 81153ba:	f3bf 8f4f 	dsb	sy
 81153be:	61fb      	str	r3, [r7, #28]
}
 81153c0:	bf00      	nop
 81153c2:	bf00      	nop
 81153c4:	e7fd      	b.n	81153c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81153c6:	f7ff f8ff 	bl	81145c8 <vPortValidateInterruptPriority>
	__asm volatile
 81153ca:	f3ef 8211 	mrs	r2, BASEPRI
 81153ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81153d2:	f383 8811 	msr	BASEPRI, r3
 81153d6:	f3bf 8f6f 	isb	sy
 81153da:	f3bf 8f4f 	dsb	sy
 81153de:	61ba      	str	r2, [r7, #24]
 81153e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81153e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81153e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81153e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81153e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81153ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81153ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81153ee:	2b00      	cmp	r3, #0
 81153f0:	d02f      	beq.n	8115452 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 81153f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81153f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81153f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 81153fc:	68b9      	ldr	r1, [r7, #8]
 81153fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8115400:	f000 f8da 	bl	81155b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8115404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115406:	1e5a      	subs	r2, r3, #1
 8115408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811540a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 811540c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8115410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115414:	d112      	bne.n	811543c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8115416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115418:	691b      	ldr	r3, [r3, #16]
 811541a:	2b00      	cmp	r3, #0
 811541c:	d016      	beq.n	811544c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 811541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115420:	3310      	adds	r3, #16
 8115422:	4618      	mov	r0, r3
 8115424:	f001 fac4 	bl	81169b0 <xTaskRemoveFromEventList>
 8115428:	4603      	mov	r3, r0
 811542a:	2b00      	cmp	r3, #0
 811542c:	d00e      	beq.n	811544c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 811542e:	687b      	ldr	r3, [r7, #4]
 8115430:	2b00      	cmp	r3, #0
 8115432:	d00b      	beq.n	811544c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8115434:	687b      	ldr	r3, [r7, #4]
 8115436:	2201      	movs	r2, #1
 8115438:	601a      	str	r2, [r3, #0]
 811543a:	e007      	b.n	811544c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 811543c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115440:	3301      	adds	r3, #1
 8115442:	b2db      	uxtb	r3, r3
 8115444:	b25a      	sxtb	r2, r3
 8115446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 811544c:	2301      	movs	r3, #1
 811544e:	637b      	str	r3, [r7, #52]	@ 0x34
 8115450:	e001      	b.n	8115456 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8115452:	2300      	movs	r3, #0
 8115454:	637b      	str	r3, [r7, #52]	@ 0x34
 8115456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115458:	613b      	str	r3, [r7, #16]
	__asm volatile
 811545a:	693b      	ldr	r3, [r7, #16]
 811545c:	f383 8811 	msr	BASEPRI, r3
}
 8115460:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8115462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8115464:	4618      	mov	r0, r3
 8115466:	3738      	adds	r7, #56	@ 0x38
 8115468:	46bd      	mov	sp, r7
 811546a:	bd80      	pop	{r7, pc}

0811546c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 811546c:	b580      	push	{r7, lr}
 811546e:	b084      	sub	sp, #16
 8115470:	af00      	add	r7, sp, #0
 8115472:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8115474:	687b      	ldr	r3, [r7, #4]
 8115476:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8115478:	68fb      	ldr	r3, [r7, #12]
 811547a:	2b00      	cmp	r3, #0
 811547c:	d10b      	bne.n	8115496 <vQueueDelete+0x2a>
	__asm volatile
 811547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115482:	f383 8811 	msr	BASEPRI, r3
 8115486:	f3bf 8f6f 	isb	sy
 811548a:	f3bf 8f4f 	dsb	sy
 811548e:	60bb      	str	r3, [r7, #8]
}
 8115490:	bf00      	nop
 8115492:	bf00      	nop
 8115494:	e7fd      	b.n	8115492 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8115496:	68f8      	ldr	r0, [r7, #12]
 8115498:	f000 f95e 	bl	8115758 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 811549c:	68fb      	ldr	r3, [r7, #12]
 811549e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 81154a2:	2b00      	cmp	r3, #0
 81154a4:	d102      	bne.n	81154ac <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 81154a6:	68f8      	ldr	r0, [r7, #12]
 81154a8:	f7fe fcac 	bl	8113e04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 81154ac:	bf00      	nop
 81154ae:	3710      	adds	r7, #16
 81154b0:	46bd      	mov	sp, r7
 81154b2:	bd80      	pop	{r7, pc}

081154b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 81154b4:	b480      	push	{r7}
 81154b6:	b085      	sub	sp, #20
 81154b8:	af00      	add	r7, sp, #0
 81154ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 81154bc:	687b      	ldr	r3, [r7, #4]
 81154be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81154c0:	2b00      	cmp	r3, #0
 81154c2:	d006      	beq.n	81154d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 81154c4:	687b      	ldr	r3, [r7, #4]
 81154c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81154c8:	681b      	ldr	r3, [r3, #0]
 81154ca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 81154ce:	60fb      	str	r3, [r7, #12]
 81154d0:	e001      	b.n	81154d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 81154d2:	2300      	movs	r3, #0
 81154d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 81154d6:	68fb      	ldr	r3, [r7, #12]
	}
 81154d8:	4618      	mov	r0, r3
 81154da:	3714      	adds	r7, #20
 81154dc:	46bd      	mov	sp, r7
 81154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81154e2:	4770      	bx	lr

081154e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81154e4:	b580      	push	{r7, lr}
 81154e6:	b086      	sub	sp, #24
 81154e8:	af00      	add	r7, sp, #0
 81154ea:	60f8      	str	r0, [r7, #12]
 81154ec:	60b9      	str	r1, [r7, #8]
 81154ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 81154f0:	2300      	movs	r3, #0
 81154f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81154f4:	68fb      	ldr	r3, [r7, #12]
 81154f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81154f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81154fa:	68fb      	ldr	r3, [r7, #12]
 81154fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81154fe:	2b00      	cmp	r3, #0
 8115500:	d10d      	bne.n	811551e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8115502:	68fb      	ldr	r3, [r7, #12]
 8115504:	681b      	ldr	r3, [r3, #0]
 8115506:	2b00      	cmp	r3, #0
 8115508:	d14d      	bne.n	81155a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 811550a:	68fb      	ldr	r3, [r7, #12]
 811550c:	689b      	ldr	r3, [r3, #8]
 811550e:	4618      	mov	r0, r3
 8115510:	f001 fcd2 	bl	8116eb8 <xTaskPriorityDisinherit>
 8115514:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8115516:	68fb      	ldr	r3, [r7, #12]
 8115518:	2200      	movs	r2, #0
 811551a:	609a      	str	r2, [r3, #8]
 811551c:	e043      	b.n	81155a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 811551e:	687b      	ldr	r3, [r7, #4]
 8115520:	2b00      	cmp	r3, #0
 8115522:	d119      	bne.n	8115558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8115524:	68fb      	ldr	r3, [r7, #12]
 8115526:	6858      	ldr	r0, [r3, #4]
 8115528:	68fb      	ldr	r3, [r7, #12]
 811552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811552c:	461a      	mov	r2, r3
 811552e:	68b9      	ldr	r1, [r7, #8]
 8115530:	f00f faf7 	bl	8124b22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8115534:	68fb      	ldr	r3, [r7, #12]
 8115536:	685a      	ldr	r2, [r3, #4]
 8115538:	68fb      	ldr	r3, [r7, #12]
 811553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811553c:	441a      	add	r2, r3
 811553e:	68fb      	ldr	r3, [r7, #12]
 8115540:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8115542:	68fb      	ldr	r3, [r7, #12]
 8115544:	685a      	ldr	r2, [r3, #4]
 8115546:	68fb      	ldr	r3, [r7, #12]
 8115548:	689b      	ldr	r3, [r3, #8]
 811554a:	429a      	cmp	r2, r3
 811554c:	d32b      	bcc.n	81155a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 811554e:	68fb      	ldr	r3, [r7, #12]
 8115550:	681a      	ldr	r2, [r3, #0]
 8115552:	68fb      	ldr	r3, [r7, #12]
 8115554:	605a      	str	r2, [r3, #4]
 8115556:	e026      	b.n	81155a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8115558:	68fb      	ldr	r3, [r7, #12]
 811555a:	68d8      	ldr	r0, [r3, #12]
 811555c:	68fb      	ldr	r3, [r7, #12]
 811555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8115560:	461a      	mov	r2, r3
 8115562:	68b9      	ldr	r1, [r7, #8]
 8115564:	f00f fadd 	bl	8124b22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8115568:	68fb      	ldr	r3, [r7, #12]
 811556a:	68da      	ldr	r2, [r3, #12]
 811556c:	68fb      	ldr	r3, [r7, #12]
 811556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8115570:	425b      	negs	r3, r3
 8115572:	441a      	add	r2, r3
 8115574:	68fb      	ldr	r3, [r7, #12]
 8115576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8115578:	68fb      	ldr	r3, [r7, #12]
 811557a:	68da      	ldr	r2, [r3, #12]
 811557c:	68fb      	ldr	r3, [r7, #12]
 811557e:	681b      	ldr	r3, [r3, #0]
 8115580:	429a      	cmp	r2, r3
 8115582:	d207      	bcs.n	8115594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8115584:	68fb      	ldr	r3, [r7, #12]
 8115586:	689a      	ldr	r2, [r3, #8]
 8115588:	68fb      	ldr	r3, [r7, #12]
 811558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811558c:	425b      	negs	r3, r3
 811558e:	441a      	add	r2, r3
 8115590:	68fb      	ldr	r3, [r7, #12]
 8115592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8115594:	687b      	ldr	r3, [r7, #4]
 8115596:	2b02      	cmp	r3, #2
 8115598:	d105      	bne.n	81155a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 811559a:	693b      	ldr	r3, [r7, #16]
 811559c:	2b00      	cmp	r3, #0
 811559e:	d002      	beq.n	81155a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81155a0:	693b      	ldr	r3, [r7, #16]
 81155a2:	3b01      	subs	r3, #1
 81155a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81155a6:	693b      	ldr	r3, [r7, #16]
 81155a8:	1c5a      	adds	r2, r3, #1
 81155aa:	68fb      	ldr	r3, [r7, #12]
 81155ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 81155ae:	697b      	ldr	r3, [r7, #20]
}
 81155b0:	4618      	mov	r0, r3
 81155b2:	3718      	adds	r7, #24
 81155b4:	46bd      	mov	sp, r7
 81155b6:	bd80      	pop	{r7, pc}

081155b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81155b8:	b580      	push	{r7, lr}
 81155ba:	b082      	sub	sp, #8
 81155bc:	af00      	add	r7, sp, #0
 81155be:	6078      	str	r0, [r7, #4]
 81155c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81155c2:	687b      	ldr	r3, [r7, #4]
 81155c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81155c6:	2b00      	cmp	r3, #0
 81155c8:	d018      	beq.n	81155fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81155ca:	687b      	ldr	r3, [r7, #4]
 81155cc:	68da      	ldr	r2, [r3, #12]
 81155ce:	687b      	ldr	r3, [r7, #4]
 81155d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81155d2:	441a      	add	r2, r3
 81155d4:	687b      	ldr	r3, [r7, #4]
 81155d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 81155d8:	687b      	ldr	r3, [r7, #4]
 81155da:	68da      	ldr	r2, [r3, #12]
 81155dc:	687b      	ldr	r3, [r7, #4]
 81155de:	689b      	ldr	r3, [r3, #8]
 81155e0:	429a      	cmp	r2, r3
 81155e2:	d303      	bcc.n	81155ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81155e4:	687b      	ldr	r3, [r7, #4]
 81155e6:	681a      	ldr	r2, [r3, #0]
 81155e8:	687b      	ldr	r3, [r7, #4]
 81155ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81155ec:	687b      	ldr	r3, [r7, #4]
 81155ee:	68d9      	ldr	r1, [r3, #12]
 81155f0:	687b      	ldr	r3, [r7, #4]
 81155f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81155f4:	461a      	mov	r2, r3
 81155f6:	6838      	ldr	r0, [r7, #0]
 81155f8:	f00f fa93 	bl	8124b22 <memcpy>
	}
}
 81155fc:	bf00      	nop
 81155fe:	3708      	adds	r7, #8
 8115600:	46bd      	mov	sp, r7
 8115602:	bd80      	pop	{r7, pc}

08115604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8115604:	b580      	push	{r7, lr}
 8115606:	b084      	sub	sp, #16
 8115608:	af00      	add	r7, sp, #0
 811560a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 811560c:	f7fe fefc 	bl	8114408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8115610:	687b      	ldr	r3, [r7, #4]
 8115612:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8115616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8115618:	e011      	b.n	811563e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811561a:	687b      	ldr	r3, [r7, #4]
 811561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811561e:	2b00      	cmp	r3, #0
 8115620:	d012      	beq.n	8115648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8115622:	687b      	ldr	r3, [r7, #4]
 8115624:	3324      	adds	r3, #36	@ 0x24
 8115626:	4618      	mov	r0, r3
 8115628:	f001 f9c2 	bl	81169b0 <xTaskRemoveFromEventList>
 811562c:	4603      	mov	r3, r0
 811562e:	2b00      	cmp	r3, #0
 8115630:	d001      	beq.n	8115636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8115632:	f001 fac3 	bl	8116bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8115636:	7bfb      	ldrb	r3, [r7, #15]
 8115638:	3b01      	subs	r3, #1
 811563a:	b2db      	uxtb	r3, r3
 811563c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 811563e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8115642:	2b00      	cmp	r3, #0
 8115644:	dce9      	bgt.n	811561a <prvUnlockQueue+0x16>
 8115646:	e000      	b.n	811564a <prvUnlockQueue+0x46>
					break;
 8115648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 811564a:	687b      	ldr	r3, [r7, #4]
 811564c:	22ff      	movs	r2, #255	@ 0xff
 811564e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8115652:	f7fe ff0b 	bl	811446c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8115656:	f7fe fed7 	bl	8114408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 811565a:	687b      	ldr	r3, [r7, #4]
 811565c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8115660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8115662:	e011      	b.n	8115688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8115664:	687b      	ldr	r3, [r7, #4]
 8115666:	691b      	ldr	r3, [r3, #16]
 8115668:	2b00      	cmp	r3, #0
 811566a:	d012      	beq.n	8115692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 811566c:	687b      	ldr	r3, [r7, #4]
 811566e:	3310      	adds	r3, #16
 8115670:	4618      	mov	r0, r3
 8115672:	f001 f99d 	bl	81169b0 <xTaskRemoveFromEventList>
 8115676:	4603      	mov	r3, r0
 8115678:	2b00      	cmp	r3, #0
 811567a:	d001      	beq.n	8115680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 811567c:	f001 fa9e 	bl	8116bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8115680:	7bbb      	ldrb	r3, [r7, #14]
 8115682:	3b01      	subs	r3, #1
 8115684:	b2db      	uxtb	r3, r3
 8115686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8115688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 811568c:	2b00      	cmp	r3, #0
 811568e:	dce9      	bgt.n	8115664 <prvUnlockQueue+0x60>
 8115690:	e000      	b.n	8115694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8115692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8115694:	687b      	ldr	r3, [r7, #4]
 8115696:	22ff      	movs	r2, #255	@ 0xff
 8115698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 811569c:	f7fe fee6 	bl	811446c <vPortExitCritical>
}
 81156a0:	bf00      	nop
 81156a2:	3710      	adds	r7, #16
 81156a4:	46bd      	mov	sp, r7
 81156a6:	bd80      	pop	{r7, pc}

081156a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81156a8:	b580      	push	{r7, lr}
 81156aa:	b084      	sub	sp, #16
 81156ac:	af00      	add	r7, sp, #0
 81156ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81156b0:	f7fe feaa 	bl	8114408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81156b4:	687b      	ldr	r3, [r7, #4]
 81156b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81156b8:	2b00      	cmp	r3, #0
 81156ba:	d102      	bne.n	81156c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81156bc:	2301      	movs	r3, #1
 81156be:	60fb      	str	r3, [r7, #12]
 81156c0:	e001      	b.n	81156c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81156c2:	2300      	movs	r3, #0
 81156c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81156c6:	f7fe fed1 	bl	811446c <vPortExitCritical>

	return xReturn;
 81156ca:	68fb      	ldr	r3, [r7, #12]
}
 81156cc:	4618      	mov	r0, r3
 81156ce:	3710      	adds	r7, #16
 81156d0:	46bd      	mov	sp, r7
 81156d2:	bd80      	pop	{r7, pc}

081156d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 81156d4:	b580      	push	{r7, lr}
 81156d6:	b084      	sub	sp, #16
 81156d8:	af00      	add	r7, sp, #0
 81156da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81156dc:	f7fe fe94 	bl	8114408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81156e0:	687b      	ldr	r3, [r7, #4]
 81156e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81156e4:	687b      	ldr	r3, [r7, #4]
 81156e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81156e8:	429a      	cmp	r2, r3
 81156ea:	d102      	bne.n	81156f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81156ec:	2301      	movs	r3, #1
 81156ee:	60fb      	str	r3, [r7, #12]
 81156f0:	e001      	b.n	81156f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81156f2:	2300      	movs	r3, #0
 81156f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81156f6:	f7fe feb9 	bl	811446c <vPortExitCritical>

	return xReturn;
 81156fa:	68fb      	ldr	r3, [r7, #12]
}
 81156fc:	4618      	mov	r0, r3
 81156fe:	3710      	adds	r7, #16
 8115700:	46bd      	mov	sp, r7
 8115702:	bd80      	pop	{r7, pc}

08115704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8115704:	b480      	push	{r7}
 8115706:	b085      	sub	sp, #20
 8115708:	af00      	add	r7, sp, #0
 811570a:	6078      	str	r0, [r7, #4]
 811570c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 811570e:	2300      	movs	r3, #0
 8115710:	60fb      	str	r3, [r7, #12]
 8115712:	e014      	b.n	811573e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8115714:	4a0f      	ldr	r2, [pc, #60]	@ (8115754 <vQueueAddToRegistry+0x50>)
 8115716:	68fb      	ldr	r3, [r7, #12]
 8115718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 811571c:	2b00      	cmp	r3, #0
 811571e:	d10b      	bne.n	8115738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8115720:	490c      	ldr	r1, [pc, #48]	@ (8115754 <vQueueAddToRegistry+0x50>)
 8115722:	68fb      	ldr	r3, [r7, #12]
 8115724:	683a      	ldr	r2, [r7, #0]
 8115726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 811572a:	4a0a      	ldr	r2, [pc, #40]	@ (8115754 <vQueueAddToRegistry+0x50>)
 811572c:	68fb      	ldr	r3, [r7, #12]
 811572e:	00db      	lsls	r3, r3, #3
 8115730:	4413      	add	r3, r2
 8115732:	687a      	ldr	r2, [r7, #4]
 8115734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8115736:	e006      	b.n	8115746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8115738:	68fb      	ldr	r3, [r7, #12]
 811573a:	3301      	adds	r3, #1
 811573c:	60fb      	str	r3, [r7, #12]
 811573e:	68fb      	ldr	r3, [r7, #12]
 8115740:	2b07      	cmp	r3, #7
 8115742:	d9e7      	bls.n	8115714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8115744:	bf00      	nop
 8115746:	bf00      	nop
 8115748:	3714      	adds	r7, #20
 811574a:	46bd      	mov	sp, r7
 811574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115750:	4770      	bx	lr
 8115752:	bf00      	nop
 8115754:	1000aba0 	.word	0x1000aba0

08115758 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8115758:	b480      	push	{r7}
 811575a:	b085      	sub	sp, #20
 811575c:	af00      	add	r7, sp, #0
 811575e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8115760:	2300      	movs	r3, #0
 8115762:	60fb      	str	r3, [r7, #12]
 8115764:	e016      	b.n	8115794 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8115766:	4a10      	ldr	r2, [pc, #64]	@ (81157a8 <vQueueUnregisterQueue+0x50>)
 8115768:	68fb      	ldr	r3, [r7, #12]
 811576a:	00db      	lsls	r3, r3, #3
 811576c:	4413      	add	r3, r2
 811576e:	685b      	ldr	r3, [r3, #4]
 8115770:	687a      	ldr	r2, [r7, #4]
 8115772:	429a      	cmp	r2, r3
 8115774:	d10b      	bne.n	811578e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8115776:	4a0c      	ldr	r2, [pc, #48]	@ (81157a8 <vQueueUnregisterQueue+0x50>)
 8115778:	68fb      	ldr	r3, [r7, #12]
 811577a:	2100      	movs	r1, #0
 811577c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8115780:	4a09      	ldr	r2, [pc, #36]	@ (81157a8 <vQueueUnregisterQueue+0x50>)
 8115782:	68fb      	ldr	r3, [r7, #12]
 8115784:	00db      	lsls	r3, r3, #3
 8115786:	4413      	add	r3, r2
 8115788:	2200      	movs	r2, #0
 811578a:	605a      	str	r2, [r3, #4]
				break;
 811578c:	e006      	b.n	811579c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 811578e:	68fb      	ldr	r3, [r7, #12]
 8115790:	3301      	adds	r3, #1
 8115792:	60fb      	str	r3, [r7, #12]
 8115794:	68fb      	ldr	r3, [r7, #12]
 8115796:	2b07      	cmp	r3, #7
 8115798:	d9e5      	bls.n	8115766 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 811579a:	bf00      	nop
 811579c:	bf00      	nop
 811579e:	3714      	adds	r7, #20
 81157a0:	46bd      	mov	sp, r7
 81157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81157a6:	4770      	bx	lr
 81157a8:	1000aba0 	.word	0x1000aba0

081157ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81157ac:	b580      	push	{r7, lr}
 81157ae:	b086      	sub	sp, #24
 81157b0:	af00      	add	r7, sp, #0
 81157b2:	60f8      	str	r0, [r7, #12]
 81157b4:	60b9      	str	r1, [r7, #8]
 81157b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81157b8:	68fb      	ldr	r3, [r7, #12]
 81157ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81157bc:	f7fe fe24 	bl	8114408 <vPortEnterCritical>
 81157c0:	697b      	ldr	r3, [r7, #20]
 81157c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81157c6:	b25b      	sxtb	r3, r3
 81157c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81157cc:	d103      	bne.n	81157d6 <vQueueWaitForMessageRestricted+0x2a>
 81157ce:	697b      	ldr	r3, [r7, #20]
 81157d0:	2200      	movs	r2, #0
 81157d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81157d6:	697b      	ldr	r3, [r7, #20]
 81157d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81157dc:	b25b      	sxtb	r3, r3
 81157de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81157e2:	d103      	bne.n	81157ec <vQueueWaitForMessageRestricted+0x40>
 81157e4:	697b      	ldr	r3, [r7, #20]
 81157e6:	2200      	movs	r2, #0
 81157e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81157ec:	f7fe fe3e 	bl	811446c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 81157f0:	697b      	ldr	r3, [r7, #20]
 81157f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81157f4:	2b00      	cmp	r3, #0
 81157f6:	d106      	bne.n	8115806 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 81157f8:	697b      	ldr	r3, [r7, #20]
 81157fa:	3324      	adds	r3, #36	@ 0x24
 81157fc:	687a      	ldr	r2, [r7, #4]
 81157fe:	68b9      	ldr	r1, [r7, #8]
 8115800:	4618      	mov	r0, r3
 8115802:	f001 f8a9 	bl	8116958 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8115806:	6978      	ldr	r0, [r7, #20]
 8115808:	f7ff fefc 	bl	8115604 <prvUnlockQueue>
	}
 811580c:	bf00      	nop
 811580e:	3718      	adds	r7, #24
 8115810:	46bd      	mov	sp, r7
 8115812:	bd80      	pop	{r7, pc}

08115814 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8115814:	b580      	push	{r7, lr}
 8115816:	b090      	sub	sp, #64	@ 0x40
 8115818:	af02      	add	r7, sp, #8
 811581a:	60f8      	str	r0, [r7, #12]
 811581c:	60b9      	str	r1, [r7, #8]
 811581e:	607a      	str	r2, [r7, #4]
 8115820:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8115822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8115824:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8115826:	683b      	ldr	r3, [r7, #0]
 8115828:	2b00      	cmp	r3, #0
 811582a:	d10b      	bne.n	8115844 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 811582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115830:	f383 8811 	msr	BASEPRI, r3
 8115834:	f3bf 8f6f 	isb	sy
 8115838:	f3bf 8f4f 	dsb	sy
 811583c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 811583e:	bf00      	nop
 8115840:	bf00      	nop
 8115842:	e7fd      	b.n	8115840 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8115844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8115846:	2b00      	cmp	r3, #0
 8115848:	d10b      	bne.n	8115862 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 811584a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811584e:	f383 8811 	msr	BASEPRI, r3
 8115852:	f3bf 8f6f 	isb	sy
 8115856:	f3bf 8f4f 	dsb	sy
 811585a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 811585c:	bf00      	nop
 811585e:	bf00      	nop
 8115860:	e7fd      	b.n	811585e <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8115862:	68ba      	ldr	r2, [r7, #8]
 8115864:	68fb      	ldr	r3, [r7, #12]
 8115866:	429a      	cmp	r2, r3
 8115868:	d90b      	bls.n	8115882 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 811586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811586e:	f383 8811 	msr	BASEPRI, r3
 8115872:	f3bf 8f6f 	isb	sy
 8115876:	f3bf 8f4f 	dsb	sy
 811587a:	623b      	str	r3, [r7, #32]
}
 811587c:	bf00      	nop
 811587e:	bf00      	nop
 8115880:	e7fd      	b.n	811587e <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8115882:	68bb      	ldr	r3, [r7, #8]
 8115884:	2b00      	cmp	r3, #0
 8115886:	d101      	bne.n	811588c <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8115888:	2301      	movs	r3, #1
 811588a:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 811588c:	687b      	ldr	r3, [r7, #4]
 811588e:	2b00      	cmp	r3, #0
 8115890:	d003      	beq.n	811589a <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8115892:	2303      	movs	r3, #3
 8115894:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8115898:	e002      	b.n	81158a0 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 811589a:	2302      	movs	r3, #2
 811589c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 81158a0:	68fb      	ldr	r3, [r7, #12]
 81158a2:	2b04      	cmp	r3, #4
 81158a4:	d80b      	bhi.n	81158be <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 81158a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81158aa:	f383 8811 	msr	BASEPRI, r3
 81158ae:	f3bf 8f6f 	isb	sy
 81158b2:	f3bf 8f4f 	dsb	sy
 81158b6:	61fb      	str	r3, [r7, #28]
}
 81158b8:	bf00      	nop
 81158ba:	bf00      	nop
 81158bc:	e7fd      	b.n	81158ba <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 81158be:	2324      	movs	r3, #36	@ 0x24
 81158c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 81158c2:	697b      	ldr	r3, [r7, #20]
 81158c4:	2b24      	cmp	r3, #36	@ 0x24
 81158c6:	d00b      	beq.n	81158e0 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 81158c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81158cc:	f383 8811 	msr	BASEPRI, r3
 81158d0:	f3bf 8f6f 	isb	sy
 81158d4:	f3bf 8f4f 	dsb	sy
 81158d8:	61bb      	str	r3, [r7, #24]
}
 81158da:	bf00      	nop
 81158dc:	bf00      	nop
 81158de:	e7fd      	b.n	81158dc <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 81158e0:	683b      	ldr	r3, [r7, #0]
 81158e2:	2b00      	cmp	r3, #0
 81158e4:	d015      	beq.n	8115912 <xStreamBufferGenericCreateStatic+0xfe>
 81158e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81158e8:	2b00      	cmp	r3, #0
 81158ea:	d012      	beq.n	8115912 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 81158ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 81158f0:	9300      	str	r3, [sp, #0]
 81158f2:	68bb      	ldr	r3, [r7, #8]
 81158f4:	68fa      	ldr	r2, [r7, #12]
 81158f6:	6839      	ldr	r1, [r7, #0]
 81158f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81158fa:	f000 fb81 	bl	8116000 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 81158fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115900:	7f1b      	ldrb	r3, [r3, #28]
 8115902:	f043 0302 	orr.w	r3, r3, #2
 8115906:	b2da      	uxtb	r2, r3
 8115908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811590a:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 811590c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811590e:	637b      	str	r3, [r7, #52]	@ 0x34
 8115910:	e001      	b.n	8115916 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 8115912:	2300      	movs	r3, #0
 8115914:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8115916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8115918:	4618      	mov	r0, r3
 811591a:	3738      	adds	r7, #56	@ 0x38
 811591c:	46bd      	mov	sp, r7
 811591e:	bd80      	pop	{r7, pc}

08115920 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8115920:	b480      	push	{r7}
 8115922:	b087      	sub	sp, #28
 8115924:	af00      	add	r7, sp, #0
 8115926:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8115928:	687b      	ldr	r3, [r7, #4]
 811592a:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 811592c:	693b      	ldr	r3, [r7, #16]
 811592e:	2b00      	cmp	r3, #0
 8115930:	d10b      	bne.n	811594a <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8115932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115936:	f383 8811 	msr	BASEPRI, r3
 811593a:	f3bf 8f6f 	isb	sy
 811593e:	f3bf 8f4f 	dsb	sy
 8115942:	60fb      	str	r3, [r7, #12]
}
 8115944:	bf00      	nop
 8115946:	bf00      	nop
 8115948:	e7fd      	b.n	8115946 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 811594a:	693b      	ldr	r3, [r7, #16]
 811594c:	689a      	ldr	r2, [r3, #8]
 811594e:	693b      	ldr	r3, [r7, #16]
 8115950:	681b      	ldr	r3, [r3, #0]
 8115952:	4413      	add	r3, r2
 8115954:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8115956:	693b      	ldr	r3, [r7, #16]
 8115958:	685b      	ldr	r3, [r3, #4]
 811595a:	697a      	ldr	r2, [r7, #20]
 811595c:	1ad3      	subs	r3, r2, r3
 811595e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8115960:	697b      	ldr	r3, [r7, #20]
 8115962:	3b01      	subs	r3, #1
 8115964:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8115966:	693b      	ldr	r3, [r7, #16]
 8115968:	689b      	ldr	r3, [r3, #8]
 811596a:	697a      	ldr	r2, [r7, #20]
 811596c:	429a      	cmp	r2, r3
 811596e:	d304      	bcc.n	811597a <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8115970:	693b      	ldr	r3, [r7, #16]
 8115972:	689b      	ldr	r3, [r3, #8]
 8115974:	697a      	ldr	r2, [r7, #20]
 8115976:	1ad3      	subs	r3, r2, r3
 8115978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 811597a:	697b      	ldr	r3, [r7, #20]
}
 811597c:	4618      	mov	r0, r3
 811597e:	371c      	adds	r7, #28
 8115980:	46bd      	mov	sp, r7
 8115982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115986:	4770      	bx	lr

08115988 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8115988:	b580      	push	{r7, lr}
 811598a:	b090      	sub	sp, #64	@ 0x40
 811598c:	af02      	add	r7, sp, #8
 811598e:	60f8      	str	r0, [r7, #12]
 8115990:	60b9      	str	r1, [r7, #8]
 8115992:	607a      	str	r2, [r7, #4]
 8115994:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8115996:	68fb      	ldr	r3, [r7, #12]
 8115998:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 811599a:	2300      	movs	r3, #0
 811599c:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 811599e:	687b      	ldr	r3, [r7, #4]
 81159a0:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 81159a2:	68bb      	ldr	r3, [r7, #8]
 81159a4:	2b00      	cmp	r3, #0
 81159a6:	d10b      	bne.n	81159c0 <xStreamBufferSend+0x38>
	__asm volatile
 81159a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81159ac:	f383 8811 	msr	BASEPRI, r3
 81159b0:	f3bf 8f6f 	isb	sy
 81159b4:	f3bf 8f4f 	dsb	sy
 81159b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81159ba:	bf00      	nop
 81159bc:	bf00      	nop
 81159be:	e7fd      	b.n	81159bc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 81159c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81159c2:	2b00      	cmp	r3, #0
 81159c4:	d10b      	bne.n	81159de <xStreamBufferSend+0x56>
	__asm volatile
 81159c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81159ca:	f383 8811 	msr	BASEPRI, r3
 81159ce:	f3bf 8f6f 	isb	sy
 81159d2:	f3bf 8f4f 	dsb	sy
 81159d6:	623b      	str	r3, [r7, #32]
}
 81159d8:	bf00      	nop
 81159da:	bf00      	nop
 81159dc:	e7fd      	b.n	81159da <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 81159de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81159e0:	7f1b      	ldrb	r3, [r3, #28]
 81159e2:	f003 0301 	and.w	r3, r3, #1
 81159e6:	2b00      	cmp	r3, #0
 81159e8:	d012      	beq.n	8115a10 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 81159ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81159ec:	3304      	adds	r3, #4
 81159ee:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 81159f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81159f2:	687b      	ldr	r3, [r7, #4]
 81159f4:	429a      	cmp	r2, r3
 81159f6:	d80b      	bhi.n	8115a10 <xStreamBufferSend+0x88>
	__asm volatile
 81159f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81159fc:	f383 8811 	msr	BASEPRI, r3
 8115a00:	f3bf 8f6f 	isb	sy
 8115a04:	f3bf 8f4f 	dsb	sy
 8115a08:	61fb      	str	r3, [r7, #28]
}
 8115a0a:	bf00      	nop
 8115a0c:	bf00      	nop
 8115a0e:	e7fd      	b.n	8115a0c <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8115a10:	683b      	ldr	r3, [r7, #0]
 8115a12:	2b00      	cmp	r3, #0
 8115a14:	d03f      	beq.n	8115a96 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8115a16:	f107 0310 	add.w	r3, r7, #16
 8115a1a:	4618      	mov	r0, r3
 8115a1c:	f001 f82c 	bl	8116a78 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8115a20:	f7fe fcf2 	bl	8114408 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8115a24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115a26:	f7ff ff7b 	bl	8115920 <xStreamBufferSpacesAvailable>
 8115a2a:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8115a2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8115a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115a30:	429a      	cmp	r2, r3
 8115a32:	d218      	bcs.n	8115a66 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8115a34:	2000      	movs	r0, #0
 8115a36:	f001 fc8d 	bl	8117354 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8115a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a3c:	695b      	ldr	r3, [r3, #20]
 8115a3e:	2b00      	cmp	r3, #0
 8115a40:	d00b      	beq.n	8115a5a <xStreamBufferSend+0xd2>
	__asm volatile
 8115a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115a46:	f383 8811 	msr	BASEPRI, r3
 8115a4a:	f3bf 8f6f 	isb	sy
 8115a4e:	f3bf 8f4f 	dsb	sy
 8115a52:	61bb      	str	r3, [r7, #24]
}
 8115a54:	bf00      	nop
 8115a56:	bf00      	nop
 8115a58:	e7fd      	b.n	8115a56 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8115a5a:	f001 f997 	bl	8116d8c <xTaskGetCurrentTaskHandle>
 8115a5e:	4602      	mov	r2, r0
 8115a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a62:	615a      	str	r2, [r3, #20]
 8115a64:	e002      	b.n	8115a6c <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8115a66:	f7fe fd01 	bl	811446c <vPortExitCritical>
					break;
 8115a6a:	e014      	b.n	8115a96 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 8115a6c:	f7fe fcfe 	bl	811446c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8115a70:	683b      	ldr	r3, [r7, #0]
 8115a72:	2200      	movs	r2, #0
 8115a74:	2100      	movs	r1, #0
 8115a76:	2000      	movs	r0, #0
 8115a78:	f001 fb26 	bl	81170c8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8115a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a7e:	2200      	movs	r2, #0
 8115a80:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8115a82:	463a      	mov	r2, r7
 8115a84:	f107 0310 	add.w	r3, r7, #16
 8115a88:	4611      	mov	r1, r2
 8115a8a:	4618      	mov	r0, r3
 8115a8c:	f001 f832 	bl	8116af4 <xTaskCheckForTimeOut>
 8115a90:	4603      	mov	r3, r0
 8115a92:	2b00      	cmp	r3, #0
 8115a94:	d0c4      	beq.n	8115a20 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8115a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8115a98:	2b00      	cmp	r3, #0
 8115a9a:	d103      	bne.n	8115aa4 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8115a9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115a9e:	f7ff ff3f 	bl	8115920 <xStreamBufferSpacesAvailable>
 8115aa2:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8115aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115aa6:	9300      	str	r3, [sp, #0]
 8115aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8115aaa:	687a      	ldr	r2, [r7, #4]
 8115aac:	68b9      	ldr	r1, [r7, #8]
 8115aae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115ab0:	f000 f814 	bl	8115adc <prvWriteMessageToBuffer>
 8115ab4:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8115ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115ab8:	2b00      	cmp	r3, #0
 8115aba:	d00a      	beq.n	8115ad2 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8115abc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115abe:	f000 fa7f 	bl	8115fc0 <prvBytesInBuffer>
 8115ac2:	4602      	mov	r2, r0
 8115ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ac6:	68db      	ldr	r3, [r3, #12]
 8115ac8:	429a      	cmp	r2, r3
 8115aca:	d302      	bcc.n	8115ad2 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8115acc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115ace:	f7eb fb51 	bl	8101174 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8115ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8115ad4:	4618      	mov	r0, r3
 8115ad6:	3738      	adds	r7, #56	@ 0x38
 8115ad8:	46bd      	mov	sp, r7
 8115ada:	bd80      	pop	{r7, pc}

08115adc <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8115adc:	b580      	push	{r7, lr}
 8115ade:	b086      	sub	sp, #24
 8115ae0:	af00      	add	r7, sp, #0
 8115ae2:	60f8      	str	r0, [r7, #12]
 8115ae4:	60b9      	str	r1, [r7, #8]
 8115ae6:	607a      	str	r2, [r7, #4]
 8115ae8:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8115aea:	683b      	ldr	r3, [r7, #0]
 8115aec:	2b00      	cmp	r3, #0
 8115aee:	d102      	bne.n	8115af6 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8115af0:	2300      	movs	r3, #0
 8115af2:	617b      	str	r3, [r7, #20]
 8115af4:	e01d      	b.n	8115b32 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8115af6:	68fb      	ldr	r3, [r7, #12]
 8115af8:	7f1b      	ldrb	r3, [r3, #28]
 8115afa:	f003 0301 	and.w	r3, r3, #1
 8115afe:	2b00      	cmp	r3, #0
 8115b00:	d108      	bne.n	8115b14 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8115b02:	2301      	movs	r3, #1
 8115b04:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8115b06:	687a      	ldr	r2, [r7, #4]
 8115b08:	683b      	ldr	r3, [r7, #0]
 8115b0a:	4293      	cmp	r3, r2
 8115b0c:	bf28      	it	cs
 8115b0e:	4613      	movcs	r3, r2
 8115b10:	607b      	str	r3, [r7, #4]
 8115b12:	e00e      	b.n	8115b32 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8115b14:	683a      	ldr	r2, [r7, #0]
 8115b16:	6a3b      	ldr	r3, [r7, #32]
 8115b18:	429a      	cmp	r2, r3
 8115b1a:	d308      	bcc.n	8115b2e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8115b1c:	2301      	movs	r3, #1
 8115b1e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8115b20:	1d3b      	adds	r3, r7, #4
 8115b22:	2204      	movs	r2, #4
 8115b24:	4619      	mov	r1, r3
 8115b26:	68f8      	ldr	r0, [r7, #12]
 8115b28:	f000 f958 	bl	8115ddc <prvWriteBytesToBuffer>
 8115b2c:	e001      	b.n	8115b32 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8115b2e:	2300      	movs	r3, #0
 8115b30:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8115b32:	697b      	ldr	r3, [r7, #20]
 8115b34:	2b00      	cmp	r3, #0
 8115b36:	d007      	beq.n	8115b48 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8115b38:	687b      	ldr	r3, [r7, #4]
 8115b3a:	461a      	mov	r2, r3
 8115b3c:	68b9      	ldr	r1, [r7, #8]
 8115b3e:	68f8      	ldr	r0, [r7, #12]
 8115b40:	f000 f94c 	bl	8115ddc <prvWriteBytesToBuffer>
 8115b44:	6138      	str	r0, [r7, #16]
 8115b46:	e001      	b.n	8115b4c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8115b48:	2300      	movs	r3, #0
 8115b4a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8115b4c:	693b      	ldr	r3, [r7, #16]
}
 8115b4e:	4618      	mov	r0, r3
 8115b50:	3718      	adds	r7, #24
 8115b52:	46bd      	mov	sp, r7
 8115b54:	bd80      	pop	{r7, pc}

08115b56 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8115b56:	b580      	push	{r7, lr}
 8115b58:	b08e      	sub	sp, #56	@ 0x38
 8115b5a:	af02      	add	r7, sp, #8
 8115b5c:	60f8      	str	r0, [r7, #12]
 8115b5e:	60b9      	str	r1, [r7, #8]
 8115b60:	607a      	str	r2, [r7, #4]
 8115b62:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8115b64:	68fb      	ldr	r3, [r7, #12]
 8115b66:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8115b68:	2300      	movs	r3, #0
 8115b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8115b6c:	68bb      	ldr	r3, [r7, #8]
 8115b6e:	2b00      	cmp	r3, #0
 8115b70:	d10b      	bne.n	8115b8a <xStreamBufferReceive+0x34>
	__asm volatile
 8115b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115b76:	f383 8811 	msr	BASEPRI, r3
 8115b7a:	f3bf 8f6f 	isb	sy
 8115b7e:	f3bf 8f4f 	dsb	sy
 8115b82:	61fb      	str	r3, [r7, #28]
}
 8115b84:	bf00      	nop
 8115b86:	bf00      	nop
 8115b88:	e7fd      	b.n	8115b86 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8115b8a:	6a3b      	ldr	r3, [r7, #32]
 8115b8c:	2b00      	cmp	r3, #0
 8115b8e:	d10b      	bne.n	8115ba8 <xStreamBufferReceive+0x52>
	__asm volatile
 8115b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115b94:	f383 8811 	msr	BASEPRI, r3
 8115b98:	f3bf 8f6f 	isb	sy
 8115b9c:	f3bf 8f4f 	dsb	sy
 8115ba0:	61bb      	str	r3, [r7, #24]
}
 8115ba2:	bf00      	nop
 8115ba4:	bf00      	nop
 8115ba6:	e7fd      	b.n	8115ba4 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8115ba8:	6a3b      	ldr	r3, [r7, #32]
 8115baa:	7f1b      	ldrb	r3, [r3, #28]
 8115bac:	f003 0301 	and.w	r3, r3, #1
 8115bb0:	2b00      	cmp	r3, #0
 8115bb2:	d002      	beq.n	8115bba <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8115bb4:	2304      	movs	r3, #4
 8115bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8115bb8:	e001      	b.n	8115bbe <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8115bba:	2300      	movs	r3, #0
 8115bbc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8115bbe:	683b      	ldr	r3, [r7, #0]
 8115bc0:	2b00      	cmp	r3, #0
 8115bc2:	d035      	beq.n	8115c30 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8115bc4:	f7fe fc20 	bl	8114408 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8115bc8:	6a38      	ldr	r0, [r7, #32]
 8115bca:	f000 f9f9 	bl	8115fc0 <prvBytesInBuffer>
 8115bce:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8115bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8115bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115bd4:	429a      	cmp	r2, r3
 8115bd6:	d817      	bhi.n	8115c08 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8115bd8:	2000      	movs	r0, #0
 8115bda:	f001 fbbb 	bl	8117354 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8115bde:	6a3b      	ldr	r3, [r7, #32]
 8115be0:	691b      	ldr	r3, [r3, #16]
 8115be2:	2b00      	cmp	r3, #0
 8115be4:	d00b      	beq.n	8115bfe <xStreamBufferReceive+0xa8>
	__asm volatile
 8115be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115bea:	f383 8811 	msr	BASEPRI, r3
 8115bee:	f3bf 8f6f 	isb	sy
 8115bf2:	f3bf 8f4f 	dsb	sy
 8115bf6:	617b      	str	r3, [r7, #20]
}
 8115bf8:	bf00      	nop
 8115bfa:	bf00      	nop
 8115bfc:	e7fd      	b.n	8115bfa <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8115bfe:	f001 f8c5 	bl	8116d8c <xTaskGetCurrentTaskHandle>
 8115c02:	4602      	mov	r2, r0
 8115c04:	6a3b      	ldr	r3, [r7, #32]
 8115c06:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8115c08:	f7fe fc30 	bl	811446c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8115c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8115c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c10:	429a      	cmp	r2, r3
 8115c12:	d811      	bhi.n	8115c38 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8115c14:	683b      	ldr	r3, [r7, #0]
 8115c16:	2200      	movs	r2, #0
 8115c18:	2100      	movs	r1, #0
 8115c1a:	2000      	movs	r0, #0
 8115c1c:	f001 fa54 	bl	81170c8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8115c20:	6a3b      	ldr	r3, [r7, #32]
 8115c22:	2200      	movs	r2, #0
 8115c24:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8115c26:	6a38      	ldr	r0, [r7, #32]
 8115c28:	f000 f9ca 	bl	8115fc0 <prvBytesInBuffer>
 8115c2c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8115c2e:	e003      	b.n	8115c38 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8115c30:	6a38      	ldr	r0, [r7, #32]
 8115c32:	f000 f9c5 	bl	8115fc0 <prvBytesInBuffer>
 8115c36:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8115c38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8115c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c3c:	429a      	cmp	r2, r3
 8115c3e:	d90e      	bls.n	8115c5e <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8115c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c42:	9300      	str	r3, [sp, #0]
 8115c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115c46:	687a      	ldr	r2, [r7, #4]
 8115c48:	68b9      	ldr	r1, [r7, #8]
 8115c4a:	6a38      	ldr	r0, [r7, #32]
 8115c4c:	f000 f80c 	bl	8115c68 <prvReadMessageFromBuffer>
 8115c50:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8115c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c54:	2b00      	cmp	r3, #0
 8115c56:	d002      	beq.n	8115c5e <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8115c58:	6a38      	ldr	r0, [r7, #32]
 8115c5a:	f7eb fa8b 	bl	8101174 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8115c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8115c60:	4618      	mov	r0, r3
 8115c62:	3730      	adds	r7, #48	@ 0x30
 8115c64:	46bd      	mov	sp, r7
 8115c66:	bd80      	pop	{r7, pc}

08115c68 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8115c68:	b580      	push	{r7, lr}
 8115c6a:	b088      	sub	sp, #32
 8115c6c:	af00      	add	r7, sp, #0
 8115c6e:	60f8      	str	r0, [r7, #12]
 8115c70:	60b9      	str	r1, [r7, #8]
 8115c72:	607a      	str	r2, [r7, #4]
 8115c74:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8115c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115c78:	2b00      	cmp	r3, #0
 8115c7a:	d019      	beq.n	8115cb0 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8115c7c:	68fb      	ldr	r3, [r7, #12]
 8115c7e:	681b      	ldr	r3, [r3, #0]
 8115c80:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8115c82:	f107 0110 	add.w	r1, r7, #16
 8115c86:	683b      	ldr	r3, [r7, #0]
 8115c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8115c8a:	68f8      	ldr	r0, [r7, #12]
 8115c8c:	f000 f91b 	bl	8115ec6 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8115c90:	693b      	ldr	r3, [r7, #16]
 8115c92:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8115c94:	683a      	ldr	r2, [r7, #0]
 8115c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115c98:	1ad3      	subs	r3, r2, r3
 8115c9a:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8115c9c:	69fa      	ldr	r2, [r7, #28]
 8115c9e:	687b      	ldr	r3, [r7, #4]
 8115ca0:	429a      	cmp	r2, r3
 8115ca2:	d907      	bls.n	8115cb4 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8115ca4:	68fb      	ldr	r3, [r7, #12]
 8115ca6:	69ba      	ldr	r2, [r7, #24]
 8115ca8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8115caa:	2300      	movs	r3, #0
 8115cac:	61fb      	str	r3, [r7, #28]
 8115cae:	e001      	b.n	8115cb4 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8115cb0:	687b      	ldr	r3, [r7, #4]
 8115cb2:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8115cb4:	683b      	ldr	r3, [r7, #0]
 8115cb6:	69fa      	ldr	r2, [r7, #28]
 8115cb8:	68b9      	ldr	r1, [r7, #8]
 8115cba:	68f8      	ldr	r0, [r7, #12]
 8115cbc:	f000 f903 	bl	8115ec6 <prvReadBytesFromBuffer>
 8115cc0:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8115cc2:	697b      	ldr	r3, [r7, #20]
}
 8115cc4:	4618      	mov	r0, r3
 8115cc6:	3720      	adds	r7, #32
 8115cc8:	46bd      	mov	sp, r7
 8115cca:	bd80      	pop	{r7, pc}

08115ccc <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8115ccc:	b580      	push	{r7, lr}
 8115cce:	b08c      	sub	sp, #48	@ 0x30
 8115cd0:	af02      	add	r7, sp, #8
 8115cd2:	6078      	str	r0, [r7, #4]
 8115cd4:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8115cd6:	687b      	ldr	r3, [r7, #4]
 8115cd8:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8115cda:	6a3b      	ldr	r3, [r7, #32]
 8115cdc:	2b00      	cmp	r3, #0
 8115cde:	d10b      	bne.n	8115cf8 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 8115ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115ce4:	f383 8811 	msr	BASEPRI, r3
 8115ce8:	f3bf 8f6f 	isb	sy
 8115cec:	f3bf 8f4f 	dsb	sy
 8115cf0:	61bb      	str	r3, [r7, #24]
}
 8115cf2:	bf00      	nop
 8115cf4:	bf00      	nop
 8115cf6:	e7fd      	b.n	8115cf4 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8115cf8:	f3ef 8211 	mrs	r2, BASEPRI
 8115cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115d00:	f383 8811 	msr	BASEPRI, r3
 8115d04:	f3bf 8f6f 	isb	sy
 8115d08:	f3bf 8f4f 	dsb	sy
 8115d0c:	617a      	str	r2, [r7, #20]
 8115d0e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8115d10:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8115d12:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8115d14:	6a3b      	ldr	r3, [r7, #32]
 8115d16:	691b      	ldr	r3, [r3, #16]
 8115d18:	2b00      	cmp	r3, #0
 8115d1a:	d00e      	beq.n	8115d3a <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8115d1c:	6a3b      	ldr	r3, [r7, #32]
 8115d1e:	6918      	ldr	r0, [r3, #16]
 8115d20:	683b      	ldr	r3, [r7, #0]
 8115d22:	9300      	str	r3, [sp, #0]
 8115d24:	2300      	movs	r3, #0
 8115d26:	2200      	movs	r2, #0
 8115d28:	2100      	movs	r1, #0
 8115d2a:	f001 fa2d 	bl	8117188 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8115d2e:	6a3b      	ldr	r3, [r7, #32]
 8115d30:	2200      	movs	r2, #0
 8115d32:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8115d34:	2301      	movs	r3, #1
 8115d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8115d38:	e001      	b.n	8115d3e <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8115d3a:	2300      	movs	r3, #0
 8115d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8115d3e:	69fb      	ldr	r3, [r7, #28]
 8115d40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8115d42:	68fb      	ldr	r3, [r7, #12]
 8115d44:	f383 8811 	msr	BASEPRI, r3
}
 8115d48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8115d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8115d4c:	4618      	mov	r0, r3
 8115d4e:	3728      	adds	r7, #40	@ 0x28
 8115d50:	46bd      	mov	sp, r7
 8115d52:	bd80      	pop	{r7, pc}

08115d54 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8115d54:	b580      	push	{r7, lr}
 8115d56:	b08c      	sub	sp, #48	@ 0x30
 8115d58:	af02      	add	r7, sp, #8
 8115d5a:	6078      	str	r0, [r7, #4]
 8115d5c:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8115d5e:	687b      	ldr	r3, [r7, #4]
 8115d60:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8115d62:	6a3b      	ldr	r3, [r7, #32]
 8115d64:	2b00      	cmp	r3, #0
 8115d66:	d10b      	bne.n	8115d80 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8115d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115d6c:	f383 8811 	msr	BASEPRI, r3
 8115d70:	f3bf 8f6f 	isb	sy
 8115d74:	f3bf 8f4f 	dsb	sy
 8115d78:	61bb      	str	r3, [r7, #24]
}
 8115d7a:	bf00      	nop
 8115d7c:	bf00      	nop
 8115d7e:	e7fd      	b.n	8115d7c <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 8115d80:	f3ef 8211 	mrs	r2, BASEPRI
 8115d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115d88:	f383 8811 	msr	BASEPRI, r3
 8115d8c:	f3bf 8f6f 	isb	sy
 8115d90:	f3bf 8f4f 	dsb	sy
 8115d94:	617a      	str	r2, [r7, #20]
 8115d96:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8115d98:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8115d9a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8115d9c:	6a3b      	ldr	r3, [r7, #32]
 8115d9e:	695b      	ldr	r3, [r3, #20]
 8115da0:	2b00      	cmp	r3, #0
 8115da2:	d00e      	beq.n	8115dc2 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8115da4:	6a3b      	ldr	r3, [r7, #32]
 8115da6:	6958      	ldr	r0, [r3, #20]
 8115da8:	683b      	ldr	r3, [r7, #0]
 8115daa:	9300      	str	r3, [sp, #0]
 8115dac:	2300      	movs	r3, #0
 8115dae:	2200      	movs	r2, #0
 8115db0:	2100      	movs	r1, #0
 8115db2:	f001 f9e9 	bl	8117188 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8115db6:	6a3b      	ldr	r3, [r7, #32]
 8115db8:	2200      	movs	r2, #0
 8115dba:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 8115dbc:	2301      	movs	r3, #1
 8115dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8115dc0:	e001      	b.n	8115dc6 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8115dc2:	2300      	movs	r3, #0
 8115dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8115dc6:	69fb      	ldr	r3, [r7, #28]
 8115dc8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8115dca:	68fb      	ldr	r3, [r7, #12]
 8115dcc:	f383 8811 	msr	BASEPRI, r3
}
 8115dd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8115dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8115dd4:	4618      	mov	r0, r3
 8115dd6:	3728      	adds	r7, #40	@ 0x28
 8115dd8:	46bd      	mov	sp, r7
 8115dda:	bd80      	pop	{r7, pc}

08115ddc <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8115ddc:	b580      	push	{r7, lr}
 8115dde:	b08a      	sub	sp, #40	@ 0x28
 8115de0:	af00      	add	r7, sp, #0
 8115de2:	60f8      	str	r0, [r7, #12]
 8115de4:	60b9      	str	r1, [r7, #8]
 8115de6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8115de8:	687b      	ldr	r3, [r7, #4]
 8115dea:	2b00      	cmp	r3, #0
 8115dec:	d10b      	bne.n	8115e06 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8115dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115df2:	f383 8811 	msr	BASEPRI, r3
 8115df6:	f3bf 8f6f 	isb	sy
 8115dfa:	f3bf 8f4f 	dsb	sy
 8115dfe:	61fb      	str	r3, [r7, #28]
}
 8115e00:	bf00      	nop
 8115e02:	bf00      	nop
 8115e04:	e7fd      	b.n	8115e02 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8115e06:	68fb      	ldr	r3, [r7, #12]
 8115e08:	685b      	ldr	r3, [r3, #4]
 8115e0a:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8115e0c:	68fb      	ldr	r3, [r7, #12]
 8115e0e:	689a      	ldr	r2, [r3, #8]
 8115e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115e12:	1ad3      	subs	r3, r2, r3
 8115e14:	687a      	ldr	r2, [r7, #4]
 8115e16:	4293      	cmp	r3, r2
 8115e18:	bf28      	it	cs
 8115e1a:	4613      	movcs	r3, r2
 8115e1c:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8115e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115e20:	6a3b      	ldr	r3, [r7, #32]
 8115e22:	441a      	add	r2, r3
 8115e24:	68fb      	ldr	r3, [r7, #12]
 8115e26:	689b      	ldr	r3, [r3, #8]
 8115e28:	429a      	cmp	r2, r3
 8115e2a:	d90b      	bls.n	8115e44 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8115e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115e30:	f383 8811 	msr	BASEPRI, r3
 8115e34:	f3bf 8f6f 	isb	sy
 8115e38:	f3bf 8f4f 	dsb	sy
 8115e3c:	61bb      	str	r3, [r7, #24]
}
 8115e3e:	bf00      	nop
 8115e40:	bf00      	nop
 8115e42:	e7fd      	b.n	8115e40 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8115e44:	68fb      	ldr	r3, [r7, #12]
 8115e46:	699a      	ldr	r2, [r3, #24]
 8115e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115e4a:	4413      	add	r3, r2
 8115e4c:	6a3a      	ldr	r2, [r7, #32]
 8115e4e:	68b9      	ldr	r1, [r7, #8]
 8115e50:	4618      	mov	r0, r3
 8115e52:	f00e fe66 	bl	8124b22 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8115e56:	687a      	ldr	r2, [r7, #4]
 8115e58:	6a3b      	ldr	r3, [r7, #32]
 8115e5a:	429a      	cmp	r2, r3
 8115e5c:	d91d      	bls.n	8115e9a <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8115e5e:	687a      	ldr	r2, [r7, #4]
 8115e60:	6a3b      	ldr	r3, [r7, #32]
 8115e62:	1ad2      	subs	r2, r2, r3
 8115e64:	68fb      	ldr	r3, [r7, #12]
 8115e66:	689b      	ldr	r3, [r3, #8]
 8115e68:	429a      	cmp	r2, r3
 8115e6a:	d90b      	bls.n	8115e84 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8115e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115e70:	f383 8811 	msr	BASEPRI, r3
 8115e74:	f3bf 8f6f 	isb	sy
 8115e78:	f3bf 8f4f 	dsb	sy
 8115e7c:	617b      	str	r3, [r7, #20]
}
 8115e7e:	bf00      	nop
 8115e80:	bf00      	nop
 8115e82:	e7fd      	b.n	8115e80 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8115e84:	68fb      	ldr	r3, [r7, #12]
 8115e86:	6998      	ldr	r0, [r3, #24]
 8115e88:	68ba      	ldr	r2, [r7, #8]
 8115e8a:	6a3b      	ldr	r3, [r7, #32]
 8115e8c:	18d1      	adds	r1, r2, r3
 8115e8e:	687a      	ldr	r2, [r7, #4]
 8115e90:	6a3b      	ldr	r3, [r7, #32]
 8115e92:	1ad3      	subs	r3, r2, r3
 8115e94:	461a      	mov	r2, r3
 8115e96:	f00e fe44 	bl	8124b22 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8115e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115e9c:	687b      	ldr	r3, [r7, #4]
 8115e9e:	4413      	add	r3, r2
 8115ea0:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8115ea2:	68fb      	ldr	r3, [r7, #12]
 8115ea4:	689b      	ldr	r3, [r3, #8]
 8115ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115ea8:	429a      	cmp	r2, r3
 8115eaa:	d304      	bcc.n	8115eb6 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8115eac:	68fb      	ldr	r3, [r7, #12]
 8115eae:	689b      	ldr	r3, [r3, #8]
 8115eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115eb2:	1ad3      	subs	r3, r2, r3
 8115eb4:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8115eb6:	68fb      	ldr	r3, [r7, #12]
 8115eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115eba:	605a      	str	r2, [r3, #4]

	return xCount;
 8115ebc:	687b      	ldr	r3, [r7, #4]
}
 8115ebe:	4618      	mov	r0, r3
 8115ec0:	3728      	adds	r7, #40	@ 0x28
 8115ec2:	46bd      	mov	sp, r7
 8115ec4:	bd80      	pop	{r7, pc}

08115ec6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8115ec6:	b580      	push	{r7, lr}
 8115ec8:	b08a      	sub	sp, #40	@ 0x28
 8115eca:	af00      	add	r7, sp, #0
 8115ecc:	60f8      	str	r0, [r7, #12]
 8115ece:	60b9      	str	r1, [r7, #8]
 8115ed0:	607a      	str	r2, [r7, #4]
 8115ed2:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8115ed4:	687a      	ldr	r2, [r7, #4]
 8115ed6:	683b      	ldr	r3, [r7, #0]
 8115ed8:	4293      	cmp	r3, r2
 8115eda:	bf28      	it	cs
 8115edc:	4613      	movcs	r3, r2
 8115ede:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8115ee0:	6a3b      	ldr	r3, [r7, #32]
 8115ee2:	2b00      	cmp	r3, #0
 8115ee4:	d067      	beq.n	8115fb6 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8115ee6:	68fb      	ldr	r3, [r7, #12]
 8115ee8:	681b      	ldr	r3, [r3, #0]
 8115eea:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8115eec:	68fb      	ldr	r3, [r7, #12]
 8115eee:	689a      	ldr	r2, [r3, #8]
 8115ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115ef2:	1ad3      	subs	r3, r2, r3
 8115ef4:	6a3a      	ldr	r2, [r7, #32]
 8115ef6:	4293      	cmp	r3, r2
 8115ef8:	bf28      	it	cs
 8115efa:	4613      	movcs	r3, r2
 8115efc:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8115efe:	69fa      	ldr	r2, [r7, #28]
 8115f00:	687b      	ldr	r3, [r7, #4]
 8115f02:	429a      	cmp	r2, r3
 8115f04:	d90b      	bls.n	8115f1e <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8115f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115f0a:	f383 8811 	msr	BASEPRI, r3
 8115f0e:	f3bf 8f6f 	isb	sy
 8115f12:	f3bf 8f4f 	dsb	sy
 8115f16:	61bb      	str	r3, [r7, #24]
}
 8115f18:	bf00      	nop
 8115f1a:	bf00      	nop
 8115f1c:	e7fd      	b.n	8115f1a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8115f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115f20:	69fb      	ldr	r3, [r7, #28]
 8115f22:	441a      	add	r2, r3
 8115f24:	68fb      	ldr	r3, [r7, #12]
 8115f26:	689b      	ldr	r3, [r3, #8]
 8115f28:	429a      	cmp	r2, r3
 8115f2a:	d90b      	bls.n	8115f44 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8115f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115f30:	f383 8811 	msr	BASEPRI, r3
 8115f34:	f3bf 8f6f 	isb	sy
 8115f38:	f3bf 8f4f 	dsb	sy
 8115f3c:	617b      	str	r3, [r7, #20]
}
 8115f3e:	bf00      	nop
 8115f40:	bf00      	nop
 8115f42:	e7fd      	b.n	8115f40 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8115f44:	68fb      	ldr	r3, [r7, #12]
 8115f46:	699a      	ldr	r2, [r3, #24]
 8115f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115f4a:	4413      	add	r3, r2
 8115f4c:	69fa      	ldr	r2, [r7, #28]
 8115f4e:	4619      	mov	r1, r3
 8115f50:	68b8      	ldr	r0, [r7, #8]
 8115f52:	f00e fde6 	bl	8124b22 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8115f56:	6a3a      	ldr	r2, [r7, #32]
 8115f58:	69fb      	ldr	r3, [r7, #28]
 8115f5a:	429a      	cmp	r2, r3
 8115f5c:	d91a      	bls.n	8115f94 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8115f5e:	6a3a      	ldr	r2, [r7, #32]
 8115f60:	687b      	ldr	r3, [r7, #4]
 8115f62:	429a      	cmp	r2, r3
 8115f64:	d90b      	bls.n	8115f7e <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8115f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8115f6a:	f383 8811 	msr	BASEPRI, r3
 8115f6e:	f3bf 8f6f 	isb	sy
 8115f72:	f3bf 8f4f 	dsb	sy
 8115f76:	613b      	str	r3, [r7, #16]
}
 8115f78:	bf00      	nop
 8115f7a:	bf00      	nop
 8115f7c:	e7fd      	b.n	8115f7a <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8115f7e:	68ba      	ldr	r2, [r7, #8]
 8115f80:	69fb      	ldr	r3, [r7, #28]
 8115f82:	18d0      	adds	r0, r2, r3
 8115f84:	68fb      	ldr	r3, [r7, #12]
 8115f86:	6999      	ldr	r1, [r3, #24]
 8115f88:	6a3a      	ldr	r2, [r7, #32]
 8115f8a:	69fb      	ldr	r3, [r7, #28]
 8115f8c:	1ad3      	subs	r3, r2, r3
 8115f8e:	461a      	mov	r2, r3
 8115f90:	f00e fdc7 	bl	8124b22 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8115f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115f96:	6a3b      	ldr	r3, [r7, #32]
 8115f98:	4413      	add	r3, r2
 8115f9a:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8115f9c:	68fb      	ldr	r3, [r7, #12]
 8115f9e:	689b      	ldr	r3, [r3, #8]
 8115fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115fa2:	429a      	cmp	r2, r3
 8115fa4:	d304      	bcc.n	8115fb0 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8115fa6:	68fb      	ldr	r3, [r7, #12]
 8115fa8:	689b      	ldr	r3, [r3, #8]
 8115faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115fac:	1ad3      	subs	r3, r2, r3
 8115fae:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8115fb0:	68fb      	ldr	r3, [r7, #12]
 8115fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115fb4:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8115fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8115fb8:	4618      	mov	r0, r3
 8115fba:	3728      	adds	r7, #40	@ 0x28
 8115fbc:	46bd      	mov	sp, r7
 8115fbe:	bd80      	pop	{r7, pc}

08115fc0 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8115fc0:	b480      	push	{r7}
 8115fc2:	b085      	sub	sp, #20
 8115fc4:	af00      	add	r7, sp, #0
 8115fc6:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8115fc8:	687b      	ldr	r3, [r7, #4]
 8115fca:	689a      	ldr	r2, [r3, #8]
 8115fcc:	687b      	ldr	r3, [r7, #4]
 8115fce:	685b      	ldr	r3, [r3, #4]
 8115fd0:	4413      	add	r3, r2
 8115fd2:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8115fd4:	687b      	ldr	r3, [r7, #4]
 8115fd6:	681b      	ldr	r3, [r3, #0]
 8115fd8:	68fa      	ldr	r2, [r7, #12]
 8115fda:	1ad3      	subs	r3, r2, r3
 8115fdc:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8115fde:	687b      	ldr	r3, [r7, #4]
 8115fe0:	689b      	ldr	r3, [r3, #8]
 8115fe2:	68fa      	ldr	r2, [r7, #12]
 8115fe4:	429a      	cmp	r2, r3
 8115fe6:	d304      	bcc.n	8115ff2 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8115fe8:	687b      	ldr	r3, [r7, #4]
 8115fea:	689b      	ldr	r3, [r3, #8]
 8115fec:	68fa      	ldr	r2, [r7, #12]
 8115fee:	1ad3      	subs	r3, r2, r3
 8115ff0:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8115ff2:	68fb      	ldr	r3, [r7, #12]
}
 8115ff4:	4618      	mov	r0, r3
 8115ff6:	3714      	adds	r7, #20
 8115ff8:	46bd      	mov	sp, r7
 8115ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115ffe:	4770      	bx	lr

08116000 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8116000:	b580      	push	{r7, lr}
 8116002:	b086      	sub	sp, #24
 8116004:	af00      	add	r7, sp, #0
 8116006:	60f8      	str	r0, [r7, #12]
 8116008:	60b9      	str	r1, [r7, #8]
 811600a:	607a      	str	r2, [r7, #4]
 811600c:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 811600e:	2355      	movs	r3, #85	@ 0x55
 8116010:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8116012:	687a      	ldr	r2, [r7, #4]
 8116014:	6979      	ldr	r1, [r7, #20]
 8116016:	68b8      	ldr	r0, [r7, #8]
 8116018:	f00e fc34 	bl	8124884 <memset>
 811601c:	4602      	mov	r2, r0
 811601e:	68bb      	ldr	r3, [r7, #8]
 8116020:	4293      	cmp	r3, r2
 8116022:	d00b      	beq.n	811603c <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8116024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116028:	f383 8811 	msr	BASEPRI, r3
 811602c:	f3bf 8f6f 	isb	sy
 8116030:	f3bf 8f4f 	dsb	sy
 8116034:	613b      	str	r3, [r7, #16]
}
 8116036:	bf00      	nop
 8116038:	bf00      	nop
 811603a:	e7fd      	b.n	8116038 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 811603c:	2224      	movs	r2, #36	@ 0x24
 811603e:	2100      	movs	r1, #0
 8116040:	68f8      	ldr	r0, [r7, #12]
 8116042:	f00e fc1f 	bl	8124884 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8116046:	68fb      	ldr	r3, [r7, #12]
 8116048:	68ba      	ldr	r2, [r7, #8]
 811604a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 811604c:	68fb      	ldr	r3, [r7, #12]
 811604e:	687a      	ldr	r2, [r7, #4]
 8116050:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8116052:	68fb      	ldr	r3, [r7, #12]
 8116054:	683a      	ldr	r2, [r7, #0]
 8116056:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8116058:	68fb      	ldr	r3, [r7, #12]
 811605a:	f897 2020 	ldrb.w	r2, [r7, #32]
 811605e:	771a      	strb	r2, [r3, #28]
}
 8116060:	bf00      	nop
 8116062:	3718      	adds	r7, #24
 8116064:	46bd      	mov	sp, r7
 8116066:	bd80      	pop	{r7, pc}

08116068 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8116068:	b580      	push	{r7, lr}
 811606a:	b08e      	sub	sp, #56	@ 0x38
 811606c:	af04      	add	r7, sp, #16
 811606e:	60f8      	str	r0, [r7, #12]
 8116070:	60b9      	str	r1, [r7, #8]
 8116072:	607a      	str	r2, [r7, #4]
 8116074:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8116076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8116078:	2b00      	cmp	r3, #0
 811607a:	d10b      	bne.n	8116094 <xTaskCreateStatic+0x2c>
	__asm volatile
 811607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116080:	f383 8811 	msr	BASEPRI, r3
 8116084:	f3bf 8f6f 	isb	sy
 8116088:	f3bf 8f4f 	dsb	sy
 811608c:	623b      	str	r3, [r7, #32]
}
 811608e:	bf00      	nop
 8116090:	bf00      	nop
 8116092:	e7fd      	b.n	8116090 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8116094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8116096:	2b00      	cmp	r3, #0
 8116098:	d10b      	bne.n	81160b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 811609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811609e:	f383 8811 	msr	BASEPRI, r3
 81160a2:	f3bf 8f6f 	isb	sy
 81160a6:	f3bf 8f4f 	dsb	sy
 81160aa:	61fb      	str	r3, [r7, #28]
}
 81160ac:	bf00      	nop
 81160ae:	bf00      	nop
 81160b0:	e7fd      	b.n	81160ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81160b2:	23a8      	movs	r3, #168	@ 0xa8
 81160b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81160b6:	693b      	ldr	r3, [r7, #16]
 81160b8:	2ba8      	cmp	r3, #168	@ 0xa8
 81160ba:	d00b      	beq.n	81160d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 81160bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81160c0:	f383 8811 	msr	BASEPRI, r3
 81160c4:	f3bf 8f6f 	isb	sy
 81160c8:	f3bf 8f4f 	dsb	sy
 81160cc:	61bb      	str	r3, [r7, #24]
}
 81160ce:	bf00      	nop
 81160d0:	bf00      	nop
 81160d2:	e7fd      	b.n	81160d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81160d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81160d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81160d8:	2b00      	cmp	r3, #0
 81160da:	d01e      	beq.n	811611a <xTaskCreateStatic+0xb2>
 81160dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81160de:	2b00      	cmp	r3, #0
 81160e0:	d01b      	beq.n	811611a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81160e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81160e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81160e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81160e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81160ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81160ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81160ee:	2202      	movs	r2, #2
 81160f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81160f4:	2300      	movs	r3, #0
 81160f6:	9303      	str	r3, [sp, #12]
 81160f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81160fa:	9302      	str	r3, [sp, #8]
 81160fc:	f107 0314 	add.w	r3, r7, #20
 8116100:	9301      	str	r3, [sp, #4]
 8116102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116104:	9300      	str	r3, [sp, #0]
 8116106:	683b      	ldr	r3, [r7, #0]
 8116108:	687a      	ldr	r2, [r7, #4]
 811610a:	68b9      	ldr	r1, [r7, #8]
 811610c:	68f8      	ldr	r0, [r7, #12]
 811610e:	f000 f851 	bl	81161b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8116112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8116114:	f000 f8f6 	bl	8116304 <prvAddNewTaskToReadyList>
 8116118:	e001      	b.n	811611e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 811611a:	2300      	movs	r3, #0
 811611c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 811611e:	697b      	ldr	r3, [r7, #20]
	}
 8116120:	4618      	mov	r0, r3
 8116122:	3728      	adds	r7, #40	@ 0x28
 8116124:	46bd      	mov	sp, r7
 8116126:	bd80      	pop	{r7, pc}

08116128 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8116128:	b580      	push	{r7, lr}
 811612a:	b08c      	sub	sp, #48	@ 0x30
 811612c:	af04      	add	r7, sp, #16
 811612e:	60f8      	str	r0, [r7, #12]
 8116130:	60b9      	str	r1, [r7, #8]
 8116132:	603b      	str	r3, [r7, #0]
 8116134:	4613      	mov	r3, r2
 8116136:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8116138:	88fb      	ldrh	r3, [r7, #6]
 811613a:	009b      	lsls	r3, r3, #2
 811613c:	4618      	mov	r0, r3
 811613e:	f7fd fd93 	bl	8113c68 <pvPortMalloc>
 8116142:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8116144:	697b      	ldr	r3, [r7, #20]
 8116146:	2b00      	cmp	r3, #0
 8116148:	d00e      	beq.n	8116168 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 811614a:	20a8      	movs	r0, #168	@ 0xa8
 811614c:	f7fd fd8c 	bl	8113c68 <pvPortMalloc>
 8116150:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8116152:	69fb      	ldr	r3, [r7, #28]
 8116154:	2b00      	cmp	r3, #0
 8116156:	d003      	beq.n	8116160 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8116158:	69fb      	ldr	r3, [r7, #28]
 811615a:	697a      	ldr	r2, [r7, #20]
 811615c:	631a      	str	r2, [r3, #48]	@ 0x30
 811615e:	e005      	b.n	811616c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8116160:	6978      	ldr	r0, [r7, #20]
 8116162:	f7fd fe4f 	bl	8113e04 <vPortFree>
 8116166:	e001      	b.n	811616c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8116168:	2300      	movs	r3, #0
 811616a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 811616c:	69fb      	ldr	r3, [r7, #28]
 811616e:	2b00      	cmp	r3, #0
 8116170:	d017      	beq.n	81161a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8116172:	69fb      	ldr	r3, [r7, #28]
 8116174:	2200      	movs	r2, #0
 8116176:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 811617a:	88fa      	ldrh	r2, [r7, #6]
 811617c:	2300      	movs	r3, #0
 811617e:	9303      	str	r3, [sp, #12]
 8116180:	69fb      	ldr	r3, [r7, #28]
 8116182:	9302      	str	r3, [sp, #8]
 8116184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116186:	9301      	str	r3, [sp, #4]
 8116188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811618a:	9300      	str	r3, [sp, #0]
 811618c:	683b      	ldr	r3, [r7, #0]
 811618e:	68b9      	ldr	r1, [r7, #8]
 8116190:	68f8      	ldr	r0, [r7, #12]
 8116192:	f000 f80f 	bl	81161b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8116196:	69f8      	ldr	r0, [r7, #28]
 8116198:	f000 f8b4 	bl	8116304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 811619c:	2301      	movs	r3, #1
 811619e:	61bb      	str	r3, [r7, #24]
 81161a0:	e002      	b.n	81161a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81161a2:	f04f 33ff 	mov.w	r3, #4294967295
 81161a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81161a8:	69bb      	ldr	r3, [r7, #24]
	}
 81161aa:	4618      	mov	r0, r3
 81161ac:	3720      	adds	r7, #32
 81161ae:	46bd      	mov	sp, r7
 81161b0:	bd80      	pop	{r7, pc}
	...

081161b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81161b4:	b580      	push	{r7, lr}
 81161b6:	b088      	sub	sp, #32
 81161b8:	af00      	add	r7, sp, #0
 81161ba:	60f8      	str	r0, [r7, #12]
 81161bc:	60b9      	str	r1, [r7, #8]
 81161be:	607a      	str	r2, [r7, #4]
 81161c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81161c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81161c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 81161c6:	687b      	ldr	r3, [r7, #4]
 81161c8:	009b      	lsls	r3, r3, #2
 81161ca:	461a      	mov	r2, r3
 81161cc:	21a5      	movs	r1, #165	@ 0xa5
 81161ce:	f00e fb59 	bl	8124884 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81161d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81161d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81161d6:	687b      	ldr	r3, [r7, #4]
 81161d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81161dc:	3b01      	subs	r3, #1
 81161de:	009b      	lsls	r3, r3, #2
 81161e0:	4413      	add	r3, r2
 81161e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81161e4:	69bb      	ldr	r3, [r7, #24]
 81161e6:	f023 0307 	bic.w	r3, r3, #7
 81161ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81161ec:	69bb      	ldr	r3, [r7, #24]
 81161ee:	f003 0307 	and.w	r3, r3, #7
 81161f2:	2b00      	cmp	r3, #0
 81161f4:	d00b      	beq.n	811620e <prvInitialiseNewTask+0x5a>
	__asm volatile
 81161f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81161fa:	f383 8811 	msr	BASEPRI, r3
 81161fe:	f3bf 8f6f 	isb	sy
 8116202:	f3bf 8f4f 	dsb	sy
 8116206:	617b      	str	r3, [r7, #20]
}
 8116208:	bf00      	nop
 811620a:	bf00      	nop
 811620c:	e7fd      	b.n	811620a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 811620e:	68bb      	ldr	r3, [r7, #8]
 8116210:	2b00      	cmp	r3, #0
 8116212:	d01f      	beq.n	8116254 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8116214:	2300      	movs	r3, #0
 8116216:	61fb      	str	r3, [r7, #28]
 8116218:	e012      	b.n	8116240 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 811621a:	68ba      	ldr	r2, [r7, #8]
 811621c:	69fb      	ldr	r3, [r7, #28]
 811621e:	4413      	add	r3, r2
 8116220:	7819      	ldrb	r1, [r3, #0]
 8116222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8116224:	69fb      	ldr	r3, [r7, #28]
 8116226:	4413      	add	r3, r2
 8116228:	3334      	adds	r3, #52	@ 0x34
 811622a:	460a      	mov	r2, r1
 811622c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 811622e:	68ba      	ldr	r2, [r7, #8]
 8116230:	69fb      	ldr	r3, [r7, #28]
 8116232:	4413      	add	r3, r2
 8116234:	781b      	ldrb	r3, [r3, #0]
 8116236:	2b00      	cmp	r3, #0
 8116238:	d006      	beq.n	8116248 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 811623a:	69fb      	ldr	r3, [r7, #28]
 811623c:	3301      	adds	r3, #1
 811623e:	61fb      	str	r3, [r7, #28]
 8116240:	69fb      	ldr	r3, [r7, #28]
 8116242:	2b0f      	cmp	r3, #15
 8116244:	d9e9      	bls.n	811621a <prvInitialiseNewTask+0x66>
 8116246:	e000      	b.n	811624a <prvInitialiseNewTask+0x96>
			{
				break;
 8116248:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 811624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811624c:	2200      	movs	r2, #0
 811624e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8116252:	e003      	b.n	811625c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8116254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116256:	2200      	movs	r2, #0
 8116258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 811625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811625e:	2b37      	cmp	r3, #55	@ 0x37
 8116260:	d901      	bls.n	8116266 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8116262:	2337      	movs	r3, #55	@ 0x37
 8116264:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8116266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811626a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 811626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811626e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8116270:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8116272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116274:	2200      	movs	r2, #0
 8116276:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8116278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811627a:	3304      	adds	r3, #4
 811627c:	4618      	mov	r0, r3
 811627e:	f7fd ff01 	bl	8114084 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8116282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116284:	3318      	adds	r3, #24
 8116286:	4618      	mov	r0, r3
 8116288:	f7fd fefc 	bl	8114084 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 811628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811628e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8116290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116294:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8116298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811629a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 811629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811629e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81162a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81162a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81162a4:	2200      	movs	r2, #0
 81162a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81162aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81162ac:	2200      	movs	r2, #0
 81162ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 81162b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81162b4:	3354      	adds	r3, #84	@ 0x54
 81162b6:	224c      	movs	r2, #76	@ 0x4c
 81162b8:	2100      	movs	r1, #0
 81162ba:	4618      	mov	r0, r3
 81162bc:	f00e fae2 	bl	8124884 <memset>
 81162c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81162c2:	4a0d      	ldr	r2, [pc, #52]	@ (81162f8 <prvInitialiseNewTask+0x144>)
 81162c4:	659a      	str	r2, [r3, #88]	@ 0x58
 81162c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81162c8:	4a0c      	ldr	r2, [pc, #48]	@ (81162fc <prvInitialiseNewTask+0x148>)
 81162ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 81162cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81162ce:	4a0c      	ldr	r2, [pc, #48]	@ (8116300 <prvInitialiseNewTask+0x14c>)
 81162d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81162d2:	683a      	ldr	r2, [r7, #0]
 81162d4:	68f9      	ldr	r1, [r7, #12]
 81162d6:	69b8      	ldr	r0, [r7, #24]
 81162d8:	f7fd ff68 	bl	81141ac <pxPortInitialiseStack>
 81162dc:	4602      	mov	r2, r0
 81162de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81162e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81162e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81162e4:	2b00      	cmp	r3, #0
 81162e6:	d002      	beq.n	81162ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81162e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81162ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81162ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81162ee:	bf00      	nop
 81162f0:	3720      	adds	r7, #32
 81162f2:	46bd      	mov	sp, r7
 81162f4:	bd80      	pop	{r7, pc}
 81162f6:	bf00      	nop
 81162f8:	1000e514 	.word	0x1000e514
 81162fc:	1000e57c 	.word	0x1000e57c
 8116300:	1000e5e4 	.word	0x1000e5e4

08116304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8116304:	b580      	push	{r7, lr}
 8116306:	b082      	sub	sp, #8
 8116308:	af00      	add	r7, sp, #0
 811630a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 811630c:	f7fe f87c 	bl	8114408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8116310:	4b2d      	ldr	r3, [pc, #180]	@ (81163c8 <prvAddNewTaskToReadyList+0xc4>)
 8116312:	681b      	ldr	r3, [r3, #0]
 8116314:	3301      	adds	r3, #1
 8116316:	4a2c      	ldr	r2, [pc, #176]	@ (81163c8 <prvAddNewTaskToReadyList+0xc4>)
 8116318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 811631a:	4b2c      	ldr	r3, [pc, #176]	@ (81163cc <prvAddNewTaskToReadyList+0xc8>)
 811631c:	681b      	ldr	r3, [r3, #0]
 811631e:	2b00      	cmp	r3, #0
 8116320:	d109      	bne.n	8116336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8116322:	4a2a      	ldr	r2, [pc, #168]	@ (81163cc <prvAddNewTaskToReadyList+0xc8>)
 8116324:	687b      	ldr	r3, [r7, #4]
 8116326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8116328:	4b27      	ldr	r3, [pc, #156]	@ (81163c8 <prvAddNewTaskToReadyList+0xc4>)
 811632a:	681b      	ldr	r3, [r3, #0]
 811632c:	2b01      	cmp	r3, #1
 811632e:	d110      	bne.n	8116352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8116330:	f000 fc68 	bl	8116c04 <prvInitialiseTaskLists>
 8116334:	e00d      	b.n	8116352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8116336:	4b26      	ldr	r3, [pc, #152]	@ (81163d0 <prvAddNewTaskToReadyList+0xcc>)
 8116338:	681b      	ldr	r3, [r3, #0]
 811633a:	2b00      	cmp	r3, #0
 811633c:	d109      	bne.n	8116352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 811633e:	4b23      	ldr	r3, [pc, #140]	@ (81163cc <prvAddNewTaskToReadyList+0xc8>)
 8116340:	681b      	ldr	r3, [r3, #0]
 8116342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116344:	687b      	ldr	r3, [r7, #4]
 8116346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116348:	429a      	cmp	r2, r3
 811634a:	d802      	bhi.n	8116352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 811634c:	4a1f      	ldr	r2, [pc, #124]	@ (81163cc <prvAddNewTaskToReadyList+0xc8>)
 811634e:	687b      	ldr	r3, [r7, #4]
 8116350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8116352:	4b20      	ldr	r3, [pc, #128]	@ (81163d4 <prvAddNewTaskToReadyList+0xd0>)
 8116354:	681b      	ldr	r3, [r3, #0]
 8116356:	3301      	adds	r3, #1
 8116358:	4a1e      	ldr	r2, [pc, #120]	@ (81163d4 <prvAddNewTaskToReadyList+0xd0>)
 811635a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 811635c:	4b1d      	ldr	r3, [pc, #116]	@ (81163d4 <prvAddNewTaskToReadyList+0xd0>)
 811635e:	681a      	ldr	r2, [r3, #0]
 8116360:	687b      	ldr	r3, [r7, #4]
 8116362:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8116364:	687b      	ldr	r3, [r7, #4]
 8116366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116368:	4b1b      	ldr	r3, [pc, #108]	@ (81163d8 <prvAddNewTaskToReadyList+0xd4>)
 811636a:	681b      	ldr	r3, [r3, #0]
 811636c:	429a      	cmp	r2, r3
 811636e:	d903      	bls.n	8116378 <prvAddNewTaskToReadyList+0x74>
 8116370:	687b      	ldr	r3, [r7, #4]
 8116372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116374:	4a18      	ldr	r2, [pc, #96]	@ (81163d8 <prvAddNewTaskToReadyList+0xd4>)
 8116376:	6013      	str	r3, [r2, #0]
 8116378:	687b      	ldr	r3, [r7, #4]
 811637a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811637c:	4613      	mov	r3, r2
 811637e:	009b      	lsls	r3, r3, #2
 8116380:	4413      	add	r3, r2
 8116382:	009b      	lsls	r3, r3, #2
 8116384:	4a15      	ldr	r2, [pc, #84]	@ (81163dc <prvAddNewTaskToReadyList+0xd8>)
 8116386:	441a      	add	r2, r3
 8116388:	687b      	ldr	r3, [r7, #4]
 811638a:	3304      	adds	r3, #4
 811638c:	4619      	mov	r1, r3
 811638e:	4610      	mov	r0, r2
 8116390:	f7fd fe85 	bl	811409e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8116394:	f7fe f86a 	bl	811446c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8116398:	4b0d      	ldr	r3, [pc, #52]	@ (81163d0 <prvAddNewTaskToReadyList+0xcc>)
 811639a:	681b      	ldr	r3, [r3, #0]
 811639c:	2b00      	cmp	r3, #0
 811639e:	d00e      	beq.n	81163be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81163a0:	4b0a      	ldr	r3, [pc, #40]	@ (81163cc <prvAddNewTaskToReadyList+0xc8>)
 81163a2:	681b      	ldr	r3, [r3, #0]
 81163a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81163a6:	687b      	ldr	r3, [r7, #4]
 81163a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81163aa:	429a      	cmp	r2, r3
 81163ac:	d207      	bcs.n	81163be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81163ae:	4b0c      	ldr	r3, [pc, #48]	@ (81163e0 <prvAddNewTaskToReadyList+0xdc>)
 81163b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81163b4:	601a      	str	r2, [r3, #0]
 81163b6:	f3bf 8f4f 	dsb	sy
 81163ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81163be:	bf00      	nop
 81163c0:	3708      	adds	r7, #8
 81163c2:	46bd      	mov	sp, r7
 81163c4:	bd80      	pop	{r7, pc}
 81163c6:	bf00      	nop
 81163c8:	1000b0b4 	.word	0x1000b0b4
 81163cc:	1000abe0 	.word	0x1000abe0
 81163d0:	1000b0c0 	.word	0x1000b0c0
 81163d4:	1000b0d0 	.word	0x1000b0d0
 81163d8:	1000b0bc 	.word	0x1000b0bc
 81163dc:	1000abe4 	.word	0x1000abe4
 81163e0:	e000ed04 	.word	0xe000ed04

081163e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81163e4:	b580      	push	{r7, lr}
 81163e6:	b084      	sub	sp, #16
 81163e8:	af00      	add	r7, sp, #0
 81163ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81163ec:	2300      	movs	r3, #0
 81163ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81163f0:	687b      	ldr	r3, [r7, #4]
 81163f2:	2b00      	cmp	r3, #0
 81163f4:	d018      	beq.n	8116428 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81163f6:	4b14      	ldr	r3, [pc, #80]	@ (8116448 <vTaskDelay+0x64>)
 81163f8:	681b      	ldr	r3, [r3, #0]
 81163fa:	2b00      	cmp	r3, #0
 81163fc:	d00b      	beq.n	8116416 <vTaskDelay+0x32>
	__asm volatile
 81163fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116402:	f383 8811 	msr	BASEPRI, r3
 8116406:	f3bf 8f6f 	isb	sy
 811640a:	f3bf 8f4f 	dsb	sy
 811640e:	60bb      	str	r3, [r7, #8]
}
 8116410:	bf00      	nop
 8116412:	bf00      	nop
 8116414:	e7fd      	b.n	8116412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8116416:	f000 f88b 	bl	8116530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 811641a:	2100      	movs	r1, #0
 811641c:	6878      	ldr	r0, [r7, #4]
 811641e:	f000 ffbf 	bl	81173a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8116422:	f000 f893 	bl	811654c <xTaskResumeAll>
 8116426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8116428:	68fb      	ldr	r3, [r7, #12]
 811642a:	2b00      	cmp	r3, #0
 811642c:	d107      	bne.n	811643e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 811642e:	4b07      	ldr	r3, [pc, #28]	@ (811644c <vTaskDelay+0x68>)
 8116430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8116434:	601a      	str	r2, [r3, #0]
 8116436:	f3bf 8f4f 	dsb	sy
 811643a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 811643e:	bf00      	nop
 8116440:	3710      	adds	r7, #16
 8116442:	46bd      	mov	sp, r7
 8116444:	bd80      	pop	{r7, pc}
 8116446:	bf00      	nop
 8116448:	1000b0dc 	.word	0x1000b0dc
 811644c:	e000ed04 	.word	0xe000ed04

08116450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8116450:	b580      	push	{r7, lr}
 8116452:	b08a      	sub	sp, #40	@ 0x28
 8116454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8116456:	2300      	movs	r3, #0
 8116458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 811645a:	2300      	movs	r3, #0
 811645c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 811645e:	463a      	mov	r2, r7
 8116460:	1d39      	adds	r1, r7, #4
 8116462:	f107 0308 	add.w	r3, r7, #8
 8116466:	4618      	mov	r0, r3
 8116468:	f7fd fbca 	bl	8113c00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 811646c:	6839      	ldr	r1, [r7, #0]
 811646e:	687b      	ldr	r3, [r7, #4]
 8116470:	68ba      	ldr	r2, [r7, #8]
 8116472:	9202      	str	r2, [sp, #8]
 8116474:	9301      	str	r3, [sp, #4]
 8116476:	2300      	movs	r3, #0
 8116478:	9300      	str	r3, [sp, #0]
 811647a:	2300      	movs	r3, #0
 811647c:	460a      	mov	r2, r1
 811647e:	4924      	ldr	r1, [pc, #144]	@ (8116510 <vTaskStartScheduler+0xc0>)
 8116480:	4824      	ldr	r0, [pc, #144]	@ (8116514 <vTaskStartScheduler+0xc4>)
 8116482:	f7ff fdf1 	bl	8116068 <xTaskCreateStatic>
 8116486:	4603      	mov	r3, r0
 8116488:	4a23      	ldr	r2, [pc, #140]	@ (8116518 <vTaskStartScheduler+0xc8>)
 811648a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 811648c:	4b22      	ldr	r3, [pc, #136]	@ (8116518 <vTaskStartScheduler+0xc8>)
 811648e:	681b      	ldr	r3, [r3, #0]
 8116490:	2b00      	cmp	r3, #0
 8116492:	d002      	beq.n	811649a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8116494:	2301      	movs	r3, #1
 8116496:	617b      	str	r3, [r7, #20]
 8116498:	e001      	b.n	811649e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 811649a:	2300      	movs	r3, #0
 811649c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 811649e:	697b      	ldr	r3, [r7, #20]
 81164a0:	2b01      	cmp	r3, #1
 81164a2:	d102      	bne.n	81164aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81164a4:	f000 ffd0 	bl	8117448 <xTimerCreateTimerTask>
 81164a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81164aa:	697b      	ldr	r3, [r7, #20]
 81164ac:	2b01      	cmp	r3, #1
 81164ae:	d11b      	bne.n	81164e8 <vTaskStartScheduler+0x98>
	__asm volatile
 81164b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81164b4:	f383 8811 	msr	BASEPRI, r3
 81164b8:	f3bf 8f6f 	isb	sy
 81164bc:	f3bf 8f4f 	dsb	sy
 81164c0:	613b      	str	r3, [r7, #16]
}
 81164c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81164c4:	4b15      	ldr	r3, [pc, #84]	@ (811651c <vTaskStartScheduler+0xcc>)
 81164c6:	681b      	ldr	r3, [r3, #0]
 81164c8:	3354      	adds	r3, #84	@ 0x54
 81164ca:	4a15      	ldr	r2, [pc, #84]	@ (8116520 <vTaskStartScheduler+0xd0>)
 81164cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81164ce:	4b15      	ldr	r3, [pc, #84]	@ (8116524 <vTaskStartScheduler+0xd4>)
 81164d0:	f04f 32ff 	mov.w	r2, #4294967295
 81164d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81164d6:	4b14      	ldr	r3, [pc, #80]	@ (8116528 <vTaskStartScheduler+0xd8>)
 81164d8:	2201      	movs	r2, #1
 81164da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81164dc:	4b13      	ldr	r3, [pc, #76]	@ (811652c <vTaskStartScheduler+0xdc>)
 81164de:	2200      	movs	r2, #0
 81164e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81164e2:	f7fd feed 	bl	81142c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81164e6:	e00f      	b.n	8116508 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81164e8:	697b      	ldr	r3, [r7, #20]
 81164ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 81164ee:	d10b      	bne.n	8116508 <vTaskStartScheduler+0xb8>
	__asm volatile
 81164f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81164f4:	f383 8811 	msr	BASEPRI, r3
 81164f8:	f3bf 8f6f 	isb	sy
 81164fc:	f3bf 8f4f 	dsb	sy
 8116500:	60fb      	str	r3, [r7, #12]
}
 8116502:	bf00      	nop
 8116504:	bf00      	nop
 8116506:	e7fd      	b.n	8116504 <vTaskStartScheduler+0xb4>
}
 8116508:	bf00      	nop
 811650a:	3718      	adds	r7, #24
 811650c:	46bd      	mov	sp, r7
 811650e:	bd80      	pop	{r7, pc}
 8116510:	081255a4 	.word	0x081255a4
 8116514:	08116bd5 	.word	0x08116bd5
 8116518:	1000b0d8 	.word	0x1000b0d8
 811651c:	1000abe0 	.word	0x1000abe0
 8116520:	10000040 	.word	0x10000040
 8116524:	1000b0d4 	.word	0x1000b0d4
 8116528:	1000b0c0 	.word	0x1000b0c0
 811652c:	1000b0b8 	.word	0x1000b0b8

08116530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8116530:	b480      	push	{r7}
 8116532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8116534:	4b04      	ldr	r3, [pc, #16]	@ (8116548 <vTaskSuspendAll+0x18>)
 8116536:	681b      	ldr	r3, [r3, #0]
 8116538:	3301      	adds	r3, #1
 811653a:	4a03      	ldr	r2, [pc, #12]	@ (8116548 <vTaskSuspendAll+0x18>)
 811653c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 811653e:	bf00      	nop
 8116540:	46bd      	mov	sp, r7
 8116542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116546:	4770      	bx	lr
 8116548:	1000b0dc 	.word	0x1000b0dc

0811654c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 811654c:	b580      	push	{r7, lr}
 811654e:	b084      	sub	sp, #16
 8116550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8116552:	2300      	movs	r3, #0
 8116554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8116556:	2300      	movs	r3, #0
 8116558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 811655a:	4b42      	ldr	r3, [pc, #264]	@ (8116664 <xTaskResumeAll+0x118>)
 811655c:	681b      	ldr	r3, [r3, #0]
 811655e:	2b00      	cmp	r3, #0
 8116560:	d10b      	bne.n	811657a <xTaskResumeAll+0x2e>
	__asm volatile
 8116562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116566:	f383 8811 	msr	BASEPRI, r3
 811656a:	f3bf 8f6f 	isb	sy
 811656e:	f3bf 8f4f 	dsb	sy
 8116572:	603b      	str	r3, [r7, #0]
}
 8116574:	bf00      	nop
 8116576:	bf00      	nop
 8116578:	e7fd      	b.n	8116576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 811657a:	f7fd ff45 	bl	8114408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 811657e:	4b39      	ldr	r3, [pc, #228]	@ (8116664 <xTaskResumeAll+0x118>)
 8116580:	681b      	ldr	r3, [r3, #0]
 8116582:	3b01      	subs	r3, #1
 8116584:	4a37      	ldr	r2, [pc, #220]	@ (8116664 <xTaskResumeAll+0x118>)
 8116586:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8116588:	4b36      	ldr	r3, [pc, #216]	@ (8116664 <xTaskResumeAll+0x118>)
 811658a:	681b      	ldr	r3, [r3, #0]
 811658c:	2b00      	cmp	r3, #0
 811658e:	d162      	bne.n	8116656 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8116590:	4b35      	ldr	r3, [pc, #212]	@ (8116668 <xTaskResumeAll+0x11c>)
 8116592:	681b      	ldr	r3, [r3, #0]
 8116594:	2b00      	cmp	r3, #0
 8116596:	d05e      	beq.n	8116656 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8116598:	e02f      	b.n	81165fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 811659a:	4b34      	ldr	r3, [pc, #208]	@ (811666c <xTaskResumeAll+0x120>)
 811659c:	68db      	ldr	r3, [r3, #12]
 811659e:	68db      	ldr	r3, [r3, #12]
 81165a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81165a2:	68fb      	ldr	r3, [r7, #12]
 81165a4:	3318      	adds	r3, #24
 81165a6:	4618      	mov	r0, r3
 81165a8:	f7fd fdd6 	bl	8114158 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81165ac:	68fb      	ldr	r3, [r7, #12]
 81165ae:	3304      	adds	r3, #4
 81165b0:	4618      	mov	r0, r3
 81165b2:	f7fd fdd1 	bl	8114158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81165b6:	68fb      	ldr	r3, [r7, #12]
 81165b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81165ba:	4b2d      	ldr	r3, [pc, #180]	@ (8116670 <xTaskResumeAll+0x124>)
 81165bc:	681b      	ldr	r3, [r3, #0]
 81165be:	429a      	cmp	r2, r3
 81165c0:	d903      	bls.n	81165ca <xTaskResumeAll+0x7e>
 81165c2:	68fb      	ldr	r3, [r7, #12]
 81165c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81165c6:	4a2a      	ldr	r2, [pc, #168]	@ (8116670 <xTaskResumeAll+0x124>)
 81165c8:	6013      	str	r3, [r2, #0]
 81165ca:	68fb      	ldr	r3, [r7, #12]
 81165cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81165ce:	4613      	mov	r3, r2
 81165d0:	009b      	lsls	r3, r3, #2
 81165d2:	4413      	add	r3, r2
 81165d4:	009b      	lsls	r3, r3, #2
 81165d6:	4a27      	ldr	r2, [pc, #156]	@ (8116674 <xTaskResumeAll+0x128>)
 81165d8:	441a      	add	r2, r3
 81165da:	68fb      	ldr	r3, [r7, #12]
 81165dc:	3304      	adds	r3, #4
 81165de:	4619      	mov	r1, r3
 81165e0:	4610      	mov	r0, r2
 81165e2:	f7fd fd5c 	bl	811409e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81165e6:	68fb      	ldr	r3, [r7, #12]
 81165e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81165ea:	4b23      	ldr	r3, [pc, #140]	@ (8116678 <xTaskResumeAll+0x12c>)
 81165ec:	681b      	ldr	r3, [r3, #0]
 81165ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81165f0:	429a      	cmp	r2, r3
 81165f2:	d302      	bcc.n	81165fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 81165f4:	4b21      	ldr	r3, [pc, #132]	@ (811667c <xTaskResumeAll+0x130>)
 81165f6:	2201      	movs	r2, #1
 81165f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81165fa:	4b1c      	ldr	r3, [pc, #112]	@ (811666c <xTaskResumeAll+0x120>)
 81165fc:	681b      	ldr	r3, [r3, #0]
 81165fe:	2b00      	cmp	r3, #0
 8116600:	d1cb      	bne.n	811659a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8116602:	68fb      	ldr	r3, [r7, #12]
 8116604:	2b00      	cmp	r3, #0
 8116606:	d001      	beq.n	811660c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8116608:	f000 fba0 	bl	8116d4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 811660c:	4b1c      	ldr	r3, [pc, #112]	@ (8116680 <xTaskResumeAll+0x134>)
 811660e:	681b      	ldr	r3, [r3, #0]
 8116610:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8116612:	687b      	ldr	r3, [r7, #4]
 8116614:	2b00      	cmp	r3, #0
 8116616:	d010      	beq.n	811663a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8116618:	f000 f858 	bl	81166cc <xTaskIncrementTick>
 811661c:	4603      	mov	r3, r0
 811661e:	2b00      	cmp	r3, #0
 8116620:	d002      	beq.n	8116628 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8116622:	4b16      	ldr	r3, [pc, #88]	@ (811667c <xTaskResumeAll+0x130>)
 8116624:	2201      	movs	r2, #1
 8116626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8116628:	687b      	ldr	r3, [r7, #4]
 811662a:	3b01      	subs	r3, #1
 811662c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 811662e:	687b      	ldr	r3, [r7, #4]
 8116630:	2b00      	cmp	r3, #0
 8116632:	d1f1      	bne.n	8116618 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8116634:	4b12      	ldr	r3, [pc, #72]	@ (8116680 <xTaskResumeAll+0x134>)
 8116636:	2200      	movs	r2, #0
 8116638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 811663a:	4b10      	ldr	r3, [pc, #64]	@ (811667c <xTaskResumeAll+0x130>)
 811663c:	681b      	ldr	r3, [r3, #0]
 811663e:	2b00      	cmp	r3, #0
 8116640:	d009      	beq.n	8116656 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8116642:	2301      	movs	r3, #1
 8116644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8116646:	4b0f      	ldr	r3, [pc, #60]	@ (8116684 <xTaskResumeAll+0x138>)
 8116648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811664c:	601a      	str	r2, [r3, #0]
 811664e:	f3bf 8f4f 	dsb	sy
 8116652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8116656:	f7fd ff09 	bl	811446c <vPortExitCritical>

	return xAlreadyYielded;
 811665a:	68bb      	ldr	r3, [r7, #8]
}
 811665c:	4618      	mov	r0, r3
 811665e:	3710      	adds	r7, #16
 8116660:	46bd      	mov	sp, r7
 8116662:	bd80      	pop	{r7, pc}
 8116664:	1000b0dc 	.word	0x1000b0dc
 8116668:	1000b0b4 	.word	0x1000b0b4
 811666c:	1000b074 	.word	0x1000b074
 8116670:	1000b0bc 	.word	0x1000b0bc
 8116674:	1000abe4 	.word	0x1000abe4
 8116678:	1000abe0 	.word	0x1000abe0
 811667c:	1000b0c8 	.word	0x1000b0c8
 8116680:	1000b0c4 	.word	0x1000b0c4
 8116684:	e000ed04 	.word	0xe000ed04

08116688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8116688:	b480      	push	{r7}
 811668a:	b083      	sub	sp, #12
 811668c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 811668e:	4b05      	ldr	r3, [pc, #20]	@ (81166a4 <xTaskGetTickCount+0x1c>)
 8116690:	681b      	ldr	r3, [r3, #0]
 8116692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8116694:	687b      	ldr	r3, [r7, #4]
}
 8116696:	4618      	mov	r0, r3
 8116698:	370c      	adds	r7, #12
 811669a:	46bd      	mov	sp, r7
 811669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81166a0:	4770      	bx	lr
 81166a2:	bf00      	nop
 81166a4:	1000b0b8 	.word	0x1000b0b8

081166a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 81166a8:	b580      	push	{r7, lr}
 81166aa:	b082      	sub	sp, #8
 81166ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81166ae:	f7fd ff8b 	bl	81145c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 81166b2:	2300      	movs	r3, #0
 81166b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 81166b6:	4b04      	ldr	r3, [pc, #16]	@ (81166c8 <xTaskGetTickCountFromISR+0x20>)
 81166b8:	681b      	ldr	r3, [r3, #0]
 81166ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81166bc:	683b      	ldr	r3, [r7, #0]
}
 81166be:	4618      	mov	r0, r3
 81166c0:	3708      	adds	r7, #8
 81166c2:	46bd      	mov	sp, r7
 81166c4:	bd80      	pop	{r7, pc}
 81166c6:	bf00      	nop
 81166c8:	1000b0b8 	.word	0x1000b0b8

081166cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81166cc:	b580      	push	{r7, lr}
 81166ce:	b086      	sub	sp, #24
 81166d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81166d2:	2300      	movs	r3, #0
 81166d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81166d6:	4b4f      	ldr	r3, [pc, #316]	@ (8116814 <xTaskIncrementTick+0x148>)
 81166d8:	681b      	ldr	r3, [r3, #0]
 81166da:	2b00      	cmp	r3, #0
 81166dc:	f040 8090 	bne.w	8116800 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81166e0:	4b4d      	ldr	r3, [pc, #308]	@ (8116818 <xTaskIncrementTick+0x14c>)
 81166e2:	681b      	ldr	r3, [r3, #0]
 81166e4:	3301      	adds	r3, #1
 81166e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81166e8:	4a4b      	ldr	r2, [pc, #300]	@ (8116818 <xTaskIncrementTick+0x14c>)
 81166ea:	693b      	ldr	r3, [r7, #16]
 81166ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81166ee:	693b      	ldr	r3, [r7, #16]
 81166f0:	2b00      	cmp	r3, #0
 81166f2:	d121      	bne.n	8116738 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 81166f4:	4b49      	ldr	r3, [pc, #292]	@ (811681c <xTaskIncrementTick+0x150>)
 81166f6:	681b      	ldr	r3, [r3, #0]
 81166f8:	681b      	ldr	r3, [r3, #0]
 81166fa:	2b00      	cmp	r3, #0
 81166fc:	d00b      	beq.n	8116716 <xTaskIncrementTick+0x4a>
	__asm volatile
 81166fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116702:	f383 8811 	msr	BASEPRI, r3
 8116706:	f3bf 8f6f 	isb	sy
 811670a:	f3bf 8f4f 	dsb	sy
 811670e:	603b      	str	r3, [r7, #0]
}
 8116710:	bf00      	nop
 8116712:	bf00      	nop
 8116714:	e7fd      	b.n	8116712 <xTaskIncrementTick+0x46>
 8116716:	4b41      	ldr	r3, [pc, #260]	@ (811681c <xTaskIncrementTick+0x150>)
 8116718:	681b      	ldr	r3, [r3, #0]
 811671a:	60fb      	str	r3, [r7, #12]
 811671c:	4b40      	ldr	r3, [pc, #256]	@ (8116820 <xTaskIncrementTick+0x154>)
 811671e:	681b      	ldr	r3, [r3, #0]
 8116720:	4a3e      	ldr	r2, [pc, #248]	@ (811681c <xTaskIncrementTick+0x150>)
 8116722:	6013      	str	r3, [r2, #0]
 8116724:	4a3e      	ldr	r2, [pc, #248]	@ (8116820 <xTaskIncrementTick+0x154>)
 8116726:	68fb      	ldr	r3, [r7, #12]
 8116728:	6013      	str	r3, [r2, #0]
 811672a:	4b3e      	ldr	r3, [pc, #248]	@ (8116824 <xTaskIncrementTick+0x158>)
 811672c:	681b      	ldr	r3, [r3, #0]
 811672e:	3301      	adds	r3, #1
 8116730:	4a3c      	ldr	r2, [pc, #240]	@ (8116824 <xTaskIncrementTick+0x158>)
 8116732:	6013      	str	r3, [r2, #0]
 8116734:	f000 fb0a 	bl	8116d4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8116738:	4b3b      	ldr	r3, [pc, #236]	@ (8116828 <xTaskIncrementTick+0x15c>)
 811673a:	681b      	ldr	r3, [r3, #0]
 811673c:	693a      	ldr	r2, [r7, #16]
 811673e:	429a      	cmp	r2, r3
 8116740:	d349      	bcc.n	81167d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8116742:	4b36      	ldr	r3, [pc, #216]	@ (811681c <xTaskIncrementTick+0x150>)
 8116744:	681b      	ldr	r3, [r3, #0]
 8116746:	681b      	ldr	r3, [r3, #0]
 8116748:	2b00      	cmp	r3, #0
 811674a:	d104      	bne.n	8116756 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 811674c:	4b36      	ldr	r3, [pc, #216]	@ (8116828 <xTaskIncrementTick+0x15c>)
 811674e:	f04f 32ff 	mov.w	r2, #4294967295
 8116752:	601a      	str	r2, [r3, #0]
					break;
 8116754:	e03f      	b.n	81167d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116756:	4b31      	ldr	r3, [pc, #196]	@ (811681c <xTaskIncrementTick+0x150>)
 8116758:	681b      	ldr	r3, [r3, #0]
 811675a:	68db      	ldr	r3, [r3, #12]
 811675c:	68db      	ldr	r3, [r3, #12]
 811675e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8116760:	68bb      	ldr	r3, [r7, #8]
 8116762:	685b      	ldr	r3, [r3, #4]
 8116764:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8116766:	693a      	ldr	r2, [r7, #16]
 8116768:	687b      	ldr	r3, [r7, #4]
 811676a:	429a      	cmp	r2, r3
 811676c:	d203      	bcs.n	8116776 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 811676e:	4a2e      	ldr	r2, [pc, #184]	@ (8116828 <xTaskIncrementTick+0x15c>)
 8116770:	687b      	ldr	r3, [r7, #4]
 8116772:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8116774:	e02f      	b.n	81167d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8116776:	68bb      	ldr	r3, [r7, #8]
 8116778:	3304      	adds	r3, #4
 811677a:	4618      	mov	r0, r3
 811677c:	f7fd fcec 	bl	8114158 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8116780:	68bb      	ldr	r3, [r7, #8]
 8116782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8116784:	2b00      	cmp	r3, #0
 8116786:	d004      	beq.n	8116792 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8116788:	68bb      	ldr	r3, [r7, #8]
 811678a:	3318      	adds	r3, #24
 811678c:	4618      	mov	r0, r3
 811678e:	f7fd fce3 	bl	8114158 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8116792:	68bb      	ldr	r3, [r7, #8]
 8116794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116796:	4b25      	ldr	r3, [pc, #148]	@ (811682c <xTaskIncrementTick+0x160>)
 8116798:	681b      	ldr	r3, [r3, #0]
 811679a:	429a      	cmp	r2, r3
 811679c:	d903      	bls.n	81167a6 <xTaskIncrementTick+0xda>
 811679e:	68bb      	ldr	r3, [r7, #8]
 81167a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81167a2:	4a22      	ldr	r2, [pc, #136]	@ (811682c <xTaskIncrementTick+0x160>)
 81167a4:	6013      	str	r3, [r2, #0]
 81167a6:	68bb      	ldr	r3, [r7, #8]
 81167a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81167aa:	4613      	mov	r3, r2
 81167ac:	009b      	lsls	r3, r3, #2
 81167ae:	4413      	add	r3, r2
 81167b0:	009b      	lsls	r3, r3, #2
 81167b2:	4a1f      	ldr	r2, [pc, #124]	@ (8116830 <xTaskIncrementTick+0x164>)
 81167b4:	441a      	add	r2, r3
 81167b6:	68bb      	ldr	r3, [r7, #8]
 81167b8:	3304      	adds	r3, #4
 81167ba:	4619      	mov	r1, r3
 81167bc:	4610      	mov	r0, r2
 81167be:	f7fd fc6e 	bl	811409e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81167c2:	68bb      	ldr	r3, [r7, #8]
 81167c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81167c6:	4b1b      	ldr	r3, [pc, #108]	@ (8116834 <xTaskIncrementTick+0x168>)
 81167c8:	681b      	ldr	r3, [r3, #0]
 81167ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81167cc:	429a      	cmp	r2, r3
 81167ce:	d3b8      	bcc.n	8116742 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81167d0:	2301      	movs	r3, #1
 81167d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81167d4:	e7b5      	b.n	8116742 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81167d6:	4b17      	ldr	r3, [pc, #92]	@ (8116834 <xTaskIncrementTick+0x168>)
 81167d8:	681b      	ldr	r3, [r3, #0]
 81167da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81167dc:	4914      	ldr	r1, [pc, #80]	@ (8116830 <xTaskIncrementTick+0x164>)
 81167de:	4613      	mov	r3, r2
 81167e0:	009b      	lsls	r3, r3, #2
 81167e2:	4413      	add	r3, r2
 81167e4:	009b      	lsls	r3, r3, #2
 81167e6:	440b      	add	r3, r1
 81167e8:	681b      	ldr	r3, [r3, #0]
 81167ea:	2b01      	cmp	r3, #1
 81167ec:	d901      	bls.n	81167f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 81167ee:	2301      	movs	r3, #1
 81167f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81167f2:	4b11      	ldr	r3, [pc, #68]	@ (8116838 <xTaskIncrementTick+0x16c>)
 81167f4:	681b      	ldr	r3, [r3, #0]
 81167f6:	2b00      	cmp	r3, #0
 81167f8:	d007      	beq.n	811680a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81167fa:	2301      	movs	r3, #1
 81167fc:	617b      	str	r3, [r7, #20]
 81167fe:	e004      	b.n	811680a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8116800:	4b0e      	ldr	r3, [pc, #56]	@ (811683c <xTaskIncrementTick+0x170>)
 8116802:	681b      	ldr	r3, [r3, #0]
 8116804:	3301      	adds	r3, #1
 8116806:	4a0d      	ldr	r2, [pc, #52]	@ (811683c <xTaskIncrementTick+0x170>)
 8116808:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 811680a:	697b      	ldr	r3, [r7, #20]
}
 811680c:	4618      	mov	r0, r3
 811680e:	3718      	adds	r7, #24
 8116810:	46bd      	mov	sp, r7
 8116812:	bd80      	pop	{r7, pc}
 8116814:	1000b0dc 	.word	0x1000b0dc
 8116818:	1000b0b8 	.word	0x1000b0b8
 811681c:	1000b06c 	.word	0x1000b06c
 8116820:	1000b070 	.word	0x1000b070
 8116824:	1000b0cc 	.word	0x1000b0cc
 8116828:	1000b0d4 	.word	0x1000b0d4
 811682c:	1000b0bc 	.word	0x1000b0bc
 8116830:	1000abe4 	.word	0x1000abe4
 8116834:	1000abe0 	.word	0x1000abe0
 8116838:	1000b0c8 	.word	0x1000b0c8
 811683c:	1000b0c4 	.word	0x1000b0c4

08116840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8116840:	b480      	push	{r7}
 8116842:	b085      	sub	sp, #20
 8116844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8116846:	4b2b      	ldr	r3, [pc, #172]	@ (81168f4 <vTaskSwitchContext+0xb4>)
 8116848:	681b      	ldr	r3, [r3, #0]
 811684a:	2b00      	cmp	r3, #0
 811684c:	d003      	beq.n	8116856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 811684e:	4b2a      	ldr	r3, [pc, #168]	@ (81168f8 <vTaskSwitchContext+0xb8>)
 8116850:	2201      	movs	r2, #1
 8116852:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8116854:	e047      	b.n	81168e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8116856:	4b28      	ldr	r3, [pc, #160]	@ (81168f8 <vTaskSwitchContext+0xb8>)
 8116858:	2200      	movs	r2, #0
 811685a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 811685c:	4b27      	ldr	r3, [pc, #156]	@ (81168fc <vTaskSwitchContext+0xbc>)
 811685e:	681b      	ldr	r3, [r3, #0]
 8116860:	60fb      	str	r3, [r7, #12]
 8116862:	e011      	b.n	8116888 <vTaskSwitchContext+0x48>
 8116864:	68fb      	ldr	r3, [r7, #12]
 8116866:	2b00      	cmp	r3, #0
 8116868:	d10b      	bne.n	8116882 <vTaskSwitchContext+0x42>
	__asm volatile
 811686a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811686e:	f383 8811 	msr	BASEPRI, r3
 8116872:	f3bf 8f6f 	isb	sy
 8116876:	f3bf 8f4f 	dsb	sy
 811687a:	607b      	str	r3, [r7, #4]
}
 811687c:	bf00      	nop
 811687e:	bf00      	nop
 8116880:	e7fd      	b.n	811687e <vTaskSwitchContext+0x3e>
 8116882:	68fb      	ldr	r3, [r7, #12]
 8116884:	3b01      	subs	r3, #1
 8116886:	60fb      	str	r3, [r7, #12]
 8116888:	491d      	ldr	r1, [pc, #116]	@ (8116900 <vTaskSwitchContext+0xc0>)
 811688a:	68fa      	ldr	r2, [r7, #12]
 811688c:	4613      	mov	r3, r2
 811688e:	009b      	lsls	r3, r3, #2
 8116890:	4413      	add	r3, r2
 8116892:	009b      	lsls	r3, r3, #2
 8116894:	440b      	add	r3, r1
 8116896:	681b      	ldr	r3, [r3, #0]
 8116898:	2b00      	cmp	r3, #0
 811689a:	d0e3      	beq.n	8116864 <vTaskSwitchContext+0x24>
 811689c:	68fa      	ldr	r2, [r7, #12]
 811689e:	4613      	mov	r3, r2
 81168a0:	009b      	lsls	r3, r3, #2
 81168a2:	4413      	add	r3, r2
 81168a4:	009b      	lsls	r3, r3, #2
 81168a6:	4a16      	ldr	r2, [pc, #88]	@ (8116900 <vTaskSwitchContext+0xc0>)
 81168a8:	4413      	add	r3, r2
 81168aa:	60bb      	str	r3, [r7, #8]
 81168ac:	68bb      	ldr	r3, [r7, #8]
 81168ae:	685b      	ldr	r3, [r3, #4]
 81168b0:	685a      	ldr	r2, [r3, #4]
 81168b2:	68bb      	ldr	r3, [r7, #8]
 81168b4:	605a      	str	r2, [r3, #4]
 81168b6:	68bb      	ldr	r3, [r7, #8]
 81168b8:	685a      	ldr	r2, [r3, #4]
 81168ba:	68bb      	ldr	r3, [r7, #8]
 81168bc:	3308      	adds	r3, #8
 81168be:	429a      	cmp	r2, r3
 81168c0:	d104      	bne.n	81168cc <vTaskSwitchContext+0x8c>
 81168c2:	68bb      	ldr	r3, [r7, #8]
 81168c4:	685b      	ldr	r3, [r3, #4]
 81168c6:	685a      	ldr	r2, [r3, #4]
 81168c8:	68bb      	ldr	r3, [r7, #8]
 81168ca:	605a      	str	r2, [r3, #4]
 81168cc:	68bb      	ldr	r3, [r7, #8]
 81168ce:	685b      	ldr	r3, [r3, #4]
 81168d0:	68db      	ldr	r3, [r3, #12]
 81168d2:	4a0c      	ldr	r2, [pc, #48]	@ (8116904 <vTaskSwitchContext+0xc4>)
 81168d4:	6013      	str	r3, [r2, #0]
 81168d6:	4a09      	ldr	r2, [pc, #36]	@ (81168fc <vTaskSwitchContext+0xbc>)
 81168d8:	68fb      	ldr	r3, [r7, #12]
 81168da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81168dc:	4b09      	ldr	r3, [pc, #36]	@ (8116904 <vTaskSwitchContext+0xc4>)
 81168de:	681b      	ldr	r3, [r3, #0]
 81168e0:	3354      	adds	r3, #84	@ 0x54
 81168e2:	4a09      	ldr	r2, [pc, #36]	@ (8116908 <vTaskSwitchContext+0xc8>)
 81168e4:	6013      	str	r3, [r2, #0]
}
 81168e6:	bf00      	nop
 81168e8:	3714      	adds	r7, #20
 81168ea:	46bd      	mov	sp, r7
 81168ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81168f0:	4770      	bx	lr
 81168f2:	bf00      	nop
 81168f4:	1000b0dc 	.word	0x1000b0dc
 81168f8:	1000b0c8 	.word	0x1000b0c8
 81168fc:	1000b0bc 	.word	0x1000b0bc
 8116900:	1000abe4 	.word	0x1000abe4
 8116904:	1000abe0 	.word	0x1000abe0
 8116908:	10000040 	.word	0x10000040

0811690c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 811690c:	b580      	push	{r7, lr}
 811690e:	b084      	sub	sp, #16
 8116910:	af00      	add	r7, sp, #0
 8116912:	6078      	str	r0, [r7, #4]
 8116914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8116916:	687b      	ldr	r3, [r7, #4]
 8116918:	2b00      	cmp	r3, #0
 811691a:	d10b      	bne.n	8116934 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 811691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116920:	f383 8811 	msr	BASEPRI, r3
 8116924:	f3bf 8f6f 	isb	sy
 8116928:	f3bf 8f4f 	dsb	sy
 811692c:	60fb      	str	r3, [r7, #12]
}
 811692e:	bf00      	nop
 8116930:	bf00      	nop
 8116932:	e7fd      	b.n	8116930 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8116934:	4b07      	ldr	r3, [pc, #28]	@ (8116954 <vTaskPlaceOnEventList+0x48>)
 8116936:	681b      	ldr	r3, [r3, #0]
 8116938:	3318      	adds	r3, #24
 811693a:	4619      	mov	r1, r3
 811693c:	6878      	ldr	r0, [r7, #4]
 811693e:	f7fd fbd2 	bl	81140e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8116942:	2101      	movs	r1, #1
 8116944:	6838      	ldr	r0, [r7, #0]
 8116946:	f000 fd2b 	bl	81173a0 <prvAddCurrentTaskToDelayedList>
}
 811694a:	bf00      	nop
 811694c:	3710      	adds	r7, #16
 811694e:	46bd      	mov	sp, r7
 8116950:	bd80      	pop	{r7, pc}
 8116952:	bf00      	nop
 8116954:	1000abe0 	.word	0x1000abe0

08116958 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8116958:	b580      	push	{r7, lr}
 811695a:	b086      	sub	sp, #24
 811695c:	af00      	add	r7, sp, #0
 811695e:	60f8      	str	r0, [r7, #12]
 8116960:	60b9      	str	r1, [r7, #8]
 8116962:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8116964:	68fb      	ldr	r3, [r7, #12]
 8116966:	2b00      	cmp	r3, #0
 8116968:	d10b      	bne.n	8116982 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 811696a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811696e:	f383 8811 	msr	BASEPRI, r3
 8116972:	f3bf 8f6f 	isb	sy
 8116976:	f3bf 8f4f 	dsb	sy
 811697a:	617b      	str	r3, [r7, #20]
}
 811697c:	bf00      	nop
 811697e:	bf00      	nop
 8116980:	e7fd      	b.n	811697e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8116982:	4b0a      	ldr	r3, [pc, #40]	@ (81169ac <vTaskPlaceOnEventListRestricted+0x54>)
 8116984:	681b      	ldr	r3, [r3, #0]
 8116986:	3318      	adds	r3, #24
 8116988:	4619      	mov	r1, r3
 811698a:	68f8      	ldr	r0, [r7, #12]
 811698c:	f7fd fb87 	bl	811409e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8116990:	687b      	ldr	r3, [r7, #4]
 8116992:	2b00      	cmp	r3, #0
 8116994:	d002      	beq.n	811699c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8116996:	f04f 33ff 	mov.w	r3, #4294967295
 811699a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 811699c:	6879      	ldr	r1, [r7, #4]
 811699e:	68b8      	ldr	r0, [r7, #8]
 81169a0:	f000 fcfe 	bl	81173a0 <prvAddCurrentTaskToDelayedList>
	}
 81169a4:	bf00      	nop
 81169a6:	3718      	adds	r7, #24
 81169a8:	46bd      	mov	sp, r7
 81169aa:	bd80      	pop	{r7, pc}
 81169ac:	1000abe0 	.word	0x1000abe0

081169b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 81169b0:	b580      	push	{r7, lr}
 81169b2:	b086      	sub	sp, #24
 81169b4:	af00      	add	r7, sp, #0
 81169b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81169b8:	687b      	ldr	r3, [r7, #4]
 81169ba:	68db      	ldr	r3, [r3, #12]
 81169bc:	68db      	ldr	r3, [r3, #12]
 81169be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 81169c0:	693b      	ldr	r3, [r7, #16]
 81169c2:	2b00      	cmp	r3, #0
 81169c4:	d10b      	bne.n	81169de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 81169c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81169ca:	f383 8811 	msr	BASEPRI, r3
 81169ce:	f3bf 8f6f 	isb	sy
 81169d2:	f3bf 8f4f 	dsb	sy
 81169d6:	60fb      	str	r3, [r7, #12]
}
 81169d8:	bf00      	nop
 81169da:	bf00      	nop
 81169dc:	e7fd      	b.n	81169da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 81169de:	693b      	ldr	r3, [r7, #16]
 81169e0:	3318      	adds	r3, #24
 81169e2:	4618      	mov	r0, r3
 81169e4:	f7fd fbb8 	bl	8114158 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81169e8:	4b1d      	ldr	r3, [pc, #116]	@ (8116a60 <xTaskRemoveFromEventList+0xb0>)
 81169ea:	681b      	ldr	r3, [r3, #0]
 81169ec:	2b00      	cmp	r3, #0
 81169ee:	d11d      	bne.n	8116a2c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81169f0:	693b      	ldr	r3, [r7, #16]
 81169f2:	3304      	adds	r3, #4
 81169f4:	4618      	mov	r0, r3
 81169f6:	f7fd fbaf 	bl	8114158 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81169fa:	693b      	ldr	r3, [r7, #16]
 81169fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81169fe:	4b19      	ldr	r3, [pc, #100]	@ (8116a64 <xTaskRemoveFromEventList+0xb4>)
 8116a00:	681b      	ldr	r3, [r3, #0]
 8116a02:	429a      	cmp	r2, r3
 8116a04:	d903      	bls.n	8116a0e <xTaskRemoveFromEventList+0x5e>
 8116a06:	693b      	ldr	r3, [r7, #16]
 8116a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116a0a:	4a16      	ldr	r2, [pc, #88]	@ (8116a64 <xTaskRemoveFromEventList+0xb4>)
 8116a0c:	6013      	str	r3, [r2, #0]
 8116a0e:	693b      	ldr	r3, [r7, #16]
 8116a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116a12:	4613      	mov	r3, r2
 8116a14:	009b      	lsls	r3, r3, #2
 8116a16:	4413      	add	r3, r2
 8116a18:	009b      	lsls	r3, r3, #2
 8116a1a:	4a13      	ldr	r2, [pc, #76]	@ (8116a68 <xTaskRemoveFromEventList+0xb8>)
 8116a1c:	441a      	add	r2, r3
 8116a1e:	693b      	ldr	r3, [r7, #16]
 8116a20:	3304      	adds	r3, #4
 8116a22:	4619      	mov	r1, r3
 8116a24:	4610      	mov	r0, r2
 8116a26:	f7fd fb3a 	bl	811409e <vListInsertEnd>
 8116a2a:	e005      	b.n	8116a38 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8116a2c:	693b      	ldr	r3, [r7, #16]
 8116a2e:	3318      	adds	r3, #24
 8116a30:	4619      	mov	r1, r3
 8116a32:	480e      	ldr	r0, [pc, #56]	@ (8116a6c <xTaskRemoveFromEventList+0xbc>)
 8116a34:	f7fd fb33 	bl	811409e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8116a38:	693b      	ldr	r3, [r7, #16]
 8116a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8116a70 <xTaskRemoveFromEventList+0xc0>)
 8116a3e:	681b      	ldr	r3, [r3, #0]
 8116a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116a42:	429a      	cmp	r2, r3
 8116a44:	d905      	bls.n	8116a52 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8116a46:	2301      	movs	r3, #1
 8116a48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8116a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8116a74 <xTaskRemoveFromEventList+0xc4>)
 8116a4c:	2201      	movs	r2, #1
 8116a4e:	601a      	str	r2, [r3, #0]
 8116a50:	e001      	b.n	8116a56 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8116a52:	2300      	movs	r3, #0
 8116a54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8116a56:	697b      	ldr	r3, [r7, #20]
}
 8116a58:	4618      	mov	r0, r3
 8116a5a:	3718      	adds	r7, #24
 8116a5c:	46bd      	mov	sp, r7
 8116a5e:	bd80      	pop	{r7, pc}
 8116a60:	1000b0dc 	.word	0x1000b0dc
 8116a64:	1000b0bc 	.word	0x1000b0bc
 8116a68:	1000abe4 	.word	0x1000abe4
 8116a6c:	1000b074 	.word	0x1000b074
 8116a70:	1000abe0 	.word	0x1000abe0
 8116a74:	1000b0c8 	.word	0x1000b0c8

08116a78 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8116a78:	b580      	push	{r7, lr}
 8116a7a:	b084      	sub	sp, #16
 8116a7c:	af00      	add	r7, sp, #0
 8116a7e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8116a80:	687b      	ldr	r3, [r7, #4]
 8116a82:	2b00      	cmp	r3, #0
 8116a84:	d10b      	bne.n	8116a9e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8116a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116a8a:	f383 8811 	msr	BASEPRI, r3
 8116a8e:	f3bf 8f6f 	isb	sy
 8116a92:	f3bf 8f4f 	dsb	sy
 8116a96:	60fb      	str	r3, [r7, #12]
}
 8116a98:	bf00      	nop
 8116a9a:	bf00      	nop
 8116a9c:	e7fd      	b.n	8116a9a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8116a9e:	f7fd fcb3 	bl	8114408 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8116aa2:	4b07      	ldr	r3, [pc, #28]	@ (8116ac0 <vTaskSetTimeOutState+0x48>)
 8116aa4:	681a      	ldr	r2, [r3, #0]
 8116aa6:	687b      	ldr	r3, [r7, #4]
 8116aa8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8116aaa:	4b06      	ldr	r3, [pc, #24]	@ (8116ac4 <vTaskSetTimeOutState+0x4c>)
 8116aac:	681a      	ldr	r2, [r3, #0]
 8116aae:	687b      	ldr	r3, [r7, #4]
 8116ab0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8116ab2:	f7fd fcdb 	bl	811446c <vPortExitCritical>
}
 8116ab6:	bf00      	nop
 8116ab8:	3710      	adds	r7, #16
 8116aba:	46bd      	mov	sp, r7
 8116abc:	bd80      	pop	{r7, pc}
 8116abe:	bf00      	nop
 8116ac0:	1000b0cc 	.word	0x1000b0cc
 8116ac4:	1000b0b8 	.word	0x1000b0b8

08116ac8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8116ac8:	b480      	push	{r7}
 8116aca:	b083      	sub	sp, #12
 8116acc:	af00      	add	r7, sp, #0
 8116ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8116ad0:	4b06      	ldr	r3, [pc, #24]	@ (8116aec <vTaskInternalSetTimeOutState+0x24>)
 8116ad2:	681a      	ldr	r2, [r3, #0]
 8116ad4:	687b      	ldr	r3, [r7, #4]
 8116ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8116ad8:	4b05      	ldr	r3, [pc, #20]	@ (8116af0 <vTaskInternalSetTimeOutState+0x28>)
 8116ada:	681a      	ldr	r2, [r3, #0]
 8116adc:	687b      	ldr	r3, [r7, #4]
 8116ade:	605a      	str	r2, [r3, #4]
}
 8116ae0:	bf00      	nop
 8116ae2:	370c      	adds	r7, #12
 8116ae4:	46bd      	mov	sp, r7
 8116ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116aea:	4770      	bx	lr
 8116aec:	1000b0cc 	.word	0x1000b0cc
 8116af0:	1000b0b8 	.word	0x1000b0b8

08116af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8116af4:	b580      	push	{r7, lr}
 8116af6:	b088      	sub	sp, #32
 8116af8:	af00      	add	r7, sp, #0
 8116afa:	6078      	str	r0, [r7, #4]
 8116afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8116afe:	687b      	ldr	r3, [r7, #4]
 8116b00:	2b00      	cmp	r3, #0
 8116b02:	d10b      	bne.n	8116b1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8116b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116b08:	f383 8811 	msr	BASEPRI, r3
 8116b0c:	f3bf 8f6f 	isb	sy
 8116b10:	f3bf 8f4f 	dsb	sy
 8116b14:	613b      	str	r3, [r7, #16]
}
 8116b16:	bf00      	nop
 8116b18:	bf00      	nop
 8116b1a:	e7fd      	b.n	8116b18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8116b1c:	683b      	ldr	r3, [r7, #0]
 8116b1e:	2b00      	cmp	r3, #0
 8116b20:	d10b      	bne.n	8116b3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8116b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116b26:	f383 8811 	msr	BASEPRI, r3
 8116b2a:	f3bf 8f6f 	isb	sy
 8116b2e:	f3bf 8f4f 	dsb	sy
 8116b32:	60fb      	str	r3, [r7, #12]
}
 8116b34:	bf00      	nop
 8116b36:	bf00      	nop
 8116b38:	e7fd      	b.n	8116b36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8116b3a:	f7fd fc65 	bl	8114408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8116b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8116bb4 <xTaskCheckForTimeOut+0xc0>)
 8116b40:	681b      	ldr	r3, [r3, #0]
 8116b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8116b44:	687b      	ldr	r3, [r7, #4]
 8116b46:	685b      	ldr	r3, [r3, #4]
 8116b48:	69ba      	ldr	r2, [r7, #24]
 8116b4a:	1ad3      	subs	r3, r2, r3
 8116b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8116b4e:	683b      	ldr	r3, [r7, #0]
 8116b50:	681b      	ldr	r3, [r3, #0]
 8116b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116b56:	d102      	bne.n	8116b5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8116b58:	2300      	movs	r3, #0
 8116b5a:	61fb      	str	r3, [r7, #28]
 8116b5c:	e023      	b.n	8116ba6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8116b5e:	687b      	ldr	r3, [r7, #4]
 8116b60:	681a      	ldr	r2, [r3, #0]
 8116b62:	4b15      	ldr	r3, [pc, #84]	@ (8116bb8 <xTaskCheckForTimeOut+0xc4>)
 8116b64:	681b      	ldr	r3, [r3, #0]
 8116b66:	429a      	cmp	r2, r3
 8116b68:	d007      	beq.n	8116b7a <xTaskCheckForTimeOut+0x86>
 8116b6a:	687b      	ldr	r3, [r7, #4]
 8116b6c:	685b      	ldr	r3, [r3, #4]
 8116b6e:	69ba      	ldr	r2, [r7, #24]
 8116b70:	429a      	cmp	r2, r3
 8116b72:	d302      	bcc.n	8116b7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8116b74:	2301      	movs	r3, #1
 8116b76:	61fb      	str	r3, [r7, #28]
 8116b78:	e015      	b.n	8116ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8116b7a:	683b      	ldr	r3, [r7, #0]
 8116b7c:	681b      	ldr	r3, [r3, #0]
 8116b7e:	697a      	ldr	r2, [r7, #20]
 8116b80:	429a      	cmp	r2, r3
 8116b82:	d20b      	bcs.n	8116b9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8116b84:	683b      	ldr	r3, [r7, #0]
 8116b86:	681a      	ldr	r2, [r3, #0]
 8116b88:	697b      	ldr	r3, [r7, #20]
 8116b8a:	1ad2      	subs	r2, r2, r3
 8116b8c:	683b      	ldr	r3, [r7, #0]
 8116b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8116b90:	6878      	ldr	r0, [r7, #4]
 8116b92:	f7ff ff99 	bl	8116ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8116b96:	2300      	movs	r3, #0
 8116b98:	61fb      	str	r3, [r7, #28]
 8116b9a:	e004      	b.n	8116ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8116b9c:	683b      	ldr	r3, [r7, #0]
 8116b9e:	2200      	movs	r2, #0
 8116ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8116ba2:	2301      	movs	r3, #1
 8116ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8116ba6:	f7fd fc61 	bl	811446c <vPortExitCritical>

	return xReturn;
 8116baa:	69fb      	ldr	r3, [r7, #28]
}
 8116bac:	4618      	mov	r0, r3
 8116bae:	3720      	adds	r7, #32
 8116bb0:	46bd      	mov	sp, r7
 8116bb2:	bd80      	pop	{r7, pc}
 8116bb4:	1000b0b8 	.word	0x1000b0b8
 8116bb8:	1000b0cc 	.word	0x1000b0cc

08116bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8116bbc:	b480      	push	{r7}
 8116bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8116bc0:	4b03      	ldr	r3, [pc, #12]	@ (8116bd0 <vTaskMissedYield+0x14>)
 8116bc2:	2201      	movs	r2, #1
 8116bc4:	601a      	str	r2, [r3, #0]
}
 8116bc6:	bf00      	nop
 8116bc8:	46bd      	mov	sp, r7
 8116bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116bce:	4770      	bx	lr
 8116bd0:	1000b0c8 	.word	0x1000b0c8

08116bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8116bd4:	b580      	push	{r7, lr}
 8116bd6:	b082      	sub	sp, #8
 8116bd8:	af00      	add	r7, sp, #0
 8116bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8116bdc:	f000 f852 	bl	8116c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8116be0:	4b06      	ldr	r3, [pc, #24]	@ (8116bfc <prvIdleTask+0x28>)
 8116be2:	681b      	ldr	r3, [r3, #0]
 8116be4:	2b01      	cmp	r3, #1
 8116be6:	d9f9      	bls.n	8116bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8116be8:	4b05      	ldr	r3, [pc, #20]	@ (8116c00 <prvIdleTask+0x2c>)
 8116bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8116bee:	601a      	str	r2, [r3, #0]
 8116bf0:	f3bf 8f4f 	dsb	sy
 8116bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8116bf8:	e7f0      	b.n	8116bdc <prvIdleTask+0x8>
 8116bfa:	bf00      	nop
 8116bfc:	1000abe4 	.word	0x1000abe4
 8116c00:	e000ed04 	.word	0xe000ed04

08116c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8116c04:	b580      	push	{r7, lr}
 8116c06:	b082      	sub	sp, #8
 8116c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8116c0a:	2300      	movs	r3, #0
 8116c0c:	607b      	str	r3, [r7, #4]
 8116c0e:	e00c      	b.n	8116c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8116c10:	687a      	ldr	r2, [r7, #4]
 8116c12:	4613      	mov	r3, r2
 8116c14:	009b      	lsls	r3, r3, #2
 8116c16:	4413      	add	r3, r2
 8116c18:	009b      	lsls	r3, r3, #2
 8116c1a:	4a12      	ldr	r2, [pc, #72]	@ (8116c64 <prvInitialiseTaskLists+0x60>)
 8116c1c:	4413      	add	r3, r2
 8116c1e:	4618      	mov	r0, r3
 8116c20:	f7fd fa10 	bl	8114044 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8116c24:	687b      	ldr	r3, [r7, #4]
 8116c26:	3301      	adds	r3, #1
 8116c28:	607b      	str	r3, [r7, #4]
 8116c2a:	687b      	ldr	r3, [r7, #4]
 8116c2c:	2b37      	cmp	r3, #55	@ 0x37
 8116c2e:	d9ef      	bls.n	8116c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8116c30:	480d      	ldr	r0, [pc, #52]	@ (8116c68 <prvInitialiseTaskLists+0x64>)
 8116c32:	f7fd fa07 	bl	8114044 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8116c36:	480d      	ldr	r0, [pc, #52]	@ (8116c6c <prvInitialiseTaskLists+0x68>)
 8116c38:	f7fd fa04 	bl	8114044 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8116c3c:	480c      	ldr	r0, [pc, #48]	@ (8116c70 <prvInitialiseTaskLists+0x6c>)
 8116c3e:	f7fd fa01 	bl	8114044 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8116c42:	480c      	ldr	r0, [pc, #48]	@ (8116c74 <prvInitialiseTaskLists+0x70>)
 8116c44:	f7fd f9fe 	bl	8114044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8116c48:	480b      	ldr	r0, [pc, #44]	@ (8116c78 <prvInitialiseTaskLists+0x74>)
 8116c4a:	f7fd f9fb 	bl	8114044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8116c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8116c7c <prvInitialiseTaskLists+0x78>)
 8116c50:	4a05      	ldr	r2, [pc, #20]	@ (8116c68 <prvInitialiseTaskLists+0x64>)
 8116c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8116c54:	4b0a      	ldr	r3, [pc, #40]	@ (8116c80 <prvInitialiseTaskLists+0x7c>)
 8116c56:	4a05      	ldr	r2, [pc, #20]	@ (8116c6c <prvInitialiseTaskLists+0x68>)
 8116c58:	601a      	str	r2, [r3, #0]
}
 8116c5a:	bf00      	nop
 8116c5c:	3708      	adds	r7, #8
 8116c5e:	46bd      	mov	sp, r7
 8116c60:	bd80      	pop	{r7, pc}
 8116c62:	bf00      	nop
 8116c64:	1000abe4 	.word	0x1000abe4
 8116c68:	1000b044 	.word	0x1000b044
 8116c6c:	1000b058 	.word	0x1000b058
 8116c70:	1000b074 	.word	0x1000b074
 8116c74:	1000b088 	.word	0x1000b088
 8116c78:	1000b0a0 	.word	0x1000b0a0
 8116c7c:	1000b06c 	.word	0x1000b06c
 8116c80:	1000b070 	.word	0x1000b070

08116c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8116c84:	b580      	push	{r7, lr}
 8116c86:	b082      	sub	sp, #8
 8116c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8116c8a:	e019      	b.n	8116cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8116c8c:	f7fd fbbc 	bl	8114408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116c90:	4b10      	ldr	r3, [pc, #64]	@ (8116cd4 <prvCheckTasksWaitingTermination+0x50>)
 8116c92:	68db      	ldr	r3, [r3, #12]
 8116c94:	68db      	ldr	r3, [r3, #12]
 8116c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8116c98:	687b      	ldr	r3, [r7, #4]
 8116c9a:	3304      	adds	r3, #4
 8116c9c:	4618      	mov	r0, r3
 8116c9e:	f7fd fa5b 	bl	8114158 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8116ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8116cd8 <prvCheckTasksWaitingTermination+0x54>)
 8116ca4:	681b      	ldr	r3, [r3, #0]
 8116ca6:	3b01      	subs	r3, #1
 8116ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8116cd8 <prvCheckTasksWaitingTermination+0x54>)
 8116caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8116cac:	4b0b      	ldr	r3, [pc, #44]	@ (8116cdc <prvCheckTasksWaitingTermination+0x58>)
 8116cae:	681b      	ldr	r3, [r3, #0]
 8116cb0:	3b01      	subs	r3, #1
 8116cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8116cdc <prvCheckTasksWaitingTermination+0x58>)
 8116cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8116cb6:	f7fd fbd9 	bl	811446c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8116cba:	6878      	ldr	r0, [r7, #4]
 8116cbc:	f000 f810 	bl	8116ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8116cc0:	4b06      	ldr	r3, [pc, #24]	@ (8116cdc <prvCheckTasksWaitingTermination+0x58>)
 8116cc2:	681b      	ldr	r3, [r3, #0]
 8116cc4:	2b00      	cmp	r3, #0
 8116cc6:	d1e1      	bne.n	8116c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8116cc8:	bf00      	nop
 8116cca:	bf00      	nop
 8116ccc:	3708      	adds	r7, #8
 8116cce:	46bd      	mov	sp, r7
 8116cd0:	bd80      	pop	{r7, pc}
 8116cd2:	bf00      	nop
 8116cd4:	1000b088 	.word	0x1000b088
 8116cd8:	1000b0b4 	.word	0x1000b0b4
 8116cdc:	1000b09c 	.word	0x1000b09c

08116ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8116ce0:	b580      	push	{r7, lr}
 8116ce2:	b084      	sub	sp, #16
 8116ce4:	af00      	add	r7, sp, #0
 8116ce6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8116ce8:	687b      	ldr	r3, [r7, #4]
 8116cea:	3354      	adds	r3, #84	@ 0x54
 8116cec:	4618      	mov	r0, r3
 8116cee:	f00d fe3b 	bl	8124968 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8116cf2:	687b      	ldr	r3, [r7, #4]
 8116cf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8116cf8:	2b00      	cmp	r3, #0
 8116cfa:	d108      	bne.n	8116d0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8116cfc:	687b      	ldr	r3, [r7, #4]
 8116cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8116d00:	4618      	mov	r0, r3
 8116d02:	f7fd f87f 	bl	8113e04 <vPortFree>
				vPortFree( pxTCB );
 8116d06:	6878      	ldr	r0, [r7, #4]
 8116d08:	f7fd f87c 	bl	8113e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8116d0c:	e019      	b.n	8116d42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8116d0e:	687b      	ldr	r3, [r7, #4]
 8116d10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8116d14:	2b01      	cmp	r3, #1
 8116d16:	d103      	bne.n	8116d20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8116d18:	6878      	ldr	r0, [r7, #4]
 8116d1a:	f7fd f873 	bl	8113e04 <vPortFree>
	}
 8116d1e:	e010      	b.n	8116d42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8116d20:	687b      	ldr	r3, [r7, #4]
 8116d22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8116d26:	2b02      	cmp	r3, #2
 8116d28:	d00b      	beq.n	8116d42 <prvDeleteTCB+0x62>
	__asm volatile
 8116d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116d2e:	f383 8811 	msr	BASEPRI, r3
 8116d32:	f3bf 8f6f 	isb	sy
 8116d36:	f3bf 8f4f 	dsb	sy
 8116d3a:	60fb      	str	r3, [r7, #12]
}
 8116d3c:	bf00      	nop
 8116d3e:	bf00      	nop
 8116d40:	e7fd      	b.n	8116d3e <prvDeleteTCB+0x5e>
	}
 8116d42:	bf00      	nop
 8116d44:	3710      	adds	r7, #16
 8116d46:	46bd      	mov	sp, r7
 8116d48:	bd80      	pop	{r7, pc}
	...

08116d4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8116d4c:	b480      	push	{r7}
 8116d4e:	b083      	sub	sp, #12
 8116d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8116d52:	4b0c      	ldr	r3, [pc, #48]	@ (8116d84 <prvResetNextTaskUnblockTime+0x38>)
 8116d54:	681b      	ldr	r3, [r3, #0]
 8116d56:	681b      	ldr	r3, [r3, #0]
 8116d58:	2b00      	cmp	r3, #0
 8116d5a:	d104      	bne.n	8116d66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8116d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8116d88 <prvResetNextTaskUnblockTime+0x3c>)
 8116d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8116d62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8116d64:	e008      	b.n	8116d78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116d66:	4b07      	ldr	r3, [pc, #28]	@ (8116d84 <prvResetNextTaskUnblockTime+0x38>)
 8116d68:	681b      	ldr	r3, [r3, #0]
 8116d6a:	68db      	ldr	r3, [r3, #12]
 8116d6c:	68db      	ldr	r3, [r3, #12]
 8116d6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8116d70:	687b      	ldr	r3, [r7, #4]
 8116d72:	685b      	ldr	r3, [r3, #4]
 8116d74:	4a04      	ldr	r2, [pc, #16]	@ (8116d88 <prvResetNextTaskUnblockTime+0x3c>)
 8116d76:	6013      	str	r3, [r2, #0]
}
 8116d78:	bf00      	nop
 8116d7a:	370c      	adds	r7, #12
 8116d7c:	46bd      	mov	sp, r7
 8116d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116d82:	4770      	bx	lr
 8116d84:	1000b06c 	.word	0x1000b06c
 8116d88:	1000b0d4 	.word	0x1000b0d4

08116d8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8116d8c:	b480      	push	{r7}
 8116d8e:	b083      	sub	sp, #12
 8116d90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8116d92:	4b05      	ldr	r3, [pc, #20]	@ (8116da8 <xTaskGetCurrentTaskHandle+0x1c>)
 8116d94:	681b      	ldr	r3, [r3, #0]
 8116d96:	607b      	str	r3, [r7, #4]

		return xReturn;
 8116d98:	687b      	ldr	r3, [r7, #4]
	}
 8116d9a:	4618      	mov	r0, r3
 8116d9c:	370c      	adds	r7, #12
 8116d9e:	46bd      	mov	sp, r7
 8116da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116da4:	4770      	bx	lr
 8116da6:	bf00      	nop
 8116da8:	1000abe0 	.word	0x1000abe0

08116dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8116dac:	b480      	push	{r7}
 8116dae:	b083      	sub	sp, #12
 8116db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8116db2:	4b0b      	ldr	r3, [pc, #44]	@ (8116de0 <xTaskGetSchedulerState+0x34>)
 8116db4:	681b      	ldr	r3, [r3, #0]
 8116db6:	2b00      	cmp	r3, #0
 8116db8:	d102      	bne.n	8116dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8116dba:	2301      	movs	r3, #1
 8116dbc:	607b      	str	r3, [r7, #4]
 8116dbe:	e008      	b.n	8116dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8116dc0:	4b08      	ldr	r3, [pc, #32]	@ (8116de4 <xTaskGetSchedulerState+0x38>)
 8116dc2:	681b      	ldr	r3, [r3, #0]
 8116dc4:	2b00      	cmp	r3, #0
 8116dc6:	d102      	bne.n	8116dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8116dc8:	2302      	movs	r3, #2
 8116dca:	607b      	str	r3, [r7, #4]
 8116dcc:	e001      	b.n	8116dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8116dce:	2300      	movs	r3, #0
 8116dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8116dd2:	687b      	ldr	r3, [r7, #4]
	}
 8116dd4:	4618      	mov	r0, r3
 8116dd6:	370c      	adds	r7, #12
 8116dd8:	46bd      	mov	sp, r7
 8116dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116dde:	4770      	bx	lr
 8116de0:	1000b0c0 	.word	0x1000b0c0
 8116de4:	1000b0dc 	.word	0x1000b0dc

08116de8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8116de8:	b580      	push	{r7, lr}
 8116dea:	b084      	sub	sp, #16
 8116dec:	af00      	add	r7, sp, #0
 8116dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8116df0:	687b      	ldr	r3, [r7, #4]
 8116df2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8116df4:	2300      	movs	r3, #0
 8116df6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8116df8:	687b      	ldr	r3, [r7, #4]
 8116dfa:	2b00      	cmp	r3, #0
 8116dfc:	d051      	beq.n	8116ea2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8116dfe:	68bb      	ldr	r3, [r7, #8]
 8116e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116e02:	4b2a      	ldr	r3, [pc, #168]	@ (8116eac <xTaskPriorityInherit+0xc4>)
 8116e04:	681b      	ldr	r3, [r3, #0]
 8116e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116e08:	429a      	cmp	r2, r3
 8116e0a:	d241      	bcs.n	8116e90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8116e0c:	68bb      	ldr	r3, [r7, #8]
 8116e0e:	699b      	ldr	r3, [r3, #24]
 8116e10:	2b00      	cmp	r3, #0
 8116e12:	db06      	blt.n	8116e22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116e14:	4b25      	ldr	r3, [pc, #148]	@ (8116eac <xTaskPriorityInherit+0xc4>)
 8116e16:	681b      	ldr	r3, [r3, #0]
 8116e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116e1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8116e1e:	68bb      	ldr	r3, [r7, #8]
 8116e20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8116e22:	68bb      	ldr	r3, [r7, #8]
 8116e24:	6959      	ldr	r1, [r3, #20]
 8116e26:	68bb      	ldr	r3, [r7, #8]
 8116e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116e2a:	4613      	mov	r3, r2
 8116e2c:	009b      	lsls	r3, r3, #2
 8116e2e:	4413      	add	r3, r2
 8116e30:	009b      	lsls	r3, r3, #2
 8116e32:	4a1f      	ldr	r2, [pc, #124]	@ (8116eb0 <xTaskPriorityInherit+0xc8>)
 8116e34:	4413      	add	r3, r2
 8116e36:	4299      	cmp	r1, r3
 8116e38:	d122      	bne.n	8116e80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8116e3a:	68bb      	ldr	r3, [r7, #8]
 8116e3c:	3304      	adds	r3, #4
 8116e3e:	4618      	mov	r0, r3
 8116e40:	f7fd f98a 	bl	8114158 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8116e44:	4b19      	ldr	r3, [pc, #100]	@ (8116eac <xTaskPriorityInherit+0xc4>)
 8116e46:	681b      	ldr	r3, [r3, #0]
 8116e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116e4a:	68bb      	ldr	r3, [r7, #8]
 8116e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8116e4e:	68bb      	ldr	r3, [r7, #8]
 8116e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116e52:	4b18      	ldr	r3, [pc, #96]	@ (8116eb4 <xTaskPriorityInherit+0xcc>)
 8116e54:	681b      	ldr	r3, [r3, #0]
 8116e56:	429a      	cmp	r2, r3
 8116e58:	d903      	bls.n	8116e62 <xTaskPriorityInherit+0x7a>
 8116e5a:	68bb      	ldr	r3, [r7, #8]
 8116e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116e5e:	4a15      	ldr	r2, [pc, #84]	@ (8116eb4 <xTaskPriorityInherit+0xcc>)
 8116e60:	6013      	str	r3, [r2, #0]
 8116e62:	68bb      	ldr	r3, [r7, #8]
 8116e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116e66:	4613      	mov	r3, r2
 8116e68:	009b      	lsls	r3, r3, #2
 8116e6a:	4413      	add	r3, r2
 8116e6c:	009b      	lsls	r3, r3, #2
 8116e6e:	4a10      	ldr	r2, [pc, #64]	@ (8116eb0 <xTaskPriorityInherit+0xc8>)
 8116e70:	441a      	add	r2, r3
 8116e72:	68bb      	ldr	r3, [r7, #8]
 8116e74:	3304      	adds	r3, #4
 8116e76:	4619      	mov	r1, r3
 8116e78:	4610      	mov	r0, r2
 8116e7a:	f7fd f910 	bl	811409e <vListInsertEnd>
 8116e7e:	e004      	b.n	8116e8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8116e80:	4b0a      	ldr	r3, [pc, #40]	@ (8116eac <xTaskPriorityInherit+0xc4>)
 8116e82:	681b      	ldr	r3, [r3, #0]
 8116e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116e86:	68bb      	ldr	r3, [r7, #8]
 8116e88:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8116e8a:	2301      	movs	r3, #1
 8116e8c:	60fb      	str	r3, [r7, #12]
 8116e8e:	e008      	b.n	8116ea2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8116e90:	68bb      	ldr	r3, [r7, #8]
 8116e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8116e94:	4b05      	ldr	r3, [pc, #20]	@ (8116eac <xTaskPriorityInherit+0xc4>)
 8116e96:	681b      	ldr	r3, [r3, #0]
 8116e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116e9a:	429a      	cmp	r2, r3
 8116e9c:	d201      	bcs.n	8116ea2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8116e9e:	2301      	movs	r3, #1
 8116ea0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8116ea2:	68fb      	ldr	r3, [r7, #12]
	}
 8116ea4:	4618      	mov	r0, r3
 8116ea6:	3710      	adds	r7, #16
 8116ea8:	46bd      	mov	sp, r7
 8116eaa:	bd80      	pop	{r7, pc}
 8116eac:	1000abe0 	.word	0x1000abe0
 8116eb0:	1000abe4 	.word	0x1000abe4
 8116eb4:	1000b0bc 	.word	0x1000b0bc

08116eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8116eb8:	b580      	push	{r7, lr}
 8116eba:	b086      	sub	sp, #24
 8116ebc:	af00      	add	r7, sp, #0
 8116ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8116ec0:	687b      	ldr	r3, [r7, #4]
 8116ec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8116ec4:	2300      	movs	r3, #0
 8116ec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8116ec8:	687b      	ldr	r3, [r7, #4]
 8116eca:	2b00      	cmp	r3, #0
 8116ecc:	d058      	beq.n	8116f80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8116ece:	4b2f      	ldr	r3, [pc, #188]	@ (8116f8c <xTaskPriorityDisinherit+0xd4>)
 8116ed0:	681b      	ldr	r3, [r3, #0]
 8116ed2:	693a      	ldr	r2, [r7, #16]
 8116ed4:	429a      	cmp	r2, r3
 8116ed6:	d00b      	beq.n	8116ef0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8116ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116edc:	f383 8811 	msr	BASEPRI, r3
 8116ee0:	f3bf 8f6f 	isb	sy
 8116ee4:	f3bf 8f4f 	dsb	sy
 8116ee8:	60fb      	str	r3, [r7, #12]
}
 8116eea:	bf00      	nop
 8116eec:	bf00      	nop
 8116eee:	e7fd      	b.n	8116eec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8116ef0:	693b      	ldr	r3, [r7, #16]
 8116ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8116ef4:	2b00      	cmp	r3, #0
 8116ef6:	d10b      	bne.n	8116f10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8116ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116efc:	f383 8811 	msr	BASEPRI, r3
 8116f00:	f3bf 8f6f 	isb	sy
 8116f04:	f3bf 8f4f 	dsb	sy
 8116f08:	60bb      	str	r3, [r7, #8]
}
 8116f0a:	bf00      	nop
 8116f0c:	bf00      	nop
 8116f0e:	e7fd      	b.n	8116f0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8116f10:	693b      	ldr	r3, [r7, #16]
 8116f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8116f14:	1e5a      	subs	r2, r3, #1
 8116f16:	693b      	ldr	r3, [r7, #16]
 8116f18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8116f1a:	693b      	ldr	r3, [r7, #16]
 8116f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116f1e:	693b      	ldr	r3, [r7, #16]
 8116f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8116f22:	429a      	cmp	r2, r3
 8116f24:	d02c      	beq.n	8116f80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8116f26:	693b      	ldr	r3, [r7, #16]
 8116f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8116f2a:	2b00      	cmp	r3, #0
 8116f2c:	d128      	bne.n	8116f80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8116f2e:	693b      	ldr	r3, [r7, #16]
 8116f30:	3304      	adds	r3, #4
 8116f32:	4618      	mov	r0, r3
 8116f34:	f7fd f910 	bl	8114158 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8116f38:	693b      	ldr	r3, [r7, #16]
 8116f3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8116f3c:	693b      	ldr	r3, [r7, #16]
 8116f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116f40:	693b      	ldr	r3, [r7, #16]
 8116f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116f44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8116f48:	693b      	ldr	r3, [r7, #16]
 8116f4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8116f4c:	693b      	ldr	r3, [r7, #16]
 8116f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116f50:	4b0f      	ldr	r3, [pc, #60]	@ (8116f90 <xTaskPriorityDisinherit+0xd8>)
 8116f52:	681b      	ldr	r3, [r3, #0]
 8116f54:	429a      	cmp	r2, r3
 8116f56:	d903      	bls.n	8116f60 <xTaskPriorityDisinherit+0xa8>
 8116f58:	693b      	ldr	r3, [r7, #16]
 8116f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8116f90 <xTaskPriorityDisinherit+0xd8>)
 8116f5e:	6013      	str	r3, [r2, #0]
 8116f60:	693b      	ldr	r3, [r7, #16]
 8116f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8116f64:	4613      	mov	r3, r2
 8116f66:	009b      	lsls	r3, r3, #2
 8116f68:	4413      	add	r3, r2
 8116f6a:	009b      	lsls	r3, r3, #2
 8116f6c:	4a09      	ldr	r2, [pc, #36]	@ (8116f94 <xTaskPriorityDisinherit+0xdc>)
 8116f6e:	441a      	add	r2, r3
 8116f70:	693b      	ldr	r3, [r7, #16]
 8116f72:	3304      	adds	r3, #4
 8116f74:	4619      	mov	r1, r3
 8116f76:	4610      	mov	r0, r2
 8116f78:	f7fd f891 	bl	811409e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8116f7c:	2301      	movs	r3, #1
 8116f7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8116f80:	697b      	ldr	r3, [r7, #20]
	}
 8116f82:	4618      	mov	r0, r3
 8116f84:	3718      	adds	r7, #24
 8116f86:	46bd      	mov	sp, r7
 8116f88:	bd80      	pop	{r7, pc}
 8116f8a:	bf00      	nop
 8116f8c:	1000abe0 	.word	0x1000abe0
 8116f90:	1000b0bc 	.word	0x1000b0bc
 8116f94:	1000abe4 	.word	0x1000abe4

08116f98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8116f98:	b580      	push	{r7, lr}
 8116f9a:	b088      	sub	sp, #32
 8116f9c:	af00      	add	r7, sp, #0
 8116f9e:	6078      	str	r0, [r7, #4]
 8116fa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8116fa2:	687b      	ldr	r3, [r7, #4]
 8116fa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8116fa6:	2301      	movs	r3, #1
 8116fa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8116faa:	687b      	ldr	r3, [r7, #4]
 8116fac:	2b00      	cmp	r3, #0
 8116fae:	d06c      	beq.n	811708a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8116fb0:	69bb      	ldr	r3, [r7, #24]
 8116fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8116fb4:	2b00      	cmp	r3, #0
 8116fb6:	d10b      	bne.n	8116fd0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8116fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8116fbc:	f383 8811 	msr	BASEPRI, r3
 8116fc0:	f3bf 8f6f 	isb	sy
 8116fc4:	f3bf 8f4f 	dsb	sy
 8116fc8:	60fb      	str	r3, [r7, #12]
}
 8116fca:	bf00      	nop
 8116fcc:	bf00      	nop
 8116fce:	e7fd      	b.n	8116fcc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8116fd0:	69bb      	ldr	r3, [r7, #24]
 8116fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8116fd4:	683a      	ldr	r2, [r7, #0]
 8116fd6:	429a      	cmp	r2, r3
 8116fd8:	d902      	bls.n	8116fe0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8116fda:	683b      	ldr	r3, [r7, #0]
 8116fdc:	61fb      	str	r3, [r7, #28]
 8116fde:	e002      	b.n	8116fe6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8116fe0:	69bb      	ldr	r3, [r7, #24]
 8116fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8116fe4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8116fe6:	69bb      	ldr	r3, [r7, #24]
 8116fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116fea:	69fa      	ldr	r2, [r7, #28]
 8116fec:	429a      	cmp	r2, r3
 8116fee:	d04c      	beq.n	811708a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8116ff0:	69bb      	ldr	r3, [r7, #24]
 8116ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8116ff4:	697a      	ldr	r2, [r7, #20]
 8116ff6:	429a      	cmp	r2, r3
 8116ff8:	d147      	bne.n	811708a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8116ffa:	4b26      	ldr	r3, [pc, #152]	@ (8117094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8116ffc:	681b      	ldr	r3, [r3, #0]
 8116ffe:	69ba      	ldr	r2, [r7, #24]
 8117000:	429a      	cmp	r2, r3
 8117002:	d10b      	bne.n	811701c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8117004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117008:	f383 8811 	msr	BASEPRI, r3
 811700c:	f3bf 8f6f 	isb	sy
 8117010:	f3bf 8f4f 	dsb	sy
 8117014:	60bb      	str	r3, [r7, #8]
}
 8117016:	bf00      	nop
 8117018:	bf00      	nop
 811701a:	e7fd      	b.n	8117018 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 811701c:	69bb      	ldr	r3, [r7, #24]
 811701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8117020:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8117022:	69bb      	ldr	r3, [r7, #24]
 8117024:	69fa      	ldr	r2, [r7, #28]
 8117026:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8117028:	69bb      	ldr	r3, [r7, #24]
 811702a:	699b      	ldr	r3, [r3, #24]
 811702c:	2b00      	cmp	r3, #0
 811702e:	db04      	blt.n	811703a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8117030:	69fb      	ldr	r3, [r7, #28]
 8117032:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8117036:	69bb      	ldr	r3, [r7, #24]
 8117038:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 811703a:	69bb      	ldr	r3, [r7, #24]
 811703c:	6959      	ldr	r1, [r3, #20]
 811703e:	693a      	ldr	r2, [r7, #16]
 8117040:	4613      	mov	r3, r2
 8117042:	009b      	lsls	r3, r3, #2
 8117044:	4413      	add	r3, r2
 8117046:	009b      	lsls	r3, r3, #2
 8117048:	4a13      	ldr	r2, [pc, #76]	@ (8117098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 811704a:	4413      	add	r3, r2
 811704c:	4299      	cmp	r1, r3
 811704e:	d11c      	bne.n	811708a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8117050:	69bb      	ldr	r3, [r7, #24]
 8117052:	3304      	adds	r3, #4
 8117054:	4618      	mov	r0, r3
 8117056:	f7fd f87f 	bl	8114158 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 811705a:	69bb      	ldr	r3, [r7, #24]
 811705c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811705e:	4b0f      	ldr	r3, [pc, #60]	@ (811709c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8117060:	681b      	ldr	r3, [r3, #0]
 8117062:	429a      	cmp	r2, r3
 8117064:	d903      	bls.n	811706e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8117066:	69bb      	ldr	r3, [r7, #24]
 8117068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811706a:	4a0c      	ldr	r2, [pc, #48]	@ (811709c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 811706c:	6013      	str	r3, [r2, #0]
 811706e:	69bb      	ldr	r3, [r7, #24]
 8117070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8117072:	4613      	mov	r3, r2
 8117074:	009b      	lsls	r3, r3, #2
 8117076:	4413      	add	r3, r2
 8117078:	009b      	lsls	r3, r3, #2
 811707a:	4a07      	ldr	r2, [pc, #28]	@ (8117098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 811707c:	441a      	add	r2, r3
 811707e:	69bb      	ldr	r3, [r7, #24]
 8117080:	3304      	adds	r3, #4
 8117082:	4619      	mov	r1, r3
 8117084:	4610      	mov	r0, r2
 8117086:	f7fd f80a 	bl	811409e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 811708a:	bf00      	nop
 811708c:	3720      	adds	r7, #32
 811708e:	46bd      	mov	sp, r7
 8117090:	bd80      	pop	{r7, pc}
 8117092:	bf00      	nop
 8117094:	1000abe0 	.word	0x1000abe0
 8117098:	1000abe4 	.word	0x1000abe4
 811709c:	1000b0bc 	.word	0x1000b0bc

081170a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 81170a0:	b480      	push	{r7}
 81170a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 81170a4:	4b07      	ldr	r3, [pc, #28]	@ (81170c4 <pvTaskIncrementMutexHeldCount+0x24>)
 81170a6:	681b      	ldr	r3, [r3, #0]
 81170a8:	2b00      	cmp	r3, #0
 81170aa:	d004      	beq.n	81170b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 81170ac:	4b05      	ldr	r3, [pc, #20]	@ (81170c4 <pvTaskIncrementMutexHeldCount+0x24>)
 81170ae:	681b      	ldr	r3, [r3, #0]
 81170b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81170b2:	3201      	adds	r2, #1
 81170b4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 81170b6:	4b03      	ldr	r3, [pc, #12]	@ (81170c4 <pvTaskIncrementMutexHeldCount+0x24>)
 81170b8:	681b      	ldr	r3, [r3, #0]
	}
 81170ba:	4618      	mov	r0, r3
 81170bc:	46bd      	mov	sp, r7
 81170be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81170c2:	4770      	bx	lr
 81170c4:	1000abe0 	.word	0x1000abe0

081170c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 81170c8:	b580      	push	{r7, lr}
 81170ca:	b086      	sub	sp, #24
 81170cc:	af00      	add	r7, sp, #0
 81170ce:	60f8      	str	r0, [r7, #12]
 81170d0:	60b9      	str	r1, [r7, #8]
 81170d2:	607a      	str	r2, [r7, #4]
 81170d4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 81170d6:	f7fd f997 	bl	8114408 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 81170da:	4b29      	ldr	r3, [pc, #164]	@ (8117180 <xTaskNotifyWait+0xb8>)
 81170dc:	681b      	ldr	r3, [r3, #0]
 81170de:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81170e2:	b2db      	uxtb	r3, r3
 81170e4:	2b02      	cmp	r3, #2
 81170e6:	d01c      	beq.n	8117122 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 81170e8:	4b25      	ldr	r3, [pc, #148]	@ (8117180 <xTaskNotifyWait+0xb8>)
 81170ea:	681b      	ldr	r3, [r3, #0]
 81170ec:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 81170f0:	68fa      	ldr	r2, [r7, #12]
 81170f2:	43d2      	mvns	r2, r2
 81170f4:	400a      	ands	r2, r1
 81170f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 81170fa:	4b21      	ldr	r3, [pc, #132]	@ (8117180 <xTaskNotifyWait+0xb8>)
 81170fc:	681b      	ldr	r3, [r3, #0]
 81170fe:	2201      	movs	r2, #1
 8117100:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8117104:	683b      	ldr	r3, [r7, #0]
 8117106:	2b00      	cmp	r3, #0
 8117108:	d00b      	beq.n	8117122 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 811710a:	2101      	movs	r1, #1
 811710c:	6838      	ldr	r0, [r7, #0]
 811710e:	f000 f947 	bl	81173a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8117112:	4b1c      	ldr	r3, [pc, #112]	@ (8117184 <xTaskNotifyWait+0xbc>)
 8117114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8117118:	601a      	str	r2, [r3, #0]
 811711a:	f3bf 8f4f 	dsb	sy
 811711e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8117122:	f7fd f9a3 	bl	811446c <vPortExitCritical>

		taskENTER_CRITICAL();
 8117126:	f7fd f96f 	bl	8114408 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 811712a:	687b      	ldr	r3, [r7, #4]
 811712c:	2b00      	cmp	r3, #0
 811712e:	d005      	beq.n	811713c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8117130:	4b13      	ldr	r3, [pc, #76]	@ (8117180 <xTaskNotifyWait+0xb8>)
 8117132:	681b      	ldr	r3, [r3, #0]
 8117134:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8117138:	687b      	ldr	r3, [r7, #4]
 811713a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 811713c:	4b10      	ldr	r3, [pc, #64]	@ (8117180 <xTaskNotifyWait+0xb8>)
 811713e:	681b      	ldr	r3, [r3, #0]
 8117140:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8117144:	b2db      	uxtb	r3, r3
 8117146:	2b02      	cmp	r3, #2
 8117148:	d002      	beq.n	8117150 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 811714a:	2300      	movs	r3, #0
 811714c:	617b      	str	r3, [r7, #20]
 811714e:	e00a      	b.n	8117166 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8117150:	4b0b      	ldr	r3, [pc, #44]	@ (8117180 <xTaskNotifyWait+0xb8>)
 8117152:	681b      	ldr	r3, [r3, #0]
 8117154:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8117158:	68ba      	ldr	r2, [r7, #8]
 811715a:	43d2      	mvns	r2, r2
 811715c:	400a      	ands	r2, r1
 811715e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8117162:	2301      	movs	r3, #1
 8117164:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8117166:	4b06      	ldr	r3, [pc, #24]	@ (8117180 <xTaskNotifyWait+0xb8>)
 8117168:	681b      	ldr	r3, [r3, #0]
 811716a:	2200      	movs	r2, #0
 811716c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8117170:	f7fd f97c 	bl	811446c <vPortExitCritical>

		return xReturn;
 8117174:	697b      	ldr	r3, [r7, #20]
	}
 8117176:	4618      	mov	r0, r3
 8117178:	3718      	adds	r7, #24
 811717a:	46bd      	mov	sp, r7
 811717c:	bd80      	pop	{r7, pc}
 811717e:	bf00      	nop
 8117180:	1000abe0 	.word	0x1000abe0
 8117184:	e000ed04 	.word	0xe000ed04

08117188 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8117188:	b580      	push	{r7, lr}
 811718a:	b08e      	sub	sp, #56	@ 0x38
 811718c:	af00      	add	r7, sp, #0
 811718e:	60f8      	str	r0, [r7, #12]
 8117190:	60b9      	str	r1, [r7, #8]
 8117192:	603b      	str	r3, [r7, #0]
 8117194:	4613      	mov	r3, r2
 8117196:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8117198:	2301      	movs	r3, #1
 811719a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 811719c:	68fb      	ldr	r3, [r7, #12]
 811719e:	2b00      	cmp	r3, #0
 81171a0:	d10b      	bne.n	81171ba <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 81171a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81171a6:	f383 8811 	msr	BASEPRI, r3
 81171aa:	f3bf 8f6f 	isb	sy
 81171ae:	f3bf 8f4f 	dsb	sy
 81171b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81171b4:	bf00      	nop
 81171b6:	bf00      	nop
 81171b8:	e7fd      	b.n	81171b6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81171ba:	f7fd fa05 	bl	81145c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 81171be:	68fb      	ldr	r3, [r7, #12]
 81171c0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 81171c2:	f3ef 8211 	mrs	r2, BASEPRI
 81171c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81171ca:	f383 8811 	msr	BASEPRI, r3
 81171ce:	f3bf 8f6f 	isb	sy
 81171d2:	f3bf 8f4f 	dsb	sy
 81171d6:	623a      	str	r2, [r7, #32]
 81171d8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 81171da:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81171dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 81171de:	683b      	ldr	r3, [r7, #0]
 81171e0:	2b00      	cmp	r3, #0
 81171e2:	d004      	beq.n	81171ee <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 81171e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81171e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81171ea:	683b      	ldr	r3, [r7, #0]
 81171ec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 81171ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81171f0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81171f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 81171f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81171fa:	2202      	movs	r2, #2
 81171fc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8117200:	79fb      	ldrb	r3, [r7, #7]
 8117202:	2b04      	cmp	r3, #4
 8117204:	d82e      	bhi.n	8117264 <xTaskGenericNotifyFromISR+0xdc>
 8117206:	a201      	add	r2, pc, #4	@ (adr r2, 811720c <xTaskGenericNotifyFromISR+0x84>)
 8117208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811720c:	08117289 	.word	0x08117289
 8117210:	08117221 	.word	0x08117221
 8117214:	08117233 	.word	0x08117233
 8117218:	08117243 	.word	0x08117243
 811721c:	0811724d 	.word	0x0811724d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8117220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117222:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8117226:	68bb      	ldr	r3, [r7, #8]
 8117228:	431a      	orrs	r2, r3
 811722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811722c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8117230:	e02d      	b.n	811728e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8117232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8117238:	1c5a      	adds	r2, r3, #1
 811723a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811723c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8117240:	e025      	b.n	811728e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8117242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117244:	68ba      	ldr	r2, [r7, #8]
 8117246:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 811724a:	e020      	b.n	811728e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 811724c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8117250:	2b02      	cmp	r3, #2
 8117252:	d004      	beq.n	811725e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8117254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117256:	68ba      	ldr	r2, [r7, #8]
 8117258:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 811725c:	e017      	b.n	811728e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 811725e:	2300      	movs	r3, #0
 8117260:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8117262:	e014      	b.n	811728e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8117264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 811726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811726e:	d00d      	beq.n	811728c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8117270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117274:	f383 8811 	msr	BASEPRI, r3
 8117278:	f3bf 8f6f 	isb	sy
 811727c:	f3bf 8f4f 	dsb	sy
 8117280:	61bb      	str	r3, [r7, #24]
}
 8117282:	bf00      	nop
 8117284:	bf00      	nop
 8117286:	e7fd      	b.n	8117284 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8117288:	bf00      	nop
 811728a:	e000      	b.n	811728e <xTaskGenericNotifyFromISR+0x106>
					break;
 811728c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 811728e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8117292:	2b01      	cmp	r3, #1
 8117294:	d147      	bne.n	8117326 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8117296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811729a:	2b00      	cmp	r3, #0
 811729c:	d00b      	beq.n	81172b6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 811729e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81172a2:	f383 8811 	msr	BASEPRI, r3
 81172a6:	f3bf 8f6f 	isb	sy
 81172aa:	f3bf 8f4f 	dsb	sy
 81172ae:	617b      	str	r3, [r7, #20]
}
 81172b0:	bf00      	nop
 81172b2:	bf00      	nop
 81172b4:	e7fd      	b.n	81172b2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81172b6:	4b21      	ldr	r3, [pc, #132]	@ (811733c <xTaskGenericNotifyFromISR+0x1b4>)
 81172b8:	681b      	ldr	r3, [r3, #0]
 81172ba:	2b00      	cmp	r3, #0
 81172bc:	d11d      	bne.n	81172fa <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81172be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172c0:	3304      	adds	r3, #4
 81172c2:	4618      	mov	r0, r3
 81172c4:	f7fc ff48 	bl	8114158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81172c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81172cc:	4b1c      	ldr	r3, [pc, #112]	@ (8117340 <xTaskGenericNotifyFromISR+0x1b8>)
 81172ce:	681b      	ldr	r3, [r3, #0]
 81172d0:	429a      	cmp	r2, r3
 81172d2:	d903      	bls.n	81172dc <xTaskGenericNotifyFromISR+0x154>
 81172d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81172d8:	4a19      	ldr	r2, [pc, #100]	@ (8117340 <xTaskGenericNotifyFromISR+0x1b8>)
 81172da:	6013      	str	r3, [r2, #0]
 81172dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81172e0:	4613      	mov	r3, r2
 81172e2:	009b      	lsls	r3, r3, #2
 81172e4:	4413      	add	r3, r2
 81172e6:	009b      	lsls	r3, r3, #2
 81172e8:	4a16      	ldr	r2, [pc, #88]	@ (8117344 <xTaskGenericNotifyFromISR+0x1bc>)
 81172ea:	441a      	add	r2, r3
 81172ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172ee:	3304      	adds	r3, #4
 81172f0:	4619      	mov	r1, r3
 81172f2:	4610      	mov	r0, r2
 81172f4:	f7fc fed3 	bl	811409e <vListInsertEnd>
 81172f8:	e005      	b.n	8117306 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 81172fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172fc:	3318      	adds	r3, #24
 81172fe:	4619      	mov	r1, r3
 8117300:	4811      	ldr	r0, [pc, #68]	@ (8117348 <xTaskGenericNotifyFromISR+0x1c0>)
 8117302:	f7fc fecc 	bl	811409e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8117306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811730a:	4b10      	ldr	r3, [pc, #64]	@ (811734c <xTaskGenericNotifyFromISR+0x1c4>)
 811730c:	681b      	ldr	r3, [r3, #0]
 811730e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8117310:	429a      	cmp	r2, r3
 8117312:	d908      	bls.n	8117326 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8117314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8117316:	2b00      	cmp	r3, #0
 8117318:	d002      	beq.n	8117320 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 811731a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811731c:	2201      	movs	r2, #1
 811731e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8117320:	4b0b      	ldr	r3, [pc, #44]	@ (8117350 <xTaskGenericNotifyFromISR+0x1c8>)
 8117322:	2201      	movs	r2, #1
 8117324:	601a      	str	r2, [r3, #0]
 8117326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117328:	613b      	str	r3, [r7, #16]
	__asm volatile
 811732a:	693b      	ldr	r3, [r7, #16]
 811732c:	f383 8811 	msr	BASEPRI, r3
}
 8117330:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8117332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8117334:	4618      	mov	r0, r3
 8117336:	3738      	adds	r7, #56	@ 0x38
 8117338:	46bd      	mov	sp, r7
 811733a:	bd80      	pop	{r7, pc}
 811733c:	1000b0dc 	.word	0x1000b0dc
 8117340:	1000b0bc 	.word	0x1000b0bc
 8117344:	1000abe4 	.word	0x1000abe4
 8117348:	1000b074 	.word	0x1000b074
 811734c:	1000abe0 	.word	0x1000abe0
 8117350:	1000b0c8 	.word	0x1000b0c8

08117354 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8117354:	b580      	push	{r7, lr}
 8117356:	b084      	sub	sp, #16
 8117358:	af00      	add	r7, sp, #0
 811735a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 811735c:	687b      	ldr	r3, [r7, #4]
 811735e:	2b00      	cmp	r3, #0
 8117360:	d102      	bne.n	8117368 <xTaskNotifyStateClear+0x14>
 8117362:	4b0e      	ldr	r3, [pc, #56]	@ (811739c <xTaskNotifyStateClear+0x48>)
 8117364:	681b      	ldr	r3, [r3, #0]
 8117366:	e000      	b.n	811736a <xTaskNotifyStateClear+0x16>
 8117368:	687b      	ldr	r3, [r7, #4]
 811736a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 811736c:	f7fd f84c 	bl	8114408 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8117370:	68bb      	ldr	r3, [r7, #8]
 8117372:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8117376:	b2db      	uxtb	r3, r3
 8117378:	2b02      	cmp	r3, #2
 811737a:	d106      	bne.n	811738a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811737c:	68bb      	ldr	r3, [r7, #8]
 811737e:	2200      	movs	r2, #0
 8117380:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8117384:	2301      	movs	r3, #1
 8117386:	60fb      	str	r3, [r7, #12]
 8117388:	e001      	b.n	811738e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 811738a:	2300      	movs	r3, #0
 811738c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 811738e:	f7fd f86d 	bl	811446c <vPortExitCritical>

		return xReturn;
 8117392:	68fb      	ldr	r3, [r7, #12]
	}
 8117394:	4618      	mov	r0, r3
 8117396:	3710      	adds	r7, #16
 8117398:	46bd      	mov	sp, r7
 811739a:	bd80      	pop	{r7, pc}
 811739c:	1000abe0 	.word	0x1000abe0

081173a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81173a0:	b580      	push	{r7, lr}
 81173a2:	b084      	sub	sp, #16
 81173a4:	af00      	add	r7, sp, #0
 81173a6:	6078      	str	r0, [r7, #4]
 81173a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81173aa:	4b21      	ldr	r3, [pc, #132]	@ (8117430 <prvAddCurrentTaskToDelayedList+0x90>)
 81173ac:	681b      	ldr	r3, [r3, #0]
 81173ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81173b0:	4b20      	ldr	r3, [pc, #128]	@ (8117434 <prvAddCurrentTaskToDelayedList+0x94>)
 81173b2:	681b      	ldr	r3, [r3, #0]
 81173b4:	3304      	adds	r3, #4
 81173b6:	4618      	mov	r0, r3
 81173b8:	f7fc fece 	bl	8114158 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81173bc:	687b      	ldr	r3, [r7, #4]
 81173be:	f1b3 3fff 	cmp.w	r3, #4294967295
 81173c2:	d10a      	bne.n	81173da <prvAddCurrentTaskToDelayedList+0x3a>
 81173c4:	683b      	ldr	r3, [r7, #0]
 81173c6:	2b00      	cmp	r3, #0
 81173c8:	d007      	beq.n	81173da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81173ca:	4b1a      	ldr	r3, [pc, #104]	@ (8117434 <prvAddCurrentTaskToDelayedList+0x94>)
 81173cc:	681b      	ldr	r3, [r3, #0]
 81173ce:	3304      	adds	r3, #4
 81173d0:	4619      	mov	r1, r3
 81173d2:	4819      	ldr	r0, [pc, #100]	@ (8117438 <prvAddCurrentTaskToDelayedList+0x98>)
 81173d4:	f7fc fe63 	bl	811409e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81173d8:	e026      	b.n	8117428 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81173da:	68fa      	ldr	r2, [r7, #12]
 81173dc:	687b      	ldr	r3, [r7, #4]
 81173de:	4413      	add	r3, r2
 81173e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81173e2:	4b14      	ldr	r3, [pc, #80]	@ (8117434 <prvAddCurrentTaskToDelayedList+0x94>)
 81173e4:	681b      	ldr	r3, [r3, #0]
 81173e6:	68ba      	ldr	r2, [r7, #8]
 81173e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81173ea:	68ba      	ldr	r2, [r7, #8]
 81173ec:	68fb      	ldr	r3, [r7, #12]
 81173ee:	429a      	cmp	r2, r3
 81173f0:	d209      	bcs.n	8117406 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81173f2:	4b12      	ldr	r3, [pc, #72]	@ (811743c <prvAddCurrentTaskToDelayedList+0x9c>)
 81173f4:	681a      	ldr	r2, [r3, #0]
 81173f6:	4b0f      	ldr	r3, [pc, #60]	@ (8117434 <prvAddCurrentTaskToDelayedList+0x94>)
 81173f8:	681b      	ldr	r3, [r3, #0]
 81173fa:	3304      	adds	r3, #4
 81173fc:	4619      	mov	r1, r3
 81173fe:	4610      	mov	r0, r2
 8117400:	f7fc fe71 	bl	81140e6 <vListInsert>
}
 8117404:	e010      	b.n	8117428 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8117406:	4b0e      	ldr	r3, [pc, #56]	@ (8117440 <prvAddCurrentTaskToDelayedList+0xa0>)
 8117408:	681a      	ldr	r2, [r3, #0]
 811740a:	4b0a      	ldr	r3, [pc, #40]	@ (8117434 <prvAddCurrentTaskToDelayedList+0x94>)
 811740c:	681b      	ldr	r3, [r3, #0]
 811740e:	3304      	adds	r3, #4
 8117410:	4619      	mov	r1, r3
 8117412:	4610      	mov	r0, r2
 8117414:	f7fc fe67 	bl	81140e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8117418:	4b0a      	ldr	r3, [pc, #40]	@ (8117444 <prvAddCurrentTaskToDelayedList+0xa4>)
 811741a:	681b      	ldr	r3, [r3, #0]
 811741c:	68ba      	ldr	r2, [r7, #8]
 811741e:	429a      	cmp	r2, r3
 8117420:	d202      	bcs.n	8117428 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8117422:	4a08      	ldr	r2, [pc, #32]	@ (8117444 <prvAddCurrentTaskToDelayedList+0xa4>)
 8117424:	68bb      	ldr	r3, [r7, #8]
 8117426:	6013      	str	r3, [r2, #0]
}
 8117428:	bf00      	nop
 811742a:	3710      	adds	r7, #16
 811742c:	46bd      	mov	sp, r7
 811742e:	bd80      	pop	{r7, pc}
 8117430:	1000b0b8 	.word	0x1000b0b8
 8117434:	1000abe0 	.word	0x1000abe0
 8117438:	1000b0a0 	.word	0x1000b0a0
 811743c:	1000b070 	.word	0x1000b070
 8117440:	1000b06c 	.word	0x1000b06c
 8117444:	1000b0d4 	.word	0x1000b0d4

08117448 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8117448:	b580      	push	{r7, lr}
 811744a:	b08a      	sub	sp, #40	@ 0x28
 811744c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 811744e:	2300      	movs	r3, #0
 8117450:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8117452:	f000 fb13 	bl	8117a7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8117456:	4b1d      	ldr	r3, [pc, #116]	@ (81174cc <xTimerCreateTimerTask+0x84>)
 8117458:	681b      	ldr	r3, [r3, #0]
 811745a:	2b00      	cmp	r3, #0
 811745c:	d021      	beq.n	81174a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 811745e:	2300      	movs	r3, #0
 8117460:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8117462:	2300      	movs	r3, #0
 8117464:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8117466:	1d3a      	adds	r2, r7, #4
 8117468:	f107 0108 	add.w	r1, r7, #8
 811746c:	f107 030c 	add.w	r3, r7, #12
 8117470:	4618      	mov	r0, r3
 8117472:	f7fc fbdf 	bl	8113c34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8117476:	6879      	ldr	r1, [r7, #4]
 8117478:	68bb      	ldr	r3, [r7, #8]
 811747a:	68fa      	ldr	r2, [r7, #12]
 811747c:	9202      	str	r2, [sp, #8]
 811747e:	9301      	str	r3, [sp, #4]
 8117480:	2302      	movs	r3, #2
 8117482:	9300      	str	r3, [sp, #0]
 8117484:	2300      	movs	r3, #0
 8117486:	460a      	mov	r2, r1
 8117488:	4911      	ldr	r1, [pc, #68]	@ (81174d0 <xTimerCreateTimerTask+0x88>)
 811748a:	4812      	ldr	r0, [pc, #72]	@ (81174d4 <xTimerCreateTimerTask+0x8c>)
 811748c:	f7fe fdec 	bl	8116068 <xTaskCreateStatic>
 8117490:	4603      	mov	r3, r0
 8117492:	4a11      	ldr	r2, [pc, #68]	@ (81174d8 <xTimerCreateTimerTask+0x90>)
 8117494:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8117496:	4b10      	ldr	r3, [pc, #64]	@ (81174d8 <xTimerCreateTimerTask+0x90>)
 8117498:	681b      	ldr	r3, [r3, #0]
 811749a:	2b00      	cmp	r3, #0
 811749c:	d001      	beq.n	81174a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 811749e:	2301      	movs	r3, #1
 81174a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81174a2:	697b      	ldr	r3, [r7, #20]
 81174a4:	2b00      	cmp	r3, #0
 81174a6:	d10b      	bne.n	81174c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 81174a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81174ac:	f383 8811 	msr	BASEPRI, r3
 81174b0:	f3bf 8f6f 	isb	sy
 81174b4:	f3bf 8f4f 	dsb	sy
 81174b8:	613b      	str	r3, [r7, #16]
}
 81174ba:	bf00      	nop
 81174bc:	bf00      	nop
 81174be:	e7fd      	b.n	81174bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 81174c0:	697b      	ldr	r3, [r7, #20]
}
 81174c2:	4618      	mov	r0, r3
 81174c4:	3718      	adds	r7, #24
 81174c6:	46bd      	mov	sp, r7
 81174c8:	bd80      	pop	{r7, pc}
 81174ca:	bf00      	nop
 81174cc:	1000b110 	.word	0x1000b110
 81174d0:	081255ac 	.word	0x081255ac
 81174d4:	08117615 	.word	0x08117615
 81174d8:	1000b114 	.word	0x1000b114

081174dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81174dc:	b580      	push	{r7, lr}
 81174de:	b08a      	sub	sp, #40	@ 0x28
 81174e0:	af00      	add	r7, sp, #0
 81174e2:	60f8      	str	r0, [r7, #12]
 81174e4:	60b9      	str	r1, [r7, #8]
 81174e6:	607a      	str	r2, [r7, #4]
 81174e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81174ea:	2300      	movs	r3, #0
 81174ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81174ee:	68fb      	ldr	r3, [r7, #12]
 81174f0:	2b00      	cmp	r3, #0
 81174f2:	d10b      	bne.n	811750c <xTimerGenericCommand+0x30>
	__asm volatile
 81174f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81174f8:	f383 8811 	msr	BASEPRI, r3
 81174fc:	f3bf 8f6f 	isb	sy
 8117500:	f3bf 8f4f 	dsb	sy
 8117504:	623b      	str	r3, [r7, #32]
}
 8117506:	bf00      	nop
 8117508:	bf00      	nop
 811750a:	e7fd      	b.n	8117508 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 811750c:	4b19      	ldr	r3, [pc, #100]	@ (8117574 <xTimerGenericCommand+0x98>)
 811750e:	681b      	ldr	r3, [r3, #0]
 8117510:	2b00      	cmp	r3, #0
 8117512:	d02a      	beq.n	811756a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8117514:	68bb      	ldr	r3, [r7, #8]
 8117516:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8117518:	687b      	ldr	r3, [r7, #4]
 811751a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 811751c:	68fb      	ldr	r3, [r7, #12]
 811751e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8117520:	68bb      	ldr	r3, [r7, #8]
 8117522:	2b05      	cmp	r3, #5
 8117524:	dc18      	bgt.n	8117558 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8117526:	f7ff fc41 	bl	8116dac <xTaskGetSchedulerState>
 811752a:	4603      	mov	r3, r0
 811752c:	2b02      	cmp	r3, #2
 811752e:	d109      	bne.n	8117544 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8117530:	4b10      	ldr	r3, [pc, #64]	@ (8117574 <xTimerGenericCommand+0x98>)
 8117532:	6818      	ldr	r0, [r3, #0]
 8117534:	f107 0110 	add.w	r1, r7, #16
 8117538:	2300      	movs	r3, #0
 811753a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811753c:	f7fd faf2 	bl	8114b24 <xQueueGenericSend>
 8117540:	6278      	str	r0, [r7, #36]	@ 0x24
 8117542:	e012      	b.n	811756a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8117544:	4b0b      	ldr	r3, [pc, #44]	@ (8117574 <xTimerGenericCommand+0x98>)
 8117546:	6818      	ldr	r0, [r3, #0]
 8117548:	f107 0110 	add.w	r1, r7, #16
 811754c:	2300      	movs	r3, #0
 811754e:	2200      	movs	r2, #0
 8117550:	f7fd fae8 	bl	8114b24 <xQueueGenericSend>
 8117554:	6278      	str	r0, [r7, #36]	@ 0x24
 8117556:	e008      	b.n	811756a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8117558:	4b06      	ldr	r3, [pc, #24]	@ (8117574 <xTimerGenericCommand+0x98>)
 811755a:	6818      	ldr	r0, [r3, #0]
 811755c:	f107 0110 	add.w	r1, r7, #16
 8117560:	2300      	movs	r3, #0
 8117562:	683a      	ldr	r2, [r7, #0]
 8117564:	f7fd fbe0 	bl	8114d28 <xQueueGenericSendFromISR>
 8117568:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 811756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811756c:	4618      	mov	r0, r3
 811756e:	3728      	adds	r7, #40	@ 0x28
 8117570:	46bd      	mov	sp, r7
 8117572:	bd80      	pop	{r7, pc}
 8117574:	1000b110 	.word	0x1000b110

08117578 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8117578:	b580      	push	{r7, lr}
 811757a:	b088      	sub	sp, #32
 811757c:	af02      	add	r7, sp, #8
 811757e:	6078      	str	r0, [r7, #4]
 8117580:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117582:	4b23      	ldr	r3, [pc, #140]	@ (8117610 <prvProcessExpiredTimer+0x98>)
 8117584:	681b      	ldr	r3, [r3, #0]
 8117586:	68db      	ldr	r3, [r3, #12]
 8117588:	68db      	ldr	r3, [r3, #12]
 811758a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811758c:	697b      	ldr	r3, [r7, #20]
 811758e:	3304      	adds	r3, #4
 8117590:	4618      	mov	r0, r3
 8117592:	f7fc fde1 	bl	8114158 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8117596:	697b      	ldr	r3, [r7, #20]
 8117598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811759c:	f003 0304 	and.w	r3, r3, #4
 81175a0:	2b00      	cmp	r3, #0
 81175a2:	d023      	beq.n	81175ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81175a4:	697b      	ldr	r3, [r7, #20]
 81175a6:	699a      	ldr	r2, [r3, #24]
 81175a8:	687b      	ldr	r3, [r7, #4]
 81175aa:	18d1      	adds	r1, r2, r3
 81175ac:	687b      	ldr	r3, [r7, #4]
 81175ae:	683a      	ldr	r2, [r7, #0]
 81175b0:	6978      	ldr	r0, [r7, #20]
 81175b2:	f000 f8d5 	bl	8117760 <prvInsertTimerInActiveList>
 81175b6:	4603      	mov	r3, r0
 81175b8:	2b00      	cmp	r3, #0
 81175ba:	d020      	beq.n	81175fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81175bc:	2300      	movs	r3, #0
 81175be:	9300      	str	r3, [sp, #0]
 81175c0:	2300      	movs	r3, #0
 81175c2:	687a      	ldr	r2, [r7, #4]
 81175c4:	2100      	movs	r1, #0
 81175c6:	6978      	ldr	r0, [r7, #20]
 81175c8:	f7ff ff88 	bl	81174dc <xTimerGenericCommand>
 81175cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81175ce:	693b      	ldr	r3, [r7, #16]
 81175d0:	2b00      	cmp	r3, #0
 81175d2:	d114      	bne.n	81175fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 81175d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81175d8:	f383 8811 	msr	BASEPRI, r3
 81175dc:	f3bf 8f6f 	isb	sy
 81175e0:	f3bf 8f4f 	dsb	sy
 81175e4:	60fb      	str	r3, [r7, #12]
}
 81175e6:	bf00      	nop
 81175e8:	bf00      	nop
 81175ea:	e7fd      	b.n	81175e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81175ec:	697b      	ldr	r3, [r7, #20]
 81175ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81175f2:	f023 0301 	bic.w	r3, r3, #1
 81175f6:	b2da      	uxtb	r2, r3
 81175f8:	697b      	ldr	r3, [r7, #20]
 81175fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81175fe:	697b      	ldr	r3, [r7, #20]
 8117600:	6a1b      	ldr	r3, [r3, #32]
 8117602:	6978      	ldr	r0, [r7, #20]
 8117604:	4798      	blx	r3
}
 8117606:	bf00      	nop
 8117608:	3718      	adds	r7, #24
 811760a:	46bd      	mov	sp, r7
 811760c:	bd80      	pop	{r7, pc}
 811760e:	bf00      	nop
 8117610:	1000b108 	.word	0x1000b108

08117614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8117614:	b580      	push	{r7, lr}
 8117616:	b084      	sub	sp, #16
 8117618:	af00      	add	r7, sp, #0
 811761a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 811761c:	f107 0308 	add.w	r3, r7, #8
 8117620:	4618      	mov	r0, r3
 8117622:	f000 f859 	bl	81176d8 <prvGetNextExpireTime>
 8117626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8117628:	68bb      	ldr	r3, [r7, #8]
 811762a:	4619      	mov	r1, r3
 811762c:	68f8      	ldr	r0, [r7, #12]
 811762e:	f000 f805 	bl	811763c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8117632:	f000 f8d7 	bl	81177e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8117636:	bf00      	nop
 8117638:	e7f0      	b.n	811761c <prvTimerTask+0x8>
	...

0811763c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 811763c:	b580      	push	{r7, lr}
 811763e:	b084      	sub	sp, #16
 8117640:	af00      	add	r7, sp, #0
 8117642:	6078      	str	r0, [r7, #4]
 8117644:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8117646:	f7fe ff73 	bl	8116530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 811764a:	f107 0308 	add.w	r3, r7, #8
 811764e:	4618      	mov	r0, r3
 8117650:	f000 f866 	bl	8117720 <prvSampleTimeNow>
 8117654:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8117656:	68bb      	ldr	r3, [r7, #8]
 8117658:	2b00      	cmp	r3, #0
 811765a:	d130      	bne.n	81176be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 811765c:	683b      	ldr	r3, [r7, #0]
 811765e:	2b00      	cmp	r3, #0
 8117660:	d10a      	bne.n	8117678 <prvProcessTimerOrBlockTask+0x3c>
 8117662:	687a      	ldr	r2, [r7, #4]
 8117664:	68fb      	ldr	r3, [r7, #12]
 8117666:	429a      	cmp	r2, r3
 8117668:	d806      	bhi.n	8117678 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 811766a:	f7fe ff6f 	bl	811654c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 811766e:	68f9      	ldr	r1, [r7, #12]
 8117670:	6878      	ldr	r0, [r7, #4]
 8117672:	f7ff ff81 	bl	8117578 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8117676:	e024      	b.n	81176c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8117678:	683b      	ldr	r3, [r7, #0]
 811767a:	2b00      	cmp	r3, #0
 811767c:	d008      	beq.n	8117690 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 811767e:	4b13      	ldr	r3, [pc, #76]	@ (81176cc <prvProcessTimerOrBlockTask+0x90>)
 8117680:	681b      	ldr	r3, [r3, #0]
 8117682:	681b      	ldr	r3, [r3, #0]
 8117684:	2b00      	cmp	r3, #0
 8117686:	d101      	bne.n	811768c <prvProcessTimerOrBlockTask+0x50>
 8117688:	2301      	movs	r3, #1
 811768a:	e000      	b.n	811768e <prvProcessTimerOrBlockTask+0x52>
 811768c:	2300      	movs	r3, #0
 811768e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8117690:	4b0f      	ldr	r3, [pc, #60]	@ (81176d0 <prvProcessTimerOrBlockTask+0x94>)
 8117692:	6818      	ldr	r0, [r3, #0]
 8117694:	687a      	ldr	r2, [r7, #4]
 8117696:	68fb      	ldr	r3, [r7, #12]
 8117698:	1ad3      	subs	r3, r2, r3
 811769a:	683a      	ldr	r2, [r7, #0]
 811769c:	4619      	mov	r1, r3
 811769e:	f7fe f885 	bl	81157ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81176a2:	f7fe ff53 	bl	811654c <xTaskResumeAll>
 81176a6:	4603      	mov	r3, r0
 81176a8:	2b00      	cmp	r3, #0
 81176aa:	d10a      	bne.n	81176c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81176ac:	4b09      	ldr	r3, [pc, #36]	@ (81176d4 <prvProcessTimerOrBlockTask+0x98>)
 81176ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81176b2:	601a      	str	r2, [r3, #0]
 81176b4:	f3bf 8f4f 	dsb	sy
 81176b8:	f3bf 8f6f 	isb	sy
}
 81176bc:	e001      	b.n	81176c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81176be:	f7fe ff45 	bl	811654c <xTaskResumeAll>
}
 81176c2:	bf00      	nop
 81176c4:	3710      	adds	r7, #16
 81176c6:	46bd      	mov	sp, r7
 81176c8:	bd80      	pop	{r7, pc}
 81176ca:	bf00      	nop
 81176cc:	1000b10c 	.word	0x1000b10c
 81176d0:	1000b110 	.word	0x1000b110
 81176d4:	e000ed04 	.word	0xe000ed04

081176d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81176d8:	b480      	push	{r7}
 81176da:	b085      	sub	sp, #20
 81176dc:	af00      	add	r7, sp, #0
 81176de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81176e0:	4b0e      	ldr	r3, [pc, #56]	@ (811771c <prvGetNextExpireTime+0x44>)
 81176e2:	681b      	ldr	r3, [r3, #0]
 81176e4:	681b      	ldr	r3, [r3, #0]
 81176e6:	2b00      	cmp	r3, #0
 81176e8:	d101      	bne.n	81176ee <prvGetNextExpireTime+0x16>
 81176ea:	2201      	movs	r2, #1
 81176ec:	e000      	b.n	81176f0 <prvGetNextExpireTime+0x18>
 81176ee:	2200      	movs	r2, #0
 81176f0:	687b      	ldr	r3, [r7, #4]
 81176f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81176f4:	687b      	ldr	r3, [r7, #4]
 81176f6:	681b      	ldr	r3, [r3, #0]
 81176f8:	2b00      	cmp	r3, #0
 81176fa:	d105      	bne.n	8117708 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81176fc:	4b07      	ldr	r3, [pc, #28]	@ (811771c <prvGetNextExpireTime+0x44>)
 81176fe:	681b      	ldr	r3, [r3, #0]
 8117700:	68db      	ldr	r3, [r3, #12]
 8117702:	681b      	ldr	r3, [r3, #0]
 8117704:	60fb      	str	r3, [r7, #12]
 8117706:	e001      	b.n	811770c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8117708:	2300      	movs	r3, #0
 811770a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 811770c:	68fb      	ldr	r3, [r7, #12]
}
 811770e:	4618      	mov	r0, r3
 8117710:	3714      	adds	r7, #20
 8117712:	46bd      	mov	sp, r7
 8117714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117718:	4770      	bx	lr
 811771a:	bf00      	nop
 811771c:	1000b108 	.word	0x1000b108

08117720 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8117720:	b580      	push	{r7, lr}
 8117722:	b084      	sub	sp, #16
 8117724:	af00      	add	r7, sp, #0
 8117726:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8117728:	f7fe ffae 	bl	8116688 <xTaskGetTickCount>
 811772c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 811772e:	4b0b      	ldr	r3, [pc, #44]	@ (811775c <prvSampleTimeNow+0x3c>)
 8117730:	681b      	ldr	r3, [r3, #0]
 8117732:	68fa      	ldr	r2, [r7, #12]
 8117734:	429a      	cmp	r2, r3
 8117736:	d205      	bcs.n	8117744 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8117738:	f000 f93a 	bl	81179b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 811773c:	687b      	ldr	r3, [r7, #4]
 811773e:	2201      	movs	r2, #1
 8117740:	601a      	str	r2, [r3, #0]
 8117742:	e002      	b.n	811774a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8117744:	687b      	ldr	r3, [r7, #4]
 8117746:	2200      	movs	r2, #0
 8117748:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 811774a:	4a04      	ldr	r2, [pc, #16]	@ (811775c <prvSampleTimeNow+0x3c>)
 811774c:	68fb      	ldr	r3, [r7, #12]
 811774e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8117750:	68fb      	ldr	r3, [r7, #12]
}
 8117752:	4618      	mov	r0, r3
 8117754:	3710      	adds	r7, #16
 8117756:	46bd      	mov	sp, r7
 8117758:	bd80      	pop	{r7, pc}
 811775a:	bf00      	nop
 811775c:	1000b118 	.word	0x1000b118

08117760 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8117760:	b580      	push	{r7, lr}
 8117762:	b086      	sub	sp, #24
 8117764:	af00      	add	r7, sp, #0
 8117766:	60f8      	str	r0, [r7, #12]
 8117768:	60b9      	str	r1, [r7, #8]
 811776a:	607a      	str	r2, [r7, #4]
 811776c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 811776e:	2300      	movs	r3, #0
 8117770:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8117772:	68fb      	ldr	r3, [r7, #12]
 8117774:	68ba      	ldr	r2, [r7, #8]
 8117776:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8117778:	68fb      	ldr	r3, [r7, #12]
 811777a:	68fa      	ldr	r2, [r7, #12]
 811777c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 811777e:	68ba      	ldr	r2, [r7, #8]
 8117780:	687b      	ldr	r3, [r7, #4]
 8117782:	429a      	cmp	r2, r3
 8117784:	d812      	bhi.n	81177ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8117786:	687a      	ldr	r2, [r7, #4]
 8117788:	683b      	ldr	r3, [r7, #0]
 811778a:	1ad2      	subs	r2, r2, r3
 811778c:	68fb      	ldr	r3, [r7, #12]
 811778e:	699b      	ldr	r3, [r3, #24]
 8117790:	429a      	cmp	r2, r3
 8117792:	d302      	bcc.n	811779a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8117794:	2301      	movs	r3, #1
 8117796:	617b      	str	r3, [r7, #20]
 8117798:	e01b      	b.n	81177d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 811779a:	4b10      	ldr	r3, [pc, #64]	@ (81177dc <prvInsertTimerInActiveList+0x7c>)
 811779c:	681a      	ldr	r2, [r3, #0]
 811779e:	68fb      	ldr	r3, [r7, #12]
 81177a0:	3304      	adds	r3, #4
 81177a2:	4619      	mov	r1, r3
 81177a4:	4610      	mov	r0, r2
 81177a6:	f7fc fc9e 	bl	81140e6 <vListInsert>
 81177aa:	e012      	b.n	81177d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81177ac:	687a      	ldr	r2, [r7, #4]
 81177ae:	683b      	ldr	r3, [r7, #0]
 81177b0:	429a      	cmp	r2, r3
 81177b2:	d206      	bcs.n	81177c2 <prvInsertTimerInActiveList+0x62>
 81177b4:	68ba      	ldr	r2, [r7, #8]
 81177b6:	683b      	ldr	r3, [r7, #0]
 81177b8:	429a      	cmp	r2, r3
 81177ba:	d302      	bcc.n	81177c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81177bc:	2301      	movs	r3, #1
 81177be:	617b      	str	r3, [r7, #20]
 81177c0:	e007      	b.n	81177d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81177c2:	4b07      	ldr	r3, [pc, #28]	@ (81177e0 <prvInsertTimerInActiveList+0x80>)
 81177c4:	681a      	ldr	r2, [r3, #0]
 81177c6:	68fb      	ldr	r3, [r7, #12]
 81177c8:	3304      	adds	r3, #4
 81177ca:	4619      	mov	r1, r3
 81177cc:	4610      	mov	r0, r2
 81177ce:	f7fc fc8a 	bl	81140e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 81177d2:	697b      	ldr	r3, [r7, #20]
}
 81177d4:	4618      	mov	r0, r3
 81177d6:	3718      	adds	r7, #24
 81177d8:	46bd      	mov	sp, r7
 81177da:	bd80      	pop	{r7, pc}
 81177dc:	1000b10c 	.word	0x1000b10c
 81177e0:	1000b108 	.word	0x1000b108

081177e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81177e4:	b580      	push	{r7, lr}
 81177e6:	b08e      	sub	sp, #56	@ 0x38
 81177e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81177ea:	e0ce      	b.n	811798a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81177ec:	687b      	ldr	r3, [r7, #4]
 81177ee:	2b00      	cmp	r3, #0
 81177f0:	da19      	bge.n	8117826 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81177f2:	1d3b      	adds	r3, r7, #4
 81177f4:	3304      	adds	r3, #4
 81177f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81177f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81177fa:	2b00      	cmp	r3, #0
 81177fc:	d10b      	bne.n	8117816 <prvProcessReceivedCommands+0x32>
	__asm volatile
 81177fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117802:	f383 8811 	msr	BASEPRI, r3
 8117806:	f3bf 8f6f 	isb	sy
 811780a:	f3bf 8f4f 	dsb	sy
 811780e:	61fb      	str	r3, [r7, #28]
}
 8117810:	bf00      	nop
 8117812:	bf00      	nop
 8117814:	e7fd      	b.n	8117812 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8117816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117818:	681b      	ldr	r3, [r3, #0]
 811781a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811781c:	6850      	ldr	r0, [r2, #4]
 811781e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117820:	6892      	ldr	r2, [r2, #8]
 8117822:	4611      	mov	r1, r2
 8117824:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8117826:	687b      	ldr	r3, [r7, #4]
 8117828:	2b00      	cmp	r3, #0
 811782a:	f2c0 80ae 	blt.w	811798a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 811782e:	68fb      	ldr	r3, [r7, #12]
 8117830:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8117832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117834:	695b      	ldr	r3, [r3, #20]
 8117836:	2b00      	cmp	r3, #0
 8117838:	d004      	beq.n	8117844 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811783c:	3304      	adds	r3, #4
 811783e:	4618      	mov	r0, r3
 8117840:	f7fc fc8a 	bl	8114158 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8117844:	463b      	mov	r3, r7
 8117846:	4618      	mov	r0, r3
 8117848:	f7ff ff6a 	bl	8117720 <prvSampleTimeNow>
 811784c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 811784e:	687b      	ldr	r3, [r7, #4]
 8117850:	2b09      	cmp	r3, #9
 8117852:	f200 8097 	bhi.w	8117984 <prvProcessReceivedCommands+0x1a0>
 8117856:	a201      	add	r2, pc, #4	@ (adr r2, 811785c <prvProcessReceivedCommands+0x78>)
 8117858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811785c:	08117885 	.word	0x08117885
 8117860:	08117885 	.word	0x08117885
 8117864:	08117885 	.word	0x08117885
 8117868:	081178fb 	.word	0x081178fb
 811786c:	0811790f 	.word	0x0811790f
 8117870:	0811795b 	.word	0x0811795b
 8117874:	08117885 	.word	0x08117885
 8117878:	08117885 	.word	0x08117885
 811787c:	081178fb 	.word	0x081178fb
 8117880:	0811790f 	.word	0x0811790f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8117884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117886:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811788a:	f043 0301 	orr.w	r3, r3, #1
 811788e:	b2da      	uxtb	r2, r3
 8117890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117892:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8117896:	68ba      	ldr	r2, [r7, #8]
 8117898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811789a:	699b      	ldr	r3, [r3, #24]
 811789c:	18d1      	adds	r1, r2, r3
 811789e:	68bb      	ldr	r3, [r7, #8]
 81178a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81178a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81178a4:	f7ff ff5c 	bl	8117760 <prvInsertTimerInActiveList>
 81178a8:	4603      	mov	r3, r0
 81178aa:	2b00      	cmp	r3, #0
 81178ac:	d06c      	beq.n	8117988 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81178ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81178b0:	6a1b      	ldr	r3, [r3, #32]
 81178b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81178b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81178b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81178b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81178bc:	f003 0304 	and.w	r3, r3, #4
 81178c0:	2b00      	cmp	r3, #0
 81178c2:	d061      	beq.n	8117988 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81178c4:	68ba      	ldr	r2, [r7, #8]
 81178c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81178c8:	699b      	ldr	r3, [r3, #24]
 81178ca:	441a      	add	r2, r3
 81178cc:	2300      	movs	r3, #0
 81178ce:	9300      	str	r3, [sp, #0]
 81178d0:	2300      	movs	r3, #0
 81178d2:	2100      	movs	r1, #0
 81178d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81178d6:	f7ff fe01 	bl	81174dc <xTimerGenericCommand>
 81178da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81178dc:	6a3b      	ldr	r3, [r7, #32]
 81178de:	2b00      	cmp	r3, #0
 81178e0:	d152      	bne.n	8117988 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 81178e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81178e6:	f383 8811 	msr	BASEPRI, r3
 81178ea:	f3bf 8f6f 	isb	sy
 81178ee:	f3bf 8f4f 	dsb	sy
 81178f2:	61bb      	str	r3, [r7, #24]
}
 81178f4:	bf00      	nop
 81178f6:	bf00      	nop
 81178f8:	e7fd      	b.n	81178f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81178fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81178fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8117900:	f023 0301 	bic.w	r3, r3, #1
 8117904:	b2da      	uxtb	r2, r3
 8117906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117908:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 811790c:	e03d      	b.n	811798a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 811790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8117914:	f043 0301 	orr.w	r3, r3, #1
 8117918:	b2da      	uxtb	r2, r3
 811791a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811791c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8117920:	68ba      	ldr	r2, [r7, #8]
 8117922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117924:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8117926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117928:	699b      	ldr	r3, [r3, #24]
 811792a:	2b00      	cmp	r3, #0
 811792c:	d10b      	bne.n	8117946 <prvProcessReceivedCommands+0x162>
	__asm volatile
 811792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117932:	f383 8811 	msr	BASEPRI, r3
 8117936:	f3bf 8f6f 	isb	sy
 811793a:	f3bf 8f4f 	dsb	sy
 811793e:	617b      	str	r3, [r7, #20]
}
 8117940:	bf00      	nop
 8117942:	bf00      	nop
 8117944:	e7fd      	b.n	8117942 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8117946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117948:	699a      	ldr	r2, [r3, #24]
 811794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811794c:	18d1      	adds	r1, r2, r3
 811794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8117952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8117954:	f7ff ff04 	bl	8117760 <prvInsertTimerInActiveList>
					break;
 8117958:	e017      	b.n	811798a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 811795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811795c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8117960:	f003 0302 	and.w	r3, r3, #2
 8117964:	2b00      	cmp	r3, #0
 8117966:	d103      	bne.n	8117970 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8117968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811796a:	f7fc fa4b 	bl	8113e04 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 811796e:	e00c      	b.n	811798a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8117970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117972:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8117976:	f023 0301 	bic.w	r3, r3, #1
 811797a:	b2da      	uxtb	r2, r3
 811797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811797e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8117982:	e002      	b.n	811798a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8117984:	bf00      	nop
 8117986:	e000      	b.n	811798a <prvProcessReceivedCommands+0x1a6>
					break;
 8117988:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 811798a:	4b08      	ldr	r3, [pc, #32]	@ (81179ac <prvProcessReceivedCommands+0x1c8>)
 811798c:	681b      	ldr	r3, [r3, #0]
 811798e:	1d39      	adds	r1, r7, #4
 8117990:	2200      	movs	r2, #0
 8117992:	4618      	mov	r0, r3
 8117994:	f7fd faf6 	bl	8114f84 <xQueueReceive>
 8117998:	4603      	mov	r3, r0
 811799a:	2b00      	cmp	r3, #0
 811799c:	f47f af26 	bne.w	81177ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 81179a0:	bf00      	nop
 81179a2:	bf00      	nop
 81179a4:	3730      	adds	r7, #48	@ 0x30
 81179a6:	46bd      	mov	sp, r7
 81179a8:	bd80      	pop	{r7, pc}
 81179aa:	bf00      	nop
 81179ac:	1000b110 	.word	0x1000b110

081179b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81179b0:	b580      	push	{r7, lr}
 81179b2:	b088      	sub	sp, #32
 81179b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81179b6:	e049      	b.n	8117a4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81179b8:	4b2e      	ldr	r3, [pc, #184]	@ (8117a74 <prvSwitchTimerLists+0xc4>)
 81179ba:	681b      	ldr	r3, [r3, #0]
 81179bc:	68db      	ldr	r3, [r3, #12]
 81179be:	681b      	ldr	r3, [r3, #0]
 81179c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81179c2:	4b2c      	ldr	r3, [pc, #176]	@ (8117a74 <prvSwitchTimerLists+0xc4>)
 81179c4:	681b      	ldr	r3, [r3, #0]
 81179c6:	68db      	ldr	r3, [r3, #12]
 81179c8:	68db      	ldr	r3, [r3, #12]
 81179ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81179cc:	68fb      	ldr	r3, [r7, #12]
 81179ce:	3304      	adds	r3, #4
 81179d0:	4618      	mov	r0, r3
 81179d2:	f7fc fbc1 	bl	8114158 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81179d6:	68fb      	ldr	r3, [r7, #12]
 81179d8:	6a1b      	ldr	r3, [r3, #32]
 81179da:	68f8      	ldr	r0, [r7, #12]
 81179dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81179de:	68fb      	ldr	r3, [r7, #12]
 81179e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81179e4:	f003 0304 	and.w	r3, r3, #4
 81179e8:	2b00      	cmp	r3, #0
 81179ea:	d02f      	beq.n	8117a4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81179ec:	68fb      	ldr	r3, [r7, #12]
 81179ee:	699b      	ldr	r3, [r3, #24]
 81179f0:	693a      	ldr	r2, [r7, #16]
 81179f2:	4413      	add	r3, r2
 81179f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81179f6:	68ba      	ldr	r2, [r7, #8]
 81179f8:	693b      	ldr	r3, [r7, #16]
 81179fa:	429a      	cmp	r2, r3
 81179fc:	d90e      	bls.n	8117a1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81179fe:	68fb      	ldr	r3, [r7, #12]
 8117a00:	68ba      	ldr	r2, [r7, #8]
 8117a02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8117a04:	68fb      	ldr	r3, [r7, #12]
 8117a06:	68fa      	ldr	r2, [r7, #12]
 8117a08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8117a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8117a74 <prvSwitchTimerLists+0xc4>)
 8117a0c:	681a      	ldr	r2, [r3, #0]
 8117a0e:	68fb      	ldr	r3, [r7, #12]
 8117a10:	3304      	adds	r3, #4
 8117a12:	4619      	mov	r1, r3
 8117a14:	4610      	mov	r0, r2
 8117a16:	f7fc fb66 	bl	81140e6 <vListInsert>
 8117a1a:	e017      	b.n	8117a4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8117a1c:	2300      	movs	r3, #0
 8117a1e:	9300      	str	r3, [sp, #0]
 8117a20:	2300      	movs	r3, #0
 8117a22:	693a      	ldr	r2, [r7, #16]
 8117a24:	2100      	movs	r1, #0
 8117a26:	68f8      	ldr	r0, [r7, #12]
 8117a28:	f7ff fd58 	bl	81174dc <xTimerGenericCommand>
 8117a2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8117a2e:	687b      	ldr	r3, [r7, #4]
 8117a30:	2b00      	cmp	r3, #0
 8117a32:	d10b      	bne.n	8117a4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8117a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8117a38:	f383 8811 	msr	BASEPRI, r3
 8117a3c:	f3bf 8f6f 	isb	sy
 8117a40:	f3bf 8f4f 	dsb	sy
 8117a44:	603b      	str	r3, [r7, #0]
}
 8117a46:	bf00      	nop
 8117a48:	bf00      	nop
 8117a4a:	e7fd      	b.n	8117a48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8117a4c:	4b09      	ldr	r3, [pc, #36]	@ (8117a74 <prvSwitchTimerLists+0xc4>)
 8117a4e:	681b      	ldr	r3, [r3, #0]
 8117a50:	681b      	ldr	r3, [r3, #0]
 8117a52:	2b00      	cmp	r3, #0
 8117a54:	d1b0      	bne.n	81179b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8117a56:	4b07      	ldr	r3, [pc, #28]	@ (8117a74 <prvSwitchTimerLists+0xc4>)
 8117a58:	681b      	ldr	r3, [r3, #0]
 8117a5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8117a5c:	4b06      	ldr	r3, [pc, #24]	@ (8117a78 <prvSwitchTimerLists+0xc8>)
 8117a5e:	681b      	ldr	r3, [r3, #0]
 8117a60:	4a04      	ldr	r2, [pc, #16]	@ (8117a74 <prvSwitchTimerLists+0xc4>)
 8117a62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8117a64:	4a04      	ldr	r2, [pc, #16]	@ (8117a78 <prvSwitchTimerLists+0xc8>)
 8117a66:	697b      	ldr	r3, [r7, #20]
 8117a68:	6013      	str	r3, [r2, #0]
}
 8117a6a:	bf00      	nop
 8117a6c:	3718      	adds	r7, #24
 8117a6e:	46bd      	mov	sp, r7
 8117a70:	bd80      	pop	{r7, pc}
 8117a72:	bf00      	nop
 8117a74:	1000b108 	.word	0x1000b108
 8117a78:	1000b10c 	.word	0x1000b10c

08117a7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8117a7c:	b580      	push	{r7, lr}
 8117a7e:	b082      	sub	sp, #8
 8117a80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8117a82:	f7fc fcc1 	bl	8114408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8117a86:	4b15      	ldr	r3, [pc, #84]	@ (8117adc <prvCheckForValidListAndQueue+0x60>)
 8117a88:	681b      	ldr	r3, [r3, #0]
 8117a8a:	2b00      	cmp	r3, #0
 8117a8c:	d120      	bne.n	8117ad0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8117a8e:	4814      	ldr	r0, [pc, #80]	@ (8117ae0 <prvCheckForValidListAndQueue+0x64>)
 8117a90:	f7fc fad8 	bl	8114044 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8117a94:	4813      	ldr	r0, [pc, #76]	@ (8117ae4 <prvCheckForValidListAndQueue+0x68>)
 8117a96:	f7fc fad5 	bl	8114044 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8117a9a:	4b13      	ldr	r3, [pc, #76]	@ (8117ae8 <prvCheckForValidListAndQueue+0x6c>)
 8117a9c:	4a10      	ldr	r2, [pc, #64]	@ (8117ae0 <prvCheckForValidListAndQueue+0x64>)
 8117a9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8117aa0:	4b12      	ldr	r3, [pc, #72]	@ (8117aec <prvCheckForValidListAndQueue+0x70>)
 8117aa2:	4a10      	ldr	r2, [pc, #64]	@ (8117ae4 <prvCheckForValidListAndQueue+0x68>)
 8117aa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8117aa6:	2300      	movs	r3, #0
 8117aa8:	9300      	str	r3, [sp, #0]
 8117aaa:	4b11      	ldr	r3, [pc, #68]	@ (8117af0 <prvCheckForValidListAndQueue+0x74>)
 8117aac:	4a11      	ldr	r2, [pc, #68]	@ (8117af4 <prvCheckForValidListAndQueue+0x78>)
 8117aae:	2110      	movs	r1, #16
 8117ab0:	200a      	movs	r0, #10
 8117ab2:	f7fc fe35 	bl	8114720 <xQueueGenericCreateStatic>
 8117ab6:	4603      	mov	r3, r0
 8117ab8:	4a08      	ldr	r2, [pc, #32]	@ (8117adc <prvCheckForValidListAndQueue+0x60>)
 8117aba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8117abc:	4b07      	ldr	r3, [pc, #28]	@ (8117adc <prvCheckForValidListAndQueue+0x60>)
 8117abe:	681b      	ldr	r3, [r3, #0]
 8117ac0:	2b00      	cmp	r3, #0
 8117ac2:	d005      	beq.n	8117ad0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8117ac4:	4b05      	ldr	r3, [pc, #20]	@ (8117adc <prvCheckForValidListAndQueue+0x60>)
 8117ac6:	681b      	ldr	r3, [r3, #0]
 8117ac8:	490b      	ldr	r1, [pc, #44]	@ (8117af8 <prvCheckForValidListAndQueue+0x7c>)
 8117aca:	4618      	mov	r0, r3
 8117acc:	f7fd fe1a 	bl	8115704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8117ad0:	f7fc fccc 	bl	811446c <vPortExitCritical>
}
 8117ad4:	bf00      	nop
 8117ad6:	46bd      	mov	sp, r7
 8117ad8:	bd80      	pop	{r7, pc}
 8117ada:	bf00      	nop
 8117adc:	1000b110 	.word	0x1000b110
 8117ae0:	1000b0e0 	.word	0x1000b0e0
 8117ae4:	1000b0f4 	.word	0x1000b0f4
 8117ae8:	1000b108 	.word	0x1000b108
 8117aec:	1000b10c 	.word	0x1000b10c
 8117af0:	1000b1bc 	.word	0x1000b1bc
 8117af4:	1000b11c 	.word	0x1000b11c
 8117af8:	081255b4 	.word	0x081255b4

08117afc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8117afc:	b480      	push	{r7}
 8117afe:	b083      	sub	sp, #12
 8117b00:	af00      	add	r7, sp, #0
 8117b02:	4603      	mov	r3, r0
 8117b04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8117b06:	88fb      	ldrh	r3, [r7, #6]
 8117b08:	021b      	lsls	r3, r3, #8
 8117b0a:	b21a      	sxth	r2, r3
 8117b0c:	88fb      	ldrh	r3, [r7, #6]
 8117b0e:	0a1b      	lsrs	r3, r3, #8
 8117b10:	b29b      	uxth	r3, r3
 8117b12:	b21b      	sxth	r3, r3
 8117b14:	4313      	orrs	r3, r2
 8117b16:	b21b      	sxth	r3, r3
 8117b18:	b29b      	uxth	r3, r3
}
 8117b1a:	4618      	mov	r0, r3
 8117b1c:	370c      	adds	r7, #12
 8117b1e:	46bd      	mov	sp, r7
 8117b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117b24:	4770      	bx	lr

08117b26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8117b26:	b480      	push	{r7}
 8117b28:	b083      	sub	sp, #12
 8117b2a:	af00      	add	r7, sp, #0
 8117b2c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8117b2e:	687b      	ldr	r3, [r7, #4]
 8117b30:	061a      	lsls	r2, r3, #24
 8117b32:	687b      	ldr	r3, [r7, #4]
 8117b34:	021b      	lsls	r3, r3, #8
 8117b36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8117b3a:	431a      	orrs	r2, r3
 8117b3c:	687b      	ldr	r3, [r7, #4]
 8117b3e:	0a1b      	lsrs	r3, r3, #8
 8117b40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8117b44:	431a      	orrs	r2, r3
 8117b46:	687b      	ldr	r3, [r7, #4]
 8117b48:	0e1b      	lsrs	r3, r3, #24
 8117b4a:	4313      	orrs	r3, r2
}
 8117b4c:	4618      	mov	r0, r3
 8117b4e:	370c      	adds	r7, #12
 8117b50:	46bd      	mov	sp, r7
 8117b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117b56:	4770      	bx	lr

08117b58 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8117b58:	b580      	push	{r7, lr}
 8117b5a:	b084      	sub	sp, #16
 8117b5c:	af00      	add	r7, sp, #0
 8117b5e:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 8117b60:	687b      	ldr	r3, [r7, #4]
 8117b62:	2b00      	cmp	r3, #0
 8117b64:	d11e      	bne.n	8117ba4 <free_etharp_q+0x4c>
 8117b66:	4b13      	ldr	r3, [pc, #76]	@ (8117bb4 <free_etharp_q+0x5c>)
 8117b68:	2296      	movs	r2, #150	@ 0x96
 8117b6a:	4913      	ldr	r1, [pc, #76]	@ (8117bb8 <free_etharp_q+0x60>)
 8117b6c:	4813      	ldr	r0, [pc, #76]	@ (8117bbc <free_etharp_q+0x64>)
 8117b6e:	f00c fd75 	bl	812465c <iprintf>
  while (q) {
 8117b72:	e017      	b.n	8117ba4 <free_etharp_q+0x4c>
    r = q;
 8117b74:	687b      	ldr	r3, [r7, #4]
 8117b76:	60fb      	str	r3, [r7, #12]
    q = q->next;
 8117b78:	687b      	ldr	r3, [r7, #4]
 8117b7a:	681b      	ldr	r3, [r3, #0]
 8117b7c:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8117b7e:	68fb      	ldr	r3, [r7, #12]
 8117b80:	685b      	ldr	r3, [r3, #4]
 8117b82:	2b00      	cmp	r3, #0
 8117b84:	d105      	bne.n	8117b92 <free_etharp_q+0x3a>
 8117b86:	4b0b      	ldr	r3, [pc, #44]	@ (8117bb4 <free_etharp_q+0x5c>)
 8117b88:	229a      	movs	r2, #154	@ 0x9a
 8117b8a:	490d      	ldr	r1, [pc, #52]	@ (8117bc0 <free_etharp_q+0x68>)
 8117b8c:	480b      	ldr	r0, [pc, #44]	@ (8117bbc <free_etharp_q+0x64>)
 8117b8e:	f00c fd65 	bl	812465c <iprintf>
    pbuf_free(r->p);
 8117b92:	68fb      	ldr	r3, [r7, #12]
 8117b94:	685b      	ldr	r3, [r3, #4]
 8117b96:	4618      	mov	r0, r3
 8117b98:	f004 f9b8 	bl	811bf0c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8117b9c:	68f9      	ldr	r1, [r7, #12]
 8117b9e:	2009      	movs	r0, #9
 8117ba0:	f003 fb12 	bl	811b1c8 <memp_free>
  while (q) {
 8117ba4:	687b      	ldr	r3, [r7, #4]
 8117ba6:	2b00      	cmp	r3, #0
 8117ba8:	d1e4      	bne.n	8117b74 <free_etharp_q+0x1c>
  }
}
 8117baa:	bf00      	nop
 8117bac:	bf00      	nop
 8117bae:	3710      	adds	r7, #16
 8117bb0:	46bd      	mov	sp, r7
 8117bb2:	bd80      	pop	{r7, pc}
 8117bb4:	081255bc 	.word	0x081255bc
 8117bb8:	08125638 	.word	0x08125638
 8117bbc:	08125644 	.word	0x08125644
 8117bc0:	0812566c 	.word	0x0812566c

08117bc4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8117bc4:	b580      	push	{r7, lr}
 8117bc6:	b082      	sub	sp, #8
 8117bc8:	af00      	add	r7, sp, #0
 8117bca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8117bcc:	4915      	ldr	r1, [pc, #84]	@ (8117c24 <etharp_free_entry+0x60>)
 8117bce:	687a      	ldr	r2, [r7, #4]
 8117bd0:	4613      	mov	r3, r2
 8117bd2:	005b      	lsls	r3, r3, #1
 8117bd4:	4413      	add	r3, r2
 8117bd6:	00db      	lsls	r3, r3, #3
 8117bd8:	440b      	add	r3, r1
 8117bda:	681b      	ldr	r3, [r3, #0]
 8117bdc:	2b00      	cmp	r3, #0
 8117bde:	d013      	beq.n	8117c08 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8117be0:	4910      	ldr	r1, [pc, #64]	@ (8117c24 <etharp_free_entry+0x60>)
 8117be2:	687a      	ldr	r2, [r7, #4]
 8117be4:	4613      	mov	r3, r2
 8117be6:	005b      	lsls	r3, r3, #1
 8117be8:	4413      	add	r3, r2
 8117bea:	00db      	lsls	r3, r3, #3
 8117bec:	440b      	add	r3, r1
 8117bee:	681b      	ldr	r3, [r3, #0]
 8117bf0:	4618      	mov	r0, r3
 8117bf2:	f7ff ffb1 	bl	8117b58 <free_etharp_q>
    arp_table[i].q = NULL;
 8117bf6:	490b      	ldr	r1, [pc, #44]	@ (8117c24 <etharp_free_entry+0x60>)
 8117bf8:	687a      	ldr	r2, [r7, #4]
 8117bfa:	4613      	mov	r3, r2
 8117bfc:	005b      	lsls	r3, r3, #1
 8117bfe:	4413      	add	r3, r2
 8117c00:	00db      	lsls	r3, r3, #3
 8117c02:	440b      	add	r3, r1
 8117c04:	2200      	movs	r2, #0
 8117c06:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8117c08:	4906      	ldr	r1, [pc, #24]	@ (8117c24 <etharp_free_entry+0x60>)
 8117c0a:	687a      	ldr	r2, [r7, #4]
 8117c0c:	4613      	mov	r3, r2
 8117c0e:	005b      	lsls	r3, r3, #1
 8117c10:	4413      	add	r3, r2
 8117c12:	00db      	lsls	r3, r3, #3
 8117c14:	440b      	add	r3, r1
 8117c16:	3314      	adds	r3, #20
 8117c18:	2200      	movs	r2, #0
 8117c1a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8117c1c:	bf00      	nop
 8117c1e:	3708      	adds	r7, #8
 8117c20:	46bd      	mov	sp, r7
 8117c22:	bd80      	pop	{r7, pc}
 8117c24:	1000b20c 	.word	0x1000b20c

08117c28 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8117c28:	b580      	push	{r7, lr}
 8117c2a:	b082      	sub	sp, #8
 8117c2c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8117c2e:	2300      	movs	r3, #0
 8117c30:	607b      	str	r3, [r7, #4]
 8117c32:	e09a      	b.n	8117d6a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8117c34:	4951      	ldr	r1, [pc, #324]	@ (8117d7c <etharp_tmr+0x154>)
 8117c36:	687a      	ldr	r2, [r7, #4]
 8117c38:	4613      	mov	r3, r2
 8117c3a:	005b      	lsls	r3, r3, #1
 8117c3c:	4413      	add	r3, r2
 8117c3e:	00db      	lsls	r3, r3, #3
 8117c40:	440b      	add	r3, r1
 8117c42:	3314      	adds	r3, #20
 8117c44:	781b      	ldrb	r3, [r3, #0]
 8117c46:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8117c48:	78fb      	ldrb	r3, [r7, #3]
 8117c4a:	2b00      	cmp	r3, #0
 8117c4c:	f000 808a 	beq.w	8117d64 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8117c50:	78fb      	ldrb	r3, [r7, #3]
 8117c52:	2b05      	cmp	r3, #5
 8117c54:	f000 8086 	beq.w	8117d64 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8117c58:	4948      	ldr	r1, [pc, #288]	@ (8117d7c <etharp_tmr+0x154>)
 8117c5a:	687a      	ldr	r2, [r7, #4]
 8117c5c:	4613      	mov	r3, r2
 8117c5e:	005b      	lsls	r3, r3, #1
 8117c60:	4413      	add	r3, r2
 8117c62:	00db      	lsls	r3, r3, #3
 8117c64:	440b      	add	r3, r1
 8117c66:	3312      	adds	r3, #18
 8117c68:	881b      	ldrh	r3, [r3, #0]
 8117c6a:	3301      	adds	r3, #1
 8117c6c:	b298      	uxth	r0, r3
 8117c6e:	4943      	ldr	r1, [pc, #268]	@ (8117d7c <etharp_tmr+0x154>)
 8117c70:	687a      	ldr	r2, [r7, #4]
 8117c72:	4613      	mov	r3, r2
 8117c74:	005b      	lsls	r3, r3, #1
 8117c76:	4413      	add	r3, r2
 8117c78:	00db      	lsls	r3, r3, #3
 8117c7a:	440b      	add	r3, r1
 8117c7c:	3312      	adds	r3, #18
 8117c7e:	4602      	mov	r2, r0
 8117c80:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8117c82:	493e      	ldr	r1, [pc, #248]	@ (8117d7c <etharp_tmr+0x154>)
 8117c84:	687a      	ldr	r2, [r7, #4]
 8117c86:	4613      	mov	r3, r2
 8117c88:	005b      	lsls	r3, r3, #1
 8117c8a:	4413      	add	r3, r2
 8117c8c:	00db      	lsls	r3, r3, #3
 8117c8e:	440b      	add	r3, r1
 8117c90:	3312      	adds	r3, #18
 8117c92:	881b      	ldrh	r3, [r3, #0]
 8117c94:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8117c98:	d215      	bcs.n	8117cc6 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8117c9a:	4938      	ldr	r1, [pc, #224]	@ (8117d7c <etharp_tmr+0x154>)
 8117c9c:	687a      	ldr	r2, [r7, #4]
 8117c9e:	4613      	mov	r3, r2
 8117ca0:	005b      	lsls	r3, r3, #1
 8117ca2:	4413      	add	r3, r2
 8117ca4:	00db      	lsls	r3, r3, #3
 8117ca6:	440b      	add	r3, r1
 8117ca8:	3314      	adds	r3, #20
 8117caa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8117cac:	2b01      	cmp	r3, #1
 8117cae:	d10e      	bne.n	8117cce <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8117cb0:	4932      	ldr	r1, [pc, #200]	@ (8117d7c <etharp_tmr+0x154>)
 8117cb2:	687a      	ldr	r2, [r7, #4]
 8117cb4:	4613      	mov	r3, r2
 8117cb6:	005b      	lsls	r3, r3, #1
 8117cb8:	4413      	add	r3, r2
 8117cba:	00db      	lsls	r3, r3, #3
 8117cbc:	440b      	add	r3, r1
 8117cbe:	3312      	adds	r3, #18
 8117cc0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8117cc2:	2b04      	cmp	r3, #4
 8117cc4:	d903      	bls.n	8117cce <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8117cc6:	6878      	ldr	r0, [r7, #4]
 8117cc8:	f7ff ff7c 	bl	8117bc4 <etharp_free_entry>
 8117ccc:	e04a      	b.n	8117d64 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8117cce:	492b      	ldr	r1, [pc, #172]	@ (8117d7c <etharp_tmr+0x154>)
 8117cd0:	687a      	ldr	r2, [r7, #4]
 8117cd2:	4613      	mov	r3, r2
 8117cd4:	005b      	lsls	r3, r3, #1
 8117cd6:	4413      	add	r3, r2
 8117cd8:	00db      	lsls	r3, r3, #3
 8117cda:	440b      	add	r3, r1
 8117cdc:	3314      	adds	r3, #20
 8117cde:	781b      	ldrb	r3, [r3, #0]
 8117ce0:	2b03      	cmp	r3, #3
 8117ce2:	d10a      	bne.n	8117cfa <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8117ce4:	4925      	ldr	r1, [pc, #148]	@ (8117d7c <etharp_tmr+0x154>)
 8117ce6:	687a      	ldr	r2, [r7, #4]
 8117ce8:	4613      	mov	r3, r2
 8117cea:	005b      	lsls	r3, r3, #1
 8117cec:	4413      	add	r3, r2
 8117cee:	00db      	lsls	r3, r3, #3
 8117cf0:	440b      	add	r3, r1
 8117cf2:	3314      	adds	r3, #20
 8117cf4:	2204      	movs	r2, #4
 8117cf6:	701a      	strb	r2, [r3, #0]
 8117cf8:	e034      	b.n	8117d64 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8117cfa:	4920      	ldr	r1, [pc, #128]	@ (8117d7c <etharp_tmr+0x154>)
 8117cfc:	687a      	ldr	r2, [r7, #4]
 8117cfe:	4613      	mov	r3, r2
 8117d00:	005b      	lsls	r3, r3, #1
 8117d02:	4413      	add	r3, r2
 8117d04:	00db      	lsls	r3, r3, #3
 8117d06:	440b      	add	r3, r1
 8117d08:	3314      	adds	r3, #20
 8117d0a:	781b      	ldrb	r3, [r3, #0]
 8117d0c:	2b04      	cmp	r3, #4
 8117d0e:	d10a      	bne.n	8117d26 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8117d10:	491a      	ldr	r1, [pc, #104]	@ (8117d7c <etharp_tmr+0x154>)
 8117d12:	687a      	ldr	r2, [r7, #4]
 8117d14:	4613      	mov	r3, r2
 8117d16:	005b      	lsls	r3, r3, #1
 8117d18:	4413      	add	r3, r2
 8117d1a:	00db      	lsls	r3, r3, #3
 8117d1c:	440b      	add	r3, r1
 8117d1e:	3314      	adds	r3, #20
 8117d20:	2202      	movs	r2, #2
 8117d22:	701a      	strb	r2, [r3, #0]
 8117d24:	e01e      	b.n	8117d64 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8117d26:	4915      	ldr	r1, [pc, #84]	@ (8117d7c <etharp_tmr+0x154>)
 8117d28:	687a      	ldr	r2, [r7, #4]
 8117d2a:	4613      	mov	r3, r2
 8117d2c:	005b      	lsls	r3, r3, #1
 8117d2e:	4413      	add	r3, r2
 8117d30:	00db      	lsls	r3, r3, #3
 8117d32:	440b      	add	r3, r1
 8117d34:	3314      	adds	r3, #20
 8117d36:	781b      	ldrb	r3, [r3, #0]
 8117d38:	2b01      	cmp	r3, #1
 8117d3a:	d113      	bne.n	8117d64 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8117d3c:	490f      	ldr	r1, [pc, #60]	@ (8117d7c <etharp_tmr+0x154>)
 8117d3e:	687a      	ldr	r2, [r7, #4]
 8117d40:	4613      	mov	r3, r2
 8117d42:	005b      	lsls	r3, r3, #1
 8117d44:	4413      	add	r3, r2
 8117d46:	00db      	lsls	r3, r3, #3
 8117d48:	440b      	add	r3, r1
 8117d4a:	3308      	adds	r3, #8
 8117d4c:	6818      	ldr	r0, [r3, #0]
 8117d4e:	687a      	ldr	r2, [r7, #4]
 8117d50:	4613      	mov	r3, r2
 8117d52:	005b      	lsls	r3, r3, #1
 8117d54:	4413      	add	r3, r2
 8117d56:	00db      	lsls	r3, r3, #3
 8117d58:	4a08      	ldr	r2, [pc, #32]	@ (8117d7c <etharp_tmr+0x154>)
 8117d5a:	4413      	add	r3, r2
 8117d5c:	3304      	adds	r3, #4
 8117d5e:	4619      	mov	r1, r3
 8117d60:	f000 fefe 	bl	8118b60 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8117d64:	687b      	ldr	r3, [r7, #4]
 8117d66:	3301      	adds	r3, #1
 8117d68:	607b      	str	r3, [r7, #4]
 8117d6a:	687b      	ldr	r3, [r7, #4]
 8117d6c:	2b09      	cmp	r3, #9
 8117d6e:	f77f af61 	ble.w	8117c34 <etharp_tmr+0xc>
      }
    }
  }
}
 8117d72:	bf00      	nop
 8117d74:	bf00      	nop
 8117d76:	3708      	adds	r7, #8
 8117d78:	46bd      	mov	sp, r7
 8117d7a:	bd80      	pop	{r7, pc}
 8117d7c:	1000b20c 	.word	0x1000b20c

08117d80 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8117d80:	b580      	push	{r7, lr}
 8117d82:	b08a      	sub	sp, #40	@ 0x28
 8117d84:	af00      	add	r7, sp, #0
 8117d86:	60f8      	str	r0, [r7, #12]
 8117d88:	460b      	mov	r3, r1
 8117d8a:	607a      	str	r2, [r7, #4]
 8117d8c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8117d8e:	230a      	movs	r3, #10
 8117d90:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8117d92:	230a      	movs	r3, #10
 8117d94:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8117d96:	230a      	movs	r3, #10
 8117d98:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8117d9a:	2300      	movs	r3, #0
 8117d9c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8117d9e:	230a      	movs	r3, #10
 8117da0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8117da2:	2300      	movs	r3, #0
 8117da4:	83bb      	strh	r3, [r7, #28]
 8117da6:	2300      	movs	r3, #0
 8117da8:	837b      	strh	r3, [r7, #26]
 8117daa:	2300      	movs	r3, #0
 8117dac:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8117dae:	2300      	movs	r3, #0
 8117db0:	843b      	strh	r3, [r7, #32]
 8117db2:	e0b1      	b.n	8117f18 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8117db4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117db8:	49a7      	ldr	r1, [pc, #668]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117dba:	4613      	mov	r3, r2
 8117dbc:	005b      	lsls	r3, r3, #1
 8117dbe:	4413      	add	r3, r2
 8117dc0:	00db      	lsls	r3, r3, #3
 8117dc2:	440b      	add	r3, r1
 8117dc4:	3314      	adds	r3, #20
 8117dc6:	781b      	ldrb	r3, [r3, #0]
 8117dc8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8117dca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8117dce:	2b0a      	cmp	r3, #10
 8117dd0:	d105      	bne.n	8117dde <etharp_find_entry+0x5e>
 8117dd2:	7dfb      	ldrb	r3, [r7, #23]
 8117dd4:	2b00      	cmp	r3, #0
 8117dd6:	d102      	bne.n	8117dde <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8117dd8:	8c3b      	ldrh	r3, [r7, #32]
 8117dda:	847b      	strh	r3, [r7, #34]	@ 0x22
 8117ddc:	e098      	b.n	8117f10 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 8117dde:	7dfb      	ldrb	r3, [r7, #23]
 8117de0:	2b00      	cmp	r3, #0
 8117de2:	f000 8095 	beq.w	8117f10 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8117de6:	7dfb      	ldrb	r3, [r7, #23]
 8117de8:	2b01      	cmp	r3, #1
 8117dea:	d009      	beq.n	8117e00 <etharp_find_entry+0x80>
 8117dec:	7dfb      	ldrb	r3, [r7, #23]
 8117dee:	2b01      	cmp	r3, #1
 8117df0:	d806      	bhi.n	8117e00 <etharp_find_entry+0x80>
 8117df2:	4b9a      	ldr	r3, [pc, #616]	@ (811805c <etharp_find_entry+0x2dc>)
 8117df4:	f240 1223 	movw	r2, #291	@ 0x123
 8117df8:	4999      	ldr	r1, [pc, #612]	@ (8118060 <etharp_find_entry+0x2e0>)
 8117dfa:	489a      	ldr	r0, [pc, #616]	@ (8118064 <etharp_find_entry+0x2e4>)
 8117dfc:	f00c fc2e 	bl	812465c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8117e00:	68fb      	ldr	r3, [r7, #12]
 8117e02:	2b00      	cmp	r3, #0
 8117e04:	d020      	beq.n	8117e48 <etharp_find_entry+0xc8>
 8117e06:	68fb      	ldr	r3, [r7, #12]
 8117e08:	6819      	ldr	r1, [r3, #0]
 8117e0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117e0e:	4892      	ldr	r0, [pc, #584]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117e10:	4613      	mov	r3, r2
 8117e12:	005b      	lsls	r3, r3, #1
 8117e14:	4413      	add	r3, r2
 8117e16:	00db      	lsls	r3, r3, #3
 8117e18:	4403      	add	r3, r0
 8117e1a:	3304      	adds	r3, #4
 8117e1c:	681b      	ldr	r3, [r3, #0]
 8117e1e:	4299      	cmp	r1, r3
 8117e20:	d112      	bne.n	8117e48 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8117e22:	687b      	ldr	r3, [r7, #4]
 8117e24:	2b00      	cmp	r3, #0
 8117e26:	d00c      	beq.n	8117e42 <etharp_find_entry+0xc2>
 8117e28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117e2c:	498a      	ldr	r1, [pc, #552]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117e2e:	4613      	mov	r3, r2
 8117e30:	005b      	lsls	r3, r3, #1
 8117e32:	4413      	add	r3, r2
 8117e34:	00db      	lsls	r3, r3, #3
 8117e36:	440b      	add	r3, r1
 8117e38:	3308      	adds	r3, #8
 8117e3a:	681b      	ldr	r3, [r3, #0]
 8117e3c:	687a      	ldr	r2, [r7, #4]
 8117e3e:	429a      	cmp	r2, r3
 8117e40:	d102      	bne.n	8117e48 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8117e42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8117e46:	e103      	b.n	8118050 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8117e48:	7dfb      	ldrb	r3, [r7, #23]
 8117e4a:	2b01      	cmp	r3, #1
 8117e4c:	d140      	bne.n	8117ed0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8117e4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117e52:	4981      	ldr	r1, [pc, #516]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117e54:	4613      	mov	r3, r2
 8117e56:	005b      	lsls	r3, r3, #1
 8117e58:	4413      	add	r3, r2
 8117e5a:	00db      	lsls	r3, r3, #3
 8117e5c:	440b      	add	r3, r1
 8117e5e:	681b      	ldr	r3, [r3, #0]
 8117e60:	2b00      	cmp	r3, #0
 8117e62:	d01a      	beq.n	8117e9a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8117e64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117e68:	497b      	ldr	r1, [pc, #492]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117e6a:	4613      	mov	r3, r2
 8117e6c:	005b      	lsls	r3, r3, #1
 8117e6e:	4413      	add	r3, r2
 8117e70:	00db      	lsls	r3, r3, #3
 8117e72:	440b      	add	r3, r1
 8117e74:	3312      	adds	r3, #18
 8117e76:	881b      	ldrh	r3, [r3, #0]
 8117e78:	8bba      	ldrh	r2, [r7, #28]
 8117e7a:	429a      	cmp	r2, r3
 8117e7c:	d848      	bhi.n	8117f10 <etharp_find_entry+0x190>
            old_queue = i;
 8117e7e:	8c3b      	ldrh	r3, [r7, #32]
 8117e80:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8117e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117e86:	4974      	ldr	r1, [pc, #464]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117e88:	4613      	mov	r3, r2
 8117e8a:	005b      	lsls	r3, r3, #1
 8117e8c:	4413      	add	r3, r2
 8117e8e:	00db      	lsls	r3, r3, #3
 8117e90:	440b      	add	r3, r1
 8117e92:	3312      	adds	r3, #18
 8117e94:	881b      	ldrh	r3, [r3, #0]
 8117e96:	83bb      	strh	r3, [r7, #28]
 8117e98:	e03a      	b.n	8117f10 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8117e9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117e9e:	496e      	ldr	r1, [pc, #440]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117ea0:	4613      	mov	r3, r2
 8117ea2:	005b      	lsls	r3, r3, #1
 8117ea4:	4413      	add	r3, r2
 8117ea6:	00db      	lsls	r3, r3, #3
 8117ea8:	440b      	add	r3, r1
 8117eaa:	3312      	adds	r3, #18
 8117eac:	881b      	ldrh	r3, [r3, #0]
 8117eae:	8b7a      	ldrh	r2, [r7, #26]
 8117eb0:	429a      	cmp	r2, r3
 8117eb2:	d82d      	bhi.n	8117f10 <etharp_find_entry+0x190>
            old_pending = i;
 8117eb4:	8c3b      	ldrh	r3, [r7, #32]
 8117eb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8117eb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117ebc:	4966      	ldr	r1, [pc, #408]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117ebe:	4613      	mov	r3, r2
 8117ec0:	005b      	lsls	r3, r3, #1
 8117ec2:	4413      	add	r3, r2
 8117ec4:	00db      	lsls	r3, r3, #3
 8117ec6:	440b      	add	r3, r1
 8117ec8:	3312      	adds	r3, #18
 8117eca:	881b      	ldrh	r3, [r3, #0]
 8117ecc:	837b      	strh	r3, [r7, #26]
 8117ece:	e01f      	b.n	8117f10 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8117ed0:	7dfb      	ldrb	r3, [r7, #23]
 8117ed2:	2b01      	cmp	r3, #1
 8117ed4:	d91c      	bls.n	8117f10 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8117ed6:	7dfb      	ldrb	r3, [r7, #23]
 8117ed8:	2b04      	cmp	r3, #4
 8117eda:	d819      	bhi.n	8117f10 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8117edc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117ee0:	495d      	ldr	r1, [pc, #372]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117ee2:	4613      	mov	r3, r2
 8117ee4:	005b      	lsls	r3, r3, #1
 8117ee6:	4413      	add	r3, r2
 8117ee8:	00db      	lsls	r3, r3, #3
 8117eea:	440b      	add	r3, r1
 8117eec:	3312      	adds	r3, #18
 8117eee:	881b      	ldrh	r3, [r3, #0]
 8117ef0:	8b3a      	ldrh	r2, [r7, #24]
 8117ef2:	429a      	cmp	r2, r3
 8117ef4:	d80c      	bhi.n	8117f10 <etharp_find_entry+0x190>
            old_stable = i;
 8117ef6:	8c3b      	ldrh	r3, [r7, #32]
 8117ef8:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8117efa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117efe:	4956      	ldr	r1, [pc, #344]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117f00:	4613      	mov	r3, r2
 8117f02:	005b      	lsls	r3, r3, #1
 8117f04:	4413      	add	r3, r2
 8117f06:	00db      	lsls	r3, r3, #3
 8117f08:	440b      	add	r3, r1
 8117f0a:	3312      	adds	r3, #18
 8117f0c:	881b      	ldrh	r3, [r3, #0]
 8117f0e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8117f10:	8c3b      	ldrh	r3, [r7, #32]
 8117f12:	3301      	adds	r3, #1
 8117f14:	b29b      	uxth	r3, r3
 8117f16:	843b      	strh	r3, [r7, #32]
 8117f18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8117f1c:	2b09      	cmp	r3, #9
 8117f1e:	f77f af49 	ble.w	8117db4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8117f22:	7afb      	ldrb	r3, [r7, #11]
 8117f24:	f003 0302 	and.w	r3, r3, #2
 8117f28:	2b00      	cmp	r3, #0
 8117f2a:	d108      	bne.n	8117f3e <etharp_find_entry+0x1be>
 8117f2c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8117f30:	2b0a      	cmp	r3, #10
 8117f32:	d107      	bne.n	8117f44 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8117f34:	7afb      	ldrb	r3, [r7, #11]
 8117f36:	f003 0301 	and.w	r3, r3, #1
 8117f3a:	2b00      	cmp	r3, #0
 8117f3c:	d102      	bne.n	8117f44 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8117f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8117f42:	e085      	b.n	8118050 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8117f44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8117f48:	2b09      	cmp	r3, #9
 8117f4a:	dc02      	bgt.n	8117f52 <etharp_find_entry+0x1d2>
    i = empty;
 8117f4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8117f4e:	843b      	strh	r3, [r7, #32]
 8117f50:	e039      	b.n	8117fc6 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8117f52:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8117f56:	2b09      	cmp	r3, #9
 8117f58:	dc14      	bgt.n	8117f84 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 8117f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8117f5c:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8117f5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117f62:	493d      	ldr	r1, [pc, #244]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117f64:	4613      	mov	r3, r2
 8117f66:	005b      	lsls	r3, r3, #1
 8117f68:	4413      	add	r3, r2
 8117f6a:	00db      	lsls	r3, r3, #3
 8117f6c:	440b      	add	r3, r1
 8117f6e:	681b      	ldr	r3, [r3, #0]
 8117f70:	2b00      	cmp	r3, #0
 8117f72:	d018      	beq.n	8117fa6 <etharp_find_entry+0x226>
 8117f74:	4b39      	ldr	r3, [pc, #228]	@ (811805c <etharp_find_entry+0x2dc>)
 8117f76:	f240 126d 	movw	r2, #365	@ 0x16d
 8117f7a:	493b      	ldr	r1, [pc, #236]	@ (8118068 <etharp_find_entry+0x2e8>)
 8117f7c:	4839      	ldr	r0, [pc, #228]	@ (8118064 <etharp_find_entry+0x2e4>)
 8117f7e:	f00c fb6d 	bl	812465c <iprintf>
 8117f82:	e010      	b.n	8117fa6 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8117f84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8117f88:	2b09      	cmp	r3, #9
 8117f8a:	dc02      	bgt.n	8117f92 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 8117f8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8117f8e:	843b      	strh	r3, [r7, #32]
 8117f90:	e009      	b.n	8117fa6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8117f92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8117f96:	2b09      	cmp	r3, #9
 8117f98:	dc02      	bgt.n	8117fa0 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8117f9a:	8bfb      	ldrh	r3, [r7, #30]
 8117f9c:	843b      	strh	r3, [r7, #32]
 8117f9e:	e002      	b.n	8117fa6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8117fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8117fa4:	e054      	b.n	8118050 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8117fa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8117faa:	2b09      	cmp	r3, #9
 8117fac:	dd06      	ble.n	8117fbc <etharp_find_entry+0x23c>
 8117fae:	4b2b      	ldr	r3, [pc, #172]	@ (811805c <etharp_find_entry+0x2dc>)
 8117fb0:	f240 127f 	movw	r2, #383	@ 0x17f
 8117fb4:	492d      	ldr	r1, [pc, #180]	@ (811806c <etharp_find_entry+0x2ec>)
 8117fb6:	482b      	ldr	r0, [pc, #172]	@ (8118064 <etharp_find_entry+0x2e4>)
 8117fb8:	f00c fb50 	bl	812465c <iprintf>
    etharp_free_entry(i);
 8117fbc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8117fc0:	4618      	mov	r0, r3
 8117fc2:	f7ff fdff 	bl	8117bc4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8117fc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8117fca:	2b09      	cmp	r3, #9
 8117fcc:	dd06      	ble.n	8117fdc <etharp_find_entry+0x25c>
 8117fce:	4b23      	ldr	r3, [pc, #140]	@ (811805c <etharp_find_entry+0x2dc>)
 8117fd0:	f240 1283 	movw	r2, #387	@ 0x183
 8117fd4:	4925      	ldr	r1, [pc, #148]	@ (811806c <etharp_find_entry+0x2ec>)
 8117fd6:	4823      	ldr	r0, [pc, #140]	@ (8118064 <etharp_find_entry+0x2e4>)
 8117fd8:	f00c fb40 	bl	812465c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8117fdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8117fe0:	491d      	ldr	r1, [pc, #116]	@ (8118058 <etharp_find_entry+0x2d8>)
 8117fe2:	4613      	mov	r3, r2
 8117fe4:	005b      	lsls	r3, r3, #1
 8117fe6:	4413      	add	r3, r2
 8117fe8:	00db      	lsls	r3, r3, #3
 8117fea:	440b      	add	r3, r1
 8117fec:	3314      	adds	r3, #20
 8117fee:	781b      	ldrb	r3, [r3, #0]
 8117ff0:	2b00      	cmp	r3, #0
 8117ff2:	d006      	beq.n	8118002 <etharp_find_entry+0x282>
 8117ff4:	4b19      	ldr	r3, [pc, #100]	@ (811805c <etharp_find_entry+0x2dc>)
 8117ff6:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8117ffa:	491d      	ldr	r1, [pc, #116]	@ (8118070 <etharp_find_entry+0x2f0>)
 8117ffc:	4819      	ldr	r0, [pc, #100]	@ (8118064 <etharp_find_entry+0x2e4>)
 8117ffe:	f00c fb2d 	bl	812465c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8118002:	68fb      	ldr	r3, [r7, #12]
 8118004:	2b00      	cmp	r3, #0
 8118006:	d00b      	beq.n	8118020 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8118008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811800c:	68fb      	ldr	r3, [r7, #12]
 811800e:	6819      	ldr	r1, [r3, #0]
 8118010:	4811      	ldr	r0, [pc, #68]	@ (8118058 <etharp_find_entry+0x2d8>)
 8118012:	4613      	mov	r3, r2
 8118014:	005b      	lsls	r3, r3, #1
 8118016:	4413      	add	r3, r2
 8118018:	00db      	lsls	r3, r3, #3
 811801a:	4403      	add	r3, r0
 811801c:	3304      	adds	r3, #4
 811801e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8118020:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8118024:	490c      	ldr	r1, [pc, #48]	@ (8118058 <etharp_find_entry+0x2d8>)
 8118026:	4613      	mov	r3, r2
 8118028:	005b      	lsls	r3, r3, #1
 811802a:	4413      	add	r3, r2
 811802c:	00db      	lsls	r3, r3, #3
 811802e:	440b      	add	r3, r1
 8118030:	3312      	adds	r3, #18
 8118032:	2200      	movs	r2, #0
 8118034:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8118036:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811803a:	4907      	ldr	r1, [pc, #28]	@ (8118058 <etharp_find_entry+0x2d8>)
 811803c:	4613      	mov	r3, r2
 811803e:	005b      	lsls	r3, r3, #1
 8118040:	4413      	add	r3, r2
 8118042:	00db      	lsls	r3, r3, #3
 8118044:	440b      	add	r3, r1
 8118046:	3308      	adds	r3, #8
 8118048:	687a      	ldr	r2, [r7, #4]
 811804a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 811804c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8118050:	4618      	mov	r0, r3
 8118052:	3728      	adds	r7, #40	@ 0x28
 8118054:	46bd      	mov	sp, r7
 8118056:	bd80      	pop	{r7, pc}
 8118058:	1000b20c 	.word	0x1000b20c
 811805c:	081255bc 	.word	0x081255bc
 8118060:	0812567c 	.word	0x0812567c
 8118064:	08125644 	.word	0x08125644
 8118068:	081256bc 	.word	0x081256bc
 811806c:	081256d4 	.word	0x081256d4
 8118070:	081256e8 	.word	0x081256e8

08118074 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8118074:	b580      	push	{r7, lr}
 8118076:	b08a      	sub	sp, #40	@ 0x28
 8118078:	af02      	add	r7, sp, #8
 811807a:	60f8      	str	r0, [r7, #12]
 811807c:	60b9      	str	r1, [r7, #8]
 811807e:	607a      	str	r2, [r7, #4]
 8118080:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8118082:	68fb      	ldr	r3, [r7, #12]
 8118084:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8118088:	2b06      	cmp	r3, #6
 811808a:	d006      	beq.n	811809a <etharp_update_arp_entry+0x26>
 811808c:	4b5c      	ldr	r3, [pc, #368]	@ (8118200 <etharp_update_arp_entry+0x18c>)
 811808e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8118092:	495c      	ldr	r1, [pc, #368]	@ (8118204 <etharp_update_arp_entry+0x190>)
 8118094:	485c      	ldr	r0, [pc, #368]	@ (8118208 <etharp_update_arp_entry+0x194>)
 8118096:	f00c fae1 	bl	812465c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 811809a:	68bb      	ldr	r3, [r7, #8]
 811809c:	2b00      	cmp	r3, #0
 811809e:	d012      	beq.n	81180c6 <etharp_update_arp_entry+0x52>
 81180a0:	68bb      	ldr	r3, [r7, #8]
 81180a2:	681b      	ldr	r3, [r3, #0]
 81180a4:	2b00      	cmp	r3, #0
 81180a6:	d00e      	beq.n	81180c6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 81180a8:	68bb      	ldr	r3, [r7, #8]
 81180aa:	681b      	ldr	r3, [r3, #0]
 81180ac:	68f9      	ldr	r1, [r7, #12]
 81180ae:	4618      	mov	r0, r3
 81180b0:	f001 fb5c 	bl	811976c <ip4_addr_isbroadcast_u32>
 81180b4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 81180b6:	2b00      	cmp	r3, #0
 81180b8:	d105      	bne.n	81180c6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 81180ba:	68bb      	ldr	r3, [r7, #8]
 81180bc:	681b      	ldr	r3, [r3, #0]
 81180be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 81180c2:	2be0      	cmp	r3, #224	@ 0xe0
 81180c4:	d102      	bne.n	81180cc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 81180c6:	f06f 030f 	mvn.w	r3, #15
 81180ca:	e095      	b.n	81181f8 <etharp_update_arp_entry+0x184>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 81180cc:	78fb      	ldrb	r3, [r7, #3]
 81180ce:	68fa      	ldr	r2, [r7, #12]
 81180d0:	4619      	mov	r1, r3
 81180d2:	68b8      	ldr	r0, [r7, #8]
 81180d4:	f7ff fe54 	bl	8117d80 <etharp_find_entry>
 81180d8:	4603      	mov	r3, r0
 81180da:	83fb      	strh	r3, [r7, #30]
  /* bail out if no entry could be found */
  if (i < 0) {
 81180dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 81180e0:	2b00      	cmp	r3, #0
 81180e2:	da02      	bge.n	81180ea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 81180e4:	8bfb      	ldrh	r3, [r7, #30]
 81180e6:	b25b      	sxtb	r3, r3
 81180e8:	e086      	b.n	81181f8 <etharp_update_arp_entry+0x184>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 81180ea:	78fb      	ldrb	r3, [r7, #3]
 81180ec:	f003 0304 	and.w	r3, r3, #4
 81180f0:	2b00      	cmp	r3, #0
 81180f2:	d00b      	beq.n	811810c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 81180f4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81180f8:	4944      	ldr	r1, [pc, #272]	@ (811820c <etharp_update_arp_entry+0x198>)
 81180fa:	4613      	mov	r3, r2
 81180fc:	005b      	lsls	r3, r3, #1
 81180fe:	4413      	add	r3, r2
 8118100:	00db      	lsls	r3, r3, #3
 8118102:	440b      	add	r3, r1
 8118104:	3314      	adds	r3, #20
 8118106:	2205      	movs	r2, #5
 8118108:	701a      	strb	r2, [r3, #0]
 811810a:	e019      	b.n	8118140 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 811810c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8118110:	493e      	ldr	r1, [pc, #248]	@ (811820c <etharp_update_arp_entry+0x198>)
 8118112:	4613      	mov	r3, r2
 8118114:	005b      	lsls	r3, r3, #1
 8118116:	4413      	add	r3, r2
 8118118:	00db      	lsls	r3, r3, #3
 811811a:	440b      	add	r3, r1
 811811c:	3314      	adds	r3, #20
 811811e:	781b      	ldrb	r3, [r3, #0]
 8118120:	2b05      	cmp	r3, #5
 8118122:	d102      	bne.n	811812a <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8118124:	f06f 0305 	mvn.w	r3, #5
 8118128:	e066      	b.n	81181f8 <etharp_update_arp_entry+0x184>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 811812a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811812e:	4937      	ldr	r1, [pc, #220]	@ (811820c <etharp_update_arp_entry+0x198>)
 8118130:	4613      	mov	r3, r2
 8118132:	005b      	lsls	r3, r3, #1
 8118134:	4413      	add	r3, r2
 8118136:	00db      	lsls	r3, r3, #3
 8118138:	440b      	add	r3, r1
 811813a:	3314      	adds	r3, #20
 811813c:	2202      	movs	r2, #2
 811813e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8118140:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8118144:	4931      	ldr	r1, [pc, #196]	@ (811820c <etharp_update_arp_entry+0x198>)
 8118146:	4613      	mov	r3, r2
 8118148:	005b      	lsls	r3, r3, #1
 811814a:	4413      	add	r3, r2
 811814c:	00db      	lsls	r3, r3, #3
 811814e:	440b      	add	r3, r1
 8118150:	3308      	adds	r3, #8
 8118152:	68fa      	ldr	r2, [r7, #12]
 8118154:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8118156:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 811815a:	4613      	mov	r3, r2
 811815c:	005b      	lsls	r3, r3, #1
 811815e:	4413      	add	r3, r2
 8118160:	00db      	lsls	r3, r3, #3
 8118162:	3308      	adds	r3, #8
 8118164:	4a29      	ldr	r2, [pc, #164]	@ (811820c <etharp_update_arp_entry+0x198>)
 8118166:	4413      	add	r3, r2
 8118168:	3304      	adds	r3, #4
 811816a:	2206      	movs	r2, #6
 811816c:	6879      	ldr	r1, [r7, #4]
 811816e:	4618      	mov	r0, r3
 8118170:	f00c fcd7 	bl	8124b22 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8118174:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8118178:	4924      	ldr	r1, [pc, #144]	@ (811820c <etharp_update_arp_entry+0x198>)
 811817a:	4613      	mov	r3, r2
 811817c:	005b      	lsls	r3, r3, #1
 811817e:	4413      	add	r3, r2
 8118180:	00db      	lsls	r3, r3, #3
 8118182:	440b      	add	r3, r1
 8118184:	3312      	adds	r3, #18
 8118186:	2200      	movs	r2, #0
 8118188:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 811818a:	e029      	b.n	81181e0 <etharp_update_arp_entry+0x16c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 811818c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8118190:	491e      	ldr	r1, [pc, #120]	@ (811820c <etharp_update_arp_entry+0x198>)
 8118192:	4613      	mov	r3, r2
 8118194:	005b      	lsls	r3, r3, #1
 8118196:	4413      	add	r3, r2
 8118198:	00db      	lsls	r3, r3, #3
 811819a:	440b      	add	r3, r1
 811819c:	681b      	ldr	r3, [r3, #0]
 811819e:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 81181a0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81181a4:	69bb      	ldr	r3, [r7, #24]
 81181a6:	6819      	ldr	r1, [r3, #0]
 81181a8:	4818      	ldr	r0, [pc, #96]	@ (811820c <etharp_update_arp_entry+0x198>)
 81181aa:	4613      	mov	r3, r2
 81181ac:	005b      	lsls	r3, r3, #1
 81181ae:	4413      	add	r3, r2
 81181b0:	00db      	lsls	r3, r3, #3
 81181b2:	4403      	add	r3, r0
 81181b4:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 81181b6:	69bb      	ldr	r3, [r7, #24]
 81181b8:	685b      	ldr	r3, [r3, #4]
 81181ba:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 81181bc:	69b9      	ldr	r1, [r7, #24]
 81181be:	2009      	movs	r0, #9
 81181c0:	f003 f802 	bl	811b1c8 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 81181c4:	68fb      	ldr	r3, [r7, #12]
 81181c6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 81181ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81181ce:	9300      	str	r3, [sp, #0]
 81181d0:	687b      	ldr	r3, [r7, #4]
 81181d2:	6979      	ldr	r1, [r7, #20]
 81181d4:	68f8      	ldr	r0, [r7, #12]
 81181d6:	f000 fd63 	bl	8118ca0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 81181da:	6978      	ldr	r0, [r7, #20]
 81181dc:	f003 fe96 	bl	811bf0c <pbuf_free>
  while (arp_table[i].q != NULL) {
 81181e0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81181e4:	4909      	ldr	r1, [pc, #36]	@ (811820c <etharp_update_arp_entry+0x198>)
 81181e6:	4613      	mov	r3, r2
 81181e8:	005b      	lsls	r3, r3, #1
 81181ea:	4413      	add	r3, r2
 81181ec:	00db      	lsls	r3, r3, #3
 81181ee:	440b      	add	r3, r1
 81181f0:	681b      	ldr	r3, [r3, #0]
 81181f2:	2b00      	cmp	r3, #0
 81181f4:	d1ca      	bne.n	811818c <etharp_update_arp_entry+0x118>
  }
  return ERR_OK;
 81181f6:	2300      	movs	r3, #0
}
 81181f8:	4618      	mov	r0, r3
 81181fa:	3720      	adds	r7, #32
 81181fc:	46bd      	mov	sp, r7
 81181fe:	bd80      	pop	{r7, pc}
 8118200:	081255bc 	.word	0x081255bc
 8118204:	08125714 	.word	0x08125714
 8118208:	08125644 	.word	0x08125644
 811820c:	1000b20c 	.word	0x1000b20c

08118210 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8118210:	b580      	push	{r7, lr}
 8118212:	b084      	sub	sp, #16
 8118214:	af00      	add	r7, sp, #0
 8118216:	6078      	str	r0, [r7, #4]
 8118218:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 811821a:	6878      	ldr	r0, [r7, #4]
 811821c:	f001 f810 	bl	8119240 <ip4_route>
 8118220:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8118222:	68fb      	ldr	r3, [r7, #12]
 8118224:	2b00      	cmp	r3, #0
 8118226:	d102      	bne.n	811822e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8118228:	f06f 0303 	mvn.w	r3, #3
 811822c:	e006      	b.n	811823c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 811822e:	2305      	movs	r3, #5
 8118230:	683a      	ldr	r2, [r7, #0]
 8118232:	6879      	ldr	r1, [r7, #4]
 8118234:	68f8      	ldr	r0, [r7, #12]
 8118236:	f7ff ff1d 	bl	8118074 <etharp_update_arp_entry>
 811823a:	4603      	mov	r3, r0
}
 811823c:	4618      	mov	r0, r3
 811823e:	3710      	adds	r7, #16
 8118240:	46bd      	mov	sp, r7
 8118242:	bd80      	pop	{r7, pc}

08118244 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8118244:	b580      	push	{r7, lr}
 8118246:	b084      	sub	sp, #16
 8118248:	af00      	add	r7, sp, #0
 811824a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811824c:	2300      	movs	r3, #0
 811824e:	60fb      	str	r3, [r7, #12]
 8118250:	e01e      	b.n	8118290 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8118252:	4913      	ldr	r1, [pc, #76]	@ (81182a0 <etharp_cleanup_netif+0x5c>)
 8118254:	68fa      	ldr	r2, [r7, #12]
 8118256:	4613      	mov	r3, r2
 8118258:	005b      	lsls	r3, r3, #1
 811825a:	4413      	add	r3, r2
 811825c:	00db      	lsls	r3, r3, #3
 811825e:	440b      	add	r3, r1
 8118260:	3314      	adds	r3, #20
 8118262:	781b      	ldrb	r3, [r3, #0]
 8118264:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8118266:	7afb      	ldrb	r3, [r7, #11]
 8118268:	2b00      	cmp	r3, #0
 811826a:	d00e      	beq.n	811828a <etharp_cleanup_netif+0x46>
 811826c:	490c      	ldr	r1, [pc, #48]	@ (81182a0 <etharp_cleanup_netif+0x5c>)
 811826e:	68fa      	ldr	r2, [r7, #12]
 8118270:	4613      	mov	r3, r2
 8118272:	005b      	lsls	r3, r3, #1
 8118274:	4413      	add	r3, r2
 8118276:	00db      	lsls	r3, r3, #3
 8118278:	440b      	add	r3, r1
 811827a:	3308      	adds	r3, #8
 811827c:	681b      	ldr	r3, [r3, #0]
 811827e:	687a      	ldr	r2, [r7, #4]
 8118280:	429a      	cmp	r2, r3
 8118282:	d102      	bne.n	811828a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8118284:	68f8      	ldr	r0, [r7, #12]
 8118286:	f7ff fc9d 	bl	8117bc4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811828a:	68fb      	ldr	r3, [r7, #12]
 811828c:	3301      	adds	r3, #1
 811828e:	60fb      	str	r3, [r7, #12]
 8118290:	68fb      	ldr	r3, [r7, #12]
 8118292:	2b09      	cmp	r3, #9
 8118294:	dddd      	ble.n	8118252 <etharp_cleanup_netif+0xe>
    }
  }
}
 8118296:	bf00      	nop
 8118298:	bf00      	nop
 811829a:	3710      	adds	r7, #16
 811829c:	46bd      	mov	sp, r7
 811829e:	bd80      	pop	{r7, pc}
 81182a0:	1000b20c 	.word	0x1000b20c

081182a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 81182a4:	b5b0      	push	{r4, r5, r7, lr}
 81182a6:	b08a      	sub	sp, #40	@ 0x28
 81182a8:	af04      	add	r7, sp, #16
 81182aa:	6078      	str	r0, [r7, #4]
 81182ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 81182ae:	683b      	ldr	r3, [r7, #0]
 81182b0:	2b00      	cmp	r3, #0
 81182b2:	d107      	bne.n	81182c4 <etharp_input+0x20>
 81182b4:	4b3d      	ldr	r3, [pc, #244]	@ (81183ac <etharp_input+0x108>)
 81182b6:	f240 228a 	movw	r2, #650	@ 0x28a
 81182ba:	493d      	ldr	r1, [pc, #244]	@ (81183b0 <etharp_input+0x10c>)
 81182bc:	483d      	ldr	r0, [pc, #244]	@ (81183b4 <etharp_input+0x110>)
 81182be:	f00c f9cd 	bl	812465c <iprintf>
 81182c2:	e06f      	b.n	81183a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 81182c4:	687b      	ldr	r3, [r7, #4]
 81182c6:	685b      	ldr	r3, [r3, #4]
 81182c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 81182ca:	693b      	ldr	r3, [r7, #16]
 81182cc:	881b      	ldrh	r3, [r3, #0]
 81182ce:	b29b      	uxth	r3, r3
 81182d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81182d4:	d10c      	bne.n	81182f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 81182d6:	693b      	ldr	r3, [r7, #16]
 81182d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 81182da:	2b06      	cmp	r3, #6
 81182dc:	d108      	bne.n	81182f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 81182de:	693b      	ldr	r3, [r7, #16]
 81182e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 81182e2:	2b04      	cmp	r3, #4
 81182e4:	d104      	bne.n	81182f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 81182e6:	693b      	ldr	r3, [r7, #16]
 81182e8:	885b      	ldrh	r3, [r3, #2]
 81182ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 81182ec:	2b08      	cmp	r3, #8
 81182ee:	d003      	beq.n	81182f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 81182f0:	6878      	ldr	r0, [r7, #4]
 81182f2:	f003 fe0b 	bl	811bf0c <pbuf_free>
    return;
 81182f6:	e055      	b.n	81183a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 81182f8:	693b      	ldr	r3, [r7, #16]
 81182fa:	330e      	adds	r3, #14
 81182fc:	681b      	ldr	r3, [r3, #0]
 81182fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8118300:	693b      	ldr	r3, [r7, #16]
 8118302:	3318      	adds	r3, #24
 8118304:	681b      	ldr	r3, [r3, #0]
 8118306:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8118308:	683b      	ldr	r3, [r7, #0]
 811830a:	3304      	adds	r3, #4
 811830c:	681b      	ldr	r3, [r3, #0]
 811830e:	2b00      	cmp	r3, #0
 8118310:	d102      	bne.n	8118318 <etharp_input+0x74>
    for_us = 0;
 8118312:	2300      	movs	r3, #0
 8118314:	75fb      	strb	r3, [r7, #23]
 8118316:	e009      	b.n	811832c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8118318:	68ba      	ldr	r2, [r7, #8]
 811831a:	683b      	ldr	r3, [r7, #0]
 811831c:	3304      	adds	r3, #4
 811831e:	681b      	ldr	r3, [r3, #0]
 8118320:	429a      	cmp	r2, r3
 8118322:	bf0c      	ite	eq
 8118324:	2301      	moveq	r3, #1
 8118326:	2300      	movne	r3, #0
 8118328:	b2db      	uxtb	r3, r3
 811832a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 811832c:	693b      	ldr	r3, [r7, #16]
 811832e:	f103 0208 	add.w	r2, r3, #8
 8118332:	7dfb      	ldrb	r3, [r7, #23]
 8118334:	2b00      	cmp	r3, #0
 8118336:	d001      	beq.n	811833c <etharp_input+0x98>
 8118338:	2301      	movs	r3, #1
 811833a:	e000      	b.n	811833e <etharp_input+0x9a>
 811833c:	2302      	movs	r3, #2
 811833e:	f107 010c 	add.w	r1, r7, #12
 8118342:	6838      	ldr	r0, [r7, #0]
 8118344:	f7ff fe96 	bl	8118074 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8118348:	693b      	ldr	r3, [r7, #16]
 811834a:	88db      	ldrh	r3, [r3, #6]
 811834c:	b29b      	uxth	r3, r3
 811834e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8118352:	d003      	beq.n	811835c <etharp_input+0xb8>
 8118354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8118358:	d01e      	beq.n	8118398 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 811835a:	e020      	b.n	811839e <etharp_input+0xfa>
      if (for_us) {
 811835c:	7dfb      	ldrb	r3, [r7, #23]
 811835e:	2b00      	cmp	r3, #0
 8118360:	d01c      	beq.n	811839c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8118362:	683b      	ldr	r3, [r7, #0]
 8118364:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8118368:	693b      	ldr	r3, [r7, #16]
 811836a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 811836e:	683b      	ldr	r3, [r7, #0]
 8118370:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8118374:	683b      	ldr	r3, [r7, #0]
 8118376:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8118378:	693a      	ldr	r2, [r7, #16]
 811837a:	3208      	adds	r2, #8
        etharp_raw(netif,
 811837c:	2102      	movs	r1, #2
 811837e:	9103      	str	r1, [sp, #12]
 8118380:	f107 010c 	add.w	r1, r7, #12
 8118384:	9102      	str	r1, [sp, #8]
 8118386:	9201      	str	r2, [sp, #4]
 8118388:	9300      	str	r3, [sp, #0]
 811838a:	462b      	mov	r3, r5
 811838c:	4622      	mov	r2, r4
 811838e:	4601      	mov	r1, r0
 8118390:	6838      	ldr	r0, [r7, #0]
 8118392:	f000 fb37 	bl	8118a04 <etharp_raw>
      break;
 8118396:	e001      	b.n	811839c <etharp_input+0xf8>
      break;
 8118398:	bf00      	nop
 811839a:	e000      	b.n	811839e <etharp_input+0xfa>
      break;
 811839c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 811839e:	6878      	ldr	r0, [r7, #4]
 81183a0:	f003 fdb4 	bl	811bf0c <pbuf_free>
}
 81183a4:	3718      	adds	r7, #24
 81183a6:	46bd      	mov	sp, r7
 81183a8:	bdb0      	pop	{r4, r5, r7, pc}
 81183aa:	bf00      	nop
 81183ac:	081255bc 	.word	0x081255bc
 81183b0:	0812576c 	.word	0x0812576c
 81183b4:	08125644 	.word	0x08125644

081183b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 81183b8:	b580      	push	{r7, lr}
 81183ba:	b086      	sub	sp, #24
 81183bc:	af02      	add	r7, sp, #8
 81183be:	60f8      	str	r0, [r7, #12]
 81183c0:	60b9      	str	r1, [r7, #8]
 81183c2:	4613      	mov	r3, r2
 81183c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 81183c6:	79fa      	ldrb	r2, [r7, #7]
 81183c8:	4944      	ldr	r1, [pc, #272]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 81183ca:	4613      	mov	r3, r2
 81183cc:	005b      	lsls	r3, r3, #1
 81183ce:	4413      	add	r3, r2
 81183d0:	00db      	lsls	r3, r3, #3
 81183d2:	440b      	add	r3, r1
 81183d4:	3314      	adds	r3, #20
 81183d6:	781b      	ldrb	r3, [r3, #0]
 81183d8:	2b01      	cmp	r3, #1
 81183da:	d806      	bhi.n	81183ea <etharp_output_to_arp_index+0x32>
 81183dc:	4b40      	ldr	r3, [pc, #256]	@ (81184e0 <etharp_output_to_arp_index+0x128>)
 81183de:	f240 22ee 	movw	r2, #750	@ 0x2ee
 81183e2:	4940      	ldr	r1, [pc, #256]	@ (81184e4 <etharp_output_to_arp_index+0x12c>)
 81183e4:	4840      	ldr	r0, [pc, #256]	@ (81184e8 <etharp_output_to_arp_index+0x130>)
 81183e6:	f00c f939 	bl	812465c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 81183ea:	79fa      	ldrb	r2, [r7, #7]
 81183ec:	493b      	ldr	r1, [pc, #236]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 81183ee:	4613      	mov	r3, r2
 81183f0:	005b      	lsls	r3, r3, #1
 81183f2:	4413      	add	r3, r2
 81183f4:	00db      	lsls	r3, r3, #3
 81183f6:	440b      	add	r3, r1
 81183f8:	3314      	adds	r3, #20
 81183fa:	781b      	ldrb	r3, [r3, #0]
 81183fc:	2b02      	cmp	r3, #2
 81183fe:	d153      	bne.n	81184a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8118400:	79fa      	ldrb	r2, [r7, #7]
 8118402:	4936      	ldr	r1, [pc, #216]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 8118404:	4613      	mov	r3, r2
 8118406:	005b      	lsls	r3, r3, #1
 8118408:	4413      	add	r3, r2
 811840a:	00db      	lsls	r3, r3, #3
 811840c:	440b      	add	r3, r1
 811840e:	3312      	adds	r3, #18
 8118410:	881b      	ldrh	r3, [r3, #0]
 8118412:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8118416:	d919      	bls.n	811844c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8118418:	79fa      	ldrb	r2, [r7, #7]
 811841a:	4613      	mov	r3, r2
 811841c:	005b      	lsls	r3, r3, #1
 811841e:	4413      	add	r3, r2
 8118420:	00db      	lsls	r3, r3, #3
 8118422:	4a2e      	ldr	r2, [pc, #184]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 8118424:	4413      	add	r3, r2
 8118426:	3304      	adds	r3, #4
 8118428:	4619      	mov	r1, r3
 811842a:	68f8      	ldr	r0, [r7, #12]
 811842c:	f000 fb98 	bl	8118b60 <etharp_request>
 8118430:	4603      	mov	r3, r0
 8118432:	2b00      	cmp	r3, #0
 8118434:	d138      	bne.n	81184a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8118436:	79fa      	ldrb	r2, [r7, #7]
 8118438:	4928      	ldr	r1, [pc, #160]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 811843a:	4613      	mov	r3, r2
 811843c:	005b      	lsls	r3, r3, #1
 811843e:	4413      	add	r3, r2
 8118440:	00db      	lsls	r3, r3, #3
 8118442:	440b      	add	r3, r1
 8118444:	3314      	adds	r3, #20
 8118446:	2203      	movs	r2, #3
 8118448:	701a      	strb	r2, [r3, #0]
 811844a:	e02d      	b.n	81184a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 811844c:	79fa      	ldrb	r2, [r7, #7]
 811844e:	4923      	ldr	r1, [pc, #140]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 8118450:	4613      	mov	r3, r2
 8118452:	005b      	lsls	r3, r3, #1
 8118454:	4413      	add	r3, r2
 8118456:	00db      	lsls	r3, r3, #3
 8118458:	440b      	add	r3, r1
 811845a:	3312      	adds	r3, #18
 811845c:	881b      	ldrh	r3, [r3, #0]
 811845e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8118462:	d321      	bcc.n	81184a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8118464:	79fa      	ldrb	r2, [r7, #7]
 8118466:	4613      	mov	r3, r2
 8118468:	005b      	lsls	r3, r3, #1
 811846a:	4413      	add	r3, r2
 811846c:	00db      	lsls	r3, r3, #3
 811846e:	4a1b      	ldr	r2, [pc, #108]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 8118470:	4413      	add	r3, r2
 8118472:	1d19      	adds	r1, r3, #4
 8118474:	79fa      	ldrb	r2, [r7, #7]
 8118476:	4613      	mov	r3, r2
 8118478:	005b      	lsls	r3, r3, #1
 811847a:	4413      	add	r3, r2
 811847c:	00db      	lsls	r3, r3, #3
 811847e:	3308      	adds	r3, #8
 8118480:	4a16      	ldr	r2, [pc, #88]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 8118482:	4413      	add	r3, r2
 8118484:	3304      	adds	r3, #4
 8118486:	461a      	mov	r2, r3
 8118488:	68f8      	ldr	r0, [r7, #12]
 811848a:	f000 fb47 	bl	8118b1c <etharp_request_dst>
 811848e:	4603      	mov	r3, r0
 8118490:	2b00      	cmp	r3, #0
 8118492:	d109      	bne.n	81184a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8118494:	79fa      	ldrb	r2, [r7, #7]
 8118496:	4911      	ldr	r1, [pc, #68]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 8118498:	4613      	mov	r3, r2
 811849a:	005b      	lsls	r3, r3, #1
 811849c:	4413      	add	r3, r2
 811849e:	00db      	lsls	r3, r3, #3
 81184a0:	440b      	add	r3, r1
 81184a2:	3314      	adds	r3, #20
 81184a4:	2203      	movs	r2, #3
 81184a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 81184a8:	68fb      	ldr	r3, [r7, #12]
 81184aa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 81184ae:	79fa      	ldrb	r2, [r7, #7]
 81184b0:	4613      	mov	r3, r2
 81184b2:	005b      	lsls	r3, r3, #1
 81184b4:	4413      	add	r3, r2
 81184b6:	00db      	lsls	r3, r3, #3
 81184b8:	3308      	adds	r3, #8
 81184ba:	4a08      	ldr	r2, [pc, #32]	@ (81184dc <etharp_output_to_arp_index+0x124>)
 81184bc:	4413      	add	r3, r2
 81184be:	3304      	adds	r3, #4
 81184c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81184c4:	9200      	str	r2, [sp, #0]
 81184c6:	460a      	mov	r2, r1
 81184c8:	68b9      	ldr	r1, [r7, #8]
 81184ca:	68f8      	ldr	r0, [r7, #12]
 81184cc:	f000 fbe8 	bl	8118ca0 <ethernet_output>
 81184d0:	4603      	mov	r3, r0
}
 81184d2:	4618      	mov	r0, r3
 81184d4:	3710      	adds	r7, #16
 81184d6:	46bd      	mov	sp, r7
 81184d8:	bd80      	pop	{r7, pc}
 81184da:	bf00      	nop
 81184dc:	1000b20c 	.word	0x1000b20c
 81184e0:	081255bc 	.word	0x081255bc
 81184e4:	0812578c 	.word	0x0812578c
 81184e8:	08125644 	.word	0x08125644

081184ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 81184ec:	b580      	push	{r7, lr}
 81184ee:	b08a      	sub	sp, #40	@ 0x28
 81184f0:	af02      	add	r7, sp, #8
 81184f2:	60f8      	str	r0, [r7, #12]
 81184f4:	60b9      	str	r1, [r7, #8]
 81184f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 81184f8:	687b      	ldr	r3, [r7, #4]
 81184fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 81184fc:	68fb      	ldr	r3, [r7, #12]
 81184fe:	2b00      	cmp	r3, #0
 8118500:	d106      	bne.n	8118510 <etharp_output+0x24>
 8118502:	4b73      	ldr	r3, [pc, #460]	@ (81186d0 <etharp_output+0x1e4>)
 8118504:	f240 321e 	movw	r2, #798	@ 0x31e
 8118508:	4972      	ldr	r1, [pc, #456]	@ (81186d4 <etharp_output+0x1e8>)
 811850a:	4873      	ldr	r0, [pc, #460]	@ (81186d8 <etharp_output+0x1ec>)
 811850c:	f00c f8a6 	bl	812465c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8118510:	68bb      	ldr	r3, [r7, #8]
 8118512:	2b00      	cmp	r3, #0
 8118514:	d106      	bne.n	8118524 <etharp_output+0x38>
 8118516:	4b6e      	ldr	r3, [pc, #440]	@ (81186d0 <etharp_output+0x1e4>)
 8118518:	f240 321f 	movw	r2, #799	@ 0x31f
 811851c:	496f      	ldr	r1, [pc, #444]	@ (81186dc <etharp_output+0x1f0>)
 811851e:	486e      	ldr	r0, [pc, #440]	@ (81186d8 <etharp_output+0x1ec>)
 8118520:	f00c f89c 	bl	812465c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8118524:	687b      	ldr	r3, [r7, #4]
 8118526:	2b00      	cmp	r3, #0
 8118528:	d106      	bne.n	8118538 <etharp_output+0x4c>
 811852a:	4b69      	ldr	r3, [pc, #420]	@ (81186d0 <etharp_output+0x1e4>)
 811852c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8118530:	496b      	ldr	r1, [pc, #428]	@ (81186e0 <etharp_output+0x1f4>)
 8118532:	4869      	ldr	r0, [pc, #420]	@ (81186d8 <etharp_output+0x1ec>)
 8118534:	f00c f892 	bl	812465c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8118538:	687b      	ldr	r3, [r7, #4]
 811853a:	681b      	ldr	r3, [r3, #0]
 811853c:	68f9      	ldr	r1, [r7, #12]
 811853e:	4618      	mov	r0, r3
 8118540:	f001 f914 	bl	811976c <ip4_addr_isbroadcast_u32>
 8118544:	4603      	mov	r3, r0
 8118546:	2b00      	cmp	r3, #0
 8118548:	d002      	beq.n	8118550 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 811854a:	4b66      	ldr	r3, [pc, #408]	@ (81186e4 <etharp_output+0x1f8>)
 811854c:	61fb      	str	r3, [r7, #28]
 811854e:	e0af      	b.n	81186b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8118550:	687b      	ldr	r3, [r7, #4]
 8118552:	681b      	ldr	r3, [r3, #0]
 8118554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8118558:	2be0      	cmp	r3, #224	@ 0xe0
 811855a:	d118      	bne.n	811858e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 811855c:	2301      	movs	r3, #1
 811855e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8118560:	2300      	movs	r3, #0
 8118562:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8118564:	235e      	movs	r3, #94	@ 0x5e
 8118566:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8118568:	687b      	ldr	r3, [r7, #4]
 811856a:	3301      	adds	r3, #1
 811856c:	781b      	ldrb	r3, [r3, #0]
 811856e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8118572:	b2db      	uxtb	r3, r3
 8118574:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8118576:	687b      	ldr	r3, [r7, #4]
 8118578:	3302      	adds	r3, #2
 811857a:	781b      	ldrb	r3, [r3, #0]
 811857c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 811857e:	687b      	ldr	r3, [r7, #4]
 8118580:	3303      	adds	r3, #3
 8118582:	781b      	ldrb	r3, [r3, #0]
 8118584:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8118586:	f107 0310 	add.w	r3, r7, #16
 811858a:	61fb      	str	r3, [r7, #28]
 811858c:	e090      	b.n	81186b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 811858e:	687b      	ldr	r3, [r7, #4]
 8118590:	681a      	ldr	r2, [r3, #0]
 8118592:	68fb      	ldr	r3, [r7, #12]
 8118594:	3304      	adds	r3, #4
 8118596:	681b      	ldr	r3, [r3, #0]
 8118598:	405a      	eors	r2, r3
 811859a:	68fb      	ldr	r3, [r7, #12]
 811859c:	3308      	adds	r3, #8
 811859e:	681b      	ldr	r3, [r3, #0]
 81185a0:	4013      	ands	r3, r2
 81185a2:	2b00      	cmp	r3, #0
 81185a4:	d012      	beq.n	81185cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 81185a6:	687b      	ldr	r3, [r7, #4]
 81185a8:	681b      	ldr	r3, [r3, #0]
 81185aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 81185ac:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 81185b0:	4293      	cmp	r3, r2
 81185b2:	d00b      	beq.n	81185cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 81185b4:	68fb      	ldr	r3, [r7, #12]
 81185b6:	330c      	adds	r3, #12
 81185b8:	681b      	ldr	r3, [r3, #0]
 81185ba:	2b00      	cmp	r3, #0
 81185bc:	d003      	beq.n	81185c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 81185be:	68fb      	ldr	r3, [r7, #12]
 81185c0:	330c      	adds	r3, #12
 81185c2:	61bb      	str	r3, [r7, #24]
 81185c4:	e002      	b.n	81185cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 81185c6:	f06f 0303 	mvn.w	r3, #3
 81185ca:	e07d      	b.n	81186c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 81185cc:	4b46      	ldr	r3, [pc, #280]	@ (81186e8 <etharp_output+0x1fc>)
 81185ce:	781b      	ldrb	r3, [r3, #0]
 81185d0:	4619      	mov	r1, r3
 81185d2:	4a46      	ldr	r2, [pc, #280]	@ (81186ec <etharp_output+0x200>)
 81185d4:	460b      	mov	r3, r1
 81185d6:	005b      	lsls	r3, r3, #1
 81185d8:	440b      	add	r3, r1
 81185da:	00db      	lsls	r3, r3, #3
 81185dc:	4413      	add	r3, r2
 81185de:	3314      	adds	r3, #20
 81185e0:	781b      	ldrb	r3, [r3, #0]
 81185e2:	2b01      	cmp	r3, #1
 81185e4:	d925      	bls.n	8118632 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 81185e6:	4b40      	ldr	r3, [pc, #256]	@ (81186e8 <etharp_output+0x1fc>)
 81185e8:	781b      	ldrb	r3, [r3, #0]
 81185ea:	4619      	mov	r1, r3
 81185ec:	4a3f      	ldr	r2, [pc, #252]	@ (81186ec <etharp_output+0x200>)
 81185ee:	460b      	mov	r3, r1
 81185f0:	005b      	lsls	r3, r3, #1
 81185f2:	440b      	add	r3, r1
 81185f4:	00db      	lsls	r3, r3, #3
 81185f6:	4413      	add	r3, r2
 81185f8:	3308      	adds	r3, #8
 81185fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 81185fc:	68fa      	ldr	r2, [r7, #12]
 81185fe:	429a      	cmp	r2, r3
 8118600:	d117      	bne.n	8118632 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8118602:	69bb      	ldr	r3, [r7, #24]
 8118604:	681a      	ldr	r2, [r3, #0]
 8118606:	4b38      	ldr	r3, [pc, #224]	@ (81186e8 <etharp_output+0x1fc>)
 8118608:	781b      	ldrb	r3, [r3, #0]
 811860a:	4618      	mov	r0, r3
 811860c:	4937      	ldr	r1, [pc, #220]	@ (81186ec <etharp_output+0x200>)
 811860e:	4603      	mov	r3, r0
 8118610:	005b      	lsls	r3, r3, #1
 8118612:	4403      	add	r3, r0
 8118614:	00db      	lsls	r3, r3, #3
 8118616:	440b      	add	r3, r1
 8118618:	3304      	adds	r3, #4
 811861a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 811861c:	429a      	cmp	r2, r3
 811861e:	d108      	bne.n	8118632 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8118620:	4b31      	ldr	r3, [pc, #196]	@ (81186e8 <etharp_output+0x1fc>)
 8118622:	781b      	ldrb	r3, [r3, #0]
 8118624:	461a      	mov	r2, r3
 8118626:	68b9      	ldr	r1, [r7, #8]
 8118628:	68f8      	ldr	r0, [r7, #12]
 811862a:	f7ff fec5 	bl	81183b8 <etharp_output_to_arp_index>
 811862e:	4603      	mov	r3, r0
 8118630:	e04a      	b.n	81186c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8118632:	2300      	movs	r3, #0
 8118634:	75fb      	strb	r3, [r7, #23]
 8118636:	e031      	b.n	811869c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8118638:	7dfa      	ldrb	r2, [r7, #23]
 811863a:	492c      	ldr	r1, [pc, #176]	@ (81186ec <etharp_output+0x200>)
 811863c:	4613      	mov	r3, r2
 811863e:	005b      	lsls	r3, r3, #1
 8118640:	4413      	add	r3, r2
 8118642:	00db      	lsls	r3, r3, #3
 8118644:	440b      	add	r3, r1
 8118646:	3314      	adds	r3, #20
 8118648:	781b      	ldrb	r3, [r3, #0]
 811864a:	2b01      	cmp	r3, #1
 811864c:	d923      	bls.n	8118696 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 811864e:	7dfa      	ldrb	r2, [r7, #23]
 8118650:	4926      	ldr	r1, [pc, #152]	@ (81186ec <etharp_output+0x200>)
 8118652:	4613      	mov	r3, r2
 8118654:	005b      	lsls	r3, r3, #1
 8118656:	4413      	add	r3, r2
 8118658:	00db      	lsls	r3, r3, #3
 811865a:	440b      	add	r3, r1
 811865c:	3308      	adds	r3, #8
 811865e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8118660:	68fa      	ldr	r2, [r7, #12]
 8118662:	429a      	cmp	r2, r3
 8118664:	d117      	bne.n	8118696 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8118666:	69bb      	ldr	r3, [r7, #24]
 8118668:	6819      	ldr	r1, [r3, #0]
 811866a:	7dfa      	ldrb	r2, [r7, #23]
 811866c:	481f      	ldr	r0, [pc, #124]	@ (81186ec <etharp_output+0x200>)
 811866e:	4613      	mov	r3, r2
 8118670:	005b      	lsls	r3, r3, #1
 8118672:	4413      	add	r3, r2
 8118674:	00db      	lsls	r3, r3, #3
 8118676:	4403      	add	r3, r0
 8118678:	3304      	adds	r3, #4
 811867a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 811867c:	4299      	cmp	r1, r3
 811867e:	d10a      	bne.n	8118696 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8118680:	4a19      	ldr	r2, [pc, #100]	@ (81186e8 <etharp_output+0x1fc>)
 8118682:	7dfb      	ldrb	r3, [r7, #23]
 8118684:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8118686:	7dfb      	ldrb	r3, [r7, #23]
 8118688:	461a      	mov	r2, r3
 811868a:	68b9      	ldr	r1, [r7, #8]
 811868c:	68f8      	ldr	r0, [r7, #12]
 811868e:	f7ff fe93 	bl	81183b8 <etharp_output_to_arp_index>
 8118692:	4603      	mov	r3, r0
 8118694:	e018      	b.n	81186c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8118696:	7dfb      	ldrb	r3, [r7, #23]
 8118698:	3301      	adds	r3, #1
 811869a:	75fb      	strb	r3, [r7, #23]
 811869c:	7dfb      	ldrb	r3, [r7, #23]
 811869e:	2b09      	cmp	r3, #9
 81186a0:	d9ca      	bls.n	8118638 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 81186a2:	68ba      	ldr	r2, [r7, #8]
 81186a4:	69b9      	ldr	r1, [r7, #24]
 81186a6:	68f8      	ldr	r0, [r7, #12]
 81186a8:	f000 f822 	bl	81186f0 <etharp_query>
 81186ac:	4603      	mov	r3, r0
 81186ae:	e00b      	b.n	81186c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 81186b0:	68fb      	ldr	r3, [r7, #12]
 81186b2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 81186b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81186ba:	9300      	str	r3, [sp, #0]
 81186bc:	69fb      	ldr	r3, [r7, #28]
 81186be:	68b9      	ldr	r1, [r7, #8]
 81186c0:	68f8      	ldr	r0, [r7, #12]
 81186c2:	f000 faed 	bl	8118ca0 <ethernet_output>
 81186c6:	4603      	mov	r3, r0
}
 81186c8:	4618      	mov	r0, r3
 81186ca:	3720      	adds	r7, #32
 81186cc:	46bd      	mov	sp, r7
 81186ce:	bd80      	pop	{r7, pc}
 81186d0:	081255bc 	.word	0x081255bc
 81186d4:	0812576c 	.word	0x0812576c
 81186d8:	08125644 	.word	0x08125644
 81186dc:	08125638 	.word	0x08125638
 81186e0:	0812575c 	.word	0x0812575c
 81186e4:	081285d8 	.word	0x081285d8
 81186e8:	1000b2fc 	.word	0x1000b2fc
 81186ec:	1000b20c 	.word	0x1000b20c

081186f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 81186f0:	b580      	push	{r7, lr}
 81186f2:	b090      	sub	sp, #64	@ 0x40
 81186f4:	af02      	add	r7, sp, #8
 81186f6:	60f8      	str	r0, [r7, #12]
 81186f8:	60b9      	str	r1, [r7, #8]
 81186fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 81186fc:	68fb      	ldr	r3, [r7, #12]
 81186fe:	3326      	adds	r3, #38	@ 0x26
 8118700:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8118702:	23ff      	movs	r3, #255	@ 0xff
 8118704:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  int is_new_entry = 0;
 8118708:	2300      	movs	r3, #0
 811870a:	633b      	str	r3, [r7, #48]	@ 0x30
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 811870c:	68bb      	ldr	r3, [r7, #8]
 811870e:	681b      	ldr	r3, [r3, #0]
 8118710:	68f9      	ldr	r1, [r7, #12]
 8118712:	4618      	mov	r0, r3
 8118714:	f001 f82a 	bl	811976c <ip4_addr_isbroadcast_u32>
 8118718:	4603      	mov	r3, r0
 811871a:	2b00      	cmp	r3, #0
 811871c:	d10c      	bne.n	8118738 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 811871e:	68bb      	ldr	r3, [r7, #8]
 8118720:	681b      	ldr	r3, [r3, #0]
 8118722:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8118726:	2be0      	cmp	r3, #224	@ 0xe0
 8118728:	d006      	beq.n	8118738 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 811872a:	68bb      	ldr	r3, [r7, #8]
 811872c:	2b00      	cmp	r3, #0
 811872e:	d003      	beq.n	8118738 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8118730:	68bb      	ldr	r3, [r7, #8]
 8118732:	681b      	ldr	r3, [r3, #0]
 8118734:	2b00      	cmp	r3, #0
 8118736:	d102      	bne.n	811873e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8118738:	f06f 030f 	mvn.w	r3, #15
 811873c:	e14e      	b.n	81189dc <etharp_query+0x2ec>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 811873e:	68fa      	ldr	r2, [r7, #12]
 8118740:	2101      	movs	r1, #1
 8118742:	68b8      	ldr	r0, [r7, #8]
 8118744:	f7ff fb1c 	bl	8117d80 <etharp_find_entry>
 8118748:	4603      	mov	r3, r0
 811874a:	837b      	strh	r3, [r7, #26]

  /* could not find or create entry? */
  if (i_err < 0) {
 811874c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8118750:	2b00      	cmp	r3, #0
 8118752:	da02      	bge.n	811875a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8118754:	8b7b      	ldrh	r3, [r7, #26]
 8118756:	b25b      	sxtb	r3, r3
 8118758:	e140      	b.n	81189dc <etharp_query+0x2ec>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 811875a:	8b7b      	ldrh	r3, [r7, #26]
 811875c:	2b7e      	cmp	r3, #126	@ 0x7e
 811875e:	d906      	bls.n	811876e <etharp_query+0x7e>
 8118760:	4ba0      	ldr	r3, [pc, #640]	@ (81189e4 <etharp_query+0x2f4>)
 8118762:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8118766:	49a0      	ldr	r1, [pc, #640]	@ (81189e8 <etharp_query+0x2f8>)
 8118768:	48a0      	ldr	r0, [pc, #640]	@ (81189ec <etharp_query+0x2fc>)
 811876a:	f00b ff77 	bl	812465c <iprintf>
  i = (netif_addr_idx_t)i_err;
 811876e:	8b7b      	ldrh	r3, [r7, #26]
 8118770:	767b      	strb	r3, [r7, #25]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8118772:	7e7a      	ldrb	r2, [r7, #25]
 8118774:	499e      	ldr	r1, [pc, #632]	@ (81189f0 <etharp_query+0x300>)
 8118776:	4613      	mov	r3, r2
 8118778:	005b      	lsls	r3, r3, #1
 811877a:	4413      	add	r3, r2
 811877c:	00db      	lsls	r3, r3, #3
 811877e:	440b      	add	r3, r1
 8118780:	3314      	adds	r3, #20
 8118782:	781b      	ldrb	r3, [r3, #0]
 8118784:	2b00      	cmp	r3, #0
 8118786:	d115      	bne.n	81187b4 <etharp_query+0xc4>
    is_new_entry = 1;
 8118788:	2301      	movs	r3, #1
 811878a:	633b      	str	r3, [r7, #48]	@ 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 811878c:	7e7a      	ldrb	r2, [r7, #25]
 811878e:	4998      	ldr	r1, [pc, #608]	@ (81189f0 <etharp_query+0x300>)
 8118790:	4613      	mov	r3, r2
 8118792:	005b      	lsls	r3, r3, #1
 8118794:	4413      	add	r3, r2
 8118796:	00db      	lsls	r3, r3, #3
 8118798:	440b      	add	r3, r1
 811879a:	3314      	adds	r3, #20
 811879c:	2201      	movs	r2, #1
 811879e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 81187a0:	7e7a      	ldrb	r2, [r7, #25]
 81187a2:	4993      	ldr	r1, [pc, #588]	@ (81189f0 <etharp_query+0x300>)
 81187a4:	4613      	mov	r3, r2
 81187a6:	005b      	lsls	r3, r3, #1
 81187a8:	4413      	add	r3, r2
 81187aa:	00db      	lsls	r3, r3, #3
 81187ac:	440b      	add	r3, r1
 81187ae:	3308      	adds	r3, #8
 81187b0:	68fa      	ldr	r2, [r7, #12]
 81187b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 81187b4:	7e7a      	ldrb	r2, [r7, #25]
 81187b6:	498e      	ldr	r1, [pc, #568]	@ (81189f0 <etharp_query+0x300>)
 81187b8:	4613      	mov	r3, r2
 81187ba:	005b      	lsls	r3, r3, #1
 81187bc:	4413      	add	r3, r2
 81187be:	00db      	lsls	r3, r3, #3
 81187c0:	440b      	add	r3, r1
 81187c2:	3314      	adds	r3, #20
 81187c4:	781b      	ldrb	r3, [r3, #0]
 81187c6:	2b01      	cmp	r3, #1
 81187c8:	d011      	beq.n	81187ee <etharp_query+0xfe>
 81187ca:	7e7a      	ldrb	r2, [r7, #25]
 81187cc:	4988      	ldr	r1, [pc, #544]	@ (81189f0 <etharp_query+0x300>)
 81187ce:	4613      	mov	r3, r2
 81187d0:	005b      	lsls	r3, r3, #1
 81187d2:	4413      	add	r3, r2
 81187d4:	00db      	lsls	r3, r3, #3
 81187d6:	440b      	add	r3, r1
 81187d8:	3314      	adds	r3, #20
 81187da:	781b      	ldrb	r3, [r3, #0]
 81187dc:	2b01      	cmp	r3, #1
 81187de:	d806      	bhi.n	81187ee <etharp_query+0xfe>
 81187e0:	4b80      	ldr	r3, [pc, #512]	@ (81189e4 <etharp_query+0x2f4>)
 81187e2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 81187e6:	4983      	ldr	r1, [pc, #524]	@ (81189f4 <etharp_query+0x304>)
 81187e8:	4880      	ldr	r0, [pc, #512]	@ (81189ec <etharp_query+0x2fc>)
 81187ea:	f00b ff37 	bl	812465c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 81187ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81187f0:	2b00      	cmp	r3, #0
 81187f2:	d102      	bne.n	81187fa <etharp_query+0x10a>
 81187f4:	687b      	ldr	r3, [r7, #4]
 81187f6:	2b00      	cmp	r3, #0
 81187f8:	d10c      	bne.n	8118814 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 81187fa:	68b9      	ldr	r1, [r7, #8]
 81187fc:	68f8      	ldr	r0, [r7, #12]
 81187fe:	f000 f9af 	bl	8118b60 <etharp_request>
 8118802:	4603      	mov	r3, r0
 8118804:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8118808:	687b      	ldr	r3, [r7, #4]
 811880a:	2b00      	cmp	r3, #0
 811880c:	d102      	bne.n	8118814 <etharp_query+0x124>
      return result;
 811880e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8118812:	e0e3      	b.n	81189dc <etharp_query+0x2ec>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8118814:	687b      	ldr	r3, [r7, #4]
 8118816:	2b00      	cmp	r3, #0
 8118818:	d106      	bne.n	8118828 <etharp_query+0x138>
 811881a:	4b72      	ldr	r3, [pc, #456]	@ (81189e4 <etharp_query+0x2f4>)
 811881c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8118820:	4975      	ldr	r1, [pc, #468]	@ (81189f8 <etharp_query+0x308>)
 8118822:	4872      	ldr	r0, [pc, #456]	@ (81189ec <etharp_query+0x2fc>)
 8118824:	f00b ff1a 	bl	812465c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8118828:	7e7a      	ldrb	r2, [r7, #25]
 811882a:	4971      	ldr	r1, [pc, #452]	@ (81189f0 <etharp_query+0x300>)
 811882c:	4613      	mov	r3, r2
 811882e:	005b      	lsls	r3, r3, #1
 8118830:	4413      	add	r3, r2
 8118832:	00db      	lsls	r3, r3, #3
 8118834:	440b      	add	r3, r1
 8118836:	3314      	adds	r3, #20
 8118838:	781b      	ldrb	r3, [r3, #0]
 811883a:	2b01      	cmp	r3, #1
 811883c:	d917      	bls.n	811886e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 811883e:	4a6f      	ldr	r2, [pc, #444]	@ (81189fc <etharp_query+0x30c>)
 8118840:	7e7b      	ldrb	r3, [r7, #25]
 8118842:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8118844:	7e7a      	ldrb	r2, [r7, #25]
 8118846:	4613      	mov	r3, r2
 8118848:	005b      	lsls	r3, r3, #1
 811884a:	4413      	add	r3, r2
 811884c:	00db      	lsls	r3, r3, #3
 811884e:	3308      	adds	r3, #8
 8118850:	4a67      	ldr	r2, [pc, #412]	@ (81189f0 <etharp_query+0x300>)
 8118852:	4413      	add	r3, r2
 8118854:	3304      	adds	r3, #4
 8118856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 811885a:	9200      	str	r2, [sp, #0]
 811885c:	69fa      	ldr	r2, [r7, #28]
 811885e:	6879      	ldr	r1, [r7, #4]
 8118860:	68f8      	ldr	r0, [r7, #12]
 8118862:	f000 fa1d 	bl	8118ca0 <ethernet_output>
 8118866:	4603      	mov	r3, r0
 8118868:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 811886c:	e0b4      	b.n	81189d8 <etharp_query+0x2e8>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 811886e:	7e7a      	ldrb	r2, [r7, #25]
 8118870:	495f      	ldr	r1, [pc, #380]	@ (81189f0 <etharp_query+0x300>)
 8118872:	4613      	mov	r3, r2
 8118874:	005b      	lsls	r3, r3, #1
 8118876:	4413      	add	r3, r2
 8118878:	00db      	lsls	r3, r3, #3
 811887a:	440b      	add	r3, r1
 811887c:	3314      	adds	r3, #20
 811887e:	781b      	ldrb	r3, [r3, #0]
 8118880:	2b01      	cmp	r3, #1
 8118882:	f040 80a9 	bne.w	81189d8 <etharp_query+0x2e8>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8118886:	2300      	movs	r3, #0
 8118888:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 811888a:	687b      	ldr	r3, [r7, #4]
 811888c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 811888e:	e01c      	b.n	81188ca <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8118890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8118892:	895a      	ldrh	r2, [r3, #10]
 8118894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8118896:	891b      	ldrh	r3, [r3, #8]
 8118898:	429a      	cmp	r2, r3
 811889a:	d10a      	bne.n	81188b2 <etharp_query+0x1c2>
 811889c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811889e:	681b      	ldr	r3, [r3, #0]
 81188a0:	2b00      	cmp	r3, #0
 81188a2:	d006      	beq.n	81188b2 <etharp_query+0x1c2>
 81188a4:	4b4f      	ldr	r3, [pc, #316]	@ (81189e4 <etharp_query+0x2f4>)
 81188a6:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 81188aa:	4955      	ldr	r1, [pc, #340]	@ (8118a00 <etharp_query+0x310>)
 81188ac:	484f      	ldr	r0, [pc, #316]	@ (81189ec <etharp_query+0x2fc>)
 81188ae:	f00b fed5 	bl	812465c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 81188b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81188b4:	7b1b      	ldrb	r3, [r3, #12]
 81188b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81188ba:	2b00      	cmp	r3, #0
 81188bc:	d002      	beq.n	81188c4 <etharp_query+0x1d4>
        copy_needed = 1;
 81188be:	2301      	movs	r3, #1
 81188c0:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
 81188c2:	e005      	b.n	81188d0 <etharp_query+0x1e0>
      }
      p = p->next;
 81188c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81188c6:	681b      	ldr	r3, [r3, #0]
 81188c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 81188ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81188cc:	2b00      	cmp	r3, #0
 81188ce:	d1df      	bne.n	8118890 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 81188d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81188d2:	2b00      	cmp	r3, #0
 81188d4:	d007      	beq.n	81188e6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 81188d6:	687a      	ldr	r2, [r7, #4]
 81188d8:	f44f 7120 	mov.w	r1, #640	@ 0x280
 81188dc:	200e      	movs	r0, #14
 81188de:	f003 fd8d 	bl	811c3fc <pbuf_clone>
 81188e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 81188e4:	e004      	b.n	81188f0 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 81188e6:	687b      	ldr	r3, [r7, #4]
 81188e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pbuf_ref(p);
 81188ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81188ec:	f003 fbb4 	bl	811c058 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 81188f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81188f2:	2b00      	cmp	r3, #0
 81188f4:	d06d      	beq.n	81189d2 <etharp_query+0x2e2>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 81188f6:	2009      	movs	r0, #9
 81188f8:	f002 fbf0 	bl	811b0dc <memp_malloc>
 81188fc:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 81188fe:	697b      	ldr	r3, [r7, #20]
 8118900:	2b00      	cmp	r3, #0
 8118902:	d05f      	beq.n	81189c4 <etharp_query+0x2d4>
        unsigned int qlen = 0;
 8118904:	2300      	movs	r3, #0
 8118906:	627b      	str	r3, [r7, #36]	@ 0x24
        new_entry->next = 0;
 8118908:	697b      	ldr	r3, [r7, #20]
 811890a:	2200      	movs	r2, #0
 811890c:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 811890e:	697b      	ldr	r3, [r7, #20]
 8118910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8118912:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 8118914:	7e7a      	ldrb	r2, [r7, #25]
 8118916:	4936      	ldr	r1, [pc, #216]	@ (81189f0 <etharp_query+0x300>)
 8118918:	4613      	mov	r3, r2
 811891a:	005b      	lsls	r3, r3, #1
 811891c:	4413      	add	r3, r2
 811891e:	00db      	lsls	r3, r3, #3
 8118920:	440b      	add	r3, r1
 8118922:	681b      	ldr	r3, [r3, #0]
 8118924:	2b00      	cmp	r3, #0
 8118926:	d01a      	beq.n	811895e <etharp_query+0x26e>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8118928:	7e7a      	ldrb	r2, [r7, #25]
 811892a:	4931      	ldr	r1, [pc, #196]	@ (81189f0 <etharp_query+0x300>)
 811892c:	4613      	mov	r3, r2
 811892e:	005b      	lsls	r3, r3, #1
 8118930:	4413      	add	r3, r2
 8118932:	00db      	lsls	r3, r3, #3
 8118934:	440b      	add	r3, r1
 8118936:	681b      	ldr	r3, [r3, #0]
 8118938:	623b      	str	r3, [r7, #32]
          qlen++;
 811893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811893c:	3301      	adds	r3, #1
 811893e:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 8118940:	e005      	b.n	811894e <etharp_query+0x25e>
            r = r->next;
 8118942:	6a3b      	ldr	r3, [r7, #32]
 8118944:	681b      	ldr	r3, [r3, #0]
 8118946:	623b      	str	r3, [r7, #32]
            qlen++;
 8118948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811894a:	3301      	adds	r3, #1
 811894c:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 811894e:	6a3b      	ldr	r3, [r7, #32]
 8118950:	681b      	ldr	r3, [r3, #0]
 8118952:	2b00      	cmp	r3, #0
 8118954:	d1f5      	bne.n	8118942 <etharp_query+0x252>
          }
          r->next = new_entry;
 8118956:	6a3b      	ldr	r3, [r7, #32]
 8118958:	697a      	ldr	r2, [r7, #20]
 811895a:	601a      	str	r2, [r3, #0]
 811895c:	e008      	b.n	8118970 <etharp_query+0x280>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 811895e:	7e7a      	ldrb	r2, [r7, #25]
 8118960:	4923      	ldr	r1, [pc, #140]	@ (81189f0 <etharp_query+0x300>)
 8118962:	4613      	mov	r3, r2
 8118964:	005b      	lsls	r3, r3, #1
 8118966:	4413      	add	r3, r2
 8118968:	00db      	lsls	r3, r3, #3
 811896a:	440b      	add	r3, r1
 811896c:	697a      	ldr	r2, [r7, #20]
 811896e:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 8118970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118972:	2b02      	cmp	r3, #2
 8118974:	d922      	bls.n	81189bc <etharp_query+0x2cc>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 8118976:	7e7a      	ldrb	r2, [r7, #25]
 8118978:	491d      	ldr	r1, [pc, #116]	@ (81189f0 <etharp_query+0x300>)
 811897a:	4613      	mov	r3, r2
 811897c:	005b      	lsls	r3, r3, #1
 811897e:	4413      	add	r3, r2
 8118980:	00db      	lsls	r3, r3, #3
 8118982:	440b      	add	r3, r1
 8118984:	681b      	ldr	r3, [r3, #0]
 8118986:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 8118988:	7e7a      	ldrb	r2, [r7, #25]
 811898a:	4919      	ldr	r1, [pc, #100]	@ (81189f0 <etharp_query+0x300>)
 811898c:	4613      	mov	r3, r2
 811898e:	005b      	lsls	r3, r3, #1
 8118990:	4413      	add	r3, r2
 8118992:	00db      	lsls	r3, r3, #3
 8118994:	440b      	add	r3, r1
 8118996:	681b      	ldr	r3, [r3, #0]
 8118998:	7e7a      	ldrb	r2, [r7, #25]
 811899a:	6819      	ldr	r1, [r3, #0]
 811899c:	4814      	ldr	r0, [pc, #80]	@ (81189f0 <etharp_query+0x300>)
 811899e:	4613      	mov	r3, r2
 81189a0:	005b      	lsls	r3, r3, #1
 81189a2:	4413      	add	r3, r2
 81189a4:	00db      	lsls	r3, r3, #3
 81189a6:	4403      	add	r3, r0
 81189a8:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 81189aa:	693b      	ldr	r3, [r7, #16]
 81189ac:	685b      	ldr	r3, [r3, #4]
 81189ae:	4618      	mov	r0, r3
 81189b0:	f003 faac 	bl	811bf0c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 81189b4:	6939      	ldr	r1, [r7, #16]
 81189b6:	2009      	movs	r0, #9
 81189b8:	f002 fc06 	bl	811b1c8 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
        result = ERR_OK;
 81189bc:	2300      	movs	r3, #0
 81189be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 81189c2:	e009      	b.n	81189d8 <etharp_query+0x2e8>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 81189c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81189c6:	f003 faa1 	bl	811bf0c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 81189ca:	23ff      	movs	r3, #255	@ 0xff
 81189cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 81189d0:	e002      	b.n	81189d8 <etharp_query+0x2e8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 81189d2:	23ff      	movs	r3, #255	@ 0xff
 81189d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
  }
  return result;
 81189d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 81189dc:	4618      	mov	r0, r3
 81189de:	3738      	adds	r7, #56	@ 0x38
 81189e0:	46bd      	mov	sp, r7
 81189e2:	bd80      	pop	{r7, pc}
 81189e4:	081255bc 	.word	0x081255bc
 81189e8:	081257bc 	.word	0x081257bc
 81189ec:	08125644 	.word	0x08125644
 81189f0:	1000b20c 	.word	0x1000b20c
 81189f4:	081257cc 	.word	0x081257cc
 81189f8:	08125638 	.word	0x08125638
 81189fc:	1000b2fc 	.word	0x1000b2fc
 8118a00:	081257f4 	.word	0x081257f4

08118a04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8118a04:	b580      	push	{r7, lr}
 8118a06:	b08a      	sub	sp, #40	@ 0x28
 8118a08:	af02      	add	r7, sp, #8
 8118a0a:	60f8      	str	r0, [r7, #12]
 8118a0c:	60b9      	str	r1, [r7, #8]
 8118a0e:	607a      	str	r2, [r7, #4]
 8118a10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8118a12:	2300      	movs	r3, #0
 8118a14:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8118a16:	68fb      	ldr	r3, [r7, #12]
 8118a18:	2b00      	cmp	r3, #0
 8118a1a:	d106      	bne.n	8118a2a <etharp_raw+0x26>
 8118a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8118b08 <etharp_raw+0x104>)
 8118a1e:	f240 4257 	movw	r2, #1111	@ 0x457
 8118a22:	493a      	ldr	r1, [pc, #232]	@ (8118b0c <etharp_raw+0x108>)
 8118a24:	483a      	ldr	r0, [pc, #232]	@ (8118b10 <etharp_raw+0x10c>)
 8118a26:	f00b fe19 	bl	812465c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8118a2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8118a2e:	211c      	movs	r1, #28
 8118a30:	200e      	movs	r0, #14
 8118a32:	f002 ff89 	bl	811b948 <pbuf_alloc>
 8118a36:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8118a38:	69bb      	ldr	r3, [r7, #24]
 8118a3a:	2b00      	cmp	r3, #0
 8118a3c:	d102      	bne.n	8118a44 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8118a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8118a42:	e05d      	b.n	8118b00 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8118a44:	69bb      	ldr	r3, [r7, #24]
 8118a46:	895b      	ldrh	r3, [r3, #10]
 8118a48:	2b1b      	cmp	r3, #27
 8118a4a:	d806      	bhi.n	8118a5a <etharp_raw+0x56>
 8118a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8118b08 <etharp_raw+0x104>)
 8118a4e:	f240 4262 	movw	r2, #1122	@ 0x462
 8118a52:	4930      	ldr	r1, [pc, #192]	@ (8118b14 <etharp_raw+0x110>)
 8118a54:	482e      	ldr	r0, [pc, #184]	@ (8118b10 <etharp_raw+0x10c>)
 8118a56:	f00b fe01 	bl	812465c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8118a5a:	69bb      	ldr	r3, [r7, #24]
 8118a5c:	685b      	ldr	r3, [r3, #4]
 8118a5e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8118a60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8118a62:	4618      	mov	r0, r3
 8118a64:	f7ff f84a 	bl	8117afc <lwip_htons>
 8118a68:	4603      	mov	r3, r0
 8118a6a:	461a      	mov	r2, r3
 8118a6c:	697b      	ldr	r3, [r7, #20]
 8118a6e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8118a70:	68fb      	ldr	r3, [r7, #12]
 8118a72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8118a76:	2b06      	cmp	r3, #6
 8118a78:	d006      	beq.n	8118a88 <etharp_raw+0x84>
 8118a7a:	4b23      	ldr	r3, [pc, #140]	@ (8118b08 <etharp_raw+0x104>)
 8118a7c:	f240 4269 	movw	r2, #1129	@ 0x469
 8118a80:	4925      	ldr	r1, [pc, #148]	@ (8118b18 <etharp_raw+0x114>)
 8118a82:	4823      	ldr	r0, [pc, #140]	@ (8118b10 <etharp_raw+0x10c>)
 8118a84:	f00b fdea 	bl	812465c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8118a88:	697b      	ldr	r3, [r7, #20]
 8118a8a:	3308      	adds	r3, #8
 8118a8c:	2206      	movs	r2, #6
 8118a8e:	6839      	ldr	r1, [r7, #0]
 8118a90:	4618      	mov	r0, r3
 8118a92:	f00c f846 	bl	8124b22 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8118a96:	697b      	ldr	r3, [r7, #20]
 8118a98:	3312      	adds	r3, #18
 8118a9a:	2206      	movs	r2, #6
 8118a9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8118a9e:	4618      	mov	r0, r3
 8118aa0:	f00c f83f 	bl	8124b22 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8118aa4:	697b      	ldr	r3, [r7, #20]
 8118aa6:	330e      	adds	r3, #14
 8118aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8118aaa:	6812      	ldr	r2, [r2, #0]
 8118aac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8118aae:	697b      	ldr	r3, [r7, #20]
 8118ab0:	3318      	adds	r3, #24
 8118ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8118ab4:	6812      	ldr	r2, [r2, #0]
 8118ab6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8118ab8:	697b      	ldr	r3, [r7, #20]
 8118aba:	2200      	movs	r2, #0
 8118abc:	701a      	strb	r2, [r3, #0]
 8118abe:	2200      	movs	r2, #0
 8118ac0:	f042 0201 	orr.w	r2, r2, #1
 8118ac4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8118ac6:	697b      	ldr	r3, [r7, #20]
 8118ac8:	2200      	movs	r2, #0
 8118aca:	f042 0208 	orr.w	r2, r2, #8
 8118ace:	709a      	strb	r2, [r3, #2]
 8118ad0:	2200      	movs	r2, #0
 8118ad2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8118ad4:	697b      	ldr	r3, [r7, #20]
 8118ad6:	2206      	movs	r2, #6
 8118ad8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8118ada:	697b      	ldr	r3, [r7, #20]
 8118adc:	2204      	movs	r2, #4
 8118ade:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8118ae0:	f640 0306 	movw	r3, #2054	@ 0x806
 8118ae4:	9300      	str	r3, [sp, #0]
 8118ae6:	687b      	ldr	r3, [r7, #4]
 8118ae8:	68ba      	ldr	r2, [r7, #8]
 8118aea:	69b9      	ldr	r1, [r7, #24]
 8118aec:	68f8      	ldr	r0, [r7, #12]
 8118aee:	f000 f8d7 	bl	8118ca0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8118af2:	69b8      	ldr	r0, [r7, #24]
 8118af4:	f003 fa0a 	bl	811bf0c <pbuf_free>
  p = NULL;
 8118af8:	2300      	movs	r3, #0
 8118afa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8118afc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8118b00:	4618      	mov	r0, r3
 8118b02:	3720      	adds	r7, #32
 8118b04:	46bd      	mov	sp, r7
 8118b06:	bd80      	pop	{r7, pc}
 8118b08:	081255bc 	.word	0x081255bc
 8118b0c:	0812576c 	.word	0x0812576c
 8118b10:	08125644 	.word	0x08125644
 8118b14:	08125810 	.word	0x08125810
 8118b18:	08125844 	.word	0x08125844

08118b1c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8118b1c:	b580      	push	{r7, lr}
 8118b1e:	b088      	sub	sp, #32
 8118b20:	af04      	add	r7, sp, #16
 8118b22:	60f8      	str	r0, [r7, #12]
 8118b24:	60b9      	str	r1, [r7, #8]
 8118b26:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8118b28:	68fb      	ldr	r3, [r7, #12]
 8118b2a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8118b2e:	68fb      	ldr	r3, [r7, #12]
 8118b30:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8118b34:	68fb      	ldr	r3, [r7, #12]
 8118b36:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8118b38:	2201      	movs	r2, #1
 8118b3a:	9203      	str	r2, [sp, #12]
 8118b3c:	68ba      	ldr	r2, [r7, #8]
 8118b3e:	9202      	str	r2, [sp, #8]
 8118b40:	4a06      	ldr	r2, [pc, #24]	@ (8118b5c <etharp_request_dst+0x40>)
 8118b42:	9201      	str	r2, [sp, #4]
 8118b44:	9300      	str	r3, [sp, #0]
 8118b46:	4603      	mov	r3, r0
 8118b48:	687a      	ldr	r2, [r7, #4]
 8118b4a:	68f8      	ldr	r0, [r7, #12]
 8118b4c:	f7ff ff5a 	bl	8118a04 <etharp_raw>
 8118b50:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8118b52:	4618      	mov	r0, r3
 8118b54:	3710      	adds	r7, #16
 8118b56:	46bd      	mov	sp, r7
 8118b58:	bd80      	pop	{r7, pc}
 8118b5a:	bf00      	nop
 8118b5c:	081285e0 	.word	0x081285e0

08118b60 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8118b60:	b580      	push	{r7, lr}
 8118b62:	b082      	sub	sp, #8
 8118b64:	af00      	add	r7, sp, #0
 8118b66:	6078      	str	r0, [r7, #4]
 8118b68:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8118b6a:	4a05      	ldr	r2, [pc, #20]	@ (8118b80 <etharp_request+0x20>)
 8118b6c:	6839      	ldr	r1, [r7, #0]
 8118b6e:	6878      	ldr	r0, [r7, #4]
 8118b70:	f7ff ffd4 	bl	8118b1c <etharp_request_dst>
 8118b74:	4603      	mov	r3, r0
}
 8118b76:	4618      	mov	r0, r3
 8118b78:	3708      	adds	r7, #8
 8118b7a:	46bd      	mov	sp, r7
 8118b7c:	bd80      	pop	{r7, pc}
 8118b7e:	bf00      	nop
 8118b80:	081285d8 	.word	0x081285d8

08118b84 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8118b84:	b580      	push	{r7, lr}
 8118b86:	b086      	sub	sp, #24
 8118b88:	af00      	add	r7, sp, #0
 8118b8a:	6078      	str	r0, [r7, #4]
 8118b8c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8118b8e:	230e      	movs	r3, #14
 8118b90:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8118b92:	687b      	ldr	r3, [r7, #4]
 8118b94:	895b      	ldrh	r3, [r3, #10]
 8118b96:	2b0e      	cmp	r3, #14
 8118b98:	d96e      	bls.n	8118c78 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8118b9a:	687b      	ldr	r3, [r7, #4]
 8118b9c:	7bdb      	ldrb	r3, [r3, #15]
 8118b9e:	2b00      	cmp	r3, #0
 8118ba0:	d106      	bne.n	8118bb0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8118ba2:	683b      	ldr	r3, [r7, #0]
 8118ba4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118ba8:	3301      	adds	r3, #1
 8118baa:	b2da      	uxtb	r2, r3
 8118bac:	687b      	ldr	r3, [r7, #4]
 8118bae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8118bb0:	687b      	ldr	r3, [r7, #4]
 8118bb2:	685b      	ldr	r3, [r3, #4]
 8118bb4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8118bb6:	693b      	ldr	r3, [r7, #16]
 8118bb8:	7b1a      	ldrb	r2, [r3, #12]
 8118bba:	7b5b      	ldrb	r3, [r3, #13]
 8118bbc:	021b      	lsls	r3, r3, #8
 8118bbe:	4313      	orrs	r3, r2
 8118bc0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8118bc2:	693b      	ldr	r3, [r7, #16]
 8118bc4:	781b      	ldrb	r3, [r3, #0]
 8118bc6:	f003 0301 	and.w	r3, r3, #1
 8118bca:	2b00      	cmp	r3, #0
 8118bcc:	d023      	beq.n	8118c16 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8118bce:	693b      	ldr	r3, [r7, #16]
 8118bd0:	781b      	ldrb	r3, [r3, #0]
 8118bd2:	2b01      	cmp	r3, #1
 8118bd4:	d10f      	bne.n	8118bf6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8118bd6:	693b      	ldr	r3, [r7, #16]
 8118bd8:	785b      	ldrb	r3, [r3, #1]
 8118bda:	2b00      	cmp	r3, #0
 8118bdc:	d11b      	bne.n	8118c16 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8118bde:	693b      	ldr	r3, [r7, #16]
 8118be0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8118be2:	2b5e      	cmp	r3, #94	@ 0x5e
 8118be4:	d117      	bne.n	8118c16 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8118be6:	687b      	ldr	r3, [r7, #4]
 8118be8:	7b5b      	ldrb	r3, [r3, #13]
 8118bea:	f043 0310 	orr.w	r3, r3, #16
 8118bee:	b2da      	uxtb	r2, r3
 8118bf0:	687b      	ldr	r3, [r7, #4]
 8118bf2:	735a      	strb	r2, [r3, #13]
 8118bf4:	e00f      	b.n	8118c16 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8118bf6:	693b      	ldr	r3, [r7, #16]
 8118bf8:	2206      	movs	r2, #6
 8118bfa:	4928      	ldr	r1, [pc, #160]	@ (8118c9c <ethernet_input+0x118>)
 8118bfc:	4618      	mov	r0, r3
 8118bfe:	f00b fe17 	bl	8124830 <memcmp>
 8118c02:	4603      	mov	r3, r0
 8118c04:	2b00      	cmp	r3, #0
 8118c06:	d106      	bne.n	8118c16 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8118c08:	687b      	ldr	r3, [r7, #4]
 8118c0a:	7b5b      	ldrb	r3, [r3, #13]
 8118c0c:	f043 0308 	orr.w	r3, r3, #8
 8118c10:	b2da      	uxtb	r2, r3
 8118c12:	687b      	ldr	r3, [r7, #4]
 8118c14:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8118c16:	89fb      	ldrh	r3, [r7, #14]
 8118c18:	2b08      	cmp	r3, #8
 8118c1a:	d003      	beq.n	8118c24 <ethernet_input+0xa0>
 8118c1c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8118c20:	d014      	beq.n	8118c4c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8118c22:	e032      	b.n	8118c8a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8118c24:	683b      	ldr	r3, [r7, #0]
 8118c26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118c2a:	f003 0308 	and.w	r3, r3, #8
 8118c2e:	2b00      	cmp	r3, #0
 8118c30:	d024      	beq.n	8118c7c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8118c32:	8afb      	ldrh	r3, [r7, #22]
 8118c34:	4619      	mov	r1, r3
 8118c36:	6878      	ldr	r0, [r7, #4]
 8118c38:	f003 f8e2 	bl	811be00 <pbuf_remove_header>
 8118c3c:	4603      	mov	r3, r0
 8118c3e:	2b00      	cmp	r3, #0
 8118c40:	d11e      	bne.n	8118c80 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8118c42:	6839      	ldr	r1, [r7, #0]
 8118c44:	6878      	ldr	r0, [r7, #4]
 8118c46:	f000 fb95 	bl	8119374 <ip4_input>
      break;
 8118c4a:	e013      	b.n	8118c74 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8118c4c:	683b      	ldr	r3, [r7, #0]
 8118c4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118c52:	f003 0308 	and.w	r3, r3, #8
 8118c56:	2b00      	cmp	r3, #0
 8118c58:	d014      	beq.n	8118c84 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8118c5a:	8afb      	ldrh	r3, [r7, #22]
 8118c5c:	4619      	mov	r1, r3
 8118c5e:	6878      	ldr	r0, [r7, #4]
 8118c60:	f003 f8ce 	bl	811be00 <pbuf_remove_header>
 8118c64:	4603      	mov	r3, r0
 8118c66:	2b00      	cmp	r3, #0
 8118c68:	d10e      	bne.n	8118c88 <ethernet_input+0x104>
        etharp_input(p, netif);
 8118c6a:	6839      	ldr	r1, [r7, #0]
 8118c6c:	6878      	ldr	r0, [r7, #4]
 8118c6e:	f7ff fb19 	bl	81182a4 <etharp_input>
      break;
 8118c72:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8118c74:	2300      	movs	r3, #0
 8118c76:	e00c      	b.n	8118c92 <ethernet_input+0x10e>
    goto free_and_return;
 8118c78:	bf00      	nop
 8118c7a:	e006      	b.n	8118c8a <ethernet_input+0x106>
        goto free_and_return;
 8118c7c:	bf00      	nop
 8118c7e:	e004      	b.n	8118c8a <ethernet_input+0x106>
        goto free_and_return;
 8118c80:	bf00      	nop
 8118c82:	e002      	b.n	8118c8a <ethernet_input+0x106>
        goto free_and_return;
 8118c84:	bf00      	nop
 8118c86:	e000      	b.n	8118c8a <ethernet_input+0x106>
        goto free_and_return;
 8118c88:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8118c8a:	6878      	ldr	r0, [r7, #4]
 8118c8c:	f003 f93e 	bl	811bf0c <pbuf_free>
  return ERR_OK;
 8118c90:	2300      	movs	r3, #0
}
 8118c92:	4618      	mov	r0, r3
 8118c94:	3718      	adds	r7, #24
 8118c96:	46bd      	mov	sp, r7
 8118c98:	bd80      	pop	{r7, pc}
 8118c9a:	bf00      	nop
 8118c9c:	081285d8 	.word	0x081285d8

08118ca0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8118ca0:	b580      	push	{r7, lr}
 8118ca2:	b086      	sub	sp, #24
 8118ca4:	af00      	add	r7, sp, #0
 8118ca6:	60f8      	str	r0, [r7, #12]
 8118ca8:	60b9      	str	r1, [r7, #8]
 8118caa:	607a      	str	r2, [r7, #4]
 8118cac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8118cae:	8c3b      	ldrh	r3, [r7, #32]
 8118cb0:	4618      	mov	r0, r3
 8118cb2:	f7fe ff23 	bl	8117afc <lwip_htons>
 8118cb6:	4603      	mov	r3, r0
 8118cb8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8118cba:	210e      	movs	r1, #14
 8118cbc:	68b8      	ldr	r0, [r7, #8]
 8118cbe:	f003 f88f 	bl	811bde0 <pbuf_add_header>
 8118cc2:	4603      	mov	r3, r0
 8118cc4:	2b00      	cmp	r3, #0
 8118cc6:	d125      	bne.n	8118d14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8118cc8:	68bb      	ldr	r3, [r7, #8]
 8118cca:	685b      	ldr	r3, [r3, #4]
 8118ccc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8118cce:	693b      	ldr	r3, [r7, #16]
 8118cd0:	8afa      	ldrh	r2, [r7, #22]
 8118cd2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8118cd4:	693b      	ldr	r3, [r7, #16]
 8118cd6:	2206      	movs	r2, #6
 8118cd8:	6839      	ldr	r1, [r7, #0]
 8118cda:	4618      	mov	r0, r3
 8118cdc:	f00b ff21 	bl	8124b22 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8118ce0:	693b      	ldr	r3, [r7, #16]
 8118ce2:	3306      	adds	r3, #6
 8118ce4:	2206      	movs	r2, #6
 8118ce6:	6879      	ldr	r1, [r7, #4]
 8118ce8:	4618      	mov	r0, r3
 8118cea:	f00b ff1a 	bl	8124b22 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8118cee:	68fb      	ldr	r3, [r7, #12]
 8118cf0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8118cf4:	2b06      	cmp	r3, #6
 8118cf6:	d006      	beq.n	8118d06 <ethernet_output+0x66>
 8118cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8118d24 <ethernet_output+0x84>)
 8118cfa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8118cfe:	490a      	ldr	r1, [pc, #40]	@ (8118d28 <ethernet_output+0x88>)
 8118d00:	480a      	ldr	r0, [pc, #40]	@ (8118d2c <ethernet_output+0x8c>)
 8118d02:	f00b fcab 	bl	812465c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8118d06:	68fb      	ldr	r3, [r7, #12]
 8118d08:	699b      	ldr	r3, [r3, #24]
 8118d0a:	68b9      	ldr	r1, [r7, #8]
 8118d0c:	68f8      	ldr	r0, [r7, #12]
 8118d0e:	4798      	blx	r3
 8118d10:	4603      	mov	r3, r0
 8118d12:	e002      	b.n	8118d1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8118d14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8118d16:	f06f 0301 	mvn.w	r3, #1
}
 8118d1a:	4618      	mov	r0, r3
 8118d1c:	3718      	adds	r7, #24
 8118d1e:	46bd      	mov	sp, r7
 8118d20:	bd80      	pop	{r7, pc}
 8118d22:	bf00      	nop
 8118d24:	08125888 	.word	0x08125888
 8118d28:	08125900 	.word	0x08125900
 8118d2c:	08125934 	.word	0x08125934

08118d30 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8118d30:	b580      	push	{r7, lr}
 8118d32:	b08e      	sub	sp, #56	@ 0x38
 8118d34:	af04      	add	r7, sp, #16
 8118d36:	6078      	str	r0, [r7, #4]
 8118d38:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8118d3a:	4b87      	ldr	r3, [pc, #540]	@ (8118f58 <icmp_input+0x228>)
 8118d3c:	689b      	ldr	r3, [r3, #8]
 8118d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8118d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118d42:	781b      	ldrb	r3, [r3, #0]
 8118d44:	f003 030f 	and.w	r3, r3, #15
 8118d48:	b2db      	uxtb	r3, r3
 8118d4a:	009b      	lsls	r3, r3, #2
 8118d4c:	b2db      	uxtb	r3, r3
 8118d4e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8118d50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118d52:	2b13      	cmp	r3, #19
 8118d54:	f240 80e8 	bls.w	8118f28 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8118d58:	687b      	ldr	r3, [r7, #4]
 8118d5a:	895b      	ldrh	r3, [r3, #10]
 8118d5c:	2b03      	cmp	r3, #3
 8118d5e:	f240 80e5 	bls.w	8118f2c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8118d62:	687b      	ldr	r3, [r7, #4]
 8118d64:	685b      	ldr	r3, [r3, #4]
 8118d66:	781b      	ldrb	r3, [r3, #0]
 8118d68:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8118d6c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8118d70:	2b00      	cmp	r3, #0
 8118d72:	f000 80d2 	beq.w	8118f1a <icmp_input+0x1ea>
 8118d76:	2b08      	cmp	r3, #8
 8118d78:	f040 80d2 	bne.w	8118f20 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8118d7c:	4b77      	ldr	r3, [pc, #476]	@ (8118f5c <icmp_input+0x22c>)
 8118d7e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8118d80:	4b75      	ldr	r3, [pc, #468]	@ (8118f58 <icmp_input+0x228>)
 8118d82:	695b      	ldr	r3, [r3, #20]
 8118d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8118d88:	2be0      	cmp	r3, #224	@ 0xe0
 8118d8a:	f000 80d6 	beq.w	8118f3a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8118d8e:	4b72      	ldr	r3, [pc, #456]	@ (8118f58 <icmp_input+0x228>)
 8118d90:	695b      	ldr	r3, [r3, #20]
 8118d92:	4a71      	ldr	r2, [pc, #452]	@ (8118f58 <icmp_input+0x228>)
 8118d94:	6812      	ldr	r2, [r2, #0]
 8118d96:	4611      	mov	r1, r2
 8118d98:	4618      	mov	r0, r3
 8118d9a:	f000 fce7 	bl	811976c <ip4_addr_isbroadcast_u32>
 8118d9e:	4603      	mov	r3, r0
 8118da0:	2b00      	cmp	r3, #0
 8118da2:	f040 80cc 	bne.w	8118f3e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8118da6:	687b      	ldr	r3, [r7, #4]
 8118da8:	891b      	ldrh	r3, [r3, #8]
 8118daa:	2b07      	cmp	r3, #7
 8118dac:	f240 80c0 	bls.w	8118f30 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8118db0:	6878      	ldr	r0, [r7, #4]
 8118db2:	f000 f9e0 	bl	8119176 <inet_chksum_pbuf>
 8118db6:	4603      	mov	r3, r0
 8118db8:	2b00      	cmp	r3, #0
 8118dba:	d003      	beq.n	8118dc4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8118dbc:	6878      	ldr	r0, [r7, #4]
 8118dbe:	f003 f8a5 	bl	811bf0c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8118dc2:	e0c5      	b.n	8118f50 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8118dc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118dc6:	330e      	adds	r3, #14
 8118dc8:	4619      	mov	r1, r3
 8118dca:	6878      	ldr	r0, [r7, #4]
 8118dcc:	f003 f808 	bl	811bde0 <pbuf_add_header>
 8118dd0:	4603      	mov	r3, r0
 8118dd2:	2b00      	cmp	r3, #0
 8118dd4:	d04b      	beq.n	8118e6e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8118dd6:	687b      	ldr	r3, [r7, #4]
 8118dd8:	891a      	ldrh	r2, [r3, #8]
 8118dda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118ddc:	4413      	add	r3, r2
 8118dde:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8118de0:	687b      	ldr	r3, [r7, #4]
 8118de2:	891b      	ldrh	r3, [r3, #8]
 8118de4:	8b7a      	ldrh	r2, [r7, #26]
 8118de6:	429a      	cmp	r2, r3
 8118de8:	f0c0 80ab 	bcc.w	8118f42 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8118dec:	8b7b      	ldrh	r3, [r7, #26]
 8118dee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8118df2:	4619      	mov	r1, r3
 8118df4:	200e      	movs	r0, #14
 8118df6:	f002 fda7 	bl	811b948 <pbuf_alloc>
 8118dfa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8118dfc:	697b      	ldr	r3, [r7, #20]
 8118dfe:	2b00      	cmp	r3, #0
 8118e00:	f000 80a1 	beq.w	8118f46 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8118e04:	697b      	ldr	r3, [r7, #20]
 8118e06:	895b      	ldrh	r3, [r3, #10]
 8118e08:	461a      	mov	r2, r3
 8118e0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118e0c:	3308      	adds	r3, #8
 8118e0e:	429a      	cmp	r2, r3
 8118e10:	d203      	bcs.n	8118e1a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8118e12:	6978      	ldr	r0, [r7, #20]
 8118e14:	f003 f87a 	bl	811bf0c <pbuf_free>
          goto icmperr;
 8118e18:	e096      	b.n	8118f48 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8118e1a:	697b      	ldr	r3, [r7, #20]
 8118e1c:	685b      	ldr	r3, [r3, #4]
 8118e1e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8118e20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8118e22:	4618      	mov	r0, r3
 8118e24:	f00b fe7d 	bl	8124b22 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8118e28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118e2a:	4619      	mov	r1, r3
 8118e2c:	6978      	ldr	r0, [r7, #20]
 8118e2e:	f002 ffe7 	bl	811be00 <pbuf_remove_header>
 8118e32:	4603      	mov	r3, r0
 8118e34:	2b00      	cmp	r3, #0
 8118e36:	d009      	beq.n	8118e4c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8118e38:	4b49      	ldr	r3, [pc, #292]	@ (8118f60 <icmp_input+0x230>)
 8118e3a:	22b6      	movs	r2, #182	@ 0xb6
 8118e3c:	4949      	ldr	r1, [pc, #292]	@ (8118f64 <icmp_input+0x234>)
 8118e3e:	484a      	ldr	r0, [pc, #296]	@ (8118f68 <icmp_input+0x238>)
 8118e40:	f00b fc0c 	bl	812465c <iprintf>
          pbuf_free(r);
 8118e44:	6978      	ldr	r0, [r7, #20]
 8118e46:	f003 f861 	bl	811bf0c <pbuf_free>
          goto icmperr;
 8118e4a:	e07d      	b.n	8118f48 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8118e4c:	6879      	ldr	r1, [r7, #4]
 8118e4e:	6978      	ldr	r0, [r7, #20]
 8118e50:	f003 f990 	bl	811c174 <pbuf_copy>
 8118e54:	4603      	mov	r3, r0
 8118e56:	2b00      	cmp	r3, #0
 8118e58:	d003      	beq.n	8118e62 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8118e5a:	6978      	ldr	r0, [r7, #20]
 8118e5c:	f003 f856 	bl	811bf0c <pbuf_free>
          goto icmperr;
 8118e60:	e072      	b.n	8118f48 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8118e62:	6878      	ldr	r0, [r7, #4]
 8118e64:	f003 f852 	bl	811bf0c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8118e68:	697b      	ldr	r3, [r7, #20]
 8118e6a:	607b      	str	r3, [r7, #4]
 8118e6c:	e00f      	b.n	8118e8e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8118e6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118e70:	330e      	adds	r3, #14
 8118e72:	4619      	mov	r1, r3
 8118e74:	6878      	ldr	r0, [r7, #4]
 8118e76:	f002 ffc3 	bl	811be00 <pbuf_remove_header>
 8118e7a:	4603      	mov	r3, r0
 8118e7c:	2b00      	cmp	r3, #0
 8118e7e:	d006      	beq.n	8118e8e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8118e80:	4b37      	ldr	r3, [pc, #220]	@ (8118f60 <icmp_input+0x230>)
 8118e82:	22c7      	movs	r2, #199	@ 0xc7
 8118e84:	4939      	ldr	r1, [pc, #228]	@ (8118f6c <icmp_input+0x23c>)
 8118e86:	4838      	ldr	r0, [pc, #224]	@ (8118f68 <icmp_input+0x238>)
 8118e88:	f00b fbe8 	bl	812465c <iprintf>
          goto icmperr;
 8118e8c:	e05c      	b.n	8118f48 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8118e8e:	687b      	ldr	r3, [r7, #4]
 8118e90:	685b      	ldr	r3, [r3, #4]
 8118e92:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8118e94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118e96:	4619      	mov	r1, r3
 8118e98:	6878      	ldr	r0, [r7, #4]
 8118e9a:	f002 ffa1 	bl	811bde0 <pbuf_add_header>
 8118e9e:	4603      	mov	r3, r0
 8118ea0:	2b00      	cmp	r3, #0
 8118ea2:	d13c      	bne.n	8118f1e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8118ea4:	687b      	ldr	r3, [r7, #4]
 8118ea6:	685b      	ldr	r3, [r3, #4]
 8118ea8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8118eaa:	69fb      	ldr	r3, [r7, #28]
 8118eac:	681a      	ldr	r2, [r3, #0]
 8118eae:	68fb      	ldr	r3, [r7, #12]
 8118eb0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8118eb2:	4b29      	ldr	r3, [pc, #164]	@ (8118f58 <icmp_input+0x228>)
 8118eb4:	691a      	ldr	r2, [r3, #16]
 8118eb6:	68fb      	ldr	r3, [r7, #12]
 8118eb8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8118eba:	693b      	ldr	r3, [r7, #16]
 8118ebc:	2200      	movs	r2, #0
 8118ebe:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8118ec0:	693b      	ldr	r3, [r7, #16]
 8118ec2:	885b      	ldrh	r3, [r3, #2]
 8118ec4:	b29b      	uxth	r3, r3
 8118ec6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8118eca:	4293      	cmp	r3, r2
 8118ecc:	d907      	bls.n	8118ede <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8118ece:	693b      	ldr	r3, [r7, #16]
 8118ed0:	885b      	ldrh	r3, [r3, #2]
 8118ed2:	b29b      	uxth	r3, r3
 8118ed4:	3309      	adds	r3, #9
 8118ed6:	b29a      	uxth	r2, r3
 8118ed8:	693b      	ldr	r3, [r7, #16]
 8118eda:	805a      	strh	r2, [r3, #2]
 8118edc:	e006      	b.n	8118eec <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8118ede:	693b      	ldr	r3, [r7, #16]
 8118ee0:	885b      	ldrh	r3, [r3, #2]
 8118ee2:	b29b      	uxth	r3, r3
 8118ee4:	3308      	adds	r3, #8
 8118ee6:	b29a      	uxth	r2, r3
 8118ee8:	693b      	ldr	r3, [r7, #16]
 8118eea:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8118eec:	68fb      	ldr	r3, [r7, #12]
 8118eee:	22ff      	movs	r2, #255	@ 0xff
 8118ef0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8118ef2:	68fb      	ldr	r3, [r7, #12]
 8118ef4:	2200      	movs	r2, #0
 8118ef6:	729a      	strb	r2, [r3, #10]
 8118ef8:	2200      	movs	r2, #0
 8118efa:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8118efc:	683b      	ldr	r3, [r7, #0]
 8118efe:	9302      	str	r3, [sp, #8]
 8118f00:	2301      	movs	r3, #1
 8118f02:	9301      	str	r3, [sp, #4]
 8118f04:	2300      	movs	r3, #0
 8118f06:	9300      	str	r3, [sp, #0]
 8118f08:	23ff      	movs	r3, #255	@ 0xff
 8118f0a:	2200      	movs	r2, #0
 8118f0c:	69f9      	ldr	r1, [r7, #28]
 8118f0e:	6878      	ldr	r0, [r7, #4]
 8118f10:	f000 fb54 	bl	81195bc <ip4_output_if>
 8118f14:	4603      	mov	r3, r0
 8118f16:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8118f18:	e001      	b.n	8118f1e <icmp_input+0x1ee>
      break;
 8118f1a:	bf00      	nop
 8118f1c:	e000      	b.n	8118f20 <icmp_input+0x1f0>
      break;
 8118f1e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8118f20:	6878      	ldr	r0, [r7, #4]
 8118f22:	f002 fff3 	bl	811bf0c <pbuf_free>
  return;
 8118f26:	e013      	b.n	8118f50 <icmp_input+0x220>
    goto lenerr;
 8118f28:	bf00      	nop
 8118f2a:	e002      	b.n	8118f32 <icmp_input+0x202>
    goto lenerr;
 8118f2c:	bf00      	nop
 8118f2e:	e000      	b.n	8118f32 <icmp_input+0x202>
        goto lenerr;
 8118f30:	bf00      	nop
lenerr:
  pbuf_free(p);
 8118f32:	6878      	ldr	r0, [r7, #4]
 8118f34:	f002 ffea 	bl	811bf0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8118f38:	e00a      	b.n	8118f50 <icmp_input+0x220>
        goto icmperr;
 8118f3a:	bf00      	nop
 8118f3c:	e004      	b.n	8118f48 <icmp_input+0x218>
        goto icmperr;
 8118f3e:	bf00      	nop
 8118f40:	e002      	b.n	8118f48 <icmp_input+0x218>
          goto icmperr;
 8118f42:	bf00      	nop
 8118f44:	e000      	b.n	8118f48 <icmp_input+0x218>
          goto icmperr;
 8118f46:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8118f48:	6878      	ldr	r0, [r7, #4]
 8118f4a:	f002 ffdf 	bl	811bf0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8118f4e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8118f50:	3728      	adds	r7, #40	@ 0x28
 8118f52:	46bd      	mov	sp, r7
 8118f54:	bd80      	pop	{r7, pc}
 8118f56:	bf00      	nop
 8118f58:	1000b300 	.word	0x1000b300
 8118f5c:	1000b314 	.word	0x1000b314
 8118f60:	0812595c 	.word	0x0812595c
 8118f64:	081259d4 	.word	0x081259d4
 8118f68:	08125a0c 	.word	0x08125a0c
 8118f6c:	08125a34 	.word	0x08125a34

08118f70 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8118f70:	b580      	push	{r7, lr}
 8118f72:	b082      	sub	sp, #8
 8118f74:	af00      	add	r7, sp, #0
 8118f76:	6078      	str	r0, [r7, #4]
 8118f78:	460b      	mov	r3, r1
 8118f7a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8118f7c:	78fb      	ldrb	r3, [r7, #3]
 8118f7e:	461a      	mov	r2, r3
 8118f80:	2103      	movs	r1, #3
 8118f82:	6878      	ldr	r0, [r7, #4]
 8118f84:	f000 f814 	bl	8118fb0 <icmp_send_response>
}
 8118f88:	bf00      	nop
 8118f8a:	3708      	adds	r7, #8
 8118f8c:	46bd      	mov	sp, r7
 8118f8e:	bd80      	pop	{r7, pc}

08118f90 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8118f90:	b580      	push	{r7, lr}
 8118f92:	b082      	sub	sp, #8
 8118f94:	af00      	add	r7, sp, #0
 8118f96:	6078      	str	r0, [r7, #4]
 8118f98:	460b      	mov	r3, r1
 8118f9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8118f9c:	78fb      	ldrb	r3, [r7, #3]
 8118f9e:	461a      	mov	r2, r3
 8118fa0:	210b      	movs	r1, #11
 8118fa2:	6878      	ldr	r0, [r7, #4]
 8118fa4:	f000 f804 	bl	8118fb0 <icmp_send_response>
}
 8118fa8:	bf00      	nop
 8118faa:	3708      	adds	r7, #8
 8118fac:	46bd      	mov	sp, r7
 8118fae:	bd80      	pop	{r7, pc}

08118fb0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8118fb0:	b580      	push	{r7, lr}
 8118fb2:	b08c      	sub	sp, #48	@ 0x30
 8118fb4:	af04      	add	r7, sp, #16
 8118fb6:	6078      	str	r0, [r7, #4]
 8118fb8:	460b      	mov	r3, r1
 8118fba:	70fb      	strb	r3, [r7, #3]
 8118fbc:	4613      	mov	r3, r2
 8118fbe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8118fc0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8118fc4:	2124      	movs	r1, #36	@ 0x24
 8118fc6:	2022      	movs	r0, #34	@ 0x22
 8118fc8:	f002 fcbe 	bl	811b948 <pbuf_alloc>
 8118fcc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8118fce:	69fb      	ldr	r3, [r7, #28]
 8118fd0:	2b00      	cmp	r3, #0
 8118fd2:	d056      	beq.n	8119082 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8118fd4:	69fb      	ldr	r3, [r7, #28]
 8118fd6:	895b      	ldrh	r3, [r3, #10]
 8118fd8:	2b23      	cmp	r3, #35	@ 0x23
 8118fda:	d806      	bhi.n	8118fea <icmp_send_response+0x3a>
 8118fdc:	4b2b      	ldr	r3, [pc, #172]	@ (811908c <icmp_send_response+0xdc>)
 8118fde:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8118fe2:	492b      	ldr	r1, [pc, #172]	@ (8119090 <icmp_send_response+0xe0>)
 8118fe4:	482b      	ldr	r0, [pc, #172]	@ (8119094 <icmp_send_response+0xe4>)
 8118fe6:	f00b fb39 	bl	812465c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8118fea:	687b      	ldr	r3, [r7, #4]
 8118fec:	685b      	ldr	r3, [r3, #4]
 8118fee:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8118ff0:	69fb      	ldr	r3, [r7, #28]
 8118ff2:	685b      	ldr	r3, [r3, #4]
 8118ff4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8118ff6:	697b      	ldr	r3, [r7, #20]
 8118ff8:	78fa      	ldrb	r2, [r7, #3]
 8118ffa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8118ffc:	697b      	ldr	r3, [r7, #20]
 8118ffe:	78ba      	ldrb	r2, [r7, #2]
 8119000:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8119002:	697b      	ldr	r3, [r7, #20]
 8119004:	2200      	movs	r2, #0
 8119006:	711a      	strb	r2, [r3, #4]
 8119008:	2200      	movs	r2, #0
 811900a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 811900c:	697b      	ldr	r3, [r7, #20]
 811900e:	2200      	movs	r2, #0
 8119010:	719a      	strb	r2, [r3, #6]
 8119012:	2200      	movs	r2, #0
 8119014:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8119016:	69fb      	ldr	r3, [r7, #28]
 8119018:	685b      	ldr	r3, [r3, #4]
 811901a:	f103 0008 	add.w	r0, r3, #8
 811901e:	687b      	ldr	r3, [r7, #4]
 8119020:	685b      	ldr	r3, [r3, #4]
 8119022:	221c      	movs	r2, #28
 8119024:	4619      	mov	r1, r3
 8119026:	f00b fd7c 	bl	8124b22 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 811902a:	69bb      	ldr	r3, [r7, #24]
 811902c:	68db      	ldr	r3, [r3, #12]
 811902e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8119030:	f107 030c 	add.w	r3, r7, #12
 8119034:	4618      	mov	r0, r3
 8119036:	f000 f903 	bl	8119240 <ip4_route>
 811903a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 811903c:	693b      	ldr	r3, [r7, #16]
 811903e:	2b00      	cmp	r3, #0
 8119040:	d01b      	beq.n	811907a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8119042:	697b      	ldr	r3, [r7, #20]
 8119044:	2200      	movs	r2, #0
 8119046:	709a      	strb	r2, [r3, #2]
 8119048:	2200      	movs	r2, #0
 811904a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 811904c:	69fb      	ldr	r3, [r7, #28]
 811904e:	895b      	ldrh	r3, [r3, #10]
 8119050:	4619      	mov	r1, r3
 8119052:	6978      	ldr	r0, [r7, #20]
 8119054:	f000 f87d 	bl	8119152 <inet_chksum>
 8119058:	4603      	mov	r3, r0
 811905a:	461a      	mov	r2, r3
 811905c:	697b      	ldr	r3, [r7, #20]
 811905e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8119060:	f107 020c 	add.w	r2, r7, #12
 8119064:	693b      	ldr	r3, [r7, #16]
 8119066:	9302      	str	r3, [sp, #8]
 8119068:	2301      	movs	r3, #1
 811906a:	9301      	str	r3, [sp, #4]
 811906c:	2300      	movs	r3, #0
 811906e:	9300      	str	r3, [sp, #0]
 8119070:	23ff      	movs	r3, #255	@ 0xff
 8119072:	2100      	movs	r1, #0
 8119074:	69f8      	ldr	r0, [r7, #28]
 8119076:	f000 faa1 	bl	81195bc <ip4_output_if>
  }
  pbuf_free(q);
 811907a:	69f8      	ldr	r0, [r7, #28]
 811907c:	f002 ff46 	bl	811bf0c <pbuf_free>
 8119080:	e000      	b.n	8119084 <icmp_send_response+0xd4>
    return;
 8119082:	bf00      	nop
}
 8119084:	3720      	adds	r7, #32
 8119086:	46bd      	mov	sp, r7
 8119088:	bd80      	pop	{r7, pc}
 811908a:	bf00      	nop
 811908c:	0812595c 	.word	0x0812595c
 8119090:	08125a68 	.word	0x08125a68
 8119094:	08125a0c 	.word	0x08125a0c

08119098 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8119098:	b480      	push	{r7}
 811909a:	b089      	sub	sp, #36	@ 0x24
 811909c:	af00      	add	r7, sp, #0
 811909e:	6078      	str	r0, [r7, #4]
 81190a0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 81190a2:	687b      	ldr	r3, [r7, #4]
 81190a4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 81190a6:	2300      	movs	r3, #0
 81190a8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 81190aa:	2300      	movs	r3, #0
 81190ac:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 81190ae:	69fb      	ldr	r3, [r7, #28]
 81190b0:	f003 0301 	and.w	r3, r3, #1
 81190b4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 81190b6:	693b      	ldr	r3, [r7, #16]
 81190b8:	2b00      	cmp	r3, #0
 81190ba:	d00d      	beq.n	81190d8 <lwip_standard_chksum+0x40>
 81190bc:	683b      	ldr	r3, [r7, #0]
 81190be:	2b00      	cmp	r3, #0
 81190c0:	dd0a      	ble.n	81190d8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 81190c2:	69fa      	ldr	r2, [r7, #28]
 81190c4:	1c53      	adds	r3, r2, #1
 81190c6:	61fb      	str	r3, [r7, #28]
 81190c8:	f107 030e 	add.w	r3, r7, #14
 81190cc:	3301      	adds	r3, #1
 81190ce:	7812      	ldrb	r2, [r2, #0]
 81190d0:	701a      	strb	r2, [r3, #0]
    len--;
 81190d2:	683b      	ldr	r3, [r7, #0]
 81190d4:	3b01      	subs	r3, #1
 81190d6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 81190d8:	69fb      	ldr	r3, [r7, #28]
 81190da:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 81190dc:	e00a      	b.n	81190f4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 81190de:	69bb      	ldr	r3, [r7, #24]
 81190e0:	1c9a      	adds	r2, r3, #2
 81190e2:	61ba      	str	r2, [r7, #24]
 81190e4:	881b      	ldrh	r3, [r3, #0]
 81190e6:	461a      	mov	r2, r3
 81190e8:	697b      	ldr	r3, [r7, #20]
 81190ea:	4413      	add	r3, r2
 81190ec:	617b      	str	r3, [r7, #20]
    len -= 2;
 81190ee:	683b      	ldr	r3, [r7, #0]
 81190f0:	3b02      	subs	r3, #2
 81190f2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 81190f4:	683b      	ldr	r3, [r7, #0]
 81190f6:	2b01      	cmp	r3, #1
 81190f8:	dcf1      	bgt.n	81190de <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 81190fa:	683b      	ldr	r3, [r7, #0]
 81190fc:	2b00      	cmp	r3, #0
 81190fe:	dd04      	ble.n	811910a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8119100:	f107 030e 	add.w	r3, r7, #14
 8119104:	69ba      	ldr	r2, [r7, #24]
 8119106:	7812      	ldrb	r2, [r2, #0]
 8119108:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 811910a:	89fb      	ldrh	r3, [r7, #14]
 811910c:	461a      	mov	r2, r3
 811910e:	697b      	ldr	r3, [r7, #20]
 8119110:	4413      	add	r3, r2
 8119112:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8119114:	697b      	ldr	r3, [r7, #20]
 8119116:	0c1a      	lsrs	r2, r3, #16
 8119118:	697b      	ldr	r3, [r7, #20]
 811911a:	b29b      	uxth	r3, r3
 811911c:	4413      	add	r3, r2
 811911e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8119120:	697b      	ldr	r3, [r7, #20]
 8119122:	0c1a      	lsrs	r2, r3, #16
 8119124:	697b      	ldr	r3, [r7, #20]
 8119126:	b29b      	uxth	r3, r3
 8119128:	4413      	add	r3, r2
 811912a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 811912c:	693b      	ldr	r3, [r7, #16]
 811912e:	2b00      	cmp	r3, #0
 8119130:	d007      	beq.n	8119142 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8119132:	697b      	ldr	r3, [r7, #20]
 8119134:	021b      	lsls	r3, r3, #8
 8119136:	b29a      	uxth	r2, r3
 8119138:	697b      	ldr	r3, [r7, #20]
 811913a:	0a1b      	lsrs	r3, r3, #8
 811913c:	b2db      	uxtb	r3, r3
 811913e:	4313      	orrs	r3, r2
 8119140:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8119142:	697b      	ldr	r3, [r7, #20]
 8119144:	b29b      	uxth	r3, r3
}
 8119146:	4618      	mov	r0, r3
 8119148:	3724      	adds	r7, #36	@ 0x24
 811914a:	46bd      	mov	sp, r7
 811914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119150:	4770      	bx	lr

08119152 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8119152:	b580      	push	{r7, lr}
 8119154:	b082      	sub	sp, #8
 8119156:	af00      	add	r7, sp, #0
 8119158:	6078      	str	r0, [r7, #4]
 811915a:	460b      	mov	r3, r1
 811915c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 811915e:	887b      	ldrh	r3, [r7, #2]
 8119160:	4619      	mov	r1, r3
 8119162:	6878      	ldr	r0, [r7, #4]
 8119164:	f7ff ff98 	bl	8119098 <lwip_standard_chksum>
 8119168:	4603      	mov	r3, r0
 811916a:	43db      	mvns	r3, r3
 811916c:	b29b      	uxth	r3, r3
}
 811916e:	4618      	mov	r0, r3
 8119170:	3708      	adds	r7, #8
 8119172:	46bd      	mov	sp, r7
 8119174:	bd80      	pop	{r7, pc}

08119176 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8119176:	b580      	push	{r7, lr}
 8119178:	b086      	sub	sp, #24
 811917a:	af00      	add	r7, sp, #0
 811917c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 811917e:	2300      	movs	r3, #0
 8119180:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8119182:	2300      	movs	r3, #0
 8119184:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8119186:	687b      	ldr	r3, [r7, #4]
 8119188:	613b      	str	r3, [r7, #16]
 811918a:	e02b      	b.n	81191e4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 811918c:	693b      	ldr	r3, [r7, #16]
 811918e:	685a      	ldr	r2, [r3, #4]
 8119190:	693b      	ldr	r3, [r7, #16]
 8119192:	895b      	ldrh	r3, [r3, #10]
 8119194:	4619      	mov	r1, r3
 8119196:	4610      	mov	r0, r2
 8119198:	f7ff ff7e 	bl	8119098 <lwip_standard_chksum>
 811919c:	4603      	mov	r3, r0
 811919e:	461a      	mov	r2, r3
 81191a0:	697b      	ldr	r3, [r7, #20]
 81191a2:	4413      	add	r3, r2
 81191a4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 81191a6:	697b      	ldr	r3, [r7, #20]
 81191a8:	0c1a      	lsrs	r2, r3, #16
 81191aa:	697b      	ldr	r3, [r7, #20]
 81191ac:	b29b      	uxth	r3, r3
 81191ae:	4413      	add	r3, r2
 81191b0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 81191b2:	693b      	ldr	r3, [r7, #16]
 81191b4:	895b      	ldrh	r3, [r3, #10]
 81191b6:	f003 0301 	and.w	r3, r3, #1
 81191ba:	b29b      	uxth	r3, r3
 81191bc:	2b00      	cmp	r3, #0
 81191be:	d00e      	beq.n	81191de <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 81191c0:	68fb      	ldr	r3, [r7, #12]
 81191c2:	2b00      	cmp	r3, #0
 81191c4:	bf0c      	ite	eq
 81191c6:	2301      	moveq	r3, #1
 81191c8:	2300      	movne	r3, #0
 81191ca:	b2db      	uxtb	r3, r3
 81191cc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 81191ce:	697b      	ldr	r3, [r7, #20]
 81191d0:	021b      	lsls	r3, r3, #8
 81191d2:	b29a      	uxth	r2, r3
 81191d4:	697b      	ldr	r3, [r7, #20]
 81191d6:	0a1b      	lsrs	r3, r3, #8
 81191d8:	b2db      	uxtb	r3, r3
 81191da:	4313      	orrs	r3, r2
 81191dc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 81191de:	693b      	ldr	r3, [r7, #16]
 81191e0:	681b      	ldr	r3, [r3, #0]
 81191e2:	613b      	str	r3, [r7, #16]
 81191e4:	693b      	ldr	r3, [r7, #16]
 81191e6:	2b00      	cmp	r3, #0
 81191e8:	d1d0      	bne.n	811918c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 81191ea:	68fb      	ldr	r3, [r7, #12]
 81191ec:	2b00      	cmp	r3, #0
 81191ee:	d007      	beq.n	8119200 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 81191f0:	697b      	ldr	r3, [r7, #20]
 81191f2:	021b      	lsls	r3, r3, #8
 81191f4:	b29a      	uxth	r2, r3
 81191f6:	697b      	ldr	r3, [r7, #20]
 81191f8:	0a1b      	lsrs	r3, r3, #8
 81191fa:	b2db      	uxtb	r3, r3
 81191fc:	4313      	orrs	r3, r2
 81191fe:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8119200:	697b      	ldr	r3, [r7, #20]
 8119202:	b29b      	uxth	r3, r3
 8119204:	43db      	mvns	r3, r3
 8119206:	b29b      	uxth	r3, r3
}
 8119208:	4618      	mov	r0, r3
 811920a:	3718      	adds	r7, #24
 811920c:	46bd      	mov	sp, r7
 811920e:	bd80      	pop	{r7, pc}

08119210 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8119210:	b580      	push	{r7, lr}
 8119212:	b082      	sub	sp, #8
 8119214:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8119216:	2300      	movs	r3, #0
 8119218:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 811921a:	f003 f997 	bl	811c54c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 811921e:	f001 fba3 	bl	811a968 <mem_init>
  memp_init();
 8119222:	f001 feed 	bl	811b000 <memp_init>
  pbuf_init();
  netif_init();
 8119226:	f001 fff9 	bl	811b21c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 811922a:	f009 fcf9 	bl	8122c20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 811922e:	f003 fa09 	bl	811c644 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8119232:	f009 fc3b 	bl	8122aac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8119236:	bf00      	nop
 8119238:	3708      	adds	r7, #8
 811923a:	46bd      	mov	sp, r7
 811923c:	bd80      	pop	{r7, pc}
	...

08119240 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8119240:	b480      	push	{r7}
 8119242:	b085      	sub	sp, #20
 8119244:	af00      	add	r7, sp, #0
 8119246:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8119248:	4b33      	ldr	r3, [pc, #204]	@ (8119318 <ip4_route+0xd8>)
 811924a:	681b      	ldr	r3, [r3, #0]
 811924c:	60fb      	str	r3, [r7, #12]
 811924e:	e036      	b.n	81192be <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8119250:	68fb      	ldr	r3, [r7, #12]
 8119252:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119256:	f003 0301 	and.w	r3, r3, #1
 811925a:	b2db      	uxtb	r3, r3
 811925c:	2b00      	cmp	r3, #0
 811925e:	d02b      	beq.n	81192b8 <ip4_route+0x78>
 8119260:	68fb      	ldr	r3, [r7, #12]
 8119262:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119266:	089b      	lsrs	r3, r3, #2
 8119268:	f003 0301 	and.w	r3, r3, #1
 811926c:	b2db      	uxtb	r3, r3
 811926e:	2b00      	cmp	r3, #0
 8119270:	d022      	beq.n	81192b8 <ip4_route+0x78>
 8119272:	68fb      	ldr	r3, [r7, #12]
 8119274:	3304      	adds	r3, #4
 8119276:	681b      	ldr	r3, [r3, #0]
 8119278:	2b00      	cmp	r3, #0
 811927a:	d01d      	beq.n	81192b8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 811927c:	687b      	ldr	r3, [r7, #4]
 811927e:	681a      	ldr	r2, [r3, #0]
 8119280:	68fb      	ldr	r3, [r7, #12]
 8119282:	3304      	adds	r3, #4
 8119284:	681b      	ldr	r3, [r3, #0]
 8119286:	405a      	eors	r2, r3
 8119288:	68fb      	ldr	r3, [r7, #12]
 811928a:	3308      	adds	r3, #8
 811928c:	681b      	ldr	r3, [r3, #0]
 811928e:	4013      	ands	r3, r2
 8119290:	2b00      	cmp	r3, #0
 8119292:	d101      	bne.n	8119298 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8119294:	68fb      	ldr	r3, [r7, #12]
 8119296:	e038      	b.n	811930a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8119298:	68fb      	ldr	r3, [r7, #12]
 811929a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811929e:	f003 0302 	and.w	r3, r3, #2
 81192a2:	2b00      	cmp	r3, #0
 81192a4:	d108      	bne.n	81192b8 <ip4_route+0x78>
 81192a6:	687b      	ldr	r3, [r7, #4]
 81192a8:	681a      	ldr	r2, [r3, #0]
 81192aa:	68fb      	ldr	r3, [r7, #12]
 81192ac:	330c      	adds	r3, #12
 81192ae:	681b      	ldr	r3, [r3, #0]
 81192b0:	429a      	cmp	r2, r3
 81192b2:	d101      	bne.n	81192b8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 81192b4:	68fb      	ldr	r3, [r7, #12]
 81192b6:	e028      	b.n	811930a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 81192b8:	68fb      	ldr	r3, [r7, #12]
 81192ba:	681b      	ldr	r3, [r3, #0]
 81192bc:	60fb      	str	r3, [r7, #12]
 81192be:	68fb      	ldr	r3, [r7, #12]
 81192c0:	2b00      	cmp	r3, #0
 81192c2:	d1c5      	bne.n	8119250 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 81192c4:	4b15      	ldr	r3, [pc, #84]	@ (811931c <ip4_route+0xdc>)
 81192c6:	681b      	ldr	r3, [r3, #0]
 81192c8:	2b00      	cmp	r3, #0
 81192ca:	d01a      	beq.n	8119302 <ip4_route+0xc2>
 81192cc:	4b13      	ldr	r3, [pc, #76]	@ (811931c <ip4_route+0xdc>)
 81192ce:	681b      	ldr	r3, [r3, #0]
 81192d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81192d4:	f003 0301 	and.w	r3, r3, #1
 81192d8:	2b00      	cmp	r3, #0
 81192da:	d012      	beq.n	8119302 <ip4_route+0xc2>
 81192dc:	4b0f      	ldr	r3, [pc, #60]	@ (811931c <ip4_route+0xdc>)
 81192de:	681b      	ldr	r3, [r3, #0]
 81192e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81192e4:	f003 0304 	and.w	r3, r3, #4
 81192e8:	2b00      	cmp	r3, #0
 81192ea:	d00a      	beq.n	8119302 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 81192ec:	4b0b      	ldr	r3, [pc, #44]	@ (811931c <ip4_route+0xdc>)
 81192ee:	681b      	ldr	r3, [r3, #0]
 81192f0:	3304      	adds	r3, #4
 81192f2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 81192f4:	2b00      	cmp	r3, #0
 81192f6:	d004      	beq.n	8119302 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 81192f8:	687b      	ldr	r3, [r7, #4]
 81192fa:	681b      	ldr	r3, [r3, #0]
 81192fc:	b2db      	uxtb	r3, r3
 81192fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8119300:	d101      	bne.n	8119306 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8119302:	2300      	movs	r3, #0
 8119304:	e001      	b.n	811930a <ip4_route+0xca>
  }

  return netif_default;
 8119306:	4b05      	ldr	r3, [pc, #20]	@ (811931c <ip4_route+0xdc>)
 8119308:	681b      	ldr	r3, [r3, #0]
}
 811930a:	4618      	mov	r0, r3
 811930c:	3714      	adds	r7, #20
 811930e:	46bd      	mov	sp, r7
 8119310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119314:	4770      	bx	lr
 8119316:	bf00      	nop
 8119318:	1000e488 	.word	0x1000e488
 811931c:	1000e48c 	.word	0x1000e48c

08119320 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8119320:	b580      	push	{r7, lr}
 8119322:	b082      	sub	sp, #8
 8119324:	af00      	add	r7, sp, #0
 8119326:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8119328:	687b      	ldr	r3, [r7, #4]
 811932a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811932e:	f003 0301 	and.w	r3, r3, #1
 8119332:	b2db      	uxtb	r3, r3
 8119334:	2b00      	cmp	r3, #0
 8119336:	d016      	beq.n	8119366 <ip4_input_accept+0x46>
 8119338:	687b      	ldr	r3, [r7, #4]
 811933a:	3304      	adds	r3, #4
 811933c:	681b      	ldr	r3, [r3, #0]
 811933e:	2b00      	cmp	r3, #0
 8119340:	d011      	beq.n	8119366 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8119342:	4b0b      	ldr	r3, [pc, #44]	@ (8119370 <ip4_input_accept+0x50>)
 8119344:	695a      	ldr	r2, [r3, #20]
 8119346:	687b      	ldr	r3, [r7, #4]
 8119348:	3304      	adds	r3, #4
 811934a:	681b      	ldr	r3, [r3, #0]
 811934c:	429a      	cmp	r2, r3
 811934e:	d008      	beq.n	8119362 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8119350:	4b07      	ldr	r3, [pc, #28]	@ (8119370 <ip4_input_accept+0x50>)
 8119352:	695b      	ldr	r3, [r3, #20]
 8119354:	6879      	ldr	r1, [r7, #4]
 8119356:	4618      	mov	r0, r3
 8119358:	f000 fa08 	bl	811976c <ip4_addr_isbroadcast_u32>
 811935c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811935e:	2b00      	cmp	r3, #0
 8119360:	d001      	beq.n	8119366 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8119362:	2301      	movs	r3, #1
 8119364:	e000      	b.n	8119368 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8119366:	2300      	movs	r3, #0
}
 8119368:	4618      	mov	r0, r3
 811936a:	3708      	adds	r7, #8
 811936c:	46bd      	mov	sp, r7
 811936e:	bd80      	pop	{r7, pc}
 8119370:	1000b300 	.word	0x1000b300

08119374 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8119374:	b580      	push	{r7, lr}
 8119376:	b086      	sub	sp, #24
 8119378:	af00      	add	r7, sp, #0
 811937a:	6078      	str	r0, [r7, #4]
 811937c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 811937e:	687b      	ldr	r3, [r7, #4]
 8119380:	685b      	ldr	r3, [r3, #4]
 8119382:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8119384:	697b      	ldr	r3, [r7, #20]
 8119386:	781b      	ldrb	r3, [r3, #0]
 8119388:	091b      	lsrs	r3, r3, #4
 811938a:	b2db      	uxtb	r3, r3
 811938c:	2b04      	cmp	r3, #4
 811938e:	d004      	beq.n	811939a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8119390:	6878      	ldr	r0, [r7, #4]
 8119392:	f002 fdbb 	bl	811bf0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8119396:	2300      	movs	r3, #0
 8119398:	e107      	b.n	81195aa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 811939a:	697b      	ldr	r3, [r7, #20]
 811939c:	781b      	ldrb	r3, [r3, #0]
 811939e:	f003 030f 	and.w	r3, r3, #15
 81193a2:	b2db      	uxtb	r3, r3
 81193a4:	009b      	lsls	r3, r3, #2
 81193a6:	b2db      	uxtb	r3, r3
 81193a8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 81193aa:	697b      	ldr	r3, [r7, #20]
 81193ac:	885b      	ldrh	r3, [r3, #2]
 81193ae:	b29b      	uxth	r3, r3
 81193b0:	4618      	mov	r0, r3
 81193b2:	f7fe fba3 	bl	8117afc <lwip_htons>
 81193b6:	4603      	mov	r3, r0
 81193b8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 81193ba:	687b      	ldr	r3, [r7, #4]
 81193bc:	891b      	ldrh	r3, [r3, #8]
 81193be:	89ba      	ldrh	r2, [r7, #12]
 81193c0:	429a      	cmp	r2, r3
 81193c2:	d204      	bcs.n	81193ce <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 81193c4:	89bb      	ldrh	r3, [r7, #12]
 81193c6:	4619      	mov	r1, r3
 81193c8:	6878      	ldr	r0, [r7, #4]
 81193ca:	f002 fc1b 	bl	811bc04 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 81193ce:	687b      	ldr	r3, [r7, #4]
 81193d0:	895b      	ldrh	r3, [r3, #10]
 81193d2:	89fa      	ldrh	r2, [r7, #14]
 81193d4:	429a      	cmp	r2, r3
 81193d6:	d807      	bhi.n	81193e8 <ip4_input+0x74>
 81193d8:	687b      	ldr	r3, [r7, #4]
 81193da:	891b      	ldrh	r3, [r3, #8]
 81193dc:	89ba      	ldrh	r2, [r7, #12]
 81193de:	429a      	cmp	r2, r3
 81193e0:	d802      	bhi.n	81193e8 <ip4_input+0x74>
 81193e2:	89fb      	ldrh	r3, [r7, #14]
 81193e4:	2b13      	cmp	r3, #19
 81193e6:	d804      	bhi.n	81193f2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 81193e8:	6878      	ldr	r0, [r7, #4]
 81193ea:	f002 fd8f 	bl	811bf0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 81193ee:	2300      	movs	r3, #0
 81193f0:	e0db      	b.n	81195aa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 81193f2:	697b      	ldr	r3, [r7, #20]
 81193f4:	691b      	ldr	r3, [r3, #16]
 81193f6:	4a6f      	ldr	r2, [pc, #444]	@ (81195b4 <ip4_input+0x240>)
 81193f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 81193fa:	697b      	ldr	r3, [r7, #20]
 81193fc:	68db      	ldr	r3, [r3, #12]
 81193fe:	4a6d      	ldr	r2, [pc, #436]	@ (81195b4 <ip4_input+0x240>)
 8119400:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8119402:	4b6c      	ldr	r3, [pc, #432]	@ (81195b4 <ip4_input+0x240>)
 8119404:	695b      	ldr	r3, [r3, #20]
 8119406:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 811940a:	2be0      	cmp	r3, #224	@ 0xe0
 811940c:	d112      	bne.n	8119434 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 811940e:	683b      	ldr	r3, [r7, #0]
 8119410:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119414:	f003 0301 	and.w	r3, r3, #1
 8119418:	b2db      	uxtb	r3, r3
 811941a:	2b00      	cmp	r3, #0
 811941c:	d007      	beq.n	811942e <ip4_input+0xba>
 811941e:	683b      	ldr	r3, [r7, #0]
 8119420:	3304      	adds	r3, #4
 8119422:	681b      	ldr	r3, [r3, #0]
 8119424:	2b00      	cmp	r3, #0
 8119426:	d002      	beq.n	811942e <ip4_input+0xba>
      netif = inp;
 8119428:	683b      	ldr	r3, [r7, #0]
 811942a:	613b      	str	r3, [r7, #16]
 811942c:	e02a      	b.n	8119484 <ip4_input+0x110>
    } else {
      netif = NULL;
 811942e:	2300      	movs	r3, #0
 8119430:	613b      	str	r3, [r7, #16]
 8119432:	e027      	b.n	8119484 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8119434:	6838      	ldr	r0, [r7, #0]
 8119436:	f7ff ff73 	bl	8119320 <ip4_input_accept>
 811943a:	4603      	mov	r3, r0
 811943c:	2b00      	cmp	r3, #0
 811943e:	d002      	beq.n	8119446 <ip4_input+0xd2>
      netif = inp;
 8119440:	683b      	ldr	r3, [r7, #0]
 8119442:	613b      	str	r3, [r7, #16]
 8119444:	e01e      	b.n	8119484 <ip4_input+0x110>
    } else {
      netif = NULL;
 8119446:	2300      	movs	r3, #0
 8119448:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 811944a:	4b5a      	ldr	r3, [pc, #360]	@ (81195b4 <ip4_input+0x240>)
 811944c:	695b      	ldr	r3, [r3, #20]
 811944e:	b2db      	uxtb	r3, r3
 8119450:	2b7f      	cmp	r3, #127	@ 0x7f
 8119452:	d017      	beq.n	8119484 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8119454:	4b58      	ldr	r3, [pc, #352]	@ (81195b8 <ip4_input+0x244>)
 8119456:	681b      	ldr	r3, [r3, #0]
 8119458:	613b      	str	r3, [r7, #16]
 811945a:	e00e      	b.n	811947a <ip4_input+0x106>
          if (netif == inp) {
 811945c:	693a      	ldr	r2, [r7, #16]
 811945e:	683b      	ldr	r3, [r7, #0]
 8119460:	429a      	cmp	r2, r3
 8119462:	d006      	beq.n	8119472 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8119464:	6938      	ldr	r0, [r7, #16]
 8119466:	f7ff ff5b 	bl	8119320 <ip4_input_accept>
 811946a:	4603      	mov	r3, r0
 811946c:	2b00      	cmp	r3, #0
 811946e:	d108      	bne.n	8119482 <ip4_input+0x10e>
 8119470:	e000      	b.n	8119474 <ip4_input+0x100>
            continue;
 8119472:	bf00      	nop
        NETIF_FOREACH(netif) {
 8119474:	693b      	ldr	r3, [r7, #16]
 8119476:	681b      	ldr	r3, [r3, #0]
 8119478:	613b      	str	r3, [r7, #16]
 811947a:	693b      	ldr	r3, [r7, #16]
 811947c:	2b00      	cmp	r3, #0
 811947e:	d1ed      	bne.n	811945c <ip4_input+0xe8>
 8119480:	e000      	b.n	8119484 <ip4_input+0x110>
            break;
 8119482:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8119484:	4b4b      	ldr	r3, [pc, #300]	@ (81195b4 <ip4_input+0x240>)
 8119486:	691b      	ldr	r3, [r3, #16]
 8119488:	6839      	ldr	r1, [r7, #0]
 811948a:	4618      	mov	r0, r3
 811948c:	f000 f96e 	bl	811976c <ip4_addr_isbroadcast_u32>
 8119490:	4603      	mov	r3, r0
 8119492:	2b00      	cmp	r3, #0
 8119494:	d105      	bne.n	81194a2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8119496:	4b47      	ldr	r3, [pc, #284]	@ (81195b4 <ip4_input+0x240>)
 8119498:	691b      	ldr	r3, [r3, #16]
 811949a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 811949e:	2be0      	cmp	r3, #224	@ 0xe0
 81194a0:	d104      	bne.n	81194ac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 81194a2:	6878      	ldr	r0, [r7, #4]
 81194a4:	f002 fd32 	bl	811bf0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 81194a8:	2300      	movs	r3, #0
 81194aa:	e07e      	b.n	81195aa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 81194ac:	693b      	ldr	r3, [r7, #16]
 81194ae:	2b00      	cmp	r3, #0
 81194b0:	d104      	bne.n	81194bc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 81194b2:	6878      	ldr	r0, [r7, #4]
 81194b4:	f002 fd2a 	bl	811bf0c <pbuf_free>
    return ERR_OK;
 81194b8:	2300      	movs	r3, #0
 81194ba:	e076      	b.n	81195aa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 81194bc:	697b      	ldr	r3, [r7, #20]
 81194be:	88db      	ldrh	r3, [r3, #6]
 81194c0:	b29b      	uxth	r3, r3
 81194c2:	461a      	mov	r2, r3
 81194c4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 81194c8:	4013      	ands	r3, r2
 81194ca:	2b00      	cmp	r3, #0
 81194cc:	d00b      	beq.n	81194e6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 81194ce:	6878      	ldr	r0, [r7, #4]
 81194d0:	f000 fe4c 	bl	811a16c <ip4_reass>
 81194d4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 81194d6:	687b      	ldr	r3, [r7, #4]
 81194d8:	2b00      	cmp	r3, #0
 81194da:	d101      	bne.n	81194e0 <ip4_input+0x16c>
      return ERR_OK;
 81194dc:	2300      	movs	r3, #0
 81194de:	e064      	b.n	81195aa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 81194e0:	687b      	ldr	r3, [r7, #4]
 81194e2:	685b      	ldr	r3, [r3, #4]
 81194e4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 81194e6:	4a33      	ldr	r2, [pc, #204]	@ (81195b4 <ip4_input+0x240>)
 81194e8:	693b      	ldr	r3, [r7, #16]
 81194ea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 81194ec:	4a31      	ldr	r2, [pc, #196]	@ (81195b4 <ip4_input+0x240>)
 81194ee:	683b      	ldr	r3, [r7, #0]
 81194f0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 81194f2:	4a30      	ldr	r2, [pc, #192]	@ (81195b4 <ip4_input+0x240>)
 81194f4:	697b      	ldr	r3, [r7, #20]
 81194f6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 81194f8:	697b      	ldr	r3, [r7, #20]
 81194fa:	781b      	ldrb	r3, [r3, #0]
 81194fc:	f003 030f 	and.w	r3, r3, #15
 8119500:	b2db      	uxtb	r3, r3
 8119502:	009b      	lsls	r3, r3, #2
 8119504:	b2db      	uxtb	r3, r3
 8119506:	461a      	mov	r2, r3
 8119508:	4b2a      	ldr	r3, [pc, #168]	@ (81195b4 <ip4_input+0x240>)
 811950a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 811950c:	89fb      	ldrh	r3, [r7, #14]
 811950e:	4619      	mov	r1, r3
 8119510:	6878      	ldr	r0, [r7, #4]
 8119512:	f002 fc75 	bl	811be00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8119516:	697b      	ldr	r3, [r7, #20]
 8119518:	7a5b      	ldrb	r3, [r3, #9]
 811951a:	2b11      	cmp	r3, #17
 811951c:	d006      	beq.n	811952c <ip4_input+0x1b8>
 811951e:	2b11      	cmp	r3, #17
 8119520:	dc13      	bgt.n	811954a <ip4_input+0x1d6>
 8119522:	2b01      	cmp	r3, #1
 8119524:	d00c      	beq.n	8119540 <ip4_input+0x1cc>
 8119526:	2b06      	cmp	r3, #6
 8119528:	d005      	beq.n	8119536 <ip4_input+0x1c2>
 811952a:	e00e      	b.n	811954a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 811952c:	6839      	ldr	r1, [r7, #0]
 811952e:	6878      	ldr	r0, [r7, #4]
 8119530:	f009 fc24 	bl	8122d7c <udp_input>
        break;
 8119534:	e026      	b.n	8119584 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8119536:	6839      	ldr	r1, [r7, #0]
 8119538:	6878      	ldr	r0, [r7, #4]
 811953a:	f004 fe85 	bl	811e248 <tcp_input>
        break;
 811953e:	e021      	b.n	8119584 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8119540:	6839      	ldr	r1, [r7, #0]
 8119542:	6878      	ldr	r0, [r7, #4]
 8119544:	f7ff fbf4 	bl	8118d30 <icmp_input>
        break;
 8119548:	e01c      	b.n	8119584 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 811954a:	4b1a      	ldr	r3, [pc, #104]	@ (81195b4 <ip4_input+0x240>)
 811954c:	695b      	ldr	r3, [r3, #20]
 811954e:	6939      	ldr	r1, [r7, #16]
 8119550:	4618      	mov	r0, r3
 8119552:	f000 f90b 	bl	811976c <ip4_addr_isbroadcast_u32>
 8119556:	4603      	mov	r3, r0
 8119558:	2b00      	cmp	r3, #0
 811955a:	d10f      	bne.n	811957c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811955c:	4b15      	ldr	r3, [pc, #84]	@ (81195b4 <ip4_input+0x240>)
 811955e:	695b      	ldr	r3, [r3, #20]
 8119560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8119564:	2be0      	cmp	r3, #224	@ 0xe0
 8119566:	d009      	beq.n	811957c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8119568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 811956c:	4619      	mov	r1, r3
 811956e:	6878      	ldr	r0, [r7, #4]
 8119570:	f002 fcb9 	bl	811bee6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8119574:	2102      	movs	r1, #2
 8119576:	6878      	ldr	r0, [r7, #4]
 8119578:	f7ff fcfa 	bl	8118f70 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 811957c:	6878      	ldr	r0, [r7, #4]
 811957e:	f002 fcc5 	bl	811bf0c <pbuf_free>
        break;
 8119582:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8119584:	4b0b      	ldr	r3, [pc, #44]	@ (81195b4 <ip4_input+0x240>)
 8119586:	2200      	movs	r2, #0
 8119588:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 811958a:	4b0a      	ldr	r3, [pc, #40]	@ (81195b4 <ip4_input+0x240>)
 811958c:	2200      	movs	r2, #0
 811958e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8119590:	4b08      	ldr	r3, [pc, #32]	@ (81195b4 <ip4_input+0x240>)
 8119592:	2200      	movs	r2, #0
 8119594:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8119596:	4b07      	ldr	r3, [pc, #28]	@ (81195b4 <ip4_input+0x240>)
 8119598:	2200      	movs	r2, #0
 811959a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 811959c:	4b05      	ldr	r3, [pc, #20]	@ (81195b4 <ip4_input+0x240>)
 811959e:	2200      	movs	r2, #0
 81195a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 81195a2:	4b04      	ldr	r3, [pc, #16]	@ (81195b4 <ip4_input+0x240>)
 81195a4:	2200      	movs	r2, #0
 81195a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 81195a8:	2300      	movs	r3, #0
}
 81195aa:	4618      	mov	r0, r3
 81195ac:	3718      	adds	r7, #24
 81195ae:	46bd      	mov	sp, r7
 81195b0:	bd80      	pop	{r7, pc}
 81195b2:	bf00      	nop
 81195b4:	1000b300 	.word	0x1000b300
 81195b8:	1000e488 	.word	0x1000e488

081195bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 81195bc:	b580      	push	{r7, lr}
 81195be:	b08a      	sub	sp, #40	@ 0x28
 81195c0:	af04      	add	r7, sp, #16
 81195c2:	60f8      	str	r0, [r7, #12]
 81195c4:	60b9      	str	r1, [r7, #8]
 81195c6:	607a      	str	r2, [r7, #4]
 81195c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 81195ca:	68bb      	ldr	r3, [r7, #8]
 81195cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 81195ce:	687b      	ldr	r3, [r7, #4]
 81195d0:	2b00      	cmp	r3, #0
 81195d2:	d009      	beq.n	81195e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 81195d4:	68bb      	ldr	r3, [r7, #8]
 81195d6:	2b00      	cmp	r3, #0
 81195d8:	d003      	beq.n	81195e2 <ip4_output_if+0x26>
 81195da:	68bb      	ldr	r3, [r7, #8]
 81195dc:	681b      	ldr	r3, [r3, #0]
 81195de:	2b00      	cmp	r3, #0
 81195e0:	d102      	bne.n	81195e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 81195e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81195e4:	3304      	adds	r3, #4
 81195e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 81195e8:	78fa      	ldrb	r2, [r7, #3]
 81195ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81195ec:	9302      	str	r3, [sp, #8]
 81195ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 81195f2:	9301      	str	r3, [sp, #4]
 81195f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 81195f8:	9300      	str	r3, [sp, #0]
 81195fa:	4613      	mov	r3, r2
 81195fc:	687a      	ldr	r2, [r7, #4]
 81195fe:	6979      	ldr	r1, [r7, #20]
 8119600:	68f8      	ldr	r0, [r7, #12]
 8119602:	f000 f805 	bl	8119610 <ip4_output_if_src>
 8119606:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8119608:	4618      	mov	r0, r3
 811960a:	3718      	adds	r7, #24
 811960c:	46bd      	mov	sp, r7
 811960e:	bd80      	pop	{r7, pc}

08119610 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8119610:	b580      	push	{r7, lr}
 8119612:	b088      	sub	sp, #32
 8119614:	af00      	add	r7, sp, #0
 8119616:	60f8      	str	r0, [r7, #12]
 8119618:	60b9      	str	r1, [r7, #8]
 811961a:	607a      	str	r2, [r7, #4]
 811961c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 811961e:	68fb      	ldr	r3, [r7, #12]
 8119620:	7b9b      	ldrb	r3, [r3, #14]
 8119622:	2b01      	cmp	r3, #1
 8119624:	d006      	beq.n	8119634 <ip4_output_if_src+0x24>
 8119626:	4b4b      	ldr	r3, [pc, #300]	@ (8119754 <ip4_output_if_src+0x144>)
 8119628:	f44f 7255 	mov.w	r2, #852	@ 0x354
 811962c:	494a      	ldr	r1, [pc, #296]	@ (8119758 <ip4_output_if_src+0x148>)
 811962e:	484b      	ldr	r0, [pc, #300]	@ (811975c <ip4_output_if_src+0x14c>)
 8119630:	f00b f814 	bl	812465c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8119634:	687b      	ldr	r3, [r7, #4]
 8119636:	2b00      	cmp	r3, #0
 8119638:	d060      	beq.n	81196fc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 811963a:	2314      	movs	r3, #20
 811963c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 811963e:	2114      	movs	r1, #20
 8119640:	68f8      	ldr	r0, [r7, #12]
 8119642:	f002 fbcd 	bl	811bde0 <pbuf_add_header>
 8119646:	4603      	mov	r3, r0
 8119648:	2b00      	cmp	r3, #0
 811964a:	d002      	beq.n	8119652 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 811964c:	f06f 0301 	mvn.w	r3, #1
 8119650:	e07c      	b.n	811974c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8119652:	68fb      	ldr	r3, [r7, #12]
 8119654:	685b      	ldr	r3, [r3, #4]
 8119656:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8119658:	68fb      	ldr	r3, [r7, #12]
 811965a:	895b      	ldrh	r3, [r3, #10]
 811965c:	2b13      	cmp	r3, #19
 811965e:	d806      	bhi.n	811966e <ip4_output_if_src+0x5e>
 8119660:	4b3c      	ldr	r3, [pc, #240]	@ (8119754 <ip4_output_if_src+0x144>)
 8119662:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8119666:	493e      	ldr	r1, [pc, #248]	@ (8119760 <ip4_output_if_src+0x150>)
 8119668:	483c      	ldr	r0, [pc, #240]	@ (811975c <ip4_output_if_src+0x14c>)
 811966a:	f00a fff7 	bl	812465c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 811966e:	69fb      	ldr	r3, [r7, #28]
 8119670:	78fa      	ldrb	r2, [r7, #3]
 8119672:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8119674:	69fb      	ldr	r3, [r7, #28]
 8119676:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 811967a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 811967c:	687b      	ldr	r3, [r7, #4]
 811967e:	681a      	ldr	r2, [r3, #0]
 8119680:	69fb      	ldr	r3, [r7, #28]
 8119682:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8119684:	8b7b      	ldrh	r3, [r7, #26]
 8119686:	089b      	lsrs	r3, r3, #2
 8119688:	b29b      	uxth	r3, r3
 811968a:	b2db      	uxtb	r3, r3
 811968c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8119690:	b2da      	uxtb	r2, r3
 8119692:	69fb      	ldr	r3, [r7, #28]
 8119694:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8119696:	69fb      	ldr	r3, [r7, #28]
 8119698:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 811969c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 811969e:	68fb      	ldr	r3, [r7, #12]
 81196a0:	891b      	ldrh	r3, [r3, #8]
 81196a2:	4618      	mov	r0, r3
 81196a4:	f7fe fa2a 	bl	8117afc <lwip_htons>
 81196a8:	4603      	mov	r3, r0
 81196aa:	461a      	mov	r2, r3
 81196ac:	69fb      	ldr	r3, [r7, #28]
 81196ae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 81196b0:	69fb      	ldr	r3, [r7, #28]
 81196b2:	2200      	movs	r2, #0
 81196b4:	719a      	strb	r2, [r3, #6]
 81196b6:	2200      	movs	r2, #0
 81196b8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 81196ba:	4b2a      	ldr	r3, [pc, #168]	@ (8119764 <ip4_output_if_src+0x154>)
 81196bc:	881b      	ldrh	r3, [r3, #0]
 81196be:	4618      	mov	r0, r3
 81196c0:	f7fe fa1c 	bl	8117afc <lwip_htons>
 81196c4:	4603      	mov	r3, r0
 81196c6:	461a      	mov	r2, r3
 81196c8:	69fb      	ldr	r3, [r7, #28]
 81196ca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 81196cc:	4b25      	ldr	r3, [pc, #148]	@ (8119764 <ip4_output_if_src+0x154>)
 81196ce:	881b      	ldrh	r3, [r3, #0]
 81196d0:	3301      	adds	r3, #1
 81196d2:	b29a      	uxth	r2, r3
 81196d4:	4b23      	ldr	r3, [pc, #140]	@ (8119764 <ip4_output_if_src+0x154>)
 81196d6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 81196d8:	68bb      	ldr	r3, [r7, #8]
 81196da:	2b00      	cmp	r3, #0
 81196dc:	d104      	bne.n	81196e8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 81196de:	4b22      	ldr	r3, [pc, #136]	@ (8119768 <ip4_output_if_src+0x158>)
 81196e0:	681a      	ldr	r2, [r3, #0]
 81196e2:	69fb      	ldr	r3, [r7, #28]
 81196e4:	60da      	str	r2, [r3, #12]
 81196e6:	e003      	b.n	81196f0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 81196e8:	68bb      	ldr	r3, [r7, #8]
 81196ea:	681a      	ldr	r2, [r3, #0]
 81196ec:	69fb      	ldr	r3, [r7, #28]
 81196ee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 81196f0:	69fb      	ldr	r3, [r7, #28]
 81196f2:	2200      	movs	r2, #0
 81196f4:	729a      	strb	r2, [r3, #10]
 81196f6:	2200      	movs	r2, #0
 81196f8:	72da      	strb	r2, [r3, #11]
 81196fa:	e00f      	b.n	811971c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 81196fc:	68fb      	ldr	r3, [r7, #12]
 81196fe:	895b      	ldrh	r3, [r3, #10]
 8119700:	2b13      	cmp	r3, #19
 8119702:	d802      	bhi.n	811970a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8119704:	f06f 0301 	mvn.w	r3, #1
 8119708:	e020      	b.n	811974c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 811970a:	68fb      	ldr	r3, [r7, #12]
 811970c:	685b      	ldr	r3, [r3, #4]
 811970e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8119710:	69fb      	ldr	r3, [r7, #28]
 8119712:	691b      	ldr	r3, [r3, #16]
 8119714:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8119716:	f107 0314 	add.w	r3, r7, #20
 811971a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 811971c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811971e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8119720:	2b00      	cmp	r3, #0
 8119722:	d00c      	beq.n	811973e <ip4_output_if_src+0x12e>
 8119724:	68fb      	ldr	r3, [r7, #12]
 8119726:	891a      	ldrh	r2, [r3, #8]
 8119728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811972a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811972c:	429a      	cmp	r2, r3
 811972e:	d906      	bls.n	811973e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8119730:	687a      	ldr	r2, [r7, #4]
 8119732:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8119734:	68f8      	ldr	r0, [r7, #12]
 8119736:	f000 ff0d 	bl	811a554 <ip4_frag>
 811973a:	4603      	mov	r3, r0
 811973c:	e006      	b.n	811974c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 811973e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119740:	695b      	ldr	r3, [r3, #20]
 8119742:	687a      	ldr	r2, [r7, #4]
 8119744:	68f9      	ldr	r1, [r7, #12]
 8119746:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8119748:	4798      	blx	r3
 811974a:	4603      	mov	r3, r0
}
 811974c:	4618      	mov	r0, r3
 811974e:	3720      	adds	r7, #32
 8119750:	46bd      	mov	sp, r7
 8119752:	bd80      	pop	{r7, pc}
 8119754:	08125a94 	.word	0x08125a94
 8119758:	08125b0c 	.word	0x08125b0c
 811975c:	08125b18 	.word	0x08125b18
 8119760:	08125b40 	.word	0x08125b40
 8119764:	1000b318 	.word	0x1000b318
 8119768:	081285e8 	.word	0x081285e8

0811976c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 811976c:	b480      	push	{r7}
 811976e:	b085      	sub	sp, #20
 8119770:	af00      	add	r7, sp, #0
 8119772:	6078      	str	r0, [r7, #4]
 8119774:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8119776:	687b      	ldr	r3, [r7, #4]
 8119778:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 811977a:	687b      	ldr	r3, [r7, #4]
 811977c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8119780:	d002      	beq.n	8119788 <ip4_addr_isbroadcast_u32+0x1c>
 8119782:	687b      	ldr	r3, [r7, #4]
 8119784:	2b00      	cmp	r3, #0
 8119786:	d101      	bne.n	811978c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8119788:	2301      	movs	r3, #1
 811978a:	e02a      	b.n	81197e2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 811978c:	683b      	ldr	r3, [r7, #0]
 811978e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119792:	f003 0302 	and.w	r3, r3, #2
 8119796:	2b00      	cmp	r3, #0
 8119798:	d101      	bne.n	811979e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 811979a:	2300      	movs	r3, #0
 811979c:	e021      	b.n	81197e2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 811979e:	683b      	ldr	r3, [r7, #0]
 81197a0:	3304      	adds	r3, #4
 81197a2:	681b      	ldr	r3, [r3, #0]
 81197a4:	687a      	ldr	r2, [r7, #4]
 81197a6:	429a      	cmp	r2, r3
 81197a8:	d101      	bne.n	81197ae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 81197aa:	2300      	movs	r3, #0
 81197ac:	e019      	b.n	81197e2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 81197ae:	68fa      	ldr	r2, [r7, #12]
 81197b0:	683b      	ldr	r3, [r7, #0]
 81197b2:	3304      	adds	r3, #4
 81197b4:	681b      	ldr	r3, [r3, #0]
 81197b6:	405a      	eors	r2, r3
 81197b8:	683b      	ldr	r3, [r7, #0]
 81197ba:	3308      	adds	r3, #8
 81197bc:	681b      	ldr	r3, [r3, #0]
 81197be:	4013      	ands	r3, r2
 81197c0:	2b00      	cmp	r3, #0
 81197c2:	d10d      	bne.n	81197e0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 81197c4:	683b      	ldr	r3, [r7, #0]
 81197c6:	3308      	adds	r3, #8
 81197c8:	681b      	ldr	r3, [r3, #0]
 81197ca:	43da      	mvns	r2, r3
 81197cc:	687b      	ldr	r3, [r7, #4]
 81197ce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 81197d0:	683b      	ldr	r3, [r7, #0]
 81197d2:	3308      	adds	r3, #8
 81197d4:	681b      	ldr	r3, [r3, #0]
 81197d6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 81197d8:	429a      	cmp	r2, r3
 81197da:	d101      	bne.n	81197e0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 81197dc:	2301      	movs	r3, #1
 81197de:	e000      	b.n	81197e2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 81197e0:	2300      	movs	r3, #0
  }
}
 81197e2:	4618      	mov	r0, r3
 81197e4:	3714      	adds	r7, #20
 81197e6:	46bd      	mov	sp, r7
 81197e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81197ec:	4770      	bx	lr
	...

081197f0 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 81197f0:	b580      	push	{r7, lr}
 81197f2:	b08a      	sub	sp, #40	@ 0x28
 81197f4:	af00      	add	r7, sp, #0
 81197f6:	6078      	str	r0, [r7, #4]
 81197f8:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 81197fa:	f107 030c 	add.w	r3, r7, #12
 81197fe:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8119800:	687b      	ldr	r3, [r7, #4]
 8119802:	781b      	ldrb	r3, [r3, #0]
 8119804:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8119808:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811980c:	3301      	adds	r3, #1
 811980e:	4a89      	ldr	r2, [pc, #548]	@ (8119a34 <ip4addr_aton+0x244>)
 8119810:	4413      	add	r3, r2
 8119812:	781b      	ldrb	r3, [r3, #0]
 8119814:	f003 0304 	and.w	r3, r3, #4
 8119818:	2b00      	cmp	r3, #0
 811981a:	d101      	bne.n	8119820 <ip4addr_aton+0x30>
      return 0;
 811981c:	2300      	movs	r3, #0
 811981e:	e105      	b.n	8119a2c <ip4addr_aton+0x23c>
    }
    val = 0;
 8119820:	2300      	movs	r3, #0
 8119822:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8119824:	230a      	movs	r3, #10
 8119826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 811982a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811982e:	2b30      	cmp	r3, #48	@ 0x30
 8119830:	d11c      	bne.n	811986c <ip4addr_aton+0x7c>
      c = *++cp;
 8119832:	687b      	ldr	r3, [r7, #4]
 8119834:	3301      	adds	r3, #1
 8119836:	607b      	str	r3, [r7, #4]
 8119838:	687b      	ldr	r3, [r7, #4]
 811983a:	781b      	ldrb	r3, [r3, #0]
 811983c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8119840:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8119844:	2b78      	cmp	r3, #120	@ 0x78
 8119846:	d003      	beq.n	8119850 <ip4addr_aton+0x60>
 8119848:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811984c:	2b58      	cmp	r3, #88	@ 0x58
 811984e:	d10a      	bne.n	8119866 <ip4addr_aton+0x76>
        base = 16;
 8119850:	2310      	movs	r3, #16
 8119852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8119856:	687b      	ldr	r3, [r7, #4]
 8119858:	3301      	adds	r3, #1
 811985a:	607b      	str	r3, [r7, #4]
 811985c:	687b      	ldr	r3, [r7, #4]
 811985e:	781b      	ldrb	r3, [r3, #0]
 8119860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8119864:	e002      	b.n	811986c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8119866:	2308      	movs	r3, #8
 8119868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 811986c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8119870:	3301      	adds	r3, #1
 8119872:	4a70      	ldr	r2, [pc, #448]	@ (8119a34 <ip4addr_aton+0x244>)
 8119874:	4413      	add	r3, r2
 8119876:	781b      	ldrb	r3, [r3, #0]
 8119878:	f003 0304 	and.w	r3, r3, #4
 811987c:	2b00      	cmp	r3, #0
 811987e:	d011      	beq.n	81198a4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8119880:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8119884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8119886:	fb03 f202 	mul.w	r2, r3, r2
 811988a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811988e:	4413      	add	r3, r2
 8119890:	3b30      	subs	r3, #48	@ 0x30
 8119892:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8119894:	687b      	ldr	r3, [r7, #4]
 8119896:	3301      	adds	r3, #1
 8119898:	607b      	str	r3, [r7, #4]
 811989a:	687b      	ldr	r3, [r7, #4]
 811989c:	781b      	ldrb	r3, [r3, #0]
 811989e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 81198a2:	e7e3      	b.n	811986c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 81198a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 81198a8:	2b10      	cmp	r3, #16
 81198aa:	d127      	bne.n	81198fc <ip4addr_aton+0x10c>
 81198ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81198b0:	3301      	adds	r3, #1
 81198b2:	4a60      	ldr	r2, [pc, #384]	@ (8119a34 <ip4addr_aton+0x244>)
 81198b4:	4413      	add	r3, r2
 81198b6:	781b      	ldrb	r3, [r3, #0]
 81198b8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 81198bc:	2b00      	cmp	r3, #0
 81198be:	d01d      	beq.n	81198fc <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 81198c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81198c2:	011b      	lsls	r3, r3, #4
 81198c4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 81198c8:	f102 010a 	add.w	r1, r2, #10
 81198cc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 81198d0:	3201      	adds	r2, #1
 81198d2:	4858      	ldr	r0, [pc, #352]	@ (8119a34 <ip4addr_aton+0x244>)
 81198d4:	4402      	add	r2, r0
 81198d6:	7812      	ldrb	r2, [r2, #0]
 81198d8:	f002 0203 	and.w	r2, r2, #3
 81198dc:	2a02      	cmp	r2, #2
 81198de:	d101      	bne.n	81198e4 <ip4addr_aton+0xf4>
 81198e0:	2261      	movs	r2, #97	@ 0x61
 81198e2:	e000      	b.n	81198e6 <ip4addr_aton+0xf6>
 81198e4:	2241      	movs	r2, #65	@ 0x41
 81198e6:	1a8a      	subs	r2, r1, r2
 81198e8:	4313      	orrs	r3, r2
 81198ea:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 81198ec:	687b      	ldr	r3, [r7, #4]
 81198ee:	3301      	adds	r3, #1
 81198f0:	607b      	str	r3, [r7, #4]
 81198f2:	687b      	ldr	r3, [r7, #4]
 81198f4:	781b      	ldrb	r3, [r3, #0]
 81198f6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 81198fa:	e7b7      	b.n	811986c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 81198fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8119900:	2b2e      	cmp	r3, #46	@ 0x2e
 8119902:	d114      	bne.n	811992e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8119904:	f107 030c 	add.w	r3, r7, #12
 8119908:	330c      	adds	r3, #12
 811990a:	69fa      	ldr	r2, [r7, #28]
 811990c:	429a      	cmp	r2, r3
 811990e:	d301      	bcc.n	8119914 <ip4addr_aton+0x124>
        return 0;
 8119910:	2300      	movs	r3, #0
 8119912:	e08b      	b.n	8119a2c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8119914:	69fb      	ldr	r3, [r7, #28]
 8119916:	1d1a      	adds	r2, r3, #4
 8119918:	61fa      	str	r2, [r7, #28]
 811991a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811991c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 811991e:	687b      	ldr	r3, [r7, #4]
 8119920:	3301      	adds	r3, #1
 8119922:	607b      	str	r3, [r7, #4]
 8119924:	687b      	ldr	r3, [r7, #4]
 8119926:	781b      	ldrb	r3, [r3, #0]
 8119928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 811992c:	e76c      	b.n	8119808 <ip4addr_aton+0x18>
    } else {
      break;
 811992e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8119930:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8119934:	2b00      	cmp	r3, #0
 8119936:	d00b      	beq.n	8119950 <ip4addr_aton+0x160>
 8119938:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811993c:	3301      	adds	r3, #1
 811993e:	4a3d      	ldr	r2, [pc, #244]	@ (8119a34 <ip4addr_aton+0x244>)
 8119940:	4413      	add	r3, r2
 8119942:	781b      	ldrb	r3, [r3, #0]
 8119944:	f003 0308 	and.w	r3, r3, #8
 8119948:	2b00      	cmp	r3, #0
 811994a:	d101      	bne.n	8119950 <ip4addr_aton+0x160>
    return 0;
 811994c:	2300      	movs	r3, #0
 811994e:	e06d      	b.n	8119a2c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8119950:	f107 030c 	add.w	r3, r7, #12
 8119954:	69fa      	ldr	r2, [r7, #28]
 8119956:	1ad3      	subs	r3, r2, r3
 8119958:	109b      	asrs	r3, r3, #2
 811995a:	3301      	adds	r3, #1
 811995c:	2b04      	cmp	r3, #4
 811995e:	d853      	bhi.n	8119a08 <ip4addr_aton+0x218>
 8119960:	a201      	add	r2, pc, #4	@ (adr r2, 8119968 <ip4addr_aton+0x178>)
 8119962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8119966:	bf00      	nop
 8119968:	0811997d 	.word	0x0811997d
 811996c:	08119a17 	.word	0x08119a17
 8119970:	08119981 	.word	0x08119981
 8119974:	081199a3 	.word	0x081199a3
 8119978:	081199d1 	.word	0x081199d1

    case 0:
      return 0;       /* initial nondigit */
 811997c:	2300      	movs	r3, #0
 811997e:	e055      	b.n	8119a2c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8119980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8119986:	d301      	bcc.n	811998c <ip4addr_aton+0x19c>
        return 0;
 8119988:	2300      	movs	r3, #0
 811998a:	e04f      	b.n	8119a2c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 811998c:	68fb      	ldr	r3, [r7, #12]
 811998e:	2bff      	cmp	r3, #255	@ 0xff
 8119990:	d901      	bls.n	8119996 <ip4addr_aton+0x1a6>
        return 0;
 8119992:	2300      	movs	r3, #0
 8119994:	e04a      	b.n	8119a2c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8119996:	68fb      	ldr	r3, [r7, #12]
 8119998:	061b      	lsls	r3, r3, #24
 811999a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811999c:	4313      	orrs	r3, r2
 811999e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81199a0:	e03a      	b.n	8119a18 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 81199a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81199a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81199a8:	d301      	bcc.n	81199ae <ip4addr_aton+0x1be>
        return 0;
 81199aa:	2300      	movs	r3, #0
 81199ac:	e03e      	b.n	8119a2c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 81199ae:	68fb      	ldr	r3, [r7, #12]
 81199b0:	2bff      	cmp	r3, #255	@ 0xff
 81199b2:	d802      	bhi.n	81199ba <ip4addr_aton+0x1ca>
 81199b4:	693b      	ldr	r3, [r7, #16]
 81199b6:	2bff      	cmp	r3, #255	@ 0xff
 81199b8:	d901      	bls.n	81199be <ip4addr_aton+0x1ce>
        return 0;
 81199ba:	2300      	movs	r3, #0
 81199bc:	e036      	b.n	8119a2c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 81199be:	68fb      	ldr	r3, [r7, #12]
 81199c0:	061a      	lsls	r2, r3, #24
 81199c2:	693b      	ldr	r3, [r7, #16]
 81199c4:	041b      	lsls	r3, r3, #16
 81199c6:	4313      	orrs	r3, r2
 81199c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81199ca:	4313      	orrs	r3, r2
 81199cc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81199ce:	e023      	b.n	8119a18 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 81199d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81199d2:	2bff      	cmp	r3, #255	@ 0xff
 81199d4:	d901      	bls.n	81199da <ip4addr_aton+0x1ea>
        return 0;
 81199d6:	2300      	movs	r3, #0
 81199d8:	e028      	b.n	8119a2c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 81199da:	68fb      	ldr	r3, [r7, #12]
 81199dc:	2bff      	cmp	r3, #255	@ 0xff
 81199de:	d805      	bhi.n	81199ec <ip4addr_aton+0x1fc>
 81199e0:	693b      	ldr	r3, [r7, #16]
 81199e2:	2bff      	cmp	r3, #255	@ 0xff
 81199e4:	d802      	bhi.n	81199ec <ip4addr_aton+0x1fc>
 81199e6:	697b      	ldr	r3, [r7, #20]
 81199e8:	2bff      	cmp	r3, #255	@ 0xff
 81199ea:	d901      	bls.n	81199f0 <ip4addr_aton+0x200>
        return 0;
 81199ec:	2300      	movs	r3, #0
 81199ee:	e01d      	b.n	8119a2c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 81199f0:	68fb      	ldr	r3, [r7, #12]
 81199f2:	061a      	lsls	r2, r3, #24
 81199f4:	693b      	ldr	r3, [r7, #16]
 81199f6:	041b      	lsls	r3, r3, #16
 81199f8:	431a      	orrs	r2, r3
 81199fa:	697b      	ldr	r3, [r7, #20]
 81199fc:	021b      	lsls	r3, r3, #8
 81199fe:	4313      	orrs	r3, r2
 8119a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8119a02:	4313      	orrs	r3, r2
 8119a04:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8119a06:	e007      	b.n	8119a18 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8119a08:	4b0b      	ldr	r3, [pc, #44]	@ (8119a38 <ip4addr_aton+0x248>)
 8119a0a:	22f9      	movs	r2, #249	@ 0xf9
 8119a0c:	490b      	ldr	r1, [pc, #44]	@ (8119a3c <ip4addr_aton+0x24c>)
 8119a0e:	480c      	ldr	r0, [pc, #48]	@ (8119a40 <ip4addr_aton+0x250>)
 8119a10:	f00a fe24 	bl	812465c <iprintf>
      break;
 8119a14:	e000      	b.n	8119a18 <ip4addr_aton+0x228>
      break;
 8119a16:	bf00      	nop
  }
  if (addr) {
 8119a18:	683b      	ldr	r3, [r7, #0]
 8119a1a:	2b00      	cmp	r3, #0
 8119a1c:	d005      	beq.n	8119a2a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8119a1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8119a20:	f7fe f881 	bl	8117b26 <lwip_htonl>
 8119a24:	4602      	mov	r2, r0
 8119a26:	683b      	ldr	r3, [r7, #0]
 8119a28:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8119a2a:	2301      	movs	r3, #1
}
 8119a2c:	4618      	mov	r0, r3
 8119a2e:	3728      	adds	r7, #40	@ 0x28
 8119a30:	46bd      	mov	sp, r7
 8119a32:	bd80      	pop	{r7, pc}
 8119a34:	08128b7f 	.word	0x08128b7f
 8119a38:	08125b70 	.word	0x08125b70
 8119a3c:	08125bec 	.word	0x08125bec
 8119a40:	08125bf8 	.word	0x08125bf8

08119a44 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8119a44:	b580      	push	{r7, lr}
 8119a46:	b082      	sub	sp, #8
 8119a48:	af00      	add	r7, sp, #0
 8119a4a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8119a4c:	2210      	movs	r2, #16
 8119a4e:	4904      	ldr	r1, [pc, #16]	@ (8119a60 <ip4addr_ntoa+0x1c>)
 8119a50:	6878      	ldr	r0, [r7, #4]
 8119a52:	f000 f807 	bl	8119a64 <ip4addr_ntoa_r>
 8119a56:	4603      	mov	r3, r0
}
 8119a58:	4618      	mov	r0, r3
 8119a5a:	3708      	adds	r7, #8
 8119a5c:	46bd      	mov	sp, r7
 8119a5e:	bd80      	pop	{r7, pc}
 8119a60:	1000b31c 	.word	0x1000b31c

08119a64 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8119a64:	b480      	push	{r7}
 8119a66:	b08d      	sub	sp, #52	@ 0x34
 8119a68:	af00      	add	r7, sp, #0
 8119a6a:	60f8      	str	r0, [r7, #12]
 8119a6c:	60b9      	str	r1, [r7, #8]
 8119a6e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8119a70:	2300      	movs	r3, #0
 8119a72:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8119a74:	68fb      	ldr	r3, [r7, #12]
 8119a76:	681b      	ldr	r3, [r3, #0]
 8119a78:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8119a7a:	68bb      	ldr	r3, [r7, #8]
 8119a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8119a7e:	f107 0318 	add.w	r3, r7, #24
 8119a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8119a84:	2300      	movs	r3, #0
 8119a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8119a8a:	e058      	b.n	8119b3e <ip4addr_ntoa_r+0xda>
    i = 0;
 8119a8c:	2300      	movs	r3, #0
 8119a8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8119a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119a94:	781a      	ldrb	r2, [r3, #0]
 8119a96:	4b32      	ldr	r3, [pc, #200]	@ (8119b60 <ip4addr_ntoa_r+0xfc>)
 8119a98:	fba3 1302 	umull	r1, r3, r3, r2
 8119a9c:	08d9      	lsrs	r1, r3, #3
 8119a9e:	460b      	mov	r3, r1
 8119aa0:	009b      	lsls	r3, r3, #2
 8119aa2:	440b      	add	r3, r1
 8119aa4:	005b      	lsls	r3, r3, #1
 8119aa6:	1ad3      	subs	r3, r2, r3
 8119aa8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8119aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119aac:	781b      	ldrb	r3, [r3, #0]
 8119aae:	4a2c      	ldr	r2, [pc, #176]	@ (8119b60 <ip4addr_ntoa_r+0xfc>)
 8119ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8119ab4:	08db      	lsrs	r3, r3, #3
 8119ab6:	b2da      	uxtb	r2, r3
 8119ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119aba:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8119abc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8119ac0:	1c5a      	adds	r2, r3, #1
 8119ac2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8119ac6:	4619      	mov	r1, r3
 8119ac8:	7ffb      	ldrb	r3, [r7, #31]
 8119aca:	3330      	adds	r3, #48	@ 0x30
 8119acc:	b2da      	uxtb	r2, r3
 8119ace:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8119ad2:	443b      	add	r3, r7
 8119ad4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8119ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119ada:	781b      	ldrb	r3, [r3, #0]
 8119adc:	2b00      	cmp	r3, #0
 8119ade:	d1d8      	bne.n	8119a92 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8119ae0:	e011      	b.n	8119b06 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8119ae2:	6a3b      	ldr	r3, [r7, #32]
 8119ae4:	1c5a      	adds	r2, r3, #1
 8119ae6:	623a      	str	r2, [r7, #32]
 8119ae8:	687a      	ldr	r2, [r7, #4]
 8119aea:	429a      	cmp	r2, r3
 8119aec:	dc01      	bgt.n	8119af2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8119aee:	2300      	movs	r3, #0
 8119af0:	e030      	b.n	8119b54 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8119af2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8119af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119af8:	1c59      	adds	r1, r3, #1
 8119afa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8119afc:	3230      	adds	r2, #48	@ 0x30
 8119afe:	443a      	add	r2, r7
 8119b00:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8119b04:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8119b06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8119b0a:	1e5a      	subs	r2, r3, #1
 8119b0c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8119b10:	2b00      	cmp	r3, #0
 8119b12:	d1e6      	bne.n	8119ae2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8119b14:	6a3b      	ldr	r3, [r7, #32]
 8119b16:	1c5a      	adds	r2, r3, #1
 8119b18:	623a      	str	r2, [r7, #32]
 8119b1a:	687a      	ldr	r2, [r7, #4]
 8119b1c:	429a      	cmp	r2, r3
 8119b1e:	dc01      	bgt.n	8119b24 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8119b20:	2300      	movs	r3, #0
 8119b22:	e017      	b.n	8119b54 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8119b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119b26:	1c5a      	adds	r2, r3, #1
 8119b28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8119b2a:	222e      	movs	r2, #46	@ 0x2e
 8119b2c:	701a      	strb	r2, [r3, #0]
    ap++;
 8119b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119b30:	3301      	adds	r3, #1
 8119b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8119b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8119b38:	3301      	adds	r3, #1
 8119b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8119b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8119b42:	2b03      	cmp	r3, #3
 8119b44:	d9a2      	bls.n	8119a8c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8119b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119b48:	3b01      	subs	r3, #1
 8119b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8119b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119b4e:	2200      	movs	r2, #0
 8119b50:	701a      	strb	r2, [r3, #0]
  return buf;
 8119b52:	68bb      	ldr	r3, [r7, #8]
}
 8119b54:	4618      	mov	r0, r3
 8119b56:	3734      	adds	r7, #52	@ 0x34
 8119b58:	46bd      	mov	sp, r7
 8119b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119b5e:	4770      	bx	lr
 8119b60:	cccccccd 	.word	0xcccccccd

08119b64 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8119b64:	b580      	push	{r7, lr}
 8119b66:	b084      	sub	sp, #16
 8119b68:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8119b6a:	2300      	movs	r3, #0
 8119b6c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8119b6e:	4b12      	ldr	r3, [pc, #72]	@ (8119bb8 <ip_reass_tmr+0x54>)
 8119b70:	681b      	ldr	r3, [r3, #0]
 8119b72:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8119b74:	e018      	b.n	8119ba8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8119b76:	68fb      	ldr	r3, [r7, #12]
 8119b78:	7fdb      	ldrb	r3, [r3, #31]
 8119b7a:	2b00      	cmp	r3, #0
 8119b7c:	d00b      	beq.n	8119b96 <ip_reass_tmr+0x32>
      r->timer--;
 8119b7e:	68fb      	ldr	r3, [r7, #12]
 8119b80:	7fdb      	ldrb	r3, [r3, #31]
 8119b82:	3b01      	subs	r3, #1
 8119b84:	b2da      	uxtb	r2, r3
 8119b86:	68fb      	ldr	r3, [r7, #12]
 8119b88:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8119b8a:	68fb      	ldr	r3, [r7, #12]
 8119b8c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8119b8e:	68fb      	ldr	r3, [r7, #12]
 8119b90:	681b      	ldr	r3, [r3, #0]
 8119b92:	60fb      	str	r3, [r7, #12]
 8119b94:	e008      	b.n	8119ba8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8119b96:	68fb      	ldr	r3, [r7, #12]
 8119b98:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8119b9a:	68fb      	ldr	r3, [r7, #12]
 8119b9c:	681b      	ldr	r3, [r3, #0]
 8119b9e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8119ba0:	68b9      	ldr	r1, [r7, #8]
 8119ba2:	6878      	ldr	r0, [r7, #4]
 8119ba4:	f000 f80a 	bl	8119bbc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8119ba8:	68fb      	ldr	r3, [r7, #12]
 8119baa:	2b00      	cmp	r3, #0
 8119bac:	d1e3      	bne.n	8119b76 <ip_reass_tmr+0x12>
    }
  }
}
 8119bae:	bf00      	nop
 8119bb0:	bf00      	nop
 8119bb2:	3710      	adds	r7, #16
 8119bb4:	46bd      	mov	sp, r7
 8119bb6:	bd80      	pop	{r7, pc}
 8119bb8:	1000b32c 	.word	0x1000b32c

08119bbc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8119bbc:	b580      	push	{r7, lr}
 8119bbe:	b088      	sub	sp, #32
 8119bc0:	af00      	add	r7, sp, #0
 8119bc2:	6078      	str	r0, [r7, #4]
 8119bc4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8119bc6:	2300      	movs	r3, #0
 8119bc8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8119bca:	683a      	ldr	r2, [r7, #0]
 8119bcc:	687b      	ldr	r3, [r7, #4]
 8119bce:	429a      	cmp	r2, r3
 8119bd0:	d105      	bne.n	8119bde <ip_reass_free_complete_datagram+0x22>
 8119bd2:	4b45      	ldr	r3, [pc, #276]	@ (8119ce8 <ip_reass_free_complete_datagram+0x12c>)
 8119bd4:	22ab      	movs	r2, #171	@ 0xab
 8119bd6:	4945      	ldr	r1, [pc, #276]	@ (8119cec <ip_reass_free_complete_datagram+0x130>)
 8119bd8:	4845      	ldr	r0, [pc, #276]	@ (8119cf0 <ip_reass_free_complete_datagram+0x134>)
 8119bda:	f00a fd3f 	bl	812465c <iprintf>
  if (prev != NULL) {
 8119bde:	683b      	ldr	r3, [r7, #0]
 8119be0:	2b00      	cmp	r3, #0
 8119be2:	d00a      	beq.n	8119bfa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8119be4:	683b      	ldr	r3, [r7, #0]
 8119be6:	681b      	ldr	r3, [r3, #0]
 8119be8:	687a      	ldr	r2, [r7, #4]
 8119bea:	429a      	cmp	r2, r3
 8119bec:	d005      	beq.n	8119bfa <ip_reass_free_complete_datagram+0x3e>
 8119bee:	4b3e      	ldr	r3, [pc, #248]	@ (8119ce8 <ip_reass_free_complete_datagram+0x12c>)
 8119bf0:	22ad      	movs	r2, #173	@ 0xad
 8119bf2:	4940      	ldr	r1, [pc, #256]	@ (8119cf4 <ip_reass_free_complete_datagram+0x138>)
 8119bf4:	483e      	ldr	r0, [pc, #248]	@ (8119cf0 <ip_reass_free_complete_datagram+0x134>)
 8119bf6:	f00a fd31 	bl	812465c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8119bfa:	687b      	ldr	r3, [r7, #4]
 8119bfc:	685b      	ldr	r3, [r3, #4]
 8119bfe:	685b      	ldr	r3, [r3, #4]
 8119c00:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8119c02:	697b      	ldr	r3, [r7, #20]
 8119c04:	889b      	ldrh	r3, [r3, #4]
 8119c06:	b29b      	uxth	r3, r3
 8119c08:	2b00      	cmp	r3, #0
 8119c0a:	d12a      	bne.n	8119c62 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8119c0c:	687b      	ldr	r3, [r7, #4]
 8119c0e:	685b      	ldr	r3, [r3, #4]
 8119c10:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8119c12:	697b      	ldr	r3, [r7, #20]
 8119c14:	681a      	ldr	r2, [r3, #0]
 8119c16:	687b      	ldr	r3, [r7, #4]
 8119c18:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8119c1a:	69bb      	ldr	r3, [r7, #24]
 8119c1c:	6858      	ldr	r0, [r3, #4]
 8119c1e:	687b      	ldr	r3, [r7, #4]
 8119c20:	3308      	adds	r3, #8
 8119c22:	2214      	movs	r2, #20
 8119c24:	4619      	mov	r1, r3
 8119c26:	f00a ff7c 	bl	8124b22 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8119c2a:	2101      	movs	r1, #1
 8119c2c:	69b8      	ldr	r0, [r7, #24]
 8119c2e:	f7ff f9af 	bl	8118f90 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8119c32:	69b8      	ldr	r0, [r7, #24]
 8119c34:	f002 f9f8 	bl	811c028 <pbuf_clen>
 8119c38:	4603      	mov	r3, r0
 8119c3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8119c3c:	8bfa      	ldrh	r2, [r7, #30]
 8119c3e:	8a7b      	ldrh	r3, [r7, #18]
 8119c40:	4413      	add	r3, r2
 8119c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8119c46:	db05      	blt.n	8119c54 <ip_reass_free_complete_datagram+0x98>
 8119c48:	4b27      	ldr	r3, [pc, #156]	@ (8119ce8 <ip_reass_free_complete_datagram+0x12c>)
 8119c4a:	22bc      	movs	r2, #188	@ 0xbc
 8119c4c:	492a      	ldr	r1, [pc, #168]	@ (8119cf8 <ip_reass_free_complete_datagram+0x13c>)
 8119c4e:	4828      	ldr	r0, [pc, #160]	@ (8119cf0 <ip_reass_free_complete_datagram+0x134>)
 8119c50:	f00a fd04 	bl	812465c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8119c54:	8bfa      	ldrh	r2, [r7, #30]
 8119c56:	8a7b      	ldrh	r3, [r7, #18]
 8119c58:	4413      	add	r3, r2
 8119c5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8119c5c:	69b8      	ldr	r0, [r7, #24]
 8119c5e:	f002 f955 	bl	811bf0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8119c62:	687b      	ldr	r3, [r7, #4]
 8119c64:	685b      	ldr	r3, [r3, #4]
 8119c66:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8119c68:	e01f      	b.n	8119caa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8119c6a:	69bb      	ldr	r3, [r7, #24]
 8119c6c:	685b      	ldr	r3, [r3, #4]
 8119c6e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8119c70:	69bb      	ldr	r3, [r7, #24]
 8119c72:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8119c74:	697b      	ldr	r3, [r7, #20]
 8119c76:	681b      	ldr	r3, [r3, #0]
 8119c78:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8119c7a:	68f8      	ldr	r0, [r7, #12]
 8119c7c:	f002 f9d4 	bl	811c028 <pbuf_clen>
 8119c80:	4603      	mov	r3, r0
 8119c82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8119c84:	8bfa      	ldrh	r2, [r7, #30]
 8119c86:	8a7b      	ldrh	r3, [r7, #18]
 8119c88:	4413      	add	r3, r2
 8119c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8119c8e:	db05      	blt.n	8119c9c <ip_reass_free_complete_datagram+0xe0>
 8119c90:	4b15      	ldr	r3, [pc, #84]	@ (8119ce8 <ip_reass_free_complete_datagram+0x12c>)
 8119c92:	22cc      	movs	r2, #204	@ 0xcc
 8119c94:	4918      	ldr	r1, [pc, #96]	@ (8119cf8 <ip_reass_free_complete_datagram+0x13c>)
 8119c96:	4816      	ldr	r0, [pc, #88]	@ (8119cf0 <ip_reass_free_complete_datagram+0x134>)
 8119c98:	f00a fce0 	bl	812465c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8119c9c:	8bfa      	ldrh	r2, [r7, #30]
 8119c9e:	8a7b      	ldrh	r3, [r7, #18]
 8119ca0:	4413      	add	r3, r2
 8119ca2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8119ca4:	68f8      	ldr	r0, [r7, #12]
 8119ca6:	f002 f931 	bl	811bf0c <pbuf_free>
  while (p != NULL) {
 8119caa:	69bb      	ldr	r3, [r7, #24]
 8119cac:	2b00      	cmp	r3, #0
 8119cae:	d1dc      	bne.n	8119c6a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8119cb0:	6839      	ldr	r1, [r7, #0]
 8119cb2:	6878      	ldr	r0, [r7, #4]
 8119cb4:	f000 f8c2 	bl	8119e3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8119cb8:	4b10      	ldr	r3, [pc, #64]	@ (8119cfc <ip_reass_free_complete_datagram+0x140>)
 8119cba:	881b      	ldrh	r3, [r3, #0]
 8119cbc:	8bfa      	ldrh	r2, [r7, #30]
 8119cbe:	429a      	cmp	r2, r3
 8119cc0:	d905      	bls.n	8119cce <ip_reass_free_complete_datagram+0x112>
 8119cc2:	4b09      	ldr	r3, [pc, #36]	@ (8119ce8 <ip_reass_free_complete_datagram+0x12c>)
 8119cc4:	22d2      	movs	r2, #210	@ 0xd2
 8119cc6:	490e      	ldr	r1, [pc, #56]	@ (8119d00 <ip_reass_free_complete_datagram+0x144>)
 8119cc8:	4809      	ldr	r0, [pc, #36]	@ (8119cf0 <ip_reass_free_complete_datagram+0x134>)
 8119cca:	f00a fcc7 	bl	812465c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8119cce:	4b0b      	ldr	r3, [pc, #44]	@ (8119cfc <ip_reass_free_complete_datagram+0x140>)
 8119cd0:	881a      	ldrh	r2, [r3, #0]
 8119cd2:	8bfb      	ldrh	r3, [r7, #30]
 8119cd4:	1ad3      	subs	r3, r2, r3
 8119cd6:	b29a      	uxth	r2, r3
 8119cd8:	4b08      	ldr	r3, [pc, #32]	@ (8119cfc <ip_reass_free_complete_datagram+0x140>)
 8119cda:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8119cdc:	8bfb      	ldrh	r3, [r7, #30]
}
 8119cde:	4618      	mov	r0, r3
 8119ce0:	3720      	adds	r7, #32
 8119ce2:	46bd      	mov	sp, r7
 8119ce4:	bd80      	pop	{r7, pc}
 8119ce6:	bf00      	nop
 8119ce8:	08125c20 	.word	0x08125c20
 8119cec:	08125c9c 	.word	0x08125c9c
 8119cf0:	08125ca8 	.word	0x08125ca8
 8119cf4:	08125cd0 	.word	0x08125cd0
 8119cf8:	08125ce4 	.word	0x08125ce4
 8119cfc:	1000b330 	.word	0x1000b330
 8119d00:	08125d04 	.word	0x08125d04

08119d04 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8119d04:	b580      	push	{r7, lr}
 8119d06:	b08a      	sub	sp, #40	@ 0x28
 8119d08:	af00      	add	r7, sp, #0
 8119d0a:	6078      	str	r0, [r7, #4]
 8119d0c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8119d0e:	2300      	movs	r3, #0
 8119d10:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8119d12:	2300      	movs	r3, #0
 8119d14:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8119d16:	2300      	movs	r3, #0
 8119d18:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8119d1a:	2300      	movs	r3, #0
 8119d1c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8119d1e:	2300      	movs	r3, #0
 8119d20:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8119d22:	4b28      	ldr	r3, [pc, #160]	@ (8119dc4 <ip_reass_remove_oldest_datagram+0xc0>)
 8119d24:	681b      	ldr	r3, [r3, #0]
 8119d26:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8119d28:	e030      	b.n	8119d8c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8119d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d2c:	695a      	ldr	r2, [r3, #20]
 8119d2e:	687b      	ldr	r3, [r7, #4]
 8119d30:	68db      	ldr	r3, [r3, #12]
 8119d32:	429a      	cmp	r2, r3
 8119d34:	d10c      	bne.n	8119d50 <ip_reass_remove_oldest_datagram+0x4c>
 8119d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d38:	699a      	ldr	r2, [r3, #24]
 8119d3a:	687b      	ldr	r3, [r7, #4]
 8119d3c:	691b      	ldr	r3, [r3, #16]
 8119d3e:	429a      	cmp	r2, r3
 8119d40:	d106      	bne.n	8119d50 <ip_reass_remove_oldest_datagram+0x4c>
 8119d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d44:	899a      	ldrh	r2, [r3, #12]
 8119d46:	687b      	ldr	r3, [r7, #4]
 8119d48:	889b      	ldrh	r3, [r3, #4]
 8119d4a:	b29b      	uxth	r3, r3
 8119d4c:	429a      	cmp	r2, r3
 8119d4e:	d014      	beq.n	8119d7a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8119d50:	693b      	ldr	r3, [r7, #16]
 8119d52:	3301      	adds	r3, #1
 8119d54:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8119d56:	6a3b      	ldr	r3, [r7, #32]
 8119d58:	2b00      	cmp	r3, #0
 8119d5a:	d104      	bne.n	8119d66 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8119d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d5e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8119d60:	69fb      	ldr	r3, [r7, #28]
 8119d62:	61bb      	str	r3, [r7, #24]
 8119d64:	e009      	b.n	8119d7a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8119d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d68:	7fda      	ldrb	r2, [r3, #31]
 8119d6a:	6a3b      	ldr	r3, [r7, #32]
 8119d6c:	7fdb      	ldrb	r3, [r3, #31]
 8119d6e:	429a      	cmp	r2, r3
 8119d70:	d803      	bhi.n	8119d7a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8119d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d74:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8119d76:	69fb      	ldr	r3, [r7, #28]
 8119d78:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8119d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d7c:	681b      	ldr	r3, [r3, #0]
 8119d7e:	2b00      	cmp	r3, #0
 8119d80:	d001      	beq.n	8119d86 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8119d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d84:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8119d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d88:	681b      	ldr	r3, [r3, #0]
 8119d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8119d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119d8e:	2b00      	cmp	r3, #0
 8119d90:	d1cb      	bne.n	8119d2a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8119d92:	6a3b      	ldr	r3, [r7, #32]
 8119d94:	2b00      	cmp	r3, #0
 8119d96:	d008      	beq.n	8119daa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8119d98:	69b9      	ldr	r1, [r7, #24]
 8119d9a:	6a38      	ldr	r0, [r7, #32]
 8119d9c:	f7ff ff0e 	bl	8119bbc <ip_reass_free_complete_datagram>
 8119da0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8119da2:	697a      	ldr	r2, [r7, #20]
 8119da4:	68fb      	ldr	r3, [r7, #12]
 8119da6:	4413      	add	r3, r2
 8119da8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8119daa:	697a      	ldr	r2, [r7, #20]
 8119dac:	683b      	ldr	r3, [r7, #0]
 8119dae:	429a      	cmp	r2, r3
 8119db0:	da02      	bge.n	8119db8 <ip_reass_remove_oldest_datagram+0xb4>
 8119db2:	693b      	ldr	r3, [r7, #16]
 8119db4:	2b01      	cmp	r3, #1
 8119db6:	dcac      	bgt.n	8119d12 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8119db8:	697b      	ldr	r3, [r7, #20]
}
 8119dba:	4618      	mov	r0, r3
 8119dbc:	3728      	adds	r7, #40	@ 0x28
 8119dbe:	46bd      	mov	sp, r7
 8119dc0:	bd80      	pop	{r7, pc}
 8119dc2:	bf00      	nop
 8119dc4:	1000b32c 	.word	0x1000b32c

08119dc8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8119dc8:	b580      	push	{r7, lr}
 8119dca:	b084      	sub	sp, #16
 8119dcc:	af00      	add	r7, sp, #0
 8119dce:	6078      	str	r0, [r7, #4]
 8119dd0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8119dd2:	2004      	movs	r0, #4
 8119dd4:	f001 f982 	bl	811b0dc <memp_malloc>
 8119dd8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8119dda:	68fb      	ldr	r3, [r7, #12]
 8119ddc:	2b00      	cmp	r3, #0
 8119dde:	d110      	bne.n	8119e02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8119de0:	6839      	ldr	r1, [r7, #0]
 8119de2:	6878      	ldr	r0, [r7, #4]
 8119de4:	f7ff ff8e 	bl	8119d04 <ip_reass_remove_oldest_datagram>
 8119de8:	4602      	mov	r2, r0
 8119dea:	683b      	ldr	r3, [r7, #0]
 8119dec:	4293      	cmp	r3, r2
 8119dee:	dc03      	bgt.n	8119df8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8119df0:	2004      	movs	r0, #4
 8119df2:	f001 f973 	bl	811b0dc <memp_malloc>
 8119df6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8119df8:	68fb      	ldr	r3, [r7, #12]
 8119dfa:	2b00      	cmp	r3, #0
 8119dfc:	d101      	bne.n	8119e02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8119dfe:	2300      	movs	r3, #0
 8119e00:	e016      	b.n	8119e30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8119e02:	2220      	movs	r2, #32
 8119e04:	2100      	movs	r1, #0
 8119e06:	68f8      	ldr	r0, [r7, #12]
 8119e08:	f00a fd3c 	bl	8124884 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8119e0c:	68fb      	ldr	r3, [r7, #12]
 8119e0e:	220f      	movs	r2, #15
 8119e10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8119e12:	4b09      	ldr	r3, [pc, #36]	@ (8119e38 <ip_reass_enqueue_new_datagram+0x70>)
 8119e14:	681a      	ldr	r2, [r3, #0]
 8119e16:	68fb      	ldr	r3, [r7, #12]
 8119e18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8119e1a:	4a07      	ldr	r2, [pc, #28]	@ (8119e38 <ip_reass_enqueue_new_datagram+0x70>)
 8119e1c:	68fb      	ldr	r3, [r7, #12]
 8119e1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8119e20:	68fb      	ldr	r3, [r7, #12]
 8119e22:	3308      	adds	r3, #8
 8119e24:	2214      	movs	r2, #20
 8119e26:	6879      	ldr	r1, [r7, #4]
 8119e28:	4618      	mov	r0, r3
 8119e2a:	f00a fe7a 	bl	8124b22 <memcpy>
  return ipr;
 8119e2e:	68fb      	ldr	r3, [r7, #12]
}
 8119e30:	4618      	mov	r0, r3
 8119e32:	3710      	adds	r7, #16
 8119e34:	46bd      	mov	sp, r7
 8119e36:	bd80      	pop	{r7, pc}
 8119e38:	1000b32c 	.word	0x1000b32c

08119e3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8119e3c:	b580      	push	{r7, lr}
 8119e3e:	b082      	sub	sp, #8
 8119e40:	af00      	add	r7, sp, #0
 8119e42:	6078      	str	r0, [r7, #4]
 8119e44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8119e46:	4b10      	ldr	r3, [pc, #64]	@ (8119e88 <ip_reass_dequeue_datagram+0x4c>)
 8119e48:	681b      	ldr	r3, [r3, #0]
 8119e4a:	687a      	ldr	r2, [r7, #4]
 8119e4c:	429a      	cmp	r2, r3
 8119e4e:	d104      	bne.n	8119e5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8119e50:	687b      	ldr	r3, [r7, #4]
 8119e52:	681b      	ldr	r3, [r3, #0]
 8119e54:	4a0c      	ldr	r2, [pc, #48]	@ (8119e88 <ip_reass_dequeue_datagram+0x4c>)
 8119e56:	6013      	str	r3, [r2, #0]
 8119e58:	e00d      	b.n	8119e76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8119e5a:	683b      	ldr	r3, [r7, #0]
 8119e5c:	2b00      	cmp	r3, #0
 8119e5e:	d106      	bne.n	8119e6e <ip_reass_dequeue_datagram+0x32>
 8119e60:	4b0a      	ldr	r3, [pc, #40]	@ (8119e8c <ip_reass_dequeue_datagram+0x50>)
 8119e62:	f240 1245 	movw	r2, #325	@ 0x145
 8119e66:	490a      	ldr	r1, [pc, #40]	@ (8119e90 <ip_reass_dequeue_datagram+0x54>)
 8119e68:	480a      	ldr	r0, [pc, #40]	@ (8119e94 <ip_reass_dequeue_datagram+0x58>)
 8119e6a:	f00a fbf7 	bl	812465c <iprintf>
    prev->next = ipr->next;
 8119e6e:	687b      	ldr	r3, [r7, #4]
 8119e70:	681a      	ldr	r2, [r3, #0]
 8119e72:	683b      	ldr	r3, [r7, #0]
 8119e74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8119e76:	6879      	ldr	r1, [r7, #4]
 8119e78:	2004      	movs	r0, #4
 8119e7a:	f001 f9a5 	bl	811b1c8 <memp_free>
}
 8119e7e:	bf00      	nop
 8119e80:	3708      	adds	r7, #8
 8119e82:	46bd      	mov	sp, r7
 8119e84:	bd80      	pop	{r7, pc}
 8119e86:	bf00      	nop
 8119e88:	1000b32c 	.word	0x1000b32c
 8119e8c:	08125c20 	.word	0x08125c20
 8119e90:	08125d28 	.word	0x08125d28
 8119e94:	08125ca8 	.word	0x08125ca8

08119e98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8119e98:	b580      	push	{r7, lr}
 8119e9a:	b08c      	sub	sp, #48	@ 0x30
 8119e9c:	af00      	add	r7, sp, #0
 8119e9e:	60f8      	str	r0, [r7, #12]
 8119ea0:	60b9      	str	r1, [r7, #8]
 8119ea2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8119ea4:	2300      	movs	r3, #0
 8119ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8119ea8:	2301      	movs	r3, #1
 8119eaa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8119eac:	68bb      	ldr	r3, [r7, #8]
 8119eae:	685b      	ldr	r3, [r3, #4]
 8119eb0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8119eb2:	69fb      	ldr	r3, [r7, #28]
 8119eb4:	885b      	ldrh	r3, [r3, #2]
 8119eb6:	b29b      	uxth	r3, r3
 8119eb8:	4618      	mov	r0, r3
 8119eba:	f7fd fe1f 	bl	8117afc <lwip_htons>
 8119ebe:	4603      	mov	r3, r0
 8119ec0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8119ec2:	69fb      	ldr	r3, [r7, #28]
 8119ec4:	781b      	ldrb	r3, [r3, #0]
 8119ec6:	f003 030f 	and.w	r3, r3, #15
 8119eca:	b2db      	uxtb	r3, r3
 8119ecc:	009b      	lsls	r3, r3, #2
 8119ece:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8119ed0:	7e7b      	ldrb	r3, [r7, #25]
 8119ed2:	b29b      	uxth	r3, r3
 8119ed4:	8b7a      	ldrh	r2, [r7, #26]
 8119ed6:	429a      	cmp	r2, r3
 8119ed8:	d202      	bcs.n	8119ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8119eda:	f04f 33ff 	mov.w	r3, #4294967295
 8119ede:	e135      	b.n	811a14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8119ee0:	7e7b      	ldrb	r3, [r7, #25]
 8119ee2:	b29b      	uxth	r3, r3
 8119ee4:	8b7a      	ldrh	r2, [r7, #26]
 8119ee6:	1ad3      	subs	r3, r2, r3
 8119ee8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8119eea:	69fb      	ldr	r3, [r7, #28]
 8119eec:	88db      	ldrh	r3, [r3, #6]
 8119eee:	b29b      	uxth	r3, r3
 8119ef0:	4618      	mov	r0, r3
 8119ef2:	f7fd fe03 	bl	8117afc <lwip_htons>
 8119ef6:	4603      	mov	r3, r0
 8119ef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8119efc:	b29b      	uxth	r3, r3
 8119efe:	00db      	lsls	r3, r3, #3
 8119f00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8119f02:	68bb      	ldr	r3, [r7, #8]
 8119f04:	685b      	ldr	r3, [r3, #4]
 8119f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8119f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f0a:	2200      	movs	r2, #0
 8119f0c:	701a      	strb	r2, [r3, #0]
 8119f0e:	2200      	movs	r2, #0
 8119f10:	705a      	strb	r2, [r3, #1]
 8119f12:	2200      	movs	r2, #0
 8119f14:	709a      	strb	r2, [r3, #2]
 8119f16:	2200      	movs	r2, #0
 8119f18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8119f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f1c:	8afa      	ldrh	r2, [r7, #22]
 8119f1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8119f20:	8afa      	ldrh	r2, [r7, #22]
 8119f22:	8b7b      	ldrh	r3, [r7, #26]
 8119f24:	4413      	add	r3, r2
 8119f26:	b29a      	uxth	r2, r3
 8119f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8119f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f2e:	88db      	ldrh	r3, [r3, #6]
 8119f30:	b29b      	uxth	r3, r3
 8119f32:	8afa      	ldrh	r2, [r7, #22]
 8119f34:	429a      	cmp	r2, r3
 8119f36:	d902      	bls.n	8119f3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8119f38:	f04f 33ff 	mov.w	r3, #4294967295
 8119f3c:	e106      	b.n	811a14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8119f3e:	68fb      	ldr	r3, [r7, #12]
 8119f40:	685b      	ldr	r3, [r3, #4]
 8119f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8119f44:	e068      	b.n	811a018 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8119f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119f48:	685b      	ldr	r3, [r3, #4]
 8119f4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8119f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f4e:	889b      	ldrh	r3, [r3, #4]
 8119f50:	b29a      	uxth	r2, r3
 8119f52:	693b      	ldr	r3, [r7, #16]
 8119f54:	889b      	ldrh	r3, [r3, #4]
 8119f56:	b29b      	uxth	r3, r3
 8119f58:	429a      	cmp	r2, r3
 8119f5a:	d235      	bcs.n	8119fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8119f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8119f60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8119f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119f64:	2b00      	cmp	r3, #0
 8119f66:	d020      	beq.n	8119faa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8119f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f6a:	889b      	ldrh	r3, [r3, #4]
 8119f6c:	b29a      	uxth	r2, r3
 8119f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119f70:	88db      	ldrh	r3, [r3, #6]
 8119f72:	b29b      	uxth	r3, r3
 8119f74:	429a      	cmp	r2, r3
 8119f76:	d307      	bcc.n	8119f88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8119f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f7a:	88db      	ldrh	r3, [r3, #6]
 8119f7c:	b29a      	uxth	r2, r3
 8119f7e:	693b      	ldr	r3, [r7, #16]
 8119f80:	889b      	ldrh	r3, [r3, #4]
 8119f82:	b29b      	uxth	r3, r3
 8119f84:	429a      	cmp	r2, r3
 8119f86:	d902      	bls.n	8119f8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8119f88:	f04f 33ff 	mov.w	r3, #4294967295
 8119f8c:	e0de      	b.n	811a14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8119f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119f90:	68ba      	ldr	r2, [r7, #8]
 8119f92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8119f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119f96:	88db      	ldrh	r3, [r3, #6]
 8119f98:	b29a      	uxth	r2, r3
 8119f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119f9c:	889b      	ldrh	r3, [r3, #4]
 8119f9e:	b29b      	uxth	r3, r3
 8119fa0:	429a      	cmp	r2, r3
 8119fa2:	d03d      	beq.n	811a020 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8119fa4:	2300      	movs	r3, #0
 8119fa6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8119fa8:	e03a      	b.n	811a020 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8119faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119fac:	88db      	ldrh	r3, [r3, #6]
 8119fae:	b29a      	uxth	r2, r3
 8119fb0:	693b      	ldr	r3, [r7, #16]
 8119fb2:	889b      	ldrh	r3, [r3, #4]
 8119fb4:	b29b      	uxth	r3, r3
 8119fb6:	429a      	cmp	r2, r3
 8119fb8:	d902      	bls.n	8119fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8119fba:	f04f 33ff 	mov.w	r3, #4294967295
 8119fbe:	e0c5      	b.n	811a14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8119fc0:	68fb      	ldr	r3, [r7, #12]
 8119fc2:	68ba      	ldr	r2, [r7, #8]
 8119fc4:	605a      	str	r2, [r3, #4]
      break;
 8119fc6:	e02b      	b.n	811a020 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8119fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119fca:	889b      	ldrh	r3, [r3, #4]
 8119fcc:	b29a      	uxth	r2, r3
 8119fce:	693b      	ldr	r3, [r7, #16]
 8119fd0:	889b      	ldrh	r3, [r3, #4]
 8119fd2:	b29b      	uxth	r3, r3
 8119fd4:	429a      	cmp	r2, r3
 8119fd6:	d102      	bne.n	8119fde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8119fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8119fdc:	e0b6      	b.n	811a14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8119fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119fe0:	889b      	ldrh	r3, [r3, #4]
 8119fe2:	b29a      	uxth	r2, r3
 8119fe4:	693b      	ldr	r3, [r7, #16]
 8119fe6:	88db      	ldrh	r3, [r3, #6]
 8119fe8:	b29b      	uxth	r3, r3
 8119fea:	429a      	cmp	r2, r3
 8119fec:	d202      	bcs.n	8119ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8119fee:	f04f 33ff 	mov.w	r3, #4294967295
 8119ff2:	e0ab      	b.n	811a14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8119ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119ff6:	2b00      	cmp	r3, #0
 8119ff8:	d009      	beq.n	811a00e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8119ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119ffc:	88db      	ldrh	r3, [r3, #6]
 8119ffe:	b29a      	uxth	r2, r3
 811a000:	693b      	ldr	r3, [r7, #16]
 811a002:	889b      	ldrh	r3, [r3, #4]
 811a004:	b29b      	uxth	r3, r3
 811a006:	429a      	cmp	r2, r3
 811a008:	d001      	beq.n	811a00e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 811a00a:	2300      	movs	r3, #0
 811a00c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 811a00e:	693b      	ldr	r3, [r7, #16]
 811a010:	681b      	ldr	r3, [r3, #0]
 811a012:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 811a014:	693b      	ldr	r3, [r7, #16]
 811a016:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 811a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a01a:	2b00      	cmp	r3, #0
 811a01c:	d193      	bne.n	8119f46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 811a01e:	e000      	b.n	811a022 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 811a020:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 811a022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a024:	2b00      	cmp	r3, #0
 811a026:	d12d      	bne.n	811a084 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 811a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a02a:	2b00      	cmp	r3, #0
 811a02c:	d01c      	beq.n	811a068 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 811a02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a030:	88db      	ldrh	r3, [r3, #6]
 811a032:	b29a      	uxth	r2, r3
 811a034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a036:	889b      	ldrh	r3, [r3, #4]
 811a038:	b29b      	uxth	r3, r3
 811a03a:	429a      	cmp	r2, r3
 811a03c:	d906      	bls.n	811a04c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 811a03e:	4b45      	ldr	r3, [pc, #276]	@ (811a154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811a040:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 811a044:	4944      	ldr	r1, [pc, #272]	@ (811a158 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 811a046:	4845      	ldr	r0, [pc, #276]	@ (811a15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811a048:	f00a fb08 	bl	812465c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 811a04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a04e:	68ba      	ldr	r2, [r7, #8]
 811a050:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 811a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a054:	88db      	ldrh	r3, [r3, #6]
 811a056:	b29a      	uxth	r2, r3
 811a058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a05a:	889b      	ldrh	r3, [r3, #4]
 811a05c:	b29b      	uxth	r3, r3
 811a05e:	429a      	cmp	r2, r3
 811a060:	d010      	beq.n	811a084 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 811a062:	2300      	movs	r3, #0
 811a064:	623b      	str	r3, [r7, #32]
 811a066:	e00d      	b.n	811a084 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 811a068:	68fb      	ldr	r3, [r7, #12]
 811a06a:	685b      	ldr	r3, [r3, #4]
 811a06c:	2b00      	cmp	r3, #0
 811a06e:	d006      	beq.n	811a07e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 811a070:	4b38      	ldr	r3, [pc, #224]	@ (811a154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811a072:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 811a076:	493a      	ldr	r1, [pc, #232]	@ (811a160 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 811a078:	4838      	ldr	r0, [pc, #224]	@ (811a15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811a07a:	f00a faef 	bl	812465c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 811a07e:	68fb      	ldr	r3, [r7, #12]
 811a080:	68ba      	ldr	r2, [r7, #8]
 811a082:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 811a084:	687b      	ldr	r3, [r7, #4]
 811a086:	2b00      	cmp	r3, #0
 811a088:	d105      	bne.n	811a096 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 811a08a:	68fb      	ldr	r3, [r7, #12]
 811a08c:	7f9b      	ldrb	r3, [r3, #30]
 811a08e:	f003 0301 	and.w	r3, r3, #1
 811a092:	2b00      	cmp	r3, #0
 811a094:	d059      	beq.n	811a14a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 811a096:	6a3b      	ldr	r3, [r7, #32]
 811a098:	2b00      	cmp	r3, #0
 811a09a:	d04f      	beq.n	811a13c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 811a09c:	68fb      	ldr	r3, [r7, #12]
 811a09e:	685b      	ldr	r3, [r3, #4]
 811a0a0:	2b00      	cmp	r3, #0
 811a0a2:	d006      	beq.n	811a0b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 811a0a4:	68fb      	ldr	r3, [r7, #12]
 811a0a6:	685b      	ldr	r3, [r3, #4]
 811a0a8:	685b      	ldr	r3, [r3, #4]
 811a0aa:	889b      	ldrh	r3, [r3, #4]
 811a0ac:	b29b      	uxth	r3, r3
 811a0ae:	2b00      	cmp	r3, #0
 811a0b0:	d002      	beq.n	811a0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 811a0b2:	2300      	movs	r3, #0
 811a0b4:	623b      	str	r3, [r7, #32]
 811a0b6:	e041      	b.n	811a13c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 811a0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a0ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 811a0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a0be:	681b      	ldr	r3, [r3, #0]
 811a0c0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 811a0c2:	e012      	b.n	811a0ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 811a0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a0c6:	685b      	ldr	r3, [r3, #4]
 811a0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 811a0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a0cc:	88db      	ldrh	r3, [r3, #6]
 811a0ce:	b29a      	uxth	r2, r3
 811a0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a0d2:	889b      	ldrh	r3, [r3, #4]
 811a0d4:	b29b      	uxth	r3, r3
 811a0d6:	429a      	cmp	r2, r3
 811a0d8:	d002      	beq.n	811a0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 811a0da:	2300      	movs	r3, #0
 811a0dc:	623b      	str	r3, [r7, #32]
            break;
 811a0de:	e007      	b.n	811a0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 811a0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 811a0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a0e6:	681b      	ldr	r3, [r3, #0]
 811a0e8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 811a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a0ec:	2b00      	cmp	r3, #0
 811a0ee:	d1e9      	bne.n	811a0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 811a0f0:	6a3b      	ldr	r3, [r7, #32]
 811a0f2:	2b00      	cmp	r3, #0
 811a0f4:	d022      	beq.n	811a13c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 811a0f6:	68fb      	ldr	r3, [r7, #12]
 811a0f8:	685b      	ldr	r3, [r3, #4]
 811a0fa:	2b00      	cmp	r3, #0
 811a0fc:	d106      	bne.n	811a10c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 811a0fe:	4b15      	ldr	r3, [pc, #84]	@ (811a154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811a100:	f240 12df 	movw	r2, #479	@ 0x1df
 811a104:	4917      	ldr	r1, [pc, #92]	@ (811a164 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 811a106:	4815      	ldr	r0, [pc, #84]	@ (811a15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811a108:	f00a faa8 	bl	812465c <iprintf>
          LWIP_ASSERT("sanity check",
 811a10c:	68fb      	ldr	r3, [r7, #12]
 811a10e:	685b      	ldr	r3, [r3, #4]
 811a110:	685b      	ldr	r3, [r3, #4]
 811a112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811a114:	429a      	cmp	r2, r3
 811a116:	d106      	bne.n	811a126 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 811a118:	4b0e      	ldr	r3, [pc, #56]	@ (811a154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811a11a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 811a11e:	4911      	ldr	r1, [pc, #68]	@ (811a164 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 811a120:	480e      	ldr	r0, [pc, #56]	@ (811a15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811a122:	f00a fa9b 	bl	812465c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 811a126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a128:	681b      	ldr	r3, [r3, #0]
 811a12a:	2b00      	cmp	r3, #0
 811a12c:	d006      	beq.n	811a13c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 811a12e:	4b09      	ldr	r3, [pc, #36]	@ (811a154 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811a130:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 811a134:	490c      	ldr	r1, [pc, #48]	@ (811a168 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 811a136:	4809      	ldr	r0, [pc, #36]	@ (811a15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811a138:	f00a fa90 	bl	812465c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 811a13c:	6a3b      	ldr	r3, [r7, #32]
 811a13e:	2b00      	cmp	r3, #0
 811a140:	bf14      	ite	ne
 811a142:	2301      	movne	r3, #1
 811a144:	2300      	moveq	r3, #0
 811a146:	b2db      	uxtb	r3, r3
 811a148:	e000      	b.n	811a14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 811a14a:	2300      	movs	r3, #0
}
 811a14c:	4618      	mov	r0, r3
 811a14e:	3730      	adds	r7, #48	@ 0x30
 811a150:	46bd      	mov	sp, r7
 811a152:	bd80      	pop	{r7, pc}
 811a154:	08125c20 	.word	0x08125c20
 811a158:	08125d44 	.word	0x08125d44
 811a15c:	08125ca8 	.word	0x08125ca8
 811a160:	08125d64 	.word	0x08125d64
 811a164:	08125d9c 	.word	0x08125d9c
 811a168:	08125dac 	.word	0x08125dac

0811a16c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 811a16c:	b580      	push	{r7, lr}
 811a16e:	b08e      	sub	sp, #56	@ 0x38
 811a170:	af00      	add	r7, sp, #0
 811a172:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 811a174:	687b      	ldr	r3, [r7, #4]
 811a176:	685b      	ldr	r3, [r3, #4]
 811a178:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 811a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a17c:	781b      	ldrb	r3, [r3, #0]
 811a17e:	f003 030f 	and.w	r3, r3, #15
 811a182:	b2db      	uxtb	r3, r3
 811a184:	009b      	lsls	r3, r3, #2
 811a186:	b2db      	uxtb	r3, r3
 811a188:	2b14      	cmp	r3, #20
 811a18a:	f040 8171 	bne.w	811a470 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 811a18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a190:	88db      	ldrh	r3, [r3, #6]
 811a192:	b29b      	uxth	r3, r3
 811a194:	4618      	mov	r0, r3
 811a196:	f7fd fcb1 	bl	8117afc <lwip_htons>
 811a19a:	4603      	mov	r3, r0
 811a19c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811a1a0:	b29b      	uxth	r3, r3
 811a1a2:	00db      	lsls	r3, r3, #3
 811a1a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 811a1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a1a8:	885b      	ldrh	r3, [r3, #2]
 811a1aa:	b29b      	uxth	r3, r3
 811a1ac:	4618      	mov	r0, r3
 811a1ae:	f7fd fca5 	bl	8117afc <lwip_htons>
 811a1b2:	4603      	mov	r3, r0
 811a1b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 811a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a1b8:	781b      	ldrb	r3, [r3, #0]
 811a1ba:	f003 030f 	and.w	r3, r3, #15
 811a1be:	b2db      	uxtb	r3, r3
 811a1c0:	009b      	lsls	r3, r3, #2
 811a1c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 811a1c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811a1ca:	b29b      	uxth	r3, r3
 811a1cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811a1ce:	429a      	cmp	r2, r3
 811a1d0:	f0c0 8150 	bcc.w	811a474 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 811a1d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811a1d8:	b29b      	uxth	r3, r3
 811a1da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811a1dc:	1ad3      	subs	r3, r2, r3
 811a1de:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 811a1e0:	6878      	ldr	r0, [r7, #4]
 811a1e2:	f001 ff21 	bl	811c028 <pbuf_clen>
 811a1e6:	4603      	mov	r3, r0
 811a1e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 811a1ea:	4b8c      	ldr	r3, [pc, #560]	@ (811a41c <ip4_reass+0x2b0>)
 811a1ec:	881b      	ldrh	r3, [r3, #0]
 811a1ee:	461a      	mov	r2, r3
 811a1f0:	8c3b      	ldrh	r3, [r7, #32]
 811a1f2:	4413      	add	r3, r2
 811a1f4:	2b0a      	cmp	r3, #10
 811a1f6:	dd10      	ble.n	811a21a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 811a1f8:	8c3b      	ldrh	r3, [r7, #32]
 811a1fa:	4619      	mov	r1, r3
 811a1fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811a1fe:	f7ff fd81 	bl	8119d04 <ip_reass_remove_oldest_datagram>
 811a202:	4603      	mov	r3, r0
 811a204:	2b00      	cmp	r3, #0
 811a206:	f000 8137 	beq.w	811a478 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 811a20a:	4b84      	ldr	r3, [pc, #528]	@ (811a41c <ip4_reass+0x2b0>)
 811a20c:	881b      	ldrh	r3, [r3, #0]
 811a20e:	461a      	mov	r2, r3
 811a210:	8c3b      	ldrh	r3, [r7, #32]
 811a212:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 811a214:	2b0a      	cmp	r3, #10
 811a216:	f300 812f 	bgt.w	811a478 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 811a21a:	4b81      	ldr	r3, [pc, #516]	@ (811a420 <ip4_reass+0x2b4>)
 811a21c:	681b      	ldr	r3, [r3, #0]
 811a21e:	633b      	str	r3, [r7, #48]	@ 0x30
 811a220:	e015      	b.n	811a24e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 811a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a224:	695a      	ldr	r2, [r3, #20]
 811a226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a228:	68db      	ldr	r3, [r3, #12]
 811a22a:	429a      	cmp	r2, r3
 811a22c:	d10c      	bne.n	811a248 <ip4_reass+0xdc>
 811a22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a230:	699a      	ldr	r2, [r3, #24]
 811a232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a234:	691b      	ldr	r3, [r3, #16]
 811a236:	429a      	cmp	r2, r3
 811a238:	d106      	bne.n	811a248 <ip4_reass+0xdc>
 811a23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a23c:	899a      	ldrh	r2, [r3, #12]
 811a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a240:	889b      	ldrh	r3, [r3, #4]
 811a242:	b29b      	uxth	r3, r3
 811a244:	429a      	cmp	r2, r3
 811a246:	d006      	beq.n	811a256 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 811a248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a24a:	681b      	ldr	r3, [r3, #0]
 811a24c:	633b      	str	r3, [r7, #48]	@ 0x30
 811a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a250:	2b00      	cmp	r3, #0
 811a252:	d1e6      	bne.n	811a222 <ip4_reass+0xb6>
 811a254:	e000      	b.n	811a258 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 811a256:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 811a258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a25a:	2b00      	cmp	r3, #0
 811a25c:	d109      	bne.n	811a272 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 811a25e:	8c3b      	ldrh	r3, [r7, #32]
 811a260:	4619      	mov	r1, r3
 811a262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811a264:	f7ff fdb0 	bl	8119dc8 <ip_reass_enqueue_new_datagram>
 811a268:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 811a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a26c:	2b00      	cmp	r3, #0
 811a26e:	d11c      	bne.n	811a2aa <ip4_reass+0x13e>
      goto nullreturn;
 811a270:	e105      	b.n	811a47e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 811a272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a274:	88db      	ldrh	r3, [r3, #6]
 811a276:	b29b      	uxth	r3, r3
 811a278:	4618      	mov	r0, r3
 811a27a:	f7fd fc3f 	bl	8117afc <lwip_htons>
 811a27e:	4603      	mov	r3, r0
 811a280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811a284:	2b00      	cmp	r3, #0
 811a286:	d110      	bne.n	811a2aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 811a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a28a:	89db      	ldrh	r3, [r3, #14]
 811a28c:	4618      	mov	r0, r3
 811a28e:	f7fd fc35 	bl	8117afc <lwip_htons>
 811a292:	4603      	mov	r3, r0
 811a294:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 811a298:	2b00      	cmp	r3, #0
 811a29a:	d006      	beq.n	811a2aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 811a29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a29e:	3308      	adds	r3, #8
 811a2a0:	2214      	movs	r2, #20
 811a2a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811a2a4:	4618      	mov	r0, r3
 811a2a6:	f00a fc3c 	bl	8124b22 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 811a2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a2ac:	88db      	ldrh	r3, [r3, #6]
 811a2ae:	b29b      	uxth	r3, r3
 811a2b0:	f003 0320 	and.w	r3, r3, #32
 811a2b4:	2b00      	cmp	r3, #0
 811a2b6:	bf0c      	ite	eq
 811a2b8:	2301      	moveq	r3, #1
 811a2ba:	2300      	movne	r3, #0
 811a2bc:	b2db      	uxtb	r3, r3
 811a2be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 811a2c0:	69fb      	ldr	r3, [r7, #28]
 811a2c2:	2b00      	cmp	r3, #0
 811a2c4:	d00e      	beq.n	811a2e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 811a2c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 811a2c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811a2ca:	4413      	add	r3, r2
 811a2cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 811a2ce:	8b7a      	ldrh	r2, [r7, #26]
 811a2d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 811a2d2:	429a      	cmp	r2, r3
 811a2d4:	f0c0 80a0 	bcc.w	811a418 <ip4_reass+0x2ac>
 811a2d8:	8b7b      	ldrh	r3, [r7, #26]
 811a2da:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 811a2de:	4293      	cmp	r3, r2
 811a2e0:	f200 809a 	bhi.w	811a418 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 811a2e4:	69fa      	ldr	r2, [r7, #28]
 811a2e6:	6879      	ldr	r1, [r7, #4]
 811a2e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a2ea:	f7ff fdd5 	bl	8119e98 <ip_reass_chain_frag_into_datagram_and_validate>
 811a2ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 811a2f0:	697b      	ldr	r3, [r7, #20]
 811a2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 811a2f6:	f000 809b 	beq.w	811a430 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 811a2fa:	4b48      	ldr	r3, [pc, #288]	@ (811a41c <ip4_reass+0x2b0>)
 811a2fc:	881a      	ldrh	r2, [r3, #0]
 811a2fe:	8c3b      	ldrh	r3, [r7, #32]
 811a300:	4413      	add	r3, r2
 811a302:	b29a      	uxth	r2, r3
 811a304:	4b45      	ldr	r3, [pc, #276]	@ (811a41c <ip4_reass+0x2b0>)
 811a306:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 811a308:	69fb      	ldr	r3, [r7, #28]
 811a30a:	2b00      	cmp	r3, #0
 811a30c:	d00d      	beq.n	811a32a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 811a30e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 811a310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811a312:	4413      	add	r3, r2
 811a314:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 811a316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a318:	8a7a      	ldrh	r2, [r7, #18]
 811a31a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 811a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a31e:	7f9b      	ldrb	r3, [r3, #30]
 811a320:	f043 0301 	orr.w	r3, r3, #1
 811a324:	b2da      	uxtb	r2, r3
 811a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a328:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 811a32a:	697b      	ldr	r3, [r7, #20]
 811a32c:	2b01      	cmp	r3, #1
 811a32e:	d171      	bne.n	811a414 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 811a330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a332:	8b9b      	ldrh	r3, [r3, #28]
 811a334:	3314      	adds	r3, #20
 811a336:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 811a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a33a:	685b      	ldr	r3, [r3, #4]
 811a33c:	685b      	ldr	r3, [r3, #4]
 811a33e:	681b      	ldr	r3, [r3, #0]
 811a340:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 811a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a344:	685b      	ldr	r3, [r3, #4]
 811a346:	685b      	ldr	r3, [r3, #4]
 811a348:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 811a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a34c:	3308      	adds	r3, #8
 811a34e:	2214      	movs	r2, #20
 811a350:	4619      	mov	r1, r3
 811a352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811a354:	f00a fbe5 	bl	8124b22 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 811a358:	8a3b      	ldrh	r3, [r7, #16]
 811a35a:	4618      	mov	r0, r3
 811a35c:	f7fd fbce 	bl	8117afc <lwip_htons>
 811a360:	4603      	mov	r3, r0
 811a362:	461a      	mov	r2, r3
 811a364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a366:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 811a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a36a:	2200      	movs	r2, #0
 811a36c:	719a      	strb	r2, [r3, #6]
 811a36e:	2200      	movs	r2, #0
 811a370:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 811a372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811a374:	2200      	movs	r2, #0
 811a376:	729a      	strb	r2, [r3, #10]
 811a378:	2200      	movs	r2, #0
 811a37a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 811a37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a37e:	685b      	ldr	r3, [r3, #4]
 811a380:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 811a382:	e00d      	b.n	811a3a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 811a384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a386:	685b      	ldr	r3, [r3, #4]
 811a388:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 811a38a:	2114      	movs	r1, #20
 811a38c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 811a38e:	f001 fd37 	bl	811be00 <pbuf_remove_header>
      pbuf_cat(p, r);
 811a392:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 811a394:	6878      	ldr	r0, [r7, #4]
 811a396:	f001 fe87 	bl	811c0a8 <pbuf_cat>
      r = iprh->next_pbuf;
 811a39a:	68fb      	ldr	r3, [r7, #12]
 811a39c:	681b      	ldr	r3, [r3, #0]
 811a39e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 811a3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a3a2:	2b00      	cmp	r3, #0
 811a3a4:	d1ee      	bne.n	811a384 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 811a3a6:	4b1e      	ldr	r3, [pc, #120]	@ (811a420 <ip4_reass+0x2b4>)
 811a3a8:	681b      	ldr	r3, [r3, #0]
 811a3aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811a3ac:	429a      	cmp	r2, r3
 811a3ae:	d102      	bne.n	811a3b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 811a3b0:	2300      	movs	r3, #0
 811a3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811a3b4:	e010      	b.n	811a3d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 811a3b6:	4b1a      	ldr	r3, [pc, #104]	@ (811a420 <ip4_reass+0x2b4>)
 811a3b8:	681b      	ldr	r3, [r3, #0]
 811a3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811a3bc:	e007      	b.n	811a3ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 811a3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a3c0:	681b      	ldr	r3, [r3, #0]
 811a3c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811a3c4:	429a      	cmp	r2, r3
 811a3c6:	d006      	beq.n	811a3d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 811a3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a3ca:	681b      	ldr	r3, [r3, #0]
 811a3cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811a3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a3d0:	2b00      	cmp	r3, #0
 811a3d2:	d1f4      	bne.n	811a3be <ip4_reass+0x252>
 811a3d4:	e000      	b.n	811a3d8 <ip4_reass+0x26c>
          break;
 811a3d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 811a3d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811a3da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a3dc:	f7ff fd2e 	bl	8119e3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 811a3e0:	6878      	ldr	r0, [r7, #4]
 811a3e2:	f001 fe21 	bl	811c028 <pbuf_clen>
 811a3e6:	4603      	mov	r3, r0
 811a3e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 811a3ea:	4b0c      	ldr	r3, [pc, #48]	@ (811a41c <ip4_reass+0x2b0>)
 811a3ec:	881b      	ldrh	r3, [r3, #0]
 811a3ee:	8c3a      	ldrh	r2, [r7, #32]
 811a3f0:	429a      	cmp	r2, r3
 811a3f2:	d906      	bls.n	811a402 <ip4_reass+0x296>
 811a3f4:	4b0b      	ldr	r3, [pc, #44]	@ (811a424 <ip4_reass+0x2b8>)
 811a3f6:	f240 229b 	movw	r2, #667	@ 0x29b
 811a3fa:	490b      	ldr	r1, [pc, #44]	@ (811a428 <ip4_reass+0x2bc>)
 811a3fc:	480b      	ldr	r0, [pc, #44]	@ (811a42c <ip4_reass+0x2c0>)
 811a3fe:	f00a f92d 	bl	812465c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 811a402:	4b06      	ldr	r3, [pc, #24]	@ (811a41c <ip4_reass+0x2b0>)
 811a404:	881a      	ldrh	r2, [r3, #0]
 811a406:	8c3b      	ldrh	r3, [r7, #32]
 811a408:	1ad3      	subs	r3, r2, r3
 811a40a:	b29a      	uxth	r2, r3
 811a40c:	4b03      	ldr	r3, [pc, #12]	@ (811a41c <ip4_reass+0x2b0>)
 811a40e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 811a410:	687b      	ldr	r3, [r7, #4]
 811a412:	e038      	b.n	811a486 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 811a414:	2300      	movs	r3, #0
 811a416:	e036      	b.n	811a486 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 811a418:	bf00      	nop
 811a41a:	e00a      	b.n	811a432 <ip4_reass+0x2c6>
 811a41c:	1000b330 	.word	0x1000b330
 811a420:	1000b32c 	.word	0x1000b32c
 811a424:	08125c20 	.word	0x08125c20
 811a428:	08125dd0 	.word	0x08125dd0
 811a42c:	08125ca8 	.word	0x08125ca8
    goto nullreturn_ipr;
 811a430:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 811a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a434:	2b00      	cmp	r3, #0
 811a436:	d106      	bne.n	811a446 <ip4_reass+0x2da>
 811a438:	4b15      	ldr	r3, [pc, #84]	@ (811a490 <ip4_reass+0x324>)
 811a43a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 811a43e:	4915      	ldr	r1, [pc, #84]	@ (811a494 <ip4_reass+0x328>)
 811a440:	4815      	ldr	r0, [pc, #84]	@ (811a498 <ip4_reass+0x32c>)
 811a442:	f00a f90b 	bl	812465c <iprintf>
  if (ipr->p == NULL) {
 811a446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a448:	685b      	ldr	r3, [r3, #4]
 811a44a:	2b00      	cmp	r3, #0
 811a44c:	d116      	bne.n	811a47c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 811a44e:	4b13      	ldr	r3, [pc, #76]	@ (811a49c <ip4_reass+0x330>)
 811a450:	681b      	ldr	r3, [r3, #0]
 811a452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811a454:	429a      	cmp	r2, r3
 811a456:	d006      	beq.n	811a466 <ip4_reass+0x2fa>
 811a458:	4b0d      	ldr	r3, [pc, #52]	@ (811a490 <ip4_reass+0x324>)
 811a45a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811a45e:	4910      	ldr	r1, [pc, #64]	@ (811a4a0 <ip4_reass+0x334>)
 811a460:	480d      	ldr	r0, [pc, #52]	@ (811a498 <ip4_reass+0x32c>)
 811a462:	f00a f8fb 	bl	812465c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 811a466:	2100      	movs	r1, #0
 811a468:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a46a:	f7ff fce7 	bl	8119e3c <ip_reass_dequeue_datagram>
 811a46e:	e006      	b.n	811a47e <ip4_reass+0x312>
    goto nullreturn;
 811a470:	bf00      	nop
 811a472:	e004      	b.n	811a47e <ip4_reass+0x312>
    goto nullreturn;
 811a474:	bf00      	nop
 811a476:	e002      	b.n	811a47e <ip4_reass+0x312>
      goto nullreturn;
 811a478:	bf00      	nop
 811a47a:	e000      	b.n	811a47e <ip4_reass+0x312>
  }

nullreturn:
 811a47c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 811a47e:	6878      	ldr	r0, [r7, #4]
 811a480:	f001 fd44 	bl	811bf0c <pbuf_free>
  return NULL;
 811a484:	2300      	movs	r3, #0
}
 811a486:	4618      	mov	r0, r3
 811a488:	3738      	adds	r7, #56	@ 0x38
 811a48a:	46bd      	mov	sp, r7
 811a48c:	bd80      	pop	{r7, pc}
 811a48e:	bf00      	nop
 811a490:	08125c20 	.word	0x08125c20
 811a494:	08125dec 	.word	0x08125dec
 811a498:	08125ca8 	.word	0x08125ca8
 811a49c:	1000b32c 	.word	0x1000b32c
 811a4a0:	08125df8 	.word	0x08125df8

0811a4a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 811a4a4:	b580      	push	{r7, lr}
 811a4a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 811a4a8:	2005      	movs	r0, #5
 811a4aa:	f000 fe17 	bl	811b0dc <memp_malloc>
 811a4ae:	4603      	mov	r3, r0
}
 811a4b0:	4618      	mov	r0, r3
 811a4b2:	bd80      	pop	{r7, pc}

0811a4b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 811a4b4:	b580      	push	{r7, lr}
 811a4b6:	b082      	sub	sp, #8
 811a4b8:	af00      	add	r7, sp, #0
 811a4ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 811a4bc:	687b      	ldr	r3, [r7, #4]
 811a4be:	2b00      	cmp	r3, #0
 811a4c0:	d106      	bne.n	811a4d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 811a4c2:	4b07      	ldr	r3, [pc, #28]	@ (811a4e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 811a4c4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 811a4c8:	4906      	ldr	r1, [pc, #24]	@ (811a4e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 811a4ca:	4807      	ldr	r0, [pc, #28]	@ (811a4e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 811a4cc:	f00a f8c6 	bl	812465c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 811a4d0:	6879      	ldr	r1, [r7, #4]
 811a4d2:	2005      	movs	r0, #5
 811a4d4:	f000 fe78 	bl	811b1c8 <memp_free>
}
 811a4d8:	bf00      	nop
 811a4da:	3708      	adds	r7, #8
 811a4dc:	46bd      	mov	sp, r7
 811a4de:	bd80      	pop	{r7, pc}
 811a4e0:	08125c20 	.word	0x08125c20
 811a4e4:	08125e18 	.word	0x08125e18
 811a4e8:	08125ca8 	.word	0x08125ca8

0811a4ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 811a4ec:	b580      	push	{r7, lr}
 811a4ee:	b084      	sub	sp, #16
 811a4f0:	af00      	add	r7, sp, #0
 811a4f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 811a4f4:	687b      	ldr	r3, [r7, #4]
 811a4f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 811a4f8:	68fb      	ldr	r3, [r7, #12]
 811a4fa:	2b00      	cmp	r3, #0
 811a4fc:	d106      	bne.n	811a50c <ipfrag_free_pbuf_custom+0x20>
 811a4fe:	4b11      	ldr	r3, [pc, #68]	@ (811a544 <ipfrag_free_pbuf_custom+0x58>)
 811a500:	f240 22ce 	movw	r2, #718	@ 0x2ce
 811a504:	4910      	ldr	r1, [pc, #64]	@ (811a548 <ipfrag_free_pbuf_custom+0x5c>)
 811a506:	4811      	ldr	r0, [pc, #68]	@ (811a54c <ipfrag_free_pbuf_custom+0x60>)
 811a508:	f00a f8a8 	bl	812465c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 811a50c:	68fa      	ldr	r2, [r7, #12]
 811a50e:	687b      	ldr	r3, [r7, #4]
 811a510:	429a      	cmp	r2, r3
 811a512:	d006      	beq.n	811a522 <ipfrag_free_pbuf_custom+0x36>
 811a514:	4b0b      	ldr	r3, [pc, #44]	@ (811a544 <ipfrag_free_pbuf_custom+0x58>)
 811a516:	f240 22cf 	movw	r2, #719	@ 0x2cf
 811a51a:	490d      	ldr	r1, [pc, #52]	@ (811a550 <ipfrag_free_pbuf_custom+0x64>)
 811a51c:	480b      	ldr	r0, [pc, #44]	@ (811a54c <ipfrag_free_pbuf_custom+0x60>)
 811a51e:	f00a f89d 	bl	812465c <iprintf>
  if (pcr->original != NULL) {
 811a522:	68fb      	ldr	r3, [r7, #12]
 811a524:	695b      	ldr	r3, [r3, #20]
 811a526:	2b00      	cmp	r3, #0
 811a528:	d004      	beq.n	811a534 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 811a52a:	68fb      	ldr	r3, [r7, #12]
 811a52c:	695b      	ldr	r3, [r3, #20]
 811a52e:	4618      	mov	r0, r3
 811a530:	f001 fcec 	bl	811bf0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 811a534:	68f8      	ldr	r0, [r7, #12]
 811a536:	f7ff ffbd 	bl	811a4b4 <ip_frag_free_pbuf_custom_ref>
}
 811a53a:	bf00      	nop
 811a53c:	3710      	adds	r7, #16
 811a53e:	46bd      	mov	sp, r7
 811a540:	bd80      	pop	{r7, pc}
 811a542:	bf00      	nop
 811a544:	08125c20 	.word	0x08125c20
 811a548:	08125e24 	.word	0x08125e24
 811a54c:	08125ca8 	.word	0x08125ca8
 811a550:	08125e30 	.word	0x08125e30

0811a554 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 811a554:	b580      	push	{r7, lr}
 811a556:	b094      	sub	sp, #80	@ 0x50
 811a558:	af02      	add	r7, sp, #8
 811a55a:	60f8      	str	r0, [r7, #12]
 811a55c:	60b9      	str	r1, [r7, #8]
 811a55e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 811a560:	2300      	movs	r3, #0
 811a562:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 811a566:	68bb      	ldr	r3, [r7, #8]
 811a568:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811a56a:	3b14      	subs	r3, #20
 811a56c:	2b00      	cmp	r3, #0
 811a56e:	da00      	bge.n	811a572 <ip4_frag+0x1e>
 811a570:	3307      	adds	r3, #7
 811a572:	10db      	asrs	r3, r3, #3
 811a574:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 811a576:	2314      	movs	r3, #20
 811a578:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 811a57a:	68fb      	ldr	r3, [r7, #12]
 811a57c:	685b      	ldr	r3, [r3, #4]
 811a57e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 811a580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a582:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 811a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a586:	781b      	ldrb	r3, [r3, #0]
 811a588:	f003 030f 	and.w	r3, r3, #15
 811a58c:	b2db      	uxtb	r3, r3
 811a58e:	009b      	lsls	r3, r3, #2
 811a590:	b2db      	uxtb	r3, r3
 811a592:	2b14      	cmp	r3, #20
 811a594:	d002      	beq.n	811a59c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 811a596:	f06f 0305 	mvn.w	r3, #5
 811a59a:	e110      	b.n	811a7be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 811a59c:	68fb      	ldr	r3, [r7, #12]
 811a59e:	895b      	ldrh	r3, [r3, #10]
 811a5a0:	2b13      	cmp	r3, #19
 811a5a2:	d809      	bhi.n	811a5b8 <ip4_frag+0x64>
 811a5a4:	4b88      	ldr	r3, [pc, #544]	@ (811a7c8 <ip4_frag+0x274>)
 811a5a6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 811a5aa:	4988      	ldr	r1, [pc, #544]	@ (811a7cc <ip4_frag+0x278>)
 811a5ac:	4888      	ldr	r0, [pc, #544]	@ (811a7d0 <ip4_frag+0x27c>)
 811a5ae:	f00a f855 	bl	812465c <iprintf>
 811a5b2:	f06f 0305 	mvn.w	r3, #5
 811a5b6:	e102      	b.n	811a7be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 811a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a5ba:	88db      	ldrh	r3, [r3, #6]
 811a5bc:	b29b      	uxth	r3, r3
 811a5be:	4618      	mov	r0, r3
 811a5c0:	f7fd fa9c 	bl	8117afc <lwip_htons>
 811a5c4:	4603      	mov	r3, r0
 811a5c6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 811a5c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811a5ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811a5ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 811a5d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811a5d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 811a5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 811a5da:	68fb      	ldr	r3, [r7, #12]
 811a5dc:	891b      	ldrh	r3, [r3, #8]
 811a5de:	3b14      	subs	r3, #20
 811a5e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 811a5e4:	e0e1      	b.n	811a7aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 811a5e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 811a5e8:	00db      	lsls	r3, r3, #3
 811a5ea:	b29b      	uxth	r3, r3
 811a5ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811a5f0:	4293      	cmp	r3, r2
 811a5f2:	bf28      	it	cs
 811a5f4:	4613      	movcs	r3, r2
 811a5f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 811a5f8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811a5fc:	2114      	movs	r1, #20
 811a5fe:	200e      	movs	r0, #14
 811a600:	f001 f9a2 	bl	811b948 <pbuf_alloc>
 811a604:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 811a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a608:	2b00      	cmp	r3, #0
 811a60a:	f000 80d5 	beq.w	811a7b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 811a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a610:	895b      	ldrh	r3, [r3, #10]
 811a612:	2b13      	cmp	r3, #19
 811a614:	d806      	bhi.n	811a624 <ip4_frag+0xd0>
 811a616:	4b6c      	ldr	r3, [pc, #432]	@ (811a7c8 <ip4_frag+0x274>)
 811a618:	f44f 7249 	mov.w	r2, #804	@ 0x324
 811a61c:	496d      	ldr	r1, [pc, #436]	@ (811a7d4 <ip4_frag+0x280>)
 811a61e:	486c      	ldr	r0, [pc, #432]	@ (811a7d0 <ip4_frag+0x27c>)
 811a620:	f00a f81c 	bl	812465c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 811a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a626:	685b      	ldr	r3, [r3, #4]
 811a628:	2214      	movs	r2, #20
 811a62a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 811a62c:	4618      	mov	r0, r3
 811a62e:	f00a fa78 	bl	8124b22 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 811a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a634:	685b      	ldr	r3, [r3, #4]
 811a636:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 811a638:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811a63a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 811a63e:	e064      	b.n	811a70a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 811a640:	68fb      	ldr	r3, [r7, #12]
 811a642:	895a      	ldrh	r2, [r3, #10]
 811a644:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811a646:	1ad3      	subs	r3, r2, r3
 811a648:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 811a64a:	68fb      	ldr	r3, [r7, #12]
 811a64c:	895b      	ldrh	r3, [r3, #10]
 811a64e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 811a650:	429a      	cmp	r2, r3
 811a652:	d906      	bls.n	811a662 <ip4_frag+0x10e>
 811a654:	4b5c      	ldr	r3, [pc, #368]	@ (811a7c8 <ip4_frag+0x274>)
 811a656:	f240 322d 	movw	r2, #813	@ 0x32d
 811a65a:	495f      	ldr	r1, [pc, #380]	@ (811a7d8 <ip4_frag+0x284>)
 811a65c:	485c      	ldr	r0, [pc, #368]	@ (811a7d0 <ip4_frag+0x27c>)
 811a65e:	f009 fffd 	bl	812465c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 811a662:	8bfa      	ldrh	r2, [r7, #30]
 811a664:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811a668:	4293      	cmp	r3, r2
 811a66a:	bf28      	it	cs
 811a66c:	4613      	movcs	r3, r2
 811a66e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 811a672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811a676:	2b00      	cmp	r3, #0
 811a678:	d105      	bne.n	811a686 <ip4_frag+0x132>
        poff = 0;
 811a67a:	2300      	movs	r3, #0
 811a67c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 811a67e:	68fb      	ldr	r3, [r7, #12]
 811a680:	681b      	ldr	r3, [r3, #0]
 811a682:	60fb      	str	r3, [r7, #12]
        continue;
 811a684:	e041      	b.n	811a70a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 811a686:	f7ff ff0d 	bl	811a4a4 <ip_frag_alloc_pbuf_custom_ref>
 811a68a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 811a68c:	69bb      	ldr	r3, [r7, #24]
 811a68e:	2b00      	cmp	r3, #0
 811a690:	d103      	bne.n	811a69a <ip4_frag+0x146>
        pbuf_free(rambuf);
 811a692:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811a694:	f001 fc3a 	bl	811bf0c <pbuf_free>
        goto memerr;
 811a698:	e08f      	b.n	811a7ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 811a69a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 811a69c:	68fb      	ldr	r3, [r7, #12]
 811a69e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 811a6a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811a6a2:	4413      	add	r3, r2
 811a6a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 811a6a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 811a6ac:	9201      	str	r2, [sp, #4]
 811a6ae:	9300      	str	r3, [sp, #0]
 811a6b0:	4603      	mov	r3, r0
 811a6b2:	2241      	movs	r2, #65	@ 0x41
 811a6b4:	2000      	movs	r0, #0
 811a6b6:	f001 fa71 	bl	811bb9c <pbuf_alloced_custom>
 811a6ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 811a6bc:	697b      	ldr	r3, [r7, #20]
 811a6be:	2b00      	cmp	r3, #0
 811a6c0:	d106      	bne.n	811a6d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 811a6c2:	69b8      	ldr	r0, [r7, #24]
 811a6c4:	f7ff fef6 	bl	811a4b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 811a6c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811a6ca:	f001 fc1f 	bl	811bf0c <pbuf_free>
        goto memerr;
 811a6ce:	e074      	b.n	811a7ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 811a6d0:	68f8      	ldr	r0, [r7, #12]
 811a6d2:	f001 fcc1 	bl	811c058 <pbuf_ref>
      pcr->original = p;
 811a6d6:	69bb      	ldr	r3, [r7, #24]
 811a6d8:	68fa      	ldr	r2, [r7, #12]
 811a6da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 811a6dc:	69bb      	ldr	r3, [r7, #24]
 811a6de:	4a3f      	ldr	r2, [pc, #252]	@ (811a7dc <ip4_frag+0x288>)
 811a6e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 811a6e2:	6979      	ldr	r1, [r7, #20]
 811a6e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811a6e6:	f001 fcdf 	bl	811c0a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 811a6ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 811a6ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811a6f2:	1ad3      	subs	r3, r2, r3
 811a6f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 811a6f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811a6fc:	2b00      	cmp	r3, #0
 811a6fe:	d004      	beq.n	811a70a <ip4_frag+0x1b6>
        poff = 0;
 811a700:	2300      	movs	r3, #0
 811a702:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 811a704:	68fb      	ldr	r3, [r7, #12]
 811a706:	681b      	ldr	r3, [r3, #0]
 811a708:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 811a70a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811a70e:	2b00      	cmp	r3, #0
 811a710:	d196      	bne.n	811a640 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 811a712:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 811a714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811a718:	4413      	add	r3, r2
 811a71a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 811a71c:	68bb      	ldr	r3, [r7, #8]
 811a71e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811a720:	f1a3 0213 	sub.w	r2, r3, #19
 811a724:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811a728:	429a      	cmp	r2, r3
 811a72a:	bfcc      	ite	gt
 811a72c:	2301      	movgt	r3, #1
 811a72e:	2300      	movle	r3, #0
 811a730:	b2db      	uxtb	r3, r3
 811a732:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 811a734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 811a738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811a73c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 811a73e:	6a3b      	ldr	r3, [r7, #32]
 811a740:	2b00      	cmp	r3, #0
 811a742:	d002      	beq.n	811a74a <ip4_frag+0x1f6>
 811a744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a746:	2b00      	cmp	r3, #0
 811a748:	d003      	beq.n	811a752 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 811a74a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811a74c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 811a750:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 811a752:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811a754:	4618      	mov	r0, r3
 811a756:	f7fd f9d1 	bl	8117afc <lwip_htons>
 811a75a:	4603      	mov	r3, r0
 811a75c:	461a      	mov	r2, r3
 811a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a760:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 811a762:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811a764:	3314      	adds	r3, #20
 811a766:	b29b      	uxth	r3, r3
 811a768:	4618      	mov	r0, r3
 811a76a:	f7fd f9c7 	bl	8117afc <lwip_htons>
 811a76e:	4603      	mov	r3, r0
 811a770:	461a      	mov	r2, r3
 811a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a774:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 811a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a778:	2200      	movs	r2, #0
 811a77a:	729a      	strb	r2, [r3, #10]
 811a77c:	2200      	movs	r2, #0
 811a77e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 811a780:	68bb      	ldr	r3, [r7, #8]
 811a782:	695b      	ldr	r3, [r3, #20]
 811a784:	687a      	ldr	r2, [r7, #4]
 811a786:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811a788:	68b8      	ldr	r0, [r7, #8]
 811a78a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 811a78c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811a78e:	f001 fbbd 	bl	811bf0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 811a792:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811a796:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811a798:	1ad3      	subs	r3, r2, r3
 811a79a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 811a79e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 811a7a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 811a7a4:	4413      	add	r3, r2
 811a7a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 811a7aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811a7ae:	2b00      	cmp	r3, #0
 811a7b0:	f47f af19 	bne.w	811a5e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 811a7b4:	2300      	movs	r3, #0
 811a7b6:	e002      	b.n	811a7be <ip4_frag+0x26a>
      goto memerr;
 811a7b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 811a7ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 811a7be:	4618      	mov	r0, r3
 811a7c0:	3748      	adds	r7, #72	@ 0x48
 811a7c2:	46bd      	mov	sp, r7
 811a7c4:	bd80      	pop	{r7, pc}
 811a7c6:	bf00      	nop
 811a7c8:	08125c20 	.word	0x08125c20
 811a7cc:	08125e3c 	.word	0x08125e3c
 811a7d0:	08125ca8 	.word	0x08125ca8
 811a7d4:	08125e58 	.word	0x08125e58
 811a7d8:	08125e78 	.word	0x08125e78
 811a7dc:	0811a4ed 	.word	0x0811a4ed

0811a7e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 811a7e0:	b480      	push	{r7}
 811a7e2:	b083      	sub	sp, #12
 811a7e4:	af00      	add	r7, sp, #0
 811a7e6:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 811a7e8:	4b04      	ldr	r3, [pc, #16]	@ (811a7fc <ptr_to_mem+0x1c>)
 811a7ea:	681a      	ldr	r2, [r3, #0]
 811a7ec:	687b      	ldr	r3, [r7, #4]
 811a7ee:	4413      	add	r3, r2
}
 811a7f0:	4618      	mov	r0, r3
 811a7f2:	370c      	adds	r7, #12
 811a7f4:	46bd      	mov	sp, r7
 811a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 811a7fa:	4770      	bx	lr
 811a7fc:	1000b334 	.word	0x1000b334

0811a800 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 811a800:	b480      	push	{r7}
 811a802:	b083      	sub	sp, #12
 811a804:	af00      	add	r7, sp, #0
 811a806:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 811a808:	4b04      	ldr	r3, [pc, #16]	@ (811a81c <mem_to_ptr+0x1c>)
 811a80a:	681b      	ldr	r3, [r3, #0]
 811a80c:	687a      	ldr	r2, [r7, #4]
 811a80e:	1ad3      	subs	r3, r2, r3
}
 811a810:	4618      	mov	r0, r3
 811a812:	370c      	adds	r7, #12
 811a814:	46bd      	mov	sp, r7
 811a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 811a81a:	4770      	bx	lr
 811a81c:	1000b334 	.word	0x1000b334

0811a820 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 811a820:	b590      	push	{r4, r7, lr}
 811a822:	b085      	sub	sp, #20
 811a824:	af00      	add	r7, sp, #0
 811a826:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 811a828:	4b45      	ldr	r3, [pc, #276]	@ (811a940 <plug_holes+0x120>)
 811a82a:	681b      	ldr	r3, [r3, #0]
 811a82c:	687a      	ldr	r2, [r7, #4]
 811a82e:	429a      	cmp	r2, r3
 811a830:	d206      	bcs.n	811a840 <plug_holes+0x20>
 811a832:	4b44      	ldr	r3, [pc, #272]	@ (811a944 <plug_holes+0x124>)
 811a834:	f240 12df 	movw	r2, #479	@ 0x1df
 811a838:	4943      	ldr	r1, [pc, #268]	@ (811a948 <plug_holes+0x128>)
 811a83a:	4844      	ldr	r0, [pc, #272]	@ (811a94c <plug_holes+0x12c>)
 811a83c:	f009 ff0e 	bl	812465c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 811a840:	4b43      	ldr	r3, [pc, #268]	@ (811a950 <plug_holes+0x130>)
 811a842:	681b      	ldr	r3, [r3, #0]
 811a844:	687a      	ldr	r2, [r7, #4]
 811a846:	429a      	cmp	r2, r3
 811a848:	d306      	bcc.n	811a858 <plug_holes+0x38>
 811a84a:	4b3e      	ldr	r3, [pc, #248]	@ (811a944 <plug_holes+0x124>)
 811a84c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 811a850:	4940      	ldr	r1, [pc, #256]	@ (811a954 <plug_holes+0x134>)
 811a852:	483e      	ldr	r0, [pc, #248]	@ (811a94c <plug_holes+0x12c>)
 811a854:	f009 ff02 	bl	812465c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 811a858:	687b      	ldr	r3, [r7, #4]
 811a85a:	7a1b      	ldrb	r3, [r3, #8]
 811a85c:	2b00      	cmp	r3, #0
 811a85e:	d006      	beq.n	811a86e <plug_holes+0x4e>
 811a860:	4b38      	ldr	r3, [pc, #224]	@ (811a944 <plug_holes+0x124>)
 811a862:	f240 12e1 	movw	r2, #481	@ 0x1e1
 811a866:	493c      	ldr	r1, [pc, #240]	@ (811a958 <plug_holes+0x138>)
 811a868:	4838      	ldr	r0, [pc, #224]	@ (811a94c <plug_holes+0x12c>)
 811a86a:	f009 fef7 	bl	812465c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 811a86e:	687b      	ldr	r3, [r7, #4]
 811a870:	681b      	ldr	r3, [r3, #0]
 811a872:	4a3a      	ldr	r2, [pc, #232]	@ (811a95c <plug_holes+0x13c>)
 811a874:	4293      	cmp	r3, r2
 811a876:	d906      	bls.n	811a886 <plug_holes+0x66>
 811a878:	4b32      	ldr	r3, [pc, #200]	@ (811a944 <plug_holes+0x124>)
 811a87a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 811a87e:	4938      	ldr	r1, [pc, #224]	@ (811a960 <plug_holes+0x140>)
 811a880:	4832      	ldr	r0, [pc, #200]	@ (811a94c <plug_holes+0x12c>)
 811a882:	f009 feeb 	bl	812465c <iprintf>

  nmem = ptr_to_mem(mem->next);
 811a886:	687b      	ldr	r3, [r7, #4]
 811a888:	681b      	ldr	r3, [r3, #0]
 811a88a:	4618      	mov	r0, r3
 811a88c:	f7ff ffa8 	bl	811a7e0 <ptr_to_mem>
 811a890:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 811a892:	687a      	ldr	r2, [r7, #4]
 811a894:	68fb      	ldr	r3, [r7, #12]
 811a896:	429a      	cmp	r2, r3
 811a898:	d024      	beq.n	811a8e4 <plug_holes+0xc4>
 811a89a:	68fb      	ldr	r3, [r7, #12]
 811a89c:	7a1b      	ldrb	r3, [r3, #8]
 811a89e:	2b00      	cmp	r3, #0
 811a8a0:	d120      	bne.n	811a8e4 <plug_holes+0xc4>
 811a8a2:	4b2b      	ldr	r3, [pc, #172]	@ (811a950 <plug_holes+0x130>)
 811a8a4:	681b      	ldr	r3, [r3, #0]
 811a8a6:	68fa      	ldr	r2, [r7, #12]
 811a8a8:	429a      	cmp	r2, r3
 811a8aa:	d01b      	beq.n	811a8e4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 811a8ac:	4b2d      	ldr	r3, [pc, #180]	@ (811a964 <plug_holes+0x144>)
 811a8ae:	681b      	ldr	r3, [r3, #0]
 811a8b0:	68fa      	ldr	r2, [r7, #12]
 811a8b2:	429a      	cmp	r2, r3
 811a8b4:	d102      	bne.n	811a8bc <plug_holes+0x9c>
      lfree = mem;
 811a8b6:	4a2b      	ldr	r2, [pc, #172]	@ (811a964 <plug_holes+0x144>)
 811a8b8:	687b      	ldr	r3, [r7, #4]
 811a8ba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 811a8bc:	68fb      	ldr	r3, [r7, #12]
 811a8be:	681a      	ldr	r2, [r3, #0]
 811a8c0:	687b      	ldr	r3, [r7, #4]
 811a8c2:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 811a8c4:	68fb      	ldr	r3, [r7, #12]
 811a8c6:	681b      	ldr	r3, [r3, #0]
 811a8c8:	4a24      	ldr	r2, [pc, #144]	@ (811a95c <plug_holes+0x13c>)
 811a8ca:	4293      	cmp	r3, r2
 811a8cc:	d00a      	beq.n	811a8e4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 811a8ce:	68fb      	ldr	r3, [r7, #12]
 811a8d0:	681b      	ldr	r3, [r3, #0]
 811a8d2:	4618      	mov	r0, r3
 811a8d4:	f7ff ff84 	bl	811a7e0 <ptr_to_mem>
 811a8d8:	4604      	mov	r4, r0
 811a8da:	6878      	ldr	r0, [r7, #4]
 811a8dc:	f7ff ff90 	bl	811a800 <mem_to_ptr>
 811a8e0:	4603      	mov	r3, r0
 811a8e2:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 811a8e4:	687b      	ldr	r3, [r7, #4]
 811a8e6:	685b      	ldr	r3, [r3, #4]
 811a8e8:	4618      	mov	r0, r3
 811a8ea:	f7ff ff79 	bl	811a7e0 <ptr_to_mem>
 811a8ee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 811a8f0:	68ba      	ldr	r2, [r7, #8]
 811a8f2:	687b      	ldr	r3, [r7, #4]
 811a8f4:	429a      	cmp	r2, r3
 811a8f6:	d01f      	beq.n	811a938 <plug_holes+0x118>
 811a8f8:	68bb      	ldr	r3, [r7, #8]
 811a8fa:	7a1b      	ldrb	r3, [r3, #8]
 811a8fc:	2b00      	cmp	r3, #0
 811a8fe:	d11b      	bne.n	811a938 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 811a900:	4b18      	ldr	r3, [pc, #96]	@ (811a964 <plug_holes+0x144>)
 811a902:	681b      	ldr	r3, [r3, #0]
 811a904:	687a      	ldr	r2, [r7, #4]
 811a906:	429a      	cmp	r2, r3
 811a908:	d102      	bne.n	811a910 <plug_holes+0xf0>
      lfree = pmem;
 811a90a:	4a16      	ldr	r2, [pc, #88]	@ (811a964 <plug_holes+0x144>)
 811a90c:	68bb      	ldr	r3, [r7, #8]
 811a90e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 811a910:	687b      	ldr	r3, [r7, #4]
 811a912:	681a      	ldr	r2, [r3, #0]
 811a914:	68bb      	ldr	r3, [r7, #8]
 811a916:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 811a918:	687b      	ldr	r3, [r7, #4]
 811a91a:	681b      	ldr	r3, [r3, #0]
 811a91c:	4a0f      	ldr	r2, [pc, #60]	@ (811a95c <plug_holes+0x13c>)
 811a91e:	4293      	cmp	r3, r2
 811a920:	d00a      	beq.n	811a938 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 811a922:	687b      	ldr	r3, [r7, #4]
 811a924:	681b      	ldr	r3, [r3, #0]
 811a926:	4618      	mov	r0, r3
 811a928:	f7ff ff5a 	bl	811a7e0 <ptr_to_mem>
 811a92c:	4604      	mov	r4, r0
 811a92e:	68b8      	ldr	r0, [r7, #8]
 811a930:	f7ff ff66 	bl	811a800 <mem_to_ptr>
 811a934:	4603      	mov	r3, r0
 811a936:	6063      	str	r3, [r4, #4]
    }
  }
}
 811a938:	bf00      	nop
 811a93a:	3714      	adds	r7, #20
 811a93c:	46bd      	mov	sp, r7
 811a93e:	bd90      	pop	{r4, r7, pc}
 811a940:	1000b334 	.word	0x1000b334
 811a944:	08125e88 	.word	0x08125e88
 811a948:	08125efc 	.word	0x08125efc
 811a94c:	08125f14 	.word	0x08125f14
 811a950:	1000b338 	.word	0x1000b338
 811a954:	08125f3c 	.word	0x08125f3c
 811a958:	08125f58 	.word	0x08125f58
 811a95c:	0001ffe8 	.word	0x0001ffe8
 811a960:	08125f74 	.word	0x08125f74
 811a964:	1000b340 	.word	0x1000b340

0811a968 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 811a968:	b580      	push	{r7, lr}
 811a96a:	b082      	sub	sp, #8
 811a96c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 811a96e:	4b1b      	ldr	r3, [pc, #108]	@ (811a9dc <mem_init+0x74>)
 811a970:	4a1b      	ldr	r2, [pc, #108]	@ (811a9e0 <mem_init+0x78>)
 811a972:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 811a974:	4b19      	ldr	r3, [pc, #100]	@ (811a9dc <mem_init+0x74>)
 811a976:	681b      	ldr	r3, [r3, #0]
 811a978:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 811a97a:	687b      	ldr	r3, [r7, #4]
 811a97c:	4a19      	ldr	r2, [pc, #100]	@ (811a9e4 <mem_init+0x7c>)
 811a97e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 811a980:	687b      	ldr	r3, [r7, #4]
 811a982:	2200      	movs	r2, #0
 811a984:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 811a986:	687b      	ldr	r3, [r7, #4]
 811a988:	2200      	movs	r2, #0
 811a98a:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 811a98c:	4815      	ldr	r0, [pc, #84]	@ (811a9e4 <mem_init+0x7c>)
 811a98e:	f7ff ff27 	bl	811a7e0 <ptr_to_mem>
 811a992:	4603      	mov	r3, r0
 811a994:	4a14      	ldr	r2, [pc, #80]	@ (811a9e8 <mem_init+0x80>)
 811a996:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 811a998:	4b13      	ldr	r3, [pc, #76]	@ (811a9e8 <mem_init+0x80>)
 811a99a:	681b      	ldr	r3, [r3, #0]
 811a99c:	2201      	movs	r2, #1
 811a99e:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 811a9a0:	4b11      	ldr	r3, [pc, #68]	@ (811a9e8 <mem_init+0x80>)
 811a9a2:	681b      	ldr	r3, [r3, #0]
 811a9a4:	4a0f      	ldr	r2, [pc, #60]	@ (811a9e4 <mem_init+0x7c>)
 811a9a6:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 811a9a8:	4b0f      	ldr	r3, [pc, #60]	@ (811a9e8 <mem_init+0x80>)
 811a9aa:	681b      	ldr	r3, [r3, #0]
 811a9ac:	4a0d      	ldr	r2, [pc, #52]	@ (811a9e4 <mem_init+0x7c>)
 811a9ae:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 811a9b0:	4b0a      	ldr	r3, [pc, #40]	@ (811a9dc <mem_init+0x74>)
 811a9b2:	681b      	ldr	r3, [r3, #0]
 811a9b4:	4a0d      	ldr	r2, [pc, #52]	@ (811a9ec <mem_init+0x84>)
 811a9b6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 811a9b8:	480d      	ldr	r0, [pc, #52]	@ (811a9f0 <mem_init+0x88>)
 811a9ba:	f001 fdd3 	bl	811c564 <sys_mutex_new>
 811a9be:	4603      	mov	r3, r0
 811a9c0:	2b00      	cmp	r3, #0
 811a9c2:	d006      	beq.n	811a9d2 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 811a9c4:	4b0b      	ldr	r3, [pc, #44]	@ (811a9f4 <mem_init+0x8c>)
 811a9c6:	f240 221f 	movw	r2, #543	@ 0x21f
 811a9ca:	490b      	ldr	r1, [pc, #44]	@ (811a9f8 <mem_init+0x90>)
 811a9cc:	480b      	ldr	r0, [pc, #44]	@ (811a9fc <mem_init+0x94>)
 811a9ce:	f009 fe45 	bl	812465c <iprintf>
  }
}
 811a9d2:	bf00      	nop
 811a9d4:	3708      	adds	r7, #8
 811a9d6:	46bd      	mov	sp, r7
 811a9d8:	bd80      	pop	{r7, pc}
 811a9da:	bf00      	nop
 811a9dc:	1000b334 	.word	0x1000b334
 811a9e0:	10020000 	.word	0x10020000
 811a9e4:	0001ffe8 	.word	0x0001ffe8
 811a9e8:	1000b338 	.word	0x1000b338
 811a9ec:	1000b340 	.word	0x1000b340
 811a9f0:	1000b33c 	.word	0x1000b33c
 811a9f4:	08125e88 	.word	0x08125e88
 811a9f8:	08125fa0 	.word	0x08125fa0
 811a9fc:	08125f14 	.word	0x08125f14

0811aa00 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 811aa00:	b580      	push	{r7, lr}
 811aa02:	b086      	sub	sp, #24
 811aa04:	af00      	add	r7, sp, #0
 811aa06:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 811aa08:	6878      	ldr	r0, [r7, #4]
 811aa0a:	f7ff fef9 	bl	811a800 <mem_to_ptr>
 811aa0e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 811aa10:	687b      	ldr	r3, [r7, #4]
 811aa12:	681b      	ldr	r3, [r3, #0]
 811aa14:	4618      	mov	r0, r3
 811aa16:	f7ff fee3 	bl	811a7e0 <ptr_to_mem>
 811aa1a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 811aa1c:	687b      	ldr	r3, [r7, #4]
 811aa1e:	685b      	ldr	r3, [r3, #4]
 811aa20:	4618      	mov	r0, r3
 811aa22:	f7ff fedd 	bl	811a7e0 <ptr_to_mem>
 811aa26:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 811aa28:	687b      	ldr	r3, [r7, #4]
 811aa2a:	681b      	ldr	r3, [r3, #0]
 811aa2c:	4a11      	ldr	r2, [pc, #68]	@ (811aa74 <mem_link_valid+0x74>)
 811aa2e:	4293      	cmp	r3, r2
 811aa30:	d818      	bhi.n	811aa64 <mem_link_valid+0x64>
 811aa32:	687b      	ldr	r3, [r7, #4]
 811aa34:	685b      	ldr	r3, [r3, #4]
 811aa36:	4a0f      	ldr	r2, [pc, #60]	@ (811aa74 <mem_link_valid+0x74>)
 811aa38:	4293      	cmp	r3, r2
 811aa3a:	d813      	bhi.n	811aa64 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811aa3c:	687b      	ldr	r3, [r7, #4]
 811aa3e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 811aa40:	697a      	ldr	r2, [r7, #20]
 811aa42:	429a      	cmp	r2, r3
 811aa44:	d004      	beq.n	811aa50 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811aa46:	68fb      	ldr	r3, [r7, #12]
 811aa48:	681b      	ldr	r3, [r3, #0]
 811aa4a:	697a      	ldr	r2, [r7, #20]
 811aa4c:	429a      	cmp	r2, r3
 811aa4e:	d109      	bne.n	811aa64 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 811aa50:	4b09      	ldr	r3, [pc, #36]	@ (811aa78 <mem_link_valid+0x78>)
 811aa52:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811aa54:	693a      	ldr	r2, [r7, #16]
 811aa56:	429a      	cmp	r2, r3
 811aa58:	d006      	beq.n	811aa68 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 811aa5a:	693b      	ldr	r3, [r7, #16]
 811aa5c:	685b      	ldr	r3, [r3, #4]
 811aa5e:	697a      	ldr	r2, [r7, #20]
 811aa60:	429a      	cmp	r2, r3
 811aa62:	d001      	beq.n	811aa68 <mem_link_valid+0x68>
    return 0;
 811aa64:	2300      	movs	r3, #0
 811aa66:	e000      	b.n	811aa6a <mem_link_valid+0x6a>
  }
  return 1;
 811aa68:	2301      	movs	r3, #1
}
 811aa6a:	4618      	mov	r0, r3
 811aa6c:	3718      	adds	r7, #24
 811aa6e:	46bd      	mov	sp, r7
 811aa70:	bd80      	pop	{r7, pc}
 811aa72:	bf00      	nop
 811aa74:	0001ffe8 	.word	0x0001ffe8
 811aa78:	1000b338 	.word	0x1000b338

0811aa7c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 811aa7c:	b580      	push	{r7, lr}
 811aa7e:	b088      	sub	sp, #32
 811aa80:	af00      	add	r7, sp, #0
 811aa82:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 811aa84:	687b      	ldr	r3, [r7, #4]
 811aa86:	2b00      	cmp	r3, #0
 811aa88:	d070      	beq.n	811ab6c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 811aa8a:	687b      	ldr	r3, [r7, #4]
 811aa8c:	f003 0303 	and.w	r3, r3, #3
 811aa90:	2b00      	cmp	r3, #0
 811aa92:	d00d      	beq.n	811aab0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 811aa94:	4b37      	ldr	r3, [pc, #220]	@ (811ab74 <mem_free+0xf8>)
 811aa96:	f240 2273 	movw	r2, #627	@ 0x273
 811aa9a:	4937      	ldr	r1, [pc, #220]	@ (811ab78 <mem_free+0xfc>)
 811aa9c:	4837      	ldr	r0, [pc, #220]	@ (811ab7c <mem_free+0x100>)
 811aa9e:	f009 fddd 	bl	812465c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811aaa2:	f001 fdb1 	bl	811c608 <sys_arch_protect>
 811aaa6:	60f8      	str	r0, [r7, #12]
 811aaa8:	68f8      	ldr	r0, [r7, #12]
 811aaaa:	f001 fdbb 	bl	811c624 <sys_arch_unprotect>
    return;
 811aaae:	e05e      	b.n	811ab6e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 811aab0:	687b      	ldr	r3, [r7, #4]
 811aab2:	3b0c      	subs	r3, #12
 811aab4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 811aab6:	4b32      	ldr	r3, [pc, #200]	@ (811ab80 <mem_free+0x104>)
 811aab8:	681b      	ldr	r3, [r3, #0]
 811aaba:	69fa      	ldr	r2, [r7, #28]
 811aabc:	429a      	cmp	r2, r3
 811aabe:	d306      	bcc.n	811aace <mem_free+0x52>
 811aac0:	687b      	ldr	r3, [r7, #4]
 811aac2:	f103 020c 	add.w	r2, r3, #12
 811aac6:	4b2f      	ldr	r3, [pc, #188]	@ (811ab84 <mem_free+0x108>)
 811aac8:	681b      	ldr	r3, [r3, #0]
 811aaca:	429a      	cmp	r2, r3
 811aacc:	d90d      	bls.n	811aaea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 811aace:	4b29      	ldr	r3, [pc, #164]	@ (811ab74 <mem_free+0xf8>)
 811aad0:	f240 227f 	movw	r2, #639	@ 0x27f
 811aad4:	492c      	ldr	r1, [pc, #176]	@ (811ab88 <mem_free+0x10c>)
 811aad6:	4829      	ldr	r0, [pc, #164]	@ (811ab7c <mem_free+0x100>)
 811aad8:	f009 fdc0 	bl	812465c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811aadc:	f001 fd94 	bl	811c608 <sys_arch_protect>
 811aae0:	6138      	str	r0, [r7, #16]
 811aae2:	6938      	ldr	r0, [r7, #16]
 811aae4:	f001 fd9e 	bl	811c624 <sys_arch_unprotect>
    return;
 811aae8:	e041      	b.n	811ab6e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 811aaea:	4828      	ldr	r0, [pc, #160]	@ (811ab8c <mem_free+0x110>)
 811aaec:	f001 fd50 	bl	811c590 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 811aaf0:	69fb      	ldr	r3, [r7, #28]
 811aaf2:	7a1b      	ldrb	r3, [r3, #8]
 811aaf4:	2b00      	cmp	r3, #0
 811aaf6:	d110      	bne.n	811ab1a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 811aaf8:	4b1e      	ldr	r3, [pc, #120]	@ (811ab74 <mem_free+0xf8>)
 811aafa:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 811aafe:	4924      	ldr	r1, [pc, #144]	@ (811ab90 <mem_free+0x114>)
 811ab00:	481e      	ldr	r0, [pc, #120]	@ (811ab7c <mem_free+0x100>)
 811ab02:	f009 fdab 	bl	812465c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 811ab06:	4821      	ldr	r0, [pc, #132]	@ (811ab8c <mem_free+0x110>)
 811ab08:	f001 fd51 	bl	811c5ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811ab0c:	f001 fd7c 	bl	811c608 <sys_arch_protect>
 811ab10:	6178      	str	r0, [r7, #20]
 811ab12:	6978      	ldr	r0, [r7, #20]
 811ab14:	f001 fd86 	bl	811c624 <sys_arch_unprotect>
    return;
 811ab18:	e029      	b.n	811ab6e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 811ab1a:	69f8      	ldr	r0, [r7, #28]
 811ab1c:	f7ff ff70 	bl	811aa00 <mem_link_valid>
 811ab20:	4603      	mov	r3, r0
 811ab22:	2b00      	cmp	r3, #0
 811ab24:	d110      	bne.n	811ab48 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 811ab26:	4b13      	ldr	r3, [pc, #76]	@ (811ab74 <mem_free+0xf8>)
 811ab28:	f240 2295 	movw	r2, #661	@ 0x295
 811ab2c:	4919      	ldr	r1, [pc, #100]	@ (811ab94 <mem_free+0x118>)
 811ab2e:	4813      	ldr	r0, [pc, #76]	@ (811ab7c <mem_free+0x100>)
 811ab30:	f009 fd94 	bl	812465c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 811ab34:	4815      	ldr	r0, [pc, #84]	@ (811ab8c <mem_free+0x110>)
 811ab36:	f001 fd3a 	bl	811c5ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811ab3a:	f001 fd65 	bl	811c608 <sys_arch_protect>
 811ab3e:	61b8      	str	r0, [r7, #24]
 811ab40:	69b8      	ldr	r0, [r7, #24]
 811ab42:	f001 fd6f 	bl	811c624 <sys_arch_unprotect>
    return;
 811ab46:	e012      	b.n	811ab6e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 811ab48:	69fb      	ldr	r3, [r7, #28]
 811ab4a:	2200      	movs	r2, #0
 811ab4c:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 811ab4e:	4b12      	ldr	r3, [pc, #72]	@ (811ab98 <mem_free+0x11c>)
 811ab50:	681b      	ldr	r3, [r3, #0]
 811ab52:	69fa      	ldr	r2, [r7, #28]
 811ab54:	429a      	cmp	r2, r3
 811ab56:	d202      	bcs.n	811ab5e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 811ab58:	4a0f      	ldr	r2, [pc, #60]	@ (811ab98 <mem_free+0x11c>)
 811ab5a:	69fb      	ldr	r3, [r7, #28]
 811ab5c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 811ab5e:	69f8      	ldr	r0, [r7, #28]
 811ab60:	f7ff fe5e 	bl	811a820 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 811ab64:	4809      	ldr	r0, [pc, #36]	@ (811ab8c <mem_free+0x110>)
 811ab66:	f001 fd22 	bl	811c5ae <sys_mutex_unlock>
 811ab6a:	e000      	b.n	811ab6e <mem_free+0xf2>
    return;
 811ab6c:	bf00      	nop
}
 811ab6e:	3720      	adds	r7, #32
 811ab70:	46bd      	mov	sp, r7
 811ab72:	bd80      	pop	{r7, pc}
 811ab74:	08125e88 	.word	0x08125e88
 811ab78:	08125fbc 	.word	0x08125fbc
 811ab7c:	08125f14 	.word	0x08125f14
 811ab80:	1000b334 	.word	0x1000b334
 811ab84:	1000b338 	.word	0x1000b338
 811ab88:	08125fe0 	.word	0x08125fe0
 811ab8c:	1000b33c 	.word	0x1000b33c
 811ab90:	08125ffc 	.word	0x08125ffc
 811ab94:	08126024 	.word	0x08126024
 811ab98:	1000b340 	.word	0x1000b340

0811ab9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 811ab9c:	b580      	push	{r7, lr}
 811ab9e:	b08a      	sub	sp, #40	@ 0x28
 811aba0:	af00      	add	r7, sp, #0
 811aba2:	6078      	str	r0, [r7, #4]
 811aba4:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 811aba6:	683b      	ldr	r3, [r7, #0]
 811aba8:	3303      	adds	r3, #3
 811abaa:	f023 0303 	bic.w	r3, r3, #3
 811abae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 811abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811abb2:	2b0b      	cmp	r3, #11
 811abb4:	d801      	bhi.n	811abba <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 811abb6:	230c      	movs	r3, #12
 811abb8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 811abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811abbc:	4a6e      	ldr	r2, [pc, #440]	@ (811ad78 <mem_trim+0x1dc>)
 811abbe:	4293      	cmp	r3, r2
 811abc0:	d803      	bhi.n	811abca <mem_trim+0x2e>
 811abc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811abc4:	683b      	ldr	r3, [r7, #0]
 811abc6:	429a      	cmp	r2, r3
 811abc8:	d201      	bcs.n	811abce <mem_trim+0x32>
    return NULL;
 811abca:	2300      	movs	r3, #0
 811abcc:	e0d0      	b.n	811ad70 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 811abce:	4b6b      	ldr	r3, [pc, #428]	@ (811ad7c <mem_trim+0x1e0>)
 811abd0:	681b      	ldr	r3, [r3, #0]
 811abd2:	687a      	ldr	r2, [r7, #4]
 811abd4:	429a      	cmp	r2, r3
 811abd6:	d304      	bcc.n	811abe2 <mem_trim+0x46>
 811abd8:	4b69      	ldr	r3, [pc, #420]	@ (811ad80 <mem_trim+0x1e4>)
 811abda:	681b      	ldr	r3, [r3, #0]
 811abdc:	687a      	ldr	r2, [r7, #4]
 811abde:	429a      	cmp	r2, r3
 811abe0:	d306      	bcc.n	811abf0 <mem_trim+0x54>
 811abe2:	4b68      	ldr	r3, [pc, #416]	@ (811ad84 <mem_trim+0x1e8>)
 811abe4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 811abe8:	4967      	ldr	r1, [pc, #412]	@ (811ad88 <mem_trim+0x1ec>)
 811abea:	4868      	ldr	r0, [pc, #416]	@ (811ad8c <mem_trim+0x1f0>)
 811abec:	f009 fd36 	bl	812465c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 811abf0:	4b62      	ldr	r3, [pc, #392]	@ (811ad7c <mem_trim+0x1e0>)
 811abf2:	681b      	ldr	r3, [r3, #0]
 811abf4:	687a      	ldr	r2, [r7, #4]
 811abf6:	429a      	cmp	r2, r3
 811abf8:	d304      	bcc.n	811ac04 <mem_trim+0x68>
 811abfa:	4b61      	ldr	r3, [pc, #388]	@ (811ad80 <mem_trim+0x1e4>)
 811abfc:	681b      	ldr	r3, [r3, #0]
 811abfe:	687a      	ldr	r2, [r7, #4]
 811ac00:	429a      	cmp	r2, r3
 811ac02:	d307      	bcc.n	811ac14 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811ac04:	f001 fd00 	bl	811c608 <sys_arch_protect>
 811ac08:	60b8      	str	r0, [r7, #8]
 811ac0a:	68b8      	ldr	r0, [r7, #8]
 811ac0c:	f001 fd0a 	bl	811c624 <sys_arch_unprotect>
    return rmem;
 811ac10:	687b      	ldr	r3, [r7, #4]
 811ac12:	e0ad      	b.n	811ad70 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 811ac14:	687b      	ldr	r3, [r7, #4]
 811ac16:	3b0c      	subs	r3, #12
 811ac18:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 811ac1a:	6a38      	ldr	r0, [r7, #32]
 811ac1c:	f7ff fdf0 	bl	811a800 <mem_to_ptr>
 811ac20:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 811ac22:	6a3b      	ldr	r3, [r7, #32]
 811ac24:	681a      	ldr	r2, [r3, #0]
 811ac26:	69fb      	ldr	r3, [r7, #28]
 811ac28:	1ad3      	subs	r3, r2, r3
 811ac2a:	3b0c      	subs	r3, #12
 811ac2c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 811ac2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811ac30:	69bb      	ldr	r3, [r7, #24]
 811ac32:	429a      	cmp	r2, r3
 811ac34:	d906      	bls.n	811ac44 <mem_trim+0xa8>
 811ac36:	4b53      	ldr	r3, [pc, #332]	@ (811ad84 <mem_trim+0x1e8>)
 811ac38:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 811ac3c:	4954      	ldr	r1, [pc, #336]	@ (811ad90 <mem_trim+0x1f4>)
 811ac3e:	4853      	ldr	r0, [pc, #332]	@ (811ad8c <mem_trim+0x1f0>)
 811ac40:	f009 fd0c 	bl	812465c <iprintf>
  if (newsize > size) {
 811ac44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811ac46:	69bb      	ldr	r3, [r7, #24]
 811ac48:	429a      	cmp	r2, r3
 811ac4a:	d901      	bls.n	811ac50 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 811ac4c:	2300      	movs	r3, #0
 811ac4e:	e08f      	b.n	811ad70 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 811ac50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811ac52:	69bb      	ldr	r3, [r7, #24]
 811ac54:	429a      	cmp	r2, r3
 811ac56:	d101      	bne.n	811ac5c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 811ac58:	687b      	ldr	r3, [r7, #4]
 811ac5a:	e089      	b.n	811ad70 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 811ac5c:	484d      	ldr	r0, [pc, #308]	@ (811ad94 <mem_trim+0x1f8>)
 811ac5e:	f001 fc97 	bl	811c590 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 811ac62:	6a3b      	ldr	r3, [r7, #32]
 811ac64:	681b      	ldr	r3, [r3, #0]
 811ac66:	4618      	mov	r0, r3
 811ac68:	f7ff fdba 	bl	811a7e0 <ptr_to_mem>
 811ac6c:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 811ac6e:	697b      	ldr	r3, [r7, #20]
 811ac70:	7a1b      	ldrb	r3, [r3, #8]
 811ac72:	2b00      	cmp	r3, #0
 811ac74:	d13c      	bne.n	811acf0 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 811ac76:	6a3b      	ldr	r3, [r7, #32]
 811ac78:	681b      	ldr	r3, [r3, #0]
 811ac7a:	4a3f      	ldr	r2, [pc, #252]	@ (811ad78 <mem_trim+0x1dc>)
 811ac7c:	4293      	cmp	r3, r2
 811ac7e:	d106      	bne.n	811ac8e <mem_trim+0xf2>
 811ac80:	4b40      	ldr	r3, [pc, #256]	@ (811ad84 <mem_trim+0x1e8>)
 811ac82:	f240 22f5 	movw	r2, #757	@ 0x2f5
 811ac86:	4944      	ldr	r1, [pc, #272]	@ (811ad98 <mem_trim+0x1fc>)
 811ac88:	4840      	ldr	r0, [pc, #256]	@ (811ad8c <mem_trim+0x1f0>)
 811ac8a:	f009 fce7 	bl	812465c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 811ac8e:	697b      	ldr	r3, [r7, #20]
 811ac90:	681b      	ldr	r3, [r3, #0]
 811ac92:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811ac94:	69fa      	ldr	r2, [r7, #28]
 811ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ac98:	4413      	add	r3, r2
 811ac9a:	330c      	adds	r3, #12
 811ac9c:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 811ac9e:	4b3f      	ldr	r3, [pc, #252]	@ (811ad9c <mem_trim+0x200>)
 811aca0:	681b      	ldr	r3, [r3, #0]
 811aca2:	697a      	ldr	r2, [r7, #20]
 811aca4:	429a      	cmp	r2, r3
 811aca6:	d105      	bne.n	811acb4 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 811aca8:	6938      	ldr	r0, [r7, #16]
 811acaa:	f7ff fd99 	bl	811a7e0 <ptr_to_mem>
 811acae:	4603      	mov	r3, r0
 811acb0:	4a3a      	ldr	r2, [pc, #232]	@ (811ad9c <mem_trim+0x200>)
 811acb2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 811acb4:	6938      	ldr	r0, [r7, #16]
 811acb6:	f7ff fd93 	bl	811a7e0 <ptr_to_mem>
 811acba:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 811acbc:	697b      	ldr	r3, [r7, #20]
 811acbe:	2200      	movs	r2, #0
 811acc0:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 811acc2:	697b      	ldr	r3, [r7, #20]
 811acc4:	68fa      	ldr	r2, [r7, #12]
 811acc6:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 811acc8:	697b      	ldr	r3, [r7, #20]
 811acca:	69fa      	ldr	r2, [r7, #28]
 811accc:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 811acce:	6a3b      	ldr	r3, [r7, #32]
 811acd0:	693a      	ldr	r2, [r7, #16]
 811acd2:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 811acd4:	697b      	ldr	r3, [r7, #20]
 811acd6:	681b      	ldr	r3, [r3, #0]
 811acd8:	4a27      	ldr	r2, [pc, #156]	@ (811ad78 <mem_trim+0x1dc>)
 811acda:	4293      	cmp	r3, r2
 811acdc:	d044      	beq.n	811ad68 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 811acde:	697b      	ldr	r3, [r7, #20]
 811ace0:	681b      	ldr	r3, [r3, #0]
 811ace2:	4618      	mov	r0, r3
 811ace4:	f7ff fd7c 	bl	811a7e0 <ptr_to_mem>
 811ace8:	4602      	mov	r2, r0
 811acea:	693b      	ldr	r3, [r7, #16]
 811acec:	6053      	str	r3, [r2, #4]
 811acee:	e03b      	b.n	811ad68 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 811acf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811acf2:	3318      	adds	r3, #24
 811acf4:	69ba      	ldr	r2, [r7, #24]
 811acf6:	429a      	cmp	r2, r3
 811acf8:	d336      	bcc.n	811ad68 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811acfa:	69fa      	ldr	r2, [r7, #28]
 811acfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811acfe:	4413      	add	r3, r2
 811ad00:	330c      	adds	r3, #12
 811ad02:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 811ad04:	6a3b      	ldr	r3, [r7, #32]
 811ad06:	681b      	ldr	r3, [r3, #0]
 811ad08:	4a1b      	ldr	r2, [pc, #108]	@ (811ad78 <mem_trim+0x1dc>)
 811ad0a:	4293      	cmp	r3, r2
 811ad0c:	d106      	bne.n	811ad1c <mem_trim+0x180>
 811ad0e:	4b1d      	ldr	r3, [pc, #116]	@ (811ad84 <mem_trim+0x1e8>)
 811ad10:	f240 3216 	movw	r2, #790	@ 0x316
 811ad14:	4920      	ldr	r1, [pc, #128]	@ (811ad98 <mem_trim+0x1fc>)
 811ad16:	481d      	ldr	r0, [pc, #116]	@ (811ad8c <mem_trim+0x1f0>)
 811ad18:	f009 fca0 	bl	812465c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 811ad1c:	6938      	ldr	r0, [r7, #16]
 811ad1e:	f7ff fd5f 	bl	811a7e0 <ptr_to_mem>
 811ad22:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 811ad24:	4b1d      	ldr	r3, [pc, #116]	@ (811ad9c <mem_trim+0x200>)
 811ad26:	681b      	ldr	r3, [r3, #0]
 811ad28:	697a      	ldr	r2, [r7, #20]
 811ad2a:	429a      	cmp	r2, r3
 811ad2c:	d202      	bcs.n	811ad34 <mem_trim+0x198>
      lfree = mem2;
 811ad2e:	4a1b      	ldr	r2, [pc, #108]	@ (811ad9c <mem_trim+0x200>)
 811ad30:	697b      	ldr	r3, [r7, #20]
 811ad32:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 811ad34:	697b      	ldr	r3, [r7, #20]
 811ad36:	2200      	movs	r2, #0
 811ad38:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 811ad3a:	6a3b      	ldr	r3, [r7, #32]
 811ad3c:	681a      	ldr	r2, [r3, #0]
 811ad3e:	697b      	ldr	r3, [r7, #20]
 811ad40:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 811ad42:	697b      	ldr	r3, [r7, #20]
 811ad44:	69fa      	ldr	r2, [r7, #28]
 811ad46:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 811ad48:	6a3b      	ldr	r3, [r7, #32]
 811ad4a:	693a      	ldr	r2, [r7, #16]
 811ad4c:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 811ad4e:	697b      	ldr	r3, [r7, #20]
 811ad50:	681b      	ldr	r3, [r3, #0]
 811ad52:	4a09      	ldr	r2, [pc, #36]	@ (811ad78 <mem_trim+0x1dc>)
 811ad54:	4293      	cmp	r3, r2
 811ad56:	d007      	beq.n	811ad68 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 811ad58:	697b      	ldr	r3, [r7, #20]
 811ad5a:	681b      	ldr	r3, [r3, #0]
 811ad5c:	4618      	mov	r0, r3
 811ad5e:	f7ff fd3f 	bl	811a7e0 <ptr_to_mem>
 811ad62:	4602      	mov	r2, r0
 811ad64:	693b      	ldr	r3, [r7, #16]
 811ad66:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 811ad68:	480a      	ldr	r0, [pc, #40]	@ (811ad94 <mem_trim+0x1f8>)
 811ad6a:	f001 fc20 	bl	811c5ae <sys_mutex_unlock>
  return rmem;
 811ad6e:	687b      	ldr	r3, [r7, #4]
}
 811ad70:	4618      	mov	r0, r3
 811ad72:	3728      	adds	r7, #40	@ 0x28
 811ad74:	46bd      	mov	sp, r7
 811ad76:	bd80      	pop	{r7, pc}
 811ad78:	0001ffe8 	.word	0x0001ffe8
 811ad7c:	1000b334 	.word	0x1000b334
 811ad80:	1000b338 	.word	0x1000b338
 811ad84:	08125e88 	.word	0x08125e88
 811ad88:	08126058 	.word	0x08126058
 811ad8c:	08125f14 	.word	0x08125f14
 811ad90:	08126070 	.word	0x08126070
 811ad94:	1000b33c 	.word	0x1000b33c
 811ad98:	08126090 	.word	0x08126090
 811ad9c:	1000b340 	.word	0x1000b340

0811ada0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 811ada0:	b580      	push	{r7, lr}
 811ada2:	b088      	sub	sp, #32
 811ada4:	af00      	add	r7, sp, #0
 811ada6:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 811ada8:	687b      	ldr	r3, [r7, #4]
 811adaa:	2b00      	cmp	r3, #0
 811adac:	d101      	bne.n	811adb2 <mem_malloc+0x12>
    return NULL;
 811adae:	2300      	movs	r3, #0
 811adb0:	e0db      	b.n	811af6a <mem_malloc+0x1ca>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 811adb2:	687b      	ldr	r3, [r7, #4]
 811adb4:	3303      	adds	r3, #3
 811adb6:	f023 0303 	bic.w	r3, r3, #3
 811adba:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 811adbc:	69bb      	ldr	r3, [r7, #24]
 811adbe:	2b0b      	cmp	r3, #11
 811adc0:	d801      	bhi.n	811adc6 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 811adc2:	230c      	movs	r3, #12
 811adc4:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 811adc6:	69bb      	ldr	r3, [r7, #24]
 811adc8:	4a6a      	ldr	r2, [pc, #424]	@ (811af74 <mem_malloc+0x1d4>)
 811adca:	4293      	cmp	r3, r2
 811adcc:	d803      	bhi.n	811add6 <mem_malloc+0x36>
 811adce:	69ba      	ldr	r2, [r7, #24]
 811add0:	687b      	ldr	r3, [r7, #4]
 811add2:	429a      	cmp	r2, r3
 811add4:	d201      	bcs.n	811adda <mem_malloc+0x3a>
    return NULL;
 811add6:	2300      	movs	r3, #0
 811add8:	e0c7      	b.n	811af6a <mem_malloc+0x1ca>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 811adda:	4867      	ldr	r0, [pc, #412]	@ (811af78 <mem_malloc+0x1d8>)
 811addc:	f001 fbd8 	bl	811c590 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 811ade0:	4b66      	ldr	r3, [pc, #408]	@ (811af7c <mem_malloc+0x1dc>)
 811ade2:	681b      	ldr	r3, [r3, #0]
 811ade4:	4618      	mov	r0, r3
 811ade6:	f7ff fd0b 	bl	811a800 <mem_to_ptr>
 811adea:	61f8      	str	r0, [r7, #28]
 811adec:	e0b0      	b.n	811af50 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 811adee:	69f8      	ldr	r0, [r7, #28]
 811adf0:	f7ff fcf6 	bl	811a7e0 <ptr_to_mem>
 811adf4:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 811adf6:	693b      	ldr	r3, [r7, #16]
 811adf8:	7a1b      	ldrb	r3, [r3, #8]
 811adfa:	2b00      	cmp	r3, #0
 811adfc:	f040 80a2 	bne.w	811af44 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 811ae00:	693b      	ldr	r3, [r7, #16]
 811ae02:	681a      	ldr	r2, [r3, #0]
 811ae04:	69fb      	ldr	r3, [r7, #28]
 811ae06:	1ad3      	subs	r3, r2, r3
 811ae08:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 811ae0a:	69ba      	ldr	r2, [r7, #24]
 811ae0c:	429a      	cmp	r2, r3
 811ae0e:	f200 8099 	bhi.w	811af44 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 811ae12:	693b      	ldr	r3, [r7, #16]
 811ae14:	681a      	ldr	r2, [r3, #0]
 811ae16:	69fb      	ldr	r3, [r7, #28]
 811ae18:	1ad3      	subs	r3, r2, r3
 811ae1a:	f1a3 020c 	sub.w	r2, r3, #12
 811ae1e:	69bb      	ldr	r3, [r7, #24]
 811ae20:	3318      	adds	r3, #24
 811ae22:	429a      	cmp	r2, r3
 811ae24:	d331      	bcc.n	811ae8a <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 811ae26:	69fa      	ldr	r2, [r7, #28]
 811ae28:	69bb      	ldr	r3, [r7, #24]
 811ae2a:	4413      	add	r3, r2
 811ae2c:	330c      	adds	r3, #12
 811ae2e:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 811ae30:	68fb      	ldr	r3, [r7, #12]
 811ae32:	4a50      	ldr	r2, [pc, #320]	@ (811af74 <mem_malloc+0x1d4>)
 811ae34:	4293      	cmp	r3, r2
 811ae36:	d106      	bne.n	811ae46 <mem_malloc+0xa6>
 811ae38:	4b51      	ldr	r3, [pc, #324]	@ (811af80 <mem_malloc+0x1e0>)
 811ae3a:	f240 3287 	movw	r2, #903	@ 0x387
 811ae3e:	4951      	ldr	r1, [pc, #324]	@ (811af84 <mem_malloc+0x1e4>)
 811ae40:	4851      	ldr	r0, [pc, #324]	@ (811af88 <mem_malloc+0x1e8>)
 811ae42:	f009 fc0b 	bl	812465c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 811ae46:	68f8      	ldr	r0, [r7, #12]
 811ae48:	f7ff fcca 	bl	811a7e0 <ptr_to_mem>
 811ae4c:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 811ae4e:	68bb      	ldr	r3, [r7, #8]
 811ae50:	2200      	movs	r2, #0
 811ae52:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 811ae54:	693b      	ldr	r3, [r7, #16]
 811ae56:	681a      	ldr	r2, [r3, #0]
 811ae58:	68bb      	ldr	r3, [r7, #8]
 811ae5a:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 811ae5c:	68bb      	ldr	r3, [r7, #8]
 811ae5e:	69fa      	ldr	r2, [r7, #28]
 811ae60:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 811ae62:	693b      	ldr	r3, [r7, #16]
 811ae64:	68fa      	ldr	r2, [r7, #12]
 811ae66:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 811ae68:	693b      	ldr	r3, [r7, #16]
 811ae6a:	2201      	movs	r2, #1
 811ae6c:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 811ae6e:	68bb      	ldr	r3, [r7, #8]
 811ae70:	681b      	ldr	r3, [r3, #0]
 811ae72:	4a40      	ldr	r2, [pc, #256]	@ (811af74 <mem_malloc+0x1d4>)
 811ae74:	4293      	cmp	r3, r2
 811ae76:	d00b      	beq.n	811ae90 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 811ae78:	68bb      	ldr	r3, [r7, #8]
 811ae7a:	681b      	ldr	r3, [r3, #0]
 811ae7c:	4618      	mov	r0, r3
 811ae7e:	f7ff fcaf 	bl	811a7e0 <ptr_to_mem>
 811ae82:	4602      	mov	r2, r0
 811ae84:	68fb      	ldr	r3, [r7, #12]
 811ae86:	6053      	str	r3, [r2, #4]
 811ae88:	e002      	b.n	811ae90 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 811ae8a:	693b      	ldr	r3, [r7, #16]
 811ae8c:	2201      	movs	r2, #1
 811ae8e:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 811ae90:	4b3a      	ldr	r3, [pc, #232]	@ (811af7c <mem_malloc+0x1dc>)
 811ae92:	681b      	ldr	r3, [r3, #0]
 811ae94:	693a      	ldr	r2, [r7, #16]
 811ae96:	429a      	cmp	r2, r3
 811ae98:	d127      	bne.n	811aeea <mem_malloc+0x14a>
          struct mem *cur = lfree;
 811ae9a:	4b38      	ldr	r3, [pc, #224]	@ (811af7c <mem_malloc+0x1dc>)
 811ae9c:	681b      	ldr	r3, [r3, #0]
 811ae9e:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 811aea0:	e005      	b.n	811aeae <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 811aea2:	697b      	ldr	r3, [r7, #20]
 811aea4:	681b      	ldr	r3, [r3, #0]
 811aea6:	4618      	mov	r0, r3
 811aea8:	f7ff fc9a 	bl	811a7e0 <ptr_to_mem>
 811aeac:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 811aeae:	697b      	ldr	r3, [r7, #20]
 811aeb0:	7a1b      	ldrb	r3, [r3, #8]
 811aeb2:	2b00      	cmp	r3, #0
 811aeb4:	d004      	beq.n	811aec0 <mem_malloc+0x120>
 811aeb6:	4b35      	ldr	r3, [pc, #212]	@ (811af8c <mem_malloc+0x1ec>)
 811aeb8:	681b      	ldr	r3, [r3, #0]
 811aeba:	697a      	ldr	r2, [r7, #20]
 811aebc:	429a      	cmp	r2, r3
 811aebe:	d1f0      	bne.n	811aea2 <mem_malloc+0x102>
          }
          lfree = cur;
 811aec0:	4a2e      	ldr	r2, [pc, #184]	@ (811af7c <mem_malloc+0x1dc>)
 811aec2:	697b      	ldr	r3, [r7, #20]
 811aec4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 811aec6:	4b2d      	ldr	r3, [pc, #180]	@ (811af7c <mem_malloc+0x1dc>)
 811aec8:	681a      	ldr	r2, [r3, #0]
 811aeca:	4b30      	ldr	r3, [pc, #192]	@ (811af8c <mem_malloc+0x1ec>)
 811aecc:	681b      	ldr	r3, [r3, #0]
 811aece:	429a      	cmp	r2, r3
 811aed0:	d00b      	beq.n	811aeea <mem_malloc+0x14a>
 811aed2:	4b2a      	ldr	r3, [pc, #168]	@ (811af7c <mem_malloc+0x1dc>)
 811aed4:	681b      	ldr	r3, [r3, #0]
 811aed6:	7a1b      	ldrb	r3, [r3, #8]
 811aed8:	2b00      	cmp	r3, #0
 811aeda:	d006      	beq.n	811aeea <mem_malloc+0x14a>
 811aedc:	4b28      	ldr	r3, [pc, #160]	@ (811af80 <mem_malloc+0x1e0>)
 811aede:	f240 32b5 	movw	r2, #949	@ 0x3b5
 811aee2:	492b      	ldr	r1, [pc, #172]	@ (811af90 <mem_malloc+0x1f0>)
 811aee4:	4828      	ldr	r0, [pc, #160]	@ (811af88 <mem_malloc+0x1e8>)
 811aee6:	f009 fbb9 	bl	812465c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 811aeea:	4823      	ldr	r0, [pc, #140]	@ (811af78 <mem_malloc+0x1d8>)
 811aeec:	f001 fb5f 	bl	811c5ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 811aef0:	693a      	ldr	r2, [r7, #16]
 811aef2:	69bb      	ldr	r3, [r7, #24]
 811aef4:	4413      	add	r3, r2
 811aef6:	330c      	adds	r3, #12
 811aef8:	4a24      	ldr	r2, [pc, #144]	@ (811af8c <mem_malloc+0x1ec>)
 811aefa:	6812      	ldr	r2, [r2, #0]
 811aefc:	4293      	cmp	r3, r2
 811aefe:	d906      	bls.n	811af0e <mem_malloc+0x16e>
 811af00:	4b1f      	ldr	r3, [pc, #124]	@ (811af80 <mem_malloc+0x1e0>)
 811af02:	f240 32b9 	movw	r2, #953	@ 0x3b9
 811af06:	4923      	ldr	r1, [pc, #140]	@ (811af94 <mem_malloc+0x1f4>)
 811af08:	481f      	ldr	r0, [pc, #124]	@ (811af88 <mem_malloc+0x1e8>)
 811af0a:	f009 fba7 	bl	812465c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 811af0e:	693b      	ldr	r3, [r7, #16]
 811af10:	f003 0303 	and.w	r3, r3, #3
 811af14:	2b00      	cmp	r3, #0
 811af16:	d006      	beq.n	811af26 <mem_malloc+0x186>
 811af18:	4b19      	ldr	r3, [pc, #100]	@ (811af80 <mem_malloc+0x1e0>)
 811af1a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 811af1e:	491e      	ldr	r1, [pc, #120]	@ (811af98 <mem_malloc+0x1f8>)
 811af20:	4819      	ldr	r0, [pc, #100]	@ (811af88 <mem_malloc+0x1e8>)
 811af22:	f009 fb9b 	bl	812465c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 811af26:	693b      	ldr	r3, [r7, #16]
 811af28:	f003 0303 	and.w	r3, r3, #3
 811af2c:	2b00      	cmp	r3, #0
 811af2e:	d006      	beq.n	811af3e <mem_malloc+0x19e>
 811af30:	4b13      	ldr	r3, [pc, #76]	@ (811af80 <mem_malloc+0x1e0>)
 811af32:	f240 32bd 	movw	r2, #957	@ 0x3bd
 811af36:	4919      	ldr	r1, [pc, #100]	@ (811af9c <mem_malloc+0x1fc>)
 811af38:	4813      	ldr	r0, [pc, #76]	@ (811af88 <mem_malloc+0x1e8>)
 811af3a:	f009 fb8f 	bl	812465c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 811af3e:	693b      	ldr	r3, [r7, #16]
 811af40:	330c      	adds	r3, #12
 811af42:	e012      	b.n	811af6a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
 811af44:	69f8      	ldr	r0, [r7, #28]
 811af46:	f7ff fc4b 	bl	811a7e0 <ptr_to_mem>
 811af4a:	4603      	mov	r3, r0
 811af4c:	681b      	ldr	r3, [r3, #0]
 811af4e:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 811af50:	69bb      	ldr	r3, [r7, #24]
 811af52:	f5c3 33ff 	rsb	r3, r3, #130560	@ 0x1fe00
 811af56:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 811af5a:	69fa      	ldr	r2, [r7, #28]
 811af5c:	429a      	cmp	r2, r3
 811af5e:	f4ff af46 	bcc.w	811adee <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 811af62:	4805      	ldr	r0, [pc, #20]	@ (811af78 <mem_malloc+0x1d8>)
 811af64:	f001 fb23 	bl	811c5ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 811af68:	2300      	movs	r3, #0
}
 811af6a:	4618      	mov	r0, r3
 811af6c:	3720      	adds	r7, #32
 811af6e:	46bd      	mov	sp, r7
 811af70:	bd80      	pop	{r7, pc}
 811af72:	bf00      	nop
 811af74:	0001ffe8 	.word	0x0001ffe8
 811af78:	1000b33c 	.word	0x1000b33c
 811af7c:	1000b340 	.word	0x1000b340
 811af80:	08125e88 	.word	0x08125e88
 811af84:	08126090 	.word	0x08126090
 811af88:	08125f14 	.word	0x08125f14
 811af8c:	1000b338 	.word	0x1000b338
 811af90:	081260a4 	.word	0x081260a4
 811af94:	081260c0 	.word	0x081260c0
 811af98:	081260f0 	.word	0x081260f0
 811af9c:	08126120 	.word	0x08126120

0811afa0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 811afa0:	b480      	push	{r7}
 811afa2:	b085      	sub	sp, #20
 811afa4:	af00      	add	r7, sp, #0
 811afa6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 811afa8:	687b      	ldr	r3, [r7, #4]
 811afaa:	689b      	ldr	r3, [r3, #8]
 811afac:	2200      	movs	r2, #0
 811afae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 811afb0:	687b      	ldr	r3, [r7, #4]
 811afb2:	685b      	ldr	r3, [r3, #4]
 811afb4:	3303      	adds	r3, #3
 811afb6:	f023 0303 	bic.w	r3, r3, #3
 811afba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 811afbc:	2300      	movs	r3, #0
 811afbe:	60fb      	str	r3, [r7, #12]
 811afc0:	e011      	b.n	811afe6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 811afc2:	687b      	ldr	r3, [r7, #4]
 811afc4:	689b      	ldr	r3, [r3, #8]
 811afc6:	681a      	ldr	r2, [r3, #0]
 811afc8:	68bb      	ldr	r3, [r7, #8]
 811afca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 811afcc:	687b      	ldr	r3, [r7, #4]
 811afce:	689b      	ldr	r3, [r3, #8]
 811afd0:	68ba      	ldr	r2, [r7, #8]
 811afd2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 811afd4:	687b      	ldr	r3, [r7, #4]
 811afd6:	881b      	ldrh	r3, [r3, #0]
 811afd8:	461a      	mov	r2, r3
 811afda:	68bb      	ldr	r3, [r7, #8]
 811afdc:	4413      	add	r3, r2
 811afde:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 811afe0:	68fb      	ldr	r3, [r7, #12]
 811afe2:	3301      	adds	r3, #1
 811afe4:	60fb      	str	r3, [r7, #12]
 811afe6:	687b      	ldr	r3, [r7, #4]
 811afe8:	885b      	ldrh	r3, [r3, #2]
 811afea:	461a      	mov	r2, r3
 811afec:	68fb      	ldr	r3, [r7, #12]
 811afee:	4293      	cmp	r3, r2
 811aff0:	dbe7      	blt.n	811afc2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 811aff2:	bf00      	nop
 811aff4:	bf00      	nop
 811aff6:	3714      	adds	r7, #20
 811aff8:	46bd      	mov	sp, r7
 811affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 811affe:	4770      	bx	lr

0811b000 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 811b000:	b580      	push	{r7, lr}
 811b002:	b082      	sub	sp, #8
 811b004:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811b006:	2300      	movs	r3, #0
 811b008:	80fb      	strh	r3, [r7, #6]
 811b00a:	e009      	b.n	811b020 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 811b00c:	88fb      	ldrh	r3, [r7, #6]
 811b00e:	4a08      	ldr	r2, [pc, #32]	@ (811b030 <memp_init+0x30>)
 811b010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811b014:	4618      	mov	r0, r3
 811b016:	f7ff ffc3 	bl	811afa0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811b01a:	88fb      	ldrh	r3, [r7, #6]
 811b01c:	3301      	adds	r3, #1
 811b01e:	80fb      	strh	r3, [r7, #6]
 811b020:	88fb      	ldrh	r3, [r7, #6]
 811b022:	2b0c      	cmp	r3, #12
 811b024:	d9f2      	bls.n	811b00c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 811b026:	bf00      	nop
 811b028:	bf00      	nop
 811b02a:	3708      	adds	r7, #8
 811b02c:	46bd      	mov	sp, r7
 811b02e:	bd80      	pop	{r7, pc}
 811b030:	08128688 	.word	0x08128688

0811b034 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 811b034:	b580      	push	{r7, lr}
 811b036:	b084      	sub	sp, #16
 811b038:	af00      	add	r7, sp, #0
 811b03a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 811b03c:	f001 fae4 	bl	811c608 <sys_arch_protect>
 811b040:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 811b042:	687b      	ldr	r3, [r7, #4]
 811b044:	689b      	ldr	r3, [r3, #8]
 811b046:	681b      	ldr	r3, [r3, #0]
 811b048:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 811b04a:	68bb      	ldr	r3, [r7, #8]
 811b04c:	2b00      	cmp	r3, #0
 811b04e:	d015      	beq.n	811b07c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 811b050:	687b      	ldr	r3, [r7, #4]
 811b052:	689b      	ldr	r3, [r3, #8]
 811b054:	68ba      	ldr	r2, [r7, #8]
 811b056:	6812      	ldr	r2, [r2, #0]
 811b058:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 811b05a:	68bb      	ldr	r3, [r7, #8]
 811b05c:	f003 0303 	and.w	r3, r3, #3
 811b060:	2b00      	cmp	r3, #0
 811b062:	d006      	beq.n	811b072 <do_memp_malloc_pool+0x3e>
 811b064:	4b09      	ldr	r3, [pc, #36]	@ (811b08c <do_memp_malloc_pool+0x58>)
 811b066:	f44f 728c 	mov.w	r2, #280	@ 0x118
 811b06a:	4909      	ldr	r1, [pc, #36]	@ (811b090 <do_memp_malloc_pool+0x5c>)
 811b06c:	4809      	ldr	r0, [pc, #36]	@ (811b094 <do_memp_malloc_pool+0x60>)
 811b06e:	f009 faf5 	bl	812465c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 811b072:	68f8      	ldr	r0, [r7, #12]
 811b074:	f001 fad6 	bl	811c624 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 811b078:	68bb      	ldr	r3, [r7, #8]
 811b07a:	e003      	b.n	811b084 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 811b07c:	68f8      	ldr	r0, [r7, #12]
 811b07e:	f001 fad1 	bl	811c624 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 811b082:	2300      	movs	r3, #0
}
 811b084:	4618      	mov	r0, r3
 811b086:	3710      	adds	r7, #16
 811b088:	46bd      	mov	sp, r7
 811b08a:	bd80      	pop	{r7, pc}
 811b08c:	08126144 	.word	0x08126144
 811b090:	081261b8 	.word	0x081261b8
 811b094:	081261dc 	.word	0x081261dc

0811b098 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 811b098:	b580      	push	{r7, lr}
 811b09a:	b082      	sub	sp, #8
 811b09c:	af00      	add	r7, sp, #0
 811b09e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 811b0a0:	687b      	ldr	r3, [r7, #4]
 811b0a2:	2b00      	cmp	r3, #0
 811b0a4:	d106      	bne.n	811b0b4 <memp_malloc_pool+0x1c>
 811b0a6:	4b0a      	ldr	r3, [pc, #40]	@ (811b0d0 <memp_malloc_pool+0x38>)
 811b0a8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 811b0ac:	4909      	ldr	r1, [pc, #36]	@ (811b0d4 <memp_malloc_pool+0x3c>)
 811b0ae:	480a      	ldr	r0, [pc, #40]	@ (811b0d8 <memp_malloc_pool+0x40>)
 811b0b0:	f009 fad4 	bl	812465c <iprintf>
  if (desc == NULL) {
 811b0b4:	687b      	ldr	r3, [r7, #4]
 811b0b6:	2b00      	cmp	r3, #0
 811b0b8:	d101      	bne.n	811b0be <memp_malloc_pool+0x26>
    return NULL;
 811b0ba:	2300      	movs	r3, #0
 811b0bc:	e003      	b.n	811b0c6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 811b0be:	6878      	ldr	r0, [r7, #4]
 811b0c0:	f7ff ffb8 	bl	811b034 <do_memp_malloc_pool>
 811b0c4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 811b0c6:	4618      	mov	r0, r3
 811b0c8:	3708      	adds	r7, #8
 811b0ca:	46bd      	mov	sp, r7
 811b0cc:	bd80      	pop	{r7, pc}
 811b0ce:	bf00      	nop
 811b0d0:	08126144 	.word	0x08126144
 811b0d4:	08126204 	.word	0x08126204
 811b0d8:	081261dc 	.word	0x081261dc

0811b0dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 811b0dc:	b580      	push	{r7, lr}
 811b0de:	b084      	sub	sp, #16
 811b0e0:	af00      	add	r7, sp, #0
 811b0e2:	4603      	mov	r3, r0
 811b0e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 811b0e6:	79fb      	ldrb	r3, [r7, #7]
 811b0e8:	2b0c      	cmp	r3, #12
 811b0ea:	d908      	bls.n	811b0fe <memp_malloc+0x22>
 811b0ec:	4b0a      	ldr	r3, [pc, #40]	@ (811b118 <memp_malloc+0x3c>)
 811b0ee:	f240 1257 	movw	r2, #343	@ 0x157
 811b0f2:	490a      	ldr	r1, [pc, #40]	@ (811b11c <memp_malloc+0x40>)
 811b0f4:	480a      	ldr	r0, [pc, #40]	@ (811b120 <memp_malloc+0x44>)
 811b0f6:	f009 fab1 	bl	812465c <iprintf>
 811b0fa:	2300      	movs	r3, #0
 811b0fc:	e008      	b.n	811b110 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 811b0fe:	79fb      	ldrb	r3, [r7, #7]
 811b100:	4a08      	ldr	r2, [pc, #32]	@ (811b124 <memp_malloc+0x48>)
 811b102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811b106:	4618      	mov	r0, r3
 811b108:	f7ff ff94 	bl	811b034 <do_memp_malloc_pool>
 811b10c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 811b10e:	68fb      	ldr	r3, [r7, #12]
}
 811b110:	4618      	mov	r0, r3
 811b112:	3710      	adds	r7, #16
 811b114:	46bd      	mov	sp, r7
 811b116:	bd80      	pop	{r7, pc}
 811b118:	08126144 	.word	0x08126144
 811b11c:	08126218 	.word	0x08126218
 811b120:	081261dc 	.word	0x081261dc
 811b124:	08128688 	.word	0x08128688

0811b128 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 811b128:	b580      	push	{r7, lr}
 811b12a:	b084      	sub	sp, #16
 811b12c:	af00      	add	r7, sp, #0
 811b12e:	6078      	str	r0, [r7, #4]
 811b130:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 811b132:	683b      	ldr	r3, [r7, #0]
 811b134:	f003 0303 	and.w	r3, r3, #3
 811b138:	2b00      	cmp	r3, #0
 811b13a:	d006      	beq.n	811b14a <do_memp_free_pool+0x22>
 811b13c:	4b0d      	ldr	r3, [pc, #52]	@ (811b174 <do_memp_free_pool+0x4c>)
 811b13e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 811b142:	490d      	ldr	r1, [pc, #52]	@ (811b178 <do_memp_free_pool+0x50>)
 811b144:	480d      	ldr	r0, [pc, #52]	@ (811b17c <do_memp_free_pool+0x54>)
 811b146:	f009 fa89 	bl	812465c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 811b14a:	683b      	ldr	r3, [r7, #0]
 811b14c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 811b14e:	f001 fa5b 	bl	811c608 <sys_arch_protect>
 811b152:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 811b154:	687b      	ldr	r3, [r7, #4]
 811b156:	689b      	ldr	r3, [r3, #8]
 811b158:	681a      	ldr	r2, [r3, #0]
 811b15a:	68fb      	ldr	r3, [r7, #12]
 811b15c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 811b15e:	687b      	ldr	r3, [r7, #4]
 811b160:	689b      	ldr	r3, [r3, #8]
 811b162:	68fa      	ldr	r2, [r7, #12]
 811b164:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 811b166:	68b8      	ldr	r0, [r7, #8]
 811b168:	f001 fa5c 	bl	811c624 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 811b16c:	bf00      	nop
 811b16e:	3710      	adds	r7, #16
 811b170:	46bd      	mov	sp, r7
 811b172:	bd80      	pop	{r7, pc}
 811b174:	08126144 	.word	0x08126144
 811b178:	08126238 	.word	0x08126238
 811b17c:	081261dc 	.word	0x081261dc

0811b180 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 811b180:	b580      	push	{r7, lr}
 811b182:	b082      	sub	sp, #8
 811b184:	af00      	add	r7, sp, #0
 811b186:	6078      	str	r0, [r7, #4]
 811b188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 811b18a:	687b      	ldr	r3, [r7, #4]
 811b18c:	2b00      	cmp	r3, #0
 811b18e:	d106      	bne.n	811b19e <memp_free_pool+0x1e>
 811b190:	4b0a      	ldr	r3, [pc, #40]	@ (811b1bc <memp_free_pool+0x3c>)
 811b192:	f240 1295 	movw	r2, #405	@ 0x195
 811b196:	490a      	ldr	r1, [pc, #40]	@ (811b1c0 <memp_free_pool+0x40>)
 811b198:	480a      	ldr	r0, [pc, #40]	@ (811b1c4 <memp_free_pool+0x44>)
 811b19a:	f009 fa5f 	bl	812465c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 811b19e:	687b      	ldr	r3, [r7, #4]
 811b1a0:	2b00      	cmp	r3, #0
 811b1a2:	d007      	beq.n	811b1b4 <memp_free_pool+0x34>
 811b1a4:	683b      	ldr	r3, [r7, #0]
 811b1a6:	2b00      	cmp	r3, #0
 811b1a8:	d004      	beq.n	811b1b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 811b1aa:	6839      	ldr	r1, [r7, #0]
 811b1ac:	6878      	ldr	r0, [r7, #4]
 811b1ae:	f7ff ffbb 	bl	811b128 <do_memp_free_pool>
 811b1b2:	e000      	b.n	811b1b6 <memp_free_pool+0x36>
    return;
 811b1b4:	bf00      	nop
}
 811b1b6:	3708      	adds	r7, #8
 811b1b8:	46bd      	mov	sp, r7
 811b1ba:	bd80      	pop	{r7, pc}
 811b1bc:	08126144 	.word	0x08126144
 811b1c0:	08126204 	.word	0x08126204
 811b1c4:	081261dc 	.word	0x081261dc

0811b1c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 811b1c8:	b580      	push	{r7, lr}
 811b1ca:	b082      	sub	sp, #8
 811b1cc:	af00      	add	r7, sp, #0
 811b1ce:	4603      	mov	r3, r0
 811b1d0:	6039      	str	r1, [r7, #0]
 811b1d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 811b1d4:	79fb      	ldrb	r3, [r7, #7]
 811b1d6:	2b0c      	cmp	r3, #12
 811b1d8:	d907      	bls.n	811b1ea <memp_free+0x22>
 811b1da:	4b0c      	ldr	r3, [pc, #48]	@ (811b20c <memp_free+0x44>)
 811b1dc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 811b1e0:	490b      	ldr	r1, [pc, #44]	@ (811b210 <memp_free+0x48>)
 811b1e2:	480c      	ldr	r0, [pc, #48]	@ (811b214 <memp_free+0x4c>)
 811b1e4:	f009 fa3a 	bl	812465c <iprintf>
 811b1e8:	e00c      	b.n	811b204 <memp_free+0x3c>

  if (mem == NULL) {
 811b1ea:	683b      	ldr	r3, [r7, #0]
 811b1ec:	2b00      	cmp	r3, #0
 811b1ee:	d008      	beq.n	811b202 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 811b1f0:	79fb      	ldrb	r3, [r7, #7]
 811b1f2:	4a09      	ldr	r2, [pc, #36]	@ (811b218 <memp_free+0x50>)
 811b1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811b1f8:	6839      	ldr	r1, [r7, #0]
 811b1fa:	4618      	mov	r0, r3
 811b1fc:	f7ff ff94 	bl	811b128 <do_memp_free_pool>
 811b200:	e000      	b.n	811b204 <memp_free+0x3c>
    return;
 811b202:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 811b204:	3708      	adds	r7, #8
 811b206:	46bd      	mov	sp, r7
 811b208:	bd80      	pop	{r7, pc}
 811b20a:	bf00      	nop
 811b20c:	08126144 	.word	0x08126144
 811b210:	08126258 	.word	0x08126258
 811b214:	081261dc 	.word	0x081261dc
 811b218:	08128688 	.word	0x08128688

0811b21c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 811b21c:	b480      	push	{r7}
 811b21e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 811b220:	bf00      	nop
 811b222:	46bd      	mov	sp, r7
 811b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b228:	4770      	bx	lr
	...

0811b22c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 811b22c:	b580      	push	{r7, lr}
 811b22e:	b086      	sub	sp, #24
 811b230:	af00      	add	r7, sp, #0
 811b232:	60f8      	str	r0, [r7, #12]
 811b234:	60b9      	str	r1, [r7, #8]
 811b236:	607a      	str	r2, [r7, #4]
 811b238:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 811b23a:	68fb      	ldr	r3, [r7, #12]
 811b23c:	2b00      	cmp	r3, #0
 811b23e:	d108      	bne.n	811b252 <netif_add+0x26>
 811b240:	4b57      	ldr	r3, [pc, #348]	@ (811b3a0 <netif_add+0x174>)
 811b242:	f240 1227 	movw	r2, #295	@ 0x127
 811b246:	4957      	ldr	r1, [pc, #348]	@ (811b3a4 <netif_add+0x178>)
 811b248:	4857      	ldr	r0, [pc, #348]	@ (811b3a8 <netif_add+0x17c>)
 811b24a:	f009 fa07 	bl	812465c <iprintf>
 811b24e:	2300      	movs	r3, #0
 811b250:	e0a2      	b.n	811b398 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 811b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b254:	2b00      	cmp	r3, #0
 811b256:	d108      	bne.n	811b26a <netif_add+0x3e>
 811b258:	4b51      	ldr	r3, [pc, #324]	@ (811b3a0 <netif_add+0x174>)
 811b25a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 811b25e:	4953      	ldr	r1, [pc, #332]	@ (811b3ac <netif_add+0x180>)
 811b260:	4851      	ldr	r0, [pc, #324]	@ (811b3a8 <netif_add+0x17c>)
 811b262:	f009 f9fb 	bl	812465c <iprintf>
 811b266:	2300      	movs	r3, #0
 811b268:	e096      	b.n	811b398 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 811b26a:	68bb      	ldr	r3, [r7, #8]
 811b26c:	2b00      	cmp	r3, #0
 811b26e:	d101      	bne.n	811b274 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 811b270:	4b4f      	ldr	r3, [pc, #316]	@ (811b3b0 <netif_add+0x184>)
 811b272:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 811b274:	687b      	ldr	r3, [r7, #4]
 811b276:	2b00      	cmp	r3, #0
 811b278:	d101      	bne.n	811b27e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 811b27a:	4b4d      	ldr	r3, [pc, #308]	@ (811b3b0 <netif_add+0x184>)
 811b27c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 811b27e:	683b      	ldr	r3, [r7, #0]
 811b280:	2b00      	cmp	r3, #0
 811b282:	d101      	bne.n	811b288 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 811b284:	4b4a      	ldr	r3, [pc, #296]	@ (811b3b0 <netif_add+0x184>)
 811b286:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 811b288:	68fb      	ldr	r3, [r7, #12]
 811b28a:	2200      	movs	r2, #0
 811b28c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 811b28e:	68fb      	ldr	r3, [r7, #12]
 811b290:	2200      	movs	r2, #0
 811b292:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 811b294:	68fb      	ldr	r3, [r7, #12]
 811b296:	2200      	movs	r2, #0
 811b298:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 811b29a:	68fb      	ldr	r3, [r7, #12]
 811b29c:	4a45      	ldr	r2, [pc, #276]	@ (811b3b4 <netif_add+0x188>)
 811b29e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 811b2a0:	68fb      	ldr	r3, [r7, #12]
 811b2a2:	2200      	movs	r2, #0
 811b2a4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 811b2a6:	68fb      	ldr	r3, [r7, #12]
 811b2a8:	2200      	movs	r2, #0
 811b2aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 811b2ae:	68fb      	ldr	r3, [r7, #12]
 811b2b0:	2200      	movs	r2, #0
 811b2b2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 811b2b4:	68fb      	ldr	r3, [r7, #12]
 811b2b6:	6a3a      	ldr	r2, [r7, #32]
 811b2b8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 811b2ba:	4b3f      	ldr	r3, [pc, #252]	@ (811b3b8 <netif_add+0x18c>)
 811b2bc:	781a      	ldrb	r2, [r3, #0]
 811b2be:	68fb      	ldr	r3, [r7, #12]
 811b2c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 811b2c4:	68fb      	ldr	r3, [r7, #12]
 811b2c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811b2c8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 811b2ca:	683b      	ldr	r3, [r7, #0]
 811b2cc:	687a      	ldr	r2, [r7, #4]
 811b2ce:	68b9      	ldr	r1, [r7, #8]
 811b2d0:	68f8      	ldr	r0, [r7, #12]
 811b2d2:	f000 f913 	bl	811b4fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 811b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b2d8:	68f8      	ldr	r0, [r7, #12]
 811b2da:	4798      	blx	r3
 811b2dc:	4603      	mov	r3, r0
 811b2de:	2b00      	cmp	r3, #0
 811b2e0:	d001      	beq.n	811b2e6 <netif_add+0xba>
    return NULL;
 811b2e2:	2300      	movs	r3, #0
 811b2e4:	e058      	b.n	811b398 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 811b2e6:	68fb      	ldr	r3, [r7, #12]
 811b2e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811b2ec:	2bff      	cmp	r3, #255	@ 0xff
 811b2ee:	d103      	bne.n	811b2f8 <netif_add+0xcc>
        netif->num = 0;
 811b2f0:	68fb      	ldr	r3, [r7, #12]
 811b2f2:	2200      	movs	r2, #0
 811b2f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 811b2f8:	2300      	movs	r3, #0
 811b2fa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811b2fc:	4b2f      	ldr	r3, [pc, #188]	@ (811b3bc <netif_add+0x190>)
 811b2fe:	681b      	ldr	r3, [r3, #0]
 811b300:	617b      	str	r3, [r7, #20]
 811b302:	e02b      	b.n	811b35c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 811b304:	697a      	ldr	r2, [r7, #20]
 811b306:	68fb      	ldr	r3, [r7, #12]
 811b308:	429a      	cmp	r2, r3
 811b30a:	d106      	bne.n	811b31a <netif_add+0xee>
 811b30c:	4b24      	ldr	r3, [pc, #144]	@ (811b3a0 <netif_add+0x174>)
 811b30e:	f240 128b 	movw	r2, #395	@ 0x18b
 811b312:	492b      	ldr	r1, [pc, #172]	@ (811b3c0 <netif_add+0x194>)
 811b314:	4824      	ldr	r0, [pc, #144]	@ (811b3a8 <netif_add+0x17c>)
 811b316:	f009 f9a1 	bl	812465c <iprintf>
        num_netifs++;
 811b31a:	693b      	ldr	r3, [r7, #16]
 811b31c:	3301      	adds	r3, #1
 811b31e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 811b320:	693b      	ldr	r3, [r7, #16]
 811b322:	2bff      	cmp	r3, #255	@ 0xff
 811b324:	dd06      	ble.n	811b334 <netif_add+0x108>
 811b326:	4b1e      	ldr	r3, [pc, #120]	@ (811b3a0 <netif_add+0x174>)
 811b328:	f240 128d 	movw	r2, #397	@ 0x18d
 811b32c:	4925      	ldr	r1, [pc, #148]	@ (811b3c4 <netif_add+0x198>)
 811b32e:	481e      	ldr	r0, [pc, #120]	@ (811b3a8 <netif_add+0x17c>)
 811b330:	f009 f994 	bl	812465c <iprintf>
        if (netif2->num == netif->num) {
 811b334:	697b      	ldr	r3, [r7, #20]
 811b336:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 811b33a:	68fb      	ldr	r3, [r7, #12]
 811b33c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811b340:	429a      	cmp	r2, r3
 811b342:	d108      	bne.n	811b356 <netif_add+0x12a>
          netif->num++;
 811b344:	68fb      	ldr	r3, [r7, #12]
 811b346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811b34a:	3301      	adds	r3, #1
 811b34c:	b2da      	uxtb	r2, r3
 811b34e:	68fb      	ldr	r3, [r7, #12]
 811b350:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 811b354:	e005      	b.n	811b362 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811b356:	697b      	ldr	r3, [r7, #20]
 811b358:	681b      	ldr	r3, [r3, #0]
 811b35a:	617b      	str	r3, [r7, #20]
 811b35c:	697b      	ldr	r3, [r7, #20]
 811b35e:	2b00      	cmp	r3, #0
 811b360:	d1d0      	bne.n	811b304 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 811b362:	697b      	ldr	r3, [r7, #20]
 811b364:	2b00      	cmp	r3, #0
 811b366:	d1be      	bne.n	811b2e6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 811b368:	68fb      	ldr	r3, [r7, #12]
 811b36a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811b36e:	2bfe      	cmp	r3, #254	@ 0xfe
 811b370:	d103      	bne.n	811b37a <netif_add+0x14e>
    netif_num = 0;
 811b372:	4b11      	ldr	r3, [pc, #68]	@ (811b3b8 <netif_add+0x18c>)
 811b374:	2200      	movs	r2, #0
 811b376:	701a      	strb	r2, [r3, #0]
 811b378:	e006      	b.n	811b388 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 811b37a:	68fb      	ldr	r3, [r7, #12]
 811b37c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811b380:	3301      	adds	r3, #1
 811b382:	b2da      	uxtb	r2, r3
 811b384:	4b0c      	ldr	r3, [pc, #48]	@ (811b3b8 <netif_add+0x18c>)
 811b386:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 811b388:	4b0c      	ldr	r3, [pc, #48]	@ (811b3bc <netif_add+0x190>)
 811b38a:	681a      	ldr	r2, [r3, #0]
 811b38c:	68fb      	ldr	r3, [r7, #12]
 811b38e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 811b390:	4a0a      	ldr	r2, [pc, #40]	@ (811b3bc <netif_add+0x190>)
 811b392:	68fb      	ldr	r3, [r7, #12]
 811b394:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 811b396:	68fb      	ldr	r3, [r7, #12]
}
 811b398:	4618      	mov	r0, r3
 811b39a:	3718      	adds	r7, #24
 811b39c:	46bd      	mov	sp, r7
 811b39e:	bd80      	pop	{r7, pc}
 811b3a0:	08126274 	.word	0x08126274
 811b3a4:	08126348 	.word	0x08126348
 811b3a8:	08126304 	.word	0x08126304
 811b3ac:	08126364 	.word	0x08126364
 811b3b0:	081285e8 	.word	0x081285e8
 811b3b4:	0811b7d7 	.word	0x0811b7d7
 811b3b8:	1000e490 	.word	0x1000e490
 811b3bc:	1000e488 	.word	0x1000e488
 811b3c0:	08126388 	.word	0x08126388
 811b3c4:	0812639c 	.word	0x0812639c

0811b3c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811b3c8:	b580      	push	{r7, lr}
 811b3ca:	b082      	sub	sp, #8
 811b3cc:	af00      	add	r7, sp, #0
 811b3ce:	6078      	str	r0, [r7, #4]
 811b3d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 811b3d2:	6839      	ldr	r1, [r7, #0]
 811b3d4:	6878      	ldr	r0, [r7, #4]
 811b3d6:	f002 fee5 	bl	811e1a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 811b3da:	6839      	ldr	r1, [r7, #0]
 811b3dc:	6878      	ldr	r0, [r7, #4]
 811b3de:	f008 f899 	bl	8123514 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 811b3e2:	bf00      	nop
 811b3e4:	3708      	adds	r7, #8
 811b3e6:	46bd      	mov	sp, r7
 811b3e8:	bd80      	pop	{r7, pc}
	...

0811b3ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 811b3ec:	b580      	push	{r7, lr}
 811b3ee:	b086      	sub	sp, #24
 811b3f0:	af00      	add	r7, sp, #0
 811b3f2:	60f8      	str	r0, [r7, #12]
 811b3f4:	60b9      	str	r1, [r7, #8]
 811b3f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 811b3f8:	68bb      	ldr	r3, [r7, #8]
 811b3fa:	2b00      	cmp	r3, #0
 811b3fc:	d106      	bne.n	811b40c <netif_do_set_ipaddr+0x20>
 811b3fe:	4b1d      	ldr	r3, [pc, #116]	@ (811b474 <netif_do_set_ipaddr+0x88>)
 811b400:	f240 12cb 	movw	r2, #459	@ 0x1cb
 811b404:	491c      	ldr	r1, [pc, #112]	@ (811b478 <netif_do_set_ipaddr+0x8c>)
 811b406:	481d      	ldr	r0, [pc, #116]	@ (811b47c <netif_do_set_ipaddr+0x90>)
 811b408:	f009 f928 	bl	812465c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 811b40c:	687b      	ldr	r3, [r7, #4]
 811b40e:	2b00      	cmp	r3, #0
 811b410:	d106      	bne.n	811b420 <netif_do_set_ipaddr+0x34>
 811b412:	4b18      	ldr	r3, [pc, #96]	@ (811b474 <netif_do_set_ipaddr+0x88>)
 811b414:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 811b418:	4917      	ldr	r1, [pc, #92]	@ (811b478 <netif_do_set_ipaddr+0x8c>)
 811b41a:	4818      	ldr	r0, [pc, #96]	@ (811b47c <netif_do_set_ipaddr+0x90>)
 811b41c:	f009 f91e 	bl	812465c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 811b420:	68bb      	ldr	r3, [r7, #8]
 811b422:	681a      	ldr	r2, [r3, #0]
 811b424:	68fb      	ldr	r3, [r7, #12]
 811b426:	3304      	adds	r3, #4
 811b428:	681b      	ldr	r3, [r3, #0]
 811b42a:	429a      	cmp	r2, r3
 811b42c:	d01c      	beq.n	811b468 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 811b42e:	68bb      	ldr	r3, [r7, #8]
 811b430:	681b      	ldr	r3, [r3, #0]
 811b432:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 811b434:	68fb      	ldr	r3, [r7, #12]
 811b436:	3304      	adds	r3, #4
 811b438:	681a      	ldr	r2, [r3, #0]
 811b43a:	687b      	ldr	r3, [r7, #4]
 811b43c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 811b43e:	f107 0314 	add.w	r3, r7, #20
 811b442:	4619      	mov	r1, r3
 811b444:	6878      	ldr	r0, [r7, #4]
 811b446:	f7ff ffbf 	bl	811b3c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 811b44a:	68bb      	ldr	r3, [r7, #8]
 811b44c:	2b00      	cmp	r3, #0
 811b44e:	d002      	beq.n	811b456 <netif_do_set_ipaddr+0x6a>
 811b450:	68bb      	ldr	r3, [r7, #8]
 811b452:	681b      	ldr	r3, [r3, #0]
 811b454:	e000      	b.n	811b458 <netif_do_set_ipaddr+0x6c>
 811b456:	2300      	movs	r3, #0
 811b458:	68fa      	ldr	r2, [r7, #12]
 811b45a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 811b45c:	2101      	movs	r1, #1
 811b45e:	68f8      	ldr	r0, [r7, #12]
 811b460:	f000 f8d2 	bl	811b608 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 811b464:	2301      	movs	r3, #1
 811b466:	e000      	b.n	811b46a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 811b468:	2300      	movs	r3, #0
}
 811b46a:	4618      	mov	r0, r3
 811b46c:	3718      	adds	r7, #24
 811b46e:	46bd      	mov	sp, r7
 811b470:	bd80      	pop	{r7, pc}
 811b472:	bf00      	nop
 811b474:	08126274 	.word	0x08126274
 811b478:	081263cc 	.word	0x081263cc
 811b47c:	08126304 	.word	0x08126304

0811b480 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 811b480:	b480      	push	{r7}
 811b482:	b085      	sub	sp, #20
 811b484:	af00      	add	r7, sp, #0
 811b486:	60f8      	str	r0, [r7, #12]
 811b488:	60b9      	str	r1, [r7, #8]
 811b48a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 811b48c:	68bb      	ldr	r3, [r7, #8]
 811b48e:	681a      	ldr	r2, [r3, #0]
 811b490:	68fb      	ldr	r3, [r7, #12]
 811b492:	3308      	adds	r3, #8
 811b494:	681b      	ldr	r3, [r3, #0]
 811b496:	429a      	cmp	r2, r3
 811b498:	d00a      	beq.n	811b4b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 811b49a:	68bb      	ldr	r3, [r7, #8]
 811b49c:	2b00      	cmp	r3, #0
 811b49e:	d002      	beq.n	811b4a6 <netif_do_set_netmask+0x26>
 811b4a0:	68bb      	ldr	r3, [r7, #8]
 811b4a2:	681b      	ldr	r3, [r3, #0]
 811b4a4:	e000      	b.n	811b4a8 <netif_do_set_netmask+0x28>
 811b4a6:	2300      	movs	r3, #0
 811b4a8:	68fa      	ldr	r2, [r7, #12]
 811b4aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 811b4ac:	2301      	movs	r3, #1
 811b4ae:	e000      	b.n	811b4b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 811b4b0:	2300      	movs	r3, #0
}
 811b4b2:	4618      	mov	r0, r3
 811b4b4:	3714      	adds	r7, #20
 811b4b6:	46bd      	mov	sp, r7
 811b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b4bc:	4770      	bx	lr

0811b4be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 811b4be:	b480      	push	{r7}
 811b4c0:	b085      	sub	sp, #20
 811b4c2:	af00      	add	r7, sp, #0
 811b4c4:	60f8      	str	r0, [r7, #12]
 811b4c6:	60b9      	str	r1, [r7, #8]
 811b4c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 811b4ca:	68bb      	ldr	r3, [r7, #8]
 811b4cc:	681a      	ldr	r2, [r3, #0]
 811b4ce:	68fb      	ldr	r3, [r7, #12]
 811b4d0:	330c      	adds	r3, #12
 811b4d2:	681b      	ldr	r3, [r3, #0]
 811b4d4:	429a      	cmp	r2, r3
 811b4d6:	d00a      	beq.n	811b4ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 811b4d8:	68bb      	ldr	r3, [r7, #8]
 811b4da:	2b00      	cmp	r3, #0
 811b4dc:	d002      	beq.n	811b4e4 <netif_do_set_gw+0x26>
 811b4de:	68bb      	ldr	r3, [r7, #8]
 811b4e0:	681b      	ldr	r3, [r3, #0]
 811b4e2:	e000      	b.n	811b4e6 <netif_do_set_gw+0x28>
 811b4e4:	2300      	movs	r3, #0
 811b4e6:	68fa      	ldr	r2, [r7, #12]
 811b4e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 811b4ea:	2301      	movs	r3, #1
 811b4ec:	e000      	b.n	811b4f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 811b4ee:	2300      	movs	r3, #0
}
 811b4f0:	4618      	mov	r0, r3
 811b4f2:	3714      	adds	r7, #20
 811b4f4:	46bd      	mov	sp, r7
 811b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b4fa:	4770      	bx	lr

0811b4fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 811b4fc:	b580      	push	{r7, lr}
 811b4fe:	b088      	sub	sp, #32
 811b500:	af00      	add	r7, sp, #0
 811b502:	60f8      	str	r0, [r7, #12]
 811b504:	60b9      	str	r1, [r7, #8]
 811b506:	607a      	str	r2, [r7, #4]
 811b508:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 811b50a:	2300      	movs	r3, #0
 811b50c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 811b50e:	2300      	movs	r3, #0
 811b510:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811b512:	68bb      	ldr	r3, [r7, #8]
 811b514:	2b00      	cmp	r3, #0
 811b516:	d101      	bne.n	811b51c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 811b518:	4b1c      	ldr	r3, [pc, #112]	@ (811b58c <netif_set_addr+0x90>)
 811b51a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 811b51c:	687b      	ldr	r3, [r7, #4]
 811b51e:	2b00      	cmp	r3, #0
 811b520:	d101      	bne.n	811b526 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 811b522:	4b1a      	ldr	r3, [pc, #104]	@ (811b58c <netif_set_addr+0x90>)
 811b524:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 811b526:	683b      	ldr	r3, [r7, #0]
 811b528:	2b00      	cmp	r3, #0
 811b52a:	d101      	bne.n	811b530 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 811b52c:	4b17      	ldr	r3, [pc, #92]	@ (811b58c <netif_set_addr+0x90>)
 811b52e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 811b530:	68bb      	ldr	r3, [r7, #8]
 811b532:	2b00      	cmp	r3, #0
 811b534:	d003      	beq.n	811b53e <netif_set_addr+0x42>
 811b536:	68bb      	ldr	r3, [r7, #8]
 811b538:	681b      	ldr	r3, [r3, #0]
 811b53a:	2b00      	cmp	r3, #0
 811b53c:	d101      	bne.n	811b542 <netif_set_addr+0x46>
 811b53e:	2301      	movs	r3, #1
 811b540:	e000      	b.n	811b544 <netif_set_addr+0x48>
 811b542:	2300      	movs	r3, #0
 811b544:	617b      	str	r3, [r7, #20]
  if (remove) {
 811b546:	697b      	ldr	r3, [r7, #20]
 811b548:	2b00      	cmp	r3, #0
 811b54a:	d006      	beq.n	811b55a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 811b54c:	f107 0310 	add.w	r3, r7, #16
 811b550:	461a      	mov	r2, r3
 811b552:	68b9      	ldr	r1, [r7, #8]
 811b554:	68f8      	ldr	r0, [r7, #12]
 811b556:	f7ff ff49 	bl	811b3ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 811b55a:	69fa      	ldr	r2, [r7, #28]
 811b55c:	6879      	ldr	r1, [r7, #4]
 811b55e:	68f8      	ldr	r0, [r7, #12]
 811b560:	f7ff ff8e 	bl	811b480 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 811b564:	69ba      	ldr	r2, [r7, #24]
 811b566:	6839      	ldr	r1, [r7, #0]
 811b568:	68f8      	ldr	r0, [r7, #12]
 811b56a:	f7ff ffa8 	bl	811b4be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 811b56e:	697b      	ldr	r3, [r7, #20]
 811b570:	2b00      	cmp	r3, #0
 811b572:	d106      	bne.n	811b582 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 811b574:	f107 0310 	add.w	r3, r7, #16
 811b578:	461a      	mov	r2, r3
 811b57a:	68b9      	ldr	r1, [r7, #8]
 811b57c:	68f8      	ldr	r0, [r7, #12]
 811b57e:	f7ff ff35 	bl	811b3ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 811b582:	bf00      	nop
 811b584:	3720      	adds	r7, #32
 811b586:	46bd      	mov	sp, r7
 811b588:	bd80      	pop	{r7, pc}
 811b58a:	bf00      	nop
 811b58c:	081285e8 	.word	0x081285e8

0811b590 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 811b590:	b480      	push	{r7}
 811b592:	b083      	sub	sp, #12
 811b594:	af00      	add	r7, sp, #0
 811b596:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 811b598:	4a04      	ldr	r2, [pc, #16]	@ (811b5ac <netif_set_default+0x1c>)
 811b59a:	687b      	ldr	r3, [r7, #4]
 811b59c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 811b59e:	bf00      	nop
 811b5a0:	370c      	adds	r7, #12
 811b5a2:	46bd      	mov	sp, r7
 811b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b5a8:	4770      	bx	lr
 811b5aa:	bf00      	nop
 811b5ac:	1000e48c 	.word	0x1000e48c

0811b5b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 811b5b0:	b580      	push	{r7, lr}
 811b5b2:	b082      	sub	sp, #8
 811b5b4:	af00      	add	r7, sp, #0
 811b5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 811b5b8:	687b      	ldr	r3, [r7, #4]
 811b5ba:	2b00      	cmp	r3, #0
 811b5bc:	d107      	bne.n	811b5ce <netif_set_up+0x1e>
 811b5be:	4b0f      	ldr	r3, [pc, #60]	@ (811b5fc <netif_set_up+0x4c>)
 811b5c0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 811b5c4:	490e      	ldr	r1, [pc, #56]	@ (811b600 <netif_set_up+0x50>)
 811b5c6:	480f      	ldr	r0, [pc, #60]	@ (811b604 <netif_set_up+0x54>)
 811b5c8:	f009 f848 	bl	812465c <iprintf>
 811b5cc:	e013      	b.n	811b5f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 811b5ce:	687b      	ldr	r3, [r7, #4]
 811b5d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b5d4:	f003 0301 	and.w	r3, r3, #1
 811b5d8:	2b00      	cmp	r3, #0
 811b5da:	d10c      	bne.n	811b5f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 811b5dc:	687b      	ldr	r3, [r7, #4]
 811b5de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b5e2:	f043 0301 	orr.w	r3, r3, #1
 811b5e6:	b2da      	uxtb	r2, r3
 811b5e8:	687b      	ldr	r3, [r7, #4]
 811b5ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 811b5ee:	2103      	movs	r1, #3
 811b5f0:	6878      	ldr	r0, [r7, #4]
 811b5f2:	f000 f809 	bl	811b608 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 811b5f6:	3708      	adds	r7, #8
 811b5f8:	46bd      	mov	sp, r7
 811b5fa:	bd80      	pop	{r7, pc}
 811b5fc:	08126274 	.word	0x08126274
 811b600:	0812643c 	.word	0x0812643c
 811b604:	08126304 	.word	0x08126304

0811b608 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 811b608:	b580      	push	{r7, lr}
 811b60a:	b082      	sub	sp, #8
 811b60c:	af00      	add	r7, sp, #0
 811b60e:	6078      	str	r0, [r7, #4]
 811b610:	460b      	mov	r3, r1
 811b612:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 811b614:	687b      	ldr	r3, [r7, #4]
 811b616:	2b00      	cmp	r3, #0
 811b618:	d106      	bne.n	811b628 <netif_issue_reports+0x20>
 811b61a:	4b18      	ldr	r3, [pc, #96]	@ (811b67c <netif_issue_reports+0x74>)
 811b61c:	f240 326d 	movw	r2, #877	@ 0x36d
 811b620:	4917      	ldr	r1, [pc, #92]	@ (811b680 <netif_issue_reports+0x78>)
 811b622:	4818      	ldr	r0, [pc, #96]	@ (811b684 <netif_issue_reports+0x7c>)
 811b624:	f009 f81a 	bl	812465c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 811b628:	687b      	ldr	r3, [r7, #4]
 811b62a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b62e:	f003 0304 	and.w	r3, r3, #4
 811b632:	2b00      	cmp	r3, #0
 811b634:	d01e      	beq.n	811b674 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 811b636:	687b      	ldr	r3, [r7, #4]
 811b638:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b63c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 811b640:	2b00      	cmp	r3, #0
 811b642:	d017      	beq.n	811b674 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 811b644:	78fb      	ldrb	r3, [r7, #3]
 811b646:	f003 0301 	and.w	r3, r3, #1
 811b64a:	2b00      	cmp	r3, #0
 811b64c:	d013      	beq.n	811b676 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 811b64e:	687b      	ldr	r3, [r7, #4]
 811b650:	3304      	adds	r3, #4
 811b652:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 811b654:	2b00      	cmp	r3, #0
 811b656:	d00e      	beq.n	811b676 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 811b658:	687b      	ldr	r3, [r7, #4]
 811b65a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b65e:	f003 0308 	and.w	r3, r3, #8
 811b662:	2b00      	cmp	r3, #0
 811b664:	d007      	beq.n	811b676 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 811b666:	687b      	ldr	r3, [r7, #4]
 811b668:	3304      	adds	r3, #4
 811b66a:	4619      	mov	r1, r3
 811b66c:	6878      	ldr	r0, [r7, #4]
 811b66e:	f7fd fa77 	bl	8118b60 <etharp_request>
 811b672:	e000      	b.n	811b676 <netif_issue_reports+0x6e>
    return;
 811b674:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 811b676:	3708      	adds	r7, #8
 811b678:	46bd      	mov	sp, r7
 811b67a:	bd80      	pop	{r7, pc}
 811b67c:	08126274 	.word	0x08126274
 811b680:	08126458 	.word	0x08126458
 811b684:	08126304 	.word	0x08126304

0811b688 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 811b688:	b580      	push	{r7, lr}
 811b68a:	b082      	sub	sp, #8
 811b68c:	af00      	add	r7, sp, #0
 811b68e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 811b690:	687b      	ldr	r3, [r7, #4]
 811b692:	2b00      	cmp	r3, #0
 811b694:	d107      	bne.n	811b6a6 <netif_set_down+0x1e>
 811b696:	4b12      	ldr	r3, [pc, #72]	@ (811b6e0 <netif_set_down+0x58>)
 811b698:	f240 329b 	movw	r2, #923	@ 0x39b
 811b69c:	4911      	ldr	r1, [pc, #68]	@ (811b6e4 <netif_set_down+0x5c>)
 811b69e:	4812      	ldr	r0, [pc, #72]	@ (811b6e8 <netif_set_down+0x60>)
 811b6a0:	f008 ffdc 	bl	812465c <iprintf>
 811b6a4:	e019      	b.n	811b6da <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 811b6a6:	687b      	ldr	r3, [r7, #4]
 811b6a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b6ac:	f003 0301 	and.w	r3, r3, #1
 811b6b0:	2b00      	cmp	r3, #0
 811b6b2:	d012      	beq.n	811b6da <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 811b6b4:	687b      	ldr	r3, [r7, #4]
 811b6b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b6ba:	f023 0301 	bic.w	r3, r3, #1
 811b6be:	b2da      	uxtb	r2, r3
 811b6c0:	687b      	ldr	r3, [r7, #4]
 811b6c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 811b6c6:	687b      	ldr	r3, [r7, #4]
 811b6c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b6cc:	f003 0308 	and.w	r3, r3, #8
 811b6d0:	2b00      	cmp	r3, #0
 811b6d2:	d002      	beq.n	811b6da <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 811b6d4:	6878      	ldr	r0, [r7, #4]
 811b6d6:	f7fc fdb5 	bl	8118244 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 811b6da:	3708      	adds	r7, #8
 811b6dc:	46bd      	mov	sp, r7
 811b6de:	bd80      	pop	{r7, pc}
 811b6e0:	08126274 	.word	0x08126274
 811b6e4:	0812647c 	.word	0x0812647c
 811b6e8:	08126304 	.word	0x08126304

0811b6ec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 811b6ec:	b580      	push	{r7, lr}
 811b6ee:	b082      	sub	sp, #8
 811b6f0:	af00      	add	r7, sp, #0
 811b6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 811b6f4:	687b      	ldr	r3, [r7, #4]
 811b6f6:	2b00      	cmp	r3, #0
 811b6f8:	d107      	bne.n	811b70a <netif_set_link_up+0x1e>
 811b6fa:	4b13      	ldr	r3, [pc, #76]	@ (811b748 <netif_set_link_up+0x5c>)
 811b6fc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 811b700:	4912      	ldr	r1, [pc, #72]	@ (811b74c <netif_set_link_up+0x60>)
 811b702:	4813      	ldr	r0, [pc, #76]	@ (811b750 <netif_set_link_up+0x64>)
 811b704:	f008 ffaa 	bl	812465c <iprintf>
 811b708:	e01b      	b.n	811b742 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 811b70a:	687b      	ldr	r3, [r7, #4]
 811b70c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b710:	f003 0304 	and.w	r3, r3, #4
 811b714:	2b00      	cmp	r3, #0
 811b716:	d114      	bne.n	811b742 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 811b718:	687b      	ldr	r3, [r7, #4]
 811b71a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b71e:	f043 0304 	orr.w	r3, r3, #4
 811b722:	b2da      	uxtb	r2, r3
 811b724:	687b      	ldr	r3, [r7, #4]
 811b726:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 811b72a:	2103      	movs	r1, #3
 811b72c:	6878      	ldr	r0, [r7, #4]
 811b72e:	f7ff ff6b 	bl	811b608 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 811b732:	687b      	ldr	r3, [r7, #4]
 811b734:	69db      	ldr	r3, [r3, #28]
 811b736:	2b00      	cmp	r3, #0
 811b738:	d003      	beq.n	811b742 <netif_set_link_up+0x56>
 811b73a:	687b      	ldr	r3, [r7, #4]
 811b73c:	69db      	ldr	r3, [r3, #28]
 811b73e:	6878      	ldr	r0, [r7, #4]
 811b740:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811b742:	3708      	adds	r7, #8
 811b744:	46bd      	mov	sp, r7
 811b746:	bd80      	pop	{r7, pc}
 811b748:	08126274 	.word	0x08126274
 811b74c:	0812649c 	.word	0x0812649c
 811b750:	08126304 	.word	0x08126304

0811b754 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 811b754:	b580      	push	{r7, lr}
 811b756:	b082      	sub	sp, #8
 811b758:	af00      	add	r7, sp, #0
 811b75a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 811b75c:	687b      	ldr	r3, [r7, #4]
 811b75e:	2b00      	cmp	r3, #0
 811b760:	d107      	bne.n	811b772 <netif_set_link_down+0x1e>
 811b762:	4b11      	ldr	r3, [pc, #68]	@ (811b7a8 <netif_set_link_down+0x54>)
 811b764:	f240 4206 	movw	r2, #1030	@ 0x406
 811b768:	4910      	ldr	r1, [pc, #64]	@ (811b7ac <netif_set_link_down+0x58>)
 811b76a:	4811      	ldr	r0, [pc, #68]	@ (811b7b0 <netif_set_link_down+0x5c>)
 811b76c:	f008 ff76 	bl	812465c <iprintf>
 811b770:	e017      	b.n	811b7a2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 811b772:	687b      	ldr	r3, [r7, #4]
 811b774:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b778:	f003 0304 	and.w	r3, r3, #4
 811b77c:	2b00      	cmp	r3, #0
 811b77e:	d010      	beq.n	811b7a2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 811b780:	687b      	ldr	r3, [r7, #4]
 811b782:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b786:	f023 0304 	bic.w	r3, r3, #4
 811b78a:	b2da      	uxtb	r2, r3
 811b78c:	687b      	ldr	r3, [r7, #4]
 811b78e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 811b792:	687b      	ldr	r3, [r7, #4]
 811b794:	69db      	ldr	r3, [r3, #28]
 811b796:	2b00      	cmp	r3, #0
 811b798:	d003      	beq.n	811b7a2 <netif_set_link_down+0x4e>
 811b79a:	687b      	ldr	r3, [r7, #4]
 811b79c:	69db      	ldr	r3, [r3, #28]
 811b79e:	6878      	ldr	r0, [r7, #4]
 811b7a0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811b7a2:	3708      	adds	r7, #8
 811b7a4:	46bd      	mov	sp, r7
 811b7a6:	bd80      	pop	{r7, pc}
 811b7a8:	08126274 	.word	0x08126274
 811b7ac:	081264c0 	.word	0x081264c0
 811b7b0:	08126304 	.word	0x08126304

0811b7b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 811b7b4:	b480      	push	{r7}
 811b7b6:	b083      	sub	sp, #12
 811b7b8:	af00      	add	r7, sp, #0
 811b7ba:	6078      	str	r0, [r7, #4]
 811b7bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 811b7be:	687b      	ldr	r3, [r7, #4]
 811b7c0:	2b00      	cmp	r3, #0
 811b7c2:	d002      	beq.n	811b7ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 811b7c4:	687b      	ldr	r3, [r7, #4]
 811b7c6:	683a      	ldr	r2, [r7, #0]
 811b7c8:	61da      	str	r2, [r3, #28]
  }
}
 811b7ca:	bf00      	nop
 811b7cc:	370c      	adds	r7, #12
 811b7ce:	46bd      	mov	sp, r7
 811b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b7d4:	4770      	bx	lr

0811b7d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 811b7d6:	b480      	push	{r7}
 811b7d8:	b085      	sub	sp, #20
 811b7da:	af00      	add	r7, sp, #0
 811b7dc:	60f8      	str	r0, [r7, #12]
 811b7de:	60b9      	str	r1, [r7, #8]
 811b7e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 811b7e2:	f06f 030b 	mvn.w	r3, #11
}
 811b7e6:	4618      	mov	r0, r3
 811b7e8:	3714      	adds	r7, #20
 811b7ea:	46bd      	mov	sp, r7
 811b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b7f0:	4770      	bx	lr
	...

0811b7f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 811b7f4:	b480      	push	{r7}
 811b7f6:	b085      	sub	sp, #20
 811b7f8:	af00      	add	r7, sp, #0
 811b7fa:	4603      	mov	r3, r0
 811b7fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 811b7fe:	79fb      	ldrb	r3, [r7, #7]
 811b800:	2b00      	cmp	r3, #0
 811b802:	d013      	beq.n	811b82c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 811b804:	4b0d      	ldr	r3, [pc, #52]	@ (811b83c <netif_get_by_index+0x48>)
 811b806:	681b      	ldr	r3, [r3, #0]
 811b808:	60fb      	str	r3, [r7, #12]
 811b80a:	e00c      	b.n	811b826 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 811b80c:	68fb      	ldr	r3, [r7, #12]
 811b80e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811b812:	3301      	adds	r3, #1
 811b814:	b2db      	uxtb	r3, r3
 811b816:	79fa      	ldrb	r2, [r7, #7]
 811b818:	429a      	cmp	r2, r3
 811b81a:	d101      	bne.n	811b820 <netif_get_by_index+0x2c>
        return netif; /* found! */
 811b81c:	68fb      	ldr	r3, [r7, #12]
 811b81e:	e006      	b.n	811b82e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 811b820:	68fb      	ldr	r3, [r7, #12]
 811b822:	681b      	ldr	r3, [r3, #0]
 811b824:	60fb      	str	r3, [r7, #12]
 811b826:	68fb      	ldr	r3, [r7, #12]
 811b828:	2b00      	cmp	r3, #0
 811b82a:	d1ef      	bne.n	811b80c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 811b82c:	2300      	movs	r3, #0
}
 811b82e:	4618      	mov	r0, r3
 811b830:	3714      	adds	r7, #20
 811b832:	46bd      	mov	sp, r7
 811b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b838:	4770      	bx	lr
 811b83a:	bf00      	nop
 811b83c:	1000e488 	.word	0x1000e488

0811b840 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 811b840:	b580      	push	{r7, lr}
 811b842:	b082      	sub	sp, #8
 811b844:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 811b846:	f000 fedf 	bl	811c608 <sys_arch_protect>
 811b84a:	6038      	str	r0, [r7, #0]
 811b84c:	4b0d      	ldr	r3, [pc, #52]	@ (811b884 <pbuf_free_ooseq+0x44>)
 811b84e:	2200      	movs	r2, #0
 811b850:	701a      	strb	r2, [r3, #0]
 811b852:	6838      	ldr	r0, [r7, #0]
 811b854:	f000 fee6 	bl	811c624 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 811b858:	4b0b      	ldr	r3, [pc, #44]	@ (811b888 <pbuf_free_ooseq+0x48>)
 811b85a:	681b      	ldr	r3, [r3, #0]
 811b85c:	607b      	str	r3, [r7, #4]
 811b85e:	e00a      	b.n	811b876 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 811b860:	687b      	ldr	r3, [r7, #4]
 811b862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811b864:	2b00      	cmp	r3, #0
 811b866:	d003      	beq.n	811b870 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 811b868:	6878      	ldr	r0, [r7, #4]
 811b86a:	f002 fcd9 	bl	811e220 <tcp_free_ooseq>
      return;
 811b86e:	e005      	b.n	811b87c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 811b870:	687b      	ldr	r3, [r7, #4]
 811b872:	68db      	ldr	r3, [r3, #12]
 811b874:	607b      	str	r3, [r7, #4]
 811b876:	687b      	ldr	r3, [r7, #4]
 811b878:	2b00      	cmp	r3, #0
 811b87a:	d1f1      	bne.n	811b860 <pbuf_free_ooseq+0x20>
    }
  }
}
 811b87c:	3708      	adds	r7, #8
 811b87e:	46bd      	mov	sp, r7
 811b880:	bd80      	pop	{r7, pc}
 811b882:	bf00      	nop
 811b884:	1000e491 	.word	0x1000e491
 811b888:	1000e4a4 	.word	0x1000e4a4

0811b88c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 811b88c:	b580      	push	{r7, lr}
 811b88e:	b082      	sub	sp, #8
 811b890:	af00      	add	r7, sp, #0
 811b892:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 811b894:	f7ff ffd4 	bl	811b840 <pbuf_free_ooseq>
}
 811b898:	bf00      	nop
 811b89a:	3708      	adds	r7, #8
 811b89c:	46bd      	mov	sp, r7
 811b89e:	bd80      	pop	{r7, pc}

0811b8a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 811b8a0:	b580      	push	{r7, lr}
 811b8a2:	b082      	sub	sp, #8
 811b8a4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 811b8a6:	f000 feaf 	bl	811c608 <sys_arch_protect>
 811b8aa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 811b8ac:	4b0f      	ldr	r3, [pc, #60]	@ (811b8ec <pbuf_pool_is_empty+0x4c>)
 811b8ae:	781b      	ldrb	r3, [r3, #0]
 811b8b0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 811b8b2:	4b0e      	ldr	r3, [pc, #56]	@ (811b8ec <pbuf_pool_is_empty+0x4c>)
 811b8b4:	2201      	movs	r2, #1
 811b8b6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 811b8b8:	6878      	ldr	r0, [r7, #4]
 811b8ba:	f000 feb3 	bl	811c624 <sys_arch_unprotect>

  if (!queued) {
 811b8be:	78fb      	ldrb	r3, [r7, #3]
 811b8c0:	2b00      	cmp	r3, #0
 811b8c2:	d10f      	bne.n	811b8e4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 811b8c4:	2100      	movs	r1, #0
 811b8c6:	480a      	ldr	r0, [pc, #40]	@ (811b8f0 <pbuf_pool_is_empty+0x50>)
 811b8c8:	f006 ff82 	bl	81227d0 <tcpip_try_callback>
 811b8cc:	4603      	mov	r3, r0
 811b8ce:	2b00      	cmp	r3, #0
 811b8d0:	d008      	beq.n	811b8e4 <pbuf_pool_is_empty+0x44>
 811b8d2:	f000 fe99 	bl	811c608 <sys_arch_protect>
 811b8d6:	6078      	str	r0, [r7, #4]
 811b8d8:	4b04      	ldr	r3, [pc, #16]	@ (811b8ec <pbuf_pool_is_empty+0x4c>)
 811b8da:	2200      	movs	r2, #0
 811b8dc:	701a      	strb	r2, [r3, #0]
 811b8de:	6878      	ldr	r0, [r7, #4]
 811b8e0:	f000 fea0 	bl	811c624 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 811b8e4:	bf00      	nop
 811b8e6:	3708      	adds	r7, #8
 811b8e8:	46bd      	mov	sp, r7
 811b8ea:	bd80      	pop	{r7, pc}
 811b8ec:	1000e491 	.word	0x1000e491
 811b8f0:	0811b88d 	.word	0x0811b88d

0811b8f4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 811b8f4:	b480      	push	{r7}
 811b8f6:	b085      	sub	sp, #20
 811b8f8:	af00      	add	r7, sp, #0
 811b8fa:	60f8      	str	r0, [r7, #12]
 811b8fc:	60b9      	str	r1, [r7, #8]
 811b8fe:	4611      	mov	r1, r2
 811b900:	461a      	mov	r2, r3
 811b902:	460b      	mov	r3, r1
 811b904:	80fb      	strh	r3, [r7, #6]
 811b906:	4613      	mov	r3, r2
 811b908:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 811b90a:	68fb      	ldr	r3, [r7, #12]
 811b90c:	2200      	movs	r2, #0
 811b90e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 811b910:	68fb      	ldr	r3, [r7, #12]
 811b912:	68ba      	ldr	r2, [r7, #8]
 811b914:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 811b916:	68fb      	ldr	r3, [r7, #12]
 811b918:	88fa      	ldrh	r2, [r7, #6]
 811b91a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 811b91c:	68fb      	ldr	r3, [r7, #12]
 811b91e:	88ba      	ldrh	r2, [r7, #4]
 811b920:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 811b922:	8b3b      	ldrh	r3, [r7, #24]
 811b924:	b2da      	uxtb	r2, r3
 811b926:	68fb      	ldr	r3, [r7, #12]
 811b928:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 811b92a:	68fb      	ldr	r3, [r7, #12]
 811b92c:	7f3a      	ldrb	r2, [r7, #28]
 811b92e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 811b930:	68fb      	ldr	r3, [r7, #12]
 811b932:	2201      	movs	r2, #1
 811b934:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 811b936:	68fb      	ldr	r3, [r7, #12]
 811b938:	2200      	movs	r2, #0
 811b93a:	73da      	strb	r2, [r3, #15]
}
 811b93c:	bf00      	nop
 811b93e:	3714      	adds	r7, #20
 811b940:	46bd      	mov	sp, r7
 811b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b946:	4770      	bx	lr

0811b948 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 811b948:	b580      	push	{r7, lr}
 811b94a:	b08c      	sub	sp, #48	@ 0x30
 811b94c:	af02      	add	r7, sp, #8
 811b94e:	4603      	mov	r3, r0
 811b950:	71fb      	strb	r3, [r7, #7]
 811b952:	460b      	mov	r3, r1
 811b954:	80bb      	strh	r3, [r7, #4]
 811b956:	4613      	mov	r3, r2
 811b958:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 811b95a:	79fb      	ldrb	r3, [r7, #7]
 811b95c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 811b95e:	887b      	ldrh	r3, [r7, #2]
 811b960:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 811b964:	d07f      	beq.n	811ba66 <pbuf_alloc+0x11e>
 811b966:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 811b96a:	f300 80c7 	bgt.w	811bafc <pbuf_alloc+0x1b4>
 811b96e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 811b972:	d010      	beq.n	811b996 <pbuf_alloc+0x4e>
 811b974:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 811b978:	f300 80c0 	bgt.w	811bafc <pbuf_alloc+0x1b4>
 811b97c:	2b01      	cmp	r3, #1
 811b97e:	d002      	beq.n	811b986 <pbuf_alloc+0x3e>
 811b980:	2b41      	cmp	r3, #65	@ 0x41
 811b982:	f040 80bb 	bne.w	811bafc <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 811b986:	887a      	ldrh	r2, [r7, #2]
 811b988:	88bb      	ldrh	r3, [r7, #4]
 811b98a:	4619      	mov	r1, r3
 811b98c:	2000      	movs	r0, #0
 811b98e:	f000 f8d1 	bl	811bb34 <pbuf_alloc_reference>
 811b992:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 811b994:	e0bc      	b.n	811bb10 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 811b996:	2300      	movs	r3, #0
 811b998:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 811b99a:	2300      	movs	r3, #0
 811b99c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 811b99e:	88bb      	ldrh	r3, [r7, #4]
 811b9a0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 811b9a2:	200c      	movs	r0, #12
 811b9a4:	f7ff fb9a 	bl	811b0dc <memp_malloc>
 811b9a8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 811b9aa:	693b      	ldr	r3, [r7, #16]
 811b9ac:	2b00      	cmp	r3, #0
 811b9ae:	d109      	bne.n	811b9c4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 811b9b0:	f7ff ff76 	bl	811b8a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 811b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b9b6:	2b00      	cmp	r3, #0
 811b9b8:	d002      	beq.n	811b9c0 <pbuf_alloc+0x78>
            pbuf_free(p);
 811b9ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811b9bc:	f000 faa6 	bl	811bf0c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 811b9c0:	2300      	movs	r3, #0
 811b9c2:	e0a6      	b.n	811bb12 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 811b9c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b9c6:	3303      	adds	r3, #3
 811b9c8:	b29b      	uxth	r3, r3
 811b9ca:	f023 0303 	bic.w	r3, r3, #3
 811b9ce:	b29b      	uxth	r3, r3
 811b9d0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 811b9d4:	b29b      	uxth	r3, r3
 811b9d6:	8b7a      	ldrh	r2, [r7, #26]
 811b9d8:	4293      	cmp	r3, r2
 811b9da:	bf28      	it	cs
 811b9dc:	4613      	movcs	r3, r2
 811b9de:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 811b9e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811b9e2:	3310      	adds	r3, #16
 811b9e4:	693a      	ldr	r2, [r7, #16]
 811b9e6:	4413      	add	r3, r2
 811b9e8:	3303      	adds	r3, #3
 811b9ea:	f023 0303 	bic.w	r3, r3, #3
 811b9ee:	4618      	mov	r0, r3
 811b9f0:	89f9      	ldrh	r1, [r7, #14]
 811b9f2:	8b7a      	ldrh	r2, [r7, #26]
 811b9f4:	2300      	movs	r3, #0
 811b9f6:	9301      	str	r3, [sp, #4]
 811b9f8:	887b      	ldrh	r3, [r7, #2]
 811b9fa:	9300      	str	r3, [sp, #0]
 811b9fc:	460b      	mov	r3, r1
 811b9fe:	4601      	mov	r1, r0
 811ba00:	6938      	ldr	r0, [r7, #16]
 811ba02:	f7ff ff77 	bl	811b8f4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 811ba06:	693b      	ldr	r3, [r7, #16]
 811ba08:	685b      	ldr	r3, [r3, #4]
 811ba0a:	f003 0303 	and.w	r3, r3, #3
 811ba0e:	2b00      	cmp	r3, #0
 811ba10:	d006      	beq.n	811ba20 <pbuf_alloc+0xd8>
 811ba12:	4b42      	ldr	r3, [pc, #264]	@ (811bb1c <pbuf_alloc+0x1d4>)
 811ba14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 811ba18:	4941      	ldr	r1, [pc, #260]	@ (811bb20 <pbuf_alloc+0x1d8>)
 811ba1a:	4842      	ldr	r0, [pc, #264]	@ (811bb24 <pbuf_alloc+0x1dc>)
 811ba1c:	f008 fe1e 	bl	812465c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 811ba20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811ba22:	3303      	adds	r3, #3
 811ba24:	f023 0303 	bic.w	r3, r3, #3
 811ba28:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 811ba2c:	d106      	bne.n	811ba3c <pbuf_alloc+0xf4>
 811ba2e:	4b3b      	ldr	r3, [pc, #236]	@ (811bb1c <pbuf_alloc+0x1d4>)
 811ba30:	f44f 7281 	mov.w	r2, #258	@ 0x102
 811ba34:	493c      	ldr	r1, [pc, #240]	@ (811bb28 <pbuf_alloc+0x1e0>)
 811ba36:	483b      	ldr	r0, [pc, #236]	@ (811bb24 <pbuf_alloc+0x1dc>)
 811ba38:	f008 fe10 	bl	812465c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 811ba3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ba3e:	2b00      	cmp	r3, #0
 811ba40:	d102      	bne.n	811ba48 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 811ba42:	693b      	ldr	r3, [r7, #16]
 811ba44:	627b      	str	r3, [r7, #36]	@ 0x24
 811ba46:	e002      	b.n	811ba4e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 811ba48:	69fb      	ldr	r3, [r7, #28]
 811ba4a:	693a      	ldr	r2, [r7, #16]
 811ba4c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 811ba4e:	693b      	ldr	r3, [r7, #16]
 811ba50:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 811ba52:	8b7a      	ldrh	r2, [r7, #26]
 811ba54:	89fb      	ldrh	r3, [r7, #14]
 811ba56:	1ad3      	subs	r3, r2, r3
 811ba58:	837b      	strh	r3, [r7, #26]
        offset = 0;
 811ba5a:	2300      	movs	r3, #0
 811ba5c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 811ba5e:	8b7b      	ldrh	r3, [r7, #26]
 811ba60:	2b00      	cmp	r3, #0
 811ba62:	d19e      	bne.n	811b9a2 <pbuf_alloc+0x5a>
      break;
 811ba64:	e054      	b.n	811bb10 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 811ba66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811ba68:	3303      	adds	r3, #3
 811ba6a:	b29b      	uxth	r3, r3
 811ba6c:	f023 0303 	bic.w	r3, r3, #3
 811ba70:	b29a      	uxth	r2, r3
 811ba72:	88bb      	ldrh	r3, [r7, #4]
 811ba74:	3303      	adds	r3, #3
 811ba76:	b29b      	uxth	r3, r3
 811ba78:	f023 0303 	bic.w	r3, r3, #3
 811ba7c:	b29b      	uxth	r3, r3
 811ba7e:	4413      	add	r3, r2
 811ba80:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 811ba82:	8b3b      	ldrh	r3, [r7, #24]
 811ba84:	3310      	adds	r3, #16
 811ba86:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 811ba88:	8b3a      	ldrh	r2, [r7, #24]
 811ba8a:	88bb      	ldrh	r3, [r7, #4]
 811ba8c:	3303      	adds	r3, #3
 811ba8e:	f023 0303 	bic.w	r3, r3, #3
 811ba92:	429a      	cmp	r2, r3
 811ba94:	d306      	bcc.n	811baa4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 811ba96:	88bb      	ldrh	r3, [r7, #4]
 811ba98:	3303      	adds	r3, #3
 811ba9a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 811ba9e:	697a      	ldr	r2, [r7, #20]
 811baa0:	429a      	cmp	r2, r3
 811baa2:	d201      	bcs.n	811baa8 <pbuf_alloc+0x160>
        return NULL;
 811baa4:	2300      	movs	r3, #0
 811baa6:	e034      	b.n	811bb12 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 811baa8:	6978      	ldr	r0, [r7, #20]
 811baaa:	f7ff f979 	bl	811ada0 <mem_malloc>
 811baae:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 811bab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811bab2:	2b00      	cmp	r3, #0
 811bab4:	d101      	bne.n	811baba <pbuf_alloc+0x172>
        return NULL;
 811bab6:	2300      	movs	r3, #0
 811bab8:	e02b      	b.n	811bb12 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 811baba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811babc:	3310      	adds	r3, #16
 811babe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811bac0:	4413      	add	r3, r2
 811bac2:	3303      	adds	r3, #3
 811bac4:	f023 0303 	bic.w	r3, r3, #3
 811bac8:	4618      	mov	r0, r3
 811baca:	88b9      	ldrh	r1, [r7, #4]
 811bacc:	88ba      	ldrh	r2, [r7, #4]
 811bace:	2300      	movs	r3, #0
 811bad0:	9301      	str	r3, [sp, #4]
 811bad2:	887b      	ldrh	r3, [r7, #2]
 811bad4:	9300      	str	r3, [sp, #0]
 811bad6:	460b      	mov	r3, r1
 811bad8:	4601      	mov	r1, r0
 811bada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811badc:	f7ff ff0a 	bl	811b8f4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 811bae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811bae2:	685b      	ldr	r3, [r3, #4]
 811bae4:	f003 0303 	and.w	r3, r3, #3
 811bae8:	2b00      	cmp	r3, #0
 811baea:	d010      	beq.n	811bb0e <pbuf_alloc+0x1c6>
 811baec:	4b0b      	ldr	r3, [pc, #44]	@ (811bb1c <pbuf_alloc+0x1d4>)
 811baee:	f44f 7291 	mov.w	r2, #290	@ 0x122
 811baf2:	490e      	ldr	r1, [pc, #56]	@ (811bb2c <pbuf_alloc+0x1e4>)
 811baf4:	480b      	ldr	r0, [pc, #44]	@ (811bb24 <pbuf_alloc+0x1dc>)
 811baf6:	f008 fdb1 	bl	812465c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 811bafa:	e008      	b.n	811bb0e <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 811bafc:	4b07      	ldr	r3, [pc, #28]	@ (811bb1c <pbuf_alloc+0x1d4>)
 811bafe:	f240 1227 	movw	r2, #295	@ 0x127
 811bb02:	490b      	ldr	r1, [pc, #44]	@ (811bb30 <pbuf_alloc+0x1e8>)
 811bb04:	4807      	ldr	r0, [pc, #28]	@ (811bb24 <pbuf_alloc+0x1dc>)
 811bb06:	f008 fda9 	bl	812465c <iprintf>
      return NULL;
 811bb0a:	2300      	movs	r3, #0
 811bb0c:	e001      	b.n	811bb12 <pbuf_alloc+0x1ca>
      break;
 811bb0e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 811bb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811bb12:	4618      	mov	r0, r3
 811bb14:	3728      	adds	r7, #40	@ 0x28
 811bb16:	46bd      	mov	sp, r7
 811bb18:	bd80      	pop	{r7, pc}
 811bb1a:	bf00      	nop
 811bb1c:	081264e4 	.word	0x081264e4
 811bb20:	08126558 	.word	0x08126558
 811bb24:	08126588 	.word	0x08126588
 811bb28:	081265b0 	.word	0x081265b0
 811bb2c:	081265e4 	.word	0x081265e4
 811bb30:	08126610 	.word	0x08126610

0811bb34 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 811bb34:	b580      	push	{r7, lr}
 811bb36:	b086      	sub	sp, #24
 811bb38:	af02      	add	r7, sp, #8
 811bb3a:	6078      	str	r0, [r7, #4]
 811bb3c:	460b      	mov	r3, r1
 811bb3e:	807b      	strh	r3, [r7, #2]
 811bb40:	4613      	mov	r3, r2
 811bb42:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 811bb44:	883b      	ldrh	r3, [r7, #0]
 811bb46:	2b41      	cmp	r3, #65	@ 0x41
 811bb48:	d009      	beq.n	811bb5e <pbuf_alloc_reference+0x2a>
 811bb4a:	883b      	ldrh	r3, [r7, #0]
 811bb4c:	2b01      	cmp	r3, #1
 811bb4e:	d006      	beq.n	811bb5e <pbuf_alloc_reference+0x2a>
 811bb50:	4b0f      	ldr	r3, [pc, #60]	@ (811bb90 <pbuf_alloc_reference+0x5c>)
 811bb52:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 811bb56:	490f      	ldr	r1, [pc, #60]	@ (811bb94 <pbuf_alloc_reference+0x60>)
 811bb58:	480f      	ldr	r0, [pc, #60]	@ (811bb98 <pbuf_alloc_reference+0x64>)
 811bb5a:	f008 fd7f 	bl	812465c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 811bb5e:	200b      	movs	r0, #11
 811bb60:	f7ff fabc 	bl	811b0dc <memp_malloc>
 811bb64:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 811bb66:	68fb      	ldr	r3, [r7, #12]
 811bb68:	2b00      	cmp	r3, #0
 811bb6a:	d101      	bne.n	811bb70 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 811bb6c:	2300      	movs	r3, #0
 811bb6e:	e00b      	b.n	811bb88 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 811bb70:	8879      	ldrh	r1, [r7, #2]
 811bb72:	887a      	ldrh	r2, [r7, #2]
 811bb74:	2300      	movs	r3, #0
 811bb76:	9301      	str	r3, [sp, #4]
 811bb78:	883b      	ldrh	r3, [r7, #0]
 811bb7a:	9300      	str	r3, [sp, #0]
 811bb7c:	460b      	mov	r3, r1
 811bb7e:	6879      	ldr	r1, [r7, #4]
 811bb80:	68f8      	ldr	r0, [r7, #12]
 811bb82:	f7ff feb7 	bl	811b8f4 <pbuf_init_alloced_pbuf>
  return p;
 811bb86:	68fb      	ldr	r3, [r7, #12]
}
 811bb88:	4618      	mov	r0, r3
 811bb8a:	3710      	adds	r7, #16
 811bb8c:	46bd      	mov	sp, r7
 811bb8e:	bd80      	pop	{r7, pc}
 811bb90:	081264e4 	.word	0x081264e4
 811bb94:	0812662c 	.word	0x0812662c
 811bb98:	08126588 	.word	0x08126588

0811bb9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 811bb9c:	b580      	push	{r7, lr}
 811bb9e:	b088      	sub	sp, #32
 811bba0:	af02      	add	r7, sp, #8
 811bba2:	607b      	str	r3, [r7, #4]
 811bba4:	4603      	mov	r3, r0
 811bba6:	73fb      	strb	r3, [r7, #15]
 811bba8:	460b      	mov	r3, r1
 811bbaa:	81bb      	strh	r3, [r7, #12]
 811bbac:	4613      	mov	r3, r2
 811bbae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 811bbb0:	7bfb      	ldrb	r3, [r7, #15]
 811bbb2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 811bbb4:	8a7b      	ldrh	r3, [r7, #18]
 811bbb6:	3303      	adds	r3, #3
 811bbb8:	f023 0203 	bic.w	r2, r3, #3
 811bbbc:	89bb      	ldrh	r3, [r7, #12]
 811bbbe:	441a      	add	r2, r3
 811bbc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811bbc2:	429a      	cmp	r2, r3
 811bbc4:	d901      	bls.n	811bbca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 811bbc6:	2300      	movs	r3, #0
 811bbc8:	e018      	b.n	811bbfc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 811bbca:	6a3b      	ldr	r3, [r7, #32]
 811bbcc:	2b00      	cmp	r3, #0
 811bbce:	d007      	beq.n	811bbe0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 811bbd0:	8a7b      	ldrh	r3, [r7, #18]
 811bbd2:	3303      	adds	r3, #3
 811bbd4:	f023 0303 	bic.w	r3, r3, #3
 811bbd8:	6a3a      	ldr	r2, [r7, #32]
 811bbda:	4413      	add	r3, r2
 811bbdc:	617b      	str	r3, [r7, #20]
 811bbde:	e001      	b.n	811bbe4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 811bbe0:	2300      	movs	r3, #0
 811bbe2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 811bbe4:	6878      	ldr	r0, [r7, #4]
 811bbe6:	89b9      	ldrh	r1, [r7, #12]
 811bbe8:	89ba      	ldrh	r2, [r7, #12]
 811bbea:	2302      	movs	r3, #2
 811bbec:	9301      	str	r3, [sp, #4]
 811bbee:	897b      	ldrh	r3, [r7, #10]
 811bbf0:	9300      	str	r3, [sp, #0]
 811bbf2:	460b      	mov	r3, r1
 811bbf4:	6979      	ldr	r1, [r7, #20]
 811bbf6:	f7ff fe7d 	bl	811b8f4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 811bbfa:	687b      	ldr	r3, [r7, #4]
}
 811bbfc:	4618      	mov	r0, r3
 811bbfe:	3718      	adds	r7, #24
 811bc00:	46bd      	mov	sp, r7
 811bc02:	bd80      	pop	{r7, pc}

0811bc04 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 811bc04:	b580      	push	{r7, lr}
 811bc06:	b084      	sub	sp, #16
 811bc08:	af00      	add	r7, sp, #0
 811bc0a:	6078      	str	r0, [r7, #4]
 811bc0c:	460b      	mov	r3, r1
 811bc0e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 811bc10:	687b      	ldr	r3, [r7, #4]
 811bc12:	2b00      	cmp	r3, #0
 811bc14:	d106      	bne.n	811bc24 <pbuf_realloc+0x20>
 811bc16:	4b39      	ldr	r3, [pc, #228]	@ (811bcfc <pbuf_realloc+0xf8>)
 811bc18:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 811bc1c:	4938      	ldr	r1, [pc, #224]	@ (811bd00 <pbuf_realloc+0xfc>)
 811bc1e:	4839      	ldr	r0, [pc, #228]	@ (811bd04 <pbuf_realloc+0x100>)
 811bc20:	f008 fd1c 	bl	812465c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 811bc24:	687b      	ldr	r3, [r7, #4]
 811bc26:	891b      	ldrh	r3, [r3, #8]
 811bc28:	887a      	ldrh	r2, [r7, #2]
 811bc2a:	429a      	cmp	r2, r3
 811bc2c:	d261      	bcs.n	811bcf2 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 811bc2e:	687b      	ldr	r3, [r7, #4]
 811bc30:	891a      	ldrh	r2, [r3, #8]
 811bc32:	887b      	ldrh	r3, [r7, #2]
 811bc34:	1ad3      	subs	r3, r2, r3
 811bc36:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 811bc38:	887b      	ldrh	r3, [r7, #2]
 811bc3a:	817b      	strh	r3, [r7, #10]
  q = p;
 811bc3c:	687b      	ldr	r3, [r7, #4]
 811bc3e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 811bc40:	e018      	b.n	811bc74 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 811bc42:	68fb      	ldr	r3, [r7, #12]
 811bc44:	895b      	ldrh	r3, [r3, #10]
 811bc46:	897a      	ldrh	r2, [r7, #10]
 811bc48:	1ad3      	subs	r3, r2, r3
 811bc4a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 811bc4c:	68fb      	ldr	r3, [r7, #12]
 811bc4e:	891a      	ldrh	r2, [r3, #8]
 811bc50:	893b      	ldrh	r3, [r7, #8]
 811bc52:	1ad3      	subs	r3, r2, r3
 811bc54:	b29a      	uxth	r2, r3
 811bc56:	68fb      	ldr	r3, [r7, #12]
 811bc58:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 811bc5a:	68fb      	ldr	r3, [r7, #12]
 811bc5c:	681b      	ldr	r3, [r3, #0]
 811bc5e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 811bc60:	68fb      	ldr	r3, [r7, #12]
 811bc62:	2b00      	cmp	r3, #0
 811bc64:	d106      	bne.n	811bc74 <pbuf_realloc+0x70>
 811bc66:	4b25      	ldr	r3, [pc, #148]	@ (811bcfc <pbuf_realloc+0xf8>)
 811bc68:	f240 12af 	movw	r2, #431	@ 0x1af
 811bc6c:	4926      	ldr	r1, [pc, #152]	@ (811bd08 <pbuf_realloc+0x104>)
 811bc6e:	4825      	ldr	r0, [pc, #148]	@ (811bd04 <pbuf_realloc+0x100>)
 811bc70:	f008 fcf4 	bl	812465c <iprintf>
  while (rem_len > q->len) {
 811bc74:	68fb      	ldr	r3, [r7, #12]
 811bc76:	895b      	ldrh	r3, [r3, #10]
 811bc78:	897a      	ldrh	r2, [r7, #10]
 811bc7a:	429a      	cmp	r2, r3
 811bc7c:	d8e1      	bhi.n	811bc42 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 811bc7e:	68fb      	ldr	r3, [r7, #12]
 811bc80:	7b1b      	ldrb	r3, [r3, #12]
 811bc82:	f003 030f 	and.w	r3, r3, #15
 811bc86:	2b00      	cmp	r3, #0
 811bc88:	d11f      	bne.n	811bcca <pbuf_realloc+0xc6>
 811bc8a:	68fb      	ldr	r3, [r7, #12]
 811bc8c:	895b      	ldrh	r3, [r3, #10]
 811bc8e:	897a      	ldrh	r2, [r7, #10]
 811bc90:	429a      	cmp	r2, r3
 811bc92:	d01a      	beq.n	811bcca <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 811bc94:	68fb      	ldr	r3, [r7, #12]
 811bc96:	7b5b      	ldrb	r3, [r3, #13]
 811bc98:	f003 0302 	and.w	r3, r3, #2
 811bc9c:	2b00      	cmp	r3, #0
 811bc9e:	d114      	bne.n	811bcca <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 811bca0:	68fb      	ldr	r3, [r7, #12]
 811bca2:	685a      	ldr	r2, [r3, #4]
 811bca4:	68fb      	ldr	r3, [r7, #12]
 811bca6:	1ad2      	subs	r2, r2, r3
 811bca8:	897b      	ldrh	r3, [r7, #10]
 811bcaa:	4413      	add	r3, r2
 811bcac:	4619      	mov	r1, r3
 811bcae:	68f8      	ldr	r0, [r7, #12]
 811bcb0:	f7fe ff74 	bl	811ab9c <mem_trim>
 811bcb4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 811bcb6:	68fb      	ldr	r3, [r7, #12]
 811bcb8:	2b00      	cmp	r3, #0
 811bcba:	d106      	bne.n	811bcca <pbuf_realloc+0xc6>
 811bcbc:	4b0f      	ldr	r3, [pc, #60]	@ (811bcfc <pbuf_realloc+0xf8>)
 811bcbe:	f240 12bd 	movw	r2, #445	@ 0x1bd
 811bcc2:	4912      	ldr	r1, [pc, #72]	@ (811bd0c <pbuf_realloc+0x108>)
 811bcc4:	480f      	ldr	r0, [pc, #60]	@ (811bd04 <pbuf_realloc+0x100>)
 811bcc6:	f008 fcc9 	bl	812465c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 811bcca:	68fb      	ldr	r3, [r7, #12]
 811bccc:	897a      	ldrh	r2, [r7, #10]
 811bcce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 811bcd0:	68fb      	ldr	r3, [r7, #12]
 811bcd2:	895a      	ldrh	r2, [r3, #10]
 811bcd4:	68fb      	ldr	r3, [r7, #12]
 811bcd6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 811bcd8:	68fb      	ldr	r3, [r7, #12]
 811bcda:	681b      	ldr	r3, [r3, #0]
 811bcdc:	2b00      	cmp	r3, #0
 811bcde:	d004      	beq.n	811bcea <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 811bce0:	68fb      	ldr	r3, [r7, #12]
 811bce2:	681b      	ldr	r3, [r3, #0]
 811bce4:	4618      	mov	r0, r3
 811bce6:	f000 f911 	bl	811bf0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 811bcea:	68fb      	ldr	r3, [r7, #12]
 811bcec:	2200      	movs	r2, #0
 811bcee:	601a      	str	r2, [r3, #0]
 811bcf0:	e000      	b.n	811bcf4 <pbuf_realloc+0xf0>
    return;
 811bcf2:	bf00      	nop

}
 811bcf4:	3710      	adds	r7, #16
 811bcf6:	46bd      	mov	sp, r7
 811bcf8:	bd80      	pop	{r7, pc}
 811bcfa:	bf00      	nop
 811bcfc:	081264e4 	.word	0x081264e4
 811bd00:	08126640 	.word	0x08126640
 811bd04:	08126588 	.word	0x08126588
 811bd08:	08126658 	.word	0x08126658
 811bd0c:	08126670 	.word	0x08126670

0811bd10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 811bd10:	b580      	push	{r7, lr}
 811bd12:	b086      	sub	sp, #24
 811bd14:	af00      	add	r7, sp, #0
 811bd16:	60f8      	str	r0, [r7, #12]
 811bd18:	60b9      	str	r1, [r7, #8]
 811bd1a:	4613      	mov	r3, r2
 811bd1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811bd1e:	68fb      	ldr	r3, [r7, #12]
 811bd20:	2b00      	cmp	r3, #0
 811bd22:	d106      	bne.n	811bd32 <pbuf_add_header_impl+0x22>
 811bd24:	4b2b      	ldr	r3, [pc, #172]	@ (811bdd4 <pbuf_add_header_impl+0xc4>)
 811bd26:	f240 12df 	movw	r2, #479	@ 0x1df
 811bd2a:	492b      	ldr	r1, [pc, #172]	@ (811bdd8 <pbuf_add_header_impl+0xc8>)
 811bd2c:	482b      	ldr	r0, [pc, #172]	@ (811bddc <pbuf_add_header_impl+0xcc>)
 811bd2e:	f008 fc95 	bl	812465c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 811bd32:	68fb      	ldr	r3, [r7, #12]
 811bd34:	2b00      	cmp	r3, #0
 811bd36:	d003      	beq.n	811bd40 <pbuf_add_header_impl+0x30>
 811bd38:	68bb      	ldr	r3, [r7, #8]
 811bd3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811bd3e:	d301      	bcc.n	811bd44 <pbuf_add_header_impl+0x34>
    return 1;
 811bd40:	2301      	movs	r3, #1
 811bd42:	e043      	b.n	811bdcc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 811bd44:	68bb      	ldr	r3, [r7, #8]
 811bd46:	2b00      	cmp	r3, #0
 811bd48:	d101      	bne.n	811bd4e <pbuf_add_header_impl+0x3e>
    return 0;
 811bd4a:	2300      	movs	r3, #0
 811bd4c:	e03e      	b.n	811bdcc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 811bd4e:	68bb      	ldr	r3, [r7, #8]
 811bd50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 811bd52:	68fb      	ldr	r3, [r7, #12]
 811bd54:	891a      	ldrh	r2, [r3, #8]
 811bd56:	8a7b      	ldrh	r3, [r7, #18]
 811bd58:	4413      	add	r3, r2
 811bd5a:	b29b      	uxth	r3, r3
 811bd5c:	8a7a      	ldrh	r2, [r7, #18]
 811bd5e:	429a      	cmp	r2, r3
 811bd60:	d901      	bls.n	811bd66 <pbuf_add_header_impl+0x56>
    return 1;
 811bd62:	2301      	movs	r3, #1
 811bd64:	e032      	b.n	811bdcc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 811bd66:	68fb      	ldr	r3, [r7, #12]
 811bd68:	7b1b      	ldrb	r3, [r3, #12]
 811bd6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 811bd6c:	8a3b      	ldrh	r3, [r7, #16]
 811bd6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 811bd72:	2b00      	cmp	r3, #0
 811bd74:	d00c      	beq.n	811bd90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 811bd76:	68fb      	ldr	r3, [r7, #12]
 811bd78:	685a      	ldr	r2, [r3, #4]
 811bd7a:	68bb      	ldr	r3, [r7, #8]
 811bd7c:	425b      	negs	r3, r3
 811bd7e:	4413      	add	r3, r2
 811bd80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 811bd82:	68fb      	ldr	r3, [r7, #12]
 811bd84:	3310      	adds	r3, #16
 811bd86:	697a      	ldr	r2, [r7, #20]
 811bd88:	429a      	cmp	r2, r3
 811bd8a:	d20d      	bcs.n	811bda8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 811bd8c:	2301      	movs	r3, #1
 811bd8e:	e01d      	b.n	811bdcc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 811bd90:	79fb      	ldrb	r3, [r7, #7]
 811bd92:	2b00      	cmp	r3, #0
 811bd94:	d006      	beq.n	811bda4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 811bd96:	68fb      	ldr	r3, [r7, #12]
 811bd98:	685a      	ldr	r2, [r3, #4]
 811bd9a:	68bb      	ldr	r3, [r7, #8]
 811bd9c:	425b      	negs	r3, r3
 811bd9e:	4413      	add	r3, r2
 811bda0:	617b      	str	r3, [r7, #20]
 811bda2:	e001      	b.n	811bda8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 811bda4:	2301      	movs	r3, #1
 811bda6:	e011      	b.n	811bdcc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 811bda8:	68fb      	ldr	r3, [r7, #12]
 811bdaa:	697a      	ldr	r2, [r7, #20]
 811bdac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 811bdae:	68fb      	ldr	r3, [r7, #12]
 811bdb0:	895a      	ldrh	r2, [r3, #10]
 811bdb2:	8a7b      	ldrh	r3, [r7, #18]
 811bdb4:	4413      	add	r3, r2
 811bdb6:	b29a      	uxth	r2, r3
 811bdb8:	68fb      	ldr	r3, [r7, #12]
 811bdba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 811bdbc:	68fb      	ldr	r3, [r7, #12]
 811bdbe:	891a      	ldrh	r2, [r3, #8]
 811bdc0:	8a7b      	ldrh	r3, [r7, #18]
 811bdc2:	4413      	add	r3, r2
 811bdc4:	b29a      	uxth	r2, r3
 811bdc6:	68fb      	ldr	r3, [r7, #12]
 811bdc8:	811a      	strh	r2, [r3, #8]


  return 0;
 811bdca:	2300      	movs	r3, #0
}
 811bdcc:	4618      	mov	r0, r3
 811bdce:	3718      	adds	r7, #24
 811bdd0:	46bd      	mov	sp, r7
 811bdd2:	bd80      	pop	{r7, pc}
 811bdd4:	081264e4 	.word	0x081264e4
 811bdd8:	0812668c 	.word	0x0812668c
 811bddc:	08126588 	.word	0x08126588

0811bde0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 811bde0:	b580      	push	{r7, lr}
 811bde2:	b082      	sub	sp, #8
 811bde4:	af00      	add	r7, sp, #0
 811bde6:	6078      	str	r0, [r7, #4]
 811bde8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 811bdea:	2200      	movs	r2, #0
 811bdec:	6839      	ldr	r1, [r7, #0]
 811bdee:	6878      	ldr	r0, [r7, #4]
 811bdf0:	f7ff ff8e 	bl	811bd10 <pbuf_add_header_impl>
 811bdf4:	4603      	mov	r3, r0
}
 811bdf6:	4618      	mov	r0, r3
 811bdf8:	3708      	adds	r7, #8
 811bdfa:	46bd      	mov	sp, r7
 811bdfc:	bd80      	pop	{r7, pc}
	...

0811be00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 811be00:	b580      	push	{r7, lr}
 811be02:	b084      	sub	sp, #16
 811be04:	af00      	add	r7, sp, #0
 811be06:	6078      	str	r0, [r7, #4]
 811be08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811be0a:	687b      	ldr	r3, [r7, #4]
 811be0c:	2b00      	cmp	r3, #0
 811be0e:	d106      	bne.n	811be1e <pbuf_remove_header+0x1e>
 811be10:	4b20      	ldr	r3, [pc, #128]	@ (811be94 <pbuf_remove_header+0x94>)
 811be12:	f240 224b 	movw	r2, #587	@ 0x24b
 811be16:	4920      	ldr	r1, [pc, #128]	@ (811be98 <pbuf_remove_header+0x98>)
 811be18:	4820      	ldr	r0, [pc, #128]	@ (811be9c <pbuf_remove_header+0x9c>)
 811be1a:	f008 fc1f 	bl	812465c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 811be1e:	687b      	ldr	r3, [r7, #4]
 811be20:	2b00      	cmp	r3, #0
 811be22:	d003      	beq.n	811be2c <pbuf_remove_header+0x2c>
 811be24:	683b      	ldr	r3, [r7, #0]
 811be26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811be2a:	d301      	bcc.n	811be30 <pbuf_remove_header+0x30>
    return 1;
 811be2c:	2301      	movs	r3, #1
 811be2e:	e02c      	b.n	811be8a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 811be30:	683b      	ldr	r3, [r7, #0]
 811be32:	2b00      	cmp	r3, #0
 811be34:	d101      	bne.n	811be3a <pbuf_remove_header+0x3a>
    return 0;
 811be36:	2300      	movs	r3, #0
 811be38:	e027      	b.n	811be8a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 811be3a:	683b      	ldr	r3, [r7, #0]
 811be3c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 811be3e:	687b      	ldr	r3, [r7, #4]
 811be40:	895b      	ldrh	r3, [r3, #10]
 811be42:	89fa      	ldrh	r2, [r7, #14]
 811be44:	429a      	cmp	r2, r3
 811be46:	d908      	bls.n	811be5a <pbuf_remove_header+0x5a>
 811be48:	4b12      	ldr	r3, [pc, #72]	@ (811be94 <pbuf_remove_header+0x94>)
 811be4a:	f240 2255 	movw	r2, #597	@ 0x255
 811be4e:	4914      	ldr	r1, [pc, #80]	@ (811bea0 <pbuf_remove_header+0xa0>)
 811be50:	4812      	ldr	r0, [pc, #72]	@ (811be9c <pbuf_remove_header+0x9c>)
 811be52:	f008 fc03 	bl	812465c <iprintf>
 811be56:	2301      	movs	r3, #1
 811be58:	e017      	b.n	811be8a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 811be5a:	687b      	ldr	r3, [r7, #4]
 811be5c:	685b      	ldr	r3, [r3, #4]
 811be5e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 811be60:	687b      	ldr	r3, [r7, #4]
 811be62:	685a      	ldr	r2, [r3, #4]
 811be64:	683b      	ldr	r3, [r7, #0]
 811be66:	441a      	add	r2, r3
 811be68:	687b      	ldr	r3, [r7, #4]
 811be6a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 811be6c:	687b      	ldr	r3, [r7, #4]
 811be6e:	895a      	ldrh	r2, [r3, #10]
 811be70:	89fb      	ldrh	r3, [r7, #14]
 811be72:	1ad3      	subs	r3, r2, r3
 811be74:	b29a      	uxth	r2, r3
 811be76:	687b      	ldr	r3, [r7, #4]
 811be78:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 811be7a:	687b      	ldr	r3, [r7, #4]
 811be7c:	891a      	ldrh	r2, [r3, #8]
 811be7e:	89fb      	ldrh	r3, [r7, #14]
 811be80:	1ad3      	subs	r3, r2, r3
 811be82:	b29a      	uxth	r2, r3
 811be84:	687b      	ldr	r3, [r7, #4]
 811be86:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 811be88:	2300      	movs	r3, #0
}
 811be8a:	4618      	mov	r0, r3
 811be8c:	3710      	adds	r7, #16
 811be8e:	46bd      	mov	sp, r7
 811be90:	bd80      	pop	{r7, pc}
 811be92:	bf00      	nop
 811be94:	081264e4 	.word	0x081264e4
 811be98:	0812668c 	.word	0x0812668c
 811be9c:	08126588 	.word	0x08126588
 811bea0:	08126698 	.word	0x08126698

0811bea4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 811bea4:	b580      	push	{r7, lr}
 811bea6:	b082      	sub	sp, #8
 811bea8:	af00      	add	r7, sp, #0
 811beaa:	6078      	str	r0, [r7, #4]
 811beac:	460b      	mov	r3, r1
 811beae:	807b      	strh	r3, [r7, #2]
 811beb0:	4613      	mov	r3, r2
 811beb2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 811beb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811beb8:	2b00      	cmp	r3, #0
 811beba:	da08      	bge.n	811bece <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 811bebc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811bec0:	425b      	negs	r3, r3
 811bec2:	4619      	mov	r1, r3
 811bec4:	6878      	ldr	r0, [r7, #4]
 811bec6:	f7ff ff9b 	bl	811be00 <pbuf_remove_header>
 811beca:	4603      	mov	r3, r0
 811becc:	e007      	b.n	811bede <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 811bece:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811bed2:	787a      	ldrb	r2, [r7, #1]
 811bed4:	4619      	mov	r1, r3
 811bed6:	6878      	ldr	r0, [r7, #4]
 811bed8:	f7ff ff1a 	bl	811bd10 <pbuf_add_header_impl>
 811bedc:	4603      	mov	r3, r0
  }
}
 811bede:	4618      	mov	r0, r3
 811bee0:	3708      	adds	r7, #8
 811bee2:	46bd      	mov	sp, r7
 811bee4:	bd80      	pop	{r7, pc}

0811bee6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 811bee6:	b580      	push	{r7, lr}
 811bee8:	b082      	sub	sp, #8
 811beea:	af00      	add	r7, sp, #0
 811beec:	6078      	str	r0, [r7, #4]
 811beee:	460b      	mov	r3, r1
 811bef0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 811bef2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811bef6:	2201      	movs	r2, #1
 811bef8:	4619      	mov	r1, r3
 811befa:	6878      	ldr	r0, [r7, #4]
 811befc:	f7ff ffd2 	bl	811bea4 <pbuf_header_impl>
 811bf00:	4603      	mov	r3, r0
}
 811bf02:	4618      	mov	r0, r3
 811bf04:	3708      	adds	r7, #8
 811bf06:	46bd      	mov	sp, r7
 811bf08:	bd80      	pop	{r7, pc}
	...

0811bf0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 811bf0c:	b580      	push	{r7, lr}
 811bf0e:	b088      	sub	sp, #32
 811bf10:	af00      	add	r7, sp, #0
 811bf12:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 811bf14:	687b      	ldr	r3, [r7, #4]
 811bf16:	2b00      	cmp	r3, #0
 811bf18:	d10b      	bne.n	811bf32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 811bf1a:	687b      	ldr	r3, [r7, #4]
 811bf1c:	2b00      	cmp	r3, #0
 811bf1e:	d106      	bne.n	811bf2e <pbuf_free+0x22>
 811bf20:	4b3b      	ldr	r3, [pc, #236]	@ (811c010 <pbuf_free+0x104>)
 811bf22:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 811bf26:	493b      	ldr	r1, [pc, #236]	@ (811c014 <pbuf_free+0x108>)
 811bf28:	483b      	ldr	r0, [pc, #236]	@ (811c018 <pbuf_free+0x10c>)
 811bf2a:	f008 fb97 	bl	812465c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 811bf2e:	2300      	movs	r3, #0
 811bf30:	e069      	b.n	811c006 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 811bf32:	2300      	movs	r3, #0
 811bf34:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 811bf36:	e062      	b.n	811bffe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 811bf38:	f000 fb66 	bl	811c608 <sys_arch_protect>
 811bf3c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 811bf3e:	687b      	ldr	r3, [r7, #4]
 811bf40:	7b9b      	ldrb	r3, [r3, #14]
 811bf42:	2b00      	cmp	r3, #0
 811bf44:	d106      	bne.n	811bf54 <pbuf_free+0x48>
 811bf46:	4b32      	ldr	r3, [pc, #200]	@ (811c010 <pbuf_free+0x104>)
 811bf48:	f240 22f1 	movw	r2, #753	@ 0x2f1
 811bf4c:	4933      	ldr	r1, [pc, #204]	@ (811c01c <pbuf_free+0x110>)
 811bf4e:	4832      	ldr	r0, [pc, #200]	@ (811c018 <pbuf_free+0x10c>)
 811bf50:	f008 fb84 	bl	812465c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 811bf54:	687b      	ldr	r3, [r7, #4]
 811bf56:	7b9b      	ldrb	r3, [r3, #14]
 811bf58:	3b01      	subs	r3, #1
 811bf5a:	b2da      	uxtb	r2, r3
 811bf5c:	687b      	ldr	r3, [r7, #4]
 811bf5e:	739a      	strb	r2, [r3, #14]
 811bf60:	687b      	ldr	r3, [r7, #4]
 811bf62:	7b9b      	ldrb	r3, [r3, #14]
 811bf64:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 811bf66:	69b8      	ldr	r0, [r7, #24]
 811bf68:	f000 fb5c 	bl	811c624 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 811bf6c:	7dfb      	ldrb	r3, [r7, #23]
 811bf6e:	2b00      	cmp	r3, #0
 811bf70:	d143      	bne.n	811bffa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 811bf72:	687b      	ldr	r3, [r7, #4]
 811bf74:	681b      	ldr	r3, [r3, #0]
 811bf76:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 811bf78:	687b      	ldr	r3, [r7, #4]
 811bf7a:	7b1b      	ldrb	r3, [r3, #12]
 811bf7c:	f003 030f 	and.w	r3, r3, #15
 811bf80:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 811bf82:	687b      	ldr	r3, [r7, #4]
 811bf84:	7b5b      	ldrb	r3, [r3, #13]
 811bf86:	f003 0302 	and.w	r3, r3, #2
 811bf8a:	2b00      	cmp	r3, #0
 811bf8c:	d011      	beq.n	811bfb2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 811bf8e:	687b      	ldr	r3, [r7, #4]
 811bf90:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 811bf92:	68bb      	ldr	r3, [r7, #8]
 811bf94:	691b      	ldr	r3, [r3, #16]
 811bf96:	2b00      	cmp	r3, #0
 811bf98:	d106      	bne.n	811bfa8 <pbuf_free+0x9c>
 811bf9a:	4b1d      	ldr	r3, [pc, #116]	@ (811c010 <pbuf_free+0x104>)
 811bf9c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 811bfa0:	491f      	ldr	r1, [pc, #124]	@ (811c020 <pbuf_free+0x114>)
 811bfa2:	481d      	ldr	r0, [pc, #116]	@ (811c018 <pbuf_free+0x10c>)
 811bfa4:	f008 fb5a 	bl	812465c <iprintf>
        pc->custom_free_function(p);
 811bfa8:	68bb      	ldr	r3, [r7, #8]
 811bfaa:	691b      	ldr	r3, [r3, #16]
 811bfac:	6878      	ldr	r0, [r7, #4]
 811bfae:	4798      	blx	r3
 811bfb0:	e01d      	b.n	811bfee <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 811bfb2:	7bfb      	ldrb	r3, [r7, #15]
 811bfb4:	2b02      	cmp	r3, #2
 811bfb6:	d104      	bne.n	811bfc2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 811bfb8:	6879      	ldr	r1, [r7, #4]
 811bfba:	200c      	movs	r0, #12
 811bfbc:	f7ff f904 	bl	811b1c8 <memp_free>
 811bfc0:	e015      	b.n	811bfee <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 811bfc2:	7bfb      	ldrb	r3, [r7, #15]
 811bfc4:	2b01      	cmp	r3, #1
 811bfc6:	d104      	bne.n	811bfd2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 811bfc8:	6879      	ldr	r1, [r7, #4]
 811bfca:	200b      	movs	r0, #11
 811bfcc:	f7ff f8fc 	bl	811b1c8 <memp_free>
 811bfd0:	e00d      	b.n	811bfee <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 811bfd2:	7bfb      	ldrb	r3, [r7, #15]
 811bfd4:	2b00      	cmp	r3, #0
 811bfd6:	d103      	bne.n	811bfe0 <pbuf_free+0xd4>
          mem_free(p);
 811bfd8:	6878      	ldr	r0, [r7, #4]
 811bfda:	f7fe fd4f 	bl	811aa7c <mem_free>
 811bfde:	e006      	b.n	811bfee <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 811bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (811c010 <pbuf_free+0x104>)
 811bfe2:	f240 320f 	movw	r2, #783	@ 0x30f
 811bfe6:	490f      	ldr	r1, [pc, #60]	@ (811c024 <pbuf_free+0x118>)
 811bfe8:	480b      	ldr	r0, [pc, #44]	@ (811c018 <pbuf_free+0x10c>)
 811bfea:	f008 fb37 	bl	812465c <iprintf>
        }
      }
      count++;
 811bfee:	7ffb      	ldrb	r3, [r7, #31]
 811bff0:	3301      	adds	r3, #1
 811bff2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 811bff4:	693b      	ldr	r3, [r7, #16]
 811bff6:	607b      	str	r3, [r7, #4]
 811bff8:	e001      	b.n	811bffe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 811bffa:	2300      	movs	r3, #0
 811bffc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811bffe:	687b      	ldr	r3, [r7, #4]
 811c000:	2b00      	cmp	r3, #0
 811c002:	d199      	bne.n	811bf38 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 811c004:	7ffb      	ldrb	r3, [r7, #31]
}
 811c006:	4618      	mov	r0, r3
 811c008:	3720      	adds	r7, #32
 811c00a:	46bd      	mov	sp, r7
 811c00c:	bd80      	pop	{r7, pc}
 811c00e:	bf00      	nop
 811c010:	081264e4 	.word	0x081264e4
 811c014:	0812668c 	.word	0x0812668c
 811c018:	08126588 	.word	0x08126588
 811c01c:	081266b8 	.word	0x081266b8
 811c020:	081266d0 	.word	0x081266d0
 811c024:	081266f4 	.word	0x081266f4

0811c028 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 811c028:	b480      	push	{r7}
 811c02a:	b085      	sub	sp, #20
 811c02c:	af00      	add	r7, sp, #0
 811c02e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 811c030:	2300      	movs	r3, #0
 811c032:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 811c034:	e005      	b.n	811c042 <pbuf_clen+0x1a>
    ++len;
 811c036:	89fb      	ldrh	r3, [r7, #14]
 811c038:	3301      	adds	r3, #1
 811c03a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 811c03c:	687b      	ldr	r3, [r7, #4]
 811c03e:	681b      	ldr	r3, [r3, #0]
 811c040:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811c042:	687b      	ldr	r3, [r7, #4]
 811c044:	2b00      	cmp	r3, #0
 811c046:	d1f6      	bne.n	811c036 <pbuf_clen+0xe>
  }
  return len;
 811c048:	89fb      	ldrh	r3, [r7, #14]
}
 811c04a:	4618      	mov	r0, r3
 811c04c:	3714      	adds	r7, #20
 811c04e:	46bd      	mov	sp, r7
 811c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 811c054:	4770      	bx	lr
	...

0811c058 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 811c058:	b580      	push	{r7, lr}
 811c05a:	b084      	sub	sp, #16
 811c05c:	af00      	add	r7, sp, #0
 811c05e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 811c060:	687b      	ldr	r3, [r7, #4]
 811c062:	2b00      	cmp	r3, #0
 811c064:	d016      	beq.n	811c094 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 811c066:	f000 facf 	bl	811c608 <sys_arch_protect>
 811c06a:	60f8      	str	r0, [r7, #12]
 811c06c:	687b      	ldr	r3, [r7, #4]
 811c06e:	7b9b      	ldrb	r3, [r3, #14]
 811c070:	3301      	adds	r3, #1
 811c072:	b2da      	uxtb	r2, r3
 811c074:	687b      	ldr	r3, [r7, #4]
 811c076:	739a      	strb	r2, [r3, #14]
 811c078:	68f8      	ldr	r0, [r7, #12]
 811c07a:	f000 fad3 	bl	811c624 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 811c07e:	687b      	ldr	r3, [r7, #4]
 811c080:	7b9b      	ldrb	r3, [r3, #14]
 811c082:	2b00      	cmp	r3, #0
 811c084:	d106      	bne.n	811c094 <pbuf_ref+0x3c>
 811c086:	4b05      	ldr	r3, [pc, #20]	@ (811c09c <pbuf_ref+0x44>)
 811c088:	f240 3242 	movw	r2, #834	@ 0x342
 811c08c:	4904      	ldr	r1, [pc, #16]	@ (811c0a0 <pbuf_ref+0x48>)
 811c08e:	4805      	ldr	r0, [pc, #20]	@ (811c0a4 <pbuf_ref+0x4c>)
 811c090:	f008 fae4 	bl	812465c <iprintf>
  }
}
 811c094:	bf00      	nop
 811c096:	3710      	adds	r7, #16
 811c098:	46bd      	mov	sp, r7
 811c09a:	bd80      	pop	{r7, pc}
 811c09c:	081264e4 	.word	0x081264e4
 811c0a0:	08126708 	.word	0x08126708
 811c0a4:	08126588 	.word	0x08126588

0811c0a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 811c0a8:	b580      	push	{r7, lr}
 811c0aa:	b084      	sub	sp, #16
 811c0ac:	af00      	add	r7, sp, #0
 811c0ae:	6078      	str	r0, [r7, #4]
 811c0b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 811c0b2:	687b      	ldr	r3, [r7, #4]
 811c0b4:	2b00      	cmp	r3, #0
 811c0b6:	d002      	beq.n	811c0be <pbuf_cat+0x16>
 811c0b8:	683b      	ldr	r3, [r7, #0]
 811c0ba:	2b00      	cmp	r3, #0
 811c0bc:	d107      	bne.n	811c0ce <pbuf_cat+0x26>
 811c0be:	4b20      	ldr	r3, [pc, #128]	@ (811c140 <pbuf_cat+0x98>)
 811c0c0:	f240 3259 	movw	r2, #857	@ 0x359
 811c0c4:	491f      	ldr	r1, [pc, #124]	@ (811c144 <pbuf_cat+0x9c>)
 811c0c6:	4820      	ldr	r0, [pc, #128]	@ (811c148 <pbuf_cat+0xa0>)
 811c0c8:	f008 fac8 	bl	812465c <iprintf>
 811c0cc:	e034      	b.n	811c138 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 811c0ce:	687b      	ldr	r3, [r7, #4]
 811c0d0:	60fb      	str	r3, [r7, #12]
 811c0d2:	e00a      	b.n	811c0ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 811c0d4:	68fb      	ldr	r3, [r7, #12]
 811c0d6:	891a      	ldrh	r2, [r3, #8]
 811c0d8:	683b      	ldr	r3, [r7, #0]
 811c0da:	891b      	ldrh	r3, [r3, #8]
 811c0dc:	4413      	add	r3, r2
 811c0de:	b29a      	uxth	r2, r3
 811c0e0:	68fb      	ldr	r3, [r7, #12]
 811c0e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 811c0e4:	68fb      	ldr	r3, [r7, #12]
 811c0e6:	681b      	ldr	r3, [r3, #0]
 811c0e8:	60fb      	str	r3, [r7, #12]
 811c0ea:	68fb      	ldr	r3, [r7, #12]
 811c0ec:	681b      	ldr	r3, [r3, #0]
 811c0ee:	2b00      	cmp	r3, #0
 811c0f0:	d1f0      	bne.n	811c0d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 811c0f2:	68fb      	ldr	r3, [r7, #12]
 811c0f4:	891a      	ldrh	r2, [r3, #8]
 811c0f6:	68fb      	ldr	r3, [r7, #12]
 811c0f8:	895b      	ldrh	r3, [r3, #10]
 811c0fa:	429a      	cmp	r2, r3
 811c0fc:	d006      	beq.n	811c10c <pbuf_cat+0x64>
 811c0fe:	4b10      	ldr	r3, [pc, #64]	@ (811c140 <pbuf_cat+0x98>)
 811c100:	f240 3262 	movw	r2, #866	@ 0x362
 811c104:	4911      	ldr	r1, [pc, #68]	@ (811c14c <pbuf_cat+0xa4>)
 811c106:	4810      	ldr	r0, [pc, #64]	@ (811c148 <pbuf_cat+0xa0>)
 811c108:	f008 faa8 	bl	812465c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 811c10c:	68fb      	ldr	r3, [r7, #12]
 811c10e:	681b      	ldr	r3, [r3, #0]
 811c110:	2b00      	cmp	r3, #0
 811c112:	d006      	beq.n	811c122 <pbuf_cat+0x7a>
 811c114:	4b0a      	ldr	r3, [pc, #40]	@ (811c140 <pbuf_cat+0x98>)
 811c116:	f240 3263 	movw	r2, #867	@ 0x363
 811c11a:	490d      	ldr	r1, [pc, #52]	@ (811c150 <pbuf_cat+0xa8>)
 811c11c:	480a      	ldr	r0, [pc, #40]	@ (811c148 <pbuf_cat+0xa0>)
 811c11e:	f008 fa9d 	bl	812465c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 811c122:	68fb      	ldr	r3, [r7, #12]
 811c124:	891a      	ldrh	r2, [r3, #8]
 811c126:	683b      	ldr	r3, [r7, #0]
 811c128:	891b      	ldrh	r3, [r3, #8]
 811c12a:	4413      	add	r3, r2
 811c12c:	b29a      	uxth	r2, r3
 811c12e:	68fb      	ldr	r3, [r7, #12]
 811c130:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 811c132:	68fb      	ldr	r3, [r7, #12]
 811c134:	683a      	ldr	r2, [r7, #0]
 811c136:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 811c138:	3710      	adds	r7, #16
 811c13a:	46bd      	mov	sp, r7
 811c13c:	bd80      	pop	{r7, pc}
 811c13e:	bf00      	nop
 811c140:	081264e4 	.word	0x081264e4
 811c144:	0812671c 	.word	0x0812671c
 811c148:	08126588 	.word	0x08126588
 811c14c:	08126754 	.word	0x08126754
 811c150:	08126784 	.word	0x08126784

0811c154 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 811c154:	b580      	push	{r7, lr}
 811c156:	b082      	sub	sp, #8
 811c158:	af00      	add	r7, sp, #0
 811c15a:	6078      	str	r0, [r7, #4]
 811c15c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 811c15e:	6839      	ldr	r1, [r7, #0]
 811c160:	6878      	ldr	r0, [r7, #4]
 811c162:	f7ff ffa1 	bl	811c0a8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 811c166:	6838      	ldr	r0, [r7, #0]
 811c168:	f7ff ff76 	bl	811c058 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 811c16c:	bf00      	nop
 811c16e:	3708      	adds	r7, #8
 811c170:	46bd      	mov	sp, r7
 811c172:	bd80      	pop	{r7, pc}

0811c174 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 811c174:	b580      	push	{r7, lr}
 811c176:	b086      	sub	sp, #24
 811c178:	af00      	add	r7, sp, #0
 811c17a:	6078      	str	r0, [r7, #4]
 811c17c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 811c17e:	2300      	movs	r3, #0
 811c180:	617b      	str	r3, [r7, #20]
 811c182:	2300      	movs	r3, #0
 811c184:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 811c186:	687b      	ldr	r3, [r7, #4]
 811c188:	2b00      	cmp	r3, #0
 811c18a:	d008      	beq.n	811c19e <pbuf_copy+0x2a>
 811c18c:	683b      	ldr	r3, [r7, #0]
 811c18e:	2b00      	cmp	r3, #0
 811c190:	d005      	beq.n	811c19e <pbuf_copy+0x2a>
 811c192:	687b      	ldr	r3, [r7, #4]
 811c194:	891a      	ldrh	r2, [r3, #8]
 811c196:	683b      	ldr	r3, [r7, #0]
 811c198:	891b      	ldrh	r3, [r3, #8]
 811c19a:	429a      	cmp	r2, r3
 811c19c:	d209      	bcs.n	811c1b2 <pbuf_copy+0x3e>
 811c19e:	4b57      	ldr	r3, [pc, #348]	@ (811c2fc <pbuf_copy+0x188>)
 811c1a0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 811c1a4:	4956      	ldr	r1, [pc, #344]	@ (811c300 <pbuf_copy+0x18c>)
 811c1a6:	4857      	ldr	r0, [pc, #348]	@ (811c304 <pbuf_copy+0x190>)
 811c1a8:	f008 fa58 	bl	812465c <iprintf>
 811c1ac:	f06f 030f 	mvn.w	r3, #15
 811c1b0:	e09f      	b.n	811c2f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 811c1b2:	687b      	ldr	r3, [r7, #4]
 811c1b4:	895b      	ldrh	r3, [r3, #10]
 811c1b6:	461a      	mov	r2, r3
 811c1b8:	697b      	ldr	r3, [r7, #20]
 811c1ba:	1ad2      	subs	r2, r2, r3
 811c1bc:	683b      	ldr	r3, [r7, #0]
 811c1be:	895b      	ldrh	r3, [r3, #10]
 811c1c0:	4619      	mov	r1, r3
 811c1c2:	693b      	ldr	r3, [r7, #16]
 811c1c4:	1acb      	subs	r3, r1, r3
 811c1c6:	429a      	cmp	r2, r3
 811c1c8:	d306      	bcc.n	811c1d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 811c1ca:	683b      	ldr	r3, [r7, #0]
 811c1cc:	895b      	ldrh	r3, [r3, #10]
 811c1ce:	461a      	mov	r2, r3
 811c1d0:	693b      	ldr	r3, [r7, #16]
 811c1d2:	1ad3      	subs	r3, r2, r3
 811c1d4:	60fb      	str	r3, [r7, #12]
 811c1d6:	e005      	b.n	811c1e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 811c1d8:	687b      	ldr	r3, [r7, #4]
 811c1da:	895b      	ldrh	r3, [r3, #10]
 811c1dc:	461a      	mov	r2, r3
 811c1de:	697b      	ldr	r3, [r7, #20]
 811c1e0:	1ad3      	subs	r3, r2, r3
 811c1e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 811c1e4:	687b      	ldr	r3, [r7, #4]
 811c1e6:	685a      	ldr	r2, [r3, #4]
 811c1e8:	697b      	ldr	r3, [r7, #20]
 811c1ea:	18d0      	adds	r0, r2, r3
 811c1ec:	683b      	ldr	r3, [r7, #0]
 811c1ee:	685a      	ldr	r2, [r3, #4]
 811c1f0:	693b      	ldr	r3, [r7, #16]
 811c1f2:	4413      	add	r3, r2
 811c1f4:	68fa      	ldr	r2, [r7, #12]
 811c1f6:	4619      	mov	r1, r3
 811c1f8:	f008 fc93 	bl	8124b22 <memcpy>
    offset_to += len;
 811c1fc:	697a      	ldr	r2, [r7, #20]
 811c1fe:	68fb      	ldr	r3, [r7, #12]
 811c200:	4413      	add	r3, r2
 811c202:	617b      	str	r3, [r7, #20]
    offset_from += len;
 811c204:	693a      	ldr	r2, [r7, #16]
 811c206:	68fb      	ldr	r3, [r7, #12]
 811c208:	4413      	add	r3, r2
 811c20a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 811c20c:	687b      	ldr	r3, [r7, #4]
 811c20e:	895b      	ldrh	r3, [r3, #10]
 811c210:	461a      	mov	r2, r3
 811c212:	697b      	ldr	r3, [r7, #20]
 811c214:	4293      	cmp	r3, r2
 811c216:	d906      	bls.n	811c226 <pbuf_copy+0xb2>
 811c218:	4b38      	ldr	r3, [pc, #224]	@ (811c2fc <pbuf_copy+0x188>)
 811c21a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 811c21e:	493a      	ldr	r1, [pc, #232]	@ (811c308 <pbuf_copy+0x194>)
 811c220:	4838      	ldr	r0, [pc, #224]	@ (811c304 <pbuf_copy+0x190>)
 811c222:	f008 fa1b 	bl	812465c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 811c226:	683b      	ldr	r3, [r7, #0]
 811c228:	895b      	ldrh	r3, [r3, #10]
 811c22a:	461a      	mov	r2, r3
 811c22c:	693b      	ldr	r3, [r7, #16]
 811c22e:	4293      	cmp	r3, r2
 811c230:	d906      	bls.n	811c240 <pbuf_copy+0xcc>
 811c232:	4b32      	ldr	r3, [pc, #200]	@ (811c2fc <pbuf_copy+0x188>)
 811c234:	f240 32da 	movw	r2, #986	@ 0x3da
 811c238:	4934      	ldr	r1, [pc, #208]	@ (811c30c <pbuf_copy+0x198>)
 811c23a:	4832      	ldr	r0, [pc, #200]	@ (811c304 <pbuf_copy+0x190>)
 811c23c:	f008 fa0e 	bl	812465c <iprintf>
    if (offset_from >= p_from->len) {
 811c240:	683b      	ldr	r3, [r7, #0]
 811c242:	895b      	ldrh	r3, [r3, #10]
 811c244:	461a      	mov	r2, r3
 811c246:	693b      	ldr	r3, [r7, #16]
 811c248:	4293      	cmp	r3, r2
 811c24a:	d304      	bcc.n	811c256 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 811c24c:	2300      	movs	r3, #0
 811c24e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 811c250:	683b      	ldr	r3, [r7, #0]
 811c252:	681b      	ldr	r3, [r3, #0]
 811c254:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 811c256:	687b      	ldr	r3, [r7, #4]
 811c258:	895b      	ldrh	r3, [r3, #10]
 811c25a:	461a      	mov	r2, r3
 811c25c:	697b      	ldr	r3, [r7, #20]
 811c25e:	4293      	cmp	r3, r2
 811c260:	d114      	bne.n	811c28c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 811c262:	2300      	movs	r3, #0
 811c264:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 811c266:	687b      	ldr	r3, [r7, #4]
 811c268:	681b      	ldr	r3, [r3, #0]
 811c26a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 811c26c:	687b      	ldr	r3, [r7, #4]
 811c26e:	2b00      	cmp	r3, #0
 811c270:	d10c      	bne.n	811c28c <pbuf_copy+0x118>
 811c272:	683b      	ldr	r3, [r7, #0]
 811c274:	2b00      	cmp	r3, #0
 811c276:	d009      	beq.n	811c28c <pbuf_copy+0x118>
 811c278:	4b20      	ldr	r3, [pc, #128]	@ (811c2fc <pbuf_copy+0x188>)
 811c27a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 811c27e:	4924      	ldr	r1, [pc, #144]	@ (811c310 <pbuf_copy+0x19c>)
 811c280:	4820      	ldr	r0, [pc, #128]	@ (811c304 <pbuf_copy+0x190>)
 811c282:	f008 f9eb 	bl	812465c <iprintf>
 811c286:	f06f 030f 	mvn.w	r3, #15
 811c28a:	e032      	b.n	811c2f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 811c28c:	683b      	ldr	r3, [r7, #0]
 811c28e:	2b00      	cmp	r3, #0
 811c290:	d013      	beq.n	811c2ba <pbuf_copy+0x146>
 811c292:	683b      	ldr	r3, [r7, #0]
 811c294:	895a      	ldrh	r2, [r3, #10]
 811c296:	683b      	ldr	r3, [r7, #0]
 811c298:	891b      	ldrh	r3, [r3, #8]
 811c29a:	429a      	cmp	r2, r3
 811c29c:	d10d      	bne.n	811c2ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 811c29e:	683b      	ldr	r3, [r7, #0]
 811c2a0:	681b      	ldr	r3, [r3, #0]
 811c2a2:	2b00      	cmp	r3, #0
 811c2a4:	d009      	beq.n	811c2ba <pbuf_copy+0x146>
 811c2a6:	4b15      	ldr	r3, [pc, #84]	@ (811c2fc <pbuf_copy+0x188>)
 811c2a8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 811c2ac:	4919      	ldr	r1, [pc, #100]	@ (811c314 <pbuf_copy+0x1a0>)
 811c2ae:	4815      	ldr	r0, [pc, #84]	@ (811c304 <pbuf_copy+0x190>)
 811c2b0:	f008 f9d4 	bl	812465c <iprintf>
 811c2b4:	f06f 0305 	mvn.w	r3, #5
 811c2b8:	e01b      	b.n	811c2f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 811c2ba:	687b      	ldr	r3, [r7, #4]
 811c2bc:	2b00      	cmp	r3, #0
 811c2be:	d013      	beq.n	811c2e8 <pbuf_copy+0x174>
 811c2c0:	687b      	ldr	r3, [r7, #4]
 811c2c2:	895a      	ldrh	r2, [r3, #10]
 811c2c4:	687b      	ldr	r3, [r7, #4]
 811c2c6:	891b      	ldrh	r3, [r3, #8]
 811c2c8:	429a      	cmp	r2, r3
 811c2ca:	d10d      	bne.n	811c2e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 811c2cc:	687b      	ldr	r3, [r7, #4]
 811c2ce:	681b      	ldr	r3, [r3, #0]
 811c2d0:	2b00      	cmp	r3, #0
 811c2d2:	d009      	beq.n	811c2e8 <pbuf_copy+0x174>
 811c2d4:	4b09      	ldr	r3, [pc, #36]	@ (811c2fc <pbuf_copy+0x188>)
 811c2d6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 811c2da:	490e      	ldr	r1, [pc, #56]	@ (811c314 <pbuf_copy+0x1a0>)
 811c2dc:	4809      	ldr	r0, [pc, #36]	@ (811c304 <pbuf_copy+0x190>)
 811c2de:	f008 f9bd 	bl	812465c <iprintf>
 811c2e2:	f06f 0305 	mvn.w	r3, #5
 811c2e6:	e004      	b.n	811c2f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 811c2e8:	683b      	ldr	r3, [r7, #0]
 811c2ea:	2b00      	cmp	r3, #0
 811c2ec:	f47f af61 	bne.w	811c1b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 811c2f0:	2300      	movs	r3, #0
}
 811c2f2:	4618      	mov	r0, r3
 811c2f4:	3718      	adds	r7, #24
 811c2f6:	46bd      	mov	sp, r7
 811c2f8:	bd80      	pop	{r7, pc}
 811c2fa:	bf00      	nop
 811c2fc:	081264e4 	.word	0x081264e4
 811c300:	081267d0 	.word	0x081267d0
 811c304:	08126588 	.word	0x08126588
 811c308:	08126800 	.word	0x08126800
 811c30c:	08126818 	.word	0x08126818
 811c310:	08126834 	.word	0x08126834
 811c314:	08126844 	.word	0x08126844

0811c318 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 811c318:	b580      	push	{r7, lr}
 811c31a:	b088      	sub	sp, #32
 811c31c:	af00      	add	r7, sp, #0
 811c31e:	60f8      	str	r0, [r7, #12]
 811c320:	60b9      	str	r1, [r7, #8]
 811c322:	4611      	mov	r1, r2
 811c324:	461a      	mov	r2, r3
 811c326:	460b      	mov	r3, r1
 811c328:	80fb      	strh	r3, [r7, #6]
 811c32a:	4613      	mov	r3, r2
 811c32c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 811c32e:	2300      	movs	r3, #0
 811c330:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 811c332:	2300      	movs	r3, #0
 811c334:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 811c336:	68fb      	ldr	r3, [r7, #12]
 811c338:	2b00      	cmp	r3, #0
 811c33a:	d108      	bne.n	811c34e <pbuf_copy_partial+0x36>
 811c33c:	4b2b      	ldr	r3, [pc, #172]	@ (811c3ec <pbuf_copy_partial+0xd4>)
 811c33e:	f240 420a 	movw	r2, #1034	@ 0x40a
 811c342:	492b      	ldr	r1, [pc, #172]	@ (811c3f0 <pbuf_copy_partial+0xd8>)
 811c344:	482b      	ldr	r0, [pc, #172]	@ (811c3f4 <pbuf_copy_partial+0xdc>)
 811c346:	f008 f989 	bl	812465c <iprintf>
 811c34a:	2300      	movs	r3, #0
 811c34c:	e04a      	b.n	811c3e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 811c34e:	68bb      	ldr	r3, [r7, #8]
 811c350:	2b00      	cmp	r3, #0
 811c352:	d108      	bne.n	811c366 <pbuf_copy_partial+0x4e>
 811c354:	4b25      	ldr	r3, [pc, #148]	@ (811c3ec <pbuf_copy_partial+0xd4>)
 811c356:	f240 420b 	movw	r2, #1035	@ 0x40b
 811c35a:	4927      	ldr	r1, [pc, #156]	@ (811c3f8 <pbuf_copy_partial+0xe0>)
 811c35c:	4825      	ldr	r0, [pc, #148]	@ (811c3f4 <pbuf_copy_partial+0xdc>)
 811c35e:	f008 f97d 	bl	812465c <iprintf>
 811c362:	2300      	movs	r3, #0
 811c364:	e03e      	b.n	811c3e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 811c366:	68fb      	ldr	r3, [r7, #12]
 811c368:	61fb      	str	r3, [r7, #28]
 811c36a:	e034      	b.n	811c3d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 811c36c:	88bb      	ldrh	r3, [r7, #4]
 811c36e:	2b00      	cmp	r3, #0
 811c370:	d00a      	beq.n	811c388 <pbuf_copy_partial+0x70>
 811c372:	69fb      	ldr	r3, [r7, #28]
 811c374:	895b      	ldrh	r3, [r3, #10]
 811c376:	88ba      	ldrh	r2, [r7, #4]
 811c378:	429a      	cmp	r2, r3
 811c37a:	d305      	bcc.n	811c388 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 811c37c:	69fb      	ldr	r3, [r7, #28]
 811c37e:	895b      	ldrh	r3, [r3, #10]
 811c380:	88ba      	ldrh	r2, [r7, #4]
 811c382:	1ad3      	subs	r3, r2, r3
 811c384:	80bb      	strh	r3, [r7, #4]
 811c386:	e023      	b.n	811c3d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 811c388:	69fb      	ldr	r3, [r7, #28]
 811c38a:	895a      	ldrh	r2, [r3, #10]
 811c38c:	88bb      	ldrh	r3, [r7, #4]
 811c38e:	1ad3      	subs	r3, r2, r3
 811c390:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 811c392:	8b3a      	ldrh	r2, [r7, #24]
 811c394:	88fb      	ldrh	r3, [r7, #6]
 811c396:	429a      	cmp	r2, r3
 811c398:	d901      	bls.n	811c39e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 811c39a:	88fb      	ldrh	r3, [r7, #6]
 811c39c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 811c39e:	8b7b      	ldrh	r3, [r7, #26]
 811c3a0:	68ba      	ldr	r2, [r7, #8]
 811c3a2:	18d0      	adds	r0, r2, r3
 811c3a4:	69fb      	ldr	r3, [r7, #28]
 811c3a6:	685a      	ldr	r2, [r3, #4]
 811c3a8:	88bb      	ldrh	r3, [r7, #4]
 811c3aa:	4413      	add	r3, r2
 811c3ac:	8b3a      	ldrh	r2, [r7, #24]
 811c3ae:	4619      	mov	r1, r3
 811c3b0:	f008 fbb7 	bl	8124b22 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 811c3b4:	8afa      	ldrh	r2, [r7, #22]
 811c3b6:	8b3b      	ldrh	r3, [r7, #24]
 811c3b8:	4413      	add	r3, r2
 811c3ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 811c3bc:	8b7a      	ldrh	r2, [r7, #26]
 811c3be:	8b3b      	ldrh	r3, [r7, #24]
 811c3c0:	4413      	add	r3, r2
 811c3c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 811c3c4:	88fa      	ldrh	r2, [r7, #6]
 811c3c6:	8b3b      	ldrh	r3, [r7, #24]
 811c3c8:	1ad3      	subs	r3, r2, r3
 811c3ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 811c3cc:	2300      	movs	r3, #0
 811c3ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 811c3d0:	69fb      	ldr	r3, [r7, #28]
 811c3d2:	681b      	ldr	r3, [r3, #0]
 811c3d4:	61fb      	str	r3, [r7, #28]
 811c3d6:	88fb      	ldrh	r3, [r7, #6]
 811c3d8:	2b00      	cmp	r3, #0
 811c3da:	d002      	beq.n	811c3e2 <pbuf_copy_partial+0xca>
 811c3dc:	69fb      	ldr	r3, [r7, #28]
 811c3de:	2b00      	cmp	r3, #0
 811c3e0:	d1c4      	bne.n	811c36c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 811c3e2:	8afb      	ldrh	r3, [r7, #22]
}
 811c3e4:	4618      	mov	r0, r3
 811c3e6:	3720      	adds	r7, #32
 811c3e8:	46bd      	mov	sp, r7
 811c3ea:	bd80      	pop	{r7, pc}
 811c3ec:	081264e4 	.word	0x081264e4
 811c3f0:	08126870 	.word	0x08126870
 811c3f4:	08126588 	.word	0x08126588
 811c3f8:	08126890 	.word	0x08126890

0811c3fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 811c3fc:	b580      	push	{r7, lr}
 811c3fe:	b084      	sub	sp, #16
 811c400:	af00      	add	r7, sp, #0
 811c402:	4603      	mov	r3, r0
 811c404:	603a      	str	r2, [r7, #0]
 811c406:	71fb      	strb	r3, [r7, #7]
 811c408:	460b      	mov	r3, r1
 811c40a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 811c40c:	683b      	ldr	r3, [r7, #0]
 811c40e:	8919      	ldrh	r1, [r3, #8]
 811c410:	88ba      	ldrh	r2, [r7, #4]
 811c412:	79fb      	ldrb	r3, [r7, #7]
 811c414:	4618      	mov	r0, r3
 811c416:	f7ff fa97 	bl	811b948 <pbuf_alloc>
 811c41a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 811c41c:	68fb      	ldr	r3, [r7, #12]
 811c41e:	2b00      	cmp	r3, #0
 811c420:	d101      	bne.n	811c426 <pbuf_clone+0x2a>
    return NULL;
 811c422:	2300      	movs	r3, #0
 811c424:	e011      	b.n	811c44a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 811c426:	6839      	ldr	r1, [r7, #0]
 811c428:	68f8      	ldr	r0, [r7, #12]
 811c42a:	f7ff fea3 	bl	811c174 <pbuf_copy>
 811c42e:	4603      	mov	r3, r0
 811c430:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 811c432:	f997 300b 	ldrsb.w	r3, [r7, #11]
 811c436:	2b00      	cmp	r3, #0
 811c438:	d006      	beq.n	811c448 <pbuf_clone+0x4c>
 811c43a:	4b06      	ldr	r3, [pc, #24]	@ (811c454 <pbuf_clone+0x58>)
 811c43c:	f240 5224 	movw	r2, #1316	@ 0x524
 811c440:	4905      	ldr	r1, [pc, #20]	@ (811c458 <pbuf_clone+0x5c>)
 811c442:	4806      	ldr	r0, [pc, #24]	@ (811c45c <pbuf_clone+0x60>)
 811c444:	f008 f90a 	bl	812465c <iprintf>
  return q;
 811c448:	68fb      	ldr	r3, [r7, #12]
}
 811c44a:	4618      	mov	r0, r3
 811c44c:	3710      	adds	r7, #16
 811c44e:	46bd      	mov	sp, r7
 811c450:	bd80      	pop	{r7, pc}
 811c452:	bf00      	nop
 811c454:	081264e4 	.word	0x081264e4
 811c458:	0812699c 	.word	0x0812699c
 811c45c:	08126588 	.word	0x08126588

0811c460 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 811c460:	b580      	push	{r7, lr}
 811c462:	b082      	sub	sp, #8
 811c464:	af00      	add	r7, sp, #0
 811c466:	6078      	str	r0, [r7, #4]
 811c468:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 811c46a:	683b      	ldr	r3, [r7, #0]
 811c46c:	2200      	movs	r2, #0
 811c46e:	2104      	movs	r1, #4
 811c470:	4618      	mov	r0, r3
 811c472:	f7f7 fa93 	bl	811399c <osMessageQueueNew>
 811c476:	4602      	mov	r2, r0
 811c478:	687b      	ldr	r3, [r7, #4]
 811c47a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 811c47c:	687b      	ldr	r3, [r7, #4]
 811c47e:	681b      	ldr	r3, [r3, #0]
 811c480:	2b00      	cmp	r3, #0
 811c482:	d102      	bne.n	811c48a <sys_mbox_new+0x2a>
    return ERR_MEM;
 811c484:	f04f 33ff 	mov.w	r3, #4294967295
 811c488:	e000      	b.n	811c48c <sys_mbox_new+0x2c>

  return ERR_OK;
 811c48a:	2300      	movs	r3, #0
}
 811c48c:	4618      	mov	r0, r3
 811c48e:	3708      	adds	r7, #8
 811c490:	46bd      	mov	sp, r7
 811c492:	bd80      	pop	{r7, pc}

0811c494 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 811c494:	b580      	push	{r7, lr}
 811c496:	b084      	sub	sp, #16
 811c498:	af00      	add	r7, sp, #0
 811c49a:	6078      	str	r0, [r7, #4]
 811c49c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 811c49e:	687b      	ldr	r3, [r7, #4]
 811c4a0:	6818      	ldr	r0, [r3, #0]
 811c4a2:	4639      	mov	r1, r7
 811c4a4:	2300      	movs	r3, #0
 811c4a6:	2200      	movs	r2, #0
 811c4a8:	f7f7 faec 	bl	8113a84 <osMessageQueuePut>
 811c4ac:	4603      	mov	r3, r0
 811c4ae:	2b00      	cmp	r3, #0
 811c4b0:	d102      	bne.n	811c4b8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 811c4b2:	2300      	movs	r3, #0
 811c4b4:	73fb      	strb	r3, [r7, #15]
 811c4b6:	e001      	b.n	811c4bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 811c4b8:	23ff      	movs	r3, #255	@ 0xff
 811c4ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 811c4bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811c4c0:	4618      	mov	r0, r3
 811c4c2:	3710      	adds	r7, #16
 811c4c4:	46bd      	mov	sp, r7
 811c4c6:	bd80      	pop	{r7, pc}

0811c4c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 811c4c8:	b580      	push	{r7, lr}
 811c4ca:	b086      	sub	sp, #24
 811c4cc:	af00      	add	r7, sp, #0
 811c4ce:	60f8      	str	r0, [r7, #12]
 811c4d0:	60b9      	str	r1, [r7, #8]
 811c4d2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 811c4d4:	f7f6 ff72 	bl	81133bc <osKernelGetTickCount>
 811c4d8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 811c4da:	687b      	ldr	r3, [r7, #4]
 811c4dc:	2b00      	cmp	r3, #0
 811c4de:	d013      	beq.n	811c508 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 811c4e0:	68fb      	ldr	r3, [r7, #12]
 811c4e2:	6818      	ldr	r0, [r3, #0]
 811c4e4:	687b      	ldr	r3, [r7, #4]
 811c4e6:	2200      	movs	r2, #0
 811c4e8:	68b9      	ldr	r1, [r7, #8]
 811c4ea:	f7f7 fb2b 	bl	8113b44 <osMessageQueueGet>
 811c4ee:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 811c4f0:	693b      	ldr	r3, [r7, #16]
 811c4f2:	2b00      	cmp	r3, #0
 811c4f4:	d105      	bne.n	811c502 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 811c4f6:	f7f6 ff61 	bl	81133bc <osKernelGetTickCount>
 811c4fa:	4602      	mov	r2, r0
 811c4fc:	697b      	ldr	r3, [r7, #20]
 811c4fe:	1ad3      	subs	r3, r2, r3
 811c500:	e00f      	b.n	811c522 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 811c502:	f04f 33ff 	mov.w	r3, #4294967295
 811c506:	e00c      	b.n	811c522 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 811c508:	68fb      	ldr	r3, [r7, #12]
 811c50a:	6818      	ldr	r0, [r3, #0]
 811c50c:	f04f 33ff 	mov.w	r3, #4294967295
 811c510:	2200      	movs	r2, #0
 811c512:	68b9      	ldr	r1, [r7, #8]
 811c514:	f7f7 fb16 	bl	8113b44 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 811c518:	f7f6 ff50 	bl	81133bc <osKernelGetTickCount>
 811c51c:	4602      	mov	r2, r0
 811c51e:	697b      	ldr	r3, [r7, #20]
 811c520:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 811c522:	4618      	mov	r0, r3
 811c524:	3718      	adds	r7, #24
 811c526:	46bd      	mov	sp, r7
 811c528:	bd80      	pop	{r7, pc}

0811c52a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 811c52a:	b480      	push	{r7}
 811c52c:	b083      	sub	sp, #12
 811c52e:	af00      	add	r7, sp, #0
 811c530:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 811c532:	687b      	ldr	r3, [r7, #4]
 811c534:	681b      	ldr	r3, [r3, #0]
 811c536:	2b00      	cmp	r3, #0
 811c538:	d101      	bne.n	811c53e <sys_mbox_valid+0x14>
    return 0;
 811c53a:	2300      	movs	r3, #0
 811c53c:	e000      	b.n	811c540 <sys_mbox_valid+0x16>
  else
    return 1;
 811c53e:	2301      	movs	r3, #1
}
 811c540:	4618      	mov	r0, r3
 811c542:	370c      	adds	r7, #12
 811c544:	46bd      	mov	sp, r7
 811c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 811c54a:	4770      	bx	lr

0811c54c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 811c54c:	b580      	push	{r7, lr}
 811c54e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 811c550:	2000      	movs	r0, #0
 811c552:	f7f6 fff5 	bl	8113540 <osMutexNew>
 811c556:	4603      	mov	r3, r0
 811c558:	4a01      	ldr	r2, [pc, #4]	@ (811c560 <sys_init+0x14>)
 811c55a:	6013      	str	r3, [r2, #0]
#endif
}
 811c55c:	bf00      	nop
 811c55e:	bd80      	pop	{r7, pc}
 811c560:	1000e494 	.word	0x1000e494

0811c564 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 811c564:	b580      	push	{r7, lr}
 811c566:	b082      	sub	sp, #8
 811c568:	af00      	add	r7, sp, #0
 811c56a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 811c56c:	2000      	movs	r0, #0
 811c56e:	f7f6 ffe7 	bl	8113540 <osMutexNew>
 811c572:	4602      	mov	r2, r0
 811c574:	687b      	ldr	r3, [r7, #4]
 811c576:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 811c578:	687b      	ldr	r3, [r7, #4]
 811c57a:	681b      	ldr	r3, [r3, #0]
 811c57c:	2b00      	cmp	r3, #0
 811c57e:	d102      	bne.n	811c586 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 811c580:	f04f 33ff 	mov.w	r3, #4294967295
 811c584:	e000      	b.n	811c588 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 811c586:	2300      	movs	r3, #0
}
 811c588:	4618      	mov	r0, r3
 811c58a:	3708      	adds	r7, #8
 811c58c:	46bd      	mov	sp, r7
 811c58e:	bd80      	pop	{r7, pc}

0811c590 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 811c590:	b580      	push	{r7, lr}
 811c592:	b082      	sub	sp, #8
 811c594:	af00      	add	r7, sp, #0
 811c596:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 811c598:	687b      	ldr	r3, [r7, #4]
 811c59a:	681b      	ldr	r3, [r3, #0]
 811c59c:	f04f 31ff 	mov.w	r1, #4294967295
 811c5a0:	4618      	mov	r0, r3
 811c5a2:	f7f7 f853 	bl	811364c <osMutexAcquire>
#endif
}
 811c5a6:	bf00      	nop
 811c5a8:	3708      	adds	r7, #8
 811c5aa:	46bd      	mov	sp, r7
 811c5ac:	bd80      	pop	{r7, pc}

0811c5ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 811c5ae:	b580      	push	{r7, lr}
 811c5b0:	b082      	sub	sp, #8
 811c5b2:	af00      	add	r7, sp, #0
 811c5b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 811c5b6:	687b      	ldr	r3, [r7, #4]
 811c5b8:	681b      	ldr	r3, [r3, #0]
 811c5ba:	4618      	mov	r0, r3
 811c5bc:	f7f7 f891 	bl	81136e2 <osMutexRelease>
}
 811c5c0:	bf00      	nop
 811c5c2:	3708      	adds	r7, #8
 811c5c4:	46bd      	mov	sp, r7
 811c5c6:	bd80      	pop	{r7, pc}

0811c5c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 811c5c8:	b580      	push	{r7, lr}
 811c5ca:	b08e      	sub	sp, #56	@ 0x38
 811c5cc:	af00      	add	r7, sp, #0
 811c5ce:	60f8      	str	r0, [r7, #12]
 811c5d0:	60b9      	str	r1, [r7, #8]
 811c5d2:	607a      	str	r2, [r7, #4]
 811c5d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 811c5d6:	f107 0314 	add.w	r3, r7, #20
 811c5da:	2224      	movs	r2, #36	@ 0x24
 811c5dc:	2100      	movs	r1, #0
 811c5de:	4618      	mov	r0, r3
 811c5e0:	f008 f950 	bl	8124884 <memset>
 811c5e4:	68fb      	ldr	r3, [r7, #12]
 811c5e6:	617b      	str	r3, [r7, #20]
 811c5e8:	683b      	ldr	r3, [r7, #0]
 811c5ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 811c5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811c5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 811c5f0:	f107 0314 	add.w	r3, r7, #20
 811c5f4:	461a      	mov	r2, r3
 811c5f6:	6879      	ldr	r1, [r7, #4]
 811c5f8:	68b8      	ldr	r0, [r7, #8]
 811c5fa:	f7f6 fef4 	bl	81133e6 <osThreadNew>
 811c5fe:	4603      	mov	r3, r0
#endif
}
 811c600:	4618      	mov	r0, r3
 811c602:	3738      	adds	r7, #56	@ 0x38
 811c604:	46bd      	mov	sp, r7
 811c606:	bd80      	pop	{r7, pc}

0811c608 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 811c608:	b580      	push	{r7, lr}
 811c60a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 811c60c:	4b04      	ldr	r3, [pc, #16]	@ (811c620 <sys_arch_protect+0x18>)
 811c60e:	681b      	ldr	r3, [r3, #0]
 811c610:	f04f 31ff 	mov.w	r1, #4294967295
 811c614:	4618      	mov	r0, r3
 811c616:	f7f7 f819 	bl	811364c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 811c61a:	2301      	movs	r3, #1
}
 811c61c:	4618      	mov	r0, r3
 811c61e:	bd80      	pop	{r7, pc}
 811c620:	1000e494 	.word	0x1000e494

0811c624 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 811c624:	b580      	push	{r7, lr}
 811c626:	b082      	sub	sp, #8
 811c628:	af00      	add	r7, sp, #0
 811c62a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 811c62c:	4b04      	ldr	r3, [pc, #16]	@ (811c640 <sys_arch_unprotect+0x1c>)
 811c62e:	681b      	ldr	r3, [r3, #0]
 811c630:	4618      	mov	r0, r3
 811c632:	f7f7 f856 	bl	81136e2 <osMutexRelease>
}
 811c636:	bf00      	nop
 811c638:	3708      	adds	r7, #8
 811c63a:	46bd      	mov	sp, r7
 811c63c:	bd80      	pop	{r7, pc}
 811c63e:	bf00      	nop
 811c640:	1000e494 	.word	0x1000e494

0811c644 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 811c644:	b580      	push	{r7, lr}
 811c646:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 811c648:	f007 fa90 	bl	8123b6c <rand>
 811c64c:	4603      	mov	r3, r0
 811c64e:	b29b      	uxth	r3, r3
 811c650:	f3c3 030d 	ubfx	r3, r3, #0, #14
 811c654:	b29b      	uxth	r3, r3
 811c656:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 811c65a:	b29a      	uxth	r2, r3
 811c65c:	4b01      	ldr	r3, [pc, #4]	@ (811c664 <tcp_init+0x20>)
 811c65e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 811c660:	bf00      	nop
 811c662:	bd80      	pop	{r7, pc}
 811c664:	10000028 	.word	0x10000028

0811c668 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 811c668:	b580      	push	{r7, lr}
 811c66a:	b082      	sub	sp, #8
 811c66c:	af00      	add	r7, sp, #0
 811c66e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 811c670:	687b      	ldr	r3, [r7, #4]
 811c672:	7d1b      	ldrb	r3, [r3, #20]
 811c674:	2b01      	cmp	r3, #1
 811c676:	d105      	bne.n	811c684 <tcp_free+0x1c>
 811c678:	4b06      	ldr	r3, [pc, #24]	@ (811c694 <tcp_free+0x2c>)
 811c67a:	22d4      	movs	r2, #212	@ 0xd4
 811c67c:	4906      	ldr	r1, [pc, #24]	@ (811c698 <tcp_free+0x30>)
 811c67e:	4807      	ldr	r0, [pc, #28]	@ (811c69c <tcp_free+0x34>)
 811c680:	f007 ffec 	bl	812465c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 811c684:	6879      	ldr	r1, [r7, #4]
 811c686:	2001      	movs	r0, #1
 811c688:	f7fe fd9e 	bl	811b1c8 <memp_free>
}
 811c68c:	bf00      	nop
 811c68e:	3708      	adds	r7, #8
 811c690:	46bd      	mov	sp, r7
 811c692:	bd80      	pop	{r7, pc}
 811c694:	08126a28 	.word	0x08126a28
 811c698:	08126a9c 	.word	0x08126a9c
 811c69c:	08126ab0 	.word	0x08126ab0

0811c6a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 811c6a0:	b580      	push	{r7, lr}
 811c6a2:	b082      	sub	sp, #8
 811c6a4:	af00      	add	r7, sp, #0
 811c6a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 811c6a8:	687b      	ldr	r3, [r7, #4]
 811c6aa:	7d1b      	ldrb	r3, [r3, #20]
 811c6ac:	2b01      	cmp	r3, #1
 811c6ae:	d105      	bne.n	811c6bc <tcp_free_listen+0x1c>
 811c6b0:	4b06      	ldr	r3, [pc, #24]	@ (811c6cc <tcp_free_listen+0x2c>)
 811c6b2:	22df      	movs	r2, #223	@ 0xdf
 811c6b4:	4906      	ldr	r1, [pc, #24]	@ (811c6d0 <tcp_free_listen+0x30>)
 811c6b6:	4807      	ldr	r0, [pc, #28]	@ (811c6d4 <tcp_free_listen+0x34>)
 811c6b8:	f007 ffd0 	bl	812465c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 811c6bc:	6879      	ldr	r1, [r7, #4]
 811c6be:	2002      	movs	r0, #2
 811c6c0:	f7fe fd82 	bl	811b1c8 <memp_free>
}
 811c6c4:	bf00      	nop
 811c6c6:	3708      	adds	r7, #8
 811c6c8:	46bd      	mov	sp, r7
 811c6ca:	bd80      	pop	{r7, pc}
 811c6cc:	08126a28 	.word	0x08126a28
 811c6d0:	08126ad8 	.word	0x08126ad8
 811c6d4:	08126ab0 	.word	0x08126ab0

0811c6d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 811c6d8:	b580      	push	{r7, lr}
 811c6da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 811c6dc:	f001 f8a2 	bl	811d824 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 811c6e0:	4b07      	ldr	r3, [pc, #28]	@ (811c700 <tcp_tmr+0x28>)
 811c6e2:	781b      	ldrb	r3, [r3, #0]
 811c6e4:	3301      	adds	r3, #1
 811c6e6:	b2da      	uxtb	r2, r3
 811c6e8:	4b05      	ldr	r3, [pc, #20]	@ (811c700 <tcp_tmr+0x28>)
 811c6ea:	701a      	strb	r2, [r3, #0]
 811c6ec:	4b04      	ldr	r3, [pc, #16]	@ (811c700 <tcp_tmr+0x28>)
 811c6ee:	781b      	ldrb	r3, [r3, #0]
 811c6f0:	f003 0301 	and.w	r3, r3, #1
 811c6f4:	2b00      	cmp	r3, #0
 811c6f6:	d001      	beq.n	811c6fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 811c6f8:	f000 fd48 	bl	811d18c <tcp_slowtmr>
  }
}
 811c6fc:	bf00      	nop
 811c6fe:	bd80      	pop	{r7, pc}
 811c700:	1000e4ad 	.word	0x1000e4ad

0811c704 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 811c704:	b580      	push	{r7, lr}
 811c706:	b084      	sub	sp, #16
 811c708:	af00      	add	r7, sp, #0
 811c70a:	6078      	str	r0, [r7, #4]
 811c70c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 811c70e:	683b      	ldr	r3, [r7, #0]
 811c710:	2b00      	cmp	r3, #0
 811c712:	d105      	bne.n	811c720 <tcp_remove_listener+0x1c>
 811c714:	4b0d      	ldr	r3, [pc, #52]	@ (811c74c <tcp_remove_listener+0x48>)
 811c716:	22ff      	movs	r2, #255	@ 0xff
 811c718:	490d      	ldr	r1, [pc, #52]	@ (811c750 <tcp_remove_listener+0x4c>)
 811c71a:	480e      	ldr	r0, [pc, #56]	@ (811c754 <tcp_remove_listener+0x50>)
 811c71c:	f007 ff9e 	bl	812465c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811c720:	687b      	ldr	r3, [r7, #4]
 811c722:	60fb      	str	r3, [r7, #12]
 811c724:	e00a      	b.n	811c73c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 811c726:	68fb      	ldr	r3, [r7, #12]
 811c728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811c72a:	683a      	ldr	r2, [r7, #0]
 811c72c:	429a      	cmp	r2, r3
 811c72e:	d102      	bne.n	811c736 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 811c730:	68fb      	ldr	r3, [r7, #12]
 811c732:	2200      	movs	r2, #0
 811c734:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811c736:	68fb      	ldr	r3, [r7, #12]
 811c738:	68db      	ldr	r3, [r3, #12]
 811c73a:	60fb      	str	r3, [r7, #12]
 811c73c:	68fb      	ldr	r3, [r7, #12]
 811c73e:	2b00      	cmp	r3, #0
 811c740:	d1f1      	bne.n	811c726 <tcp_remove_listener+0x22>
    }
  }
}
 811c742:	bf00      	nop
 811c744:	bf00      	nop
 811c746:	3710      	adds	r7, #16
 811c748:	46bd      	mov	sp, r7
 811c74a:	bd80      	pop	{r7, pc}
 811c74c:	08126a28 	.word	0x08126a28
 811c750:	08126af4 	.word	0x08126af4
 811c754:	08126ab0 	.word	0x08126ab0

0811c758 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 811c758:	b580      	push	{r7, lr}
 811c75a:	b084      	sub	sp, #16
 811c75c:	af00      	add	r7, sp, #0
 811c75e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811c760:	687b      	ldr	r3, [r7, #4]
 811c762:	2b00      	cmp	r3, #0
 811c764:	d106      	bne.n	811c774 <tcp_listen_closed+0x1c>
 811c766:	4b14      	ldr	r3, [pc, #80]	@ (811c7b8 <tcp_listen_closed+0x60>)
 811c768:	f240 1211 	movw	r2, #273	@ 0x111
 811c76c:	4913      	ldr	r1, [pc, #76]	@ (811c7bc <tcp_listen_closed+0x64>)
 811c76e:	4814      	ldr	r0, [pc, #80]	@ (811c7c0 <tcp_listen_closed+0x68>)
 811c770:	f007 ff74 	bl	812465c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 811c774:	687b      	ldr	r3, [r7, #4]
 811c776:	7d1b      	ldrb	r3, [r3, #20]
 811c778:	2b01      	cmp	r3, #1
 811c77a:	d006      	beq.n	811c78a <tcp_listen_closed+0x32>
 811c77c:	4b0e      	ldr	r3, [pc, #56]	@ (811c7b8 <tcp_listen_closed+0x60>)
 811c77e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 811c782:	4910      	ldr	r1, [pc, #64]	@ (811c7c4 <tcp_listen_closed+0x6c>)
 811c784:	480e      	ldr	r0, [pc, #56]	@ (811c7c0 <tcp_listen_closed+0x68>)
 811c786:	f007 ff69 	bl	812465c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811c78a:	2301      	movs	r3, #1
 811c78c:	60fb      	str	r3, [r7, #12]
 811c78e:	e00b      	b.n	811c7a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 811c790:	4a0d      	ldr	r2, [pc, #52]	@ (811c7c8 <tcp_listen_closed+0x70>)
 811c792:	68fb      	ldr	r3, [r7, #12]
 811c794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811c798:	681b      	ldr	r3, [r3, #0]
 811c79a:	6879      	ldr	r1, [r7, #4]
 811c79c:	4618      	mov	r0, r3
 811c79e:	f7ff ffb1 	bl	811c704 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811c7a2:	68fb      	ldr	r3, [r7, #12]
 811c7a4:	3301      	adds	r3, #1
 811c7a6:	60fb      	str	r3, [r7, #12]
 811c7a8:	68fb      	ldr	r3, [r7, #12]
 811c7aa:	2b03      	cmp	r3, #3
 811c7ac:	d9f0      	bls.n	811c790 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 811c7ae:	bf00      	nop
 811c7b0:	bf00      	nop
 811c7b2:	3710      	adds	r7, #16
 811c7b4:	46bd      	mov	sp, r7
 811c7b6:	bd80      	pop	{r7, pc}
 811c7b8:	08126a28 	.word	0x08126a28
 811c7bc:	08126b1c 	.word	0x08126b1c
 811c7c0:	08126ab0 	.word	0x08126ab0
 811c7c4:	08126b28 	.word	0x08126b28
 811c7c8:	081286d4 	.word	0x081286d4

0811c7cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 811c7cc:	b5b0      	push	{r4, r5, r7, lr}
 811c7ce:	b088      	sub	sp, #32
 811c7d0:	af04      	add	r7, sp, #16
 811c7d2:	6078      	str	r0, [r7, #4]
 811c7d4:	460b      	mov	r3, r1
 811c7d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 811c7d8:	687b      	ldr	r3, [r7, #4]
 811c7da:	2b00      	cmp	r3, #0
 811c7dc:	d106      	bne.n	811c7ec <tcp_close_shutdown+0x20>
 811c7de:	4b63      	ldr	r3, [pc, #396]	@ (811c96c <tcp_close_shutdown+0x1a0>)
 811c7e0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 811c7e4:	4962      	ldr	r1, [pc, #392]	@ (811c970 <tcp_close_shutdown+0x1a4>)
 811c7e6:	4863      	ldr	r0, [pc, #396]	@ (811c974 <tcp_close_shutdown+0x1a8>)
 811c7e8:	f007 ff38 	bl	812465c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 811c7ec:	78fb      	ldrb	r3, [r7, #3]
 811c7ee:	2b00      	cmp	r3, #0
 811c7f0:	d066      	beq.n	811c8c0 <tcp_close_shutdown+0xf4>
 811c7f2:	687b      	ldr	r3, [r7, #4]
 811c7f4:	7d1b      	ldrb	r3, [r3, #20]
 811c7f6:	2b04      	cmp	r3, #4
 811c7f8:	d003      	beq.n	811c802 <tcp_close_shutdown+0x36>
 811c7fa:	687b      	ldr	r3, [r7, #4]
 811c7fc:	7d1b      	ldrb	r3, [r3, #20]
 811c7fe:	2b07      	cmp	r3, #7
 811c800:	d15e      	bne.n	811c8c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 811c802:	687b      	ldr	r3, [r7, #4]
 811c804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811c806:	2b00      	cmp	r3, #0
 811c808:	d104      	bne.n	811c814 <tcp_close_shutdown+0x48>
 811c80a:	687b      	ldr	r3, [r7, #4]
 811c80c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811c80e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811c812:	d055      	beq.n	811c8c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 811c814:	687b      	ldr	r3, [r7, #4]
 811c816:	8b5b      	ldrh	r3, [r3, #26]
 811c818:	f003 0310 	and.w	r3, r3, #16
 811c81c:	2b00      	cmp	r3, #0
 811c81e:	d106      	bne.n	811c82e <tcp_close_shutdown+0x62>
 811c820:	4b52      	ldr	r3, [pc, #328]	@ (811c96c <tcp_close_shutdown+0x1a0>)
 811c822:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 811c826:	4954      	ldr	r1, [pc, #336]	@ (811c978 <tcp_close_shutdown+0x1ac>)
 811c828:	4852      	ldr	r0, [pc, #328]	@ (811c974 <tcp_close_shutdown+0x1a8>)
 811c82a:	f007 ff17 	bl	812465c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811c82e:	687b      	ldr	r3, [r7, #4]
 811c830:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811c832:	687b      	ldr	r3, [r7, #4]
 811c834:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811c836:	687d      	ldr	r5, [r7, #4]
 811c838:	687b      	ldr	r3, [r7, #4]
 811c83a:	3304      	adds	r3, #4
 811c83c:	687a      	ldr	r2, [r7, #4]
 811c83e:	8ad2      	ldrh	r2, [r2, #22]
 811c840:	6879      	ldr	r1, [r7, #4]
 811c842:	8b09      	ldrh	r1, [r1, #24]
 811c844:	9102      	str	r1, [sp, #8]
 811c846:	9201      	str	r2, [sp, #4]
 811c848:	9300      	str	r3, [sp, #0]
 811c84a:	462b      	mov	r3, r5
 811c84c:	4622      	mov	r2, r4
 811c84e:	4601      	mov	r1, r0
 811c850:	6878      	ldr	r0, [r7, #4]
 811c852:	f005 fd4b 	bl	81222ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 811c856:	6878      	ldr	r0, [r7, #4]
 811c858:	f001 fb2e 	bl	811deb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 811c85c:	4b47      	ldr	r3, [pc, #284]	@ (811c97c <tcp_close_shutdown+0x1b0>)
 811c85e:	681b      	ldr	r3, [r3, #0]
 811c860:	687a      	ldr	r2, [r7, #4]
 811c862:	429a      	cmp	r2, r3
 811c864:	d105      	bne.n	811c872 <tcp_close_shutdown+0xa6>
 811c866:	4b45      	ldr	r3, [pc, #276]	@ (811c97c <tcp_close_shutdown+0x1b0>)
 811c868:	681b      	ldr	r3, [r3, #0]
 811c86a:	68db      	ldr	r3, [r3, #12]
 811c86c:	4a43      	ldr	r2, [pc, #268]	@ (811c97c <tcp_close_shutdown+0x1b0>)
 811c86e:	6013      	str	r3, [r2, #0]
 811c870:	e013      	b.n	811c89a <tcp_close_shutdown+0xce>
 811c872:	4b42      	ldr	r3, [pc, #264]	@ (811c97c <tcp_close_shutdown+0x1b0>)
 811c874:	681b      	ldr	r3, [r3, #0]
 811c876:	60fb      	str	r3, [r7, #12]
 811c878:	e00c      	b.n	811c894 <tcp_close_shutdown+0xc8>
 811c87a:	68fb      	ldr	r3, [r7, #12]
 811c87c:	68db      	ldr	r3, [r3, #12]
 811c87e:	687a      	ldr	r2, [r7, #4]
 811c880:	429a      	cmp	r2, r3
 811c882:	d104      	bne.n	811c88e <tcp_close_shutdown+0xc2>
 811c884:	687b      	ldr	r3, [r7, #4]
 811c886:	68da      	ldr	r2, [r3, #12]
 811c888:	68fb      	ldr	r3, [r7, #12]
 811c88a:	60da      	str	r2, [r3, #12]
 811c88c:	e005      	b.n	811c89a <tcp_close_shutdown+0xce>
 811c88e:	68fb      	ldr	r3, [r7, #12]
 811c890:	68db      	ldr	r3, [r3, #12]
 811c892:	60fb      	str	r3, [r7, #12]
 811c894:	68fb      	ldr	r3, [r7, #12]
 811c896:	2b00      	cmp	r3, #0
 811c898:	d1ef      	bne.n	811c87a <tcp_close_shutdown+0xae>
 811c89a:	687b      	ldr	r3, [r7, #4]
 811c89c:	2200      	movs	r2, #0
 811c89e:	60da      	str	r2, [r3, #12]
 811c8a0:	4b37      	ldr	r3, [pc, #220]	@ (811c980 <tcp_close_shutdown+0x1b4>)
 811c8a2:	2201      	movs	r2, #1
 811c8a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 811c8a6:	4b37      	ldr	r3, [pc, #220]	@ (811c984 <tcp_close_shutdown+0x1b8>)
 811c8a8:	681b      	ldr	r3, [r3, #0]
 811c8aa:	687a      	ldr	r2, [r7, #4]
 811c8ac:	429a      	cmp	r2, r3
 811c8ae:	d102      	bne.n	811c8b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 811c8b0:	f003 ffc2 	bl	8120838 <tcp_trigger_input_pcb_close>
 811c8b4:	e002      	b.n	811c8bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 811c8b6:	6878      	ldr	r0, [r7, #4]
 811c8b8:	f7ff fed6 	bl	811c668 <tcp_free>
      }
      return ERR_OK;
 811c8bc:	2300      	movs	r3, #0
 811c8be:	e050      	b.n	811c962 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 811c8c0:	687b      	ldr	r3, [r7, #4]
 811c8c2:	7d1b      	ldrb	r3, [r3, #20]
 811c8c4:	2b02      	cmp	r3, #2
 811c8c6:	d03b      	beq.n	811c940 <tcp_close_shutdown+0x174>
 811c8c8:	2b02      	cmp	r3, #2
 811c8ca:	dc44      	bgt.n	811c956 <tcp_close_shutdown+0x18a>
 811c8cc:	2b00      	cmp	r3, #0
 811c8ce:	d002      	beq.n	811c8d6 <tcp_close_shutdown+0x10a>
 811c8d0:	2b01      	cmp	r3, #1
 811c8d2:	d02a      	beq.n	811c92a <tcp_close_shutdown+0x15e>
 811c8d4:	e03f      	b.n	811c956 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 811c8d6:	687b      	ldr	r3, [r7, #4]
 811c8d8:	8adb      	ldrh	r3, [r3, #22]
 811c8da:	2b00      	cmp	r3, #0
 811c8dc:	d021      	beq.n	811c922 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811c8de:	4b2a      	ldr	r3, [pc, #168]	@ (811c988 <tcp_close_shutdown+0x1bc>)
 811c8e0:	681b      	ldr	r3, [r3, #0]
 811c8e2:	687a      	ldr	r2, [r7, #4]
 811c8e4:	429a      	cmp	r2, r3
 811c8e6:	d105      	bne.n	811c8f4 <tcp_close_shutdown+0x128>
 811c8e8:	4b27      	ldr	r3, [pc, #156]	@ (811c988 <tcp_close_shutdown+0x1bc>)
 811c8ea:	681b      	ldr	r3, [r3, #0]
 811c8ec:	68db      	ldr	r3, [r3, #12]
 811c8ee:	4a26      	ldr	r2, [pc, #152]	@ (811c988 <tcp_close_shutdown+0x1bc>)
 811c8f0:	6013      	str	r3, [r2, #0]
 811c8f2:	e013      	b.n	811c91c <tcp_close_shutdown+0x150>
 811c8f4:	4b24      	ldr	r3, [pc, #144]	@ (811c988 <tcp_close_shutdown+0x1bc>)
 811c8f6:	681b      	ldr	r3, [r3, #0]
 811c8f8:	60bb      	str	r3, [r7, #8]
 811c8fa:	e00c      	b.n	811c916 <tcp_close_shutdown+0x14a>
 811c8fc:	68bb      	ldr	r3, [r7, #8]
 811c8fe:	68db      	ldr	r3, [r3, #12]
 811c900:	687a      	ldr	r2, [r7, #4]
 811c902:	429a      	cmp	r2, r3
 811c904:	d104      	bne.n	811c910 <tcp_close_shutdown+0x144>
 811c906:	687b      	ldr	r3, [r7, #4]
 811c908:	68da      	ldr	r2, [r3, #12]
 811c90a:	68bb      	ldr	r3, [r7, #8]
 811c90c:	60da      	str	r2, [r3, #12]
 811c90e:	e005      	b.n	811c91c <tcp_close_shutdown+0x150>
 811c910:	68bb      	ldr	r3, [r7, #8]
 811c912:	68db      	ldr	r3, [r3, #12]
 811c914:	60bb      	str	r3, [r7, #8]
 811c916:	68bb      	ldr	r3, [r7, #8]
 811c918:	2b00      	cmp	r3, #0
 811c91a:	d1ef      	bne.n	811c8fc <tcp_close_shutdown+0x130>
 811c91c:	687b      	ldr	r3, [r7, #4]
 811c91e:	2200      	movs	r2, #0
 811c920:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 811c922:	6878      	ldr	r0, [r7, #4]
 811c924:	f7ff fea0 	bl	811c668 <tcp_free>
      break;
 811c928:	e01a      	b.n	811c960 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 811c92a:	6878      	ldr	r0, [r7, #4]
 811c92c:	f7ff ff14 	bl	811c758 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 811c930:	6879      	ldr	r1, [r7, #4]
 811c932:	4816      	ldr	r0, [pc, #88]	@ (811c98c <tcp_close_shutdown+0x1c0>)
 811c934:	f001 fb10 	bl	811df58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 811c938:	6878      	ldr	r0, [r7, #4]
 811c93a:	f7ff feb1 	bl	811c6a0 <tcp_free_listen>
      break;
 811c93e:	e00f      	b.n	811c960 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 811c940:	6879      	ldr	r1, [r7, #4]
 811c942:	480e      	ldr	r0, [pc, #56]	@ (811c97c <tcp_close_shutdown+0x1b0>)
 811c944:	f001 fb08 	bl	811df58 <tcp_pcb_remove>
 811c948:	4b0d      	ldr	r3, [pc, #52]	@ (811c980 <tcp_close_shutdown+0x1b4>)
 811c94a:	2201      	movs	r2, #1
 811c94c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 811c94e:	6878      	ldr	r0, [r7, #4]
 811c950:	f7ff fe8a 	bl	811c668 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 811c954:	e004      	b.n	811c960 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 811c956:	6878      	ldr	r0, [r7, #4]
 811c958:	f000 f81a 	bl	811c990 <tcp_close_shutdown_fin>
 811c95c:	4603      	mov	r3, r0
 811c95e:	e000      	b.n	811c962 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 811c960:	2300      	movs	r3, #0
}
 811c962:	4618      	mov	r0, r3
 811c964:	3710      	adds	r7, #16
 811c966:	46bd      	mov	sp, r7
 811c968:	bdb0      	pop	{r4, r5, r7, pc}
 811c96a:	bf00      	nop
 811c96c:	08126a28 	.word	0x08126a28
 811c970:	08126b40 	.word	0x08126b40
 811c974:	08126ab0 	.word	0x08126ab0
 811c978:	08126b60 	.word	0x08126b60
 811c97c:	1000e4a4 	.word	0x1000e4a4
 811c980:	1000e4ac 	.word	0x1000e4ac
 811c984:	1000e4e4 	.word	0x1000e4e4
 811c988:	1000e49c 	.word	0x1000e49c
 811c98c:	1000e4a0 	.word	0x1000e4a0

0811c990 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 811c990:	b580      	push	{r7, lr}
 811c992:	b084      	sub	sp, #16
 811c994:	af00      	add	r7, sp, #0
 811c996:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811c998:	687b      	ldr	r3, [r7, #4]
 811c99a:	2b00      	cmp	r3, #0
 811c99c:	d106      	bne.n	811c9ac <tcp_close_shutdown_fin+0x1c>
 811c99e:	4b2e      	ldr	r3, [pc, #184]	@ (811ca58 <tcp_close_shutdown_fin+0xc8>)
 811c9a0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 811c9a4:	492d      	ldr	r1, [pc, #180]	@ (811ca5c <tcp_close_shutdown_fin+0xcc>)
 811c9a6:	482e      	ldr	r0, [pc, #184]	@ (811ca60 <tcp_close_shutdown_fin+0xd0>)
 811c9a8:	f007 fe58 	bl	812465c <iprintf>

  switch (pcb->state) {
 811c9ac:	687b      	ldr	r3, [r7, #4]
 811c9ae:	7d1b      	ldrb	r3, [r3, #20]
 811c9b0:	2b07      	cmp	r3, #7
 811c9b2:	d020      	beq.n	811c9f6 <tcp_close_shutdown_fin+0x66>
 811c9b4:	2b07      	cmp	r3, #7
 811c9b6:	dc2b      	bgt.n	811ca10 <tcp_close_shutdown_fin+0x80>
 811c9b8:	2b03      	cmp	r3, #3
 811c9ba:	d002      	beq.n	811c9c2 <tcp_close_shutdown_fin+0x32>
 811c9bc:	2b04      	cmp	r3, #4
 811c9be:	d00d      	beq.n	811c9dc <tcp_close_shutdown_fin+0x4c>
 811c9c0:	e026      	b.n	811ca10 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 811c9c2:	6878      	ldr	r0, [r7, #4]
 811c9c4:	f004 fda0 	bl	8121508 <tcp_send_fin>
 811c9c8:	4603      	mov	r3, r0
 811c9ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811c9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811c9d0:	2b00      	cmp	r3, #0
 811c9d2:	d11f      	bne.n	811ca14 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 811c9d4:	687b      	ldr	r3, [r7, #4]
 811c9d6:	2205      	movs	r2, #5
 811c9d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 811c9da:	e01b      	b.n	811ca14 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 811c9dc:	6878      	ldr	r0, [r7, #4]
 811c9de:	f004 fd93 	bl	8121508 <tcp_send_fin>
 811c9e2:	4603      	mov	r3, r0
 811c9e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811c9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811c9ea:	2b00      	cmp	r3, #0
 811c9ec:	d114      	bne.n	811ca18 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 811c9ee:	687b      	ldr	r3, [r7, #4]
 811c9f0:	2205      	movs	r2, #5
 811c9f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 811c9f4:	e010      	b.n	811ca18 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 811c9f6:	6878      	ldr	r0, [r7, #4]
 811c9f8:	f004 fd86 	bl	8121508 <tcp_send_fin>
 811c9fc:	4603      	mov	r3, r0
 811c9fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811ca00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ca04:	2b00      	cmp	r3, #0
 811ca06:	d109      	bne.n	811ca1c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 811ca08:	687b      	ldr	r3, [r7, #4]
 811ca0a:	2209      	movs	r2, #9
 811ca0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 811ca0e:	e005      	b.n	811ca1c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 811ca10:	2300      	movs	r3, #0
 811ca12:	e01c      	b.n	811ca4e <tcp_close_shutdown_fin+0xbe>
      break;
 811ca14:	bf00      	nop
 811ca16:	e002      	b.n	811ca1e <tcp_close_shutdown_fin+0x8e>
      break;
 811ca18:	bf00      	nop
 811ca1a:	e000      	b.n	811ca1e <tcp_close_shutdown_fin+0x8e>
      break;
 811ca1c:	bf00      	nop
  }

  if (err == ERR_OK) {
 811ca1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ca22:	2b00      	cmp	r3, #0
 811ca24:	d103      	bne.n	811ca2e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 811ca26:	6878      	ldr	r0, [r7, #4]
 811ca28:	f004 feac 	bl	8121784 <tcp_output>
 811ca2c:	e00d      	b.n	811ca4a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 811ca2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ca32:	f1b3 3fff 	cmp.w	r3, #4294967295
 811ca36:	d108      	bne.n	811ca4a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 811ca38:	687b      	ldr	r3, [r7, #4]
 811ca3a:	8b5b      	ldrh	r3, [r3, #26]
 811ca3c:	f043 0308 	orr.w	r3, r3, #8
 811ca40:	b29a      	uxth	r2, r3
 811ca42:	687b      	ldr	r3, [r7, #4]
 811ca44:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 811ca46:	2300      	movs	r3, #0
 811ca48:	e001      	b.n	811ca4e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 811ca4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811ca4e:	4618      	mov	r0, r3
 811ca50:	3710      	adds	r7, #16
 811ca52:	46bd      	mov	sp, r7
 811ca54:	bd80      	pop	{r7, pc}
 811ca56:	bf00      	nop
 811ca58:	08126a28 	.word	0x08126a28
 811ca5c:	08126b1c 	.word	0x08126b1c
 811ca60:	08126ab0 	.word	0x08126ab0

0811ca64 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 811ca64:	b580      	push	{r7, lr}
 811ca66:	b082      	sub	sp, #8
 811ca68:	af00      	add	r7, sp, #0
 811ca6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 811ca6c:	687b      	ldr	r3, [r7, #4]
 811ca6e:	2b00      	cmp	r3, #0
 811ca70:	d109      	bne.n	811ca86 <tcp_close+0x22>
 811ca72:	4b0f      	ldr	r3, [pc, #60]	@ (811cab0 <tcp_close+0x4c>)
 811ca74:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 811ca78:	490e      	ldr	r1, [pc, #56]	@ (811cab4 <tcp_close+0x50>)
 811ca7a:	480f      	ldr	r0, [pc, #60]	@ (811cab8 <tcp_close+0x54>)
 811ca7c:	f007 fdee 	bl	812465c <iprintf>
 811ca80:	f06f 030f 	mvn.w	r3, #15
 811ca84:	e00f      	b.n	811caa6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 811ca86:	687b      	ldr	r3, [r7, #4]
 811ca88:	7d1b      	ldrb	r3, [r3, #20]
 811ca8a:	2b01      	cmp	r3, #1
 811ca8c:	d006      	beq.n	811ca9c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 811ca8e:	687b      	ldr	r3, [r7, #4]
 811ca90:	8b5b      	ldrh	r3, [r3, #26]
 811ca92:	f043 0310 	orr.w	r3, r3, #16
 811ca96:	b29a      	uxth	r2, r3
 811ca98:	687b      	ldr	r3, [r7, #4]
 811ca9a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 811ca9c:	2101      	movs	r1, #1
 811ca9e:	6878      	ldr	r0, [r7, #4]
 811caa0:	f7ff fe94 	bl	811c7cc <tcp_close_shutdown>
 811caa4:	4603      	mov	r3, r0
}
 811caa6:	4618      	mov	r0, r3
 811caa8:	3708      	adds	r7, #8
 811caaa:	46bd      	mov	sp, r7
 811caac:	bd80      	pop	{r7, pc}
 811caae:	bf00      	nop
 811cab0:	08126a28 	.word	0x08126a28
 811cab4:	08126b7c 	.word	0x08126b7c
 811cab8:	08126ab0 	.word	0x08126ab0

0811cabc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 811cabc:	b580      	push	{r7, lr}
 811cabe:	b08e      	sub	sp, #56	@ 0x38
 811cac0:	af04      	add	r7, sp, #16
 811cac2:	6078      	str	r0, [r7, #4]
 811cac4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 811cac6:	687b      	ldr	r3, [r7, #4]
 811cac8:	2b00      	cmp	r3, #0
 811caca:	d107      	bne.n	811cadc <tcp_abandon+0x20>
 811cacc:	4b52      	ldr	r3, [pc, #328]	@ (811cc18 <tcp_abandon+0x15c>)
 811cace:	f240 223d 	movw	r2, #573	@ 0x23d
 811cad2:	4952      	ldr	r1, [pc, #328]	@ (811cc1c <tcp_abandon+0x160>)
 811cad4:	4852      	ldr	r0, [pc, #328]	@ (811cc20 <tcp_abandon+0x164>)
 811cad6:	f007 fdc1 	bl	812465c <iprintf>
 811cada:	e099      	b.n	811cc10 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 811cadc:	687b      	ldr	r3, [r7, #4]
 811cade:	7d1b      	ldrb	r3, [r3, #20]
 811cae0:	2b01      	cmp	r3, #1
 811cae2:	d106      	bne.n	811caf2 <tcp_abandon+0x36>
 811cae4:	4b4c      	ldr	r3, [pc, #304]	@ (811cc18 <tcp_abandon+0x15c>)
 811cae6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 811caea:	494e      	ldr	r1, [pc, #312]	@ (811cc24 <tcp_abandon+0x168>)
 811caec:	484c      	ldr	r0, [pc, #304]	@ (811cc20 <tcp_abandon+0x164>)
 811caee:	f007 fdb5 	bl	812465c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 811caf2:	687b      	ldr	r3, [r7, #4]
 811caf4:	7d1b      	ldrb	r3, [r3, #20]
 811caf6:	2b0a      	cmp	r3, #10
 811caf8:	d107      	bne.n	811cb0a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 811cafa:	6879      	ldr	r1, [r7, #4]
 811cafc:	484a      	ldr	r0, [pc, #296]	@ (811cc28 <tcp_abandon+0x16c>)
 811cafe:	f001 fa2b 	bl	811df58 <tcp_pcb_remove>
    tcp_free(pcb);
 811cb02:	6878      	ldr	r0, [r7, #4]
 811cb04:	f7ff fdb0 	bl	811c668 <tcp_free>
 811cb08:	e082      	b.n	811cc10 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 811cb0a:	2300      	movs	r3, #0
 811cb0c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 811cb0e:	2300      	movs	r3, #0
 811cb10:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 811cb12:	687b      	ldr	r3, [r7, #4]
 811cb14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811cb16:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 811cb18:	687b      	ldr	r3, [r7, #4]
 811cb1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811cb1c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 811cb1e:	687b      	ldr	r3, [r7, #4]
 811cb20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811cb24:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 811cb26:	687b      	ldr	r3, [r7, #4]
 811cb28:	691b      	ldr	r3, [r3, #16]
 811cb2a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 811cb2c:	687b      	ldr	r3, [r7, #4]
 811cb2e:	7d1b      	ldrb	r3, [r3, #20]
 811cb30:	2b00      	cmp	r3, #0
 811cb32:	d126      	bne.n	811cb82 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 811cb34:	687b      	ldr	r3, [r7, #4]
 811cb36:	8adb      	ldrh	r3, [r3, #22]
 811cb38:	2b00      	cmp	r3, #0
 811cb3a:	d02e      	beq.n	811cb9a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811cb3c:	4b3b      	ldr	r3, [pc, #236]	@ (811cc2c <tcp_abandon+0x170>)
 811cb3e:	681b      	ldr	r3, [r3, #0]
 811cb40:	687a      	ldr	r2, [r7, #4]
 811cb42:	429a      	cmp	r2, r3
 811cb44:	d105      	bne.n	811cb52 <tcp_abandon+0x96>
 811cb46:	4b39      	ldr	r3, [pc, #228]	@ (811cc2c <tcp_abandon+0x170>)
 811cb48:	681b      	ldr	r3, [r3, #0]
 811cb4a:	68db      	ldr	r3, [r3, #12]
 811cb4c:	4a37      	ldr	r2, [pc, #220]	@ (811cc2c <tcp_abandon+0x170>)
 811cb4e:	6013      	str	r3, [r2, #0]
 811cb50:	e013      	b.n	811cb7a <tcp_abandon+0xbe>
 811cb52:	4b36      	ldr	r3, [pc, #216]	@ (811cc2c <tcp_abandon+0x170>)
 811cb54:	681b      	ldr	r3, [r3, #0]
 811cb56:	61fb      	str	r3, [r7, #28]
 811cb58:	e00c      	b.n	811cb74 <tcp_abandon+0xb8>
 811cb5a:	69fb      	ldr	r3, [r7, #28]
 811cb5c:	68db      	ldr	r3, [r3, #12]
 811cb5e:	687a      	ldr	r2, [r7, #4]
 811cb60:	429a      	cmp	r2, r3
 811cb62:	d104      	bne.n	811cb6e <tcp_abandon+0xb2>
 811cb64:	687b      	ldr	r3, [r7, #4]
 811cb66:	68da      	ldr	r2, [r3, #12]
 811cb68:	69fb      	ldr	r3, [r7, #28]
 811cb6a:	60da      	str	r2, [r3, #12]
 811cb6c:	e005      	b.n	811cb7a <tcp_abandon+0xbe>
 811cb6e:	69fb      	ldr	r3, [r7, #28]
 811cb70:	68db      	ldr	r3, [r3, #12]
 811cb72:	61fb      	str	r3, [r7, #28]
 811cb74:	69fb      	ldr	r3, [r7, #28]
 811cb76:	2b00      	cmp	r3, #0
 811cb78:	d1ef      	bne.n	811cb5a <tcp_abandon+0x9e>
 811cb7a:	687b      	ldr	r3, [r7, #4]
 811cb7c:	2200      	movs	r2, #0
 811cb7e:	60da      	str	r2, [r3, #12]
 811cb80:	e00b      	b.n	811cb9a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 811cb82:	683b      	ldr	r3, [r7, #0]
 811cb84:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 811cb86:	687b      	ldr	r3, [r7, #4]
 811cb88:	8adb      	ldrh	r3, [r3, #22]
 811cb8a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 811cb8c:	6879      	ldr	r1, [r7, #4]
 811cb8e:	4828      	ldr	r0, [pc, #160]	@ (811cc30 <tcp_abandon+0x174>)
 811cb90:	f001 f9e2 	bl	811df58 <tcp_pcb_remove>
 811cb94:	4b27      	ldr	r3, [pc, #156]	@ (811cc34 <tcp_abandon+0x178>)
 811cb96:	2201      	movs	r2, #1
 811cb98:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 811cb9a:	687b      	ldr	r3, [r7, #4]
 811cb9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811cb9e:	2b00      	cmp	r3, #0
 811cba0:	d004      	beq.n	811cbac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 811cba2:	687b      	ldr	r3, [r7, #4]
 811cba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811cba6:	4618      	mov	r0, r3
 811cba8:	f000 ff1c 	bl	811d9e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 811cbac:	687b      	ldr	r3, [r7, #4]
 811cbae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811cbb0:	2b00      	cmp	r3, #0
 811cbb2:	d004      	beq.n	811cbbe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 811cbb4:	687b      	ldr	r3, [r7, #4]
 811cbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811cbb8:	4618      	mov	r0, r3
 811cbba:	f000 ff13 	bl	811d9e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811cbbe:	687b      	ldr	r3, [r7, #4]
 811cbc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811cbc2:	2b00      	cmp	r3, #0
 811cbc4:	d004      	beq.n	811cbd0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 811cbc6:	687b      	ldr	r3, [r7, #4]
 811cbc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811cbca:	4618      	mov	r0, r3
 811cbcc:	f000 ff0a 	bl	811d9e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 811cbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811cbd2:	2b00      	cmp	r3, #0
 811cbd4:	d00e      	beq.n	811cbf4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 811cbd6:	6879      	ldr	r1, [r7, #4]
 811cbd8:	687b      	ldr	r3, [r7, #4]
 811cbda:	3304      	adds	r3, #4
 811cbdc:	687a      	ldr	r2, [r7, #4]
 811cbde:	8b12      	ldrh	r2, [r2, #24]
 811cbe0:	9202      	str	r2, [sp, #8]
 811cbe2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811cbe4:	9201      	str	r2, [sp, #4]
 811cbe6:	9300      	str	r3, [sp, #0]
 811cbe8:	460b      	mov	r3, r1
 811cbea:	697a      	ldr	r2, [r7, #20]
 811cbec:	69b9      	ldr	r1, [r7, #24]
 811cbee:	6878      	ldr	r0, [r7, #4]
 811cbf0:	f005 fb7c 	bl	81222ec <tcp_rst>
    }
    last_state = pcb->state;
 811cbf4:	687b      	ldr	r3, [r7, #4]
 811cbf6:	7d1b      	ldrb	r3, [r3, #20]
 811cbf8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 811cbfa:	6878      	ldr	r0, [r7, #4]
 811cbfc:	f7ff fd34 	bl	811c668 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 811cc00:	693b      	ldr	r3, [r7, #16]
 811cc02:	2b00      	cmp	r3, #0
 811cc04:	d004      	beq.n	811cc10 <tcp_abandon+0x154>
 811cc06:	693b      	ldr	r3, [r7, #16]
 811cc08:	f06f 010c 	mvn.w	r1, #12
 811cc0c:	68f8      	ldr	r0, [r7, #12]
 811cc0e:	4798      	blx	r3
  }
}
 811cc10:	3728      	adds	r7, #40	@ 0x28
 811cc12:	46bd      	mov	sp, r7
 811cc14:	bd80      	pop	{r7, pc}
 811cc16:	bf00      	nop
 811cc18:	08126a28 	.word	0x08126a28
 811cc1c:	08126bb0 	.word	0x08126bb0
 811cc20:	08126ab0 	.word	0x08126ab0
 811cc24:	08126bcc 	.word	0x08126bcc
 811cc28:	1000e4a8 	.word	0x1000e4a8
 811cc2c:	1000e49c 	.word	0x1000e49c
 811cc30:	1000e4a4 	.word	0x1000e4a4
 811cc34:	1000e4ac 	.word	0x1000e4ac

0811cc38 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 811cc38:	b580      	push	{r7, lr}
 811cc3a:	b082      	sub	sp, #8
 811cc3c:	af00      	add	r7, sp, #0
 811cc3e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 811cc40:	2101      	movs	r1, #1
 811cc42:	6878      	ldr	r0, [r7, #4]
 811cc44:	f7ff ff3a 	bl	811cabc <tcp_abandon>
}
 811cc48:	bf00      	nop
 811cc4a:	3708      	adds	r7, #8
 811cc4c:	46bd      	mov	sp, r7
 811cc4e:	bd80      	pop	{r7, pc}

0811cc50 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 811cc50:	b580      	push	{r7, lr}
 811cc52:	b088      	sub	sp, #32
 811cc54:	af00      	add	r7, sp, #0
 811cc56:	60f8      	str	r0, [r7, #12]
 811cc58:	60b9      	str	r1, [r7, #8]
 811cc5a:	4613      	mov	r3, r2
 811cc5c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 811cc5e:	2304      	movs	r3, #4
 811cc60:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811cc62:	68bb      	ldr	r3, [r7, #8]
 811cc64:	2b00      	cmp	r3, #0
 811cc66:	d101      	bne.n	811cc6c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 811cc68:	4b3e      	ldr	r3, [pc, #248]	@ (811cd64 <tcp_bind+0x114>)
 811cc6a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 811cc6c:	68fb      	ldr	r3, [r7, #12]
 811cc6e:	2b00      	cmp	r3, #0
 811cc70:	d109      	bne.n	811cc86 <tcp_bind+0x36>
 811cc72:	4b3d      	ldr	r3, [pc, #244]	@ (811cd68 <tcp_bind+0x118>)
 811cc74:	f240 22a9 	movw	r2, #681	@ 0x2a9
 811cc78:	493c      	ldr	r1, [pc, #240]	@ (811cd6c <tcp_bind+0x11c>)
 811cc7a:	483d      	ldr	r0, [pc, #244]	@ (811cd70 <tcp_bind+0x120>)
 811cc7c:	f007 fcee 	bl	812465c <iprintf>
 811cc80:	f06f 030f 	mvn.w	r3, #15
 811cc84:	e06a      	b.n	811cd5c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 811cc86:	68fb      	ldr	r3, [r7, #12]
 811cc88:	7d1b      	ldrb	r3, [r3, #20]
 811cc8a:	2b00      	cmp	r3, #0
 811cc8c:	d009      	beq.n	811cca2 <tcp_bind+0x52>
 811cc8e:	4b36      	ldr	r3, [pc, #216]	@ (811cd68 <tcp_bind+0x118>)
 811cc90:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811cc94:	4937      	ldr	r1, [pc, #220]	@ (811cd74 <tcp_bind+0x124>)
 811cc96:	4836      	ldr	r0, [pc, #216]	@ (811cd70 <tcp_bind+0x120>)
 811cc98:	f007 fce0 	bl	812465c <iprintf>
 811cc9c:	f06f 0305 	mvn.w	r3, #5
 811cca0:	e05c      	b.n	811cd5c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 811cca2:	88fb      	ldrh	r3, [r7, #6]
 811cca4:	2b00      	cmp	r3, #0
 811cca6:	d109      	bne.n	811ccbc <tcp_bind+0x6c>
    port = tcp_new_port();
 811cca8:	f000 f912 	bl	811ced0 <tcp_new_port>
 811ccac:	4603      	mov	r3, r0
 811ccae:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 811ccb0:	88fb      	ldrh	r3, [r7, #6]
 811ccb2:	2b00      	cmp	r3, #0
 811ccb4:	d135      	bne.n	811cd22 <tcp_bind+0xd2>
      return ERR_BUF;
 811ccb6:	f06f 0301 	mvn.w	r3, #1
 811ccba:	e04f      	b.n	811cd5c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 811ccbc:	2300      	movs	r3, #0
 811ccbe:	61fb      	str	r3, [r7, #28]
 811ccc0:	e02b      	b.n	811cd1a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 811ccc2:	4a2d      	ldr	r2, [pc, #180]	@ (811cd78 <tcp_bind+0x128>)
 811ccc4:	69fb      	ldr	r3, [r7, #28]
 811ccc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811ccca:	681b      	ldr	r3, [r3, #0]
 811cccc:	61bb      	str	r3, [r7, #24]
 811ccce:	e01e      	b.n	811cd0e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 811ccd0:	69bb      	ldr	r3, [r7, #24]
 811ccd2:	8adb      	ldrh	r3, [r3, #22]
 811ccd4:	88fa      	ldrh	r2, [r7, #6]
 811ccd6:	429a      	cmp	r2, r3
 811ccd8:	d116      	bne.n	811cd08 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 811ccda:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 811ccdc:	2b00      	cmp	r3, #0
 811ccde:	d010      	beq.n	811cd02 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 811cce0:	69bb      	ldr	r3, [r7, #24]
 811cce2:	681b      	ldr	r3, [r3, #0]
 811cce4:	2b00      	cmp	r3, #0
 811cce6:	d00c      	beq.n	811cd02 <tcp_bind+0xb2>
 811cce8:	68bb      	ldr	r3, [r7, #8]
 811ccea:	2b00      	cmp	r3, #0
 811ccec:	d009      	beq.n	811cd02 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 811ccee:	68bb      	ldr	r3, [r7, #8]
 811ccf0:	681b      	ldr	r3, [r3, #0]
 811ccf2:	2b00      	cmp	r3, #0
 811ccf4:	d005      	beq.n	811cd02 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 811ccf6:	69bb      	ldr	r3, [r7, #24]
 811ccf8:	681a      	ldr	r2, [r3, #0]
 811ccfa:	68bb      	ldr	r3, [r7, #8]
 811ccfc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 811ccfe:	429a      	cmp	r2, r3
 811cd00:	d102      	bne.n	811cd08 <tcp_bind+0xb8>
              return ERR_USE;
 811cd02:	f06f 0307 	mvn.w	r3, #7
 811cd06:	e029      	b.n	811cd5c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 811cd08:	69bb      	ldr	r3, [r7, #24]
 811cd0a:	68db      	ldr	r3, [r3, #12]
 811cd0c:	61bb      	str	r3, [r7, #24]
 811cd0e:	69bb      	ldr	r3, [r7, #24]
 811cd10:	2b00      	cmp	r3, #0
 811cd12:	d1dd      	bne.n	811ccd0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 811cd14:	69fb      	ldr	r3, [r7, #28]
 811cd16:	3301      	adds	r3, #1
 811cd18:	61fb      	str	r3, [r7, #28]
 811cd1a:	69fa      	ldr	r2, [r7, #28]
 811cd1c:	697b      	ldr	r3, [r7, #20]
 811cd1e:	429a      	cmp	r2, r3
 811cd20:	dbcf      	blt.n	811ccc2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 811cd22:	68bb      	ldr	r3, [r7, #8]
 811cd24:	2b00      	cmp	r3, #0
 811cd26:	d00c      	beq.n	811cd42 <tcp_bind+0xf2>
 811cd28:	68bb      	ldr	r3, [r7, #8]
 811cd2a:	681b      	ldr	r3, [r3, #0]
 811cd2c:	2b00      	cmp	r3, #0
 811cd2e:	d008      	beq.n	811cd42 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 811cd30:	68bb      	ldr	r3, [r7, #8]
 811cd32:	2b00      	cmp	r3, #0
 811cd34:	d002      	beq.n	811cd3c <tcp_bind+0xec>
 811cd36:	68bb      	ldr	r3, [r7, #8]
 811cd38:	681b      	ldr	r3, [r3, #0]
 811cd3a:	e000      	b.n	811cd3e <tcp_bind+0xee>
 811cd3c:	2300      	movs	r3, #0
 811cd3e:	68fa      	ldr	r2, [r7, #12]
 811cd40:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 811cd42:	68fb      	ldr	r3, [r7, #12]
 811cd44:	88fa      	ldrh	r2, [r7, #6]
 811cd46:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 811cd48:	4b0c      	ldr	r3, [pc, #48]	@ (811cd7c <tcp_bind+0x12c>)
 811cd4a:	681a      	ldr	r2, [r3, #0]
 811cd4c:	68fb      	ldr	r3, [r7, #12]
 811cd4e:	60da      	str	r2, [r3, #12]
 811cd50:	4a0a      	ldr	r2, [pc, #40]	@ (811cd7c <tcp_bind+0x12c>)
 811cd52:	68fb      	ldr	r3, [r7, #12]
 811cd54:	6013      	str	r3, [r2, #0]
 811cd56:	f005 fde9 	bl	812292c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 811cd5a:	2300      	movs	r3, #0
}
 811cd5c:	4618      	mov	r0, r3
 811cd5e:	3720      	adds	r7, #32
 811cd60:	46bd      	mov	sp, r7
 811cd62:	bd80      	pop	{r7, pc}
 811cd64:	081285e8 	.word	0x081285e8
 811cd68:	08126a28 	.word	0x08126a28
 811cd6c:	08126c00 	.word	0x08126c00
 811cd70:	08126ab0 	.word	0x08126ab0
 811cd74:	08126c18 	.word	0x08126c18
 811cd78:	081286d4 	.word	0x081286d4
 811cd7c:	1000e49c 	.word	0x1000e49c

0811cd80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 811cd80:	b580      	push	{r7, lr}
 811cd82:	b084      	sub	sp, #16
 811cd84:	af00      	add	r7, sp, #0
 811cd86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 811cd88:	687b      	ldr	r3, [r7, #4]
 811cd8a:	2b00      	cmp	r3, #0
 811cd8c:	d106      	bne.n	811cd9c <tcp_update_rcv_ann_wnd+0x1c>
 811cd8e:	4b25      	ldr	r3, [pc, #148]	@ (811ce24 <tcp_update_rcv_ann_wnd+0xa4>)
 811cd90:	f240 32a6 	movw	r2, #934	@ 0x3a6
 811cd94:	4924      	ldr	r1, [pc, #144]	@ (811ce28 <tcp_update_rcv_ann_wnd+0xa8>)
 811cd96:	4825      	ldr	r0, [pc, #148]	@ (811ce2c <tcp_update_rcv_ann_wnd+0xac>)
 811cd98:	f007 fc60 	bl	812465c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 811cd9c:	687b      	ldr	r3, [r7, #4]
 811cd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811cda0:	687a      	ldr	r2, [r7, #4]
 811cda2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 811cda4:	4413      	add	r3, r2
 811cda6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 811cda8:	687b      	ldr	r3, [r7, #4]
 811cdaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811cdac:	687a      	ldr	r2, [r7, #4]
 811cdae:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 811cdb0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 811cdb4:	bf28      	it	cs
 811cdb6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 811cdba:	b292      	uxth	r2, r2
 811cdbc:	4413      	add	r3, r2
 811cdbe:	68fa      	ldr	r2, [r7, #12]
 811cdc0:	1ad3      	subs	r3, r2, r3
 811cdc2:	2b00      	cmp	r3, #0
 811cdc4:	db08      	blt.n	811cdd8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 811cdc6:	687b      	ldr	r3, [r7, #4]
 811cdc8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811cdca:	687b      	ldr	r3, [r7, #4]
 811cdcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 811cdce:	687b      	ldr	r3, [r7, #4]
 811cdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811cdd2:	68fa      	ldr	r2, [r7, #12]
 811cdd4:	1ad3      	subs	r3, r2, r3
 811cdd6:	e020      	b.n	811ce1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 811cdd8:	687b      	ldr	r3, [r7, #4]
 811cdda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811cddc:	687b      	ldr	r3, [r7, #4]
 811cdde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811cde0:	1ad3      	subs	r3, r2, r3
 811cde2:	2b00      	cmp	r3, #0
 811cde4:	dd03      	ble.n	811cdee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 811cde6:	687b      	ldr	r3, [r7, #4]
 811cde8:	2200      	movs	r2, #0
 811cdea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811cdec:	e014      	b.n	811ce18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 811cdee:	687b      	ldr	r3, [r7, #4]
 811cdf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811cdf2:	687b      	ldr	r3, [r7, #4]
 811cdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811cdf6:	1ad3      	subs	r3, r2, r3
 811cdf8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 811cdfa:	68bb      	ldr	r3, [r7, #8]
 811cdfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811ce00:	d306      	bcc.n	811ce10 <tcp_update_rcv_ann_wnd+0x90>
 811ce02:	4b08      	ldr	r3, [pc, #32]	@ (811ce24 <tcp_update_rcv_ann_wnd+0xa4>)
 811ce04:	f240 32b6 	movw	r2, #950	@ 0x3b6
 811ce08:	4909      	ldr	r1, [pc, #36]	@ (811ce30 <tcp_update_rcv_ann_wnd+0xb0>)
 811ce0a:	4808      	ldr	r0, [pc, #32]	@ (811ce2c <tcp_update_rcv_ann_wnd+0xac>)
 811ce0c:	f007 fc26 	bl	812465c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 811ce10:	68bb      	ldr	r3, [r7, #8]
 811ce12:	b29a      	uxth	r2, r3
 811ce14:	687b      	ldr	r3, [r7, #4]
 811ce16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 811ce18:	2300      	movs	r3, #0
  }
}
 811ce1a:	4618      	mov	r0, r3
 811ce1c:	3710      	adds	r7, #16
 811ce1e:	46bd      	mov	sp, r7
 811ce20:	bd80      	pop	{r7, pc}
 811ce22:	bf00      	nop
 811ce24:	08126a28 	.word	0x08126a28
 811ce28:	08126cc8 	.word	0x08126cc8
 811ce2c:	08126ab0 	.word	0x08126ab0
 811ce30:	08126cec 	.word	0x08126cec

0811ce34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 811ce34:	b580      	push	{r7, lr}
 811ce36:	b084      	sub	sp, #16
 811ce38:	af00      	add	r7, sp, #0
 811ce3a:	6078      	str	r0, [r7, #4]
 811ce3c:	460b      	mov	r3, r1
 811ce3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 811ce40:	687b      	ldr	r3, [r7, #4]
 811ce42:	2b00      	cmp	r3, #0
 811ce44:	d107      	bne.n	811ce56 <tcp_recved+0x22>
 811ce46:	4b1e      	ldr	r3, [pc, #120]	@ (811cec0 <tcp_recved+0x8c>)
 811ce48:	f240 32cf 	movw	r2, #975	@ 0x3cf
 811ce4c:	491d      	ldr	r1, [pc, #116]	@ (811cec4 <tcp_recved+0x90>)
 811ce4e:	481e      	ldr	r0, [pc, #120]	@ (811cec8 <tcp_recved+0x94>)
 811ce50:	f007 fc04 	bl	812465c <iprintf>
 811ce54:	e031      	b.n	811ceba <tcp_recved+0x86>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 811ce56:	687b      	ldr	r3, [r7, #4]
 811ce58:	7d1b      	ldrb	r3, [r3, #20]
 811ce5a:	2b01      	cmp	r3, #1
 811ce5c:	d106      	bne.n	811ce6c <tcp_recved+0x38>
 811ce5e:	4b18      	ldr	r3, [pc, #96]	@ (811cec0 <tcp_recved+0x8c>)
 811ce60:	f240 32d2 	movw	r2, #978	@ 0x3d2
 811ce64:	4919      	ldr	r1, [pc, #100]	@ (811cecc <tcp_recved+0x98>)
 811ce66:	4818      	ldr	r0, [pc, #96]	@ (811cec8 <tcp_recved+0x94>)
 811ce68:	f007 fbf8 	bl	812465c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 811ce6c:	687b      	ldr	r3, [r7, #4]
 811ce6e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811ce70:	887b      	ldrh	r3, [r7, #2]
 811ce72:	4413      	add	r3, r2
 811ce74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 811ce76:	89fb      	ldrh	r3, [r7, #14]
 811ce78:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811ce7c:	d804      	bhi.n	811ce88 <tcp_recved+0x54>
 811ce7e:	687b      	ldr	r3, [r7, #4]
 811ce80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811ce82:	89fa      	ldrh	r2, [r7, #14]
 811ce84:	429a      	cmp	r2, r3
 811ce86:	d204      	bcs.n	811ce92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 811ce88:	687b      	ldr	r3, [r7, #4]
 811ce8a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811ce8e:	851a      	strh	r2, [r3, #40]	@ 0x28
 811ce90:	e002      	b.n	811ce98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 811ce92:	687b      	ldr	r3, [r7, #4]
 811ce94:	89fa      	ldrh	r2, [r7, #14]
 811ce96:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 811ce98:	6878      	ldr	r0, [r7, #4]
 811ce9a:	f7ff ff71 	bl	811cd80 <tcp_update_rcv_ann_wnd>
 811ce9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 811cea0:	68bb      	ldr	r3, [r7, #8]
 811cea2:	2b00      	cmp	r3, #0
 811cea4:	d009      	beq.n	811ceba <tcp_recved+0x86>
    tcp_ack_now(pcb);
 811cea6:	687b      	ldr	r3, [r7, #4]
 811cea8:	8b5b      	ldrh	r3, [r3, #26]
 811ceaa:	f043 0302 	orr.w	r3, r3, #2
 811ceae:	b29a      	uxth	r2, r3
 811ceb0:	687b      	ldr	r3, [r7, #4]
 811ceb2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811ceb4:	6878      	ldr	r0, [r7, #4]
 811ceb6:	f004 fc65 	bl	8121784 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 811ceba:	3710      	adds	r7, #16
 811cebc:	46bd      	mov	sp, r7
 811cebe:	bd80      	pop	{r7, pc}
 811cec0:	08126a28 	.word	0x08126a28
 811cec4:	08126d08 	.word	0x08126d08
 811cec8:	08126ab0 	.word	0x08126ab0
 811cecc:	08126d20 	.word	0x08126d20

0811ced0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 811ced0:	b480      	push	{r7}
 811ced2:	b083      	sub	sp, #12
 811ced4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 811ced6:	2300      	movs	r3, #0
 811ced8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 811ceda:	4b1e      	ldr	r3, [pc, #120]	@ (811cf54 <tcp_new_port+0x84>)
 811cedc:	881b      	ldrh	r3, [r3, #0]
 811cede:	3301      	adds	r3, #1
 811cee0:	b29a      	uxth	r2, r3
 811cee2:	4b1c      	ldr	r3, [pc, #112]	@ (811cf54 <tcp_new_port+0x84>)
 811cee4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 811cee6:	4b1b      	ldr	r3, [pc, #108]	@ (811cf54 <tcp_new_port+0x84>)
 811cee8:	881b      	ldrh	r3, [r3, #0]
 811ceea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811ceee:	4293      	cmp	r3, r2
 811cef0:	d103      	bne.n	811cefa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 811cef2:	4b18      	ldr	r3, [pc, #96]	@ (811cf54 <tcp_new_port+0x84>)
 811cef4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 811cef8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811cefa:	2300      	movs	r3, #0
 811cefc:	71fb      	strb	r3, [r7, #7]
 811cefe:	e01e      	b.n	811cf3e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811cf00:	79fb      	ldrb	r3, [r7, #7]
 811cf02:	4a15      	ldr	r2, [pc, #84]	@ (811cf58 <tcp_new_port+0x88>)
 811cf04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811cf08:	681b      	ldr	r3, [r3, #0]
 811cf0a:	603b      	str	r3, [r7, #0]
 811cf0c:	e011      	b.n	811cf32 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 811cf0e:	683b      	ldr	r3, [r7, #0]
 811cf10:	8ada      	ldrh	r2, [r3, #22]
 811cf12:	4b10      	ldr	r3, [pc, #64]	@ (811cf54 <tcp_new_port+0x84>)
 811cf14:	881b      	ldrh	r3, [r3, #0]
 811cf16:	429a      	cmp	r2, r3
 811cf18:	d108      	bne.n	811cf2c <tcp_new_port+0x5c>
        n++;
 811cf1a:	88bb      	ldrh	r3, [r7, #4]
 811cf1c:	3301      	adds	r3, #1
 811cf1e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 811cf20:	88bb      	ldrh	r3, [r7, #4]
 811cf22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811cf26:	d3d8      	bcc.n	811ceda <tcp_new_port+0xa>
          return 0;
 811cf28:	2300      	movs	r3, #0
 811cf2a:	e00d      	b.n	811cf48 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811cf2c:	683b      	ldr	r3, [r7, #0]
 811cf2e:	68db      	ldr	r3, [r3, #12]
 811cf30:	603b      	str	r3, [r7, #0]
 811cf32:	683b      	ldr	r3, [r7, #0]
 811cf34:	2b00      	cmp	r3, #0
 811cf36:	d1ea      	bne.n	811cf0e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811cf38:	79fb      	ldrb	r3, [r7, #7]
 811cf3a:	3301      	adds	r3, #1
 811cf3c:	71fb      	strb	r3, [r7, #7]
 811cf3e:	79fb      	ldrb	r3, [r7, #7]
 811cf40:	2b03      	cmp	r3, #3
 811cf42:	d9dd      	bls.n	811cf00 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 811cf44:	4b03      	ldr	r3, [pc, #12]	@ (811cf54 <tcp_new_port+0x84>)
 811cf46:	881b      	ldrh	r3, [r3, #0]
}
 811cf48:	4618      	mov	r0, r3
 811cf4a:	370c      	adds	r7, #12
 811cf4c:	46bd      	mov	sp, r7
 811cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 811cf52:	4770      	bx	lr
 811cf54:	10000028 	.word	0x10000028
 811cf58:	081286d4 	.word	0x081286d4

0811cf5c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 811cf5c:	b580      	push	{r7, lr}
 811cf5e:	b08a      	sub	sp, #40	@ 0x28
 811cf60:	af00      	add	r7, sp, #0
 811cf62:	60f8      	str	r0, [r7, #12]
 811cf64:	60b9      	str	r1, [r7, #8]
 811cf66:	603b      	str	r3, [r7, #0]
 811cf68:	4613      	mov	r3, r2
 811cf6a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 811cf6c:	2300      	movs	r3, #0
 811cf6e:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 811cf70:	68fb      	ldr	r3, [r7, #12]
 811cf72:	2b00      	cmp	r3, #0
 811cf74:	d109      	bne.n	811cf8a <tcp_connect+0x2e>
 811cf76:	4b7d      	ldr	r3, [pc, #500]	@ (811d16c <tcp_connect+0x210>)
 811cf78:	f240 4235 	movw	r2, #1077	@ 0x435
 811cf7c:	497c      	ldr	r1, [pc, #496]	@ (811d170 <tcp_connect+0x214>)
 811cf7e:	487d      	ldr	r0, [pc, #500]	@ (811d174 <tcp_connect+0x218>)
 811cf80:	f007 fb6c 	bl	812465c <iprintf>
 811cf84:	f06f 030f 	mvn.w	r3, #15
 811cf88:	e0ec      	b.n	811d164 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 811cf8a:	68bb      	ldr	r3, [r7, #8]
 811cf8c:	2b00      	cmp	r3, #0
 811cf8e:	d109      	bne.n	811cfa4 <tcp_connect+0x48>
 811cf90:	4b76      	ldr	r3, [pc, #472]	@ (811d16c <tcp_connect+0x210>)
 811cf92:	f240 4236 	movw	r2, #1078	@ 0x436
 811cf96:	4978      	ldr	r1, [pc, #480]	@ (811d178 <tcp_connect+0x21c>)
 811cf98:	4876      	ldr	r0, [pc, #472]	@ (811d174 <tcp_connect+0x218>)
 811cf9a:	f007 fb5f 	bl	812465c <iprintf>
 811cf9e:	f06f 030f 	mvn.w	r3, #15
 811cfa2:	e0df      	b.n	811d164 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 811cfa4:	68fb      	ldr	r3, [r7, #12]
 811cfa6:	7d1b      	ldrb	r3, [r3, #20]
 811cfa8:	2b00      	cmp	r3, #0
 811cfaa:	d009      	beq.n	811cfc0 <tcp_connect+0x64>
 811cfac:	4b6f      	ldr	r3, [pc, #444]	@ (811d16c <tcp_connect+0x210>)
 811cfae:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 811cfb2:	4972      	ldr	r1, [pc, #456]	@ (811d17c <tcp_connect+0x220>)
 811cfb4:	486f      	ldr	r0, [pc, #444]	@ (811d174 <tcp_connect+0x218>)
 811cfb6:	f007 fb51 	bl	812465c <iprintf>
 811cfba:	f06f 0309 	mvn.w	r3, #9
 811cfbe:	e0d1      	b.n	811d164 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 811cfc0:	68bb      	ldr	r3, [r7, #8]
 811cfc2:	2b00      	cmp	r3, #0
 811cfc4:	d002      	beq.n	811cfcc <tcp_connect+0x70>
 811cfc6:	68bb      	ldr	r3, [r7, #8]
 811cfc8:	681b      	ldr	r3, [r3, #0]
 811cfca:	e000      	b.n	811cfce <tcp_connect+0x72>
 811cfcc:	2300      	movs	r3, #0
 811cfce:	68fa      	ldr	r2, [r7, #12]
 811cfd0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 811cfd2:	68fb      	ldr	r3, [r7, #12]
 811cfd4:	88fa      	ldrh	r2, [r7, #6]
 811cfd6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 811cfd8:	68fb      	ldr	r3, [r7, #12]
 811cfda:	7a1b      	ldrb	r3, [r3, #8]
 811cfdc:	2b00      	cmp	r3, #0
 811cfde:	d006      	beq.n	811cfee <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 811cfe0:	68fb      	ldr	r3, [r7, #12]
 811cfe2:	7a1b      	ldrb	r3, [r3, #8]
 811cfe4:	4618      	mov	r0, r3
 811cfe6:	f7fe fc05 	bl	811b7f4 <netif_get_by_index>
 811cfea:	6278      	str	r0, [r7, #36]	@ 0x24
 811cfec:	e005      	b.n	811cffa <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 811cfee:	68fb      	ldr	r3, [r7, #12]
 811cff0:	3304      	adds	r3, #4
 811cff2:	4618      	mov	r0, r3
 811cff4:	f7fc f924 	bl	8119240 <ip4_route>
 811cff8:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 811cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811cffc:	2b00      	cmp	r3, #0
 811cffe:	d102      	bne.n	811d006 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 811d000:	f06f 0303 	mvn.w	r3, #3
 811d004:	e0ae      	b.n	811d164 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 811d006:	68fb      	ldr	r3, [r7, #12]
 811d008:	2b00      	cmp	r3, #0
 811d00a:	d003      	beq.n	811d014 <tcp_connect+0xb8>
 811d00c:	68fb      	ldr	r3, [r7, #12]
 811d00e:	681b      	ldr	r3, [r3, #0]
 811d010:	2b00      	cmp	r3, #0
 811d012:	d111      	bne.n	811d038 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 811d014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d016:	2b00      	cmp	r3, #0
 811d018:	d002      	beq.n	811d020 <tcp_connect+0xc4>
 811d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d01c:	3304      	adds	r3, #4
 811d01e:	e000      	b.n	811d022 <tcp_connect+0xc6>
 811d020:	2300      	movs	r3, #0
 811d022:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 811d024:	69fb      	ldr	r3, [r7, #28]
 811d026:	2b00      	cmp	r3, #0
 811d028:	d102      	bne.n	811d030 <tcp_connect+0xd4>
      return ERR_RTE;
 811d02a:	f06f 0303 	mvn.w	r3, #3
 811d02e:	e099      	b.n	811d164 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811d030:	69fb      	ldr	r3, [r7, #28]
 811d032:	681a      	ldr	r2, [r3, #0]
 811d034:	68fb      	ldr	r3, [r7, #12]
 811d036:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 811d038:	68fb      	ldr	r3, [r7, #12]
 811d03a:	8adb      	ldrh	r3, [r3, #22]
 811d03c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 811d03e:	68fb      	ldr	r3, [r7, #12]
 811d040:	8adb      	ldrh	r3, [r3, #22]
 811d042:	2b00      	cmp	r3, #0
 811d044:	d10c      	bne.n	811d060 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 811d046:	f7ff ff43 	bl	811ced0 <tcp_new_port>
 811d04a:	4603      	mov	r3, r0
 811d04c:	461a      	mov	r2, r3
 811d04e:	68fb      	ldr	r3, [r7, #12]
 811d050:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 811d052:	68fb      	ldr	r3, [r7, #12]
 811d054:	8adb      	ldrh	r3, [r3, #22]
 811d056:	2b00      	cmp	r3, #0
 811d058:	d102      	bne.n	811d060 <tcp_connect+0x104>
      return ERR_BUF;
 811d05a:	f06f 0301 	mvn.w	r3, #1
 811d05e:	e081      	b.n	811d164 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 811d060:	68f8      	ldr	r0, [r7, #12]
 811d062:	f001 f80d 	bl	811e080 <tcp_next_iss>
 811d066:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 811d068:	68fb      	ldr	r3, [r7, #12]
 811d06a:	2200      	movs	r2, #0
 811d06c:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 811d06e:	68fb      	ldr	r3, [r7, #12]
 811d070:	697a      	ldr	r2, [r7, #20]
 811d072:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 811d074:	697b      	ldr	r3, [r7, #20]
 811d076:	1e5a      	subs	r2, r3, #1
 811d078:	68fb      	ldr	r3, [r7, #12]
 811d07a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 811d07c:	697b      	ldr	r3, [r7, #20]
 811d07e:	1e5a      	subs	r2, r3, #1
 811d080:	68fb      	ldr	r3, [r7, #12]
 811d082:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 811d084:	697b      	ldr	r3, [r7, #20]
 811d086:	1e5a      	subs	r2, r3, #1
 811d088:	68fb      	ldr	r3, [r7, #12]
 811d08a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811d08c:	68fb      	ldr	r3, [r7, #12]
 811d08e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811d092:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811d094:	68fb      	ldr	r3, [r7, #12]
 811d096:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811d098:	68fb      	ldr	r3, [r7, #12]
 811d09a:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811d09c:	68fb      	ldr	r3, [r7, #12]
 811d09e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811d0a0:	68fb      	ldr	r3, [r7, #12]
 811d0a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 811d0a4:	68fb      	ldr	r3, [r7, #12]
 811d0a6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811d0aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 811d0ae:	68fb      	ldr	r3, [r7, #12]
 811d0b0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811d0b4:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 811d0b6:	68fb      	ldr	r3, [r7, #12]
 811d0b8:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 811d0ba:	68fb      	ldr	r3, [r7, #12]
 811d0bc:	3304      	adds	r3, #4
 811d0be:	461a      	mov	r2, r3
 811d0c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811d0c2:	f001 f803 	bl	811e0cc <tcp_eff_send_mss_netif>
 811d0c6:	4603      	mov	r3, r0
 811d0c8:	461a      	mov	r2, r3
 811d0ca:	68fb      	ldr	r3, [r7, #12]
 811d0cc:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 811d0ce:	68fb      	ldr	r3, [r7, #12]
 811d0d0:	2201      	movs	r2, #1
 811d0d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 811d0d6:	68fb      	ldr	r3, [r7, #12]
 811d0d8:	683a      	ldr	r2, [r7, #0]
 811d0da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 811d0de:	2102      	movs	r1, #2
 811d0e0:	68f8      	ldr	r0, [r7, #12]
 811d0e2:	f004 fa61 	bl	81215a8 <tcp_enqueue_flags>
 811d0e6:	4603      	mov	r3, r0
 811d0e8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 811d0ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811d0ee:	2b00      	cmp	r3, #0
 811d0f0:	d136      	bne.n	811d160 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 811d0f2:	68fb      	ldr	r3, [r7, #12]
 811d0f4:	2202      	movs	r2, #2
 811d0f6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 811d0f8:	8b7b      	ldrh	r3, [r7, #26]
 811d0fa:	2b00      	cmp	r3, #0
 811d0fc:	d021      	beq.n	811d142 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 811d0fe:	4b20      	ldr	r3, [pc, #128]	@ (811d180 <tcp_connect+0x224>)
 811d100:	681b      	ldr	r3, [r3, #0]
 811d102:	68fa      	ldr	r2, [r7, #12]
 811d104:	429a      	cmp	r2, r3
 811d106:	d105      	bne.n	811d114 <tcp_connect+0x1b8>
 811d108:	4b1d      	ldr	r3, [pc, #116]	@ (811d180 <tcp_connect+0x224>)
 811d10a:	681b      	ldr	r3, [r3, #0]
 811d10c:	68db      	ldr	r3, [r3, #12]
 811d10e:	4a1c      	ldr	r2, [pc, #112]	@ (811d180 <tcp_connect+0x224>)
 811d110:	6013      	str	r3, [r2, #0]
 811d112:	e013      	b.n	811d13c <tcp_connect+0x1e0>
 811d114:	4b1a      	ldr	r3, [pc, #104]	@ (811d180 <tcp_connect+0x224>)
 811d116:	681b      	ldr	r3, [r3, #0]
 811d118:	623b      	str	r3, [r7, #32]
 811d11a:	e00c      	b.n	811d136 <tcp_connect+0x1da>
 811d11c:	6a3b      	ldr	r3, [r7, #32]
 811d11e:	68db      	ldr	r3, [r3, #12]
 811d120:	68fa      	ldr	r2, [r7, #12]
 811d122:	429a      	cmp	r2, r3
 811d124:	d104      	bne.n	811d130 <tcp_connect+0x1d4>
 811d126:	68fb      	ldr	r3, [r7, #12]
 811d128:	68da      	ldr	r2, [r3, #12]
 811d12a:	6a3b      	ldr	r3, [r7, #32]
 811d12c:	60da      	str	r2, [r3, #12]
 811d12e:	e005      	b.n	811d13c <tcp_connect+0x1e0>
 811d130:	6a3b      	ldr	r3, [r7, #32]
 811d132:	68db      	ldr	r3, [r3, #12]
 811d134:	623b      	str	r3, [r7, #32]
 811d136:	6a3b      	ldr	r3, [r7, #32]
 811d138:	2b00      	cmp	r3, #0
 811d13a:	d1ef      	bne.n	811d11c <tcp_connect+0x1c0>
 811d13c:	68fb      	ldr	r3, [r7, #12]
 811d13e:	2200      	movs	r2, #0
 811d140:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 811d142:	4b10      	ldr	r3, [pc, #64]	@ (811d184 <tcp_connect+0x228>)
 811d144:	681a      	ldr	r2, [r3, #0]
 811d146:	68fb      	ldr	r3, [r7, #12]
 811d148:	60da      	str	r2, [r3, #12]
 811d14a:	4a0e      	ldr	r2, [pc, #56]	@ (811d184 <tcp_connect+0x228>)
 811d14c:	68fb      	ldr	r3, [r7, #12]
 811d14e:	6013      	str	r3, [r2, #0]
 811d150:	f005 fbec 	bl	812292c <tcp_timer_needed>
 811d154:	4b0c      	ldr	r3, [pc, #48]	@ (811d188 <tcp_connect+0x22c>)
 811d156:	2201      	movs	r2, #1
 811d158:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 811d15a:	68f8      	ldr	r0, [r7, #12]
 811d15c:	f004 fb12 	bl	8121784 <tcp_output>
  }
  return ret;
 811d160:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 811d164:	4618      	mov	r0, r3
 811d166:	3728      	adds	r7, #40	@ 0x28
 811d168:	46bd      	mov	sp, r7
 811d16a:	bd80      	pop	{r7, pc}
 811d16c:	08126a28 	.word	0x08126a28
 811d170:	08126d48 	.word	0x08126d48
 811d174:	08126ab0 	.word	0x08126ab0
 811d178:	08126d64 	.word	0x08126d64
 811d17c:	08126d80 	.word	0x08126d80
 811d180:	1000e49c 	.word	0x1000e49c
 811d184:	1000e4a4 	.word	0x1000e4a4
 811d188:	1000e4ac 	.word	0x1000e4ac

0811d18c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 811d18c:	b5b0      	push	{r4, r5, r7, lr}
 811d18e:	b090      	sub	sp, #64	@ 0x40
 811d190:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 811d192:	2300      	movs	r3, #0
 811d194:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 811d198:	4b95      	ldr	r3, [pc, #596]	@ (811d3f0 <tcp_slowtmr+0x264>)
 811d19a:	681b      	ldr	r3, [r3, #0]
 811d19c:	3301      	adds	r3, #1
 811d19e:	4a94      	ldr	r2, [pc, #592]	@ (811d3f0 <tcp_slowtmr+0x264>)
 811d1a0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 811d1a2:	4b94      	ldr	r3, [pc, #592]	@ (811d3f4 <tcp_slowtmr+0x268>)
 811d1a4:	781b      	ldrb	r3, [r3, #0]
 811d1a6:	3301      	adds	r3, #1
 811d1a8:	b2da      	uxtb	r2, r3
 811d1aa:	4b92      	ldr	r3, [pc, #584]	@ (811d3f4 <tcp_slowtmr+0x268>)
 811d1ac:	701a      	strb	r2, [r3, #0]
 811d1ae:	e000      	b.n	811d1b2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 811d1b0:	bf00      	nop
  prev = NULL;
 811d1b2:	2300      	movs	r3, #0
 811d1b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 811d1b6:	4b90      	ldr	r3, [pc, #576]	@ (811d3f8 <tcp_slowtmr+0x26c>)
 811d1b8:	681b      	ldr	r3, [r3, #0]
 811d1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811d1bc:	e2bb      	b.n	811d736 <tcp_slowtmr+0x5aa>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 811d1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d1c0:	7d1b      	ldrb	r3, [r3, #20]
 811d1c2:	2b00      	cmp	r3, #0
 811d1c4:	d106      	bne.n	811d1d4 <tcp_slowtmr+0x48>
 811d1c6:	4b8d      	ldr	r3, [pc, #564]	@ (811d3fc <tcp_slowtmr+0x270>)
 811d1c8:	f240 42be 	movw	r2, #1214	@ 0x4be
 811d1cc:	498c      	ldr	r1, [pc, #560]	@ (811d400 <tcp_slowtmr+0x274>)
 811d1ce:	488d      	ldr	r0, [pc, #564]	@ (811d404 <tcp_slowtmr+0x278>)
 811d1d0:	f007 fa44 	bl	812465c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 811d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d1d6:	7d1b      	ldrb	r3, [r3, #20]
 811d1d8:	2b01      	cmp	r3, #1
 811d1da:	d106      	bne.n	811d1ea <tcp_slowtmr+0x5e>
 811d1dc:	4b87      	ldr	r3, [pc, #540]	@ (811d3fc <tcp_slowtmr+0x270>)
 811d1de:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 811d1e2:	4989      	ldr	r1, [pc, #548]	@ (811d408 <tcp_slowtmr+0x27c>)
 811d1e4:	4887      	ldr	r0, [pc, #540]	@ (811d404 <tcp_slowtmr+0x278>)
 811d1e6:	f007 fa39 	bl	812465c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 811d1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d1ec:	7d1b      	ldrb	r3, [r3, #20]
 811d1ee:	2b0a      	cmp	r3, #10
 811d1f0:	d106      	bne.n	811d200 <tcp_slowtmr+0x74>
 811d1f2:	4b82      	ldr	r3, [pc, #520]	@ (811d3fc <tcp_slowtmr+0x270>)
 811d1f4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 811d1f8:	4984      	ldr	r1, [pc, #528]	@ (811d40c <tcp_slowtmr+0x280>)
 811d1fa:	4882      	ldr	r0, [pc, #520]	@ (811d404 <tcp_slowtmr+0x278>)
 811d1fc:	f007 fa2e 	bl	812465c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 811d200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d202:	7f9a      	ldrb	r2, [r3, #30]
 811d204:	4b7b      	ldr	r3, [pc, #492]	@ (811d3f4 <tcp_slowtmr+0x268>)
 811d206:	781b      	ldrb	r3, [r3, #0]
 811d208:	429a      	cmp	r2, r3
 811d20a:	d105      	bne.n	811d218 <tcp_slowtmr+0x8c>
      prev = pcb;
 811d20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d20e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d212:	68db      	ldr	r3, [r3, #12]
 811d214:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 811d216:	e28e      	b.n	811d736 <tcp_slowtmr+0x5aa>
    pcb->last_timer = tcp_timer_ctr;
 811d218:	4b76      	ldr	r3, [pc, #472]	@ (811d3f4 <tcp_slowtmr+0x268>)
 811d21a:	781a      	ldrb	r2, [r3, #0]
 811d21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d21e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 811d220:	2300      	movs	r3, #0
 811d222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 811d226:	2300      	movs	r3, #0
 811d228:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 811d22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d22e:	7d1b      	ldrb	r3, [r3, #20]
 811d230:	2b02      	cmp	r3, #2
 811d232:	d10a      	bne.n	811d24a <tcp_slowtmr+0xbe>
 811d234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d236:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811d23a:	2b05      	cmp	r3, #5
 811d23c:	d905      	bls.n	811d24a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 811d23e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d242:	3301      	adds	r3, #1
 811d244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811d248:	e11e      	b.n	811d488 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 811d24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d24c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811d250:	2b0b      	cmp	r3, #11
 811d252:	d905      	bls.n	811d260 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 811d254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d258:	3301      	adds	r3, #1
 811d25a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811d25e:	e113      	b.n	811d488 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 811d260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d262:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811d266:	2b00      	cmp	r3, #0
 811d268:	d075      	beq.n	811d356 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 811d26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d26c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d26e:	2b00      	cmp	r3, #0
 811d270:	d006      	beq.n	811d280 <tcp_slowtmr+0xf4>
 811d272:	4b62      	ldr	r3, [pc, #392]	@ (811d3fc <tcp_slowtmr+0x270>)
 811d274:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 811d278:	4965      	ldr	r1, [pc, #404]	@ (811d410 <tcp_slowtmr+0x284>)
 811d27a:	4862      	ldr	r0, [pc, #392]	@ (811d404 <tcp_slowtmr+0x278>)
 811d27c:	f007 f9ee 	bl	812465c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 811d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d284:	2b00      	cmp	r3, #0
 811d286:	d106      	bne.n	811d296 <tcp_slowtmr+0x10a>
 811d288:	4b5c      	ldr	r3, [pc, #368]	@ (811d3fc <tcp_slowtmr+0x270>)
 811d28a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 811d28e:	4961      	ldr	r1, [pc, #388]	@ (811d414 <tcp_slowtmr+0x288>)
 811d290:	485c      	ldr	r0, [pc, #368]	@ (811d404 <tcp_slowtmr+0x278>)
 811d292:	f007 f9e3 	bl	812465c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 811d296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d298:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 811d29c:	2b0b      	cmp	r3, #11
 811d29e:	d905      	bls.n	811d2ac <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 811d2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d2a4:	3301      	adds	r3, #1
 811d2a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811d2aa:	e0ed      	b.n	811d488 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 811d2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d2ae:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811d2b2:	3b01      	subs	r3, #1
 811d2b4:	4a58      	ldr	r2, [pc, #352]	@ (811d418 <tcp_slowtmr+0x28c>)
 811d2b6:	5cd3      	ldrb	r3, [r2, r3]
 811d2b8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 811d2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d2bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811d2c0:	7c7a      	ldrb	r2, [r7, #17]
 811d2c2:	429a      	cmp	r2, r3
 811d2c4:	d907      	bls.n	811d2d6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 811d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d2c8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811d2cc:	3301      	adds	r3, #1
 811d2ce:	b2da      	uxtb	r2, r3
 811d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d2d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 811d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d2d8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811d2dc:	7c7a      	ldrb	r2, [r7, #17]
 811d2de:	429a      	cmp	r2, r3
 811d2e0:	f200 80d2 	bhi.w	811d488 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 811d2e4:	2301      	movs	r3, #1
 811d2e6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 811d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d2ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811d2ee:	2b00      	cmp	r3, #0
 811d2f0:	d108      	bne.n	811d304 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 811d2f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d2f4:	f005 f8ee 	bl	81224d4 <tcp_zero_window_probe>
 811d2f8:	4603      	mov	r3, r0
 811d2fa:	2b00      	cmp	r3, #0
 811d2fc:	d014      	beq.n	811d328 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 811d2fe:	2300      	movs	r3, #0
 811d300:	623b      	str	r3, [r7, #32]
 811d302:	e011      	b.n	811d328 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 811d304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d306:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811d30a:	4619      	mov	r1, r3
 811d30c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d30e:	f003 ffb3 	bl	8121278 <tcp_split_unsent_seg>
 811d312:	4603      	mov	r3, r0
 811d314:	2b00      	cmp	r3, #0
 811d316:	d107      	bne.n	811d328 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 811d318:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d31a:	f004 fa33 	bl	8121784 <tcp_output>
 811d31e:	4603      	mov	r3, r0
 811d320:	2b00      	cmp	r3, #0
 811d322:	d101      	bne.n	811d328 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 811d324:	2300      	movs	r3, #0
 811d326:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 811d328:	6a3b      	ldr	r3, [r7, #32]
 811d32a:	2b00      	cmp	r3, #0
 811d32c:	f000 80ac 	beq.w	811d488 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 811d330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d332:	2200      	movs	r2, #0
 811d334:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 811d338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d33a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811d33e:	2b06      	cmp	r3, #6
 811d340:	f200 80a2 	bhi.w	811d488 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 811d344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d346:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811d34a:	3301      	adds	r3, #1
 811d34c:	b2da      	uxtb	r2, r3
 811d34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d350:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 811d354:	e098      	b.n	811d488 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 811d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d358:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811d35c:	2b00      	cmp	r3, #0
 811d35e:	db0f      	blt.n	811d380 <tcp_slowtmr+0x1f4>
 811d360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d362:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811d366:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811d36a:	4293      	cmp	r3, r2
 811d36c:	d008      	beq.n	811d380 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 811d36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d370:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811d374:	b29b      	uxth	r3, r3
 811d376:	3301      	adds	r3, #1
 811d378:	b29b      	uxth	r3, r3
 811d37a:	b21a      	sxth	r2, r3
 811d37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d37e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 811d380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d382:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 811d386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d388:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811d38c:	429a      	cmp	r2, r3
 811d38e:	db7b      	blt.n	811d488 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 811d390:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d392:	f004 fceb 	bl	8121d6c <tcp_rexmit_rto_prepare>
 811d396:	4603      	mov	r3, r0
 811d398:	2b00      	cmp	r3, #0
 811d39a:	d007      	beq.n	811d3ac <tcp_slowtmr+0x220>
 811d39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d39e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d3a0:	2b00      	cmp	r3, #0
 811d3a2:	d171      	bne.n	811d488 <tcp_slowtmr+0x2fc>
 811d3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d3a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d3a8:	2b00      	cmp	r3, #0
 811d3aa:	d06d      	beq.n	811d488 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 811d3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d3ae:	7d1b      	ldrb	r3, [r3, #20]
 811d3b0:	2b02      	cmp	r3, #2
 811d3b2:	d03a      	beq.n	811d42a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 811d3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d3b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811d3ba:	2b0c      	cmp	r3, #12
 811d3bc:	bf28      	it	cs
 811d3be:	230c      	movcs	r3, #12
 811d3c0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 811d3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d3c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d3c8:	10db      	asrs	r3, r3, #3
 811d3ca:	b21b      	sxth	r3, r3
 811d3cc:	461a      	mov	r2, r3
 811d3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d3d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d3d4:	4413      	add	r3, r2
 811d3d6:	7efa      	ldrb	r2, [r7, #27]
 811d3d8:	4910      	ldr	r1, [pc, #64]	@ (811d41c <tcp_slowtmr+0x290>)
 811d3da:	5c8a      	ldrb	r2, [r1, r2]
 811d3dc:	4093      	lsls	r3, r2
 811d3de:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 811d3e0:	697b      	ldr	r3, [r7, #20]
 811d3e2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 811d3e6:	4293      	cmp	r3, r2
 811d3e8:	dc1a      	bgt.n	811d420 <tcp_slowtmr+0x294>
 811d3ea:	697b      	ldr	r3, [r7, #20]
 811d3ec:	b21a      	sxth	r2, r3
 811d3ee:	e019      	b.n	811d424 <tcp_slowtmr+0x298>
 811d3f0:	1000e498 	.word	0x1000e498
 811d3f4:	1000e4ae 	.word	0x1000e4ae
 811d3f8:	1000e4a4 	.word	0x1000e4a4
 811d3fc:	08126a28 	.word	0x08126a28
 811d400:	08126db0 	.word	0x08126db0
 811d404:	08126ab0 	.word	0x08126ab0
 811d408:	08126ddc 	.word	0x08126ddc
 811d40c:	08126e08 	.word	0x08126e08
 811d410:	08126e38 	.word	0x08126e38
 811d414:	08126e6c 	.word	0x08126e6c
 811d418:	081286cc 	.word	0x081286cc
 811d41c:	081286bc 	.word	0x081286bc
 811d420:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811d424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d426:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 811d42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d42c:	2200      	movs	r2, #0
 811d42e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 811d430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d432:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811d436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d438:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d43c:	4293      	cmp	r3, r2
 811d43e:	bf28      	it	cs
 811d440:	4613      	movcs	r3, r2
 811d442:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 811d444:	8a7b      	ldrh	r3, [r7, #18]
 811d446:	085b      	lsrs	r3, r3, #1
 811d448:	b29a      	uxth	r2, r3
 811d44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d44c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 811d450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d452:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811d456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d458:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d45a:	005b      	lsls	r3, r3, #1
 811d45c:	b29b      	uxth	r3, r3
 811d45e:	429a      	cmp	r2, r3
 811d460:	d206      	bcs.n	811d470 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 811d462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d464:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d466:	005b      	lsls	r3, r3, #1
 811d468:	b29a      	uxth	r2, r3
 811d46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d46c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 811d470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d472:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 811d474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d476:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 811d47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d47c:	2200      	movs	r2, #0
 811d47e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 811d482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d484:	f004 fce2 	bl	8121e4c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 811d488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d48a:	7d1b      	ldrb	r3, [r3, #20]
 811d48c:	2b06      	cmp	r3, #6
 811d48e:	d112      	bne.n	811d4b6 <tcp_slowtmr+0x32a>
      if (pcb->flags & TF_RXCLOSED) {
 811d490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d492:	8b5b      	ldrh	r3, [r3, #26]
 811d494:	f003 0310 	and.w	r3, r3, #16
 811d498:	2b00      	cmp	r3, #0
 811d49a:	d00c      	beq.n	811d4b6 <tcp_slowtmr+0x32a>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 811d49c:	4b96      	ldr	r3, [pc, #600]	@ (811d6f8 <tcp_slowtmr+0x56c>)
 811d49e:	681a      	ldr	r2, [r3, #0]
 811d4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d4a2:	6a1b      	ldr	r3, [r3, #32]
 811d4a4:	1ad3      	subs	r3, r2, r3
 811d4a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 811d4aa:	d904      	bls.n	811d4b6 <tcp_slowtmr+0x32a>
          ++pcb_remove;
 811d4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d4b0:	3301      	adds	r3, #1
 811d4b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811d4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d4b8:	7a5b      	ldrb	r3, [r3, #9]
 811d4ba:	f003 0308 	and.w	r3, r3, #8
 811d4be:	2b00      	cmp	r3, #0
 811d4c0:	d053      	beq.n	811d56a <tcp_slowtmr+0x3de>
        ((pcb->state == ESTABLISHED) ||
 811d4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d4c4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811d4c6:	2b04      	cmp	r3, #4
 811d4c8:	d003      	beq.n	811d4d2 <tcp_slowtmr+0x346>
         (pcb->state == CLOSE_WAIT))) {
 811d4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d4cc:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 811d4ce:	2b07      	cmp	r3, #7
 811d4d0:	d14b      	bne.n	811d56a <tcp_slowtmr+0x3de>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811d4d2:	4b89      	ldr	r3, [pc, #548]	@ (811d6f8 <tcp_slowtmr+0x56c>)
 811d4d4:	681a      	ldr	r2, [r3, #0]
 811d4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d4d8:	6a1b      	ldr	r3, [r3, #32]
 811d4da:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 811d4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d4de:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811d4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d4e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 811d4e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d4ea:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 811d4ee:	fb00 f303 	mul.w	r3, r0, r3
 811d4f2:	440b      	add	r3, r1
 811d4f4:	4981      	ldr	r1, [pc, #516]	@ (811d6fc <tcp_slowtmr+0x570>)
 811d4f6:	fba1 1303 	umull	r1, r3, r1, r3
 811d4fa:	091b      	lsrs	r3, r3, #4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811d4fc:	429a      	cmp	r2, r3
 811d4fe:	d90a      	bls.n	811d516 <tcp_slowtmr+0x38a>
        ++pcb_remove;
 811d500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d504:	3301      	adds	r3, #1
 811d506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 811d50a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811d50e:	3301      	adds	r3, #1
 811d510:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 811d514:	e029      	b.n	811d56a <tcp_slowtmr+0x3de>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811d516:	4b78      	ldr	r3, [pc, #480]	@ (811d6f8 <tcp_slowtmr+0x56c>)
 811d518:	681a      	ldr	r2, [r3, #0]
 811d51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d51c:	6a1b      	ldr	r3, [r3, #32]
 811d51e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 811d520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d522:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811d526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d528:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811d52c:	4618      	mov	r0, r3
 811d52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d530:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 811d534:	fb00 f303 	mul.w	r3, r0, r3
 811d538:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 811d53a:	4970      	ldr	r1, [pc, #448]	@ (811d6fc <tcp_slowtmr+0x570>)
 811d53c:	fba1 1303 	umull	r1, r3, r1, r3
 811d540:	091b      	lsrs	r3, r3, #4
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811d542:	429a      	cmp	r2, r3
 811d544:	d911      	bls.n	811d56a <tcp_slowtmr+0x3de>
        err = tcp_keepalive(pcb);
 811d546:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d548:	f004 ff84 	bl	8122454 <tcp_keepalive>
 811d54c:	4603      	mov	r3, r0
 811d54e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 811d552:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811d556:	2b00      	cmp	r3, #0
 811d558:	d107      	bne.n	811d56a <tcp_slowtmr+0x3de>
          pcb->keep_cnt_sent++;
 811d55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d55c:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811d560:	3301      	adds	r3, #1
 811d562:	b2da      	uxtb	r2, r3
 811d564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d566:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 811d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d56e:	2b00      	cmp	r3, #0
 811d570:	d011      	beq.n	811d596 <tcp_slowtmr+0x40a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 811d572:	4b61      	ldr	r3, [pc, #388]	@ (811d6f8 <tcp_slowtmr+0x56c>)
 811d574:	681a      	ldr	r2, [r3, #0]
 811d576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d578:	6a1b      	ldr	r3, [r3, #32]
 811d57a:	1ad2      	subs	r2, r2, r3
 811d57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d57e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811d582:	4619      	mov	r1, r3
 811d584:	460b      	mov	r3, r1
 811d586:	005b      	lsls	r3, r3, #1
 811d588:	440b      	add	r3, r1
 811d58a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 811d58c:	429a      	cmp	r2, r3
 811d58e:	d302      	bcc.n	811d596 <tcp_slowtmr+0x40a>
      tcp_free_ooseq(pcb);
 811d590:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d592:	f000 fe45 	bl	811e220 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 811d596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d598:	7d1b      	ldrb	r3, [r3, #20]
 811d59a:	2b03      	cmp	r3, #3
 811d59c:	d10c      	bne.n	811d5b8 <tcp_slowtmr+0x42c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811d59e:	4b56      	ldr	r3, [pc, #344]	@ (811d6f8 <tcp_slowtmr+0x56c>)
 811d5a0:	681a      	ldr	r2, [r3, #0]
 811d5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d5a4:	6a1b      	ldr	r3, [r3, #32]
 811d5a6:	1ad3      	subs	r3, r2, r3
 811d5a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 811d5ac:	d904      	bls.n	811d5b8 <tcp_slowtmr+0x42c>
        ++pcb_remove;
 811d5ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d5b2:	3301      	adds	r3, #1
 811d5b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 811d5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d5ba:	7d1b      	ldrb	r3, [r3, #20]
 811d5bc:	2b09      	cmp	r3, #9
 811d5be:	d10d      	bne.n	811d5dc <tcp_slowtmr+0x450>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811d5c0:	4b4d      	ldr	r3, [pc, #308]	@ (811d6f8 <tcp_slowtmr+0x56c>)
 811d5c2:	681a      	ldr	r2, [r3, #0]
 811d5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d5c6:	6a1b      	ldr	r3, [r3, #32]
 811d5c8:	1ad3      	subs	r3, r2, r3
 811d5ca:	f241 7270 	movw	r2, #6000	@ 0x1770
 811d5ce:	4293      	cmp	r3, r2
 811d5d0:	d904      	bls.n	811d5dc <tcp_slowtmr+0x450>
        ++pcb_remove;
 811d5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d5d6:	3301      	adds	r3, #1
 811d5d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 811d5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d5e0:	2b00      	cmp	r3, #0
 811d5e2:	d060      	beq.n	811d6a6 <tcp_slowtmr+0x51a>
      tcp_err_fn err_fn = pcb->errf;
 811d5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811d5ea:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 811d5ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d5ee:	f000 fc63 	bl	811deb8 <tcp_pcb_purge>
      if (prev != NULL) {
 811d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d5f4:	2b00      	cmp	r3, #0
 811d5f6:	d010      	beq.n	811d61a <tcp_slowtmr+0x48e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 811d5f8:	4b41      	ldr	r3, [pc, #260]	@ (811d700 <tcp_slowtmr+0x574>)
 811d5fa:	681b      	ldr	r3, [r3, #0]
 811d5fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811d5fe:	429a      	cmp	r2, r3
 811d600:	d106      	bne.n	811d610 <tcp_slowtmr+0x484>
 811d602:	4b40      	ldr	r3, [pc, #256]	@ (811d704 <tcp_slowtmr+0x578>)
 811d604:	f240 526d 	movw	r2, #1389	@ 0x56d
 811d608:	493f      	ldr	r1, [pc, #252]	@ (811d708 <tcp_slowtmr+0x57c>)
 811d60a:	4840      	ldr	r0, [pc, #256]	@ (811d70c <tcp_slowtmr+0x580>)
 811d60c:	f007 f826 	bl	812465c <iprintf>
        prev->next = pcb->next;
 811d610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d612:	68da      	ldr	r2, [r3, #12]
 811d614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d616:	60da      	str	r2, [r3, #12]
 811d618:	e00f      	b.n	811d63a <tcp_slowtmr+0x4ae>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 811d61a:	4b39      	ldr	r3, [pc, #228]	@ (811d700 <tcp_slowtmr+0x574>)
 811d61c:	681b      	ldr	r3, [r3, #0]
 811d61e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811d620:	429a      	cmp	r2, r3
 811d622:	d006      	beq.n	811d632 <tcp_slowtmr+0x4a6>
 811d624:	4b37      	ldr	r3, [pc, #220]	@ (811d704 <tcp_slowtmr+0x578>)
 811d626:	f240 5271 	movw	r2, #1393	@ 0x571
 811d62a:	4939      	ldr	r1, [pc, #228]	@ (811d710 <tcp_slowtmr+0x584>)
 811d62c:	4837      	ldr	r0, [pc, #220]	@ (811d70c <tcp_slowtmr+0x580>)
 811d62e:	f007 f815 	bl	812465c <iprintf>
        tcp_active_pcbs = pcb->next;
 811d632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d634:	68db      	ldr	r3, [r3, #12]
 811d636:	4a32      	ldr	r2, [pc, #200]	@ (811d700 <tcp_slowtmr+0x574>)
 811d638:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 811d63a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811d63e:	2b00      	cmp	r3, #0
 811d640:	d013      	beq.n	811d66a <tcp_slowtmr+0x4de>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811d642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d644:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811d646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d648:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811d64a:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 811d64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d64e:	3304      	adds	r3, #4
 811d650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811d652:	8ad2      	ldrh	r2, [r2, #22]
 811d654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811d656:	8b09      	ldrh	r1, [r1, #24]
 811d658:	9102      	str	r1, [sp, #8]
 811d65a:	9201      	str	r2, [sp, #4]
 811d65c:	9300      	str	r3, [sp, #0]
 811d65e:	462b      	mov	r3, r5
 811d660:	4622      	mov	r2, r4
 811d662:	4601      	mov	r1, r0
 811d664:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d666:	f004 fe41 	bl	81222ec <tcp_rst>
      err_arg = pcb->callback_arg;
 811d66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d66c:	691b      	ldr	r3, [r3, #16]
 811d66e:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 811d670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d672:	7d1b      	ldrb	r3, [r3, #20]
 811d674:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 811d676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d678:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 811d67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d67c:	68db      	ldr	r3, [r3, #12]
 811d67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 811d680:	6838      	ldr	r0, [r7, #0]
 811d682:	f7fe fff1 	bl	811c668 <tcp_free>
      tcp_active_pcbs_changed = 0;
 811d686:	4b23      	ldr	r3, [pc, #140]	@ (811d714 <tcp_slowtmr+0x588>)
 811d688:	2200      	movs	r2, #0
 811d68a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 811d68c:	68fb      	ldr	r3, [r7, #12]
 811d68e:	2b00      	cmp	r3, #0
 811d690:	d004      	beq.n	811d69c <tcp_slowtmr+0x510>
 811d692:	68fb      	ldr	r3, [r7, #12]
 811d694:	f06f 010c 	mvn.w	r1, #12
 811d698:	68b8      	ldr	r0, [r7, #8]
 811d69a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 811d69c:	4b1d      	ldr	r3, [pc, #116]	@ (811d714 <tcp_slowtmr+0x588>)
 811d69e:	781b      	ldrb	r3, [r3, #0]
 811d6a0:	2b00      	cmp	r3, #0
 811d6a2:	d048      	beq.n	811d736 <tcp_slowtmr+0x5aa>
        goto tcp_slowtmr_start;
 811d6a4:	e585      	b.n	811d1b2 <tcp_slowtmr+0x26>
      prev = pcb;
 811d6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811d6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d6ac:	68db      	ldr	r3, [r3, #12]
 811d6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 811d6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d6b2:	7f1b      	ldrb	r3, [r3, #28]
 811d6b4:	3301      	adds	r3, #1
 811d6b6:	b2da      	uxtb	r2, r3
 811d6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d6ba:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 811d6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d6be:	7f1a      	ldrb	r2, [r3, #28]
 811d6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d6c2:	7f5b      	ldrb	r3, [r3, #29]
 811d6c4:	429a      	cmp	r2, r3
 811d6c6:	d336      	bcc.n	811d736 <tcp_slowtmr+0x5aa>
        prev->polltmr = 0;
 811d6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d6ca:	2200      	movs	r2, #0
 811d6cc:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 811d6ce:	4b11      	ldr	r3, [pc, #68]	@ (811d714 <tcp_slowtmr+0x588>)
 811d6d0:	2200      	movs	r2, #0
 811d6d2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 811d6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d6d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811d6da:	2b00      	cmp	r3, #0
 811d6dc:	d01c      	beq.n	811d718 <tcp_slowtmr+0x58c>
 811d6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811d6e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811d6e6:	6912      	ldr	r2, [r2, #16]
 811d6e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811d6ea:	4610      	mov	r0, r2
 811d6ec:	4798      	blx	r3
 811d6ee:	4603      	mov	r3, r0
 811d6f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 811d6f4:	e013      	b.n	811d71e <tcp_slowtmr+0x592>
 811d6f6:	bf00      	nop
 811d6f8:	1000e498 	.word	0x1000e498
 811d6fc:	cccccccd 	.word	0xcccccccd
 811d700:	1000e4a4 	.word	0x1000e4a4
 811d704:	08126a28 	.word	0x08126a28
 811d708:	08126ea4 	.word	0x08126ea4
 811d70c:	08126ab0 	.word	0x08126ab0
 811d710:	08126ed0 	.word	0x08126ed0
 811d714:	1000e4ac 	.word	0x1000e4ac
 811d718:	2300      	movs	r3, #0
 811d71a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 811d71e:	4b39      	ldr	r3, [pc, #228]	@ (811d804 <tcp_slowtmr+0x678>)
 811d720:	781b      	ldrb	r3, [r3, #0]
 811d722:	2b00      	cmp	r3, #0
 811d724:	f47f ad44 	bne.w	811d1b0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 811d728:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811d72c:	2b00      	cmp	r3, #0
 811d72e:	d102      	bne.n	811d736 <tcp_slowtmr+0x5aa>
          tcp_output(prev);
 811d730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811d732:	f004 f827 	bl	8121784 <tcp_output>
  while (pcb != NULL) {
 811d736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d738:	2b00      	cmp	r3, #0
 811d73a:	f47f ad40 	bne.w	811d1be <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 811d73e:	2300      	movs	r3, #0
 811d740:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 811d742:	4b31      	ldr	r3, [pc, #196]	@ (811d808 <tcp_slowtmr+0x67c>)
 811d744:	681b      	ldr	r3, [r3, #0]
 811d746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811d748:	e054      	b.n	811d7f4 <tcp_slowtmr+0x668>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811d74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d74c:	7d1b      	ldrb	r3, [r3, #20]
 811d74e:	2b0a      	cmp	r3, #10
 811d750:	d006      	beq.n	811d760 <tcp_slowtmr+0x5d4>
 811d752:	4b2e      	ldr	r3, [pc, #184]	@ (811d80c <tcp_slowtmr+0x680>)
 811d754:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 811d758:	492d      	ldr	r1, [pc, #180]	@ (811d810 <tcp_slowtmr+0x684>)
 811d75a:	482e      	ldr	r0, [pc, #184]	@ (811d814 <tcp_slowtmr+0x688>)
 811d75c:	f006 ff7e 	bl	812465c <iprintf>
    pcb_remove = 0;
 811d760:	2300      	movs	r3, #0
 811d762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811d766:	4b2c      	ldr	r3, [pc, #176]	@ (811d818 <tcp_slowtmr+0x68c>)
 811d768:	681a      	ldr	r2, [r3, #0]
 811d76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d76c:	6a1b      	ldr	r3, [r3, #32]
 811d76e:	1ad3      	subs	r3, r2, r3
 811d770:	f241 7270 	movw	r2, #6000	@ 0x1770
 811d774:	4293      	cmp	r3, r2
 811d776:	d904      	bls.n	811d782 <tcp_slowtmr+0x5f6>
      ++pcb_remove;
 811d778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d77c:	3301      	adds	r3, #1
 811d77e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 811d782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811d786:	2b00      	cmp	r3, #0
 811d788:	d02f      	beq.n	811d7ea <tcp_slowtmr+0x65e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 811d78a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811d78c:	f000 fb94 	bl	811deb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 811d790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d792:	2b00      	cmp	r3, #0
 811d794:	d010      	beq.n	811d7b8 <tcp_slowtmr+0x62c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 811d796:	4b1c      	ldr	r3, [pc, #112]	@ (811d808 <tcp_slowtmr+0x67c>)
 811d798:	681b      	ldr	r3, [r3, #0]
 811d79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811d79c:	429a      	cmp	r2, r3
 811d79e:	d106      	bne.n	811d7ae <tcp_slowtmr+0x622>
 811d7a0:	4b1a      	ldr	r3, [pc, #104]	@ (811d80c <tcp_slowtmr+0x680>)
 811d7a2:	f240 52af 	movw	r2, #1455	@ 0x5af
 811d7a6:	491d      	ldr	r1, [pc, #116]	@ (811d81c <tcp_slowtmr+0x690>)
 811d7a8:	481a      	ldr	r0, [pc, #104]	@ (811d814 <tcp_slowtmr+0x688>)
 811d7aa:	f006 ff57 	bl	812465c <iprintf>
        prev->next = pcb->next;
 811d7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d7b0:	68da      	ldr	r2, [r3, #12]
 811d7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811d7b4:	60da      	str	r2, [r3, #12]
 811d7b6:	e00f      	b.n	811d7d8 <tcp_slowtmr+0x64c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 811d7b8:	4b13      	ldr	r3, [pc, #76]	@ (811d808 <tcp_slowtmr+0x67c>)
 811d7ba:	681b      	ldr	r3, [r3, #0]
 811d7bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811d7be:	429a      	cmp	r2, r3
 811d7c0:	d006      	beq.n	811d7d0 <tcp_slowtmr+0x644>
 811d7c2:	4b12      	ldr	r3, [pc, #72]	@ (811d80c <tcp_slowtmr+0x680>)
 811d7c4:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811d7c8:	4915      	ldr	r1, [pc, #84]	@ (811d820 <tcp_slowtmr+0x694>)
 811d7ca:	4812      	ldr	r0, [pc, #72]	@ (811d814 <tcp_slowtmr+0x688>)
 811d7cc:	f006 ff46 	bl	812465c <iprintf>
        tcp_tw_pcbs = pcb->next;
 811d7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d7d2:	68db      	ldr	r3, [r3, #12]
 811d7d4:	4a0c      	ldr	r2, [pc, #48]	@ (811d808 <tcp_slowtmr+0x67c>)
 811d7d6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 811d7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d7da:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 811d7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d7de:	68db      	ldr	r3, [r3, #12]
 811d7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 811d7e2:	69f8      	ldr	r0, [r7, #28]
 811d7e4:	f7fe ff40 	bl	811c668 <tcp_free>
 811d7e8:	e004      	b.n	811d7f4 <tcp_slowtmr+0x668>
    } else {
      prev = pcb;
 811d7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811d7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d7f0:	68db      	ldr	r3, [r3, #12]
 811d7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811d7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811d7f6:	2b00      	cmp	r3, #0
 811d7f8:	d1a7      	bne.n	811d74a <tcp_slowtmr+0x5be>
    }
  }
}
 811d7fa:	bf00      	nop
 811d7fc:	bf00      	nop
 811d7fe:	3730      	adds	r7, #48	@ 0x30
 811d800:	46bd      	mov	sp, r7
 811d802:	bdb0      	pop	{r4, r5, r7, pc}
 811d804:	1000e4ac 	.word	0x1000e4ac
 811d808:	1000e4a8 	.word	0x1000e4a8
 811d80c:	08126a28 	.word	0x08126a28
 811d810:	08126efc 	.word	0x08126efc
 811d814:	08126ab0 	.word	0x08126ab0
 811d818:	1000e498 	.word	0x1000e498
 811d81c:	08126f2c 	.word	0x08126f2c
 811d820:	08126f54 	.word	0x08126f54

0811d824 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 811d824:	b580      	push	{r7, lr}
 811d826:	b082      	sub	sp, #8
 811d828:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 811d82a:	4b2d      	ldr	r3, [pc, #180]	@ (811d8e0 <tcp_fasttmr+0xbc>)
 811d82c:	781b      	ldrb	r3, [r3, #0]
 811d82e:	3301      	adds	r3, #1
 811d830:	b2da      	uxtb	r2, r3
 811d832:	4b2b      	ldr	r3, [pc, #172]	@ (811d8e0 <tcp_fasttmr+0xbc>)
 811d834:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 811d836:	4b2b      	ldr	r3, [pc, #172]	@ (811d8e4 <tcp_fasttmr+0xc0>)
 811d838:	681b      	ldr	r3, [r3, #0]
 811d83a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811d83c:	e048      	b.n	811d8d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 811d83e:	687b      	ldr	r3, [r7, #4]
 811d840:	7f9a      	ldrb	r2, [r3, #30]
 811d842:	4b27      	ldr	r3, [pc, #156]	@ (811d8e0 <tcp_fasttmr+0xbc>)
 811d844:	781b      	ldrb	r3, [r3, #0]
 811d846:	429a      	cmp	r2, r3
 811d848:	d03f      	beq.n	811d8ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 811d84a:	4b25      	ldr	r3, [pc, #148]	@ (811d8e0 <tcp_fasttmr+0xbc>)
 811d84c:	781a      	ldrb	r2, [r3, #0]
 811d84e:	687b      	ldr	r3, [r7, #4]
 811d850:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 811d852:	687b      	ldr	r3, [r7, #4]
 811d854:	8b5b      	ldrh	r3, [r3, #26]
 811d856:	f003 0301 	and.w	r3, r3, #1
 811d85a:	2b00      	cmp	r3, #0
 811d85c:	d010      	beq.n	811d880 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 811d85e:	687b      	ldr	r3, [r7, #4]
 811d860:	8b5b      	ldrh	r3, [r3, #26]
 811d862:	f043 0302 	orr.w	r3, r3, #2
 811d866:	b29a      	uxth	r2, r3
 811d868:	687b      	ldr	r3, [r7, #4]
 811d86a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 811d86c:	6878      	ldr	r0, [r7, #4]
 811d86e:	f003 ff89 	bl	8121784 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811d872:	687b      	ldr	r3, [r7, #4]
 811d874:	8b5b      	ldrh	r3, [r3, #26]
 811d876:	f023 0303 	bic.w	r3, r3, #3
 811d87a:	b29a      	uxth	r2, r3
 811d87c:	687b      	ldr	r3, [r7, #4]
 811d87e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 811d880:	687b      	ldr	r3, [r7, #4]
 811d882:	8b5b      	ldrh	r3, [r3, #26]
 811d884:	f003 0308 	and.w	r3, r3, #8
 811d888:	2b00      	cmp	r3, #0
 811d88a:	d009      	beq.n	811d8a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 811d88c:	687b      	ldr	r3, [r7, #4]
 811d88e:	8b5b      	ldrh	r3, [r3, #26]
 811d890:	f023 0308 	bic.w	r3, r3, #8
 811d894:	b29a      	uxth	r2, r3
 811d896:	687b      	ldr	r3, [r7, #4]
 811d898:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 811d89a:	6878      	ldr	r0, [r7, #4]
 811d89c:	f7ff f878 	bl	811c990 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 811d8a0:	687b      	ldr	r3, [r7, #4]
 811d8a2:	68db      	ldr	r3, [r3, #12]
 811d8a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 811d8a6:	687b      	ldr	r3, [r7, #4]
 811d8a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811d8aa:	2b00      	cmp	r3, #0
 811d8ac:	d00a      	beq.n	811d8c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 811d8ae:	4b0e      	ldr	r3, [pc, #56]	@ (811d8e8 <tcp_fasttmr+0xc4>)
 811d8b0:	2200      	movs	r2, #0
 811d8b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 811d8b4:	6878      	ldr	r0, [r7, #4]
 811d8b6:	f000 f819 	bl	811d8ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 811d8ba:	4b0b      	ldr	r3, [pc, #44]	@ (811d8e8 <tcp_fasttmr+0xc4>)
 811d8bc:	781b      	ldrb	r3, [r3, #0]
 811d8be:	2b00      	cmp	r3, #0
 811d8c0:	d000      	beq.n	811d8c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 811d8c2:	e7b8      	b.n	811d836 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 811d8c4:	683b      	ldr	r3, [r7, #0]
 811d8c6:	607b      	str	r3, [r7, #4]
 811d8c8:	e002      	b.n	811d8d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 811d8ca:	687b      	ldr	r3, [r7, #4]
 811d8cc:	68db      	ldr	r3, [r3, #12]
 811d8ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811d8d0:	687b      	ldr	r3, [r7, #4]
 811d8d2:	2b00      	cmp	r3, #0
 811d8d4:	d1b3      	bne.n	811d83e <tcp_fasttmr+0x1a>
    }
  }
}
 811d8d6:	bf00      	nop
 811d8d8:	bf00      	nop
 811d8da:	3708      	adds	r7, #8
 811d8dc:	46bd      	mov	sp, r7
 811d8de:	bd80      	pop	{r7, pc}
 811d8e0:	1000e4ae 	.word	0x1000e4ae
 811d8e4:	1000e4a4 	.word	0x1000e4a4
 811d8e8:	1000e4ac 	.word	0x1000e4ac

0811d8ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 811d8ec:	b590      	push	{r4, r7, lr}
 811d8ee:	b085      	sub	sp, #20
 811d8f0:	af00      	add	r7, sp, #0
 811d8f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 811d8f4:	687b      	ldr	r3, [r7, #4]
 811d8f6:	2b00      	cmp	r3, #0
 811d8f8:	d109      	bne.n	811d90e <tcp_process_refused_data+0x22>
 811d8fa:	4b37      	ldr	r3, [pc, #220]	@ (811d9d8 <tcp_process_refused_data+0xec>)
 811d8fc:	f240 6209 	movw	r2, #1545	@ 0x609
 811d900:	4936      	ldr	r1, [pc, #216]	@ (811d9dc <tcp_process_refused_data+0xf0>)
 811d902:	4837      	ldr	r0, [pc, #220]	@ (811d9e0 <tcp_process_refused_data+0xf4>)
 811d904:	f006 feaa 	bl	812465c <iprintf>
 811d908:	f06f 030f 	mvn.w	r3, #15
 811d90c:	e060      	b.n	811d9d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 811d90e:	687b      	ldr	r3, [r7, #4]
 811d910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811d912:	7b5b      	ldrb	r3, [r3, #13]
 811d914:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 811d916:	687b      	ldr	r3, [r7, #4]
 811d918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811d91a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 811d91c:	687b      	ldr	r3, [r7, #4]
 811d91e:	2200      	movs	r2, #0
 811d920:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 811d922:	687b      	ldr	r3, [r7, #4]
 811d924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811d928:	2b00      	cmp	r3, #0
 811d92a:	d00b      	beq.n	811d944 <tcp_process_refused_data+0x58>
 811d92c:	687b      	ldr	r3, [r7, #4]
 811d92e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811d932:	687b      	ldr	r3, [r7, #4]
 811d934:	6918      	ldr	r0, [r3, #16]
 811d936:	2300      	movs	r3, #0
 811d938:	68ba      	ldr	r2, [r7, #8]
 811d93a:	6879      	ldr	r1, [r7, #4]
 811d93c:	47a0      	blx	r4
 811d93e:	4603      	mov	r3, r0
 811d940:	73fb      	strb	r3, [r7, #15]
 811d942:	e007      	b.n	811d954 <tcp_process_refused_data+0x68>
 811d944:	2300      	movs	r3, #0
 811d946:	68ba      	ldr	r2, [r7, #8]
 811d948:	6879      	ldr	r1, [r7, #4]
 811d94a:	2000      	movs	r0, #0
 811d94c:	f000 f8a4 	bl	811da98 <tcp_recv_null>
 811d950:	4603      	mov	r3, r0
 811d952:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 811d954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811d958:	2b00      	cmp	r3, #0
 811d95a:	d12a      	bne.n	811d9b2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 811d95c:	7bbb      	ldrb	r3, [r7, #14]
 811d95e:	f003 0320 	and.w	r3, r3, #32
 811d962:	2b00      	cmp	r3, #0
 811d964:	d033      	beq.n	811d9ce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811d966:	687b      	ldr	r3, [r7, #4]
 811d968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811d96a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811d96e:	d005      	beq.n	811d97c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 811d970:	687b      	ldr	r3, [r7, #4]
 811d972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811d974:	3301      	adds	r3, #1
 811d976:	b29a      	uxth	r2, r3
 811d978:	687b      	ldr	r3, [r7, #4]
 811d97a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 811d97c:	687b      	ldr	r3, [r7, #4]
 811d97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811d982:	2b00      	cmp	r3, #0
 811d984:	d00b      	beq.n	811d99e <tcp_process_refused_data+0xb2>
 811d986:	687b      	ldr	r3, [r7, #4]
 811d988:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811d98c:	687b      	ldr	r3, [r7, #4]
 811d98e:	6918      	ldr	r0, [r3, #16]
 811d990:	2300      	movs	r3, #0
 811d992:	2200      	movs	r2, #0
 811d994:	6879      	ldr	r1, [r7, #4]
 811d996:	47a0      	blx	r4
 811d998:	4603      	mov	r3, r0
 811d99a:	73fb      	strb	r3, [r7, #15]
 811d99c:	e001      	b.n	811d9a2 <tcp_process_refused_data+0xb6>
 811d99e:	2300      	movs	r3, #0
 811d9a0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 811d9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811d9a6:	f113 0f0d 	cmn.w	r3, #13
 811d9aa:	d110      	bne.n	811d9ce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 811d9ac:	f06f 030c 	mvn.w	r3, #12
 811d9b0:	e00e      	b.n	811d9d0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 811d9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811d9b6:	f113 0f0d 	cmn.w	r3, #13
 811d9ba:	d102      	bne.n	811d9c2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 811d9bc:	f06f 030c 	mvn.w	r3, #12
 811d9c0:	e006      	b.n	811d9d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 811d9c2:	687b      	ldr	r3, [r7, #4]
 811d9c4:	68ba      	ldr	r2, [r7, #8]
 811d9c6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 811d9c8:	f06f 0304 	mvn.w	r3, #4
 811d9cc:	e000      	b.n	811d9d0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 811d9ce:	2300      	movs	r3, #0
}
 811d9d0:	4618      	mov	r0, r3
 811d9d2:	3714      	adds	r7, #20
 811d9d4:	46bd      	mov	sp, r7
 811d9d6:	bd90      	pop	{r4, r7, pc}
 811d9d8:	08126a28 	.word	0x08126a28
 811d9dc:	08126f7c 	.word	0x08126f7c
 811d9e0:	08126ab0 	.word	0x08126ab0

0811d9e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 811d9e4:	b580      	push	{r7, lr}
 811d9e6:	b084      	sub	sp, #16
 811d9e8:	af00      	add	r7, sp, #0
 811d9ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 811d9ec:	e007      	b.n	811d9fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 811d9ee:	687b      	ldr	r3, [r7, #4]
 811d9f0:	681b      	ldr	r3, [r3, #0]
 811d9f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 811d9f4:	6878      	ldr	r0, [r7, #4]
 811d9f6:	f000 f80a 	bl	811da0e <tcp_seg_free>
    seg = next;
 811d9fa:	68fb      	ldr	r3, [r7, #12]
 811d9fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 811d9fe:	687b      	ldr	r3, [r7, #4]
 811da00:	2b00      	cmp	r3, #0
 811da02:	d1f4      	bne.n	811d9ee <tcp_segs_free+0xa>
  }
}
 811da04:	bf00      	nop
 811da06:	bf00      	nop
 811da08:	3710      	adds	r7, #16
 811da0a:	46bd      	mov	sp, r7
 811da0c:	bd80      	pop	{r7, pc}

0811da0e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 811da0e:	b580      	push	{r7, lr}
 811da10:	b082      	sub	sp, #8
 811da12:	af00      	add	r7, sp, #0
 811da14:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 811da16:	687b      	ldr	r3, [r7, #4]
 811da18:	2b00      	cmp	r3, #0
 811da1a:	d00c      	beq.n	811da36 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 811da1c:	687b      	ldr	r3, [r7, #4]
 811da1e:	685b      	ldr	r3, [r3, #4]
 811da20:	2b00      	cmp	r3, #0
 811da22:	d004      	beq.n	811da2e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 811da24:	687b      	ldr	r3, [r7, #4]
 811da26:	685b      	ldr	r3, [r3, #4]
 811da28:	4618      	mov	r0, r3
 811da2a:	f7fe fa6f 	bl	811bf0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 811da2e:	6879      	ldr	r1, [r7, #4]
 811da30:	2003      	movs	r0, #3
 811da32:	f7fd fbc9 	bl	811b1c8 <memp_free>
  }
}
 811da36:	bf00      	nop
 811da38:	3708      	adds	r7, #8
 811da3a:	46bd      	mov	sp, r7
 811da3c:	bd80      	pop	{r7, pc}
	...

0811da40 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 811da40:	b580      	push	{r7, lr}
 811da42:	b084      	sub	sp, #16
 811da44:	af00      	add	r7, sp, #0
 811da46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 811da48:	687b      	ldr	r3, [r7, #4]
 811da4a:	2b00      	cmp	r3, #0
 811da4c:	d106      	bne.n	811da5c <tcp_seg_copy+0x1c>
 811da4e:	4b0f      	ldr	r3, [pc, #60]	@ (811da8c <tcp_seg_copy+0x4c>)
 811da50:	f240 6282 	movw	r2, #1666	@ 0x682
 811da54:	490e      	ldr	r1, [pc, #56]	@ (811da90 <tcp_seg_copy+0x50>)
 811da56:	480f      	ldr	r0, [pc, #60]	@ (811da94 <tcp_seg_copy+0x54>)
 811da58:	f006 fe00 	bl	812465c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 811da5c:	2003      	movs	r0, #3
 811da5e:	f7fd fb3d 	bl	811b0dc <memp_malloc>
 811da62:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 811da64:	68fb      	ldr	r3, [r7, #12]
 811da66:	2b00      	cmp	r3, #0
 811da68:	d101      	bne.n	811da6e <tcp_seg_copy+0x2e>
    return NULL;
 811da6a:	2300      	movs	r3, #0
 811da6c:	e00a      	b.n	811da84 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 811da6e:	2210      	movs	r2, #16
 811da70:	6879      	ldr	r1, [r7, #4]
 811da72:	68f8      	ldr	r0, [r7, #12]
 811da74:	f007 f855 	bl	8124b22 <memcpy>
  pbuf_ref(cseg->p);
 811da78:	68fb      	ldr	r3, [r7, #12]
 811da7a:	685b      	ldr	r3, [r3, #4]
 811da7c:	4618      	mov	r0, r3
 811da7e:	f7fe faeb 	bl	811c058 <pbuf_ref>
  return cseg;
 811da82:	68fb      	ldr	r3, [r7, #12]
}
 811da84:	4618      	mov	r0, r3
 811da86:	3710      	adds	r7, #16
 811da88:	46bd      	mov	sp, r7
 811da8a:	bd80      	pop	{r7, pc}
 811da8c:	08126a28 	.word	0x08126a28
 811da90:	08126fc0 	.word	0x08126fc0
 811da94:	08126ab0 	.word	0x08126ab0

0811da98 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 811da98:	b580      	push	{r7, lr}
 811da9a:	b084      	sub	sp, #16
 811da9c:	af00      	add	r7, sp, #0
 811da9e:	60f8      	str	r0, [r7, #12]
 811daa0:	60b9      	str	r1, [r7, #8]
 811daa2:	607a      	str	r2, [r7, #4]
 811daa4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 811daa6:	68bb      	ldr	r3, [r7, #8]
 811daa8:	2b00      	cmp	r3, #0
 811daaa:	d109      	bne.n	811dac0 <tcp_recv_null+0x28>
 811daac:	4b12      	ldr	r3, [pc, #72]	@ (811daf8 <tcp_recv_null+0x60>)
 811daae:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811dab2:	4912      	ldr	r1, [pc, #72]	@ (811dafc <tcp_recv_null+0x64>)
 811dab4:	4812      	ldr	r0, [pc, #72]	@ (811db00 <tcp_recv_null+0x68>)
 811dab6:	f006 fdd1 	bl	812465c <iprintf>
 811daba:	f06f 030f 	mvn.w	r3, #15
 811dabe:	e016      	b.n	811daee <tcp_recv_null+0x56>

  if (p != NULL) {
 811dac0:	687b      	ldr	r3, [r7, #4]
 811dac2:	2b00      	cmp	r3, #0
 811dac4:	d009      	beq.n	811dada <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 811dac6:	687b      	ldr	r3, [r7, #4]
 811dac8:	891b      	ldrh	r3, [r3, #8]
 811daca:	4619      	mov	r1, r3
 811dacc:	68b8      	ldr	r0, [r7, #8]
 811dace:	f7ff f9b1 	bl	811ce34 <tcp_recved>
    pbuf_free(p);
 811dad2:	6878      	ldr	r0, [r7, #4]
 811dad4:	f7fe fa1a 	bl	811bf0c <pbuf_free>
 811dad8:	e008      	b.n	811daec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 811dada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 811dade:	2b00      	cmp	r3, #0
 811dae0:	d104      	bne.n	811daec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 811dae2:	68b8      	ldr	r0, [r7, #8]
 811dae4:	f7fe ffbe 	bl	811ca64 <tcp_close>
 811dae8:	4603      	mov	r3, r0
 811daea:	e000      	b.n	811daee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 811daec:	2300      	movs	r3, #0
}
 811daee:	4618      	mov	r0, r3
 811daf0:	3710      	adds	r7, #16
 811daf2:	46bd      	mov	sp, r7
 811daf4:	bd80      	pop	{r7, pc}
 811daf6:	bf00      	nop
 811daf8:	08126a28 	.word	0x08126a28
 811dafc:	08126fdc 	.word	0x08126fdc
 811db00:	08126ab0 	.word	0x08126ab0

0811db04 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 811db04:	b580      	push	{r7, lr}
 811db06:	b086      	sub	sp, #24
 811db08:	af00      	add	r7, sp, #0
 811db0a:	4603      	mov	r3, r0
 811db0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 811db0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 811db12:	2b00      	cmp	r3, #0
 811db14:	db01      	blt.n	811db1a <tcp_kill_prio+0x16>
 811db16:	79fb      	ldrb	r3, [r7, #7]
 811db18:	e000      	b.n	811db1c <tcp_kill_prio+0x18>
 811db1a:	237f      	movs	r3, #127	@ 0x7f
 811db1c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 811db1e:	7afb      	ldrb	r3, [r7, #11]
 811db20:	2b00      	cmp	r3, #0
 811db22:	d034      	beq.n	811db8e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 811db24:	7afb      	ldrb	r3, [r7, #11]
 811db26:	3b01      	subs	r3, #1
 811db28:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 811db2a:	2300      	movs	r3, #0
 811db2c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811db2e:	2300      	movs	r3, #0
 811db30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811db32:	4b19      	ldr	r3, [pc, #100]	@ (811db98 <tcp_kill_prio+0x94>)
 811db34:	681b      	ldr	r3, [r3, #0]
 811db36:	617b      	str	r3, [r7, #20]
 811db38:	e01f      	b.n	811db7a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 811db3a:	697b      	ldr	r3, [r7, #20]
 811db3c:	7d5b      	ldrb	r3, [r3, #21]
 811db3e:	7afa      	ldrb	r2, [r7, #11]
 811db40:	429a      	cmp	r2, r3
 811db42:	d80c      	bhi.n	811db5e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811db44:	697b      	ldr	r3, [r7, #20]
 811db46:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 811db48:	7afa      	ldrb	r2, [r7, #11]
 811db4a:	429a      	cmp	r2, r3
 811db4c:	d112      	bne.n	811db74 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811db4e:	4b13      	ldr	r3, [pc, #76]	@ (811db9c <tcp_kill_prio+0x98>)
 811db50:	681a      	ldr	r2, [r3, #0]
 811db52:	697b      	ldr	r3, [r7, #20]
 811db54:	6a1b      	ldr	r3, [r3, #32]
 811db56:	1ad3      	subs	r3, r2, r3
 811db58:	68fa      	ldr	r2, [r7, #12]
 811db5a:	429a      	cmp	r2, r3
 811db5c:	d80a      	bhi.n	811db74 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 811db5e:	4b0f      	ldr	r3, [pc, #60]	@ (811db9c <tcp_kill_prio+0x98>)
 811db60:	681a      	ldr	r2, [r3, #0]
 811db62:	697b      	ldr	r3, [r7, #20]
 811db64:	6a1b      	ldr	r3, [r3, #32]
 811db66:	1ad3      	subs	r3, r2, r3
 811db68:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 811db6a:	697b      	ldr	r3, [r7, #20]
 811db6c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 811db6e:	697b      	ldr	r3, [r7, #20]
 811db70:	7d5b      	ldrb	r3, [r3, #21]
 811db72:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811db74:	697b      	ldr	r3, [r7, #20]
 811db76:	68db      	ldr	r3, [r3, #12]
 811db78:	617b      	str	r3, [r7, #20]
 811db7a:	697b      	ldr	r3, [r7, #20]
 811db7c:	2b00      	cmp	r3, #0
 811db7e:	d1dc      	bne.n	811db3a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 811db80:	693b      	ldr	r3, [r7, #16]
 811db82:	2b00      	cmp	r3, #0
 811db84:	d004      	beq.n	811db90 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811db86:	6938      	ldr	r0, [r7, #16]
 811db88:	f7ff f856 	bl	811cc38 <tcp_abort>
 811db8c:	e000      	b.n	811db90 <tcp_kill_prio+0x8c>
    return;
 811db8e:	bf00      	nop
  }
}
 811db90:	3718      	adds	r7, #24
 811db92:	46bd      	mov	sp, r7
 811db94:	bd80      	pop	{r7, pc}
 811db96:	bf00      	nop
 811db98:	1000e4a4 	.word	0x1000e4a4
 811db9c:	1000e498 	.word	0x1000e498

0811dba0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 811dba0:	b580      	push	{r7, lr}
 811dba2:	b086      	sub	sp, #24
 811dba4:	af00      	add	r7, sp, #0
 811dba6:	4603      	mov	r3, r0
 811dba8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 811dbaa:	79fb      	ldrb	r3, [r7, #7]
 811dbac:	2b08      	cmp	r3, #8
 811dbae:	d009      	beq.n	811dbc4 <tcp_kill_state+0x24>
 811dbb0:	79fb      	ldrb	r3, [r7, #7]
 811dbb2:	2b09      	cmp	r3, #9
 811dbb4:	d006      	beq.n	811dbc4 <tcp_kill_state+0x24>
 811dbb6:	4b1a      	ldr	r3, [pc, #104]	@ (811dc20 <tcp_kill_state+0x80>)
 811dbb8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 811dbbc:	4919      	ldr	r1, [pc, #100]	@ (811dc24 <tcp_kill_state+0x84>)
 811dbbe:	481a      	ldr	r0, [pc, #104]	@ (811dc28 <tcp_kill_state+0x88>)
 811dbc0:	f006 fd4c 	bl	812465c <iprintf>

  inactivity = 0;
 811dbc4:	2300      	movs	r3, #0
 811dbc6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811dbc8:	2300      	movs	r3, #0
 811dbca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811dbcc:	4b17      	ldr	r3, [pc, #92]	@ (811dc2c <tcp_kill_state+0x8c>)
 811dbce:	681b      	ldr	r3, [r3, #0]
 811dbd0:	617b      	str	r3, [r7, #20]
 811dbd2:	e017      	b.n	811dc04 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 811dbd4:	697b      	ldr	r3, [r7, #20]
 811dbd6:	7d1b      	ldrb	r3, [r3, #20]
 811dbd8:	79fa      	ldrb	r2, [r7, #7]
 811dbda:	429a      	cmp	r2, r3
 811dbdc:	d10f      	bne.n	811dbfe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811dbde:	4b14      	ldr	r3, [pc, #80]	@ (811dc30 <tcp_kill_state+0x90>)
 811dbe0:	681a      	ldr	r2, [r3, #0]
 811dbe2:	697b      	ldr	r3, [r7, #20]
 811dbe4:	6a1b      	ldr	r3, [r3, #32]
 811dbe6:	1ad3      	subs	r3, r2, r3
 811dbe8:	68fa      	ldr	r2, [r7, #12]
 811dbea:	429a      	cmp	r2, r3
 811dbec:	d807      	bhi.n	811dbfe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 811dbee:	4b10      	ldr	r3, [pc, #64]	@ (811dc30 <tcp_kill_state+0x90>)
 811dbf0:	681a      	ldr	r2, [r3, #0]
 811dbf2:	697b      	ldr	r3, [r7, #20]
 811dbf4:	6a1b      	ldr	r3, [r3, #32]
 811dbf6:	1ad3      	subs	r3, r2, r3
 811dbf8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 811dbfa:	697b      	ldr	r3, [r7, #20]
 811dbfc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811dbfe:	697b      	ldr	r3, [r7, #20]
 811dc00:	68db      	ldr	r3, [r3, #12]
 811dc02:	617b      	str	r3, [r7, #20]
 811dc04:	697b      	ldr	r3, [r7, #20]
 811dc06:	2b00      	cmp	r3, #0
 811dc08:	d1e4      	bne.n	811dbd4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 811dc0a:	693b      	ldr	r3, [r7, #16]
 811dc0c:	2b00      	cmp	r3, #0
 811dc0e:	d003      	beq.n	811dc18 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 811dc10:	2100      	movs	r1, #0
 811dc12:	6938      	ldr	r0, [r7, #16]
 811dc14:	f7fe ff52 	bl	811cabc <tcp_abandon>
  }
}
 811dc18:	bf00      	nop
 811dc1a:	3718      	adds	r7, #24
 811dc1c:	46bd      	mov	sp, r7
 811dc1e:	bd80      	pop	{r7, pc}
 811dc20:	08126a28 	.word	0x08126a28
 811dc24:	08126ff8 	.word	0x08126ff8
 811dc28:	08126ab0 	.word	0x08126ab0
 811dc2c:	1000e4a4 	.word	0x1000e4a4
 811dc30:	1000e498 	.word	0x1000e498

0811dc34 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 811dc34:	b580      	push	{r7, lr}
 811dc36:	b084      	sub	sp, #16
 811dc38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 811dc3a:	2300      	movs	r3, #0
 811dc3c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 811dc3e:	2300      	movs	r3, #0
 811dc40:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811dc42:	4b12      	ldr	r3, [pc, #72]	@ (811dc8c <tcp_kill_timewait+0x58>)
 811dc44:	681b      	ldr	r3, [r3, #0]
 811dc46:	60fb      	str	r3, [r7, #12]
 811dc48:	e012      	b.n	811dc70 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811dc4a:	4b11      	ldr	r3, [pc, #68]	@ (811dc90 <tcp_kill_timewait+0x5c>)
 811dc4c:	681a      	ldr	r2, [r3, #0]
 811dc4e:	68fb      	ldr	r3, [r7, #12]
 811dc50:	6a1b      	ldr	r3, [r3, #32]
 811dc52:	1ad3      	subs	r3, r2, r3
 811dc54:	687a      	ldr	r2, [r7, #4]
 811dc56:	429a      	cmp	r2, r3
 811dc58:	d807      	bhi.n	811dc6a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 811dc5a:	4b0d      	ldr	r3, [pc, #52]	@ (811dc90 <tcp_kill_timewait+0x5c>)
 811dc5c:	681a      	ldr	r2, [r3, #0]
 811dc5e:	68fb      	ldr	r3, [r7, #12]
 811dc60:	6a1b      	ldr	r3, [r3, #32]
 811dc62:	1ad3      	subs	r3, r2, r3
 811dc64:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 811dc66:	68fb      	ldr	r3, [r7, #12]
 811dc68:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811dc6a:	68fb      	ldr	r3, [r7, #12]
 811dc6c:	68db      	ldr	r3, [r3, #12]
 811dc6e:	60fb      	str	r3, [r7, #12]
 811dc70:	68fb      	ldr	r3, [r7, #12]
 811dc72:	2b00      	cmp	r3, #0
 811dc74:	d1e9      	bne.n	811dc4a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 811dc76:	68bb      	ldr	r3, [r7, #8]
 811dc78:	2b00      	cmp	r3, #0
 811dc7a:	d002      	beq.n	811dc82 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811dc7c:	68b8      	ldr	r0, [r7, #8]
 811dc7e:	f7fe ffdb 	bl	811cc38 <tcp_abort>
  }
}
 811dc82:	bf00      	nop
 811dc84:	3710      	adds	r7, #16
 811dc86:	46bd      	mov	sp, r7
 811dc88:	bd80      	pop	{r7, pc}
 811dc8a:	bf00      	nop
 811dc8c:	1000e4a8 	.word	0x1000e4a8
 811dc90:	1000e498 	.word	0x1000e498

0811dc94 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 811dc94:	b580      	push	{r7, lr}
 811dc96:	b082      	sub	sp, #8
 811dc98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 811dc9a:	4b10      	ldr	r3, [pc, #64]	@ (811dcdc <tcp_handle_closepend+0x48>)
 811dc9c:	681b      	ldr	r3, [r3, #0]
 811dc9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811dca0:	e014      	b.n	811dccc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 811dca2:	687b      	ldr	r3, [r7, #4]
 811dca4:	68db      	ldr	r3, [r3, #12]
 811dca6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 811dca8:	687b      	ldr	r3, [r7, #4]
 811dcaa:	8b5b      	ldrh	r3, [r3, #26]
 811dcac:	f003 0308 	and.w	r3, r3, #8
 811dcb0:	2b00      	cmp	r3, #0
 811dcb2:	d009      	beq.n	811dcc8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 811dcb4:	687b      	ldr	r3, [r7, #4]
 811dcb6:	8b5b      	ldrh	r3, [r3, #26]
 811dcb8:	f023 0308 	bic.w	r3, r3, #8
 811dcbc:	b29a      	uxth	r2, r3
 811dcbe:	687b      	ldr	r3, [r7, #4]
 811dcc0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 811dcc2:	6878      	ldr	r0, [r7, #4]
 811dcc4:	f7fe fe64 	bl	811c990 <tcp_close_shutdown_fin>
    }
    pcb = next;
 811dcc8:	683b      	ldr	r3, [r7, #0]
 811dcca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811dccc:	687b      	ldr	r3, [r7, #4]
 811dcce:	2b00      	cmp	r3, #0
 811dcd0:	d1e7      	bne.n	811dca2 <tcp_handle_closepend+0xe>
  }
}
 811dcd2:	bf00      	nop
 811dcd4:	bf00      	nop
 811dcd6:	3708      	adds	r7, #8
 811dcd8:	46bd      	mov	sp, r7
 811dcda:	bd80      	pop	{r7, pc}
 811dcdc:	1000e4a4 	.word	0x1000e4a4

0811dce0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 811dce0:	b580      	push	{r7, lr}
 811dce2:	b084      	sub	sp, #16
 811dce4:	af00      	add	r7, sp, #0
 811dce6:	4603      	mov	r3, r0
 811dce8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811dcea:	2001      	movs	r0, #1
 811dcec:	f7fd f9f6 	bl	811b0dc <memp_malloc>
 811dcf0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 811dcf2:	68fb      	ldr	r3, [r7, #12]
 811dcf4:	2b00      	cmp	r3, #0
 811dcf6:	d126      	bne.n	811dd46 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 811dcf8:	f7ff ffcc 	bl	811dc94 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 811dcfc:	f7ff ff9a 	bl	811dc34 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811dd00:	2001      	movs	r0, #1
 811dd02:	f7fd f9eb 	bl	811b0dc <memp_malloc>
 811dd06:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 811dd08:	68fb      	ldr	r3, [r7, #12]
 811dd0a:	2b00      	cmp	r3, #0
 811dd0c:	d11b      	bne.n	811dd46 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 811dd0e:	2009      	movs	r0, #9
 811dd10:	f7ff ff46 	bl	811dba0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811dd14:	2001      	movs	r0, #1
 811dd16:	f7fd f9e1 	bl	811b0dc <memp_malloc>
 811dd1a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 811dd1c:	68fb      	ldr	r3, [r7, #12]
 811dd1e:	2b00      	cmp	r3, #0
 811dd20:	d111      	bne.n	811dd46 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 811dd22:	2008      	movs	r0, #8
 811dd24:	f7ff ff3c 	bl	811dba0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811dd28:	2001      	movs	r0, #1
 811dd2a:	f7fd f9d7 	bl	811b0dc <memp_malloc>
 811dd2e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 811dd30:	68fb      	ldr	r3, [r7, #12]
 811dd32:	2b00      	cmp	r3, #0
 811dd34:	d107      	bne.n	811dd46 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 811dd36:	79fb      	ldrb	r3, [r7, #7]
 811dd38:	4618      	mov	r0, r3
 811dd3a:	f7ff fee3 	bl	811db04 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811dd3e:	2001      	movs	r0, #1
 811dd40:	f7fd f9cc 	bl	811b0dc <memp_malloc>
 811dd44:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 811dd46:	68fb      	ldr	r3, [r7, #12]
 811dd48:	2b00      	cmp	r3, #0
 811dd4a:	d047      	beq.n	811dddc <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 811dd4c:	22a4      	movs	r2, #164	@ 0xa4
 811dd4e:	2100      	movs	r1, #0
 811dd50:	68f8      	ldr	r0, [r7, #12]
 811dd52:	f006 fd97 	bl	8124884 <memset>
    pcb->prio = prio;
 811dd56:	68fb      	ldr	r3, [r7, #12]
 811dd58:	79fa      	ldrb	r2, [r7, #7]
 811dd5a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 811dd5c:	68fb      	ldr	r3, [r7, #12]
 811dd5e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 811dd62:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811dd66:	68fb      	ldr	r3, [r7, #12]
 811dd68:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811dd6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811dd6e:	68fb      	ldr	r3, [r7, #12]
 811dd70:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811dd72:	68fb      	ldr	r3, [r7, #12]
 811dd74:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 811dd76:	68fb      	ldr	r3, [r7, #12]
 811dd78:	22ff      	movs	r2, #255	@ 0xff
 811dd7a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 811dd7c:	68fb      	ldr	r3, [r7, #12]
 811dd7e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811dd82:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 811dd84:	68fb      	ldr	r3, [r7, #12]
 811dd86:	2296      	movs	r2, #150	@ 0x96
 811dd88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 811dd8c:	68fb      	ldr	r3, [r7, #12]
 811dd8e:	2296      	movs	r2, #150	@ 0x96
 811dd90:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 811dd92:	68fb      	ldr	r3, [r7, #12]
 811dd94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811dd98:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 811dd9a:	68fb      	ldr	r3, [r7, #12]
 811dd9c:	2201      	movs	r2, #1
 811dd9e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 811dda2:	4b11      	ldr	r3, [pc, #68]	@ (811dde8 <tcp_alloc+0x108>)
 811dda4:	681a      	ldr	r2, [r3, #0]
 811dda6:	68fb      	ldr	r3, [r7, #12]
 811dda8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 811ddaa:	4b10      	ldr	r3, [pc, #64]	@ (811ddec <tcp_alloc+0x10c>)
 811ddac:	781a      	ldrb	r2, [r3, #0]
 811ddae:	68fb      	ldr	r3, [r7, #12]
 811ddb0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 811ddb2:	68fb      	ldr	r3, [r7, #12]
 811ddb4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 811ddb8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 811ddbc:	68fb      	ldr	r3, [r7, #12]
 811ddbe:	4a0c      	ldr	r2, [pc, #48]	@ (811ddf0 <tcp_alloc+0x110>)
 811ddc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 811ddc4:	68fb      	ldr	r3, [r7, #12]
 811ddc6:	4a0b      	ldr	r2, [pc, #44]	@ (811ddf4 <tcp_alloc+0x114>)
 811ddc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 811ddcc:	68fb      	ldr	r3, [r7, #12]
 811ddce:	4a0a      	ldr	r2, [pc, #40]	@ (811ddf8 <tcp_alloc+0x118>)
 811ddd0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 811ddd4:	68fb      	ldr	r3, [r7, #12]
 811ddd6:	2209      	movs	r2, #9
 811ddd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 811dddc:	68fb      	ldr	r3, [r7, #12]
}
 811ddde:	4618      	mov	r0, r3
 811dde0:	3710      	adds	r7, #16
 811dde2:	46bd      	mov	sp, r7
 811dde4:	bd80      	pop	{r7, pc}
 811dde6:	bf00      	nop
 811dde8:	1000e498 	.word	0x1000e498
 811ddec:	1000e4ae 	.word	0x1000e4ae
 811ddf0:	0811da99 	.word	0x0811da99
 811ddf4:	006ddd00 	.word	0x006ddd00
 811ddf8:	000124f8 	.word	0x000124f8

0811ddfc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 811ddfc:	b580      	push	{r7, lr}
 811ddfe:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 811de00:	2040      	movs	r0, #64	@ 0x40
 811de02:	f7ff ff6d 	bl	811dce0 <tcp_alloc>
 811de06:	4603      	mov	r3, r0
}
 811de08:	4618      	mov	r0, r3
 811de0a:	bd80      	pop	{r7, pc}

0811de0c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 811de0c:	b480      	push	{r7}
 811de0e:	b083      	sub	sp, #12
 811de10:	af00      	add	r7, sp, #0
 811de12:	6078      	str	r0, [r7, #4]
 811de14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 811de16:	687b      	ldr	r3, [r7, #4]
 811de18:	2b00      	cmp	r3, #0
 811de1a:	d002      	beq.n	811de22 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 811de1c:	687b      	ldr	r3, [r7, #4]
 811de1e:	683a      	ldr	r2, [r7, #0]
 811de20:	611a      	str	r2, [r3, #16]
  }
}
 811de22:	bf00      	nop
 811de24:	370c      	adds	r7, #12
 811de26:	46bd      	mov	sp, r7
 811de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 811de2c:	4770      	bx	lr
	...

0811de30 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 811de30:	b580      	push	{r7, lr}
 811de32:	b082      	sub	sp, #8
 811de34:	af00      	add	r7, sp, #0
 811de36:	6078      	str	r0, [r7, #4]
 811de38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 811de3a:	687b      	ldr	r3, [r7, #4]
 811de3c:	2b00      	cmp	r3, #0
 811de3e:	d00e      	beq.n	811de5e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 811de40:	687b      	ldr	r3, [r7, #4]
 811de42:	7d1b      	ldrb	r3, [r3, #20]
 811de44:	2b01      	cmp	r3, #1
 811de46:	d106      	bne.n	811de56 <tcp_recv+0x26>
 811de48:	4b07      	ldr	r3, [pc, #28]	@ (811de68 <tcp_recv+0x38>)
 811de4a:	f240 72df 	movw	r2, #2015	@ 0x7df
 811de4e:	4907      	ldr	r1, [pc, #28]	@ (811de6c <tcp_recv+0x3c>)
 811de50:	4807      	ldr	r0, [pc, #28]	@ (811de70 <tcp_recv+0x40>)
 811de52:	f006 fc03 	bl	812465c <iprintf>
    pcb->recv = recv;
 811de56:	687b      	ldr	r3, [r7, #4]
 811de58:	683a      	ldr	r2, [r7, #0]
 811de5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 811de5e:	bf00      	nop
 811de60:	3708      	adds	r7, #8
 811de62:	46bd      	mov	sp, r7
 811de64:	bd80      	pop	{r7, pc}
 811de66:	bf00      	nop
 811de68:	08126a28 	.word	0x08126a28
 811de6c:	08127008 	.word	0x08127008
 811de70:	08126ab0 	.word	0x08126ab0

0811de74 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 811de74:	b580      	push	{r7, lr}
 811de76:	b082      	sub	sp, #8
 811de78:	af00      	add	r7, sp, #0
 811de7a:	6078      	str	r0, [r7, #4]
 811de7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 811de7e:	687b      	ldr	r3, [r7, #4]
 811de80:	2b00      	cmp	r3, #0
 811de82:	d00e      	beq.n	811dea2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 811de84:	687b      	ldr	r3, [r7, #4]
 811de86:	7d1b      	ldrb	r3, [r3, #20]
 811de88:	2b01      	cmp	r3, #1
 811de8a:	d106      	bne.n	811de9a <tcp_err+0x26>
 811de8c:	4b07      	ldr	r3, [pc, #28]	@ (811deac <tcp_err+0x38>)
 811de8e:	f640 020d 	movw	r2, #2061	@ 0x80d
 811de92:	4907      	ldr	r1, [pc, #28]	@ (811deb0 <tcp_err+0x3c>)
 811de94:	4807      	ldr	r0, [pc, #28]	@ (811deb4 <tcp_err+0x40>)
 811de96:	f006 fbe1 	bl	812465c <iprintf>
    pcb->errf = err;
 811de9a:	687b      	ldr	r3, [r7, #4]
 811de9c:	683a      	ldr	r2, [r7, #0]
 811de9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 811dea2:	bf00      	nop
 811dea4:	3708      	adds	r7, #8
 811dea6:	46bd      	mov	sp, r7
 811dea8:	bd80      	pop	{r7, pc}
 811deaa:	bf00      	nop
 811deac:	08126a28 	.word	0x08126a28
 811deb0:	08127058 	.word	0x08127058
 811deb4:	08126ab0 	.word	0x08126ab0

0811deb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 811deb8:	b580      	push	{r7, lr}
 811deba:	b082      	sub	sp, #8
 811debc:	af00      	add	r7, sp, #0
 811debe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 811dec0:	687b      	ldr	r3, [r7, #4]
 811dec2:	2b00      	cmp	r3, #0
 811dec4:	d107      	bne.n	811ded6 <tcp_pcb_purge+0x1e>
 811dec6:	4b21      	ldr	r3, [pc, #132]	@ (811df4c <tcp_pcb_purge+0x94>)
 811dec8:	f640 0251 	movw	r2, #2129	@ 0x851
 811decc:	4920      	ldr	r1, [pc, #128]	@ (811df50 <tcp_pcb_purge+0x98>)
 811dece:	4821      	ldr	r0, [pc, #132]	@ (811df54 <tcp_pcb_purge+0x9c>)
 811ded0:	f006 fbc4 	bl	812465c <iprintf>
 811ded4:	e037      	b.n	811df46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 811ded6:	687b      	ldr	r3, [r7, #4]
 811ded8:	7d1b      	ldrb	r3, [r3, #20]
 811deda:	2b00      	cmp	r3, #0
 811dedc:	d033      	beq.n	811df46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 811dede:	687b      	ldr	r3, [r7, #4]
 811dee0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 811dee2:	2b0a      	cmp	r3, #10
 811dee4:	d02f      	beq.n	811df46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 811dee6:	687b      	ldr	r3, [r7, #4]
 811dee8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 811deea:	2b01      	cmp	r3, #1
 811deec:	d02b      	beq.n	811df46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 811deee:	687b      	ldr	r3, [r7, #4]
 811def0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811def2:	2b00      	cmp	r3, #0
 811def4:	d007      	beq.n	811df06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 811def6:	687b      	ldr	r3, [r7, #4]
 811def8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811defa:	4618      	mov	r0, r3
 811defc:	f7fe f806 	bl	811bf0c <pbuf_free>
      pcb->refused_data = NULL;
 811df00:	687b      	ldr	r3, [r7, #4]
 811df02:	2200      	movs	r2, #0
 811df04:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811df06:	687b      	ldr	r3, [r7, #4]
 811df08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811df0a:	2b00      	cmp	r3, #0
 811df0c:	d002      	beq.n	811df14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 811df0e:	6878      	ldr	r0, [r7, #4]
 811df10:	f000 f986 	bl	811e220 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 811df14:	687b      	ldr	r3, [r7, #4]
 811df16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811df1a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 811df1c:	687b      	ldr	r3, [r7, #4]
 811df1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811df20:	4618      	mov	r0, r3
 811df22:	f7ff fd5f 	bl	811d9e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 811df26:	687b      	ldr	r3, [r7, #4]
 811df28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811df2a:	4618      	mov	r0, r3
 811df2c:	f7ff fd5a 	bl	811d9e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 811df30:	687b      	ldr	r3, [r7, #4]
 811df32:	2200      	movs	r2, #0
 811df34:	66da      	str	r2, [r3, #108]	@ 0x6c
 811df36:	687b      	ldr	r3, [r7, #4]
 811df38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811df3a:	687b      	ldr	r3, [r7, #4]
 811df3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 811df3e:	687b      	ldr	r3, [r7, #4]
 811df40:	2200      	movs	r2, #0
 811df42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 811df46:	3708      	adds	r7, #8
 811df48:	46bd      	mov	sp, r7
 811df4a:	bd80      	pop	{r7, pc}
 811df4c:	08126a28 	.word	0x08126a28
 811df50:	081270b8 	.word	0x081270b8
 811df54:	08126ab0 	.word	0x08126ab0

0811df58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 811df58:	b580      	push	{r7, lr}
 811df5a:	b084      	sub	sp, #16
 811df5c:	af00      	add	r7, sp, #0
 811df5e:	6078      	str	r0, [r7, #4]
 811df60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 811df62:	683b      	ldr	r3, [r7, #0]
 811df64:	2b00      	cmp	r3, #0
 811df66:	d106      	bne.n	811df76 <tcp_pcb_remove+0x1e>
 811df68:	4b3e      	ldr	r3, [pc, #248]	@ (811e064 <tcp_pcb_remove+0x10c>)
 811df6a:	f640 0283 	movw	r2, #2179	@ 0x883
 811df6e:	493e      	ldr	r1, [pc, #248]	@ (811e068 <tcp_pcb_remove+0x110>)
 811df70:	483e      	ldr	r0, [pc, #248]	@ (811e06c <tcp_pcb_remove+0x114>)
 811df72:	f006 fb73 	bl	812465c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 811df76:	687b      	ldr	r3, [r7, #4]
 811df78:	2b00      	cmp	r3, #0
 811df7a:	d106      	bne.n	811df8a <tcp_pcb_remove+0x32>
 811df7c:	4b39      	ldr	r3, [pc, #228]	@ (811e064 <tcp_pcb_remove+0x10c>)
 811df7e:	f640 0284 	movw	r2, #2180	@ 0x884
 811df82:	493b      	ldr	r1, [pc, #236]	@ (811e070 <tcp_pcb_remove+0x118>)
 811df84:	4839      	ldr	r0, [pc, #228]	@ (811e06c <tcp_pcb_remove+0x114>)
 811df86:	f006 fb69 	bl	812465c <iprintf>

  TCP_RMV(pcblist, pcb);
 811df8a:	687b      	ldr	r3, [r7, #4]
 811df8c:	681b      	ldr	r3, [r3, #0]
 811df8e:	683a      	ldr	r2, [r7, #0]
 811df90:	429a      	cmp	r2, r3
 811df92:	d105      	bne.n	811dfa0 <tcp_pcb_remove+0x48>
 811df94:	687b      	ldr	r3, [r7, #4]
 811df96:	681b      	ldr	r3, [r3, #0]
 811df98:	68da      	ldr	r2, [r3, #12]
 811df9a:	687b      	ldr	r3, [r7, #4]
 811df9c:	601a      	str	r2, [r3, #0]
 811df9e:	e013      	b.n	811dfc8 <tcp_pcb_remove+0x70>
 811dfa0:	687b      	ldr	r3, [r7, #4]
 811dfa2:	681b      	ldr	r3, [r3, #0]
 811dfa4:	60fb      	str	r3, [r7, #12]
 811dfa6:	e00c      	b.n	811dfc2 <tcp_pcb_remove+0x6a>
 811dfa8:	68fb      	ldr	r3, [r7, #12]
 811dfaa:	68db      	ldr	r3, [r3, #12]
 811dfac:	683a      	ldr	r2, [r7, #0]
 811dfae:	429a      	cmp	r2, r3
 811dfb0:	d104      	bne.n	811dfbc <tcp_pcb_remove+0x64>
 811dfb2:	683b      	ldr	r3, [r7, #0]
 811dfb4:	68da      	ldr	r2, [r3, #12]
 811dfb6:	68fb      	ldr	r3, [r7, #12]
 811dfb8:	60da      	str	r2, [r3, #12]
 811dfba:	e005      	b.n	811dfc8 <tcp_pcb_remove+0x70>
 811dfbc:	68fb      	ldr	r3, [r7, #12]
 811dfbe:	68db      	ldr	r3, [r3, #12]
 811dfc0:	60fb      	str	r3, [r7, #12]
 811dfc2:	68fb      	ldr	r3, [r7, #12]
 811dfc4:	2b00      	cmp	r3, #0
 811dfc6:	d1ef      	bne.n	811dfa8 <tcp_pcb_remove+0x50>
 811dfc8:	683b      	ldr	r3, [r7, #0]
 811dfca:	2200      	movs	r2, #0
 811dfcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 811dfce:	6838      	ldr	r0, [r7, #0]
 811dfd0:	f7ff ff72 	bl	811deb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 811dfd4:	683b      	ldr	r3, [r7, #0]
 811dfd6:	7d1b      	ldrb	r3, [r3, #20]
 811dfd8:	2b0a      	cmp	r3, #10
 811dfda:	d013      	beq.n	811e004 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 811dfdc:	683b      	ldr	r3, [r7, #0]
 811dfde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 811dfe0:	2b01      	cmp	r3, #1
 811dfe2:	d00f      	beq.n	811e004 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 811dfe4:	683b      	ldr	r3, [r7, #0]
 811dfe6:	8b5b      	ldrh	r3, [r3, #26]
 811dfe8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 811dfec:	2b00      	cmp	r3, #0
 811dfee:	d009      	beq.n	811e004 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 811dff0:	683b      	ldr	r3, [r7, #0]
 811dff2:	8b5b      	ldrh	r3, [r3, #26]
 811dff4:	f043 0302 	orr.w	r3, r3, #2
 811dff8:	b29a      	uxth	r2, r3
 811dffa:	683b      	ldr	r3, [r7, #0]
 811dffc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811dffe:	6838      	ldr	r0, [r7, #0]
 811e000:	f003 fbc0 	bl	8121784 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 811e004:	683b      	ldr	r3, [r7, #0]
 811e006:	7d1b      	ldrb	r3, [r3, #20]
 811e008:	2b01      	cmp	r3, #1
 811e00a:	d020      	beq.n	811e04e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 811e00c:	683b      	ldr	r3, [r7, #0]
 811e00e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e010:	2b00      	cmp	r3, #0
 811e012:	d006      	beq.n	811e022 <tcp_pcb_remove+0xca>
 811e014:	4b13      	ldr	r3, [pc, #76]	@ (811e064 <tcp_pcb_remove+0x10c>)
 811e016:	f640 0293 	movw	r2, #2195	@ 0x893
 811e01a:	4916      	ldr	r1, [pc, #88]	@ (811e074 <tcp_pcb_remove+0x11c>)
 811e01c:	4813      	ldr	r0, [pc, #76]	@ (811e06c <tcp_pcb_remove+0x114>)
 811e01e:	f006 fb1d 	bl	812465c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 811e022:	683b      	ldr	r3, [r7, #0]
 811e024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811e026:	2b00      	cmp	r3, #0
 811e028:	d006      	beq.n	811e038 <tcp_pcb_remove+0xe0>
 811e02a:	4b0e      	ldr	r3, [pc, #56]	@ (811e064 <tcp_pcb_remove+0x10c>)
 811e02c:	f640 0294 	movw	r2, #2196	@ 0x894
 811e030:	4911      	ldr	r1, [pc, #68]	@ (811e078 <tcp_pcb_remove+0x120>)
 811e032:	480e      	ldr	r0, [pc, #56]	@ (811e06c <tcp_pcb_remove+0x114>)
 811e034:	f006 fb12 	bl	812465c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 811e038:	683b      	ldr	r3, [r7, #0]
 811e03a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811e03c:	2b00      	cmp	r3, #0
 811e03e:	d006      	beq.n	811e04e <tcp_pcb_remove+0xf6>
 811e040:	4b08      	ldr	r3, [pc, #32]	@ (811e064 <tcp_pcb_remove+0x10c>)
 811e042:	f640 0296 	movw	r2, #2198	@ 0x896
 811e046:	490d      	ldr	r1, [pc, #52]	@ (811e07c <tcp_pcb_remove+0x124>)
 811e048:	4808      	ldr	r0, [pc, #32]	@ (811e06c <tcp_pcb_remove+0x114>)
 811e04a:	f006 fb07 	bl	812465c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 811e04e:	683b      	ldr	r3, [r7, #0]
 811e050:	2200      	movs	r2, #0
 811e052:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 811e054:	683b      	ldr	r3, [r7, #0]
 811e056:	2200      	movs	r2, #0
 811e058:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 811e05a:	bf00      	nop
 811e05c:	3710      	adds	r7, #16
 811e05e:	46bd      	mov	sp, r7
 811e060:	bd80      	pop	{r7, pc}
 811e062:	bf00      	nop
 811e064:	08126a28 	.word	0x08126a28
 811e068:	081270d4 	.word	0x081270d4
 811e06c:	08126ab0 	.word	0x08126ab0
 811e070:	081270f0 	.word	0x081270f0
 811e074:	08127110 	.word	0x08127110
 811e078:	08127128 	.word	0x08127128
 811e07c:	08127144 	.word	0x08127144

0811e080 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 811e080:	b580      	push	{r7, lr}
 811e082:	b082      	sub	sp, #8
 811e084:	af00      	add	r7, sp, #0
 811e086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 811e088:	687b      	ldr	r3, [r7, #4]
 811e08a:	2b00      	cmp	r3, #0
 811e08c:	d106      	bne.n	811e09c <tcp_next_iss+0x1c>
 811e08e:	4b0a      	ldr	r3, [pc, #40]	@ (811e0b8 <tcp_next_iss+0x38>)
 811e090:	f640 02af 	movw	r2, #2223	@ 0x8af
 811e094:	4909      	ldr	r1, [pc, #36]	@ (811e0bc <tcp_next_iss+0x3c>)
 811e096:	480a      	ldr	r0, [pc, #40]	@ (811e0c0 <tcp_next_iss+0x40>)
 811e098:	f006 fae0 	bl	812465c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 811e09c:	4b09      	ldr	r3, [pc, #36]	@ (811e0c4 <tcp_next_iss+0x44>)
 811e09e:	681a      	ldr	r2, [r3, #0]
 811e0a0:	4b09      	ldr	r3, [pc, #36]	@ (811e0c8 <tcp_next_iss+0x48>)
 811e0a2:	681b      	ldr	r3, [r3, #0]
 811e0a4:	4413      	add	r3, r2
 811e0a6:	4a07      	ldr	r2, [pc, #28]	@ (811e0c4 <tcp_next_iss+0x44>)
 811e0a8:	6013      	str	r3, [r2, #0]
  return iss;
 811e0aa:	4b06      	ldr	r3, [pc, #24]	@ (811e0c4 <tcp_next_iss+0x44>)
 811e0ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 811e0ae:	4618      	mov	r0, r3
 811e0b0:	3708      	adds	r7, #8
 811e0b2:	46bd      	mov	sp, r7
 811e0b4:	bd80      	pop	{r7, pc}
 811e0b6:	bf00      	nop
 811e0b8:	08126a28 	.word	0x08126a28
 811e0bc:	0812715c 	.word	0x0812715c
 811e0c0:	08126ab0 	.word	0x08126ab0
 811e0c4:	1000002c 	.word	0x1000002c
 811e0c8:	1000e498 	.word	0x1000e498

0811e0cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 811e0cc:	b580      	push	{r7, lr}
 811e0ce:	b086      	sub	sp, #24
 811e0d0:	af00      	add	r7, sp, #0
 811e0d2:	4603      	mov	r3, r0
 811e0d4:	60b9      	str	r1, [r7, #8]
 811e0d6:	607a      	str	r2, [r7, #4]
 811e0d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 811e0da:	687b      	ldr	r3, [r7, #4]
 811e0dc:	2b00      	cmp	r3, #0
 811e0de:	d106      	bne.n	811e0ee <tcp_eff_send_mss_netif+0x22>
 811e0e0:	4b14      	ldr	r3, [pc, #80]	@ (811e134 <tcp_eff_send_mss_netif+0x68>)
 811e0e2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 811e0e6:	4914      	ldr	r1, [pc, #80]	@ (811e138 <tcp_eff_send_mss_netif+0x6c>)
 811e0e8:	4814      	ldr	r0, [pc, #80]	@ (811e13c <tcp_eff_send_mss_netif+0x70>)
 811e0ea:	f006 fab7 	bl	812465c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 811e0ee:	68bb      	ldr	r3, [r7, #8]
 811e0f0:	2b00      	cmp	r3, #0
 811e0f2:	d101      	bne.n	811e0f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 811e0f4:	89fb      	ldrh	r3, [r7, #14]
 811e0f6:	e019      	b.n	811e12c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 811e0f8:	68bb      	ldr	r3, [r7, #8]
 811e0fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811e0fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 811e0fe:	8afb      	ldrh	r3, [r7, #22]
 811e100:	2b00      	cmp	r3, #0
 811e102:	d012      	beq.n	811e12a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 811e104:	2328      	movs	r3, #40	@ 0x28
 811e106:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 811e108:	8afa      	ldrh	r2, [r7, #22]
 811e10a:	8abb      	ldrh	r3, [r7, #20]
 811e10c:	429a      	cmp	r2, r3
 811e10e:	d904      	bls.n	811e11a <tcp_eff_send_mss_netif+0x4e>
 811e110:	8afa      	ldrh	r2, [r7, #22]
 811e112:	8abb      	ldrh	r3, [r7, #20]
 811e114:	1ad3      	subs	r3, r2, r3
 811e116:	b29b      	uxth	r3, r3
 811e118:	e000      	b.n	811e11c <tcp_eff_send_mss_netif+0x50>
 811e11a:	2300      	movs	r3, #0
 811e11c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 811e11e:	8a7a      	ldrh	r2, [r7, #18]
 811e120:	89fb      	ldrh	r3, [r7, #14]
 811e122:	4293      	cmp	r3, r2
 811e124:	bf28      	it	cs
 811e126:	4613      	movcs	r3, r2
 811e128:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 811e12a:	89fb      	ldrh	r3, [r7, #14]
}
 811e12c:	4618      	mov	r0, r3
 811e12e:	3718      	adds	r7, #24
 811e130:	46bd      	mov	sp, r7
 811e132:	bd80      	pop	{r7, pc}
 811e134:	08126a28 	.word	0x08126a28
 811e138:	08127178 	.word	0x08127178
 811e13c:	08126ab0 	.word	0x08126ab0

0811e140 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 811e140:	b580      	push	{r7, lr}
 811e142:	b084      	sub	sp, #16
 811e144:	af00      	add	r7, sp, #0
 811e146:	6078      	str	r0, [r7, #4]
 811e148:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 811e14a:	683b      	ldr	r3, [r7, #0]
 811e14c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 811e14e:	687b      	ldr	r3, [r7, #4]
 811e150:	2b00      	cmp	r3, #0
 811e152:	d119      	bne.n	811e188 <tcp_netif_ip_addr_changed_pcblist+0x48>
 811e154:	4b10      	ldr	r3, [pc, #64]	@ (811e198 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 811e156:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 811e15a:	4910      	ldr	r1, [pc, #64]	@ (811e19c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 811e15c:	4810      	ldr	r0, [pc, #64]	@ (811e1a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 811e15e:	f006 fa7d 	bl	812465c <iprintf>

  while (pcb != NULL) {
 811e162:	e011      	b.n	811e188 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 811e164:	68fb      	ldr	r3, [r7, #12]
 811e166:	681a      	ldr	r2, [r3, #0]
 811e168:	687b      	ldr	r3, [r7, #4]
 811e16a:	681b      	ldr	r3, [r3, #0]
 811e16c:	429a      	cmp	r2, r3
 811e16e:	d108      	bne.n	811e182 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 811e170:	68fb      	ldr	r3, [r7, #12]
 811e172:	68db      	ldr	r3, [r3, #12]
 811e174:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 811e176:	68f8      	ldr	r0, [r7, #12]
 811e178:	f7fe fd5e 	bl	811cc38 <tcp_abort>
      pcb = next;
 811e17c:	68bb      	ldr	r3, [r7, #8]
 811e17e:	60fb      	str	r3, [r7, #12]
 811e180:	e002      	b.n	811e188 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 811e182:	68fb      	ldr	r3, [r7, #12]
 811e184:	68db      	ldr	r3, [r3, #12]
 811e186:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 811e188:	68fb      	ldr	r3, [r7, #12]
 811e18a:	2b00      	cmp	r3, #0
 811e18c:	d1ea      	bne.n	811e164 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 811e18e:	bf00      	nop
 811e190:	bf00      	nop
 811e192:	3710      	adds	r7, #16
 811e194:	46bd      	mov	sp, r7
 811e196:	bd80      	pop	{r7, pc}
 811e198:	08126a28 	.word	0x08126a28
 811e19c:	081271a0 	.word	0x081271a0
 811e1a0:	08126ab0 	.word	0x08126ab0

0811e1a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811e1a4:	b580      	push	{r7, lr}
 811e1a6:	b084      	sub	sp, #16
 811e1a8:	af00      	add	r7, sp, #0
 811e1aa:	6078      	str	r0, [r7, #4]
 811e1ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 811e1ae:	687b      	ldr	r3, [r7, #4]
 811e1b0:	2b00      	cmp	r3, #0
 811e1b2:	d02a      	beq.n	811e20a <tcp_netif_ip_addr_changed+0x66>
 811e1b4:	687b      	ldr	r3, [r7, #4]
 811e1b6:	681b      	ldr	r3, [r3, #0]
 811e1b8:	2b00      	cmp	r3, #0
 811e1ba:	d026      	beq.n	811e20a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 811e1bc:	4b15      	ldr	r3, [pc, #84]	@ (811e214 <tcp_netif_ip_addr_changed+0x70>)
 811e1be:	681b      	ldr	r3, [r3, #0]
 811e1c0:	4619      	mov	r1, r3
 811e1c2:	6878      	ldr	r0, [r7, #4]
 811e1c4:	f7ff ffbc 	bl	811e140 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 811e1c8:	4b13      	ldr	r3, [pc, #76]	@ (811e218 <tcp_netif_ip_addr_changed+0x74>)
 811e1ca:	681b      	ldr	r3, [r3, #0]
 811e1cc:	4619      	mov	r1, r3
 811e1ce:	6878      	ldr	r0, [r7, #4]
 811e1d0:	f7ff ffb6 	bl	811e140 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 811e1d4:	683b      	ldr	r3, [r7, #0]
 811e1d6:	2b00      	cmp	r3, #0
 811e1d8:	d017      	beq.n	811e20a <tcp_netif_ip_addr_changed+0x66>
 811e1da:	683b      	ldr	r3, [r7, #0]
 811e1dc:	681b      	ldr	r3, [r3, #0]
 811e1de:	2b00      	cmp	r3, #0
 811e1e0:	d013      	beq.n	811e20a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811e1e2:	4b0e      	ldr	r3, [pc, #56]	@ (811e21c <tcp_netif_ip_addr_changed+0x78>)
 811e1e4:	681b      	ldr	r3, [r3, #0]
 811e1e6:	60fb      	str	r3, [r7, #12]
 811e1e8:	e00c      	b.n	811e204 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 811e1ea:	68fb      	ldr	r3, [r7, #12]
 811e1ec:	681a      	ldr	r2, [r3, #0]
 811e1ee:	687b      	ldr	r3, [r7, #4]
 811e1f0:	681b      	ldr	r3, [r3, #0]
 811e1f2:	429a      	cmp	r2, r3
 811e1f4:	d103      	bne.n	811e1fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 811e1f6:	683b      	ldr	r3, [r7, #0]
 811e1f8:	681a      	ldr	r2, [r3, #0]
 811e1fa:	68fb      	ldr	r3, [r7, #12]
 811e1fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811e1fe:	68fb      	ldr	r3, [r7, #12]
 811e200:	68db      	ldr	r3, [r3, #12]
 811e202:	60fb      	str	r3, [r7, #12]
 811e204:	68fb      	ldr	r3, [r7, #12]
 811e206:	2b00      	cmp	r3, #0
 811e208:	d1ef      	bne.n	811e1ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 811e20a:	bf00      	nop
 811e20c:	3710      	adds	r7, #16
 811e20e:	46bd      	mov	sp, r7
 811e210:	bd80      	pop	{r7, pc}
 811e212:	bf00      	nop
 811e214:	1000e4a4 	.word	0x1000e4a4
 811e218:	1000e49c 	.word	0x1000e49c
 811e21c:	1000e4a0 	.word	0x1000e4a0

0811e220 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 811e220:	b580      	push	{r7, lr}
 811e222:	b082      	sub	sp, #8
 811e224:	af00      	add	r7, sp, #0
 811e226:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 811e228:	687b      	ldr	r3, [r7, #4]
 811e22a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811e22c:	2b00      	cmp	r3, #0
 811e22e:	d007      	beq.n	811e240 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 811e230:	687b      	ldr	r3, [r7, #4]
 811e232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811e234:	4618      	mov	r0, r3
 811e236:	f7ff fbd5 	bl	811d9e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 811e23a:	687b      	ldr	r3, [r7, #4]
 811e23c:	2200      	movs	r2, #0
 811e23e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 811e240:	bf00      	nop
 811e242:	3708      	adds	r7, #8
 811e244:	46bd      	mov	sp, r7
 811e246:	bd80      	pop	{r7, pc}

0811e248 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 811e248:	b590      	push	{r4, r7, lr}
 811e24a:	b08d      	sub	sp, #52	@ 0x34
 811e24c:	af04      	add	r7, sp, #16
 811e24e:	6078      	str	r0, [r7, #4]
 811e250:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 811e252:	687b      	ldr	r3, [r7, #4]
 811e254:	2b00      	cmp	r3, #0
 811e256:	d105      	bne.n	811e264 <tcp_input+0x1c>
 811e258:	4b9b      	ldr	r3, [pc, #620]	@ (811e4c8 <tcp_input+0x280>)
 811e25a:	2283      	movs	r2, #131	@ 0x83
 811e25c:	499b      	ldr	r1, [pc, #620]	@ (811e4cc <tcp_input+0x284>)
 811e25e:	489c      	ldr	r0, [pc, #624]	@ (811e4d0 <tcp_input+0x288>)
 811e260:	f006 f9fc 	bl	812465c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 811e264:	687b      	ldr	r3, [r7, #4]
 811e266:	685b      	ldr	r3, [r3, #4]
 811e268:	4a9a      	ldr	r2, [pc, #616]	@ (811e4d4 <tcp_input+0x28c>)
 811e26a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 811e26c:	687b      	ldr	r3, [r7, #4]
 811e26e:	895b      	ldrh	r3, [r3, #10]
 811e270:	2b13      	cmp	r3, #19
 811e272:	f240 83d1 	bls.w	811ea18 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811e276:	4b98      	ldr	r3, [pc, #608]	@ (811e4d8 <tcp_input+0x290>)
 811e278:	695b      	ldr	r3, [r3, #20]
 811e27a:	4a97      	ldr	r2, [pc, #604]	@ (811e4d8 <tcp_input+0x290>)
 811e27c:	6812      	ldr	r2, [r2, #0]
 811e27e:	4611      	mov	r1, r2
 811e280:	4618      	mov	r0, r3
 811e282:	f7fb fa73 	bl	811976c <ip4_addr_isbroadcast_u32>
 811e286:	4603      	mov	r3, r0
 811e288:	2b00      	cmp	r3, #0
 811e28a:	f040 83c7 	bne.w	811ea1c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 811e28e:	4b92      	ldr	r3, [pc, #584]	@ (811e4d8 <tcp_input+0x290>)
 811e290:	695b      	ldr	r3, [r3, #20]
 811e292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811e296:	2be0      	cmp	r3, #224	@ 0xe0
 811e298:	f000 83c0 	beq.w	811ea1c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 811e29c:	4b8d      	ldr	r3, [pc, #564]	@ (811e4d4 <tcp_input+0x28c>)
 811e29e:	681b      	ldr	r3, [r3, #0]
 811e2a0:	899b      	ldrh	r3, [r3, #12]
 811e2a2:	b29b      	uxth	r3, r3
 811e2a4:	4618      	mov	r0, r3
 811e2a6:	f7f9 fc29 	bl	8117afc <lwip_htons>
 811e2aa:	4603      	mov	r3, r0
 811e2ac:	0b1b      	lsrs	r3, r3, #12
 811e2ae:	b29b      	uxth	r3, r3
 811e2b0:	b2db      	uxtb	r3, r3
 811e2b2:	009b      	lsls	r3, r3, #2
 811e2b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 811e2b6:	7cbb      	ldrb	r3, [r7, #18]
 811e2b8:	2b13      	cmp	r3, #19
 811e2ba:	f240 83b1 	bls.w	811ea20 <tcp_input+0x7d8>
 811e2be:	7cbb      	ldrb	r3, [r7, #18]
 811e2c0:	b29a      	uxth	r2, r3
 811e2c2:	687b      	ldr	r3, [r7, #4]
 811e2c4:	891b      	ldrh	r3, [r3, #8]
 811e2c6:	429a      	cmp	r2, r3
 811e2c8:	f200 83aa 	bhi.w	811ea20 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 811e2cc:	7cbb      	ldrb	r3, [r7, #18]
 811e2ce:	b29b      	uxth	r3, r3
 811e2d0:	3b14      	subs	r3, #20
 811e2d2:	b29a      	uxth	r2, r3
 811e2d4:	4b81      	ldr	r3, [pc, #516]	@ (811e4dc <tcp_input+0x294>)
 811e2d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 811e2d8:	4b81      	ldr	r3, [pc, #516]	@ (811e4e0 <tcp_input+0x298>)
 811e2da:	2200      	movs	r2, #0
 811e2dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 811e2de:	687b      	ldr	r3, [r7, #4]
 811e2e0:	895a      	ldrh	r2, [r3, #10]
 811e2e2:	7cbb      	ldrb	r3, [r7, #18]
 811e2e4:	b29b      	uxth	r3, r3
 811e2e6:	429a      	cmp	r2, r3
 811e2e8:	d309      	bcc.n	811e2fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 811e2ea:	4b7c      	ldr	r3, [pc, #496]	@ (811e4dc <tcp_input+0x294>)
 811e2ec:	881a      	ldrh	r2, [r3, #0]
 811e2ee:	4b7d      	ldr	r3, [pc, #500]	@ (811e4e4 <tcp_input+0x29c>)
 811e2f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 811e2f2:	7cbb      	ldrb	r3, [r7, #18]
 811e2f4:	4619      	mov	r1, r3
 811e2f6:	6878      	ldr	r0, [r7, #4]
 811e2f8:	f7fd fd82 	bl	811be00 <pbuf_remove_header>
 811e2fc:	e04e      	b.n	811e39c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 811e2fe:	687b      	ldr	r3, [r7, #4]
 811e300:	681b      	ldr	r3, [r3, #0]
 811e302:	2b00      	cmp	r3, #0
 811e304:	d105      	bne.n	811e312 <tcp_input+0xca>
 811e306:	4b70      	ldr	r3, [pc, #448]	@ (811e4c8 <tcp_input+0x280>)
 811e308:	22c2      	movs	r2, #194	@ 0xc2
 811e30a:	4977      	ldr	r1, [pc, #476]	@ (811e4e8 <tcp_input+0x2a0>)
 811e30c:	4870      	ldr	r0, [pc, #448]	@ (811e4d0 <tcp_input+0x288>)
 811e30e:	f006 f9a5 	bl	812465c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 811e312:	2114      	movs	r1, #20
 811e314:	6878      	ldr	r0, [r7, #4]
 811e316:	f7fd fd73 	bl	811be00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 811e31a:	687b      	ldr	r3, [r7, #4]
 811e31c:	895a      	ldrh	r2, [r3, #10]
 811e31e:	4b71      	ldr	r3, [pc, #452]	@ (811e4e4 <tcp_input+0x29c>)
 811e320:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 811e322:	4b6e      	ldr	r3, [pc, #440]	@ (811e4dc <tcp_input+0x294>)
 811e324:	881a      	ldrh	r2, [r3, #0]
 811e326:	4b6f      	ldr	r3, [pc, #444]	@ (811e4e4 <tcp_input+0x29c>)
 811e328:	881b      	ldrh	r3, [r3, #0]
 811e32a:	1ad3      	subs	r3, r2, r3
 811e32c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 811e32e:	4b6d      	ldr	r3, [pc, #436]	@ (811e4e4 <tcp_input+0x29c>)
 811e330:	881b      	ldrh	r3, [r3, #0]
 811e332:	4619      	mov	r1, r3
 811e334:	6878      	ldr	r0, [r7, #4]
 811e336:	f7fd fd63 	bl	811be00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 811e33a:	687b      	ldr	r3, [r7, #4]
 811e33c:	681b      	ldr	r3, [r3, #0]
 811e33e:	895b      	ldrh	r3, [r3, #10]
 811e340:	8a3a      	ldrh	r2, [r7, #16]
 811e342:	429a      	cmp	r2, r3
 811e344:	f200 836e 	bhi.w	811ea24 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 811e348:	687b      	ldr	r3, [r7, #4]
 811e34a:	681b      	ldr	r3, [r3, #0]
 811e34c:	685b      	ldr	r3, [r3, #4]
 811e34e:	4a64      	ldr	r2, [pc, #400]	@ (811e4e0 <tcp_input+0x298>)
 811e350:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 811e352:	687b      	ldr	r3, [r7, #4]
 811e354:	681b      	ldr	r3, [r3, #0]
 811e356:	8a3a      	ldrh	r2, [r7, #16]
 811e358:	4611      	mov	r1, r2
 811e35a:	4618      	mov	r0, r3
 811e35c:	f7fd fd50 	bl	811be00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 811e360:	687b      	ldr	r3, [r7, #4]
 811e362:	891a      	ldrh	r2, [r3, #8]
 811e364:	8a3b      	ldrh	r3, [r7, #16]
 811e366:	1ad3      	subs	r3, r2, r3
 811e368:	b29a      	uxth	r2, r3
 811e36a:	687b      	ldr	r3, [r7, #4]
 811e36c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 811e36e:	687b      	ldr	r3, [r7, #4]
 811e370:	895b      	ldrh	r3, [r3, #10]
 811e372:	2b00      	cmp	r3, #0
 811e374:	d005      	beq.n	811e382 <tcp_input+0x13a>
 811e376:	4b54      	ldr	r3, [pc, #336]	@ (811e4c8 <tcp_input+0x280>)
 811e378:	22df      	movs	r2, #223	@ 0xdf
 811e37a:	495c      	ldr	r1, [pc, #368]	@ (811e4ec <tcp_input+0x2a4>)
 811e37c:	4854      	ldr	r0, [pc, #336]	@ (811e4d0 <tcp_input+0x288>)
 811e37e:	f006 f96d 	bl	812465c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 811e382:	687b      	ldr	r3, [r7, #4]
 811e384:	891a      	ldrh	r2, [r3, #8]
 811e386:	687b      	ldr	r3, [r7, #4]
 811e388:	681b      	ldr	r3, [r3, #0]
 811e38a:	891b      	ldrh	r3, [r3, #8]
 811e38c:	429a      	cmp	r2, r3
 811e38e:	d005      	beq.n	811e39c <tcp_input+0x154>
 811e390:	4b4d      	ldr	r3, [pc, #308]	@ (811e4c8 <tcp_input+0x280>)
 811e392:	22e0      	movs	r2, #224	@ 0xe0
 811e394:	4956      	ldr	r1, [pc, #344]	@ (811e4f0 <tcp_input+0x2a8>)
 811e396:	484e      	ldr	r0, [pc, #312]	@ (811e4d0 <tcp_input+0x288>)
 811e398:	f006 f960 	bl	812465c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 811e39c:	4b4d      	ldr	r3, [pc, #308]	@ (811e4d4 <tcp_input+0x28c>)
 811e39e:	681b      	ldr	r3, [r3, #0]
 811e3a0:	881b      	ldrh	r3, [r3, #0]
 811e3a2:	b29b      	uxth	r3, r3
 811e3a4:	4a4b      	ldr	r2, [pc, #300]	@ (811e4d4 <tcp_input+0x28c>)
 811e3a6:	6814      	ldr	r4, [r2, #0]
 811e3a8:	4618      	mov	r0, r3
 811e3aa:	f7f9 fba7 	bl	8117afc <lwip_htons>
 811e3ae:	4603      	mov	r3, r0
 811e3b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 811e3b2:	4b48      	ldr	r3, [pc, #288]	@ (811e4d4 <tcp_input+0x28c>)
 811e3b4:	681b      	ldr	r3, [r3, #0]
 811e3b6:	885b      	ldrh	r3, [r3, #2]
 811e3b8:	b29b      	uxth	r3, r3
 811e3ba:	4a46      	ldr	r2, [pc, #280]	@ (811e4d4 <tcp_input+0x28c>)
 811e3bc:	6814      	ldr	r4, [r2, #0]
 811e3be:	4618      	mov	r0, r3
 811e3c0:	f7f9 fb9c 	bl	8117afc <lwip_htons>
 811e3c4:	4603      	mov	r3, r0
 811e3c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 811e3c8:	4b42      	ldr	r3, [pc, #264]	@ (811e4d4 <tcp_input+0x28c>)
 811e3ca:	681b      	ldr	r3, [r3, #0]
 811e3cc:	685b      	ldr	r3, [r3, #4]
 811e3ce:	4a41      	ldr	r2, [pc, #260]	@ (811e4d4 <tcp_input+0x28c>)
 811e3d0:	6814      	ldr	r4, [r2, #0]
 811e3d2:	4618      	mov	r0, r3
 811e3d4:	f7f9 fba7 	bl	8117b26 <lwip_htonl>
 811e3d8:	4603      	mov	r3, r0
 811e3da:	6063      	str	r3, [r4, #4]
 811e3dc:	6863      	ldr	r3, [r4, #4]
 811e3de:	4a45      	ldr	r2, [pc, #276]	@ (811e4f4 <tcp_input+0x2ac>)
 811e3e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 811e3e2:	4b3c      	ldr	r3, [pc, #240]	@ (811e4d4 <tcp_input+0x28c>)
 811e3e4:	681b      	ldr	r3, [r3, #0]
 811e3e6:	689b      	ldr	r3, [r3, #8]
 811e3e8:	4a3a      	ldr	r2, [pc, #232]	@ (811e4d4 <tcp_input+0x28c>)
 811e3ea:	6814      	ldr	r4, [r2, #0]
 811e3ec:	4618      	mov	r0, r3
 811e3ee:	f7f9 fb9a 	bl	8117b26 <lwip_htonl>
 811e3f2:	4603      	mov	r3, r0
 811e3f4:	60a3      	str	r3, [r4, #8]
 811e3f6:	68a3      	ldr	r3, [r4, #8]
 811e3f8:	4a3f      	ldr	r2, [pc, #252]	@ (811e4f8 <tcp_input+0x2b0>)
 811e3fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 811e3fc:	4b35      	ldr	r3, [pc, #212]	@ (811e4d4 <tcp_input+0x28c>)
 811e3fe:	681b      	ldr	r3, [r3, #0]
 811e400:	89db      	ldrh	r3, [r3, #14]
 811e402:	b29b      	uxth	r3, r3
 811e404:	4a33      	ldr	r2, [pc, #204]	@ (811e4d4 <tcp_input+0x28c>)
 811e406:	6814      	ldr	r4, [r2, #0]
 811e408:	4618      	mov	r0, r3
 811e40a:	f7f9 fb77 	bl	8117afc <lwip_htons>
 811e40e:	4603      	mov	r3, r0
 811e410:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 811e412:	4b30      	ldr	r3, [pc, #192]	@ (811e4d4 <tcp_input+0x28c>)
 811e414:	681b      	ldr	r3, [r3, #0]
 811e416:	899b      	ldrh	r3, [r3, #12]
 811e418:	b29b      	uxth	r3, r3
 811e41a:	4618      	mov	r0, r3
 811e41c:	f7f9 fb6e 	bl	8117afc <lwip_htons>
 811e420:	4603      	mov	r3, r0
 811e422:	b2db      	uxtb	r3, r3
 811e424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 811e428:	b2da      	uxtb	r2, r3
 811e42a:	4b34      	ldr	r3, [pc, #208]	@ (811e4fc <tcp_input+0x2b4>)
 811e42c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 811e42e:	687b      	ldr	r3, [r7, #4]
 811e430:	891a      	ldrh	r2, [r3, #8]
 811e432:	4b33      	ldr	r3, [pc, #204]	@ (811e500 <tcp_input+0x2b8>)
 811e434:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 811e436:	4b31      	ldr	r3, [pc, #196]	@ (811e4fc <tcp_input+0x2b4>)
 811e438:	781b      	ldrb	r3, [r3, #0]
 811e43a:	f003 0303 	and.w	r3, r3, #3
 811e43e:	2b00      	cmp	r3, #0
 811e440:	d00c      	beq.n	811e45c <tcp_input+0x214>
    tcplen++;
 811e442:	4b2f      	ldr	r3, [pc, #188]	@ (811e500 <tcp_input+0x2b8>)
 811e444:	881b      	ldrh	r3, [r3, #0]
 811e446:	3301      	adds	r3, #1
 811e448:	b29a      	uxth	r2, r3
 811e44a:	4b2d      	ldr	r3, [pc, #180]	@ (811e500 <tcp_input+0x2b8>)
 811e44c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 811e44e:	687b      	ldr	r3, [r7, #4]
 811e450:	891a      	ldrh	r2, [r3, #8]
 811e452:	4b2b      	ldr	r3, [pc, #172]	@ (811e500 <tcp_input+0x2b8>)
 811e454:	881b      	ldrh	r3, [r3, #0]
 811e456:	429a      	cmp	r2, r3
 811e458:	f200 82e6 	bhi.w	811ea28 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 811e45c:	2300      	movs	r3, #0
 811e45e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811e460:	4b28      	ldr	r3, [pc, #160]	@ (811e504 <tcp_input+0x2bc>)
 811e462:	681b      	ldr	r3, [r3, #0]
 811e464:	61fb      	str	r3, [r7, #28]
 811e466:	e09d      	b.n	811e5a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 811e468:	69fb      	ldr	r3, [r7, #28]
 811e46a:	7d1b      	ldrb	r3, [r3, #20]
 811e46c:	2b00      	cmp	r3, #0
 811e46e:	d105      	bne.n	811e47c <tcp_input+0x234>
 811e470:	4b15      	ldr	r3, [pc, #84]	@ (811e4c8 <tcp_input+0x280>)
 811e472:	22fb      	movs	r2, #251	@ 0xfb
 811e474:	4924      	ldr	r1, [pc, #144]	@ (811e508 <tcp_input+0x2c0>)
 811e476:	4816      	ldr	r0, [pc, #88]	@ (811e4d0 <tcp_input+0x288>)
 811e478:	f006 f8f0 	bl	812465c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 811e47c:	69fb      	ldr	r3, [r7, #28]
 811e47e:	7d1b      	ldrb	r3, [r3, #20]
 811e480:	2b0a      	cmp	r3, #10
 811e482:	d105      	bne.n	811e490 <tcp_input+0x248>
 811e484:	4b10      	ldr	r3, [pc, #64]	@ (811e4c8 <tcp_input+0x280>)
 811e486:	22fc      	movs	r2, #252	@ 0xfc
 811e488:	4920      	ldr	r1, [pc, #128]	@ (811e50c <tcp_input+0x2c4>)
 811e48a:	4811      	ldr	r0, [pc, #68]	@ (811e4d0 <tcp_input+0x288>)
 811e48c:	f006 f8e6 	bl	812465c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 811e490:	69fb      	ldr	r3, [r7, #28]
 811e492:	7d1b      	ldrb	r3, [r3, #20]
 811e494:	2b01      	cmp	r3, #1
 811e496:	d105      	bne.n	811e4a4 <tcp_input+0x25c>
 811e498:	4b0b      	ldr	r3, [pc, #44]	@ (811e4c8 <tcp_input+0x280>)
 811e49a:	22fd      	movs	r2, #253	@ 0xfd
 811e49c:	491c      	ldr	r1, [pc, #112]	@ (811e510 <tcp_input+0x2c8>)
 811e49e:	480c      	ldr	r0, [pc, #48]	@ (811e4d0 <tcp_input+0x288>)
 811e4a0:	f006 f8dc 	bl	812465c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811e4a4:	69fb      	ldr	r3, [r7, #28]
 811e4a6:	7a1b      	ldrb	r3, [r3, #8]
 811e4a8:	2b00      	cmp	r3, #0
 811e4aa:	d033      	beq.n	811e514 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811e4ac:	69fb      	ldr	r3, [r7, #28]
 811e4ae:	7a1a      	ldrb	r2, [r3, #8]
 811e4b0:	4b09      	ldr	r3, [pc, #36]	@ (811e4d8 <tcp_input+0x290>)
 811e4b2:	685b      	ldr	r3, [r3, #4]
 811e4b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811e4b8:	3301      	adds	r3, #1
 811e4ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811e4bc:	429a      	cmp	r2, r3
 811e4be:	d029      	beq.n	811e514 <tcp_input+0x2cc>
      prev = pcb;
 811e4c0:	69fb      	ldr	r3, [r7, #28]
 811e4c2:	61bb      	str	r3, [r7, #24]
      continue;
 811e4c4:	e06b      	b.n	811e59e <tcp_input+0x356>
 811e4c6:	bf00      	nop
 811e4c8:	081271d4 	.word	0x081271d4
 811e4cc:	08127248 	.word	0x08127248
 811e4d0:	08127260 	.word	0x08127260
 811e4d4:	1000e4c0 	.word	0x1000e4c0
 811e4d8:	1000b300 	.word	0x1000b300
 811e4dc:	1000e4c4 	.word	0x1000e4c4
 811e4e0:	1000e4c8 	.word	0x1000e4c8
 811e4e4:	1000e4c6 	.word	0x1000e4c6
 811e4e8:	08127288 	.word	0x08127288
 811e4ec:	08127298 	.word	0x08127298
 811e4f0:	081272a4 	.word	0x081272a4
 811e4f4:	1000e4d0 	.word	0x1000e4d0
 811e4f8:	1000e4d4 	.word	0x1000e4d4
 811e4fc:	1000e4dc 	.word	0x1000e4dc
 811e500:	1000e4da 	.word	0x1000e4da
 811e504:	1000e4a4 	.word	0x1000e4a4
 811e508:	081272c4 	.word	0x081272c4
 811e50c:	081272ec 	.word	0x081272ec
 811e510:	08127318 	.word	0x08127318
    }

    if (pcb->remote_port == tcphdr->src &&
 811e514:	69fb      	ldr	r3, [r7, #28]
 811e516:	8b1a      	ldrh	r2, [r3, #24]
 811e518:	4b72      	ldr	r3, [pc, #456]	@ (811e6e4 <tcp_input+0x49c>)
 811e51a:	681b      	ldr	r3, [r3, #0]
 811e51c:	881b      	ldrh	r3, [r3, #0]
 811e51e:	b29b      	uxth	r3, r3
 811e520:	429a      	cmp	r2, r3
 811e522:	d13a      	bne.n	811e59a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 811e524:	69fb      	ldr	r3, [r7, #28]
 811e526:	8ada      	ldrh	r2, [r3, #22]
 811e528:	4b6e      	ldr	r3, [pc, #440]	@ (811e6e4 <tcp_input+0x49c>)
 811e52a:	681b      	ldr	r3, [r3, #0]
 811e52c:	885b      	ldrh	r3, [r3, #2]
 811e52e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 811e530:	429a      	cmp	r2, r3
 811e532:	d132      	bne.n	811e59a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811e534:	69fb      	ldr	r3, [r7, #28]
 811e536:	685a      	ldr	r2, [r3, #4]
 811e538:	4b6b      	ldr	r3, [pc, #428]	@ (811e6e8 <tcp_input+0x4a0>)
 811e53a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 811e53c:	429a      	cmp	r2, r3
 811e53e:	d12c      	bne.n	811e59a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811e540:	69fb      	ldr	r3, [r7, #28]
 811e542:	681a      	ldr	r2, [r3, #0]
 811e544:	4b68      	ldr	r3, [pc, #416]	@ (811e6e8 <tcp_input+0x4a0>)
 811e546:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811e548:	429a      	cmp	r2, r3
 811e54a:	d126      	bne.n	811e59a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 811e54c:	69fb      	ldr	r3, [r7, #28]
 811e54e:	68db      	ldr	r3, [r3, #12]
 811e550:	69fa      	ldr	r2, [r7, #28]
 811e552:	429a      	cmp	r2, r3
 811e554:	d106      	bne.n	811e564 <tcp_input+0x31c>
 811e556:	4b65      	ldr	r3, [pc, #404]	@ (811e6ec <tcp_input+0x4a4>)
 811e558:	f240 120d 	movw	r2, #269	@ 0x10d
 811e55c:	4964      	ldr	r1, [pc, #400]	@ (811e6f0 <tcp_input+0x4a8>)
 811e55e:	4865      	ldr	r0, [pc, #404]	@ (811e6f4 <tcp_input+0x4ac>)
 811e560:	f006 f87c 	bl	812465c <iprintf>
      if (prev != NULL) {
 811e564:	69bb      	ldr	r3, [r7, #24]
 811e566:	2b00      	cmp	r3, #0
 811e568:	d00a      	beq.n	811e580 <tcp_input+0x338>
        prev->next = pcb->next;
 811e56a:	69fb      	ldr	r3, [r7, #28]
 811e56c:	68da      	ldr	r2, [r3, #12]
 811e56e:	69bb      	ldr	r3, [r7, #24]
 811e570:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 811e572:	4b61      	ldr	r3, [pc, #388]	@ (811e6f8 <tcp_input+0x4b0>)
 811e574:	681a      	ldr	r2, [r3, #0]
 811e576:	69fb      	ldr	r3, [r7, #28]
 811e578:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 811e57a:	4a5f      	ldr	r2, [pc, #380]	@ (811e6f8 <tcp_input+0x4b0>)
 811e57c:	69fb      	ldr	r3, [r7, #28]
 811e57e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 811e580:	69fb      	ldr	r3, [r7, #28]
 811e582:	68db      	ldr	r3, [r3, #12]
 811e584:	69fa      	ldr	r2, [r7, #28]
 811e586:	429a      	cmp	r2, r3
 811e588:	d111      	bne.n	811e5ae <tcp_input+0x366>
 811e58a:	4b58      	ldr	r3, [pc, #352]	@ (811e6ec <tcp_input+0x4a4>)
 811e58c:	f240 1215 	movw	r2, #277	@ 0x115
 811e590:	495a      	ldr	r1, [pc, #360]	@ (811e6fc <tcp_input+0x4b4>)
 811e592:	4858      	ldr	r0, [pc, #352]	@ (811e6f4 <tcp_input+0x4ac>)
 811e594:	f006 f862 	bl	812465c <iprintf>
      break;
 811e598:	e009      	b.n	811e5ae <tcp_input+0x366>
    }
    prev = pcb;
 811e59a:	69fb      	ldr	r3, [r7, #28]
 811e59c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811e59e:	69fb      	ldr	r3, [r7, #28]
 811e5a0:	68db      	ldr	r3, [r3, #12]
 811e5a2:	61fb      	str	r3, [r7, #28]
 811e5a4:	69fb      	ldr	r3, [r7, #28]
 811e5a6:	2b00      	cmp	r3, #0
 811e5a8:	f47f af5e 	bne.w	811e468 <tcp_input+0x220>
 811e5ac:	e000      	b.n	811e5b0 <tcp_input+0x368>
      break;
 811e5ae:	bf00      	nop
  }

  if (pcb == NULL) {
 811e5b0:	69fb      	ldr	r3, [r7, #28]
 811e5b2:	2b00      	cmp	r3, #0
 811e5b4:	f040 80aa 	bne.w	811e70c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811e5b8:	4b51      	ldr	r3, [pc, #324]	@ (811e700 <tcp_input+0x4b8>)
 811e5ba:	681b      	ldr	r3, [r3, #0]
 811e5bc:	61fb      	str	r3, [r7, #28]
 811e5be:	e03f      	b.n	811e640 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811e5c0:	69fb      	ldr	r3, [r7, #28]
 811e5c2:	7d1b      	ldrb	r3, [r3, #20]
 811e5c4:	2b0a      	cmp	r3, #10
 811e5c6:	d006      	beq.n	811e5d6 <tcp_input+0x38e>
 811e5c8:	4b48      	ldr	r3, [pc, #288]	@ (811e6ec <tcp_input+0x4a4>)
 811e5ca:	f240 121f 	movw	r2, #287	@ 0x11f
 811e5ce:	494d      	ldr	r1, [pc, #308]	@ (811e704 <tcp_input+0x4bc>)
 811e5d0:	4848      	ldr	r0, [pc, #288]	@ (811e6f4 <tcp_input+0x4ac>)
 811e5d2:	f006 f843 	bl	812465c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811e5d6:	69fb      	ldr	r3, [r7, #28]
 811e5d8:	7a1b      	ldrb	r3, [r3, #8]
 811e5da:	2b00      	cmp	r3, #0
 811e5dc:	d009      	beq.n	811e5f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811e5de:	69fb      	ldr	r3, [r7, #28]
 811e5e0:	7a1a      	ldrb	r2, [r3, #8]
 811e5e2:	4b41      	ldr	r3, [pc, #260]	@ (811e6e8 <tcp_input+0x4a0>)
 811e5e4:	685b      	ldr	r3, [r3, #4]
 811e5e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811e5ea:	3301      	adds	r3, #1
 811e5ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811e5ee:	429a      	cmp	r2, r3
 811e5f0:	d122      	bne.n	811e638 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 811e5f2:	69fb      	ldr	r3, [r7, #28]
 811e5f4:	8b1a      	ldrh	r2, [r3, #24]
 811e5f6:	4b3b      	ldr	r3, [pc, #236]	@ (811e6e4 <tcp_input+0x49c>)
 811e5f8:	681b      	ldr	r3, [r3, #0]
 811e5fa:	881b      	ldrh	r3, [r3, #0]
 811e5fc:	b29b      	uxth	r3, r3
 811e5fe:	429a      	cmp	r2, r3
 811e600:	d11b      	bne.n	811e63a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 811e602:	69fb      	ldr	r3, [r7, #28]
 811e604:	8ada      	ldrh	r2, [r3, #22]
 811e606:	4b37      	ldr	r3, [pc, #220]	@ (811e6e4 <tcp_input+0x49c>)
 811e608:	681b      	ldr	r3, [r3, #0]
 811e60a:	885b      	ldrh	r3, [r3, #2]
 811e60c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 811e60e:	429a      	cmp	r2, r3
 811e610:	d113      	bne.n	811e63a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811e612:	69fb      	ldr	r3, [r7, #28]
 811e614:	685a      	ldr	r2, [r3, #4]
 811e616:	4b34      	ldr	r3, [pc, #208]	@ (811e6e8 <tcp_input+0x4a0>)
 811e618:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 811e61a:	429a      	cmp	r2, r3
 811e61c:	d10d      	bne.n	811e63a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811e61e:	69fb      	ldr	r3, [r7, #28]
 811e620:	681a      	ldr	r2, [r3, #0]
 811e622:	4b31      	ldr	r3, [pc, #196]	@ (811e6e8 <tcp_input+0x4a0>)
 811e624:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811e626:	429a      	cmp	r2, r3
 811e628:	d107      	bne.n	811e63a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 811e62a:	69f8      	ldr	r0, [r7, #28]
 811e62c:	f000 fb56 	bl	811ecdc <tcp_timewait_input>
        }
        pbuf_free(p);
 811e630:	6878      	ldr	r0, [r7, #4]
 811e632:	f7fd fc6b 	bl	811bf0c <pbuf_free>
        return;
 811e636:	e1fd      	b.n	811ea34 <tcp_input+0x7ec>
        continue;
 811e638:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811e63a:	69fb      	ldr	r3, [r7, #28]
 811e63c:	68db      	ldr	r3, [r3, #12]
 811e63e:	61fb      	str	r3, [r7, #28]
 811e640:	69fb      	ldr	r3, [r7, #28]
 811e642:	2b00      	cmp	r3, #0
 811e644:	d1bc      	bne.n	811e5c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 811e646:	2300      	movs	r3, #0
 811e648:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811e64a:	4b2f      	ldr	r3, [pc, #188]	@ (811e708 <tcp_input+0x4c0>)
 811e64c:	681b      	ldr	r3, [r3, #0]
 811e64e:	617b      	str	r3, [r7, #20]
 811e650:	e02a      	b.n	811e6a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811e652:	697b      	ldr	r3, [r7, #20]
 811e654:	7a1b      	ldrb	r3, [r3, #8]
 811e656:	2b00      	cmp	r3, #0
 811e658:	d00c      	beq.n	811e674 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811e65a:	697b      	ldr	r3, [r7, #20]
 811e65c:	7a1a      	ldrb	r2, [r3, #8]
 811e65e:	4b22      	ldr	r3, [pc, #136]	@ (811e6e8 <tcp_input+0x4a0>)
 811e660:	685b      	ldr	r3, [r3, #4]
 811e662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811e666:	3301      	adds	r3, #1
 811e668:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811e66a:	429a      	cmp	r2, r3
 811e66c:	d002      	beq.n	811e674 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 811e66e:	697b      	ldr	r3, [r7, #20]
 811e670:	61bb      	str	r3, [r7, #24]
        continue;
 811e672:	e016      	b.n	811e6a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 811e674:	697b      	ldr	r3, [r7, #20]
 811e676:	8ada      	ldrh	r2, [r3, #22]
 811e678:	4b1a      	ldr	r3, [pc, #104]	@ (811e6e4 <tcp_input+0x49c>)
 811e67a:	681b      	ldr	r3, [r3, #0]
 811e67c:	885b      	ldrh	r3, [r3, #2]
 811e67e:	b29b      	uxth	r3, r3
 811e680:	429a      	cmp	r2, r3
 811e682:	d10c      	bne.n	811e69e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 811e684:	697b      	ldr	r3, [r7, #20]
 811e686:	681a      	ldr	r2, [r3, #0]
 811e688:	4b17      	ldr	r3, [pc, #92]	@ (811e6e8 <tcp_input+0x4a0>)
 811e68a:	695b      	ldr	r3, [r3, #20]
 811e68c:	429a      	cmp	r2, r3
 811e68e:	d00f      	beq.n	811e6b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 811e690:	697b      	ldr	r3, [r7, #20]
 811e692:	2b00      	cmp	r3, #0
 811e694:	d00d      	beq.n	811e6b2 <tcp_input+0x46a>
 811e696:	697b      	ldr	r3, [r7, #20]
 811e698:	681b      	ldr	r3, [r3, #0]
 811e69a:	2b00      	cmp	r3, #0
 811e69c:	d009      	beq.n	811e6b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 811e69e:	697b      	ldr	r3, [r7, #20]
 811e6a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811e6a2:	697b      	ldr	r3, [r7, #20]
 811e6a4:	68db      	ldr	r3, [r3, #12]
 811e6a6:	617b      	str	r3, [r7, #20]
 811e6a8:	697b      	ldr	r3, [r7, #20]
 811e6aa:	2b00      	cmp	r3, #0
 811e6ac:	d1d1      	bne.n	811e652 <tcp_input+0x40a>
 811e6ae:	e000      	b.n	811e6b2 <tcp_input+0x46a>
            break;
 811e6b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 811e6b2:	697b      	ldr	r3, [r7, #20]
 811e6b4:	2b00      	cmp	r3, #0
 811e6b6:	d029      	beq.n	811e70c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 811e6b8:	69bb      	ldr	r3, [r7, #24]
 811e6ba:	2b00      	cmp	r3, #0
 811e6bc:	d00a      	beq.n	811e6d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 811e6be:	697b      	ldr	r3, [r7, #20]
 811e6c0:	68da      	ldr	r2, [r3, #12]
 811e6c2:	69bb      	ldr	r3, [r7, #24]
 811e6c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 811e6c6:	4b10      	ldr	r3, [pc, #64]	@ (811e708 <tcp_input+0x4c0>)
 811e6c8:	681a      	ldr	r2, [r3, #0]
 811e6ca:	697b      	ldr	r3, [r7, #20]
 811e6cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 811e6ce:	4a0e      	ldr	r2, [pc, #56]	@ (811e708 <tcp_input+0x4c0>)
 811e6d0:	697b      	ldr	r3, [r7, #20]
 811e6d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 811e6d4:	6978      	ldr	r0, [r7, #20]
 811e6d6:	f000 fa03 	bl	811eae0 <tcp_listen_input>
      }
      pbuf_free(p);
 811e6da:	6878      	ldr	r0, [r7, #4]
 811e6dc:	f7fd fc16 	bl	811bf0c <pbuf_free>
      return;
 811e6e0:	e1a8      	b.n	811ea34 <tcp_input+0x7ec>
 811e6e2:	bf00      	nop
 811e6e4:	1000e4c0 	.word	0x1000e4c0
 811e6e8:	1000b300 	.word	0x1000b300
 811e6ec:	081271d4 	.word	0x081271d4
 811e6f0:	08127340 	.word	0x08127340
 811e6f4:	08127260 	.word	0x08127260
 811e6f8:	1000e4a4 	.word	0x1000e4a4
 811e6fc:	0812736c 	.word	0x0812736c
 811e700:	1000e4a8 	.word	0x1000e4a8
 811e704:	08127398 	.word	0x08127398
 811e708:	1000e4a0 	.word	0x1000e4a0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 811e70c:	69fb      	ldr	r3, [r7, #28]
 811e70e:	2b00      	cmp	r3, #0
 811e710:	f000 8158 	beq.w	811e9c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 811e714:	4b95      	ldr	r3, [pc, #596]	@ (811e96c <tcp_input+0x724>)
 811e716:	2200      	movs	r2, #0
 811e718:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 811e71a:	687b      	ldr	r3, [r7, #4]
 811e71c:	891a      	ldrh	r2, [r3, #8]
 811e71e:	4b93      	ldr	r3, [pc, #588]	@ (811e96c <tcp_input+0x724>)
 811e720:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 811e722:	4a92      	ldr	r2, [pc, #584]	@ (811e96c <tcp_input+0x724>)
 811e724:	687b      	ldr	r3, [r7, #4]
 811e726:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 811e728:	4b91      	ldr	r3, [pc, #580]	@ (811e970 <tcp_input+0x728>)
 811e72a:	681b      	ldr	r3, [r3, #0]
 811e72c:	4a8f      	ldr	r2, [pc, #572]	@ (811e96c <tcp_input+0x724>)
 811e72e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 811e730:	4b90      	ldr	r3, [pc, #576]	@ (811e974 <tcp_input+0x72c>)
 811e732:	2200      	movs	r2, #0
 811e734:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 811e736:	4b90      	ldr	r3, [pc, #576]	@ (811e978 <tcp_input+0x730>)
 811e738:	2200      	movs	r2, #0
 811e73a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 811e73c:	4b8f      	ldr	r3, [pc, #572]	@ (811e97c <tcp_input+0x734>)
 811e73e:	2200      	movs	r2, #0
 811e740:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 811e742:	4b8f      	ldr	r3, [pc, #572]	@ (811e980 <tcp_input+0x738>)
 811e744:	781b      	ldrb	r3, [r3, #0]
 811e746:	f003 0308 	and.w	r3, r3, #8
 811e74a:	2b00      	cmp	r3, #0
 811e74c:	d006      	beq.n	811e75c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 811e74e:	687b      	ldr	r3, [r7, #4]
 811e750:	7b5b      	ldrb	r3, [r3, #13]
 811e752:	f043 0301 	orr.w	r3, r3, #1
 811e756:	b2da      	uxtb	r2, r3
 811e758:	687b      	ldr	r3, [r7, #4]
 811e75a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 811e75c:	69fb      	ldr	r3, [r7, #28]
 811e75e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811e760:	2b00      	cmp	r3, #0
 811e762:	d017      	beq.n	811e794 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811e764:	69f8      	ldr	r0, [r7, #28]
 811e766:	f7ff f8c1 	bl	811d8ec <tcp_process_refused_data>
 811e76a:	4603      	mov	r3, r0
 811e76c:	f113 0f0d 	cmn.w	r3, #13
 811e770:	d007      	beq.n	811e782 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811e772:	69fb      	ldr	r3, [r7, #28]
 811e774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811e776:	2b00      	cmp	r3, #0
 811e778:	d00c      	beq.n	811e794 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811e77a:	4b82      	ldr	r3, [pc, #520]	@ (811e984 <tcp_input+0x73c>)
 811e77c:	881b      	ldrh	r3, [r3, #0]
 811e77e:	2b00      	cmp	r3, #0
 811e780:	d008      	beq.n	811e794 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 811e782:	69fb      	ldr	r3, [r7, #28]
 811e784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811e786:	2b00      	cmp	r3, #0
 811e788:	f040 80e3 	bne.w	811e952 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 811e78c:	69f8      	ldr	r0, [r7, #28]
 811e78e:	f003 fdff 	bl	8122390 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 811e792:	e0de      	b.n	811e952 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 811e794:	4a7c      	ldr	r2, [pc, #496]	@ (811e988 <tcp_input+0x740>)
 811e796:	69fb      	ldr	r3, [r7, #28]
 811e798:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 811e79a:	69f8      	ldr	r0, [r7, #28]
 811e79c:	f000 fb18 	bl	811edd0 <tcp_process>
 811e7a0:	4603      	mov	r3, r0
 811e7a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 811e7a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811e7a8:	f113 0f0d 	cmn.w	r3, #13
 811e7ac:	f000 80d3 	beq.w	811e956 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 811e7b0:	4b71      	ldr	r3, [pc, #452]	@ (811e978 <tcp_input+0x730>)
 811e7b2:	781b      	ldrb	r3, [r3, #0]
 811e7b4:	f003 0308 	and.w	r3, r3, #8
 811e7b8:	2b00      	cmp	r3, #0
 811e7ba:	d015      	beq.n	811e7e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 811e7bc:	69fb      	ldr	r3, [r7, #28]
 811e7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811e7c2:	2b00      	cmp	r3, #0
 811e7c4:	d008      	beq.n	811e7d8 <tcp_input+0x590>
 811e7c6:	69fb      	ldr	r3, [r7, #28]
 811e7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811e7cc:	69fa      	ldr	r2, [r7, #28]
 811e7ce:	6912      	ldr	r2, [r2, #16]
 811e7d0:	f06f 010d 	mvn.w	r1, #13
 811e7d4:	4610      	mov	r0, r2
 811e7d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811e7d8:	69f9      	ldr	r1, [r7, #28]
 811e7da:	486c      	ldr	r0, [pc, #432]	@ (811e98c <tcp_input+0x744>)
 811e7dc:	f7ff fbbc 	bl	811df58 <tcp_pcb_remove>
        tcp_free(pcb);
 811e7e0:	69f8      	ldr	r0, [r7, #28]
 811e7e2:	f7fd ff41 	bl	811c668 <tcp_free>
 811e7e6:	e0da      	b.n	811e99e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 811e7e8:	2300      	movs	r3, #0
 811e7ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 811e7ec:	4b63      	ldr	r3, [pc, #396]	@ (811e97c <tcp_input+0x734>)
 811e7ee:	881b      	ldrh	r3, [r3, #0]
 811e7f0:	2b00      	cmp	r3, #0
 811e7f2:	d01d      	beq.n	811e830 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 811e7f4:	4b61      	ldr	r3, [pc, #388]	@ (811e97c <tcp_input+0x734>)
 811e7f6:	881b      	ldrh	r3, [r3, #0]
 811e7f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 811e7fa:	69fb      	ldr	r3, [r7, #28]
 811e7fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811e800:	2b00      	cmp	r3, #0
 811e802:	d00a      	beq.n	811e81a <tcp_input+0x5d2>
 811e804:	69fb      	ldr	r3, [r7, #28]
 811e806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811e80a:	69fa      	ldr	r2, [r7, #28]
 811e80c:	6910      	ldr	r0, [r2, #16]
 811e80e:	89fa      	ldrh	r2, [r7, #14]
 811e810:	69f9      	ldr	r1, [r7, #28]
 811e812:	4798      	blx	r3
 811e814:	4603      	mov	r3, r0
 811e816:	74fb      	strb	r3, [r7, #19]
 811e818:	e001      	b.n	811e81e <tcp_input+0x5d6>
 811e81a:	2300      	movs	r3, #0
 811e81c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811e81e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811e822:	f113 0f0d 	cmn.w	r3, #13
 811e826:	f000 8098 	beq.w	811e95a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 811e82a:	4b54      	ldr	r3, [pc, #336]	@ (811e97c <tcp_input+0x734>)
 811e82c:	2200      	movs	r2, #0
 811e82e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 811e830:	69f8      	ldr	r0, [r7, #28]
 811e832:	f000 f915 	bl	811ea60 <tcp_input_delayed_close>
 811e836:	4603      	mov	r3, r0
 811e838:	2b00      	cmp	r3, #0
 811e83a:	f040 8090 	bne.w	811e95e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 811e83e:	4b4d      	ldr	r3, [pc, #308]	@ (811e974 <tcp_input+0x72c>)
 811e840:	681b      	ldr	r3, [r3, #0]
 811e842:	2b00      	cmp	r3, #0
 811e844:	d041      	beq.n	811e8ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 811e846:	69fb      	ldr	r3, [r7, #28]
 811e848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811e84a:	2b00      	cmp	r3, #0
 811e84c:	d006      	beq.n	811e85c <tcp_input+0x614>
 811e84e:	4b50      	ldr	r3, [pc, #320]	@ (811e990 <tcp_input+0x748>)
 811e850:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811e854:	494f      	ldr	r1, [pc, #316]	@ (811e994 <tcp_input+0x74c>)
 811e856:	4850      	ldr	r0, [pc, #320]	@ (811e998 <tcp_input+0x750>)
 811e858:	f005 ff00 	bl	812465c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 811e85c:	69fb      	ldr	r3, [r7, #28]
 811e85e:	8b5b      	ldrh	r3, [r3, #26]
 811e860:	f003 0310 	and.w	r3, r3, #16
 811e864:	2b00      	cmp	r3, #0
 811e866:	d008      	beq.n	811e87a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 811e868:	4b42      	ldr	r3, [pc, #264]	@ (811e974 <tcp_input+0x72c>)
 811e86a:	681b      	ldr	r3, [r3, #0]
 811e86c:	4618      	mov	r0, r3
 811e86e:	f7fd fb4d 	bl	811bf0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 811e872:	69f8      	ldr	r0, [r7, #28]
 811e874:	f7fe f9e0 	bl	811cc38 <tcp_abort>
            goto aborted;
 811e878:	e091      	b.n	811e99e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 811e87a:	69fb      	ldr	r3, [r7, #28]
 811e87c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811e880:	2b00      	cmp	r3, #0
 811e882:	d00c      	beq.n	811e89e <tcp_input+0x656>
 811e884:	69fb      	ldr	r3, [r7, #28]
 811e886:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811e88a:	69fb      	ldr	r3, [r7, #28]
 811e88c:	6918      	ldr	r0, [r3, #16]
 811e88e:	4b39      	ldr	r3, [pc, #228]	@ (811e974 <tcp_input+0x72c>)
 811e890:	681a      	ldr	r2, [r3, #0]
 811e892:	2300      	movs	r3, #0
 811e894:	69f9      	ldr	r1, [r7, #28]
 811e896:	47a0      	blx	r4
 811e898:	4603      	mov	r3, r0
 811e89a:	74fb      	strb	r3, [r7, #19]
 811e89c:	e008      	b.n	811e8b0 <tcp_input+0x668>
 811e89e:	4b35      	ldr	r3, [pc, #212]	@ (811e974 <tcp_input+0x72c>)
 811e8a0:	681a      	ldr	r2, [r3, #0]
 811e8a2:	2300      	movs	r3, #0
 811e8a4:	69f9      	ldr	r1, [r7, #28]
 811e8a6:	2000      	movs	r0, #0
 811e8a8:	f7ff f8f6 	bl	811da98 <tcp_recv_null>
 811e8ac:	4603      	mov	r3, r0
 811e8ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 811e8b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811e8b4:	f113 0f0d 	cmn.w	r3, #13
 811e8b8:	d053      	beq.n	811e962 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 811e8ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811e8be:	2b00      	cmp	r3, #0
 811e8c0:	d003      	beq.n	811e8ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 811e8c2:	4b2c      	ldr	r3, [pc, #176]	@ (811e974 <tcp_input+0x72c>)
 811e8c4:	681a      	ldr	r2, [r3, #0]
 811e8c6:	69fb      	ldr	r3, [r7, #28]
 811e8c8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 811e8ca:	4b2b      	ldr	r3, [pc, #172]	@ (811e978 <tcp_input+0x730>)
 811e8cc:	781b      	ldrb	r3, [r3, #0]
 811e8ce:	f003 0320 	and.w	r3, r3, #32
 811e8d2:	2b00      	cmp	r3, #0
 811e8d4:	d030      	beq.n	811e938 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 811e8d6:	69fb      	ldr	r3, [r7, #28]
 811e8d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811e8da:	2b00      	cmp	r3, #0
 811e8dc:	d009      	beq.n	811e8f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 811e8de:	69fb      	ldr	r3, [r7, #28]
 811e8e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811e8e2:	7b5a      	ldrb	r2, [r3, #13]
 811e8e4:	69fb      	ldr	r3, [r7, #28]
 811e8e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811e8e8:	f042 0220 	orr.w	r2, r2, #32
 811e8ec:	b2d2      	uxtb	r2, r2
 811e8ee:	735a      	strb	r2, [r3, #13]
 811e8f0:	e022      	b.n	811e938 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811e8f2:	69fb      	ldr	r3, [r7, #28]
 811e8f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811e8f6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811e8fa:	d005      	beq.n	811e908 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 811e8fc:	69fb      	ldr	r3, [r7, #28]
 811e8fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811e900:	3301      	adds	r3, #1
 811e902:	b29a      	uxth	r2, r3
 811e904:	69fb      	ldr	r3, [r7, #28]
 811e906:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 811e908:	69fb      	ldr	r3, [r7, #28]
 811e90a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811e90e:	2b00      	cmp	r3, #0
 811e910:	d00b      	beq.n	811e92a <tcp_input+0x6e2>
 811e912:	69fb      	ldr	r3, [r7, #28]
 811e914:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811e918:	69fb      	ldr	r3, [r7, #28]
 811e91a:	6918      	ldr	r0, [r3, #16]
 811e91c:	2300      	movs	r3, #0
 811e91e:	2200      	movs	r2, #0
 811e920:	69f9      	ldr	r1, [r7, #28]
 811e922:	47a0      	blx	r4
 811e924:	4603      	mov	r3, r0
 811e926:	74fb      	strb	r3, [r7, #19]
 811e928:	e001      	b.n	811e92e <tcp_input+0x6e6>
 811e92a:	2300      	movs	r3, #0
 811e92c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811e92e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811e932:	f113 0f0d 	cmn.w	r3, #13
 811e936:	d016      	beq.n	811e966 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 811e938:	4b13      	ldr	r3, [pc, #76]	@ (811e988 <tcp_input+0x740>)
 811e93a:	2200      	movs	r2, #0
 811e93c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 811e93e:	69f8      	ldr	r0, [r7, #28]
 811e940:	f000 f88e 	bl	811ea60 <tcp_input_delayed_close>
 811e944:	4603      	mov	r3, r0
 811e946:	2b00      	cmp	r3, #0
 811e948:	d128      	bne.n	811e99c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 811e94a:	69f8      	ldr	r0, [r7, #28]
 811e94c:	f002 ff1a 	bl	8121784 <tcp_output>
 811e950:	e025      	b.n	811e99e <tcp_input+0x756>
        goto aborted;
 811e952:	bf00      	nop
 811e954:	e023      	b.n	811e99e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 811e956:	bf00      	nop
 811e958:	e021      	b.n	811e99e <tcp_input+0x756>
              goto aborted;
 811e95a:	bf00      	nop
 811e95c:	e01f      	b.n	811e99e <tcp_input+0x756>
          goto aborted;
 811e95e:	bf00      	nop
 811e960:	e01d      	b.n	811e99e <tcp_input+0x756>
            goto aborted;
 811e962:	bf00      	nop
 811e964:	e01b      	b.n	811e99e <tcp_input+0x756>
              goto aborted;
 811e966:	bf00      	nop
 811e968:	e019      	b.n	811e99e <tcp_input+0x756>
 811e96a:	bf00      	nop
 811e96c:	1000e4b0 	.word	0x1000e4b0
 811e970:	1000e4c0 	.word	0x1000e4c0
 811e974:	1000e4e0 	.word	0x1000e4e0
 811e978:	1000e4dd 	.word	0x1000e4dd
 811e97c:	1000e4d8 	.word	0x1000e4d8
 811e980:	1000e4dc 	.word	0x1000e4dc
 811e984:	1000e4da 	.word	0x1000e4da
 811e988:	1000e4e4 	.word	0x1000e4e4
 811e98c:	1000e4a4 	.word	0x1000e4a4
 811e990:	081271d4 	.word	0x081271d4
 811e994:	081273c8 	.word	0x081273c8
 811e998:	08127260 	.word	0x08127260
          goto aborted;
 811e99c:	bf00      	nop
    tcp_input_pcb = NULL;
 811e99e:	4b27      	ldr	r3, [pc, #156]	@ (811ea3c <tcp_input+0x7f4>)
 811e9a0:	2200      	movs	r2, #0
 811e9a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 811e9a4:	4b26      	ldr	r3, [pc, #152]	@ (811ea40 <tcp_input+0x7f8>)
 811e9a6:	2200      	movs	r2, #0
 811e9a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 811e9aa:	4b26      	ldr	r3, [pc, #152]	@ (811ea44 <tcp_input+0x7fc>)
 811e9ac:	685b      	ldr	r3, [r3, #4]
 811e9ae:	2b00      	cmp	r3, #0
 811e9b0:	d03f      	beq.n	811ea32 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 811e9b2:	4b24      	ldr	r3, [pc, #144]	@ (811ea44 <tcp_input+0x7fc>)
 811e9b4:	685b      	ldr	r3, [r3, #4]
 811e9b6:	4618      	mov	r0, r3
 811e9b8:	f7fd faa8 	bl	811bf0c <pbuf_free>
      inseg.p = NULL;
 811e9bc:	4b21      	ldr	r3, [pc, #132]	@ (811ea44 <tcp_input+0x7fc>)
 811e9be:	2200      	movs	r2, #0
 811e9c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 811e9c2:	e036      	b.n	811ea32 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 811e9c4:	4b20      	ldr	r3, [pc, #128]	@ (811ea48 <tcp_input+0x800>)
 811e9c6:	681b      	ldr	r3, [r3, #0]
 811e9c8:	899b      	ldrh	r3, [r3, #12]
 811e9ca:	b29b      	uxth	r3, r3
 811e9cc:	4618      	mov	r0, r3
 811e9ce:	f7f9 f895 	bl	8117afc <lwip_htons>
 811e9d2:	4603      	mov	r3, r0
 811e9d4:	b2db      	uxtb	r3, r3
 811e9d6:	f003 0304 	and.w	r3, r3, #4
 811e9da:	2b00      	cmp	r3, #0
 811e9dc:	d118      	bne.n	811ea10 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e9de:	4b1b      	ldr	r3, [pc, #108]	@ (811ea4c <tcp_input+0x804>)
 811e9e0:	6819      	ldr	r1, [r3, #0]
 811e9e2:	4b1b      	ldr	r3, [pc, #108]	@ (811ea50 <tcp_input+0x808>)
 811e9e4:	881b      	ldrh	r3, [r3, #0]
 811e9e6:	461a      	mov	r2, r3
 811e9e8:	4b1a      	ldr	r3, [pc, #104]	@ (811ea54 <tcp_input+0x80c>)
 811e9ea:	681b      	ldr	r3, [r3, #0]
 811e9ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e9ee:	4b16      	ldr	r3, [pc, #88]	@ (811ea48 <tcp_input+0x800>)
 811e9f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e9f2:	885b      	ldrh	r3, [r3, #2]
 811e9f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811e9f6:	4a14      	ldr	r2, [pc, #80]	@ (811ea48 <tcp_input+0x800>)
 811e9f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811e9fa:	8812      	ldrh	r2, [r2, #0]
 811e9fc:	b292      	uxth	r2, r2
 811e9fe:	9202      	str	r2, [sp, #8]
 811ea00:	9301      	str	r3, [sp, #4]
 811ea02:	4b15      	ldr	r3, [pc, #84]	@ (811ea58 <tcp_input+0x810>)
 811ea04:	9300      	str	r3, [sp, #0]
 811ea06:	4b15      	ldr	r3, [pc, #84]	@ (811ea5c <tcp_input+0x814>)
 811ea08:	4602      	mov	r2, r0
 811ea0a:	2000      	movs	r0, #0
 811ea0c:	f003 fc6e 	bl	81222ec <tcp_rst>
    pbuf_free(p);
 811ea10:	6878      	ldr	r0, [r7, #4]
 811ea12:	f7fd fa7b 	bl	811bf0c <pbuf_free>
  return;
 811ea16:	e00c      	b.n	811ea32 <tcp_input+0x7ea>
    goto dropped;
 811ea18:	bf00      	nop
 811ea1a:	e006      	b.n	811ea2a <tcp_input+0x7e2>
    goto dropped;
 811ea1c:	bf00      	nop
 811ea1e:	e004      	b.n	811ea2a <tcp_input+0x7e2>
    goto dropped;
 811ea20:	bf00      	nop
 811ea22:	e002      	b.n	811ea2a <tcp_input+0x7e2>
      goto dropped;
 811ea24:	bf00      	nop
 811ea26:	e000      	b.n	811ea2a <tcp_input+0x7e2>
      goto dropped;
 811ea28:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 811ea2a:	6878      	ldr	r0, [r7, #4]
 811ea2c:	f7fd fa6e 	bl	811bf0c <pbuf_free>
 811ea30:	e000      	b.n	811ea34 <tcp_input+0x7ec>
  return;
 811ea32:	bf00      	nop
}
 811ea34:	3724      	adds	r7, #36	@ 0x24
 811ea36:	46bd      	mov	sp, r7
 811ea38:	bd90      	pop	{r4, r7, pc}
 811ea3a:	bf00      	nop
 811ea3c:	1000e4e4 	.word	0x1000e4e4
 811ea40:	1000e4e0 	.word	0x1000e4e0
 811ea44:	1000e4b0 	.word	0x1000e4b0
 811ea48:	1000e4c0 	.word	0x1000e4c0
 811ea4c:	1000e4d4 	.word	0x1000e4d4
 811ea50:	1000e4da 	.word	0x1000e4da
 811ea54:	1000e4d0 	.word	0x1000e4d0
 811ea58:	1000b310 	.word	0x1000b310
 811ea5c:	1000b314 	.word	0x1000b314

0811ea60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 811ea60:	b580      	push	{r7, lr}
 811ea62:	b082      	sub	sp, #8
 811ea64:	af00      	add	r7, sp, #0
 811ea66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 811ea68:	687b      	ldr	r3, [r7, #4]
 811ea6a:	2b00      	cmp	r3, #0
 811ea6c:	d106      	bne.n	811ea7c <tcp_input_delayed_close+0x1c>
 811ea6e:	4b17      	ldr	r3, [pc, #92]	@ (811eacc <tcp_input_delayed_close+0x6c>)
 811ea70:	f240 225a 	movw	r2, #602	@ 0x25a
 811ea74:	4916      	ldr	r1, [pc, #88]	@ (811ead0 <tcp_input_delayed_close+0x70>)
 811ea76:	4817      	ldr	r0, [pc, #92]	@ (811ead4 <tcp_input_delayed_close+0x74>)
 811ea78:	f005 fdf0 	bl	812465c <iprintf>

  if (recv_flags & TF_CLOSED) {
 811ea7c:	4b16      	ldr	r3, [pc, #88]	@ (811ead8 <tcp_input_delayed_close+0x78>)
 811ea7e:	781b      	ldrb	r3, [r3, #0]
 811ea80:	f003 0310 	and.w	r3, r3, #16
 811ea84:	2b00      	cmp	r3, #0
 811ea86:	d01c      	beq.n	811eac2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 811ea88:	687b      	ldr	r3, [r7, #4]
 811ea8a:	8b5b      	ldrh	r3, [r3, #26]
 811ea8c:	f003 0310 	and.w	r3, r3, #16
 811ea90:	2b00      	cmp	r3, #0
 811ea92:	d10d      	bne.n	811eab0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 811ea94:	687b      	ldr	r3, [r7, #4]
 811ea96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811ea9a:	2b00      	cmp	r3, #0
 811ea9c:	d008      	beq.n	811eab0 <tcp_input_delayed_close+0x50>
 811ea9e:	687b      	ldr	r3, [r7, #4]
 811eaa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811eaa4:	687a      	ldr	r2, [r7, #4]
 811eaa6:	6912      	ldr	r2, [r2, #16]
 811eaa8:	f06f 010e 	mvn.w	r1, #14
 811eaac:	4610      	mov	r0, r2
 811eaae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811eab0:	6879      	ldr	r1, [r7, #4]
 811eab2:	480a      	ldr	r0, [pc, #40]	@ (811eadc <tcp_input_delayed_close+0x7c>)
 811eab4:	f7ff fa50 	bl	811df58 <tcp_pcb_remove>
    tcp_free(pcb);
 811eab8:	6878      	ldr	r0, [r7, #4]
 811eaba:	f7fd fdd5 	bl	811c668 <tcp_free>
    return 1;
 811eabe:	2301      	movs	r3, #1
 811eac0:	e000      	b.n	811eac4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 811eac2:	2300      	movs	r3, #0
}
 811eac4:	4618      	mov	r0, r3
 811eac6:	3708      	adds	r7, #8
 811eac8:	46bd      	mov	sp, r7
 811eaca:	bd80      	pop	{r7, pc}
 811eacc:	081271d4 	.word	0x081271d4
 811ead0:	081273e4 	.word	0x081273e4
 811ead4:	08127260 	.word	0x08127260
 811ead8:	1000e4dd 	.word	0x1000e4dd
 811eadc:	1000e4a4 	.word	0x1000e4a4

0811eae0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 811eae0:	b590      	push	{r4, r7, lr}
 811eae2:	b08b      	sub	sp, #44	@ 0x2c
 811eae4:	af04      	add	r7, sp, #16
 811eae6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 811eae8:	4b6f      	ldr	r3, [pc, #444]	@ (811eca8 <tcp_listen_input+0x1c8>)
 811eaea:	781b      	ldrb	r3, [r3, #0]
 811eaec:	f003 0304 	and.w	r3, r3, #4
 811eaf0:	2b00      	cmp	r3, #0
 811eaf2:	f040 80d2 	bne.w	811ec9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 811eaf6:	687b      	ldr	r3, [r7, #4]
 811eaf8:	2b00      	cmp	r3, #0
 811eafa:	d106      	bne.n	811eb0a <tcp_listen_input+0x2a>
 811eafc:	4b6b      	ldr	r3, [pc, #428]	@ (811ecac <tcp_listen_input+0x1cc>)
 811eafe:	f240 2281 	movw	r2, #641	@ 0x281
 811eb02:	496b      	ldr	r1, [pc, #428]	@ (811ecb0 <tcp_listen_input+0x1d0>)
 811eb04:	486b      	ldr	r0, [pc, #428]	@ (811ecb4 <tcp_listen_input+0x1d4>)
 811eb06:	f005 fda9 	bl	812465c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 811eb0a:	4b67      	ldr	r3, [pc, #412]	@ (811eca8 <tcp_listen_input+0x1c8>)
 811eb0c:	781b      	ldrb	r3, [r3, #0]
 811eb0e:	f003 0310 	and.w	r3, r3, #16
 811eb12:	2b00      	cmp	r3, #0
 811eb14:	d019      	beq.n	811eb4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811eb16:	4b68      	ldr	r3, [pc, #416]	@ (811ecb8 <tcp_listen_input+0x1d8>)
 811eb18:	6819      	ldr	r1, [r3, #0]
 811eb1a:	4b68      	ldr	r3, [pc, #416]	@ (811ecbc <tcp_listen_input+0x1dc>)
 811eb1c:	881b      	ldrh	r3, [r3, #0]
 811eb1e:	461a      	mov	r2, r3
 811eb20:	4b67      	ldr	r3, [pc, #412]	@ (811ecc0 <tcp_listen_input+0x1e0>)
 811eb22:	681b      	ldr	r3, [r3, #0]
 811eb24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811eb26:	4b67      	ldr	r3, [pc, #412]	@ (811ecc4 <tcp_listen_input+0x1e4>)
 811eb28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811eb2a:	885b      	ldrh	r3, [r3, #2]
 811eb2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811eb2e:	4a65      	ldr	r2, [pc, #404]	@ (811ecc4 <tcp_listen_input+0x1e4>)
 811eb30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811eb32:	8812      	ldrh	r2, [r2, #0]
 811eb34:	b292      	uxth	r2, r2
 811eb36:	9202      	str	r2, [sp, #8]
 811eb38:	9301      	str	r3, [sp, #4]
 811eb3a:	4b63      	ldr	r3, [pc, #396]	@ (811ecc8 <tcp_listen_input+0x1e8>)
 811eb3c:	9300      	str	r3, [sp, #0]
 811eb3e:	4b63      	ldr	r3, [pc, #396]	@ (811eccc <tcp_listen_input+0x1ec>)
 811eb40:	4602      	mov	r2, r0
 811eb42:	6878      	ldr	r0, [r7, #4]
 811eb44:	f003 fbd2 	bl	81222ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 811eb48:	e0a9      	b.n	811ec9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 811eb4a:	4b57      	ldr	r3, [pc, #348]	@ (811eca8 <tcp_listen_input+0x1c8>)
 811eb4c:	781b      	ldrb	r3, [r3, #0]
 811eb4e:	f003 0302 	and.w	r3, r3, #2
 811eb52:	2b00      	cmp	r3, #0
 811eb54:	f000 80a3 	beq.w	811ec9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 811eb58:	687b      	ldr	r3, [r7, #4]
 811eb5a:	7d5b      	ldrb	r3, [r3, #21]
 811eb5c:	4618      	mov	r0, r3
 811eb5e:	f7ff f8bf 	bl	811dce0 <tcp_alloc>
 811eb62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 811eb64:	697b      	ldr	r3, [r7, #20]
 811eb66:	2b00      	cmp	r3, #0
 811eb68:	d111      	bne.n	811eb8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811eb6a:	687b      	ldr	r3, [r7, #4]
 811eb6c:	699b      	ldr	r3, [r3, #24]
 811eb6e:	2b00      	cmp	r3, #0
 811eb70:	d00a      	beq.n	811eb88 <tcp_listen_input+0xa8>
 811eb72:	687b      	ldr	r3, [r7, #4]
 811eb74:	699b      	ldr	r3, [r3, #24]
 811eb76:	687a      	ldr	r2, [r7, #4]
 811eb78:	6910      	ldr	r0, [r2, #16]
 811eb7a:	f04f 32ff 	mov.w	r2, #4294967295
 811eb7e:	2100      	movs	r1, #0
 811eb80:	4798      	blx	r3
 811eb82:	4603      	mov	r3, r0
 811eb84:	73bb      	strb	r3, [r7, #14]
      return;
 811eb86:	e08b      	b.n	811eca0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811eb88:	23f0      	movs	r3, #240	@ 0xf0
 811eb8a:	73bb      	strb	r3, [r7, #14]
      return;
 811eb8c:	e088      	b.n	811eca0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 811eb8e:	4b50      	ldr	r3, [pc, #320]	@ (811ecd0 <tcp_listen_input+0x1f0>)
 811eb90:	695a      	ldr	r2, [r3, #20]
 811eb92:	697b      	ldr	r3, [r7, #20]
 811eb94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 811eb96:	4b4e      	ldr	r3, [pc, #312]	@ (811ecd0 <tcp_listen_input+0x1f0>)
 811eb98:	691a      	ldr	r2, [r3, #16]
 811eb9a:	697b      	ldr	r3, [r7, #20]
 811eb9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 811eb9e:	687b      	ldr	r3, [r7, #4]
 811eba0:	8ada      	ldrh	r2, [r3, #22]
 811eba2:	697b      	ldr	r3, [r7, #20]
 811eba4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 811eba6:	4b47      	ldr	r3, [pc, #284]	@ (811ecc4 <tcp_listen_input+0x1e4>)
 811eba8:	681b      	ldr	r3, [r3, #0]
 811ebaa:	881b      	ldrh	r3, [r3, #0]
 811ebac:	b29a      	uxth	r2, r3
 811ebae:	697b      	ldr	r3, [r7, #20]
 811ebb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 811ebb2:	697b      	ldr	r3, [r7, #20]
 811ebb4:	2203      	movs	r2, #3
 811ebb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 811ebb8:	4b41      	ldr	r3, [pc, #260]	@ (811ecc0 <tcp_listen_input+0x1e0>)
 811ebba:	681b      	ldr	r3, [r3, #0]
 811ebbc:	1c5a      	adds	r2, r3, #1
 811ebbe:	697b      	ldr	r3, [r7, #20]
 811ebc0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 811ebc2:	697b      	ldr	r3, [r7, #20]
 811ebc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811ebc6:	697b      	ldr	r3, [r7, #20]
 811ebc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 811ebca:	6978      	ldr	r0, [r7, #20]
 811ebcc:	f7ff fa58 	bl	811e080 <tcp_next_iss>
 811ebd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 811ebd2:	697b      	ldr	r3, [r7, #20]
 811ebd4:	693a      	ldr	r2, [r7, #16]
 811ebd6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 811ebd8:	697b      	ldr	r3, [r7, #20]
 811ebda:	693a      	ldr	r2, [r7, #16]
 811ebdc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 811ebde:	697b      	ldr	r3, [r7, #20]
 811ebe0:	693a      	ldr	r2, [r7, #16]
 811ebe2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 811ebe4:	697b      	ldr	r3, [r7, #20]
 811ebe6:	693a      	ldr	r2, [r7, #16]
 811ebe8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 811ebea:	4b35      	ldr	r3, [pc, #212]	@ (811ecc0 <tcp_listen_input+0x1e0>)
 811ebec:	681b      	ldr	r3, [r3, #0]
 811ebee:	1e5a      	subs	r2, r3, #1
 811ebf0:	697b      	ldr	r3, [r7, #20]
 811ebf2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 811ebf4:	687b      	ldr	r3, [r7, #4]
 811ebf6:	691a      	ldr	r2, [r3, #16]
 811ebf8:	697b      	ldr	r3, [r7, #20]
 811ebfa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 811ebfc:	697b      	ldr	r3, [r7, #20]
 811ebfe:	687a      	ldr	r2, [r7, #4]
 811ec00:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 811ec02:	687b      	ldr	r3, [r7, #4]
 811ec04:	7a5b      	ldrb	r3, [r3, #9]
 811ec06:	f003 030c 	and.w	r3, r3, #12
 811ec0a:	b2da      	uxtb	r2, r3
 811ec0c:	697b      	ldr	r3, [r7, #20]
 811ec0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 811ec10:	687b      	ldr	r3, [r7, #4]
 811ec12:	7a1a      	ldrb	r2, [r3, #8]
 811ec14:	697b      	ldr	r3, [r7, #20]
 811ec16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 811ec18:	4b2e      	ldr	r3, [pc, #184]	@ (811ecd4 <tcp_listen_input+0x1f4>)
 811ec1a:	681a      	ldr	r2, [r3, #0]
 811ec1c:	697b      	ldr	r3, [r7, #20]
 811ec1e:	60da      	str	r2, [r3, #12]
 811ec20:	4a2c      	ldr	r2, [pc, #176]	@ (811ecd4 <tcp_listen_input+0x1f4>)
 811ec22:	697b      	ldr	r3, [r7, #20]
 811ec24:	6013      	str	r3, [r2, #0]
 811ec26:	f003 fe81 	bl	812292c <tcp_timer_needed>
 811ec2a:	4b2b      	ldr	r3, [pc, #172]	@ (811ecd8 <tcp_listen_input+0x1f8>)
 811ec2c:	2201      	movs	r2, #1
 811ec2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 811ec30:	6978      	ldr	r0, [r7, #20]
 811ec32:	f001 fd8b 	bl	812074c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 811ec36:	4b23      	ldr	r3, [pc, #140]	@ (811ecc4 <tcp_listen_input+0x1e4>)
 811ec38:	681b      	ldr	r3, [r3, #0]
 811ec3a:	89db      	ldrh	r3, [r3, #14]
 811ec3c:	b29a      	uxth	r2, r3
 811ec3e:	697b      	ldr	r3, [r7, #20]
 811ec40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 811ec44:	697b      	ldr	r3, [r7, #20]
 811ec46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811ec4a:	697b      	ldr	r3, [r7, #20]
 811ec4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 811ec50:	697b      	ldr	r3, [r7, #20]
 811ec52:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811ec54:	697b      	ldr	r3, [r7, #20]
 811ec56:	3304      	adds	r3, #4
 811ec58:	4618      	mov	r0, r3
 811ec5a:	f7fa faf1 	bl	8119240 <ip4_route>
 811ec5e:	4601      	mov	r1, r0
 811ec60:	697b      	ldr	r3, [r7, #20]
 811ec62:	3304      	adds	r3, #4
 811ec64:	461a      	mov	r2, r3
 811ec66:	4620      	mov	r0, r4
 811ec68:	f7ff fa30 	bl	811e0cc <tcp_eff_send_mss_netif>
 811ec6c:	4603      	mov	r3, r0
 811ec6e:	461a      	mov	r2, r3
 811ec70:	697b      	ldr	r3, [r7, #20]
 811ec72:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 811ec74:	2112      	movs	r1, #18
 811ec76:	6978      	ldr	r0, [r7, #20]
 811ec78:	f002 fc96 	bl	81215a8 <tcp_enqueue_flags>
 811ec7c:	4603      	mov	r3, r0
 811ec7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 811ec80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ec84:	2b00      	cmp	r3, #0
 811ec86:	d004      	beq.n	811ec92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 811ec88:	2100      	movs	r1, #0
 811ec8a:	6978      	ldr	r0, [r7, #20]
 811ec8c:	f7fd ff16 	bl	811cabc <tcp_abandon>
      return;
 811ec90:	e006      	b.n	811eca0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 811ec92:	6978      	ldr	r0, [r7, #20]
 811ec94:	f002 fd76 	bl	8121784 <tcp_output>
  return;
 811ec98:	e001      	b.n	811ec9e <tcp_listen_input+0x1be>
    return;
 811ec9a:	bf00      	nop
 811ec9c:	e000      	b.n	811eca0 <tcp_listen_input+0x1c0>
  return;
 811ec9e:	bf00      	nop
}
 811eca0:	371c      	adds	r7, #28
 811eca2:	46bd      	mov	sp, r7
 811eca4:	bd90      	pop	{r4, r7, pc}
 811eca6:	bf00      	nop
 811eca8:	1000e4dc 	.word	0x1000e4dc
 811ecac:	081271d4 	.word	0x081271d4
 811ecb0:	0812740c 	.word	0x0812740c
 811ecb4:	08127260 	.word	0x08127260
 811ecb8:	1000e4d4 	.word	0x1000e4d4
 811ecbc:	1000e4da 	.word	0x1000e4da
 811ecc0:	1000e4d0 	.word	0x1000e4d0
 811ecc4:	1000e4c0 	.word	0x1000e4c0
 811ecc8:	1000b310 	.word	0x1000b310
 811eccc:	1000b314 	.word	0x1000b314
 811ecd0:	1000b300 	.word	0x1000b300
 811ecd4:	1000e4a4 	.word	0x1000e4a4
 811ecd8:	1000e4ac 	.word	0x1000e4ac

0811ecdc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 811ecdc:	b580      	push	{r7, lr}
 811ecde:	b086      	sub	sp, #24
 811ece0:	af04      	add	r7, sp, #16
 811ece2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 811ece4:	4b2f      	ldr	r3, [pc, #188]	@ (811eda4 <tcp_timewait_input+0xc8>)
 811ece6:	781b      	ldrb	r3, [r3, #0]
 811ece8:	f003 0304 	and.w	r3, r3, #4
 811ecec:	2b00      	cmp	r3, #0
 811ecee:	d153      	bne.n	811ed98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 811ecf0:	687b      	ldr	r3, [r7, #4]
 811ecf2:	2b00      	cmp	r3, #0
 811ecf4:	d106      	bne.n	811ed04 <tcp_timewait_input+0x28>
 811ecf6:	4b2c      	ldr	r3, [pc, #176]	@ (811eda8 <tcp_timewait_input+0xcc>)
 811ecf8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 811ecfc:	492b      	ldr	r1, [pc, #172]	@ (811edac <tcp_timewait_input+0xd0>)
 811ecfe:	482c      	ldr	r0, [pc, #176]	@ (811edb0 <tcp_timewait_input+0xd4>)
 811ed00:	f005 fcac 	bl	812465c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 811ed04:	4b27      	ldr	r3, [pc, #156]	@ (811eda4 <tcp_timewait_input+0xc8>)
 811ed06:	781b      	ldrb	r3, [r3, #0]
 811ed08:	f003 0302 	and.w	r3, r3, #2
 811ed0c:	2b00      	cmp	r3, #0
 811ed0e:	d02a      	beq.n	811ed66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 811ed10:	4b28      	ldr	r3, [pc, #160]	@ (811edb4 <tcp_timewait_input+0xd8>)
 811ed12:	681a      	ldr	r2, [r3, #0]
 811ed14:	687b      	ldr	r3, [r7, #4]
 811ed16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ed18:	1ad3      	subs	r3, r2, r3
 811ed1a:	2b00      	cmp	r3, #0
 811ed1c:	db2d      	blt.n	811ed7a <tcp_timewait_input+0x9e>
 811ed1e:	4b25      	ldr	r3, [pc, #148]	@ (811edb4 <tcp_timewait_input+0xd8>)
 811ed20:	681a      	ldr	r2, [r3, #0]
 811ed22:	687b      	ldr	r3, [r7, #4]
 811ed24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ed26:	6879      	ldr	r1, [r7, #4]
 811ed28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811ed2a:	440b      	add	r3, r1
 811ed2c:	1ad3      	subs	r3, r2, r3
 811ed2e:	2b00      	cmp	r3, #0
 811ed30:	dc23      	bgt.n	811ed7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811ed32:	4b21      	ldr	r3, [pc, #132]	@ (811edb8 <tcp_timewait_input+0xdc>)
 811ed34:	6819      	ldr	r1, [r3, #0]
 811ed36:	4b21      	ldr	r3, [pc, #132]	@ (811edbc <tcp_timewait_input+0xe0>)
 811ed38:	881b      	ldrh	r3, [r3, #0]
 811ed3a:	461a      	mov	r2, r3
 811ed3c:	4b1d      	ldr	r3, [pc, #116]	@ (811edb4 <tcp_timewait_input+0xd8>)
 811ed3e:	681b      	ldr	r3, [r3, #0]
 811ed40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811ed42:	4b1f      	ldr	r3, [pc, #124]	@ (811edc0 <tcp_timewait_input+0xe4>)
 811ed44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811ed46:	885b      	ldrh	r3, [r3, #2]
 811ed48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811ed4a:	4a1d      	ldr	r2, [pc, #116]	@ (811edc0 <tcp_timewait_input+0xe4>)
 811ed4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811ed4e:	8812      	ldrh	r2, [r2, #0]
 811ed50:	b292      	uxth	r2, r2
 811ed52:	9202      	str	r2, [sp, #8]
 811ed54:	9301      	str	r3, [sp, #4]
 811ed56:	4b1b      	ldr	r3, [pc, #108]	@ (811edc4 <tcp_timewait_input+0xe8>)
 811ed58:	9300      	str	r3, [sp, #0]
 811ed5a:	4b1b      	ldr	r3, [pc, #108]	@ (811edc8 <tcp_timewait_input+0xec>)
 811ed5c:	4602      	mov	r2, r0
 811ed5e:	6878      	ldr	r0, [r7, #4]
 811ed60:	f003 fac4 	bl	81222ec <tcp_rst>
      return;
 811ed64:	e01b      	b.n	811ed9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 811ed66:	4b0f      	ldr	r3, [pc, #60]	@ (811eda4 <tcp_timewait_input+0xc8>)
 811ed68:	781b      	ldrb	r3, [r3, #0]
 811ed6a:	f003 0301 	and.w	r3, r3, #1
 811ed6e:	2b00      	cmp	r3, #0
 811ed70:	d003      	beq.n	811ed7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 811ed72:	4b16      	ldr	r3, [pc, #88]	@ (811edcc <tcp_timewait_input+0xf0>)
 811ed74:	681a      	ldr	r2, [r3, #0]
 811ed76:	687b      	ldr	r3, [r7, #4]
 811ed78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 811ed7a:	4b10      	ldr	r3, [pc, #64]	@ (811edbc <tcp_timewait_input+0xe0>)
 811ed7c:	881b      	ldrh	r3, [r3, #0]
 811ed7e:	2b00      	cmp	r3, #0
 811ed80:	d00c      	beq.n	811ed9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 811ed82:	687b      	ldr	r3, [r7, #4]
 811ed84:	8b5b      	ldrh	r3, [r3, #26]
 811ed86:	f043 0302 	orr.w	r3, r3, #2
 811ed8a:	b29a      	uxth	r2, r3
 811ed8c:	687b      	ldr	r3, [r7, #4]
 811ed8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811ed90:	6878      	ldr	r0, [r7, #4]
 811ed92:	f002 fcf7 	bl	8121784 <tcp_output>
  }
  return;
 811ed96:	e001      	b.n	811ed9c <tcp_timewait_input+0xc0>
    return;
 811ed98:	bf00      	nop
 811ed9a:	e000      	b.n	811ed9e <tcp_timewait_input+0xc2>
  return;
 811ed9c:	bf00      	nop
}
 811ed9e:	3708      	adds	r7, #8
 811eda0:	46bd      	mov	sp, r7
 811eda2:	bd80      	pop	{r7, pc}
 811eda4:	1000e4dc 	.word	0x1000e4dc
 811eda8:	081271d4 	.word	0x081271d4
 811edac:	0812742c 	.word	0x0812742c
 811edb0:	08127260 	.word	0x08127260
 811edb4:	1000e4d0 	.word	0x1000e4d0
 811edb8:	1000e4d4 	.word	0x1000e4d4
 811edbc:	1000e4da 	.word	0x1000e4da
 811edc0:	1000e4c0 	.word	0x1000e4c0
 811edc4:	1000b310 	.word	0x1000b310
 811edc8:	1000b314 	.word	0x1000b314
 811edcc:	1000e498 	.word	0x1000e498

0811edd0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 811edd0:	b590      	push	{r4, r7, lr}
 811edd2:	b08d      	sub	sp, #52	@ 0x34
 811edd4:	af04      	add	r7, sp, #16
 811edd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 811edd8:	2300      	movs	r3, #0
 811edda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 811eddc:	2300      	movs	r3, #0
 811edde:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 811ede0:	687b      	ldr	r3, [r7, #4]
 811ede2:	2b00      	cmp	r3, #0
 811ede4:	d106      	bne.n	811edf4 <tcp_process+0x24>
 811ede6:	4b9d      	ldr	r3, [pc, #628]	@ (811f05c <tcp_process+0x28c>)
 811ede8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 811edec:	499c      	ldr	r1, [pc, #624]	@ (811f060 <tcp_process+0x290>)
 811edee:	489d      	ldr	r0, [pc, #628]	@ (811f064 <tcp_process+0x294>)
 811edf0:	f005 fc34 	bl	812465c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 811edf4:	4b9c      	ldr	r3, [pc, #624]	@ (811f068 <tcp_process+0x298>)
 811edf6:	781b      	ldrb	r3, [r3, #0]
 811edf8:	f003 0304 	and.w	r3, r3, #4
 811edfc:	2b00      	cmp	r3, #0
 811edfe:	d04e      	beq.n	811ee9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 811ee00:	687b      	ldr	r3, [r7, #4]
 811ee02:	7d1b      	ldrb	r3, [r3, #20]
 811ee04:	2b02      	cmp	r3, #2
 811ee06:	d108      	bne.n	811ee1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 811ee08:	687b      	ldr	r3, [r7, #4]
 811ee0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811ee0c:	4b97      	ldr	r3, [pc, #604]	@ (811f06c <tcp_process+0x29c>)
 811ee0e:	681b      	ldr	r3, [r3, #0]
 811ee10:	429a      	cmp	r2, r3
 811ee12:	d123      	bne.n	811ee5c <tcp_process+0x8c>
        acceptable = 1;
 811ee14:	2301      	movs	r3, #1
 811ee16:	76fb      	strb	r3, [r7, #27]
 811ee18:	e020      	b.n	811ee5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 811ee1a:	687b      	ldr	r3, [r7, #4]
 811ee1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811ee1e:	4b94      	ldr	r3, [pc, #592]	@ (811f070 <tcp_process+0x2a0>)
 811ee20:	681b      	ldr	r3, [r3, #0]
 811ee22:	429a      	cmp	r2, r3
 811ee24:	d102      	bne.n	811ee2c <tcp_process+0x5c>
        acceptable = 1;
 811ee26:	2301      	movs	r3, #1
 811ee28:	76fb      	strb	r3, [r7, #27]
 811ee2a:	e017      	b.n	811ee5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811ee2c:	4b90      	ldr	r3, [pc, #576]	@ (811f070 <tcp_process+0x2a0>)
 811ee2e:	681a      	ldr	r2, [r3, #0]
 811ee30:	687b      	ldr	r3, [r7, #4]
 811ee32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ee34:	1ad3      	subs	r3, r2, r3
 811ee36:	2b00      	cmp	r3, #0
 811ee38:	db10      	blt.n	811ee5c <tcp_process+0x8c>
 811ee3a:	4b8d      	ldr	r3, [pc, #564]	@ (811f070 <tcp_process+0x2a0>)
 811ee3c:	681a      	ldr	r2, [r3, #0]
 811ee3e:	687b      	ldr	r3, [r7, #4]
 811ee40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ee42:	6879      	ldr	r1, [r7, #4]
 811ee44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811ee46:	440b      	add	r3, r1
 811ee48:	1ad3      	subs	r3, r2, r3
 811ee4a:	2b00      	cmp	r3, #0
 811ee4c:	dc06      	bgt.n	811ee5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 811ee4e:	687b      	ldr	r3, [r7, #4]
 811ee50:	8b5b      	ldrh	r3, [r3, #26]
 811ee52:	f043 0302 	orr.w	r3, r3, #2
 811ee56:	b29a      	uxth	r2, r3
 811ee58:	687b      	ldr	r3, [r7, #4]
 811ee5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 811ee5c:	7efb      	ldrb	r3, [r7, #27]
 811ee5e:	2b00      	cmp	r3, #0
 811ee60:	d01b      	beq.n	811ee9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 811ee62:	687b      	ldr	r3, [r7, #4]
 811ee64:	7d1b      	ldrb	r3, [r3, #20]
 811ee66:	2b00      	cmp	r3, #0
 811ee68:	d106      	bne.n	811ee78 <tcp_process+0xa8>
 811ee6a:	4b7c      	ldr	r3, [pc, #496]	@ (811f05c <tcp_process+0x28c>)
 811ee6c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 811ee70:	4980      	ldr	r1, [pc, #512]	@ (811f074 <tcp_process+0x2a4>)
 811ee72:	487c      	ldr	r0, [pc, #496]	@ (811f064 <tcp_process+0x294>)
 811ee74:	f005 fbf2 	bl	812465c <iprintf>
      recv_flags |= TF_RESET;
 811ee78:	4b7f      	ldr	r3, [pc, #508]	@ (811f078 <tcp_process+0x2a8>)
 811ee7a:	781b      	ldrb	r3, [r3, #0]
 811ee7c:	f043 0308 	orr.w	r3, r3, #8
 811ee80:	b2da      	uxtb	r2, r3
 811ee82:	4b7d      	ldr	r3, [pc, #500]	@ (811f078 <tcp_process+0x2a8>)
 811ee84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 811ee86:	687b      	ldr	r3, [r7, #4]
 811ee88:	8b5b      	ldrh	r3, [r3, #26]
 811ee8a:	f023 0301 	bic.w	r3, r3, #1
 811ee8e:	b29a      	uxth	r2, r3
 811ee90:	687b      	ldr	r3, [r7, #4]
 811ee92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 811ee94:	f06f 030d 	mvn.w	r3, #13
 811ee98:	e37a      	b.n	811f590 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 811ee9a:	2300      	movs	r3, #0
 811ee9c:	e378      	b.n	811f590 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 811ee9e:	4b72      	ldr	r3, [pc, #456]	@ (811f068 <tcp_process+0x298>)
 811eea0:	781b      	ldrb	r3, [r3, #0]
 811eea2:	f003 0302 	and.w	r3, r3, #2
 811eea6:	2b00      	cmp	r3, #0
 811eea8:	d010      	beq.n	811eecc <tcp_process+0xfc>
 811eeaa:	687b      	ldr	r3, [r7, #4]
 811eeac:	7d1b      	ldrb	r3, [r3, #20]
 811eeae:	2b02      	cmp	r3, #2
 811eeb0:	d00c      	beq.n	811eecc <tcp_process+0xfc>
 811eeb2:	687b      	ldr	r3, [r7, #4]
 811eeb4:	7d1b      	ldrb	r3, [r3, #20]
 811eeb6:	2b03      	cmp	r3, #3
 811eeb8:	d008      	beq.n	811eecc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 811eeba:	687b      	ldr	r3, [r7, #4]
 811eebc:	8b5b      	ldrh	r3, [r3, #26]
 811eebe:	f043 0302 	orr.w	r3, r3, #2
 811eec2:	b29a      	uxth	r2, r3
 811eec4:	687b      	ldr	r3, [r7, #4]
 811eec6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 811eec8:	2300      	movs	r3, #0
 811eeca:	e361      	b.n	811f590 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 811eecc:	687b      	ldr	r3, [r7, #4]
 811eece:	8b5b      	ldrh	r3, [r3, #26]
 811eed0:	f003 0310 	and.w	r3, r3, #16
 811eed4:	2b00      	cmp	r3, #0
 811eed6:	d103      	bne.n	811eee0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 811eed8:	4b68      	ldr	r3, [pc, #416]	@ (811f07c <tcp_process+0x2ac>)
 811eeda:	681a      	ldr	r2, [r3, #0]
 811eedc:	687b      	ldr	r3, [r7, #4]
 811eede:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 811eee0:	687b      	ldr	r3, [r7, #4]
 811eee2:	2200      	movs	r2, #0
 811eee4:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 811eee8:	687b      	ldr	r3, [r7, #4]
 811eeea:	2200      	movs	r2, #0
 811eeec:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 811eef0:	6878      	ldr	r0, [r7, #4]
 811eef2:	f001 fc2b 	bl	812074c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 811eef6:	687b      	ldr	r3, [r7, #4]
 811eef8:	7d1b      	ldrb	r3, [r3, #20]
 811eefa:	3b02      	subs	r3, #2
 811eefc:	2b07      	cmp	r3, #7
 811eefe:	f200 8337 	bhi.w	811f570 <tcp_process+0x7a0>
 811ef02:	a201      	add	r2, pc, #4	@ (adr r2, 811ef08 <tcp_process+0x138>)
 811ef04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811ef08:	0811ef29 	.word	0x0811ef29
 811ef0c:	0811f159 	.word	0x0811f159
 811ef10:	0811f2d1 	.word	0x0811f2d1
 811ef14:	0811f2fb 	.word	0x0811f2fb
 811ef18:	0811f41f 	.word	0x0811f41f
 811ef1c:	0811f2d1 	.word	0x0811f2d1
 811ef20:	0811f4ab 	.word	0x0811f4ab
 811ef24:	0811f53b 	.word	0x0811f53b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 811ef28:	4b4f      	ldr	r3, [pc, #316]	@ (811f068 <tcp_process+0x298>)
 811ef2a:	781b      	ldrb	r3, [r3, #0]
 811ef2c:	f003 0310 	and.w	r3, r3, #16
 811ef30:	2b00      	cmp	r3, #0
 811ef32:	f000 80e4 	beq.w	811f0fe <tcp_process+0x32e>
 811ef36:	4b4c      	ldr	r3, [pc, #304]	@ (811f068 <tcp_process+0x298>)
 811ef38:	781b      	ldrb	r3, [r3, #0]
 811ef3a:	f003 0302 	and.w	r3, r3, #2
 811ef3e:	2b00      	cmp	r3, #0
 811ef40:	f000 80dd 	beq.w	811f0fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 811ef44:	687b      	ldr	r3, [r7, #4]
 811ef46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811ef48:	1c5a      	adds	r2, r3, #1
 811ef4a:	4b48      	ldr	r3, [pc, #288]	@ (811f06c <tcp_process+0x29c>)
 811ef4c:	681b      	ldr	r3, [r3, #0]
 811ef4e:	429a      	cmp	r2, r3
 811ef50:	f040 80d5 	bne.w	811f0fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 811ef54:	4b46      	ldr	r3, [pc, #280]	@ (811f070 <tcp_process+0x2a0>)
 811ef56:	681b      	ldr	r3, [r3, #0]
 811ef58:	1c5a      	adds	r2, r3, #1
 811ef5a:	687b      	ldr	r3, [r7, #4]
 811ef5c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811ef5e:	687b      	ldr	r3, [r7, #4]
 811ef60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811ef62:	687b      	ldr	r3, [r7, #4]
 811ef64:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 811ef66:	4b41      	ldr	r3, [pc, #260]	@ (811f06c <tcp_process+0x29c>)
 811ef68:	681a      	ldr	r2, [r3, #0]
 811ef6a:	687b      	ldr	r3, [r7, #4]
 811ef6c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 811ef6e:	4b44      	ldr	r3, [pc, #272]	@ (811f080 <tcp_process+0x2b0>)
 811ef70:	681b      	ldr	r3, [r3, #0]
 811ef72:	89db      	ldrh	r3, [r3, #14]
 811ef74:	b29a      	uxth	r2, r3
 811ef76:	687b      	ldr	r3, [r7, #4]
 811ef78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 811ef7c:	687b      	ldr	r3, [r7, #4]
 811ef7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811ef82:	687b      	ldr	r3, [r7, #4]
 811ef84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 811ef88:	4b39      	ldr	r3, [pc, #228]	@ (811f070 <tcp_process+0x2a0>)
 811ef8a:	681b      	ldr	r3, [r3, #0]
 811ef8c:	1e5a      	subs	r2, r3, #1
 811ef8e:	687b      	ldr	r3, [r7, #4]
 811ef90:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 811ef92:	687b      	ldr	r3, [r7, #4]
 811ef94:	2204      	movs	r2, #4
 811ef96:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 811ef98:	687b      	ldr	r3, [r7, #4]
 811ef9a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811ef9c:	687b      	ldr	r3, [r7, #4]
 811ef9e:	3304      	adds	r3, #4
 811efa0:	4618      	mov	r0, r3
 811efa2:	f7fa f94d 	bl	8119240 <ip4_route>
 811efa6:	4601      	mov	r1, r0
 811efa8:	687b      	ldr	r3, [r7, #4]
 811efaa:	3304      	adds	r3, #4
 811efac:	461a      	mov	r2, r3
 811efae:	4620      	mov	r0, r4
 811efb0:	f7ff f88c 	bl	811e0cc <tcp_eff_send_mss_netif>
 811efb4:	4603      	mov	r3, r0
 811efb6:	461a      	mov	r2, r3
 811efb8:	687b      	ldr	r3, [r7, #4]
 811efba:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811efbc:	687b      	ldr	r3, [r7, #4]
 811efbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811efc0:	009a      	lsls	r2, r3, #2
 811efc2:	687b      	ldr	r3, [r7, #4]
 811efc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811efc6:	005b      	lsls	r3, r3, #1
 811efc8:	f241 111c 	movw	r1, #4380	@ 0x111c
 811efcc:	428b      	cmp	r3, r1
 811efce:	bf38      	it	cc
 811efd0:	460b      	movcc	r3, r1
 811efd2:	429a      	cmp	r2, r3
 811efd4:	d204      	bcs.n	811efe0 <tcp_process+0x210>
 811efd6:	687b      	ldr	r3, [r7, #4]
 811efd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811efda:	009b      	lsls	r3, r3, #2
 811efdc:	b29b      	uxth	r3, r3
 811efde:	e00d      	b.n	811effc <tcp_process+0x22c>
 811efe0:	687b      	ldr	r3, [r7, #4]
 811efe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811efe4:	005b      	lsls	r3, r3, #1
 811efe6:	f241 121c 	movw	r2, #4380	@ 0x111c
 811efea:	4293      	cmp	r3, r2
 811efec:	d904      	bls.n	811eff8 <tcp_process+0x228>
 811efee:	687b      	ldr	r3, [r7, #4]
 811eff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811eff2:	005b      	lsls	r3, r3, #1
 811eff4:	b29b      	uxth	r3, r3
 811eff6:	e001      	b.n	811effc <tcp_process+0x22c>
 811eff8:	f241 131c 	movw	r3, #4380	@ 0x111c
 811effc:	687a      	ldr	r2, [r7, #4]
 811effe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 811f002:	687b      	ldr	r3, [r7, #4]
 811f004:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f008:	2b00      	cmp	r3, #0
 811f00a:	d106      	bne.n	811f01a <tcp_process+0x24a>
 811f00c:	4b13      	ldr	r3, [pc, #76]	@ (811f05c <tcp_process+0x28c>)
 811f00e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 811f012:	491c      	ldr	r1, [pc, #112]	@ (811f084 <tcp_process+0x2b4>)
 811f014:	4813      	ldr	r0, [pc, #76]	@ (811f064 <tcp_process+0x294>)
 811f016:	f005 fb21 	bl	812465c <iprintf>
        --pcb->snd_queuelen;
 811f01a:	687b      	ldr	r3, [r7, #4]
 811f01c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f020:	3b01      	subs	r3, #1
 811f022:	b29a      	uxth	r2, r3
 811f024:	687b      	ldr	r3, [r7, #4]
 811f026:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 811f02a:	687b      	ldr	r3, [r7, #4]
 811f02c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f02e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 811f030:	69fb      	ldr	r3, [r7, #28]
 811f032:	2b00      	cmp	r3, #0
 811f034:	d12a      	bne.n	811f08c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 811f036:	687b      	ldr	r3, [r7, #4]
 811f038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f03a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 811f03c:	69fb      	ldr	r3, [r7, #28]
 811f03e:	2b00      	cmp	r3, #0
 811f040:	d106      	bne.n	811f050 <tcp_process+0x280>
 811f042:	4b06      	ldr	r3, [pc, #24]	@ (811f05c <tcp_process+0x28c>)
 811f044:	f44f 725d 	mov.w	r2, #884	@ 0x374
 811f048:	490f      	ldr	r1, [pc, #60]	@ (811f088 <tcp_process+0x2b8>)
 811f04a:	4806      	ldr	r0, [pc, #24]	@ (811f064 <tcp_process+0x294>)
 811f04c:	f005 fb06 	bl	812465c <iprintf>
          pcb->unsent = rseg->next;
 811f050:	69fb      	ldr	r3, [r7, #28]
 811f052:	681a      	ldr	r2, [r3, #0]
 811f054:	687b      	ldr	r3, [r7, #4]
 811f056:	66da      	str	r2, [r3, #108]	@ 0x6c
 811f058:	e01c      	b.n	811f094 <tcp_process+0x2c4>
 811f05a:	bf00      	nop
 811f05c:	081271d4 	.word	0x081271d4
 811f060:	0812744c 	.word	0x0812744c
 811f064:	08127260 	.word	0x08127260
 811f068:	1000e4dc 	.word	0x1000e4dc
 811f06c:	1000e4d4 	.word	0x1000e4d4
 811f070:	1000e4d0 	.word	0x1000e4d0
 811f074:	08127468 	.word	0x08127468
 811f078:	1000e4dd 	.word	0x1000e4dd
 811f07c:	1000e498 	.word	0x1000e498
 811f080:	1000e4c0 	.word	0x1000e4c0
 811f084:	08127488 	.word	0x08127488
 811f088:	081274a0 	.word	0x081274a0
        } else {
          pcb->unacked = rseg->next;
 811f08c:	69fb      	ldr	r3, [r7, #28]
 811f08e:	681a      	ldr	r2, [r3, #0]
 811f090:	687b      	ldr	r3, [r7, #4]
 811f092:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 811f094:	69f8      	ldr	r0, [r7, #28]
 811f096:	f7fe fcba 	bl	811da0e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 811f09a:	687b      	ldr	r3, [r7, #4]
 811f09c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f09e:	2b00      	cmp	r3, #0
 811f0a0:	d104      	bne.n	811f0ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 811f0a2:	687b      	ldr	r3, [r7, #4]
 811f0a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811f0a8:	861a      	strh	r2, [r3, #48]	@ 0x30
 811f0aa:	e006      	b.n	811f0ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 811f0ac:	687b      	ldr	r3, [r7, #4]
 811f0ae:	2200      	movs	r2, #0
 811f0b0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 811f0b2:	687b      	ldr	r3, [r7, #4]
 811f0b4:	2200      	movs	r2, #0
 811f0b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 811f0ba:	687b      	ldr	r3, [r7, #4]
 811f0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811f0c0:	2b00      	cmp	r3, #0
 811f0c2:	d00a      	beq.n	811f0da <tcp_process+0x30a>
 811f0c4:	687b      	ldr	r3, [r7, #4]
 811f0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811f0ca:	687a      	ldr	r2, [r7, #4]
 811f0cc:	6910      	ldr	r0, [r2, #16]
 811f0ce:	2200      	movs	r2, #0
 811f0d0:	6879      	ldr	r1, [r7, #4]
 811f0d2:	4798      	blx	r3
 811f0d4:	4603      	mov	r3, r0
 811f0d6:	76bb      	strb	r3, [r7, #26]
 811f0d8:	e001      	b.n	811f0de <tcp_process+0x30e>
 811f0da:	2300      	movs	r3, #0
 811f0dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 811f0de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811f0e2:	f113 0f0d 	cmn.w	r3, #13
 811f0e6:	d102      	bne.n	811f0ee <tcp_process+0x31e>
          return ERR_ABRT;
 811f0e8:	f06f 030c 	mvn.w	r3, #12
 811f0ec:	e250      	b.n	811f590 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 811f0ee:	687b      	ldr	r3, [r7, #4]
 811f0f0:	8b5b      	ldrh	r3, [r3, #26]
 811f0f2:	f043 0302 	orr.w	r3, r3, #2
 811f0f6:	b29a      	uxth	r2, r3
 811f0f8:	687b      	ldr	r3, [r7, #4]
 811f0fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 811f0fc:	e23a      	b.n	811f574 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 811f0fe:	4b98      	ldr	r3, [pc, #608]	@ (811f360 <tcp_process+0x590>)
 811f100:	781b      	ldrb	r3, [r3, #0]
 811f102:	f003 0310 	and.w	r3, r3, #16
 811f106:	2b00      	cmp	r3, #0
 811f108:	f000 8234 	beq.w	811f574 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811f10c:	4b95      	ldr	r3, [pc, #596]	@ (811f364 <tcp_process+0x594>)
 811f10e:	6819      	ldr	r1, [r3, #0]
 811f110:	4b95      	ldr	r3, [pc, #596]	@ (811f368 <tcp_process+0x598>)
 811f112:	881b      	ldrh	r3, [r3, #0]
 811f114:	461a      	mov	r2, r3
 811f116:	4b95      	ldr	r3, [pc, #596]	@ (811f36c <tcp_process+0x59c>)
 811f118:	681b      	ldr	r3, [r3, #0]
 811f11a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811f11c:	4b94      	ldr	r3, [pc, #592]	@ (811f370 <tcp_process+0x5a0>)
 811f11e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811f120:	885b      	ldrh	r3, [r3, #2]
 811f122:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811f124:	4a92      	ldr	r2, [pc, #584]	@ (811f370 <tcp_process+0x5a0>)
 811f126:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811f128:	8812      	ldrh	r2, [r2, #0]
 811f12a:	b292      	uxth	r2, r2
 811f12c:	9202      	str	r2, [sp, #8]
 811f12e:	9301      	str	r3, [sp, #4]
 811f130:	4b90      	ldr	r3, [pc, #576]	@ (811f374 <tcp_process+0x5a4>)
 811f132:	9300      	str	r3, [sp, #0]
 811f134:	4b90      	ldr	r3, [pc, #576]	@ (811f378 <tcp_process+0x5a8>)
 811f136:	4602      	mov	r2, r0
 811f138:	6878      	ldr	r0, [r7, #4]
 811f13a:	f003 f8d7 	bl	81222ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 811f13e:	687b      	ldr	r3, [r7, #4]
 811f140:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811f144:	2b05      	cmp	r3, #5
 811f146:	f200 8215 	bhi.w	811f574 <tcp_process+0x7a4>
          pcb->rtime = 0;
 811f14a:	687b      	ldr	r3, [r7, #4]
 811f14c:	2200      	movs	r2, #0
 811f14e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 811f150:	6878      	ldr	r0, [r7, #4]
 811f152:	f002 fea3 	bl	8121e9c <tcp_rexmit_rto>
      break;
 811f156:	e20d      	b.n	811f574 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 811f158:	4b81      	ldr	r3, [pc, #516]	@ (811f360 <tcp_process+0x590>)
 811f15a:	781b      	ldrb	r3, [r3, #0]
 811f15c:	f003 0310 	and.w	r3, r3, #16
 811f160:	2b00      	cmp	r3, #0
 811f162:	f000 80a1 	beq.w	811f2a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811f166:	4b7f      	ldr	r3, [pc, #508]	@ (811f364 <tcp_process+0x594>)
 811f168:	681a      	ldr	r2, [r3, #0]
 811f16a:	687b      	ldr	r3, [r7, #4]
 811f16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811f16e:	1ad3      	subs	r3, r2, r3
 811f170:	3b01      	subs	r3, #1
 811f172:	2b00      	cmp	r3, #0
 811f174:	db7e      	blt.n	811f274 <tcp_process+0x4a4>
 811f176:	4b7b      	ldr	r3, [pc, #492]	@ (811f364 <tcp_process+0x594>)
 811f178:	681a      	ldr	r2, [r3, #0]
 811f17a:	687b      	ldr	r3, [r7, #4]
 811f17c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811f17e:	1ad3      	subs	r3, r2, r3
 811f180:	2b00      	cmp	r3, #0
 811f182:	dc77      	bgt.n	811f274 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 811f184:	687b      	ldr	r3, [r7, #4]
 811f186:	2204      	movs	r2, #4
 811f188:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 811f18a:	687b      	ldr	r3, [r7, #4]
 811f18c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811f18e:	2b00      	cmp	r3, #0
 811f190:	d102      	bne.n	811f198 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 811f192:	23fa      	movs	r3, #250	@ 0xfa
 811f194:	76bb      	strb	r3, [r7, #26]
 811f196:	e01d      	b.n	811f1d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 811f198:	687b      	ldr	r3, [r7, #4]
 811f19a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811f19c:	699b      	ldr	r3, [r3, #24]
 811f19e:	2b00      	cmp	r3, #0
 811f1a0:	d106      	bne.n	811f1b0 <tcp_process+0x3e0>
 811f1a2:	4b76      	ldr	r3, [pc, #472]	@ (811f37c <tcp_process+0x5ac>)
 811f1a4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 811f1a8:	4975      	ldr	r1, [pc, #468]	@ (811f380 <tcp_process+0x5b0>)
 811f1aa:	4876      	ldr	r0, [pc, #472]	@ (811f384 <tcp_process+0x5b4>)
 811f1ac:	f005 fa56 	bl	812465c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 811f1b0:	687b      	ldr	r3, [r7, #4]
 811f1b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811f1b4:	699b      	ldr	r3, [r3, #24]
 811f1b6:	2b00      	cmp	r3, #0
 811f1b8:	d00a      	beq.n	811f1d0 <tcp_process+0x400>
 811f1ba:	687b      	ldr	r3, [r7, #4]
 811f1bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811f1be:	699b      	ldr	r3, [r3, #24]
 811f1c0:	687a      	ldr	r2, [r7, #4]
 811f1c2:	6910      	ldr	r0, [r2, #16]
 811f1c4:	2200      	movs	r2, #0
 811f1c6:	6879      	ldr	r1, [r7, #4]
 811f1c8:	4798      	blx	r3
 811f1ca:	4603      	mov	r3, r0
 811f1cc:	76bb      	strb	r3, [r7, #26]
 811f1ce:	e001      	b.n	811f1d4 <tcp_process+0x404>
 811f1d0:	23f0      	movs	r3, #240	@ 0xf0
 811f1d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 811f1d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811f1d8:	2b00      	cmp	r3, #0
 811f1da:	d00a      	beq.n	811f1f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 811f1dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811f1e0:	f113 0f0d 	cmn.w	r3, #13
 811f1e4:	d002      	beq.n	811f1ec <tcp_process+0x41c>
              tcp_abort(pcb);
 811f1e6:	6878      	ldr	r0, [r7, #4]
 811f1e8:	f7fd fd26 	bl	811cc38 <tcp_abort>
            }
            return ERR_ABRT;
 811f1ec:	f06f 030c 	mvn.w	r3, #12
 811f1f0:	e1ce      	b.n	811f590 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 811f1f2:	6878      	ldr	r0, [r7, #4]
 811f1f4:	f000 fae0 	bl	811f7b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 811f1f8:	4b63      	ldr	r3, [pc, #396]	@ (811f388 <tcp_process+0x5b8>)
 811f1fa:	881b      	ldrh	r3, [r3, #0]
 811f1fc:	2b00      	cmp	r3, #0
 811f1fe:	d005      	beq.n	811f20c <tcp_process+0x43c>
            recv_acked--;
 811f200:	4b61      	ldr	r3, [pc, #388]	@ (811f388 <tcp_process+0x5b8>)
 811f202:	881b      	ldrh	r3, [r3, #0]
 811f204:	3b01      	subs	r3, #1
 811f206:	b29a      	uxth	r2, r3
 811f208:	4b5f      	ldr	r3, [pc, #380]	@ (811f388 <tcp_process+0x5b8>)
 811f20a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811f20c:	687b      	ldr	r3, [r7, #4]
 811f20e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f210:	009a      	lsls	r2, r3, #2
 811f212:	687b      	ldr	r3, [r7, #4]
 811f214:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f216:	005b      	lsls	r3, r3, #1
 811f218:	f241 111c 	movw	r1, #4380	@ 0x111c
 811f21c:	428b      	cmp	r3, r1
 811f21e:	bf38      	it	cc
 811f220:	460b      	movcc	r3, r1
 811f222:	429a      	cmp	r2, r3
 811f224:	d204      	bcs.n	811f230 <tcp_process+0x460>
 811f226:	687b      	ldr	r3, [r7, #4]
 811f228:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f22a:	009b      	lsls	r3, r3, #2
 811f22c:	b29b      	uxth	r3, r3
 811f22e:	e00d      	b.n	811f24c <tcp_process+0x47c>
 811f230:	687b      	ldr	r3, [r7, #4]
 811f232:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f234:	005b      	lsls	r3, r3, #1
 811f236:	f241 121c 	movw	r2, #4380	@ 0x111c
 811f23a:	4293      	cmp	r3, r2
 811f23c:	d904      	bls.n	811f248 <tcp_process+0x478>
 811f23e:	687b      	ldr	r3, [r7, #4]
 811f240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f242:	005b      	lsls	r3, r3, #1
 811f244:	b29b      	uxth	r3, r3
 811f246:	e001      	b.n	811f24c <tcp_process+0x47c>
 811f248:	f241 131c 	movw	r3, #4380	@ 0x111c
 811f24c:	687a      	ldr	r2, [r7, #4]
 811f24e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 811f252:	4b4e      	ldr	r3, [pc, #312]	@ (811f38c <tcp_process+0x5bc>)
 811f254:	781b      	ldrb	r3, [r3, #0]
 811f256:	f003 0320 	and.w	r3, r3, #32
 811f25a:	2b00      	cmp	r3, #0
 811f25c:	d037      	beq.n	811f2ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 811f25e:	687b      	ldr	r3, [r7, #4]
 811f260:	8b5b      	ldrh	r3, [r3, #26]
 811f262:	f043 0302 	orr.w	r3, r3, #2
 811f266:	b29a      	uxth	r2, r3
 811f268:	687b      	ldr	r3, [r7, #4]
 811f26a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 811f26c:	687b      	ldr	r3, [r7, #4]
 811f26e:	2207      	movs	r2, #7
 811f270:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 811f272:	e02c      	b.n	811f2ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811f274:	4b3b      	ldr	r3, [pc, #236]	@ (811f364 <tcp_process+0x594>)
 811f276:	6819      	ldr	r1, [r3, #0]
 811f278:	4b3b      	ldr	r3, [pc, #236]	@ (811f368 <tcp_process+0x598>)
 811f27a:	881b      	ldrh	r3, [r3, #0]
 811f27c:	461a      	mov	r2, r3
 811f27e:	4b3b      	ldr	r3, [pc, #236]	@ (811f36c <tcp_process+0x59c>)
 811f280:	681b      	ldr	r3, [r3, #0]
 811f282:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811f284:	4b3a      	ldr	r3, [pc, #232]	@ (811f370 <tcp_process+0x5a0>)
 811f286:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811f288:	885b      	ldrh	r3, [r3, #2]
 811f28a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811f28c:	4a38      	ldr	r2, [pc, #224]	@ (811f370 <tcp_process+0x5a0>)
 811f28e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811f290:	8812      	ldrh	r2, [r2, #0]
 811f292:	b292      	uxth	r2, r2
 811f294:	9202      	str	r2, [sp, #8]
 811f296:	9301      	str	r3, [sp, #4]
 811f298:	4b36      	ldr	r3, [pc, #216]	@ (811f374 <tcp_process+0x5a4>)
 811f29a:	9300      	str	r3, [sp, #0]
 811f29c:	4b36      	ldr	r3, [pc, #216]	@ (811f378 <tcp_process+0x5a8>)
 811f29e:	4602      	mov	r2, r0
 811f2a0:	6878      	ldr	r0, [r7, #4]
 811f2a2:	f003 f823 	bl	81222ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 811f2a6:	e167      	b.n	811f578 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 811f2a8:	4b2d      	ldr	r3, [pc, #180]	@ (811f360 <tcp_process+0x590>)
 811f2aa:	781b      	ldrb	r3, [r3, #0]
 811f2ac:	f003 0302 	and.w	r3, r3, #2
 811f2b0:	2b00      	cmp	r3, #0
 811f2b2:	f000 8161 	beq.w	811f578 <tcp_process+0x7a8>
 811f2b6:	687b      	ldr	r3, [r7, #4]
 811f2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f2ba:	1e5a      	subs	r2, r3, #1
 811f2bc:	4b2b      	ldr	r3, [pc, #172]	@ (811f36c <tcp_process+0x59c>)
 811f2be:	681b      	ldr	r3, [r3, #0]
 811f2c0:	429a      	cmp	r2, r3
 811f2c2:	f040 8159 	bne.w	811f578 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 811f2c6:	6878      	ldr	r0, [r7, #4]
 811f2c8:	f002 fe0a 	bl	8121ee0 <tcp_rexmit>
      break;
 811f2cc:	e154      	b.n	811f578 <tcp_process+0x7a8>
 811f2ce:	e153      	b.n	811f578 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 811f2d0:	6878      	ldr	r0, [r7, #4]
 811f2d2:	f000 fa71 	bl	811f7b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 811f2d6:	4b2d      	ldr	r3, [pc, #180]	@ (811f38c <tcp_process+0x5bc>)
 811f2d8:	781b      	ldrb	r3, [r3, #0]
 811f2da:	f003 0320 	and.w	r3, r3, #32
 811f2de:	2b00      	cmp	r3, #0
 811f2e0:	f000 814c 	beq.w	811f57c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 811f2e4:	687b      	ldr	r3, [r7, #4]
 811f2e6:	8b5b      	ldrh	r3, [r3, #26]
 811f2e8:	f043 0302 	orr.w	r3, r3, #2
 811f2ec:	b29a      	uxth	r2, r3
 811f2ee:	687b      	ldr	r3, [r7, #4]
 811f2f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 811f2f2:	687b      	ldr	r3, [r7, #4]
 811f2f4:	2207      	movs	r2, #7
 811f2f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 811f2f8:	e140      	b.n	811f57c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 811f2fa:	6878      	ldr	r0, [r7, #4]
 811f2fc:	f000 fa5c 	bl	811f7b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 811f300:	4b22      	ldr	r3, [pc, #136]	@ (811f38c <tcp_process+0x5bc>)
 811f302:	781b      	ldrb	r3, [r3, #0]
 811f304:	f003 0320 	and.w	r3, r3, #32
 811f308:	2b00      	cmp	r3, #0
 811f30a:	d071      	beq.n	811f3f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811f30c:	4b14      	ldr	r3, [pc, #80]	@ (811f360 <tcp_process+0x590>)
 811f30e:	781b      	ldrb	r3, [r3, #0]
 811f310:	f003 0310 	and.w	r3, r3, #16
 811f314:	2b00      	cmp	r3, #0
 811f316:	d060      	beq.n	811f3da <tcp_process+0x60a>
 811f318:	687b      	ldr	r3, [r7, #4]
 811f31a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811f31c:	4b11      	ldr	r3, [pc, #68]	@ (811f364 <tcp_process+0x594>)
 811f31e:	681b      	ldr	r3, [r3, #0]
 811f320:	429a      	cmp	r2, r3
 811f322:	d15a      	bne.n	811f3da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 811f324:	687b      	ldr	r3, [r7, #4]
 811f326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811f328:	2b00      	cmp	r3, #0
 811f32a:	d156      	bne.n	811f3da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 811f32c:	687b      	ldr	r3, [r7, #4]
 811f32e:	8b5b      	ldrh	r3, [r3, #26]
 811f330:	f043 0302 	orr.w	r3, r3, #2
 811f334:	b29a      	uxth	r2, r3
 811f336:	687b      	ldr	r3, [r7, #4]
 811f338:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 811f33a:	6878      	ldr	r0, [r7, #4]
 811f33c:	f7fe fdbc 	bl	811deb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 811f340:	4b13      	ldr	r3, [pc, #76]	@ (811f390 <tcp_process+0x5c0>)
 811f342:	681b      	ldr	r3, [r3, #0]
 811f344:	687a      	ldr	r2, [r7, #4]
 811f346:	429a      	cmp	r2, r3
 811f348:	d105      	bne.n	811f356 <tcp_process+0x586>
 811f34a:	4b11      	ldr	r3, [pc, #68]	@ (811f390 <tcp_process+0x5c0>)
 811f34c:	681b      	ldr	r3, [r3, #0]
 811f34e:	68db      	ldr	r3, [r3, #12]
 811f350:	4a0f      	ldr	r2, [pc, #60]	@ (811f390 <tcp_process+0x5c0>)
 811f352:	6013      	str	r3, [r2, #0]
 811f354:	e02e      	b.n	811f3b4 <tcp_process+0x5e4>
 811f356:	4b0e      	ldr	r3, [pc, #56]	@ (811f390 <tcp_process+0x5c0>)
 811f358:	681b      	ldr	r3, [r3, #0]
 811f35a:	617b      	str	r3, [r7, #20]
 811f35c:	e027      	b.n	811f3ae <tcp_process+0x5de>
 811f35e:	bf00      	nop
 811f360:	1000e4dc 	.word	0x1000e4dc
 811f364:	1000e4d4 	.word	0x1000e4d4
 811f368:	1000e4da 	.word	0x1000e4da
 811f36c:	1000e4d0 	.word	0x1000e4d0
 811f370:	1000e4c0 	.word	0x1000e4c0
 811f374:	1000b310 	.word	0x1000b310
 811f378:	1000b314 	.word	0x1000b314
 811f37c:	081271d4 	.word	0x081271d4
 811f380:	081274b4 	.word	0x081274b4
 811f384:	08127260 	.word	0x08127260
 811f388:	1000e4d8 	.word	0x1000e4d8
 811f38c:	1000e4dd 	.word	0x1000e4dd
 811f390:	1000e4a4 	.word	0x1000e4a4
 811f394:	697b      	ldr	r3, [r7, #20]
 811f396:	68db      	ldr	r3, [r3, #12]
 811f398:	687a      	ldr	r2, [r7, #4]
 811f39a:	429a      	cmp	r2, r3
 811f39c:	d104      	bne.n	811f3a8 <tcp_process+0x5d8>
 811f39e:	687b      	ldr	r3, [r7, #4]
 811f3a0:	68da      	ldr	r2, [r3, #12]
 811f3a2:	697b      	ldr	r3, [r7, #20]
 811f3a4:	60da      	str	r2, [r3, #12]
 811f3a6:	e005      	b.n	811f3b4 <tcp_process+0x5e4>
 811f3a8:	697b      	ldr	r3, [r7, #20]
 811f3aa:	68db      	ldr	r3, [r3, #12]
 811f3ac:	617b      	str	r3, [r7, #20]
 811f3ae:	697b      	ldr	r3, [r7, #20]
 811f3b0:	2b00      	cmp	r3, #0
 811f3b2:	d1ef      	bne.n	811f394 <tcp_process+0x5c4>
 811f3b4:	687b      	ldr	r3, [r7, #4]
 811f3b6:	2200      	movs	r2, #0
 811f3b8:	60da      	str	r2, [r3, #12]
 811f3ba:	4b77      	ldr	r3, [pc, #476]	@ (811f598 <tcp_process+0x7c8>)
 811f3bc:	2201      	movs	r2, #1
 811f3be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 811f3c0:	687b      	ldr	r3, [r7, #4]
 811f3c2:	220a      	movs	r2, #10
 811f3c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 811f3c6:	4b75      	ldr	r3, [pc, #468]	@ (811f59c <tcp_process+0x7cc>)
 811f3c8:	681a      	ldr	r2, [r3, #0]
 811f3ca:	687b      	ldr	r3, [r7, #4]
 811f3cc:	60da      	str	r2, [r3, #12]
 811f3ce:	4a73      	ldr	r2, [pc, #460]	@ (811f59c <tcp_process+0x7cc>)
 811f3d0:	687b      	ldr	r3, [r7, #4]
 811f3d2:	6013      	str	r3, [r2, #0]
 811f3d4:	f003 faaa 	bl	812292c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 811f3d8:	e0d2      	b.n	811f580 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 811f3da:	687b      	ldr	r3, [r7, #4]
 811f3dc:	8b5b      	ldrh	r3, [r3, #26]
 811f3de:	f043 0302 	orr.w	r3, r3, #2
 811f3e2:	b29a      	uxth	r2, r3
 811f3e4:	687b      	ldr	r3, [r7, #4]
 811f3e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 811f3e8:	687b      	ldr	r3, [r7, #4]
 811f3ea:	2208      	movs	r2, #8
 811f3ec:	751a      	strb	r2, [r3, #20]
      break;
 811f3ee:	e0c7      	b.n	811f580 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811f3f0:	4b6b      	ldr	r3, [pc, #428]	@ (811f5a0 <tcp_process+0x7d0>)
 811f3f2:	781b      	ldrb	r3, [r3, #0]
 811f3f4:	f003 0310 	and.w	r3, r3, #16
 811f3f8:	2b00      	cmp	r3, #0
 811f3fa:	f000 80c1 	beq.w	811f580 <tcp_process+0x7b0>
 811f3fe:	687b      	ldr	r3, [r7, #4]
 811f400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811f402:	4b68      	ldr	r3, [pc, #416]	@ (811f5a4 <tcp_process+0x7d4>)
 811f404:	681b      	ldr	r3, [r3, #0]
 811f406:	429a      	cmp	r2, r3
 811f408:	f040 80ba 	bne.w	811f580 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 811f40c:	687b      	ldr	r3, [r7, #4]
 811f40e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811f410:	2b00      	cmp	r3, #0
 811f412:	f040 80b5 	bne.w	811f580 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 811f416:	687b      	ldr	r3, [r7, #4]
 811f418:	2206      	movs	r2, #6
 811f41a:	751a      	strb	r2, [r3, #20]
      break;
 811f41c:	e0b0      	b.n	811f580 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 811f41e:	6878      	ldr	r0, [r7, #4]
 811f420:	f000 f9ca 	bl	811f7b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 811f424:	4b60      	ldr	r3, [pc, #384]	@ (811f5a8 <tcp_process+0x7d8>)
 811f426:	781b      	ldrb	r3, [r3, #0]
 811f428:	f003 0320 	and.w	r3, r3, #32
 811f42c:	2b00      	cmp	r3, #0
 811f42e:	f000 80a9 	beq.w	811f584 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 811f432:	687b      	ldr	r3, [r7, #4]
 811f434:	8b5b      	ldrh	r3, [r3, #26]
 811f436:	f043 0302 	orr.w	r3, r3, #2
 811f43a:	b29a      	uxth	r2, r3
 811f43c:	687b      	ldr	r3, [r7, #4]
 811f43e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 811f440:	6878      	ldr	r0, [r7, #4]
 811f442:	f7fe fd39 	bl	811deb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811f446:	4b59      	ldr	r3, [pc, #356]	@ (811f5ac <tcp_process+0x7dc>)
 811f448:	681b      	ldr	r3, [r3, #0]
 811f44a:	687a      	ldr	r2, [r7, #4]
 811f44c:	429a      	cmp	r2, r3
 811f44e:	d105      	bne.n	811f45c <tcp_process+0x68c>
 811f450:	4b56      	ldr	r3, [pc, #344]	@ (811f5ac <tcp_process+0x7dc>)
 811f452:	681b      	ldr	r3, [r3, #0]
 811f454:	68db      	ldr	r3, [r3, #12]
 811f456:	4a55      	ldr	r2, [pc, #340]	@ (811f5ac <tcp_process+0x7dc>)
 811f458:	6013      	str	r3, [r2, #0]
 811f45a:	e013      	b.n	811f484 <tcp_process+0x6b4>
 811f45c:	4b53      	ldr	r3, [pc, #332]	@ (811f5ac <tcp_process+0x7dc>)
 811f45e:	681b      	ldr	r3, [r3, #0]
 811f460:	613b      	str	r3, [r7, #16]
 811f462:	e00c      	b.n	811f47e <tcp_process+0x6ae>
 811f464:	693b      	ldr	r3, [r7, #16]
 811f466:	68db      	ldr	r3, [r3, #12]
 811f468:	687a      	ldr	r2, [r7, #4]
 811f46a:	429a      	cmp	r2, r3
 811f46c:	d104      	bne.n	811f478 <tcp_process+0x6a8>
 811f46e:	687b      	ldr	r3, [r7, #4]
 811f470:	68da      	ldr	r2, [r3, #12]
 811f472:	693b      	ldr	r3, [r7, #16]
 811f474:	60da      	str	r2, [r3, #12]
 811f476:	e005      	b.n	811f484 <tcp_process+0x6b4>
 811f478:	693b      	ldr	r3, [r7, #16]
 811f47a:	68db      	ldr	r3, [r3, #12]
 811f47c:	613b      	str	r3, [r7, #16]
 811f47e:	693b      	ldr	r3, [r7, #16]
 811f480:	2b00      	cmp	r3, #0
 811f482:	d1ef      	bne.n	811f464 <tcp_process+0x694>
 811f484:	687b      	ldr	r3, [r7, #4]
 811f486:	2200      	movs	r2, #0
 811f488:	60da      	str	r2, [r3, #12]
 811f48a:	4b43      	ldr	r3, [pc, #268]	@ (811f598 <tcp_process+0x7c8>)
 811f48c:	2201      	movs	r2, #1
 811f48e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 811f490:	687b      	ldr	r3, [r7, #4]
 811f492:	220a      	movs	r2, #10
 811f494:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811f496:	4b41      	ldr	r3, [pc, #260]	@ (811f59c <tcp_process+0x7cc>)
 811f498:	681a      	ldr	r2, [r3, #0]
 811f49a:	687b      	ldr	r3, [r7, #4]
 811f49c:	60da      	str	r2, [r3, #12]
 811f49e:	4a3f      	ldr	r2, [pc, #252]	@ (811f59c <tcp_process+0x7cc>)
 811f4a0:	687b      	ldr	r3, [r7, #4]
 811f4a2:	6013      	str	r3, [r2, #0]
 811f4a4:	f003 fa42 	bl	812292c <tcp_timer_needed>
      }
      break;
 811f4a8:	e06c      	b.n	811f584 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 811f4aa:	6878      	ldr	r0, [r7, #4]
 811f4ac:	f000 f984 	bl	811f7b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 811f4b0:	4b3b      	ldr	r3, [pc, #236]	@ (811f5a0 <tcp_process+0x7d0>)
 811f4b2:	781b      	ldrb	r3, [r3, #0]
 811f4b4:	f003 0310 	and.w	r3, r3, #16
 811f4b8:	2b00      	cmp	r3, #0
 811f4ba:	d065      	beq.n	811f588 <tcp_process+0x7b8>
 811f4bc:	687b      	ldr	r3, [r7, #4]
 811f4be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811f4c0:	4b38      	ldr	r3, [pc, #224]	@ (811f5a4 <tcp_process+0x7d4>)
 811f4c2:	681b      	ldr	r3, [r3, #0]
 811f4c4:	429a      	cmp	r2, r3
 811f4c6:	d15f      	bne.n	811f588 <tcp_process+0x7b8>
 811f4c8:	687b      	ldr	r3, [r7, #4]
 811f4ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f4cc:	2b00      	cmp	r3, #0
 811f4ce:	d15b      	bne.n	811f588 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 811f4d0:	6878      	ldr	r0, [r7, #4]
 811f4d2:	f7fe fcf1 	bl	811deb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811f4d6:	4b35      	ldr	r3, [pc, #212]	@ (811f5ac <tcp_process+0x7dc>)
 811f4d8:	681b      	ldr	r3, [r3, #0]
 811f4da:	687a      	ldr	r2, [r7, #4]
 811f4dc:	429a      	cmp	r2, r3
 811f4de:	d105      	bne.n	811f4ec <tcp_process+0x71c>
 811f4e0:	4b32      	ldr	r3, [pc, #200]	@ (811f5ac <tcp_process+0x7dc>)
 811f4e2:	681b      	ldr	r3, [r3, #0]
 811f4e4:	68db      	ldr	r3, [r3, #12]
 811f4e6:	4a31      	ldr	r2, [pc, #196]	@ (811f5ac <tcp_process+0x7dc>)
 811f4e8:	6013      	str	r3, [r2, #0]
 811f4ea:	e013      	b.n	811f514 <tcp_process+0x744>
 811f4ec:	4b2f      	ldr	r3, [pc, #188]	@ (811f5ac <tcp_process+0x7dc>)
 811f4ee:	681b      	ldr	r3, [r3, #0]
 811f4f0:	60fb      	str	r3, [r7, #12]
 811f4f2:	e00c      	b.n	811f50e <tcp_process+0x73e>
 811f4f4:	68fb      	ldr	r3, [r7, #12]
 811f4f6:	68db      	ldr	r3, [r3, #12]
 811f4f8:	687a      	ldr	r2, [r7, #4]
 811f4fa:	429a      	cmp	r2, r3
 811f4fc:	d104      	bne.n	811f508 <tcp_process+0x738>
 811f4fe:	687b      	ldr	r3, [r7, #4]
 811f500:	68da      	ldr	r2, [r3, #12]
 811f502:	68fb      	ldr	r3, [r7, #12]
 811f504:	60da      	str	r2, [r3, #12]
 811f506:	e005      	b.n	811f514 <tcp_process+0x744>
 811f508:	68fb      	ldr	r3, [r7, #12]
 811f50a:	68db      	ldr	r3, [r3, #12]
 811f50c:	60fb      	str	r3, [r7, #12]
 811f50e:	68fb      	ldr	r3, [r7, #12]
 811f510:	2b00      	cmp	r3, #0
 811f512:	d1ef      	bne.n	811f4f4 <tcp_process+0x724>
 811f514:	687b      	ldr	r3, [r7, #4]
 811f516:	2200      	movs	r2, #0
 811f518:	60da      	str	r2, [r3, #12]
 811f51a:	4b1f      	ldr	r3, [pc, #124]	@ (811f598 <tcp_process+0x7c8>)
 811f51c:	2201      	movs	r2, #1
 811f51e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 811f520:	687b      	ldr	r3, [r7, #4]
 811f522:	220a      	movs	r2, #10
 811f524:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811f526:	4b1d      	ldr	r3, [pc, #116]	@ (811f59c <tcp_process+0x7cc>)
 811f528:	681a      	ldr	r2, [r3, #0]
 811f52a:	687b      	ldr	r3, [r7, #4]
 811f52c:	60da      	str	r2, [r3, #12]
 811f52e:	4a1b      	ldr	r2, [pc, #108]	@ (811f59c <tcp_process+0x7cc>)
 811f530:	687b      	ldr	r3, [r7, #4]
 811f532:	6013      	str	r3, [r2, #0]
 811f534:	f003 f9fa 	bl	812292c <tcp_timer_needed>
      }
      break;
 811f538:	e026      	b.n	811f588 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 811f53a:	6878      	ldr	r0, [r7, #4]
 811f53c:	f000 f93c 	bl	811f7b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 811f540:	4b17      	ldr	r3, [pc, #92]	@ (811f5a0 <tcp_process+0x7d0>)
 811f542:	781b      	ldrb	r3, [r3, #0]
 811f544:	f003 0310 	and.w	r3, r3, #16
 811f548:	2b00      	cmp	r3, #0
 811f54a:	d01f      	beq.n	811f58c <tcp_process+0x7bc>
 811f54c:	687b      	ldr	r3, [r7, #4]
 811f54e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811f550:	4b14      	ldr	r3, [pc, #80]	@ (811f5a4 <tcp_process+0x7d4>)
 811f552:	681b      	ldr	r3, [r3, #0]
 811f554:	429a      	cmp	r2, r3
 811f556:	d119      	bne.n	811f58c <tcp_process+0x7bc>
 811f558:	687b      	ldr	r3, [r7, #4]
 811f55a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f55c:	2b00      	cmp	r3, #0
 811f55e:	d115      	bne.n	811f58c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 811f560:	4b11      	ldr	r3, [pc, #68]	@ (811f5a8 <tcp_process+0x7d8>)
 811f562:	781b      	ldrb	r3, [r3, #0]
 811f564:	f043 0310 	orr.w	r3, r3, #16
 811f568:	b2da      	uxtb	r2, r3
 811f56a:	4b0f      	ldr	r3, [pc, #60]	@ (811f5a8 <tcp_process+0x7d8>)
 811f56c:	701a      	strb	r2, [r3, #0]
      }
      break;
 811f56e:	e00d      	b.n	811f58c <tcp_process+0x7bc>
    default:
      break;
 811f570:	bf00      	nop
 811f572:	e00c      	b.n	811f58e <tcp_process+0x7be>
      break;
 811f574:	bf00      	nop
 811f576:	e00a      	b.n	811f58e <tcp_process+0x7be>
      break;
 811f578:	bf00      	nop
 811f57a:	e008      	b.n	811f58e <tcp_process+0x7be>
      break;
 811f57c:	bf00      	nop
 811f57e:	e006      	b.n	811f58e <tcp_process+0x7be>
      break;
 811f580:	bf00      	nop
 811f582:	e004      	b.n	811f58e <tcp_process+0x7be>
      break;
 811f584:	bf00      	nop
 811f586:	e002      	b.n	811f58e <tcp_process+0x7be>
      break;
 811f588:	bf00      	nop
 811f58a:	e000      	b.n	811f58e <tcp_process+0x7be>
      break;
 811f58c:	bf00      	nop
  }
  return ERR_OK;
 811f58e:	2300      	movs	r3, #0
}
 811f590:	4618      	mov	r0, r3
 811f592:	3724      	adds	r7, #36	@ 0x24
 811f594:	46bd      	mov	sp, r7
 811f596:	bd90      	pop	{r4, r7, pc}
 811f598:	1000e4ac 	.word	0x1000e4ac
 811f59c:	1000e4a8 	.word	0x1000e4a8
 811f5a0:	1000e4dc 	.word	0x1000e4dc
 811f5a4:	1000e4d4 	.word	0x1000e4d4
 811f5a8:	1000e4dd 	.word	0x1000e4dd
 811f5ac:	1000e4a4 	.word	0x1000e4a4

0811f5b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 811f5b0:	b590      	push	{r4, r7, lr}
 811f5b2:	b085      	sub	sp, #20
 811f5b4:	af00      	add	r7, sp, #0
 811f5b6:	6078      	str	r0, [r7, #4]
 811f5b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 811f5ba:	687b      	ldr	r3, [r7, #4]
 811f5bc:	2b00      	cmp	r3, #0
 811f5be:	d106      	bne.n	811f5ce <tcp_oos_insert_segment+0x1e>
 811f5c0:	4b3b      	ldr	r3, [pc, #236]	@ (811f6b0 <tcp_oos_insert_segment+0x100>)
 811f5c2:	f240 421f 	movw	r2, #1055	@ 0x41f
 811f5c6:	493b      	ldr	r1, [pc, #236]	@ (811f6b4 <tcp_oos_insert_segment+0x104>)
 811f5c8:	483b      	ldr	r0, [pc, #236]	@ (811f6b8 <tcp_oos_insert_segment+0x108>)
 811f5ca:	f005 f847 	bl	812465c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 811f5ce:	687b      	ldr	r3, [r7, #4]
 811f5d0:	68db      	ldr	r3, [r3, #12]
 811f5d2:	899b      	ldrh	r3, [r3, #12]
 811f5d4:	b29b      	uxth	r3, r3
 811f5d6:	4618      	mov	r0, r3
 811f5d8:	f7f8 fa90 	bl	8117afc <lwip_htons>
 811f5dc:	4603      	mov	r3, r0
 811f5de:	b2db      	uxtb	r3, r3
 811f5e0:	f003 0301 	and.w	r3, r3, #1
 811f5e4:	2b00      	cmp	r3, #0
 811f5e6:	d028      	beq.n	811f63a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 811f5e8:	6838      	ldr	r0, [r7, #0]
 811f5ea:	f7fe f9fb 	bl	811d9e4 <tcp_segs_free>
    next = NULL;
 811f5ee:	2300      	movs	r3, #0
 811f5f0:	603b      	str	r3, [r7, #0]
 811f5f2:	e056      	b.n	811f6a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811f5f4:	683b      	ldr	r3, [r7, #0]
 811f5f6:	68db      	ldr	r3, [r3, #12]
 811f5f8:	899b      	ldrh	r3, [r3, #12]
 811f5fa:	b29b      	uxth	r3, r3
 811f5fc:	4618      	mov	r0, r3
 811f5fe:	f7f8 fa7d 	bl	8117afc <lwip_htons>
 811f602:	4603      	mov	r3, r0
 811f604:	b2db      	uxtb	r3, r3
 811f606:	f003 0301 	and.w	r3, r3, #1
 811f60a:	2b00      	cmp	r3, #0
 811f60c:	d00d      	beq.n	811f62a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 811f60e:	687b      	ldr	r3, [r7, #4]
 811f610:	68db      	ldr	r3, [r3, #12]
 811f612:	899b      	ldrh	r3, [r3, #12]
 811f614:	b29c      	uxth	r4, r3
 811f616:	2001      	movs	r0, #1
 811f618:	f7f8 fa70 	bl	8117afc <lwip_htons>
 811f61c:	4603      	mov	r3, r0
 811f61e:	461a      	mov	r2, r3
 811f620:	687b      	ldr	r3, [r7, #4]
 811f622:	68db      	ldr	r3, [r3, #12]
 811f624:	4322      	orrs	r2, r4
 811f626:	b292      	uxth	r2, r2
 811f628:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 811f62a:	683b      	ldr	r3, [r7, #0]
 811f62c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 811f62e:	683b      	ldr	r3, [r7, #0]
 811f630:	681b      	ldr	r3, [r3, #0]
 811f632:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 811f634:	68f8      	ldr	r0, [r7, #12]
 811f636:	f7fe f9ea 	bl	811da0e <tcp_seg_free>
    while (next &&
 811f63a:	683b      	ldr	r3, [r7, #0]
 811f63c:	2b00      	cmp	r3, #0
 811f63e:	d00e      	beq.n	811f65e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 811f640:	687b      	ldr	r3, [r7, #4]
 811f642:	891b      	ldrh	r3, [r3, #8]
 811f644:	461a      	mov	r2, r3
 811f646:	4b1d      	ldr	r3, [pc, #116]	@ (811f6bc <tcp_oos_insert_segment+0x10c>)
 811f648:	681b      	ldr	r3, [r3, #0]
 811f64a:	441a      	add	r2, r3
 811f64c:	683b      	ldr	r3, [r7, #0]
 811f64e:	68db      	ldr	r3, [r3, #12]
 811f650:	685b      	ldr	r3, [r3, #4]
 811f652:	6839      	ldr	r1, [r7, #0]
 811f654:	8909      	ldrh	r1, [r1, #8]
 811f656:	440b      	add	r3, r1
 811f658:	1ad3      	subs	r3, r2, r3
    while (next &&
 811f65a:	2b00      	cmp	r3, #0
 811f65c:	daca      	bge.n	811f5f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 811f65e:	683b      	ldr	r3, [r7, #0]
 811f660:	2b00      	cmp	r3, #0
 811f662:	d01e      	beq.n	811f6a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 811f664:	687b      	ldr	r3, [r7, #4]
 811f666:	891b      	ldrh	r3, [r3, #8]
 811f668:	461a      	mov	r2, r3
 811f66a:	4b14      	ldr	r3, [pc, #80]	@ (811f6bc <tcp_oos_insert_segment+0x10c>)
 811f66c:	681b      	ldr	r3, [r3, #0]
 811f66e:	441a      	add	r2, r3
 811f670:	683b      	ldr	r3, [r7, #0]
 811f672:	68db      	ldr	r3, [r3, #12]
 811f674:	685b      	ldr	r3, [r3, #4]
 811f676:	1ad3      	subs	r3, r2, r3
    if (next &&
 811f678:	2b00      	cmp	r3, #0
 811f67a:	dd12      	ble.n	811f6a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 811f67c:	683b      	ldr	r3, [r7, #0]
 811f67e:	68db      	ldr	r3, [r3, #12]
 811f680:	685b      	ldr	r3, [r3, #4]
 811f682:	b29a      	uxth	r2, r3
 811f684:	4b0d      	ldr	r3, [pc, #52]	@ (811f6bc <tcp_oos_insert_segment+0x10c>)
 811f686:	681b      	ldr	r3, [r3, #0]
 811f688:	b29b      	uxth	r3, r3
 811f68a:	1ad3      	subs	r3, r2, r3
 811f68c:	b29a      	uxth	r2, r3
 811f68e:	687b      	ldr	r3, [r7, #4]
 811f690:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 811f692:	687b      	ldr	r3, [r7, #4]
 811f694:	685a      	ldr	r2, [r3, #4]
 811f696:	687b      	ldr	r3, [r7, #4]
 811f698:	891b      	ldrh	r3, [r3, #8]
 811f69a:	4619      	mov	r1, r3
 811f69c:	4610      	mov	r0, r2
 811f69e:	f7fc fab1 	bl	811bc04 <pbuf_realloc>
    }
  }
  cseg->next = next;
 811f6a2:	687b      	ldr	r3, [r7, #4]
 811f6a4:	683a      	ldr	r2, [r7, #0]
 811f6a6:	601a      	str	r2, [r3, #0]
}
 811f6a8:	bf00      	nop
 811f6aa:	3714      	adds	r7, #20
 811f6ac:	46bd      	mov	sp, r7
 811f6ae:	bd90      	pop	{r4, r7, pc}
 811f6b0:	081271d4 	.word	0x081271d4
 811f6b4:	081274d4 	.word	0x081274d4
 811f6b8:	08127260 	.word	0x08127260
 811f6bc:	1000e4d0 	.word	0x1000e4d0

0811f6c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 811f6c0:	b5b0      	push	{r4, r5, r7, lr}
 811f6c2:	b086      	sub	sp, #24
 811f6c4:	af00      	add	r7, sp, #0
 811f6c6:	60f8      	str	r0, [r7, #12]
 811f6c8:	60b9      	str	r1, [r7, #8]
 811f6ca:	607a      	str	r2, [r7, #4]
 811f6cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 811f6ce:	e03e      	b.n	811f74e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 811f6d0:	68bb      	ldr	r3, [r7, #8]
 811f6d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 811f6d4:	68bb      	ldr	r3, [r7, #8]
 811f6d6:	681b      	ldr	r3, [r3, #0]
 811f6d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 811f6da:	697b      	ldr	r3, [r7, #20]
 811f6dc:	685b      	ldr	r3, [r3, #4]
 811f6de:	4618      	mov	r0, r3
 811f6e0:	f7fc fca2 	bl	811c028 <pbuf_clen>
 811f6e4:	4603      	mov	r3, r0
 811f6e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 811f6e8:	68fb      	ldr	r3, [r7, #12]
 811f6ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f6ee:	8a7a      	ldrh	r2, [r7, #18]
 811f6f0:	429a      	cmp	r2, r3
 811f6f2:	d906      	bls.n	811f702 <tcp_free_acked_segments+0x42>
 811f6f4:	4b2a      	ldr	r3, [pc, #168]	@ (811f7a0 <tcp_free_acked_segments+0xe0>)
 811f6f6:	f240 4257 	movw	r2, #1111	@ 0x457
 811f6fa:	492a      	ldr	r1, [pc, #168]	@ (811f7a4 <tcp_free_acked_segments+0xe4>)
 811f6fc:	482a      	ldr	r0, [pc, #168]	@ (811f7a8 <tcp_free_acked_segments+0xe8>)
 811f6fe:	f004 ffad 	bl	812465c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 811f702:	68fb      	ldr	r3, [r7, #12]
 811f704:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 811f708:	8a7b      	ldrh	r3, [r7, #18]
 811f70a:	1ad3      	subs	r3, r2, r3
 811f70c:	b29a      	uxth	r2, r3
 811f70e:	68fb      	ldr	r3, [r7, #12]
 811f710:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 811f714:	697b      	ldr	r3, [r7, #20]
 811f716:	891a      	ldrh	r2, [r3, #8]
 811f718:	4b24      	ldr	r3, [pc, #144]	@ (811f7ac <tcp_free_acked_segments+0xec>)
 811f71a:	881b      	ldrh	r3, [r3, #0]
 811f71c:	4413      	add	r3, r2
 811f71e:	b29a      	uxth	r2, r3
 811f720:	4b22      	ldr	r3, [pc, #136]	@ (811f7ac <tcp_free_acked_segments+0xec>)
 811f722:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 811f724:	6978      	ldr	r0, [r7, #20]
 811f726:	f7fe f972 	bl	811da0e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 811f72a:	68fb      	ldr	r3, [r7, #12]
 811f72c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f730:	2b00      	cmp	r3, #0
 811f732:	d00c      	beq.n	811f74e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 811f734:	68bb      	ldr	r3, [r7, #8]
 811f736:	2b00      	cmp	r3, #0
 811f738:	d109      	bne.n	811f74e <tcp_free_acked_segments+0x8e>
 811f73a:	683b      	ldr	r3, [r7, #0]
 811f73c:	2b00      	cmp	r3, #0
 811f73e:	d106      	bne.n	811f74e <tcp_free_acked_segments+0x8e>
 811f740:	4b17      	ldr	r3, [pc, #92]	@ (811f7a0 <tcp_free_acked_segments+0xe0>)
 811f742:	f240 4261 	movw	r2, #1121	@ 0x461
 811f746:	491a      	ldr	r1, [pc, #104]	@ (811f7b0 <tcp_free_acked_segments+0xf0>)
 811f748:	4817      	ldr	r0, [pc, #92]	@ (811f7a8 <tcp_free_acked_segments+0xe8>)
 811f74a:	f004 ff87 	bl	812465c <iprintf>
  while (seg_list != NULL &&
 811f74e:	68bb      	ldr	r3, [r7, #8]
 811f750:	2b00      	cmp	r3, #0
 811f752:	d020      	beq.n	811f796 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 811f754:	68bb      	ldr	r3, [r7, #8]
 811f756:	68db      	ldr	r3, [r3, #12]
 811f758:	685b      	ldr	r3, [r3, #4]
 811f75a:	4618      	mov	r0, r3
 811f75c:	f7f8 f9e3 	bl	8117b26 <lwip_htonl>
 811f760:	4604      	mov	r4, r0
 811f762:	68bb      	ldr	r3, [r7, #8]
 811f764:	891b      	ldrh	r3, [r3, #8]
 811f766:	461d      	mov	r5, r3
 811f768:	68bb      	ldr	r3, [r7, #8]
 811f76a:	68db      	ldr	r3, [r3, #12]
 811f76c:	899b      	ldrh	r3, [r3, #12]
 811f76e:	b29b      	uxth	r3, r3
 811f770:	4618      	mov	r0, r3
 811f772:	f7f8 f9c3 	bl	8117afc <lwip_htons>
 811f776:	4603      	mov	r3, r0
 811f778:	b2db      	uxtb	r3, r3
 811f77a:	f003 0303 	and.w	r3, r3, #3
 811f77e:	2b00      	cmp	r3, #0
 811f780:	d001      	beq.n	811f786 <tcp_free_acked_segments+0xc6>
 811f782:	2301      	movs	r3, #1
 811f784:	e000      	b.n	811f788 <tcp_free_acked_segments+0xc8>
 811f786:	2300      	movs	r3, #0
 811f788:	442b      	add	r3, r5
 811f78a:	18e2      	adds	r2, r4, r3
 811f78c:	4b09      	ldr	r3, [pc, #36]	@ (811f7b4 <tcp_free_acked_segments+0xf4>)
 811f78e:	681b      	ldr	r3, [r3, #0]
 811f790:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 811f792:	2b00      	cmp	r3, #0
 811f794:	dd9c      	ble.n	811f6d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 811f796:	68bb      	ldr	r3, [r7, #8]
}
 811f798:	4618      	mov	r0, r3
 811f79a:	3718      	adds	r7, #24
 811f79c:	46bd      	mov	sp, r7
 811f79e:	bdb0      	pop	{r4, r5, r7, pc}
 811f7a0:	081271d4 	.word	0x081271d4
 811f7a4:	081274fc 	.word	0x081274fc
 811f7a8:	08127260 	.word	0x08127260
 811f7ac:	1000e4d8 	.word	0x1000e4d8
 811f7b0:	08127524 	.word	0x08127524
 811f7b4:	1000e4d4 	.word	0x1000e4d4

0811f7b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 811f7b8:	b5b0      	push	{r4, r5, r7, lr}
 811f7ba:	b094      	sub	sp, #80	@ 0x50
 811f7bc:	af00      	add	r7, sp, #0
 811f7be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 811f7c0:	2300      	movs	r3, #0
 811f7c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 811f7c4:	687b      	ldr	r3, [r7, #4]
 811f7c6:	2b00      	cmp	r3, #0
 811f7c8:	d106      	bne.n	811f7d8 <tcp_receive+0x20>
 811f7ca:	4b91      	ldr	r3, [pc, #580]	@ (811fa10 <tcp_receive+0x258>)
 811f7cc:	f240 427b 	movw	r2, #1147	@ 0x47b
 811f7d0:	4990      	ldr	r1, [pc, #576]	@ (811fa14 <tcp_receive+0x25c>)
 811f7d2:	4891      	ldr	r0, [pc, #580]	@ (811fa18 <tcp_receive+0x260>)
 811f7d4:	f004 ff42 	bl	812465c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 811f7d8:	687b      	ldr	r3, [r7, #4]
 811f7da:	7d1b      	ldrb	r3, [r3, #20]
 811f7dc:	2b03      	cmp	r3, #3
 811f7de:	d806      	bhi.n	811f7ee <tcp_receive+0x36>
 811f7e0:	4b8b      	ldr	r3, [pc, #556]	@ (811fa10 <tcp_receive+0x258>)
 811f7e2:	f240 427c 	movw	r2, #1148	@ 0x47c
 811f7e6:	498d      	ldr	r1, [pc, #564]	@ (811fa1c <tcp_receive+0x264>)
 811f7e8:	488b      	ldr	r0, [pc, #556]	@ (811fa18 <tcp_receive+0x260>)
 811f7ea:	f004 ff37 	bl	812465c <iprintf>

  if (flags & TCP_ACK) {
 811f7ee:	4b8c      	ldr	r3, [pc, #560]	@ (811fa20 <tcp_receive+0x268>)
 811f7f0:	781b      	ldrb	r3, [r3, #0]
 811f7f2:	f003 0310 	and.w	r3, r3, #16
 811f7f6:	2b00      	cmp	r3, #0
 811f7f8:	f000 8264 	beq.w	811fcc4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 811f7fc:	687b      	ldr	r3, [r7, #4]
 811f7fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811f802:	461a      	mov	r2, r3
 811f804:	687b      	ldr	r3, [r7, #4]
 811f806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811f808:	4413      	add	r3, r2
 811f80a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811f80c:	687b      	ldr	r3, [r7, #4]
 811f80e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811f810:	4b84      	ldr	r3, [pc, #528]	@ (811fa24 <tcp_receive+0x26c>)
 811f812:	681b      	ldr	r3, [r3, #0]
 811f814:	1ad3      	subs	r3, r2, r3
 811f816:	2b00      	cmp	r3, #0
 811f818:	db1b      	blt.n	811f852 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811f81a:	687b      	ldr	r3, [r7, #4]
 811f81c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811f81e:	4b81      	ldr	r3, [pc, #516]	@ (811fa24 <tcp_receive+0x26c>)
 811f820:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811f822:	429a      	cmp	r2, r3
 811f824:	d106      	bne.n	811f834 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811f826:	687b      	ldr	r3, [r7, #4]
 811f828:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811f82a:	4b7f      	ldr	r3, [pc, #508]	@ (811fa28 <tcp_receive+0x270>)
 811f82c:	681b      	ldr	r3, [r3, #0]
 811f82e:	1ad3      	subs	r3, r2, r3
 811f830:	2b00      	cmp	r3, #0
 811f832:	db0e      	blt.n	811f852 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811f834:	687b      	ldr	r3, [r7, #4]
 811f836:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811f838:	4b7b      	ldr	r3, [pc, #492]	@ (811fa28 <tcp_receive+0x270>)
 811f83a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811f83c:	429a      	cmp	r2, r3
 811f83e:	d125      	bne.n	811f88c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811f840:	4b7a      	ldr	r3, [pc, #488]	@ (811fa2c <tcp_receive+0x274>)
 811f842:	681b      	ldr	r3, [r3, #0]
 811f844:	89db      	ldrh	r3, [r3, #14]
 811f846:	b29a      	uxth	r2, r3
 811f848:	687b      	ldr	r3, [r7, #4]
 811f84a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811f84e:	429a      	cmp	r2, r3
 811f850:	d91c      	bls.n	811f88c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 811f852:	4b76      	ldr	r3, [pc, #472]	@ (811fa2c <tcp_receive+0x274>)
 811f854:	681b      	ldr	r3, [r3, #0]
 811f856:	89db      	ldrh	r3, [r3, #14]
 811f858:	b29a      	uxth	r2, r3
 811f85a:	687b      	ldr	r3, [r7, #4]
 811f85c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 811f860:	687b      	ldr	r3, [r7, #4]
 811f862:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 811f866:	687b      	ldr	r3, [r7, #4]
 811f868:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811f86c:	429a      	cmp	r2, r3
 811f86e:	d205      	bcs.n	811f87c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 811f870:	687b      	ldr	r3, [r7, #4]
 811f872:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811f876:	687b      	ldr	r3, [r7, #4]
 811f878:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 811f87c:	4b69      	ldr	r3, [pc, #420]	@ (811fa24 <tcp_receive+0x26c>)
 811f87e:	681a      	ldr	r2, [r3, #0]
 811f880:	687b      	ldr	r3, [r7, #4]
 811f882:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 811f884:	4b68      	ldr	r3, [pc, #416]	@ (811fa28 <tcp_receive+0x270>)
 811f886:	681a      	ldr	r2, [r3, #0]
 811f888:	687b      	ldr	r3, [r7, #4]
 811f88a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 811f88c:	4b66      	ldr	r3, [pc, #408]	@ (811fa28 <tcp_receive+0x270>)
 811f88e:	681a      	ldr	r2, [r3, #0]
 811f890:	687b      	ldr	r3, [r7, #4]
 811f892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811f894:	1ad3      	subs	r3, r2, r3
 811f896:	2b00      	cmp	r3, #0
 811f898:	dc58      	bgt.n	811f94c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 811f89a:	4b65      	ldr	r3, [pc, #404]	@ (811fa30 <tcp_receive+0x278>)
 811f89c:	881b      	ldrh	r3, [r3, #0]
 811f89e:	2b00      	cmp	r3, #0
 811f8a0:	d14b      	bne.n	811f93a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 811f8a2:	687b      	ldr	r3, [r7, #4]
 811f8a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811f8a6:	687a      	ldr	r2, [r7, #4]
 811f8a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 811f8ac:	4413      	add	r3, r2
 811f8ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811f8b0:	429a      	cmp	r2, r3
 811f8b2:	d142      	bne.n	811f93a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 811f8b4:	687b      	ldr	r3, [r7, #4]
 811f8b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811f8ba:	2b00      	cmp	r3, #0
 811f8bc:	db3d      	blt.n	811f93a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 811f8be:	687b      	ldr	r3, [r7, #4]
 811f8c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811f8c2:	4b59      	ldr	r3, [pc, #356]	@ (811fa28 <tcp_receive+0x270>)
 811f8c4:	681b      	ldr	r3, [r3, #0]
 811f8c6:	429a      	cmp	r2, r3
 811f8c8:	d137      	bne.n	811f93a <tcp_receive+0x182>
              found_dupack = 1;
 811f8ca:	2301      	movs	r3, #1
 811f8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 811f8ce:	687b      	ldr	r3, [r7, #4]
 811f8d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811f8d4:	2bff      	cmp	r3, #255	@ 0xff
 811f8d6:	d007      	beq.n	811f8e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 811f8d8:	687b      	ldr	r3, [r7, #4]
 811f8da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811f8de:	3301      	adds	r3, #1
 811f8e0:	b2da      	uxtb	r2, r3
 811f8e2:	687b      	ldr	r3, [r7, #4]
 811f8e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 811f8e8:	687b      	ldr	r3, [r7, #4]
 811f8ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811f8ee:	2b03      	cmp	r3, #3
 811f8f0:	d91b      	bls.n	811f92a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 811f8f2:	687b      	ldr	r3, [r7, #4]
 811f8f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811f8f8:	687b      	ldr	r3, [r7, #4]
 811f8fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f8fc:	4413      	add	r3, r2
 811f8fe:	b29a      	uxth	r2, r3
 811f900:	687b      	ldr	r3, [r7, #4]
 811f902:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811f906:	429a      	cmp	r2, r3
 811f908:	d30a      	bcc.n	811f920 <tcp_receive+0x168>
 811f90a:	687b      	ldr	r3, [r7, #4]
 811f90c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811f910:	687b      	ldr	r3, [r7, #4]
 811f912:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f914:	4413      	add	r3, r2
 811f916:	b29a      	uxth	r2, r3
 811f918:	687b      	ldr	r3, [r7, #4]
 811f91a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811f91e:	e004      	b.n	811f92a <tcp_receive+0x172>
 811f920:	687b      	ldr	r3, [r7, #4]
 811f922:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811f926:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 811f92a:	687b      	ldr	r3, [r7, #4]
 811f92c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811f930:	2b02      	cmp	r3, #2
 811f932:	d902      	bls.n	811f93a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 811f934:	6878      	ldr	r0, [r7, #4]
 811f936:	f002 fb3f 	bl	8121fb8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 811f93a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811f93c:	2b00      	cmp	r3, #0
 811f93e:	f040 8161 	bne.w	811fc04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 811f942:	687b      	ldr	r3, [r7, #4]
 811f944:	2200      	movs	r2, #0
 811f946:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 811f94a:	e15b      	b.n	811fc04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811f94c:	4b36      	ldr	r3, [pc, #216]	@ (811fa28 <tcp_receive+0x270>)
 811f94e:	681a      	ldr	r2, [r3, #0]
 811f950:	687b      	ldr	r3, [r7, #4]
 811f952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811f954:	1ad3      	subs	r3, r2, r3
 811f956:	3b01      	subs	r3, #1
 811f958:	2b00      	cmp	r3, #0
 811f95a:	f2c0 814e 	blt.w	811fbfa <tcp_receive+0x442>
 811f95e:	4b32      	ldr	r3, [pc, #200]	@ (811fa28 <tcp_receive+0x270>)
 811f960:	681a      	ldr	r2, [r3, #0]
 811f962:	687b      	ldr	r3, [r7, #4]
 811f964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811f966:	1ad3      	subs	r3, r2, r3
 811f968:	2b00      	cmp	r3, #0
 811f96a:	f300 8146 	bgt.w	811fbfa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 811f96e:	687b      	ldr	r3, [r7, #4]
 811f970:	8b5b      	ldrh	r3, [r3, #26]
 811f972:	f003 0304 	and.w	r3, r3, #4
 811f976:	2b00      	cmp	r3, #0
 811f978:	d010      	beq.n	811f99c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 811f97a:	687b      	ldr	r3, [r7, #4]
 811f97c:	8b5b      	ldrh	r3, [r3, #26]
 811f97e:	f023 0304 	bic.w	r3, r3, #4
 811f982:	b29a      	uxth	r2, r3
 811f984:	687b      	ldr	r3, [r7, #4]
 811f986:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 811f988:	687b      	ldr	r3, [r7, #4]
 811f98a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811f98e:	687b      	ldr	r3, [r7, #4]
 811f990:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 811f994:	687b      	ldr	r3, [r7, #4]
 811f996:	2200      	movs	r2, #0
 811f998:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 811f99c:	687b      	ldr	r3, [r7, #4]
 811f99e:	2200      	movs	r2, #0
 811f9a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811f9a4:	687b      	ldr	r3, [r7, #4]
 811f9a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811f9aa:	10db      	asrs	r3, r3, #3
 811f9ac:	b21b      	sxth	r3, r3
 811f9ae:	b29a      	uxth	r2, r3
 811f9b0:	687b      	ldr	r3, [r7, #4]
 811f9b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811f9b6:	b29b      	uxth	r3, r3
 811f9b8:	4413      	add	r3, r2
 811f9ba:	b29b      	uxth	r3, r3
 811f9bc:	b21a      	sxth	r2, r3
 811f9be:	687b      	ldr	r3, [r7, #4]
 811f9c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 811f9c4:	4b18      	ldr	r3, [pc, #96]	@ (811fa28 <tcp_receive+0x270>)
 811f9c6:	681b      	ldr	r3, [r3, #0]
 811f9c8:	b29a      	uxth	r2, r3
 811f9ca:	687b      	ldr	r3, [r7, #4]
 811f9cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811f9ce:	b29b      	uxth	r3, r3
 811f9d0:	1ad3      	subs	r3, r2, r3
 811f9d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 811f9d4:	687b      	ldr	r3, [r7, #4]
 811f9d6:	2200      	movs	r2, #0
 811f9d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 811f9dc:	4b12      	ldr	r3, [pc, #72]	@ (811fa28 <tcp_receive+0x270>)
 811f9de:	681a      	ldr	r2, [r3, #0]
 811f9e0:	687b      	ldr	r3, [r7, #4]
 811f9e2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 811f9e4:	687b      	ldr	r3, [r7, #4]
 811f9e6:	7d1b      	ldrb	r3, [r3, #20]
 811f9e8:	2b03      	cmp	r3, #3
 811f9ea:	f240 8097 	bls.w	811fb1c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 811f9ee:	687b      	ldr	r3, [r7, #4]
 811f9f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811f9f4:	687b      	ldr	r3, [r7, #4]
 811f9f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811f9fa:	429a      	cmp	r2, r3
 811f9fc:	d245      	bcs.n	811fa8a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 811f9fe:	687b      	ldr	r3, [r7, #4]
 811fa00:	8b5b      	ldrh	r3, [r3, #26]
 811fa02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811fa06:	2b00      	cmp	r3, #0
 811fa08:	d014      	beq.n	811fa34 <tcp_receive+0x27c>
 811fa0a:	2301      	movs	r3, #1
 811fa0c:	e013      	b.n	811fa36 <tcp_receive+0x27e>
 811fa0e:	bf00      	nop
 811fa10:	081271d4 	.word	0x081271d4
 811fa14:	08127544 	.word	0x08127544
 811fa18:	08127260 	.word	0x08127260
 811fa1c:	08127560 	.word	0x08127560
 811fa20:	1000e4dc 	.word	0x1000e4dc
 811fa24:	1000e4d0 	.word	0x1000e4d0
 811fa28:	1000e4d4 	.word	0x1000e4d4
 811fa2c:	1000e4c0 	.word	0x1000e4c0
 811fa30:	1000e4da 	.word	0x1000e4da
 811fa34:	2302      	movs	r3, #2
 811fa36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 811fa3a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 811fa3e:	b29a      	uxth	r2, r3
 811fa40:	687b      	ldr	r3, [r7, #4]
 811fa42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811fa44:	fb12 f303 	smulbb	r3, r2, r3
 811fa48:	b29b      	uxth	r3, r3
 811fa4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 811fa4c:	4293      	cmp	r3, r2
 811fa4e:	bf28      	it	cs
 811fa50:	4613      	movcs	r3, r2
 811fa52:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 811fa54:	687b      	ldr	r3, [r7, #4]
 811fa56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811fa5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811fa5c:	4413      	add	r3, r2
 811fa5e:	b29a      	uxth	r2, r3
 811fa60:	687b      	ldr	r3, [r7, #4]
 811fa62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811fa66:	429a      	cmp	r2, r3
 811fa68:	d309      	bcc.n	811fa7e <tcp_receive+0x2c6>
 811fa6a:	687b      	ldr	r3, [r7, #4]
 811fa6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811fa70:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811fa72:	4413      	add	r3, r2
 811fa74:	b29a      	uxth	r2, r3
 811fa76:	687b      	ldr	r3, [r7, #4]
 811fa78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811fa7c:	e04e      	b.n	811fb1c <tcp_receive+0x364>
 811fa7e:	687b      	ldr	r3, [r7, #4]
 811fa80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811fa84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811fa88:	e048      	b.n	811fb1c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 811fa8a:	687b      	ldr	r3, [r7, #4]
 811fa8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811fa90:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811fa92:	4413      	add	r3, r2
 811fa94:	b29a      	uxth	r2, r3
 811fa96:	687b      	ldr	r3, [r7, #4]
 811fa98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 811fa9c:	429a      	cmp	r2, r3
 811fa9e:	d309      	bcc.n	811fab4 <tcp_receive+0x2fc>
 811faa0:	687b      	ldr	r3, [r7, #4]
 811faa2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811faa6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811faa8:	4413      	add	r3, r2
 811faaa:	b29a      	uxth	r2, r3
 811faac:	687b      	ldr	r3, [r7, #4]
 811faae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 811fab2:	e004      	b.n	811fabe <tcp_receive+0x306>
 811fab4:	687b      	ldr	r3, [r7, #4]
 811fab6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811faba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 811fabe:	687b      	ldr	r3, [r7, #4]
 811fac0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811fac4:	687b      	ldr	r3, [r7, #4]
 811fac6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811faca:	429a      	cmp	r2, r3
 811facc:	d326      	bcc.n	811fb1c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 811face:	687b      	ldr	r3, [r7, #4]
 811fad0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811fad4:	687b      	ldr	r3, [r7, #4]
 811fad6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811fada:	1ad3      	subs	r3, r2, r3
 811fadc:	b29a      	uxth	r2, r3
 811fade:	687b      	ldr	r3, [r7, #4]
 811fae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 811fae4:	687b      	ldr	r3, [r7, #4]
 811fae6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811faea:	687b      	ldr	r3, [r7, #4]
 811faec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811faee:	4413      	add	r3, r2
 811faf0:	b29a      	uxth	r2, r3
 811faf2:	687b      	ldr	r3, [r7, #4]
 811faf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811faf8:	429a      	cmp	r2, r3
 811fafa:	d30a      	bcc.n	811fb12 <tcp_receive+0x35a>
 811fafc:	687b      	ldr	r3, [r7, #4]
 811fafe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811fb02:	687b      	ldr	r3, [r7, #4]
 811fb04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811fb06:	4413      	add	r3, r2
 811fb08:	b29a      	uxth	r2, r3
 811fb0a:	687b      	ldr	r3, [r7, #4]
 811fb0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811fb10:	e004      	b.n	811fb1c <tcp_receive+0x364>
 811fb12:	687b      	ldr	r3, [r7, #4]
 811fb14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811fb18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 811fb1c:	687b      	ldr	r3, [r7, #4]
 811fb1e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 811fb20:	687b      	ldr	r3, [r7, #4]
 811fb22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811fb24:	4a98      	ldr	r2, [pc, #608]	@ (811fd88 <tcp_receive+0x5d0>)
 811fb26:	6878      	ldr	r0, [r7, #4]
 811fb28:	f7ff fdca 	bl	811f6c0 <tcp_free_acked_segments>
 811fb2c:	4602      	mov	r2, r0
 811fb2e:	687b      	ldr	r3, [r7, #4]
 811fb30:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 811fb32:	687b      	ldr	r3, [r7, #4]
 811fb34:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 811fb36:	687b      	ldr	r3, [r7, #4]
 811fb38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811fb3a:	4a94      	ldr	r2, [pc, #592]	@ (811fd8c <tcp_receive+0x5d4>)
 811fb3c:	6878      	ldr	r0, [r7, #4]
 811fb3e:	f7ff fdbf 	bl	811f6c0 <tcp_free_acked_segments>
 811fb42:	4602      	mov	r2, r0
 811fb44:	687b      	ldr	r3, [r7, #4]
 811fb46:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 811fb48:	687b      	ldr	r3, [r7, #4]
 811fb4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811fb4c:	2b00      	cmp	r3, #0
 811fb4e:	d104      	bne.n	811fb5a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 811fb50:	687b      	ldr	r3, [r7, #4]
 811fb52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811fb56:	861a      	strh	r2, [r3, #48]	@ 0x30
 811fb58:	e002      	b.n	811fb60 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 811fb5a:	687b      	ldr	r3, [r7, #4]
 811fb5c:	2200      	movs	r2, #0
 811fb5e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 811fb60:	687b      	ldr	r3, [r7, #4]
 811fb62:	2200      	movs	r2, #0
 811fb64:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 811fb66:	687b      	ldr	r3, [r7, #4]
 811fb68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811fb6a:	2b00      	cmp	r3, #0
 811fb6c:	d103      	bne.n	811fb76 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 811fb6e:	687b      	ldr	r3, [r7, #4]
 811fb70:	2200      	movs	r2, #0
 811fb72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 811fb76:	687b      	ldr	r3, [r7, #4]
 811fb78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 811fb7c:	4b84      	ldr	r3, [pc, #528]	@ (811fd90 <tcp_receive+0x5d8>)
 811fb7e:	881b      	ldrh	r3, [r3, #0]
 811fb80:	4413      	add	r3, r2
 811fb82:	b29a      	uxth	r2, r3
 811fb84:	687b      	ldr	r3, [r7, #4]
 811fb86:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 811fb8a:	687b      	ldr	r3, [r7, #4]
 811fb8c:	8b5b      	ldrh	r3, [r3, #26]
 811fb8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811fb92:	2b00      	cmp	r3, #0
 811fb94:	d035      	beq.n	811fc02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 811fb96:	687b      	ldr	r3, [r7, #4]
 811fb98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811fb9a:	2b00      	cmp	r3, #0
 811fb9c:	d118      	bne.n	811fbd0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 811fb9e:	687b      	ldr	r3, [r7, #4]
 811fba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811fba2:	2b00      	cmp	r3, #0
 811fba4:	d00c      	beq.n	811fbc0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 811fba6:	687b      	ldr	r3, [r7, #4]
 811fba8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811fbaa:	687b      	ldr	r3, [r7, #4]
 811fbac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811fbae:	68db      	ldr	r3, [r3, #12]
 811fbb0:	685b      	ldr	r3, [r3, #4]
 811fbb2:	4618      	mov	r0, r3
 811fbb4:	f7f7 ffb7 	bl	8117b26 <lwip_htonl>
 811fbb8:	4603      	mov	r3, r0
 811fbba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 811fbbc:	2b00      	cmp	r3, #0
 811fbbe:	dc20      	bgt.n	811fc02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 811fbc0:	687b      	ldr	r3, [r7, #4]
 811fbc2:	8b5b      	ldrh	r3, [r3, #26]
 811fbc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811fbc8:	b29a      	uxth	r2, r3
 811fbca:	687b      	ldr	r3, [r7, #4]
 811fbcc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811fbce:	e018      	b.n	811fc02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 811fbd0:	687b      	ldr	r3, [r7, #4]
 811fbd2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811fbd4:	687b      	ldr	r3, [r7, #4]
 811fbd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811fbd8:	68db      	ldr	r3, [r3, #12]
 811fbda:	685b      	ldr	r3, [r3, #4]
 811fbdc:	4618      	mov	r0, r3
 811fbde:	f7f7 ffa2 	bl	8117b26 <lwip_htonl>
 811fbe2:	4603      	mov	r3, r0
 811fbe4:	1ae3      	subs	r3, r4, r3
 811fbe6:	2b00      	cmp	r3, #0
 811fbe8:	dc0b      	bgt.n	811fc02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 811fbea:	687b      	ldr	r3, [r7, #4]
 811fbec:	8b5b      	ldrh	r3, [r3, #26]
 811fbee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811fbf2:	b29a      	uxth	r2, r3
 811fbf4:	687b      	ldr	r3, [r7, #4]
 811fbf6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811fbf8:	e003      	b.n	811fc02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 811fbfa:	6878      	ldr	r0, [r7, #4]
 811fbfc:	f002 fbc8 	bl	8122390 <tcp_send_empty_ack>
 811fc00:	e000      	b.n	811fc04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811fc02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 811fc04:	687b      	ldr	r3, [r7, #4]
 811fc06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811fc08:	2b00      	cmp	r3, #0
 811fc0a:	d05b      	beq.n	811fcc4 <tcp_receive+0x50c>
 811fc0c:	687b      	ldr	r3, [r7, #4]
 811fc0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811fc10:	4b60      	ldr	r3, [pc, #384]	@ (811fd94 <tcp_receive+0x5dc>)
 811fc12:	681b      	ldr	r3, [r3, #0]
 811fc14:	1ad3      	subs	r3, r2, r3
 811fc16:	2b00      	cmp	r3, #0
 811fc18:	da54      	bge.n	811fcc4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 811fc1a:	4b5f      	ldr	r3, [pc, #380]	@ (811fd98 <tcp_receive+0x5e0>)
 811fc1c:	681b      	ldr	r3, [r3, #0]
 811fc1e:	b29a      	uxth	r2, r3
 811fc20:	687b      	ldr	r3, [r7, #4]
 811fc22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811fc24:	b29b      	uxth	r3, r3
 811fc26:	1ad3      	subs	r3, r2, r3
 811fc28:	b29b      	uxth	r3, r3
 811fc2a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 811fc2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811fc32:	687b      	ldr	r3, [r7, #4]
 811fc34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811fc38:	10db      	asrs	r3, r3, #3
 811fc3a:	b21b      	sxth	r3, r3
 811fc3c:	b29b      	uxth	r3, r3
 811fc3e:	1ad3      	subs	r3, r2, r3
 811fc40:	b29b      	uxth	r3, r3
 811fc42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 811fc46:	687b      	ldr	r3, [r7, #4]
 811fc48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811fc4c:	b29a      	uxth	r2, r3
 811fc4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811fc52:	4413      	add	r3, r2
 811fc54:	b29b      	uxth	r3, r3
 811fc56:	b21a      	sxth	r2, r3
 811fc58:	687b      	ldr	r3, [r7, #4]
 811fc5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 811fc5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 811fc60:	2b00      	cmp	r3, #0
 811fc62:	da05      	bge.n	811fc70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 811fc64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811fc68:	425b      	negs	r3, r3
 811fc6a:	b29b      	uxth	r3, r3
 811fc6c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 811fc70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811fc74:	687b      	ldr	r3, [r7, #4]
 811fc76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811fc7a:	109b      	asrs	r3, r3, #2
 811fc7c:	b21b      	sxth	r3, r3
 811fc7e:	b29b      	uxth	r3, r3
 811fc80:	1ad3      	subs	r3, r2, r3
 811fc82:	b29b      	uxth	r3, r3
 811fc84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 811fc88:	687b      	ldr	r3, [r7, #4]
 811fc8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811fc8e:	b29a      	uxth	r2, r3
 811fc90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811fc94:	4413      	add	r3, r2
 811fc96:	b29b      	uxth	r3, r3
 811fc98:	b21a      	sxth	r2, r3
 811fc9a:	687b      	ldr	r3, [r7, #4]
 811fc9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811fc9e:	687b      	ldr	r3, [r7, #4]
 811fca0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811fca4:	10db      	asrs	r3, r3, #3
 811fca6:	b21b      	sxth	r3, r3
 811fca8:	b29a      	uxth	r2, r3
 811fcaa:	687b      	ldr	r3, [r7, #4]
 811fcac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811fcb0:	b29b      	uxth	r3, r3
 811fcb2:	4413      	add	r3, r2
 811fcb4:	b29b      	uxth	r3, r3
 811fcb6:	b21a      	sxth	r2, r3
 811fcb8:	687b      	ldr	r3, [r7, #4]
 811fcba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 811fcbe:	687b      	ldr	r3, [r7, #4]
 811fcc0:	2200      	movs	r2, #0
 811fcc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 811fcc4:	4b35      	ldr	r3, [pc, #212]	@ (811fd9c <tcp_receive+0x5e4>)
 811fcc6:	881b      	ldrh	r3, [r3, #0]
 811fcc8:	2b00      	cmp	r3, #0
 811fcca:	f000 84df 	beq.w	812068c <tcp_receive+0xed4>
 811fcce:	687b      	ldr	r3, [r7, #4]
 811fcd0:	7d1b      	ldrb	r3, [r3, #20]
 811fcd2:	2b06      	cmp	r3, #6
 811fcd4:	f200 84da 	bhi.w	812068c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811fcd8:	687b      	ldr	r3, [r7, #4]
 811fcda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811fcdc:	4b30      	ldr	r3, [pc, #192]	@ (811fda0 <tcp_receive+0x5e8>)
 811fcde:	681b      	ldr	r3, [r3, #0]
 811fce0:	1ad3      	subs	r3, r2, r3
 811fce2:	3b01      	subs	r3, #1
 811fce4:	2b00      	cmp	r3, #0
 811fce6:	f2c0 808f 	blt.w	811fe08 <tcp_receive+0x650>
 811fcea:	687b      	ldr	r3, [r7, #4]
 811fcec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811fcee:	4b2b      	ldr	r3, [pc, #172]	@ (811fd9c <tcp_receive+0x5e4>)
 811fcf0:	881b      	ldrh	r3, [r3, #0]
 811fcf2:	4619      	mov	r1, r3
 811fcf4:	4b2a      	ldr	r3, [pc, #168]	@ (811fda0 <tcp_receive+0x5e8>)
 811fcf6:	681b      	ldr	r3, [r3, #0]
 811fcf8:	440b      	add	r3, r1
 811fcfa:	1ad3      	subs	r3, r2, r3
 811fcfc:	3301      	adds	r3, #1
 811fcfe:	2b00      	cmp	r3, #0
 811fd00:	f300 8082 	bgt.w	811fe08 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 811fd04:	4b27      	ldr	r3, [pc, #156]	@ (811fda4 <tcp_receive+0x5ec>)
 811fd06:	685b      	ldr	r3, [r3, #4]
 811fd08:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 811fd0a:	687b      	ldr	r3, [r7, #4]
 811fd0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811fd0e:	4b24      	ldr	r3, [pc, #144]	@ (811fda0 <tcp_receive+0x5e8>)
 811fd10:	681b      	ldr	r3, [r3, #0]
 811fd12:	1ad3      	subs	r3, r2, r3
 811fd14:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 811fd16:	4b23      	ldr	r3, [pc, #140]	@ (811fda4 <tcp_receive+0x5ec>)
 811fd18:	685b      	ldr	r3, [r3, #4]
 811fd1a:	2b00      	cmp	r3, #0
 811fd1c:	d106      	bne.n	811fd2c <tcp_receive+0x574>
 811fd1e:	4b22      	ldr	r3, [pc, #136]	@ (811fda8 <tcp_receive+0x5f0>)
 811fd20:	f240 5294 	movw	r2, #1428	@ 0x594
 811fd24:	4921      	ldr	r1, [pc, #132]	@ (811fdac <tcp_receive+0x5f4>)
 811fd26:	4822      	ldr	r0, [pc, #136]	@ (811fdb0 <tcp_receive+0x5f8>)
 811fd28:	f004 fc98 	bl	812465c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 811fd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811fd2e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 811fd32:	4293      	cmp	r3, r2
 811fd34:	d906      	bls.n	811fd44 <tcp_receive+0x58c>
 811fd36:	4b1c      	ldr	r3, [pc, #112]	@ (811fda8 <tcp_receive+0x5f0>)
 811fd38:	f240 5295 	movw	r2, #1429	@ 0x595
 811fd3c:	491d      	ldr	r1, [pc, #116]	@ (811fdb4 <tcp_receive+0x5fc>)
 811fd3e:	481c      	ldr	r0, [pc, #112]	@ (811fdb0 <tcp_receive+0x5f8>)
 811fd40:	f004 fc8c 	bl	812465c <iprintf>
      off = (u16_t)off32;
 811fd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811fd46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 811fd4a:	4b16      	ldr	r3, [pc, #88]	@ (811fda4 <tcp_receive+0x5ec>)
 811fd4c:	685b      	ldr	r3, [r3, #4]
 811fd4e:	891b      	ldrh	r3, [r3, #8]
 811fd50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811fd54:	429a      	cmp	r2, r3
 811fd56:	d906      	bls.n	811fd66 <tcp_receive+0x5ae>
 811fd58:	4b13      	ldr	r3, [pc, #76]	@ (811fda8 <tcp_receive+0x5f0>)
 811fd5a:	f240 5297 	movw	r2, #1431	@ 0x597
 811fd5e:	4916      	ldr	r1, [pc, #88]	@ (811fdb8 <tcp_receive+0x600>)
 811fd60:	4813      	ldr	r0, [pc, #76]	@ (811fdb0 <tcp_receive+0x5f8>)
 811fd62:	f004 fc7b 	bl	812465c <iprintf>
      inseg.len -= off;
 811fd66:	4b0f      	ldr	r3, [pc, #60]	@ (811fda4 <tcp_receive+0x5ec>)
 811fd68:	891a      	ldrh	r2, [r3, #8]
 811fd6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811fd6e:	1ad3      	subs	r3, r2, r3
 811fd70:	b29a      	uxth	r2, r3
 811fd72:	4b0c      	ldr	r3, [pc, #48]	@ (811fda4 <tcp_receive+0x5ec>)
 811fd74:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 811fd76:	4b0b      	ldr	r3, [pc, #44]	@ (811fda4 <tcp_receive+0x5ec>)
 811fd78:	685b      	ldr	r3, [r3, #4]
 811fd7a:	891a      	ldrh	r2, [r3, #8]
 811fd7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811fd80:	1ad3      	subs	r3, r2, r3
 811fd82:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 811fd84:	e02a      	b.n	811fddc <tcp_receive+0x624>
 811fd86:	bf00      	nop
 811fd88:	0812757c 	.word	0x0812757c
 811fd8c:	08127584 	.word	0x08127584
 811fd90:	1000e4d8 	.word	0x1000e4d8
 811fd94:	1000e4d4 	.word	0x1000e4d4
 811fd98:	1000e498 	.word	0x1000e498
 811fd9c:	1000e4da 	.word	0x1000e4da
 811fda0:	1000e4d0 	.word	0x1000e4d0
 811fda4:	1000e4b0 	.word	0x1000e4b0
 811fda8:	081271d4 	.word	0x081271d4
 811fdac:	0812758c 	.word	0x0812758c
 811fdb0:	08127260 	.word	0x08127260
 811fdb4:	0812759c 	.word	0x0812759c
 811fdb8:	081275ac 	.word	0x081275ac
        off -= p->len;
 811fdbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811fdbe:	895b      	ldrh	r3, [r3, #10]
 811fdc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811fdc4:	1ad3      	subs	r3, r2, r3
 811fdc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 811fdca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811fdcc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811fdce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 811fdd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811fdd2:	2200      	movs	r2, #0
 811fdd4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 811fdd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811fdd8:	681b      	ldr	r3, [r3, #0]
 811fdda:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 811fddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811fdde:	895b      	ldrh	r3, [r3, #10]
 811fde0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811fde4:	429a      	cmp	r2, r3
 811fde6:	d8e9      	bhi.n	811fdbc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 811fde8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811fdec:	4619      	mov	r1, r3
 811fdee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 811fdf0:	f7fc f806 	bl	811be00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 811fdf4:	687b      	ldr	r3, [r7, #4]
 811fdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fdf8:	4a90      	ldr	r2, [pc, #576]	@ (812003c <tcp_receive+0x884>)
 811fdfa:	6013      	str	r3, [r2, #0]
 811fdfc:	4b90      	ldr	r3, [pc, #576]	@ (8120040 <tcp_receive+0x888>)
 811fdfe:	68db      	ldr	r3, [r3, #12]
 811fe00:	4a8e      	ldr	r2, [pc, #568]	@ (812003c <tcp_receive+0x884>)
 811fe02:	6812      	ldr	r2, [r2, #0]
 811fe04:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811fe06:	e00d      	b.n	811fe24 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 811fe08:	4b8c      	ldr	r3, [pc, #560]	@ (812003c <tcp_receive+0x884>)
 811fe0a:	681a      	ldr	r2, [r3, #0]
 811fe0c:	687b      	ldr	r3, [r7, #4]
 811fe0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fe10:	1ad3      	subs	r3, r2, r3
 811fe12:	2b00      	cmp	r3, #0
 811fe14:	da06      	bge.n	811fe24 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 811fe16:	687b      	ldr	r3, [r7, #4]
 811fe18:	8b5b      	ldrh	r3, [r3, #26]
 811fe1a:	f043 0302 	orr.w	r3, r3, #2
 811fe1e:	b29a      	uxth	r2, r3
 811fe20:	687b      	ldr	r3, [r7, #4]
 811fe22:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811fe24:	4b85      	ldr	r3, [pc, #532]	@ (812003c <tcp_receive+0x884>)
 811fe26:	681a      	ldr	r2, [r3, #0]
 811fe28:	687b      	ldr	r3, [r7, #4]
 811fe2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fe2c:	1ad3      	subs	r3, r2, r3
 811fe2e:	2b00      	cmp	r3, #0
 811fe30:	f2c0 8427 	blt.w	8120682 <tcp_receive+0xeca>
 811fe34:	4b81      	ldr	r3, [pc, #516]	@ (812003c <tcp_receive+0x884>)
 811fe36:	681a      	ldr	r2, [r3, #0]
 811fe38:	687b      	ldr	r3, [r7, #4]
 811fe3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fe3c:	6879      	ldr	r1, [r7, #4]
 811fe3e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811fe40:	440b      	add	r3, r1
 811fe42:	1ad3      	subs	r3, r2, r3
 811fe44:	3301      	adds	r3, #1
 811fe46:	2b00      	cmp	r3, #0
 811fe48:	f300 841b 	bgt.w	8120682 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 811fe4c:	687b      	ldr	r3, [r7, #4]
 811fe4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811fe50:	4b7a      	ldr	r3, [pc, #488]	@ (812003c <tcp_receive+0x884>)
 811fe52:	681b      	ldr	r3, [r3, #0]
 811fe54:	429a      	cmp	r2, r3
 811fe56:	f040 8298 	bne.w	812038a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 811fe5a:	4b79      	ldr	r3, [pc, #484]	@ (8120040 <tcp_receive+0x888>)
 811fe5c:	891c      	ldrh	r4, [r3, #8]
 811fe5e:	4b78      	ldr	r3, [pc, #480]	@ (8120040 <tcp_receive+0x888>)
 811fe60:	68db      	ldr	r3, [r3, #12]
 811fe62:	899b      	ldrh	r3, [r3, #12]
 811fe64:	b29b      	uxth	r3, r3
 811fe66:	4618      	mov	r0, r3
 811fe68:	f7f7 fe48 	bl	8117afc <lwip_htons>
 811fe6c:	4603      	mov	r3, r0
 811fe6e:	b2db      	uxtb	r3, r3
 811fe70:	f003 0303 	and.w	r3, r3, #3
 811fe74:	2b00      	cmp	r3, #0
 811fe76:	d001      	beq.n	811fe7c <tcp_receive+0x6c4>
 811fe78:	2301      	movs	r3, #1
 811fe7a:	e000      	b.n	811fe7e <tcp_receive+0x6c6>
 811fe7c:	2300      	movs	r3, #0
 811fe7e:	4423      	add	r3, r4
 811fe80:	b29a      	uxth	r2, r3
 811fe82:	4b70      	ldr	r3, [pc, #448]	@ (8120044 <tcp_receive+0x88c>)
 811fe84:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 811fe86:	687b      	ldr	r3, [r7, #4]
 811fe88:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811fe8a:	4b6e      	ldr	r3, [pc, #440]	@ (8120044 <tcp_receive+0x88c>)
 811fe8c:	881b      	ldrh	r3, [r3, #0]
 811fe8e:	429a      	cmp	r2, r3
 811fe90:	d274      	bcs.n	811ff7c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811fe92:	4b6b      	ldr	r3, [pc, #428]	@ (8120040 <tcp_receive+0x888>)
 811fe94:	68db      	ldr	r3, [r3, #12]
 811fe96:	899b      	ldrh	r3, [r3, #12]
 811fe98:	b29b      	uxth	r3, r3
 811fe9a:	4618      	mov	r0, r3
 811fe9c:	f7f7 fe2e 	bl	8117afc <lwip_htons>
 811fea0:	4603      	mov	r3, r0
 811fea2:	b2db      	uxtb	r3, r3
 811fea4:	f003 0301 	and.w	r3, r3, #1
 811fea8:	2b00      	cmp	r3, #0
 811feaa:	d01e      	beq.n	811feea <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 811feac:	4b64      	ldr	r3, [pc, #400]	@ (8120040 <tcp_receive+0x888>)
 811feae:	68db      	ldr	r3, [r3, #12]
 811feb0:	899b      	ldrh	r3, [r3, #12]
 811feb2:	b29b      	uxth	r3, r3
 811feb4:	b21b      	sxth	r3, r3
 811feb6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811feba:	b21c      	sxth	r4, r3
 811febc:	4b60      	ldr	r3, [pc, #384]	@ (8120040 <tcp_receive+0x888>)
 811febe:	68db      	ldr	r3, [r3, #12]
 811fec0:	899b      	ldrh	r3, [r3, #12]
 811fec2:	b29b      	uxth	r3, r3
 811fec4:	4618      	mov	r0, r3
 811fec6:	f7f7 fe19 	bl	8117afc <lwip_htons>
 811feca:	4603      	mov	r3, r0
 811fecc:	b2db      	uxtb	r3, r3
 811fece:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811fed2:	b29b      	uxth	r3, r3
 811fed4:	4618      	mov	r0, r3
 811fed6:	f7f7 fe11 	bl	8117afc <lwip_htons>
 811feda:	4603      	mov	r3, r0
 811fedc:	b21b      	sxth	r3, r3
 811fede:	4323      	orrs	r3, r4
 811fee0:	b21a      	sxth	r2, r3
 811fee2:	4b57      	ldr	r3, [pc, #348]	@ (8120040 <tcp_receive+0x888>)
 811fee4:	68db      	ldr	r3, [r3, #12]
 811fee6:	b292      	uxth	r2, r2
 811fee8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 811feea:	687b      	ldr	r3, [r7, #4]
 811feec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811feee:	4b54      	ldr	r3, [pc, #336]	@ (8120040 <tcp_receive+0x888>)
 811fef0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811fef2:	4b53      	ldr	r3, [pc, #332]	@ (8120040 <tcp_receive+0x888>)
 811fef4:	68db      	ldr	r3, [r3, #12]
 811fef6:	899b      	ldrh	r3, [r3, #12]
 811fef8:	b29b      	uxth	r3, r3
 811fefa:	4618      	mov	r0, r3
 811fefc:	f7f7 fdfe 	bl	8117afc <lwip_htons>
 811ff00:	4603      	mov	r3, r0
 811ff02:	b2db      	uxtb	r3, r3
 811ff04:	f003 0302 	and.w	r3, r3, #2
 811ff08:	2b00      	cmp	r3, #0
 811ff0a:	d005      	beq.n	811ff18 <tcp_receive+0x760>
            inseg.len -= 1;
 811ff0c:	4b4c      	ldr	r3, [pc, #304]	@ (8120040 <tcp_receive+0x888>)
 811ff0e:	891b      	ldrh	r3, [r3, #8]
 811ff10:	3b01      	subs	r3, #1
 811ff12:	b29a      	uxth	r2, r3
 811ff14:	4b4a      	ldr	r3, [pc, #296]	@ (8120040 <tcp_receive+0x888>)
 811ff16:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 811ff18:	4b49      	ldr	r3, [pc, #292]	@ (8120040 <tcp_receive+0x888>)
 811ff1a:	685b      	ldr	r3, [r3, #4]
 811ff1c:	4a48      	ldr	r2, [pc, #288]	@ (8120040 <tcp_receive+0x888>)
 811ff1e:	8912      	ldrh	r2, [r2, #8]
 811ff20:	4611      	mov	r1, r2
 811ff22:	4618      	mov	r0, r3
 811ff24:	f7fb fe6e 	bl	811bc04 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 811ff28:	4b45      	ldr	r3, [pc, #276]	@ (8120040 <tcp_receive+0x888>)
 811ff2a:	891c      	ldrh	r4, [r3, #8]
 811ff2c:	4b44      	ldr	r3, [pc, #272]	@ (8120040 <tcp_receive+0x888>)
 811ff2e:	68db      	ldr	r3, [r3, #12]
 811ff30:	899b      	ldrh	r3, [r3, #12]
 811ff32:	b29b      	uxth	r3, r3
 811ff34:	4618      	mov	r0, r3
 811ff36:	f7f7 fde1 	bl	8117afc <lwip_htons>
 811ff3a:	4603      	mov	r3, r0
 811ff3c:	b2db      	uxtb	r3, r3
 811ff3e:	f003 0303 	and.w	r3, r3, #3
 811ff42:	2b00      	cmp	r3, #0
 811ff44:	d001      	beq.n	811ff4a <tcp_receive+0x792>
 811ff46:	2301      	movs	r3, #1
 811ff48:	e000      	b.n	811ff4c <tcp_receive+0x794>
 811ff4a:	2300      	movs	r3, #0
 811ff4c:	4423      	add	r3, r4
 811ff4e:	b29a      	uxth	r2, r3
 811ff50:	4b3c      	ldr	r3, [pc, #240]	@ (8120044 <tcp_receive+0x88c>)
 811ff52:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811ff54:	4b3b      	ldr	r3, [pc, #236]	@ (8120044 <tcp_receive+0x88c>)
 811ff56:	881b      	ldrh	r3, [r3, #0]
 811ff58:	461a      	mov	r2, r3
 811ff5a:	4b38      	ldr	r3, [pc, #224]	@ (812003c <tcp_receive+0x884>)
 811ff5c:	681b      	ldr	r3, [r3, #0]
 811ff5e:	441a      	add	r2, r3
 811ff60:	687b      	ldr	r3, [r7, #4]
 811ff62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ff64:	6879      	ldr	r1, [r7, #4]
 811ff66:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811ff68:	440b      	add	r3, r1
 811ff6a:	429a      	cmp	r2, r3
 811ff6c:	d006      	beq.n	811ff7c <tcp_receive+0x7c4>
 811ff6e:	4b36      	ldr	r3, [pc, #216]	@ (8120048 <tcp_receive+0x890>)
 811ff70:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 811ff74:	4935      	ldr	r1, [pc, #212]	@ (812004c <tcp_receive+0x894>)
 811ff76:	4836      	ldr	r0, [pc, #216]	@ (8120050 <tcp_receive+0x898>)
 811ff78:	f004 fb70 	bl	812465c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 811ff7c:	687b      	ldr	r3, [r7, #4]
 811ff7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811ff80:	2b00      	cmp	r3, #0
 811ff82:	f000 80e6 	beq.w	8120152 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811ff86:	4b2e      	ldr	r3, [pc, #184]	@ (8120040 <tcp_receive+0x888>)
 811ff88:	68db      	ldr	r3, [r3, #12]
 811ff8a:	899b      	ldrh	r3, [r3, #12]
 811ff8c:	b29b      	uxth	r3, r3
 811ff8e:	4618      	mov	r0, r3
 811ff90:	f7f7 fdb4 	bl	8117afc <lwip_htons>
 811ff94:	4603      	mov	r3, r0
 811ff96:	b2db      	uxtb	r3, r3
 811ff98:	f003 0301 	and.w	r3, r3, #1
 811ff9c:	2b00      	cmp	r3, #0
 811ff9e:	d010      	beq.n	811ffc2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 811ffa0:	e00a      	b.n	811ffb8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 811ffa2:	687b      	ldr	r3, [r7, #4]
 811ffa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811ffa6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 811ffa8:	687b      	ldr	r3, [r7, #4]
 811ffaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811ffac:	681a      	ldr	r2, [r3, #0]
 811ffae:	687b      	ldr	r3, [r7, #4]
 811ffb0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 811ffb2:	68f8      	ldr	r0, [r7, #12]
 811ffb4:	f7fd fd2b 	bl	811da0e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 811ffb8:	687b      	ldr	r3, [r7, #4]
 811ffba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811ffbc:	2b00      	cmp	r3, #0
 811ffbe:	d1f0      	bne.n	811ffa2 <tcp_receive+0x7ea>
 811ffc0:	e0c7      	b.n	8120152 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 811ffc2:	687b      	ldr	r3, [r7, #4]
 811ffc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811ffc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 811ffc8:	e051      	b.n	812006e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811ffca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811ffcc:	68db      	ldr	r3, [r3, #12]
 811ffce:	899b      	ldrh	r3, [r3, #12]
 811ffd0:	b29b      	uxth	r3, r3
 811ffd2:	4618      	mov	r0, r3
 811ffd4:	f7f7 fd92 	bl	8117afc <lwip_htons>
 811ffd8:	4603      	mov	r3, r0
 811ffda:	b2db      	uxtb	r3, r3
 811ffdc:	f003 0301 	and.w	r3, r3, #1
 811ffe0:	2b00      	cmp	r3, #0
 811ffe2:	d03c      	beq.n	812005e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 811ffe4:	4b16      	ldr	r3, [pc, #88]	@ (8120040 <tcp_receive+0x888>)
 811ffe6:	68db      	ldr	r3, [r3, #12]
 811ffe8:	899b      	ldrh	r3, [r3, #12]
 811ffea:	b29b      	uxth	r3, r3
 811ffec:	4618      	mov	r0, r3
 811ffee:	f7f7 fd85 	bl	8117afc <lwip_htons>
 811fff2:	4603      	mov	r3, r0
 811fff4:	b2db      	uxtb	r3, r3
 811fff6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811fffa:	2b00      	cmp	r3, #0
 811fffc:	d12f      	bne.n	812005e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 811fffe:	4b10      	ldr	r3, [pc, #64]	@ (8120040 <tcp_receive+0x888>)
 8120000:	68db      	ldr	r3, [r3, #12]
 8120002:	899b      	ldrh	r3, [r3, #12]
 8120004:	b29c      	uxth	r4, r3
 8120006:	2001      	movs	r0, #1
 8120008:	f7f7 fd78 	bl	8117afc <lwip_htons>
 812000c:	4603      	mov	r3, r0
 812000e:	461a      	mov	r2, r3
 8120010:	4b0b      	ldr	r3, [pc, #44]	@ (8120040 <tcp_receive+0x888>)
 8120012:	68db      	ldr	r3, [r3, #12]
 8120014:	4322      	orrs	r2, r4
 8120016:	b292      	uxth	r2, r2
 8120018:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 812001a:	4b09      	ldr	r3, [pc, #36]	@ (8120040 <tcp_receive+0x888>)
 812001c:	891c      	ldrh	r4, [r3, #8]
 812001e:	4b08      	ldr	r3, [pc, #32]	@ (8120040 <tcp_receive+0x888>)
 8120020:	68db      	ldr	r3, [r3, #12]
 8120022:	899b      	ldrh	r3, [r3, #12]
 8120024:	b29b      	uxth	r3, r3
 8120026:	4618      	mov	r0, r3
 8120028:	f7f7 fd68 	bl	8117afc <lwip_htons>
 812002c:	4603      	mov	r3, r0
 812002e:	b2db      	uxtb	r3, r3
 8120030:	f003 0303 	and.w	r3, r3, #3
 8120034:	2b00      	cmp	r3, #0
 8120036:	d00d      	beq.n	8120054 <tcp_receive+0x89c>
 8120038:	2301      	movs	r3, #1
 812003a:	e00c      	b.n	8120056 <tcp_receive+0x89e>
 812003c:	1000e4d0 	.word	0x1000e4d0
 8120040:	1000e4b0 	.word	0x1000e4b0
 8120044:	1000e4da 	.word	0x1000e4da
 8120048:	081271d4 	.word	0x081271d4
 812004c:	081275bc 	.word	0x081275bc
 8120050:	08127260 	.word	0x08127260
 8120054:	2300      	movs	r3, #0
 8120056:	4423      	add	r3, r4
 8120058:	b29a      	uxth	r2, r3
 812005a:	4b98      	ldr	r3, [pc, #608]	@ (81202bc <tcp_receive+0xb04>)
 812005c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 812005e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8120060:	613b      	str	r3, [r7, #16]
              next = next->next;
 8120062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8120064:	681b      	ldr	r3, [r3, #0]
 8120066:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8120068:	6938      	ldr	r0, [r7, #16]
 812006a:	f7fd fcd0 	bl	811da0e <tcp_seg_free>
            while (next &&
 812006e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8120070:	2b00      	cmp	r3, #0
 8120072:	d00e      	beq.n	8120092 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8120074:	4b91      	ldr	r3, [pc, #580]	@ (81202bc <tcp_receive+0xb04>)
 8120076:	881b      	ldrh	r3, [r3, #0]
 8120078:	461a      	mov	r2, r3
 812007a:	4b91      	ldr	r3, [pc, #580]	@ (81202c0 <tcp_receive+0xb08>)
 812007c:	681b      	ldr	r3, [r3, #0]
 812007e:	441a      	add	r2, r3
 8120080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8120082:	68db      	ldr	r3, [r3, #12]
 8120084:	685b      	ldr	r3, [r3, #4]
 8120086:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8120088:	8909      	ldrh	r1, [r1, #8]
 812008a:	440b      	add	r3, r1
 812008c:	1ad3      	subs	r3, r2, r3
            while (next &&
 812008e:	2b00      	cmp	r3, #0
 8120090:	da9b      	bge.n	811ffca <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8120092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8120094:	2b00      	cmp	r3, #0
 8120096:	d059      	beq.n	812014c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8120098:	4b88      	ldr	r3, [pc, #544]	@ (81202bc <tcp_receive+0xb04>)
 812009a:	881b      	ldrh	r3, [r3, #0]
 812009c:	461a      	mov	r2, r3
 812009e:	4b88      	ldr	r3, [pc, #544]	@ (81202c0 <tcp_receive+0xb08>)
 81200a0:	681b      	ldr	r3, [r3, #0]
 81200a2:	441a      	add	r2, r3
 81200a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81200a6:	68db      	ldr	r3, [r3, #12]
 81200a8:	685b      	ldr	r3, [r3, #4]
 81200aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 81200ac:	2b00      	cmp	r3, #0
 81200ae:	dd4d      	ble.n	812014c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 81200b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81200b2:	68db      	ldr	r3, [r3, #12]
 81200b4:	685b      	ldr	r3, [r3, #4]
 81200b6:	b29a      	uxth	r2, r3
 81200b8:	4b81      	ldr	r3, [pc, #516]	@ (81202c0 <tcp_receive+0xb08>)
 81200ba:	681b      	ldr	r3, [r3, #0]
 81200bc:	b29b      	uxth	r3, r3
 81200be:	1ad3      	subs	r3, r2, r3
 81200c0:	b29a      	uxth	r2, r3
 81200c2:	4b80      	ldr	r3, [pc, #512]	@ (81202c4 <tcp_receive+0xb0c>)
 81200c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 81200c6:	4b7f      	ldr	r3, [pc, #508]	@ (81202c4 <tcp_receive+0xb0c>)
 81200c8:	68db      	ldr	r3, [r3, #12]
 81200ca:	899b      	ldrh	r3, [r3, #12]
 81200cc:	b29b      	uxth	r3, r3
 81200ce:	4618      	mov	r0, r3
 81200d0:	f7f7 fd14 	bl	8117afc <lwip_htons>
 81200d4:	4603      	mov	r3, r0
 81200d6:	b2db      	uxtb	r3, r3
 81200d8:	f003 0302 	and.w	r3, r3, #2
 81200dc:	2b00      	cmp	r3, #0
 81200de:	d005      	beq.n	81200ec <tcp_receive+0x934>
                inseg.len -= 1;
 81200e0:	4b78      	ldr	r3, [pc, #480]	@ (81202c4 <tcp_receive+0xb0c>)
 81200e2:	891b      	ldrh	r3, [r3, #8]
 81200e4:	3b01      	subs	r3, #1
 81200e6:	b29a      	uxth	r2, r3
 81200e8:	4b76      	ldr	r3, [pc, #472]	@ (81202c4 <tcp_receive+0xb0c>)
 81200ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 81200ec:	4b75      	ldr	r3, [pc, #468]	@ (81202c4 <tcp_receive+0xb0c>)
 81200ee:	685b      	ldr	r3, [r3, #4]
 81200f0:	4a74      	ldr	r2, [pc, #464]	@ (81202c4 <tcp_receive+0xb0c>)
 81200f2:	8912      	ldrh	r2, [r2, #8]
 81200f4:	4611      	mov	r1, r2
 81200f6:	4618      	mov	r0, r3
 81200f8:	f7fb fd84 	bl	811bc04 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 81200fc:	4b71      	ldr	r3, [pc, #452]	@ (81202c4 <tcp_receive+0xb0c>)
 81200fe:	891c      	ldrh	r4, [r3, #8]
 8120100:	4b70      	ldr	r3, [pc, #448]	@ (81202c4 <tcp_receive+0xb0c>)
 8120102:	68db      	ldr	r3, [r3, #12]
 8120104:	899b      	ldrh	r3, [r3, #12]
 8120106:	b29b      	uxth	r3, r3
 8120108:	4618      	mov	r0, r3
 812010a:	f7f7 fcf7 	bl	8117afc <lwip_htons>
 812010e:	4603      	mov	r3, r0
 8120110:	b2db      	uxtb	r3, r3
 8120112:	f003 0303 	and.w	r3, r3, #3
 8120116:	2b00      	cmp	r3, #0
 8120118:	d001      	beq.n	812011e <tcp_receive+0x966>
 812011a:	2301      	movs	r3, #1
 812011c:	e000      	b.n	8120120 <tcp_receive+0x968>
 812011e:	2300      	movs	r3, #0
 8120120:	4423      	add	r3, r4
 8120122:	b29a      	uxth	r2, r3
 8120124:	4b65      	ldr	r3, [pc, #404]	@ (81202bc <tcp_receive+0xb04>)
 8120126:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8120128:	4b64      	ldr	r3, [pc, #400]	@ (81202bc <tcp_receive+0xb04>)
 812012a:	881b      	ldrh	r3, [r3, #0]
 812012c:	461a      	mov	r2, r3
 812012e:	4b64      	ldr	r3, [pc, #400]	@ (81202c0 <tcp_receive+0xb08>)
 8120130:	681b      	ldr	r3, [r3, #0]
 8120132:	441a      	add	r2, r3
 8120134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8120136:	68db      	ldr	r3, [r3, #12]
 8120138:	685b      	ldr	r3, [r3, #4]
 812013a:	429a      	cmp	r2, r3
 812013c:	d006      	beq.n	812014c <tcp_receive+0x994>
 812013e:	4b62      	ldr	r3, [pc, #392]	@ (81202c8 <tcp_receive+0xb10>)
 8120140:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8120144:	4961      	ldr	r1, [pc, #388]	@ (81202cc <tcp_receive+0xb14>)
 8120146:	4862      	ldr	r0, [pc, #392]	@ (81202d0 <tcp_receive+0xb18>)
 8120148:	f004 fa88 	bl	812465c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 812014c:	687b      	ldr	r3, [r7, #4]
 812014e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8120150:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8120152:	4b5a      	ldr	r3, [pc, #360]	@ (81202bc <tcp_receive+0xb04>)
 8120154:	881b      	ldrh	r3, [r3, #0]
 8120156:	461a      	mov	r2, r3
 8120158:	4b59      	ldr	r3, [pc, #356]	@ (81202c0 <tcp_receive+0xb08>)
 812015a:	681b      	ldr	r3, [r3, #0]
 812015c:	441a      	add	r2, r3
 812015e:	687b      	ldr	r3, [r7, #4]
 8120160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8120162:	687b      	ldr	r3, [r7, #4]
 8120164:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8120166:	4b55      	ldr	r3, [pc, #340]	@ (81202bc <tcp_receive+0xb04>)
 8120168:	881b      	ldrh	r3, [r3, #0]
 812016a:	429a      	cmp	r2, r3
 812016c:	d206      	bcs.n	812017c <tcp_receive+0x9c4>
 812016e:	4b56      	ldr	r3, [pc, #344]	@ (81202c8 <tcp_receive+0xb10>)
 8120170:	f240 6207 	movw	r2, #1543	@ 0x607
 8120174:	4957      	ldr	r1, [pc, #348]	@ (81202d4 <tcp_receive+0xb1c>)
 8120176:	4856      	ldr	r0, [pc, #344]	@ (81202d0 <tcp_receive+0xb18>)
 8120178:	f004 fa70 	bl	812465c <iprintf>
        pcb->rcv_wnd -= tcplen;
 812017c:	687b      	ldr	r3, [r7, #4]
 812017e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8120180:	4b4e      	ldr	r3, [pc, #312]	@ (81202bc <tcp_receive+0xb04>)
 8120182:	881b      	ldrh	r3, [r3, #0]
 8120184:	1ad3      	subs	r3, r2, r3
 8120186:	b29a      	uxth	r2, r3
 8120188:	687b      	ldr	r3, [r7, #4]
 812018a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 812018c:	6878      	ldr	r0, [r7, #4]
 812018e:	f7fc fdf7 	bl	811cd80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8120192:	4b4c      	ldr	r3, [pc, #304]	@ (81202c4 <tcp_receive+0xb0c>)
 8120194:	685b      	ldr	r3, [r3, #4]
 8120196:	891b      	ldrh	r3, [r3, #8]
 8120198:	2b00      	cmp	r3, #0
 812019a:	d006      	beq.n	81201aa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 812019c:	4b49      	ldr	r3, [pc, #292]	@ (81202c4 <tcp_receive+0xb0c>)
 812019e:	685b      	ldr	r3, [r3, #4]
 81201a0:	4a4d      	ldr	r2, [pc, #308]	@ (81202d8 <tcp_receive+0xb20>)
 81201a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 81201a4:	4b47      	ldr	r3, [pc, #284]	@ (81202c4 <tcp_receive+0xb0c>)
 81201a6:	2200      	movs	r2, #0
 81201a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 81201aa:	4b46      	ldr	r3, [pc, #280]	@ (81202c4 <tcp_receive+0xb0c>)
 81201ac:	68db      	ldr	r3, [r3, #12]
 81201ae:	899b      	ldrh	r3, [r3, #12]
 81201b0:	b29b      	uxth	r3, r3
 81201b2:	4618      	mov	r0, r3
 81201b4:	f7f7 fca2 	bl	8117afc <lwip_htons>
 81201b8:	4603      	mov	r3, r0
 81201ba:	b2db      	uxtb	r3, r3
 81201bc:	f003 0301 	and.w	r3, r3, #1
 81201c0:	2b00      	cmp	r3, #0
 81201c2:	f000 80b8 	beq.w	8120336 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 81201c6:	4b45      	ldr	r3, [pc, #276]	@ (81202dc <tcp_receive+0xb24>)
 81201c8:	781b      	ldrb	r3, [r3, #0]
 81201ca:	f043 0320 	orr.w	r3, r3, #32
 81201ce:	b2da      	uxtb	r2, r3
 81201d0:	4b42      	ldr	r3, [pc, #264]	@ (81202dc <tcp_receive+0xb24>)
 81201d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 81201d4:	e0af      	b.n	8120336 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 81201d6:	687b      	ldr	r3, [r7, #4]
 81201d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81201da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 81201dc:	687b      	ldr	r3, [r7, #4]
 81201de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81201e0:	68db      	ldr	r3, [r3, #12]
 81201e2:	685b      	ldr	r3, [r3, #4]
 81201e4:	4a36      	ldr	r2, [pc, #216]	@ (81202c0 <tcp_receive+0xb08>)
 81201e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 81201e8:	68bb      	ldr	r3, [r7, #8]
 81201ea:	891b      	ldrh	r3, [r3, #8]
 81201ec:	461c      	mov	r4, r3
 81201ee:	68bb      	ldr	r3, [r7, #8]
 81201f0:	68db      	ldr	r3, [r3, #12]
 81201f2:	899b      	ldrh	r3, [r3, #12]
 81201f4:	b29b      	uxth	r3, r3
 81201f6:	4618      	mov	r0, r3
 81201f8:	f7f7 fc80 	bl	8117afc <lwip_htons>
 81201fc:	4603      	mov	r3, r0
 81201fe:	b2db      	uxtb	r3, r3
 8120200:	f003 0303 	and.w	r3, r3, #3
 8120204:	2b00      	cmp	r3, #0
 8120206:	d001      	beq.n	812020c <tcp_receive+0xa54>
 8120208:	2301      	movs	r3, #1
 812020a:	e000      	b.n	812020e <tcp_receive+0xa56>
 812020c:	2300      	movs	r3, #0
 812020e:	191a      	adds	r2, r3, r4
 8120210:	687b      	ldr	r3, [r7, #4]
 8120212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8120214:	441a      	add	r2, r3
 8120216:	687b      	ldr	r3, [r7, #4]
 8120218:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 812021a:	687b      	ldr	r3, [r7, #4]
 812021c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 812021e:	461c      	mov	r4, r3
 8120220:	68bb      	ldr	r3, [r7, #8]
 8120222:	891b      	ldrh	r3, [r3, #8]
 8120224:	461d      	mov	r5, r3
 8120226:	68bb      	ldr	r3, [r7, #8]
 8120228:	68db      	ldr	r3, [r3, #12]
 812022a:	899b      	ldrh	r3, [r3, #12]
 812022c:	b29b      	uxth	r3, r3
 812022e:	4618      	mov	r0, r3
 8120230:	f7f7 fc64 	bl	8117afc <lwip_htons>
 8120234:	4603      	mov	r3, r0
 8120236:	b2db      	uxtb	r3, r3
 8120238:	f003 0303 	and.w	r3, r3, #3
 812023c:	2b00      	cmp	r3, #0
 812023e:	d001      	beq.n	8120244 <tcp_receive+0xa8c>
 8120240:	2301      	movs	r3, #1
 8120242:	e000      	b.n	8120246 <tcp_receive+0xa8e>
 8120244:	2300      	movs	r3, #0
 8120246:	442b      	add	r3, r5
 8120248:	429c      	cmp	r4, r3
 812024a:	d206      	bcs.n	812025a <tcp_receive+0xaa2>
 812024c:	4b1e      	ldr	r3, [pc, #120]	@ (81202c8 <tcp_receive+0xb10>)
 812024e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8120252:	4923      	ldr	r1, [pc, #140]	@ (81202e0 <tcp_receive+0xb28>)
 8120254:	481e      	ldr	r0, [pc, #120]	@ (81202d0 <tcp_receive+0xb18>)
 8120256:	f004 fa01 	bl	812465c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 812025a:	68bb      	ldr	r3, [r7, #8]
 812025c:	891b      	ldrh	r3, [r3, #8]
 812025e:	461c      	mov	r4, r3
 8120260:	68bb      	ldr	r3, [r7, #8]
 8120262:	68db      	ldr	r3, [r3, #12]
 8120264:	899b      	ldrh	r3, [r3, #12]
 8120266:	b29b      	uxth	r3, r3
 8120268:	4618      	mov	r0, r3
 812026a:	f7f7 fc47 	bl	8117afc <lwip_htons>
 812026e:	4603      	mov	r3, r0
 8120270:	b2db      	uxtb	r3, r3
 8120272:	f003 0303 	and.w	r3, r3, #3
 8120276:	2b00      	cmp	r3, #0
 8120278:	d001      	beq.n	812027e <tcp_receive+0xac6>
 812027a:	2301      	movs	r3, #1
 812027c:	e000      	b.n	8120280 <tcp_receive+0xac8>
 812027e:	2300      	movs	r3, #0
 8120280:	1919      	adds	r1, r3, r4
 8120282:	687b      	ldr	r3, [r7, #4]
 8120284:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8120286:	b28b      	uxth	r3, r1
 8120288:	1ad3      	subs	r3, r2, r3
 812028a:	b29a      	uxth	r2, r3
 812028c:	687b      	ldr	r3, [r7, #4]
 812028e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8120290:	6878      	ldr	r0, [r7, #4]
 8120292:	f7fc fd75 	bl	811cd80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8120296:	68bb      	ldr	r3, [r7, #8]
 8120298:	685b      	ldr	r3, [r3, #4]
 812029a:	891b      	ldrh	r3, [r3, #8]
 812029c:	2b00      	cmp	r3, #0
 812029e:	d028      	beq.n	81202f2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 81202a0:	4b0d      	ldr	r3, [pc, #52]	@ (81202d8 <tcp_receive+0xb20>)
 81202a2:	681b      	ldr	r3, [r3, #0]
 81202a4:	2b00      	cmp	r3, #0
 81202a6:	d01d      	beq.n	81202e4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 81202a8:	4b0b      	ldr	r3, [pc, #44]	@ (81202d8 <tcp_receive+0xb20>)
 81202aa:	681a      	ldr	r2, [r3, #0]
 81202ac:	68bb      	ldr	r3, [r7, #8]
 81202ae:	685b      	ldr	r3, [r3, #4]
 81202b0:	4619      	mov	r1, r3
 81202b2:	4610      	mov	r0, r2
 81202b4:	f7fb fef8 	bl	811c0a8 <pbuf_cat>
 81202b8:	e018      	b.n	81202ec <tcp_receive+0xb34>
 81202ba:	bf00      	nop
 81202bc:	1000e4da 	.word	0x1000e4da
 81202c0:	1000e4d0 	.word	0x1000e4d0
 81202c4:	1000e4b0 	.word	0x1000e4b0
 81202c8:	081271d4 	.word	0x081271d4
 81202cc:	081275f4 	.word	0x081275f4
 81202d0:	08127260 	.word	0x08127260
 81202d4:	08127630 	.word	0x08127630
 81202d8:	1000e4e0 	.word	0x1000e4e0
 81202dc:	1000e4dd 	.word	0x1000e4dd
 81202e0:	08127650 	.word	0x08127650
            } else {
              recv_data = cseg->p;
 81202e4:	68bb      	ldr	r3, [r7, #8]
 81202e6:	685b      	ldr	r3, [r3, #4]
 81202e8:	4a70      	ldr	r2, [pc, #448]	@ (81204ac <tcp_receive+0xcf4>)
 81202ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 81202ec:	68bb      	ldr	r3, [r7, #8]
 81202ee:	2200      	movs	r2, #0
 81202f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 81202f2:	68bb      	ldr	r3, [r7, #8]
 81202f4:	68db      	ldr	r3, [r3, #12]
 81202f6:	899b      	ldrh	r3, [r3, #12]
 81202f8:	b29b      	uxth	r3, r3
 81202fa:	4618      	mov	r0, r3
 81202fc:	f7f7 fbfe 	bl	8117afc <lwip_htons>
 8120300:	4603      	mov	r3, r0
 8120302:	b2db      	uxtb	r3, r3
 8120304:	f003 0301 	and.w	r3, r3, #1
 8120308:	2b00      	cmp	r3, #0
 812030a:	d00d      	beq.n	8120328 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 812030c:	4b68      	ldr	r3, [pc, #416]	@ (81204b0 <tcp_receive+0xcf8>)
 812030e:	781b      	ldrb	r3, [r3, #0]
 8120310:	f043 0320 	orr.w	r3, r3, #32
 8120314:	b2da      	uxtb	r2, r3
 8120316:	4b66      	ldr	r3, [pc, #408]	@ (81204b0 <tcp_receive+0xcf8>)
 8120318:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 812031a:	687b      	ldr	r3, [r7, #4]
 812031c:	7d1b      	ldrb	r3, [r3, #20]
 812031e:	2b04      	cmp	r3, #4
 8120320:	d102      	bne.n	8120328 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8120322:	687b      	ldr	r3, [r7, #4]
 8120324:	2207      	movs	r2, #7
 8120326:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8120328:	68bb      	ldr	r3, [r7, #8]
 812032a:	681a      	ldr	r2, [r3, #0]
 812032c:	687b      	ldr	r3, [r7, #4]
 812032e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8120330:	68b8      	ldr	r0, [r7, #8]
 8120332:	f7fd fb6c 	bl	811da0e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8120336:	687b      	ldr	r3, [r7, #4]
 8120338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 812033a:	2b00      	cmp	r3, #0
 812033c:	d008      	beq.n	8120350 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 812033e:	687b      	ldr	r3, [r7, #4]
 8120340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8120342:	68db      	ldr	r3, [r3, #12]
 8120344:	685a      	ldr	r2, [r3, #4]
 8120346:	687b      	ldr	r3, [r7, #4]
 8120348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 812034a:	429a      	cmp	r2, r3
 812034c:	f43f af43 	beq.w	81201d6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8120350:	687b      	ldr	r3, [r7, #4]
 8120352:	8b5b      	ldrh	r3, [r3, #26]
 8120354:	f003 0301 	and.w	r3, r3, #1
 8120358:	2b00      	cmp	r3, #0
 812035a:	d00e      	beq.n	812037a <tcp_receive+0xbc2>
 812035c:	687b      	ldr	r3, [r7, #4]
 812035e:	8b5b      	ldrh	r3, [r3, #26]
 8120360:	f023 0301 	bic.w	r3, r3, #1
 8120364:	b29a      	uxth	r2, r3
 8120366:	687b      	ldr	r3, [r7, #4]
 8120368:	835a      	strh	r2, [r3, #26]
 812036a:	687b      	ldr	r3, [r7, #4]
 812036c:	8b5b      	ldrh	r3, [r3, #26]
 812036e:	f043 0302 	orr.w	r3, r3, #2
 8120372:	b29a      	uxth	r2, r3
 8120374:	687b      	ldr	r3, [r7, #4]
 8120376:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8120378:	e187      	b.n	812068a <tcp_receive+0xed2>
        tcp_ack(pcb);
 812037a:	687b      	ldr	r3, [r7, #4]
 812037c:	8b5b      	ldrh	r3, [r3, #26]
 812037e:	f043 0301 	orr.w	r3, r3, #1
 8120382:	b29a      	uxth	r2, r3
 8120384:	687b      	ldr	r3, [r7, #4]
 8120386:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8120388:	e17f      	b.n	812068a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 812038a:	687b      	ldr	r3, [r7, #4]
 812038c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 812038e:	2b00      	cmp	r3, #0
 8120390:	d106      	bne.n	81203a0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8120392:	4848      	ldr	r0, [pc, #288]	@ (81204b4 <tcp_receive+0xcfc>)
 8120394:	f7fd fb54 	bl	811da40 <tcp_seg_copy>
 8120398:	4602      	mov	r2, r0
 812039a:	687b      	ldr	r3, [r7, #4]
 812039c:	675a      	str	r2, [r3, #116]	@ 0x74
 812039e:	e16c      	b.n	812067a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 81203a0:	2300      	movs	r3, #0
 81203a2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 81203a4:	687b      	ldr	r3, [r7, #4]
 81203a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81203a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 81203aa:	e156      	b.n	812065a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 81203ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81203ae:	68db      	ldr	r3, [r3, #12]
 81203b0:	685a      	ldr	r2, [r3, #4]
 81203b2:	4b41      	ldr	r3, [pc, #260]	@ (81204b8 <tcp_receive+0xd00>)
 81203b4:	681b      	ldr	r3, [r3, #0]
 81203b6:	429a      	cmp	r2, r3
 81203b8:	d11d      	bne.n	81203f6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 81203ba:	4b3e      	ldr	r3, [pc, #248]	@ (81204b4 <tcp_receive+0xcfc>)
 81203bc:	891a      	ldrh	r2, [r3, #8]
 81203be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81203c0:	891b      	ldrh	r3, [r3, #8]
 81203c2:	429a      	cmp	r2, r3
 81203c4:	f240 814e 	bls.w	8120664 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 81203c8:	483a      	ldr	r0, [pc, #232]	@ (81204b4 <tcp_receive+0xcfc>)
 81203ca:	f7fd fb39 	bl	811da40 <tcp_seg_copy>
 81203ce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 81203d0:	697b      	ldr	r3, [r7, #20]
 81203d2:	2b00      	cmp	r3, #0
 81203d4:	f000 8148 	beq.w	8120668 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 81203d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81203da:	2b00      	cmp	r3, #0
 81203dc:	d003      	beq.n	81203e6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 81203de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81203e0:	697a      	ldr	r2, [r7, #20]
 81203e2:	601a      	str	r2, [r3, #0]
 81203e4:	e002      	b.n	81203ec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 81203e6:	687b      	ldr	r3, [r7, #4]
 81203e8:	697a      	ldr	r2, [r7, #20]
 81203ea:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 81203ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81203ee:	6978      	ldr	r0, [r7, #20]
 81203f0:	f7ff f8de 	bl	811f5b0 <tcp_oos_insert_segment>
                }
                break;
 81203f4:	e138      	b.n	8120668 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 81203f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81203f8:	2b00      	cmp	r3, #0
 81203fa:	d117      	bne.n	812042c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 81203fc:	4b2e      	ldr	r3, [pc, #184]	@ (81204b8 <tcp_receive+0xd00>)
 81203fe:	681a      	ldr	r2, [r3, #0]
 8120400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120402:	68db      	ldr	r3, [r3, #12]
 8120404:	685b      	ldr	r3, [r3, #4]
 8120406:	1ad3      	subs	r3, r2, r3
 8120408:	2b00      	cmp	r3, #0
 812040a:	da57      	bge.n	81204bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 812040c:	4829      	ldr	r0, [pc, #164]	@ (81204b4 <tcp_receive+0xcfc>)
 812040e:	f7fd fb17 	bl	811da40 <tcp_seg_copy>
 8120412:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8120414:	69bb      	ldr	r3, [r7, #24]
 8120416:	2b00      	cmp	r3, #0
 8120418:	f000 8128 	beq.w	812066c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 812041c:	687b      	ldr	r3, [r7, #4]
 812041e:	69ba      	ldr	r2, [r7, #24]
 8120420:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8120422:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8120424:	69b8      	ldr	r0, [r7, #24]
 8120426:	f7ff f8c3 	bl	811f5b0 <tcp_oos_insert_segment>
                  }
                  break;
 812042a:	e11f      	b.n	812066c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 812042c:	4b22      	ldr	r3, [pc, #136]	@ (81204b8 <tcp_receive+0xd00>)
 812042e:	681a      	ldr	r2, [r3, #0]
 8120430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8120432:	68db      	ldr	r3, [r3, #12]
 8120434:	685b      	ldr	r3, [r3, #4]
 8120436:	1ad3      	subs	r3, r2, r3
 8120438:	3b01      	subs	r3, #1
 812043a:	2b00      	cmp	r3, #0
 812043c:	db3e      	blt.n	81204bc <tcp_receive+0xd04>
 812043e:	4b1e      	ldr	r3, [pc, #120]	@ (81204b8 <tcp_receive+0xd00>)
 8120440:	681a      	ldr	r2, [r3, #0]
 8120442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120444:	68db      	ldr	r3, [r3, #12]
 8120446:	685b      	ldr	r3, [r3, #4]
 8120448:	1ad3      	subs	r3, r2, r3
 812044a:	3301      	adds	r3, #1
 812044c:	2b00      	cmp	r3, #0
 812044e:	dc35      	bgt.n	81204bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8120450:	4818      	ldr	r0, [pc, #96]	@ (81204b4 <tcp_receive+0xcfc>)
 8120452:	f7fd faf5 	bl	811da40 <tcp_seg_copy>
 8120456:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8120458:	69fb      	ldr	r3, [r7, #28]
 812045a:	2b00      	cmp	r3, #0
 812045c:	f000 8108 	beq.w	8120670 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8120460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8120462:	68db      	ldr	r3, [r3, #12]
 8120464:	685b      	ldr	r3, [r3, #4]
 8120466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8120468:	8912      	ldrh	r2, [r2, #8]
 812046a:	441a      	add	r2, r3
 812046c:	4b12      	ldr	r3, [pc, #72]	@ (81204b8 <tcp_receive+0xd00>)
 812046e:	681b      	ldr	r3, [r3, #0]
 8120470:	1ad3      	subs	r3, r2, r3
 8120472:	2b00      	cmp	r3, #0
 8120474:	dd12      	ble.n	812049c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8120476:	4b10      	ldr	r3, [pc, #64]	@ (81204b8 <tcp_receive+0xd00>)
 8120478:	681b      	ldr	r3, [r3, #0]
 812047a:	b29a      	uxth	r2, r3
 812047c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 812047e:	68db      	ldr	r3, [r3, #12]
 8120480:	685b      	ldr	r3, [r3, #4]
 8120482:	b29b      	uxth	r3, r3
 8120484:	1ad3      	subs	r3, r2, r3
 8120486:	b29a      	uxth	r2, r3
 8120488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 812048a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 812048c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 812048e:	685a      	ldr	r2, [r3, #4]
 8120490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8120492:	891b      	ldrh	r3, [r3, #8]
 8120494:	4619      	mov	r1, r3
 8120496:	4610      	mov	r0, r2
 8120498:	f7fb fbb4 	bl	811bc04 <pbuf_realloc>
                    }
                    prev->next = cseg;
 812049c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 812049e:	69fa      	ldr	r2, [r7, #28]
 81204a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 81204a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81204a4:	69f8      	ldr	r0, [r7, #28]
 81204a6:	f7ff f883 	bl	811f5b0 <tcp_oos_insert_segment>
                  }
                  break;
 81204aa:	e0e1      	b.n	8120670 <tcp_receive+0xeb8>
 81204ac:	1000e4e0 	.word	0x1000e4e0
 81204b0:	1000e4dd 	.word	0x1000e4dd
 81204b4:	1000e4b0 	.word	0x1000e4b0
 81204b8:	1000e4d0 	.word	0x1000e4d0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 81204bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81204be:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 81204c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81204c2:	681b      	ldr	r3, [r3, #0]
 81204c4:	2b00      	cmp	r3, #0
 81204c6:	f040 80c5 	bne.w	8120654 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 81204ca:	4b7f      	ldr	r3, [pc, #508]	@ (81206c8 <tcp_receive+0xf10>)
 81204cc:	681a      	ldr	r2, [r3, #0]
 81204ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81204d0:	68db      	ldr	r3, [r3, #12]
 81204d2:	685b      	ldr	r3, [r3, #4]
 81204d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 81204d6:	2b00      	cmp	r3, #0
 81204d8:	f340 80bc 	ble.w	8120654 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 81204dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81204de:	68db      	ldr	r3, [r3, #12]
 81204e0:	899b      	ldrh	r3, [r3, #12]
 81204e2:	b29b      	uxth	r3, r3
 81204e4:	4618      	mov	r0, r3
 81204e6:	f7f7 fb09 	bl	8117afc <lwip_htons>
 81204ea:	4603      	mov	r3, r0
 81204ec:	b2db      	uxtb	r3, r3
 81204ee:	f003 0301 	and.w	r3, r3, #1
 81204f2:	2b00      	cmp	r3, #0
 81204f4:	f040 80be 	bne.w	8120674 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 81204f8:	4874      	ldr	r0, [pc, #464]	@ (81206cc <tcp_receive+0xf14>)
 81204fa:	f7fd faa1 	bl	811da40 <tcp_seg_copy>
 81204fe:	4602      	mov	r2, r0
 8120500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120502:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8120504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120506:	681b      	ldr	r3, [r3, #0]
 8120508:	2b00      	cmp	r3, #0
 812050a:	f000 80b5 	beq.w	8120678 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 812050e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120510:	68db      	ldr	r3, [r3, #12]
 8120512:	685b      	ldr	r3, [r3, #4]
 8120514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8120516:	8912      	ldrh	r2, [r2, #8]
 8120518:	441a      	add	r2, r3
 812051a:	4b6b      	ldr	r3, [pc, #428]	@ (81206c8 <tcp_receive+0xf10>)
 812051c:	681b      	ldr	r3, [r3, #0]
 812051e:	1ad3      	subs	r3, r2, r3
 8120520:	2b00      	cmp	r3, #0
 8120522:	dd12      	ble.n	812054a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8120524:	4b68      	ldr	r3, [pc, #416]	@ (81206c8 <tcp_receive+0xf10>)
 8120526:	681b      	ldr	r3, [r3, #0]
 8120528:	b29a      	uxth	r2, r3
 812052a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 812052c:	68db      	ldr	r3, [r3, #12]
 812052e:	685b      	ldr	r3, [r3, #4]
 8120530:	b29b      	uxth	r3, r3
 8120532:	1ad3      	subs	r3, r2, r3
 8120534:	b29a      	uxth	r2, r3
 8120536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120538:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 812053a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 812053c:	685a      	ldr	r2, [r3, #4]
 812053e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120540:	891b      	ldrh	r3, [r3, #8]
 8120542:	4619      	mov	r1, r3
 8120544:	4610      	mov	r0, r2
 8120546:	f7fb fb5d 	bl	811bc04 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 812054a:	4b61      	ldr	r3, [pc, #388]	@ (81206d0 <tcp_receive+0xf18>)
 812054c:	881b      	ldrh	r3, [r3, #0]
 812054e:	461a      	mov	r2, r3
 8120550:	4b5d      	ldr	r3, [pc, #372]	@ (81206c8 <tcp_receive+0xf10>)
 8120552:	681b      	ldr	r3, [r3, #0]
 8120554:	441a      	add	r2, r3
 8120556:	687b      	ldr	r3, [r7, #4]
 8120558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 812055a:	6879      	ldr	r1, [r7, #4]
 812055c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 812055e:	440b      	add	r3, r1
 8120560:	1ad3      	subs	r3, r2, r3
 8120562:	2b00      	cmp	r3, #0
 8120564:	f340 8088 	ble.w	8120678 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8120568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 812056a:	681b      	ldr	r3, [r3, #0]
 812056c:	68db      	ldr	r3, [r3, #12]
 812056e:	899b      	ldrh	r3, [r3, #12]
 8120570:	b29b      	uxth	r3, r3
 8120572:	4618      	mov	r0, r3
 8120574:	f7f7 fac2 	bl	8117afc <lwip_htons>
 8120578:	4603      	mov	r3, r0
 812057a:	b2db      	uxtb	r3, r3
 812057c:	f003 0301 	and.w	r3, r3, #1
 8120580:	2b00      	cmp	r3, #0
 8120582:	d021      	beq.n	81205c8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8120584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120586:	681b      	ldr	r3, [r3, #0]
 8120588:	68db      	ldr	r3, [r3, #12]
 812058a:	899b      	ldrh	r3, [r3, #12]
 812058c:	b29b      	uxth	r3, r3
 812058e:	b21b      	sxth	r3, r3
 8120590:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8120594:	b21c      	sxth	r4, r3
 8120596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120598:	681b      	ldr	r3, [r3, #0]
 812059a:	68db      	ldr	r3, [r3, #12]
 812059c:	899b      	ldrh	r3, [r3, #12]
 812059e:	b29b      	uxth	r3, r3
 81205a0:	4618      	mov	r0, r3
 81205a2:	f7f7 faab 	bl	8117afc <lwip_htons>
 81205a6:	4603      	mov	r3, r0
 81205a8:	b2db      	uxtb	r3, r3
 81205aa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 81205ae:	b29b      	uxth	r3, r3
 81205b0:	4618      	mov	r0, r3
 81205b2:	f7f7 faa3 	bl	8117afc <lwip_htons>
 81205b6:	4603      	mov	r3, r0
 81205b8:	b21b      	sxth	r3, r3
 81205ba:	4323      	orrs	r3, r4
 81205bc:	b21a      	sxth	r2, r3
 81205be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81205c0:	681b      	ldr	r3, [r3, #0]
 81205c2:	68db      	ldr	r3, [r3, #12]
 81205c4:	b292      	uxth	r2, r2
 81205c6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 81205c8:	687b      	ldr	r3, [r7, #4]
 81205ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81205cc:	b29a      	uxth	r2, r3
 81205ce:	687b      	ldr	r3, [r7, #4]
 81205d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81205d2:	4413      	add	r3, r2
 81205d4:	b299      	uxth	r1, r3
 81205d6:	4b3c      	ldr	r3, [pc, #240]	@ (81206c8 <tcp_receive+0xf10>)
 81205d8:	681b      	ldr	r3, [r3, #0]
 81205da:	b29a      	uxth	r2, r3
 81205dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81205de:	681b      	ldr	r3, [r3, #0]
 81205e0:	1a8a      	subs	r2, r1, r2
 81205e2:	b292      	uxth	r2, r2
 81205e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 81205e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81205e8:	681b      	ldr	r3, [r3, #0]
 81205ea:	685a      	ldr	r2, [r3, #4]
 81205ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81205ee:	681b      	ldr	r3, [r3, #0]
 81205f0:	891b      	ldrh	r3, [r3, #8]
 81205f2:	4619      	mov	r1, r3
 81205f4:	4610      	mov	r0, r2
 81205f6:	f7fb fb05 	bl	811bc04 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 81205fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81205fc:	681b      	ldr	r3, [r3, #0]
 81205fe:	891c      	ldrh	r4, [r3, #8]
 8120600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120602:	681b      	ldr	r3, [r3, #0]
 8120604:	68db      	ldr	r3, [r3, #12]
 8120606:	899b      	ldrh	r3, [r3, #12]
 8120608:	b29b      	uxth	r3, r3
 812060a:	4618      	mov	r0, r3
 812060c:	f7f7 fa76 	bl	8117afc <lwip_htons>
 8120610:	4603      	mov	r3, r0
 8120612:	b2db      	uxtb	r3, r3
 8120614:	f003 0303 	and.w	r3, r3, #3
 8120618:	2b00      	cmp	r3, #0
 812061a:	d001      	beq.n	8120620 <tcp_receive+0xe68>
 812061c:	2301      	movs	r3, #1
 812061e:	e000      	b.n	8120622 <tcp_receive+0xe6a>
 8120620:	2300      	movs	r3, #0
 8120622:	4423      	add	r3, r4
 8120624:	b29a      	uxth	r2, r3
 8120626:	4b2a      	ldr	r3, [pc, #168]	@ (81206d0 <tcp_receive+0xf18>)
 8120628:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 812062a:	4b29      	ldr	r3, [pc, #164]	@ (81206d0 <tcp_receive+0xf18>)
 812062c:	881b      	ldrh	r3, [r3, #0]
 812062e:	461a      	mov	r2, r3
 8120630:	4b25      	ldr	r3, [pc, #148]	@ (81206c8 <tcp_receive+0xf10>)
 8120632:	681b      	ldr	r3, [r3, #0]
 8120634:	441a      	add	r2, r3
 8120636:	687b      	ldr	r3, [r7, #4]
 8120638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 812063a:	6879      	ldr	r1, [r7, #4]
 812063c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 812063e:	440b      	add	r3, r1
 8120640:	429a      	cmp	r2, r3
 8120642:	d019      	beq.n	8120678 <tcp_receive+0xec0>
 8120644:	4b23      	ldr	r3, [pc, #140]	@ (81206d4 <tcp_receive+0xf1c>)
 8120646:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 812064a:	4923      	ldr	r1, [pc, #140]	@ (81206d8 <tcp_receive+0xf20>)
 812064c:	4823      	ldr	r0, [pc, #140]	@ (81206dc <tcp_receive+0xf24>)
 812064e:	f004 f805 	bl	812465c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8120652:	e011      	b.n	8120678 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8120654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8120656:	681b      	ldr	r3, [r3, #0]
 8120658:	63bb      	str	r3, [r7, #56]	@ 0x38
 812065a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 812065c:	2b00      	cmp	r3, #0
 812065e:	f47f aea5 	bne.w	81203ac <tcp_receive+0xbf4>
 8120662:	e00a      	b.n	812067a <tcp_receive+0xec2>
                break;
 8120664:	bf00      	nop
 8120666:	e008      	b.n	812067a <tcp_receive+0xec2>
                break;
 8120668:	bf00      	nop
 812066a:	e006      	b.n	812067a <tcp_receive+0xec2>
                  break;
 812066c:	bf00      	nop
 812066e:	e004      	b.n	812067a <tcp_receive+0xec2>
                  break;
 8120670:	bf00      	nop
 8120672:	e002      	b.n	812067a <tcp_receive+0xec2>
                  break;
 8120674:	bf00      	nop
 8120676:	e000      	b.n	812067a <tcp_receive+0xec2>
                break;
 8120678:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 812067a:	6878      	ldr	r0, [r7, #4]
 812067c:	f001 fe88 	bl	8122390 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8120680:	e003      	b.n	812068a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8120682:	6878      	ldr	r0, [r7, #4]
 8120684:	f001 fe84 	bl	8122390 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8120688:	e01a      	b.n	81206c0 <tcp_receive+0xf08>
 812068a:	e019      	b.n	81206c0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 812068c:	4b0e      	ldr	r3, [pc, #56]	@ (81206c8 <tcp_receive+0xf10>)
 812068e:	681a      	ldr	r2, [r3, #0]
 8120690:	687b      	ldr	r3, [r7, #4]
 8120692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8120694:	1ad3      	subs	r3, r2, r3
 8120696:	2b00      	cmp	r3, #0
 8120698:	db0a      	blt.n	81206b0 <tcp_receive+0xef8>
 812069a:	4b0b      	ldr	r3, [pc, #44]	@ (81206c8 <tcp_receive+0xf10>)
 812069c:	681a      	ldr	r2, [r3, #0]
 812069e:	687b      	ldr	r3, [r7, #4]
 81206a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81206a2:	6879      	ldr	r1, [r7, #4]
 81206a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81206a6:	440b      	add	r3, r1
 81206a8:	1ad3      	subs	r3, r2, r3
 81206aa:	3301      	adds	r3, #1
 81206ac:	2b00      	cmp	r3, #0
 81206ae:	dd07      	ble.n	81206c0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 81206b0:	687b      	ldr	r3, [r7, #4]
 81206b2:	8b5b      	ldrh	r3, [r3, #26]
 81206b4:	f043 0302 	orr.w	r3, r3, #2
 81206b8:	b29a      	uxth	r2, r3
 81206ba:	687b      	ldr	r3, [r7, #4]
 81206bc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 81206be:	e7ff      	b.n	81206c0 <tcp_receive+0xf08>
 81206c0:	bf00      	nop
 81206c2:	3750      	adds	r7, #80	@ 0x50
 81206c4:	46bd      	mov	sp, r7
 81206c6:	bdb0      	pop	{r4, r5, r7, pc}
 81206c8:	1000e4d0 	.word	0x1000e4d0
 81206cc:	1000e4b0 	.word	0x1000e4b0
 81206d0:	1000e4da 	.word	0x1000e4da
 81206d4:	081271d4 	.word	0x081271d4
 81206d8:	081275bc 	.word	0x081275bc
 81206dc:	08127260 	.word	0x08127260

081206e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 81206e0:	b480      	push	{r7}
 81206e2:	b083      	sub	sp, #12
 81206e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 81206e6:	4b15      	ldr	r3, [pc, #84]	@ (812073c <tcp_get_next_optbyte+0x5c>)
 81206e8:	881b      	ldrh	r3, [r3, #0]
 81206ea:	1c5a      	adds	r2, r3, #1
 81206ec:	b291      	uxth	r1, r2
 81206ee:	4a13      	ldr	r2, [pc, #76]	@ (812073c <tcp_get_next_optbyte+0x5c>)
 81206f0:	8011      	strh	r1, [r2, #0]
 81206f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 81206f4:	4b12      	ldr	r3, [pc, #72]	@ (8120740 <tcp_get_next_optbyte+0x60>)
 81206f6:	681b      	ldr	r3, [r3, #0]
 81206f8:	2b00      	cmp	r3, #0
 81206fa:	d004      	beq.n	8120706 <tcp_get_next_optbyte+0x26>
 81206fc:	4b11      	ldr	r3, [pc, #68]	@ (8120744 <tcp_get_next_optbyte+0x64>)
 81206fe:	881b      	ldrh	r3, [r3, #0]
 8120700:	88fa      	ldrh	r2, [r7, #6]
 8120702:	429a      	cmp	r2, r3
 8120704:	d208      	bcs.n	8120718 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8120706:	4b10      	ldr	r3, [pc, #64]	@ (8120748 <tcp_get_next_optbyte+0x68>)
 8120708:	681b      	ldr	r3, [r3, #0]
 812070a:	3314      	adds	r3, #20
 812070c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 812070e:	88fb      	ldrh	r3, [r7, #6]
 8120710:	683a      	ldr	r2, [r7, #0]
 8120712:	4413      	add	r3, r2
 8120714:	781b      	ldrb	r3, [r3, #0]
 8120716:	e00b      	b.n	8120730 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8120718:	88fb      	ldrh	r3, [r7, #6]
 812071a:	b2da      	uxtb	r2, r3
 812071c:	4b09      	ldr	r3, [pc, #36]	@ (8120744 <tcp_get_next_optbyte+0x64>)
 812071e:	881b      	ldrh	r3, [r3, #0]
 8120720:	b2db      	uxtb	r3, r3
 8120722:	1ad3      	subs	r3, r2, r3
 8120724:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8120726:	4b06      	ldr	r3, [pc, #24]	@ (8120740 <tcp_get_next_optbyte+0x60>)
 8120728:	681a      	ldr	r2, [r3, #0]
 812072a:	797b      	ldrb	r3, [r7, #5]
 812072c:	4413      	add	r3, r2
 812072e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8120730:	4618      	mov	r0, r3
 8120732:	370c      	adds	r7, #12
 8120734:	46bd      	mov	sp, r7
 8120736:	f85d 7b04 	ldr.w	r7, [sp], #4
 812073a:	4770      	bx	lr
 812073c:	1000e4cc 	.word	0x1000e4cc
 8120740:	1000e4c8 	.word	0x1000e4c8
 8120744:	1000e4c6 	.word	0x1000e4c6
 8120748:	1000e4c0 	.word	0x1000e4c0

0812074c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 812074c:	b580      	push	{r7, lr}
 812074e:	b084      	sub	sp, #16
 8120750:	af00      	add	r7, sp, #0
 8120752:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8120754:	687b      	ldr	r3, [r7, #4]
 8120756:	2b00      	cmp	r3, #0
 8120758:	d106      	bne.n	8120768 <tcp_parseopt+0x1c>
 812075a:	4b32      	ldr	r3, [pc, #200]	@ (8120824 <tcp_parseopt+0xd8>)
 812075c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8120760:	4931      	ldr	r1, [pc, #196]	@ (8120828 <tcp_parseopt+0xdc>)
 8120762:	4832      	ldr	r0, [pc, #200]	@ (812082c <tcp_parseopt+0xe0>)
 8120764:	f003 ff7a 	bl	812465c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8120768:	4b31      	ldr	r3, [pc, #196]	@ (8120830 <tcp_parseopt+0xe4>)
 812076a:	881b      	ldrh	r3, [r3, #0]
 812076c:	2b00      	cmp	r3, #0
 812076e:	d056      	beq.n	812081e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8120770:	4b30      	ldr	r3, [pc, #192]	@ (8120834 <tcp_parseopt+0xe8>)
 8120772:	2200      	movs	r2, #0
 8120774:	801a      	strh	r2, [r3, #0]
 8120776:	e046      	b.n	8120806 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8120778:	f7ff ffb2 	bl	81206e0 <tcp_get_next_optbyte>
 812077c:	4603      	mov	r3, r0
 812077e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8120780:	7bfb      	ldrb	r3, [r7, #15]
 8120782:	2b02      	cmp	r3, #2
 8120784:	d006      	beq.n	8120794 <tcp_parseopt+0x48>
 8120786:	2b02      	cmp	r3, #2
 8120788:	dc2a      	bgt.n	81207e0 <tcp_parseopt+0x94>
 812078a:	2b00      	cmp	r3, #0
 812078c:	d042      	beq.n	8120814 <tcp_parseopt+0xc8>
 812078e:	2b01      	cmp	r3, #1
 8120790:	d038      	beq.n	8120804 <tcp_parseopt+0xb8>
 8120792:	e025      	b.n	81207e0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8120794:	f7ff ffa4 	bl	81206e0 <tcp_get_next_optbyte>
 8120798:	4603      	mov	r3, r0
 812079a:	2b04      	cmp	r3, #4
 812079c:	d13c      	bne.n	8120818 <tcp_parseopt+0xcc>
 812079e:	4b25      	ldr	r3, [pc, #148]	@ (8120834 <tcp_parseopt+0xe8>)
 81207a0:	881b      	ldrh	r3, [r3, #0]
 81207a2:	3301      	adds	r3, #1
 81207a4:	4a22      	ldr	r2, [pc, #136]	@ (8120830 <tcp_parseopt+0xe4>)
 81207a6:	8812      	ldrh	r2, [r2, #0]
 81207a8:	4293      	cmp	r3, r2
 81207aa:	da35      	bge.n	8120818 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 81207ac:	f7ff ff98 	bl	81206e0 <tcp_get_next_optbyte>
 81207b0:	4603      	mov	r3, r0
 81207b2:	021b      	lsls	r3, r3, #8
 81207b4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 81207b6:	f7ff ff93 	bl	81206e0 <tcp_get_next_optbyte>
 81207ba:	4603      	mov	r3, r0
 81207bc:	461a      	mov	r2, r3
 81207be:	89bb      	ldrh	r3, [r7, #12]
 81207c0:	4313      	orrs	r3, r2
 81207c2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 81207c4:	89bb      	ldrh	r3, [r7, #12]
 81207c6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 81207ca:	d804      	bhi.n	81207d6 <tcp_parseopt+0x8a>
 81207cc:	89bb      	ldrh	r3, [r7, #12]
 81207ce:	2b00      	cmp	r3, #0
 81207d0:	d001      	beq.n	81207d6 <tcp_parseopt+0x8a>
 81207d2:	89ba      	ldrh	r2, [r7, #12]
 81207d4:	e001      	b.n	81207da <tcp_parseopt+0x8e>
 81207d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 81207da:	687b      	ldr	r3, [r7, #4]
 81207dc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 81207de:	e012      	b.n	8120806 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 81207e0:	f7ff ff7e 	bl	81206e0 <tcp_get_next_optbyte>
 81207e4:	4603      	mov	r3, r0
 81207e6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 81207e8:	7afb      	ldrb	r3, [r7, #11]
 81207ea:	2b01      	cmp	r3, #1
 81207ec:	d916      	bls.n	812081c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 81207ee:	7afb      	ldrb	r3, [r7, #11]
 81207f0:	b29a      	uxth	r2, r3
 81207f2:	4b10      	ldr	r3, [pc, #64]	@ (8120834 <tcp_parseopt+0xe8>)
 81207f4:	881b      	ldrh	r3, [r3, #0]
 81207f6:	4413      	add	r3, r2
 81207f8:	b29b      	uxth	r3, r3
 81207fa:	3b02      	subs	r3, #2
 81207fc:	b29a      	uxth	r2, r3
 81207fe:	4b0d      	ldr	r3, [pc, #52]	@ (8120834 <tcp_parseopt+0xe8>)
 8120800:	801a      	strh	r2, [r3, #0]
 8120802:	e000      	b.n	8120806 <tcp_parseopt+0xba>
          break;
 8120804:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8120806:	4b0b      	ldr	r3, [pc, #44]	@ (8120834 <tcp_parseopt+0xe8>)
 8120808:	881a      	ldrh	r2, [r3, #0]
 812080a:	4b09      	ldr	r3, [pc, #36]	@ (8120830 <tcp_parseopt+0xe4>)
 812080c:	881b      	ldrh	r3, [r3, #0]
 812080e:	429a      	cmp	r2, r3
 8120810:	d3b2      	bcc.n	8120778 <tcp_parseopt+0x2c>
 8120812:	e004      	b.n	812081e <tcp_parseopt+0xd2>
          return;
 8120814:	bf00      	nop
 8120816:	e002      	b.n	812081e <tcp_parseopt+0xd2>
            return;
 8120818:	bf00      	nop
 812081a:	e000      	b.n	812081e <tcp_parseopt+0xd2>
            return;
 812081c:	bf00      	nop
      }
    }
  }
}
 812081e:	3710      	adds	r7, #16
 8120820:	46bd      	mov	sp, r7
 8120822:	bd80      	pop	{r7, pc}
 8120824:	081271d4 	.word	0x081271d4
 8120828:	08127678 	.word	0x08127678
 812082c:	08127260 	.word	0x08127260
 8120830:	1000e4c4 	.word	0x1000e4c4
 8120834:	1000e4cc 	.word	0x1000e4cc

08120838 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8120838:	b480      	push	{r7}
 812083a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 812083c:	4b05      	ldr	r3, [pc, #20]	@ (8120854 <tcp_trigger_input_pcb_close+0x1c>)
 812083e:	781b      	ldrb	r3, [r3, #0]
 8120840:	f043 0310 	orr.w	r3, r3, #16
 8120844:	b2da      	uxtb	r2, r3
 8120846:	4b03      	ldr	r3, [pc, #12]	@ (8120854 <tcp_trigger_input_pcb_close+0x1c>)
 8120848:	701a      	strb	r2, [r3, #0]
}
 812084a:	bf00      	nop
 812084c:	46bd      	mov	sp, r7
 812084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8120852:	4770      	bx	lr
 8120854:	1000e4dd 	.word	0x1000e4dd

08120858 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8120858:	b580      	push	{r7, lr}
 812085a:	b084      	sub	sp, #16
 812085c:	af00      	add	r7, sp, #0
 812085e:	60f8      	str	r0, [r7, #12]
 8120860:	60b9      	str	r1, [r7, #8]
 8120862:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8120864:	68fb      	ldr	r3, [r7, #12]
 8120866:	2b00      	cmp	r3, #0
 8120868:	d00a      	beq.n	8120880 <tcp_route+0x28>
 812086a:	68fb      	ldr	r3, [r7, #12]
 812086c:	7a1b      	ldrb	r3, [r3, #8]
 812086e:	2b00      	cmp	r3, #0
 8120870:	d006      	beq.n	8120880 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8120872:	68fb      	ldr	r3, [r7, #12]
 8120874:	7a1b      	ldrb	r3, [r3, #8]
 8120876:	4618      	mov	r0, r3
 8120878:	f7fa ffbc 	bl	811b7f4 <netif_get_by_index>
 812087c:	4603      	mov	r3, r0
 812087e:	e003      	b.n	8120888 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8120880:	6878      	ldr	r0, [r7, #4]
 8120882:	f7f8 fcdd 	bl	8119240 <ip4_route>
 8120886:	4603      	mov	r3, r0
  }
}
 8120888:	4618      	mov	r0, r3
 812088a:	3710      	adds	r7, #16
 812088c:	46bd      	mov	sp, r7
 812088e:	bd80      	pop	{r7, pc}

08120890 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8120890:	b590      	push	{r4, r7, lr}
 8120892:	b087      	sub	sp, #28
 8120894:	af00      	add	r7, sp, #0
 8120896:	60f8      	str	r0, [r7, #12]
 8120898:	60b9      	str	r1, [r7, #8]
 812089a:	603b      	str	r3, [r7, #0]
 812089c:	4613      	mov	r3, r2
 812089e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 81208a0:	68fb      	ldr	r3, [r7, #12]
 81208a2:	2b00      	cmp	r3, #0
 81208a4:	d105      	bne.n	81208b2 <tcp_create_segment+0x22>
 81208a6:	4b43      	ldr	r3, [pc, #268]	@ (81209b4 <tcp_create_segment+0x124>)
 81208a8:	22a3      	movs	r2, #163	@ 0xa3
 81208aa:	4943      	ldr	r1, [pc, #268]	@ (81209b8 <tcp_create_segment+0x128>)
 81208ac:	4843      	ldr	r0, [pc, #268]	@ (81209bc <tcp_create_segment+0x12c>)
 81208ae:	f003 fed5 	bl	812465c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 81208b2:	68bb      	ldr	r3, [r7, #8]
 81208b4:	2b00      	cmp	r3, #0
 81208b6:	d105      	bne.n	81208c4 <tcp_create_segment+0x34>
 81208b8:	4b3e      	ldr	r3, [pc, #248]	@ (81209b4 <tcp_create_segment+0x124>)
 81208ba:	22a4      	movs	r2, #164	@ 0xa4
 81208bc:	4940      	ldr	r1, [pc, #256]	@ (81209c0 <tcp_create_segment+0x130>)
 81208be:	483f      	ldr	r0, [pc, #252]	@ (81209bc <tcp_create_segment+0x12c>)
 81208c0:	f003 fecc 	bl	812465c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 81208c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 81208c8:	009b      	lsls	r3, r3, #2
 81208ca:	b2db      	uxtb	r3, r3
 81208cc:	f003 0304 	and.w	r3, r3, #4
 81208d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 81208d2:	2003      	movs	r0, #3
 81208d4:	f7fa fc02 	bl	811b0dc <memp_malloc>
 81208d8:	6138      	str	r0, [r7, #16]
 81208da:	693b      	ldr	r3, [r7, #16]
 81208dc:	2b00      	cmp	r3, #0
 81208de:	d104      	bne.n	81208ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 81208e0:	68b8      	ldr	r0, [r7, #8]
 81208e2:	f7fb fb13 	bl	811bf0c <pbuf_free>
    return NULL;
 81208e6:	2300      	movs	r3, #0
 81208e8:	e060      	b.n	81209ac <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 81208ea:	693b      	ldr	r3, [r7, #16]
 81208ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 81208f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 81208f2:	693b      	ldr	r3, [r7, #16]
 81208f4:	2200      	movs	r2, #0
 81208f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 81208f8:	693b      	ldr	r3, [r7, #16]
 81208fa:	68ba      	ldr	r2, [r7, #8]
 81208fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 81208fe:	68bb      	ldr	r3, [r7, #8]
 8120900:	891a      	ldrh	r2, [r3, #8]
 8120902:	7dfb      	ldrb	r3, [r7, #23]
 8120904:	b29b      	uxth	r3, r3
 8120906:	429a      	cmp	r2, r3
 8120908:	d205      	bcs.n	8120916 <tcp_create_segment+0x86>
 812090a:	4b2a      	ldr	r3, [pc, #168]	@ (81209b4 <tcp_create_segment+0x124>)
 812090c:	22b0      	movs	r2, #176	@ 0xb0
 812090e:	492d      	ldr	r1, [pc, #180]	@ (81209c4 <tcp_create_segment+0x134>)
 8120910:	482a      	ldr	r0, [pc, #168]	@ (81209bc <tcp_create_segment+0x12c>)
 8120912:	f003 fea3 	bl	812465c <iprintf>
  seg->len = p->tot_len - optlen;
 8120916:	68bb      	ldr	r3, [r7, #8]
 8120918:	891a      	ldrh	r2, [r3, #8]
 812091a:	7dfb      	ldrb	r3, [r7, #23]
 812091c:	b29b      	uxth	r3, r3
 812091e:	1ad3      	subs	r3, r2, r3
 8120920:	b29a      	uxth	r2, r3
 8120922:	693b      	ldr	r3, [r7, #16]
 8120924:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8120926:	2114      	movs	r1, #20
 8120928:	68b8      	ldr	r0, [r7, #8]
 812092a:	f7fb fa59 	bl	811bde0 <pbuf_add_header>
 812092e:	4603      	mov	r3, r0
 8120930:	2b00      	cmp	r3, #0
 8120932:	d004      	beq.n	812093e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8120934:	6938      	ldr	r0, [r7, #16]
 8120936:	f7fd f86a 	bl	811da0e <tcp_seg_free>
    return NULL;
 812093a:	2300      	movs	r3, #0
 812093c:	e036      	b.n	81209ac <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 812093e:	693b      	ldr	r3, [r7, #16]
 8120940:	685b      	ldr	r3, [r3, #4]
 8120942:	685a      	ldr	r2, [r3, #4]
 8120944:	693b      	ldr	r3, [r7, #16]
 8120946:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8120948:	68fb      	ldr	r3, [r7, #12]
 812094a:	8ada      	ldrh	r2, [r3, #22]
 812094c:	693b      	ldr	r3, [r7, #16]
 812094e:	68dc      	ldr	r4, [r3, #12]
 8120950:	4610      	mov	r0, r2
 8120952:	f7f7 f8d3 	bl	8117afc <lwip_htons>
 8120956:	4603      	mov	r3, r0
 8120958:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 812095a:	68fb      	ldr	r3, [r7, #12]
 812095c:	8b1a      	ldrh	r2, [r3, #24]
 812095e:	693b      	ldr	r3, [r7, #16]
 8120960:	68dc      	ldr	r4, [r3, #12]
 8120962:	4610      	mov	r0, r2
 8120964:	f7f7 f8ca 	bl	8117afc <lwip_htons>
 8120968:	4603      	mov	r3, r0
 812096a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 812096c:	693b      	ldr	r3, [r7, #16]
 812096e:	68dc      	ldr	r4, [r3, #12]
 8120970:	6838      	ldr	r0, [r7, #0]
 8120972:	f7f7 f8d8 	bl	8117b26 <lwip_htonl>
 8120976:	4603      	mov	r3, r0
 8120978:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 812097a:	7dfb      	ldrb	r3, [r7, #23]
 812097c:	089b      	lsrs	r3, r3, #2
 812097e:	b2db      	uxtb	r3, r3
 8120980:	3305      	adds	r3, #5
 8120982:	b29b      	uxth	r3, r3
 8120984:	031b      	lsls	r3, r3, #12
 8120986:	b29a      	uxth	r2, r3
 8120988:	79fb      	ldrb	r3, [r7, #7]
 812098a:	b29b      	uxth	r3, r3
 812098c:	4313      	orrs	r3, r2
 812098e:	b29a      	uxth	r2, r3
 8120990:	693b      	ldr	r3, [r7, #16]
 8120992:	68dc      	ldr	r4, [r3, #12]
 8120994:	4610      	mov	r0, r2
 8120996:	f7f7 f8b1 	bl	8117afc <lwip_htons>
 812099a:	4603      	mov	r3, r0
 812099c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 812099e:	693b      	ldr	r3, [r7, #16]
 81209a0:	68db      	ldr	r3, [r3, #12]
 81209a2:	2200      	movs	r2, #0
 81209a4:	749a      	strb	r2, [r3, #18]
 81209a6:	2200      	movs	r2, #0
 81209a8:	74da      	strb	r2, [r3, #19]
  return seg;
 81209aa:	693b      	ldr	r3, [r7, #16]
}
 81209ac:	4618      	mov	r0, r3
 81209ae:	371c      	adds	r7, #28
 81209b0:	46bd      	mov	sp, r7
 81209b2:	bd90      	pop	{r4, r7, pc}
 81209b4:	08127694 	.word	0x08127694
 81209b8:	0812770c 	.word	0x0812770c
 81209bc:	0812772c 	.word	0x0812772c
 81209c0:	08127754 	.word	0x08127754
 81209c4:	08127778 	.word	0x08127778

081209c8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 81209c8:	b580      	push	{r7, lr}
 81209ca:	b086      	sub	sp, #24
 81209cc:	af00      	add	r7, sp, #0
 81209ce:	607b      	str	r3, [r7, #4]
 81209d0:	4603      	mov	r3, r0
 81209d2:	73fb      	strb	r3, [r7, #15]
 81209d4:	460b      	mov	r3, r1
 81209d6:	81bb      	strh	r3, [r7, #12]
 81209d8:	4613      	mov	r3, r2
 81209da:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 81209dc:	89bb      	ldrh	r3, [r7, #12]
 81209de:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 81209e0:	687b      	ldr	r3, [r7, #4]
 81209e2:	2b00      	cmp	r3, #0
 81209e4:	d105      	bne.n	81209f2 <tcp_pbuf_prealloc+0x2a>
 81209e6:	4b30      	ldr	r3, [pc, #192]	@ (8120aa8 <tcp_pbuf_prealloc+0xe0>)
 81209e8:	22e8      	movs	r2, #232	@ 0xe8
 81209ea:	4930      	ldr	r1, [pc, #192]	@ (8120aac <tcp_pbuf_prealloc+0xe4>)
 81209ec:	4830      	ldr	r0, [pc, #192]	@ (8120ab0 <tcp_pbuf_prealloc+0xe8>)
 81209ee:	f003 fe35 	bl	812465c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 81209f2:	6a3b      	ldr	r3, [r7, #32]
 81209f4:	2b00      	cmp	r3, #0
 81209f6:	d105      	bne.n	8120a04 <tcp_pbuf_prealloc+0x3c>
 81209f8:	4b2b      	ldr	r3, [pc, #172]	@ (8120aa8 <tcp_pbuf_prealloc+0xe0>)
 81209fa:	22e9      	movs	r2, #233	@ 0xe9
 81209fc:	492d      	ldr	r1, [pc, #180]	@ (8120ab4 <tcp_pbuf_prealloc+0xec>)
 81209fe:	482c      	ldr	r0, [pc, #176]	@ (8120ab0 <tcp_pbuf_prealloc+0xe8>)
 8120a00:	f003 fe2c 	bl	812465c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8120a04:	89ba      	ldrh	r2, [r7, #12]
 8120a06:	897b      	ldrh	r3, [r7, #10]
 8120a08:	429a      	cmp	r2, r3
 8120a0a:	d221      	bcs.n	8120a50 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8120a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8120a10:	f003 0302 	and.w	r3, r3, #2
 8120a14:	2b00      	cmp	r3, #0
 8120a16:	d111      	bne.n	8120a3c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8120a18:	6a3b      	ldr	r3, [r7, #32]
 8120a1a:	8b5b      	ldrh	r3, [r3, #26]
 8120a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8120a20:	2b00      	cmp	r3, #0
 8120a22:	d115      	bne.n	8120a50 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8120a24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8120a28:	2b00      	cmp	r3, #0
 8120a2a:	d007      	beq.n	8120a3c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8120a2c:	6a3b      	ldr	r3, [r7, #32]
 8120a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8120a30:	2b00      	cmp	r3, #0
 8120a32:	d103      	bne.n	8120a3c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8120a34:	6a3b      	ldr	r3, [r7, #32]
 8120a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8120a38:	2b00      	cmp	r3, #0
 8120a3a:	d009      	beq.n	8120a50 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8120a3c:	89bb      	ldrh	r3, [r7, #12]
 8120a3e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8120a42:	f023 0203 	bic.w	r2, r3, #3
 8120a46:	897b      	ldrh	r3, [r7, #10]
 8120a48:	4293      	cmp	r3, r2
 8120a4a:	bf28      	it	cs
 8120a4c:	4613      	movcs	r3, r2
 8120a4e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8120a50:	8af9      	ldrh	r1, [r7, #22]
 8120a52:	7bfb      	ldrb	r3, [r7, #15]
 8120a54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120a58:	4618      	mov	r0, r3
 8120a5a:	f7fa ff75 	bl	811b948 <pbuf_alloc>
 8120a5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8120a60:	693b      	ldr	r3, [r7, #16]
 8120a62:	2b00      	cmp	r3, #0
 8120a64:	d101      	bne.n	8120a6a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8120a66:	2300      	movs	r3, #0
 8120a68:	e019      	b.n	8120a9e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8120a6a:	693b      	ldr	r3, [r7, #16]
 8120a6c:	681b      	ldr	r3, [r3, #0]
 8120a6e:	2b00      	cmp	r3, #0
 8120a70:	d006      	beq.n	8120a80 <tcp_pbuf_prealloc+0xb8>
 8120a72:	4b0d      	ldr	r3, [pc, #52]	@ (8120aa8 <tcp_pbuf_prealloc+0xe0>)
 8120a74:	f240 120b 	movw	r2, #267	@ 0x10b
 8120a78:	490f      	ldr	r1, [pc, #60]	@ (8120ab8 <tcp_pbuf_prealloc+0xf0>)
 8120a7a:	480d      	ldr	r0, [pc, #52]	@ (8120ab0 <tcp_pbuf_prealloc+0xe8>)
 8120a7c:	f003 fdee 	bl	812465c <iprintf>
  *oversize = p->len - length;
 8120a80:	693b      	ldr	r3, [r7, #16]
 8120a82:	895a      	ldrh	r2, [r3, #10]
 8120a84:	89bb      	ldrh	r3, [r7, #12]
 8120a86:	1ad3      	subs	r3, r2, r3
 8120a88:	b29a      	uxth	r2, r3
 8120a8a:	687b      	ldr	r3, [r7, #4]
 8120a8c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8120a8e:	693b      	ldr	r3, [r7, #16]
 8120a90:	89ba      	ldrh	r2, [r7, #12]
 8120a92:	811a      	strh	r2, [r3, #8]
 8120a94:	693b      	ldr	r3, [r7, #16]
 8120a96:	891a      	ldrh	r2, [r3, #8]
 8120a98:	693b      	ldr	r3, [r7, #16]
 8120a9a:	815a      	strh	r2, [r3, #10]
  return p;
 8120a9c:	693b      	ldr	r3, [r7, #16]
}
 8120a9e:	4618      	mov	r0, r3
 8120aa0:	3718      	adds	r7, #24
 8120aa2:	46bd      	mov	sp, r7
 8120aa4:	bd80      	pop	{r7, pc}
 8120aa6:	bf00      	nop
 8120aa8:	08127694 	.word	0x08127694
 8120aac:	08127790 	.word	0x08127790
 8120ab0:	0812772c 	.word	0x0812772c
 8120ab4:	081277b4 	.word	0x081277b4
 8120ab8:	081277d4 	.word	0x081277d4

08120abc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8120abc:	b580      	push	{r7, lr}
 8120abe:	b082      	sub	sp, #8
 8120ac0:	af00      	add	r7, sp, #0
 8120ac2:	6078      	str	r0, [r7, #4]
 8120ac4:	460b      	mov	r3, r1
 8120ac6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8120ac8:	687b      	ldr	r3, [r7, #4]
 8120aca:	2b00      	cmp	r3, #0
 8120acc:	d106      	bne.n	8120adc <tcp_write_checks+0x20>
 8120ace:	4b33      	ldr	r3, [pc, #204]	@ (8120b9c <tcp_write_checks+0xe0>)
 8120ad0:	f240 1233 	movw	r2, #307	@ 0x133
 8120ad4:	4932      	ldr	r1, [pc, #200]	@ (8120ba0 <tcp_write_checks+0xe4>)
 8120ad6:	4833      	ldr	r0, [pc, #204]	@ (8120ba4 <tcp_write_checks+0xe8>)
 8120ad8:	f003 fdc0 	bl	812465c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8120adc:	687b      	ldr	r3, [r7, #4]
 8120ade:	7d1b      	ldrb	r3, [r3, #20]
 8120ae0:	2b04      	cmp	r3, #4
 8120ae2:	d00e      	beq.n	8120b02 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8120ae4:	687b      	ldr	r3, [r7, #4]
 8120ae6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8120ae8:	2b07      	cmp	r3, #7
 8120aea:	d00a      	beq.n	8120b02 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8120aec:	687b      	ldr	r3, [r7, #4]
 8120aee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8120af0:	2b02      	cmp	r3, #2
 8120af2:	d006      	beq.n	8120b02 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8120af4:	687b      	ldr	r3, [r7, #4]
 8120af6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8120af8:	2b03      	cmp	r3, #3
 8120afa:	d002      	beq.n	8120b02 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8120afc:	f06f 030a 	mvn.w	r3, #10
 8120b00:	e048      	b.n	8120b94 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8120b02:	887b      	ldrh	r3, [r7, #2]
 8120b04:	2b00      	cmp	r3, #0
 8120b06:	d101      	bne.n	8120b0c <tcp_write_checks+0x50>
    return ERR_OK;
 8120b08:	2300      	movs	r3, #0
 8120b0a:	e043      	b.n	8120b94 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8120b0c:	687b      	ldr	r3, [r7, #4]
 8120b0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8120b12:	887a      	ldrh	r2, [r7, #2]
 8120b14:	429a      	cmp	r2, r3
 8120b16:	d909      	bls.n	8120b2c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8120b18:	687b      	ldr	r3, [r7, #4]
 8120b1a:	8b5b      	ldrh	r3, [r3, #26]
 8120b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8120b20:	b29a      	uxth	r2, r3
 8120b22:	687b      	ldr	r3, [r7, #4]
 8120b24:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8120b26:	f04f 33ff 	mov.w	r3, #4294967295
 8120b2a:	e033      	b.n	8120b94 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8120b2c:	687b      	ldr	r3, [r7, #4]
 8120b2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120b32:	2b0f      	cmp	r3, #15
 8120b34:	d909      	bls.n	8120b4a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8120b36:	687b      	ldr	r3, [r7, #4]
 8120b38:	8b5b      	ldrh	r3, [r3, #26]
 8120b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8120b3e:	b29a      	uxth	r2, r3
 8120b40:	687b      	ldr	r3, [r7, #4]
 8120b42:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8120b44:	f04f 33ff 	mov.w	r3, #4294967295
 8120b48:	e024      	b.n	8120b94 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8120b4a:	687b      	ldr	r3, [r7, #4]
 8120b4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120b50:	2b00      	cmp	r3, #0
 8120b52:	d00f      	beq.n	8120b74 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8120b54:	687b      	ldr	r3, [r7, #4]
 8120b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120b58:	2b00      	cmp	r3, #0
 8120b5a:	d11a      	bne.n	8120b92 <tcp_write_checks+0xd6>
 8120b5c:	687b      	ldr	r3, [r7, #4]
 8120b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120b60:	2b00      	cmp	r3, #0
 8120b62:	d116      	bne.n	8120b92 <tcp_write_checks+0xd6>
 8120b64:	4b0d      	ldr	r3, [pc, #52]	@ (8120b9c <tcp_write_checks+0xe0>)
 8120b66:	f240 1255 	movw	r2, #341	@ 0x155
 8120b6a:	490f      	ldr	r1, [pc, #60]	@ (8120ba8 <tcp_write_checks+0xec>)
 8120b6c:	480d      	ldr	r0, [pc, #52]	@ (8120ba4 <tcp_write_checks+0xe8>)
 8120b6e:	f003 fd75 	bl	812465c <iprintf>
 8120b72:	e00e      	b.n	8120b92 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8120b74:	687b      	ldr	r3, [r7, #4]
 8120b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8120b78:	2b00      	cmp	r3, #0
 8120b7a:	d103      	bne.n	8120b84 <tcp_write_checks+0xc8>
 8120b7c:	687b      	ldr	r3, [r7, #4]
 8120b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120b80:	2b00      	cmp	r3, #0
 8120b82:	d006      	beq.n	8120b92 <tcp_write_checks+0xd6>
 8120b84:	4b05      	ldr	r3, [pc, #20]	@ (8120b9c <tcp_write_checks+0xe0>)
 8120b86:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8120b8a:	4908      	ldr	r1, [pc, #32]	@ (8120bac <tcp_write_checks+0xf0>)
 8120b8c:	4805      	ldr	r0, [pc, #20]	@ (8120ba4 <tcp_write_checks+0xe8>)
 8120b8e:	f003 fd65 	bl	812465c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8120b92:	2300      	movs	r3, #0
}
 8120b94:	4618      	mov	r0, r3
 8120b96:	3708      	adds	r7, #8
 8120b98:	46bd      	mov	sp, r7
 8120b9a:	bd80      	pop	{r7, pc}
 8120b9c:	08127694 	.word	0x08127694
 8120ba0:	081277e8 	.word	0x081277e8
 8120ba4:	0812772c 	.word	0x0812772c
 8120ba8:	08127808 	.word	0x08127808
 8120bac:	08127844 	.word	0x08127844

08120bb0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8120bb0:	b590      	push	{r4, r7, lr}
 8120bb2:	b09b      	sub	sp, #108	@ 0x6c
 8120bb4:	af04      	add	r7, sp, #16
 8120bb6:	60f8      	str	r0, [r7, #12]
 8120bb8:	60b9      	str	r1, [r7, #8]
 8120bba:	4611      	mov	r1, r2
 8120bbc:	461a      	mov	r2, r3
 8120bbe:	460b      	mov	r3, r1
 8120bc0:	80fb      	strh	r3, [r7, #6]
 8120bc2:	4613      	mov	r3, r2
 8120bc4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8120bc6:	2300      	movs	r3, #0
 8120bc8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8120bca:	2300      	movs	r3, #0
 8120bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8120bce:	2300      	movs	r3, #0
 8120bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8120bd2:	2300      	movs	r3, #0
 8120bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8120bd6:	2300      	movs	r3, #0
 8120bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8120bda:	2300      	movs	r3, #0
 8120bdc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8120be0:	2300      	movs	r3, #0
 8120be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8120be6:	2300      	movs	r3, #0
 8120be8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8120bea:	2300      	movs	r3, #0
 8120bec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8120bee:	2300      	movs	r3, #0
 8120bf0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8120bf2:	68fb      	ldr	r3, [r7, #12]
 8120bf4:	2b00      	cmp	r3, #0
 8120bf6:	d109      	bne.n	8120c0c <tcp_write+0x5c>
 8120bf8:	4ba4      	ldr	r3, [pc, #656]	@ (8120e8c <tcp_write+0x2dc>)
 8120bfa:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8120bfe:	49a4      	ldr	r1, [pc, #656]	@ (8120e90 <tcp_write+0x2e0>)
 8120c00:	48a4      	ldr	r0, [pc, #656]	@ (8120e94 <tcp_write+0x2e4>)
 8120c02:	f003 fd2b 	bl	812465c <iprintf>
 8120c06:	f06f 030f 	mvn.w	r3, #15
 8120c0a:	e32a      	b.n	8121262 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8120c0c:	68fb      	ldr	r3, [r7, #12]
 8120c0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8120c12:	085b      	lsrs	r3, r3, #1
 8120c14:	b29a      	uxth	r2, r3
 8120c16:	68fb      	ldr	r3, [r7, #12]
 8120c18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8120c1a:	4293      	cmp	r3, r2
 8120c1c:	bf28      	it	cs
 8120c1e:	4613      	movcs	r3, r2
 8120c20:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8120c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8120c24:	2b00      	cmp	r3, #0
 8120c26:	d102      	bne.n	8120c2e <tcp_write+0x7e>
 8120c28:	68fb      	ldr	r3, [r7, #12]
 8120c2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8120c2c:	e000      	b.n	8120c30 <tcp_write+0x80>
 8120c2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8120c30:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8120c32:	68bb      	ldr	r3, [r7, #8]
 8120c34:	2b00      	cmp	r3, #0
 8120c36:	d109      	bne.n	8120c4c <tcp_write+0x9c>
 8120c38:	4b94      	ldr	r3, [pc, #592]	@ (8120e8c <tcp_write+0x2dc>)
 8120c3a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8120c3e:	4996      	ldr	r1, [pc, #600]	@ (8120e98 <tcp_write+0x2e8>)
 8120c40:	4894      	ldr	r0, [pc, #592]	@ (8120e94 <tcp_write+0x2e4>)
 8120c42:	f003 fd0b 	bl	812465c <iprintf>
 8120c46:	f06f 030f 	mvn.w	r3, #15
 8120c4a:	e30a      	b.n	8121262 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8120c4c:	88fb      	ldrh	r3, [r7, #6]
 8120c4e:	4619      	mov	r1, r3
 8120c50:	68f8      	ldr	r0, [r7, #12]
 8120c52:	f7ff ff33 	bl	8120abc <tcp_write_checks>
 8120c56:	4603      	mov	r3, r0
 8120c58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8120c5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8120c60:	2b00      	cmp	r3, #0
 8120c62:	d002      	beq.n	8120c6a <tcp_write+0xba>
    return err;
 8120c64:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8120c68:	e2fb      	b.n	8121262 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8120c6a:	68fb      	ldr	r3, [r7, #12]
 8120c6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8120c70:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8120c74:	2300      	movs	r3, #0
 8120c76:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8120c7a:	68fb      	ldr	r3, [r7, #12]
 8120c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120c7e:	2b00      	cmp	r3, #0
 8120c80:	f000 80f6 	beq.w	8120e70 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8120c84:	68fb      	ldr	r3, [r7, #12]
 8120c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8120c88:	653b      	str	r3, [r7, #80]	@ 0x50
 8120c8a:	e002      	b.n	8120c92 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8120c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120c8e:	681b      	ldr	r3, [r3, #0]
 8120c90:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8120c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120c94:	681b      	ldr	r3, [r3, #0]
 8120c96:	2b00      	cmp	r3, #0
 8120c98:	d1f8      	bne.n	8120c8c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8120c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120c9c:	7a9b      	ldrb	r3, [r3, #10]
 8120c9e:	009b      	lsls	r3, r3, #2
 8120ca0:	b29b      	uxth	r3, r3
 8120ca2:	f003 0304 	and.w	r3, r3, #4
 8120ca6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8120ca8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8120caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120cac:	891b      	ldrh	r3, [r3, #8]
 8120cae:	4619      	mov	r1, r3
 8120cb0:	8c3b      	ldrh	r3, [r7, #32]
 8120cb2:	440b      	add	r3, r1
 8120cb4:	429a      	cmp	r2, r3
 8120cb6:	da06      	bge.n	8120cc6 <tcp_write+0x116>
 8120cb8:	4b74      	ldr	r3, [pc, #464]	@ (8120e8c <tcp_write+0x2dc>)
 8120cba:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8120cbe:	4977      	ldr	r1, [pc, #476]	@ (8120e9c <tcp_write+0x2ec>)
 8120cc0:	4874      	ldr	r0, [pc, #464]	@ (8120e94 <tcp_write+0x2e4>)
 8120cc2:	f003 fccb 	bl	812465c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8120cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120cc8:	891a      	ldrh	r2, [r3, #8]
 8120cca:	8c3b      	ldrh	r3, [r7, #32]
 8120ccc:	4413      	add	r3, r2
 8120cce:	b29b      	uxth	r3, r3
 8120cd0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8120cd2:	1ad3      	subs	r3, r2, r3
 8120cd4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8120cd6:	68fb      	ldr	r3, [r7, #12]
 8120cd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8120cdc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8120cde:	8a7b      	ldrh	r3, [r7, #18]
 8120ce0:	2b00      	cmp	r3, #0
 8120ce2:	d026      	beq.n	8120d32 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8120ce4:	8a7b      	ldrh	r3, [r7, #18]
 8120ce6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8120ce8:	429a      	cmp	r2, r3
 8120cea:	d206      	bcs.n	8120cfa <tcp_write+0x14a>
 8120cec:	4b67      	ldr	r3, [pc, #412]	@ (8120e8c <tcp_write+0x2dc>)
 8120cee:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8120cf2:	496b      	ldr	r1, [pc, #428]	@ (8120ea0 <tcp_write+0x2f0>)
 8120cf4:	4867      	ldr	r0, [pc, #412]	@ (8120e94 <tcp_write+0x2e4>)
 8120cf6:	f003 fcb1 	bl	812465c <iprintf>
      seg = last_unsent;
 8120cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8120cfe:	8a7b      	ldrh	r3, [r7, #18]
 8120d00:	88fa      	ldrh	r2, [r7, #6]
 8120d02:	4293      	cmp	r3, r2
 8120d04:	bf28      	it	cs
 8120d06:	4613      	movcs	r3, r2
 8120d08:	b29b      	uxth	r3, r3
 8120d0a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8120d0c:	4293      	cmp	r3, r2
 8120d0e:	bf28      	it	cs
 8120d10:	4613      	movcs	r3, r2
 8120d12:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8120d14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8120d18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8120d1a:	4413      	add	r3, r2
 8120d1c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8120d20:	8a7a      	ldrh	r2, [r7, #18]
 8120d22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8120d24:	1ad3      	subs	r3, r2, r3
 8120d26:	b29b      	uxth	r3, r3
 8120d28:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8120d2a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8120d2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8120d2e:	1ad3      	subs	r3, r2, r3
 8120d30:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8120d32:	8a7b      	ldrh	r3, [r7, #18]
 8120d34:	2b00      	cmp	r3, #0
 8120d36:	d00b      	beq.n	8120d50 <tcp_write+0x1a0>
 8120d38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8120d3c:	88fb      	ldrh	r3, [r7, #6]
 8120d3e:	429a      	cmp	r2, r3
 8120d40:	d006      	beq.n	8120d50 <tcp_write+0x1a0>
 8120d42:	4b52      	ldr	r3, [pc, #328]	@ (8120e8c <tcp_write+0x2dc>)
 8120d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8120d48:	4956      	ldr	r1, [pc, #344]	@ (8120ea4 <tcp_write+0x2f4>)
 8120d4a:	4852      	ldr	r0, [pc, #328]	@ (8120e94 <tcp_write+0x2e4>)
 8120d4c:	f003 fc86 	bl	812465c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8120d50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8120d54:	88fb      	ldrh	r3, [r7, #6]
 8120d56:	429a      	cmp	r2, r3
 8120d58:	f080 8167 	bcs.w	812102a <tcp_write+0x47a>
 8120d5c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8120d5e:	2b00      	cmp	r3, #0
 8120d60:	f000 8163 	beq.w	812102a <tcp_write+0x47a>
 8120d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120d66:	891b      	ldrh	r3, [r3, #8]
 8120d68:	2b00      	cmp	r3, #0
 8120d6a:	f000 815e 	beq.w	812102a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8120d6e:	88fa      	ldrh	r2, [r7, #6]
 8120d70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120d74:	1ad2      	subs	r2, r2, r3
 8120d76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8120d78:	4293      	cmp	r3, r2
 8120d7a:	bfa8      	it	ge
 8120d7c:	4613      	movge	r3, r2
 8120d7e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8120d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120d82:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8120d84:	797b      	ldrb	r3, [r7, #5]
 8120d86:	f003 0301 	and.w	r3, r3, #1
 8120d8a:	2b00      	cmp	r3, #0
 8120d8c:	d027      	beq.n	8120dde <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8120d8e:	f107 0012 	add.w	r0, r7, #18
 8120d92:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8120d94:	8bf9      	ldrh	r1, [r7, #30]
 8120d96:	2301      	movs	r3, #1
 8120d98:	9302      	str	r3, [sp, #8]
 8120d9a:	797b      	ldrb	r3, [r7, #5]
 8120d9c:	9301      	str	r3, [sp, #4]
 8120d9e:	68fb      	ldr	r3, [r7, #12]
 8120da0:	9300      	str	r3, [sp, #0]
 8120da2:	4603      	mov	r3, r0
 8120da4:	2000      	movs	r0, #0
 8120da6:	f7ff fe0f 	bl	81209c8 <tcp_pbuf_prealloc>
 8120daa:	6578      	str	r0, [r7, #84]	@ 0x54
 8120dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8120dae:	2b00      	cmp	r3, #0
 8120db0:	f000 8225 	beq.w	81211fe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8120db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8120db6:	6858      	ldr	r0, [r3, #4]
 8120db8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120dbc:	68ba      	ldr	r2, [r7, #8]
 8120dbe:	4413      	add	r3, r2
 8120dc0:	8bfa      	ldrh	r2, [r7, #30]
 8120dc2:	4619      	mov	r1, r3
 8120dc4:	f003 fead 	bl	8124b22 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8120dc8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8120dca:	f7fb f92d 	bl	811c028 <pbuf_clen>
 8120dce:	4603      	mov	r3, r0
 8120dd0:	461a      	mov	r2, r3
 8120dd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8120dd6:	4413      	add	r3, r2
 8120dd8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8120ddc:	e041      	b.n	8120e62 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8120dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8120de0:	685b      	ldr	r3, [r3, #4]
 8120de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8120de4:	e002      	b.n	8120dec <tcp_write+0x23c>
 8120de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8120de8:	681b      	ldr	r3, [r3, #0]
 8120dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8120dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8120dee:	681b      	ldr	r3, [r3, #0]
 8120df0:	2b00      	cmp	r3, #0
 8120df2:	d1f8      	bne.n	8120de6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8120df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8120df6:	7b1b      	ldrb	r3, [r3, #12]
 8120df8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8120dfc:	2b00      	cmp	r3, #0
 8120dfe:	d115      	bne.n	8120e2c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8120e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8120e02:	685b      	ldr	r3, [r3, #4]
 8120e04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8120e06:	8952      	ldrh	r2, [r2, #10]
 8120e08:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8120e0a:	68ba      	ldr	r2, [r7, #8]
 8120e0c:	429a      	cmp	r2, r3
 8120e0e:	d10d      	bne.n	8120e2c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8120e10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120e14:	2b00      	cmp	r3, #0
 8120e16:	d006      	beq.n	8120e26 <tcp_write+0x276>
 8120e18:	4b1c      	ldr	r3, [pc, #112]	@ (8120e8c <tcp_write+0x2dc>)
 8120e1a:	f240 2231 	movw	r2, #561	@ 0x231
 8120e1e:	4922      	ldr	r1, [pc, #136]	@ (8120ea8 <tcp_write+0x2f8>)
 8120e20:	481c      	ldr	r0, [pc, #112]	@ (8120e94 <tcp_write+0x2e4>)
 8120e22:	f003 fc1b 	bl	812465c <iprintf>
          extendlen = seglen;
 8120e26:	8bfb      	ldrh	r3, [r7, #30]
 8120e28:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8120e2a:	e01a      	b.n	8120e62 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8120e2c:	8bfb      	ldrh	r3, [r7, #30]
 8120e2e:	2201      	movs	r2, #1
 8120e30:	4619      	mov	r1, r3
 8120e32:	2000      	movs	r0, #0
 8120e34:	f7fa fd88 	bl	811b948 <pbuf_alloc>
 8120e38:	6578      	str	r0, [r7, #84]	@ 0x54
 8120e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8120e3c:	2b00      	cmp	r3, #0
 8120e3e:	f000 81e0 	beq.w	8121202 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8120e42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120e46:	68ba      	ldr	r2, [r7, #8]
 8120e48:	441a      	add	r2, r3
 8120e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8120e4c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8120e4e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8120e50:	f7fb f8ea 	bl	811c028 <pbuf_clen>
 8120e54:	4603      	mov	r3, r0
 8120e56:	461a      	mov	r2, r3
 8120e58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8120e5c:	4413      	add	r3, r2
 8120e5e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8120e62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8120e66:	8bfb      	ldrh	r3, [r7, #30]
 8120e68:	4413      	add	r3, r2
 8120e6a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8120e6e:	e0dc      	b.n	812102a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8120e70:	68fb      	ldr	r3, [r7, #12]
 8120e72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8120e76:	2b00      	cmp	r3, #0
 8120e78:	f000 80d7 	beq.w	812102a <tcp_write+0x47a>
 8120e7c:	4b03      	ldr	r3, [pc, #12]	@ (8120e8c <tcp_write+0x2dc>)
 8120e7e:	f240 224a 	movw	r2, #586	@ 0x24a
 8120e82:	490a      	ldr	r1, [pc, #40]	@ (8120eac <tcp_write+0x2fc>)
 8120e84:	4803      	ldr	r0, [pc, #12]	@ (8120e94 <tcp_write+0x2e4>)
 8120e86:	f003 fbe9 	bl	812465c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8120e8a:	e0ce      	b.n	812102a <tcp_write+0x47a>
 8120e8c:	08127694 	.word	0x08127694
 8120e90:	08127878 	.word	0x08127878
 8120e94:	0812772c 	.word	0x0812772c
 8120e98:	08127890 	.word	0x08127890
 8120e9c:	081278c4 	.word	0x081278c4
 8120ea0:	081278dc 	.word	0x081278dc
 8120ea4:	081278fc 	.word	0x081278fc
 8120ea8:	0812791c 	.word	0x0812791c
 8120eac:	08127948 	.word	0x08127948
    struct pbuf *p;
    u16_t left = len - pos;
 8120eb0:	88fa      	ldrh	r2, [r7, #6]
 8120eb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120eb6:	1ad3      	subs	r3, r2, r3
 8120eb8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8120eba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8120ebe:	b29b      	uxth	r3, r3
 8120ec0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8120ec2:	1ad3      	subs	r3, r2, r3
 8120ec4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8120ec6:	8b7a      	ldrh	r2, [r7, #26]
 8120ec8:	8bbb      	ldrh	r3, [r7, #28]
 8120eca:	4293      	cmp	r3, r2
 8120ecc:	bf28      	it	cs
 8120ece:	4613      	movcs	r3, r2
 8120ed0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8120ed2:	797b      	ldrb	r3, [r7, #5]
 8120ed4:	f003 0301 	and.w	r3, r3, #1
 8120ed8:	2b00      	cmp	r3, #0
 8120eda:	d036      	beq.n	8120f4a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8120edc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8120ee0:	b29a      	uxth	r2, r3
 8120ee2:	8b3b      	ldrh	r3, [r7, #24]
 8120ee4:	4413      	add	r3, r2
 8120ee6:	b299      	uxth	r1, r3
 8120ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8120eea:	2b00      	cmp	r3, #0
 8120eec:	bf0c      	ite	eq
 8120eee:	2301      	moveq	r3, #1
 8120ef0:	2300      	movne	r3, #0
 8120ef2:	b2db      	uxtb	r3, r3
 8120ef4:	f107 0012 	add.w	r0, r7, #18
 8120ef8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8120efa:	9302      	str	r3, [sp, #8]
 8120efc:	797b      	ldrb	r3, [r7, #5]
 8120efe:	9301      	str	r3, [sp, #4]
 8120f00:	68fb      	ldr	r3, [r7, #12]
 8120f02:	9300      	str	r3, [sp, #0]
 8120f04:	4603      	mov	r3, r0
 8120f06:	2036      	movs	r0, #54	@ 0x36
 8120f08:	f7ff fd5e 	bl	81209c8 <tcp_pbuf_prealloc>
 8120f0c:	6338      	str	r0, [r7, #48]	@ 0x30
 8120f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8120f10:	2b00      	cmp	r3, #0
 8120f12:	f000 8178 	beq.w	8121206 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8120f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8120f18:	895b      	ldrh	r3, [r3, #10]
 8120f1a:	8b3a      	ldrh	r2, [r7, #24]
 8120f1c:	429a      	cmp	r2, r3
 8120f1e:	d906      	bls.n	8120f2e <tcp_write+0x37e>
 8120f20:	4b8c      	ldr	r3, [pc, #560]	@ (8121154 <tcp_write+0x5a4>)
 8120f22:	f240 2266 	movw	r2, #614	@ 0x266
 8120f26:	498c      	ldr	r1, [pc, #560]	@ (8121158 <tcp_write+0x5a8>)
 8120f28:	488c      	ldr	r0, [pc, #560]	@ (812115c <tcp_write+0x5ac>)
 8120f2a:	f003 fb97 	bl	812465c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8120f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8120f30:	685a      	ldr	r2, [r3, #4]
 8120f32:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8120f36:	18d0      	adds	r0, r2, r3
 8120f38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120f3c:	68ba      	ldr	r2, [r7, #8]
 8120f3e:	4413      	add	r3, r2
 8120f40:	8b3a      	ldrh	r2, [r7, #24]
 8120f42:	4619      	mov	r1, r3
 8120f44:	f003 fded 	bl	8124b22 <memcpy>
 8120f48:	e02f      	b.n	8120faa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8120f4a:	8a7b      	ldrh	r3, [r7, #18]
 8120f4c:	2b00      	cmp	r3, #0
 8120f4e:	d006      	beq.n	8120f5e <tcp_write+0x3ae>
 8120f50:	4b80      	ldr	r3, [pc, #512]	@ (8121154 <tcp_write+0x5a4>)
 8120f52:	f240 2271 	movw	r2, #625	@ 0x271
 8120f56:	4982      	ldr	r1, [pc, #520]	@ (8121160 <tcp_write+0x5b0>)
 8120f58:	4880      	ldr	r0, [pc, #512]	@ (812115c <tcp_write+0x5ac>)
 8120f5a:	f003 fb7f 	bl	812465c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8120f5e:	8b3b      	ldrh	r3, [r7, #24]
 8120f60:	2201      	movs	r2, #1
 8120f62:	4619      	mov	r1, r3
 8120f64:	2036      	movs	r0, #54	@ 0x36
 8120f66:	f7fa fcef 	bl	811b948 <pbuf_alloc>
 8120f6a:	6178      	str	r0, [r7, #20]
 8120f6c:	697b      	ldr	r3, [r7, #20]
 8120f6e:	2b00      	cmp	r3, #0
 8120f70:	f000 814b 	beq.w	812120a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8120f74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120f78:	68ba      	ldr	r2, [r7, #8]
 8120f7a:	441a      	add	r2, r3
 8120f7c:	697b      	ldr	r3, [r7, #20]
 8120f7e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8120f80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8120f84:	b29b      	uxth	r3, r3
 8120f86:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120f8a:	4619      	mov	r1, r3
 8120f8c:	2036      	movs	r0, #54	@ 0x36
 8120f8e:	f7fa fcdb 	bl	811b948 <pbuf_alloc>
 8120f92:	6338      	str	r0, [r7, #48]	@ 0x30
 8120f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8120f96:	2b00      	cmp	r3, #0
 8120f98:	d103      	bne.n	8120fa2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8120f9a:	6978      	ldr	r0, [r7, #20]
 8120f9c:	f7fa ffb6 	bl	811bf0c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8120fa0:	e136      	b.n	8121210 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8120fa2:	6979      	ldr	r1, [r7, #20]
 8120fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8120fa6:	f7fb f87f 	bl	811c0a8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8120faa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8120fac:	f7fb f83c 	bl	811c028 <pbuf_clen>
 8120fb0:	4603      	mov	r3, r0
 8120fb2:	461a      	mov	r2, r3
 8120fb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8120fb8:	4413      	add	r3, r2
 8120fba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8120fbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8120fc2:	2b10      	cmp	r3, #16
 8120fc4:	d903      	bls.n	8120fce <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8120fc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8120fc8:	f7fa ffa0 	bl	811bf0c <pbuf_free>
      goto memerr;
 8120fcc:	e120      	b.n	8121210 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8120fce:	68fb      	ldr	r3, [r7, #12]
 8120fd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8120fd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8120fd6:	441a      	add	r2, r3
 8120fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8120fdc:	9300      	str	r3, [sp, #0]
 8120fde:	4613      	mov	r3, r2
 8120fe0:	2200      	movs	r2, #0
 8120fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8120fe4:	68f8      	ldr	r0, [r7, #12]
 8120fe6:	f7ff fc53 	bl	8120890 <tcp_create_segment>
 8120fea:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8120fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8120fee:	2b00      	cmp	r3, #0
 8120ff0:	f000 810d 	beq.w	812120e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8120ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8120ff6:	2b00      	cmp	r3, #0
 8120ff8:	d102      	bne.n	8121000 <tcp_write+0x450>
      queue = seg;
 8120ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8120ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8120ffe:	e00c      	b.n	812101a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8121000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8121002:	2b00      	cmp	r3, #0
 8121004:	d106      	bne.n	8121014 <tcp_write+0x464>
 8121006:	4b53      	ldr	r3, [pc, #332]	@ (8121154 <tcp_write+0x5a4>)
 8121008:	f240 22ab 	movw	r2, #683	@ 0x2ab
 812100c:	4955      	ldr	r1, [pc, #340]	@ (8121164 <tcp_write+0x5b4>)
 812100e:	4853      	ldr	r0, [pc, #332]	@ (812115c <tcp_write+0x5ac>)
 8121010:	f003 fb24 	bl	812465c <iprintf>
      prev_seg->next = seg;
 8121014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8121016:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8121018:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 812101a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 812101c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 812101e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8121022:	8b3b      	ldrh	r3, [r7, #24]
 8121024:	4413      	add	r3, r2
 8121026:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 812102a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 812102e:	88fb      	ldrh	r3, [r7, #6]
 8121030:	429a      	cmp	r2, r3
 8121032:	f4ff af3d 	bcc.w	8120eb0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8121036:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8121038:	2b00      	cmp	r3, #0
 812103a:	d02c      	beq.n	8121096 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 812103c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812103e:	685b      	ldr	r3, [r3, #4]
 8121040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8121042:	e01e      	b.n	8121082 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8121044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8121046:	891a      	ldrh	r2, [r3, #8]
 8121048:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 812104a:	4413      	add	r3, r2
 812104c:	b29a      	uxth	r2, r3
 812104e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8121050:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8121052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8121054:	681b      	ldr	r3, [r3, #0]
 8121056:	2b00      	cmp	r3, #0
 8121058:	d110      	bne.n	812107c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 812105a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812105c:	685b      	ldr	r3, [r3, #4]
 812105e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8121060:	8952      	ldrh	r2, [r2, #10]
 8121062:	4413      	add	r3, r2
 8121064:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8121066:	68b9      	ldr	r1, [r7, #8]
 8121068:	4618      	mov	r0, r3
 812106a:	f003 fd5a 	bl	8124b22 <memcpy>
        p->len += oversize_used;
 812106e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8121070:	895a      	ldrh	r2, [r3, #10]
 8121072:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8121074:	4413      	add	r3, r2
 8121076:	b29a      	uxth	r2, r3
 8121078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812107a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 812107c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 812107e:	681b      	ldr	r3, [r3, #0]
 8121080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8121082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8121084:	2b00      	cmp	r3, #0
 8121086:	d1dd      	bne.n	8121044 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8121088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812108a:	891a      	ldrh	r2, [r3, #8]
 812108c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 812108e:	4413      	add	r3, r2
 8121090:	b29a      	uxth	r2, r3
 8121092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8121094:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8121096:	8a7a      	ldrh	r2, [r7, #18]
 8121098:	68fb      	ldr	r3, [r7, #12]
 812109a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 812109e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81210a0:	2b00      	cmp	r3, #0
 81210a2:	d018      	beq.n	81210d6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 81210a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81210a6:	2b00      	cmp	r3, #0
 81210a8:	d106      	bne.n	81210b8 <tcp_write+0x508>
 81210aa:	4b2a      	ldr	r3, [pc, #168]	@ (8121154 <tcp_write+0x5a4>)
 81210ac:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 81210b0:	492d      	ldr	r1, [pc, #180]	@ (8121168 <tcp_write+0x5b8>)
 81210b2:	482a      	ldr	r0, [pc, #168]	@ (812115c <tcp_write+0x5ac>)
 81210b4:	f003 fad2 	bl	812465c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 81210b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81210ba:	685b      	ldr	r3, [r3, #4]
 81210bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 81210be:	4618      	mov	r0, r3
 81210c0:	f7fa fff2 	bl	811c0a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 81210c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81210c6:	891a      	ldrh	r2, [r3, #8]
 81210c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81210ca:	891b      	ldrh	r3, [r3, #8]
 81210cc:	4413      	add	r3, r2
 81210ce:	b29a      	uxth	r2, r3
 81210d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81210d2:	811a      	strh	r2, [r3, #8]
 81210d4:	e037      	b.n	8121146 <tcp_write+0x596>
  } else if (extendlen > 0) {
 81210d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81210d8:	2b00      	cmp	r3, #0
 81210da:	d034      	beq.n	8121146 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 81210dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81210de:	2b00      	cmp	r3, #0
 81210e0:	d003      	beq.n	81210ea <tcp_write+0x53a>
 81210e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81210e4:	685b      	ldr	r3, [r3, #4]
 81210e6:	2b00      	cmp	r3, #0
 81210e8:	d106      	bne.n	81210f8 <tcp_write+0x548>
 81210ea:	4b1a      	ldr	r3, [pc, #104]	@ (8121154 <tcp_write+0x5a4>)
 81210ec:	f240 22e6 	movw	r2, #742	@ 0x2e6
 81210f0:	491e      	ldr	r1, [pc, #120]	@ (812116c <tcp_write+0x5bc>)
 81210f2:	481a      	ldr	r0, [pc, #104]	@ (812115c <tcp_write+0x5ac>)
 81210f4:	f003 fab2 	bl	812465c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 81210f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81210fa:	685b      	ldr	r3, [r3, #4]
 81210fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 81210fe:	e009      	b.n	8121114 <tcp_write+0x564>
      p->tot_len += extendlen;
 8121100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8121102:	891a      	ldrh	r2, [r3, #8]
 8121104:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8121106:	4413      	add	r3, r2
 8121108:	b29a      	uxth	r2, r3
 812110a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812110c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 812110e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8121110:	681b      	ldr	r3, [r3, #0]
 8121112:	62bb      	str	r3, [r7, #40]	@ 0x28
 8121114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8121116:	681b      	ldr	r3, [r3, #0]
 8121118:	2b00      	cmp	r3, #0
 812111a:	d1f1      	bne.n	8121100 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 812111c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812111e:	891a      	ldrh	r2, [r3, #8]
 8121120:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8121122:	4413      	add	r3, r2
 8121124:	b29a      	uxth	r2, r3
 8121126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8121128:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 812112a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812112c:	895a      	ldrh	r2, [r3, #10]
 812112e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8121130:	4413      	add	r3, r2
 8121132:	b29a      	uxth	r2, r3
 8121134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8121136:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8121138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 812113a:	891a      	ldrh	r2, [r3, #8]
 812113c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 812113e:	4413      	add	r3, r2
 8121140:	b29a      	uxth	r2, r3
 8121142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8121144:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8121146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8121148:	2b00      	cmp	r3, #0
 812114a:	d111      	bne.n	8121170 <tcp_write+0x5c0>
    pcb->unsent = queue;
 812114c:	68fb      	ldr	r3, [r7, #12]
 812114e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8121150:	66da      	str	r2, [r3, #108]	@ 0x6c
 8121152:	e010      	b.n	8121176 <tcp_write+0x5c6>
 8121154:	08127694 	.word	0x08127694
 8121158:	08127978 	.word	0x08127978
 812115c:	0812772c 	.word	0x0812772c
 8121160:	081279b8 	.word	0x081279b8
 8121164:	081279c8 	.word	0x081279c8
 8121168:	081279dc 	.word	0x081279dc
 812116c:	08127a14 	.word	0x08127a14
  } else {
    last_unsent->next = queue;
 8121170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8121172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8121174:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8121176:	68fb      	ldr	r3, [r7, #12]
 8121178:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 812117a:	88fb      	ldrh	r3, [r7, #6]
 812117c:	441a      	add	r2, r3
 812117e:	68fb      	ldr	r3, [r7, #12]
 8121180:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8121182:	68fb      	ldr	r3, [r7, #12]
 8121184:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8121188:	88fb      	ldrh	r3, [r7, #6]
 812118a:	1ad3      	subs	r3, r2, r3
 812118c:	b29a      	uxth	r2, r3
 812118e:	68fb      	ldr	r3, [r7, #12]
 8121190:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8121194:	68fb      	ldr	r3, [r7, #12]
 8121196:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 812119a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 812119e:	68fb      	ldr	r3, [r7, #12]
 81211a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81211a4:	2b00      	cmp	r3, #0
 81211a6:	d00e      	beq.n	81211c6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 81211a8:	68fb      	ldr	r3, [r7, #12]
 81211aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81211ac:	2b00      	cmp	r3, #0
 81211ae:	d10a      	bne.n	81211c6 <tcp_write+0x616>
 81211b0:	68fb      	ldr	r3, [r7, #12]
 81211b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81211b4:	2b00      	cmp	r3, #0
 81211b6:	d106      	bne.n	81211c6 <tcp_write+0x616>
 81211b8:	4b2c      	ldr	r3, [pc, #176]	@ (812126c <tcp_write+0x6bc>)
 81211ba:	f240 3212 	movw	r2, #786	@ 0x312
 81211be:	492c      	ldr	r1, [pc, #176]	@ (8121270 <tcp_write+0x6c0>)
 81211c0:	482c      	ldr	r0, [pc, #176]	@ (8121274 <tcp_write+0x6c4>)
 81211c2:	f003 fa4b 	bl	812465c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 81211c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81211c8:	2b00      	cmp	r3, #0
 81211ca:	d016      	beq.n	81211fa <tcp_write+0x64a>
 81211cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81211ce:	68db      	ldr	r3, [r3, #12]
 81211d0:	2b00      	cmp	r3, #0
 81211d2:	d012      	beq.n	81211fa <tcp_write+0x64a>
 81211d4:	797b      	ldrb	r3, [r7, #5]
 81211d6:	f003 0302 	and.w	r3, r3, #2
 81211da:	2b00      	cmp	r3, #0
 81211dc:	d10d      	bne.n	81211fa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 81211de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81211e0:	68db      	ldr	r3, [r3, #12]
 81211e2:	899b      	ldrh	r3, [r3, #12]
 81211e4:	b29c      	uxth	r4, r3
 81211e6:	2008      	movs	r0, #8
 81211e8:	f7f6 fc88 	bl	8117afc <lwip_htons>
 81211ec:	4603      	mov	r3, r0
 81211ee:	461a      	mov	r2, r3
 81211f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81211f2:	68db      	ldr	r3, [r3, #12]
 81211f4:	4322      	orrs	r2, r4
 81211f6:	b292      	uxth	r2, r2
 81211f8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 81211fa:	2300      	movs	r3, #0
 81211fc:	e031      	b.n	8121262 <tcp_write+0x6b2>
          goto memerr;
 81211fe:	bf00      	nop
 8121200:	e006      	b.n	8121210 <tcp_write+0x660>
            goto memerr;
 8121202:	bf00      	nop
 8121204:	e004      	b.n	8121210 <tcp_write+0x660>
        goto memerr;
 8121206:	bf00      	nop
 8121208:	e002      	b.n	8121210 <tcp_write+0x660>
        goto memerr;
 812120a:	bf00      	nop
 812120c:	e000      	b.n	8121210 <tcp_write+0x660>
      goto memerr;
 812120e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8121210:	68fb      	ldr	r3, [r7, #12]
 8121212:	8b5b      	ldrh	r3, [r3, #26]
 8121214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8121218:	b29a      	uxth	r2, r3
 812121a:	68fb      	ldr	r3, [r7, #12]
 812121c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 812121e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8121220:	2b00      	cmp	r3, #0
 8121222:	d002      	beq.n	812122a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8121224:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8121226:	f7fa fe71 	bl	811bf0c <pbuf_free>
  }
  if (queue != NULL) {
 812122a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 812122c:	2b00      	cmp	r3, #0
 812122e:	d002      	beq.n	8121236 <tcp_write+0x686>
    tcp_segs_free(queue);
 8121230:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8121232:	f7fc fbd7 	bl	811d9e4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8121236:	68fb      	ldr	r3, [r7, #12]
 8121238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812123c:	2b00      	cmp	r3, #0
 812123e:	d00e      	beq.n	812125e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8121240:	68fb      	ldr	r3, [r7, #12]
 8121242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121244:	2b00      	cmp	r3, #0
 8121246:	d10a      	bne.n	812125e <tcp_write+0x6ae>
 8121248:	68fb      	ldr	r3, [r7, #12]
 812124a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812124c:	2b00      	cmp	r3, #0
 812124e:	d106      	bne.n	812125e <tcp_write+0x6ae>
 8121250:	4b06      	ldr	r3, [pc, #24]	@ (812126c <tcp_write+0x6bc>)
 8121252:	f240 3227 	movw	r2, #807	@ 0x327
 8121256:	4906      	ldr	r1, [pc, #24]	@ (8121270 <tcp_write+0x6c0>)
 8121258:	4806      	ldr	r0, [pc, #24]	@ (8121274 <tcp_write+0x6c4>)
 812125a:	f003 f9ff 	bl	812465c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 812125e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8121262:	4618      	mov	r0, r3
 8121264:	375c      	adds	r7, #92	@ 0x5c
 8121266:	46bd      	mov	sp, r7
 8121268:	bd90      	pop	{r4, r7, pc}
 812126a:	bf00      	nop
 812126c:	08127694 	.word	0x08127694
 8121270:	08127a4c 	.word	0x08127a4c
 8121274:	0812772c 	.word	0x0812772c

08121278 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8121278:	b590      	push	{r4, r7, lr}
 812127a:	b08b      	sub	sp, #44	@ 0x2c
 812127c:	af02      	add	r7, sp, #8
 812127e:	6078      	str	r0, [r7, #4]
 8121280:	460b      	mov	r3, r1
 8121282:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8121284:	2300      	movs	r3, #0
 8121286:	61fb      	str	r3, [r7, #28]
 8121288:	2300      	movs	r3, #0
 812128a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 812128c:	2300      	movs	r3, #0
 812128e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8121290:	687b      	ldr	r3, [r7, #4]
 8121292:	2b00      	cmp	r3, #0
 8121294:	d106      	bne.n	81212a4 <tcp_split_unsent_seg+0x2c>
 8121296:	4b95      	ldr	r3, [pc, #596]	@ (81214ec <tcp_split_unsent_seg+0x274>)
 8121298:	f240 324b 	movw	r2, #843	@ 0x34b
 812129c:	4994      	ldr	r1, [pc, #592]	@ (81214f0 <tcp_split_unsent_seg+0x278>)
 812129e:	4895      	ldr	r0, [pc, #596]	@ (81214f4 <tcp_split_unsent_seg+0x27c>)
 81212a0:	f003 f9dc 	bl	812465c <iprintf>

  useg = pcb->unsent;
 81212a4:	687b      	ldr	r3, [r7, #4]
 81212a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81212a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 81212aa:	697b      	ldr	r3, [r7, #20]
 81212ac:	2b00      	cmp	r3, #0
 81212ae:	d102      	bne.n	81212b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 81212b0:	f04f 33ff 	mov.w	r3, #4294967295
 81212b4:	e116      	b.n	81214e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 81212b6:	887b      	ldrh	r3, [r7, #2]
 81212b8:	2b00      	cmp	r3, #0
 81212ba:	d109      	bne.n	81212d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 81212bc:	4b8b      	ldr	r3, [pc, #556]	@ (81214ec <tcp_split_unsent_seg+0x274>)
 81212be:	f240 3253 	movw	r2, #851	@ 0x353
 81212c2:	498d      	ldr	r1, [pc, #564]	@ (81214f8 <tcp_split_unsent_seg+0x280>)
 81212c4:	488b      	ldr	r0, [pc, #556]	@ (81214f4 <tcp_split_unsent_seg+0x27c>)
 81212c6:	f003 f9c9 	bl	812465c <iprintf>
    return ERR_VAL;
 81212ca:	f06f 0305 	mvn.w	r3, #5
 81212ce:	e109      	b.n	81214e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 81212d0:	697b      	ldr	r3, [r7, #20]
 81212d2:	891b      	ldrh	r3, [r3, #8]
 81212d4:	887a      	ldrh	r2, [r7, #2]
 81212d6:	429a      	cmp	r2, r3
 81212d8:	d301      	bcc.n	81212de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 81212da:	2300      	movs	r3, #0
 81212dc:	e102      	b.n	81214e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 81212de:	687b      	ldr	r3, [r7, #4]
 81212e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81212e2:	887a      	ldrh	r2, [r7, #2]
 81212e4:	429a      	cmp	r2, r3
 81212e6:	d906      	bls.n	81212f6 <tcp_split_unsent_seg+0x7e>
 81212e8:	4b80      	ldr	r3, [pc, #512]	@ (81214ec <tcp_split_unsent_seg+0x274>)
 81212ea:	f240 325b 	movw	r2, #859	@ 0x35b
 81212ee:	4983      	ldr	r1, [pc, #524]	@ (81214fc <tcp_split_unsent_seg+0x284>)
 81212f0:	4880      	ldr	r0, [pc, #512]	@ (81214f4 <tcp_split_unsent_seg+0x27c>)
 81212f2:	f003 f9b3 	bl	812465c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 81212f6:	697b      	ldr	r3, [r7, #20]
 81212f8:	891b      	ldrh	r3, [r3, #8]
 81212fa:	2b00      	cmp	r3, #0
 81212fc:	d106      	bne.n	812130c <tcp_split_unsent_seg+0x94>
 81212fe:	4b7b      	ldr	r3, [pc, #492]	@ (81214ec <tcp_split_unsent_seg+0x274>)
 8121300:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8121304:	497e      	ldr	r1, [pc, #504]	@ (8121500 <tcp_split_unsent_seg+0x288>)
 8121306:	487b      	ldr	r0, [pc, #492]	@ (81214f4 <tcp_split_unsent_seg+0x27c>)
 8121308:	f003 f9a8 	bl	812465c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 812130c:	697b      	ldr	r3, [r7, #20]
 812130e:	7a9b      	ldrb	r3, [r3, #10]
 8121310:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8121312:	7bfb      	ldrb	r3, [r7, #15]
 8121314:	009b      	lsls	r3, r3, #2
 8121316:	b2db      	uxtb	r3, r3
 8121318:	f003 0304 	and.w	r3, r3, #4
 812131c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 812131e:	697b      	ldr	r3, [r7, #20]
 8121320:	891a      	ldrh	r2, [r3, #8]
 8121322:	887b      	ldrh	r3, [r7, #2]
 8121324:	1ad3      	subs	r3, r2, r3
 8121326:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8121328:	7bbb      	ldrb	r3, [r7, #14]
 812132a:	b29a      	uxth	r2, r3
 812132c:	89bb      	ldrh	r3, [r7, #12]
 812132e:	4413      	add	r3, r2
 8121330:	b29b      	uxth	r3, r3
 8121332:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8121336:	4619      	mov	r1, r3
 8121338:	2036      	movs	r0, #54	@ 0x36
 812133a:	f7fa fb05 	bl	811b948 <pbuf_alloc>
 812133e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8121340:	693b      	ldr	r3, [r7, #16]
 8121342:	2b00      	cmp	r3, #0
 8121344:	f000 80b7 	beq.w	81214b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8121348:	697b      	ldr	r3, [r7, #20]
 812134a:	685b      	ldr	r3, [r3, #4]
 812134c:	891a      	ldrh	r2, [r3, #8]
 812134e:	697b      	ldr	r3, [r7, #20]
 8121350:	891b      	ldrh	r3, [r3, #8]
 8121352:	1ad3      	subs	r3, r2, r3
 8121354:	b29a      	uxth	r2, r3
 8121356:	887b      	ldrh	r3, [r7, #2]
 8121358:	4413      	add	r3, r2
 812135a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 812135c:	697b      	ldr	r3, [r7, #20]
 812135e:	6858      	ldr	r0, [r3, #4]
 8121360:	693b      	ldr	r3, [r7, #16]
 8121362:	685a      	ldr	r2, [r3, #4]
 8121364:	7bbb      	ldrb	r3, [r7, #14]
 8121366:	18d1      	adds	r1, r2, r3
 8121368:	897b      	ldrh	r3, [r7, #10]
 812136a:	89ba      	ldrh	r2, [r7, #12]
 812136c:	f7fa ffd4 	bl	811c318 <pbuf_copy_partial>
 8121370:	4603      	mov	r3, r0
 8121372:	461a      	mov	r2, r3
 8121374:	89bb      	ldrh	r3, [r7, #12]
 8121376:	4293      	cmp	r3, r2
 8121378:	f040 809f 	bne.w	81214ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 812137c:	697b      	ldr	r3, [r7, #20]
 812137e:	68db      	ldr	r3, [r3, #12]
 8121380:	899b      	ldrh	r3, [r3, #12]
 8121382:	b29b      	uxth	r3, r3
 8121384:	4618      	mov	r0, r3
 8121386:	f7f6 fbb9 	bl	8117afc <lwip_htons>
 812138a:	4603      	mov	r3, r0
 812138c:	b2db      	uxtb	r3, r3
 812138e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8121392:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8121394:	2300      	movs	r3, #0
 8121396:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8121398:	7efb      	ldrb	r3, [r7, #27]
 812139a:	f003 0308 	and.w	r3, r3, #8
 812139e:	2b00      	cmp	r3, #0
 81213a0:	d007      	beq.n	81213b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 81213a2:	7efb      	ldrb	r3, [r7, #27]
 81213a4:	f023 0308 	bic.w	r3, r3, #8
 81213a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 81213aa:	7ebb      	ldrb	r3, [r7, #26]
 81213ac:	f043 0308 	orr.w	r3, r3, #8
 81213b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 81213b2:	7efb      	ldrb	r3, [r7, #27]
 81213b4:	f003 0301 	and.w	r3, r3, #1
 81213b8:	2b00      	cmp	r3, #0
 81213ba:	d007      	beq.n	81213cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 81213bc:	7efb      	ldrb	r3, [r7, #27]
 81213be:	f023 0301 	bic.w	r3, r3, #1
 81213c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 81213c4:	7ebb      	ldrb	r3, [r7, #26]
 81213c6:	f043 0301 	orr.w	r3, r3, #1
 81213ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 81213cc:	697b      	ldr	r3, [r7, #20]
 81213ce:	68db      	ldr	r3, [r3, #12]
 81213d0:	685b      	ldr	r3, [r3, #4]
 81213d2:	4618      	mov	r0, r3
 81213d4:	f7f6 fba7 	bl	8117b26 <lwip_htonl>
 81213d8:	4602      	mov	r2, r0
 81213da:	887b      	ldrh	r3, [r7, #2]
 81213dc:	18d1      	adds	r1, r2, r3
 81213de:	7eba      	ldrb	r2, [r7, #26]
 81213e0:	7bfb      	ldrb	r3, [r7, #15]
 81213e2:	9300      	str	r3, [sp, #0]
 81213e4:	460b      	mov	r3, r1
 81213e6:	6939      	ldr	r1, [r7, #16]
 81213e8:	6878      	ldr	r0, [r7, #4]
 81213ea:	f7ff fa51 	bl	8120890 <tcp_create_segment>
 81213ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 81213f0:	69fb      	ldr	r3, [r7, #28]
 81213f2:	2b00      	cmp	r3, #0
 81213f4:	d063      	beq.n	81214be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 81213f6:	697b      	ldr	r3, [r7, #20]
 81213f8:	685b      	ldr	r3, [r3, #4]
 81213fa:	4618      	mov	r0, r3
 81213fc:	f7fa fe14 	bl	811c028 <pbuf_clen>
 8121400:	4603      	mov	r3, r0
 8121402:	461a      	mov	r2, r3
 8121404:	687b      	ldr	r3, [r7, #4]
 8121406:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812140a:	1a9b      	subs	r3, r3, r2
 812140c:	b29a      	uxth	r2, r3
 812140e:	687b      	ldr	r3, [r7, #4]
 8121410:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8121414:	697b      	ldr	r3, [r7, #20]
 8121416:	6858      	ldr	r0, [r3, #4]
 8121418:	697b      	ldr	r3, [r7, #20]
 812141a:	685b      	ldr	r3, [r3, #4]
 812141c:	891a      	ldrh	r2, [r3, #8]
 812141e:	89bb      	ldrh	r3, [r7, #12]
 8121420:	1ad3      	subs	r3, r2, r3
 8121422:	b29b      	uxth	r3, r3
 8121424:	4619      	mov	r1, r3
 8121426:	f7fa fbed 	bl	811bc04 <pbuf_realloc>
  useg->len -= remainder;
 812142a:	697b      	ldr	r3, [r7, #20]
 812142c:	891a      	ldrh	r2, [r3, #8]
 812142e:	89bb      	ldrh	r3, [r7, #12]
 8121430:	1ad3      	subs	r3, r2, r3
 8121432:	b29a      	uxth	r2, r3
 8121434:	697b      	ldr	r3, [r7, #20]
 8121436:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8121438:	697b      	ldr	r3, [r7, #20]
 812143a:	68db      	ldr	r3, [r3, #12]
 812143c:	899b      	ldrh	r3, [r3, #12]
 812143e:	b29c      	uxth	r4, r3
 8121440:	7efb      	ldrb	r3, [r7, #27]
 8121442:	b29b      	uxth	r3, r3
 8121444:	4618      	mov	r0, r3
 8121446:	f7f6 fb59 	bl	8117afc <lwip_htons>
 812144a:	4603      	mov	r3, r0
 812144c:	461a      	mov	r2, r3
 812144e:	697b      	ldr	r3, [r7, #20]
 8121450:	68db      	ldr	r3, [r3, #12]
 8121452:	4322      	orrs	r2, r4
 8121454:	b292      	uxth	r2, r2
 8121456:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8121458:	697b      	ldr	r3, [r7, #20]
 812145a:	685b      	ldr	r3, [r3, #4]
 812145c:	4618      	mov	r0, r3
 812145e:	f7fa fde3 	bl	811c028 <pbuf_clen>
 8121462:	4603      	mov	r3, r0
 8121464:	461a      	mov	r2, r3
 8121466:	687b      	ldr	r3, [r7, #4]
 8121468:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812146c:	4413      	add	r3, r2
 812146e:	b29a      	uxth	r2, r3
 8121470:	687b      	ldr	r3, [r7, #4]
 8121472:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8121476:	69fb      	ldr	r3, [r7, #28]
 8121478:	685b      	ldr	r3, [r3, #4]
 812147a:	4618      	mov	r0, r3
 812147c:	f7fa fdd4 	bl	811c028 <pbuf_clen>
 8121480:	4603      	mov	r3, r0
 8121482:	461a      	mov	r2, r3
 8121484:	687b      	ldr	r3, [r7, #4]
 8121486:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 812148a:	4413      	add	r3, r2
 812148c:	b29a      	uxth	r2, r3
 812148e:	687b      	ldr	r3, [r7, #4]
 8121490:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8121494:	697b      	ldr	r3, [r7, #20]
 8121496:	681a      	ldr	r2, [r3, #0]
 8121498:	69fb      	ldr	r3, [r7, #28]
 812149a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 812149c:	697b      	ldr	r3, [r7, #20]
 812149e:	69fa      	ldr	r2, [r7, #28]
 81214a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 81214a2:	69fb      	ldr	r3, [r7, #28]
 81214a4:	681b      	ldr	r3, [r3, #0]
 81214a6:	2b00      	cmp	r3, #0
 81214a8:	d103      	bne.n	81214b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 81214aa:	687b      	ldr	r3, [r7, #4]
 81214ac:	2200      	movs	r2, #0
 81214ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 81214b2:	2300      	movs	r3, #0
 81214b4:	e016      	b.n	81214e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 81214b6:	bf00      	nop
 81214b8:	e002      	b.n	81214c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 81214ba:	bf00      	nop
 81214bc:	e000      	b.n	81214c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 81214be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 81214c0:	69fb      	ldr	r3, [r7, #28]
 81214c2:	2b00      	cmp	r3, #0
 81214c4:	d006      	beq.n	81214d4 <tcp_split_unsent_seg+0x25c>
 81214c6:	4b09      	ldr	r3, [pc, #36]	@ (81214ec <tcp_split_unsent_seg+0x274>)
 81214c8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 81214cc:	490d      	ldr	r1, [pc, #52]	@ (8121504 <tcp_split_unsent_seg+0x28c>)
 81214ce:	4809      	ldr	r0, [pc, #36]	@ (81214f4 <tcp_split_unsent_seg+0x27c>)
 81214d0:	f003 f8c4 	bl	812465c <iprintf>
  if (p != NULL) {
 81214d4:	693b      	ldr	r3, [r7, #16]
 81214d6:	2b00      	cmp	r3, #0
 81214d8:	d002      	beq.n	81214e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 81214da:	6938      	ldr	r0, [r7, #16]
 81214dc:	f7fa fd16 	bl	811bf0c <pbuf_free>
  }

  return ERR_MEM;
 81214e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81214e4:	4618      	mov	r0, r3
 81214e6:	3724      	adds	r7, #36	@ 0x24
 81214e8:	46bd      	mov	sp, r7
 81214ea:	bd90      	pop	{r4, r7, pc}
 81214ec:	08127694 	.word	0x08127694
 81214f0:	08127a6c 	.word	0x08127a6c
 81214f4:	0812772c 	.word	0x0812772c
 81214f8:	08127a90 	.word	0x08127a90
 81214fc:	08127ab4 	.word	0x08127ab4
 8121500:	08127ac4 	.word	0x08127ac4
 8121504:	08127ad4 	.word	0x08127ad4

08121508 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8121508:	b590      	push	{r4, r7, lr}
 812150a:	b085      	sub	sp, #20
 812150c:	af00      	add	r7, sp, #0
 812150e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8121510:	687b      	ldr	r3, [r7, #4]
 8121512:	2b00      	cmp	r3, #0
 8121514:	d106      	bne.n	8121524 <tcp_send_fin+0x1c>
 8121516:	4b21      	ldr	r3, [pc, #132]	@ (812159c <tcp_send_fin+0x94>)
 8121518:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 812151c:	4920      	ldr	r1, [pc, #128]	@ (81215a0 <tcp_send_fin+0x98>)
 812151e:	4821      	ldr	r0, [pc, #132]	@ (81215a4 <tcp_send_fin+0x9c>)
 8121520:	f003 f89c 	bl	812465c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8121524:	687b      	ldr	r3, [r7, #4]
 8121526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121528:	2b00      	cmp	r3, #0
 812152a:	d02e      	beq.n	812158a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 812152c:	687b      	ldr	r3, [r7, #4]
 812152e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121530:	60fb      	str	r3, [r7, #12]
 8121532:	e002      	b.n	812153a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8121534:	68fb      	ldr	r3, [r7, #12]
 8121536:	681b      	ldr	r3, [r3, #0]
 8121538:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 812153a:	68fb      	ldr	r3, [r7, #12]
 812153c:	681b      	ldr	r3, [r3, #0]
 812153e:	2b00      	cmp	r3, #0
 8121540:	d1f8      	bne.n	8121534 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8121542:	68fb      	ldr	r3, [r7, #12]
 8121544:	68db      	ldr	r3, [r3, #12]
 8121546:	899b      	ldrh	r3, [r3, #12]
 8121548:	b29b      	uxth	r3, r3
 812154a:	4618      	mov	r0, r3
 812154c:	f7f6 fad6 	bl	8117afc <lwip_htons>
 8121550:	4603      	mov	r3, r0
 8121552:	b2db      	uxtb	r3, r3
 8121554:	f003 0307 	and.w	r3, r3, #7
 8121558:	2b00      	cmp	r3, #0
 812155a:	d116      	bne.n	812158a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 812155c:	68fb      	ldr	r3, [r7, #12]
 812155e:	68db      	ldr	r3, [r3, #12]
 8121560:	899b      	ldrh	r3, [r3, #12]
 8121562:	b29c      	uxth	r4, r3
 8121564:	2001      	movs	r0, #1
 8121566:	f7f6 fac9 	bl	8117afc <lwip_htons>
 812156a:	4603      	mov	r3, r0
 812156c:	461a      	mov	r2, r3
 812156e:	68fb      	ldr	r3, [r7, #12]
 8121570:	68db      	ldr	r3, [r3, #12]
 8121572:	4322      	orrs	r2, r4
 8121574:	b292      	uxth	r2, r2
 8121576:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8121578:	687b      	ldr	r3, [r7, #4]
 812157a:	8b5b      	ldrh	r3, [r3, #26]
 812157c:	f043 0320 	orr.w	r3, r3, #32
 8121580:	b29a      	uxth	r2, r3
 8121582:	687b      	ldr	r3, [r7, #4]
 8121584:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8121586:	2300      	movs	r3, #0
 8121588:	e004      	b.n	8121594 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 812158a:	2101      	movs	r1, #1
 812158c:	6878      	ldr	r0, [r7, #4]
 812158e:	f000 f80b 	bl	81215a8 <tcp_enqueue_flags>
 8121592:	4603      	mov	r3, r0
}
 8121594:	4618      	mov	r0, r3
 8121596:	3714      	adds	r7, #20
 8121598:	46bd      	mov	sp, r7
 812159a:	bd90      	pop	{r4, r7, pc}
 812159c:	08127694 	.word	0x08127694
 81215a0:	08127ae0 	.word	0x08127ae0
 81215a4:	0812772c 	.word	0x0812772c

081215a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 81215a8:	b580      	push	{r7, lr}
 81215aa:	b08a      	sub	sp, #40	@ 0x28
 81215ac:	af02      	add	r7, sp, #8
 81215ae:	6078      	str	r0, [r7, #4]
 81215b0:	460b      	mov	r3, r1
 81215b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 81215b4:	2300      	movs	r3, #0
 81215b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 81215b8:	2300      	movs	r3, #0
 81215ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 81215bc:	78fb      	ldrb	r3, [r7, #3]
 81215be:	f003 0303 	and.w	r3, r3, #3
 81215c2:	2b00      	cmp	r3, #0
 81215c4:	d106      	bne.n	81215d4 <tcp_enqueue_flags+0x2c>
 81215c6:	4b67      	ldr	r3, [pc, #412]	@ (8121764 <tcp_enqueue_flags+0x1bc>)
 81215c8:	f240 4211 	movw	r2, #1041	@ 0x411
 81215cc:	4966      	ldr	r1, [pc, #408]	@ (8121768 <tcp_enqueue_flags+0x1c0>)
 81215ce:	4867      	ldr	r0, [pc, #412]	@ (812176c <tcp_enqueue_flags+0x1c4>)
 81215d0:	f003 f844 	bl	812465c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 81215d4:	687b      	ldr	r3, [r7, #4]
 81215d6:	2b00      	cmp	r3, #0
 81215d8:	d106      	bne.n	81215e8 <tcp_enqueue_flags+0x40>
 81215da:	4b62      	ldr	r3, [pc, #392]	@ (8121764 <tcp_enqueue_flags+0x1bc>)
 81215dc:	f240 4213 	movw	r2, #1043	@ 0x413
 81215e0:	4963      	ldr	r1, [pc, #396]	@ (8121770 <tcp_enqueue_flags+0x1c8>)
 81215e2:	4862      	ldr	r0, [pc, #392]	@ (812176c <tcp_enqueue_flags+0x1c4>)
 81215e4:	f003 f83a 	bl	812465c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 81215e8:	78fb      	ldrb	r3, [r7, #3]
 81215ea:	f003 0302 	and.w	r3, r3, #2
 81215ee:	2b00      	cmp	r3, #0
 81215f0:	d001      	beq.n	81215f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 81215f2:	2301      	movs	r3, #1
 81215f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 81215f6:	7ffb      	ldrb	r3, [r7, #31]
 81215f8:	009b      	lsls	r3, r3, #2
 81215fa:	b2db      	uxtb	r3, r3
 81215fc:	f003 0304 	and.w	r3, r3, #4
 8121600:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8121602:	7dfb      	ldrb	r3, [r7, #23]
 8121604:	b29b      	uxth	r3, r3
 8121606:	f44f 7220 	mov.w	r2, #640	@ 0x280
 812160a:	4619      	mov	r1, r3
 812160c:	2036      	movs	r0, #54	@ 0x36
 812160e:	f7fa f99b 	bl	811b948 <pbuf_alloc>
 8121612:	6138      	str	r0, [r7, #16]
 8121614:	693b      	ldr	r3, [r7, #16]
 8121616:	2b00      	cmp	r3, #0
 8121618:	d109      	bne.n	812162e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 812161a:	687b      	ldr	r3, [r7, #4]
 812161c:	8b5b      	ldrh	r3, [r3, #26]
 812161e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8121622:	b29a      	uxth	r2, r3
 8121624:	687b      	ldr	r3, [r7, #4]
 8121626:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8121628:	f04f 33ff 	mov.w	r3, #4294967295
 812162c:	e095      	b.n	812175a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 812162e:	693b      	ldr	r3, [r7, #16]
 8121630:	895a      	ldrh	r2, [r3, #10]
 8121632:	7dfb      	ldrb	r3, [r7, #23]
 8121634:	b29b      	uxth	r3, r3
 8121636:	429a      	cmp	r2, r3
 8121638:	d206      	bcs.n	8121648 <tcp_enqueue_flags+0xa0>
 812163a:	4b4a      	ldr	r3, [pc, #296]	@ (8121764 <tcp_enqueue_flags+0x1bc>)
 812163c:	f240 4239 	movw	r2, #1081	@ 0x439
 8121640:	494c      	ldr	r1, [pc, #304]	@ (8121774 <tcp_enqueue_flags+0x1cc>)
 8121642:	484a      	ldr	r0, [pc, #296]	@ (812176c <tcp_enqueue_flags+0x1c4>)
 8121644:	f003 f80a 	bl	812465c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8121648:	687b      	ldr	r3, [r7, #4]
 812164a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 812164c:	78fa      	ldrb	r2, [r7, #3]
 812164e:	7ffb      	ldrb	r3, [r7, #31]
 8121650:	9300      	str	r3, [sp, #0]
 8121652:	460b      	mov	r3, r1
 8121654:	6939      	ldr	r1, [r7, #16]
 8121656:	6878      	ldr	r0, [r7, #4]
 8121658:	f7ff f91a 	bl	8120890 <tcp_create_segment>
 812165c:	60f8      	str	r0, [r7, #12]
 812165e:	68fb      	ldr	r3, [r7, #12]
 8121660:	2b00      	cmp	r3, #0
 8121662:	d109      	bne.n	8121678 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8121664:	687b      	ldr	r3, [r7, #4]
 8121666:	8b5b      	ldrh	r3, [r3, #26]
 8121668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 812166c:	b29a      	uxth	r2, r3
 812166e:	687b      	ldr	r3, [r7, #4]
 8121670:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8121672:	f04f 33ff 	mov.w	r3, #4294967295
 8121676:	e070      	b.n	812175a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8121678:	68fb      	ldr	r3, [r7, #12]
 812167a:	68db      	ldr	r3, [r3, #12]
 812167c:	f003 0303 	and.w	r3, r3, #3
 8121680:	2b00      	cmp	r3, #0
 8121682:	d006      	beq.n	8121692 <tcp_enqueue_flags+0xea>
 8121684:	4b37      	ldr	r3, [pc, #220]	@ (8121764 <tcp_enqueue_flags+0x1bc>)
 8121686:	f240 4242 	movw	r2, #1090	@ 0x442
 812168a:	493b      	ldr	r1, [pc, #236]	@ (8121778 <tcp_enqueue_flags+0x1d0>)
 812168c:	4837      	ldr	r0, [pc, #220]	@ (812176c <tcp_enqueue_flags+0x1c4>)
 812168e:	f002 ffe5 	bl	812465c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8121692:	68fb      	ldr	r3, [r7, #12]
 8121694:	891b      	ldrh	r3, [r3, #8]
 8121696:	2b00      	cmp	r3, #0
 8121698:	d006      	beq.n	81216a8 <tcp_enqueue_flags+0x100>
 812169a:	4b32      	ldr	r3, [pc, #200]	@ (8121764 <tcp_enqueue_flags+0x1bc>)
 812169c:	f240 4243 	movw	r2, #1091	@ 0x443
 81216a0:	4936      	ldr	r1, [pc, #216]	@ (812177c <tcp_enqueue_flags+0x1d4>)
 81216a2:	4832      	ldr	r0, [pc, #200]	@ (812176c <tcp_enqueue_flags+0x1c4>)
 81216a4:	f002 ffda 	bl	812465c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 81216a8:	687b      	ldr	r3, [r7, #4]
 81216aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81216ac:	2b00      	cmp	r3, #0
 81216ae:	d103      	bne.n	81216b8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 81216b0:	687b      	ldr	r3, [r7, #4]
 81216b2:	68fa      	ldr	r2, [r7, #12]
 81216b4:	66da      	str	r2, [r3, #108]	@ 0x6c
 81216b6:	e00d      	b.n	81216d4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 81216b8:	687b      	ldr	r3, [r7, #4]
 81216ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81216bc:	61bb      	str	r3, [r7, #24]
 81216be:	e002      	b.n	81216c6 <tcp_enqueue_flags+0x11e>
 81216c0:	69bb      	ldr	r3, [r7, #24]
 81216c2:	681b      	ldr	r3, [r3, #0]
 81216c4:	61bb      	str	r3, [r7, #24]
 81216c6:	69bb      	ldr	r3, [r7, #24]
 81216c8:	681b      	ldr	r3, [r3, #0]
 81216ca:	2b00      	cmp	r3, #0
 81216cc:	d1f8      	bne.n	81216c0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 81216ce:	69bb      	ldr	r3, [r7, #24]
 81216d0:	68fa      	ldr	r2, [r7, #12]
 81216d2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 81216d4:	687b      	ldr	r3, [r7, #4]
 81216d6:	2200      	movs	r2, #0
 81216d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 81216dc:	78fb      	ldrb	r3, [r7, #3]
 81216de:	f003 0302 	and.w	r3, r3, #2
 81216e2:	2b00      	cmp	r3, #0
 81216e4:	d104      	bne.n	81216f0 <tcp_enqueue_flags+0x148>
 81216e6:	78fb      	ldrb	r3, [r7, #3]
 81216e8:	f003 0301 	and.w	r3, r3, #1
 81216ec:	2b00      	cmp	r3, #0
 81216ee:	d004      	beq.n	81216fa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 81216f0:	687b      	ldr	r3, [r7, #4]
 81216f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81216f4:	1c5a      	adds	r2, r3, #1
 81216f6:	687b      	ldr	r3, [r7, #4]
 81216f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 81216fa:	78fb      	ldrb	r3, [r7, #3]
 81216fc:	f003 0301 	and.w	r3, r3, #1
 8121700:	2b00      	cmp	r3, #0
 8121702:	d006      	beq.n	8121712 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8121704:	687b      	ldr	r3, [r7, #4]
 8121706:	8b5b      	ldrh	r3, [r3, #26]
 8121708:	f043 0320 	orr.w	r3, r3, #32
 812170c:	b29a      	uxth	r2, r3
 812170e:	687b      	ldr	r3, [r7, #4]
 8121710:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8121712:	68fb      	ldr	r3, [r7, #12]
 8121714:	685b      	ldr	r3, [r3, #4]
 8121716:	4618      	mov	r0, r3
 8121718:	f7fa fc86 	bl	811c028 <pbuf_clen>
 812171c:	4603      	mov	r3, r0
 812171e:	461a      	mov	r2, r3
 8121720:	687b      	ldr	r3, [r7, #4]
 8121722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8121726:	4413      	add	r3, r2
 8121728:	b29a      	uxth	r2, r3
 812172a:	687b      	ldr	r3, [r7, #4]
 812172c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8121730:	687b      	ldr	r3, [r7, #4]
 8121732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8121736:	2b00      	cmp	r3, #0
 8121738:	d00e      	beq.n	8121758 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 812173a:	687b      	ldr	r3, [r7, #4]
 812173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812173e:	2b00      	cmp	r3, #0
 8121740:	d10a      	bne.n	8121758 <tcp_enqueue_flags+0x1b0>
 8121742:	687b      	ldr	r3, [r7, #4]
 8121744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121746:	2b00      	cmp	r3, #0
 8121748:	d106      	bne.n	8121758 <tcp_enqueue_flags+0x1b0>
 812174a:	4b06      	ldr	r3, [pc, #24]	@ (8121764 <tcp_enqueue_flags+0x1bc>)
 812174c:	f240 4265 	movw	r2, #1125	@ 0x465
 8121750:	490b      	ldr	r1, [pc, #44]	@ (8121780 <tcp_enqueue_flags+0x1d8>)
 8121752:	4806      	ldr	r0, [pc, #24]	@ (812176c <tcp_enqueue_flags+0x1c4>)
 8121754:	f002 ff82 	bl	812465c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8121758:	2300      	movs	r3, #0
}
 812175a:	4618      	mov	r0, r3
 812175c:	3720      	adds	r7, #32
 812175e:	46bd      	mov	sp, r7
 8121760:	bd80      	pop	{r7, pc}
 8121762:	bf00      	nop
 8121764:	08127694 	.word	0x08127694
 8121768:	08127afc 	.word	0x08127afc
 812176c:	0812772c 	.word	0x0812772c
 8121770:	08127b54 	.word	0x08127b54
 8121774:	08127b74 	.word	0x08127b74
 8121778:	08127bb0 	.word	0x08127bb0
 812177c:	08127bc8 	.word	0x08127bc8
 8121780:	08127bf4 	.word	0x08127bf4

08121784 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8121784:	b5b0      	push	{r4, r5, r7, lr}
 8121786:	b08a      	sub	sp, #40	@ 0x28
 8121788:	af00      	add	r7, sp, #0
 812178a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 812178c:	687b      	ldr	r3, [r7, #4]
 812178e:	2b00      	cmp	r3, #0
 8121790:	d106      	bne.n	81217a0 <tcp_output+0x1c>
 8121792:	4b8a      	ldr	r3, [pc, #552]	@ (81219bc <tcp_output+0x238>)
 8121794:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8121798:	4989      	ldr	r1, [pc, #548]	@ (81219c0 <tcp_output+0x23c>)
 812179a:	488a      	ldr	r0, [pc, #552]	@ (81219c4 <tcp_output+0x240>)
 812179c:	f002 ff5e 	bl	812465c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 81217a0:	687b      	ldr	r3, [r7, #4]
 81217a2:	7d1b      	ldrb	r3, [r3, #20]
 81217a4:	2b01      	cmp	r3, #1
 81217a6:	d106      	bne.n	81217b6 <tcp_output+0x32>
 81217a8:	4b84      	ldr	r3, [pc, #528]	@ (81219bc <tcp_output+0x238>)
 81217aa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 81217ae:	4986      	ldr	r1, [pc, #536]	@ (81219c8 <tcp_output+0x244>)
 81217b0:	4884      	ldr	r0, [pc, #528]	@ (81219c4 <tcp_output+0x240>)
 81217b2:	f002 ff53 	bl	812465c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 81217b6:	4b85      	ldr	r3, [pc, #532]	@ (81219cc <tcp_output+0x248>)
 81217b8:	681b      	ldr	r3, [r3, #0]
 81217ba:	687a      	ldr	r2, [r7, #4]
 81217bc:	429a      	cmp	r2, r3
 81217be:	d101      	bne.n	81217c4 <tcp_output+0x40>
    return ERR_OK;
 81217c0:	2300      	movs	r3, #0
 81217c2:	e1ce      	b.n	8121b62 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 81217c4:	687b      	ldr	r3, [r7, #4]
 81217c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81217ca:	687b      	ldr	r3, [r7, #4]
 81217cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81217d0:	4293      	cmp	r3, r2
 81217d2:	bf28      	it	cs
 81217d4:	4613      	movcs	r3, r2
 81217d6:	b29b      	uxth	r3, r3
 81217d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 81217da:	687b      	ldr	r3, [r7, #4]
 81217dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81217de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 81217e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81217e2:	2b00      	cmp	r3, #0
 81217e4:	d10b      	bne.n	81217fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 81217e6:	687b      	ldr	r3, [r7, #4]
 81217e8:	8b5b      	ldrh	r3, [r3, #26]
 81217ea:	f003 0302 	and.w	r3, r3, #2
 81217ee:	2b00      	cmp	r3, #0
 81217f0:	f000 81aa 	beq.w	8121b48 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 81217f4:	6878      	ldr	r0, [r7, #4]
 81217f6:	f000 fdcb 	bl	8122390 <tcp_send_empty_ack>
 81217fa:	4603      	mov	r3, r0
 81217fc:	e1b1      	b.n	8121b62 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 81217fe:	6879      	ldr	r1, [r7, #4]
 8121800:	687b      	ldr	r3, [r7, #4]
 8121802:	3304      	adds	r3, #4
 8121804:	461a      	mov	r2, r3
 8121806:	6878      	ldr	r0, [r7, #4]
 8121808:	f7ff f826 	bl	8120858 <tcp_route>
 812180c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 812180e:	697b      	ldr	r3, [r7, #20]
 8121810:	2b00      	cmp	r3, #0
 8121812:	d102      	bne.n	812181a <tcp_output+0x96>
    return ERR_RTE;
 8121814:	f06f 0303 	mvn.w	r3, #3
 8121818:	e1a3      	b.n	8121b62 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 812181a:	687b      	ldr	r3, [r7, #4]
 812181c:	2b00      	cmp	r3, #0
 812181e:	d003      	beq.n	8121828 <tcp_output+0xa4>
 8121820:	687b      	ldr	r3, [r7, #4]
 8121822:	681b      	ldr	r3, [r3, #0]
 8121824:	2b00      	cmp	r3, #0
 8121826:	d111      	bne.n	812184c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8121828:	697b      	ldr	r3, [r7, #20]
 812182a:	2b00      	cmp	r3, #0
 812182c:	d002      	beq.n	8121834 <tcp_output+0xb0>
 812182e:	697b      	ldr	r3, [r7, #20]
 8121830:	3304      	adds	r3, #4
 8121832:	e000      	b.n	8121836 <tcp_output+0xb2>
 8121834:	2300      	movs	r3, #0
 8121836:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8121838:	693b      	ldr	r3, [r7, #16]
 812183a:	2b00      	cmp	r3, #0
 812183c:	d102      	bne.n	8121844 <tcp_output+0xc0>
      return ERR_RTE;
 812183e:	f06f 0303 	mvn.w	r3, #3
 8121842:	e18e      	b.n	8121b62 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8121844:	693b      	ldr	r3, [r7, #16]
 8121846:	681a      	ldr	r2, [r3, #0]
 8121848:	687b      	ldr	r3, [r7, #4]
 812184a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 812184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812184e:	68db      	ldr	r3, [r3, #12]
 8121850:	685b      	ldr	r3, [r3, #4]
 8121852:	4618      	mov	r0, r3
 8121854:	f7f6 f967 	bl	8117b26 <lwip_htonl>
 8121858:	4602      	mov	r2, r0
 812185a:	687b      	ldr	r3, [r7, #4]
 812185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 812185e:	1ad3      	subs	r3, r2, r3
 8121860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8121862:	8912      	ldrh	r2, [r2, #8]
 8121864:	4413      	add	r3, r2
 8121866:	69ba      	ldr	r2, [r7, #24]
 8121868:	429a      	cmp	r2, r3
 812186a:	d227      	bcs.n	81218bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 812186c:	687b      	ldr	r3, [r7, #4]
 812186e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8121872:	461a      	mov	r2, r3
 8121874:	69bb      	ldr	r3, [r7, #24]
 8121876:	4293      	cmp	r3, r2
 8121878:	d114      	bne.n	81218a4 <tcp_output+0x120>
 812187a:	687b      	ldr	r3, [r7, #4]
 812187c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 812187e:	2b00      	cmp	r3, #0
 8121880:	d110      	bne.n	81218a4 <tcp_output+0x120>
 8121882:	687b      	ldr	r3, [r7, #4]
 8121884:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8121888:	2b00      	cmp	r3, #0
 812188a:	d10b      	bne.n	81218a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 812188c:	687b      	ldr	r3, [r7, #4]
 812188e:	2200      	movs	r2, #0
 8121890:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 8121894:	687b      	ldr	r3, [r7, #4]
 8121896:	2201      	movs	r2, #1
 8121898:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 812189c:	687b      	ldr	r3, [r7, #4]
 812189e:	2200      	movs	r2, #0
 81218a0:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 81218a4:	687b      	ldr	r3, [r7, #4]
 81218a6:	8b5b      	ldrh	r3, [r3, #26]
 81218a8:	f003 0302 	and.w	r3, r3, #2
 81218ac:	2b00      	cmp	r3, #0
 81218ae:	f000 814d 	beq.w	8121b4c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 81218b2:	6878      	ldr	r0, [r7, #4]
 81218b4:	f000 fd6c 	bl	8122390 <tcp_send_empty_ack>
 81218b8:	4603      	mov	r3, r0
 81218ba:	e152      	b.n	8121b62 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 81218bc:	687b      	ldr	r3, [r7, #4]
 81218be:	2200      	movs	r2, #0
 81218c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 81218c4:	687b      	ldr	r3, [r7, #4]
 81218c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81218c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 81218ca:	6a3b      	ldr	r3, [r7, #32]
 81218cc:	2b00      	cmp	r3, #0
 81218ce:	f000 811c 	beq.w	8121b0a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 81218d2:	e002      	b.n	81218da <tcp_output+0x156>
 81218d4:	6a3b      	ldr	r3, [r7, #32]
 81218d6:	681b      	ldr	r3, [r3, #0]
 81218d8:	623b      	str	r3, [r7, #32]
 81218da:	6a3b      	ldr	r3, [r7, #32]
 81218dc:	681b      	ldr	r3, [r3, #0]
 81218de:	2b00      	cmp	r3, #0
 81218e0:	d1f8      	bne.n	81218d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 81218e2:	e112      	b.n	8121b0a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 81218e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81218e6:	68db      	ldr	r3, [r3, #12]
 81218e8:	899b      	ldrh	r3, [r3, #12]
 81218ea:	b29b      	uxth	r3, r3
 81218ec:	4618      	mov	r0, r3
 81218ee:	f7f6 f905 	bl	8117afc <lwip_htons>
 81218f2:	4603      	mov	r3, r0
 81218f4:	b2db      	uxtb	r3, r3
 81218f6:	f003 0304 	and.w	r3, r3, #4
 81218fa:	2b00      	cmp	r3, #0
 81218fc:	d006      	beq.n	812190c <tcp_output+0x188>
 81218fe:	4b2f      	ldr	r3, [pc, #188]	@ (81219bc <tcp_output+0x238>)
 8121900:	f240 5236 	movw	r2, #1334	@ 0x536
 8121904:	4932      	ldr	r1, [pc, #200]	@ (81219d0 <tcp_output+0x24c>)
 8121906:	482f      	ldr	r0, [pc, #188]	@ (81219c4 <tcp_output+0x240>)
 8121908:	f002 fea8 	bl	812465c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 812190c:	687b      	ldr	r3, [r7, #4]
 812190e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121910:	2b00      	cmp	r3, #0
 8121912:	d01f      	beq.n	8121954 <tcp_output+0x1d0>
 8121914:	687b      	ldr	r3, [r7, #4]
 8121916:	8b5b      	ldrh	r3, [r3, #26]
 8121918:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 812191c:	2b00      	cmp	r3, #0
 812191e:	d119      	bne.n	8121954 <tcp_output+0x1d0>
 8121920:	687b      	ldr	r3, [r7, #4]
 8121922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121924:	2b00      	cmp	r3, #0
 8121926:	d00b      	beq.n	8121940 <tcp_output+0x1bc>
 8121928:	687b      	ldr	r3, [r7, #4]
 812192a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 812192c:	681b      	ldr	r3, [r3, #0]
 812192e:	2b00      	cmp	r3, #0
 8121930:	d110      	bne.n	8121954 <tcp_output+0x1d0>
 8121932:	687b      	ldr	r3, [r7, #4]
 8121934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121936:	891a      	ldrh	r2, [r3, #8]
 8121938:	687b      	ldr	r3, [r7, #4]
 812193a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 812193c:	429a      	cmp	r2, r3
 812193e:	d209      	bcs.n	8121954 <tcp_output+0x1d0>
 8121940:	687b      	ldr	r3, [r7, #4]
 8121942:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8121946:	2b00      	cmp	r3, #0
 8121948:	d004      	beq.n	8121954 <tcp_output+0x1d0>
 812194a:	687b      	ldr	r3, [r7, #4]
 812194c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8121950:	2b0f      	cmp	r3, #15
 8121952:	d901      	bls.n	8121958 <tcp_output+0x1d4>
 8121954:	2301      	movs	r3, #1
 8121956:	e000      	b.n	812195a <tcp_output+0x1d6>
 8121958:	2300      	movs	r3, #0
 812195a:	2b00      	cmp	r3, #0
 812195c:	d106      	bne.n	812196c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 812195e:	687b      	ldr	r3, [r7, #4]
 8121960:	8b5b      	ldrh	r3, [r3, #26]
 8121962:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8121966:	2b00      	cmp	r3, #0
 8121968:	f000 80e4 	beq.w	8121b34 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 812196c:	687b      	ldr	r3, [r7, #4]
 812196e:	7d1b      	ldrb	r3, [r3, #20]
 8121970:	2b02      	cmp	r3, #2
 8121972:	d00d      	beq.n	8121990 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8121974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121976:	68db      	ldr	r3, [r3, #12]
 8121978:	899b      	ldrh	r3, [r3, #12]
 812197a:	b29c      	uxth	r4, r3
 812197c:	2010      	movs	r0, #16
 812197e:	f7f6 f8bd 	bl	8117afc <lwip_htons>
 8121982:	4603      	mov	r3, r0
 8121984:	461a      	mov	r2, r3
 8121986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121988:	68db      	ldr	r3, [r3, #12]
 812198a:	4322      	orrs	r2, r4
 812198c:	b292      	uxth	r2, r2
 812198e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8121990:	697a      	ldr	r2, [r7, #20]
 8121992:	6879      	ldr	r1, [r7, #4]
 8121994:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8121996:	f000 f909 	bl	8121bac <tcp_output_segment>
 812199a:	4603      	mov	r3, r0
 812199c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 812199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81219a2:	2b00      	cmp	r3, #0
 81219a4:	d016      	beq.n	81219d4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81219a6:	687b      	ldr	r3, [r7, #4]
 81219a8:	8b5b      	ldrh	r3, [r3, #26]
 81219aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81219ae:	b29a      	uxth	r2, r3
 81219b0:	687b      	ldr	r3, [r7, #4]
 81219b2:	835a      	strh	r2, [r3, #26]
      return err;
 81219b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81219b8:	e0d3      	b.n	8121b62 <tcp_output+0x3de>
 81219ba:	bf00      	nop
 81219bc:	08127694 	.word	0x08127694
 81219c0:	08127c1c 	.word	0x08127c1c
 81219c4:	0812772c 	.word	0x0812772c
 81219c8:	08127c34 	.word	0x08127c34
 81219cc:	1000e4e4 	.word	0x1000e4e4
 81219d0:	08127c5c 	.word	0x08127c5c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 81219d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81219d6:	681a      	ldr	r2, [r3, #0]
 81219d8:	687b      	ldr	r3, [r7, #4]
 81219da:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 81219dc:	687b      	ldr	r3, [r7, #4]
 81219de:	7d1b      	ldrb	r3, [r3, #20]
 81219e0:	2b02      	cmp	r3, #2
 81219e2:	d006      	beq.n	81219f2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81219e4:	687b      	ldr	r3, [r7, #4]
 81219e6:	8b5b      	ldrh	r3, [r3, #26]
 81219e8:	f023 0303 	bic.w	r3, r3, #3
 81219ec:	b29a      	uxth	r2, r3
 81219ee:	687b      	ldr	r3, [r7, #4]
 81219f0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 81219f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81219f4:	68db      	ldr	r3, [r3, #12]
 81219f6:	685b      	ldr	r3, [r3, #4]
 81219f8:	4618      	mov	r0, r3
 81219fa:	f7f6 f894 	bl	8117b26 <lwip_htonl>
 81219fe:	4604      	mov	r4, r0
 8121a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121a02:	891b      	ldrh	r3, [r3, #8]
 8121a04:	461d      	mov	r5, r3
 8121a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121a08:	68db      	ldr	r3, [r3, #12]
 8121a0a:	899b      	ldrh	r3, [r3, #12]
 8121a0c:	b29b      	uxth	r3, r3
 8121a0e:	4618      	mov	r0, r3
 8121a10:	f7f6 f874 	bl	8117afc <lwip_htons>
 8121a14:	4603      	mov	r3, r0
 8121a16:	b2db      	uxtb	r3, r3
 8121a18:	f003 0303 	and.w	r3, r3, #3
 8121a1c:	2b00      	cmp	r3, #0
 8121a1e:	d001      	beq.n	8121a24 <tcp_output+0x2a0>
 8121a20:	2301      	movs	r3, #1
 8121a22:	e000      	b.n	8121a26 <tcp_output+0x2a2>
 8121a24:	2300      	movs	r3, #0
 8121a26:	442b      	add	r3, r5
 8121a28:	4423      	add	r3, r4
 8121a2a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8121a2c:	687b      	ldr	r3, [r7, #4]
 8121a2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8121a30:	68bb      	ldr	r3, [r7, #8]
 8121a32:	1ad3      	subs	r3, r2, r3
 8121a34:	2b00      	cmp	r3, #0
 8121a36:	da02      	bge.n	8121a3e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8121a38:	687b      	ldr	r3, [r7, #4]
 8121a3a:	68ba      	ldr	r2, [r7, #8]
 8121a3c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8121a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121a40:	891b      	ldrh	r3, [r3, #8]
 8121a42:	461c      	mov	r4, r3
 8121a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121a46:	68db      	ldr	r3, [r3, #12]
 8121a48:	899b      	ldrh	r3, [r3, #12]
 8121a4a:	b29b      	uxth	r3, r3
 8121a4c:	4618      	mov	r0, r3
 8121a4e:	f7f6 f855 	bl	8117afc <lwip_htons>
 8121a52:	4603      	mov	r3, r0
 8121a54:	b2db      	uxtb	r3, r3
 8121a56:	f003 0303 	and.w	r3, r3, #3
 8121a5a:	2b00      	cmp	r3, #0
 8121a5c:	d001      	beq.n	8121a62 <tcp_output+0x2de>
 8121a5e:	2301      	movs	r3, #1
 8121a60:	e000      	b.n	8121a64 <tcp_output+0x2e0>
 8121a62:	2300      	movs	r3, #0
 8121a64:	4423      	add	r3, r4
 8121a66:	2b00      	cmp	r3, #0
 8121a68:	d049      	beq.n	8121afe <tcp_output+0x37a>
      seg->next = NULL;
 8121a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121a6c:	2200      	movs	r2, #0
 8121a6e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8121a70:	687b      	ldr	r3, [r7, #4]
 8121a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121a74:	2b00      	cmp	r3, #0
 8121a76:	d105      	bne.n	8121a84 <tcp_output+0x300>
        pcb->unacked = seg;
 8121a78:	687b      	ldr	r3, [r7, #4]
 8121a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8121a7c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8121a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121a80:	623b      	str	r3, [r7, #32]
 8121a82:	e03f      	b.n	8121b04 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8121a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121a86:	68db      	ldr	r3, [r3, #12]
 8121a88:	685b      	ldr	r3, [r3, #4]
 8121a8a:	4618      	mov	r0, r3
 8121a8c:	f7f6 f84b 	bl	8117b26 <lwip_htonl>
 8121a90:	4604      	mov	r4, r0
 8121a92:	6a3b      	ldr	r3, [r7, #32]
 8121a94:	68db      	ldr	r3, [r3, #12]
 8121a96:	685b      	ldr	r3, [r3, #4]
 8121a98:	4618      	mov	r0, r3
 8121a9a:	f7f6 f844 	bl	8117b26 <lwip_htonl>
 8121a9e:	4603      	mov	r3, r0
 8121aa0:	1ae3      	subs	r3, r4, r3
 8121aa2:	2b00      	cmp	r3, #0
 8121aa4:	da24      	bge.n	8121af0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8121aa6:	687b      	ldr	r3, [r7, #4]
 8121aa8:	3370      	adds	r3, #112	@ 0x70
 8121aaa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8121aac:	e002      	b.n	8121ab4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8121aae:	69fb      	ldr	r3, [r7, #28]
 8121ab0:	681b      	ldr	r3, [r3, #0]
 8121ab2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8121ab4:	69fb      	ldr	r3, [r7, #28]
 8121ab6:	681b      	ldr	r3, [r3, #0]
 8121ab8:	2b00      	cmp	r3, #0
 8121aba:	d011      	beq.n	8121ae0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8121abc:	69fb      	ldr	r3, [r7, #28]
 8121abe:	681b      	ldr	r3, [r3, #0]
 8121ac0:	68db      	ldr	r3, [r3, #12]
 8121ac2:	685b      	ldr	r3, [r3, #4]
 8121ac4:	4618      	mov	r0, r3
 8121ac6:	f7f6 f82e 	bl	8117b26 <lwip_htonl>
 8121aca:	4604      	mov	r4, r0
 8121acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121ace:	68db      	ldr	r3, [r3, #12]
 8121ad0:	685b      	ldr	r3, [r3, #4]
 8121ad2:	4618      	mov	r0, r3
 8121ad4:	f7f6 f827 	bl	8117b26 <lwip_htonl>
 8121ad8:	4603      	mov	r3, r0
 8121ada:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8121adc:	2b00      	cmp	r3, #0
 8121ade:	dbe6      	blt.n	8121aae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8121ae0:	69fb      	ldr	r3, [r7, #28]
 8121ae2:	681a      	ldr	r2, [r3, #0]
 8121ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121ae6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8121ae8:	69fb      	ldr	r3, [r7, #28]
 8121aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8121aec:	601a      	str	r2, [r3, #0]
 8121aee:	e009      	b.n	8121b04 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8121af0:	6a3b      	ldr	r3, [r7, #32]
 8121af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8121af4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8121af6:	6a3b      	ldr	r3, [r7, #32]
 8121af8:	681b      	ldr	r3, [r3, #0]
 8121afa:	623b      	str	r3, [r7, #32]
 8121afc:	e002      	b.n	8121b04 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8121afe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8121b00:	f7fb ff85 	bl	811da0e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8121b04:	687b      	ldr	r3, [r7, #4]
 8121b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121b08:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8121b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121b0c:	2b00      	cmp	r3, #0
 8121b0e:	d012      	beq.n	8121b36 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8121b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8121b12:	68db      	ldr	r3, [r3, #12]
 8121b14:	685b      	ldr	r3, [r3, #4]
 8121b16:	4618      	mov	r0, r3
 8121b18:	f7f6 f805 	bl	8117b26 <lwip_htonl>
 8121b1c:	4602      	mov	r2, r0
 8121b1e:	687b      	ldr	r3, [r7, #4]
 8121b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8121b22:	1ad3      	subs	r3, r2, r3
 8121b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8121b26:	8912      	ldrh	r2, [r2, #8]
 8121b28:	4413      	add	r3, r2
  while (seg != NULL &&
 8121b2a:	69ba      	ldr	r2, [r7, #24]
 8121b2c:	429a      	cmp	r2, r3
 8121b2e:	f4bf aed9 	bcs.w	81218e4 <tcp_output+0x160>
 8121b32:	e000      	b.n	8121b36 <tcp_output+0x3b2>
      break;
 8121b34:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8121b36:	687b      	ldr	r3, [r7, #4]
 8121b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8121b3a:	2b00      	cmp	r3, #0
 8121b3c:	d108      	bne.n	8121b50 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8121b3e:	687b      	ldr	r3, [r7, #4]
 8121b40:	2200      	movs	r2, #0
 8121b42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8121b46:	e004      	b.n	8121b52 <tcp_output+0x3ce>
    goto output_done;
 8121b48:	bf00      	nop
 8121b4a:	e002      	b.n	8121b52 <tcp_output+0x3ce>
    goto output_done;
 8121b4c:	bf00      	nop
 8121b4e:	e000      	b.n	8121b52 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8121b50:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8121b52:	687b      	ldr	r3, [r7, #4]
 8121b54:	8b5b      	ldrh	r3, [r3, #26]
 8121b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8121b5a:	b29a      	uxth	r2, r3
 8121b5c:	687b      	ldr	r3, [r7, #4]
 8121b5e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8121b60:	2300      	movs	r3, #0
}
 8121b62:	4618      	mov	r0, r3
 8121b64:	3728      	adds	r7, #40	@ 0x28
 8121b66:	46bd      	mov	sp, r7
 8121b68:	bdb0      	pop	{r4, r5, r7, pc}
 8121b6a:	bf00      	nop

08121b6c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8121b6c:	b580      	push	{r7, lr}
 8121b6e:	b082      	sub	sp, #8
 8121b70:	af00      	add	r7, sp, #0
 8121b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8121b74:	687b      	ldr	r3, [r7, #4]
 8121b76:	2b00      	cmp	r3, #0
 8121b78:	d106      	bne.n	8121b88 <tcp_output_segment_busy+0x1c>
 8121b7a:	4b09      	ldr	r3, [pc, #36]	@ (8121ba0 <tcp_output_segment_busy+0x34>)
 8121b7c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8121b80:	4908      	ldr	r1, [pc, #32]	@ (8121ba4 <tcp_output_segment_busy+0x38>)
 8121b82:	4809      	ldr	r0, [pc, #36]	@ (8121ba8 <tcp_output_segment_busy+0x3c>)
 8121b84:	f002 fd6a 	bl	812465c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8121b88:	687b      	ldr	r3, [r7, #4]
 8121b8a:	685b      	ldr	r3, [r3, #4]
 8121b8c:	7b9b      	ldrb	r3, [r3, #14]
 8121b8e:	2b01      	cmp	r3, #1
 8121b90:	d001      	beq.n	8121b96 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8121b92:	2301      	movs	r3, #1
 8121b94:	e000      	b.n	8121b98 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8121b96:	2300      	movs	r3, #0
}
 8121b98:	4618      	mov	r0, r3
 8121b9a:	3708      	adds	r7, #8
 8121b9c:	46bd      	mov	sp, r7
 8121b9e:	bd80      	pop	{r7, pc}
 8121ba0:	08127694 	.word	0x08127694
 8121ba4:	08127c74 	.word	0x08127c74
 8121ba8:	0812772c 	.word	0x0812772c

08121bac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8121bac:	b5b0      	push	{r4, r5, r7, lr}
 8121bae:	b08c      	sub	sp, #48	@ 0x30
 8121bb0:	af04      	add	r7, sp, #16
 8121bb2:	60f8      	str	r0, [r7, #12]
 8121bb4:	60b9      	str	r1, [r7, #8]
 8121bb6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8121bb8:	68fb      	ldr	r3, [r7, #12]
 8121bba:	2b00      	cmp	r3, #0
 8121bbc:	d106      	bne.n	8121bcc <tcp_output_segment+0x20>
 8121bbe:	4b64      	ldr	r3, [pc, #400]	@ (8121d50 <tcp_output_segment+0x1a4>)
 8121bc0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8121bc4:	4963      	ldr	r1, [pc, #396]	@ (8121d54 <tcp_output_segment+0x1a8>)
 8121bc6:	4864      	ldr	r0, [pc, #400]	@ (8121d58 <tcp_output_segment+0x1ac>)
 8121bc8:	f002 fd48 	bl	812465c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8121bcc:	68bb      	ldr	r3, [r7, #8]
 8121bce:	2b00      	cmp	r3, #0
 8121bd0:	d106      	bne.n	8121be0 <tcp_output_segment+0x34>
 8121bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8121d50 <tcp_output_segment+0x1a4>)
 8121bd4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8121bd8:	4960      	ldr	r1, [pc, #384]	@ (8121d5c <tcp_output_segment+0x1b0>)
 8121bda:	485f      	ldr	r0, [pc, #380]	@ (8121d58 <tcp_output_segment+0x1ac>)
 8121bdc:	f002 fd3e 	bl	812465c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8121be0:	687b      	ldr	r3, [r7, #4]
 8121be2:	2b00      	cmp	r3, #0
 8121be4:	d106      	bne.n	8121bf4 <tcp_output_segment+0x48>
 8121be6:	4b5a      	ldr	r3, [pc, #360]	@ (8121d50 <tcp_output_segment+0x1a4>)
 8121be8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8121bec:	495c      	ldr	r1, [pc, #368]	@ (8121d60 <tcp_output_segment+0x1b4>)
 8121bee:	485a      	ldr	r0, [pc, #360]	@ (8121d58 <tcp_output_segment+0x1ac>)
 8121bf0:	f002 fd34 	bl	812465c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8121bf4:	68f8      	ldr	r0, [r7, #12]
 8121bf6:	f7ff ffb9 	bl	8121b6c <tcp_output_segment_busy>
 8121bfa:	4603      	mov	r3, r0
 8121bfc:	2b00      	cmp	r3, #0
 8121bfe:	d001      	beq.n	8121c04 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8121c00:	2300      	movs	r3, #0
 8121c02:	e0a1      	b.n	8121d48 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8121c04:	68bb      	ldr	r3, [r7, #8]
 8121c06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8121c08:	68fb      	ldr	r3, [r7, #12]
 8121c0a:	68dc      	ldr	r4, [r3, #12]
 8121c0c:	4610      	mov	r0, r2
 8121c0e:	f7f5 ff8a 	bl	8117b26 <lwip_htonl>
 8121c12:	4603      	mov	r3, r0
 8121c14:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8121c16:	68bb      	ldr	r3, [r7, #8]
 8121c18:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8121c1a:	68fb      	ldr	r3, [r7, #12]
 8121c1c:	68dc      	ldr	r4, [r3, #12]
 8121c1e:	4610      	mov	r0, r2
 8121c20:	f7f5 ff6c 	bl	8117afc <lwip_htons>
 8121c24:	4603      	mov	r3, r0
 8121c26:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8121c28:	68bb      	ldr	r3, [r7, #8]
 8121c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8121c2c:	68ba      	ldr	r2, [r7, #8]
 8121c2e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8121c30:	441a      	add	r2, r3
 8121c32:	68bb      	ldr	r3, [r7, #8]
 8121c34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8121c36:	68fb      	ldr	r3, [r7, #12]
 8121c38:	68db      	ldr	r3, [r3, #12]
 8121c3a:	3314      	adds	r3, #20
 8121c3c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8121c3e:	68fb      	ldr	r3, [r7, #12]
 8121c40:	7a9b      	ldrb	r3, [r3, #10]
 8121c42:	f003 0301 	and.w	r3, r3, #1
 8121c46:	2b00      	cmp	r3, #0
 8121c48:	d015      	beq.n	8121c76 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8121c4a:	68bb      	ldr	r3, [r7, #8]
 8121c4c:	3304      	adds	r3, #4
 8121c4e:	461a      	mov	r2, r3
 8121c50:	6879      	ldr	r1, [r7, #4]
 8121c52:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8121c56:	f7fc fa39 	bl	811e0cc <tcp_eff_send_mss_netif>
 8121c5a:	4603      	mov	r3, r0
 8121c5c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8121c5e:	8b7b      	ldrh	r3, [r7, #26]
 8121c60:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8121c64:	4618      	mov	r0, r3
 8121c66:	f7f5 ff5e 	bl	8117b26 <lwip_htonl>
 8121c6a:	4602      	mov	r2, r0
 8121c6c:	69fb      	ldr	r3, [r7, #28]
 8121c6e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8121c70:	69fb      	ldr	r3, [r7, #28]
 8121c72:	3304      	adds	r3, #4
 8121c74:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8121c76:	68bb      	ldr	r3, [r7, #8]
 8121c78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8121c7c:	2b00      	cmp	r3, #0
 8121c7e:	da02      	bge.n	8121c86 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8121c80:	68bb      	ldr	r3, [r7, #8]
 8121c82:	2200      	movs	r2, #0
 8121c84:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8121c86:	68bb      	ldr	r3, [r7, #8]
 8121c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8121c8a:	2b00      	cmp	r3, #0
 8121c8c:	d10c      	bne.n	8121ca8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8121c8e:	4b35      	ldr	r3, [pc, #212]	@ (8121d64 <tcp_output_segment+0x1b8>)
 8121c90:	681a      	ldr	r2, [r3, #0]
 8121c92:	68bb      	ldr	r3, [r7, #8]
 8121c94:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8121c96:	68fb      	ldr	r3, [r7, #12]
 8121c98:	68db      	ldr	r3, [r3, #12]
 8121c9a:	685b      	ldr	r3, [r3, #4]
 8121c9c:	4618      	mov	r0, r3
 8121c9e:	f7f5 ff42 	bl	8117b26 <lwip_htonl>
 8121ca2:	4602      	mov	r2, r0
 8121ca4:	68bb      	ldr	r3, [r7, #8]
 8121ca6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8121ca8:	68fb      	ldr	r3, [r7, #12]
 8121caa:	68da      	ldr	r2, [r3, #12]
 8121cac:	68fb      	ldr	r3, [r7, #12]
 8121cae:	685b      	ldr	r3, [r3, #4]
 8121cb0:	685b      	ldr	r3, [r3, #4]
 8121cb2:	1ad3      	subs	r3, r2, r3
 8121cb4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8121cb6:	68fb      	ldr	r3, [r7, #12]
 8121cb8:	685b      	ldr	r3, [r3, #4]
 8121cba:	8959      	ldrh	r1, [r3, #10]
 8121cbc:	68fb      	ldr	r3, [r7, #12]
 8121cbe:	685b      	ldr	r3, [r3, #4]
 8121cc0:	8b3a      	ldrh	r2, [r7, #24]
 8121cc2:	1a8a      	subs	r2, r1, r2
 8121cc4:	b292      	uxth	r2, r2
 8121cc6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8121cc8:	68fb      	ldr	r3, [r7, #12]
 8121cca:	685b      	ldr	r3, [r3, #4]
 8121ccc:	8919      	ldrh	r1, [r3, #8]
 8121cce:	68fb      	ldr	r3, [r7, #12]
 8121cd0:	685b      	ldr	r3, [r3, #4]
 8121cd2:	8b3a      	ldrh	r2, [r7, #24]
 8121cd4:	1a8a      	subs	r2, r1, r2
 8121cd6:	b292      	uxth	r2, r2
 8121cd8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8121cda:	68fb      	ldr	r3, [r7, #12]
 8121cdc:	685b      	ldr	r3, [r3, #4]
 8121cde:	68fa      	ldr	r2, [r7, #12]
 8121ce0:	68d2      	ldr	r2, [r2, #12]
 8121ce2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8121ce4:	68fb      	ldr	r3, [r7, #12]
 8121ce6:	68db      	ldr	r3, [r3, #12]
 8121ce8:	2200      	movs	r2, #0
 8121cea:	741a      	strb	r2, [r3, #16]
 8121cec:	2200      	movs	r2, #0
 8121cee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8121cf0:	68fb      	ldr	r3, [r7, #12]
 8121cf2:	68da      	ldr	r2, [r3, #12]
 8121cf4:	68fb      	ldr	r3, [r7, #12]
 8121cf6:	7a9b      	ldrb	r3, [r3, #10]
 8121cf8:	f003 0301 	and.w	r3, r3, #1
 8121cfc:	2b00      	cmp	r3, #0
 8121cfe:	d001      	beq.n	8121d04 <tcp_output_segment+0x158>
 8121d00:	2318      	movs	r3, #24
 8121d02:	e000      	b.n	8121d06 <tcp_output_segment+0x15a>
 8121d04:	2314      	movs	r3, #20
 8121d06:	4413      	add	r3, r2
 8121d08:	69fa      	ldr	r2, [r7, #28]
 8121d0a:	429a      	cmp	r2, r3
 8121d0c:	d006      	beq.n	8121d1c <tcp_output_segment+0x170>
 8121d0e:	4b10      	ldr	r3, [pc, #64]	@ (8121d50 <tcp_output_segment+0x1a4>)
 8121d10:	f240 621c 	movw	r2, #1564	@ 0x61c
 8121d14:	4914      	ldr	r1, [pc, #80]	@ (8121d68 <tcp_output_segment+0x1bc>)
 8121d16:	4810      	ldr	r0, [pc, #64]	@ (8121d58 <tcp_output_segment+0x1ac>)
 8121d18:	f002 fca0 	bl	812465c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8121d1c:	68fb      	ldr	r3, [r7, #12]
 8121d1e:	6858      	ldr	r0, [r3, #4]
 8121d20:	68b9      	ldr	r1, [r7, #8]
 8121d22:	68bb      	ldr	r3, [r7, #8]
 8121d24:	1d1c      	adds	r4, r3, #4
 8121d26:	68bb      	ldr	r3, [r7, #8]
 8121d28:	7add      	ldrb	r5, [r3, #11]
 8121d2a:	68bb      	ldr	r3, [r7, #8]
 8121d2c:	7a9b      	ldrb	r3, [r3, #10]
 8121d2e:	687a      	ldr	r2, [r7, #4]
 8121d30:	9202      	str	r2, [sp, #8]
 8121d32:	2206      	movs	r2, #6
 8121d34:	9201      	str	r2, [sp, #4]
 8121d36:	9300      	str	r3, [sp, #0]
 8121d38:	462b      	mov	r3, r5
 8121d3a:	4622      	mov	r2, r4
 8121d3c:	f7f7 fc3e 	bl	81195bc <ip4_output_if>
 8121d40:	4603      	mov	r3, r0
 8121d42:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8121d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8121d48:	4618      	mov	r0, r3
 8121d4a:	3720      	adds	r7, #32
 8121d4c:	46bd      	mov	sp, r7
 8121d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8121d50:	08127694 	.word	0x08127694
 8121d54:	08127c9c 	.word	0x08127c9c
 8121d58:	0812772c 	.word	0x0812772c
 8121d5c:	08127cbc 	.word	0x08127cbc
 8121d60:	08127cdc 	.word	0x08127cdc
 8121d64:	1000e498 	.word	0x1000e498
 8121d68:	08127d00 	.word	0x08127d00

08121d6c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8121d6c:	b5b0      	push	{r4, r5, r7, lr}
 8121d6e:	b084      	sub	sp, #16
 8121d70:	af00      	add	r7, sp, #0
 8121d72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8121d74:	687b      	ldr	r3, [r7, #4]
 8121d76:	2b00      	cmp	r3, #0
 8121d78:	d106      	bne.n	8121d88 <tcp_rexmit_rto_prepare+0x1c>
 8121d7a:	4b31      	ldr	r3, [pc, #196]	@ (8121e40 <tcp_rexmit_rto_prepare+0xd4>)
 8121d7c:	f240 6263 	movw	r2, #1635	@ 0x663
 8121d80:	4930      	ldr	r1, [pc, #192]	@ (8121e44 <tcp_rexmit_rto_prepare+0xd8>)
 8121d82:	4831      	ldr	r0, [pc, #196]	@ (8121e48 <tcp_rexmit_rto_prepare+0xdc>)
 8121d84:	f002 fc6a 	bl	812465c <iprintf>

  if (pcb->unacked == NULL) {
 8121d88:	687b      	ldr	r3, [r7, #4]
 8121d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121d8c:	2b00      	cmp	r3, #0
 8121d8e:	d102      	bne.n	8121d96 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8121d90:	f06f 0305 	mvn.w	r3, #5
 8121d94:	e050      	b.n	8121e38 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8121d96:	687b      	ldr	r3, [r7, #4]
 8121d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121d9a:	60fb      	str	r3, [r7, #12]
 8121d9c:	e00b      	b.n	8121db6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8121d9e:	68f8      	ldr	r0, [r7, #12]
 8121da0:	f7ff fee4 	bl	8121b6c <tcp_output_segment_busy>
 8121da4:	4603      	mov	r3, r0
 8121da6:	2b00      	cmp	r3, #0
 8121da8:	d002      	beq.n	8121db0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8121daa:	f06f 0305 	mvn.w	r3, #5
 8121dae:	e043      	b.n	8121e38 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8121db0:	68fb      	ldr	r3, [r7, #12]
 8121db2:	681b      	ldr	r3, [r3, #0]
 8121db4:	60fb      	str	r3, [r7, #12]
 8121db6:	68fb      	ldr	r3, [r7, #12]
 8121db8:	681b      	ldr	r3, [r3, #0]
 8121dba:	2b00      	cmp	r3, #0
 8121dbc:	d1ef      	bne.n	8121d9e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8121dbe:	68f8      	ldr	r0, [r7, #12]
 8121dc0:	f7ff fed4 	bl	8121b6c <tcp_output_segment_busy>
 8121dc4:	4603      	mov	r3, r0
 8121dc6:	2b00      	cmp	r3, #0
 8121dc8:	d002      	beq.n	8121dd0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8121dca:	f06f 0305 	mvn.w	r3, #5
 8121dce:	e033      	b.n	8121e38 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8121dd0:	687b      	ldr	r3, [r7, #4]
 8121dd2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8121dd4:	68fb      	ldr	r3, [r7, #12]
 8121dd6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8121dd8:	687b      	ldr	r3, [r7, #4]
 8121dda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8121ddc:	687b      	ldr	r3, [r7, #4]
 8121dde:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8121de0:	687b      	ldr	r3, [r7, #4]
 8121de2:	2200      	movs	r2, #0
 8121de4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8121de6:	687b      	ldr	r3, [r7, #4]
 8121de8:	8b5b      	ldrh	r3, [r3, #26]
 8121dea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8121dee:	b29a      	uxth	r2, r3
 8121df0:	687b      	ldr	r3, [r7, #4]
 8121df2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8121df4:	68fb      	ldr	r3, [r7, #12]
 8121df6:	68db      	ldr	r3, [r3, #12]
 8121df8:	685b      	ldr	r3, [r3, #4]
 8121dfa:	4618      	mov	r0, r3
 8121dfc:	f7f5 fe93 	bl	8117b26 <lwip_htonl>
 8121e00:	4604      	mov	r4, r0
 8121e02:	68fb      	ldr	r3, [r7, #12]
 8121e04:	891b      	ldrh	r3, [r3, #8]
 8121e06:	461d      	mov	r5, r3
 8121e08:	68fb      	ldr	r3, [r7, #12]
 8121e0a:	68db      	ldr	r3, [r3, #12]
 8121e0c:	899b      	ldrh	r3, [r3, #12]
 8121e0e:	b29b      	uxth	r3, r3
 8121e10:	4618      	mov	r0, r3
 8121e12:	f7f5 fe73 	bl	8117afc <lwip_htons>
 8121e16:	4603      	mov	r3, r0
 8121e18:	b2db      	uxtb	r3, r3
 8121e1a:	f003 0303 	and.w	r3, r3, #3
 8121e1e:	2b00      	cmp	r3, #0
 8121e20:	d001      	beq.n	8121e26 <tcp_rexmit_rto_prepare+0xba>
 8121e22:	2301      	movs	r3, #1
 8121e24:	e000      	b.n	8121e28 <tcp_rexmit_rto_prepare+0xbc>
 8121e26:	2300      	movs	r3, #0
 8121e28:	442b      	add	r3, r5
 8121e2a:	18e2      	adds	r2, r4, r3
 8121e2c:	687b      	ldr	r3, [r7, #4]
 8121e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8121e30:	687b      	ldr	r3, [r7, #4]
 8121e32:	2200      	movs	r2, #0
 8121e34:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8121e36:	2300      	movs	r3, #0
}
 8121e38:	4618      	mov	r0, r3
 8121e3a:	3710      	adds	r7, #16
 8121e3c:	46bd      	mov	sp, r7
 8121e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8121e40:	08127694 	.word	0x08127694
 8121e44:	08127d14 	.word	0x08127d14
 8121e48:	0812772c 	.word	0x0812772c

08121e4c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8121e4c:	b580      	push	{r7, lr}
 8121e4e:	b082      	sub	sp, #8
 8121e50:	af00      	add	r7, sp, #0
 8121e52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8121e54:	687b      	ldr	r3, [r7, #4]
 8121e56:	2b00      	cmp	r3, #0
 8121e58:	d106      	bne.n	8121e68 <tcp_rexmit_rto_commit+0x1c>
 8121e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8121e90 <tcp_rexmit_rto_commit+0x44>)
 8121e5c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8121e60:	490c      	ldr	r1, [pc, #48]	@ (8121e94 <tcp_rexmit_rto_commit+0x48>)
 8121e62:	480d      	ldr	r0, [pc, #52]	@ (8121e98 <tcp_rexmit_rto_commit+0x4c>)
 8121e64:	f002 fbfa 	bl	812465c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8121e68:	687b      	ldr	r3, [r7, #4]
 8121e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8121e6e:	2bff      	cmp	r3, #255	@ 0xff
 8121e70:	d007      	beq.n	8121e82 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8121e72:	687b      	ldr	r3, [r7, #4]
 8121e74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8121e78:	3301      	adds	r3, #1
 8121e7a:	b2da      	uxtb	r2, r3
 8121e7c:	687b      	ldr	r3, [r7, #4]
 8121e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8121e82:	6878      	ldr	r0, [r7, #4]
 8121e84:	f7ff fc7e 	bl	8121784 <tcp_output>
}
 8121e88:	bf00      	nop
 8121e8a:	3708      	adds	r7, #8
 8121e8c:	46bd      	mov	sp, r7
 8121e8e:	bd80      	pop	{r7, pc}
 8121e90:	08127694 	.word	0x08127694
 8121e94:	08127d38 	.word	0x08127d38
 8121e98:	0812772c 	.word	0x0812772c

08121e9c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8121e9c:	b580      	push	{r7, lr}
 8121e9e:	b082      	sub	sp, #8
 8121ea0:	af00      	add	r7, sp, #0
 8121ea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8121ea4:	687b      	ldr	r3, [r7, #4]
 8121ea6:	2b00      	cmp	r3, #0
 8121ea8:	d106      	bne.n	8121eb8 <tcp_rexmit_rto+0x1c>
 8121eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8121ed4 <tcp_rexmit_rto+0x38>)
 8121eac:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8121eb0:	4909      	ldr	r1, [pc, #36]	@ (8121ed8 <tcp_rexmit_rto+0x3c>)
 8121eb2:	480a      	ldr	r0, [pc, #40]	@ (8121edc <tcp_rexmit_rto+0x40>)
 8121eb4:	f002 fbd2 	bl	812465c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8121eb8:	6878      	ldr	r0, [r7, #4]
 8121eba:	f7ff ff57 	bl	8121d6c <tcp_rexmit_rto_prepare>
 8121ebe:	4603      	mov	r3, r0
 8121ec0:	2b00      	cmp	r3, #0
 8121ec2:	d102      	bne.n	8121eca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8121ec4:	6878      	ldr	r0, [r7, #4]
 8121ec6:	f7ff ffc1 	bl	8121e4c <tcp_rexmit_rto_commit>
  }
}
 8121eca:	bf00      	nop
 8121ecc:	3708      	adds	r7, #8
 8121ece:	46bd      	mov	sp, r7
 8121ed0:	bd80      	pop	{r7, pc}
 8121ed2:	bf00      	nop
 8121ed4:	08127694 	.word	0x08127694
 8121ed8:	08127d5c 	.word	0x08127d5c
 8121edc:	0812772c 	.word	0x0812772c

08121ee0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8121ee0:	b590      	push	{r4, r7, lr}
 8121ee2:	b085      	sub	sp, #20
 8121ee4:	af00      	add	r7, sp, #0
 8121ee6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8121ee8:	687b      	ldr	r3, [r7, #4]
 8121eea:	2b00      	cmp	r3, #0
 8121eec:	d106      	bne.n	8121efc <tcp_rexmit+0x1c>
 8121eee:	4b2f      	ldr	r3, [pc, #188]	@ (8121fac <tcp_rexmit+0xcc>)
 8121ef0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8121ef4:	492e      	ldr	r1, [pc, #184]	@ (8121fb0 <tcp_rexmit+0xd0>)
 8121ef6:	482f      	ldr	r0, [pc, #188]	@ (8121fb4 <tcp_rexmit+0xd4>)
 8121ef8:	f002 fbb0 	bl	812465c <iprintf>

  if (pcb->unacked == NULL) {
 8121efc:	687b      	ldr	r3, [r7, #4]
 8121efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121f00:	2b00      	cmp	r3, #0
 8121f02:	d102      	bne.n	8121f0a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8121f04:	f06f 0305 	mvn.w	r3, #5
 8121f08:	e04c      	b.n	8121fa4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8121f0a:	687b      	ldr	r3, [r7, #4]
 8121f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121f0e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8121f10:	68b8      	ldr	r0, [r7, #8]
 8121f12:	f7ff fe2b 	bl	8121b6c <tcp_output_segment_busy>
 8121f16:	4603      	mov	r3, r0
 8121f18:	2b00      	cmp	r3, #0
 8121f1a:	d002      	beq.n	8121f22 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8121f1c:	f06f 0305 	mvn.w	r3, #5
 8121f20:	e040      	b.n	8121fa4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8121f22:	68bb      	ldr	r3, [r7, #8]
 8121f24:	681a      	ldr	r2, [r3, #0]
 8121f26:	687b      	ldr	r3, [r7, #4]
 8121f28:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8121f2a:	687b      	ldr	r3, [r7, #4]
 8121f2c:	336c      	adds	r3, #108	@ 0x6c
 8121f2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8121f30:	e002      	b.n	8121f38 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8121f32:	68fb      	ldr	r3, [r7, #12]
 8121f34:	681b      	ldr	r3, [r3, #0]
 8121f36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8121f38:	68fb      	ldr	r3, [r7, #12]
 8121f3a:	681b      	ldr	r3, [r3, #0]
 8121f3c:	2b00      	cmp	r3, #0
 8121f3e:	d011      	beq.n	8121f64 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8121f40:	68fb      	ldr	r3, [r7, #12]
 8121f42:	681b      	ldr	r3, [r3, #0]
 8121f44:	68db      	ldr	r3, [r3, #12]
 8121f46:	685b      	ldr	r3, [r3, #4]
 8121f48:	4618      	mov	r0, r3
 8121f4a:	f7f5 fdec 	bl	8117b26 <lwip_htonl>
 8121f4e:	4604      	mov	r4, r0
 8121f50:	68bb      	ldr	r3, [r7, #8]
 8121f52:	68db      	ldr	r3, [r3, #12]
 8121f54:	685b      	ldr	r3, [r3, #4]
 8121f56:	4618      	mov	r0, r3
 8121f58:	f7f5 fde5 	bl	8117b26 <lwip_htonl>
 8121f5c:	4603      	mov	r3, r0
 8121f5e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8121f60:	2b00      	cmp	r3, #0
 8121f62:	dbe6      	blt.n	8121f32 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8121f64:	68fb      	ldr	r3, [r7, #12]
 8121f66:	681a      	ldr	r2, [r3, #0]
 8121f68:	68bb      	ldr	r3, [r7, #8]
 8121f6a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8121f6c:	68fb      	ldr	r3, [r7, #12]
 8121f6e:	68ba      	ldr	r2, [r7, #8]
 8121f70:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8121f72:	68bb      	ldr	r3, [r7, #8]
 8121f74:	681b      	ldr	r3, [r3, #0]
 8121f76:	2b00      	cmp	r3, #0
 8121f78:	d103      	bne.n	8121f82 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8121f7a:	687b      	ldr	r3, [r7, #4]
 8121f7c:	2200      	movs	r2, #0
 8121f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8121f82:	687b      	ldr	r3, [r7, #4]
 8121f84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8121f88:	2bff      	cmp	r3, #255	@ 0xff
 8121f8a:	d007      	beq.n	8121f9c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8121f8c:	687b      	ldr	r3, [r7, #4]
 8121f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8121f92:	3301      	adds	r3, #1
 8121f94:	b2da      	uxtb	r2, r3
 8121f96:	687b      	ldr	r3, [r7, #4]
 8121f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8121f9c:	687b      	ldr	r3, [r7, #4]
 8121f9e:	2200      	movs	r2, #0
 8121fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8121fa2:	2300      	movs	r3, #0
}
 8121fa4:	4618      	mov	r0, r3
 8121fa6:	3714      	adds	r7, #20
 8121fa8:	46bd      	mov	sp, r7
 8121faa:	bd90      	pop	{r4, r7, pc}
 8121fac:	08127694 	.word	0x08127694
 8121fb0:	08127d78 	.word	0x08127d78
 8121fb4:	0812772c 	.word	0x0812772c

08121fb8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8121fb8:	b580      	push	{r7, lr}
 8121fba:	b082      	sub	sp, #8
 8121fbc:	af00      	add	r7, sp, #0
 8121fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8121fc0:	687b      	ldr	r3, [r7, #4]
 8121fc2:	2b00      	cmp	r3, #0
 8121fc4:	d106      	bne.n	8121fd4 <tcp_rexmit_fast+0x1c>
 8121fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8122070 <tcp_rexmit_fast+0xb8>)
 8121fc8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8121fcc:	4929      	ldr	r1, [pc, #164]	@ (8122074 <tcp_rexmit_fast+0xbc>)
 8121fce:	482a      	ldr	r0, [pc, #168]	@ (8122078 <tcp_rexmit_fast+0xc0>)
 8121fd0:	f002 fb44 	bl	812465c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8121fd4:	687b      	ldr	r3, [r7, #4]
 8121fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8121fd8:	2b00      	cmp	r3, #0
 8121fda:	d044      	beq.n	8122066 <tcp_rexmit_fast+0xae>
 8121fdc:	687b      	ldr	r3, [r7, #4]
 8121fde:	8b5b      	ldrh	r3, [r3, #26]
 8121fe0:	f003 0304 	and.w	r3, r3, #4
 8121fe4:	2b00      	cmp	r3, #0
 8121fe6:	d13e      	bne.n	8122066 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8121fe8:	6878      	ldr	r0, [r7, #4]
 8121fea:	f7ff ff79 	bl	8121ee0 <tcp_rexmit>
 8121fee:	4603      	mov	r3, r0
 8121ff0:	2b00      	cmp	r3, #0
 8121ff2:	d138      	bne.n	8122066 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8121ff4:	687b      	ldr	r3, [r7, #4]
 8121ff6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8121ffa:	687b      	ldr	r3, [r7, #4]
 8121ffc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8122000:	4293      	cmp	r3, r2
 8122002:	bf28      	it	cs
 8122004:	4613      	movcs	r3, r2
 8122006:	b29b      	uxth	r3, r3
 8122008:	0fda      	lsrs	r2, r3, #31
 812200a:	4413      	add	r3, r2
 812200c:	105b      	asrs	r3, r3, #1
 812200e:	b29a      	uxth	r2, r3
 8122010:	687b      	ldr	r3, [r7, #4]
 8122012:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8122016:	687b      	ldr	r3, [r7, #4]
 8122018:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 812201c:	461a      	mov	r2, r3
 812201e:	687b      	ldr	r3, [r7, #4]
 8122020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8122022:	005b      	lsls	r3, r3, #1
 8122024:	429a      	cmp	r2, r3
 8122026:	d206      	bcs.n	8122036 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8122028:	687b      	ldr	r3, [r7, #4]
 812202a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 812202c:	005b      	lsls	r3, r3, #1
 812202e:	b29a      	uxth	r2, r3
 8122030:	687b      	ldr	r3, [r7, #4]
 8122032:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8122036:	687b      	ldr	r3, [r7, #4]
 8122038:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 812203c:	687b      	ldr	r3, [r7, #4]
 812203e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8122040:	4619      	mov	r1, r3
 8122042:	0049      	lsls	r1, r1, #1
 8122044:	440b      	add	r3, r1
 8122046:	b29b      	uxth	r3, r3
 8122048:	4413      	add	r3, r2
 812204a:	b29a      	uxth	r2, r3
 812204c:	687b      	ldr	r3, [r7, #4]
 812204e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8122052:	687b      	ldr	r3, [r7, #4]
 8122054:	8b5b      	ldrh	r3, [r3, #26]
 8122056:	f043 0304 	orr.w	r3, r3, #4
 812205a:	b29a      	uxth	r2, r3
 812205c:	687b      	ldr	r3, [r7, #4]
 812205e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8122060:	687b      	ldr	r3, [r7, #4]
 8122062:	2200      	movs	r2, #0
 8122064:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8122066:	bf00      	nop
 8122068:	3708      	adds	r7, #8
 812206a:	46bd      	mov	sp, r7
 812206c:	bd80      	pop	{r7, pc}
 812206e:	bf00      	nop
 8122070:	08127694 	.word	0x08127694
 8122074:	08127d90 	.word	0x08127d90
 8122078:	0812772c 	.word	0x0812772c

0812207c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 812207c:	b580      	push	{r7, lr}
 812207e:	b086      	sub	sp, #24
 8122080:	af00      	add	r7, sp, #0
 8122082:	60f8      	str	r0, [r7, #12]
 8122084:	607b      	str	r3, [r7, #4]
 8122086:	460b      	mov	r3, r1
 8122088:	817b      	strh	r3, [r7, #10]
 812208a:	4613      	mov	r3, r2
 812208c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 812208e:	897a      	ldrh	r2, [r7, #10]
 8122090:	893b      	ldrh	r3, [r7, #8]
 8122092:	4413      	add	r3, r2
 8122094:	b29b      	uxth	r3, r3
 8122096:	3314      	adds	r3, #20
 8122098:	b29b      	uxth	r3, r3
 812209a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 812209e:	4619      	mov	r1, r3
 81220a0:	2022      	movs	r0, #34	@ 0x22
 81220a2:	f7f9 fc51 	bl	811b948 <pbuf_alloc>
 81220a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 81220a8:	697b      	ldr	r3, [r7, #20]
 81220aa:	2b00      	cmp	r3, #0
 81220ac:	d04d      	beq.n	812214a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 81220ae:	897b      	ldrh	r3, [r7, #10]
 81220b0:	3313      	adds	r3, #19
 81220b2:	697a      	ldr	r2, [r7, #20]
 81220b4:	8952      	ldrh	r2, [r2, #10]
 81220b6:	4293      	cmp	r3, r2
 81220b8:	db06      	blt.n	81220c8 <tcp_output_alloc_header_common+0x4c>
 81220ba:	4b26      	ldr	r3, [pc, #152]	@ (8122154 <tcp_output_alloc_header_common+0xd8>)
 81220bc:	f240 7223 	movw	r2, #1827	@ 0x723
 81220c0:	4925      	ldr	r1, [pc, #148]	@ (8122158 <tcp_output_alloc_header_common+0xdc>)
 81220c2:	4826      	ldr	r0, [pc, #152]	@ (812215c <tcp_output_alloc_header_common+0xe0>)
 81220c4:	f002 faca 	bl	812465c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 81220c8:	697b      	ldr	r3, [r7, #20]
 81220ca:	685b      	ldr	r3, [r3, #4]
 81220cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 81220ce:	8c3b      	ldrh	r3, [r7, #32]
 81220d0:	4618      	mov	r0, r3
 81220d2:	f7f5 fd13 	bl	8117afc <lwip_htons>
 81220d6:	4603      	mov	r3, r0
 81220d8:	461a      	mov	r2, r3
 81220da:	693b      	ldr	r3, [r7, #16]
 81220dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 81220de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81220e0:	4618      	mov	r0, r3
 81220e2:	f7f5 fd0b 	bl	8117afc <lwip_htons>
 81220e6:	4603      	mov	r3, r0
 81220e8:	461a      	mov	r2, r3
 81220ea:	693b      	ldr	r3, [r7, #16]
 81220ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 81220ee:	693b      	ldr	r3, [r7, #16]
 81220f0:	687a      	ldr	r2, [r7, #4]
 81220f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 81220f4:	68f8      	ldr	r0, [r7, #12]
 81220f6:	f7f5 fd16 	bl	8117b26 <lwip_htonl>
 81220fa:	4602      	mov	r2, r0
 81220fc:	693b      	ldr	r3, [r7, #16]
 81220fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8122100:	897b      	ldrh	r3, [r7, #10]
 8122102:	089b      	lsrs	r3, r3, #2
 8122104:	b29b      	uxth	r3, r3
 8122106:	3305      	adds	r3, #5
 8122108:	b29b      	uxth	r3, r3
 812210a:	031b      	lsls	r3, r3, #12
 812210c:	b29a      	uxth	r2, r3
 812210e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8122112:	b29b      	uxth	r3, r3
 8122114:	4313      	orrs	r3, r2
 8122116:	b29b      	uxth	r3, r3
 8122118:	4618      	mov	r0, r3
 812211a:	f7f5 fcef 	bl	8117afc <lwip_htons>
 812211e:	4603      	mov	r3, r0
 8122120:	461a      	mov	r2, r3
 8122122:	693b      	ldr	r3, [r7, #16]
 8122124:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8122126:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8122128:	4618      	mov	r0, r3
 812212a:	f7f5 fce7 	bl	8117afc <lwip_htons>
 812212e:	4603      	mov	r3, r0
 8122130:	461a      	mov	r2, r3
 8122132:	693b      	ldr	r3, [r7, #16]
 8122134:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8122136:	693b      	ldr	r3, [r7, #16]
 8122138:	2200      	movs	r2, #0
 812213a:	741a      	strb	r2, [r3, #16]
 812213c:	2200      	movs	r2, #0
 812213e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8122140:	693b      	ldr	r3, [r7, #16]
 8122142:	2200      	movs	r2, #0
 8122144:	749a      	strb	r2, [r3, #18]
 8122146:	2200      	movs	r2, #0
 8122148:	74da      	strb	r2, [r3, #19]
  }
  return p;
 812214a:	697b      	ldr	r3, [r7, #20]
}
 812214c:	4618      	mov	r0, r3
 812214e:	3718      	adds	r7, #24
 8122150:	46bd      	mov	sp, r7
 8122152:	bd80      	pop	{r7, pc}
 8122154:	08127694 	.word	0x08127694
 8122158:	08127db0 	.word	0x08127db0
 812215c:	0812772c 	.word	0x0812772c

08122160 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8122160:	b5b0      	push	{r4, r5, r7, lr}
 8122162:	b08a      	sub	sp, #40	@ 0x28
 8122164:	af04      	add	r7, sp, #16
 8122166:	60f8      	str	r0, [r7, #12]
 8122168:	607b      	str	r3, [r7, #4]
 812216a:	460b      	mov	r3, r1
 812216c:	817b      	strh	r3, [r7, #10]
 812216e:	4613      	mov	r3, r2
 8122170:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8122172:	68fb      	ldr	r3, [r7, #12]
 8122174:	2b00      	cmp	r3, #0
 8122176:	d106      	bne.n	8122186 <tcp_output_alloc_header+0x26>
 8122178:	4b15      	ldr	r3, [pc, #84]	@ (81221d0 <tcp_output_alloc_header+0x70>)
 812217a:	f240 7242 	movw	r2, #1858	@ 0x742
 812217e:	4915      	ldr	r1, [pc, #84]	@ (81221d4 <tcp_output_alloc_header+0x74>)
 8122180:	4815      	ldr	r0, [pc, #84]	@ (81221d8 <tcp_output_alloc_header+0x78>)
 8122182:	f002 fa6b 	bl	812465c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8122186:	68fb      	ldr	r3, [r7, #12]
 8122188:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 812218a:	68fb      	ldr	r3, [r7, #12]
 812218c:	8adb      	ldrh	r3, [r3, #22]
 812218e:	68fa      	ldr	r2, [r7, #12]
 8122190:	8b12      	ldrh	r2, [r2, #24]
 8122192:	68f9      	ldr	r1, [r7, #12]
 8122194:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8122196:	893d      	ldrh	r5, [r7, #8]
 8122198:	897c      	ldrh	r4, [r7, #10]
 812219a:	9103      	str	r1, [sp, #12]
 812219c:	2110      	movs	r1, #16
 812219e:	9102      	str	r1, [sp, #8]
 81221a0:	9201      	str	r2, [sp, #4]
 81221a2:	9300      	str	r3, [sp, #0]
 81221a4:	687b      	ldr	r3, [r7, #4]
 81221a6:	462a      	mov	r2, r5
 81221a8:	4621      	mov	r1, r4
 81221aa:	f7ff ff67 	bl	812207c <tcp_output_alloc_header_common>
 81221ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 81221b0:	697b      	ldr	r3, [r7, #20]
 81221b2:	2b00      	cmp	r3, #0
 81221b4:	d006      	beq.n	81221c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 81221b6:	68fb      	ldr	r3, [r7, #12]
 81221b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81221ba:	68fa      	ldr	r2, [r7, #12]
 81221bc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 81221be:	441a      	add	r2, r3
 81221c0:	68fb      	ldr	r3, [r7, #12]
 81221c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 81221c4:	697b      	ldr	r3, [r7, #20]
}
 81221c6:	4618      	mov	r0, r3
 81221c8:	3718      	adds	r7, #24
 81221ca:	46bd      	mov	sp, r7
 81221cc:	bdb0      	pop	{r4, r5, r7, pc}
 81221ce:	bf00      	nop
 81221d0:	08127694 	.word	0x08127694
 81221d4:	08127de0 	.word	0x08127de0
 81221d8:	0812772c 	.word	0x0812772c

081221dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 81221dc:	b580      	push	{r7, lr}
 81221de:	b088      	sub	sp, #32
 81221e0:	af00      	add	r7, sp, #0
 81221e2:	60f8      	str	r0, [r7, #12]
 81221e4:	60b9      	str	r1, [r7, #8]
 81221e6:	4611      	mov	r1, r2
 81221e8:	461a      	mov	r2, r3
 81221ea:	460b      	mov	r3, r1
 81221ec:	71fb      	strb	r3, [r7, #7]
 81221ee:	4613      	mov	r3, r2
 81221f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 81221f2:	2300      	movs	r3, #0
 81221f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 81221f6:	68bb      	ldr	r3, [r7, #8]
 81221f8:	2b00      	cmp	r3, #0
 81221fa:	d106      	bne.n	812220a <tcp_output_fill_options+0x2e>
 81221fc:	4b12      	ldr	r3, [pc, #72]	@ (8122248 <tcp_output_fill_options+0x6c>)
 81221fe:	f240 7256 	movw	r2, #1878	@ 0x756
 8122202:	4912      	ldr	r1, [pc, #72]	@ (812224c <tcp_output_fill_options+0x70>)
 8122204:	4812      	ldr	r0, [pc, #72]	@ (8122250 <tcp_output_fill_options+0x74>)
 8122206:	f002 fa29 	bl	812465c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 812220a:	68bb      	ldr	r3, [r7, #8]
 812220c:	685b      	ldr	r3, [r3, #4]
 812220e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8122210:	69bb      	ldr	r3, [r7, #24]
 8122212:	3314      	adds	r3, #20
 8122214:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8122216:	8bfb      	ldrh	r3, [r7, #30]
 8122218:	009b      	lsls	r3, r3, #2
 812221a:	461a      	mov	r2, r3
 812221c:	79fb      	ldrb	r3, [r7, #7]
 812221e:	009b      	lsls	r3, r3, #2
 8122220:	f003 0304 	and.w	r3, r3, #4
 8122224:	4413      	add	r3, r2
 8122226:	3314      	adds	r3, #20
 8122228:	69ba      	ldr	r2, [r7, #24]
 812222a:	4413      	add	r3, r2
 812222c:	697a      	ldr	r2, [r7, #20]
 812222e:	429a      	cmp	r2, r3
 8122230:	d006      	beq.n	8122240 <tcp_output_fill_options+0x64>
 8122232:	4b05      	ldr	r3, [pc, #20]	@ (8122248 <tcp_output_fill_options+0x6c>)
 8122234:	f240 7275 	movw	r2, #1909	@ 0x775
 8122238:	4906      	ldr	r1, [pc, #24]	@ (8122254 <tcp_output_fill_options+0x78>)
 812223a:	4805      	ldr	r0, [pc, #20]	@ (8122250 <tcp_output_fill_options+0x74>)
 812223c:	f002 fa0e 	bl	812465c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8122240:	bf00      	nop
 8122242:	3720      	adds	r7, #32
 8122244:	46bd      	mov	sp, r7
 8122246:	bd80      	pop	{r7, pc}
 8122248:	08127694 	.word	0x08127694
 812224c:	08127e08 	.word	0x08127e08
 8122250:	0812772c 	.word	0x0812772c
 8122254:	08127d00 	.word	0x08127d00

08122258 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8122258:	b580      	push	{r7, lr}
 812225a:	b08a      	sub	sp, #40	@ 0x28
 812225c:	af04      	add	r7, sp, #16
 812225e:	60f8      	str	r0, [r7, #12]
 8122260:	60b9      	str	r1, [r7, #8]
 8122262:	607a      	str	r2, [r7, #4]
 8122264:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8122266:	68bb      	ldr	r3, [r7, #8]
 8122268:	2b00      	cmp	r3, #0
 812226a:	d106      	bne.n	812227a <tcp_output_control_segment+0x22>
 812226c:	4b1c      	ldr	r3, [pc, #112]	@ (81222e0 <tcp_output_control_segment+0x88>)
 812226e:	f240 7287 	movw	r2, #1927	@ 0x787
 8122272:	491c      	ldr	r1, [pc, #112]	@ (81222e4 <tcp_output_control_segment+0x8c>)
 8122274:	481c      	ldr	r0, [pc, #112]	@ (81222e8 <tcp_output_control_segment+0x90>)
 8122276:	f002 f9f1 	bl	812465c <iprintf>

  netif = tcp_route(pcb, src, dst);
 812227a:	683a      	ldr	r2, [r7, #0]
 812227c:	6879      	ldr	r1, [r7, #4]
 812227e:	68f8      	ldr	r0, [r7, #12]
 8122280:	f7fe faea 	bl	8120858 <tcp_route>
 8122284:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8122286:	693b      	ldr	r3, [r7, #16]
 8122288:	2b00      	cmp	r3, #0
 812228a:	d102      	bne.n	8122292 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 812228c:	23fc      	movs	r3, #252	@ 0xfc
 812228e:	75fb      	strb	r3, [r7, #23]
 8122290:	e01c      	b.n	81222cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8122292:	68fb      	ldr	r3, [r7, #12]
 8122294:	2b00      	cmp	r3, #0
 8122296:	d006      	beq.n	81222a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8122298:	68fb      	ldr	r3, [r7, #12]
 812229a:	7adb      	ldrb	r3, [r3, #11]
 812229c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 812229e:	68fb      	ldr	r3, [r7, #12]
 81222a0:	7a9b      	ldrb	r3, [r3, #10]
 81222a2:	757b      	strb	r3, [r7, #21]
 81222a4:	e003      	b.n	81222ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 81222a6:	23ff      	movs	r3, #255	@ 0xff
 81222a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 81222aa:	2300      	movs	r3, #0
 81222ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 81222ae:	7dba      	ldrb	r2, [r7, #22]
 81222b0:	693b      	ldr	r3, [r7, #16]
 81222b2:	9302      	str	r3, [sp, #8]
 81222b4:	2306      	movs	r3, #6
 81222b6:	9301      	str	r3, [sp, #4]
 81222b8:	7d7b      	ldrb	r3, [r7, #21]
 81222ba:	9300      	str	r3, [sp, #0]
 81222bc:	4613      	mov	r3, r2
 81222be:	683a      	ldr	r2, [r7, #0]
 81222c0:	6879      	ldr	r1, [r7, #4]
 81222c2:	68b8      	ldr	r0, [r7, #8]
 81222c4:	f7f7 f97a 	bl	81195bc <ip4_output_if>
 81222c8:	4603      	mov	r3, r0
 81222ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 81222cc:	68b8      	ldr	r0, [r7, #8]
 81222ce:	f7f9 fe1d 	bl	811bf0c <pbuf_free>
  return err;
 81222d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 81222d6:	4618      	mov	r0, r3
 81222d8:	3718      	adds	r7, #24
 81222da:	46bd      	mov	sp, r7
 81222dc:	bd80      	pop	{r7, pc}
 81222de:	bf00      	nop
 81222e0:	08127694 	.word	0x08127694
 81222e4:	08127e30 	.word	0x08127e30
 81222e8:	0812772c 	.word	0x0812772c

081222ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 81222ec:	b590      	push	{r4, r7, lr}
 81222ee:	b08b      	sub	sp, #44	@ 0x2c
 81222f0:	af04      	add	r7, sp, #16
 81222f2:	60f8      	str	r0, [r7, #12]
 81222f4:	60b9      	str	r1, [r7, #8]
 81222f6:	607a      	str	r2, [r7, #4]
 81222f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 81222fa:	683b      	ldr	r3, [r7, #0]
 81222fc:	2b00      	cmp	r3, #0
 81222fe:	d106      	bne.n	812230e <tcp_rst+0x22>
 8122300:	4b1f      	ldr	r3, [pc, #124]	@ (8122380 <tcp_rst+0x94>)
 8122302:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8122306:	491f      	ldr	r1, [pc, #124]	@ (8122384 <tcp_rst+0x98>)
 8122308:	481f      	ldr	r0, [pc, #124]	@ (8122388 <tcp_rst+0x9c>)
 812230a:	f002 f9a7 	bl	812465c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 812230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8122310:	2b00      	cmp	r3, #0
 8122312:	d106      	bne.n	8122322 <tcp_rst+0x36>
 8122314:	4b1a      	ldr	r3, [pc, #104]	@ (8122380 <tcp_rst+0x94>)
 8122316:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 812231a:	491c      	ldr	r1, [pc, #112]	@ (812238c <tcp_rst+0xa0>)
 812231c:	481a      	ldr	r0, [pc, #104]	@ (8122388 <tcp_rst+0x9c>)
 812231e:	f002 f99d 	bl	812465c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8122322:	2300      	movs	r3, #0
 8122324:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8122326:	f246 0308 	movw	r3, #24584	@ 0x6008
 812232a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 812232c:	7dfb      	ldrb	r3, [r7, #23]
 812232e:	b29c      	uxth	r4, r3
 8122330:	68b8      	ldr	r0, [r7, #8]
 8122332:	f7f5 fbf8 	bl	8117b26 <lwip_htonl>
 8122336:	4602      	mov	r2, r0
 8122338:	8abb      	ldrh	r3, [r7, #20]
 812233a:	9303      	str	r3, [sp, #12]
 812233c:	2314      	movs	r3, #20
 812233e:	9302      	str	r3, [sp, #8]
 8122340:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8122342:	9301      	str	r3, [sp, #4]
 8122344:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8122346:	9300      	str	r3, [sp, #0]
 8122348:	4613      	mov	r3, r2
 812234a:	2200      	movs	r2, #0
 812234c:	4621      	mov	r1, r4
 812234e:	6878      	ldr	r0, [r7, #4]
 8122350:	f7ff fe94 	bl	812207c <tcp_output_alloc_header_common>
 8122354:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8122356:	693b      	ldr	r3, [r7, #16]
 8122358:	2b00      	cmp	r3, #0
 812235a:	d00c      	beq.n	8122376 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 812235c:	7dfb      	ldrb	r3, [r7, #23]
 812235e:	2200      	movs	r2, #0
 8122360:	6939      	ldr	r1, [r7, #16]
 8122362:	68f8      	ldr	r0, [r7, #12]
 8122364:	f7ff ff3a 	bl	81221dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8122368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 812236a:	683a      	ldr	r2, [r7, #0]
 812236c:	6939      	ldr	r1, [r7, #16]
 812236e:	68f8      	ldr	r0, [r7, #12]
 8122370:	f7ff ff72 	bl	8122258 <tcp_output_control_segment>
 8122374:	e000      	b.n	8122378 <tcp_rst+0x8c>
    return;
 8122376:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8122378:	371c      	adds	r7, #28
 812237a:	46bd      	mov	sp, r7
 812237c:	bd90      	pop	{r4, r7, pc}
 812237e:	bf00      	nop
 8122380:	08127694 	.word	0x08127694
 8122384:	08127e5c 	.word	0x08127e5c
 8122388:	0812772c 	.word	0x0812772c
 812238c:	08127e78 	.word	0x08127e78

08122390 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8122390:	b590      	push	{r4, r7, lr}
 8122392:	b087      	sub	sp, #28
 8122394:	af00      	add	r7, sp, #0
 8122396:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8122398:	2300      	movs	r3, #0
 812239a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 812239c:	2300      	movs	r3, #0
 812239e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 81223a0:	687b      	ldr	r3, [r7, #4]
 81223a2:	2b00      	cmp	r3, #0
 81223a4:	d106      	bne.n	81223b4 <tcp_send_empty_ack+0x24>
 81223a6:	4b28      	ldr	r3, [pc, #160]	@ (8122448 <tcp_send_empty_ack+0xb8>)
 81223a8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 81223ac:	4927      	ldr	r1, [pc, #156]	@ (812244c <tcp_send_empty_ack+0xbc>)
 81223ae:	4828      	ldr	r0, [pc, #160]	@ (8122450 <tcp_send_empty_ack+0xc0>)
 81223b0:	f002 f954 	bl	812465c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 81223b4:	7dfb      	ldrb	r3, [r7, #23]
 81223b6:	009b      	lsls	r3, r3, #2
 81223b8:	b2db      	uxtb	r3, r3
 81223ba:	f003 0304 	and.w	r3, r3, #4
 81223be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 81223c0:	7d7b      	ldrb	r3, [r7, #21]
 81223c2:	b29c      	uxth	r4, r3
 81223c4:	687b      	ldr	r3, [r7, #4]
 81223c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81223c8:	4618      	mov	r0, r3
 81223ca:	f7f5 fbac 	bl	8117b26 <lwip_htonl>
 81223ce:	4603      	mov	r3, r0
 81223d0:	2200      	movs	r2, #0
 81223d2:	4621      	mov	r1, r4
 81223d4:	6878      	ldr	r0, [r7, #4]
 81223d6:	f7ff fec3 	bl	8122160 <tcp_output_alloc_header>
 81223da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81223dc:	693b      	ldr	r3, [r7, #16]
 81223de:	2b00      	cmp	r3, #0
 81223e0:	d109      	bne.n	81223f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81223e2:	687b      	ldr	r3, [r7, #4]
 81223e4:	8b5b      	ldrh	r3, [r3, #26]
 81223e6:	f043 0303 	orr.w	r3, r3, #3
 81223ea:	b29a      	uxth	r2, r3
 81223ec:	687b      	ldr	r3, [r7, #4]
 81223ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 81223f0:	f06f 0301 	mvn.w	r3, #1
 81223f4:	e023      	b.n	812243e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 81223f6:	7dbb      	ldrb	r3, [r7, #22]
 81223f8:	7dfa      	ldrb	r2, [r7, #23]
 81223fa:	6939      	ldr	r1, [r7, #16]
 81223fc:	6878      	ldr	r0, [r7, #4]
 81223fe:	f7ff feed 	bl	81221dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8122402:	687a      	ldr	r2, [r7, #4]
 8122404:	687b      	ldr	r3, [r7, #4]
 8122406:	3304      	adds	r3, #4
 8122408:	6939      	ldr	r1, [r7, #16]
 812240a:	6878      	ldr	r0, [r7, #4]
 812240c:	f7ff ff24 	bl	8122258 <tcp_output_control_segment>
 8122410:	4603      	mov	r3, r0
 8122412:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8122414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8122418:	2b00      	cmp	r3, #0
 812241a:	d007      	beq.n	812242c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 812241c:	687b      	ldr	r3, [r7, #4]
 812241e:	8b5b      	ldrh	r3, [r3, #26]
 8122420:	f043 0303 	orr.w	r3, r3, #3
 8122424:	b29a      	uxth	r2, r3
 8122426:	687b      	ldr	r3, [r7, #4]
 8122428:	835a      	strh	r2, [r3, #26]
 812242a:	e006      	b.n	812243a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 812242c:	687b      	ldr	r3, [r7, #4]
 812242e:	8b5b      	ldrh	r3, [r3, #26]
 8122430:	f023 0303 	bic.w	r3, r3, #3
 8122434:	b29a      	uxth	r2, r3
 8122436:	687b      	ldr	r3, [r7, #4]
 8122438:	835a      	strh	r2, [r3, #26]
  }

  return err;
 812243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 812243e:	4618      	mov	r0, r3
 8122440:	371c      	adds	r7, #28
 8122442:	46bd      	mov	sp, r7
 8122444:	bd90      	pop	{r4, r7, pc}
 8122446:	bf00      	nop
 8122448:	08127694 	.word	0x08127694
 812244c:	08127e94 	.word	0x08127e94
 8122450:	0812772c 	.word	0x0812772c

08122454 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8122454:	b590      	push	{r4, r7, lr}
 8122456:	b087      	sub	sp, #28
 8122458:	af00      	add	r7, sp, #0
 812245a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 812245c:	2300      	movs	r3, #0
 812245e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8122460:	687b      	ldr	r3, [r7, #4]
 8122462:	2b00      	cmp	r3, #0
 8122464:	d106      	bne.n	8122474 <tcp_keepalive+0x20>
 8122466:	4b18      	ldr	r3, [pc, #96]	@ (81224c8 <tcp_keepalive+0x74>)
 8122468:	f640 0224 	movw	r2, #2084	@ 0x824
 812246c:	4917      	ldr	r1, [pc, #92]	@ (81224cc <tcp_keepalive+0x78>)
 812246e:	4818      	ldr	r0, [pc, #96]	@ (81224d0 <tcp_keepalive+0x7c>)
 8122470:	f002 f8f4 	bl	812465c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8122474:	7dfb      	ldrb	r3, [r7, #23]
 8122476:	b29c      	uxth	r4, r3
 8122478:	687b      	ldr	r3, [r7, #4]
 812247a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 812247c:	3b01      	subs	r3, #1
 812247e:	4618      	mov	r0, r3
 8122480:	f7f5 fb51 	bl	8117b26 <lwip_htonl>
 8122484:	4603      	mov	r3, r0
 8122486:	2200      	movs	r2, #0
 8122488:	4621      	mov	r1, r4
 812248a:	6878      	ldr	r0, [r7, #4]
 812248c:	f7ff fe68 	bl	8122160 <tcp_output_alloc_header>
 8122490:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8122492:	693b      	ldr	r3, [r7, #16]
 8122494:	2b00      	cmp	r3, #0
 8122496:	d102      	bne.n	812249e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8122498:	f04f 33ff 	mov.w	r3, #4294967295
 812249c:	e010      	b.n	81224c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 812249e:	7dfb      	ldrb	r3, [r7, #23]
 81224a0:	2200      	movs	r2, #0
 81224a2:	6939      	ldr	r1, [r7, #16]
 81224a4:	6878      	ldr	r0, [r7, #4]
 81224a6:	f7ff fe99 	bl	81221dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 81224aa:	687a      	ldr	r2, [r7, #4]
 81224ac:	687b      	ldr	r3, [r7, #4]
 81224ae:	3304      	adds	r3, #4
 81224b0:	6939      	ldr	r1, [r7, #16]
 81224b2:	6878      	ldr	r0, [r7, #4]
 81224b4:	f7ff fed0 	bl	8122258 <tcp_output_control_segment>
 81224b8:	4603      	mov	r3, r0
 81224ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 81224bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 81224c0:	4618      	mov	r0, r3
 81224c2:	371c      	adds	r7, #28
 81224c4:	46bd      	mov	sp, r7
 81224c6:	bd90      	pop	{r4, r7, pc}
 81224c8:	08127694 	.word	0x08127694
 81224cc:	08127eb4 	.word	0x08127eb4
 81224d0:	0812772c 	.word	0x0812772c

081224d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 81224d4:	b590      	push	{r4, r7, lr}
 81224d6:	b08b      	sub	sp, #44	@ 0x2c
 81224d8:	af00      	add	r7, sp, #0
 81224da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 81224dc:	2300      	movs	r3, #0
 81224de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 81224e2:	687b      	ldr	r3, [r7, #4]
 81224e4:	2b00      	cmp	r3, #0
 81224e6:	d106      	bne.n	81224f6 <tcp_zero_window_probe+0x22>
 81224e8:	4b4c      	ldr	r3, [pc, #304]	@ (812261c <tcp_zero_window_probe+0x148>)
 81224ea:	f640 024f 	movw	r2, #2127	@ 0x84f
 81224ee:	494c      	ldr	r1, [pc, #304]	@ (8122620 <tcp_zero_window_probe+0x14c>)
 81224f0:	484c      	ldr	r0, [pc, #304]	@ (8122624 <tcp_zero_window_probe+0x150>)
 81224f2:	f002 f8b3 	bl	812465c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 81224f6:	687b      	ldr	r3, [r7, #4]
 81224f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81224fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 81224fc:	6a3b      	ldr	r3, [r7, #32]
 81224fe:	2b00      	cmp	r3, #0
 8122500:	d101      	bne.n	8122506 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8122502:	2300      	movs	r3, #0
 8122504:	e086      	b.n	8122614 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8122506:	687b      	ldr	r3, [r7, #4]
 8122508:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 812250c:	2bff      	cmp	r3, #255	@ 0xff
 812250e:	d007      	beq.n	8122520 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8122510:	687b      	ldr	r3, [r7, #4]
 8122512:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8122516:	3301      	adds	r3, #1
 8122518:	b2da      	uxtb	r2, r3
 812251a:	687b      	ldr	r3, [r7, #4]
 812251c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8122520:	6a3b      	ldr	r3, [r7, #32]
 8122522:	68db      	ldr	r3, [r3, #12]
 8122524:	899b      	ldrh	r3, [r3, #12]
 8122526:	b29b      	uxth	r3, r3
 8122528:	4618      	mov	r0, r3
 812252a:	f7f5 fae7 	bl	8117afc <lwip_htons>
 812252e:	4603      	mov	r3, r0
 8122530:	b2db      	uxtb	r3, r3
 8122532:	f003 0301 	and.w	r3, r3, #1
 8122536:	2b00      	cmp	r3, #0
 8122538:	d005      	beq.n	8122546 <tcp_zero_window_probe+0x72>
 812253a:	6a3b      	ldr	r3, [r7, #32]
 812253c:	891b      	ldrh	r3, [r3, #8]
 812253e:	2b00      	cmp	r3, #0
 8122540:	d101      	bne.n	8122546 <tcp_zero_window_probe+0x72>
 8122542:	2301      	movs	r3, #1
 8122544:	e000      	b.n	8122548 <tcp_zero_window_probe+0x74>
 8122546:	2300      	movs	r3, #0
 8122548:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 812254a:	7ffb      	ldrb	r3, [r7, #31]
 812254c:	2b00      	cmp	r3, #0
 812254e:	bf0c      	ite	eq
 8122550:	2301      	moveq	r3, #1
 8122552:	2300      	movne	r3, #0
 8122554:	b2db      	uxtb	r3, r3
 8122556:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8122558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 812255c:	b299      	uxth	r1, r3
 812255e:	6a3b      	ldr	r3, [r7, #32]
 8122560:	68db      	ldr	r3, [r3, #12]
 8122562:	685b      	ldr	r3, [r3, #4]
 8122564:	8bba      	ldrh	r2, [r7, #28]
 8122566:	6878      	ldr	r0, [r7, #4]
 8122568:	f7ff fdfa 	bl	8122160 <tcp_output_alloc_header>
 812256c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 812256e:	69bb      	ldr	r3, [r7, #24]
 8122570:	2b00      	cmp	r3, #0
 8122572:	d102      	bne.n	812257a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8122574:	f04f 33ff 	mov.w	r3, #4294967295
 8122578:	e04c      	b.n	8122614 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 812257a:	69bb      	ldr	r3, [r7, #24]
 812257c:	685b      	ldr	r3, [r3, #4]
 812257e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8122580:	7ffb      	ldrb	r3, [r7, #31]
 8122582:	2b00      	cmp	r3, #0
 8122584:	d011      	beq.n	81225aa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8122586:	697b      	ldr	r3, [r7, #20]
 8122588:	899b      	ldrh	r3, [r3, #12]
 812258a:	b29b      	uxth	r3, r3
 812258c:	b21b      	sxth	r3, r3
 812258e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8122592:	b21c      	sxth	r4, r3
 8122594:	2011      	movs	r0, #17
 8122596:	f7f5 fab1 	bl	8117afc <lwip_htons>
 812259a:	4603      	mov	r3, r0
 812259c:	b21b      	sxth	r3, r3
 812259e:	4323      	orrs	r3, r4
 81225a0:	b21b      	sxth	r3, r3
 81225a2:	b29a      	uxth	r2, r3
 81225a4:	697b      	ldr	r3, [r7, #20]
 81225a6:	819a      	strh	r2, [r3, #12]
 81225a8:	e010      	b.n	81225cc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 81225aa:	69bb      	ldr	r3, [r7, #24]
 81225ac:	685b      	ldr	r3, [r3, #4]
 81225ae:	3314      	adds	r3, #20
 81225b0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 81225b2:	6a3b      	ldr	r3, [r7, #32]
 81225b4:	6858      	ldr	r0, [r3, #4]
 81225b6:	6a3b      	ldr	r3, [r7, #32]
 81225b8:	685b      	ldr	r3, [r3, #4]
 81225ba:	891a      	ldrh	r2, [r3, #8]
 81225bc:	6a3b      	ldr	r3, [r7, #32]
 81225be:	891b      	ldrh	r3, [r3, #8]
 81225c0:	1ad3      	subs	r3, r2, r3
 81225c2:	b29b      	uxth	r3, r3
 81225c4:	2201      	movs	r2, #1
 81225c6:	6939      	ldr	r1, [r7, #16]
 81225c8:	f7f9 fea6 	bl	811c318 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 81225cc:	6a3b      	ldr	r3, [r7, #32]
 81225ce:	68db      	ldr	r3, [r3, #12]
 81225d0:	685b      	ldr	r3, [r3, #4]
 81225d2:	4618      	mov	r0, r3
 81225d4:	f7f5 faa7 	bl	8117b26 <lwip_htonl>
 81225d8:	4603      	mov	r3, r0
 81225da:	3301      	adds	r3, #1
 81225dc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 81225de:	687b      	ldr	r3, [r7, #4]
 81225e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81225e2:	68fb      	ldr	r3, [r7, #12]
 81225e4:	1ad3      	subs	r3, r2, r3
 81225e6:	2b00      	cmp	r3, #0
 81225e8:	da02      	bge.n	81225f0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 81225ea:	687b      	ldr	r3, [r7, #4]
 81225ec:	68fa      	ldr	r2, [r7, #12]
 81225ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 81225f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81225f4:	2200      	movs	r2, #0
 81225f6:	69b9      	ldr	r1, [r7, #24]
 81225f8:	6878      	ldr	r0, [r7, #4]
 81225fa:	f7ff fdef 	bl	81221dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 81225fe:	687a      	ldr	r2, [r7, #4]
 8122600:	687b      	ldr	r3, [r7, #4]
 8122602:	3304      	adds	r3, #4
 8122604:	69b9      	ldr	r1, [r7, #24]
 8122606:	6878      	ldr	r0, [r7, #4]
 8122608:	f7ff fe26 	bl	8122258 <tcp_output_control_segment>
 812260c:	4603      	mov	r3, r0
 812260e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8122610:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8122614:	4618      	mov	r0, r3
 8122616:	372c      	adds	r7, #44	@ 0x2c
 8122618:	46bd      	mov	sp, r7
 812261a:	bd90      	pop	{r4, r7, pc}
 812261c:	08127694 	.word	0x08127694
 8122620:	08127ed0 	.word	0x08127ed0
 8122624:	0812772c 	.word	0x0812772c

08122628 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8122628:	b580      	push	{r7, lr}
 812262a:	b084      	sub	sp, #16
 812262c:	af00      	add	r7, sp, #0
 812262e:	6078      	str	r0, [r7, #4]
 8122630:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8122632:	f000 fabd 	bl	8122bb0 <sys_timeouts_sleeptime>
 8122636:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8122638:	68fb      	ldr	r3, [r7, #12]
 812263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 812263e:	d10b      	bne.n	8122658 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8122640:	4813      	ldr	r0, [pc, #76]	@ (8122690 <tcpip_timeouts_mbox_fetch+0x68>)
 8122642:	f7f9 ffb4 	bl	811c5ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8122646:	2200      	movs	r2, #0
 8122648:	6839      	ldr	r1, [r7, #0]
 812264a:	6878      	ldr	r0, [r7, #4]
 812264c:	f7f9 ff3c 	bl	811c4c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8122650:	480f      	ldr	r0, [pc, #60]	@ (8122690 <tcpip_timeouts_mbox_fetch+0x68>)
 8122652:	f7f9 ff9d 	bl	811c590 <sys_mutex_lock>
    return;
 8122656:	e018      	b.n	812268a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8122658:	68fb      	ldr	r3, [r7, #12]
 812265a:	2b00      	cmp	r3, #0
 812265c:	d102      	bne.n	8122664 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 812265e:	f000 fa6d 	bl	8122b3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8122662:	e7e6      	b.n	8122632 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8122664:	480a      	ldr	r0, [pc, #40]	@ (8122690 <tcpip_timeouts_mbox_fetch+0x68>)
 8122666:	f7f9 ffa2 	bl	811c5ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 812266a:	68fa      	ldr	r2, [r7, #12]
 812266c:	6839      	ldr	r1, [r7, #0]
 812266e:	6878      	ldr	r0, [r7, #4]
 8122670:	f7f9 ff2a 	bl	811c4c8 <sys_arch_mbox_fetch>
 8122674:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8122676:	4806      	ldr	r0, [pc, #24]	@ (8122690 <tcpip_timeouts_mbox_fetch+0x68>)
 8122678:	f7f9 ff8a 	bl	811c590 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 812267c:	68bb      	ldr	r3, [r7, #8]
 812267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8122682:	d102      	bne.n	812268a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8122684:	f000 fa5a 	bl	8122b3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8122688:	e7d3      	b.n	8122632 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 812268a:	3710      	adds	r7, #16
 812268c:	46bd      	mov	sp, r7
 812268e:	bd80      	pop	{r7, pc}
 8122690:	1000e4f4 	.word	0x1000e4f4

08122694 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8122694:	b580      	push	{r7, lr}
 8122696:	b084      	sub	sp, #16
 8122698:	af00      	add	r7, sp, #0
 812269a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 812269c:	4810      	ldr	r0, [pc, #64]	@ (81226e0 <tcpip_thread+0x4c>)
 812269e:	f7f9 ff77 	bl	811c590 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 81226a2:	4b10      	ldr	r3, [pc, #64]	@ (81226e4 <tcpip_thread+0x50>)
 81226a4:	681b      	ldr	r3, [r3, #0]
 81226a6:	2b00      	cmp	r3, #0
 81226a8:	d005      	beq.n	81226b6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 81226aa:	4b0e      	ldr	r3, [pc, #56]	@ (81226e4 <tcpip_thread+0x50>)
 81226ac:	681b      	ldr	r3, [r3, #0]
 81226ae:	4a0e      	ldr	r2, [pc, #56]	@ (81226e8 <tcpip_thread+0x54>)
 81226b0:	6812      	ldr	r2, [r2, #0]
 81226b2:	4610      	mov	r0, r2
 81226b4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 81226b6:	f107 030c 	add.w	r3, r7, #12
 81226ba:	4619      	mov	r1, r3
 81226bc:	480b      	ldr	r0, [pc, #44]	@ (81226ec <tcpip_thread+0x58>)
 81226be:	f7ff ffb3 	bl	8122628 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 81226c2:	68fb      	ldr	r3, [r7, #12]
 81226c4:	2b00      	cmp	r3, #0
 81226c6:	d106      	bne.n	81226d6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 81226c8:	4b09      	ldr	r3, [pc, #36]	@ (81226f0 <tcpip_thread+0x5c>)
 81226ca:	2291      	movs	r2, #145	@ 0x91
 81226cc:	4909      	ldr	r1, [pc, #36]	@ (81226f4 <tcpip_thread+0x60>)
 81226ce:	480a      	ldr	r0, [pc, #40]	@ (81226f8 <tcpip_thread+0x64>)
 81226d0:	f001 ffc4 	bl	812465c <iprintf>
      continue;
 81226d4:	e003      	b.n	81226de <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 81226d6:	68fb      	ldr	r3, [r7, #12]
 81226d8:	4618      	mov	r0, r3
 81226da:	f000 f80f 	bl	81226fc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 81226de:	e7ea      	b.n	81226b6 <tcpip_thread+0x22>
 81226e0:	1000e4f4 	.word	0x1000e4f4
 81226e4:	1000e4e8 	.word	0x1000e4e8
 81226e8:	1000e4ec 	.word	0x1000e4ec
 81226ec:	1000e4f0 	.word	0x1000e4f0
 81226f0:	08127ef4 	.word	0x08127ef4
 81226f4:	08127f68 	.word	0x08127f68
 81226f8:	08127f88 	.word	0x08127f88

081226fc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 81226fc:	b580      	push	{r7, lr}
 81226fe:	b082      	sub	sp, #8
 8122700:	af00      	add	r7, sp, #0
 8122702:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8122704:	687b      	ldr	r3, [r7, #4]
 8122706:	781b      	ldrb	r3, [r3, #0]
 8122708:	2b00      	cmp	r3, #0
 812270a:	d002      	beq.n	8122712 <tcpip_thread_handle_msg+0x16>
 812270c:	2b01      	cmp	r3, #1
 812270e:	d00b      	beq.n	8122728 <tcpip_thread_handle_msg+0x2c>
 8122710:	e011      	b.n	8122736 <tcpip_thread_handle_msg+0x3a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8122712:	687b      	ldr	r3, [r7, #4]
 8122714:	685b      	ldr	r3, [r3, #4]
 8122716:	687a      	ldr	r2, [r7, #4]
 8122718:	6892      	ldr	r2, [r2, #8]
 812271a:	4610      	mov	r0, r2
 812271c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 812271e:	6879      	ldr	r1, [r7, #4]
 8122720:	2008      	movs	r0, #8
 8122722:	f7f8 fd51 	bl	811b1c8 <memp_free>
      break;
 8122726:	e00d      	b.n	8122744 <tcpip_thread_handle_msg+0x48>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8122728:	687b      	ldr	r3, [r7, #4]
 812272a:	685b      	ldr	r3, [r3, #4]
 812272c:	687a      	ldr	r2, [r7, #4]
 812272e:	6892      	ldr	r2, [r2, #8]
 8122730:	4610      	mov	r0, r2
 8122732:	4798      	blx	r3
      break;
 8122734:	e006      	b.n	8122744 <tcpip_thread_handle_msg+0x48>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8122736:	4b05      	ldr	r3, [pc, #20]	@ (812274c <tcpip_thread_handle_msg+0x50>)
 8122738:	22cf      	movs	r2, #207	@ 0xcf
 812273a:	4905      	ldr	r1, [pc, #20]	@ (8122750 <tcpip_thread_handle_msg+0x54>)
 812273c:	4805      	ldr	r0, [pc, #20]	@ (8122754 <tcpip_thread_handle_msg+0x58>)
 812273e:	f001 ff8d 	bl	812465c <iprintf>
      break;
 8122742:	bf00      	nop
  }
}
 8122744:	bf00      	nop
 8122746:	3708      	adds	r7, #8
 8122748:	46bd      	mov	sp, r7
 812274a:	bd80      	pop	{r7, pc}
 812274c:	08127ef4 	.word	0x08127ef4
 8122750:	08127f68 	.word	0x08127f68
 8122754:	08127f88 	.word	0x08127f88

08122758 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8122758:	b580      	push	{r7, lr}
 812275a:	b086      	sub	sp, #24
 812275c:	af00      	add	r7, sp, #0
 812275e:	60f8      	str	r0, [r7, #12]
 8122760:	60b9      	str	r1, [r7, #8]
 8122762:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING_INPUT
  err_t ret;
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_inpkt: PACKET %p/%p\n", (void *)p, (void *)inp));
  LOCK_TCPIP_CORE();
 8122764:	4808      	ldr	r0, [pc, #32]	@ (8122788 <tcpip_inpkt+0x30>)
 8122766:	f7f9 ff13 	bl	811c590 <sys_mutex_lock>
  ret = input_fn(p, inp);
 812276a:	687b      	ldr	r3, [r7, #4]
 812276c:	68b9      	ldr	r1, [r7, #8]
 812276e:	68f8      	ldr	r0, [r7, #12]
 8122770:	4798      	blx	r3
 8122772:	4603      	mov	r3, r0
 8122774:	75fb      	strb	r3, [r7, #23]
  UNLOCK_TCPIP_CORE();
 8122776:	4804      	ldr	r0, [pc, #16]	@ (8122788 <tcpip_inpkt+0x30>)
 8122778:	f7f9 ff19 	bl	811c5ae <sys_mutex_unlock>
  return ret;
 812277c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8122780:	4618      	mov	r0, r3
 8122782:	3718      	adds	r7, #24
 8122784:	46bd      	mov	sp, r7
 8122786:	bd80      	pop	{r7, pc}
 8122788:	1000e4f4 	.word	0x1000e4f4

0812278c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 812278c:	b580      	push	{r7, lr}
 812278e:	b082      	sub	sp, #8
 8122790:	af00      	add	r7, sp, #0
 8122792:	6078      	str	r0, [r7, #4]
 8122794:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8122796:	683b      	ldr	r3, [r7, #0]
 8122798:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 812279c:	f003 0318 	and.w	r3, r3, #24
 81227a0:	2b00      	cmp	r3, #0
 81227a2:	d006      	beq.n	81227b2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 81227a4:	4a08      	ldr	r2, [pc, #32]	@ (81227c8 <tcpip_input+0x3c>)
 81227a6:	6839      	ldr	r1, [r7, #0]
 81227a8:	6878      	ldr	r0, [r7, #4]
 81227aa:	f7ff ffd5 	bl	8122758 <tcpip_inpkt>
 81227ae:	4603      	mov	r3, r0
 81227b0:	e005      	b.n	81227be <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 81227b2:	4a06      	ldr	r2, [pc, #24]	@ (81227cc <tcpip_input+0x40>)
 81227b4:	6839      	ldr	r1, [r7, #0]
 81227b6:	6878      	ldr	r0, [r7, #4]
 81227b8:	f7ff ffce 	bl	8122758 <tcpip_inpkt>
 81227bc:	4603      	mov	r3, r0
}
 81227be:	4618      	mov	r0, r3
 81227c0:	3708      	adds	r7, #8
 81227c2:	46bd      	mov	sp, r7
 81227c4:	bd80      	pop	{r7, pc}
 81227c6:	bf00      	nop
 81227c8:	08118b85 	.word	0x08118b85
 81227cc:	08119375 	.word	0x08119375

081227d0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 81227d0:	b580      	push	{r7, lr}
 81227d2:	b084      	sub	sp, #16
 81227d4:	af00      	add	r7, sp, #0
 81227d6:	6078      	str	r0, [r7, #4]
 81227d8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 81227da:	4819      	ldr	r0, [pc, #100]	@ (8122840 <tcpip_try_callback+0x70>)
 81227dc:	f7f9 fea5 	bl	811c52a <sys_mbox_valid>
 81227e0:	4603      	mov	r3, r0
 81227e2:	2b00      	cmp	r3, #0
 81227e4:	d106      	bne.n	81227f4 <tcpip_try_callback+0x24>
 81227e6:	4b17      	ldr	r3, [pc, #92]	@ (8122844 <tcpip_try_callback+0x74>)
 81227e8:	f240 125d 	movw	r2, #349	@ 0x15d
 81227ec:	4916      	ldr	r1, [pc, #88]	@ (8122848 <tcpip_try_callback+0x78>)
 81227ee:	4817      	ldr	r0, [pc, #92]	@ (812284c <tcpip_try_callback+0x7c>)
 81227f0:	f001 ff34 	bl	812465c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 81227f4:	2008      	movs	r0, #8
 81227f6:	f7f8 fc71 	bl	811b0dc <memp_malloc>
 81227fa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 81227fc:	68fb      	ldr	r3, [r7, #12]
 81227fe:	2b00      	cmp	r3, #0
 8122800:	d102      	bne.n	8122808 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8122802:	f04f 33ff 	mov.w	r3, #4294967295
 8122806:	e017      	b.n	8122838 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8122808:	68fb      	ldr	r3, [r7, #12]
 812280a:	2200      	movs	r2, #0
 812280c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 812280e:	68fb      	ldr	r3, [r7, #12]
 8122810:	687a      	ldr	r2, [r7, #4]
 8122812:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8122814:	68fb      	ldr	r3, [r7, #12]
 8122816:	683a      	ldr	r2, [r7, #0]
 8122818:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 812281a:	68f9      	ldr	r1, [r7, #12]
 812281c:	4808      	ldr	r0, [pc, #32]	@ (8122840 <tcpip_try_callback+0x70>)
 812281e:	f7f9 fe39 	bl	811c494 <sys_mbox_trypost>
 8122822:	4603      	mov	r3, r0
 8122824:	2b00      	cmp	r3, #0
 8122826:	d006      	beq.n	8122836 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8122828:	68f9      	ldr	r1, [r7, #12]
 812282a:	2008      	movs	r0, #8
 812282c:	f7f8 fccc 	bl	811b1c8 <memp_free>
    return ERR_MEM;
 8122830:	f04f 33ff 	mov.w	r3, #4294967295
 8122834:	e000      	b.n	8122838 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8122836:	2300      	movs	r3, #0
}
 8122838:	4618      	mov	r0, r3
 812283a:	3710      	adds	r7, #16
 812283c:	46bd      	mov	sp, r7
 812283e:	bd80      	pop	{r7, pc}
 8122840:	1000e4f0 	.word	0x1000e4f0
 8122844:	08127ef4 	.word	0x08127ef4
 8122848:	08127fb0 	.word	0x08127fb0
 812284c:	08127f88 	.word	0x08127f88

08122850 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8122850:	b580      	push	{r7, lr}
 8122852:	b084      	sub	sp, #16
 8122854:	af02      	add	r7, sp, #8
 8122856:	6078      	str	r0, [r7, #4]
 8122858:	6039      	str	r1, [r7, #0]
  lwip_init();
 812285a:	f7f6 fcd9 	bl	8119210 <lwip_init>

  tcpip_init_done = initfunc;
 812285e:	4a17      	ldr	r2, [pc, #92]	@ (81228bc <tcpip_init+0x6c>)
 8122860:	687b      	ldr	r3, [r7, #4]
 8122862:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8122864:	4a16      	ldr	r2, [pc, #88]	@ (81228c0 <tcpip_init+0x70>)
 8122866:	683b      	ldr	r3, [r7, #0]
 8122868:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 812286a:	2106      	movs	r1, #6
 812286c:	4815      	ldr	r0, [pc, #84]	@ (81228c4 <tcpip_init+0x74>)
 812286e:	f7f9 fdf7 	bl	811c460 <sys_mbox_new>
 8122872:	4603      	mov	r3, r0
 8122874:	2b00      	cmp	r3, #0
 8122876:	d006      	beq.n	8122886 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8122878:	4b13      	ldr	r3, [pc, #76]	@ (81228c8 <tcpip_init+0x78>)
 812287a:	f240 2261 	movw	r2, #609	@ 0x261
 812287e:	4913      	ldr	r1, [pc, #76]	@ (81228cc <tcpip_init+0x7c>)
 8122880:	4813      	ldr	r0, [pc, #76]	@ (81228d0 <tcpip_init+0x80>)
 8122882:	f001 feeb 	bl	812465c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8122886:	4813      	ldr	r0, [pc, #76]	@ (81228d4 <tcpip_init+0x84>)
 8122888:	f7f9 fe6c 	bl	811c564 <sys_mutex_new>
 812288c:	4603      	mov	r3, r0
 812288e:	2b00      	cmp	r3, #0
 8122890:	d006      	beq.n	81228a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8122892:	4b0d      	ldr	r3, [pc, #52]	@ (81228c8 <tcpip_init+0x78>)
 8122894:	f240 2265 	movw	r2, #613	@ 0x265
 8122898:	490f      	ldr	r1, [pc, #60]	@ (81228d8 <tcpip_init+0x88>)
 812289a:	480d      	ldr	r0, [pc, #52]	@ (81228d0 <tcpip_init+0x80>)
 812289c:	f001 fede 	bl	812465c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 81228a0:	2332      	movs	r3, #50	@ 0x32
 81228a2:	9300      	str	r3, [sp, #0]
 81228a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81228a8:	2200      	movs	r2, #0
 81228aa:	490c      	ldr	r1, [pc, #48]	@ (81228dc <tcpip_init+0x8c>)
 81228ac:	480c      	ldr	r0, [pc, #48]	@ (81228e0 <tcpip_init+0x90>)
 81228ae:	f7f9 fe8b 	bl	811c5c8 <sys_thread_new>
}
 81228b2:	bf00      	nop
 81228b4:	3708      	adds	r7, #8
 81228b6:	46bd      	mov	sp, r7
 81228b8:	bd80      	pop	{r7, pc}
 81228ba:	bf00      	nop
 81228bc:	1000e4e8 	.word	0x1000e4e8
 81228c0:	1000e4ec 	.word	0x1000e4ec
 81228c4:	1000e4f0 	.word	0x1000e4f0
 81228c8:	08127ef4 	.word	0x08127ef4
 81228cc:	08127fc0 	.word	0x08127fc0
 81228d0:	08127f88 	.word	0x08127f88
 81228d4:	1000e4f4 	.word	0x1000e4f4
 81228d8:	08127fe4 	.word	0x08127fe4
 81228dc:	08122695 	.word	0x08122695
 81228e0:	08128008 	.word	0x08128008

081228e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 81228e4:	b580      	push	{r7, lr}
 81228e6:	b082      	sub	sp, #8
 81228e8:	af00      	add	r7, sp, #0
 81228ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 81228ec:	f7f9 fef4 	bl	811c6d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 81228f0:	4b0a      	ldr	r3, [pc, #40]	@ (812291c <tcpip_tcp_timer+0x38>)
 81228f2:	681b      	ldr	r3, [r3, #0]
 81228f4:	2b00      	cmp	r3, #0
 81228f6:	d103      	bne.n	8122900 <tcpip_tcp_timer+0x1c>
 81228f8:	4b09      	ldr	r3, [pc, #36]	@ (8122920 <tcpip_tcp_timer+0x3c>)
 81228fa:	681b      	ldr	r3, [r3, #0]
 81228fc:	2b00      	cmp	r3, #0
 81228fe:	d005      	beq.n	812290c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8122900:	2200      	movs	r2, #0
 8122902:	4908      	ldr	r1, [pc, #32]	@ (8122924 <tcpip_tcp_timer+0x40>)
 8122904:	200a      	movs	r0, #10
 8122906:	f000 f8f3 	bl	8122af0 <sys_timeout>
 812290a:	e003      	b.n	8122914 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 812290c:	4b06      	ldr	r3, [pc, #24]	@ (8122928 <tcpip_tcp_timer+0x44>)
 812290e:	2200      	movs	r2, #0
 8122910:	601a      	str	r2, [r3, #0]
  }
}
 8122912:	bf00      	nop
 8122914:	bf00      	nop
 8122916:	3708      	adds	r7, #8
 8122918:	46bd      	mov	sp, r7
 812291a:	bd80      	pop	{r7, pc}
 812291c:	1000e4a4 	.word	0x1000e4a4
 8122920:	1000e4a8 	.word	0x1000e4a8
 8122924:	081228e5 	.word	0x081228e5
 8122928:	1000e500 	.word	0x1000e500

0812292c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 812292c:	b580      	push	{r7, lr}
 812292e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8122930:	4b0a      	ldr	r3, [pc, #40]	@ (812295c <tcp_timer_needed+0x30>)
 8122932:	681b      	ldr	r3, [r3, #0]
 8122934:	2b00      	cmp	r3, #0
 8122936:	d10f      	bne.n	8122958 <tcp_timer_needed+0x2c>
 8122938:	4b09      	ldr	r3, [pc, #36]	@ (8122960 <tcp_timer_needed+0x34>)
 812293a:	681b      	ldr	r3, [r3, #0]
 812293c:	2b00      	cmp	r3, #0
 812293e:	d103      	bne.n	8122948 <tcp_timer_needed+0x1c>
 8122940:	4b08      	ldr	r3, [pc, #32]	@ (8122964 <tcp_timer_needed+0x38>)
 8122942:	681b      	ldr	r3, [r3, #0]
 8122944:	2b00      	cmp	r3, #0
 8122946:	d007      	beq.n	8122958 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8122948:	4b04      	ldr	r3, [pc, #16]	@ (812295c <tcp_timer_needed+0x30>)
 812294a:	2201      	movs	r2, #1
 812294c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 812294e:	2200      	movs	r2, #0
 8122950:	4905      	ldr	r1, [pc, #20]	@ (8122968 <tcp_timer_needed+0x3c>)
 8122952:	200a      	movs	r0, #10
 8122954:	f000 f8cc 	bl	8122af0 <sys_timeout>
  }
}
 8122958:	bf00      	nop
 812295a:	bd80      	pop	{r7, pc}
 812295c:	1000e500 	.word	0x1000e500
 8122960:	1000e4a4 	.word	0x1000e4a4
 8122964:	1000e4a8 	.word	0x1000e4a8
 8122968:	081228e5 	.word	0x081228e5

0812296c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 812296c:	b580      	push	{r7, lr}
 812296e:	b086      	sub	sp, #24
 8122970:	af00      	add	r7, sp, #0
 8122972:	60f8      	str	r0, [r7, #12]
 8122974:	60b9      	str	r1, [r7, #8]
 8122976:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8122978:	200a      	movs	r0, #10
 812297a:	f7f8 fbaf 	bl	811b0dc <memp_malloc>
 812297e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8122980:	693b      	ldr	r3, [r7, #16]
 8122982:	2b00      	cmp	r3, #0
 8122984:	d109      	bne.n	812299a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8122986:	693b      	ldr	r3, [r7, #16]
 8122988:	2b00      	cmp	r3, #0
 812298a:	d151      	bne.n	8122a30 <sys_timeout_abs+0xc4>
 812298c:	4b2a      	ldr	r3, [pc, #168]	@ (8122a38 <sys_timeout_abs+0xcc>)
 812298e:	22be      	movs	r2, #190	@ 0xbe
 8122990:	492a      	ldr	r1, [pc, #168]	@ (8122a3c <sys_timeout_abs+0xd0>)
 8122992:	482b      	ldr	r0, [pc, #172]	@ (8122a40 <sys_timeout_abs+0xd4>)
 8122994:	f001 fe62 	bl	812465c <iprintf>
    return;
 8122998:	e04a      	b.n	8122a30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 812299a:	693b      	ldr	r3, [r7, #16]
 812299c:	2200      	movs	r2, #0
 812299e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 81229a0:	693b      	ldr	r3, [r7, #16]
 81229a2:	68ba      	ldr	r2, [r7, #8]
 81229a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 81229a6:	693b      	ldr	r3, [r7, #16]
 81229a8:	687a      	ldr	r2, [r7, #4]
 81229aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 81229ac:	693b      	ldr	r3, [r7, #16]
 81229ae:	68fa      	ldr	r2, [r7, #12]
 81229b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 81229b2:	4b24      	ldr	r3, [pc, #144]	@ (8122a44 <sys_timeout_abs+0xd8>)
 81229b4:	681b      	ldr	r3, [r3, #0]
 81229b6:	2b00      	cmp	r3, #0
 81229b8:	d103      	bne.n	81229c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 81229ba:	4a22      	ldr	r2, [pc, #136]	@ (8122a44 <sys_timeout_abs+0xd8>)
 81229bc:	693b      	ldr	r3, [r7, #16]
 81229be:	6013      	str	r3, [r2, #0]
    return;
 81229c0:	e037      	b.n	8122a32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 81229c2:	693b      	ldr	r3, [r7, #16]
 81229c4:	685a      	ldr	r2, [r3, #4]
 81229c6:	4b1f      	ldr	r3, [pc, #124]	@ (8122a44 <sys_timeout_abs+0xd8>)
 81229c8:	681b      	ldr	r3, [r3, #0]
 81229ca:	685b      	ldr	r3, [r3, #4]
 81229cc:	1ad3      	subs	r3, r2, r3
 81229ce:	0fdb      	lsrs	r3, r3, #31
 81229d0:	f003 0301 	and.w	r3, r3, #1
 81229d4:	b2db      	uxtb	r3, r3
 81229d6:	2b00      	cmp	r3, #0
 81229d8:	d007      	beq.n	81229ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 81229da:	4b1a      	ldr	r3, [pc, #104]	@ (8122a44 <sys_timeout_abs+0xd8>)
 81229dc:	681a      	ldr	r2, [r3, #0]
 81229de:	693b      	ldr	r3, [r7, #16]
 81229e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 81229e2:	4a18      	ldr	r2, [pc, #96]	@ (8122a44 <sys_timeout_abs+0xd8>)
 81229e4:	693b      	ldr	r3, [r7, #16]
 81229e6:	6013      	str	r3, [r2, #0]
 81229e8:	e023      	b.n	8122a32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 81229ea:	4b16      	ldr	r3, [pc, #88]	@ (8122a44 <sys_timeout_abs+0xd8>)
 81229ec:	681b      	ldr	r3, [r3, #0]
 81229ee:	617b      	str	r3, [r7, #20]
 81229f0:	e01a      	b.n	8122a28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 81229f2:	697b      	ldr	r3, [r7, #20]
 81229f4:	681b      	ldr	r3, [r3, #0]
 81229f6:	2b00      	cmp	r3, #0
 81229f8:	d00b      	beq.n	8122a12 <sys_timeout_abs+0xa6>
 81229fa:	693b      	ldr	r3, [r7, #16]
 81229fc:	685a      	ldr	r2, [r3, #4]
 81229fe:	697b      	ldr	r3, [r7, #20]
 8122a00:	681b      	ldr	r3, [r3, #0]
 8122a02:	685b      	ldr	r3, [r3, #4]
 8122a04:	1ad3      	subs	r3, r2, r3
 8122a06:	0fdb      	lsrs	r3, r3, #31
 8122a08:	f003 0301 	and.w	r3, r3, #1
 8122a0c:	b2db      	uxtb	r3, r3
 8122a0e:	2b00      	cmp	r3, #0
 8122a10:	d007      	beq.n	8122a22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8122a12:	697b      	ldr	r3, [r7, #20]
 8122a14:	681a      	ldr	r2, [r3, #0]
 8122a16:	693b      	ldr	r3, [r7, #16]
 8122a18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8122a1a:	697b      	ldr	r3, [r7, #20]
 8122a1c:	693a      	ldr	r2, [r7, #16]
 8122a1e:	601a      	str	r2, [r3, #0]
        break;
 8122a20:	e007      	b.n	8122a32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8122a22:	697b      	ldr	r3, [r7, #20]
 8122a24:	681b      	ldr	r3, [r3, #0]
 8122a26:	617b      	str	r3, [r7, #20]
 8122a28:	697b      	ldr	r3, [r7, #20]
 8122a2a:	2b00      	cmp	r3, #0
 8122a2c:	d1e1      	bne.n	81229f2 <sys_timeout_abs+0x86>
 8122a2e:	e000      	b.n	8122a32 <sys_timeout_abs+0xc6>
    return;
 8122a30:	bf00      	nop
      }
    }
  }
}
 8122a32:	3718      	adds	r7, #24
 8122a34:	46bd      	mov	sp, r7
 8122a36:	bd80      	pop	{r7, pc}
 8122a38:	08128018 	.word	0x08128018
 8122a3c:	08128090 	.word	0x08128090
 8122a40:	081280d0 	.word	0x081280d0
 8122a44:	1000e4f8 	.word	0x1000e4f8

08122a48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8122a48:	b580      	push	{r7, lr}
 8122a4a:	b086      	sub	sp, #24
 8122a4c:	af00      	add	r7, sp, #0
 8122a4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8122a50:	687b      	ldr	r3, [r7, #4]
 8122a52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8122a54:	697b      	ldr	r3, [r7, #20]
 8122a56:	685b      	ldr	r3, [r3, #4]
 8122a58:	4798      	blx	r3

  now = sys_now();
 8122a5a:	f7e7 f929 	bl	8109cb0 <sys_now>
 8122a5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8122a60:	697b      	ldr	r3, [r7, #20]
 8122a62:	681a      	ldr	r2, [r3, #0]
 8122a64:	4b0f      	ldr	r3, [pc, #60]	@ (8122aa4 <lwip_cyclic_timer+0x5c>)
 8122a66:	681b      	ldr	r3, [r3, #0]
 8122a68:	4413      	add	r3, r2
 8122a6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8122a6c:	68fa      	ldr	r2, [r7, #12]
 8122a6e:	693b      	ldr	r3, [r7, #16]
 8122a70:	1ad3      	subs	r3, r2, r3
 8122a72:	0fdb      	lsrs	r3, r3, #31
 8122a74:	f003 0301 	and.w	r3, r3, #1
 8122a78:	b2db      	uxtb	r3, r3
 8122a7a:	2b00      	cmp	r3, #0
 8122a7c:	d009      	beq.n	8122a92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8122a7e:	697b      	ldr	r3, [r7, #20]
 8122a80:	681a      	ldr	r2, [r3, #0]
 8122a82:	693b      	ldr	r3, [r7, #16]
 8122a84:	4413      	add	r3, r2
 8122a86:	687a      	ldr	r2, [r7, #4]
 8122a88:	4907      	ldr	r1, [pc, #28]	@ (8122aa8 <lwip_cyclic_timer+0x60>)
 8122a8a:	4618      	mov	r0, r3
 8122a8c:	f7ff ff6e 	bl	812296c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8122a90:	e004      	b.n	8122a9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8122a92:	687a      	ldr	r2, [r7, #4]
 8122a94:	4904      	ldr	r1, [pc, #16]	@ (8122aa8 <lwip_cyclic_timer+0x60>)
 8122a96:	68f8      	ldr	r0, [r7, #12]
 8122a98:	f7ff ff68 	bl	812296c <sys_timeout_abs>
}
 8122a9c:	bf00      	nop
 8122a9e:	3718      	adds	r7, #24
 8122aa0:	46bd      	mov	sp, r7
 8122aa2:	bd80      	pop	{r7, pc}
 8122aa4:	1000e4fc 	.word	0x1000e4fc
 8122aa8:	08122a49 	.word	0x08122a49

08122aac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8122aac:	b580      	push	{r7, lr}
 8122aae:	b082      	sub	sp, #8
 8122ab0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8122ab2:	2301      	movs	r3, #1
 8122ab4:	607b      	str	r3, [r7, #4]
 8122ab6:	e00e      	b.n	8122ad6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8122ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8122ae8 <sys_timeouts_init+0x3c>)
 8122aba:	687b      	ldr	r3, [r7, #4]
 8122abc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8122ac0:	687b      	ldr	r3, [r7, #4]
 8122ac2:	00db      	lsls	r3, r3, #3
 8122ac4:	4a08      	ldr	r2, [pc, #32]	@ (8122ae8 <sys_timeouts_init+0x3c>)
 8122ac6:	4413      	add	r3, r2
 8122ac8:	461a      	mov	r2, r3
 8122aca:	4908      	ldr	r1, [pc, #32]	@ (8122aec <sys_timeouts_init+0x40>)
 8122acc:	f000 f810 	bl	8122af0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8122ad0:	687b      	ldr	r3, [r7, #4]
 8122ad2:	3301      	adds	r3, #1
 8122ad4:	607b      	str	r3, [r7, #4]
 8122ad6:	687b      	ldr	r3, [r7, #4]
 8122ad8:	2b02      	cmp	r3, #2
 8122ada:	d9ed      	bls.n	8122ab8 <sys_timeouts_init+0xc>
  }
}
 8122adc:	bf00      	nop
 8122ade:	bf00      	nop
 8122ae0:	3708      	adds	r7, #8
 8122ae2:	46bd      	mov	sp, r7
 8122ae4:	bd80      	pop	{r7, pc}
 8122ae6:	bf00      	nop
 8122ae8:	081286e4 	.word	0x081286e4
 8122aec:	08122a49 	.word	0x08122a49

08122af0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8122af0:	b580      	push	{r7, lr}
 8122af2:	b086      	sub	sp, #24
 8122af4:	af00      	add	r7, sp, #0
 8122af6:	60f8      	str	r0, [r7, #12]
 8122af8:	60b9      	str	r1, [r7, #8]
 8122afa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8122afc:	68fb      	ldr	r3, [r7, #12]
 8122afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8122b02:	d306      	bcc.n	8122b12 <sys_timeout+0x22>
 8122b04:	4b0a      	ldr	r3, [pc, #40]	@ (8122b30 <sys_timeout+0x40>)
 8122b06:	f240 1229 	movw	r2, #297	@ 0x129
 8122b0a:	490a      	ldr	r1, [pc, #40]	@ (8122b34 <sys_timeout+0x44>)
 8122b0c:	480a      	ldr	r0, [pc, #40]	@ (8122b38 <sys_timeout+0x48>)
 8122b0e:	f001 fda5 	bl	812465c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8122b12:	f7e7 f8cd 	bl	8109cb0 <sys_now>
 8122b16:	4602      	mov	r2, r0
 8122b18:	68fb      	ldr	r3, [r7, #12]
 8122b1a:	4413      	add	r3, r2
 8122b1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8122b1e:	687a      	ldr	r2, [r7, #4]
 8122b20:	68b9      	ldr	r1, [r7, #8]
 8122b22:	6978      	ldr	r0, [r7, #20]
 8122b24:	f7ff ff22 	bl	812296c <sys_timeout_abs>
#endif
}
 8122b28:	bf00      	nop
 8122b2a:	3718      	adds	r7, #24
 8122b2c:	46bd      	mov	sp, r7
 8122b2e:	bd80      	pop	{r7, pc}
 8122b30:	08128018 	.word	0x08128018
 8122b34:	081280f8 	.word	0x081280f8
 8122b38:	081280d0 	.word	0x081280d0

08122b3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8122b3c:	b580      	push	{r7, lr}
 8122b3e:	b084      	sub	sp, #16
 8122b40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8122b42:	f7e7 f8b5 	bl	8109cb0 <sys_now>
 8122b46:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8122b48:	4b17      	ldr	r3, [pc, #92]	@ (8122ba8 <sys_check_timeouts+0x6c>)
 8122b4a:	681b      	ldr	r3, [r3, #0]
 8122b4c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8122b4e:	68bb      	ldr	r3, [r7, #8]
 8122b50:	2b00      	cmp	r3, #0
 8122b52:	d022      	beq.n	8122b9a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8122b54:	68bb      	ldr	r3, [r7, #8]
 8122b56:	685b      	ldr	r3, [r3, #4]
 8122b58:	68fa      	ldr	r2, [r7, #12]
 8122b5a:	1ad3      	subs	r3, r2, r3
 8122b5c:	0fdb      	lsrs	r3, r3, #31
 8122b5e:	f003 0301 	and.w	r3, r3, #1
 8122b62:	b2db      	uxtb	r3, r3
 8122b64:	2b00      	cmp	r3, #0
 8122b66:	d11a      	bne.n	8122b9e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8122b68:	68bb      	ldr	r3, [r7, #8]
 8122b6a:	681b      	ldr	r3, [r3, #0]
 8122b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8122ba8 <sys_check_timeouts+0x6c>)
 8122b6e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8122b70:	68bb      	ldr	r3, [r7, #8]
 8122b72:	689b      	ldr	r3, [r3, #8]
 8122b74:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8122b76:	68bb      	ldr	r3, [r7, #8]
 8122b78:	68db      	ldr	r3, [r3, #12]
 8122b7a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8122b7c:	68bb      	ldr	r3, [r7, #8]
 8122b7e:	685b      	ldr	r3, [r3, #4]
 8122b80:	4a0a      	ldr	r2, [pc, #40]	@ (8122bac <sys_check_timeouts+0x70>)
 8122b82:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8122b84:	68b9      	ldr	r1, [r7, #8]
 8122b86:	200a      	movs	r0, #10
 8122b88:	f7f8 fb1e 	bl	811b1c8 <memp_free>
    if (handler != NULL) {
 8122b8c:	687b      	ldr	r3, [r7, #4]
 8122b8e:	2b00      	cmp	r3, #0
 8122b90:	d0da      	beq.n	8122b48 <sys_check_timeouts+0xc>
      handler(arg);
 8122b92:	687b      	ldr	r3, [r7, #4]
 8122b94:	6838      	ldr	r0, [r7, #0]
 8122b96:	4798      	blx	r3
  do {
 8122b98:	e7d6      	b.n	8122b48 <sys_check_timeouts+0xc>
      return;
 8122b9a:	bf00      	nop
 8122b9c:	e000      	b.n	8122ba0 <sys_check_timeouts+0x64>
      return;
 8122b9e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8122ba0:	3710      	adds	r7, #16
 8122ba2:	46bd      	mov	sp, r7
 8122ba4:	bd80      	pop	{r7, pc}
 8122ba6:	bf00      	nop
 8122ba8:	1000e4f8 	.word	0x1000e4f8
 8122bac:	1000e4fc 	.word	0x1000e4fc

08122bb0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8122bb0:	b580      	push	{r7, lr}
 8122bb2:	b082      	sub	sp, #8
 8122bb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8122bb6:	4b16      	ldr	r3, [pc, #88]	@ (8122c10 <sys_timeouts_sleeptime+0x60>)
 8122bb8:	681b      	ldr	r3, [r3, #0]
 8122bba:	2b00      	cmp	r3, #0
 8122bbc:	d102      	bne.n	8122bc4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8122bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8122bc2:	e020      	b.n	8122c06 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8122bc4:	f7e7 f874 	bl	8109cb0 <sys_now>
 8122bc8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8122bca:	4b11      	ldr	r3, [pc, #68]	@ (8122c10 <sys_timeouts_sleeptime+0x60>)
 8122bcc:	681b      	ldr	r3, [r3, #0]
 8122bce:	685a      	ldr	r2, [r3, #4]
 8122bd0:	687b      	ldr	r3, [r7, #4]
 8122bd2:	1ad3      	subs	r3, r2, r3
 8122bd4:	0fdb      	lsrs	r3, r3, #31
 8122bd6:	f003 0301 	and.w	r3, r3, #1
 8122bda:	b2db      	uxtb	r3, r3
 8122bdc:	2b00      	cmp	r3, #0
 8122bde:	d001      	beq.n	8122be4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8122be0:	2300      	movs	r3, #0
 8122be2:	e010      	b.n	8122c06 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8122be4:	4b0a      	ldr	r3, [pc, #40]	@ (8122c10 <sys_timeouts_sleeptime+0x60>)
 8122be6:	681b      	ldr	r3, [r3, #0]
 8122be8:	685a      	ldr	r2, [r3, #4]
 8122bea:	687b      	ldr	r3, [r7, #4]
 8122bec:	1ad3      	subs	r3, r2, r3
 8122bee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8122bf0:	683b      	ldr	r3, [r7, #0]
 8122bf2:	2b00      	cmp	r3, #0
 8122bf4:	da06      	bge.n	8122c04 <sys_timeouts_sleeptime+0x54>
 8122bf6:	4b07      	ldr	r3, [pc, #28]	@ (8122c14 <sys_timeouts_sleeptime+0x64>)
 8122bf8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8122bfc:	4906      	ldr	r1, [pc, #24]	@ (8122c18 <sys_timeouts_sleeptime+0x68>)
 8122bfe:	4807      	ldr	r0, [pc, #28]	@ (8122c1c <sys_timeouts_sleeptime+0x6c>)
 8122c00:	f001 fd2c 	bl	812465c <iprintf>
    return ret;
 8122c04:	683b      	ldr	r3, [r7, #0]
  }
}
 8122c06:	4618      	mov	r0, r3
 8122c08:	3708      	adds	r7, #8
 8122c0a:	46bd      	mov	sp, r7
 8122c0c:	bd80      	pop	{r7, pc}
 8122c0e:	bf00      	nop
 8122c10:	1000e4f8 	.word	0x1000e4f8
 8122c14:	08128018 	.word	0x08128018
 8122c18:	08128130 	.word	0x08128130
 8122c1c:	081280d0 	.word	0x081280d0

08122c20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8122c20:	b580      	push	{r7, lr}
 8122c22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8122c24:	f000 ffa2 	bl	8123b6c <rand>
 8122c28:	4603      	mov	r3, r0
 8122c2a:	b29b      	uxth	r3, r3
 8122c2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8122c30:	b29b      	uxth	r3, r3
 8122c32:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8122c36:	b29a      	uxth	r2, r3
 8122c38:	4b01      	ldr	r3, [pc, #4]	@ (8122c40 <udp_init+0x20>)
 8122c3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8122c3c:	bf00      	nop
 8122c3e:	bd80      	pop	{r7, pc}
 8122c40:	10000030 	.word	0x10000030

08122c44 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8122c44:	b480      	push	{r7}
 8122c46:	b083      	sub	sp, #12
 8122c48:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8122c4a:	2300      	movs	r3, #0
 8122c4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8122c4e:	4b17      	ldr	r3, [pc, #92]	@ (8122cac <udp_new_port+0x68>)
 8122c50:	881b      	ldrh	r3, [r3, #0]
 8122c52:	1c5a      	adds	r2, r3, #1
 8122c54:	b291      	uxth	r1, r2
 8122c56:	4a15      	ldr	r2, [pc, #84]	@ (8122cac <udp_new_port+0x68>)
 8122c58:	8011      	strh	r1, [r2, #0]
 8122c5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8122c5e:	4293      	cmp	r3, r2
 8122c60:	d103      	bne.n	8122c6a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8122c62:	4b12      	ldr	r3, [pc, #72]	@ (8122cac <udp_new_port+0x68>)
 8122c64:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8122c68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8122c6a:	4b11      	ldr	r3, [pc, #68]	@ (8122cb0 <udp_new_port+0x6c>)
 8122c6c:	681b      	ldr	r3, [r3, #0]
 8122c6e:	603b      	str	r3, [r7, #0]
 8122c70:	e011      	b.n	8122c96 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8122c72:	683b      	ldr	r3, [r7, #0]
 8122c74:	8a5a      	ldrh	r2, [r3, #18]
 8122c76:	4b0d      	ldr	r3, [pc, #52]	@ (8122cac <udp_new_port+0x68>)
 8122c78:	881b      	ldrh	r3, [r3, #0]
 8122c7a:	429a      	cmp	r2, r3
 8122c7c:	d108      	bne.n	8122c90 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8122c7e:	88fb      	ldrh	r3, [r7, #6]
 8122c80:	3301      	adds	r3, #1
 8122c82:	80fb      	strh	r3, [r7, #6]
 8122c84:	88fb      	ldrh	r3, [r7, #6]
 8122c86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8122c8a:	d3e0      	bcc.n	8122c4e <udp_new_port+0xa>
        return 0;
 8122c8c:	2300      	movs	r3, #0
 8122c8e:	e007      	b.n	8122ca0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8122c90:	683b      	ldr	r3, [r7, #0]
 8122c92:	68db      	ldr	r3, [r3, #12]
 8122c94:	603b      	str	r3, [r7, #0]
 8122c96:	683b      	ldr	r3, [r7, #0]
 8122c98:	2b00      	cmp	r3, #0
 8122c9a:	d1ea      	bne.n	8122c72 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8122c9c:	4b03      	ldr	r3, [pc, #12]	@ (8122cac <udp_new_port+0x68>)
 8122c9e:	881b      	ldrh	r3, [r3, #0]
}
 8122ca0:	4618      	mov	r0, r3
 8122ca2:	370c      	adds	r7, #12
 8122ca4:	46bd      	mov	sp, r7
 8122ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8122caa:	4770      	bx	lr
 8122cac:	10000030 	.word	0x10000030
 8122cb0:	1000e504 	.word	0x1000e504

08122cb4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8122cb4:	b580      	push	{r7, lr}
 8122cb6:	b084      	sub	sp, #16
 8122cb8:	af00      	add	r7, sp, #0
 8122cba:	60f8      	str	r0, [r7, #12]
 8122cbc:	60b9      	str	r1, [r7, #8]
 8122cbe:	4613      	mov	r3, r2
 8122cc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8122cc2:	68fb      	ldr	r3, [r7, #12]
 8122cc4:	2b00      	cmp	r3, #0
 8122cc6:	d105      	bne.n	8122cd4 <udp_input_local_match+0x20>
 8122cc8:	4b27      	ldr	r3, [pc, #156]	@ (8122d68 <udp_input_local_match+0xb4>)
 8122cca:	2287      	movs	r2, #135	@ 0x87
 8122ccc:	4927      	ldr	r1, [pc, #156]	@ (8122d6c <udp_input_local_match+0xb8>)
 8122cce:	4828      	ldr	r0, [pc, #160]	@ (8122d70 <udp_input_local_match+0xbc>)
 8122cd0:	f001 fcc4 	bl	812465c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8122cd4:	68bb      	ldr	r3, [r7, #8]
 8122cd6:	2b00      	cmp	r3, #0
 8122cd8:	d105      	bne.n	8122ce6 <udp_input_local_match+0x32>
 8122cda:	4b23      	ldr	r3, [pc, #140]	@ (8122d68 <udp_input_local_match+0xb4>)
 8122cdc:	2288      	movs	r2, #136	@ 0x88
 8122cde:	4925      	ldr	r1, [pc, #148]	@ (8122d74 <udp_input_local_match+0xc0>)
 8122ce0:	4823      	ldr	r0, [pc, #140]	@ (8122d70 <udp_input_local_match+0xbc>)
 8122ce2:	f001 fcbb 	bl	812465c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8122ce6:	68fb      	ldr	r3, [r7, #12]
 8122ce8:	7a1b      	ldrb	r3, [r3, #8]
 8122cea:	2b00      	cmp	r3, #0
 8122cec:	d00b      	beq.n	8122d06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8122cee:	68fb      	ldr	r3, [r7, #12]
 8122cf0:	7a1a      	ldrb	r2, [r3, #8]
 8122cf2:	4b21      	ldr	r3, [pc, #132]	@ (8122d78 <udp_input_local_match+0xc4>)
 8122cf4:	685b      	ldr	r3, [r3, #4]
 8122cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8122cfa:	3301      	adds	r3, #1
 8122cfc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8122cfe:	429a      	cmp	r2, r3
 8122d00:	d001      	beq.n	8122d06 <udp_input_local_match+0x52>
    return 0;
 8122d02:	2300      	movs	r3, #0
 8122d04:	e02b      	b.n	8122d5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8122d06:	79fb      	ldrb	r3, [r7, #7]
 8122d08:	2b00      	cmp	r3, #0
 8122d0a:	d018      	beq.n	8122d3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8122d0c:	68fb      	ldr	r3, [r7, #12]
 8122d0e:	2b00      	cmp	r3, #0
 8122d10:	d013      	beq.n	8122d3a <udp_input_local_match+0x86>
 8122d12:	68fb      	ldr	r3, [r7, #12]
 8122d14:	681b      	ldr	r3, [r3, #0]
 8122d16:	2b00      	cmp	r3, #0
 8122d18:	d00f      	beq.n	8122d3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8122d1a:	4b17      	ldr	r3, [pc, #92]	@ (8122d78 <udp_input_local_match+0xc4>)
 8122d1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8122d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8122d22:	d00a      	beq.n	8122d3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8122d24:	68fb      	ldr	r3, [r7, #12]
 8122d26:	681a      	ldr	r2, [r3, #0]
 8122d28:	4b13      	ldr	r3, [pc, #76]	@ (8122d78 <udp_input_local_match+0xc4>)
 8122d2a:	695b      	ldr	r3, [r3, #20]
 8122d2c:	405a      	eors	r2, r3
 8122d2e:	68bb      	ldr	r3, [r7, #8]
 8122d30:	3308      	adds	r3, #8
 8122d32:	681b      	ldr	r3, [r3, #0]
 8122d34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8122d36:	2b00      	cmp	r3, #0
 8122d38:	d110      	bne.n	8122d5c <udp_input_local_match+0xa8>
          return 1;
 8122d3a:	2301      	movs	r3, #1
 8122d3c:	e00f      	b.n	8122d5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8122d3e:	68fb      	ldr	r3, [r7, #12]
 8122d40:	2b00      	cmp	r3, #0
 8122d42:	d009      	beq.n	8122d58 <udp_input_local_match+0xa4>
 8122d44:	68fb      	ldr	r3, [r7, #12]
 8122d46:	681b      	ldr	r3, [r3, #0]
 8122d48:	2b00      	cmp	r3, #0
 8122d4a:	d005      	beq.n	8122d58 <udp_input_local_match+0xa4>
 8122d4c:	68fb      	ldr	r3, [r7, #12]
 8122d4e:	681a      	ldr	r2, [r3, #0]
 8122d50:	4b09      	ldr	r3, [pc, #36]	@ (8122d78 <udp_input_local_match+0xc4>)
 8122d52:	695b      	ldr	r3, [r3, #20]
 8122d54:	429a      	cmp	r2, r3
 8122d56:	d101      	bne.n	8122d5c <udp_input_local_match+0xa8>
        return 1;
 8122d58:	2301      	movs	r3, #1
 8122d5a:	e000      	b.n	8122d5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8122d5c:	2300      	movs	r3, #0
}
 8122d5e:	4618      	mov	r0, r3
 8122d60:	3710      	adds	r7, #16
 8122d62:	46bd      	mov	sp, r7
 8122d64:	bd80      	pop	{r7, pc}
 8122d66:	bf00      	nop
 8122d68:	08128144 	.word	0x08128144
 8122d6c:	081281b8 	.word	0x081281b8
 8122d70:	081281dc 	.word	0x081281dc
 8122d74:	08128204 	.word	0x08128204
 8122d78:	1000b300 	.word	0x1000b300

08122d7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8122d7c:	b590      	push	{r4, r7, lr}
 8122d7e:	b08d      	sub	sp, #52	@ 0x34
 8122d80:	af02      	add	r7, sp, #8
 8122d82:	6078      	str	r0, [r7, #4]
 8122d84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8122d86:	2300      	movs	r3, #0
 8122d88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8122d8a:	687b      	ldr	r3, [r7, #4]
 8122d8c:	2b00      	cmp	r3, #0
 8122d8e:	d105      	bne.n	8122d9c <udp_input+0x20>
 8122d90:	4b7c      	ldr	r3, [pc, #496]	@ (8122f84 <udp_input+0x208>)
 8122d92:	22cf      	movs	r2, #207	@ 0xcf
 8122d94:	497c      	ldr	r1, [pc, #496]	@ (8122f88 <udp_input+0x20c>)
 8122d96:	487d      	ldr	r0, [pc, #500]	@ (8122f8c <udp_input+0x210>)
 8122d98:	f001 fc60 	bl	812465c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8122d9c:	683b      	ldr	r3, [r7, #0]
 8122d9e:	2b00      	cmp	r3, #0
 8122da0:	d105      	bne.n	8122dae <udp_input+0x32>
 8122da2:	4b78      	ldr	r3, [pc, #480]	@ (8122f84 <udp_input+0x208>)
 8122da4:	22d0      	movs	r2, #208	@ 0xd0
 8122da6:	497a      	ldr	r1, [pc, #488]	@ (8122f90 <udp_input+0x214>)
 8122da8:	4878      	ldr	r0, [pc, #480]	@ (8122f8c <udp_input+0x210>)
 8122daa:	f001 fc57 	bl	812465c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8122dae:	687b      	ldr	r3, [r7, #4]
 8122db0:	895b      	ldrh	r3, [r3, #10]
 8122db2:	2b07      	cmp	r3, #7
 8122db4:	d803      	bhi.n	8122dbe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8122db6:	6878      	ldr	r0, [r7, #4]
 8122db8:	f7f9 f8a8 	bl	811bf0c <pbuf_free>
    goto end;
 8122dbc:	e0de      	b.n	8122f7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8122dbe:	687b      	ldr	r3, [r7, #4]
 8122dc0:	685b      	ldr	r3, [r3, #4]
 8122dc2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8122dc4:	4b73      	ldr	r3, [pc, #460]	@ (8122f94 <udp_input+0x218>)
 8122dc6:	695b      	ldr	r3, [r3, #20]
 8122dc8:	4a72      	ldr	r2, [pc, #456]	@ (8122f94 <udp_input+0x218>)
 8122dca:	6812      	ldr	r2, [r2, #0]
 8122dcc:	4611      	mov	r1, r2
 8122dce:	4618      	mov	r0, r3
 8122dd0:	f7f6 fccc 	bl	811976c <ip4_addr_isbroadcast_u32>
 8122dd4:	4603      	mov	r3, r0
 8122dd6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8122dd8:	697b      	ldr	r3, [r7, #20]
 8122dda:	881b      	ldrh	r3, [r3, #0]
 8122ddc:	b29b      	uxth	r3, r3
 8122dde:	4618      	mov	r0, r3
 8122de0:	f7f4 fe8c 	bl	8117afc <lwip_htons>
 8122de4:	4603      	mov	r3, r0
 8122de6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8122de8:	697b      	ldr	r3, [r7, #20]
 8122dea:	885b      	ldrh	r3, [r3, #2]
 8122dec:	b29b      	uxth	r3, r3
 8122dee:	4618      	mov	r0, r3
 8122df0:	f7f4 fe84 	bl	8117afc <lwip_htons>
 8122df4:	4603      	mov	r3, r0
 8122df6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8122df8:	2300      	movs	r3, #0
 8122dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8122dfc:	2300      	movs	r3, #0
 8122dfe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8122e00:	2300      	movs	r3, #0
 8122e02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8122e04:	4b64      	ldr	r3, [pc, #400]	@ (8122f98 <udp_input+0x21c>)
 8122e06:	681b      	ldr	r3, [r3, #0]
 8122e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8122e0a:	e054      	b.n	8122eb6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8122e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e0e:	8a5b      	ldrh	r3, [r3, #18]
 8122e10:	89fa      	ldrh	r2, [r7, #14]
 8122e12:	429a      	cmp	r2, r3
 8122e14:	d14a      	bne.n	8122eac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8122e16:	7cfb      	ldrb	r3, [r7, #19]
 8122e18:	461a      	mov	r2, r3
 8122e1a:	6839      	ldr	r1, [r7, #0]
 8122e1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8122e1e:	f7ff ff49 	bl	8122cb4 <udp_input_local_match>
 8122e22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8122e24:	2b00      	cmp	r3, #0
 8122e26:	d041      	beq.n	8122eac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8122e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e2a:	7c1b      	ldrb	r3, [r3, #16]
 8122e2c:	f003 0304 	and.w	r3, r3, #4
 8122e30:	2b00      	cmp	r3, #0
 8122e32:	d11d      	bne.n	8122e70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8122e34:	69fb      	ldr	r3, [r7, #28]
 8122e36:	2b00      	cmp	r3, #0
 8122e38:	d102      	bne.n	8122e40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8122e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e3c:	61fb      	str	r3, [r7, #28]
 8122e3e:	e017      	b.n	8122e70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8122e40:	7cfb      	ldrb	r3, [r7, #19]
 8122e42:	2b00      	cmp	r3, #0
 8122e44:	d014      	beq.n	8122e70 <udp_input+0xf4>
 8122e46:	4b53      	ldr	r3, [pc, #332]	@ (8122f94 <udp_input+0x218>)
 8122e48:	695b      	ldr	r3, [r3, #20]
 8122e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8122e4e:	d10f      	bne.n	8122e70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8122e50:	69fb      	ldr	r3, [r7, #28]
 8122e52:	681a      	ldr	r2, [r3, #0]
 8122e54:	683b      	ldr	r3, [r7, #0]
 8122e56:	3304      	adds	r3, #4
 8122e58:	681b      	ldr	r3, [r3, #0]
 8122e5a:	429a      	cmp	r2, r3
 8122e5c:	d008      	beq.n	8122e70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8122e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e60:	681a      	ldr	r2, [r3, #0]
 8122e62:	683b      	ldr	r3, [r7, #0]
 8122e64:	3304      	adds	r3, #4
 8122e66:	681b      	ldr	r3, [r3, #0]
 8122e68:	429a      	cmp	r2, r3
 8122e6a:	d101      	bne.n	8122e70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8122e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8122e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e72:	8a9b      	ldrh	r3, [r3, #20]
 8122e74:	8a3a      	ldrh	r2, [r7, #16]
 8122e76:	429a      	cmp	r2, r3
 8122e78:	d118      	bne.n	8122eac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8122e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8122e7e:	2b00      	cmp	r3, #0
 8122e80:	d005      	beq.n	8122e8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8122e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e84:	685a      	ldr	r2, [r3, #4]
 8122e86:	4b43      	ldr	r3, [pc, #268]	@ (8122f94 <udp_input+0x218>)
 8122e88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8122e8a:	429a      	cmp	r2, r3
 8122e8c:	d10e      	bne.n	8122eac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8122e8e:	6a3b      	ldr	r3, [r7, #32]
 8122e90:	2b00      	cmp	r3, #0
 8122e92:	d014      	beq.n	8122ebe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8122e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122e96:	68da      	ldr	r2, [r3, #12]
 8122e98:	6a3b      	ldr	r3, [r7, #32]
 8122e9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8122e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8122f98 <udp_input+0x21c>)
 8122e9e:	681a      	ldr	r2, [r3, #0]
 8122ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122ea2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8122ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8122f98 <udp_input+0x21c>)
 8122ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122ea8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8122eaa:	e008      	b.n	8122ebe <udp_input+0x142>
      }
    }

    prev = pcb;
 8122eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122eae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8122eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122eb2:	68db      	ldr	r3, [r3, #12]
 8122eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8122eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122eb8:	2b00      	cmp	r3, #0
 8122eba:	d1a7      	bne.n	8122e0c <udp_input+0x90>
 8122ebc:	e000      	b.n	8122ec0 <udp_input+0x144>
        break;
 8122ebe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8122ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122ec2:	2b00      	cmp	r3, #0
 8122ec4:	d101      	bne.n	8122eca <udp_input+0x14e>
    pcb = uncon_pcb;
 8122ec6:	69fb      	ldr	r3, [r7, #28]
 8122ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8122eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122ecc:	2b00      	cmp	r3, #0
 8122ece:	d002      	beq.n	8122ed6 <udp_input+0x15a>
    for_us = 1;
 8122ed0:	2301      	movs	r3, #1
 8122ed2:	76fb      	strb	r3, [r7, #27]
 8122ed4:	e00a      	b.n	8122eec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8122ed6:	683b      	ldr	r3, [r7, #0]
 8122ed8:	3304      	adds	r3, #4
 8122eda:	681a      	ldr	r2, [r3, #0]
 8122edc:	4b2d      	ldr	r3, [pc, #180]	@ (8122f94 <udp_input+0x218>)
 8122ede:	695b      	ldr	r3, [r3, #20]
 8122ee0:	429a      	cmp	r2, r3
 8122ee2:	bf0c      	ite	eq
 8122ee4:	2301      	moveq	r3, #1
 8122ee6:	2300      	movne	r3, #0
 8122ee8:	b2db      	uxtb	r3, r3
 8122eea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8122eec:	7efb      	ldrb	r3, [r7, #27]
 8122eee:	2b00      	cmp	r3, #0
 8122ef0:	d041      	beq.n	8122f76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8122ef2:	2108      	movs	r1, #8
 8122ef4:	6878      	ldr	r0, [r7, #4]
 8122ef6:	f7f8 ff83 	bl	811be00 <pbuf_remove_header>
 8122efa:	4603      	mov	r3, r0
 8122efc:	2b00      	cmp	r3, #0
 8122efe:	d00a      	beq.n	8122f16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8122f00:	4b20      	ldr	r3, [pc, #128]	@ (8122f84 <udp_input+0x208>)
 8122f02:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8122f06:	4925      	ldr	r1, [pc, #148]	@ (8122f9c <udp_input+0x220>)
 8122f08:	4820      	ldr	r0, [pc, #128]	@ (8122f8c <udp_input+0x210>)
 8122f0a:	f001 fba7 	bl	812465c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8122f0e:	6878      	ldr	r0, [r7, #4]
 8122f10:	f7f8 fffc 	bl	811bf0c <pbuf_free>
      goto end;
 8122f14:	e032      	b.n	8122f7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8122f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122f18:	2b00      	cmp	r3, #0
 8122f1a:	d012      	beq.n	8122f42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8122f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122f1e:	699b      	ldr	r3, [r3, #24]
 8122f20:	2b00      	cmp	r3, #0
 8122f22:	d00a      	beq.n	8122f3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8122f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122f26:	699c      	ldr	r4, [r3, #24]
 8122f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8122f2a:	69d8      	ldr	r0, [r3, #28]
 8122f2c:	8a3b      	ldrh	r3, [r7, #16]
 8122f2e:	9300      	str	r3, [sp, #0]
 8122f30:	4b1b      	ldr	r3, [pc, #108]	@ (8122fa0 <udp_input+0x224>)
 8122f32:	687a      	ldr	r2, [r7, #4]
 8122f34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8122f36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8122f38:	e021      	b.n	8122f7e <udp_input+0x202>
        pbuf_free(p);
 8122f3a:	6878      	ldr	r0, [r7, #4]
 8122f3c:	f7f8 ffe6 	bl	811bf0c <pbuf_free>
        goto end;
 8122f40:	e01c      	b.n	8122f7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8122f42:	7cfb      	ldrb	r3, [r7, #19]
 8122f44:	2b00      	cmp	r3, #0
 8122f46:	d112      	bne.n	8122f6e <udp_input+0x1f2>
 8122f48:	4b12      	ldr	r3, [pc, #72]	@ (8122f94 <udp_input+0x218>)
 8122f4a:	695b      	ldr	r3, [r3, #20]
 8122f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8122f50:	2be0      	cmp	r3, #224	@ 0xe0
 8122f52:	d00c      	beq.n	8122f6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8122f54:	4b0f      	ldr	r3, [pc, #60]	@ (8122f94 <udp_input+0x218>)
 8122f56:	899b      	ldrh	r3, [r3, #12]
 8122f58:	3308      	adds	r3, #8
 8122f5a:	b29b      	uxth	r3, r3
 8122f5c:	b21b      	sxth	r3, r3
 8122f5e:	4619      	mov	r1, r3
 8122f60:	6878      	ldr	r0, [r7, #4]
 8122f62:	f7f8 ffc0 	bl	811bee6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8122f66:	2103      	movs	r1, #3
 8122f68:	6878      	ldr	r0, [r7, #4]
 8122f6a:	f7f6 f801 	bl	8118f70 <icmp_dest_unreach>
      pbuf_free(p);
 8122f6e:	6878      	ldr	r0, [r7, #4]
 8122f70:	f7f8 ffcc 	bl	811bf0c <pbuf_free>
  return;
 8122f74:	e003      	b.n	8122f7e <udp_input+0x202>
    pbuf_free(p);
 8122f76:	6878      	ldr	r0, [r7, #4]
 8122f78:	f7f8 ffc8 	bl	811bf0c <pbuf_free>
  return;
 8122f7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8122f7e:	372c      	adds	r7, #44	@ 0x2c
 8122f80:	46bd      	mov	sp, r7
 8122f82:	bd90      	pop	{r4, r7, pc}
 8122f84:	08128144 	.word	0x08128144
 8122f88:	0812822c 	.word	0x0812822c
 8122f8c:	081281dc 	.word	0x081281dc
 8122f90:	08128244 	.word	0x08128244
 8122f94:	1000b300 	.word	0x1000b300
 8122f98:	1000e504 	.word	0x1000e504
 8122f9c:	08128260 	.word	0x08128260
 8122fa0:	1000b310 	.word	0x1000b310

08122fa4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8122fa4:	b580      	push	{r7, lr}
 8122fa6:	b088      	sub	sp, #32
 8122fa8:	af02      	add	r7, sp, #8
 8122faa:	60f8      	str	r0, [r7, #12]
 8122fac:	60b9      	str	r1, [r7, #8]
 8122fae:	607a      	str	r2, [r7, #4]
 8122fb0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8122fb2:	68fb      	ldr	r3, [r7, #12]
 8122fb4:	2b00      	cmp	r3, #0
 8122fb6:	d109      	bne.n	8122fcc <udp_sendto+0x28>
 8122fb8:	4b23      	ldr	r3, [pc, #140]	@ (8123048 <udp_sendto+0xa4>)
 8122fba:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8122fbe:	4923      	ldr	r1, [pc, #140]	@ (812304c <udp_sendto+0xa8>)
 8122fc0:	4823      	ldr	r0, [pc, #140]	@ (8123050 <udp_sendto+0xac>)
 8122fc2:	f001 fb4b 	bl	812465c <iprintf>
 8122fc6:	f06f 030f 	mvn.w	r3, #15
 8122fca:	e038      	b.n	812303e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8122fcc:	68bb      	ldr	r3, [r7, #8]
 8122fce:	2b00      	cmp	r3, #0
 8122fd0:	d109      	bne.n	8122fe6 <udp_sendto+0x42>
 8122fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8123048 <udp_sendto+0xa4>)
 8122fd4:	f240 2219 	movw	r2, #537	@ 0x219
 8122fd8:	491e      	ldr	r1, [pc, #120]	@ (8123054 <udp_sendto+0xb0>)
 8122fda:	481d      	ldr	r0, [pc, #116]	@ (8123050 <udp_sendto+0xac>)
 8122fdc:	f001 fb3e 	bl	812465c <iprintf>
 8122fe0:	f06f 030f 	mvn.w	r3, #15
 8122fe4:	e02b      	b.n	812303e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8122fe6:	687b      	ldr	r3, [r7, #4]
 8122fe8:	2b00      	cmp	r3, #0
 8122fea:	d109      	bne.n	8123000 <udp_sendto+0x5c>
 8122fec:	4b16      	ldr	r3, [pc, #88]	@ (8123048 <udp_sendto+0xa4>)
 8122fee:	f240 221a 	movw	r2, #538	@ 0x21a
 8122ff2:	4919      	ldr	r1, [pc, #100]	@ (8123058 <udp_sendto+0xb4>)
 8122ff4:	4816      	ldr	r0, [pc, #88]	@ (8123050 <udp_sendto+0xac>)
 8122ff6:	f001 fb31 	bl	812465c <iprintf>
 8122ffa:	f06f 030f 	mvn.w	r3, #15
 8122ffe:	e01e      	b.n	812303e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8123000:	68fb      	ldr	r3, [r7, #12]
 8123002:	7a1b      	ldrb	r3, [r3, #8]
 8123004:	2b00      	cmp	r3, #0
 8123006:	d006      	beq.n	8123016 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8123008:	68fb      	ldr	r3, [r7, #12]
 812300a:	7a1b      	ldrb	r3, [r3, #8]
 812300c:	4618      	mov	r0, r3
 812300e:	f7f8 fbf1 	bl	811b7f4 <netif_get_by_index>
 8123012:	6178      	str	r0, [r7, #20]
 8123014:	e003      	b.n	812301e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8123016:	6878      	ldr	r0, [r7, #4]
 8123018:	f7f6 f912 	bl	8119240 <ip4_route>
 812301c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 812301e:	697b      	ldr	r3, [r7, #20]
 8123020:	2b00      	cmp	r3, #0
 8123022:	d102      	bne.n	812302a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8123024:	f06f 0303 	mvn.w	r3, #3
 8123028:	e009      	b.n	812303e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 812302a:	887a      	ldrh	r2, [r7, #2]
 812302c:	697b      	ldr	r3, [r7, #20]
 812302e:	9300      	str	r3, [sp, #0]
 8123030:	4613      	mov	r3, r2
 8123032:	687a      	ldr	r2, [r7, #4]
 8123034:	68b9      	ldr	r1, [r7, #8]
 8123036:	68f8      	ldr	r0, [r7, #12]
 8123038:	f000 f810 	bl	812305c <udp_sendto_if>
 812303c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 812303e:	4618      	mov	r0, r3
 8123040:	3718      	adds	r7, #24
 8123042:	46bd      	mov	sp, r7
 8123044:	bd80      	pop	{r7, pc}
 8123046:	bf00      	nop
 8123048:	08128144 	.word	0x08128144
 812304c:	081282ac 	.word	0x081282ac
 8123050:	081281dc 	.word	0x081281dc
 8123054:	081282c4 	.word	0x081282c4
 8123058:	081282e0 	.word	0x081282e0

0812305c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 812305c:	b580      	push	{r7, lr}
 812305e:	b088      	sub	sp, #32
 8123060:	af02      	add	r7, sp, #8
 8123062:	60f8      	str	r0, [r7, #12]
 8123064:	60b9      	str	r1, [r7, #8]
 8123066:	607a      	str	r2, [r7, #4]
 8123068:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 812306a:	68fb      	ldr	r3, [r7, #12]
 812306c:	2b00      	cmp	r3, #0
 812306e:	d109      	bne.n	8123084 <udp_sendto_if+0x28>
 8123070:	4b2e      	ldr	r3, [pc, #184]	@ (812312c <udp_sendto_if+0xd0>)
 8123072:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8123076:	492e      	ldr	r1, [pc, #184]	@ (8123130 <udp_sendto_if+0xd4>)
 8123078:	482e      	ldr	r0, [pc, #184]	@ (8123134 <udp_sendto_if+0xd8>)
 812307a:	f001 faef 	bl	812465c <iprintf>
 812307e:	f06f 030f 	mvn.w	r3, #15
 8123082:	e04f      	b.n	8123124 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8123084:	68bb      	ldr	r3, [r7, #8]
 8123086:	2b00      	cmp	r3, #0
 8123088:	d109      	bne.n	812309e <udp_sendto_if+0x42>
 812308a:	4b28      	ldr	r3, [pc, #160]	@ (812312c <udp_sendto_if+0xd0>)
 812308c:	f240 2281 	movw	r2, #641	@ 0x281
 8123090:	4929      	ldr	r1, [pc, #164]	@ (8123138 <udp_sendto_if+0xdc>)
 8123092:	4828      	ldr	r0, [pc, #160]	@ (8123134 <udp_sendto_if+0xd8>)
 8123094:	f001 fae2 	bl	812465c <iprintf>
 8123098:	f06f 030f 	mvn.w	r3, #15
 812309c:	e042      	b.n	8123124 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 812309e:	687b      	ldr	r3, [r7, #4]
 81230a0:	2b00      	cmp	r3, #0
 81230a2:	d109      	bne.n	81230b8 <udp_sendto_if+0x5c>
 81230a4:	4b21      	ldr	r3, [pc, #132]	@ (812312c <udp_sendto_if+0xd0>)
 81230a6:	f240 2282 	movw	r2, #642	@ 0x282
 81230aa:	4924      	ldr	r1, [pc, #144]	@ (812313c <udp_sendto_if+0xe0>)
 81230ac:	4821      	ldr	r0, [pc, #132]	@ (8123134 <udp_sendto_if+0xd8>)
 81230ae:	f001 fad5 	bl	812465c <iprintf>
 81230b2:	f06f 030f 	mvn.w	r3, #15
 81230b6:	e035      	b.n	8123124 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 81230b8:	6a3b      	ldr	r3, [r7, #32]
 81230ba:	2b00      	cmp	r3, #0
 81230bc:	d109      	bne.n	81230d2 <udp_sendto_if+0x76>
 81230be:	4b1b      	ldr	r3, [pc, #108]	@ (812312c <udp_sendto_if+0xd0>)
 81230c0:	f240 2283 	movw	r2, #643	@ 0x283
 81230c4:	491e      	ldr	r1, [pc, #120]	@ (8123140 <udp_sendto_if+0xe4>)
 81230c6:	481b      	ldr	r0, [pc, #108]	@ (8123134 <udp_sendto_if+0xd8>)
 81230c8:	f001 fac8 	bl	812465c <iprintf>
 81230cc:	f06f 030f 	mvn.w	r3, #15
 81230d0:	e028      	b.n	8123124 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81230d2:	68fb      	ldr	r3, [r7, #12]
 81230d4:	2b00      	cmp	r3, #0
 81230d6:	d009      	beq.n	81230ec <udp_sendto_if+0x90>
 81230d8:	68fb      	ldr	r3, [r7, #12]
 81230da:	681b      	ldr	r3, [r3, #0]
 81230dc:	2b00      	cmp	r3, #0
 81230de:	d005      	beq.n	81230ec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 81230e0:	68fb      	ldr	r3, [r7, #12]
 81230e2:	681b      	ldr	r3, [r3, #0]
 81230e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81230e8:	2be0      	cmp	r3, #224	@ 0xe0
 81230ea:	d103      	bne.n	81230f4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 81230ec:	6a3b      	ldr	r3, [r7, #32]
 81230ee:	3304      	adds	r3, #4
 81230f0:	617b      	str	r3, [r7, #20]
 81230f2:	e00b      	b.n	812310c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 81230f4:	68fb      	ldr	r3, [r7, #12]
 81230f6:	681a      	ldr	r2, [r3, #0]
 81230f8:	6a3b      	ldr	r3, [r7, #32]
 81230fa:	3304      	adds	r3, #4
 81230fc:	681b      	ldr	r3, [r3, #0]
 81230fe:	429a      	cmp	r2, r3
 8123100:	d002      	beq.n	8123108 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8123102:	f06f 0303 	mvn.w	r3, #3
 8123106:	e00d      	b.n	8123124 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8123108:	68fb      	ldr	r3, [r7, #12]
 812310a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 812310c:	887a      	ldrh	r2, [r7, #2]
 812310e:	697b      	ldr	r3, [r7, #20]
 8123110:	9301      	str	r3, [sp, #4]
 8123112:	6a3b      	ldr	r3, [r7, #32]
 8123114:	9300      	str	r3, [sp, #0]
 8123116:	4613      	mov	r3, r2
 8123118:	687a      	ldr	r2, [r7, #4]
 812311a:	68b9      	ldr	r1, [r7, #8]
 812311c:	68f8      	ldr	r0, [r7, #12]
 812311e:	f000 f811 	bl	8123144 <udp_sendto_if_src>
 8123122:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8123124:	4618      	mov	r0, r3
 8123126:	3718      	adds	r7, #24
 8123128:	46bd      	mov	sp, r7
 812312a:	bd80      	pop	{r7, pc}
 812312c:	08128144 	.word	0x08128144
 8123130:	081282fc 	.word	0x081282fc
 8123134:	081281dc 	.word	0x081281dc
 8123138:	08128318 	.word	0x08128318
 812313c:	08128334 	.word	0x08128334
 8123140:	08128354 	.word	0x08128354

08123144 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8123144:	b580      	push	{r7, lr}
 8123146:	b08c      	sub	sp, #48	@ 0x30
 8123148:	af04      	add	r7, sp, #16
 812314a:	60f8      	str	r0, [r7, #12]
 812314c:	60b9      	str	r1, [r7, #8]
 812314e:	607a      	str	r2, [r7, #4]
 8123150:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8123152:	68fb      	ldr	r3, [r7, #12]
 8123154:	2b00      	cmp	r3, #0
 8123156:	d109      	bne.n	812316c <udp_sendto_if_src+0x28>
 8123158:	4b65      	ldr	r3, [pc, #404]	@ (81232f0 <udp_sendto_if_src+0x1ac>)
 812315a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 812315e:	4965      	ldr	r1, [pc, #404]	@ (81232f4 <udp_sendto_if_src+0x1b0>)
 8123160:	4865      	ldr	r0, [pc, #404]	@ (81232f8 <udp_sendto_if_src+0x1b4>)
 8123162:	f001 fa7b 	bl	812465c <iprintf>
 8123166:	f06f 030f 	mvn.w	r3, #15
 812316a:	e0bc      	b.n	81232e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 812316c:	68bb      	ldr	r3, [r7, #8]
 812316e:	2b00      	cmp	r3, #0
 8123170:	d109      	bne.n	8123186 <udp_sendto_if_src+0x42>
 8123172:	4b5f      	ldr	r3, [pc, #380]	@ (81232f0 <udp_sendto_if_src+0x1ac>)
 8123174:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8123178:	4960      	ldr	r1, [pc, #384]	@ (81232fc <udp_sendto_if_src+0x1b8>)
 812317a:	485f      	ldr	r0, [pc, #380]	@ (81232f8 <udp_sendto_if_src+0x1b4>)
 812317c:	f001 fa6e 	bl	812465c <iprintf>
 8123180:	f06f 030f 	mvn.w	r3, #15
 8123184:	e0af      	b.n	81232e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8123186:	687b      	ldr	r3, [r7, #4]
 8123188:	2b00      	cmp	r3, #0
 812318a:	d109      	bne.n	81231a0 <udp_sendto_if_src+0x5c>
 812318c:	4b58      	ldr	r3, [pc, #352]	@ (81232f0 <udp_sendto_if_src+0x1ac>)
 812318e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8123192:	495b      	ldr	r1, [pc, #364]	@ (8123300 <udp_sendto_if_src+0x1bc>)
 8123194:	4858      	ldr	r0, [pc, #352]	@ (81232f8 <udp_sendto_if_src+0x1b4>)
 8123196:	f001 fa61 	bl	812465c <iprintf>
 812319a:	f06f 030f 	mvn.w	r3, #15
 812319e:	e0a2      	b.n	81232e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 81231a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81231a2:	2b00      	cmp	r3, #0
 81231a4:	d109      	bne.n	81231ba <udp_sendto_if_src+0x76>
 81231a6:	4b52      	ldr	r3, [pc, #328]	@ (81232f0 <udp_sendto_if_src+0x1ac>)
 81231a8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 81231ac:	4955      	ldr	r1, [pc, #340]	@ (8123304 <udp_sendto_if_src+0x1c0>)
 81231ae:	4852      	ldr	r0, [pc, #328]	@ (81232f8 <udp_sendto_if_src+0x1b4>)
 81231b0:	f001 fa54 	bl	812465c <iprintf>
 81231b4:	f06f 030f 	mvn.w	r3, #15
 81231b8:	e095      	b.n	81232e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 81231ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81231bc:	2b00      	cmp	r3, #0
 81231be:	d109      	bne.n	81231d4 <udp_sendto_if_src+0x90>
 81231c0:	4b4b      	ldr	r3, [pc, #300]	@ (81232f0 <udp_sendto_if_src+0x1ac>)
 81231c2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 81231c6:	4950      	ldr	r1, [pc, #320]	@ (8123308 <udp_sendto_if_src+0x1c4>)
 81231c8:	484b      	ldr	r0, [pc, #300]	@ (81232f8 <udp_sendto_if_src+0x1b4>)
 81231ca:	f001 fa47 	bl	812465c <iprintf>
 81231ce:	f06f 030f 	mvn.w	r3, #15
 81231d2:	e088      	b.n	81232e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 81231d4:	68fb      	ldr	r3, [r7, #12]
 81231d6:	8a5b      	ldrh	r3, [r3, #18]
 81231d8:	2b00      	cmp	r3, #0
 81231da:	d10f      	bne.n	81231fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 81231dc:	68f9      	ldr	r1, [r7, #12]
 81231de:	68fb      	ldr	r3, [r7, #12]
 81231e0:	8a5b      	ldrh	r3, [r3, #18]
 81231e2:	461a      	mov	r2, r3
 81231e4:	68f8      	ldr	r0, [r7, #12]
 81231e6:	f000 f893 	bl	8123310 <udp_bind>
 81231ea:	4603      	mov	r3, r0
 81231ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 81231ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 81231f2:	2b00      	cmp	r3, #0
 81231f4:	d002      	beq.n	81231fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 81231f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 81231fa:	e074      	b.n	81232e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 81231fc:	68bb      	ldr	r3, [r7, #8]
 81231fe:	891b      	ldrh	r3, [r3, #8]
 8123200:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8123204:	4293      	cmp	r3, r2
 8123206:	d902      	bls.n	812320e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8123208:	f04f 33ff 	mov.w	r3, #4294967295
 812320c:	e06b      	b.n	81232e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 812320e:	2108      	movs	r1, #8
 8123210:	68b8      	ldr	r0, [r7, #8]
 8123212:	f7f8 fde5 	bl	811bde0 <pbuf_add_header>
 8123216:	4603      	mov	r3, r0
 8123218:	2b00      	cmp	r3, #0
 812321a:	d015      	beq.n	8123248 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 812321c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8123220:	2108      	movs	r1, #8
 8123222:	2022      	movs	r0, #34	@ 0x22
 8123224:	f7f8 fb90 	bl	811b948 <pbuf_alloc>
 8123228:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 812322a:	69fb      	ldr	r3, [r7, #28]
 812322c:	2b00      	cmp	r3, #0
 812322e:	d102      	bne.n	8123236 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8123230:	f04f 33ff 	mov.w	r3, #4294967295
 8123234:	e057      	b.n	81232e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8123236:	68bb      	ldr	r3, [r7, #8]
 8123238:	891b      	ldrh	r3, [r3, #8]
 812323a:	2b00      	cmp	r3, #0
 812323c:	d006      	beq.n	812324c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 812323e:	68b9      	ldr	r1, [r7, #8]
 8123240:	69f8      	ldr	r0, [r7, #28]
 8123242:	f7f8 ff87 	bl	811c154 <pbuf_chain>
 8123246:	e001      	b.n	812324c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8123248:	68bb      	ldr	r3, [r7, #8]
 812324a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 812324c:	69fb      	ldr	r3, [r7, #28]
 812324e:	895b      	ldrh	r3, [r3, #10]
 8123250:	2b07      	cmp	r3, #7
 8123252:	d806      	bhi.n	8123262 <udp_sendto_if_src+0x11e>
 8123254:	4b26      	ldr	r3, [pc, #152]	@ (81232f0 <udp_sendto_if_src+0x1ac>)
 8123256:	f240 320d 	movw	r2, #781	@ 0x30d
 812325a:	492c      	ldr	r1, [pc, #176]	@ (812330c <udp_sendto_if_src+0x1c8>)
 812325c:	4826      	ldr	r0, [pc, #152]	@ (81232f8 <udp_sendto_if_src+0x1b4>)
 812325e:	f001 f9fd 	bl	812465c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8123262:	69fb      	ldr	r3, [r7, #28]
 8123264:	685b      	ldr	r3, [r3, #4]
 8123266:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8123268:	68fb      	ldr	r3, [r7, #12]
 812326a:	8a5b      	ldrh	r3, [r3, #18]
 812326c:	4618      	mov	r0, r3
 812326e:	f7f4 fc45 	bl	8117afc <lwip_htons>
 8123272:	4603      	mov	r3, r0
 8123274:	461a      	mov	r2, r3
 8123276:	697b      	ldr	r3, [r7, #20]
 8123278:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 812327a:	887b      	ldrh	r3, [r7, #2]
 812327c:	4618      	mov	r0, r3
 812327e:	f7f4 fc3d 	bl	8117afc <lwip_htons>
 8123282:	4603      	mov	r3, r0
 8123284:	461a      	mov	r2, r3
 8123286:	697b      	ldr	r3, [r7, #20]
 8123288:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 812328a:	697b      	ldr	r3, [r7, #20]
 812328c:	2200      	movs	r2, #0
 812328e:	719a      	strb	r2, [r3, #6]
 8123290:	2200      	movs	r2, #0
 8123292:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8123294:	69fb      	ldr	r3, [r7, #28]
 8123296:	891b      	ldrh	r3, [r3, #8]
 8123298:	4618      	mov	r0, r3
 812329a:	f7f4 fc2f 	bl	8117afc <lwip_htons>
 812329e:	4603      	mov	r3, r0
 81232a0:	461a      	mov	r2, r3
 81232a2:	697b      	ldr	r3, [r7, #20]
 81232a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 81232a6:	2311      	movs	r3, #17
 81232a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 81232aa:	68fb      	ldr	r3, [r7, #12]
 81232ac:	7adb      	ldrb	r3, [r3, #11]
 81232ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 81232b0:	68fb      	ldr	r3, [r7, #12]
 81232b2:	7a9b      	ldrb	r3, [r3, #10]
 81232b4:	7cb9      	ldrb	r1, [r7, #18]
 81232b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81232b8:	9202      	str	r2, [sp, #8]
 81232ba:	7cfa      	ldrb	r2, [r7, #19]
 81232bc:	9201      	str	r2, [sp, #4]
 81232be:	9300      	str	r3, [sp, #0]
 81232c0:	460b      	mov	r3, r1
 81232c2:	687a      	ldr	r2, [r7, #4]
 81232c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81232c6:	69f8      	ldr	r0, [r7, #28]
 81232c8:	f7f6 f9a2 	bl	8119610 <ip4_output_if_src>
 81232cc:	4603      	mov	r3, r0
 81232ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 81232d0:	69fa      	ldr	r2, [r7, #28]
 81232d2:	68bb      	ldr	r3, [r7, #8]
 81232d4:	429a      	cmp	r2, r3
 81232d6:	d004      	beq.n	81232e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 81232d8:	69f8      	ldr	r0, [r7, #28]
 81232da:	f7f8 fe17 	bl	811bf0c <pbuf_free>
    q = NULL;
 81232de:	2300      	movs	r3, #0
 81232e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 81232e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 81232e6:	4618      	mov	r0, r3
 81232e8:	3720      	adds	r7, #32
 81232ea:	46bd      	mov	sp, r7
 81232ec:	bd80      	pop	{r7, pc}
 81232ee:	bf00      	nop
 81232f0:	08128144 	.word	0x08128144
 81232f4:	08128374 	.word	0x08128374
 81232f8:	081281dc 	.word	0x081281dc
 81232fc:	08128394 	.word	0x08128394
 8123300:	081283b4 	.word	0x081283b4
 8123304:	081283d8 	.word	0x081283d8
 8123308:	081283fc 	.word	0x081283fc
 812330c:	08128420 	.word	0x08128420

08123310 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8123310:	b580      	push	{r7, lr}
 8123312:	b086      	sub	sp, #24
 8123314:	af00      	add	r7, sp, #0
 8123316:	60f8      	str	r0, [r7, #12]
 8123318:	60b9      	str	r1, [r7, #8]
 812331a:	4613      	mov	r3, r2
 812331c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 812331e:	68bb      	ldr	r3, [r7, #8]
 8123320:	2b00      	cmp	r3, #0
 8123322:	d101      	bne.n	8123328 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8123324:	4b39      	ldr	r3, [pc, #228]	@ (812340c <udp_bind+0xfc>)
 8123326:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8123328:	68fb      	ldr	r3, [r7, #12]
 812332a:	2b00      	cmp	r3, #0
 812332c:	d109      	bne.n	8123342 <udp_bind+0x32>
 812332e:	4b38      	ldr	r3, [pc, #224]	@ (8123410 <udp_bind+0x100>)
 8123330:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8123334:	4937      	ldr	r1, [pc, #220]	@ (8123414 <udp_bind+0x104>)
 8123336:	4838      	ldr	r0, [pc, #224]	@ (8123418 <udp_bind+0x108>)
 8123338:	f001 f990 	bl	812465c <iprintf>
 812333c:	f06f 030f 	mvn.w	r3, #15
 8123340:	e060      	b.n	8123404 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8123342:	2300      	movs	r3, #0
 8123344:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8123346:	4b35      	ldr	r3, [pc, #212]	@ (812341c <udp_bind+0x10c>)
 8123348:	681b      	ldr	r3, [r3, #0]
 812334a:	617b      	str	r3, [r7, #20]
 812334c:	e009      	b.n	8123362 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 812334e:	68fa      	ldr	r2, [r7, #12]
 8123350:	697b      	ldr	r3, [r7, #20]
 8123352:	429a      	cmp	r2, r3
 8123354:	d102      	bne.n	812335c <udp_bind+0x4c>
      rebind = 1;
 8123356:	2301      	movs	r3, #1
 8123358:	74fb      	strb	r3, [r7, #19]
      break;
 812335a:	e005      	b.n	8123368 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 812335c:	697b      	ldr	r3, [r7, #20]
 812335e:	68db      	ldr	r3, [r3, #12]
 8123360:	617b      	str	r3, [r7, #20]
 8123362:	697b      	ldr	r3, [r7, #20]
 8123364:	2b00      	cmp	r3, #0
 8123366:	d1f2      	bne.n	812334e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8123368:	88fb      	ldrh	r3, [r7, #6]
 812336a:	2b00      	cmp	r3, #0
 812336c:	d109      	bne.n	8123382 <udp_bind+0x72>
    port = udp_new_port();
 812336e:	f7ff fc69 	bl	8122c44 <udp_new_port>
 8123372:	4603      	mov	r3, r0
 8123374:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8123376:	88fb      	ldrh	r3, [r7, #6]
 8123378:	2b00      	cmp	r3, #0
 812337a:	d12c      	bne.n	81233d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 812337c:	f06f 0307 	mvn.w	r3, #7
 8123380:	e040      	b.n	8123404 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8123382:	4b26      	ldr	r3, [pc, #152]	@ (812341c <udp_bind+0x10c>)
 8123384:	681b      	ldr	r3, [r3, #0]
 8123386:	617b      	str	r3, [r7, #20]
 8123388:	e022      	b.n	81233d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 812338a:	68fa      	ldr	r2, [r7, #12]
 812338c:	697b      	ldr	r3, [r7, #20]
 812338e:	429a      	cmp	r2, r3
 8123390:	d01b      	beq.n	81233ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8123392:	697b      	ldr	r3, [r7, #20]
 8123394:	8a5b      	ldrh	r3, [r3, #18]
 8123396:	88fa      	ldrh	r2, [r7, #6]
 8123398:	429a      	cmp	r2, r3
 812339a:	d116      	bne.n	81233ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 812339c:	697b      	ldr	r3, [r7, #20]
 812339e:	681a      	ldr	r2, [r3, #0]
 81233a0:	68bb      	ldr	r3, [r7, #8]
 81233a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 81233a4:	429a      	cmp	r2, r3
 81233a6:	d00d      	beq.n	81233c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81233a8:	68bb      	ldr	r3, [r7, #8]
 81233aa:	2b00      	cmp	r3, #0
 81233ac:	d00a      	beq.n	81233c4 <udp_bind+0xb4>
 81233ae:	68bb      	ldr	r3, [r7, #8]
 81233b0:	681b      	ldr	r3, [r3, #0]
 81233b2:	2b00      	cmp	r3, #0
 81233b4:	d006      	beq.n	81233c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 81233b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81233b8:	2b00      	cmp	r3, #0
 81233ba:	d003      	beq.n	81233c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 81233bc:	697b      	ldr	r3, [r7, #20]
 81233be:	681b      	ldr	r3, [r3, #0]
 81233c0:	2b00      	cmp	r3, #0
 81233c2:	d102      	bne.n	81233ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 81233c4:	f06f 0307 	mvn.w	r3, #7
 81233c8:	e01c      	b.n	8123404 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81233ca:	697b      	ldr	r3, [r7, #20]
 81233cc:	68db      	ldr	r3, [r3, #12]
 81233ce:	617b      	str	r3, [r7, #20]
 81233d0:	697b      	ldr	r3, [r7, #20]
 81233d2:	2b00      	cmp	r3, #0
 81233d4:	d1d9      	bne.n	812338a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 81233d6:	68bb      	ldr	r3, [r7, #8]
 81233d8:	2b00      	cmp	r3, #0
 81233da:	d002      	beq.n	81233e2 <udp_bind+0xd2>
 81233dc:	68bb      	ldr	r3, [r7, #8]
 81233de:	681b      	ldr	r3, [r3, #0]
 81233e0:	e000      	b.n	81233e4 <udp_bind+0xd4>
 81233e2:	2300      	movs	r3, #0
 81233e4:	68fa      	ldr	r2, [r7, #12]
 81233e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 81233e8:	68fb      	ldr	r3, [r7, #12]
 81233ea:	88fa      	ldrh	r2, [r7, #6]
 81233ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 81233ee:	7cfb      	ldrb	r3, [r7, #19]
 81233f0:	2b00      	cmp	r3, #0
 81233f2:	d106      	bne.n	8123402 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 81233f4:	4b09      	ldr	r3, [pc, #36]	@ (812341c <udp_bind+0x10c>)
 81233f6:	681a      	ldr	r2, [r3, #0]
 81233f8:	68fb      	ldr	r3, [r7, #12]
 81233fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 81233fc:	4a07      	ldr	r2, [pc, #28]	@ (812341c <udp_bind+0x10c>)
 81233fe:	68fb      	ldr	r3, [r7, #12]
 8123400:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8123402:	2300      	movs	r3, #0
}
 8123404:	4618      	mov	r0, r3
 8123406:	3718      	adds	r7, #24
 8123408:	46bd      	mov	sp, r7
 812340a:	bd80      	pop	{r7, pc}
 812340c:	081285e8 	.word	0x081285e8
 8123410:	08128144 	.word	0x08128144
 8123414:	08128450 	.word	0x08128450
 8123418:	081281dc 	.word	0x081281dc
 812341c:	1000e504 	.word	0x1000e504

08123420 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8123420:	b580      	push	{r7, lr}
 8123422:	b084      	sub	sp, #16
 8123424:	af00      	add	r7, sp, #0
 8123426:	60f8      	str	r0, [r7, #12]
 8123428:	60b9      	str	r1, [r7, #8]
 812342a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 812342c:	68fb      	ldr	r3, [r7, #12]
 812342e:	2b00      	cmp	r3, #0
 8123430:	d107      	bne.n	8123442 <udp_recv+0x22>
 8123432:	4b08      	ldr	r3, [pc, #32]	@ (8123454 <udp_recv+0x34>)
 8123434:	f240 428a 	movw	r2, #1162	@ 0x48a
 8123438:	4907      	ldr	r1, [pc, #28]	@ (8123458 <udp_recv+0x38>)
 812343a:	4808      	ldr	r0, [pc, #32]	@ (812345c <udp_recv+0x3c>)
 812343c:	f001 f90e 	bl	812465c <iprintf>
 8123440:	e005      	b.n	812344e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8123442:	68fb      	ldr	r3, [r7, #12]
 8123444:	68ba      	ldr	r2, [r7, #8]
 8123446:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8123448:	68fb      	ldr	r3, [r7, #12]
 812344a:	687a      	ldr	r2, [r7, #4]
 812344c:	61da      	str	r2, [r3, #28]
}
 812344e:	3710      	adds	r7, #16
 8123450:	46bd      	mov	sp, r7
 8123452:	bd80      	pop	{r7, pc}
 8123454:	08128144 	.word	0x08128144
 8123458:	081284bc 	.word	0x081284bc
 812345c:	081281dc 	.word	0x081281dc

08123460 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8123460:	b580      	push	{r7, lr}
 8123462:	b084      	sub	sp, #16
 8123464:	af00      	add	r7, sp, #0
 8123466:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8123468:	687b      	ldr	r3, [r7, #4]
 812346a:	2b00      	cmp	r3, #0
 812346c:	d107      	bne.n	812347e <udp_remove+0x1e>
 812346e:	4b19      	ldr	r3, [pc, #100]	@ (81234d4 <udp_remove+0x74>)
 8123470:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8123474:	4918      	ldr	r1, [pc, #96]	@ (81234d8 <udp_remove+0x78>)
 8123476:	4819      	ldr	r0, [pc, #100]	@ (81234dc <udp_remove+0x7c>)
 8123478:	f001 f8f0 	bl	812465c <iprintf>
 812347c:	e026      	b.n	81234cc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 812347e:	4b18      	ldr	r3, [pc, #96]	@ (81234e0 <udp_remove+0x80>)
 8123480:	681b      	ldr	r3, [r3, #0]
 8123482:	687a      	ldr	r2, [r7, #4]
 8123484:	429a      	cmp	r2, r3
 8123486:	d105      	bne.n	8123494 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8123488:	4b15      	ldr	r3, [pc, #84]	@ (81234e0 <udp_remove+0x80>)
 812348a:	681b      	ldr	r3, [r3, #0]
 812348c:	68db      	ldr	r3, [r3, #12]
 812348e:	4a14      	ldr	r2, [pc, #80]	@ (81234e0 <udp_remove+0x80>)
 8123490:	6013      	str	r3, [r2, #0]
 8123492:	e017      	b.n	81234c4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8123494:	4b12      	ldr	r3, [pc, #72]	@ (81234e0 <udp_remove+0x80>)
 8123496:	681b      	ldr	r3, [r3, #0]
 8123498:	60fb      	str	r3, [r7, #12]
 812349a:	e010      	b.n	81234be <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 812349c:	68fb      	ldr	r3, [r7, #12]
 812349e:	68db      	ldr	r3, [r3, #12]
 81234a0:	2b00      	cmp	r3, #0
 81234a2:	d009      	beq.n	81234b8 <udp_remove+0x58>
 81234a4:	68fb      	ldr	r3, [r7, #12]
 81234a6:	68db      	ldr	r3, [r3, #12]
 81234a8:	687a      	ldr	r2, [r7, #4]
 81234aa:	429a      	cmp	r2, r3
 81234ac:	d104      	bne.n	81234b8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 81234ae:	687b      	ldr	r3, [r7, #4]
 81234b0:	68da      	ldr	r2, [r3, #12]
 81234b2:	68fb      	ldr	r3, [r7, #12]
 81234b4:	60da      	str	r2, [r3, #12]
        break;
 81234b6:	e005      	b.n	81234c4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 81234b8:	68fb      	ldr	r3, [r7, #12]
 81234ba:	68db      	ldr	r3, [r3, #12]
 81234bc:	60fb      	str	r3, [r7, #12]
 81234be:	68fb      	ldr	r3, [r7, #12]
 81234c0:	2b00      	cmp	r3, #0
 81234c2:	d1eb      	bne.n	812349c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 81234c4:	6879      	ldr	r1, [r7, #4]
 81234c6:	2000      	movs	r0, #0
 81234c8:	f7f7 fe7e 	bl	811b1c8 <memp_free>
}
 81234cc:	3710      	adds	r7, #16
 81234ce:	46bd      	mov	sp, r7
 81234d0:	bd80      	pop	{r7, pc}
 81234d2:	bf00      	nop
 81234d4:	08128144 	.word	0x08128144
 81234d8:	081284d4 	.word	0x081284d4
 81234dc:	081281dc 	.word	0x081281dc
 81234e0:	1000e504 	.word	0x1000e504

081234e4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 81234e4:	b580      	push	{r7, lr}
 81234e6:	b082      	sub	sp, #8
 81234e8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 81234ea:	2000      	movs	r0, #0
 81234ec:	f7f7 fdf6 	bl	811b0dc <memp_malloc>
 81234f0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 81234f2:	687b      	ldr	r3, [r7, #4]
 81234f4:	2b00      	cmp	r3, #0
 81234f6:	d007      	beq.n	8123508 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 81234f8:	2220      	movs	r2, #32
 81234fa:	2100      	movs	r1, #0
 81234fc:	6878      	ldr	r0, [r7, #4]
 81234fe:	f001 f9c1 	bl	8124884 <memset>
    pcb->ttl = UDP_TTL;
 8123502:	687b      	ldr	r3, [r7, #4]
 8123504:	22ff      	movs	r2, #255	@ 0xff
 8123506:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8123508:	687b      	ldr	r3, [r7, #4]
}
 812350a:	4618      	mov	r0, r3
 812350c:	3708      	adds	r7, #8
 812350e:	46bd      	mov	sp, r7
 8123510:	bd80      	pop	{r7, pc}
	...

08123514 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8123514:	b480      	push	{r7}
 8123516:	b085      	sub	sp, #20
 8123518:	af00      	add	r7, sp, #0
 812351a:	6078      	str	r0, [r7, #4]
 812351c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 812351e:	687b      	ldr	r3, [r7, #4]
 8123520:	2b00      	cmp	r3, #0
 8123522:	d01e      	beq.n	8123562 <udp_netif_ip_addr_changed+0x4e>
 8123524:	687b      	ldr	r3, [r7, #4]
 8123526:	681b      	ldr	r3, [r3, #0]
 8123528:	2b00      	cmp	r3, #0
 812352a:	d01a      	beq.n	8123562 <udp_netif_ip_addr_changed+0x4e>
 812352c:	683b      	ldr	r3, [r7, #0]
 812352e:	2b00      	cmp	r3, #0
 8123530:	d017      	beq.n	8123562 <udp_netif_ip_addr_changed+0x4e>
 8123532:	683b      	ldr	r3, [r7, #0]
 8123534:	681b      	ldr	r3, [r3, #0]
 8123536:	2b00      	cmp	r3, #0
 8123538:	d013      	beq.n	8123562 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 812353a:	4b0d      	ldr	r3, [pc, #52]	@ (8123570 <udp_netif_ip_addr_changed+0x5c>)
 812353c:	681b      	ldr	r3, [r3, #0]
 812353e:	60fb      	str	r3, [r7, #12]
 8123540:	e00c      	b.n	812355c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8123542:	68fb      	ldr	r3, [r7, #12]
 8123544:	681a      	ldr	r2, [r3, #0]
 8123546:	687b      	ldr	r3, [r7, #4]
 8123548:	681b      	ldr	r3, [r3, #0]
 812354a:	429a      	cmp	r2, r3
 812354c:	d103      	bne.n	8123556 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 812354e:	683b      	ldr	r3, [r7, #0]
 8123550:	681a      	ldr	r2, [r3, #0]
 8123552:	68fb      	ldr	r3, [r7, #12]
 8123554:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8123556:	68fb      	ldr	r3, [r7, #12]
 8123558:	68db      	ldr	r3, [r3, #12]
 812355a:	60fb      	str	r3, [r7, #12]
 812355c:	68fb      	ldr	r3, [r7, #12]
 812355e:	2b00      	cmp	r3, #0
 8123560:	d1ef      	bne.n	8123542 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8123562:	bf00      	nop
 8123564:	3714      	adds	r7, #20
 8123566:	46bd      	mov	sp, r7
 8123568:	f85d 7b04 	ldr.w	r7, [sp], #4
 812356c:	4770      	bx	lr
 812356e:	bf00      	nop
 8123570:	1000e504 	.word	0x1000e504

08123574 <_ZdlPv>:
 8123574:	f000 ba44 	b.w	8123a00 <free>

08123578 <_ZdlPvj>:
 8123578:	f7ff bffc 	b.w	8123574 <_ZdlPv>

0812357c <__cxa_guard_acquire>:
 812357c:	6802      	ldr	r2, [r0, #0]
 812357e:	07d2      	lsls	r2, r2, #31
 8123580:	4603      	mov	r3, r0
 8123582:	d405      	bmi.n	8123590 <__cxa_guard_acquire+0x14>
 8123584:	7842      	ldrb	r2, [r0, #1]
 8123586:	b102      	cbz	r2, 812358a <__cxa_guard_acquire+0xe>
 8123588:	deff      	udf	#255	@ 0xff
 812358a:	2001      	movs	r0, #1
 812358c:	7058      	strb	r0, [r3, #1]
 812358e:	4770      	bx	lr
 8123590:	2000      	movs	r0, #0
 8123592:	4770      	bx	lr

08123594 <__cxa_guard_release>:
 8123594:	2301      	movs	r3, #1
 8123596:	6003      	str	r3, [r0, #0]
 8123598:	4770      	bx	lr

0812359a <_Znwj>:
 812359a:	2801      	cmp	r0, #1
 812359c:	bf38      	it	cc
 812359e:	2001      	movcc	r0, #1
 81235a0:	b510      	push	{r4, lr}
 81235a2:	4604      	mov	r4, r0
 81235a4:	4620      	mov	r0, r4
 81235a6:	f000 fa23 	bl	81239f0 <malloc>
 81235aa:	b100      	cbz	r0, 81235ae <_Znwj+0x14>
 81235ac:	bd10      	pop	{r4, pc}
 81235ae:	f000 f96f 	bl	8123890 <_ZSt15get_new_handlerv>
 81235b2:	b908      	cbnz	r0, 81235b8 <_Znwj+0x1e>
 81235b4:	f000 fa14 	bl	81239e0 <abort>
 81235b8:	4780      	blx	r0
 81235ba:	e7f3      	b.n	81235a4 <_Znwj+0xa>

081235bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 81235bc:	68c3      	ldr	r3, [r0, #12]
 81235be:	689a      	ldr	r2, [r3, #8]
 81235c0:	60c2      	str	r2, [r0, #12]
 81235c2:	b510      	push	{r4, lr}
 81235c4:	b102      	cbz	r2, 81235c8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 81235c6:	6050      	str	r0, [r2, #4]
 81235c8:	6842      	ldr	r2, [r0, #4]
 81235ca:	605a      	str	r2, [r3, #4]
 81235cc:	680c      	ldr	r4, [r1, #0]
 81235ce:	4284      	cmp	r4, r0
 81235d0:	d103      	bne.n	81235da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 81235d2:	600b      	str	r3, [r1, #0]
 81235d4:	6098      	str	r0, [r3, #8]
 81235d6:	6043      	str	r3, [r0, #4]
 81235d8:	bd10      	pop	{r4, pc}
 81235da:	6891      	ldr	r1, [r2, #8]
 81235dc:	4281      	cmp	r1, r0
 81235de:	bf0c      	ite	eq
 81235e0:	6093      	streq	r3, [r2, #8]
 81235e2:	60d3      	strne	r3, [r2, #12]
 81235e4:	e7f6      	b.n	81235d4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

081235e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 81235e6:	6883      	ldr	r3, [r0, #8]
 81235e8:	68da      	ldr	r2, [r3, #12]
 81235ea:	6082      	str	r2, [r0, #8]
 81235ec:	b510      	push	{r4, lr}
 81235ee:	b102      	cbz	r2, 81235f2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 81235f0:	6050      	str	r0, [r2, #4]
 81235f2:	6842      	ldr	r2, [r0, #4]
 81235f4:	605a      	str	r2, [r3, #4]
 81235f6:	680c      	ldr	r4, [r1, #0]
 81235f8:	4284      	cmp	r4, r0
 81235fa:	d103      	bne.n	8123604 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 81235fc:	600b      	str	r3, [r1, #0]
 81235fe:	60d8      	str	r0, [r3, #12]
 8123600:	6043      	str	r3, [r0, #4]
 8123602:	bd10      	pop	{r4, pc}
 8123604:	68d1      	ldr	r1, [r2, #12]
 8123606:	4281      	cmp	r1, r0
 8123608:	bf0c      	ite	eq
 812360a:	60d3      	streq	r3, [r2, #12]
 812360c:	6093      	strne	r3, [r2, #8]
 812360e:	e7f6      	b.n	81235fe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08123610 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8123610:	68c3      	ldr	r3, [r0, #12]
 8123612:	b123      	cbz	r3, 812361e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8123614:	4618      	mov	r0, r3
 8123616:	689b      	ldr	r3, [r3, #8]
 8123618:	2b00      	cmp	r3, #0
 812361a:	d1fb      	bne.n	8123614 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 812361c:	4770      	bx	lr
 812361e:	6843      	ldr	r3, [r0, #4]
 8123620:	68da      	ldr	r2, [r3, #12]
 8123622:	4282      	cmp	r2, r0
 8123624:	d004      	beq.n	8123630 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8123626:	68c2      	ldr	r2, [r0, #12]
 8123628:	4293      	cmp	r3, r2
 812362a:	bf18      	it	ne
 812362c:	4618      	movne	r0, r3
 812362e:	4770      	bx	lr
 8123630:	4618      	mov	r0, r3
 8123632:	685b      	ldr	r3, [r3, #4]
 8123634:	e7f4      	b.n	8123620 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08123636 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8123636:	7802      	ldrb	r2, [r0, #0]
 8123638:	4603      	mov	r3, r0
 812363a:	b92a      	cbnz	r2, 8123648 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 812363c:	6842      	ldr	r2, [r0, #4]
 812363e:	6852      	ldr	r2, [r2, #4]
 8123640:	4282      	cmp	r2, r0
 8123642:	d101      	bne.n	8123648 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8123644:	68d0      	ldr	r0, [r2, #12]
 8123646:	4770      	bx	lr
 8123648:	689a      	ldr	r2, [r3, #8]
 812364a:	b122      	cbz	r2, 8123656 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 812364c:	4610      	mov	r0, r2
 812364e:	68d2      	ldr	r2, [r2, #12]
 8123650:	2a00      	cmp	r2, #0
 8123652:	d1fb      	bne.n	812364c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8123654:	4770      	bx	lr
 8123656:	6858      	ldr	r0, [r3, #4]
 8123658:	6882      	ldr	r2, [r0, #8]
 812365a:	429a      	cmp	r2, r3
 812365c:	d000      	beq.n	8123660 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 812365e:	4770      	bx	lr
 8123660:	4603      	mov	r3, r0
 8123662:	6840      	ldr	r0, [r0, #4]
 8123664:	e7f8      	b.n	8123658 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08123666 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8123666:	f7ff bfd3 	b.w	8123610 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0812366a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 812366a:	f7ff bfe4 	b.w	8123636 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0812366e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 812366e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8123672:	461d      	mov	r5, r3
 8123674:	1d1f      	adds	r7, r3, #4
 8123676:	2300      	movs	r3, #0
 8123678:	e9c1 3302 	strd	r3, r3, [r1, #8]
 812367c:	460c      	mov	r4, r1
 812367e:	604a      	str	r2, [r1, #4]
 8123680:	700b      	strb	r3, [r1, #0]
 8123682:	b1a0      	cbz	r0, 81236ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8123684:	4295      	cmp	r5, r2
 8123686:	6091      	str	r1, [r2, #8]
 8123688:	d102      	bne.n	8123690 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 812368a:	6069      	str	r1, [r5, #4]
 812368c:	60ec      	str	r4, [r5, #12]
 812368e:	e003      	b.n	8123698 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8123690:	68ab      	ldr	r3, [r5, #8]
 8123692:	4293      	cmp	r3, r2
 8123694:	bf08      	it	eq
 8123696:	60a9      	streq	r1, [r5, #8]
 8123698:	f04f 0900 	mov.w	r9, #0
 812369c:	f04f 0801 	mov.w	r8, #1
 81236a0:	686b      	ldr	r3, [r5, #4]
 81236a2:	42a3      	cmp	r3, r4
 81236a4:	d132      	bne.n	812370c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 81236a6:	2201      	movs	r2, #1
 81236a8:	701a      	strb	r2, [r3, #0]
 81236aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81236ae:	60d1      	str	r1, [r2, #12]
 81236b0:	68eb      	ldr	r3, [r5, #12]
 81236b2:	4293      	cmp	r3, r2
 81236b4:	d1f0      	bne.n	8123698 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 81236b6:	e7e9      	b.n	812368c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 81236b8:	68c3      	ldr	r3, [r0, #12]
 81236ba:	42a3      	cmp	r3, r4
 81236bc:	d103      	bne.n	81236c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 81236be:	4639      	mov	r1, r7
 81236c0:	f7ff ff7c 	bl	81235bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 81236c4:	4604      	mov	r4, r0
 81236c6:	6863      	ldr	r3, [r4, #4]
 81236c8:	4639      	mov	r1, r7
 81236ca:	f883 8000 	strb.w	r8, [r3]
 81236ce:	4630      	mov	r0, r6
 81236d0:	f886 9000 	strb.w	r9, [r6]
 81236d4:	f7ff ff87 	bl	81235e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 81236d8:	e7e2      	b.n	81236a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 81236da:	b133      	cbz	r3, 81236ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 81236dc:	781a      	ldrb	r2, [r3, #0]
 81236de:	b922      	cbnz	r2, 81236ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 81236e0:	f880 8000 	strb.w	r8, [r0]
 81236e4:	f883 8000 	strb.w	r8, [r3]
 81236e8:	e021      	b.n	812372e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 81236ea:	6883      	ldr	r3, [r0, #8]
 81236ec:	42a3      	cmp	r3, r4
 81236ee:	d103      	bne.n	81236f8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 81236f0:	4639      	mov	r1, r7
 81236f2:	f7ff ff78 	bl	81235e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 81236f6:	4604      	mov	r4, r0
 81236f8:	6863      	ldr	r3, [r4, #4]
 81236fa:	4639      	mov	r1, r7
 81236fc:	f883 8000 	strb.w	r8, [r3]
 8123700:	4630      	mov	r0, r6
 8123702:	f886 9000 	strb.w	r9, [r6]
 8123706:	f7ff ff59 	bl	81235bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 812370a:	e7c9      	b.n	81236a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 812370c:	6860      	ldr	r0, [r4, #4]
 812370e:	7802      	ldrb	r2, [r0, #0]
 8123710:	2a00      	cmp	r2, #0
 8123712:	d1c8      	bne.n	81236a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8123714:	6846      	ldr	r6, [r0, #4]
 8123716:	68b3      	ldr	r3, [r6, #8]
 8123718:	4283      	cmp	r3, r0
 812371a:	d1de      	bne.n	81236da <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 812371c:	68f2      	ldr	r2, [r6, #12]
 812371e:	2a00      	cmp	r2, #0
 8123720:	d0ca      	beq.n	81236b8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8123722:	7811      	ldrb	r1, [r2, #0]
 8123724:	2900      	cmp	r1, #0
 8123726:	d1c7      	bne.n	81236b8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8123728:	2101      	movs	r1, #1
 812372a:	7019      	strb	r1, [r3, #0]
 812372c:	7011      	strb	r1, [r2, #0]
 812372e:	f886 9000 	strb.w	r9, [r6]
 8123732:	4634      	mov	r4, r6
 8123734:	e7b4      	b.n	81236a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08123736 <_ZSt17__throw_bad_allocv>:
 8123736:	b508      	push	{r3, lr}
 8123738:	f000 f952 	bl	81239e0 <abort>

0812373c <_ZSt28__throw_bad_array_new_lengthv>:
 812373c:	b508      	push	{r3, lr}
 812373e:	f000 f94f 	bl	81239e0 <abort>

08123742 <_ZSt20__throw_length_errorPKc>:
 8123742:	b508      	push	{r3, lr}
 8123744:	f000 f94c 	bl	81239e0 <abort>

08123748 <_ZSt25__throw_bad_function_callv>:
 8123748:	b508      	push	{r3, lr}
 812374a:	f000 f949 	bl	81239e0 <abort>
	...

08123750 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8123750:	290d      	cmp	r1, #13
 8123752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8123754:	4605      	mov	r5, r0
 8123756:	d82f      	bhi.n	81237b8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x68>
 8123758:	b3b1      	cbz	r1, 81237c8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>
 812375a:	4b1c      	ldr	r3, [pc, #112]	@ (81237cc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 812375c:	5c5c      	ldrb	r4, [r3, r1]
 812375e:	4620      	mov	r0, r4
 8123760:	f7dc ff60 	bl	8100624 <__aeabi_i2d>
 8123764:	4606      	mov	r6, r0
 8123766:	6828      	ldr	r0, [r5, #0]
 8123768:	460f      	mov	r7, r1
 812376a:	f7dc ff6d 	bl	8100648 <__aeabi_f2d>
 812376e:	4602      	mov	r2, r0
 8123770:	460b      	mov	r3, r1
 8123772:	4630      	mov	r0, r6
 8123774:	4639      	mov	r1, r7
 8123776:	f7dc ffbf 	bl	81006f8 <__aeabi_dmul>
 812377a:	ec41 0b10 	vmov	d0, r0, r1
 812377e:	f000 f88f 	bl	81238a0 <floor>
 8123782:	ec51 0b10 	vmov	r0, r1, d0
 8123786:	f7dd fa51 	bl	8100c2c <__aeabi_d2uiz>
 812378a:	6068      	str	r0, [r5, #4]
 812378c:	4620      	mov	r0, r4
 812378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8123790:	1058      	asrs	r0, r3, #1
 8123792:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8123796:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 812379a:	428e      	cmp	r6, r1
 812379c:	d20f      	bcs.n	81237be <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6e>
 812379e:	1a1b      	subs	r3, r3, r0
 81237a0:	1d22      	adds	r2, r4, #4
 81237a2:	3b01      	subs	r3, #1
 81237a4:	2b00      	cmp	r3, #0
 81237a6:	dcf3      	bgt.n	8123790 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x40>
 81237a8:	4b09      	ldr	r3, [pc, #36]	@ (81237d0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>)
 81237aa:	6814      	ldr	r4, [r2, #0]
 81237ac:	429a      	cmp	r2, r3
 81237ae:	d008      	beq.n	81237c2 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x72>
 81237b0:	4620      	mov	r0, r4
 81237b2:	f7dc ff27 	bl	8100604 <__aeabi_ui2d>
 81237b6:	e7d5      	b.n	8123764 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 81237b8:	4a06      	ldr	r2, [pc, #24]	@ (81237d4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x84>)
 81237ba:	23f9      	movs	r3, #249	@ 0xf9
 81237bc:	e7f2      	b.n	81237a4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 81237be:	4603      	mov	r3, r0
 81237c0:	e7f0      	b.n	81237a4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 81237c2:	f04f 30ff 	mov.w	r0, #4294967295
 81237c6:	e7e0      	b.n	812378a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3a>
 81237c8:	2401      	movs	r4, #1
 81237ca:	e7df      	b.n	812378c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 81237cc:	081286fc 	.word	0x081286fc
 81237d0:	08128b08 	.word	0x08128b08
 81237d4:	08128724 	.word	0x08128724

081237d8 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 81237d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 81237dc:	4692      	mov	sl, r2
 81237de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 81237e0:	eb03 0802 	add.w	r8, r3, r2
 81237e4:	684b      	ldr	r3, [r1, #4]
 81237e6:	4598      	cmp	r8, r3
 81237e8:	4604      	mov	r4, r0
 81237ea:	460d      	mov	r5, r1
 81237ec:	d94a      	bls.n	8123884 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>
 81237ee:	2b00      	cmp	r3, #0
 81237f0:	6808      	ldr	r0, [r1, #0]
 81237f2:	bf0c      	ite	eq
 81237f4:	f04f 090b 	moveq.w	r9, #11
 81237f8:	f04f 0900 	movne.w	r9, #0
 81237fc:	f7dc ff24 	bl	8100648 <__aeabi_f2d>
 8123800:	45c8      	cmp	r8, r9
 8123802:	4606      	mov	r6, r0
 8123804:	460f      	mov	r7, r1
 8123806:	4640      	mov	r0, r8
 8123808:	bf38      	it	cc
 812380a:	4648      	movcc	r0, r9
 812380c:	f7dc fefa 	bl	8100604 <__aeabi_ui2d>
 8123810:	4632      	mov	r2, r6
 8123812:	463b      	mov	r3, r7
 8123814:	f7dd f89a 	bl	810094c <__aeabi_ddiv>
 8123818:	e9cd 0100 	strd	r0, r1, [sp]
 812381c:	4650      	mov	r0, sl
 812381e:	f7dc fef1 	bl	8100604 <__aeabi_ui2d>
 8123822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8123826:	4680      	mov	r8, r0
 8123828:	4689      	mov	r9, r1
 812382a:	f7dd f9e1 	bl	8100bf0 <__aeabi_dcmple>
 812382e:	b1d0      	cbz	r0, 8123866 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8123830:	ed9d 0b00 	vldr	d0, [sp]
 8123834:	f000 f834 	bl	81238a0 <floor>
 8123838:	4b14      	ldr	r3, [pc, #80]	@ (812388c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xb4>)
 812383a:	ec51 0b10 	vmov	r0, r1, d0
 812383e:	2200      	movs	r2, #0
 8123840:	f7dc fda4 	bl	810038c <__adddf3>
 8123844:	f7dd f9f2 	bl	8100c2c <__aeabi_d2uiz>
 8123848:	ea4f 014a 	mov.w	r1, sl, lsl #1
 812384c:	4281      	cmp	r1, r0
 812384e:	bf38      	it	cc
 8123850:	4601      	movcc	r1, r0
 8123852:	4628      	mov	r0, r5
 8123854:	f7ff ff7c 	bl	8123750 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8123858:	2301      	movs	r3, #1
 812385a:	7023      	strb	r3, [r4, #0]
 812385c:	6060      	str	r0, [r4, #4]
 812385e:	4620      	mov	r0, r4
 8123860:	b002      	add	sp, #8
 8123862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8123866:	4642      	mov	r2, r8
 8123868:	464b      	mov	r3, r9
 812386a:	4630      	mov	r0, r6
 812386c:	4639      	mov	r1, r7
 812386e:	f7dc ff43 	bl	81006f8 <__aeabi_dmul>
 8123872:	ec41 0b10 	vmov	d0, r0, r1
 8123876:	f000 f813 	bl	81238a0 <floor>
 812387a:	ec51 0b10 	vmov	r0, r1, d0
 812387e:	f7dd f9d5 	bl	8100c2c <__aeabi_d2uiz>
 8123882:	6068      	str	r0, [r5, #4]
 8123884:	2300      	movs	r3, #0
 8123886:	e9c4 3300 	strd	r3, r3, [r4]
 812388a:	e7e8      	b.n	812385e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 812388c:	3ff00000 	.word	0x3ff00000

08123890 <_ZSt15get_new_handlerv>:
 8123890:	4b02      	ldr	r3, [pc, #8]	@ (812389c <_ZSt15get_new_handlerv+0xc>)
 8123892:	6818      	ldr	r0, [r3, #0]
 8123894:	f3bf 8f5b 	dmb	ish
 8123898:	4770      	bx	lr
 812389a:	bf00      	nop
 812389c:	1000e508 	.word	0x1000e508

081238a0 <floor>:
 81238a0:	ec51 0b10 	vmov	r0, r1, d0
 81238a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 81238a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81238ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 81238b0:	2e13      	cmp	r6, #19
 81238b2:	460c      	mov	r4, r1
 81238b4:	4605      	mov	r5, r0
 81238b6:	4680      	mov	r8, r0
 81238b8:	dc34      	bgt.n	8123924 <floor+0x84>
 81238ba:	2e00      	cmp	r6, #0
 81238bc:	da17      	bge.n	81238ee <floor+0x4e>
 81238be:	a332      	add	r3, pc, #200	@ (adr r3, 8123988 <floor+0xe8>)
 81238c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81238c4:	f7dc fd62 	bl	810038c <__adddf3>
 81238c8:	2200      	movs	r2, #0
 81238ca:	2300      	movs	r3, #0
 81238cc:	f7dd f9a4 	bl	8100c18 <__aeabi_dcmpgt>
 81238d0:	b150      	cbz	r0, 81238e8 <floor+0x48>
 81238d2:	2c00      	cmp	r4, #0
 81238d4:	da55      	bge.n	8123982 <floor+0xe2>
 81238d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 81238da:	432c      	orrs	r4, r5
 81238dc:	2500      	movs	r5, #0
 81238de:	42ac      	cmp	r4, r5
 81238e0:	4c2b      	ldr	r4, [pc, #172]	@ (8123990 <floor+0xf0>)
 81238e2:	bf08      	it	eq
 81238e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 81238e8:	4621      	mov	r1, r4
 81238ea:	4628      	mov	r0, r5
 81238ec:	e023      	b.n	8123936 <floor+0x96>
 81238ee:	4f29      	ldr	r7, [pc, #164]	@ (8123994 <floor+0xf4>)
 81238f0:	4137      	asrs	r7, r6
 81238f2:	ea01 0307 	and.w	r3, r1, r7
 81238f6:	4303      	orrs	r3, r0
 81238f8:	d01d      	beq.n	8123936 <floor+0x96>
 81238fa:	a323      	add	r3, pc, #140	@ (adr r3, 8123988 <floor+0xe8>)
 81238fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8123900:	f7dc fd44 	bl	810038c <__adddf3>
 8123904:	2200      	movs	r2, #0
 8123906:	2300      	movs	r3, #0
 8123908:	f7dd f986 	bl	8100c18 <__aeabi_dcmpgt>
 812390c:	2800      	cmp	r0, #0
 812390e:	d0eb      	beq.n	81238e8 <floor+0x48>
 8123910:	2c00      	cmp	r4, #0
 8123912:	bfbe      	ittt	lt
 8123914:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8123918:	4133      	asrlt	r3, r6
 812391a:	18e4      	addlt	r4, r4, r3
 812391c:	ea24 0407 	bic.w	r4, r4, r7
 8123920:	2500      	movs	r5, #0
 8123922:	e7e1      	b.n	81238e8 <floor+0x48>
 8123924:	2e33      	cmp	r6, #51	@ 0x33
 8123926:	dd0a      	ble.n	812393e <floor+0x9e>
 8123928:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 812392c:	d103      	bne.n	8123936 <floor+0x96>
 812392e:	4602      	mov	r2, r0
 8123930:	460b      	mov	r3, r1
 8123932:	f7dc fd2b 	bl	810038c <__adddf3>
 8123936:	ec41 0b10 	vmov	d0, r0, r1
 812393a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 812393e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8123942:	f04f 37ff 	mov.w	r7, #4294967295
 8123946:	40df      	lsrs	r7, r3
 8123948:	4207      	tst	r7, r0
 812394a:	d0f4      	beq.n	8123936 <floor+0x96>
 812394c:	a30e      	add	r3, pc, #56	@ (adr r3, 8123988 <floor+0xe8>)
 812394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8123952:	f7dc fd1b 	bl	810038c <__adddf3>
 8123956:	2200      	movs	r2, #0
 8123958:	2300      	movs	r3, #0
 812395a:	f7dd f95d 	bl	8100c18 <__aeabi_dcmpgt>
 812395e:	2800      	cmp	r0, #0
 8123960:	d0c2      	beq.n	81238e8 <floor+0x48>
 8123962:	2c00      	cmp	r4, #0
 8123964:	da0a      	bge.n	812397c <floor+0xdc>
 8123966:	2e14      	cmp	r6, #20
 8123968:	d101      	bne.n	812396e <floor+0xce>
 812396a:	3401      	adds	r4, #1
 812396c:	e006      	b.n	812397c <floor+0xdc>
 812396e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8123972:	2301      	movs	r3, #1
 8123974:	40b3      	lsls	r3, r6
 8123976:	441d      	add	r5, r3
 8123978:	4545      	cmp	r5, r8
 812397a:	d3f6      	bcc.n	812396a <floor+0xca>
 812397c:	ea25 0507 	bic.w	r5, r5, r7
 8123980:	e7b2      	b.n	81238e8 <floor+0x48>
 8123982:	2500      	movs	r5, #0
 8123984:	462c      	mov	r4, r5
 8123986:	e7af      	b.n	81238e8 <floor+0x48>
 8123988:	8800759c 	.word	0x8800759c
 812398c:	7e37e43c 	.word	0x7e37e43c
 8123990:	bff00000 	.word	0xbff00000
 8123994:	000fffff 	.word	0x000fffff

08123998 <roundf>:
 8123998:	ee10 0a10 	vmov	r0, s0
 812399c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 81239a0:	3a7f      	subs	r2, #127	@ 0x7f
 81239a2:	2a16      	cmp	r2, #22
 81239a4:	dc15      	bgt.n	81239d2 <roundf+0x3a>
 81239a6:	2a00      	cmp	r2, #0
 81239a8:	da08      	bge.n	81239bc <roundf+0x24>
 81239aa:	3201      	adds	r2, #1
 81239ac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 81239b0:	d101      	bne.n	81239b6 <roundf+0x1e>
 81239b2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 81239b6:	ee00 3a10 	vmov	s0, r3
 81239ba:	4770      	bx	lr
 81239bc:	4907      	ldr	r1, [pc, #28]	@ (81239dc <roundf+0x44>)
 81239be:	4111      	asrs	r1, r2
 81239c0:	4201      	tst	r1, r0
 81239c2:	d0fa      	beq.n	81239ba <roundf+0x22>
 81239c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 81239c8:	4113      	asrs	r3, r2
 81239ca:	4403      	add	r3, r0
 81239cc:	ea23 0301 	bic.w	r3, r3, r1
 81239d0:	e7f1      	b.n	81239b6 <roundf+0x1e>
 81239d2:	2a80      	cmp	r2, #128	@ 0x80
 81239d4:	d1f1      	bne.n	81239ba <roundf+0x22>
 81239d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 81239da:	4770      	bx	lr
 81239dc:	007fffff 	.word	0x007fffff

081239e0 <abort>:
 81239e0:	b508      	push	{r3, lr}
 81239e2:	2006      	movs	r0, #6
 81239e4:	f000 ffa8 	bl	8124938 <raise>
 81239e8:	2001      	movs	r0, #1
 81239ea:	f7df fce9 	bl	81033c0 <_exit>
	...

081239f0 <malloc>:
 81239f0:	4b02      	ldr	r3, [pc, #8]	@ (81239fc <malloc+0xc>)
 81239f2:	4601      	mov	r1, r0
 81239f4:	6818      	ldr	r0, [r3, #0]
 81239f6:	f000 b82d 	b.w	8123a54 <_malloc_r>
 81239fa:	bf00      	nop
 81239fc:	10000040 	.word	0x10000040

08123a00 <free>:
 8123a00:	4b02      	ldr	r3, [pc, #8]	@ (8123a0c <free+0xc>)
 8123a02:	4601      	mov	r1, r0
 8123a04:	6818      	ldr	r0, [r3, #0]
 8123a06:	f001 b8b9 	b.w	8124b7c <_free_r>
 8123a0a:	bf00      	nop
 8123a0c:	10000040 	.word	0x10000040

08123a10 <sbrk_aligned>:
 8123a10:	b570      	push	{r4, r5, r6, lr}
 8123a12:	4e0f      	ldr	r6, [pc, #60]	@ (8123a50 <sbrk_aligned+0x40>)
 8123a14:	460c      	mov	r4, r1
 8123a16:	6831      	ldr	r1, [r6, #0]
 8123a18:	4605      	mov	r5, r0
 8123a1a:	b911      	cbnz	r1, 8123a22 <sbrk_aligned+0x12>
 8123a1c:	f001 f832 	bl	8124a84 <_sbrk_r>
 8123a20:	6030      	str	r0, [r6, #0]
 8123a22:	4621      	mov	r1, r4
 8123a24:	4628      	mov	r0, r5
 8123a26:	f001 f82d 	bl	8124a84 <_sbrk_r>
 8123a2a:	1c43      	adds	r3, r0, #1
 8123a2c:	d103      	bne.n	8123a36 <sbrk_aligned+0x26>
 8123a2e:	f04f 34ff 	mov.w	r4, #4294967295
 8123a32:	4620      	mov	r0, r4
 8123a34:	bd70      	pop	{r4, r5, r6, pc}
 8123a36:	1cc4      	adds	r4, r0, #3
 8123a38:	f024 0403 	bic.w	r4, r4, #3
 8123a3c:	42a0      	cmp	r0, r4
 8123a3e:	d0f8      	beq.n	8123a32 <sbrk_aligned+0x22>
 8123a40:	1a21      	subs	r1, r4, r0
 8123a42:	4628      	mov	r0, r5
 8123a44:	f001 f81e 	bl	8124a84 <_sbrk_r>
 8123a48:	3001      	adds	r0, #1
 8123a4a:	d1f2      	bne.n	8123a32 <sbrk_aligned+0x22>
 8123a4c:	e7ef      	b.n	8123a2e <sbrk_aligned+0x1e>
 8123a4e:	bf00      	nop
 8123a50:	1000e50c 	.word	0x1000e50c

08123a54 <_malloc_r>:
 8123a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8123a58:	1ccd      	adds	r5, r1, #3
 8123a5a:	f025 0503 	bic.w	r5, r5, #3
 8123a5e:	3508      	adds	r5, #8
 8123a60:	2d0c      	cmp	r5, #12
 8123a62:	bf38      	it	cc
 8123a64:	250c      	movcc	r5, #12
 8123a66:	2d00      	cmp	r5, #0
 8123a68:	4606      	mov	r6, r0
 8123a6a:	db01      	blt.n	8123a70 <_malloc_r+0x1c>
 8123a6c:	42a9      	cmp	r1, r5
 8123a6e:	d904      	bls.n	8123a7a <_malloc_r+0x26>
 8123a70:	230c      	movs	r3, #12
 8123a72:	6033      	str	r3, [r6, #0]
 8123a74:	2000      	movs	r0, #0
 8123a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8123a7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8123b50 <_malloc_r+0xfc>
 8123a7e:	f000 f869 	bl	8123b54 <__malloc_lock>
 8123a82:	f8d8 3000 	ldr.w	r3, [r8]
 8123a86:	461c      	mov	r4, r3
 8123a88:	bb44      	cbnz	r4, 8123adc <_malloc_r+0x88>
 8123a8a:	4629      	mov	r1, r5
 8123a8c:	4630      	mov	r0, r6
 8123a8e:	f7ff ffbf 	bl	8123a10 <sbrk_aligned>
 8123a92:	1c43      	adds	r3, r0, #1
 8123a94:	4604      	mov	r4, r0
 8123a96:	d158      	bne.n	8123b4a <_malloc_r+0xf6>
 8123a98:	f8d8 4000 	ldr.w	r4, [r8]
 8123a9c:	4627      	mov	r7, r4
 8123a9e:	2f00      	cmp	r7, #0
 8123aa0:	d143      	bne.n	8123b2a <_malloc_r+0xd6>
 8123aa2:	2c00      	cmp	r4, #0
 8123aa4:	d04b      	beq.n	8123b3e <_malloc_r+0xea>
 8123aa6:	6823      	ldr	r3, [r4, #0]
 8123aa8:	4639      	mov	r1, r7
 8123aaa:	4630      	mov	r0, r6
 8123aac:	eb04 0903 	add.w	r9, r4, r3
 8123ab0:	f000 ffe8 	bl	8124a84 <_sbrk_r>
 8123ab4:	4581      	cmp	r9, r0
 8123ab6:	d142      	bne.n	8123b3e <_malloc_r+0xea>
 8123ab8:	6821      	ldr	r1, [r4, #0]
 8123aba:	1a6d      	subs	r5, r5, r1
 8123abc:	4629      	mov	r1, r5
 8123abe:	4630      	mov	r0, r6
 8123ac0:	f7ff ffa6 	bl	8123a10 <sbrk_aligned>
 8123ac4:	3001      	adds	r0, #1
 8123ac6:	d03a      	beq.n	8123b3e <_malloc_r+0xea>
 8123ac8:	6823      	ldr	r3, [r4, #0]
 8123aca:	442b      	add	r3, r5
 8123acc:	6023      	str	r3, [r4, #0]
 8123ace:	f8d8 3000 	ldr.w	r3, [r8]
 8123ad2:	685a      	ldr	r2, [r3, #4]
 8123ad4:	bb62      	cbnz	r2, 8123b30 <_malloc_r+0xdc>
 8123ad6:	f8c8 7000 	str.w	r7, [r8]
 8123ada:	e00f      	b.n	8123afc <_malloc_r+0xa8>
 8123adc:	6822      	ldr	r2, [r4, #0]
 8123ade:	1b52      	subs	r2, r2, r5
 8123ae0:	d420      	bmi.n	8123b24 <_malloc_r+0xd0>
 8123ae2:	2a0b      	cmp	r2, #11
 8123ae4:	d917      	bls.n	8123b16 <_malloc_r+0xc2>
 8123ae6:	1961      	adds	r1, r4, r5
 8123ae8:	42a3      	cmp	r3, r4
 8123aea:	6025      	str	r5, [r4, #0]
 8123aec:	bf18      	it	ne
 8123aee:	6059      	strne	r1, [r3, #4]
 8123af0:	6863      	ldr	r3, [r4, #4]
 8123af2:	bf08      	it	eq
 8123af4:	f8c8 1000 	streq.w	r1, [r8]
 8123af8:	5162      	str	r2, [r4, r5]
 8123afa:	604b      	str	r3, [r1, #4]
 8123afc:	4630      	mov	r0, r6
 8123afe:	f000 f82f 	bl	8123b60 <__malloc_unlock>
 8123b02:	f104 000b 	add.w	r0, r4, #11
 8123b06:	1d23      	adds	r3, r4, #4
 8123b08:	f020 0007 	bic.w	r0, r0, #7
 8123b0c:	1ac2      	subs	r2, r0, r3
 8123b0e:	bf1c      	itt	ne
 8123b10:	1a1b      	subne	r3, r3, r0
 8123b12:	50a3      	strne	r3, [r4, r2]
 8123b14:	e7af      	b.n	8123a76 <_malloc_r+0x22>
 8123b16:	6862      	ldr	r2, [r4, #4]
 8123b18:	42a3      	cmp	r3, r4
 8123b1a:	bf0c      	ite	eq
 8123b1c:	f8c8 2000 	streq.w	r2, [r8]
 8123b20:	605a      	strne	r2, [r3, #4]
 8123b22:	e7eb      	b.n	8123afc <_malloc_r+0xa8>
 8123b24:	4623      	mov	r3, r4
 8123b26:	6864      	ldr	r4, [r4, #4]
 8123b28:	e7ae      	b.n	8123a88 <_malloc_r+0x34>
 8123b2a:	463c      	mov	r4, r7
 8123b2c:	687f      	ldr	r7, [r7, #4]
 8123b2e:	e7b6      	b.n	8123a9e <_malloc_r+0x4a>
 8123b30:	461a      	mov	r2, r3
 8123b32:	685b      	ldr	r3, [r3, #4]
 8123b34:	42a3      	cmp	r3, r4
 8123b36:	d1fb      	bne.n	8123b30 <_malloc_r+0xdc>
 8123b38:	2300      	movs	r3, #0
 8123b3a:	6053      	str	r3, [r2, #4]
 8123b3c:	e7de      	b.n	8123afc <_malloc_r+0xa8>
 8123b3e:	230c      	movs	r3, #12
 8123b40:	6033      	str	r3, [r6, #0]
 8123b42:	4630      	mov	r0, r6
 8123b44:	f000 f80c 	bl	8123b60 <__malloc_unlock>
 8123b48:	e794      	b.n	8123a74 <_malloc_r+0x20>
 8123b4a:	6005      	str	r5, [r0, #0]
 8123b4c:	e7d6      	b.n	8123afc <_malloc_r+0xa8>
 8123b4e:	bf00      	nop
 8123b50:	1000e510 	.word	0x1000e510

08123b54 <__malloc_lock>:
 8123b54:	4801      	ldr	r0, [pc, #4]	@ (8123b5c <__malloc_lock+0x8>)
 8123b56:	f000 bfe2 	b.w	8124b1e <__retarget_lock_acquire_recursive>
 8123b5a:	bf00      	nop
 8123b5c:	1000e654 	.word	0x1000e654

08123b60 <__malloc_unlock>:
 8123b60:	4801      	ldr	r0, [pc, #4]	@ (8123b68 <__malloc_unlock+0x8>)
 8123b62:	f000 bfdd 	b.w	8124b20 <__retarget_lock_release_recursive>
 8123b66:	bf00      	nop
 8123b68:	1000e654 	.word	0x1000e654

08123b6c <rand>:
 8123b6c:	4b16      	ldr	r3, [pc, #88]	@ (8123bc8 <rand+0x5c>)
 8123b6e:	b510      	push	{r4, lr}
 8123b70:	681c      	ldr	r4, [r3, #0]
 8123b72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8123b74:	b9b3      	cbnz	r3, 8123ba4 <rand+0x38>
 8123b76:	2018      	movs	r0, #24
 8123b78:	f7ff ff3a 	bl	81239f0 <malloc>
 8123b7c:	4602      	mov	r2, r0
 8123b7e:	6320      	str	r0, [r4, #48]	@ 0x30
 8123b80:	b920      	cbnz	r0, 8123b8c <rand+0x20>
 8123b82:	4b12      	ldr	r3, [pc, #72]	@ (8123bcc <rand+0x60>)
 8123b84:	4812      	ldr	r0, [pc, #72]	@ (8123bd0 <rand+0x64>)
 8123b86:	2152      	movs	r1, #82	@ 0x52
 8123b88:	f000 ffda 	bl	8124b40 <__assert_func>
 8123b8c:	4911      	ldr	r1, [pc, #68]	@ (8123bd4 <rand+0x68>)
 8123b8e:	4b12      	ldr	r3, [pc, #72]	@ (8123bd8 <rand+0x6c>)
 8123b90:	e9c0 1300 	strd	r1, r3, [r0]
 8123b94:	4b11      	ldr	r3, [pc, #68]	@ (8123bdc <rand+0x70>)
 8123b96:	6083      	str	r3, [r0, #8]
 8123b98:	230b      	movs	r3, #11
 8123b9a:	8183      	strh	r3, [r0, #12]
 8123b9c:	2100      	movs	r1, #0
 8123b9e:	2001      	movs	r0, #1
 8123ba0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8123ba4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8123ba6:	480e      	ldr	r0, [pc, #56]	@ (8123be0 <rand+0x74>)
 8123ba8:	690b      	ldr	r3, [r1, #16]
 8123baa:	694c      	ldr	r4, [r1, #20]
 8123bac:	4a0d      	ldr	r2, [pc, #52]	@ (8123be4 <rand+0x78>)
 8123bae:	4358      	muls	r0, r3
 8123bb0:	fb02 0004 	mla	r0, r2, r4, r0
 8123bb4:	fba3 3202 	umull	r3, r2, r3, r2
 8123bb8:	3301      	adds	r3, #1
 8123bba:	eb40 0002 	adc.w	r0, r0, r2
 8123bbe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8123bc2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8123bc6:	bd10      	pop	{r4, pc}
 8123bc8:	10000040 	.word	0x10000040
 8123bcc:	08128b10 	.word	0x08128b10
 8123bd0:	08128b27 	.word	0x08128b27
 8123bd4:	abcd330e 	.word	0xabcd330e
 8123bd8:	e66d1234 	.word	0xe66d1234
 8123bdc:	0005deec 	.word	0x0005deec
 8123be0:	5851f42d 	.word	0x5851f42d
 8123be4:	4c957f2d 	.word	0x4c957f2d

08123be8 <_strtol_l.constprop.0>:
 8123be8:	2b24      	cmp	r3, #36	@ 0x24
 8123bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8123bee:	4686      	mov	lr, r0
 8123bf0:	4690      	mov	r8, r2
 8123bf2:	d801      	bhi.n	8123bf8 <_strtol_l.constprop.0+0x10>
 8123bf4:	2b01      	cmp	r3, #1
 8123bf6:	d106      	bne.n	8123c06 <_strtol_l.constprop.0+0x1e>
 8123bf8:	f000 ff66 	bl	8124ac8 <__errno>
 8123bfc:	2316      	movs	r3, #22
 8123bfe:	6003      	str	r3, [r0, #0]
 8123c00:	2000      	movs	r0, #0
 8123c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8123c06:	4834      	ldr	r0, [pc, #208]	@ (8123cd8 <_strtol_l.constprop.0+0xf0>)
 8123c08:	460d      	mov	r5, r1
 8123c0a:	462a      	mov	r2, r5
 8123c0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8123c10:	5d06      	ldrb	r6, [r0, r4]
 8123c12:	f016 0608 	ands.w	r6, r6, #8
 8123c16:	d1f8      	bne.n	8123c0a <_strtol_l.constprop.0+0x22>
 8123c18:	2c2d      	cmp	r4, #45	@ 0x2d
 8123c1a:	d12d      	bne.n	8123c78 <_strtol_l.constprop.0+0x90>
 8123c1c:	782c      	ldrb	r4, [r5, #0]
 8123c1e:	2601      	movs	r6, #1
 8123c20:	1c95      	adds	r5, r2, #2
 8123c22:	f033 0210 	bics.w	r2, r3, #16
 8123c26:	d109      	bne.n	8123c3c <_strtol_l.constprop.0+0x54>
 8123c28:	2c30      	cmp	r4, #48	@ 0x30
 8123c2a:	d12a      	bne.n	8123c82 <_strtol_l.constprop.0+0x9a>
 8123c2c:	782a      	ldrb	r2, [r5, #0]
 8123c2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8123c32:	2a58      	cmp	r2, #88	@ 0x58
 8123c34:	d125      	bne.n	8123c82 <_strtol_l.constprop.0+0x9a>
 8123c36:	786c      	ldrb	r4, [r5, #1]
 8123c38:	2310      	movs	r3, #16
 8123c3a:	3502      	adds	r5, #2
 8123c3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8123c40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8123c44:	2200      	movs	r2, #0
 8123c46:	fbbc f9f3 	udiv	r9, ip, r3
 8123c4a:	4610      	mov	r0, r2
 8123c4c:	fb03 ca19 	mls	sl, r3, r9, ip
 8123c50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8123c54:	2f09      	cmp	r7, #9
 8123c56:	d81b      	bhi.n	8123c90 <_strtol_l.constprop.0+0xa8>
 8123c58:	463c      	mov	r4, r7
 8123c5a:	42a3      	cmp	r3, r4
 8123c5c:	dd27      	ble.n	8123cae <_strtol_l.constprop.0+0xc6>
 8123c5e:	1c57      	adds	r7, r2, #1
 8123c60:	d007      	beq.n	8123c72 <_strtol_l.constprop.0+0x8a>
 8123c62:	4581      	cmp	r9, r0
 8123c64:	d320      	bcc.n	8123ca8 <_strtol_l.constprop.0+0xc0>
 8123c66:	d101      	bne.n	8123c6c <_strtol_l.constprop.0+0x84>
 8123c68:	45a2      	cmp	sl, r4
 8123c6a:	db1d      	blt.n	8123ca8 <_strtol_l.constprop.0+0xc0>
 8123c6c:	fb00 4003 	mla	r0, r0, r3, r4
 8123c70:	2201      	movs	r2, #1
 8123c72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8123c76:	e7eb      	b.n	8123c50 <_strtol_l.constprop.0+0x68>
 8123c78:	2c2b      	cmp	r4, #43	@ 0x2b
 8123c7a:	bf04      	itt	eq
 8123c7c:	782c      	ldrbeq	r4, [r5, #0]
 8123c7e:	1c95      	addeq	r5, r2, #2
 8123c80:	e7cf      	b.n	8123c22 <_strtol_l.constprop.0+0x3a>
 8123c82:	2b00      	cmp	r3, #0
 8123c84:	d1da      	bne.n	8123c3c <_strtol_l.constprop.0+0x54>
 8123c86:	2c30      	cmp	r4, #48	@ 0x30
 8123c88:	bf0c      	ite	eq
 8123c8a:	2308      	moveq	r3, #8
 8123c8c:	230a      	movne	r3, #10
 8123c8e:	e7d5      	b.n	8123c3c <_strtol_l.constprop.0+0x54>
 8123c90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8123c94:	2f19      	cmp	r7, #25
 8123c96:	d801      	bhi.n	8123c9c <_strtol_l.constprop.0+0xb4>
 8123c98:	3c37      	subs	r4, #55	@ 0x37
 8123c9a:	e7de      	b.n	8123c5a <_strtol_l.constprop.0+0x72>
 8123c9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8123ca0:	2f19      	cmp	r7, #25
 8123ca2:	d804      	bhi.n	8123cae <_strtol_l.constprop.0+0xc6>
 8123ca4:	3c57      	subs	r4, #87	@ 0x57
 8123ca6:	e7d8      	b.n	8123c5a <_strtol_l.constprop.0+0x72>
 8123ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8123cac:	e7e1      	b.n	8123c72 <_strtol_l.constprop.0+0x8a>
 8123cae:	1c53      	adds	r3, r2, #1
 8123cb0:	d108      	bne.n	8123cc4 <_strtol_l.constprop.0+0xdc>
 8123cb2:	2322      	movs	r3, #34	@ 0x22
 8123cb4:	f8ce 3000 	str.w	r3, [lr]
 8123cb8:	4660      	mov	r0, ip
 8123cba:	f1b8 0f00 	cmp.w	r8, #0
 8123cbe:	d0a0      	beq.n	8123c02 <_strtol_l.constprop.0+0x1a>
 8123cc0:	1e69      	subs	r1, r5, #1
 8123cc2:	e006      	b.n	8123cd2 <_strtol_l.constprop.0+0xea>
 8123cc4:	b106      	cbz	r6, 8123cc8 <_strtol_l.constprop.0+0xe0>
 8123cc6:	4240      	negs	r0, r0
 8123cc8:	f1b8 0f00 	cmp.w	r8, #0
 8123ccc:	d099      	beq.n	8123c02 <_strtol_l.constprop.0+0x1a>
 8123cce:	2a00      	cmp	r2, #0
 8123cd0:	d1f6      	bne.n	8123cc0 <_strtol_l.constprop.0+0xd8>
 8123cd2:	f8c8 1000 	str.w	r1, [r8]
 8123cd6:	e794      	b.n	8123c02 <_strtol_l.constprop.0+0x1a>
 8123cd8:	08128b80 	.word	0x08128b80

08123cdc <strtol>:
 8123cdc:	4613      	mov	r3, r2
 8123cde:	460a      	mov	r2, r1
 8123ce0:	4601      	mov	r1, r0
 8123ce2:	4802      	ldr	r0, [pc, #8]	@ (8123cec <strtol+0x10>)
 8123ce4:	6800      	ldr	r0, [r0, #0]
 8123ce6:	f7ff bf7f 	b.w	8123be8 <_strtol_l.constprop.0>
 8123cea:	bf00      	nop
 8123cec:	10000040 	.word	0x10000040

08123cf0 <__sfputc_r>:
 8123cf0:	6893      	ldr	r3, [r2, #8]
 8123cf2:	3b01      	subs	r3, #1
 8123cf4:	2b00      	cmp	r3, #0
 8123cf6:	b410      	push	{r4}
 8123cf8:	6093      	str	r3, [r2, #8]
 8123cfa:	da08      	bge.n	8123d0e <__sfputc_r+0x1e>
 8123cfc:	6994      	ldr	r4, [r2, #24]
 8123cfe:	42a3      	cmp	r3, r4
 8123d00:	db01      	blt.n	8123d06 <__sfputc_r+0x16>
 8123d02:	290a      	cmp	r1, #10
 8123d04:	d103      	bne.n	8123d0e <__sfputc_r+0x1e>
 8123d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8123d0a:	f000 bcfc 	b.w	8124706 <__swbuf_r>
 8123d0e:	6813      	ldr	r3, [r2, #0]
 8123d10:	1c58      	adds	r0, r3, #1
 8123d12:	6010      	str	r0, [r2, #0]
 8123d14:	7019      	strb	r1, [r3, #0]
 8123d16:	4608      	mov	r0, r1
 8123d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8123d1c:	4770      	bx	lr

08123d1e <__sfputs_r>:
 8123d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8123d20:	4606      	mov	r6, r0
 8123d22:	460f      	mov	r7, r1
 8123d24:	4614      	mov	r4, r2
 8123d26:	18d5      	adds	r5, r2, r3
 8123d28:	42ac      	cmp	r4, r5
 8123d2a:	d101      	bne.n	8123d30 <__sfputs_r+0x12>
 8123d2c:	2000      	movs	r0, #0
 8123d2e:	e007      	b.n	8123d40 <__sfputs_r+0x22>
 8123d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8123d34:	463a      	mov	r2, r7
 8123d36:	4630      	mov	r0, r6
 8123d38:	f7ff ffda 	bl	8123cf0 <__sfputc_r>
 8123d3c:	1c43      	adds	r3, r0, #1
 8123d3e:	d1f3      	bne.n	8123d28 <__sfputs_r+0xa>
 8123d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08123d44 <_vfiprintf_r>:
 8123d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8123d48:	460d      	mov	r5, r1
 8123d4a:	b09d      	sub	sp, #116	@ 0x74
 8123d4c:	4614      	mov	r4, r2
 8123d4e:	4698      	mov	r8, r3
 8123d50:	4606      	mov	r6, r0
 8123d52:	b118      	cbz	r0, 8123d5c <_vfiprintf_r+0x18>
 8123d54:	6a03      	ldr	r3, [r0, #32]
 8123d56:	b90b      	cbnz	r3, 8123d5c <_vfiprintf_r+0x18>
 8123d58:	f000 fbf0 	bl	812453c <__sinit>
 8123d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8123d5e:	07d9      	lsls	r1, r3, #31
 8123d60:	d405      	bmi.n	8123d6e <_vfiprintf_r+0x2a>
 8123d62:	89ab      	ldrh	r3, [r5, #12]
 8123d64:	059a      	lsls	r2, r3, #22
 8123d66:	d402      	bmi.n	8123d6e <_vfiprintf_r+0x2a>
 8123d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8123d6a:	f000 fed8 	bl	8124b1e <__retarget_lock_acquire_recursive>
 8123d6e:	89ab      	ldrh	r3, [r5, #12]
 8123d70:	071b      	lsls	r3, r3, #28
 8123d72:	d501      	bpl.n	8123d78 <_vfiprintf_r+0x34>
 8123d74:	692b      	ldr	r3, [r5, #16]
 8123d76:	b99b      	cbnz	r3, 8123da0 <_vfiprintf_r+0x5c>
 8123d78:	4629      	mov	r1, r5
 8123d7a:	4630      	mov	r0, r6
 8123d7c:	f000 fd02 	bl	8124784 <__swsetup_r>
 8123d80:	b170      	cbz	r0, 8123da0 <_vfiprintf_r+0x5c>
 8123d82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8123d84:	07dc      	lsls	r4, r3, #31
 8123d86:	d504      	bpl.n	8123d92 <_vfiprintf_r+0x4e>
 8123d88:	f04f 30ff 	mov.w	r0, #4294967295
 8123d8c:	b01d      	add	sp, #116	@ 0x74
 8123d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8123d92:	89ab      	ldrh	r3, [r5, #12]
 8123d94:	0598      	lsls	r0, r3, #22
 8123d96:	d4f7      	bmi.n	8123d88 <_vfiprintf_r+0x44>
 8123d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8123d9a:	f000 fec1 	bl	8124b20 <__retarget_lock_release_recursive>
 8123d9e:	e7f3      	b.n	8123d88 <_vfiprintf_r+0x44>
 8123da0:	2300      	movs	r3, #0
 8123da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8123da4:	2320      	movs	r3, #32
 8123da6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8123daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8123dae:	2330      	movs	r3, #48	@ 0x30
 8123db0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8123f60 <_vfiprintf_r+0x21c>
 8123db4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8123db8:	f04f 0901 	mov.w	r9, #1
 8123dbc:	4623      	mov	r3, r4
 8123dbe:	469a      	mov	sl, r3
 8123dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8123dc4:	b10a      	cbz	r2, 8123dca <_vfiprintf_r+0x86>
 8123dc6:	2a25      	cmp	r2, #37	@ 0x25
 8123dc8:	d1f9      	bne.n	8123dbe <_vfiprintf_r+0x7a>
 8123dca:	ebba 0b04 	subs.w	fp, sl, r4
 8123dce:	d00b      	beq.n	8123de8 <_vfiprintf_r+0xa4>
 8123dd0:	465b      	mov	r3, fp
 8123dd2:	4622      	mov	r2, r4
 8123dd4:	4629      	mov	r1, r5
 8123dd6:	4630      	mov	r0, r6
 8123dd8:	f7ff ffa1 	bl	8123d1e <__sfputs_r>
 8123ddc:	3001      	adds	r0, #1
 8123dde:	f000 80a7 	beq.w	8123f30 <_vfiprintf_r+0x1ec>
 8123de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8123de4:	445a      	add	r2, fp
 8123de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8123de8:	f89a 3000 	ldrb.w	r3, [sl]
 8123dec:	2b00      	cmp	r3, #0
 8123dee:	f000 809f 	beq.w	8123f30 <_vfiprintf_r+0x1ec>
 8123df2:	2300      	movs	r3, #0
 8123df4:	f04f 32ff 	mov.w	r2, #4294967295
 8123df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8123dfc:	f10a 0a01 	add.w	sl, sl, #1
 8123e00:	9304      	str	r3, [sp, #16]
 8123e02:	9307      	str	r3, [sp, #28]
 8123e04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8123e08:	931a      	str	r3, [sp, #104]	@ 0x68
 8123e0a:	4654      	mov	r4, sl
 8123e0c:	2205      	movs	r2, #5
 8123e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8123e12:	4853      	ldr	r0, [pc, #332]	@ (8123f60 <_vfiprintf_r+0x21c>)
 8123e14:	f7dc fa64 	bl	81002e0 <memchr>
 8123e18:	9a04      	ldr	r2, [sp, #16]
 8123e1a:	b9d8      	cbnz	r0, 8123e54 <_vfiprintf_r+0x110>
 8123e1c:	06d1      	lsls	r1, r2, #27
 8123e1e:	bf44      	itt	mi
 8123e20:	2320      	movmi	r3, #32
 8123e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8123e26:	0713      	lsls	r3, r2, #28
 8123e28:	bf44      	itt	mi
 8123e2a:	232b      	movmi	r3, #43	@ 0x2b
 8123e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8123e30:	f89a 3000 	ldrb.w	r3, [sl]
 8123e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8123e36:	d015      	beq.n	8123e64 <_vfiprintf_r+0x120>
 8123e38:	9a07      	ldr	r2, [sp, #28]
 8123e3a:	4654      	mov	r4, sl
 8123e3c:	2000      	movs	r0, #0
 8123e3e:	f04f 0c0a 	mov.w	ip, #10
 8123e42:	4621      	mov	r1, r4
 8123e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8123e48:	3b30      	subs	r3, #48	@ 0x30
 8123e4a:	2b09      	cmp	r3, #9
 8123e4c:	d94b      	bls.n	8123ee6 <_vfiprintf_r+0x1a2>
 8123e4e:	b1b0      	cbz	r0, 8123e7e <_vfiprintf_r+0x13a>
 8123e50:	9207      	str	r2, [sp, #28]
 8123e52:	e014      	b.n	8123e7e <_vfiprintf_r+0x13a>
 8123e54:	eba0 0308 	sub.w	r3, r0, r8
 8123e58:	fa09 f303 	lsl.w	r3, r9, r3
 8123e5c:	4313      	orrs	r3, r2
 8123e5e:	9304      	str	r3, [sp, #16]
 8123e60:	46a2      	mov	sl, r4
 8123e62:	e7d2      	b.n	8123e0a <_vfiprintf_r+0xc6>
 8123e64:	9b03      	ldr	r3, [sp, #12]
 8123e66:	1d19      	adds	r1, r3, #4
 8123e68:	681b      	ldr	r3, [r3, #0]
 8123e6a:	9103      	str	r1, [sp, #12]
 8123e6c:	2b00      	cmp	r3, #0
 8123e6e:	bfbb      	ittet	lt
 8123e70:	425b      	neglt	r3, r3
 8123e72:	f042 0202 	orrlt.w	r2, r2, #2
 8123e76:	9307      	strge	r3, [sp, #28]
 8123e78:	9307      	strlt	r3, [sp, #28]
 8123e7a:	bfb8      	it	lt
 8123e7c:	9204      	strlt	r2, [sp, #16]
 8123e7e:	7823      	ldrb	r3, [r4, #0]
 8123e80:	2b2e      	cmp	r3, #46	@ 0x2e
 8123e82:	d10a      	bne.n	8123e9a <_vfiprintf_r+0x156>
 8123e84:	7863      	ldrb	r3, [r4, #1]
 8123e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8123e88:	d132      	bne.n	8123ef0 <_vfiprintf_r+0x1ac>
 8123e8a:	9b03      	ldr	r3, [sp, #12]
 8123e8c:	1d1a      	adds	r2, r3, #4
 8123e8e:	681b      	ldr	r3, [r3, #0]
 8123e90:	9203      	str	r2, [sp, #12]
 8123e92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8123e96:	3402      	adds	r4, #2
 8123e98:	9305      	str	r3, [sp, #20]
 8123e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8123f70 <_vfiprintf_r+0x22c>
 8123e9e:	7821      	ldrb	r1, [r4, #0]
 8123ea0:	2203      	movs	r2, #3
 8123ea2:	4650      	mov	r0, sl
 8123ea4:	f7dc fa1c 	bl	81002e0 <memchr>
 8123ea8:	b138      	cbz	r0, 8123eba <_vfiprintf_r+0x176>
 8123eaa:	9b04      	ldr	r3, [sp, #16]
 8123eac:	eba0 000a 	sub.w	r0, r0, sl
 8123eb0:	2240      	movs	r2, #64	@ 0x40
 8123eb2:	4082      	lsls	r2, r0
 8123eb4:	4313      	orrs	r3, r2
 8123eb6:	3401      	adds	r4, #1
 8123eb8:	9304      	str	r3, [sp, #16]
 8123eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8123ebe:	4829      	ldr	r0, [pc, #164]	@ (8123f64 <_vfiprintf_r+0x220>)
 8123ec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8123ec4:	2206      	movs	r2, #6
 8123ec6:	f7dc fa0b 	bl	81002e0 <memchr>
 8123eca:	2800      	cmp	r0, #0
 8123ecc:	d03f      	beq.n	8123f4e <_vfiprintf_r+0x20a>
 8123ece:	4b26      	ldr	r3, [pc, #152]	@ (8123f68 <_vfiprintf_r+0x224>)
 8123ed0:	bb1b      	cbnz	r3, 8123f1a <_vfiprintf_r+0x1d6>
 8123ed2:	9b03      	ldr	r3, [sp, #12]
 8123ed4:	3307      	adds	r3, #7
 8123ed6:	f023 0307 	bic.w	r3, r3, #7
 8123eda:	3308      	adds	r3, #8
 8123edc:	9303      	str	r3, [sp, #12]
 8123ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8123ee0:	443b      	add	r3, r7
 8123ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8123ee4:	e76a      	b.n	8123dbc <_vfiprintf_r+0x78>
 8123ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8123eea:	460c      	mov	r4, r1
 8123eec:	2001      	movs	r0, #1
 8123eee:	e7a8      	b.n	8123e42 <_vfiprintf_r+0xfe>
 8123ef0:	2300      	movs	r3, #0
 8123ef2:	3401      	adds	r4, #1
 8123ef4:	9305      	str	r3, [sp, #20]
 8123ef6:	4619      	mov	r1, r3
 8123ef8:	f04f 0c0a 	mov.w	ip, #10
 8123efc:	4620      	mov	r0, r4
 8123efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8123f02:	3a30      	subs	r2, #48	@ 0x30
 8123f04:	2a09      	cmp	r2, #9
 8123f06:	d903      	bls.n	8123f10 <_vfiprintf_r+0x1cc>
 8123f08:	2b00      	cmp	r3, #0
 8123f0a:	d0c6      	beq.n	8123e9a <_vfiprintf_r+0x156>
 8123f0c:	9105      	str	r1, [sp, #20]
 8123f0e:	e7c4      	b.n	8123e9a <_vfiprintf_r+0x156>
 8123f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8123f14:	4604      	mov	r4, r0
 8123f16:	2301      	movs	r3, #1
 8123f18:	e7f0      	b.n	8123efc <_vfiprintf_r+0x1b8>
 8123f1a:	ab03      	add	r3, sp, #12
 8123f1c:	9300      	str	r3, [sp, #0]
 8123f1e:	462a      	mov	r2, r5
 8123f20:	4b12      	ldr	r3, [pc, #72]	@ (8123f6c <_vfiprintf_r+0x228>)
 8123f22:	a904      	add	r1, sp, #16
 8123f24:	4630      	mov	r0, r6
 8123f26:	f3af 8000 	nop.w
 8123f2a:	4607      	mov	r7, r0
 8123f2c:	1c78      	adds	r0, r7, #1
 8123f2e:	d1d6      	bne.n	8123ede <_vfiprintf_r+0x19a>
 8123f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8123f32:	07d9      	lsls	r1, r3, #31
 8123f34:	d405      	bmi.n	8123f42 <_vfiprintf_r+0x1fe>
 8123f36:	89ab      	ldrh	r3, [r5, #12]
 8123f38:	059a      	lsls	r2, r3, #22
 8123f3a:	d402      	bmi.n	8123f42 <_vfiprintf_r+0x1fe>
 8123f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8123f3e:	f000 fdef 	bl	8124b20 <__retarget_lock_release_recursive>
 8123f42:	89ab      	ldrh	r3, [r5, #12]
 8123f44:	065b      	lsls	r3, r3, #25
 8123f46:	f53f af1f 	bmi.w	8123d88 <_vfiprintf_r+0x44>
 8123f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8123f4c:	e71e      	b.n	8123d8c <_vfiprintf_r+0x48>
 8123f4e:	ab03      	add	r3, sp, #12
 8123f50:	9300      	str	r3, [sp, #0]
 8123f52:	462a      	mov	r2, r5
 8123f54:	4b05      	ldr	r3, [pc, #20]	@ (8123f6c <_vfiprintf_r+0x228>)
 8123f56:	a904      	add	r1, sp, #16
 8123f58:	4630      	mov	r0, r6
 8123f5a:	f000 f883 	bl	8124064 <_printf_i>
 8123f5e:	e7e4      	b.n	8123f2a <_vfiprintf_r+0x1e6>
 8123f60:	08128c80 	.word	0x08128c80
 8123f64:	08128c8a 	.word	0x08128c8a
 8123f68:	00000000 	.word	0x00000000
 8123f6c:	08123d1f 	.word	0x08123d1f
 8123f70:	08128c86 	.word	0x08128c86

08123f74 <vfiprintf>:
 8123f74:	4613      	mov	r3, r2
 8123f76:	460a      	mov	r2, r1
 8123f78:	4601      	mov	r1, r0
 8123f7a:	4802      	ldr	r0, [pc, #8]	@ (8123f84 <vfiprintf+0x10>)
 8123f7c:	6800      	ldr	r0, [r0, #0]
 8123f7e:	f7ff bee1 	b.w	8123d44 <_vfiprintf_r>
 8123f82:	bf00      	nop
 8123f84:	10000040 	.word	0x10000040

08123f88 <_printf_common>:
 8123f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8123f8c:	4616      	mov	r6, r2
 8123f8e:	4698      	mov	r8, r3
 8123f90:	688a      	ldr	r2, [r1, #8]
 8123f92:	690b      	ldr	r3, [r1, #16]
 8123f94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8123f98:	4293      	cmp	r3, r2
 8123f9a:	bfb8      	it	lt
 8123f9c:	4613      	movlt	r3, r2
 8123f9e:	6033      	str	r3, [r6, #0]
 8123fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8123fa4:	4607      	mov	r7, r0
 8123fa6:	460c      	mov	r4, r1
 8123fa8:	b10a      	cbz	r2, 8123fae <_printf_common+0x26>
 8123faa:	3301      	adds	r3, #1
 8123fac:	6033      	str	r3, [r6, #0]
 8123fae:	6823      	ldr	r3, [r4, #0]
 8123fb0:	0699      	lsls	r1, r3, #26
 8123fb2:	bf42      	ittt	mi
 8123fb4:	6833      	ldrmi	r3, [r6, #0]
 8123fb6:	3302      	addmi	r3, #2
 8123fb8:	6033      	strmi	r3, [r6, #0]
 8123fba:	6825      	ldr	r5, [r4, #0]
 8123fbc:	f015 0506 	ands.w	r5, r5, #6
 8123fc0:	d106      	bne.n	8123fd0 <_printf_common+0x48>
 8123fc2:	f104 0a19 	add.w	sl, r4, #25
 8123fc6:	68e3      	ldr	r3, [r4, #12]
 8123fc8:	6832      	ldr	r2, [r6, #0]
 8123fca:	1a9b      	subs	r3, r3, r2
 8123fcc:	42ab      	cmp	r3, r5
 8123fce:	dc26      	bgt.n	812401e <_printf_common+0x96>
 8123fd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8123fd4:	6822      	ldr	r2, [r4, #0]
 8123fd6:	3b00      	subs	r3, #0
 8123fd8:	bf18      	it	ne
 8123fda:	2301      	movne	r3, #1
 8123fdc:	0692      	lsls	r2, r2, #26
 8123fde:	d42b      	bmi.n	8124038 <_printf_common+0xb0>
 8123fe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8123fe4:	4641      	mov	r1, r8
 8123fe6:	4638      	mov	r0, r7
 8123fe8:	47c8      	blx	r9
 8123fea:	3001      	adds	r0, #1
 8123fec:	d01e      	beq.n	812402c <_printf_common+0xa4>
 8123fee:	6823      	ldr	r3, [r4, #0]
 8123ff0:	6922      	ldr	r2, [r4, #16]
 8123ff2:	f003 0306 	and.w	r3, r3, #6
 8123ff6:	2b04      	cmp	r3, #4
 8123ff8:	bf02      	ittt	eq
 8123ffa:	68e5      	ldreq	r5, [r4, #12]
 8123ffc:	6833      	ldreq	r3, [r6, #0]
 8123ffe:	1aed      	subeq	r5, r5, r3
 8124000:	68a3      	ldr	r3, [r4, #8]
 8124002:	bf0c      	ite	eq
 8124004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8124008:	2500      	movne	r5, #0
 812400a:	4293      	cmp	r3, r2
 812400c:	bfc4      	itt	gt
 812400e:	1a9b      	subgt	r3, r3, r2
 8124010:	18ed      	addgt	r5, r5, r3
 8124012:	2600      	movs	r6, #0
 8124014:	341a      	adds	r4, #26
 8124016:	42b5      	cmp	r5, r6
 8124018:	d11a      	bne.n	8124050 <_printf_common+0xc8>
 812401a:	2000      	movs	r0, #0
 812401c:	e008      	b.n	8124030 <_printf_common+0xa8>
 812401e:	2301      	movs	r3, #1
 8124020:	4652      	mov	r2, sl
 8124022:	4641      	mov	r1, r8
 8124024:	4638      	mov	r0, r7
 8124026:	47c8      	blx	r9
 8124028:	3001      	adds	r0, #1
 812402a:	d103      	bne.n	8124034 <_printf_common+0xac>
 812402c:	f04f 30ff 	mov.w	r0, #4294967295
 8124030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8124034:	3501      	adds	r5, #1
 8124036:	e7c6      	b.n	8123fc6 <_printf_common+0x3e>
 8124038:	18e1      	adds	r1, r4, r3
 812403a:	1c5a      	adds	r2, r3, #1
 812403c:	2030      	movs	r0, #48	@ 0x30
 812403e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8124042:	4422      	add	r2, r4
 8124044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8124048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 812404c:	3302      	adds	r3, #2
 812404e:	e7c7      	b.n	8123fe0 <_printf_common+0x58>
 8124050:	2301      	movs	r3, #1
 8124052:	4622      	mov	r2, r4
 8124054:	4641      	mov	r1, r8
 8124056:	4638      	mov	r0, r7
 8124058:	47c8      	blx	r9
 812405a:	3001      	adds	r0, #1
 812405c:	d0e6      	beq.n	812402c <_printf_common+0xa4>
 812405e:	3601      	adds	r6, #1
 8124060:	e7d9      	b.n	8124016 <_printf_common+0x8e>
	...

08124064 <_printf_i>:
 8124064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8124068:	7e0f      	ldrb	r7, [r1, #24]
 812406a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 812406c:	2f78      	cmp	r7, #120	@ 0x78
 812406e:	4691      	mov	r9, r2
 8124070:	4680      	mov	r8, r0
 8124072:	460c      	mov	r4, r1
 8124074:	469a      	mov	sl, r3
 8124076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 812407a:	d807      	bhi.n	812408c <_printf_i+0x28>
 812407c:	2f62      	cmp	r7, #98	@ 0x62
 812407e:	d80a      	bhi.n	8124096 <_printf_i+0x32>
 8124080:	2f00      	cmp	r7, #0
 8124082:	f000 80d2 	beq.w	812422a <_printf_i+0x1c6>
 8124086:	2f58      	cmp	r7, #88	@ 0x58
 8124088:	f000 80b9 	beq.w	81241fe <_printf_i+0x19a>
 812408c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8124090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8124094:	e03a      	b.n	812410c <_printf_i+0xa8>
 8124096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 812409a:	2b15      	cmp	r3, #21
 812409c:	d8f6      	bhi.n	812408c <_printf_i+0x28>
 812409e:	a101      	add	r1, pc, #4	@ (adr r1, 81240a4 <_printf_i+0x40>)
 81240a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81240a4:	081240fd 	.word	0x081240fd
 81240a8:	08124111 	.word	0x08124111
 81240ac:	0812408d 	.word	0x0812408d
 81240b0:	0812408d 	.word	0x0812408d
 81240b4:	0812408d 	.word	0x0812408d
 81240b8:	0812408d 	.word	0x0812408d
 81240bc:	08124111 	.word	0x08124111
 81240c0:	0812408d 	.word	0x0812408d
 81240c4:	0812408d 	.word	0x0812408d
 81240c8:	0812408d 	.word	0x0812408d
 81240cc:	0812408d 	.word	0x0812408d
 81240d0:	08124211 	.word	0x08124211
 81240d4:	0812413b 	.word	0x0812413b
 81240d8:	081241cb 	.word	0x081241cb
 81240dc:	0812408d 	.word	0x0812408d
 81240e0:	0812408d 	.word	0x0812408d
 81240e4:	08124233 	.word	0x08124233
 81240e8:	0812408d 	.word	0x0812408d
 81240ec:	0812413b 	.word	0x0812413b
 81240f0:	0812408d 	.word	0x0812408d
 81240f4:	0812408d 	.word	0x0812408d
 81240f8:	081241d3 	.word	0x081241d3
 81240fc:	6833      	ldr	r3, [r6, #0]
 81240fe:	1d1a      	adds	r2, r3, #4
 8124100:	681b      	ldr	r3, [r3, #0]
 8124102:	6032      	str	r2, [r6, #0]
 8124104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8124108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 812410c:	2301      	movs	r3, #1
 812410e:	e09d      	b.n	812424c <_printf_i+0x1e8>
 8124110:	6833      	ldr	r3, [r6, #0]
 8124112:	6820      	ldr	r0, [r4, #0]
 8124114:	1d19      	adds	r1, r3, #4
 8124116:	6031      	str	r1, [r6, #0]
 8124118:	0606      	lsls	r6, r0, #24
 812411a:	d501      	bpl.n	8124120 <_printf_i+0xbc>
 812411c:	681d      	ldr	r5, [r3, #0]
 812411e:	e003      	b.n	8124128 <_printf_i+0xc4>
 8124120:	0645      	lsls	r5, r0, #25
 8124122:	d5fb      	bpl.n	812411c <_printf_i+0xb8>
 8124124:	f9b3 5000 	ldrsh.w	r5, [r3]
 8124128:	2d00      	cmp	r5, #0
 812412a:	da03      	bge.n	8124134 <_printf_i+0xd0>
 812412c:	232d      	movs	r3, #45	@ 0x2d
 812412e:	426d      	negs	r5, r5
 8124130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8124134:	4859      	ldr	r0, [pc, #356]	@ (812429c <_printf_i+0x238>)
 8124136:	230a      	movs	r3, #10
 8124138:	e011      	b.n	812415e <_printf_i+0xfa>
 812413a:	6821      	ldr	r1, [r4, #0]
 812413c:	6833      	ldr	r3, [r6, #0]
 812413e:	0608      	lsls	r0, r1, #24
 8124140:	f853 5b04 	ldr.w	r5, [r3], #4
 8124144:	d402      	bmi.n	812414c <_printf_i+0xe8>
 8124146:	0649      	lsls	r1, r1, #25
 8124148:	bf48      	it	mi
 812414a:	b2ad      	uxthmi	r5, r5
 812414c:	2f6f      	cmp	r7, #111	@ 0x6f
 812414e:	4853      	ldr	r0, [pc, #332]	@ (812429c <_printf_i+0x238>)
 8124150:	6033      	str	r3, [r6, #0]
 8124152:	bf14      	ite	ne
 8124154:	230a      	movne	r3, #10
 8124156:	2308      	moveq	r3, #8
 8124158:	2100      	movs	r1, #0
 812415a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 812415e:	6866      	ldr	r6, [r4, #4]
 8124160:	60a6      	str	r6, [r4, #8]
 8124162:	2e00      	cmp	r6, #0
 8124164:	bfa2      	ittt	ge
 8124166:	6821      	ldrge	r1, [r4, #0]
 8124168:	f021 0104 	bicge.w	r1, r1, #4
 812416c:	6021      	strge	r1, [r4, #0]
 812416e:	b90d      	cbnz	r5, 8124174 <_printf_i+0x110>
 8124170:	2e00      	cmp	r6, #0
 8124172:	d04b      	beq.n	812420c <_printf_i+0x1a8>
 8124174:	4616      	mov	r6, r2
 8124176:	fbb5 f1f3 	udiv	r1, r5, r3
 812417a:	fb03 5711 	mls	r7, r3, r1, r5
 812417e:	5dc7      	ldrb	r7, [r0, r7]
 8124180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8124184:	462f      	mov	r7, r5
 8124186:	42bb      	cmp	r3, r7
 8124188:	460d      	mov	r5, r1
 812418a:	d9f4      	bls.n	8124176 <_printf_i+0x112>
 812418c:	2b08      	cmp	r3, #8
 812418e:	d10b      	bne.n	81241a8 <_printf_i+0x144>
 8124190:	6823      	ldr	r3, [r4, #0]
 8124192:	07df      	lsls	r7, r3, #31
 8124194:	d508      	bpl.n	81241a8 <_printf_i+0x144>
 8124196:	6923      	ldr	r3, [r4, #16]
 8124198:	6861      	ldr	r1, [r4, #4]
 812419a:	4299      	cmp	r1, r3
 812419c:	bfde      	ittt	le
 812419e:	2330      	movle	r3, #48	@ 0x30
 81241a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 81241a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 81241a8:	1b92      	subs	r2, r2, r6
 81241aa:	6122      	str	r2, [r4, #16]
 81241ac:	f8cd a000 	str.w	sl, [sp]
 81241b0:	464b      	mov	r3, r9
 81241b2:	aa03      	add	r2, sp, #12
 81241b4:	4621      	mov	r1, r4
 81241b6:	4640      	mov	r0, r8
 81241b8:	f7ff fee6 	bl	8123f88 <_printf_common>
 81241bc:	3001      	adds	r0, #1
 81241be:	d14a      	bne.n	8124256 <_printf_i+0x1f2>
 81241c0:	f04f 30ff 	mov.w	r0, #4294967295
 81241c4:	b004      	add	sp, #16
 81241c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81241ca:	6823      	ldr	r3, [r4, #0]
 81241cc:	f043 0320 	orr.w	r3, r3, #32
 81241d0:	6023      	str	r3, [r4, #0]
 81241d2:	4833      	ldr	r0, [pc, #204]	@ (81242a0 <_printf_i+0x23c>)
 81241d4:	2778      	movs	r7, #120	@ 0x78
 81241d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81241da:	6823      	ldr	r3, [r4, #0]
 81241dc:	6831      	ldr	r1, [r6, #0]
 81241de:	061f      	lsls	r7, r3, #24
 81241e0:	f851 5b04 	ldr.w	r5, [r1], #4
 81241e4:	d402      	bmi.n	81241ec <_printf_i+0x188>
 81241e6:	065f      	lsls	r7, r3, #25
 81241e8:	bf48      	it	mi
 81241ea:	b2ad      	uxthmi	r5, r5
 81241ec:	6031      	str	r1, [r6, #0]
 81241ee:	07d9      	lsls	r1, r3, #31
 81241f0:	bf44      	itt	mi
 81241f2:	f043 0320 	orrmi.w	r3, r3, #32
 81241f6:	6023      	strmi	r3, [r4, #0]
 81241f8:	b11d      	cbz	r5, 8124202 <_printf_i+0x19e>
 81241fa:	2310      	movs	r3, #16
 81241fc:	e7ac      	b.n	8124158 <_printf_i+0xf4>
 81241fe:	4827      	ldr	r0, [pc, #156]	@ (812429c <_printf_i+0x238>)
 8124200:	e7e9      	b.n	81241d6 <_printf_i+0x172>
 8124202:	6823      	ldr	r3, [r4, #0]
 8124204:	f023 0320 	bic.w	r3, r3, #32
 8124208:	6023      	str	r3, [r4, #0]
 812420a:	e7f6      	b.n	81241fa <_printf_i+0x196>
 812420c:	4616      	mov	r6, r2
 812420e:	e7bd      	b.n	812418c <_printf_i+0x128>
 8124210:	6833      	ldr	r3, [r6, #0]
 8124212:	6825      	ldr	r5, [r4, #0]
 8124214:	6961      	ldr	r1, [r4, #20]
 8124216:	1d18      	adds	r0, r3, #4
 8124218:	6030      	str	r0, [r6, #0]
 812421a:	062e      	lsls	r6, r5, #24
 812421c:	681b      	ldr	r3, [r3, #0]
 812421e:	d501      	bpl.n	8124224 <_printf_i+0x1c0>
 8124220:	6019      	str	r1, [r3, #0]
 8124222:	e002      	b.n	812422a <_printf_i+0x1c6>
 8124224:	0668      	lsls	r0, r5, #25
 8124226:	d5fb      	bpl.n	8124220 <_printf_i+0x1bc>
 8124228:	8019      	strh	r1, [r3, #0]
 812422a:	2300      	movs	r3, #0
 812422c:	6123      	str	r3, [r4, #16]
 812422e:	4616      	mov	r6, r2
 8124230:	e7bc      	b.n	81241ac <_printf_i+0x148>
 8124232:	6833      	ldr	r3, [r6, #0]
 8124234:	1d1a      	adds	r2, r3, #4
 8124236:	6032      	str	r2, [r6, #0]
 8124238:	681e      	ldr	r6, [r3, #0]
 812423a:	6862      	ldr	r2, [r4, #4]
 812423c:	2100      	movs	r1, #0
 812423e:	4630      	mov	r0, r6
 8124240:	f7dc f84e 	bl	81002e0 <memchr>
 8124244:	b108      	cbz	r0, 812424a <_printf_i+0x1e6>
 8124246:	1b80      	subs	r0, r0, r6
 8124248:	6060      	str	r0, [r4, #4]
 812424a:	6863      	ldr	r3, [r4, #4]
 812424c:	6123      	str	r3, [r4, #16]
 812424e:	2300      	movs	r3, #0
 8124250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8124254:	e7aa      	b.n	81241ac <_printf_i+0x148>
 8124256:	6923      	ldr	r3, [r4, #16]
 8124258:	4632      	mov	r2, r6
 812425a:	4649      	mov	r1, r9
 812425c:	4640      	mov	r0, r8
 812425e:	47d0      	blx	sl
 8124260:	3001      	adds	r0, #1
 8124262:	d0ad      	beq.n	81241c0 <_printf_i+0x15c>
 8124264:	6823      	ldr	r3, [r4, #0]
 8124266:	079b      	lsls	r3, r3, #30
 8124268:	d413      	bmi.n	8124292 <_printf_i+0x22e>
 812426a:	68e0      	ldr	r0, [r4, #12]
 812426c:	9b03      	ldr	r3, [sp, #12]
 812426e:	4298      	cmp	r0, r3
 8124270:	bfb8      	it	lt
 8124272:	4618      	movlt	r0, r3
 8124274:	e7a6      	b.n	81241c4 <_printf_i+0x160>
 8124276:	2301      	movs	r3, #1
 8124278:	4632      	mov	r2, r6
 812427a:	4649      	mov	r1, r9
 812427c:	4640      	mov	r0, r8
 812427e:	47d0      	blx	sl
 8124280:	3001      	adds	r0, #1
 8124282:	d09d      	beq.n	81241c0 <_printf_i+0x15c>
 8124284:	3501      	adds	r5, #1
 8124286:	68e3      	ldr	r3, [r4, #12]
 8124288:	9903      	ldr	r1, [sp, #12]
 812428a:	1a5b      	subs	r3, r3, r1
 812428c:	42ab      	cmp	r3, r5
 812428e:	dcf2      	bgt.n	8124276 <_printf_i+0x212>
 8124290:	e7eb      	b.n	812426a <_printf_i+0x206>
 8124292:	2500      	movs	r5, #0
 8124294:	f104 0619 	add.w	r6, r4, #25
 8124298:	e7f5      	b.n	8124286 <_printf_i+0x222>
 812429a:	bf00      	nop
 812429c:	08128c91 	.word	0x08128c91
 81242a0:	08128ca2 	.word	0x08128ca2

081242a4 <__sflush_r>:
 81242a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81242a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81242ac:	0716      	lsls	r6, r2, #28
 81242ae:	4605      	mov	r5, r0
 81242b0:	460c      	mov	r4, r1
 81242b2:	d454      	bmi.n	812435e <__sflush_r+0xba>
 81242b4:	684b      	ldr	r3, [r1, #4]
 81242b6:	2b00      	cmp	r3, #0
 81242b8:	dc02      	bgt.n	81242c0 <__sflush_r+0x1c>
 81242ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 81242bc:	2b00      	cmp	r3, #0
 81242be:	dd48      	ble.n	8124352 <__sflush_r+0xae>
 81242c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81242c2:	2e00      	cmp	r6, #0
 81242c4:	d045      	beq.n	8124352 <__sflush_r+0xae>
 81242c6:	2300      	movs	r3, #0
 81242c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81242cc:	682f      	ldr	r7, [r5, #0]
 81242ce:	6a21      	ldr	r1, [r4, #32]
 81242d0:	602b      	str	r3, [r5, #0]
 81242d2:	d030      	beq.n	8124336 <__sflush_r+0x92>
 81242d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81242d6:	89a3      	ldrh	r3, [r4, #12]
 81242d8:	0759      	lsls	r1, r3, #29
 81242da:	d505      	bpl.n	81242e8 <__sflush_r+0x44>
 81242dc:	6863      	ldr	r3, [r4, #4]
 81242de:	1ad2      	subs	r2, r2, r3
 81242e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81242e2:	b10b      	cbz	r3, 81242e8 <__sflush_r+0x44>
 81242e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81242e6:	1ad2      	subs	r2, r2, r3
 81242e8:	2300      	movs	r3, #0
 81242ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81242ec:	6a21      	ldr	r1, [r4, #32]
 81242ee:	4628      	mov	r0, r5
 81242f0:	47b0      	blx	r6
 81242f2:	1c43      	adds	r3, r0, #1
 81242f4:	89a3      	ldrh	r3, [r4, #12]
 81242f6:	d106      	bne.n	8124306 <__sflush_r+0x62>
 81242f8:	6829      	ldr	r1, [r5, #0]
 81242fa:	291d      	cmp	r1, #29
 81242fc:	d82b      	bhi.n	8124356 <__sflush_r+0xb2>
 81242fe:	4a2a      	ldr	r2, [pc, #168]	@ (81243a8 <__sflush_r+0x104>)
 8124300:	410a      	asrs	r2, r1
 8124302:	07d6      	lsls	r6, r2, #31
 8124304:	d427      	bmi.n	8124356 <__sflush_r+0xb2>
 8124306:	2200      	movs	r2, #0
 8124308:	6062      	str	r2, [r4, #4]
 812430a:	04d9      	lsls	r1, r3, #19
 812430c:	6922      	ldr	r2, [r4, #16]
 812430e:	6022      	str	r2, [r4, #0]
 8124310:	d504      	bpl.n	812431c <__sflush_r+0x78>
 8124312:	1c42      	adds	r2, r0, #1
 8124314:	d101      	bne.n	812431a <__sflush_r+0x76>
 8124316:	682b      	ldr	r3, [r5, #0]
 8124318:	b903      	cbnz	r3, 812431c <__sflush_r+0x78>
 812431a:	6560      	str	r0, [r4, #84]	@ 0x54
 812431c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 812431e:	602f      	str	r7, [r5, #0]
 8124320:	b1b9      	cbz	r1, 8124352 <__sflush_r+0xae>
 8124322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8124326:	4299      	cmp	r1, r3
 8124328:	d002      	beq.n	8124330 <__sflush_r+0x8c>
 812432a:	4628      	mov	r0, r5
 812432c:	f000 fc26 	bl	8124b7c <_free_r>
 8124330:	2300      	movs	r3, #0
 8124332:	6363      	str	r3, [r4, #52]	@ 0x34
 8124334:	e00d      	b.n	8124352 <__sflush_r+0xae>
 8124336:	2301      	movs	r3, #1
 8124338:	4628      	mov	r0, r5
 812433a:	47b0      	blx	r6
 812433c:	4602      	mov	r2, r0
 812433e:	1c50      	adds	r0, r2, #1
 8124340:	d1c9      	bne.n	81242d6 <__sflush_r+0x32>
 8124342:	682b      	ldr	r3, [r5, #0]
 8124344:	2b00      	cmp	r3, #0
 8124346:	d0c6      	beq.n	81242d6 <__sflush_r+0x32>
 8124348:	2b1d      	cmp	r3, #29
 812434a:	d001      	beq.n	8124350 <__sflush_r+0xac>
 812434c:	2b16      	cmp	r3, #22
 812434e:	d11e      	bne.n	812438e <__sflush_r+0xea>
 8124350:	602f      	str	r7, [r5, #0]
 8124352:	2000      	movs	r0, #0
 8124354:	e022      	b.n	812439c <__sflush_r+0xf8>
 8124356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 812435a:	b21b      	sxth	r3, r3
 812435c:	e01b      	b.n	8124396 <__sflush_r+0xf2>
 812435e:	690f      	ldr	r7, [r1, #16]
 8124360:	2f00      	cmp	r7, #0
 8124362:	d0f6      	beq.n	8124352 <__sflush_r+0xae>
 8124364:	0793      	lsls	r3, r2, #30
 8124366:	680e      	ldr	r6, [r1, #0]
 8124368:	bf08      	it	eq
 812436a:	694b      	ldreq	r3, [r1, #20]
 812436c:	600f      	str	r7, [r1, #0]
 812436e:	bf18      	it	ne
 8124370:	2300      	movne	r3, #0
 8124372:	eba6 0807 	sub.w	r8, r6, r7
 8124376:	608b      	str	r3, [r1, #8]
 8124378:	f1b8 0f00 	cmp.w	r8, #0
 812437c:	dde9      	ble.n	8124352 <__sflush_r+0xae>
 812437e:	6a21      	ldr	r1, [r4, #32]
 8124380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8124382:	4643      	mov	r3, r8
 8124384:	463a      	mov	r2, r7
 8124386:	4628      	mov	r0, r5
 8124388:	47b0      	blx	r6
 812438a:	2800      	cmp	r0, #0
 812438c:	dc08      	bgt.n	81243a0 <__sflush_r+0xfc>
 812438e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8124392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8124396:	81a3      	strh	r3, [r4, #12]
 8124398:	f04f 30ff 	mov.w	r0, #4294967295
 812439c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81243a0:	4407      	add	r7, r0
 81243a2:	eba8 0800 	sub.w	r8, r8, r0
 81243a6:	e7e7      	b.n	8124378 <__sflush_r+0xd4>
 81243a8:	dfbffffe 	.word	0xdfbffffe

081243ac <_fflush_r>:
 81243ac:	b538      	push	{r3, r4, r5, lr}
 81243ae:	690b      	ldr	r3, [r1, #16]
 81243b0:	4605      	mov	r5, r0
 81243b2:	460c      	mov	r4, r1
 81243b4:	b913      	cbnz	r3, 81243bc <_fflush_r+0x10>
 81243b6:	2500      	movs	r5, #0
 81243b8:	4628      	mov	r0, r5
 81243ba:	bd38      	pop	{r3, r4, r5, pc}
 81243bc:	b118      	cbz	r0, 81243c6 <_fflush_r+0x1a>
 81243be:	6a03      	ldr	r3, [r0, #32]
 81243c0:	b90b      	cbnz	r3, 81243c6 <_fflush_r+0x1a>
 81243c2:	f000 f8bb 	bl	812453c <__sinit>
 81243c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81243ca:	2b00      	cmp	r3, #0
 81243cc:	d0f3      	beq.n	81243b6 <_fflush_r+0xa>
 81243ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 81243d0:	07d0      	lsls	r0, r2, #31
 81243d2:	d404      	bmi.n	81243de <_fflush_r+0x32>
 81243d4:	0599      	lsls	r1, r3, #22
 81243d6:	d402      	bmi.n	81243de <_fflush_r+0x32>
 81243d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81243da:	f000 fba0 	bl	8124b1e <__retarget_lock_acquire_recursive>
 81243de:	4628      	mov	r0, r5
 81243e0:	4621      	mov	r1, r4
 81243e2:	f7ff ff5f 	bl	81242a4 <__sflush_r>
 81243e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81243e8:	07da      	lsls	r2, r3, #31
 81243ea:	4605      	mov	r5, r0
 81243ec:	d4e4      	bmi.n	81243b8 <_fflush_r+0xc>
 81243ee:	89a3      	ldrh	r3, [r4, #12]
 81243f0:	059b      	lsls	r3, r3, #22
 81243f2:	d4e1      	bmi.n	81243b8 <_fflush_r+0xc>
 81243f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81243f6:	f000 fb93 	bl	8124b20 <__retarget_lock_release_recursive>
 81243fa:	e7dd      	b.n	81243b8 <_fflush_r+0xc>

081243fc <fflush>:
 81243fc:	4601      	mov	r1, r0
 81243fe:	b920      	cbnz	r0, 812440a <fflush+0xe>
 8124400:	4a04      	ldr	r2, [pc, #16]	@ (8124414 <fflush+0x18>)
 8124402:	4905      	ldr	r1, [pc, #20]	@ (8124418 <fflush+0x1c>)
 8124404:	4805      	ldr	r0, [pc, #20]	@ (812441c <fflush+0x20>)
 8124406:	f000 b8b1 	b.w	812456c <_fwalk_sglue>
 812440a:	4b05      	ldr	r3, [pc, #20]	@ (8124420 <fflush+0x24>)
 812440c:	6818      	ldr	r0, [r3, #0]
 812440e:	f7ff bfcd 	b.w	81243ac <_fflush_r>
 8124412:	bf00      	nop
 8124414:	10000034 	.word	0x10000034
 8124418:	081243ad 	.word	0x081243ad
 812441c:	10000044 	.word	0x10000044
 8124420:	10000040 	.word	0x10000040

08124424 <std>:
 8124424:	2300      	movs	r3, #0
 8124426:	b510      	push	{r4, lr}
 8124428:	4604      	mov	r4, r0
 812442a:	e9c0 3300 	strd	r3, r3, [r0]
 812442e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8124432:	6083      	str	r3, [r0, #8]
 8124434:	8181      	strh	r1, [r0, #12]
 8124436:	6643      	str	r3, [r0, #100]	@ 0x64
 8124438:	81c2      	strh	r2, [r0, #14]
 812443a:	6183      	str	r3, [r0, #24]
 812443c:	4619      	mov	r1, r3
 812443e:	2208      	movs	r2, #8
 8124440:	305c      	adds	r0, #92	@ 0x5c
 8124442:	f000 fa1f 	bl	8124884 <memset>
 8124446:	4b0d      	ldr	r3, [pc, #52]	@ (812447c <std+0x58>)
 8124448:	6263      	str	r3, [r4, #36]	@ 0x24
 812444a:	4b0d      	ldr	r3, [pc, #52]	@ (8124480 <std+0x5c>)
 812444c:	62a3      	str	r3, [r4, #40]	@ 0x28
 812444e:	4b0d      	ldr	r3, [pc, #52]	@ (8124484 <std+0x60>)
 8124450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8124452:	4b0d      	ldr	r3, [pc, #52]	@ (8124488 <std+0x64>)
 8124454:	6323      	str	r3, [r4, #48]	@ 0x30
 8124456:	4b0d      	ldr	r3, [pc, #52]	@ (812448c <std+0x68>)
 8124458:	6224      	str	r4, [r4, #32]
 812445a:	429c      	cmp	r4, r3
 812445c:	d006      	beq.n	812446c <std+0x48>
 812445e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8124462:	4294      	cmp	r4, r2
 8124464:	d002      	beq.n	812446c <std+0x48>
 8124466:	33d0      	adds	r3, #208	@ 0xd0
 8124468:	429c      	cmp	r4, r3
 812446a:	d105      	bne.n	8124478 <std+0x54>
 812446c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8124470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8124474:	f000 bb52 	b.w	8124b1c <__retarget_lock_init_recursive>
 8124478:	bd10      	pop	{r4, pc}
 812447a:	bf00      	nop
 812447c:	08124681 	.word	0x08124681
 8124480:	081246a3 	.word	0x081246a3
 8124484:	081246db 	.word	0x081246db
 8124488:	081246ff 	.word	0x081246ff
 812448c:	1000e514 	.word	0x1000e514

08124490 <stdio_exit_handler>:
 8124490:	4a02      	ldr	r2, [pc, #8]	@ (812449c <stdio_exit_handler+0xc>)
 8124492:	4903      	ldr	r1, [pc, #12]	@ (81244a0 <stdio_exit_handler+0x10>)
 8124494:	4803      	ldr	r0, [pc, #12]	@ (81244a4 <stdio_exit_handler+0x14>)
 8124496:	f000 b869 	b.w	812456c <_fwalk_sglue>
 812449a:	bf00      	nop
 812449c:	10000034 	.word	0x10000034
 81244a0:	081243ad 	.word	0x081243ad
 81244a4:	10000044 	.word	0x10000044

081244a8 <cleanup_stdio>:
 81244a8:	6841      	ldr	r1, [r0, #4]
 81244aa:	4b0c      	ldr	r3, [pc, #48]	@ (81244dc <cleanup_stdio+0x34>)
 81244ac:	4299      	cmp	r1, r3
 81244ae:	b510      	push	{r4, lr}
 81244b0:	4604      	mov	r4, r0
 81244b2:	d001      	beq.n	81244b8 <cleanup_stdio+0x10>
 81244b4:	f7ff ff7a 	bl	81243ac <_fflush_r>
 81244b8:	68a1      	ldr	r1, [r4, #8]
 81244ba:	4b09      	ldr	r3, [pc, #36]	@ (81244e0 <cleanup_stdio+0x38>)
 81244bc:	4299      	cmp	r1, r3
 81244be:	d002      	beq.n	81244c6 <cleanup_stdio+0x1e>
 81244c0:	4620      	mov	r0, r4
 81244c2:	f7ff ff73 	bl	81243ac <_fflush_r>
 81244c6:	68e1      	ldr	r1, [r4, #12]
 81244c8:	4b06      	ldr	r3, [pc, #24]	@ (81244e4 <cleanup_stdio+0x3c>)
 81244ca:	4299      	cmp	r1, r3
 81244cc:	d004      	beq.n	81244d8 <cleanup_stdio+0x30>
 81244ce:	4620      	mov	r0, r4
 81244d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81244d4:	f7ff bf6a 	b.w	81243ac <_fflush_r>
 81244d8:	bd10      	pop	{r4, pc}
 81244da:	bf00      	nop
 81244dc:	1000e514 	.word	0x1000e514
 81244e0:	1000e57c 	.word	0x1000e57c
 81244e4:	1000e5e4 	.word	0x1000e5e4

081244e8 <global_stdio_init.part.0>:
 81244e8:	b510      	push	{r4, lr}
 81244ea:	4b0b      	ldr	r3, [pc, #44]	@ (8124518 <global_stdio_init.part.0+0x30>)
 81244ec:	4c0b      	ldr	r4, [pc, #44]	@ (812451c <global_stdio_init.part.0+0x34>)
 81244ee:	4a0c      	ldr	r2, [pc, #48]	@ (8124520 <global_stdio_init.part.0+0x38>)
 81244f0:	601a      	str	r2, [r3, #0]
 81244f2:	4620      	mov	r0, r4
 81244f4:	2200      	movs	r2, #0
 81244f6:	2104      	movs	r1, #4
 81244f8:	f7ff ff94 	bl	8124424 <std>
 81244fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8124500:	2201      	movs	r2, #1
 8124502:	2109      	movs	r1, #9
 8124504:	f7ff ff8e 	bl	8124424 <std>
 8124508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 812450c:	2202      	movs	r2, #2
 812450e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8124512:	2112      	movs	r1, #18
 8124514:	f7ff bf86 	b.w	8124424 <std>
 8124518:	1000e64c 	.word	0x1000e64c
 812451c:	1000e514 	.word	0x1000e514
 8124520:	08124491 	.word	0x08124491

08124524 <__sfp_lock_acquire>:
 8124524:	4801      	ldr	r0, [pc, #4]	@ (812452c <__sfp_lock_acquire+0x8>)
 8124526:	f000 bafa 	b.w	8124b1e <__retarget_lock_acquire_recursive>
 812452a:	bf00      	nop
 812452c:	1000e655 	.word	0x1000e655

08124530 <__sfp_lock_release>:
 8124530:	4801      	ldr	r0, [pc, #4]	@ (8124538 <__sfp_lock_release+0x8>)
 8124532:	f000 baf5 	b.w	8124b20 <__retarget_lock_release_recursive>
 8124536:	bf00      	nop
 8124538:	1000e655 	.word	0x1000e655

0812453c <__sinit>:
 812453c:	b510      	push	{r4, lr}
 812453e:	4604      	mov	r4, r0
 8124540:	f7ff fff0 	bl	8124524 <__sfp_lock_acquire>
 8124544:	6a23      	ldr	r3, [r4, #32]
 8124546:	b11b      	cbz	r3, 8124550 <__sinit+0x14>
 8124548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 812454c:	f7ff bff0 	b.w	8124530 <__sfp_lock_release>
 8124550:	4b04      	ldr	r3, [pc, #16]	@ (8124564 <__sinit+0x28>)
 8124552:	6223      	str	r3, [r4, #32]
 8124554:	4b04      	ldr	r3, [pc, #16]	@ (8124568 <__sinit+0x2c>)
 8124556:	681b      	ldr	r3, [r3, #0]
 8124558:	2b00      	cmp	r3, #0
 812455a:	d1f5      	bne.n	8124548 <__sinit+0xc>
 812455c:	f7ff ffc4 	bl	81244e8 <global_stdio_init.part.0>
 8124560:	e7f2      	b.n	8124548 <__sinit+0xc>
 8124562:	bf00      	nop
 8124564:	081244a9 	.word	0x081244a9
 8124568:	1000e64c 	.word	0x1000e64c

0812456c <_fwalk_sglue>:
 812456c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8124570:	4607      	mov	r7, r0
 8124572:	4688      	mov	r8, r1
 8124574:	4614      	mov	r4, r2
 8124576:	2600      	movs	r6, #0
 8124578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 812457c:	f1b9 0901 	subs.w	r9, r9, #1
 8124580:	d505      	bpl.n	812458e <_fwalk_sglue+0x22>
 8124582:	6824      	ldr	r4, [r4, #0]
 8124584:	2c00      	cmp	r4, #0
 8124586:	d1f7      	bne.n	8124578 <_fwalk_sglue+0xc>
 8124588:	4630      	mov	r0, r6
 812458a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 812458e:	89ab      	ldrh	r3, [r5, #12]
 8124590:	2b01      	cmp	r3, #1
 8124592:	d907      	bls.n	81245a4 <_fwalk_sglue+0x38>
 8124594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8124598:	3301      	adds	r3, #1
 812459a:	d003      	beq.n	81245a4 <_fwalk_sglue+0x38>
 812459c:	4629      	mov	r1, r5
 812459e:	4638      	mov	r0, r7
 81245a0:	47c0      	blx	r8
 81245a2:	4306      	orrs	r6, r0
 81245a4:	3568      	adds	r5, #104	@ 0x68
 81245a6:	e7e9      	b.n	812457c <_fwalk_sglue+0x10>

081245a8 <_fwrite_r>:
 81245a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81245ac:	9c08      	ldr	r4, [sp, #32]
 81245ae:	468a      	mov	sl, r1
 81245b0:	4690      	mov	r8, r2
 81245b2:	fb02 f903 	mul.w	r9, r2, r3
 81245b6:	4606      	mov	r6, r0
 81245b8:	b118      	cbz	r0, 81245c2 <_fwrite_r+0x1a>
 81245ba:	6a03      	ldr	r3, [r0, #32]
 81245bc:	b90b      	cbnz	r3, 81245c2 <_fwrite_r+0x1a>
 81245be:	f7ff ffbd 	bl	812453c <__sinit>
 81245c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81245c4:	07dd      	lsls	r5, r3, #31
 81245c6:	d405      	bmi.n	81245d4 <_fwrite_r+0x2c>
 81245c8:	89a3      	ldrh	r3, [r4, #12]
 81245ca:	0598      	lsls	r0, r3, #22
 81245cc:	d402      	bmi.n	81245d4 <_fwrite_r+0x2c>
 81245ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81245d0:	f000 faa5 	bl	8124b1e <__retarget_lock_acquire_recursive>
 81245d4:	89a3      	ldrh	r3, [r4, #12]
 81245d6:	0719      	lsls	r1, r3, #28
 81245d8:	d516      	bpl.n	8124608 <_fwrite_r+0x60>
 81245da:	6923      	ldr	r3, [r4, #16]
 81245dc:	b1a3      	cbz	r3, 8124608 <_fwrite_r+0x60>
 81245de:	2500      	movs	r5, #0
 81245e0:	454d      	cmp	r5, r9
 81245e2:	d01f      	beq.n	8124624 <_fwrite_r+0x7c>
 81245e4:	68a7      	ldr	r7, [r4, #8]
 81245e6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 81245ea:	3f01      	subs	r7, #1
 81245ec:	2f00      	cmp	r7, #0
 81245ee:	60a7      	str	r7, [r4, #8]
 81245f0:	da04      	bge.n	81245fc <_fwrite_r+0x54>
 81245f2:	69a3      	ldr	r3, [r4, #24]
 81245f4:	429f      	cmp	r7, r3
 81245f6:	db0f      	blt.n	8124618 <_fwrite_r+0x70>
 81245f8:	290a      	cmp	r1, #10
 81245fa:	d00d      	beq.n	8124618 <_fwrite_r+0x70>
 81245fc:	6823      	ldr	r3, [r4, #0]
 81245fe:	1c5a      	adds	r2, r3, #1
 8124600:	6022      	str	r2, [r4, #0]
 8124602:	7019      	strb	r1, [r3, #0]
 8124604:	3501      	adds	r5, #1
 8124606:	e7eb      	b.n	81245e0 <_fwrite_r+0x38>
 8124608:	4621      	mov	r1, r4
 812460a:	4630      	mov	r0, r6
 812460c:	f000 f8ba 	bl	8124784 <__swsetup_r>
 8124610:	2800      	cmp	r0, #0
 8124612:	d0e4      	beq.n	81245de <_fwrite_r+0x36>
 8124614:	2500      	movs	r5, #0
 8124616:	e005      	b.n	8124624 <_fwrite_r+0x7c>
 8124618:	4622      	mov	r2, r4
 812461a:	4630      	mov	r0, r6
 812461c:	f000 f873 	bl	8124706 <__swbuf_r>
 8124620:	3001      	adds	r0, #1
 8124622:	d1ef      	bne.n	8124604 <_fwrite_r+0x5c>
 8124624:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8124626:	07da      	lsls	r2, r3, #31
 8124628:	d405      	bmi.n	8124636 <_fwrite_r+0x8e>
 812462a:	89a3      	ldrh	r3, [r4, #12]
 812462c:	059b      	lsls	r3, r3, #22
 812462e:	d402      	bmi.n	8124636 <_fwrite_r+0x8e>
 8124630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8124632:	f000 fa75 	bl	8124b20 <__retarget_lock_release_recursive>
 8124636:	fbb5 f0f8 	udiv	r0, r5, r8
 812463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08124640 <fwrite>:
 8124640:	b507      	push	{r0, r1, r2, lr}
 8124642:	9300      	str	r3, [sp, #0]
 8124644:	4613      	mov	r3, r2
 8124646:	460a      	mov	r2, r1
 8124648:	4601      	mov	r1, r0
 812464a:	4803      	ldr	r0, [pc, #12]	@ (8124658 <fwrite+0x18>)
 812464c:	6800      	ldr	r0, [r0, #0]
 812464e:	f7ff ffab 	bl	81245a8 <_fwrite_r>
 8124652:	b003      	add	sp, #12
 8124654:	f85d fb04 	ldr.w	pc, [sp], #4
 8124658:	10000040 	.word	0x10000040

0812465c <iprintf>:
 812465c:	b40f      	push	{r0, r1, r2, r3}
 812465e:	b507      	push	{r0, r1, r2, lr}
 8124660:	4906      	ldr	r1, [pc, #24]	@ (812467c <iprintf+0x20>)
 8124662:	ab04      	add	r3, sp, #16
 8124664:	6808      	ldr	r0, [r1, #0]
 8124666:	f853 2b04 	ldr.w	r2, [r3], #4
 812466a:	6881      	ldr	r1, [r0, #8]
 812466c:	9301      	str	r3, [sp, #4]
 812466e:	f7ff fb69 	bl	8123d44 <_vfiprintf_r>
 8124672:	b003      	add	sp, #12
 8124674:	f85d eb04 	ldr.w	lr, [sp], #4
 8124678:	b004      	add	sp, #16
 812467a:	4770      	bx	lr
 812467c:	10000040 	.word	0x10000040

08124680 <__sread>:
 8124680:	b510      	push	{r4, lr}
 8124682:	460c      	mov	r4, r1
 8124684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8124688:	f000 f9d6 	bl	8124a38 <_read_r>
 812468c:	2800      	cmp	r0, #0
 812468e:	bfab      	itete	ge
 8124690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8124692:	89a3      	ldrhlt	r3, [r4, #12]
 8124694:	181b      	addge	r3, r3, r0
 8124696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 812469a:	bfac      	ite	ge
 812469c:	6563      	strge	r3, [r4, #84]	@ 0x54
 812469e:	81a3      	strhlt	r3, [r4, #12]
 81246a0:	bd10      	pop	{r4, pc}

081246a2 <__swrite>:
 81246a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81246a6:	461f      	mov	r7, r3
 81246a8:	898b      	ldrh	r3, [r1, #12]
 81246aa:	05db      	lsls	r3, r3, #23
 81246ac:	4605      	mov	r5, r0
 81246ae:	460c      	mov	r4, r1
 81246b0:	4616      	mov	r6, r2
 81246b2:	d505      	bpl.n	81246c0 <__swrite+0x1e>
 81246b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81246b8:	2302      	movs	r3, #2
 81246ba:	2200      	movs	r2, #0
 81246bc:	f000 f9aa 	bl	8124a14 <_lseek_r>
 81246c0:	89a3      	ldrh	r3, [r4, #12]
 81246c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81246c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81246ca:	81a3      	strh	r3, [r4, #12]
 81246cc:	4632      	mov	r2, r6
 81246ce:	463b      	mov	r3, r7
 81246d0:	4628      	mov	r0, r5
 81246d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81246d6:	f000 b9e5 	b.w	8124aa4 <_write_r>

081246da <__sseek>:
 81246da:	b510      	push	{r4, lr}
 81246dc:	460c      	mov	r4, r1
 81246de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81246e2:	f000 f997 	bl	8124a14 <_lseek_r>
 81246e6:	1c43      	adds	r3, r0, #1
 81246e8:	89a3      	ldrh	r3, [r4, #12]
 81246ea:	bf15      	itete	ne
 81246ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 81246ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 81246f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 81246f6:	81a3      	strheq	r3, [r4, #12]
 81246f8:	bf18      	it	ne
 81246fa:	81a3      	strhne	r3, [r4, #12]
 81246fc:	bd10      	pop	{r4, pc}

081246fe <__sclose>:
 81246fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8124702:	f000 b921 	b.w	8124948 <_close_r>

08124706 <__swbuf_r>:
 8124706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8124708:	460e      	mov	r6, r1
 812470a:	4614      	mov	r4, r2
 812470c:	4605      	mov	r5, r0
 812470e:	b118      	cbz	r0, 8124718 <__swbuf_r+0x12>
 8124710:	6a03      	ldr	r3, [r0, #32]
 8124712:	b90b      	cbnz	r3, 8124718 <__swbuf_r+0x12>
 8124714:	f7ff ff12 	bl	812453c <__sinit>
 8124718:	69a3      	ldr	r3, [r4, #24]
 812471a:	60a3      	str	r3, [r4, #8]
 812471c:	89a3      	ldrh	r3, [r4, #12]
 812471e:	071a      	lsls	r2, r3, #28
 8124720:	d501      	bpl.n	8124726 <__swbuf_r+0x20>
 8124722:	6923      	ldr	r3, [r4, #16]
 8124724:	b943      	cbnz	r3, 8124738 <__swbuf_r+0x32>
 8124726:	4621      	mov	r1, r4
 8124728:	4628      	mov	r0, r5
 812472a:	f000 f82b 	bl	8124784 <__swsetup_r>
 812472e:	b118      	cbz	r0, 8124738 <__swbuf_r+0x32>
 8124730:	f04f 37ff 	mov.w	r7, #4294967295
 8124734:	4638      	mov	r0, r7
 8124736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8124738:	6823      	ldr	r3, [r4, #0]
 812473a:	6922      	ldr	r2, [r4, #16]
 812473c:	1a98      	subs	r0, r3, r2
 812473e:	6963      	ldr	r3, [r4, #20]
 8124740:	b2f6      	uxtb	r6, r6
 8124742:	4283      	cmp	r3, r0
 8124744:	4637      	mov	r7, r6
 8124746:	dc05      	bgt.n	8124754 <__swbuf_r+0x4e>
 8124748:	4621      	mov	r1, r4
 812474a:	4628      	mov	r0, r5
 812474c:	f7ff fe2e 	bl	81243ac <_fflush_r>
 8124750:	2800      	cmp	r0, #0
 8124752:	d1ed      	bne.n	8124730 <__swbuf_r+0x2a>
 8124754:	68a3      	ldr	r3, [r4, #8]
 8124756:	3b01      	subs	r3, #1
 8124758:	60a3      	str	r3, [r4, #8]
 812475a:	6823      	ldr	r3, [r4, #0]
 812475c:	1c5a      	adds	r2, r3, #1
 812475e:	6022      	str	r2, [r4, #0]
 8124760:	701e      	strb	r6, [r3, #0]
 8124762:	6962      	ldr	r2, [r4, #20]
 8124764:	1c43      	adds	r3, r0, #1
 8124766:	429a      	cmp	r2, r3
 8124768:	d004      	beq.n	8124774 <__swbuf_r+0x6e>
 812476a:	89a3      	ldrh	r3, [r4, #12]
 812476c:	07db      	lsls	r3, r3, #31
 812476e:	d5e1      	bpl.n	8124734 <__swbuf_r+0x2e>
 8124770:	2e0a      	cmp	r6, #10
 8124772:	d1df      	bne.n	8124734 <__swbuf_r+0x2e>
 8124774:	4621      	mov	r1, r4
 8124776:	4628      	mov	r0, r5
 8124778:	f7ff fe18 	bl	81243ac <_fflush_r>
 812477c:	2800      	cmp	r0, #0
 812477e:	d0d9      	beq.n	8124734 <__swbuf_r+0x2e>
 8124780:	e7d6      	b.n	8124730 <__swbuf_r+0x2a>
	...

08124784 <__swsetup_r>:
 8124784:	b538      	push	{r3, r4, r5, lr}
 8124786:	4b29      	ldr	r3, [pc, #164]	@ (812482c <__swsetup_r+0xa8>)
 8124788:	4605      	mov	r5, r0
 812478a:	6818      	ldr	r0, [r3, #0]
 812478c:	460c      	mov	r4, r1
 812478e:	b118      	cbz	r0, 8124798 <__swsetup_r+0x14>
 8124790:	6a03      	ldr	r3, [r0, #32]
 8124792:	b90b      	cbnz	r3, 8124798 <__swsetup_r+0x14>
 8124794:	f7ff fed2 	bl	812453c <__sinit>
 8124798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 812479c:	0719      	lsls	r1, r3, #28
 812479e:	d422      	bmi.n	81247e6 <__swsetup_r+0x62>
 81247a0:	06da      	lsls	r2, r3, #27
 81247a2:	d407      	bmi.n	81247b4 <__swsetup_r+0x30>
 81247a4:	2209      	movs	r2, #9
 81247a6:	602a      	str	r2, [r5, #0]
 81247a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81247ac:	81a3      	strh	r3, [r4, #12]
 81247ae:	f04f 30ff 	mov.w	r0, #4294967295
 81247b2:	e033      	b.n	812481c <__swsetup_r+0x98>
 81247b4:	0758      	lsls	r0, r3, #29
 81247b6:	d512      	bpl.n	81247de <__swsetup_r+0x5a>
 81247b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81247ba:	b141      	cbz	r1, 81247ce <__swsetup_r+0x4a>
 81247bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81247c0:	4299      	cmp	r1, r3
 81247c2:	d002      	beq.n	81247ca <__swsetup_r+0x46>
 81247c4:	4628      	mov	r0, r5
 81247c6:	f000 f9d9 	bl	8124b7c <_free_r>
 81247ca:	2300      	movs	r3, #0
 81247cc:	6363      	str	r3, [r4, #52]	@ 0x34
 81247ce:	89a3      	ldrh	r3, [r4, #12]
 81247d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 81247d4:	81a3      	strh	r3, [r4, #12]
 81247d6:	2300      	movs	r3, #0
 81247d8:	6063      	str	r3, [r4, #4]
 81247da:	6923      	ldr	r3, [r4, #16]
 81247dc:	6023      	str	r3, [r4, #0]
 81247de:	89a3      	ldrh	r3, [r4, #12]
 81247e0:	f043 0308 	orr.w	r3, r3, #8
 81247e4:	81a3      	strh	r3, [r4, #12]
 81247e6:	6923      	ldr	r3, [r4, #16]
 81247e8:	b94b      	cbnz	r3, 81247fe <__swsetup_r+0x7a>
 81247ea:	89a3      	ldrh	r3, [r4, #12]
 81247ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81247f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81247f4:	d003      	beq.n	81247fe <__swsetup_r+0x7a>
 81247f6:	4621      	mov	r1, r4
 81247f8:	4628      	mov	r0, r5
 81247fa:	f000 fa41 	bl	8124c80 <__smakebuf_r>
 81247fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8124802:	f013 0201 	ands.w	r2, r3, #1
 8124806:	d00a      	beq.n	812481e <__swsetup_r+0x9a>
 8124808:	2200      	movs	r2, #0
 812480a:	60a2      	str	r2, [r4, #8]
 812480c:	6962      	ldr	r2, [r4, #20]
 812480e:	4252      	negs	r2, r2
 8124810:	61a2      	str	r2, [r4, #24]
 8124812:	6922      	ldr	r2, [r4, #16]
 8124814:	b942      	cbnz	r2, 8124828 <__swsetup_r+0xa4>
 8124816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 812481a:	d1c5      	bne.n	81247a8 <__swsetup_r+0x24>
 812481c:	bd38      	pop	{r3, r4, r5, pc}
 812481e:	0799      	lsls	r1, r3, #30
 8124820:	bf58      	it	pl
 8124822:	6962      	ldrpl	r2, [r4, #20]
 8124824:	60a2      	str	r2, [r4, #8]
 8124826:	e7f4      	b.n	8124812 <__swsetup_r+0x8e>
 8124828:	2000      	movs	r0, #0
 812482a:	e7f7      	b.n	812481c <__swsetup_r+0x98>
 812482c:	10000040 	.word	0x10000040

08124830 <memcmp>:
 8124830:	b510      	push	{r4, lr}
 8124832:	3901      	subs	r1, #1
 8124834:	4402      	add	r2, r0
 8124836:	4290      	cmp	r0, r2
 8124838:	d101      	bne.n	812483e <memcmp+0xe>
 812483a:	2000      	movs	r0, #0
 812483c:	e005      	b.n	812484a <memcmp+0x1a>
 812483e:	7803      	ldrb	r3, [r0, #0]
 8124840:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8124844:	42a3      	cmp	r3, r4
 8124846:	d001      	beq.n	812484c <memcmp+0x1c>
 8124848:	1b18      	subs	r0, r3, r4
 812484a:	bd10      	pop	{r4, pc}
 812484c:	3001      	adds	r0, #1
 812484e:	e7f2      	b.n	8124836 <memcmp+0x6>

08124850 <memmove>:
 8124850:	4288      	cmp	r0, r1
 8124852:	b510      	push	{r4, lr}
 8124854:	eb01 0402 	add.w	r4, r1, r2
 8124858:	d902      	bls.n	8124860 <memmove+0x10>
 812485a:	4284      	cmp	r4, r0
 812485c:	4623      	mov	r3, r4
 812485e:	d807      	bhi.n	8124870 <memmove+0x20>
 8124860:	1e43      	subs	r3, r0, #1
 8124862:	42a1      	cmp	r1, r4
 8124864:	d008      	beq.n	8124878 <memmove+0x28>
 8124866:	f811 2b01 	ldrb.w	r2, [r1], #1
 812486a:	f803 2f01 	strb.w	r2, [r3, #1]!
 812486e:	e7f8      	b.n	8124862 <memmove+0x12>
 8124870:	4402      	add	r2, r0
 8124872:	4601      	mov	r1, r0
 8124874:	428a      	cmp	r2, r1
 8124876:	d100      	bne.n	812487a <memmove+0x2a>
 8124878:	bd10      	pop	{r4, pc}
 812487a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 812487e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8124882:	e7f7      	b.n	8124874 <memmove+0x24>

08124884 <memset>:
 8124884:	4402      	add	r2, r0
 8124886:	4603      	mov	r3, r0
 8124888:	4293      	cmp	r3, r2
 812488a:	d100      	bne.n	812488e <memset+0xa>
 812488c:	4770      	bx	lr
 812488e:	f803 1b01 	strb.w	r1, [r3], #1
 8124892:	e7f9      	b.n	8124888 <memset+0x4>

08124894 <strncpy>:
 8124894:	b510      	push	{r4, lr}
 8124896:	3901      	subs	r1, #1
 8124898:	4603      	mov	r3, r0
 812489a:	b132      	cbz	r2, 81248aa <strncpy+0x16>
 812489c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 81248a0:	f803 4b01 	strb.w	r4, [r3], #1
 81248a4:	3a01      	subs	r2, #1
 81248a6:	2c00      	cmp	r4, #0
 81248a8:	d1f7      	bne.n	812489a <strncpy+0x6>
 81248aa:	441a      	add	r2, r3
 81248ac:	2100      	movs	r1, #0
 81248ae:	4293      	cmp	r3, r2
 81248b0:	d100      	bne.n	81248b4 <strncpy+0x20>
 81248b2:	bd10      	pop	{r4, pc}
 81248b4:	f803 1b01 	strb.w	r1, [r3], #1
 81248b8:	e7f9      	b.n	81248ae <strncpy+0x1a>

081248ba <strstr>:
 81248ba:	780a      	ldrb	r2, [r1, #0]
 81248bc:	b570      	push	{r4, r5, r6, lr}
 81248be:	b96a      	cbnz	r2, 81248dc <strstr+0x22>
 81248c0:	bd70      	pop	{r4, r5, r6, pc}
 81248c2:	429a      	cmp	r2, r3
 81248c4:	d109      	bne.n	81248da <strstr+0x20>
 81248c6:	460c      	mov	r4, r1
 81248c8:	4605      	mov	r5, r0
 81248ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 81248ce:	2b00      	cmp	r3, #0
 81248d0:	d0f6      	beq.n	81248c0 <strstr+0x6>
 81248d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 81248d6:	429e      	cmp	r6, r3
 81248d8:	d0f7      	beq.n	81248ca <strstr+0x10>
 81248da:	3001      	adds	r0, #1
 81248dc:	7803      	ldrb	r3, [r0, #0]
 81248de:	2b00      	cmp	r3, #0
 81248e0:	d1ef      	bne.n	81248c2 <strstr+0x8>
 81248e2:	4618      	mov	r0, r3
 81248e4:	e7ec      	b.n	81248c0 <strstr+0x6>

081248e6 <_raise_r>:
 81248e6:	291f      	cmp	r1, #31
 81248e8:	b538      	push	{r3, r4, r5, lr}
 81248ea:	4605      	mov	r5, r0
 81248ec:	460c      	mov	r4, r1
 81248ee:	d904      	bls.n	81248fa <_raise_r+0x14>
 81248f0:	2316      	movs	r3, #22
 81248f2:	6003      	str	r3, [r0, #0]
 81248f4:	f04f 30ff 	mov.w	r0, #4294967295
 81248f8:	bd38      	pop	{r3, r4, r5, pc}
 81248fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 81248fc:	b112      	cbz	r2, 8124904 <_raise_r+0x1e>
 81248fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8124902:	b94b      	cbnz	r3, 8124918 <_raise_r+0x32>
 8124904:	4628      	mov	r0, r5
 8124906:	f000 f8bb 	bl	8124a80 <_getpid_r>
 812490a:	4622      	mov	r2, r4
 812490c:	4601      	mov	r1, r0
 812490e:	4628      	mov	r0, r5
 8124910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8124914:	f000 b8a2 	b.w	8124a5c <_kill_r>
 8124918:	2b01      	cmp	r3, #1
 812491a:	d00a      	beq.n	8124932 <_raise_r+0x4c>
 812491c:	1c59      	adds	r1, r3, #1
 812491e:	d103      	bne.n	8124928 <_raise_r+0x42>
 8124920:	2316      	movs	r3, #22
 8124922:	6003      	str	r3, [r0, #0]
 8124924:	2001      	movs	r0, #1
 8124926:	e7e7      	b.n	81248f8 <_raise_r+0x12>
 8124928:	2100      	movs	r1, #0
 812492a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 812492e:	4620      	mov	r0, r4
 8124930:	4798      	blx	r3
 8124932:	2000      	movs	r0, #0
 8124934:	e7e0      	b.n	81248f8 <_raise_r+0x12>
	...

08124938 <raise>:
 8124938:	4b02      	ldr	r3, [pc, #8]	@ (8124944 <raise+0xc>)
 812493a:	4601      	mov	r1, r0
 812493c:	6818      	ldr	r0, [r3, #0]
 812493e:	f7ff bfd2 	b.w	81248e6 <_raise_r>
 8124942:	bf00      	nop
 8124944:	10000040 	.word	0x10000040

08124948 <_close_r>:
 8124948:	b538      	push	{r3, r4, r5, lr}
 812494a:	4d06      	ldr	r5, [pc, #24]	@ (8124964 <_close_r+0x1c>)
 812494c:	2300      	movs	r3, #0
 812494e:	4604      	mov	r4, r0
 8124950:	4608      	mov	r0, r1
 8124952:	602b      	str	r3, [r5, #0]
 8124954:	f7de fd78 	bl	8103448 <_close>
 8124958:	1c43      	adds	r3, r0, #1
 812495a:	d102      	bne.n	8124962 <_close_r+0x1a>
 812495c:	682b      	ldr	r3, [r5, #0]
 812495e:	b103      	cbz	r3, 8124962 <_close_r+0x1a>
 8124960:	6023      	str	r3, [r4, #0]
 8124962:	bd38      	pop	{r3, r4, r5, pc}
 8124964:	1000e650 	.word	0x1000e650

08124968 <_reclaim_reent>:
 8124968:	4b29      	ldr	r3, [pc, #164]	@ (8124a10 <_reclaim_reent+0xa8>)
 812496a:	681b      	ldr	r3, [r3, #0]
 812496c:	4283      	cmp	r3, r0
 812496e:	b570      	push	{r4, r5, r6, lr}
 8124970:	4604      	mov	r4, r0
 8124972:	d04b      	beq.n	8124a0c <_reclaim_reent+0xa4>
 8124974:	69c3      	ldr	r3, [r0, #28]
 8124976:	b1ab      	cbz	r3, 81249a4 <_reclaim_reent+0x3c>
 8124978:	68db      	ldr	r3, [r3, #12]
 812497a:	b16b      	cbz	r3, 8124998 <_reclaim_reent+0x30>
 812497c:	2500      	movs	r5, #0
 812497e:	69e3      	ldr	r3, [r4, #28]
 8124980:	68db      	ldr	r3, [r3, #12]
 8124982:	5959      	ldr	r1, [r3, r5]
 8124984:	2900      	cmp	r1, #0
 8124986:	d13b      	bne.n	8124a00 <_reclaim_reent+0x98>
 8124988:	3504      	adds	r5, #4
 812498a:	2d80      	cmp	r5, #128	@ 0x80
 812498c:	d1f7      	bne.n	812497e <_reclaim_reent+0x16>
 812498e:	69e3      	ldr	r3, [r4, #28]
 8124990:	4620      	mov	r0, r4
 8124992:	68d9      	ldr	r1, [r3, #12]
 8124994:	f000 f8f2 	bl	8124b7c <_free_r>
 8124998:	69e3      	ldr	r3, [r4, #28]
 812499a:	6819      	ldr	r1, [r3, #0]
 812499c:	b111      	cbz	r1, 81249a4 <_reclaim_reent+0x3c>
 812499e:	4620      	mov	r0, r4
 81249a0:	f000 f8ec 	bl	8124b7c <_free_r>
 81249a4:	6961      	ldr	r1, [r4, #20]
 81249a6:	b111      	cbz	r1, 81249ae <_reclaim_reent+0x46>
 81249a8:	4620      	mov	r0, r4
 81249aa:	f000 f8e7 	bl	8124b7c <_free_r>
 81249ae:	69e1      	ldr	r1, [r4, #28]
 81249b0:	b111      	cbz	r1, 81249b8 <_reclaim_reent+0x50>
 81249b2:	4620      	mov	r0, r4
 81249b4:	f000 f8e2 	bl	8124b7c <_free_r>
 81249b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 81249ba:	b111      	cbz	r1, 81249c2 <_reclaim_reent+0x5a>
 81249bc:	4620      	mov	r0, r4
 81249be:	f000 f8dd 	bl	8124b7c <_free_r>
 81249c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81249c4:	b111      	cbz	r1, 81249cc <_reclaim_reent+0x64>
 81249c6:	4620      	mov	r0, r4
 81249c8:	f000 f8d8 	bl	8124b7c <_free_r>
 81249cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 81249ce:	b111      	cbz	r1, 81249d6 <_reclaim_reent+0x6e>
 81249d0:	4620      	mov	r0, r4
 81249d2:	f000 f8d3 	bl	8124b7c <_free_r>
 81249d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 81249d8:	b111      	cbz	r1, 81249e0 <_reclaim_reent+0x78>
 81249da:	4620      	mov	r0, r4
 81249dc:	f000 f8ce 	bl	8124b7c <_free_r>
 81249e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 81249e2:	b111      	cbz	r1, 81249ea <_reclaim_reent+0x82>
 81249e4:	4620      	mov	r0, r4
 81249e6:	f000 f8c9 	bl	8124b7c <_free_r>
 81249ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 81249ec:	b111      	cbz	r1, 81249f4 <_reclaim_reent+0x8c>
 81249ee:	4620      	mov	r0, r4
 81249f0:	f000 f8c4 	bl	8124b7c <_free_r>
 81249f4:	6a23      	ldr	r3, [r4, #32]
 81249f6:	b14b      	cbz	r3, 8124a0c <_reclaim_reent+0xa4>
 81249f8:	4620      	mov	r0, r4
 81249fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 81249fe:	4718      	bx	r3
 8124a00:	680e      	ldr	r6, [r1, #0]
 8124a02:	4620      	mov	r0, r4
 8124a04:	f000 f8ba 	bl	8124b7c <_free_r>
 8124a08:	4631      	mov	r1, r6
 8124a0a:	e7bb      	b.n	8124984 <_reclaim_reent+0x1c>
 8124a0c:	bd70      	pop	{r4, r5, r6, pc}
 8124a0e:	bf00      	nop
 8124a10:	10000040 	.word	0x10000040

08124a14 <_lseek_r>:
 8124a14:	b538      	push	{r3, r4, r5, lr}
 8124a16:	4d07      	ldr	r5, [pc, #28]	@ (8124a34 <_lseek_r+0x20>)
 8124a18:	4604      	mov	r4, r0
 8124a1a:	4608      	mov	r0, r1
 8124a1c:	4611      	mov	r1, r2
 8124a1e:	2200      	movs	r2, #0
 8124a20:	602a      	str	r2, [r5, #0]
 8124a22:	461a      	mov	r2, r3
 8124a24:	f7de fd37 	bl	8103496 <_lseek>
 8124a28:	1c43      	adds	r3, r0, #1
 8124a2a:	d102      	bne.n	8124a32 <_lseek_r+0x1e>
 8124a2c:	682b      	ldr	r3, [r5, #0]
 8124a2e:	b103      	cbz	r3, 8124a32 <_lseek_r+0x1e>
 8124a30:	6023      	str	r3, [r4, #0]
 8124a32:	bd38      	pop	{r3, r4, r5, pc}
 8124a34:	1000e650 	.word	0x1000e650

08124a38 <_read_r>:
 8124a38:	b538      	push	{r3, r4, r5, lr}
 8124a3a:	4d07      	ldr	r5, [pc, #28]	@ (8124a58 <_read_r+0x20>)
 8124a3c:	4604      	mov	r4, r0
 8124a3e:	4608      	mov	r0, r1
 8124a40:	4611      	mov	r1, r2
 8124a42:	2200      	movs	r2, #0
 8124a44:	602a      	str	r2, [r5, #0]
 8124a46:	461a      	mov	r2, r3
 8124a48:	f7de fcc5 	bl	81033d6 <_read>
 8124a4c:	1c43      	adds	r3, r0, #1
 8124a4e:	d102      	bne.n	8124a56 <_read_r+0x1e>
 8124a50:	682b      	ldr	r3, [r5, #0]
 8124a52:	b103      	cbz	r3, 8124a56 <_read_r+0x1e>
 8124a54:	6023      	str	r3, [r4, #0]
 8124a56:	bd38      	pop	{r3, r4, r5, pc}
 8124a58:	1000e650 	.word	0x1000e650

08124a5c <_kill_r>:
 8124a5c:	b538      	push	{r3, r4, r5, lr}
 8124a5e:	4d07      	ldr	r5, [pc, #28]	@ (8124a7c <_kill_r+0x20>)
 8124a60:	2300      	movs	r3, #0
 8124a62:	4604      	mov	r4, r0
 8124a64:	4608      	mov	r0, r1
 8124a66:	4611      	mov	r1, r2
 8124a68:	602b      	str	r3, [r5, #0]
 8124a6a:	f7de fc97 	bl	810339c <_kill>
 8124a6e:	1c43      	adds	r3, r0, #1
 8124a70:	d102      	bne.n	8124a78 <_kill_r+0x1c>
 8124a72:	682b      	ldr	r3, [r5, #0]
 8124a74:	b103      	cbz	r3, 8124a78 <_kill_r+0x1c>
 8124a76:	6023      	str	r3, [r4, #0]
 8124a78:	bd38      	pop	{r3, r4, r5, pc}
 8124a7a:	bf00      	nop
 8124a7c:	1000e650 	.word	0x1000e650

08124a80 <_getpid_r>:
 8124a80:	f7de bc84 	b.w	810338c <_getpid>

08124a84 <_sbrk_r>:
 8124a84:	b538      	push	{r3, r4, r5, lr}
 8124a86:	4d06      	ldr	r5, [pc, #24]	@ (8124aa0 <_sbrk_r+0x1c>)
 8124a88:	2300      	movs	r3, #0
 8124a8a:	4604      	mov	r4, r0
 8124a8c:	4608      	mov	r0, r1
 8124a8e:	602b      	str	r3, [r5, #0]
 8124a90:	f7de fd0e 	bl	81034b0 <_sbrk>
 8124a94:	1c43      	adds	r3, r0, #1
 8124a96:	d102      	bne.n	8124a9e <_sbrk_r+0x1a>
 8124a98:	682b      	ldr	r3, [r5, #0]
 8124a9a:	b103      	cbz	r3, 8124a9e <_sbrk_r+0x1a>
 8124a9c:	6023      	str	r3, [r4, #0]
 8124a9e:	bd38      	pop	{r3, r4, r5, pc}
 8124aa0:	1000e650 	.word	0x1000e650

08124aa4 <_write_r>:
 8124aa4:	b538      	push	{r3, r4, r5, lr}
 8124aa6:	4d07      	ldr	r5, [pc, #28]	@ (8124ac4 <_write_r+0x20>)
 8124aa8:	4604      	mov	r4, r0
 8124aaa:	4608      	mov	r0, r1
 8124aac:	4611      	mov	r1, r2
 8124aae:	2200      	movs	r2, #0
 8124ab0:	602a      	str	r2, [r5, #0]
 8124ab2:	461a      	mov	r2, r3
 8124ab4:	f7de fcac 	bl	8103410 <_write>
 8124ab8:	1c43      	adds	r3, r0, #1
 8124aba:	d102      	bne.n	8124ac2 <_write_r+0x1e>
 8124abc:	682b      	ldr	r3, [r5, #0]
 8124abe:	b103      	cbz	r3, 8124ac2 <_write_r+0x1e>
 8124ac0:	6023      	str	r3, [r4, #0]
 8124ac2:	bd38      	pop	{r3, r4, r5, pc}
 8124ac4:	1000e650 	.word	0x1000e650

08124ac8 <__errno>:
 8124ac8:	4b01      	ldr	r3, [pc, #4]	@ (8124ad0 <__errno+0x8>)
 8124aca:	6818      	ldr	r0, [r3, #0]
 8124acc:	4770      	bx	lr
 8124ace:	bf00      	nop
 8124ad0:	10000040 	.word	0x10000040

08124ad4 <__libc_init_array>:
 8124ad4:	b570      	push	{r4, r5, r6, lr}
 8124ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8124b0c <__libc_init_array+0x38>)
 8124ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8124b10 <__libc_init_array+0x3c>)
 8124ada:	1b64      	subs	r4, r4, r5
 8124adc:	10a4      	asrs	r4, r4, #2
 8124ade:	2600      	movs	r6, #0
 8124ae0:	42a6      	cmp	r6, r4
 8124ae2:	d109      	bne.n	8124af8 <__libc_init_array+0x24>
 8124ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8124b14 <__libc_init_array+0x40>)
 8124ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8124b18 <__libc_init_array+0x44>)
 8124ae8:	f000 f928 	bl	8124d3c <_init>
 8124aec:	1b64      	subs	r4, r4, r5
 8124aee:	10a4      	asrs	r4, r4, #2
 8124af0:	2600      	movs	r6, #0
 8124af2:	42a6      	cmp	r6, r4
 8124af4:	d105      	bne.n	8124b02 <__libc_init_array+0x2e>
 8124af6:	bd70      	pop	{r4, r5, r6, pc}
 8124af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8124afc:	4798      	blx	r3
 8124afe:	3601      	adds	r6, #1
 8124b00:	e7ee      	b.n	8124ae0 <__libc_init_array+0xc>
 8124b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8124b06:	4798      	blx	r3
 8124b08:	3601      	adds	r6, #1
 8124b0a:	e7f2      	b.n	8124af2 <__libc_init_array+0x1e>
 8124b0c:	08128cf8 	.word	0x08128cf8
 8124b10:	08128cf8 	.word	0x08128cf8
 8124b14:	08128cf8 	.word	0x08128cf8
 8124b18:	08128d0c 	.word	0x08128d0c

08124b1c <__retarget_lock_init_recursive>:
 8124b1c:	4770      	bx	lr

08124b1e <__retarget_lock_acquire_recursive>:
 8124b1e:	4770      	bx	lr

08124b20 <__retarget_lock_release_recursive>:
 8124b20:	4770      	bx	lr

08124b22 <memcpy>:
 8124b22:	440a      	add	r2, r1
 8124b24:	4291      	cmp	r1, r2
 8124b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8124b2a:	d100      	bne.n	8124b2e <memcpy+0xc>
 8124b2c:	4770      	bx	lr
 8124b2e:	b510      	push	{r4, lr}
 8124b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8124b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8124b38:	4291      	cmp	r1, r2
 8124b3a:	d1f9      	bne.n	8124b30 <memcpy+0xe>
 8124b3c:	bd10      	pop	{r4, pc}
	...

08124b40 <__assert_func>:
 8124b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8124b42:	4614      	mov	r4, r2
 8124b44:	461a      	mov	r2, r3
 8124b46:	4b09      	ldr	r3, [pc, #36]	@ (8124b6c <__assert_func+0x2c>)
 8124b48:	681b      	ldr	r3, [r3, #0]
 8124b4a:	4605      	mov	r5, r0
 8124b4c:	68d8      	ldr	r0, [r3, #12]
 8124b4e:	b954      	cbnz	r4, 8124b66 <__assert_func+0x26>
 8124b50:	4b07      	ldr	r3, [pc, #28]	@ (8124b70 <__assert_func+0x30>)
 8124b52:	461c      	mov	r4, r3
 8124b54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8124b58:	9100      	str	r1, [sp, #0]
 8124b5a:	462b      	mov	r3, r5
 8124b5c:	4905      	ldr	r1, [pc, #20]	@ (8124b74 <__assert_func+0x34>)
 8124b5e:	f000 f857 	bl	8124c10 <fiprintf>
 8124b62:	f7fe ff3d 	bl	81239e0 <abort>
 8124b66:	4b04      	ldr	r3, [pc, #16]	@ (8124b78 <__assert_func+0x38>)
 8124b68:	e7f4      	b.n	8124b54 <__assert_func+0x14>
 8124b6a:	bf00      	nop
 8124b6c:	10000040 	.word	0x10000040
 8124b70:	08128cee 	.word	0x08128cee
 8124b74:	08128cc0 	.word	0x08128cc0
 8124b78:	08128cb3 	.word	0x08128cb3

08124b7c <_free_r>:
 8124b7c:	b538      	push	{r3, r4, r5, lr}
 8124b7e:	4605      	mov	r5, r0
 8124b80:	2900      	cmp	r1, #0
 8124b82:	d041      	beq.n	8124c08 <_free_r+0x8c>
 8124b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8124b88:	1f0c      	subs	r4, r1, #4
 8124b8a:	2b00      	cmp	r3, #0
 8124b8c:	bfb8      	it	lt
 8124b8e:	18e4      	addlt	r4, r4, r3
 8124b90:	f7fe ffe0 	bl	8123b54 <__malloc_lock>
 8124b94:	4a1d      	ldr	r2, [pc, #116]	@ (8124c0c <_free_r+0x90>)
 8124b96:	6813      	ldr	r3, [r2, #0]
 8124b98:	b933      	cbnz	r3, 8124ba8 <_free_r+0x2c>
 8124b9a:	6063      	str	r3, [r4, #4]
 8124b9c:	6014      	str	r4, [r2, #0]
 8124b9e:	4628      	mov	r0, r5
 8124ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8124ba4:	f7fe bfdc 	b.w	8123b60 <__malloc_unlock>
 8124ba8:	42a3      	cmp	r3, r4
 8124baa:	d908      	bls.n	8124bbe <_free_r+0x42>
 8124bac:	6820      	ldr	r0, [r4, #0]
 8124bae:	1821      	adds	r1, r4, r0
 8124bb0:	428b      	cmp	r3, r1
 8124bb2:	bf01      	itttt	eq
 8124bb4:	6819      	ldreq	r1, [r3, #0]
 8124bb6:	685b      	ldreq	r3, [r3, #4]
 8124bb8:	1809      	addeq	r1, r1, r0
 8124bba:	6021      	streq	r1, [r4, #0]
 8124bbc:	e7ed      	b.n	8124b9a <_free_r+0x1e>
 8124bbe:	461a      	mov	r2, r3
 8124bc0:	685b      	ldr	r3, [r3, #4]
 8124bc2:	b10b      	cbz	r3, 8124bc8 <_free_r+0x4c>
 8124bc4:	42a3      	cmp	r3, r4
 8124bc6:	d9fa      	bls.n	8124bbe <_free_r+0x42>
 8124bc8:	6811      	ldr	r1, [r2, #0]
 8124bca:	1850      	adds	r0, r2, r1
 8124bcc:	42a0      	cmp	r0, r4
 8124bce:	d10b      	bne.n	8124be8 <_free_r+0x6c>
 8124bd0:	6820      	ldr	r0, [r4, #0]
 8124bd2:	4401      	add	r1, r0
 8124bd4:	1850      	adds	r0, r2, r1
 8124bd6:	4283      	cmp	r3, r0
 8124bd8:	6011      	str	r1, [r2, #0]
 8124bda:	d1e0      	bne.n	8124b9e <_free_r+0x22>
 8124bdc:	6818      	ldr	r0, [r3, #0]
 8124bde:	685b      	ldr	r3, [r3, #4]
 8124be0:	6053      	str	r3, [r2, #4]
 8124be2:	4408      	add	r0, r1
 8124be4:	6010      	str	r0, [r2, #0]
 8124be6:	e7da      	b.n	8124b9e <_free_r+0x22>
 8124be8:	d902      	bls.n	8124bf0 <_free_r+0x74>
 8124bea:	230c      	movs	r3, #12
 8124bec:	602b      	str	r3, [r5, #0]
 8124bee:	e7d6      	b.n	8124b9e <_free_r+0x22>
 8124bf0:	6820      	ldr	r0, [r4, #0]
 8124bf2:	1821      	adds	r1, r4, r0
 8124bf4:	428b      	cmp	r3, r1
 8124bf6:	bf04      	itt	eq
 8124bf8:	6819      	ldreq	r1, [r3, #0]
 8124bfa:	685b      	ldreq	r3, [r3, #4]
 8124bfc:	6063      	str	r3, [r4, #4]
 8124bfe:	bf04      	itt	eq
 8124c00:	1809      	addeq	r1, r1, r0
 8124c02:	6021      	streq	r1, [r4, #0]
 8124c04:	6054      	str	r4, [r2, #4]
 8124c06:	e7ca      	b.n	8124b9e <_free_r+0x22>
 8124c08:	bd38      	pop	{r3, r4, r5, pc}
 8124c0a:	bf00      	nop
 8124c0c:	1000e510 	.word	0x1000e510

08124c10 <fiprintf>:
 8124c10:	b40e      	push	{r1, r2, r3}
 8124c12:	b503      	push	{r0, r1, lr}
 8124c14:	4601      	mov	r1, r0
 8124c16:	ab03      	add	r3, sp, #12
 8124c18:	4805      	ldr	r0, [pc, #20]	@ (8124c30 <fiprintf+0x20>)
 8124c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8124c1e:	6800      	ldr	r0, [r0, #0]
 8124c20:	9301      	str	r3, [sp, #4]
 8124c22:	f7ff f88f 	bl	8123d44 <_vfiprintf_r>
 8124c26:	b002      	add	sp, #8
 8124c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8124c2c:	b003      	add	sp, #12
 8124c2e:	4770      	bx	lr
 8124c30:	10000040 	.word	0x10000040

08124c34 <__swhatbuf_r>:
 8124c34:	b570      	push	{r4, r5, r6, lr}
 8124c36:	460c      	mov	r4, r1
 8124c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8124c3c:	2900      	cmp	r1, #0
 8124c3e:	b096      	sub	sp, #88	@ 0x58
 8124c40:	4615      	mov	r5, r2
 8124c42:	461e      	mov	r6, r3
 8124c44:	da0d      	bge.n	8124c62 <__swhatbuf_r+0x2e>
 8124c46:	89a3      	ldrh	r3, [r4, #12]
 8124c48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8124c4c:	f04f 0100 	mov.w	r1, #0
 8124c50:	bf14      	ite	ne
 8124c52:	2340      	movne	r3, #64	@ 0x40
 8124c54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8124c58:	2000      	movs	r0, #0
 8124c5a:	6031      	str	r1, [r6, #0]
 8124c5c:	602b      	str	r3, [r5, #0]
 8124c5e:	b016      	add	sp, #88	@ 0x58
 8124c60:	bd70      	pop	{r4, r5, r6, pc}
 8124c62:	466a      	mov	r2, sp
 8124c64:	f000 f848 	bl	8124cf8 <_fstat_r>
 8124c68:	2800      	cmp	r0, #0
 8124c6a:	dbec      	blt.n	8124c46 <__swhatbuf_r+0x12>
 8124c6c:	9901      	ldr	r1, [sp, #4]
 8124c6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8124c72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8124c76:	4259      	negs	r1, r3
 8124c78:	4159      	adcs	r1, r3
 8124c7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8124c7e:	e7eb      	b.n	8124c58 <__swhatbuf_r+0x24>

08124c80 <__smakebuf_r>:
 8124c80:	898b      	ldrh	r3, [r1, #12]
 8124c82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8124c84:	079d      	lsls	r5, r3, #30
 8124c86:	4606      	mov	r6, r0
 8124c88:	460c      	mov	r4, r1
 8124c8a:	d507      	bpl.n	8124c9c <__smakebuf_r+0x1c>
 8124c8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8124c90:	6023      	str	r3, [r4, #0]
 8124c92:	6123      	str	r3, [r4, #16]
 8124c94:	2301      	movs	r3, #1
 8124c96:	6163      	str	r3, [r4, #20]
 8124c98:	b003      	add	sp, #12
 8124c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8124c9c:	ab01      	add	r3, sp, #4
 8124c9e:	466a      	mov	r2, sp
 8124ca0:	f7ff ffc8 	bl	8124c34 <__swhatbuf_r>
 8124ca4:	9f00      	ldr	r7, [sp, #0]
 8124ca6:	4605      	mov	r5, r0
 8124ca8:	4639      	mov	r1, r7
 8124caa:	4630      	mov	r0, r6
 8124cac:	f7fe fed2 	bl	8123a54 <_malloc_r>
 8124cb0:	b948      	cbnz	r0, 8124cc6 <__smakebuf_r+0x46>
 8124cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8124cb6:	059a      	lsls	r2, r3, #22
 8124cb8:	d4ee      	bmi.n	8124c98 <__smakebuf_r+0x18>
 8124cba:	f023 0303 	bic.w	r3, r3, #3
 8124cbe:	f043 0302 	orr.w	r3, r3, #2
 8124cc2:	81a3      	strh	r3, [r4, #12]
 8124cc4:	e7e2      	b.n	8124c8c <__smakebuf_r+0xc>
 8124cc6:	89a3      	ldrh	r3, [r4, #12]
 8124cc8:	6020      	str	r0, [r4, #0]
 8124cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8124cce:	81a3      	strh	r3, [r4, #12]
 8124cd0:	9b01      	ldr	r3, [sp, #4]
 8124cd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8124cd6:	b15b      	cbz	r3, 8124cf0 <__smakebuf_r+0x70>
 8124cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8124cdc:	4630      	mov	r0, r6
 8124cde:	f000 f81d 	bl	8124d1c <_isatty_r>
 8124ce2:	b128      	cbz	r0, 8124cf0 <__smakebuf_r+0x70>
 8124ce4:	89a3      	ldrh	r3, [r4, #12]
 8124ce6:	f023 0303 	bic.w	r3, r3, #3
 8124cea:	f043 0301 	orr.w	r3, r3, #1
 8124cee:	81a3      	strh	r3, [r4, #12]
 8124cf0:	89a3      	ldrh	r3, [r4, #12]
 8124cf2:	431d      	orrs	r5, r3
 8124cf4:	81a5      	strh	r5, [r4, #12]
 8124cf6:	e7cf      	b.n	8124c98 <__smakebuf_r+0x18>

08124cf8 <_fstat_r>:
 8124cf8:	b538      	push	{r3, r4, r5, lr}
 8124cfa:	4d07      	ldr	r5, [pc, #28]	@ (8124d18 <_fstat_r+0x20>)
 8124cfc:	2300      	movs	r3, #0
 8124cfe:	4604      	mov	r4, r0
 8124d00:	4608      	mov	r0, r1
 8124d02:	4611      	mov	r1, r2
 8124d04:	602b      	str	r3, [r5, #0]
 8124d06:	f7de fbab 	bl	8103460 <_fstat>
 8124d0a:	1c43      	adds	r3, r0, #1
 8124d0c:	d102      	bne.n	8124d14 <_fstat_r+0x1c>
 8124d0e:	682b      	ldr	r3, [r5, #0]
 8124d10:	b103      	cbz	r3, 8124d14 <_fstat_r+0x1c>
 8124d12:	6023      	str	r3, [r4, #0]
 8124d14:	bd38      	pop	{r3, r4, r5, pc}
 8124d16:	bf00      	nop
 8124d18:	1000e650 	.word	0x1000e650

08124d1c <_isatty_r>:
 8124d1c:	b538      	push	{r3, r4, r5, lr}
 8124d1e:	4d06      	ldr	r5, [pc, #24]	@ (8124d38 <_isatty_r+0x1c>)
 8124d20:	2300      	movs	r3, #0
 8124d22:	4604      	mov	r4, r0
 8124d24:	4608      	mov	r0, r1
 8124d26:	602b      	str	r3, [r5, #0]
 8124d28:	f7de fbaa 	bl	8103480 <_isatty>
 8124d2c:	1c43      	adds	r3, r0, #1
 8124d2e:	d102      	bne.n	8124d36 <_isatty_r+0x1a>
 8124d30:	682b      	ldr	r3, [r5, #0]
 8124d32:	b103      	cbz	r3, 8124d36 <_isatty_r+0x1a>
 8124d34:	6023      	str	r3, [r4, #0]
 8124d36:	bd38      	pop	{r3, r4, r5, pc}
 8124d38:	1000e650 	.word	0x1000e650

08124d3c <_init>:
 8124d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8124d3e:	bf00      	nop
 8124d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8124d42:	bc08      	pop	{r3}
 8124d44:	469e      	mov	lr, r3
 8124d46:	4770      	bx	lr

08124d48 <_fini>:
 8124d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8124d4a:	bf00      	nop
 8124d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8124d4e:	bc08      	pop	{r3}
 8124d50:	469e      	mov	lr, r3
 8124d52:	4770      	bx	lr
