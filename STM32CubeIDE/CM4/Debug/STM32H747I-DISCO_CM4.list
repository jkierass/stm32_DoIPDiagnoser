
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   00000b40  38000000  38000000  0000a000  2**2
                  ALLOC
  2 .text         00007c5c  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b0  08107efc  08107efc  00008efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08107fac  08107fac  00008fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08107fb4  08107fb4  00008fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  10000000  08107fb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bb8  10000064  0810801c  00009064  2**2
                  ALLOC
  8 ._user_heap_stack 00002004  10004c1c  0810801c  00009c1c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 10 .debug_info   000283f5  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052b3  00000000  00000000  00031489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e30  00000000  00000000  00036740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001721  00000000  00000000  00038570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004604e  00000000  00000000  00039c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001eb90  00000000  00000000  0007fcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c2d50  00000000  00000000  0009e86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002615bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a38  00000000  00000000  00261604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  0026a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000064 	.word	0x10000064
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08107ee4 	.word	0x08107ee4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000068 	.word	0x10000068
 81002dc:	08107ee4 	.word	0x08107ee4

081002e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81002e0:	b580      	push	{r7, lr}
 81002e2:	b082      	sub	sp, #8
 81002e4:	af00      	add	r7, sp, #0
 81002e6:	6078      	str	r0, [r7, #4]
  if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 81002e8:	687b      	ldr	r3, [r7, #4]
 81002ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81002ee:	2b00      	cmp	r3, #0
 81002f0:	d005      	beq.n	81002fe <HAL_HSEM_FreeCallback+0x1e>
  {
    /* Re-Activate HSEM notification */
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81002f2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81002f6:	f003 f975 	bl	81035e4 <HAL_HSEM_ActivateNotification>
    /* New message received */
    prvCoreInterruptHandler();
 81002fa:	f000 f86b 	bl	81003d4 <prvCoreInterruptHandler>
  }

  if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0){
 81002fe:	687b      	ldr	r3, [r7, #4]
 8100300:	2b00      	cmp	r3, #0
 8100302:	da05      	bge.n	8100310 <HAL_HSEM_FreeCallback+0x30>
	/* Re-Activate HSEM notification */
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8100304:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8100308:	f003 f96c 	bl	81035e4 <HAL_HSEM_ActivateNotification>
	/* TX queue is empty => wake-up task trying to send a message */
	prvCoreWakeupInterruptHandler();
 810030c:	f000 f886 	bl	810041c <prvCoreWakeupInterruptHandler>
  }
}
 8100310:	bf00      	nop
 8100312:	3708      	adds	r7, #8
 8100314:	46bd      	mov	sp, r7
 8100316:	bd80      	pop	{r7, pc}

08100318 <ipc_init>:

int ipc_init(void)
{
 8100318:	b580      	push	{r7, lr}
 810031a:	b084      	sub	sp, #16
 810031c:	af02      	add	r7, sp, #8
    /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810031e:	4b20      	ldr	r3, [pc, #128]	@ (81003a0 <ipc_init+0x88>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100324:	4a1e      	ldr	r2, [pc, #120]	@ (81003a0 <ipc_init+0x88>)
 8100326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810032a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810032e:	4b1c      	ldr	r3, [pc, #112]	@ (81003a0 <ipc_init+0x88>)
 8100330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100338:	607b      	str	r3, [r7, #4]
 810033a:	687b      	ldr	r3, [r7, #4]
#ifdef CORE_CM4
  	HAL_HSEM_Take(HSEM_INIT_CM4, 0);
 810033c:	2100      	movs	r1, #0
 810033e:	201b      	movs	r0, #27
 8100340:	f003 f918 	bl	8103574 <HAL_HSEM_Take>
#endif
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
 8100344:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8100348:	2100      	movs	r1, #0
 810034a:	4816      	ldr	r0, [pc, #88]	@ (81003a4 <ipc_init+0x8c>)
 810034c:	f007 fc94 	bl	8107c78 <memset>
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
 8100350:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8100354:	2100      	movs	r1, #0
 8100356:	4814      	ldr	r0, [pc, #80]	@ (81003a8 <ipc_init+0x90>)
 8100358:	f007 fc8e 	bl	8107c78 <memset>
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 810035c:	4b13      	ldr	r3, [pc, #76]	@ (81003ac <ipc_init+0x94>)
 810035e:	9300      	str	r3, [sp, #0]
 8100360:	4b10      	ldr	r3, [pc, #64]	@ (81003a4 <ipc_init+0x8c>)
 8100362:	2201      	movs	r2, #1
 8100364:	2100      	movs	r1, #0
 8100366:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 810036a:	f005 fa5d 	bl	8105828 <xStreamBufferGenericCreateStatic>
 810036e:	4603      	mov	r3, r0
 8100370:	4a0f      	ldr	r2, [pc, #60]	@ (81003b0 <ipc_init+0x98>)
 8100372:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 8100374:	4b0f      	ldr	r3, [pc, #60]	@ (81003b4 <ipc_init+0x9c>)
 8100376:	9300      	str	r3, [sp, #0]
 8100378:	4b0b      	ldr	r3, [pc, #44]	@ (81003a8 <ipc_init+0x90>)
 810037a:	2201      	movs	r2, #1
 810037c:	2100      	movs	r1, #0
 810037e:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8100382:	f005 fa51 	bl	8105828 <xStreamBufferGenericCreateStatic>
 8100386:	4603      	mov	r3, r0
 8100388:	4a09      	ldr	r2, [pc, #36]	@ (81003b0 <ipc_init+0x98>)
 810038a:	6053      	str	r3, [r2, #4]
    HAL_HSEM_Release(HSEM_INIT_CM4, 0);
    // Wait for CM4 to complete initialization
    HAL_HSEM_Take(HSEM_INIT_CM7, 0);
#elif defined(CORE_CM4)
    // Signal CM7 that CM4 has completed initialization
    HAL_HSEM_Release(HSEM_INIT_CM7, 0);
 810038c:	2100      	movs	r1, #0
 810038e:	201a      	movs	r0, #26
 8100390:	f003 f914 	bl	81035bc <HAL_HSEM_Release>
#endif



    return 0;
 8100394:	2300      	movs	r3, #0
}
 8100396:	4618      	mov	r0, r3
 8100398:	3708      	adds	r7, #8
 810039a:	46bd      	mov	sp, r7
 810039c:	bd80      	pop	{r7, pc}
 810039e:	bf00      	nop
 81003a0:	58024400 	.word	0x58024400
 81003a4:	38000050 	.word	0x38000050
 81003a8:	380005c8 	.word	0x380005c8
 81003ac:	38000008 	.word	0x38000008
 81003b0:	38000000 	.word	0x38000000
 81003b4:	3800002c 	.word	0x3800002c

081003b8 <ipc_start>:

int ipc_start(void){
 81003b8:	b580      	push	{r7, lr}
 81003ba:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81003bc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81003c0:	f003 f910 	bl	81035e4 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81003c4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81003c8:	f003 f90c 	bl	81035e4 <HAL_HSEM_ActivateNotification>
    return 0;
 81003cc:	2300      	movs	r3, #0
}
 81003ce:	4618      	mov	r0, r3
 81003d0:	bd80      	pop	{r7, pc}
	...

081003d4 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 81003d4:	b580      	push	{r7, lr}
 81003d6:	b082      	sub	sp, #8
 81003d8:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81003da:	2300      	movs	r3, #0
 81003dc:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 81003de:	4b0d      	ldr	r3, [pc, #52]	@ (8100414 <prvCoreInterruptHandler+0x40>)
 81003e0:	681b      	ldr	r3, [r3, #0]
 81003e2:	2b00      	cmp	r3, #0
 81003e4:	d012      	beq.n	810040c <prvCoreInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferSendCompletedFromISR(xrx_data_buf,
 81003e6:	4b0b      	ldr	r3, [pc, #44]	@ (8100414 <prvCoreInterruptHandler+0x40>)
 81003e8:	681b      	ldr	r3, [r3, #0]
 81003ea:	1d3a      	adds	r2, r7, #4
 81003ec:	4611      	mov	r1, r2
 81003ee:	4618      	mov	r0, r3
 81003f0:	f005 fc76 	bl	8105ce0 <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81003f4:	687b      	ldr	r3, [r7, #4]
 81003f6:	2b00      	cmp	r3, #0
 81003f8:	d009      	beq.n	810040e <prvCoreInterruptHandler+0x3a>
 81003fa:	4b07      	ldr	r3, [pc, #28]	@ (8100418 <prvCoreInterruptHandler+0x44>)
 81003fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100400:	601a      	str	r2, [r3, #0]
 8100402:	f3bf 8f4f 	dsb	sy
 8100406:	f3bf 8f6f 	isb	sy
 810040a:	e000      	b.n	810040e <prvCoreInterruptHandler+0x3a>
    	return;
 810040c:	bf00      	nop
}
 810040e:	3708      	adds	r7, #8
 8100410:	46bd      	mov	sp, r7
 8100412:	bd80      	pop	{r7, pc}
 8100414:	38000000 	.word	0x38000000
 8100418:	e000ed04 	.word	0xe000ed04

0810041c <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 810041c:	b580      	push	{r7, lr}
 810041e:	b082      	sub	sp, #8
 8100420:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8100422:	2300      	movs	r3, #0
 8100424:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 8100426:	4b0d      	ldr	r3, [pc, #52]	@ (810045c <prvCoreWakeupInterruptHandler+0x40>)
 8100428:	685b      	ldr	r3, [r3, #4]
 810042a:	2b00      	cmp	r3, #0
 810042c:	d012      	beq.n	8100454 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferReceiveCompletedFromISR(xtx_data_buf,
 810042e:	4b0b      	ldr	r3, [pc, #44]	@ (810045c <prvCoreWakeupInterruptHandler+0x40>)
 8100430:	685b      	ldr	r3, [r3, #4]
 8100432:	1d3a      	adds	r2, r7, #4
 8100434:	4611      	mov	r1, r2
 8100436:	4618      	mov	r0, r3
 8100438:	f005 fc96 	bl	8105d68 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 810043c:	687b      	ldr	r3, [r7, #4]
 810043e:	2b00      	cmp	r3, #0
 8100440:	d009      	beq.n	8100456 <prvCoreWakeupInterruptHandler+0x3a>
 8100442:	4b07      	ldr	r3, [pc, #28]	@ (8100460 <prvCoreWakeupInterruptHandler+0x44>)
 8100444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100448:	601a      	str	r2, [r3, #0]
 810044a:	f3bf 8f4f 	dsb	sy
 810044e:	f3bf 8f6f 	isb	sy
 8100452:	e000      	b.n	8100456 <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 8100454:	bf00      	nop
}
 8100456:	3708      	adds	r7, #8
 8100458:	46bd      	mov	sp, r7
 810045a:	bd80      	pop	{r7, pc}
 810045c:	38000000 	.word	0x38000000
 8100460:	e000ed04 	.word	0xe000ed04

08100464 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 8100464:	b580      	push	{r7, lr}
 8100466:	b084      	sub	sp, #16
 8100468:	af00      	add	r7, sp, #0
 810046a:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 810046c:	687b      	ldr	r3, [r7, #4]
 810046e:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100470:	f3bf 8f4f 	dsb	sy
}
 8100474:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 8100476:	4b12      	ldr	r3, [pc, #72]	@ (81004c0 <vGenerateRemoteInterrupt+0x5c>)
 8100478:	685b      	ldr	r3, [r3, #4]
 810047a:	68fa      	ldr	r2, [r7, #12]
 810047c:	429a      	cmp	r2, r3
 810047e:	d10b      	bne.n	8100498 <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 8100480:	211b      	movs	r1, #27
 8100482:	201d      	movs	r0, #29
 8100484:	f003 f876 	bl	8103574 <HAL_HSEM_Take>
 8100488:	4603      	mov	r3, r0
 810048a:	2b00      	cmp	r3, #0
 810048c:	d114      	bne.n	81004b8 <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 810048e:	211b      	movs	r1, #27
 8100490:	201d      	movs	r0, #29
 8100492:	f003 f893 	bl	81035bc <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 8100496:	e00f      	b.n	81004b8 <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 8100498:	4b09      	ldr	r3, [pc, #36]	@ (81004c0 <vGenerateRemoteInterrupt+0x5c>)
 810049a:	681b      	ldr	r3, [r3, #0]
 810049c:	68fa      	ldr	r2, [r7, #12]
 810049e:	429a      	cmp	r2, r3
 81004a0:	d10a      	bne.n	81004b8 <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 81004a2:	211b      	movs	r1, #27
 81004a4:	201e      	movs	r0, #30
 81004a6:	f003 f865 	bl	8103574 <HAL_HSEM_Take>
 81004aa:	4603      	mov	r3, r0
 81004ac:	2b00      	cmp	r3, #0
 81004ae:	d103      	bne.n	81004b8 <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 81004b0:	211b      	movs	r1, #27
 81004b2:	201e      	movs	r0, #30
 81004b4:	f003 f882 	bl	81035bc <HAL_HSEM_Release>
}
 81004b8:	bf00      	nop
 81004ba:	3710      	adds	r7, #16
 81004bc:	46bd      	mov	sp, r7
 81004be:	bd80      	pop	{r7, pc}
 81004c0:	38000000 	.word	0x38000000

081004c4 <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81004c4:	b580      	push	{r7, lr}
 81004c6:	b086      	sub	sp, #24
 81004c8:	af00      	add	r7, sp, #0
 81004ca:	60f8      	str	r0, [r7, #12]
 81004cc:	60b9      	str	r1, [r7, #8]
 81004ce:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 81004d0:	4b0f      	ldr	r3, [pc, #60]	@ (8100510 <ipc_sendmsg+0x4c>)
 81004d2:	685b      	ldr	r3, [r3, #4]
 81004d4:	2b00      	cmp	r3, #0
 81004d6:	d101      	bne.n	81004dc <ipc_sendmsg+0x18>
      return 0;
 81004d8:	2300      	movs	r3, #0
 81004da:	e015      	b.n	8100508 <ipc_sendmsg+0x44>

    if(timeout < 0)
 81004dc:	687b      	ldr	r3, [r7, #4]
 81004de:	2b00      	cmp	r3, #0
 81004e0:	da09      	bge.n	81004f6 <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 81004e2:	4b0b      	ldr	r3, [pc, #44]	@ (8100510 <ipc_sendmsg+0x4c>)
 81004e4:	6858      	ldr	r0, [r3, #4]
 81004e6:	f04f 33ff 	mov.w	r3, #4294967295
 81004ea:	68ba      	ldr	r2, [r7, #8]
 81004ec:	68f9      	ldr	r1, [r7, #12]
 81004ee:	f005 fa55 	bl	810599c <xStreamBufferSend>
 81004f2:	6178      	str	r0, [r7, #20]
 81004f4:	e007      	b.n	8100506 <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 81004f6:	4b06      	ldr	r3, [pc, #24]	@ (8100510 <ipc_sendmsg+0x4c>)
 81004f8:	6858      	ldr	r0, [r3, #4]
 81004fa:	687b      	ldr	r3, [r7, #4]
 81004fc:	68ba      	ldr	r2, [r7, #8]
 81004fe:	68f9      	ldr	r1, [r7, #12]
 8100500:	f005 fa4c 	bl	810599c <xStreamBufferSend>
 8100504:	6178      	str	r0, [r7, #20]

    return len;
 8100506:	697b      	ldr	r3, [r7, #20]
}
 8100508:	4618      	mov	r0, r3
 810050a:	3718      	adds	r7, #24
 810050c:	46bd      	mov	sp, r7
 810050e:	bd80      	pop	{r7, pc}
 8100510:	38000000 	.word	0x38000000

08100514 <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8100514:	b580      	push	{r7, lr}
 8100516:	b086      	sub	sp, #24
 8100518:	af00      	add	r7, sp, #0
 810051a:	60f8      	str	r0, [r7, #12]
 810051c:	60b9      	str	r1, [r7, #8]
 810051e:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 8100520:	687b      	ldr	r3, [r7, #4]
 8100522:	2b00      	cmp	r3, #0
 8100524:	da09      	bge.n	810053a <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 8100526:	4b0b      	ldr	r3, [pc, #44]	@ (8100554 <ipc_recvmsg+0x40>)
 8100528:	6818      	ldr	r0, [r3, #0]
 810052a:	f04f 33ff 	mov.w	r3, #4294967295
 810052e:	68ba      	ldr	r2, [r7, #8]
 8100530:	68f9      	ldr	r1, [r7, #12]
 8100532:	f005 fb1a 	bl	8105b6a <xStreamBufferReceive>
 8100536:	6178      	str	r0, [r7, #20]
 8100538:	e007      	b.n	810054a <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 810053a:	4b06      	ldr	r3, [pc, #24]	@ (8100554 <ipc_recvmsg+0x40>)
 810053c:	6818      	ldr	r0, [r3, #0]
 810053e:	687b      	ldr	r3, [r7, #4]
 8100540:	68ba      	ldr	r2, [r7, #8]
 8100542:	68f9      	ldr	r1, [r7, #12]
 8100544:	f005 fb11 	bl	8105b6a <xStreamBufferReceive>
 8100548:	6178      	str	r0, [r7, #20]

    return len;
 810054a:	697b      	ldr	r3, [r7, #20]
}
 810054c:	4618      	mov	r0, r3
 810054e:	3718      	adds	r7, #24
 8100550:	46bd      	mov	sp, r7
 8100552:	bd80      	pop	{r7, pc}
 8100554:	38000000 	.word	0x38000000

08100558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100558:	b580      	push	{r7, lr}
 810055a:	b082      	sub	sp, #8
 810055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810055e:	4b26      	ldr	r3, [pc, #152]	@ (81005f8 <main+0xa0>)
 8100560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100564:	4a24      	ldr	r2, [pc, #144]	@ (81005f8 <main+0xa0>)
 8100566:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810056a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810056e:	4b22      	ldr	r3, [pc, #136]	@ (81005f8 <main+0xa0>)
 8100570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100578:	607b      	str	r3, [r7, #4]
 810057a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810057c:	2001      	movs	r0, #1
 810057e:	f003 f831 	bl	81035e4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100582:	f003 f8d5 	bl	8103730 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100586:	2201      	movs	r2, #1
 8100588:	2102      	movs	r1, #2
 810058a:	2000      	movs	r0, #0
 810058c:	f003 f856 	bl	810363c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100590:	4b1a      	ldr	r3, [pc, #104]	@ (81005fc <main+0xa4>)
 8100592:	681b      	ldr	r3, [r3, #0]
 8100594:	091b      	lsrs	r3, r3, #4
 8100596:	f003 030f 	and.w	r3, r3, #15
 810059a:	2b07      	cmp	r3, #7
 810059c:	d108      	bne.n	81005b0 <main+0x58>
 810059e:	4b18      	ldr	r3, [pc, #96]	@ (8100600 <main+0xa8>)
 81005a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81005a4:	4a16      	ldr	r2, [pc, #88]	@ (8100600 <main+0xa8>)
 81005a6:	f043 0301 	orr.w	r3, r3, #1
 81005aa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81005ae:	e007      	b.n	81005c0 <main+0x68>
 81005b0:	4b13      	ldr	r3, [pc, #76]	@ (8100600 <main+0xa8>)
 81005b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81005b6:	4a12      	ldr	r2, [pc, #72]	@ (8100600 <main+0xa8>)
 81005b8:	f043 0301 	orr.w	r3, r3, #1
 81005bc:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81005c0:	f002 fe72 	bl	81032a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  ipc_init();
 81005c4:	f7ff fea8 	bl	8100318 <ipc_init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 81005c8:	f000 f828 	bl	810061c <_ZL12MX_MDMA_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81005cc:	f003 fdd4 	bl	8104178 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_EDaemonN */
  Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 81005d0:	4a0c      	ldr	r2, [pc, #48]	@ (8100604 <main+0xac>)
 81005d2:	2100      	movs	r1, #0
 81005d4:	480c      	ldr	r0, [pc, #48]	@ (8100608 <main+0xb0>)
 81005d6:	f003 fe19 	bl	810420c <osThreadNew>
 81005da:	4603      	mov	r3, r0
 81005dc:	4a0b      	ldr	r2, [pc, #44]	@ (810060c <main+0xb4>)
 81005de:	6013      	str	r3, [r2, #0]

  /* creation of Task_EventMgrM4 */
  Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 81005e0:	4a0b      	ldr	r2, [pc, #44]	@ (8100610 <main+0xb8>)
 81005e2:	2100      	movs	r1, #0
 81005e4:	480b      	ldr	r0, [pc, #44]	@ (8100614 <main+0xbc>)
 81005e6:	f003 fe11 	bl	810420c <osThreadNew>
 81005ea:	4603      	mov	r3, r0
 81005ec:	4a0a      	ldr	r2, [pc, #40]	@ (8100618 <main+0xc0>)
 81005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81005f0:	f003 fde6 	bl	81041c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81005f4:	bf00      	nop
 81005f6:	e7fd      	b.n	81005f4 <main+0x9c>
 81005f8:	58024400 	.word	0x58024400
 81005fc:	e000ed00 	.word	0xe000ed00
 8100600:	58026400 	.word	0x58026400
 8100604:	08107f50 	.word	0x08107f50
 8100608:	0810096b 	.word	0x0810096b
 810060c:	10000080 	.word	0x10000080
 8100610:	08107f74 	.word	0x08107f74
 8100614:	0810108d 	.word	0x0810108d
 8100618:	10000084 	.word	0x10000084

0810061c <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 810061c:	b480      	push	{r7}
 810061e:	b083      	sub	sp, #12
 8100620:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100622:	4b0a      	ldr	r3, [pc, #40]	@ (810064c <_ZL12MX_MDMA_Initv+0x30>)
 8100624:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100628:	4a08      	ldr	r2, [pc, #32]	@ (810064c <_ZL12MX_MDMA_Initv+0x30>)
 810062a:	f043 0301 	orr.w	r3, r3, #1
 810062e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100632:	4b06      	ldr	r3, [pc, #24]	@ (810064c <_ZL12MX_MDMA_Initv+0x30>)
 8100634:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100638:	f003 0301 	and.w	r3, r3, #1
 810063c:	607b      	str	r3, [r7, #4]
 810063e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8100640:	bf00      	nop
 8100642:	370c      	adds	r7, #12
 8100644:	46bd      	mov	sp, r7
 8100646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810064a:	4770      	bx	lr
 810064c:	58024400 	.word	0x58024400

08100650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100650:	b580      	push	{r7, lr}
 8100652:	b082      	sub	sp, #8
 8100654:	af00      	add	r7, sp, #0
 8100656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100658:	687b      	ldr	r3, [r7, #4]
 810065a:	681b      	ldr	r3, [r3, #0]
 810065c:	4a04      	ldr	r2, [pc, #16]	@ (8100670 <HAL_TIM_PeriodElapsedCallback+0x20>)
 810065e:	4293      	cmp	r3, r2
 8100660:	d101      	bne.n	8100666 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100662:	f002 fe7f 	bl	8103364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100666:	bf00      	nop
 8100668:	3708      	adds	r7, #8
 810066a:	46bd      	mov	sp, r7
 810066c:	bd80      	pop	{r7, pc}
 810066e:	bf00      	nop
 8100670:	40001000 	.word	0x40001000

08100674 <_Z41__static_initialization_and_destruction_0ii>:
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8100674:	b580      	push	{r7, lr}
 8100676:	b082      	sub	sp, #8
 8100678:	af00      	add	r7, sp, #0
 810067a:	6078      	str	r0, [r7, #4]
 810067c:	6039      	str	r1, [r7, #0]
 810067e:	687b      	ldr	r3, [r7, #4]
 8100680:	2b01      	cmp	r3, #1
 8100682:	d114      	bne.n	81006ae <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8100684:	683b      	ldr	r3, [r7, #0]
 8100686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810068a:	4293      	cmp	r3, r2
 810068c:	d10f      	bne.n	81006ae <_Z41__static_initialization_and_destruction_0ii+0x3a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(8, sizeof(SMessage));
 810068e:	2200      	movs	r2, #0
 8100690:	2118      	movs	r1, #24
 8100692:	2008      	movs	r0, #8
 8100694:	f004 fc79 	bl	8104f8a <xQueueGenericCreate>
 8100698:	4603      	mov	r3, r0
 810069a:	4a07      	ldr	r2, [pc, #28]	@ (81006b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 810069c:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 810069e:	2200      	movs	r2, #0
 81006a0:	2118      	movs	r1, #24
 81006a2:	2010      	movs	r0, #16
 81006a4:	f004 fc71 	bl	8104f8a <xQueueGenericCreate>
 81006a8:	4603      	mov	r3, r0
 81006aa:	4a04      	ldr	r2, [pc, #16]	@ (81006bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 81006ac:	6013      	str	r3, [r2, #0]
}
 81006ae:	bf00      	nop
 81006b0:	3708      	adds	r7, #8
 81006b2:	46bd      	mov	sp, r7
 81006b4:	bd80      	pop	{r7, pc}
 81006b6:	bf00      	nop
 81006b8:	10000088 	.word	0x10000088
 81006bc:	1000008c 	.word	0x1000008c

081006c0 <_GLOBAL__sub_I_huart1>:
 81006c0:	b580      	push	{r7, lr}
 81006c2:	af00      	add	r7, sp, #0
 81006c4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 81006c8:	2001      	movs	r0, #1
 81006ca:	f7ff ffd3 	bl	8100674 <_Z41__static_initialization_and_destruction_0ii>
 81006ce:	bd80      	pop	{r7, pc}

081006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81006d0:	b580      	push	{r7, lr}
 81006d2:	b082      	sub	sp, #8
 81006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81006d6:	4b10      	ldr	r3, [pc, #64]	@ (8100718 <HAL_MspInit+0x48>)
 81006d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81006dc:	4a0e      	ldr	r2, [pc, #56]	@ (8100718 <HAL_MspInit+0x48>)
 81006de:	f043 0302 	orr.w	r3, r3, #2
 81006e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8100718 <HAL_MspInit+0x48>)
 81006e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81006ec:	f003 0302 	and.w	r3, r3, #2
 81006f0:	607b      	str	r3, [r7, #4]
 81006f2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81006f4:	2200      	movs	r2, #0
 81006f6:	210f      	movs	r1, #15
 81006f8:	f06f 0001 	mvn.w	r0, #1
 81006fc:	f002 fefe 	bl	81034fc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8100700:	2200      	movs	r2, #0
 8100702:	2105      	movs	r1, #5
 8100704:	207e      	movs	r0, #126	@ 0x7e
 8100706:	f002 fef9 	bl	81034fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810070a:	207e      	movs	r0, #126	@ 0x7e
 810070c:	f002 ff10 	bl	8103530 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100710:	bf00      	nop
 8100712:	3708      	adds	r7, #8
 8100714:	46bd      	mov	sp, r7
 8100716:	bd80      	pop	{r7, pc}
 8100718:	58024400 	.word	0x58024400

0810071c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810071c:	b580      	push	{r7, lr}
 810071e:	b090      	sub	sp, #64	@ 0x40
 8100720:	af00      	add	r7, sp, #0
 8100722:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100724:	687b      	ldr	r3, [r7, #4]
 8100726:	2b0f      	cmp	r3, #15
 8100728:	d827      	bhi.n	810077a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 810072a:	2200      	movs	r2, #0
 810072c:	6879      	ldr	r1, [r7, #4]
 810072e:	2036      	movs	r0, #54	@ 0x36
 8100730:	f002 fee4 	bl	81034fc <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8100734:	2036      	movs	r0, #54	@ 0x36
 8100736:	f002 fefb 	bl	8103530 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 810073a:	4a29      	ldr	r2, [pc, #164]	@ (81007e0 <HAL_InitTick+0xc4>)
 810073c:	687b      	ldr	r3, [r7, #4]
 810073e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8100740:	4b28      	ldr	r3, [pc, #160]	@ (81007e4 <HAL_InitTick+0xc8>)
 8100742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100746:	4a27      	ldr	r2, [pc, #156]	@ (81007e4 <HAL_InitTick+0xc8>)
 8100748:	f043 0310 	orr.w	r3, r3, #16
 810074c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100750:	4b24      	ldr	r3, [pc, #144]	@ (81007e4 <HAL_InitTick+0xc8>)
 8100752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100756:	f003 0310 	and.w	r3, r3, #16
 810075a:	60fb      	str	r3, [r7, #12]
 810075c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810075e:	f107 0210 	add.w	r2, r7, #16
 8100762:	f107 0314 	add.w	r3, r7, #20
 8100766:	4611      	mov	r1, r2
 8100768:	4618      	mov	r0, r3
 810076a:	f003 f9b1 	bl	8103ad0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810076e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100770:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100774:	2b00      	cmp	r3, #0
 8100776:	d106      	bne.n	8100786 <HAL_InitTick+0x6a>
 8100778:	e001      	b.n	810077e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810077a:	2301      	movs	r3, #1
 810077c:	e02b      	b.n	81007d6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810077e:	f003 f991 	bl	8103aa4 <HAL_RCC_GetPCLK1Freq>
 8100782:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100784:	e004      	b.n	8100790 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100786:	f003 f98d 	bl	8103aa4 <HAL_RCC_GetPCLK1Freq>
 810078a:	4603      	mov	r3, r0
 810078c:	005b      	lsls	r3, r3, #1
 810078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100792:	4a15      	ldr	r2, [pc, #84]	@ (81007e8 <HAL_InitTick+0xcc>)
 8100794:	fba2 2303 	umull	r2, r3, r2, r3
 8100798:	0c9b      	lsrs	r3, r3, #18
 810079a:	3b01      	subs	r3, #1
 810079c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 810079e:	4b13      	ldr	r3, [pc, #76]	@ (81007ec <HAL_InitTick+0xd0>)
 81007a0:	4a13      	ldr	r2, [pc, #76]	@ (81007f0 <HAL_InitTick+0xd4>)
 81007a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 81007a4:	4b11      	ldr	r3, [pc, #68]	@ (81007ec <HAL_InitTick+0xd0>)
 81007a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81007aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 81007ac:	4a0f      	ldr	r2, [pc, #60]	@ (81007ec <HAL_InitTick+0xd0>)
 81007ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81007b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 81007b2:	4b0e      	ldr	r3, [pc, #56]	@ (81007ec <HAL_InitTick+0xd0>)
 81007b4:	2200      	movs	r2, #0
 81007b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81007b8:	4b0c      	ldr	r3, [pc, #48]	@ (81007ec <HAL_InitTick+0xd0>)
 81007ba:	2200      	movs	r2, #0
 81007bc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 81007be:	480b      	ldr	r0, [pc, #44]	@ (81007ec <HAL_InitTick+0xd0>)
 81007c0:	f003 f9c8 	bl	8103b54 <HAL_TIM_Base_Init>
 81007c4:	4603      	mov	r3, r0
 81007c6:	2b00      	cmp	r3, #0
 81007c8:	d104      	bne.n	81007d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 81007ca:	4808      	ldr	r0, [pc, #32]	@ (81007ec <HAL_InitTick+0xd0>)
 81007cc:	f003 fa24 	bl	8103c18 <HAL_TIM_Base_Start_IT>
 81007d0:	4603      	mov	r3, r0
 81007d2:	e000      	b.n	81007d6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81007d4:	2301      	movs	r3, #1
}
 81007d6:	4618      	mov	r0, r3
 81007d8:	3740      	adds	r7, #64	@ 0x40
 81007da:	46bd      	mov	sp, r7
 81007dc:	bd80      	pop	{r7, pc}
 81007de:	bf00      	nop
 81007e0:	10000008 	.word	0x10000008
 81007e4:	58024400 	.word	0x58024400
 81007e8:	431bde83 	.word	0x431bde83
 81007ec:	10000090 	.word	0x10000090
 81007f0:	40001000 	.word	0x40001000

081007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81007f4:	b480      	push	{r7}
 81007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81007f8:	bf00      	nop
 81007fa:	e7fd      	b.n	81007f8 <NMI_Handler+0x4>

081007fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81007fc:	b480      	push	{r7}
 81007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100800:	bf00      	nop
 8100802:	e7fd      	b.n	8100800 <HardFault_Handler+0x4>

08100804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100804:	b480      	push	{r7}
 8100806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100808:	bf00      	nop
 810080a:	e7fd      	b.n	8100808 <MemManage_Handler+0x4>

0810080c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810080c:	b480      	push	{r7}
 810080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100810:	bf00      	nop
 8100812:	e7fd      	b.n	8100810 <BusFault_Handler+0x4>

08100814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100814:	b480      	push	{r7}
 8100816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100818:	bf00      	nop
 810081a:	e7fd      	b.n	8100818 <UsageFault_Handler+0x4>

0810081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810081c:	b480      	push	{r7}
 810081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100820:	bf00      	nop
 8100822:	46bd      	mov	sp, r7
 8100824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100828:	4770      	bx	lr
	...

0810082c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 810082c:	b580      	push	{r7, lr}
 810082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8100830:	4802      	ldr	r0, [pc, #8]	@ (810083c <TIM6_DAC_IRQHandler+0x10>)
 8100832:	f003 fa69 	bl	8103d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100836:	bf00      	nop
 8100838:	bd80      	pop	{r7, pc}
 810083a:	bf00      	nop
 810083c:	10000090 	.word	0x10000090

08100840 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100840:	b580      	push	{r7, lr}
 8100842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100844:	f002 fee0 	bl	8103608 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100848:	bf00      	nop
 810084a:	bd80      	pop	{r7, pc}

0810084c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810084c:	b480      	push	{r7}
 810084e:	af00      	add	r7, sp, #0
	return 1;
 8100850:	2301      	movs	r3, #1
}
 8100852:	4618      	mov	r0, r3
 8100854:	46bd      	mov	sp, r7
 8100856:	f85d 7b04 	ldr.w	r7, [sp], #4
 810085a:	4770      	bx	lr

0810085c <_kill>:

int _kill(int pid, int sig)
{
 810085c:	b580      	push	{r7, lr}
 810085e:	b082      	sub	sp, #8
 8100860:	af00      	add	r7, sp, #0
 8100862:	6078      	str	r0, [r7, #4]
 8100864:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100866:	f007 fab9 	bl	8107ddc <__errno>
 810086a:	4603      	mov	r3, r0
 810086c:	2216      	movs	r2, #22
 810086e:	601a      	str	r2, [r3, #0]
	return -1;
 8100870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100874:	4618      	mov	r0, r3
 8100876:	3708      	adds	r7, #8
 8100878:	46bd      	mov	sp, r7
 810087a:	bd80      	pop	{r7, pc}

0810087c <_exit>:

void _exit (int status)
{
 810087c:	b580      	push	{r7, lr}
 810087e:	b082      	sub	sp, #8
 8100880:	af00      	add	r7, sp, #0
 8100882:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100884:	f04f 31ff 	mov.w	r1, #4294967295
 8100888:	6878      	ldr	r0, [r7, #4]
 810088a:	f7ff ffe7 	bl	810085c <_kill>
	while (1) {}		/* Make sure we hang here */
 810088e:	bf00      	nop
 8100890:	e7fd      	b.n	810088e <_exit+0x12>
	...

08100894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100894:	b580      	push	{r7, lr}
 8100896:	b086      	sub	sp, #24
 8100898:	af00      	add	r7, sp, #0
 810089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810089c:	4a14      	ldr	r2, [pc, #80]	@ (81008f0 <_sbrk+0x5c>)
 810089e:	4b15      	ldr	r3, [pc, #84]	@ (81008f4 <_sbrk+0x60>)
 81008a0:	1ad3      	subs	r3, r2, r3
 81008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81008a4:	697b      	ldr	r3, [r7, #20]
 81008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81008a8:	4b13      	ldr	r3, [pc, #76]	@ (81008f8 <_sbrk+0x64>)
 81008aa:	681b      	ldr	r3, [r3, #0]
 81008ac:	2b00      	cmp	r3, #0
 81008ae:	d102      	bne.n	81008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81008b0:	4b11      	ldr	r3, [pc, #68]	@ (81008f8 <_sbrk+0x64>)
 81008b2:	4a12      	ldr	r2, [pc, #72]	@ (81008fc <_sbrk+0x68>)
 81008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81008b6:	4b10      	ldr	r3, [pc, #64]	@ (81008f8 <_sbrk+0x64>)
 81008b8:	681a      	ldr	r2, [r3, #0]
 81008ba:	687b      	ldr	r3, [r7, #4]
 81008bc:	4413      	add	r3, r2
 81008be:	693a      	ldr	r2, [r7, #16]
 81008c0:	429a      	cmp	r2, r3
 81008c2:	d207      	bcs.n	81008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81008c4:	f007 fa8a 	bl	8107ddc <__errno>
 81008c8:	4603      	mov	r3, r0
 81008ca:	220c      	movs	r2, #12
 81008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81008ce:	f04f 33ff 	mov.w	r3, #4294967295
 81008d2:	e009      	b.n	81008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81008d4:	4b08      	ldr	r3, [pc, #32]	@ (81008f8 <_sbrk+0x64>)
 81008d6:	681b      	ldr	r3, [r3, #0]
 81008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81008da:	4b07      	ldr	r3, [pc, #28]	@ (81008f8 <_sbrk+0x64>)
 81008dc:	681a      	ldr	r2, [r3, #0]
 81008de:	687b      	ldr	r3, [r7, #4]
 81008e0:	4413      	add	r3, r2
 81008e2:	4a05      	ldr	r2, [pc, #20]	@ (81008f8 <_sbrk+0x64>)
 81008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81008e6:	68fb      	ldr	r3, [r7, #12]
}
 81008e8:	4618      	mov	r0, r3
 81008ea:	3718      	adds	r7, #24
 81008ec:	46bd      	mov	sp, r7
 81008ee:	bd80      	pop	{r7, pc}
 81008f0:	10048000 	.word	0x10048000
 81008f4:	00001000 	.word	0x00001000
 81008f8:	100000dc 	.word	0x100000dc
 81008fc:	10004c20 	.word	0x10004c20

08100900 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8100900:	b480      	push	{r7}
 8100902:	b083      	sub	sp, #12
 8100904:	af00      	add	r7, sp, #0
 8100906:	6078      	str	r0, [r7, #4]
 8100908:	6039      	str	r1, [r7, #0]
 810090a:	683b      	ldr	r3, [r7, #0]
 810090c:	4618      	mov	r0, r3
 810090e:	370c      	adds	r7, #12
 8100910:	46bd      	mov	sp, r7
 8100912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100916:	4770      	bx	lr

08100918 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8100918:	b480      	push	{r7}
 810091a:	b083      	sub	sp, #12
 810091c:	af00      	add	r7, sp, #0
 810091e:	6078      	str	r0, [r7, #4]
 8100920:	687b      	ldr	r3, [r7, #4]
 8100922:	4618      	mov	r0, r3
 8100924:	370c      	adds	r7, #12
 8100926:	46bd      	mov	sp, r7
 8100928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810092c:	4770      	bx	lr

0810092e <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 810092e:	b480      	push	{r7}
 8100930:	b083      	sub	sp, #12
 8100932:	af00      	add	r7, sp, #0
 8100934:	6078      	str	r0, [r7, #4]
 8100936:	687b      	ldr	r3, [r7, #4]
 8100938:	4618      	mov	r0, r3
 810093a:	370c      	adds	r7, #12
 810093c:	46bd      	mov	sp, r7
 810093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100942:	4770      	bx	lr

08100944 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8100944:	b580      	push	{r7, lr}
 8100946:	b082      	sub	sp, #8
 8100948:	af00      	add	r7, sp, #0
 810094a:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 810094c:	687b      	ldr	r3, [r7, #4]
 810094e:	689b      	ldr	r3, [r3, #8]
 8100950:	2b00      	cmp	r3, #0
 8100952:	d005      	beq.n	8100960 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8100954:	687b      	ldr	r3, [r7, #4]
 8100956:	689b      	ldr	r3, [r3, #8]
 8100958:	6878      	ldr	r0, [r7, #4]
 810095a:	6879      	ldr	r1, [r7, #4]
 810095c:	2203      	movs	r2, #3
 810095e:	4798      	blx	r3
    }
 8100960:	687b      	ldr	r3, [r7, #4]
 8100962:	4618      	mov	r0, r3
 8100964:	3708      	adds	r7, #8
 8100966:	46bd      	mov	sp, r7
 8100968:	bd80      	pop	{r7, pc}

0810096a <_Z18StartTask_EDaemonNPv>:

int recvcount = 0;
int first_message_skipped = 0;

void StartTask_EDaemonN(void *argument)
{
 810096a:	b580      	push	{r7, lr}
 810096c:	b086      	sub	sp, #24
 810096e:	af00      	add	r7, sp, #0
 8100970:	6078      	str	r0, [r7, #4]
	ipc_start();
 8100972:	f7ff fd21 	bl	81003b8 <ipc_start>
	EdiabasDaemonNativeTask EdiabasDaemonNativeTaskInstance;
 8100976:	f107 030c 	add.w	r3, r7, #12
 810097a:	4618      	mov	r0, r3
 810097c:	f000 f80a 	bl	8100994 <_ZN23EdiabasDaemonNativeTaskC1Ev>

	for(;;)
	{
		EdiabasDaemonNativeTaskInstance.process();
 8100980:	f107 030c 	add.w	r3, r7, #12
 8100984:	4618      	mov	r0, r3
 8100986:	f000 f85d 	bl	8100a44 <_ZN23EdiabasDaemonNativeTask7processEv>
		osDelay(1);
 810098a:	2001      	movs	r0, #1
 810098c:	f003 fcd0 	bl	8104330 <osDelay>
		EdiabasDaemonNativeTaskInstance.process();
 8100990:	bf00      	nop
 8100992:	e7f5      	b.n	8100980 <_Z18StartTask_EDaemonNPv+0x16>

08100994 <_ZN23EdiabasDaemonNativeTaskC1Ev>:
	}
}

EdiabasDaemonNativeTask::EdiabasDaemonNativeTask() : event_bus(EventBusManager(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8100994:	b580      	push	{r7, lr}
 8100996:	b082      	sub	sp, #8
 8100998:	af00      	add	r7, sp, #0
 810099a:	6078      	str	r0, [r7, #4]
 810099c:	687b      	ldr	r3, [r7, #4]
 810099e:	4a05      	ldr	r2, [pc, #20]	@ (81009b4 <_ZN23EdiabasDaemonNativeTaskC1Ev+0x20>)
 81009a0:	6811      	ldr	r1, [r2, #0]
 81009a2:	2204      	movs	r2, #4
 81009a4:	4618      	mov	r0, r3
 81009a6:	f000 faa5 	bl	8100ef4 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient>
 81009aa:	687b      	ldr	r3, [r7, #4]
 81009ac:	4618      	mov	r0, r3
 81009ae:	3708      	adds	r7, #8
 81009b0:	46bd      	mov	sp, r7
 81009b2:	bd80      	pop	{r7, pc}
 81009b4:	1000008c 	.word	0x1000008c

081009b8 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>:

void EdiabasDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
{
 81009b8:	b082      	sub	sp, #8
 81009ba:	b480      	push	{r7}
 81009bc:	b083      	sub	sp, #12
 81009be:	af00      	add	r7, sp, #0
 81009c0:	6078      	str	r0, [r7, #4]
 81009c2:	f107 0010 	add.w	r0, r7, #16
 81009c6:	e880 000c 	stmia.w	r0, {r2, r3}
 81009ca:	460b      	mov	r3, r1
 81009cc:	70fb      	strb	r3, [r7, #3]
	switch(event)
	{
		default:
			break;
 81009ce:	bf00      	nop
	}
}
 81009d0:	bf00      	nop
 81009d2:	370c      	adds	r7, #12
 81009d4:	46bd      	mov	sp, r7
 81009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009da:	b002      	add	sp, #8
 81009dc:	4770      	bx	lr

081009de <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>:
	{
		msg.event_receiver = static_cast<EEventClient>(recvcount);
		recvcount++;
		ipc_sendmsg(&msg, len, 0);
	}
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 81009de:	b082      	sub	sp, #8
 81009e0:	b5b0      	push	{r4, r5, r7, lr}
 81009e2:	b086      	sub	sp, #24
 81009e4:	af04      	add	r7, sp, #16
 81009e6:	6078      	str	r0, [r7, #4]
 81009e8:	f107 0018 	add.w	r0, r7, #24
 81009ec:	e880 000c 	stmia.w	r0, {r2, r3}
 81009f0:	460b      	mov	r3, r1
 81009f2:	70fb      	strb	r3, [r7, #3]
 81009f4:	687b      	ldr	r3, [r7, #4]
 81009f6:	681c      	ldr	r4, [r3, #0]
 81009f8:	78fd      	ldrb	r5, [r7, #3]
 81009fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 81009fe:	9302      	str	r3, [sp, #8]
 8100a00:	466a      	mov	r2, sp
 8100a02:	f107 0320 	add.w	r3, r7, #32
 8100a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100a0a:	e882 0003 	stmia.w	r2, {r0, r1}
 8100a0e:	f107 0318 	add.w	r3, r7, #24
 8100a12:	cb0c      	ldmia	r3, {r2, r3}
 8100a14:	4629      	mov	r1, r5
 8100a16:	4620      	mov	r0, r4
 8100a18:	f7ff ffce 	bl	81009b8 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>
 8100a1c:	bf00      	nop
 8100a1e:	3708      	adds	r7, #8
 8100a20:	46bd      	mov	sp, r7
 8100a22:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8100a26:	b002      	add	sp, #8
 8100a28:	4770      	bx	lr

08100a2a <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8100a2a:	b580      	push	{r7, lr}
 8100a2c:	b082      	sub	sp, #8
 8100a2e:	af00      	add	r7, sp, #0
 8100a30:	6078      	str	r0, [r7, #4]
 8100a32:	687b      	ldr	r3, [r7, #4]
 8100a34:	4618      	mov	r0, r3
 8100a36:	f7ff ff85 	bl	8100944 <_ZNSt14_Function_baseD1Ev>
 8100a3a:	687b      	ldr	r3, [r7, #4]
 8100a3c:	4618      	mov	r0, r3
 8100a3e:	3708      	adds	r7, #8
 8100a40:	46bd      	mov	sp, r7
 8100a42:	bd80      	pop	{r7, pc}

08100a44 <_ZN23EdiabasDaemonNativeTask7processEv>:
{
 8100a44:	b590      	push	{r4, r7, lr}
 8100a46:	b091      	sub	sp, #68	@ 0x44
 8100a48:	af00      	add	r7, sp, #0
 8100a4a:	6078      	str	r0, [r7, #4]
	size_t len = sizeof(msg);
 8100a4c:	2318      	movs	r3, #24
 8100a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	size_t ret = ipc_recvmsg(&msg, len, 0);
 8100a50:	f107 030c 	add.w	r3, r7, #12
 8100a54:	2200      	movs	r2, #0
 8100a56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8100a58:	4618      	mov	r0, r3
 8100a5a:	f7ff fd5b 	bl	8100514 <ipc_recvmsg>
 8100a5e:	63b8      	str	r0, [r7, #56]	@ 0x38
	if(ret == len)
 8100a60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8100a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100a64:	429a      	cmp	r2, r3
 8100a66:	d110      	bne.n	8100a8a <_ZN23EdiabasDaemonNativeTask7processEv+0x46>
		msg.event_receiver = static_cast<EEventClient>(recvcount);
 8100a68:	4b15      	ldr	r3, [pc, #84]	@ (8100ac0 <_ZN23EdiabasDaemonNativeTask7processEv+0x7c>)
 8100a6a:	681b      	ldr	r3, [r3, #0]
 8100a6c:	b2db      	uxtb	r3, r3
 8100a6e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		recvcount++;
 8100a72:	4b13      	ldr	r3, [pc, #76]	@ (8100ac0 <_ZN23EdiabasDaemonNativeTask7processEv+0x7c>)
 8100a74:	681b      	ldr	r3, [r3, #0]
 8100a76:	3301      	adds	r3, #1
 8100a78:	4a11      	ldr	r2, [pc, #68]	@ (8100ac0 <_ZN23EdiabasDaemonNativeTask7processEv+0x7c>)
 8100a7a:	6013      	str	r3, [r2, #0]
		ipc_sendmsg(&msg, len, 0);
 8100a7c:	f107 030c 	add.w	r3, r7, #12
 8100a80:	2200      	movs	r2, #0
 8100a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8100a84:	4618      	mov	r0, r3
 8100a86:	f7ff fd1d 	bl	81004c4 <ipc_sendmsg>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8100a8a:	687c      	ldr	r4, [r7, #4]
 8100a8c:	687b      	ldr	r3, [r7, #4]
 8100a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8100a90:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8100a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100a98:	4611      	mov	r1, r2
 8100a9a:	4618      	mov	r0, r3
 8100a9c:	f000 f826 	bl	8100aec <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>
 8100aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100aa4:	4619      	mov	r1, r3
 8100aa6:	4620      	mov	r0, r4
 8100aa8:	f000 fa3e 	bl	8100f28 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>
 8100aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100ab0:	4618      	mov	r0, r3
 8100ab2:	f7ff ffba 	bl	8100a2a <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>
}
 8100ab6:	bf00      	nop
 8100ab8:	3744      	adds	r7, #68	@ 0x44
 8100aba:	46bd      	mov	sp, r7
 8100abc:	bd90      	pop	{r4, r7, pc}
 8100abe:	bf00      	nop
 8100ac0:	100000e0 	.word	0x100000e0

08100ac4 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8100ac4:	b480      	push	{r7}
 8100ac6:	b083      	sub	sp, #12
 8100ac8:	af00      	add	r7, sp, #0
 8100aca:	6078      	str	r0, [r7, #4]
 8100acc:	687b      	ldr	r3, [r7, #4]
 8100ace:	461a      	mov	r2, r3
 8100ad0:	2300      	movs	r3, #0
 8100ad2:	6013      	str	r3, [r2, #0]
 8100ad4:	6053      	str	r3, [r2, #4]
 8100ad6:	687b      	ldr	r3, [r7, #4]
 8100ad8:	2200      	movs	r2, #0
 8100ada:	609a      	str	r2, [r3, #8]
 8100adc:	687b      	ldr	r3, [r7, #4]
 8100ade:	4618      	mov	r0, r3
 8100ae0:	370c      	adds	r7, #12
 8100ae2:	46bd      	mov	sp, r7
 8100ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ae8:	4770      	bx	lr
	...

08100aec <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8100aec:	b590      	push	{r4, r7, lr}
 8100aee:	b083      	sub	sp, #12
 8100af0:	af00      	add	r7, sp, #0
 8100af2:	6078      	str	r0, [r7, #4]
 8100af4:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8100af6:	687b      	ldr	r3, [r7, #4]
 8100af8:	461a      	mov	r2, r3
 8100afa:	2300      	movs	r3, #0
 8100afc:	6013      	str	r3, [r2, #0]
 8100afe:	6053      	str	r3, [r2, #4]
 8100b00:	6093      	str	r3, [r2, #8]
 8100b02:	687b      	ldr	r3, [r7, #4]
 8100b04:	4618      	mov	r0, r3
 8100b06:	f7ff ffdd 	bl	8100ac4 <_ZNSt14_Function_baseC1Ev>
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	2200      	movs	r2, #0
 8100b0e:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8100b10:	6838      	ldr	r0, [r7, #0]
 8100b12:	f000 f81b 	bl	8100b4c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>
 8100b16:	4603      	mov	r3, r0
 8100b18:	2b00      	cmp	r3, #0
 8100b1a:	d00e      	beq.n	8100b3a <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8100b1c:	687c      	ldr	r4, [r7, #4]
 8100b1e:	6838      	ldr	r0, [r7, #0]
 8100b20:	f000 f81f 	bl	8100b62 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100b24:	4603      	mov	r3, r0
 8100b26:	4619      	mov	r1, r3
 8100b28:	4620      	mov	r0, r4
 8100b2a:	f000 f825 	bl	8100b78 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8100b2e:	687b      	ldr	r3, [r7, #4]
 8100b30:	4a04      	ldr	r2, [pc, #16]	@ (8100b44 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x58>)
 8100b32:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8100b34:	687b      	ldr	r3, [r7, #4]
 8100b36:	4a04      	ldr	r2, [pc, #16]	@ (8100b48 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x5c>)
 8100b38:	609a      	str	r2, [r3, #8]
	    }
	}
 8100b3a:	687b      	ldr	r3, [r7, #4]
 8100b3c:	4618      	mov	r0, r3
 8100b3e:	370c      	adds	r7, #12
 8100b40:	46bd      	mov	sp, r7
 8100b42:	bd90      	pop	{r4, r7, pc}
 8100b44:	08100b9d 	.word	0x08100b9d
 8100b48:	08100bdd 	.word	0x08100bdd

08100b4c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8100b4c:	b480      	push	{r7}
 8100b4e:	b083      	sub	sp, #12
 8100b50:	af00      	add	r7, sp, #0
 8100b52:	6078      	str	r0, [r7, #4]
	  { return true; }
 8100b54:	2301      	movs	r3, #1
 8100b56:	4618      	mov	r0, r3
 8100b58:	370c      	adds	r7, #12
 8100b5a:	46bd      	mov	sp, r7
 8100b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b60:	4770      	bx	lr

08100b62 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100b62:	b480      	push	{r7}
 8100b64:	b083      	sub	sp, #12
 8100b66:	af00      	add	r7, sp, #0
 8100b68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100b6a:	687b      	ldr	r3, [r7, #4]
 8100b6c:	4618      	mov	r0, r3
 8100b6e:	370c      	adds	r7, #12
 8100b70:	46bd      	mov	sp, r7
 8100b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b76:	4770      	bx	lr

08100b78 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8100b78:	b590      	push	{r4, r7, lr}
 8100b7a:	b083      	sub	sp, #12
 8100b7c:	af00      	add	r7, sp, #0
 8100b7e:	6078      	str	r0, [r7, #4]
 8100b80:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8100b82:	6838      	ldr	r0, [r7, #0]
 8100b84:	f7ff ffed 	bl	8100b62 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100b88:	4603      	mov	r3, r0
 8100b8a:	4622      	mov	r2, r4
 8100b8c:	4619      	mov	r1, r3
 8100b8e:	6878      	ldr	r0, [r7, #4]
 8100b90:	f000 f843 	bl	8100c1a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8100b94:	bf00      	nop
 8100b96:	370c      	adds	r7, #12
 8100b98:	46bd      	mov	sp, r7
 8100b9a:	bd90      	pop	{r4, r7, pc}

08100b9c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8100b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100b9e:	b085      	sub	sp, #20
 8100ba0:	af00      	add	r7, sp, #0
 8100ba2:	60f8      	str	r0, [r7, #12]
 8100ba4:	60b9      	str	r1, [r7, #8]
 8100ba6:	607a      	str	r2, [r7, #4]
 8100ba8:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8100baa:	68f8      	ldr	r0, [r7, #12]
 8100bac:	f000 f84e 	bl	8100c4c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100bb0:	4604      	mov	r4, r0
 8100bb2:	68b8      	ldr	r0, [r7, #8]
 8100bb4:	f000 f85b 	bl	8100c6e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100bb8:	4605      	mov	r5, r0
 8100bba:	6878      	ldr	r0, [r7, #4]
 8100bbc:	f000 f862 	bl	8100c84 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100bc0:	4606      	mov	r6, r0
 8100bc2:	6838      	ldr	r0, [r7, #0]
 8100bc4:	f000 f869 	bl	8100c9a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100bc8:	4603      	mov	r3, r0
 8100bca:	4632      	mov	r2, r6
 8100bcc:	4629      	mov	r1, r5
 8100bce:	4620      	mov	r0, r4
 8100bd0:	f000 f86e 	bl	8100cb0 <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8100bd4:	bf00      	nop
      }
 8100bd6:	3714      	adds	r7, #20
 8100bd8:	46bd      	mov	sp, r7
 8100bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100bdc <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8100bdc:	b590      	push	{r4, r7, lr}
 8100bde:	b085      	sub	sp, #20
 8100be0:	af00      	add	r7, sp, #0
 8100be2:	60f8      	str	r0, [r7, #12]
 8100be4:	60b9      	str	r1, [r7, #8]
 8100be6:	4613      	mov	r3, r2
 8100be8:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8100bea:	79fb      	ldrb	r3, [r7, #7]
 8100bec:	2b01      	cmp	r3, #1
 8100bee:	d109      	bne.n	8100c04 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8100bf0:	68f8      	ldr	r0, [r7, #12]
 8100bf2:	f000 f881 	bl	8100cf8 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100bf6:	4604      	mov	r4, r0
 8100bf8:	68b8      	ldr	r0, [r7, #8]
 8100bfa:	f000 f827 	bl	8100c4c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100bfe:	4603      	mov	r3, r0
 8100c00:	6023      	str	r3, [r4, #0]
	    break;
 8100c02:	e005      	b.n	8100c10 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8100c04:	79fb      	ldrb	r3, [r7, #7]
 8100c06:	461a      	mov	r2, r3
 8100c08:	68b9      	ldr	r1, [r7, #8]
 8100c0a:	68f8      	ldr	r0, [r7, #12]
 8100c0c:	f000 f880 	bl	8100d10 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8100c10:	2300      	movs	r3, #0
      }
 8100c12:	4618      	mov	r0, r3
 8100c14:	3714      	adds	r7, #20
 8100c16:	46bd      	mov	sp, r7
 8100c18:	bd90      	pop	{r4, r7, pc}

08100c1a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8100c1a:	b590      	push	{r4, r7, lr}
 8100c1c:	b085      	sub	sp, #20
 8100c1e:	af00      	add	r7, sp, #0
 8100c20:	60f8      	str	r0, [r7, #12]
 8100c22:	60b9      	str	r1, [r7, #8]
 8100c24:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8100c26:	68f8      	ldr	r0, [r7, #12]
 8100c28:	f7ff fe76 	bl	8100918 <_ZNSt9_Any_data9_M_accessEv>
 8100c2c:	4603      	mov	r3, r0
 8100c2e:	4619      	mov	r1, r3
 8100c30:	2004      	movs	r0, #4
 8100c32:	f7ff fe65 	bl	8100900 <_ZnwjPv>
 8100c36:	4604      	mov	r4, r0
 8100c38:	68b8      	ldr	r0, [r7, #8]
 8100c3a:	f7ff ff92 	bl	8100b62 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100c3e:	4603      	mov	r3, r0
 8100c40:	681b      	ldr	r3, [r3, #0]
 8100c42:	6023      	str	r3, [r4, #0]
	  }
 8100c44:	bf00      	nop
 8100c46:	3714      	adds	r7, #20
 8100c48:	46bd      	mov	sp, r7
 8100c4a:	bd90      	pop	{r4, r7, pc}

08100c4c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8100c4c:	b580      	push	{r7, lr}
 8100c4e:	b084      	sub	sp, #16
 8100c50:	af00      	add	r7, sp, #0
 8100c52:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8100c54:	6878      	ldr	r0, [r7, #4]
 8100c56:	f000 f895 	bl	8100d84 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>
 8100c5a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8100c5c:	68f8      	ldr	r0, [r7, #12]
 8100c5e:	f000 f89d 	bl	8100d9c <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>
 8100c62:	4603      	mov	r3, r0
 8100c64:	bf00      	nop
	}
 8100c66:	4618      	mov	r0, r3
 8100c68:	3710      	adds	r7, #16
 8100c6a:	46bd      	mov	sp, r7
 8100c6c:	bd80      	pop	{r7, pc}

08100c6e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100c6e:	b480      	push	{r7}
 8100c70:	b083      	sub	sp, #12
 8100c72:	af00      	add	r7, sp, #0
 8100c74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100c76:	687b      	ldr	r3, [r7, #4]
 8100c78:	4618      	mov	r0, r3
 8100c7a:	370c      	adds	r7, #12
 8100c7c:	46bd      	mov	sp, r7
 8100c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c82:	4770      	bx	lr

08100c84 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100c84:	b480      	push	{r7}
 8100c86:	b083      	sub	sp, #12
 8100c88:	af00      	add	r7, sp, #0
 8100c8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100c8c:	687b      	ldr	r3, [r7, #4]
 8100c8e:	4618      	mov	r0, r3
 8100c90:	370c      	adds	r7, #12
 8100c92:	46bd      	mov	sp, r7
 8100c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c98:	4770      	bx	lr

08100c9a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100c9a:	b480      	push	{r7}
 8100c9c:	b083      	sub	sp, #12
 8100c9e:	af00      	add	r7, sp, #0
 8100ca0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100ca2:	687b      	ldr	r3, [r7, #4]
 8100ca4:	4618      	mov	r0, r3
 8100ca6:	370c      	adds	r7, #12
 8100ca8:	46bd      	mov	sp, r7
 8100caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cae:	4770      	bx	lr

08100cb0 <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8100cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100cb4:	b086      	sub	sp, #24
 8100cb6:	af02      	add	r7, sp, #8
 8100cb8:	60f8      	str	r0, [r7, #12]
 8100cba:	60b9      	str	r1, [r7, #8]
 8100cbc:	607a      	str	r2, [r7, #4]
 8100cbe:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8100cc0:	68f8      	ldr	r0, [r7, #12]
 8100cc2:	f000 f876 	bl	8100db2 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8100cc6:	4604      	mov	r4, r0
 8100cc8:	68b8      	ldr	r0, [r7, #8]
 8100cca:	f7ff ffd0 	bl	8100c6e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100cce:	4605      	mov	r5, r0
 8100cd0:	6878      	ldr	r0, [r7, #4]
 8100cd2:	f7ff ffd7 	bl	8100c84 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100cd6:	4606      	mov	r6, r0
 8100cd8:	6838      	ldr	r0, [r7, #0]
 8100cda:	f7ff ffde 	bl	8100c9a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100cde:	4603      	mov	r3, r0
 8100ce0:	9300      	str	r3, [sp, #0]
 8100ce2:	4633      	mov	r3, r6
 8100ce4:	462a      	mov	r2, r5
 8100ce6:	4621      	mov	r1, r4
 8100ce8:	4640      	mov	r0, r8
 8100cea:	f000 f86d 	bl	8100dc8 <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8100cee:	bf00      	nop
 8100cf0:	3710      	adds	r7, #16
 8100cf2:	46bd      	mov	sp, r7
 8100cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08100cf8 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 8100cf8:	b580      	push	{r7, lr}
 8100cfa:	b082      	sub	sp, #8
 8100cfc:	af00      	add	r7, sp, #0
 8100cfe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100d00:	6878      	ldr	r0, [r7, #4]
 8100d02:	f7ff fe09 	bl	8100918 <_ZNSt9_Any_data9_M_accessEv>
 8100d06:	4603      	mov	r3, r0
 8100d08:	4618      	mov	r0, r3
 8100d0a:	3708      	adds	r7, #8
 8100d0c:	46bd      	mov	sp, r7
 8100d0e:	bd80      	pop	{r7, pc}

08100d10 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8100d10:	b590      	push	{r4, r7, lr}
 8100d12:	b085      	sub	sp, #20
 8100d14:	af00      	add	r7, sp, #0
 8100d16:	60f8      	str	r0, [r7, #12]
 8100d18:	60b9      	str	r1, [r7, #8]
 8100d1a:	4613      	mov	r3, r2
 8100d1c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8100d1e:	79fb      	ldrb	r3, [r7, #7]
 8100d20:	2b03      	cmp	r3, #3
 8100d22:	d82a      	bhi.n	8100d7a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8100d24:	a201      	add	r2, pc, #4	@ (adr r2, 8100d2c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8100d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100d2a:	bf00      	nop
 8100d2c:	08100d3d 	.word	0x08100d3d
 8100d30:	08100d4b 	.word	0x08100d4b
 8100d34:	08100d5f 	.word	0x08100d5f
 8100d38:	08100d71 	.word	0x08100d71
	      __dest._M_access<const type_info*>() = nullptr;
 8100d3c:	68f8      	ldr	r0, [r7, #12]
 8100d3e:	f000 f86e 	bl	8100e1e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8100d42:	4603      	mov	r3, r0
 8100d44:	2200      	movs	r2, #0
 8100d46:	601a      	str	r2, [r3, #0]
	      break;
 8100d48:	e017      	b.n	8100d7a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8100d4a:	68f8      	ldr	r0, [r7, #12]
 8100d4c:	f7ff ffd4 	bl	8100cf8 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100d50:	4604      	mov	r4, r0
 8100d52:	68b8      	ldr	r0, [r7, #8]
 8100d54:	f7ff ff7a 	bl	8100c4c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100d58:	4603      	mov	r3, r0
 8100d5a:	6023      	str	r3, [r4, #0]
	      break;
 8100d5c:	e00d      	b.n	8100d7a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8100d5e:	68b8      	ldr	r0, [r7, #8]
 8100d60:	f7ff ff74 	bl	8100c4c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100d64:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8100d66:	4619      	mov	r1, r3
 8100d68:	68f8      	ldr	r0, [r7, #12]
 8100d6a:	f000 f864 	bl	8100e36 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8100d6e:	e004      	b.n	8100d7a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8100d70:	4621      	mov	r1, r4
 8100d72:	68f8      	ldr	r0, [r7, #12]
 8100d74:	f000 f871 	bl	8100e5a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8100d78:	bf00      	nop
	  return false;
 8100d7a:	2300      	movs	r3, #0
	}
 8100d7c:	4618      	mov	r0, r3
 8100d7e:	3714      	adds	r7, #20
 8100d80:	46bd      	mov	sp, r7
 8100d82:	bd90      	pop	{r4, r7, pc}

08100d84 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>:
      _M_access() const noexcept
 8100d84:	b580      	push	{r7, lr}
 8100d86:	b082      	sub	sp, #8
 8100d88:	af00      	add	r7, sp, #0
 8100d8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8100d8c:	6878      	ldr	r0, [r7, #4]
 8100d8e:	f7ff fdce 	bl	810092e <_ZNKSt9_Any_data9_M_accessEv>
 8100d92:	4603      	mov	r3, r0
 8100d94:	4618      	mov	r0, r3
 8100d96:	3708      	adds	r7, #8
 8100d98:	46bd      	mov	sp, r7
 8100d9a:	bd80      	pop	{r7, pc}

08100d9c <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8100d9c:	b480      	push	{r7}
 8100d9e:	b083      	sub	sp, #12
 8100da0:	af00      	add	r7, sp, #0
 8100da2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8100da4:	687b      	ldr	r3, [r7, #4]
 8100da6:	4618      	mov	r0, r3
 8100da8:	370c      	adds	r7, #12
 8100daa:	46bd      	mov	sp, r7
 8100dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db0:	4770      	bx	lr

08100db2 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100db2:	b480      	push	{r7}
 8100db4:	b083      	sub	sp, #12
 8100db6:	af00      	add	r7, sp, #0
 8100db8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	4618      	mov	r0, r3
 8100dbe:	370c      	adds	r7, #12
 8100dc0:	46bd      	mov	sp, r7
 8100dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc6:	4770      	bx	lr

08100dc8 <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8100dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100dca:	b089      	sub	sp, #36	@ 0x24
 8100dcc:	af04      	add	r7, sp, #16
 8100dce:	7338      	strb	r0, [r7, #12]
 8100dd0:	60b9      	str	r1, [r7, #8]
 8100dd2:	607a      	str	r2, [r7, #4]
 8100dd4:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8100dd6:	68b8      	ldr	r0, [r7, #8]
 8100dd8:	f7ff ffeb 	bl	8100db2 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8100ddc:	4606      	mov	r6, r0
 8100dde:	6878      	ldr	r0, [r7, #4]
 8100de0:	f7ff ff45 	bl	8100c6e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100de4:	4603      	mov	r3, r0
 8100de6:	781d      	ldrb	r5, [r3, #0]
 8100de8:	6838      	ldr	r0, [r7, #0]
 8100dea:	f7ff ff4b 	bl	8100c84 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100dee:	4604      	mov	r4, r0
 8100df0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8100df2:	f7ff ff52 	bl	8100c9a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100df6:	4603      	mov	r3, r0
 8100df8:	781b      	ldrb	r3, [r3, #0]
 8100dfa:	9302      	str	r3, [sp, #8]
 8100dfc:	466a      	mov	r2, sp
 8100dfe:	f104 0308 	add.w	r3, r4, #8
 8100e02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100e06:	e882 0003 	stmia.w	r2, {r0, r1}
 8100e0a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8100e0e:	4629      	mov	r1, r5
 8100e10:	4630      	mov	r0, r6
 8100e12:	f7ff fde4 	bl	81009de <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>
 8100e16:	bf00      	nop
 8100e18:	3714      	adds	r7, #20
 8100e1a:	46bd      	mov	sp, r7
 8100e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100e1e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8100e1e:	b580      	push	{r7, lr}
 8100e20:	b082      	sub	sp, #8
 8100e22:	af00      	add	r7, sp, #0
 8100e24:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100e26:	6878      	ldr	r0, [r7, #4]
 8100e28:	f7ff fd76 	bl	8100918 <_ZNSt9_Any_data9_M_accessEv>
 8100e2c:	4603      	mov	r3, r0
 8100e2e:	4618      	mov	r0, r3
 8100e30:	3708      	adds	r7, #8
 8100e32:	46bd      	mov	sp, r7
 8100e34:	bd80      	pop	{r7, pc}

08100e36 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8100e36:	b590      	push	{r4, r7, lr}
 8100e38:	b083      	sub	sp, #12
 8100e3a:	af00      	add	r7, sp, #0
 8100e3c:	6078      	str	r0, [r7, #4]
 8100e3e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8100e40:	6838      	ldr	r0, [r7, #0]
 8100e42:	f000 f816 	bl	8100e72 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8100e46:	4603      	mov	r3, r0
 8100e48:	4622      	mov	r2, r4
 8100e4a:	4619      	mov	r1, r3
 8100e4c:	6878      	ldr	r0, [r7, #4]
 8100e4e:	f000 f81b 	bl	8100e88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8100e52:	bf00      	nop
 8100e54:	370c      	adds	r7, #12
 8100e56:	46bd      	mov	sp, r7
 8100e58:	bd90      	pop	{r4, r7, pc}

08100e5a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8100e5a:	b580      	push	{r7, lr}
 8100e5c:	b082      	sub	sp, #8
 8100e5e:	af00      	add	r7, sp, #0
 8100e60:	6078      	str	r0, [r7, #4]
 8100e62:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8100e64:	6878      	ldr	r0, [r7, #4]
 8100e66:	f000 f828 	bl	8100eba <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
	}
 8100e6a:	bf00      	nop
 8100e6c:	3708      	adds	r7, #8
 8100e6e:	46bd      	mov	sp, r7
 8100e70:	bd80      	pop	{r7, pc}

08100e72 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100e72:	b480      	push	{r7}
 8100e74:	b083      	sub	sp, #12
 8100e76:	af00      	add	r7, sp, #0
 8100e78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100e7a:	687b      	ldr	r3, [r7, #4]
 8100e7c:	4618      	mov	r0, r3
 8100e7e:	370c      	adds	r7, #12
 8100e80:	46bd      	mov	sp, r7
 8100e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e86:	4770      	bx	lr

08100e88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8100e88:	b590      	push	{r4, r7, lr}
 8100e8a:	b085      	sub	sp, #20
 8100e8c:	af00      	add	r7, sp, #0
 8100e8e:	60f8      	str	r0, [r7, #12]
 8100e90:	60b9      	str	r1, [r7, #8]
 8100e92:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8100e94:	68f8      	ldr	r0, [r7, #12]
 8100e96:	f7ff fd3f 	bl	8100918 <_ZNSt9_Any_data9_M_accessEv>
 8100e9a:	4603      	mov	r3, r0
 8100e9c:	4619      	mov	r1, r3
 8100e9e:	2004      	movs	r0, #4
 8100ea0:	f7ff fd2e 	bl	8100900 <_ZnwjPv>
 8100ea4:	4604      	mov	r4, r0
 8100ea6:	68b8      	ldr	r0, [r7, #8]
 8100ea8:	f7ff ffe3 	bl	8100e72 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8100eac:	4603      	mov	r3, r0
 8100eae:	681b      	ldr	r3, [r3, #0]
 8100eb0:	6023      	str	r3, [r4, #0]
	  }
 8100eb2:	bf00      	nop
 8100eb4:	3714      	adds	r7, #20
 8100eb6:	46bd      	mov	sp, r7
 8100eb8:	bd90      	pop	{r4, r7, pc}

08100eba <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 8100eba:	b580      	push	{r7, lr}
 8100ebc:	b082      	sub	sp, #8
 8100ebe:	af00      	add	r7, sp, #0
 8100ec0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100ec2:	6878      	ldr	r0, [r7, #4]
 8100ec4:	f7ff fd28 	bl	8100918 <_ZNSt9_Any_data9_M_accessEv>
 8100ec8:	4603      	mov	r3, r0
 8100eca:	4618      	mov	r0, r3
 8100ecc:	3708      	adds	r7, #8
 8100ece:	46bd      	mov	sp, r7
 8100ed0:	bd80      	pop	{r7, pc}

08100ed2 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8100ed2:	b480      	push	{r7}
 8100ed4:	b083      	sub	sp, #12
 8100ed6:	af00      	add	r7, sp, #0
 8100ed8:	6078      	str	r0, [r7, #4]
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	689b      	ldr	r3, [r3, #8]
 8100ede:	2b00      	cmp	r3, #0
 8100ee0:	bf0c      	ite	eq
 8100ee2:	2301      	moveq	r3, #1
 8100ee4:	2300      	movne	r3, #0
 8100ee6:	b2db      	uxtb	r3, r3
 8100ee8:	4618      	mov	r0, r3
 8100eea:	370c      	adds	r7, #12
 8100eec:	46bd      	mov	sp, r7
 8100eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ef2:	4770      	bx	lr

08100ef4 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient>:
#include "EventBusManager.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBusManager::EventBusManager(QueueHandle_t queueSelf, EEventClient senderSelf)
 8100ef4:	b480      	push	{r7}
 8100ef6:	b085      	sub	sp, #20
 8100ef8:	af00      	add	r7, sp, #0
 8100efa:	60f8      	str	r0, [r7, #12]
 8100efc:	60b9      	str	r1, [r7, #8]
 8100efe:	4613      	mov	r3, r2
 8100f00:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 8100f02:	68fb      	ldr	r3, [r7, #12]
 8100f04:	68ba      	ldr	r2, [r7, #8]
 8100f06:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8100f08:	68fb      	ldr	r3, [r7, #12]
 8100f0a:	79fa      	ldrb	r2, [r7, #7]
 8100f0c:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 8100f0e:	4b05      	ldr	r3, [pc, #20]	@ (8100f24 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient+0x30>)
 8100f10:	681a      	ldr	r2, [r3, #0]
 8100f12:	68fb      	ldr	r3, [r7, #12]
 8100f14:	609a      	str	r2, [r3, #8]
 8100f16:	68fb      	ldr	r3, [r7, #12]
 8100f18:	4618      	mov	r0, r3
 8100f1a:	3714      	adds	r7, #20
 8100f1c:	46bd      	mov	sp, r7
 8100f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f22:	4770      	bx	lr
 8100f24:	10000088 	.word	0x10000088

08100f28 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>:
	}
	return false;
}

void EventBusManager::receive(OnEventFunction on_event_function)
{
 8100f28:	b590      	push	{r4, r7, lr}
 8100f2a:	b08f      	sub	sp, #60	@ 0x3c
 8100f2c:	af04      	add	r7, sp, #16
 8100f2e:	6078      	str	r0, [r7, #4]
 8100f30:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8100f32:	687b      	ldr	r3, [r7, #4]
 8100f34:	681b      	ldr	r3, [r3, #0]
 8100f36:	2b00      	cmp	r3, #0
 8100f38:	d024      	beq.n	8100f84 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x5c>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 8100f3a:	2301      	movs	r3, #1
 8100f3c:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8100f3e:	e011      	b.n	8100f64 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x3c>
		{
//			LOG_DEBUG("Bus Manager msg received, result[%d}, event[%d]", ret, msg.event_type);
			on_event_function(msg.event_type, msg.message_data, msg.event_sender);
 8100f40:	7b3c      	ldrb	r4, [r7, #12]
 8100f42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8100f46:	9302      	str	r3, [sp, #8]
 8100f48:	466a      	mov	r2, sp
 8100f4a:	f107 0318 	add.w	r3, r7, #24
 8100f4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100f52:	e882 0003 	stmia.w	r2, {r0, r1}
 8100f56:	f107 0310 	add.w	r3, r7, #16
 8100f5a:	cb0c      	ldmia	r3, {r2, r3}
 8100f5c:	4621      	mov	r1, r4
 8100f5e:	6838      	ldr	r0, [r7, #0]
 8100f60:	f000 f814 	bl	8100f8c <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8100f64:	687b      	ldr	r3, [r7, #4]
 8100f66:	681b      	ldr	r3, [r3, #0]
 8100f68:	f107 010c 	add.w	r1, r7, #12
 8100f6c:	2200      	movs	r2, #0
 8100f6e:	4618      	mov	r0, r3
 8100f70:	f004 fa0a 	bl	8105388 <xQueueReceive>
 8100f74:	4603      	mov	r3, r0
 8100f76:	2b01      	cmp	r3, #1
 8100f78:	bf0c      	ite	eq
 8100f7a:	2301      	moveq	r3, #1
 8100f7c:	2300      	movne	r3, #0
 8100f7e:	b2db      	uxtb	r3, r3
 8100f80:	2b00      	cmp	r3, #0
 8100f82:	d1dd      	bne.n	8100f40 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x18>
		}
	}
}
 8100f84:	bf00      	nop
 8100f86:	372c      	adds	r7, #44	@ 0x2c
 8100f88:	46bd      	mov	sp, r7
 8100f8a:	bd90      	pop	{r4, r7, pc}

08100f8c <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8100f8c:	b082      	sub	sp, #8
 8100f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100f92:	b082      	sub	sp, #8
 8100f94:	af00      	add	r7, sp, #0
 8100f96:	6078      	str	r0, [r7, #4]
 8100f98:	f107 0020 	add.w	r0, r7, #32
 8100f9c:	e880 000c 	stmia.w	r0, {r2, r3}
 8100fa0:	460b      	mov	r3, r1
 8100fa2:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8100fa4:	687b      	ldr	r3, [r7, #4]
 8100fa6:	4618      	mov	r0, r3
 8100fa8:	f7ff ff93 	bl	8100ed2 <_ZNKSt14_Function_base8_M_emptyEv>
 8100fac:	4603      	mov	r3, r0
 8100fae:	2b00      	cmp	r3, #0
 8100fb0:	d001      	beq.n	8100fb6 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_+0x2a>
	  __throw_bad_function_call();
 8100fb2:	f006 fd74 	bl	8107a9e <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	68dc      	ldr	r4, [r3, #12]
 8100fba:	687d      	ldr	r5, [r7, #4]
 8100fbc:	1cfb      	adds	r3, r7, #3
 8100fbe:	4618      	mov	r0, r3
 8100fc0:	f7ff fe55 	bl	8100c6e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100fc4:	4606      	mov	r6, r0
 8100fc6:	f107 0020 	add.w	r0, r7, #32
 8100fca:	f7ff fe5b 	bl	8100c84 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100fce:	4680      	mov	r8, r0
 8100fd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100fd4:	4618      	mov	r0, r3
 8100fd6:	f7ff fe60 	bl	8100c9a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100fda:	4603      	mov	r3, r0
 8100fdc:	4642      	mov	r2, r8
 8100fde:	4631      	mov	r1, r6
 8100fe0:	4628      	mov	r0, r5
 8100fe2:	47a0      	blx	r4
 8100fe4:	bf00      	nop
      }
 8100fe6:	3708      	adds	r7, #8
 8100fe8:	46bd      	mov	sp, r7
 8100fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8100fee:	b002      	add	sp, #8
 8100ff0:	4770      	bx	lr

08100ff2 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8100ff2:	b580      	push	{r7, lr}
 8100ff4:	b082      	sub	sp, #8
 8100ff6:	af00      	add	r7, sp, #0
 8100ff8:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8100ffa:	687b      	ldr	r3, [r7, #4]
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8101000:	6878      	ldr	r0, [r7, #4]
 8101002:	f000 f805 	bl	8101010 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8101006:	687b      	ldr	r3, [r7, #4]
 8101008:	4618      	mov	r0, r3
 810100a:	3708      	adds	r7, #8
 810100c:	46bd      	mov	sp, r7
 810100e:	bd80      	pop	{r7, pc}

08101010 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8101010:	b480      	push	{r7}
 8101012:	b083      	sub	sp, #12
 8101014:	af00      	add	r7, sp, #0
 8101016:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8101018:	687b      	ldr	r3, [r7, #4]
 810101a:	2200      	movs	r2, #0
 810101c:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 810101e:	687a      	ldr	r2, [r7, #4]
 8101020:	687b      	ldr	r3, [r7, #4]
 8101022:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8101024:	687a      	ldr	r2, [r7, #4]
 8101026:	687b      	ldr	r3, [r7, #4]
 8101028:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	2200      	movs	r2, #0
 810102e:	611a      	str	r2, [r3, #16]
    }
 8101030:	bf00      	nop
 8101032:	370c      	adds	r7, #12
 8101034:	46bd      	mov	sp, r7
 8101036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810103a:	4770      	bx	lr

0810103c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 810103c:	b580      	push	{r7, lr}
 810103e:	b082      	sub	sp, #8
 8101040:	af00      	add	r7, sp, #0
 8101042:	6078      	str	r0, [r7, #4]
 8101044:	687b      	ldr	r3, [r7, #4]
 8101046:	4618      	mov	r0, r3
 8101048:	f000 f957 	bl	81012fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 810104c:	687b      	ldr	r3, [r7, #4]
 810104e:	4618      	mov	r0, r3
 8101050:	3708      	adds	r7, #8
 8101052:	46bd      	mov	sp, r7
 8101054:	bd80      	pop	{r7, pc}

08101056 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8101056:	b580      	push	{r7, lr}
 8101058:	b082      	sub	sp, #8
 810105a:	af00      	add	r7, sp, #0
 810105c:	6078      	str	r0, [r7, #4]
 810105e:	687b      	ldr	r3, [r7, #4]
 8101060:	4618      	mov	r0, r3
 8101062:	f7ff ffeb 	bl	810103c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8101066:	687b      	ldr	r3, [r7, #4]
 8101068:	4618      	mov	r0, r3
 810106a:	3708      	adds	r7, #8
 810106c:	46bd      	mov	sp, r7
 810106e:	bd80      	pop	{r7, pc}

08101070 <_ZN19EventManagerCM4TaskC1Ev>:
	{
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
	};

	EventManagerCM4Task() {};
 8101070:	b580      	push	{r7, lr}
 8101072:	b082      	sub	sp, #8
 8101074:	af00      	add	r7, sp, #0
 8101076:	6078      	str	r0, [r7, #4]
 8101078:	687b      	ldr	r3, [r7, #4]
 810107a:	4618      	mov	r0, r3
 810107c:	f7ff ffeb 	bl	8101056 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8101080:	687b      	ldr	r3, [r7, #4]
 8101082:	4618      	mov	r0, r3
 8101084:	3708      	adds	r7, #8
 8101086:	46bd      	mov	sp, r7
 8101088:	bd80      	pop	{r7, pc}
	...

0810108c <_Z20StartTask_EventMgrM4Pv>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;

void StartTask_EventMgrM4(void *argument)
{
 810108c:	b580      	push	{r7, lr}
 810108e:	b088      	sub	sp, #32
 8101090:	af00      	add	r7, sp, #0
 8101092:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 8101094:	f107 0308 	add.w	r3, r7, #8
 8101098:	4618      	mov	r0, r3
 810109a:	f7ff ffe9 	bl	8101070 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 810109e:	4b09      	ldr	r3, [pc, #36]	@ (81010c4 <_Z20StartTask_EventMgrM4Pv+0x38>)
 81010a0:	681a      	ldr	r2, [r3, #0]
 81010a2:	f107 0308 	add.w	r3, r7, #8
 81010a6:	2104      	movs	r1, #4
 81010a8:	4618      	mov	r0, r3
 81010aa:	f000 f80d 	bl	81010c8 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 81010ae:	f107 0308 	add.w	r3, r7, #8
 81010b2:	4618      	mov	r0, r3
 81010b4:	f000 f81b 	bl	81010ee <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 81010b8:	2001      	movs	r0, #1
 81010ba:	f003 f939 	bl	8104330 <osDelay>
		eventManagerInstance.process();
 81010be:	bf00      	nop
 81010c0:	e7f5      	b.n	81010ae <_Z20StartTask_EventMgrM4Pv+0x22>
 81010c2:	bf00      	nop
 81010c4:	1000008c 	.word	0x1000008c

081010c8 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 81010c8:	b580      	push	{r7, lr}
 81010ca:	b086      	sub	sp, #24
 81010cc:	af00      	add	r7, sp, #0
 81010ce:	60f8      	str	r0, [r7, #12]
 81010d0:	460b      	mov	r3, r1
 81010d2:	607a      	str	r2, [r7, #4]
 81010d4:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 81010d6:	68f9      	ldr	r1, [r7, #12]
 81010d8:	f107 0010 	add.w	r0, r7, #16
 81010dc:	1d3b      	adds	r3, r7, #4
 81010de:	f107 020b 	add.w	r2, r7, #11
 81010e2:	f000 f91f 	bl	8101324 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 81010e6:	bf00      	nop
 81010e8:	3718      	adds	r7, #24
 81010ea:	46bd      	mov	sp, r7
 81010ec:	bd80      	pop	{r7, pc}

081010ee <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 81010ee:	b580      	push	{r7, lr}
 81010f0:	b086      	sub	sp, #24
 81010f2:	af00      	add	r7, sp, #0
 81010f4:	6078      	str	r0, [r7, #4]
	send(receive());
 81010f6:	f107 030c 	add.w	r3, r7, #12
 81010fa:	6879      	ldr	r1, [r7, #4]
 81010fc:	4618      	mov	r0, r3
 81010fe:	f000 f835 	bl	810116c <_ZN19EventManagerCM4Task7receiveEv>
 8101102:	f107 030c 	add.w	r3, r7, #12
 8101106:	4619      	mov	r1, r3
 8101108:	6878      	ldr	r0, [r7, #4]
 810110a:	f000 f88d 	bl	8101228 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 810110e:	f107 030c 	add.w	r3, r7, #12
 8101112:	4618      	mov	r0, r3
 8101114:	f000 f920 	bl	8101358 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 8101118:	bf00      	nop
 810111a:	3718      	adds	r7, #24
 810111c:	46bd      	mov	sp, r7
 810111e:	bd80      	pop	{r7, pc}

08101120 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8101120:	b580      	push	{r7, lr}
 8101122:	b082      	sub	sp, #8
 8101124:	af00      	add	r7, sp, #0
 8101126:	6078      	str	r0, [r7, #4]
 8101128:	6878      	ldr	r0, [r7, #4]
 810112a:	f000 f940 	bl	81013ae <_ZNSaI8SMessageED1Ev>
 810112e:	687b      	ldr	r3, [r7, #4]
 8101130:	4618      	mov	r0, r3
 8101132:	3708      	adds	r7, #8
 8101134:	46bd      	mov	sp, r7
 8101136:	bd80      	pop	{r7, pc}

08101138 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8101138:	b580      	push	{r7, lr}
 810113a:	b082      	sub	sp, #8
 810113c:	af00      	add	r7, sp, #0
 810113e:	6078      	str	r0, [r7, #4]
 8101140:	687b      	ldr	r3, [r7, #4]
 8101142:	4618      	mov	r0, r3
 8101144:	f000 f923 	bl	810138e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 8101148:	687b      	ldr	r3, [r7, #4]
 810114a:	4618      	mov	r0, r3
 810114c:	3708      	adds	r7, #8
 810114e:	46bd      	mov	sp, r7
 8101150:	bd80      	pop	{r7, pc}

08101152 <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8101152:	b580      	push	{r7, lr}
 8101154:	b082      	sub	sp, #8
 8101156:	af00      	add	r7, sp, #0
 8101158:	6078      	str	r0, [r7, #4]
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	4618      	mov	r0, r3
 810115e:	f7ff ffeb 	bl	8101138 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 8101162:	687b      	ldr	r3, [r7, #4]
 8101164:	4618      	mov	r0, r3
 8101166:	3708      	adds	r7, #8
 8101168:	46bd      	mov	sp, r7
 810116a:	bd80      	pop	{r7, pc}

0810116c <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 810116c:	b5b0      	push	{r4, r5, r7, lr}
 810116e:	b092      	sub	sp, #72	@ 0x48
 8101170:	af00      	add	r7, sp, #0
 8101172:	6078      	str	r0, [r7, #4]
 8101174:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 8101176:	6878      	ldr	r0, [r7, #4]
 8101178:	f7ff ffeb 	bl	8101152 <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 810117c:	2301      	movs	r3, #1
 810117e:	647b      	str	r3, [r7, #68]	@ 0x44
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 8101180:	4b28      	ldr	r3, [pc, #160]	@ (8101224 <_ZN19EventManagerCM4Task7receiveEv+0xb8>)
 8101182:	681b      	ldr	r3, [r3, #0]
 8101184:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8101188:	2200      	movs	r2, #0
 810118a:	4618      	mov	r0, r3
 810118c:	f004 f8fc 	bl	8105388 <xQueueReceive>
 8101190:	6478      	str	r0, [r7, #68]	@ 0x44
		if(ret == pdTRUE)
 8101192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101194:	2b01      	cmp	r3, #1
 8101196:	d105      	bne.n	81011a4 <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 8101198:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810119c:	4619      	mov	r1, r3
 810119e:	6878      	ldr	r0, [r7, #4]
 81011a0:	f000 f930 	bl	8101404 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	}while(ret == pdTRUE);
 81011a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81011a6:	2b01      	cmp	r3, #1
 81011a8:	d0ea      	beq.n	8101180 <_ZN19EventManagerCM4Task7receiveEv+0x14>

	if(receivedMessages.size() > 0)
 81011aa:	6878      	ldr	r0, [r7, #4]
 81011ac:	f000 f950 	bl	8101450 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81011b0:	4603      	mov	r3, r0
 81011b2:	2b00      	cmp	r3, #0
 81011b4:	bf14      	ite	ne
 81011b6:	2301      	movne	r3, #1
 81011b8:	2300      	moveq	r3, #0
 81011ba:	b2db      	uxtb	r3, r3
 81011bc:	2b00      	cmp	r3, #0
 81011be:	d02b      	beq.n	8101218 <_ZN19EventManagerCM4Task7receiveEv+0xac>
	{
		for(auto msg : receivedMessages)
 81011c0:	687b      	ldr	r3, [r7, #4]
 81011c2:	643b      	str	r3, [r7, #64]	@ 0x40
 81011c4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 81011c6:	f000 f959 	bl	810147c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 81011ca:	4603      	mov	r3, r0
 81011cc:	60fb      	str	r3, [r7, #12]
 81011ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 81011d0:	f000 f964 	bl	810149c <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 81011d4:	4603      	mov	r3, r0
 81011d6:	60bb      	str	r3, [r7, #8]
 81011d8:	e013      	b.n	8101202 <_ZN19EventManagerCM4Task7receiveEv+0x96>
 81011da:	f107 030c 	add.w	r3, r7, #12
 81011de:	4618      	mov	r0, r3
 81011e0:	f000 f996 	bl	8101510 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 81011e4:	4603      	mov	r3, r0
 81011e6:	f107 0410 	add.w	r4, r7, #16
 81011ea:	461d      	mov	r5, r3
 81011ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81011ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81011f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 81011f4:	e884 0003 	stmia.w	r4, {r0, r1}
 81011f8:	f107 030c 	add.w	r3, r7, #12
 81011fc:	4618      	mov	r0, r3
 81011fe:	f000 f976 	bl	81014ee <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 8101202:	f107 0208 	add.w	r2, r7, #8
 8101206:	f107 030c 	add.w	r3, r7, #12
 810120a:	4611      	mov	r1, r2
 810120c:	4618      	mov	r0, r3
 810120e:	f000 f956 	bl	81014be <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8101212:	4603      	mov	r3, r0
 8101214:	2b00      	cmp	r3, #0
 8101216:	d1e0      	bne.n	81011da <_ZN19EventManagerCM4Task7receiveEv+0x6e>
		{
//			LOG_DEBUG("EVENT_MANAGER: Received message. r[%d], s[%d], e[%d]", msg.event_receiver, msg.event_sender, msg.event_type);
		}
	}

	return receivedMessages;
 8101218:	bf00      	nop
}
 810121a:	6878      	ldr	r0, [r7, #4]
 810121c:	3748      	adds	r7, #72	@ 0x48
 810121e:	46bd      	mov	sp, r7
 8101220:	bdb0      	pop	{r4, r5, r7, pc}
 8101222:	bf00      	nop
 8101224:	10000088 	.word	0x10000088

08101228 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 8101228:	b5b0      	push	{r4, r5, r7, lr}
 810122a:	b090      	sub	sp, #64	@ 0x40
 810122c:	af00      	add	r7, sp, #0
 810122e:	6078      	str	r0, [r7, #4]
 8101230:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 8101232:	683b      	ldr	r3, [r7, #0]
 8101234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8101236:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101238:	f000 f976 	bl	8101528 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 810123c:	4603      	mov	r3, r0
 810123e:	61bb      	str	r3, [r7, #24]
 8101240:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101242:	f000 f981 	bl	8101548 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 8101246:	4603      	mov	r3, r0
 8101248:	617b      	str	r3, [r7, #20]
 810124a:	e046      	b.n	81012da <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xb2>
 810124c:	f107 0318 	add.w	r3, r7, #24
 8101250:	4618      	mov	r0, r3
 8101252:	f000 f9b3 	bl	81015bc <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8101256:	4603      	mov	r3, r0
 8101258:	f107 041c 	add.w	r4, r7, #28
 810125c:	461d      	mov	r5, r3
 810125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101262:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101266:	e884 0003 	stmia.w	r4, {r0, r1}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 810126a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 810126e:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	f107 0213 	add.w	r2, r7, #19
 8101276:	4611      	mov	r1, r2
 8101278:	4618      	mov	r0, r3
 810127a:	f000 f9ab 	bl	81015d4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 810127e:	4603      	mov	r3, r0
 8101280:	60fb      	str	r3, [r7, #12]

		if(it != queue_handles.end())
 8101282:	687b      	ldr	r3, [r7, #4]
 8101284:	4618      	mov	r0, r3
 8101286:	f000 f9b4 	bl	81015f2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 810128a:	4603      	mov	r3, r0
 810128c:	637b      	str	r3, [r7, #52]	@ 0x34
 810128e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8101292:	f107 030c 	add.w	r3, r7, #12
 8101296:	4611      	mov	r1, r2
 8101298:	4618      	mov	r0, r3
 810129a:	f000 f9b7 	bl	810160c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 810129e:	4603      	mov	r3, r0
 81012a0:	2b00      	cmp	r3, #0
 81012a2:	d015      	beq.n	81012d0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
		{
			QueueHandle_t targetQueue = queue_handles[eventReceiver];
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	f107 0213 	add.w	r2, r7, #19
 81012aa:	4611      	mov	r1, r2
 81012ac:	4618      	mov	r0, r3
 81012ae:	f000 f9c1 	bl	8101634 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 81012b2:	4603      	mov	r3, r0
 81012b4:	681b      	ldr	r3, [r3, #0]
 81012b6:	63bb      	str	r3, [r7, #56]	@ 0x38
			if(targetQueue)
 81012b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81012ba:	2b00      	cmp	r3, #0
 81012bc:	d008      	beq.n	81012d0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
			{
				if(xQueueSend(targetQueue, static_cast<void*>(&msg), static_cast<TickType_t>(10)) != pdTRUE)
 81012be:	f107 011c 	add.w	r1, r7, #28
 81012c2:	2300      	movs	r3, #0
 81012c4:	220a      	movs	r2, #10
 81012c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81012c8:	f003 febe 	bl	8105048 <xQueueGenericSend>
 81012cc:	4603      	mov	r3, r0
 81012ce:	2b01      	cmp	r3, #1
	for(auto msg : messages)
 81012d0:	f107 0318 	add.w	r3, r7, #24
 81012d4:	4618      	mov	r0, r3
 81012d6:	f000 f960 	bl	810159a <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 81012da:	f107 0214 	add.w	r2, r7, #20
 81012de:	f107 0318 	add.w	r3, r7, #24
 81012e2:	4611      	mov	r1, r2
 81012e4:	4618      	mov	r0, r3
 81012e6:	f000 f940 	bl	810156a <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 81012ea:	4603      	mov	r3, r0
 81012ec:	2b00      	cmp	r3, #0
 81012ee:	d1ad      	bne.n	810124c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
//					LOG_DEBUG("[FATAL] Could not send message. e[%d], r[%d]", msg.event_type, msg.event_receiver);
				}
			}
		}
	}
}
 81012f0:	bf00      	nop
 81012f2:	bf00      	nop
 81012f4:	3740      	adds	r7, #64	@ 0x40
 81012f6:	46bd      	mov	sp, r7
 81012f8:	bdb0      	pop	{r4, r5, r7, pc}

081012fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 81012fa:	b580      	push	{r7, lr}
 81012fc:	b082      	sub	sp, #8
 81012fe:	af00      	add	r7, sp, #0
 8101300:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8101302:	6878      	ldr	r0, [r7, #4]
 8101304:	f000 f9f2 	bl	81016ec <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	4618      	mov	r0, r3
 810130c:	f000 f9fa 	bl	8101704 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	3304      	adds	r3, #4
 8101314:	4618      	mov	r0, r3
 8101316:	f7ff fe6c 	bl	8100ff2 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 810131a:	687b      	ldr	r3, [r7, #4]
 810131c:	4618      	mov	r0, r3
 810131e:	3708      	adds	r7, #8
 8101320:	46bd      	mov	sp, r7
 8101322:	bd80      	pop	{r7, pc}

08101324 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8101324:	b5b0      	push	{r4, r5, r7, lr}
 8101326:	b084      	sub	sp, #16
 8101328:	af00      	add	r7, sp, #0
 810132a:	60f8      	str	r0, [r7, #12]
 810132c:	60b9      	str	r1, [r7, #8]
 810132e:	607a      	str	r2, [r7, #4]
 8101330:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 8101332:	68bc      	ldr	r4, [r7, #8]
 8101334:	6878      	ldr	r0, [r7, #4]
 8101336:	f000 f9fc 	bl	8101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810133a:	4605      	mov	r5, r0
 810133c:	6838      	ldr	r0, [r7, #0]
 810133e:	f000 fa03 	bl	8101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101342:	4603      	mov	r3, r0
 8101344:	68f8      	ldr	r0, [r7, #12]
 8101346:	462a      	mov	r2, r5
 8101348:	4621      	mov	r1, r4
 810134a:	f000 fa08 	bl	810175e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 810134e:	bf00      	nop
	}
 8101350:	68f8      	ldr	r0, [r7, #12]
 8101352:	3710      	adds	r7, #16
 8101354:	46bd      	mov	sp, r7
 8101356:	bdb0      	pop	{r4, r5, r7, pc}

08101358 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8101358:	b5b0      	push	{r4, r5, r7, lr}
 810135a:	b082      	sub	sp, #8
 810135c:	af00      	add	r7, sp, #0
 810135e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	681c      	ldr	r4, [r3, #0]
 8101364:	687b      	ldr	r3, [r7, #4]
 8101366:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8101368:	687b      	ldr	r3, [r7, #4]
 810136a:	4618      	mov	r0, r3
 810136c:	f000 fa4c 	bl	8101808 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101370:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8101372:	461a      	mov	r2, r3
 8101374:	4629      	mov	r1, r5
 8101376:	4620      	mov	r0, r4
 8101378:	f000 fa51 	bl	810181e <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	4618      	mov	r0, r3
 8101380:	f000 f822 	bl	81013c8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	4618      	mov	r0, r3
 8101388:	3708      	adds	r7, #8
 810138a:	46bd      	mov	sp, r7
 810138c:	bdb0      	pop	{r4, r5, r7, pc}

0810138e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 810138e:	b580      	push	{r7, lr}
 8101390:	b082      	sub	sp, #8
 8101392:	af00      	add	r7, sp, #0
 8101394:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8101396:	6878      	ldr	r0, [r7, #4]
 8101398:	f000 fa4f 	bl	810183a <_ZNSaI8SMessageEC1Ev>
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	4618      	mov	r0, r3
 81013a0:	f000 fa57 	bl	8101852 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	4618      	mov	r0, r3
 81013a8:	3708      	adds	r7, #8
 81013aa:	46bd      	mov	sp, r7
 81013ac:	bd80      	pop	{r7, pc}

081013ae <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 81013ae:	b580      	push	{r7, lr}
 81013b0:	b082      	sub	sp, #8
 81013b2:	af00      	add	r7, sp, #0
 81013b4:	6078      	str	r0, [r7, #4]
 81013b6:	6878      	ldr	r0, [r7, #4]
 81013b8:	f000 fa5f 	bl	810187a <_ZNSt15__new_allocatorI8SMessageED1Ev>
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	4618      	mov	r0, r3
 81013c0:	3708      	adds	r7, #8
 81013c2:	46bd      	mov	sp, r7
 81013c4:	bd80      	pop	{r7, pc}
	...

081013c8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 81013c8:	b580      	push	{r7, lr}
 81013ca:	b082      	sub	sp, #8
 81013cc:	af00      	add	r7, sp, #0
 81013ce:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 81013d4:	687b      	ldr	r3, [r7, #4]
 81013d6:	689a      	ldr	r2, [r3, #8]
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	681b      	ldr	r3, [r3, #0]
 81013dc:	1ad3      	subs	r3, r2, r3
 81013de:	10db      	asrs	r3, r3, #3
 81013e0:	4a07      	ldr	r2, [pc, #28]	@ (8101400 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 81013e2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 81013e6:	461a      	mov	r2, r3
 81013e8:	6878      	ldr	r0, [r7, #4]
 81013ea:	f000 fa51 	bl	8101890 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	4618      	mov	r0, r3
 81013f2:	f7ff fe95 	bl	8101120 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	4618      	mov	r0, r3
 81013fa:	3708      	adds	r7, #8
 81013fc:	46bd      	mov	sp, r7
 81013fe:	bd80      	pop	{r7, pc}
 8101400:	aaaaaaab 	.word	0xaaaaaaab

08101404 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8101404:	b580      	push	{r7, lr}
 8101406:	b082      	sub	sp, #8
 8101408:	af00      	add	r7, sp, #0
 810140a:	6078      	str	r0, [r7, #4]
 810140c:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	685a      	ldr	r2, [r3, #4]
 8101412:	687b      	ldr	r3, [r7, #4]
 8101414:	689b      	ldr	r3, [r3, #8]
 8101416:	429a      	cmp	r2, r3
 8101418:	d00d      	beq.n	8101436 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 810141a:	6878      	ldr	r0, [r7, #4]
 810141c:	687b      	ldr	r3, [r7, #4]
 810141e:	685b      	ldr	r3, [r3, #4]
 8101420:	683a      	ldr	r2, [r7, #0]
 8101422:	4619      	mov	r1, r3
 8101424:	f000 fa47 	bl	81018b6 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8101428:	687b      	ldr	r3, [r7, #4]
 810142a:	685b      	ldr	r3, [r3, #4]
 810142c:	f103 0218 	add.w	r2, r3, #24
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8101434:	e008      	b.n	8101448 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8101436:	6878      	ldr	r0, [r7, #4]
 8101438:	f000 f830 	bl	810149c <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 810143c:	4603      	mov	r3, r0
 810143e:	683a      	ldr	r2, [r7, #0]
 8101440:	4619      	mov	r1, r3
 8101442:	6878      	ldr	r0, [r7, #4]
 8101444:	f000 fa60 	bl	8101908 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8101448:	bf00      	nop
 810144a:	3708      	adds	r7, #8
 810144c:	46bd      	mov	sp, r7
 810144e:	bd80      	pop	{r7, pc}

08101450 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8101450:	b480      	push	{r7}
 8101452:	b083      	sub	sp, #12
 8101454:	af00      	add	r7, sp, #0
 8101456:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8101458:	687b      	ldr	r3, [r7, #4]
 810145a:	685a      	ldr	r2, [r3, #4]
 810145c:	687b      	ldr	r3, [r7, #4]
 810145e:	681b      	ldr	r3, [r3, #0]
 8101460:	1ad3      	subs	r3, r2, r3
 8101462:	10db      	asrs	r3, r3, #3
 8101464:	4a04      	ldr	r2, [pc, #16]	@ (8101478 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 8101466:	fb02 f303 	mul.w	r3, r2, r3
 810146a:	4618      	mov	r0, r3
 810146c:	370c      	adds	r7, #12
 810146e:	46bd      	mov	sp, r7
 8101470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101474:	4770      	bx	lr
 8101476:	bf00      	nop
 8101478:	aaaaaaab 	.word	0xaaaaaaab

0810147c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810147c:	b580      	push	{r7, lr}
 810147e:	b084      	sub	sp, #16
 8101480:	af00      	add	r7, sp, #0
 8101482:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8101484:	687a      	ldr	r2, [r7, #4]
 8101486:	f107 030c 	add.w	r3, r7, #12
 810148a:	4611      	mov	r1, r2
 810148c:	4618      	mov	r0, r3
 810148e:	f000 fb03 	bl	8101a98 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8101492:	68fb      	ldr	r3, [r7, #12]
 8101494:	4618      	mov	r0, r3
 8101496:	3710      	adds	r7, #16
 8101498:	46bd      	mov	sp, r7
 810149a:	bd80      	pop	{r7, pc}

0810149c <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810149c:	b580      	push	{r7, lr}
 810149e:	b084      	sub	sp, #16
 81014a0:	af00      	add	r7, sp, #0
 81014a2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 81014a4:	687b      	ldr	r3, [r7, #4]
 81014a6:	1d1a      	adds	r2, r3, #4
 81014a8:	f107 030c 	add.w	r3, r7, #12
 81014ac:	4611      	mov	r1, r2
 81014ae:	4618      	mov	r0, r3
 81014b0:	f000 faf2 	bl	8101a98 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 81014b4:	68fb      	ldr	r3, [r7, #12]
 81014b6:	4618      	mov	r0, r3
 81014b8:	3710      	adds	r7, #16
 81014ba:	46bd      	mov	sp, r7
 81014bc:	bd80      	pop	{r7, pc}

081014be <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 81014be:	b590      	push	{r4, r7, lr}
 81014c0:	b083      	sub	sp, #12
 81014c2:	af00      	add	r7, sp, #0
 81014c4:	6078      	str	r0, [r7, #4]
 81014c6:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 81014c8:	6878      	ldr	r0, [r7, #4]
 81014ca:	f000 faf5 	bl	8101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81014ce:	4603      	mov	r3, r0
 81014d0:	681c      	ldr	r4, [r3, #0]
 81014d2:	6838      	ldr	r0, [r7, #0]
 81014d4:	f000 faf0 	bl	8101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81014d8:	4603      	mov	r3, r0
 81014da:	681b      	ldr	r3, [r3, #0]
 81014dc:	429c      	cmp	r4, r3
 81014de:	bf14      	ite	ne
 81014e0:	2301      	movne	r3, #1
 81014e2:	2300      	moveq	r3, #0
 81014e4:	b2db      	uxtb	r3, r3
 81014e6:	4618      	mov	r0, r3
 81014e8:	370c      	adds	r7, #12
 81014ea:	46bd      	mov	sp, r7
 81014ec:	bd90      	pop	{r4, r7, pc}

081014ee <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 81014ee:	b480      	push	{r7}
 81014f0:	b083      	sub	sp, #12
 81014f2:	af00      	add	r7, sp, #0
 81014f4:	6078      	str	r0, [r7, #4]
	++_M_current;
 81014f6:	687b      	ldr	r3, [r7, #4]
 81014f8:	681b      	ldr	r3, [r3, #0]
 81014fa:	f103 0218 	add.w	r2, r3, #24
 81014fe:	687b      	ldr	r3, [r7, #4]
 8101500:	601a      	str	r2, [r3, #0]
	return *this;
 8101502:	687b      	ldr	r3, [r7, #4]
      }
 8101504:	4618      	mov	r0, r3
 8101506:	370c      	adds	r7, #12
 8101508:	46bd      	mov	sp, r7
 810150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810150e:	4770      	bx	lr

08101510 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101510:	b480      	push	{r7}
 8101512:	b083      	sub	sp, #12
 8101514:	af00      	add	r7, sp, #0
 8101516:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8101518:	687b      	ldr	r3, [r7, #4]
 810151a:	681b      	ldr	r3, [r3, #0]
 810151c:	4618      	mov	r0, r3
 810151e:	370c      	adds	r7, #12
 8101520:	46bd      	mov	sp, r7
 8101522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101526:	4770      	bx	lr

08101528 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8101528:	b580      	push	{r7, lr}
 810152a:	b084      	sub	sp, #16
 810152c:	af00      	add	r7, sp, #0
 810152e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8101530:	687a      	ldr	r2, [r7, #4]
 8101532:	f107 030c 	add.w	r3, r7, #12
 8101536:	4611      	mov	r1, r2
 8101538:	4618      	mov	r0, r3
 810153a:	f000 fac8 	bl	8101ace <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 810153e:	68fb      	ldr	r3, [r7, #12]
 8101540:	4618      	mov	r0, r3
 8101542:	3710      	adds	r7, #16
 8101544:	46bd      	mov	sp, r7
 8101546:	bd80      	pop	{r7, pc}

08101548 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8101548:	b580      	push	{r7, lr}
 810154a:	b084      	sub	sp, #16
 810154c:	af00      	add	r7, sp, #0
 810154e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8101550:	687b      	ldr	r3, [r7, #4]
 8101552:	1d1a      	adds	r2, r3, #4
 8101554:	f107 030c 	add.w	r3, r7, #12
 8101558:	4611      	mov	r1, r2
 810155a:	4618      	mov	r0, r3
 810155c:	f000 fab7 	bl	8101ace <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8101560:	68fb      	ldr	r3, [r7, #12]
 8101562:	4618      	mov	r0, r3
 8101564:	3710      	adds	r7, #16
 8101566:	46bd      	mov	sp, r7
 8101568:	bd80      	pop	{r7, pc}

0810156a <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 810156a:	b590      	push	{r4, r7, lr}
 810156c:	b083      	sub	sp, #12
 810156e:	af00      	add	r7, sp, #0
 8101570:	6078      	str	r0, [r7, #4]
 8101572:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8101574:	6878      	ldr	r0, [r7, #4]
 8101576:	f000 faba 	bl	8101aee <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810157a:	4603      	mov	r3, r0
 810157c:	681c      	ldr	r4, [r3, #0]
 810157e:	6838      	ldr	r0, [r7, #0]
 8101580:	f000 fab5 	bl	8101aee <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101584:	4603      	mov	r3, r0
 8101586:	681b      	ldr	r3, [r3, #0]
 8101588:	429c      	cmp	r4, r3
 810158a:	bf14      	ite	ne
 810158c:	2301      	movne	r3, #1
 810158e:	2300      	moveq	r3, #0
 8101590:	b2db      	uxtb	r3, r3
 8101592:	4618      	mov	r0, r3
 8101594:	370c      	adds	r7, #12
 8101596:	46bd      	mov	sp, r7
 8101598:	bd90      	pop	{r4, r7, pc}

0810159a <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810159a:	b480      	push	{r7}
 810159c:	b083      	sub	sp, #12
 810159e:	af00      	add	r7, sp, #0
 81015a0:	6078      	str	r0, [r7, #4]
	++_M_current;
 81015a2:	687b      	ldr	r3, [r7, #4]
 81015a4:	681b      	ldr	r3, [r3, #0]
 81015a6:	f103 0218 	add.w	r2, r3, #24
 81015aa:	687b      	ldr	r3, [r7, #4]
 81015ac:	601a      	str	r2, [r3, #0]
	return *this;
 81015ae:	687b      	ldr	r3, [r7, #4]
      }
 81015b0:	4618      	mov	r0, r3
 81015b2:	370c      	adds	r7, #12
 81015b4:	46bd      	mov	sp, r7
 81015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ba:	4770      	bx	lr

081015bc <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 81015bc:	b480      	push	{r7}
 81015be:	b083      	sub	sp, #12
 81015c0:	af00      	add	r7, sp, #0
 81015c2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	4618      	mov	r0, r3
 81015ca:	370c      	adds	r7, #12
 81015cc:	46bd      	mov	sp, r7
 81015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015d2:	4770      	bx	lr

081015d4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 81015d4:	b580      	push	{r7, lr}
 81015d6:	b082      	sub	sp, #8
 81015d8:	af00      	add	r7, sp, #0
 81015da:	6078      	str	r0, [r7, #4]
 81015dc:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 81015de:	687b      	ldr	r3, [r7, #4]
 81015e0:	6839      	ldr	r1, [r7, #0]
 81015e2:	4618      	mov	r0, r3
 81015e4:	f000 fa8e 	bl	8101b04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 81015e8:	4603      	mov	r3, r0
 81015ea:	4618      	mov	r0, r3
 81015ec:	3708      	adds	r7, #8
 81015ee:	46bd      	mov	sp, r7
 81015f0:	bd80      	pop	{r7, pc}

081015f2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81015f2:	b580      	push	{r7, lr}
 81015f4:	b082      	sub	sp, #8
 81015f6:	af00      	add	r7, sp, #0
 81015f8:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 81015fa:	687b      	ldr	r3, [r7, #4]
 81015fc:	4618      	mov	r0, r3
 81015fe:	f000 fabd 	bl	8101b7c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101602:	4603      	mov	r3, r0
 8101604:	4618      	mov	r0, r3
 8101606:	3708      	adds	r7, #8
 8101608:	46bd      	mov	sp, r7
 810160a:	bd80      	pop	{r7, pc}

0810160c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 810160c:	b480      	push	{r7}
 810160e:	b083      	sub	sp, #12
 8101610:	af00      	add	r7, sp, #0
 8101612:	6078      	str	r0, [r7, #4]
 8101614:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8101616:	687b      	ldr	r3, [r7, #4]
 8101618:	681a      	ldr	r2, [r3, #0]
 810161a:	683b      	ldr	r3, [r7, #0]
 810161c:	681b      	ldr	r3, [r3, #0]
 810161e:	429a      	cmp	r2, r3
 8101620:	bf14      	ite	ne
 8101622:	2301      	movne	r3, #1
 8101624:	2300      	moveq	r3, #0
 8101626:	b2db      	uxtb	r3, r3
 8101628:	4618      	mov	r0, r3
 810162a:	370c      	adds	r7, #12
 810162c:	46bd      	mov	sp, r7
 810162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101632:	4770      	bx	lr

08101634 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8101634:	b590      	push	{r4, r7, lr}
 8101636:	b08b      	sub	sp, #44	@ 0x2c
 8101638:	af02      	add	r7, sp, #8
 810163a:	6078      	str	r0, [r7, #4]
 810163c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 810163e:	6839      	ldr	r1, [r7, #0]
 8101640:	6878      	ldr	r0, [r7, #4]
 8101642:	f000 faac 	bl	8101b9e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8101646:	4603      	mov	r3, r0
 8101648:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 810164a:	6878      	ldr	r0, [r7, #4]
 810164c:	f7ff ffd1 	bl	81015f2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8101650:	4603      	mov	r3, r0
 8101652:	60fb      	str	r3, [r7, #12]
 8101654:	f107 020c 	add.w	r2, r7, #12
 8101658:	f107 0308 	add.w	r3, r7, #8
 810165c:	4611      	mov	r1, r2
 810165e:	4618      	mov	r0, r3
 8101660:	f000 faac 	bl	8101bbc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101664:	4603      	mov	r3, r0
 8101666:	2b00      	cmp	r3, #0
 8101668:	d112      	bne.n	8101690 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 810166a:	6878      	ldr	r0, [r7, #4]
 810166c:	f000 faba 	bl	8101be4 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8101670:	f107 0308 	add.w	r3, r7, #8
 8101674:	4618      	mov	r0, r3
 8101676:	f000 fac2 	bl	8101bfe <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 810167a:	4603      	mov	r3, r0
 810167c:	461a      	mov	r2, r3
 810167e:	f107 0310 	add.w	r3, r7, #16
 8101682:	6839      	ldr	r1, [r7, #0]
 8101684:	4618      	mov	r0, r3
 8101686:	f000 fac8 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810168a:	4603      	mov	r3, r0
 810168c:	2b00      	cmp	r3, #0
 810168e:	d001      	beq.n	8101694 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8101690:	2301      	movs	r3, #1
 8101692:	e000      	b.n	8101696 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 8101694:	2300      	movs	r3, #0
 8101696:	2b00      	cmp	r3, #0
 8101698:	d01b      	beq.n	81016d2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 810169a:	687c      	ldr	r4, [r7, #4]
 810169c:	f107 0208 	add.w	r2, r7, #8
 81016a0:	f107 0314 	add.w	r3, r7, #20
 81016a4:	4611      	mov	r1, r2
 81016a6:	4618      	mov	r0, r3
 81016a8:	f000 fadb 	bl	8101c62 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 81016ac:	f107 0318 	add.w	r3, r7, #24
 81016b0:	6839      	ldr	r1, [r7, #0]
 81016b2:	4618      	mov	r0, r3
 81016b4:	f000 fac6 	bl	8101c44 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81016b8:	f107 0218 	add.w	r2, r7, #24
 81016bc:	f107 031c 	add.w	r3, r7, #28
 81016c0:	9300      	str	r3, [sp, #0]
 81016c2:	4613      	mov	r3, r2
 81016c4:	4a08      	ldr	r2, [pc, #32]	@ (81016e8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 81016c6:	6979      	ldr	r1, [r7, #20]
 81016c8:	4620      	mov	r0, r4
 81016ca:	f000 fada 	bl	8101c82 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 81016ce:	4603      	mov	r3, r0
 81016d0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 81016d2:	f107 0308 	add.w	r3, r7, #8
 81016d6:	4618      	mov	r0, r3
 81016d8:	f000 fa91 	bl	8101bfe <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81016dc:	4603      	mov	r3, r0
 81016de:	3304      	adds	r3, #4
      }
 81016e0:	4618      	mov	r0, r3
 81016e2:	3724      	adds	r7, #36	@ 0x24
 81016e4:	46bd      	mov	sp, r7
 81016e6:	bd90      	pop	{r4, r7, pc}
 81016e8:	08107f98 	.word	0x08107f98

081016ec <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 81016ec:	b580      	push	{r7, lr}
 81016ee:	b082      	sub	sp, #8
 81016f0:	af00      	add	r7, sp, #0
 81016f2:	6078      	str	r0, [r7, #4]
 81016f4:	6878      	ldr	r0, [r7, #4]
 81016f6:	f000 fb0a 	bl	8101d0e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81016fa:	687b      	ldr	r3, [r7, #4]
 81016fc:	4618      	mov	r0, r3
 81016fe:	3708      	adds	r7, #8
 8101700:	46bd      	mov	sp, r7
 8101702:	bd80      	pop	{r7, pc}

08101704 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8101704:	b480      	push	{r7}
 8101706:	b083      	sub	sp, #12
 8101708:	af00      	add	r7, sp, #0
 810170a:	6078      	str	r0, [r7, #4]
      { }
 810170c:	687b      	ldr	r3, [r7, #4]
 810170e:	4618      	mov	r0, r3
 8101710:	370c      	adds	r7, #12
 8101712:	46bd      	mov	sp, r7
 8101714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101718:	4770      	bx	lr

0810171a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 810171a:	b580      	push	{r7, lr}
 810171c:	b082      	sub	sp, #8
 810171e:	af00      	add	r7, sp, #0
 8101720:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8101722:	6878      	ldr	r0, [r7, #4]
 8101724:	f000 fb27 	bl	8101d76 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 8101728:	4603      	mov	r3, r0
 810172a:	4618      	mov	r0, r3
 810172c:	3708      	adds	r7, #8
 810172e:	46bd      	mov	sp, r7
 8101730:	bd80      	pop	{r7, pc}

08101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101732:	b480      	push	{r7}
 8101734:	b083      	sub	sp, #12
 8101736:	af00      	add	r7, sp, #0
 8101738:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	4618      	mov	r0, r3
 810173e:	370c      	adds	r7, #12
 8101740:	46bd      	mov	sp, r7
 8101742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101746:	4770      	bx	lr

08101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101748:	b480      	push	{r7}
 810174a:	b083      	sub	sp, #12
 810174c:	af00      	add	r7, sp, #0
 810174e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101750:	687b      	ldr	r3, [r7, #4]
 8101752:	4618      	mov	r0, r3
 8101754:	370c      	adds	r7, #12
 8101756:	46bd      	mov	sp, r7
 8101758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810175c:	4770      	bx	lr

0810175e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810175e:	b590      	push	{r4, r7, lr}
 8101760:	b08d      	sub	sp, #52	@ 0x34
 8101762:	af00      	add	r7, sp, #0
 8101764:	60f8      	str	r0, [r7, #12]
 8101766:	60b9      	str	r1, [r7, #8]
 8101768:	607a      	str	r2, [r7, #4]
 810176a:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 810176c:	6878      	ldr	r0, [r7, #4]
 810176e:	f7ff ffe0 	bl	8101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101772:	4604      	mov	r4, r0
 8101774:	6838      	ldr	r0, [r7, #0]
 8101776:	f7ff ffe7 	bl	8101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810177a:	4603      	mov	r3, r0
 810177c:	f107 0018 	add.w	r0, r7, #24
 8101780:	4622      	mov	r2, r4
 8101782:	68b9      	ldr	r1, [r7, #8]
 8101784:	f000 fb03 	bl	8101d8e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 8101788:	f107 0318 	add.w	r3, r7, #24
 810178c:	4618      	mov	r0, r3
 810178e:	f000 fbb7 	bl	8101f00 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101792:	4602      	mov	r2, r0
 8101794:	f107 0310 	add.w	r3, r7, #16
 8101798:	68b9      	ldr	r1, [r7, #8]
 810179a:	4618      	mov	r0, r3
 810179c:	f000 fb2b 	bl	8101df6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 81017a0:	697b      	ldr	r3, [r7, #20]
 81017a2:	2b00      	cmp	r3, #0
 81017a4:	d015      	beq.n	81017d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 81017a6:	f107 0018 	add.w	r0, r7, #24
 81017aa:	f107 0310 	add.w	r3, r7, #16
 81017ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 81017b2:	f000 fbb3 	bl	8101f1c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 81017b6:	4603      	mov	r3, r0
 81017b8:	623b      	str	r3, [r7, #32]
 81017ba:	2301      	movs	r3, #1
 81017bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81017c0:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 81017c4:	f107 0320 	add.w	r3, r7, #32
 81017c8:	4619      	mov	r1, r3
 81017ca:	68f8      	ldr	r0, [r7, #12]
 81017cc:	f000 fbbf 	bl	8101f4e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 81017d0:	e011      	b.n	81017f6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 81017d2:	693a      	ldr	r2, [r7, #16]
 81017d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81017d8:	4611      	mov	r1, r2
 81017da:	4618      	mov	r0, r3
 81017dc:	f000 fbd0 	bl	8101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81017e0:	2300      	movs	r3, #0
 81017e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 81017e6:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 81017ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81017ee:	4619      	mov	r1, r3
 81017f0:	68f8      	ldr	r0, [r7, #12]
 81017f2:	f000 fbac 	bl	8101f4e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 81017f6:	f107 0318 	add.w	r3, r7, #24
 81017fa:	4618      	mov	r0, r3
 81017fc:	f000 fae6 	bl	8101dcc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101800:	68f8      	ldr	r0, [r7, #12]
 8101802:	3734      	adds	r7, #52	@ 0x34
 8101804:	46bd      	mov	sp, r7
 8101806:	bd90      	pop	{r4, r7, pc}

08101808 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8101808:	b480      	push	{r7}
 810180a:	b083      	sub	sp, #12
 810180c:	af00      	add	r7, sp, #0
 810180e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8101810:	687b      	ldr	r3, [r7, #4]
 8101812:	4618      	mov	r0, r3
 8101814:	370c      	adds	r7, #12
 8101816:	46bd      	mov	sp, r7
 8101818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810181c:	4770      	bx	lr

0810181e <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 810181e:	b580      	push	{r7, lr}
 8101820:	b084      	sub	sp, #16
 8101822:	af00      	add	r7, sp, #0
 8101824:	60f8      	str	r0, [r7, #12]
 8101826:	60b9      	str	r1, [r7, #8]
 8101828:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 810182a:	68b9      	ldr	r1, [r7, #8]
 810182c:	68f8      	ldr	r0, [r7, #12]
 810182e:	f000 fbc2 	bl	8101fb6 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 8101832:	bf00      	nop
 8101834:	3710      	adds	r7, #16
 8101836:	46bd      	mov	sp, r7
 8101838:	bd80      	pop	{r7, pc}

0810183a <_ZNSaI8SMessageEC1Ev>:
 810183a:	b580      	push	{r7, lr}
 810183c:	b082      	sub	sp, #8
 810183e:	af00      	add	r7, sp, #0
 8101840:	6078      	str	r0, [r7, #4]
 8101842:	6878      	ldr	r0, [r7, #4]
 8101844:	f000 fbc4 	bl	8101fd0 <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	4618      	mov	r0, r3
 810184c:	3708      	adds	r7, #8
 810184e:	46bd      	mov	sp, r7
 8101850:	bd80      	pop	{r7, pc}

08101852 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8101852:	b480      	push	{r7}
 8101854:	b083      	sub	sp, #12
 8101856:	af00      	add	r7, sp, #0
 8101858:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	2200      	movs	r2, #0
 810185e:	601a      	str	r2, [r3, #0]
 8101860:	687b      	ldr	r3, [r7, #4]
 8101862:	2200      	movs	r2, #0
 8101864:	605a      	str	r2, [r3, #4]
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	2200      	movs	r2, #0
 810186a:	609a      	str	r2, [r3, #8]
	{ }
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	4618      	mov	r0, r3
 8101870:	370c      	adds	r7, #12
 8101872:	46bd      	mov	sp, r7
 8101874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101878:	4770      	bx	lr

0810187a <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 810187a:	b480      	push	{r7}
 810187c:	b083      	sub	sp, #12
 810187e:	af00      	add	r7, sp, #0
 8101880:	6078      	str	r0, [r7, #4]
 8101882:	687b      	ldr	r3, [r7, #4]
 8101884:	4618      	mov	r0, r3
 8101886:	370c      	adds	r7, #12
 8101888:	46bd      	mov	sp, r7
 810188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188e:	4770      	bx	lr

08101890 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8101890:	b580      	push	{r7, lr}
 8101892:	b084      	sub	sp, #16
 8101894:	af00      	add	r7, sp, #0
 8101896:	60f8      	str	r0, [r7, #12]
 8101898:	60b9      	str	r1, [r7, #8]
 810189a:	607a      	str	r2, [r7, #4]
	if (__p)
 810189c:	68bb      	ldr	r3, [r7, #8]
 810189e:	2b00      	cmp	r3, #0
 81018a0:	d005      	beq.n	81018ae <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 81018a2:	68fb      	ldr	r3, [r7, #12]
 81018a4:	687a      	ldr	r2, [r7, #4]
 81018a6:	68b9      	ldr	r1, [r7, #8]
 81018a8:	4618      	mov	r0, r3
 81018aa:	f000 fb9c 	bl	8101fe6 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 81018ae:	bf00      	nop
 81018b0:	3710      	adds	r7, #16
 81018b2:	46bd      	mov	sp, r7
 81018b4:	bd80      	pop	{r7, pc}

081018b6 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 81018b6:	b580      	push	{r7, lr}
 81018b8:	b084      	sub	sp, #16
 81018ba:	af00      	add	r7, sp, #0
 81018bc:	60f8      	str	r0, [r7, #12]
 81018be:	60b9      	str	r1, [r7, #8]
 81018c0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 81018c2:	6878      	ldr	r0, [r7, #4]
 81018c4:	f000 fb9e 	bl	8102004 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 81018c8:	4603      	mov	r3, r0
 81018ca:	461a      	mov	r2, r3
 81018cc:	68b9      	ldr	r1, [r7, #8]
 81018ce:	68f8      	ldr	r0, [r7, #12]
 81018d0:	f000 fba3 	bl	810201a <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 81018d4:	bf00      	nop
 81018d6:	3710      	adds	r7, #16
 81018d8:	46bd      	mov	sp, r7
 81018da:	bd80      	pop	{r7, pc}

081018dc <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 81018dc:	b580      	push	{r7, lr}
 81018de:	b082      	sub	sp, #8
 81018e0:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 81018e2:	4618      	mov	r0, r3
 81018e4:	f000 f805 	bl	81018f2 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 81018e8:	4603      	mov	r3, r0
      }
 81018ea:	4618      	mov	r0, r3
 81018ec:	3708      	adds	r7, #8
 81018ee:	46bd      	mov	sp, r7
 81018f0:	bd80      	pop	{r7, pc}

081018f2 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 81018f2:	b480      	push	{r7}
 81018f4:	b083      	sub	sp, #12
 81018f6:	af00      	add	r7, sp, #0
 81018f8:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 81018fa:	2301      	movs	r3, #1
      }
 81018fc:	4618      	mov	r0, r3
 81018fe:	370c      	adds	r7, #12
 8101900:	46bd      	mov	sp, r7
 8101902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101906:	4770      	bx	lr

08101908 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8101908:	b5b0      	push	{r4, r5, r7, lr}
 810190a:	b08c      	sub	sp, #48	@ 0x30
 810190c:	af00      	add	r7, sp, #0
 810190e:	60f8      	str	r0, [r7, #12]
 8101910:	60b9      	str	r1, [r7, #8]
 8101912:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8101914:	4a5e      	ldr	r2, [pc, #376]	@ (8101a90 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8101916:	2101      	movs	r1, #1
 8101918:	68f8      	ldr	r0, [r7, #12]
 810191a:	f000 fb99 	bl	8102050 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 810191e:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8101920:	68fb      	ldr	r3, [r7, #12]
 8101922:	681b      	ldr	r3, [r3, #0]
 8101924:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8101926:	68fb      	ldr	r3, [r7, #12]
 8101928:	685b      	ldr	r3, [r3, #4]
 810192a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 810192c:	68f8      	ldr	r0, [r7, #12]
 810192e:	f7ff fda5 	bl	810147c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101932:	4603      	mov	r3, r0
 8101934:	617b      	str	r3, [r7, #20]
 8101936:	f107 0214 	add.w	r2, r7, #20
 810193a:	f107 0308 	add.w	r3, r7, #8
 810193e:	4611      	mov	r1, r2
 8101940:	4618      	mov	r0, r3
 8101942:	f000 fbcd 	bl	81020e0 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8101946:	4603      	mov	r3, r0
 8101948:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 810194a:	68fb      	ldr	r3, [r7, #12]
 810194c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810194e:	4618      	mov	r0, r3
 8101950:	f000 fbe0 	bl	8102114 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8101954:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8101956:	69bb      	ldr	r3, [r7, #24]
 8101958:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 810195a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 810195c:	69fa      	ldr	r2, [r7, #28]
 810195e:	4613      	mov	r3, r2
 8101960:	005b      	lsls	r3, r3, #1
 8101962:	4413      	add	r3, r2
 8101964:	00db      	lsls	r3, r3, #3
 8101966:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8101968:	69bb      	ldr	r3, [r7, #24]
 810196a:	189d      	adds	r5, r3, r2
 810196c:	6878      	ldr	r0, [r7, #4]
 810196e:	f000 fb49 	bl	8102004 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101972:	4603      	mov	r3, r0
 8101974:	461a      	mov	r2, r3
 8101976:	4629      	mov	r1, r5
 8101978:	4620      	mov	r0, r4
 810197a:	f7ff ff9c 	bl	81018b6 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 810197e:	2300      	movs	r3, #0
 8101980:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8101982:	f7ff ffab 	bl	81018dc <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101986:	4603      	mov	r3, r0
 8101988:	2b00      	cmp	r3, #0
 810198a:	d027      	beq.n	81019dc <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810198c:	f107 0308 	add.w	r3, r7, #8
 8101990:	4618      	mov	r0, r3
 8101992:	f000 f891 	bl	8101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101996:	4603      	mov	r3, r0
 8101998:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 810199a:	68fb      	ldr	r3, [r7, #12]
 810199c:	4618      	mov	r0, r3
 810199e:	f7ff ff33 	bl	8101808 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81019a2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 81019a4:	69ba      	ldr	r2, [r7, #24]
 81019a6:	4621      	mov	r1, r4
 81019a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81019aa:	f000 fbc7 	bl	810213c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 81019ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 81019b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81019b2:	3318      	adds	r3, #24
 81019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 81019b6:	f107 0308 	add.w	r3, r7, #8
 81019ba:	4618      	mov	r0, r3
 81019bc:	f000 f87c 	bl	8101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81019c0:	4603      	mov	r3, r0
 81019c2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 81019c4:	68fb      	ldr	r3, [r7, #12]
 81019c6:	4618      	mov	r0, r3
 81019c8:	f7ff ff1e 	bl	8101808 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81019cc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 81019ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81019d0:	6a39      	ldr	r1, [r7, #32]
 81019d2:	4620      	mov	r0, r4
 81019d4:	f000 fbb2 	bl	810213c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 81019d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 81019da:	e026      	b.n	8101a2a <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 81019dc:	f107 0308 	add.w	r3, r7, #8
 81019e0:	4618      	mov	r0, r3
 81019e2:	f000 f869 	bl	8101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81019e6:	4603      	mov	r3, r0
 81019e8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 81019ea:	68fb      	ldr	r3, [r7, #12]
 81019ec:	4618      	mov	r0, r3
 81019ee:	f7ff ff0b 	bl	8101808 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81019f2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 81019f4:	69ba      	ldr	r2, [r7, #24]
 81019f6:	4621      	mov	r1, r4
 81019f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81019fa:	f000 fbb3 	bl	8102164 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 81019fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101a02:	3318      	adds	r3, #24
 8101a04:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8101a06:	f107 0308 	add.w	r3, r7, #8
 8101a0a:	4618      	mov	r0, r3
 8101a0c:	f000 f854 	bl	8101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101a10:	4603      	mov	r3, r0
 8101a12:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8101a14:	68fb      	ldr	r3, [r7, #12]
 8101a16:	4618      	mov	r0, r3
 8101a18:	f7ff fef6 	bl	8101808 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101a1c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8101a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101a20:	6a39      	ldr	r1, [r7, #32]
 8101a22:	4620      	mov	r0, r4
 8101a24:	f000 fb9e 	bl	8102164 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101a28:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8101a2a:	f7ff ff57 	bl	81018dc <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101a2e:	4603      	mov	r3, r0
 8101a30:	f083 0301 	eor.w	r3, r3, #1
 8101a34:	b2db      	uxtb	r3, r3
 8101a36:	2b00      	cmp	r3, #0
 8101a38:	d009      	beq.n	8101a4e <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8101a3a:	68fb      	ldr	r3, [r7, #12]
 8101a3c:	4618      	mov	r0, r3
 8101a3e:	f7ff fee3 	bl	8101808 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101a42:	4603      	mov	r3, r0
 8101a44:	461a      	mov	r2, r3
 8101a46:	6a39      	ldr	r1, [r7, #32]
 8101a48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101a4a:	f7ff fee8 	bl	810181e <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8101a4e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8101a50:	68fb      	ldr	r3, [r7, #12]
 8101a52:	689a      	ldr	r2, [r3, #8]
 8101a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101a56:	1ad3      	subs	r3, r2, r3
 8101a58:	10db      	asrs	r3, r3, #3
 8101a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8101a94 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8101a5c:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8101a60:	461a      	mov	r2, r3
 8101a62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101a64:	f7ff ff14 	bl	8101890 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8101a68:	68fb      	ldr	r3, [r7, #12]
 8101a6a:	69ba      	ldr	r2, [r7, #24]
 8101a6c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8101a6e:	68fb      	ldr	r3, [r7, #12]
 8101a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101a72:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8101a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101a76:	4613      	mov	r3, r2
 8101a78:	005b      	lsls	r3, r3, #1
 8101a7a:	4413      	add	r3, r2
 8101a7c:	00db      	lsls	r3, r3, #3
 8101a7e:	461a      	mov	r2, r3
 8101a80:	69bb      	ldr	r3, [r7, #24]
 8101a82:	441a      	add	r2, r3
 8101a84:	68fb      	ldr	r3, [r7, #12]
 8101a86:	609a      	str	r2, [r3, #8]
    }
 8101a88:	bf00      	nop
 8101a8a:	3730      	adds	r7, #48	@ 0x30
 8101a8c:	46bd      	mov	sp, r7
 8101a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8101a90:	08107f1c 	.word	0x08107f1c
 8101a94:	aaaaaaab 	.word	0xaaaaaaab

08101a98 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101a98:	b480      	push	{r7}
 8101a9a:	b083      	sub	sp, #12
 8101a9c:	af00      	add	r7, sp, #0
 8101a9e:	6078      	str	r0, [r7, #4]
 8101aa0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101aa2:	683b      	ldr	r3, [r7, #0]
 8101aa4:	681a      	ldr	r2, [r3, #0]
 8101aa6:	687b      	ldr	r3, [r7, #4]
 8101aa8:	601a      	str	r2, [r3, #0]
 8101aaa:	687b      	ldr	r3, [r7, #4]
 8101aac:	4618      	mov	r0, r3
 8101aae:	370c      	adds	r7, #12
 8101ab0:	46bd      	mov	sp, r7
 8101ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab6:	4770      	bx	lr

08101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101ab8:	b480      	push	{r7}
 8101aba:	b083      	sub	sp, #12
 8101abc:	af00      	add	r7, sp, #0
 8101abe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	4618      	mov	r0, r3
 8101ac4:	370c      	adds	r7, #12
 8101ac6:	46bd      	mov	sp, r7
 8101ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101acc:	4770      	bx	lr

08101ace <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101ace:	b480      	push	{r7}
 8101ad0:	b083      	sub	sp, #12
 8101ad2:	af00      	add	r7, sp, #0
 8101ad4:	6078      	str	r0, [r7, #4]
 8101ad6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101ad8:	683b      	ldr	r3, [r7, #0]
 8101ada:	681a      	ldr	r2, [r3, #0]
 8101adc:	687b      	ldr	r3, [r7, #4]
 8101ade:	601a      	str	r2, [r3, #0]
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	4618      	mov	r0, r3
 8101ae4:	370c      	adds	r7, #12
 8101ae6:	46bd      	mov	sp, r7
 8101ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aec:	4770      	bx	lr

08101aee <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101aee:	b480      	push	{r7}
 8101af0:	b083      	sub	sp, #12
 8101af2:	af00      	add	r7, sp, #0
 8101af4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	4618      	mov	r0, r3
 8101afa:	370c      	adds	r7, #12
 8101afc:	46bd      	mov	sp, r7
 8101afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b02:	4770      	bx	lr

08101b04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101b04:	b590      	push	{r4, r7, lr}
 8101b06:	b085      	sub	sp, #20
 8101b08:	af00      	add	r7, sp, #0
 8101b0a:	6078      	str	r0, [r7, #4]
 8101b0c:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8101b0e:	6878      	ldr	r0, [r7, #4]
 8101b10:	f7ff fe03 	bl	810171a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101b14:	4604      	mov	r4, r0
 8101b16:	6878      	ldr	r0, [r7, #4]
 8101b18:	f000 fb3d 	bl	8102196 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101b1c:	4602      	mov	r2, r0
 8101b1e:	683b      	ldr	r3, [r7, #0]
 8101b20:	4621      	mov	r1, r4
 8101b22:	6878      	ldr	r0, [r7, #4]
 8101b24:	f000 fb43 	bl	81021ae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8101b28:	4603      	mov	r3, r0
 8101b2a:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8101b2c:	6878      	ldr	r0, [r7, #4]
 8101b2e:	f000 f825 	bl	8101b7c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101b32:	4603      	mov	r3, r0
 8101b34:	60fb      	str	r3, [r7, #12]
 8101b36:	f107 020c 	add.w	r2, r7, #12
 8101b3a:	f107 0308 	add.w	r3, r7, #8
 8101b3e:	4611      	mov	r1, r2
 8101b40:	4618      	mov	r0, r3
 8101b42:	f000 f83b 	bl	8101bbc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101b46:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8101b48:	2b00      	cmp	r3, #0
 8101b4a:	d10d      	bne.n	8101b68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8101b4c:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8101b4e:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8101b50:	4618      	mov	r0, r3
 8101b52:	f000 fb5d 	bl	8102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101b56:	4603      	mov	r3, r0
 8101b58:	461a      	mov	r2, r3
 8101b5a:	6839      	ldr	r1, [r7, #0]
 8101b5c:	4620      	mov	r0, r4
 8101b5e:	f000 f85c 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101b62:	4603      	mov	r3, r0
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d004      	beq.n	8101b72 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8101b68:	6878      	ldr	r0, [r7, #4]
 8101b6a:	f000 f807 	bl	8101b7c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101b6e:	4603      	mov	r3, r0
 8101b70:	e000      	b.n	8101b74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8101b72:	68bb      	ldr	r3, [r7, #8]
    }
 8101b74:	4618      	mov	r0, r3
 8101b76:	3714      	adds	r7, #20
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	bd90      	pop	{r4, r7, pc}

08101b7c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101b7c:	b580      	push	{r7, lr}
 8101b7e:	b084      	sub	sp, #16
 8101b80:	af00      	add	r7, sp, #0
 8101b82:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	1d1a      	adds	r2, r3, #4
 8101b88:	f107 030c 	add.w	r3, r7, #12
 8101b8c:	4611      	mov	r1, r2
 8101b8e:	4618      	mov	r0, r3
 8101b90:	f000 f9f6 	bl	8101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101b94:	68fb      	ldr	r3, [r7, #12]
 8101b96:	4618      	mov	r0, r3
 8101b98:	3710      	adds	r7, #16
 8101b9a:	46bd      	mov	sp, r7
 8101b9c:	bd80      	pop	{r7, pc}

08101b9e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8101b9e:	b580      	push	{r7, lr}
 8101ba0:	b082      	sub	sp, #8
 8101ba2:	af00      	add	r7, sp, #0
 8101ba4:	6078      	str	r0, [r7, #4]
 8101ba6:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	6839      	ldr	r1, [r7, #0]
 8101bac:	4618      	mov	r0, r3
 8101bae:	f000 fb3b 	bl	8102228 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8101bb2:	4603      	mov	r3, r0
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	3708      	adds	r7, #8
 8101bb8:	46bd      	mov	sp, r7
 8101bba:	bd80      	pop	{r7, pc}

08101bbc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101bbc:	b480      	push	{r7}
 8101bbe:	b083      	sub	sp, #12
 8101bc0:	af00      	add	r7, sp, #0
 8101bc2:	6078      	str	r0, [r7, #4]
 8101bc4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681a      	ldr	r2, [r3, #0]
 8101bca:	683b      	ldr	r3, [r7, #0]
 8101bcc:	681b      	ldr	r3, [r3, #0]
 8101bce:	429a      	cmp	r2, r3
 8101bd0:	bf0c      	ite	eq
 8101bd2:	2301      	moveq	r3, #1
 8101bd4:	2300      	movne	r3, #0
 8101bd6:	b2db      	uxtb	r3, r3
 8101bd8:	4618      	mov	r0, r3
 8101bda:	370c      	adds	r7, #12
 8101bdc:	46bd      	mov	sp, r7
 8101bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be2:	4770      	bx	lr

08101be4 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8101be4:	b590      	push	{r4, r7, lr}
 8101be6:	b083      	sub	sp, #12
 8101be8:	af00      	add	r7, sp, #0
 8101bea:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	4618      	mov	r0, r3
 8101bf0:	f000 fb31 	bl	8102256 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8101bf4:	bf00      	nop
 8101bf6:	4620      	mov	r0, r4
 8101bf8:	370c      	adds	r7, #12
 8101bfa:	46bd      	mov	sp, r7
 8101bfc:	bd90      	pop	{r4, r7, pc}

08101bfe <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101bfe:	b580      	push	{r7, lr}
 8101c00:	b082      	sub	sp, #8
 8101c02:	af00      	add	r7, sp, #0
 8101c04:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	4618      	mov	r0, r3
 8101c0c:	f000 fb2e 	bl	810226c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8101c10:	4603      	mov	r3, r0
 8101c12:	4618      	mov	r0, r3
 8101c14:	3708      	adds	r7, #8
 8101c16:	46bd      	mov	sp, r7
 8101c18:	bd80      	pop	{r7, pc}

08101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8101c1a:	b480      	push	{r7}
 8101c1c:	b085      	sub	sp, #20
 8101c1e:	af00      	add	r7, sp, #0
 8101c20:	60f8      	str	r0, [r7, #12]
 8101c22:	60b9      	str	r1, [r7, #8]
 8101c24:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8101c26:	68bb      	ldr	r3, [r7, #8]
 8101c28:	781a      	ldrb	r2, [r3, #0]
 8101c2a:	687b      	ldr	r3, [r7, #4]
 8101c2c:	781b      	ldrb	r3, [r3, #0]
 8101c2e:	429a      	cmp	r2, r3
 8101c30:	bf34      	ite	cc
 8101c32:	2301      	movcc	r3, #1
 8101c34:	2300      	movcs	r3, #0
 8101c36:	b2db      	uxtb	r3, r3
 8101c38:	4618      	mov	r0, r3
 8101c3a:	3714      	adds	r7, #20
 8101c3c:	46bd      	mov	sp, r7
 8101c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c42:	4770      	bx	lr

08101c44 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8101c44:	b580      	push	{r7, lr}
 8101c46:	b082      	sub	sp, #8
 8101c48:	af00      	add	r7, sp, #0
 8101c4a:	6078      	str	r0, [r7, #4]
 8101c4c:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	6839      	ldr	r1, [r7, #0]
 8101c52:	4618      	mov	r0, r3
 8101c54:	f000 fb18 	bl	8102288 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8101c58:	687b      	ldr	r3, [r7, #4]
 8101c5a:	4618      	mov	r0, r3
 8101c5c:	3708      	adds	r7, #8
 8101c5e:	46bd      	mov	sp, r7
 8101c60:	bd80      	pop	{r7, pc}

08101c62 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8101c62:	b480      	push	{r7}
 8101c64:	b083      	sub	sp, #12
 8101c66:	af00      	add	r7, sp, #0
 8101c68:	6078      	str	r0, [r7, #4]
 8101c6a:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8101c6c:	683b      	ldr	r3, [r7, #0]
 8101c6e:	681a      	ldr	r2, [r3, #0]
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	601a      	str	r2, [r3, #0]
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	4618      	mov	r0, r3
 8101c78:	370c      	adds	r7, #12
 8101c7a:	46bd      	mov	sp, r7
 8101c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c80:	4770      	bx	lr

08101c82 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101c82:	b5b0      	push	{r4, r5, r7, lr}
 8101c84:	b08c      	sub	sp, #48	@ 0x30
 8101c86:	af02      	add	r7, sp, #8
 8101c88:	60f8      	str	r0, [r7, #12]
 8101c8a:	60b9      	str	r1, [r7, #8]
 8101c8c:	607a      	str	r2, [r7, #4]
 8101c8e:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101c90:	6878      	ldr	r0, [r7, #4]
 8101c92:	f000 fb08 	bl	81022a6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8101c96:	4604      	mov	r4, r0
 8101c98:	6838      	ldr	r0, [r7, #0]
 8101c9a:	f000 fb0f 	bl	81022bc <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8101c9e:	4605      	mov	r5, r0
 8101ca0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101ca2:	f000 fb16 	bl	81022d2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8101ca6:	4603      	mov	r3, r0
 8101ca8:	f107 001c 	add.w	r0, r7, #28
 8101cac:	9300      	str	r3, [sp, #0]
 8101cae:	462b      	mov	r3, r5
 8101cb0:	4622      	mov	r2, r4
 8101cb2:	68f9      	ldr	r1, [r7, #12]
 8101cb4:	f000 fb18 	bl	81022e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8101cb8:	f107 031c 	add.w	r3, r7, #28
 8101cbc:	4618      	mov	r0, r3
 8101cbe:	f000 f91f 	bl	8101f00 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101cc2:	4603      	mov	r3, r0
 8101cc4:	f107 0014 	add.w	r0, r7, #20
 8101cc8:	68ba      	ldr	r2, [r7, #8]
 8101cca:	68f9      	ldr	r1, [r7, #12]
 8101ccc:	f000 fb2f 	bl	810232e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8101cd0:	69bb      	ldr	r3, [r7, #24]
 8101cd2:	2b00      	cmp	r3, #0
 8101cd4:	d009      	beq.n	8101cea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8101cd6:	f107 001c 	add.w	r0, r7, #28
 8101cda:	f107 0314 	add.w	r3, r7, #20
 8101cde:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101ce2:	f000 f91b 	bl	8101f1c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101ce6:	4604      	mov	r4, r0
 8101ce8:	e007      	b.n	8101cfa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8101cea:	697a      	ldr	r2, [r7, #20]
 8101cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101cf0:	4611      	mov	r1, r2
 8101cf2:	4618      	mov	r0, r3
 8101cf4:	f000 f944 	bl	8101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101cf8:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8101cfa:	f107 031c 	add.w	r3, r7, #28
 8101cfe:	4618      	mov	r0, r3
 8101d00:	f000 f864 	bl	8101dcc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101d04:	4623      	mov	r3, r4
 8101d06:	4618      	mov	r0, r3
 8101d08:	3728      	adds	r7, #40	@ 0x28
 8101d0a:	46bd      	mov	sp, r7
 8101d0c:	bdb0      	pop	{r4, r5, r7, pc}

08101d0e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101d0e:	b480      	push	{r7}
 8101d10:	b083      	sub	sp, #12
 8101d12:	af00      	add	r7, sp, #0
 8101d14:	6078      	str	r0, [r7, #4]
 8101d16:	687b      	ldr	r3, [r7, #4]
 8101d18:	4618      	mov	r0, r3
 8101d1a:	370c      	adds	r7, #12
 8101d1c:	46bd      	mov	sp, r7
 8101d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d22:	4770      	bx	lr

08101d24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101d24:	b480      	push	{r7}
 8101d26:	b083      	sub	sp, #12
 8101d28:	af00      	add	r7, sp, #0
 8101d2a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	68db      	ldr	r3, [r3, #12]
 8101d30:	4618      	mov	r0, r3
 8101d32:	370c      	adds	r7, #12
 8101d34:	46bd      	mov	sp, r7
 8101d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d3a:	4770      	bx	lr

08101d3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101d3c:	b480      	push	{r7}
 8101d3e:	b083      	sub	sp, #12
 8101d40:	af00      	add	r7, sp, #0
 8101d42:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	689b      	ldr	r3, [r3, #8]
 8101d48:	4618      	mov	r0, r3
 8101d4a:	370c      	adds	r7, #12
 8101d4c:	46bd      	mov	sp, r7
 8101d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d52:	4770      	bx	lr

08101d54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8101d54:	b580      	push	{r7, lr}
 8101d56:	b082      	sub	sp, #8
 8101d58:	af00      	add	r7, sp, #0
 8101d5a:	6078      	str	r0, [r7, #4]
 8101d5c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8101d5e:	6839      	ldr	r1, [r7, #0]
 8101d60:	6878      	ldr	r0, [r7, #4]
 8101d62:	f000 fc07 	bl	8102574 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8101d66:	6839      	ldr	r1, [r7, #0]
 8101d68:	6878      	ldr	r0, [r7, #4]
 8101d6a:	f000 fc18 	bl	810259e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8101d6e:	bf00      	nop
 8101d70:	3708      	adds	r7, #8
 8101d72:	46bd      	mov	sp, r7
 8101d74:	bd80      	pop	{r7, pc}

08101d76 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8101d76:	b480      	push	{r7}
 8101d78:	b083      	sub	sp, #12
 8101d7a:	af00      	add	r7, sp, #0
 8101d7c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	689b      	ldr	r3, [r3, #8]
 8101d82:	4618      	mov	r0, r3
 8101d84:	370c      	adds	r7, #12
 8101d86:	46bd      	mov	sp, r7
 8101d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d8c:	4770      	bx	lr

08101d8e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8101d8e:	b590      	push	{r4, r7, lr}
 8101d90:	b085      	sub	sp, #20
 8101d92:	af00      	add	r7, sp, #0
 8101d94:	60f8      	str	r0, [r7, #12]
 8101d96:	60b9      	str	r1, [r7, #8]
 8101d98:	607a      	str	r2, [r7, #4]
 8101d9a:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8101d9c:	68fb      	ldr	r3, [r7, #12]
 8101d9e:	68ba      	ldr	r2, [r7, #8]
 8101da0:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8101da2:	6878      	ldr	r0, [r7, #4]
 8101da4:	f7ff fcc5 	bl	8101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101da8:	4604      	mov	r4, r0
 8101daa:	6838      	ldr	r0, [r7, #0]
 8101dac:	f7ff fccc 	bl	8101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101db0:	4603      	mov	r3, r0
 8101db2:	461a      	mov	r2, r3
 8101db4:	4621      	mov	r1, r4
 8101db6:	68b8      	ldr	r0, [r7, #8]
 8101db8:	f000 fc03 	bl	81025c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8101dbc:	4602      	mov	r2, r0
 8101dbe:	68fb      	ldr	r3, [r7, #12]
 8101dc0:	605a      	str	r2, [r3, #4]
	  { }
 8101dc2:	68fb      	ldr	r3, [r7, #12]
 8101dc4:	4618      	mov	r0, r3
 8101dc6:	3714      	adds	r7, #20
 8101dc8:	46bd      	mov	sp, r7
 8101dca:	bd90      	pop	{r4, r7, pc}

08101dcc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8101dcc:	b580      	push	{r7, lr}
 8101dce:	b082      	sub	sp, #8
 8101dd0:	af00      	add	r7, sp, #0
 8101dd2:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	685b      	ldr	r3, [r3, #4]
 8101dd8:	2b00      	cmp	r3, #0
 8101dda:	d007      	beq.n	8101dec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8101ddc:	687b      	ldr	r3, [r7, #4]
 8101dde:	681a      	ldr	r2, [r3, #0]
 8101de0:	687b      	ldr	r3, [r7, #4]
 8101de2:	685b      	ldr	r3, [r3, #4]
 8101de4:	4619      	mov	r1, r3
 8101de6:	4610      	mov	r0, r2
 8101de8:	f7ff ffb4 	bl	8101d54 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8101dec:	687b      	ldr	r3, [r7, #4]
 8101dee:	4618      	mov	r0, r3
 8101df0:	3708      	adds	r7, #8
 8101df2:	46bd      	mov	sp, r7
 8101df4:	bd80      	pop	{r7, pc}

08101df6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101df6:	b590      	push	{r4, r7, lr}
 8101df8:	b08b      	sub	sp, #44	@ 0x2c
 8101dfa:	af00      	add	r7, sp, #0
 8101dfc:	60f8      	str	r0, [r7, #12]
 8101dfe:	60b9      	str	r1, [r7, #8]
 8101e00:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8101e02:	68b8      	ldr	r0, [r7, #8]
 8101e04:	f7ff fc89 	bl	810171a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101e08:	4603      	mov	r3, r0
 8101e0a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8101e0c:	68b8      	ldr	r0, [r7, #8]
 8101e0e:	f000 f9c2 	bl	8102196 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101e12:	4603      	mov	r3, r0
 8101e14:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8101e16:	2301      	movs	r3, #1
 8101e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8101e1c:	e01f      	b.n	8101e5e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 8101e1e:	69bb      	ldr	r3, [r7, #24]
 8101e20:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8101e22:	68bc      	ldr	r4, [r7, #8]
 8101e24:	69bb      	ldr	r3, [r7, #24]
 8101e26:	4618      	mov	r0, r3
 8101e28:	f000 fbe7 	bl	81025fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8101e2c:	4603      	mov	r3, r0
 8101e2e:	461a      	mov	r2, r3
 8101e30:	6879      	ldr	r1, [r7, #4]
 8101e32:	4620      	mov	r0, r4
 8101e34:	f7ff fef1 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101e38:	4603      	mov	r3, r0
 8101e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8101e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101e42:	2b00      	cmp	r3, #0
 8101e44:	d005      	beq.n	8101e52 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 8101e46:	69bb      	ldr	r3, [r7, #24]
 8101e48:	4618      	mov	r0, r3
 8101e4a:	f7ff ff77 	bl	8101d3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8101e4e:	4603      	mov	r3, r0
 8101e50:	e004      	b.n	8101e5c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8101e52:	69bb      	ldr	r3, [r7, #24]
 8101e54:	4618      	mov	r0, r3
 8101e56:	f7ff ff65 	bl	8101d24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8101e5a:	4603      	mov	r3, r0
 8101e5c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8101e5e:	69bb      	ldr	r3, [r7, #24]
 8101e60:	2b00      	cmp	r3, #0
 8101e62:	d1dc      	bne.n	8101e1e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 8101e64:	697a      	ldr	r2, [r7, #20]
 8101e66:	f107 0310 	add.w	r3, r7, #16
 8101e6a:	4611      	mov	r1, r2
 8101e6c:	4618      	mov	r0, r3
 8101e6e:	f000 f887 	bl	8101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8101e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101e76:	2b00      	cmp	r3, #0
 8101e78:	d01d      	beq.n	8101eb6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8101e7a:	68b8      	ldr	r0, [r7, #8]
 8101e7c:	f000 fbd0 	bl	8102620 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8101e80:	4603      	mov	r3, r0
 8101e82:	61fb      	str	r3, [r7, #28]
 8101e84:	f107 021c 	add.w	r2, r7, #28
 8101e88:	f107 0310 	add.w	r3, r7, #16
 8101e8c:	4611      	mov	r1, r2
 8101e8e:	4618      	mov	r0, r3
 8101e90:	f7ff fe94 	bl	8101bbc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101e94:	4603      	mov	r3, r0
 8101e96:	2b00      	cmp	r3, #0
 8101e98:	d008      	beq.n	8101eac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8101e9a:	f107 0214 	add.w	r2, r7, #20
 8101e9e:	f107 0318 	add.w	r3, r7, #24
 8101ea2:	4619      	mov	r1, r3
 8101ea4:	68f8      	ldr	r0, [r7, #12]
 8101ea6:	f000 fbcc 	bl	8102642 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8101eaa:	e025      	b.n	8101ef8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8101eac:	f107 0310 	add.w	r3, r7, #16
 8101eb0:	4618      	mov	r0, r3
 8101eb2:	f000 fbdf 	bl	8102674 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8101eb6:	68bc      	ldr	r4, [r7, #8]
 8101eb8:	693b      	ldr	r3, [r7, #16]
 8101eba:	4618      	mov	r0, r3
 8101ebc:	f000 f9a8 	bl	8102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101ec0:	4603      	mov	r3, r0
 8101ec2:	687a      	ldr	r2, [r7, #4]
 8101ec4:	4619      	mov	r1, r3
 8101ec6:	4620      	mov	r0, r4
 8101ec8:	f7ff fea7 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101ecc:	4603      	mov	r3, r0
 8101ece:	2b00      	cmp	r3, #0
 8101ed0:	d008      	beq.n	8101ee4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8101ed2:	f107 0214 	add.w	r2, r7, #20
 8101ed6:	f107 0318 	add.w	r3, r7, #24
 8101eda:	4619      	mov	r1, r3
 8101edc:	68f8      	ldr	r0, [r7, #12]
 8101ede:	f000 fbb0 	bl	8102642 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8101ee2:	e009      	b.n	8101ef8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8101ee4:	2300      	movs	r3, #0
 8101ee6:	623b      	str	r3, [r7, #32]
 8101ee8:	f107 0220 	add.w	r2, r7, #32
 8101eec:	f107 0310 	add.w	r3, r7, #16
 8101ef0:	4619      	mov	r1, r3
 8101ef2:	68f8      	ldr	r0, [r7, #12]
 8101ef4:	f000 fbcf 	bl	8102696 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8101ef8:	68f8      	ldr	r0, [r7, #12]
 8101efa:	372c      	adds	r7, #44	@ 0x2c
 8101efc:	46bd      	mov	sp, r7
 8101efe:	bd90      	pop	{r4, r7, pc}

08101f00 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8101f00:	b580      	push	{r7, lr}
 8101f02:	b082      	sub	sp, #8
 8101f04:	af00      	add	r7, sp, #0
 8101f06:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8101f08:	687b      	ldr	r3, [r7, #4]
 8101f0a:	685b      	ldr	r3, [r3, #4]
 8101f0c:	4618      	mov	r0, r3
 8101f0e:	f000 fb74 	bl	81025fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8101f12:	4603      	mov	r3, r0
 8101f14:	4618      	mov	r0, r3
 8101f16:	3708      	adds	r7, #8
 8101f18:	46bd      	mov	sp, r7
 8101f1a:	bd80      	pop	{r7, pc}

08101f1c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8101f1c:	b580      	push	{r7, lr}
 8101f1e:	b086      	sub	sp, #24
 8101f20:	af00      	add	r7, sp, #0
 8101f22:	60f8      	str	r0, [r7, #12]
 8101f24:	1d3b      	adds	r3, r7, #4
 8101f26:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8101f2a:	68fb      	ldr	r3, [r7, #12]
 8101f2c:	6818      	ldr	r0, [r3, #0]
 8101f2e:	6879      	ldr	r1, [r7, #4]
 8101f30:	68ba      	ldr	r2, [r7, #8]
 8101f32:	68fb      	ldr	r3, [r7, #12]
 8101f34:	685b      	ldr	r3, [r3, #4]
 8101f36:	f000 fbc3 	bl	81026c0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8101f3a:	4603      	mov	r3, r0
 8101f3c:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8101f3e:	68fb      	ldr	r3, [r7, #12]
 8101f40:	2200      	movs	r2, #0
 8101f42:	605a      	str	r2, [r3, #4]
	  return __it;
 8101f44:	697b      	ldr	r3, [r7, #20]
	}
 8101f46:	4618      	mov	r0, r3
 8101f48:	3718      	adds	r7, #24
 8101f4a:	46bd      	mov	sp, r7
 8101f4c:	bd80      	pop	{r7, pc}

08101f4e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8101f4e:	b580      	push	{r7, lr}
 8101f50:	b084      	sub	sp, #16
 8101f52:	af00      	add	r7, sp, #0
 8101f54:	60f8      	str	r0, [r7, #12]
 8101f56:	60b9      	str	r1, [r7, #8]
 8101f58:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8101f5a:	68b8      	ldr	r0, [r7, #8]
 8101f5c:	f000 fbed 	bl	810273a <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8101f60:	4602      	mov	r2, r0
 8101f62:	68fb      	ldr	r3, [r7, #12]
 8101f64:	6812      	ldr	r2, [r2, #0]
 8101f66:	601a      	str	r2, [r3, #0]
 8101f68:	6878      	ldr	r0, [r7, #4]
 8101f6a:	f000 fbf1 	bl	8102750 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8101f6e:	4603      	mov	r3, r0
 8101f70:	781a      	ldrb	r2, [r3, #0]
 8101f72:	68fb      	ldr	r3, [r7, #12]
 8101f74:	711a      	strb	r2, [r3, #4]
 8101f76:	68fb      	ldr	r3, [r7, #12]
 8101f78:	4618      	mov	r0, r3
 8101f7a:	3710      	adds	r7, #16
 8101f7c:	46bd      	mov	sp, r7
 8101f7e:	bd80      	pop	{r7, pc}

08101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101f80:	b480      	push	{r7}
 8101f82:	b083      	sub	sp, #12
 8101f84:	af00      	add	r7, sp, #0
 8101f86:	6078      	str	r0, [r7, #4]
 8101f88:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	683a      	ldr	r2, [r7, #0]
 8101f8e:	601a      	str	r2, [r3, #0]
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	4618      	mov	r0, r3
 8101f94:	370c      	adds	r7, #12
 8101f96:	46bd      	mov	sp, r7
 8101f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f9c:	4770      	bx	lr

08101f9e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8101f9e:	b480      	push	{r7}
 8101fa0:	b083      	sub	sp, #12
 8101fa2:	af00      	add	r7, sp, #0
 8101fa4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	695b      	ldr	r3, [r3, #20]
 8101faa:	4618      	mov	r0, r3
 8101fac:	370c      	adds	r7, #12
 8101fae:	46bd      	mov	sp, r7
 8101fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fb4:	4770      	bx	lr

08101fb6 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8101fb6:	b580      	push	{r7, lr}
 8101fb8:	b082      	sub	sp, #8
 8101fba:	af00      	add	r7, sp, #0
 8101fbc:	6078      	str	r0, [r7, #4]
 8101fbe:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8101fc0:	6839      	ldr	r1, [r7, #0]
 8101fc2:	6878      	ldr	r0, [r7, #4]
 8101fc4:	f000 fbcf 	bl	8102766 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8101fc8:	bf00      	nop
 8101fca:	3708      	adds	r7, #8
 8101fcc:	46bd      	mov	sp, r7
 8101fce:	bd80      	pop	{r7, pc}

08101fd0 <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 8101fd0:	b480      	push	{r7}
 8101fd2:	b083      	sub	sp, #12
 8101fd4:	af00      	add	r7, sp, #0
 8101fd6:	6078      	str	r0, [r7, #4]
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	4618      	mov	r0, r3
 8101fdc:	370c      	adds	r7, #12
 8101fde:	46bd      	mov	sp, r7
 8101fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe4:	4770      	bx	lr

08101fe6 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8101fe6:	b580      	push	{r7, lr}
 8101fe8:	b084      	sub	sp, #16
 8101fea:	af00      	add	r7, sp, #0
 8101fec:	60f8      	str	r0, [r7, #12]
 8101fee:	60b9      	str	r1, [r7, #8]
 8101ff0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8101ff2:	687a      	ldr	r2, [r7, #4]
 8101ff4:	68b9      	ldr	r1, [r7, #8]
 8101ff6:	68f8      	ldr	r0, [r7, #12]
 8101ff8:	f000 fbc0 	bl	810277c <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 8101ffc:	bf00      	nop
 8101ffe:	3710      	adds	r7, #16
 8102000:	46bd      	mov	sp, r7
 8102002:	bd80      	pop	{r7, pc}

08102004 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102004:	b480      	push	{r7}
 8102006:	b083      	sub	sp, #12
 8102008:	af00      	add	r7, sp, #0
 810200a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	4618      	mov	r0, r3
 8102010:	370c      	adds	r7, #12
 8102012:	46bd      	mov	sp, r7
 8102014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102018:	4770      	bx	lr

0810201a <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 810201a:	b5b0      	push	{r4, r5, r7, lr}
 810201c:	b084      	sub	sp, #16
 810201e:	af00      	add	r7, sp, #0
 8102020:	60f8      	str	r0, [r7, #12]
 8102022:	60b9      	str	r1, [r7, #8]
 8102024:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102026:	68bb      	ldr	r3, [r7, #8]
 8102028:	4619      	mov	r1, r3
 810202a:	2018      	movs	r0, #24
 810202c:	f7fe fc68 	bl	8100900 <_ZnwjPv>
 8102030:	4604      	mov	r4, r0
 8102032:	6878      	ldr	r0, [r7, #4]
 8102034:	f7ff ffe6 	bl	8102004 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8102038:	4603      	mov	r3, r0
 810203a:	461d      	mov	r5, r3
 810203c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810203e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102040:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102044:	e884 0003 	stmia.w	r4, {r0, r1}
 8102048:	bf00      	nop
 810204a:	3710      	adds	r7, #16
 810204c:	46bd      	mov	sp, r7
 810204e:	bdb0      	pop	{r4, r5, r7, pc}

08102050 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8102050:	b590      	push	{r4, r7, lr}
 8102052:	b087      	sub	sp, #28
 8102054:	af00      	add	r7, sp, #0
 8102056:	60f8      	str	r0, [r7, #12]
 8102058:	60b9      	str	r1, [r7, #8]
 810205a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 810205c:	68f8      	ldr	r0, [r7, #12]
 810205e:	f000 fba0 	bl	81027a2 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8102062:	4604      	mov	r4, r0
 8102064:	68f8      	ldr	r0, [r7, #12]
 8102066:	f7ff f9f3 	bl	8101450 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810206a:	4603      	mov	r3, r0
 810206c:	1ae2      	subs	r2, r4, r3
 810206e:	68bb      	ldr	r3, [r7, #8]
 8102070:	429a      	cmp	r2, r3
 8102072:	bf34      	ite	cc
 8102074:	2301      	movcc	r3, #1
 8102076:	2300      	movcs	r3, #0
 8102078:	b2db      	uxtb	r3, r3
 810207a:	2b00      	cmp	r3, #0
 810207c:	d002      	beq.n	8102084 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 810207e:	6878      	ldr	r0, [r7, #4]
 8102080:	f005 fd0a 	bl	8107a98 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8102084:	68f8      	ldr	r0, [r7, #12]
 8102086:	f7ff f9e3 	bl	8101450 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810208a:	4604      	mov	r4, r0
 810208c:	68f8      	ldr	r0, [r7, #12]
 810208e:	f7ff f9df 	bl	8101450 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8102092:	4603      	mov	r3, r0
 8102094:	613b      	str	r3, [r7, #16]
 8102096:	f107 0208 	add.w	r2, r7, #8
 810209a:	f107 0310 	add.w	r3, r7, #16
 810209e:	4611      	mov	r1, r2
 81020a0:	4618      	mov	r0, r3
 81020a2:	f000 fb8f 	bl	81027c4 <_ZSt3maxIjERKT_S2_S2_>
 81020a6:	4603      	mov	r3, r0
 81020a8:	681b      	ldr	r3, [r3, #0]
 81020aa:	4423      	add	r3, r4
 81020ac:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 81020ae:	68f8      	ldr	r0, [r7, #12]
 81020b0:	f7ff f9ce 	bl	8101450 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81020b4:	4602      	mov	r2, r0
 81020b6:	697b      	ldr	r3, [r7, #20]
 81020b8:	4293      	cmp	r3, r2
 81020ba:	d306      	bcc.n	81020ca <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 81020bc:	68f8      	ldr	r0, [r7, #12]
 81020be:	f000 fb70 	bl	81027a2 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81020c2:	4602      	mov	r2, r0
 81020c4:	697b      	ldr	r3, [r7, #20]
 81020c6:	4293      	cmp	r3, r2
 81020c8:	d904      	bls.n	81020d4 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 81020ca:	68f8      	ldr	r0, [r7, #12]
 81020cc:	f000 fb69 	bl	81027a2 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81020d0:	4603      	mov	r3, r0
 81020d2:	e000      	b.n	81020d6 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 81020d4:	697b      	ldr	r3, [r7, #20]
      }
 81020d6:	4618      	mov	r0, r3
 81020d8:	371c      	adds	r7, #28
 81020da:	46bd      	mov	sp, r7
 81020dc:	bd90      	pop	{r4, r7, pc}
	...

081020e0 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 81020e0:	b590      	push	{r4, r7, lr}
 81020e2:	b083      	sub	sp, #12
 81020e4:	af00      	add	r7, sp, #0
 81020e6:	6078      	str	r0, [r7, #4]
 81020e8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 81020ea:	6878      	ldr	r0, [r7, #4]
 81020ec:	f7ff fce4 	bl	8101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81020f0:	4603      	mov	r3, r0
 81020f2:	681c      	ldr	r4, [r3, #0]
 81020f4:	6838      	ldr	r0, [r7, #0]
 81020f6:	f7ff fcdf 	bl	8101ab8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81020fa:	4603      	mov	r3, r0
 81020fc:	681b      	ldr	r3, [r3, #0]
 81020fe:	1ae3      	subs	r3, r4, r3
 8102100:	10db      	asrs	r3, r3, #3
 8102102:	4a03      	ldr	r2, [pc, #12]	@ (8102110 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8102104:	fb02 f303 	mul.w	r3, r2, r3
 8102108:	4618      	mov	r0, r3
 810210a:	370c      	adds	r7, #12
 810210c:	46bd      	mov	sp, r7
 810210e:	bd90      	pop	{r4, r7, pc}
 8102110:	aaaaaaab 	.word	0xaaaaaaab

08102114 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8102114:	b580      	push	{r7, lr}
 8102116:	b082      	sub	sp, #8
 8102118:	af00      	add	r7, sp, #0
 810211a:	6078      	str	r0, [r7, #4]
 810211c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 810211e:	683b      	ldr	r3, [r7, #0]
 8102120:	2b00      	cmp	r3, #0
 8102122:	d006      	beq.n	8102132 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	6839      	ldr	r1, [r7, #0]
 8102128:	4618      	mov	r0, r3
 810212a:	f000 fb5f 	bl	81027ec <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 810212e:	4603      	mov	r3, r0
 8102130:	e000      	b.n	8102134 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 8102132:	2300      	movs	r3, #0
      }
 8102134:	4618      	mov	r0, r3
 8102136:	3708      	adds	r7, #8
 8102138:	46bd      	mov	sp, r7
 810213a:	bd80      	pop	{r7, pc}

0810213c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 810213c:	b590      	push	{r4, r7, lr}
 810213e:	b087      	sub	sp, #28
 8102140:	af02      	add	r7, sp, #8
 8102142:	60f8      	str	r0, [r7, #12]
 8102144:	60b9      	str	r1, [r7, #8]
 8102146:	607a      	str	r2, [r7, #4]
 8102148:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 810214a:	f88d 4000 	strb.w	r4, [sp]
 810214e:	683b      	ldr	r3, [r7, #0]
 8102150:	687a      	ldr	r2, [r7, #4]
 8102152:	68b9      	ldr	r1, [r7, #8]
 8102154:	68f8      	ldr	r0, [r7, #12]
 8102156:	f000 fb58 	bl	810280a <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 810215a:	4603      	mov	r3, r0
      }
 810215c:	4618      	mov	r0, r3
 810215e:	3714      	adds	r7, #20
 8102160:	46bd      	mov	sp, r7
 8102162:	bd90      	pop	{r4, r7, pc}

08102164 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8102164:	b590      	push	{r4, r7, lr}
 8102166:	b085      	sub	sp, #20
 8102168:	af00      	add	r7, sp, #0
 810216a:	60f8      	str	r0, [r7, #12]
 810216c:	60b9      	str	r1, [r7, #8]
 810216e:	607a      	str	r2, [r7, #4]
 8102170:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8102172:	68f8      	ldr	r0, [r7, #12]
 8102174:	f000 fb5b 	bl	810282e <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8102178:	4604      	mov	r4, r0
 810217a:	68b8      	ldr	r0, [r7, #8]
 810217c:	f000 fb57 	bl	810282e <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8102180:	4601      	mov	r1, r0
 8102182:	683b      	ldr	r3, [r7, #0]
 8102184:	687a      	ldr	r2, [r7, #4]
 8102186:	4620      	mov	r0, r4
 8102188:	f000 fb60 	bl	810284c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 810218c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 810218e:	4618      	mov	r0, r3
 8102190:	3714      	adds	r7, #20
 8102192:	46bd      	mov	sp, r7
 8102194:	bd90      	pop	{r4, r7, pc}

08102196 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8102196:	b480      	push	{r7}
 8102198:	b083      	sub	sp, #12
 810219a:	af00      	add	r7, sp, #0
 810219c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	3304      	adds	r3, #4
 81021a2:	4618      	mov	r0, r3
 81021a4:	370c      	adds	r7, #12
 81021a6:	46bd      	mov	sp, r7
 81021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ac:	4770      	bx	lr

081021ae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81021ae:	b590      	push	{r4, r7, lr}
 81021b0:	b087      	sub	sp, #28
 81021b2:	af00      	add	r7, sp, #0
 81021b4:	60f8      	str	r0, [r7, #12]
 81021b6:	60b9      	str	r1, [r7, #8]
 81021b8:	607a      	str	r2, [r7, #4]
 81021ba:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 81021bc:	e01a      	b.n	81021f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 81021be:	68fc      	ldr	r4, [r7, #12]
 81021c0:	68b8      	ldr	r0, [r7, #8]
 81021c2:	f000 fa1a 	bl	81025fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81021c6:	4603      	mov	r3, r0
 81021c8:	683a      	ldr	r2, [r7, #0]
 81021ca:	4619      	mov	r1, r3
 81021cc:	4620      	mov	r0, r4
 81021ce:	f7ff fd24 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81021d2:	4603      	mov	r3, r0
 81021d4:	f083 0301 	eor.w	r3, r3, #1
 81021d8:	b2db      	uxtb	r3, r3
 81021da:	2b00      	cmp	r3, #0
 81021dc:	d006      	beq.n	81021ec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 81021de:	68bb      	ldr	r3, [r7, #8]
 81021e0:	607b      	str	r3, [r7, #4]
 81021e2:	68b8      	ldr	r0, [r7, #8]
 81021e4:	f7ff fdaa 	bl	8101d3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81021e8:	60b8      	str	r0, [r7, #8]
 81021ea:	e003      	b.n	81021f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 81021ec:	68b8      	ldr	r0, [r7, #8]
 81021ee:	f7ff fd99 	bl	8101d24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81021f2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 81021f4:	68bb      	ldr	r3, [r7, #8]
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d1e1      	bne.n	81021be <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 81021fa:	f107 0314 	add.w	r3, r7, #20
 81021fe:	6879      	ldr	r1, [r7, #4]
 8102200:	4618      	mov	r0, r3
 8102202:	f7ff febd 	bl	8101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102206:	697b      	ldr	r3, [r7, #20]
    }
 8102208:	4618      	mov	r0, r3
 810220a:	371c      	adds	r7, #28
 810220c:	46bd      	mov	sp, r7
 810220e:	bd90      	pop	{r4, r7, pc}

08102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8102210:	b580      	push	{r7, lr}
 8102212:	b082      	sub	sp, #8
 8102214:	af00      	add	r7, sp, #0
 8102216:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8102218:	6878      	ldr	r0, [r7, #4]
 810221a:	f000 f9ee 	bl	81025fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810221e:	4603      	mov	r3, r0
 8102220:	4618      	mov	r0, r3
 8102222:	3708      	adds	r7, #8
 8102224:	46bd      	mov	sp, r7
 8102226:	bd80      	pop	{r7, pc}

08102228 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8102228:	b590      	push	{r4, r7, lr}
 810222a:	b083      	sub	sp, #12
 810222c:	af00      	add	r7, sp, #0
 810222e:	6078      	str	r0, [r7, #4]
 8102230:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8102232:	6878      	ldr	r0, [r7, #4]
 8102234:	f7ff fa71 	bl	810171a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102238:	4604      	mov	r4, r0
 810223a:	6878      	ldr	r0, [r7, #4]
 810223c:	f7ff ffab 	bl	8102196 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102240:	4602      	mov	r2, r0
 8102242:	683b      	ldr	r3, [r7, #0]
 8102244:	4621      	mov	r1, r4
 8102246:	6878      	ldr	r0, [r7, #4]
 8102248:	f7ff ffb1 	bl	81021ae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 810224c:	4603      	mov	r3, r0
 810224e:	4618      	mov	r0, r3
 8102250:	370c      	adds	r7, #12
 8102252:	46bd      	mov	sp, r7
 8102254:	bd90      	pop	{r4, r7, pc}

08102256 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8102256:	b480      	push	{r7}
 8102258:	b083      	sub	sp, #12
 810225a:	af00      	add	r7, sp, #0
 810225c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 810225e:	bf00      	nop
 8102260:	4618      	mov	r0, r3
 8102262:	370c      	adds	r7, #12
 8102264:	46bd      	mov	sp, r7
 8102266:	f85d 7b04 	ldr.w	r7, [sp], #4
 810226a:	4770      	bx	lr

0810226c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 810226c:	b580      	push	{r7, lr}
 810226e:	b082      	sub	sp, #8
 8102270:	af00      	add	r7, sp, #0
 8102272:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	3310      	adds	r3, #16
 8102278:	4618      	mov	r0, r3
 810227a:	f000 faf8 	bl	810286e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 810227e:	4603      	mov	r3, r0
 8102280:	4618      	mov	r0, r3
 8102282:	3708      	adds	r7, #8
 8102284:	46bd      	mov	sp, r7
 8102286:	bd80      	pop	{r7, pc}

08102288 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 8102288:	b580      	push	{r7, lr}
 810228a:	b082      	sub	sp, #8
 810228c:	af00      	add	r7, sp, #0
 810228e:	6078      	str	r0, [r7, #4]
 8102290:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	6839      	ldr	r1, [r7, #0]
 8102296:	4618      	mov	r0, r3
 8102298:	f000 faf5 	bl	8102886 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	4618      	mov	r0, r3
 81022a0:	3708      	adds	r7, #8
 81022a2:	46bd      	mov	sp, r7
 81022a4:	bd80      	pop	{r7, pc}

081022a6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81022a6:	b480      	push	{r7}
 81022a8:	b083      	sub	sp, #12
 81022aa:	af00      	add	r7, sp, #0
 81022ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	4618      	mov	r0, r3
 81022b2:	370c      	adds	r7, #12
 81022b4:	46bd      	mov	sp, r7
 81022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ba:	4770      	bx	lr

081022bc <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81022bc:	b480      	push	{r7}
 81022be:	b083      	sub	sp, #12
 81022c0:	af00      	add	r7, sp, #0
 81022c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	4618      	mov	r0, r3
 81022c8:	370c      	adds	r7, #12
 81022ca:	46bd      	mov	sp, r7
 81022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022d0:	4770      	bx	lr

081022d2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81022d2:	b480      	push	{r7}
 81022d4:	b083      	sub	sp, #12
 81022d6:	af00      	add	r7, sp, #0
 81022d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	4618      	mov	r0, r3
 81022de:	370c      	adds	r7, #12
 81022e0:	46bd      	mov	sp, r7
 81022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e6:	4770      	bx	lr

081022e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 81022e8:	b5b0      	push	{r4, r5, r7, lr}
 81022ea:	b084      	sub	sp, #16
 81022ec:	af00      	add	r7, sp, #0
 81022ee:	60f8      	str	r0, [r7, #12]
 81022f0:	60b9      	str	r1, [r7, #8]
 81022f2:	607a      	str	r2, [r7, #4]
 81022f4:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 81022f6:	68fb      	ldr	r3, [r7, #12]
 81022f8:	68ba      	ldr	r2, [r7, #8]
 81022fa:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 81022fc:	6878      	ldr	r0, [r7, #4]
 81022fe:	f7ff ffd2 	bl	81022a6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102302:	4604      	mov	r4, r0
 8102304:	6838      	ldr	r0, [r7, #0]
 8102306:	f7ff ffd9 	bl	81022bc <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810230a:	4605      	mov	r5, r0
 810230c:	6a38      	ldr	r0, [r7, #32]
 810230e:	f7ff ffe0 	bl	81022d2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102312:	4603      	mov	r3, r0
 8102314:	462a      	mov	r2, r5
 8102316:	4621      	mov	r1, r4
 8102318:	68b8      	ldr	r0, [r7, #8]
 810231a:	f000 fac3 	bl	81028a4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 810231e:	4602      	mov	r2, r0
 8102320:	68fb      	ldr	r3, [r7, #12]
 8102322:	605a      	str	r2, [r3, #4]
	  { }
 8102324:	68fb      	ldr	r3, [r7, #12]
 8102326:	4618      	mov	r0, r3
 8102328:	3710      	adds	r7, #16
 810232a:	46bd      	mov	sp, r7
 810232c:	bdb0      	pop	{r4, r5, r7, pc}

0810232e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810232e:	b590      	push	{r4, r7, lr}
 8102330:	b08d      	sub	sp, #52	@ 0x34
 8102332:	af00      	add	r7, sp, #0
 8102334:	60f8      	str	r0, [r7, #12]
 8102336:	60b9      	str	r1, [r7, #8]
 8102338:	607a      	str	r2, [r7, #4]
 810233a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 810233c:	1d3b      	adds	r3, r7, #4
 810233e:	4618      	mov	r0, r3
 8102340:	f000 fad3 	bl	81028ea <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 8102344:	4603      	mov	r3, r0
 8102346:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8102348:	69bc      	ldr	r4, [r7, #24]
 810234a:	68b8      	ldr	r0, [r7, #8]
 810234c:	f7ff ff23 	bl	8102196 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102350:	4603      	mov	r3, r0
 8102352:	429c      	cmp	r4, r3
 8102354:	bf0c      	ite	eq
 8102356:	2301      	moveq	r3, #1
 8102358:	2300      	movne	r3, #0
 810235a:	b2db      	uxtb	r3, r3
 810235c:	2b00      	cmp	r3, #0
 810235e:	d030      	beq.n	81023c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8102360:	68b8      	ldr	r0, [r7, #8]
 8102362:	f7ff fe1c 	bl	8101f9e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8102366:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8102368:	2b00      	cmp	r3, #0
 810236a:	d013      	beq.n	8102394 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 810236c:	68bc      	ldr	r4, [r7, #8]
 810236e:	68b8      	ldr	r0, [r7, #8]
 8102370:	f000 facc 	bl	810290c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102374:	4603      	mov	r3, r0
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	4618      	mov	r0, r3
 810237a:	f7ff ff49 	bl	8102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810237e:	4603      	mov	r3, r0
 8102380:	683a      	ldr	r2, [r7, #0]
 8102382:	4619      	mov	r1, r3
 8102384:	4620      	mov	r0, r4
 8102386:	f7ff fc48 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810238a:	4603      	mov	r3, r0
 810238c:	2b00      	cmp	r3, #0
 810238e:	d001      	beq.n	8102394 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8102390:	2301      	movs	r3, #1
 8102392:	e000      	b.n	8102396 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8102394:	2300      	movs	r3, #0
	  if (size() > 0
 8102396:	2b00      	cmp	r3, #0
 8102398:	d00c      	beq.n	81023b4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 810239a:	2300      	movs	r3, #0
 810239c:	61fb      	str	r3, [r7, #28]
 810239e:	68b8      	ldr	r0, [r7, #8]
 81023a0:	f000 fab4 	bl	810290c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81023a4:	4602      	mov	r2, r0
 81023a6:	f107 031c 	add.w	r3, r7, #28
 81023aa:	4619      	mov	r1, r3
 81023ac:	68f8      	ldr	r0, [r7, #12]
 81023ae:	f000 f972 	bl	8102696 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81023b2:	e0db      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81023b4:	68fb      	ldr	r3, [r7, #12]
 81023b6:	683a      	ldr	r2, [r7, #0]
 81023b8:	68b9      	ldr	r1, [r7, #8]
 81023ba:	4618      	mov	r0, r3
 81023bc:	f7ff fd1b 	bl	8101df6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81023c0:	e0d4      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 81023c2:	68bc      	ldr	r4, [r7, #8]
 81023c4:	69bb      	ldr	r3, [r7, #24]
 81023c6:	4618      	mov	r0, r3
 81023c8:	f7ff ff22 	bl	8102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81023cc:	4603      	mov	r3, r0
 81023ce:	461a      	mov	r2, r3
 81023d0:	6839      	ldr	r1, [r7, #0]
 81023d2:	4620      	mov	r0, r4
 81023d4:	f7ff fc21 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81023d8:	4603      	mov	r3, r0
 81023da:	2b00      	cmp	r3, #0
 81023dc:	d057      	beq.n	810248e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 81023de:	69bb      	ldr	r3, [r7, #24]
 81023e0:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 81023e2:	69bc      	ldr	r4, [r7, #24]
 81023e4:	68b8      	ldr	r0, [r7, #8]
 81023e6:	f000 fa9d 	bl	8102924 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81023ea:	4603      	mov	r3, r0
 81023ec:	681b      	ldr	r3, [r3, #0]
 81023ee:	429c      	cmp	r4, r3
 81023f0:	bf0c      	ite	eq
 81023f2:	2301      	moveq	r3, #1
 81023f4:	2300      	movne	r3, #0
 81023f6:	b2db      	uxtb	r3, r3
 81023f8:	2b00      	cmp	r3, #0
 81023fa:	d00d      	beq.n	8102418 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 81023fc:	68b8      	ldr	r0, [r7, #8]
 81023fe:	f000 fa91 	bl	8102924 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8102402:	4604      	mov	r4, r0
 8102404:	68b8      	ldr	r0, [r7, #8]
 8102406:	f000 fa8d 	bl	8102924 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810240a:	4603      	mov	r3, r0
 810240c:	461a      	mov	r2, r3
 810240e:	4621      	mov	r1, r4
 8102410:	68f8      	ldr	r0, [r7, #12]
 8102412:	f000 fa93 	bl	810293c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102416:	e0a9      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8102418:	68bc      	ldr	r4, [r7, #8]
 810241a:	f107 0314 	add.w	r3, r7, #20
 810241e:	4618      	mov	r0, r3
 8102420:	f000 f928 	bl	8102674 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 8102424:	4603      	mov	r3, r0
 8102426:	681b      	ldr	r3, [r3, #0]
 8102428:	4618      	mov	r0, r3
 810242a:	f7ff fef1 	bl	8102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810242e:	4603      	mov	r3, r0
 8102430:	683a      	ldr	r2, [r7, #0]
 8102432:	4619      	mov	r1, r3
 8102434:	4620      	mov	r0, r4
 8102436:	f7ff fbf0 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810243a:	4603      	mov	r3, r0
 810243c:	2b00      	cmp	r3, #0
 810243e:	d01f      	beq.n	8102480 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8102440:	697b      	ldr	r3, [r7, #20]
 8102442:	4618      	mov	r0, r3
 8102444:	f7ff fc6e 	bl	8101d24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102448:	4603      	mov	r3, r0
 810244a:	2b00      	cmp	r3, #0
 810244c:	bf0c      	ite	eq
 810244e:	2301      	moveq	r3, #1
 8102450:	2300      	movne	r3, #0
 8102452:	b2db      	uxtb	r3, r3
 8102454:	2b00      	cmp	r3, #0
 8102456:	d00a      	beq.n	810246e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8102458:	2300      	movs	r3, #0
 810245a:	623b      	str	r3, [r7, #32]
 810245c:	f107 0214 	add.w	r2, r7, #20
 8102460:	f107 0320 	add.w	r3, r7, #32
 8102464:	4619      	mov	r1, r3
 8102466:	68f8      	ldr	r0, [r7, #12]
 8102468:	f000 f915 	bl	8102696 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810246c:	e07e      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 810246e:	f107 0218 	add.w	r2, r7, #24
 8102472:	f107 0318 	add.w	r3, r7, #24
 8102476:	4619      	mov	r1, r3
 8102478:	68f8      	ldr	r0, [r7, #12]
 810247a:	f000 fa5f 	bl	810293c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 810247e:	e075      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102480:	68fb      	ldr	r3, [r7, #12]
 8102482:	683a      	ldr	r2, [r7, #0]
 8102484:	68b9      	ldr	r1, [r7, #8]
 8102486:	4618      	mov	r0, r3
 8102488:	f7ff fcb5 	bl	8101df6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810248c:	e06e      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 810248e:	68bc      	ldr	r4, [r7, #8]
 8102490:	69bb      	ldr	r3, [r7, #24]
 8102492:	4618      	mov	r0, r3
 8102494:	f7ff febc 	bl	8102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102498:	4603      	mov	r3, r0
 810249a:	683a      	ldr	r2, [r7, #0]
 810249c:	4619      	mov	r1, r3
 810249e:	4620      	mov	r0, r4
 81024a0:	f7ff fbbb 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81024a4:	4603      	mov	r3, r0
 81024a6:	2b00      	cmp	r3, #0
 81024a8:	d056      	beq.n	8102558 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 81024aa:	69bb      	ldr	r3, [r7, #24]
 81024ac:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 81024ae:	69bc      	ldr	r4, [r7, #24]
 81024b0:	68b8      	ldr	r0, [r7, #8]
 81024b2:	f000 fa2b 	bl	810290c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81024b6:	4603      	mov	r3, r0
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	429c      	cmp	r4, r3
 81024bc:	bf0c      	ite	eq
 81024be:	2301      	moveq	r3, #1
 81024c0:	2300      	movne	r3, #0
 81024c2:	b2db      	uxtb	r3, r3
 81024c4:	2b00      	cmp	r3, #0
 81024c6:	d00c      	beq.n	81024e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 81024c8:	2300      	movs	r3, #0
 81024ca:	627b      	str	r3, [r7, #36]	@ 0x24
 81024cc:	68b8      	ldr	r0, [r7, #8]
 81024ce:	f000 fa1d 	bl	810290c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81024d2:	4602      	mov	r2, r0
 81024d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81024d8:	4619      	mov	r1, r3
 81024da:	68f8      	ldr	r0, [r7, #12]
 81024dc:	f000 f8db 	bl	8102696 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81024e0:	e044      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 81024e2:	68bc      	ldr	r4, [r7, #8]
 81024e4:	f107 0310 	add.w	r3, r7, #16
 81024e8:	4618      	mov	r0, r3
 81024ea:	f000 fa40 	bl	810296e <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 81024ee:	4603      	mov	r3, r0
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	4618      	mov	r0, r3
 81024f4:	f7ff fe8c 	bl	8102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81024f8:	4603      	mov	r3, r0
 81024fa:	461a      	mov	r2, r3
 81024fc:	6839      	ldr	r1, [r7, #0]
 81024fe:	4620      	mov	r0, r4
 8102500:	f7ff fb8b 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102504:	4603      	mov	r3, r0
 8102506:	2b00      	cmp	r3, #0
 8102508:	d01f      	beq.n	810254a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 810250a:	69bb      	ldr	r3, [r7, #24]
 810250c:	4618      	mov	r0, r3
 810250e:	f7ff fc09 	bl	8101d24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102512:	4603      	mov	r3, r0
 8102514:	2b00      	cmp	r3, #0
 8102516:	bf0c      	ite	eq
 8102518:	2301      	moveq	r3, #1
 810251a:	2300      	movne	r3, #0
 810251c:	b2db      	uxtb	r3, r3
 810251e:	2b00      	cmp	r3, #0
 8102520:	d00a      	beq.n	8102538 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8102522:	2300      	movs	r3, #0
 8102524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8102526:	f107 0218 	add.w	r2, r7, #24
 810252a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810252e:	4619      	mov	r1, r3
 8102530:	68f8      	ldr	r0, [r7, #12]
 8102532:	f000 f8b0 	bl	8102696 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102536:	e019      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8102538:	f107 0210 	add.w	r2, r7, #16
 810253c:	f107 0310 	add.w	r3, r7, #16
 8102540:	4619      	mov	r1, r3
 8102542:	68f8      	ldr	r0, [r7, #12]
 8102544:	f000 f9fa 	bl	810293c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102548:	e010      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 810254a:	68fb      	ldr	r3, [r7, #12]
 810254c:	683a      	ldr	r2, [r7, #0]
 810254e:	68b9      	ldr	r1, [r7, #8]
 8102550:	4618      	mov	r0, r3
 8102552:	f7ff fc50 	bl	8101df6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102556:	e009      	b.n	810256c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8102558:	2300      	movs	r3, #0
 810255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810255c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8102560:	f107 0318 	add.w	r3, r7, #24
 8102564:	4619      	mov	r1, r3
 8102566:	68f8      	ldr	r0, [r7, #12]
 8102568:	f000 f895 	bl	8102696 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810256c:	68f8      	ldr	r0, [r7, #12]
 810256e:	3734      	adds	r7, #52	@ 0x34
 8102570:	46bd      	mov	sp, r7
 8102572:	bd90      	pop	{r4, r7, pc}

08102574 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102574:	b590      	push	{r4, r7, lr}
 8102576:	b083      	sub	sp, #12
 8102578:	af00      	add	r7, sp, #0
 810257a:	6078      	str	r0, [r7, #4]
 810257c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 810257e:	6878      	ldr	r0, [r7, #4]
 8102580:	f000 fa06 	bl	8102990 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102584:	4604      	mov	r4, r0
 8102586:	6838      	ldr	r0, [r7, #0]
 8102588:	f7ff fe70 	bl	810226c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810258c:	4603      	mov	r3, r0
 810258e:	4619      	mov	r1, r3
 8102590:	4620      	mov	r0, r4
 8102592:	f000 fa08 	bl	81029a6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 8102596:	bf00      	nop
 8102598:	370c      	adds	r7, #12
 810259a:	46bd      	mov	sp, r7
 810259c:	bd90      	pop	{r4, r7, pc}

0810259e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 810259e:	b580      	push	{r7, lr}
 81025a0:	b082      	sub	sp, #8
 81025a2:	af00      	add	r7, sp, #0
 81025a4:	6078      	str	r0, [r7, #4]
 81025a6:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 81025a8:	6878      	ldr	r0, [r7, #4]
 81025aa:	f000 f9f1 	bl	8102990 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81025ae:	4603      	mov	r3, r0
 81025b0:	2201      	movs	r2, #1
 81025b2:	6839      	ldr	r1, [r7, #0]
 81025b4:	4618      	mov	r0, r3
 81025b6:	f000 fa03 	bl	81029c0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 81025ba:	bf00      	nop
 81025bc:	3708      	adds	r7, #8
 81025be:	46bd      	mov	sp, r7
 81025c0:	bd80      	pop	{r7, pc}

081025c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81025c2:	b590      	push	{r4, r7, lr}
 81025c4:	b087      	sub	sp, #28
 81025c6:	af00      	add	r7, sp, #0
 81025c8:	60f8      	str	r0, [r7, #12]
 81025ca:	60b9      	str	r1, [r7, #8]
 81025cc:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 81025ce:	68f8      	ldr	r0, [r7, #12]
 81025d0:	f000 fa05 	bl	81029de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81025d4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81025d6:	68b8      	ldr	r0, [r7, #8]
 81025d8:	f7ff f8ab 	bl	8101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81025dc:	4604      	mov	r4, r0
 81025de:	6878      	ldr	r0, [r7, #4]
 81025e0:	f7ff f8b2 	bl	8101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81025e4:	4603      	mov	r3, r0
 81025e6:	4622      	mov	r2, r4
 81025e8:	6979      	ldr	r1, [r7, #20]
 81025ea:	68f8      	ldr	r0, [r7, #12]
 81025ec:	f000 fa08 	bl	8102a00 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81025f0:	697b      	ldr	r3, [r7, #20]
	}
 81025f2:	4618      	mov	r0, r3
 81025f4:	371c      	adds	r7, #28
 81025f6:	46bd      	mov	sp, r7
 81025f8:	bd90      	pop	{r4, r7, pc}

081025fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 81025fa:	b580      	push	{r7, lr}
 81025fc:	b084      	sub	sp, #16
 81025fe:	af00      	add	r7, sp, #0
 8102600:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8102602:	6878      	ldr	r0, [r7, #4]
 8102604:	f000 fa21 	bl	8102a4a <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102608:	4602      	mov	r2, r0
 810260a:	f107 030c 	add.w	r3, r7, #12
 810260e:	4611      	mov	r1, r2
 8102610:	4618      	mov	r0, r3
 8102612:	f000 fa28 	bl	8102a66 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 8102616:	4603      	mov	r3, r0
      }
 8102618:	4618      	mov	r0, r3
 810261a:	3710      	adds	r7, #16
 810261c:	46bd      	mov	sp, r7
 810261e:	bd80      	pop	{r7, pc}

08102620 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8102620:	b580      	push	{r7, lr}
 8102622:	b084      	sub	sp, #16
 8102624:	af00      	add	r7, sp, #0
 8102626:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	68da      	ldr	r2, [r3, #12]
 810262c:	f107 030c 	add.w	r3, r7, #12
 8102630:	4611      	mov	r1, r2
 8102632:	4618      	mov	r0, r3
 8102634:	f7ff fca4 	bl	8101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102638:	68fb      	ldr	r3, [r7, #12]
 810263a:	4618      	mov	r0, r3
 810263c:	3710      	adds	r7, #16
 810263e:	46bd      	mov	sp, r7
 8102640:	bd80      	pop	{r7, pc}

08102642 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102642:	b580      	push	{r7, lr}
 8102644:	b084      	sub	sp, #16
 8102646:	af00      	add	r7, sp, #0
 8102648:	60f8      	str	r0, [r7, #12]
 810264a:	60b9      	str	r1, [r7, #8]
 810264c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 810264e:	68b8      	ldr	r0, [r7, #8]
 8102650:	f000 fa15 	bl	8102a7e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 8102654:	4603      	mov	r3, r0
 8102656:	681a      	ldr	r2, [r3, #0]
 8102658:	68fb      	ldr	r3, [r7, #12]
 810265a:	601a      	str	r2, [r3, #0]
 810265c:	6878      	ldr	r0, [r7, #4]
 810265e:	f000 fa19 	bl	8102a94 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102662:	4603      	mov	r3, r0
 8102664:	681a      	ldr	r2, [r3, #0]
 8102666:	68fb      	ldr	r3, [r7, #12]
 8102668:	605a      	str	r2, [r3, #4]
 810266a:	68fb      	ldr	r3, [r7, #12]
 810266c:	4618      	mov	r0, r3
 810266e:	3710      	adds	r7, #16
 8102670:	46bd      	mov	sp, r7
 8102672:	bd80      	pop	{r7, pc}

08102674 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8102674:	b580      	push	{r7, lr}
 8102676:	b082      	sub	sp, #8
 8102678:	af00      	add	r7, sp, #0
 810267a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	4618      	mov	r0, r3
 8102682:	f005 f99d 	bl	81079c0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8102686:	4602      	mov	r2, r0
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	601a      	str	r2, [r3, #0]
	return *this;
 810268c:	687b      	ldr	r3, [r7, #4]
      }
 810268e:	4618      	mov	r0, r3
 8102690:	3708      	adds	r7, #8
 8102692:	46bd      	mov	sp, r7
 8102694:	bd80      	pop	{r7, pc}

08102696 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8102696:	b480      	push	{r7}
 8102698:	b085      	sub	sp, #20
 810269a:	af00      	add	r7, sp, #0
 810269c:	60f8      	str	r0, [r7, #12]
 810269e:	60b9      	str	r1, [r7, #8]
 81026a0:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 81026a2:	68bb      	ldr	r3, [r7, #8]
 81026a4:	681a      	ldr	r2, [r3, #0]
 81026a6:	68fb      	ldr	r3, [r7, #12]
 81026a8:	601a      	str	r2, [r3, #0]
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	681a      	ldr	r2, [r3, #0]
 81026ae:	68fb      	ldr	r3, [r7, #12]
 81026b0:	605a      	str	r2, [r3, #4]
 81026b2:	68fb      	ldr	r3, [r7, #12]
 81026b4:	4618      	mov	r0, r3
 81026b6:	3714      	adds	r7, #20
 81026b8:	46bd      	mov	sp, r7
 81026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026be:	4770      	bx	lr

081026c0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81026c0:	b5b0      	push	{r4, r5, r7, lr}
 81026c2:	b086      	sub	sp, #24
 81026c4:	af00      	add	r7, sp, #0
 81026c6:	60f8      	str	r0, [r7, #12]
 81026c8:	60b9      	str	r1, [r7, #8]
 81026ca:	607a      	str	r2, [r7, #4]
 81026cc:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 81026ce:	68bb      	ldr	r3, [r7, #8]
 81026d0:	2b00      	cmp	r3, #0
 81026d2:	d117      	bne.n	8102704 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 81026d4:	68f8      	ldr	r0, [r7, #12]
 81026d6:	f7ff fd5e 	bl	8102196 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81026da:	4602      	mov	r2, r0
 81026dc:	687b      	ldr	r3, [r7, #4]
 81026de:	4293      	cmp	r3, r2
 81026e0:	d010      	beq.n	8102704 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 81026e2:	68fc      	ldr	r4, [r7, #12]
 81026e4:	6838      	ldr	r0, [r7, #0]
 81026e6:	f7ff ff88 	bl	81025fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81026ea:	4605      	mov	r5, r0
 81026ec:	6878      	ldr	r0, [r7, #4]
 81026ee:	f7ff fd8f 	bl	8102210 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81026f2:	4603      	mov	r3, r0
 81026f4:	461a      	mov	r2, r3
 81026f6:	4629      	mov	r1, r5
 81026f8:	4620      	mov	r0, r4
 81026fa:	f7ff fa8e 	bl	8101c1a <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81026fe:	4603      	mov	r3, r0
 8102700:	2b00      	cmp	r3, #0
 8102702:	d001      	beq.n	8102708 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8102704:	2301      	movs	r3, #1
 8102706:	e000      	b.n	810270a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 8102708:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 810270a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 810270c:	68fb      	ldr	r3, [r7, #12]
 810270e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8102710:	7df8      	ldrb	r0, [r7, #23]
 8102712:	687a      	ldr	r2, [r7, #4]
 8102714:	6839      	ldr	r1, [r7, #0]
 8102716:	f005 f955 	bl	81079c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 810271a:	68fb      	ldr	r3, [r7, #12]
 810271c:	695b      	ldr	r3, [r3, #20]
 810271e:	1c5a      	adds	r2, r3, #1
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8102724:	f107 0310 	add.w	r3, r7, #16
 8102728:	6839      	ldr	r1, [r7, #0]
 810272a:	4618      	mov	r0, r3
 810272c:	f7ff fc28 	bl	8101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102730:	693b      	ldr	r3, [r7, #16]
    }
 8102732:	4618      	mov	r0, r3
 8102734:	3718      	adds	r7, #24
 8102736:	46bd      	mov	sp, r7
 8102738:	bdb0      	pop	{r4, r5, r7, pc}

0810273a <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810273a:	b480      	push	{r7}
 810273c:	b083      	sub	sp, #12
 810273e:	af00      	add	r7, sp, #0
 8102740:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	4618      	mov	r0, r3
 8102746:	370c      	adds	r7, #12
 8102748:	46bd      	mov	sp, r7
 810274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810274e:	4770      	bx	lr

08102750 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102750:	b480      	push	{r7}
 8102752:	b083      	sub	sp, #12
 8102754:	af00      	add	r7, sp, #0
 8102756:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	4618      	mov	r0, r3
 810275c:	370c      	adds	r7, #12
 810275e:	46bd      	mov	sp, r7
 8102760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102764:	4770      	bx	lr

08102766 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8102766:	b480      	push	{r7}
 8102768:	b083      	sub	sp, #12
 810276a:	af00      	add	r7, sp, #0
 810276c:	6078      	str	r0, [r7, #4]
 810276e:	6039      	str	r1, [r7, #0]
 8102770:	bf00      	nop
 8102772:	370c      	adds	r7, #12
 8102774:	46bd      	mov	sp, r7
 8102776:	f85d 7b04 	ldr.w	r7, [sp], #4
 810277a:	4770      	bx	lr

0810277c <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 810277c:	b580      	push	{r7, lr}
 810277e:	b084      	sub	sp, #16
 8102780:	af00      	add	r7, sp, #0
 8102782:	60f8      	str	r0, [r7, #12]
 8102784:	60b9      	str	r1, [r7, #8]
 8102786:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102788:	687a      	ldr	r2, [r7, #4]
 810278a:	4613      	mov	r3, r2
 810278c:	005b      	lsls	r3, r3, #1
 810278e:	4413      	add	r3, r2
 8102790:	00db      	lsls	r3, r3, #3
 8102792:	4619      	mov	r1, r3
 8102794:	68b8      	ldr	r0, [r7, #8]
 8102796:	f005 f8a9 	bl	81078ec <_ZdlPvj>
      }
 810279a:	bf00      	nop
 810279c:	3710      	adds	r7, #16
 810279e:	46bd      	mov	sp, r7
 81027a0:	bd80      	pop	{r7, pc}

081027a2 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 81027a2:	b580      	push	{r7, lr}
 81027a4:	b082      	sub	sp, #8
 81027a6:	af00      	add	r7, sp, #0
 81027a8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	4618      	mov	r0, r3
 81027ae:	f000 f999 	bl	8102ae4 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81027b2:	4603      	mov	r3, r0
 81027b4:	4618      	mov	r0, r3
 81027b6:	f000 f979 	bl	8102aac <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 81027ba:	4603      	mov	r3, r0
 81027bc:	4618      	mov	r0, r3
 81027be:	3708      	adds	r7, #8
 81027c0:	46bd      	mov	sp, r7
 81027c2:	bd80      	pop	{r7, pc}

081027c4 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 81027c4:	b480      	push	{r7}
 81027c6:	b083      	sub	sp, #12
 81027c8:	af00      	add	r7, sp, #0
 81027ca:	6078      	str	r0, [r7, #4]
 81027cc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 81027ce:	687b      	ldr	r3, [r7, #4]
 81027d0:	681a      	ldr	r2, [r3, #0]
 81027d2:	683b      	ldr	r3, [r7, #0]
 81027d4:	681b      	ldr	r3, [r3, #0]
 81027d6:	429a      	cmp	r2, r3
 81027d8:	d201      	bcs.n	81027de <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 81027da:	683b      	ldr	r3, [r7, #0]
 81027dc:	e000      	b.n	81027e0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 81027de:	687b      	ldr	r3, [r7, #4]
    }
 81027e0:	4618      	mov	r0, r3
 81027e2:	370c      	adds	r7, #12
 81027e4:	46bd      	mov	sp, r7
 81027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ea:	4770      	bx	lr

081027ec <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 81027ec:	b580      	push	{r7, lr}
 81027ee:	b082      	sub	sp, #8
 81027f0:	af00      	add	r7, sp, #0
 81027f2:	6078      	str	r0, [r7, #4]
 81027f4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 81027f6:	2200      	movs	r2, #0
 81027f8:	6839      	ldr	r1, [r7, #0]
 81027fa:	6878      	ldr	r0, [r7, #4]
 81027fc:	f000 f97e 	bl	8102afc <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 8102800:	4603      	mov	r3, r0
 8102802:	4618      	mov	r0, r3
 8102804:	3708      	adds	r7, #8
 8102806:	46bd      	mov	sp, r7
 8102808:	bd80      	pop	{r7, pc}

0810280a <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 810280a:	b580      	push	{r7, lr}
 810280c:	b084      	sub	sp, #16
 810280e:	af00      	add	r7, sp, #0
 8102810:	60f8      	str	r0, [r7, #12]
 8102812:	60b9      	str	r1, [r7, #8]
 8102814:	607a      	str	r2, [r7, #4]
 8102816:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8102818:	683b      	ldr	r3, [r7, #0]
 810281a:	687a      	ldr	r2, [r7, #4]
 810281c:	68b9      	ldr	r1, [r7, #8]
 810281e:	68f8      	ldr	r0, [r7, #12]
 8102820:	f000 f99a 	bl	8102b58 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8102824:	4603      	mov	r3, r0
      }
 8102826:	4618      	mov	r0, r3
 8102828:	3710      	adds	r7, #16
 810282a:	46bd      	mov	sp, r7
 810282c:	bd80      	pop	{r7, pc}

0810282e <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 810282e:	b580      	push	{r7, lr}
 8102830:	b084      	sub	sp, #16
 8102832:	af00      	add	r7, sp, #0
 8102834:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8102836:	f107 030c 	add.w	r3, r7, #12
 810283a:	6879      	ldr	r1, [r7, #4]
 810283c:	4618      	mov	r0, r3
 810283e:	f000 f9a8 	bl	8102b92 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 8102842:	68fb      	ldr	r3, [r7, #12]
 8102844:	4618      	mov	r0, r3
 8102846:	3710      	adds	r7, #16
 8102848:	46bd      	mov	sp, r7
 810284a:	bd80      	pop	{r7, pc}

0810284c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 810284c:	b580      	push	{r7, lr}
 810284e:	b084      	sub	sp, #16
 8102850:	af00      	add	r7, sp, #0
 8102852:	60f8      	str	r0, [r7, #12]
 8102854:	60b9      	str	r1, [r7, #8]
 8102856:	607a      	str	r2, [r7, #4]
 8102858:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 810285a:	687a      	ldr	r2, [r7, #4]
 810285c:	68b9      	ldr	r1, [r7, #8]
 810285e:	68f8      	ldr	r0, [r7, #12]
 8102860:	f000 f9a9 	bl	8102bb6 <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8102864:	4603      	mov	r3, r0
    }
 8102866:	4618      	mov	r0, r3
 8102868:	3710      	adds	r7, #16
 810286a:	46bd      	mov	sp, r7
 810286c:	bd80      	pop	{r7, pc}

0810286e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 810286e:	b580      	push	{r7, lr}
 8102870:	b082      	sub	sp, #8
 8102872:	af00      	add	r7, sp, #0
 8102874:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8102876:	6878      	ldr	r0, [r7, #4]
 8102878:	f000 f9b1 	bl	8102bde <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 810287c:	4603      	mov	r3, r0
 810287e:	4618      	mov	r0, r3
 8102880:	3708      	adds	r7, #8
 8102882:	46bd      	mov	sp, r7
 8102884:	bd80      	pop	{r7, pc}

08102886 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8102886:	b480      	push	{r7}
 8102888:	b083      	sub	sp, #12
 810288a:	af00      	add	r7, sp, #0
 810288c:	6078      	str	r0, [r7, #4]
 810288e:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	683a      	ldr	r2, [r7, #0]
 8102894:	601a      	str	r2, [r3, #0]
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	4618      	mov	r0, r3
 810289a:	370c      	adds	r7, #12
 810289c:	46bd      	mov	sp, r7
 810289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028a2:	4770      	bx	lr

081028a4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81028a4:	b5b0      	push	{r4, r5, r7, lr}
 81028a6:	b088      	sub	sp, #32
 81028a8:	af02      	add	r7, sp, #8
 81028aa:	60f8      	str	r0, [r7, #12]
 81028ac:	60b9      	str	r1, [r7, #8]
 81028ae:	607a      	str	r2, [r7, #4]
 81028b0:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 81028b2:	68f8      	ldr	r0, [r7, #12]
 81028b4:	f000 f893 	bl	81029de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81028b8:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81028ba:	68b8      	ldr	r0, [r7, #8]
 81028bc:	f7ff fcf3 	bl	81022a6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81028c0:	4604      	mov	r4, r0
 81028c2:	6878      	ldr	r0, [r7, #4]
 81028c4:	f7ff fcfa 	bl	81022bc <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81028c8:	4605      	mov	r5, r0
 81028ca:	6838      	ldr	r0, [r7, #0]
 81028cc:	f7ff fd01 	bl	81022d2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81028d0:	4603      	mov	r3, r0
 81028d2:	9300      	str	r3, [sp, #0]
 81028d4:	462b      	mov	r3, r5
 81028d6:	4622      	mov	r2, r4
 81028d8:	6979      	ldr	r1, [r7, #20]
 81028da:	68f8      	ldr	r0, [r7, #12]
 81028dc:	f000 f98a 	bl	8102bf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81028e0:	697b      	ldr	r3, [r7, #20]
	}
 81028e2:	4618      	mov	r0, r3
 81028e4:	3718      	adds	r7, #24
 81028e6:	46bd      	mov	sp, r7
 81028e8:	bdb0      	pop	{r4, r5, r7, pc}

081028ea <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 81028ea:	b580      	push	{r7, lr}
 81028ec:	b084      	sub	sp, #16
 81028ee:	af00      	add	r7, sp, #0
 81028f0:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	681a      	ldr	r2, [r3, #0]
 81028f6:	f107 030c 	add.w	r3, r7, #12
 81028fa:	4611      	mov	r1, r2
 81028fc:	4618      	mov	r0, r3
 81028fe:	f7ff fb3f 	bl	8101f80 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102902:	68fb      	ldr	r3, [r7, #12]
 8102904:	4618      	mov	r0, r3
 8102906:	3710      	adds	r7, #16
 8102908:	46bd      	mov	sp, r7
 810290a:	bd80      	pop	{r7, pc}

0810290c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 810290c:	b480      	push	{r7}
 810290e:	b083      	sub	sp, #12
 8102910:	af00      	add	r7, sp, #0
 8102912:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	3310      	adds	r3, #16
 8102918:	4618      	mov	r0, r3
 810291a:	370c      	adds	r7, #12
 810291c:	46bd      	mov	sp, r7
 810291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102922:	4770      	bx	lr

08102924 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8102924:	b480      	push	{r7}
 8102926:	b083      	sub	sp, #12
 8102928:	af00      	add	r7, sp, #0
 810292a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	330c      	adds	r3, #12
 8102930:	4618      	mov	r0, r3
 8102932:	370c      	adds	r7, #12
 8102934:	46bd      	mov	sp, r7
 8102936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810293a:	4770      	bx	lr

0810293c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 810293c:	b580      	push	{r7, lr}
 810293e:	b084      	sub	sp, #16
 8102940:	af00      	add	r7, sp, #0
 8102942:	60f8      	str	r0, [r7, #12]
 8102944:	60b9      	str	r1, [r7, #8]
 8102946:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102948:	68b8      	ldr	r0, [r7, #8]
 810294a:	f000 f8a3 	bl	8102a94 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810294e:	4603      	mov	r3, r0
 8102950:	681a      	ldr	r2, [r3, #0]
 8102952:	68fb      	ldr	r3, [r7, #12]
 8102954:	601a      	str	r2, [r3, #0]
 8102956:	6878      	ldr	r0, [r7, #4]
 8102958:	f000 f89c 	bl	8102a94 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810295c:	4603      	mov	r3, r0
 810295e:	681a      	ldr	r2, [r3, #0]
 8102960:	68fb      	ldr	r3, [r7, #12]
 8102962:	605a      	str	r2, [r3, #4]
 8102964:	68fb      	ldr	r3, [r7, #12]
 8102966:	4618      	mov	r0, r3
 8102968:	3710      	adds	r7, #16
 810296a:	46bd      	mov	sp, r7
 810296c:	bd80      	pop	{r7, pc}

0810296e <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810296e:	b580      	push	{r7, lr}
 8102970:	b082      	sub	sp, #8
 8102972:	af00      	add	r7, sp, #0
 8102974:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	4618      	mov	r0, r3
 810297c:	f005 f81e 	bl	81079bc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8102980:	4602      	mov	r2, r0
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	601a      	str	r2, [r3, #0]
	return *this;
 8102986:	687b      	ldr	r3, [r7, #4]
      }
 8102988:	4618      	mov	r0, r3
 810298a:	3708      	adds	r7, #8
 810298c:	46bd      	mov	sp, r7
 810298e:	bd80      	pop	{r7, pc}

08102990 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8102990:	b480      	push	{r7}
 8102992:	b083      	sub	sp, #12
 8102994:	af00      	add	r7, sp, #0
 8102996:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	4618      	mov	r0, r3
 810299c:	370c      	adds	r7, #12
 810299e:	46bd      	mov	sp, r7
 81029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a4:	4770      	bx	lr

081029a6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 81029a6:	b580      	push	{r7, lr}
 81029a8:	b082      	sub	sp, #8
 81029aa:	af00      	add	r7, sp, #0
 81029ac:	6078      	str	r0, [r7, #4]
 81029ae:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 81029b0:	6839      	ldr	r1, [r7, #0]
 81029b2:	6878      	ldr	r0, [r7, #4]
 81029b4:	f000 f94b 	bl	8102c4e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 81029b8:	bf00      	nop
 81029ba:	3708      	adds	r7, #8
 81029bc:	46bd      	mov	sp, r7
 81029be:	bd80      	pop	{r7, pc}

081029c0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 81029c0:	b580      	push	{r7, lr}
 81029c2:	b084      	sub	sp, #16
 81029c4:	af00      	add	r7, sp, #0
 81029c6:	60f8      	str	r0, [r7, #12]
 81029c8:	60b9      	str	r1, [r7, #8]
 81029ca:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 81029cc:	687a      	ldr	r2, [r7, #4]
 81029ce:	68b9      	ldr	r1, [r7, #8]
 81029d0:	68f8      	ldr	r0, [r7, #12]
 81029d2:	f000 f947 	bl	8102c64 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 81029d6:	bf00      	nop
 81029d8:	3710      	adds	r7, #16
 81029da:	46bd      	mov	sp, r7
 81029dc:	bd80      	pop	{r7, pc}

081029de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 81029de:	b580      	push	{r7, lr}
 81029e0:	b082      	sub	sp, #8
 81029e2:	af00      	add	r7, sp, #0
 81029e4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 81029e6:	6878      	ldr	r0, [r7, #4]
 81029e8:	f7ff ffd2 	bl	8102990 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81029ec:	4603      	mov	r3, r0
 81029ee:	2101      	movs	r1, #1
 81029f0:	4618      	mov	r0, r3
 81029f2:	f000 f94a 	bl	8102c8a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 81029f6:	4603      	mov	r3, r0
 81029f8:	4618      	mov	r0, r3
 81029fa:	3708      	adds	r7, #8
 81029fc:	46bd      	mov	sp, r7
 81029fe:	bd80      	pop	{r7, pc}

08102a00 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102a02:	b085      	sub	sp, #20
 8102a04:	af00      	add	r7, sp, #0
 8102a06:	60f8      	str	r0, [r7, #12]
 8102a08:	60b9      	str	r1, [r7, #8]
 8102a0a:	607a      	str	r2, [r7, #4]
 8102a0c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102a0e:	68bb      	ldr	r3, [r7, #8]
 8102a10:	4619      	mov	r1, r3
 8102a12:	2018      	movs	r0, #24
 8102a14:	f7fd ff74 	bl	8100900 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102a18:	68f8      	ldr	r0, [r7, #12]
 8102a1a:	f7ff ffb9 	bl	8102990 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102a1e:	4604      	mov	r4, r0
 8102a20:	68b8      	ldr	r0, [r7, #8]
 8102a22:	f7ff fc23 	bl	810226c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102a26:	4605      	mov	r5, r0
 8102a28:	6878      	ldr	r0, [r7, #4]
 8102a2a:	f7fe fe82 	bl	8101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102a2e:	4606      	mov	r6, r0
 8102a30:	6838      	ldr	r0, [r7, #0]
 8102a32:	f7fe fe89 	bl	8101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102a36:	4603      	mov	r3, r0
 8102a38:	4632      	mov	r2, r6
 8102a3a:	4629      	mov	r1, r5
 8102a3c:	4620      	mov	r0, r4
 8102a3e:	f000 f933 	bl	8102ca8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8102a42:	bf00      	nop
 8102a44:	3714      	adds	r7, #20
 8102a46:	46bd      	mov	sp, r7
 8102a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102a4a <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8102a4a:	b580      	push	{r7, lr}
 8102a4c:	b082      	sub	sp, #8
 8102a4e:	af00      	add	r7, sp, #0
 8102a50:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	3310      	adds	r3, #16
 8102a56:	4618      	mov	r0, r3
 8102a58:	f000 f93e 	bl	8102cd8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102a5c:	4603      	mov	r3, r0
 8102a5e:	4618      	mov	r0, r3
 8102a60:	3708      	adds	r7, #8
 8102a62:	46bd      	mov	sp, r7
 8102a64:	bd80      	pop	{r7, pc}

08102a66 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8102a66:	b480      	push	{r7}
 8102a68:	b083      	sub	sp, #12
 8102a6a:	af00      	add	r7, sp, #0
 8102a6c:	6078      	str	r0, [r7, #4]
 8102a6e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8102a70:	683b      	ldr	r3, [r7, #0]
 8102a72:	4618      	mov	r0, r3
 8102a74:	370c      	adds	r7, #12
 8102a76:	46bd      	mov	sp, r7
 8102a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a7c:	4770      	bx	lr

08102a7e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102a7e:	b480      	push	{r7}
 8102a80:	b083      	sub	sp, #12
 8102a82:	af00      	add	r7, sp, #0
 8102a84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	4618      	mov	r0, r3
 8102a8a:	370c      	adds	r7, #12
 8102a8c:	46bd      	mov	sp, r7
 8102a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a92:	4770      	bx	lr

08102a94 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102a94:	b480      	push	{r7}
 8102a96:	b083      	sub	sp, #12
 8102a98:	af00      	add	r7, sp, #0
 8102a9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	4618      	mov	r0, r3
 8102aa0:	370c      	adds	r7, #12
 8102aa2:	46bd      	mov	sp, r7
 8102aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aa8:	4770      	bx	lr
	...

08102aac <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8102aac:	b580      	push	{r7, lr}
 8102aae:	b084      	sub	sp, #16
 8102ab0:	af00      	add	r7, sp, #0
 8102ab2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8102ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8102ae0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8102ab6:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8102ab8:	6878      	ldr	r0, [r7, #4]
 8102aba:	f000 f919 	bl	8102cf0 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 8102abe:	4603      	mov	r3, r0
 8102ac0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8102ac2:	f107 0208 	add.w	r2, r7, #8
 8102ac6:	f107 030c 	add.w	r3, r7, #12
 8102aca:	4611      	mov	r1, r2
 8102acc:	4618      	mov	r0, r3
 8102ace:	f000 f91b 	bl	8102d08 <_ZSt3minIjERKT_S2_S2_>
 8102ad2:	4603      	mov	r3, r0
 8102ad4:	681b      	ldr	r3, [r3, #0]
      }
 8102ad6:	4618      	mov	r0, r3
 8102ad8:	3710      	adds	r7, #16
 8102ada:	46bd      	mov	sp, r7
 8102adc:	bd80      	pop	{r7, pc}
 8102ade:	bf00      	nop
 8102ae0:	05555555 	.word	0x05555555

08102ae4 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8102ae4:	b480      	push	{r7}
 8102ae6:	b083      	sub	sp, #12
 8102ae8:	af00      	add	r7, sp, #0
 8102aea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	4618      	mov	r0, r3
 8102af0:	370c      	adds	r7, #12
 8102af2:	46bd      	mov	sp, r7
 8102af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102af8:	4770      	bx	lr
	...

08102afc <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102afc:	b580      	push	{r7, lr}
 8102afe:	b084      	sub	sp, #16
 8102b00:	af00      	add	r7, sp, #0
 8102b02:	60f8      	str	r0, [r7, #12]
 8102b04:	60b9      	str	r1, [r7, #8]
 8102b06:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102b08:	68f8      	ldr	r0, [r7, #12]
 8102b0a:	f000 f911 	bl	8102d30 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102b0e:	4602      	mov	r2, r0
 8102b10:	68bb      	ldr	r3, [r7, #8]
 8102b12:	4293      	cmp	r3, r2
 8102b14:	bf8c      	ite	hi
 8102b16:	2301      	movhi	r3, #1
 8102b18:	2300      	movls	r3, #0
 8102b1a:	b2db      	uxtb	r3, r3
 8102b1c:	2b00      	cmp	r3, #0
 8102b1e:	bf14      	ite	ne
 8102b20:	2301      	movne	r3, #1
 8102b22:	2300      	moveq	r3, #0
 8102b24:	b2db      	uxtb	r3, r3
 8102b26:	2b00      	cmp	r3, #0
 8102b28:	d007      	beq.n	8102b3a <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102b2a:	68bb      	ldr	r3, [r7, #8]
 8102b2c:	4a09      	ldr	r2, [pc, #36]	@ (8102b54 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 8102b2e:	4293      	cmp	r3, r2
 8102b30:	d901      	bls.n	8102b36 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102b32:	f004 ffae 	bl	8107a92 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102b36:	f004 ffa9 	bl	8107a8c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102b3a:	68ba      	ldr	r2, [r7, #8]
 8102b3c:	4613      	mov	r3, r2
 8102b3e:	005b      	lsls	r3, r3, #1
 8102b40:	4413      	add	r3, r2
 8102b42:	00db      	lsls	r3, r3, #3
 8102b44:	4618      	mov	r0, r3
 8102b46:	f004 fed3 	bl	81078f0 <_Znwj>
 8102b4a:	4603      	mov	r3, r0
      }
 8102b4c:	4618      	mov	r0, r3
 8102b4e:	3710      	adds	r7, #16
 8102b50:	46bd      	mov	sp, r7
 8102b52:	bd80      	pop	{r7, pc}
 8102b54:	0aaaaaaa 	.word	0x0aaaaaaa

08102b58 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8102b58:	b5b0      	push	{r4, r5, r7, lr}
 8102b5a:	b084      	sub	sp, #16
 8102b5c:	af00      	add	r7, sp, #0
 8102b5e:	60f8      	str	r0, [r7, #12]
 8102b60:	60b9      	str	r1, [r7, #8]
 8102b62:	607a      	str	r2, [r7, #4]
 8102b64:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8102b66:	68f8      	ldr	r0, [r7, #12]
 8102b68:	f000 f8f0 	bl	8102d4c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102b6c:	4604      	mov	r4, r0
 8102b6e:	68b8      	ldr	r0, [r7, #8]
 8102b70:	f000 f8ec 	bl	8102d4c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102b74:	4605      	mov	r5, r0
 8102b76:	6878      	ldr	r0, [r7, #4]
 8102b78:	f000 f8e8 	bl	8102d4c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102b7c:	4602      	mov	r2, r0
 8102b7e:	683b      	ldr	r3, [r7, #0]
 8102b80:	4629      	mov	r1, r5
 8102b82:	4620      	mov	r0, r4
 8102b84:	f000 f8ee 	bl	8102d64 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8102b88:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8102b8a:	4618      	mov	r0, r3
 8102b8c:	3710      	adds	r7, #16
 8102b8e:	46bd      	mov	sp, r7
 8102b90:	bdb0      	pop	{r4, r5, r7, pc}

08102b92 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 8102b92:	b580      	push	{r7, lr}
 8102b94:	b082      	sub	sp, #8
 8102b96:	af00      	add	r7, sp, #0
 8102b98:	6078      	str	r0, [r7, #4]
 8102b9a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8102b9c:	463b      	mov	r3, r7
 8102b9e:	4618      	mov	r0, r3
 8102ba0:	f000 f90a 	bl	8102db8 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 8102ba4:	4603      	mov	r3, r0
 8102ba6:	681a      	ldr	r2, [r3, #0]
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	601a      	str	r2, [r3, #0]
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	4618      	mov	r0, r3
 8102bb0:	3708      	adds	r7, #8
 8102bb2:	46bd      	mov	sp, r7
 8102bb4:	bd80      	pop	{r7, pc}

08102bb6 <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8102bb6:	b580      	push	{r7, lr}
 8102bb8:	b086      	sub	sp, #24
 8102bba:	af00      	add	r7, sp, #0
 8102bbc:	60f8      	str	r0, [r7, #12]
 8102bbe:	60b9      	str	r1, [r7, #8]
 8102bc0:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8102bc2:	2301      	movs	r3, #1
 8102bc4:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8102bc6:	2301      	movs	r3, #1
 8102bc8:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8102bca:	687a      	ldr	r2, [r7, #4]
 8102bcc:	68b9      	ldr	r1, [r7, #8]
 8102bce:	68f8      	ldr	r0, [r7, #12]
 8102bd0:	f000 f8fd 	bl	8102dce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 8102bd4:	4603      	mov	r3, r0
    }
 8102bd6:	4618      	mov	r0, r3
 8102bd8:	3718      	adds	r7, #24
 8102bda:	46bd      	mov	sp, r7
 8102bdc:	bd80      	pop	{r7, pc}

08102bde <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8102bde:	b480      	push	{r7}
 8102be0:	b083      	sub	sp, #12
 8102be2:	af00      	add	r7, sp, #0
 8102be4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	4618      	mov	r0, r3
 8102bea:	370c      	adds	r7, #12
 8102bec:	46bd      	mov	sp, r7
 8102bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf2:	4770      	bx	lr

08102bf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102bf8:	b086      	sub	sp, #24
 8102bfa:	af02      	add	r7, sp, #8
 8102bfc:	60f8      	str	r0, [r7, #12]
 8102bfe:	60b9      	str	r1, [r7, #8]
 8102c00:	607a      	str	r2, [r7, #4]
 8102c02:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102c04:	68bb      	ldr	r3, [r7, #8]
 8102c06:	4619      	mov	r1, r3
 8102c08:	2018      	movs	r0, #24
 8102c0a:	f7fd fe79 	bl	8100900 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102c0e:	68f8      	ldr	r0, [r7, #12]
 8102c10:	f7ff febe 	bl	8102990 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102c14:	4604      	mov	r4, r0
 8102c16:	68b8      	ldr	r0, [r7, #8]
 8102c18:	f7ff fb28 	bl	810226c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102c1c:	4605      	mov	r5, r0
 8102c1e:	6878      	ldr	r0, [r7, #4]
 8102c20:	f7ff fb41 	bl	81022a6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c24:	4606      	mov	r6, r0
 8102c26:	6838      	ldr	r0, [r7, #0]
 8102c28:	f7ff fb48 	bl	81022bc <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102c2c:	4680      	mov	r8, r0
 8102c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102c30:	f7ff fb4f 	bl	81022d2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102c34:	4603      	mov	r3, r0
 8102c36:	9300      	str	r3, [sp, #0]
 8102c38:	4643      	mov	r3, r8
 8102c3a:	4632      	mov	r2, r6
 8102c3c:	4629      	mov	r1, r5
 8102c3e:	4620      	mov	r0, r4
 8102c40:	f000 f8d5 	bl	8102dee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8102c44:	bf00      	nop
 8102c46:	3710      	adds	r7, #16
 8102c48:	46bd      	mov	sp, r7
 8102c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08102c4e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8102c4e:	b480      	push	{r7}
 8102c50:	b083      	sub	sp, #12
 8102c52:	af00      	add	r7, sp, #0
 8102c54:	6078      	str	r0, [r7, #4]
 8102c56:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8102c58:	bf00      	nop
 8102c5a:	370c      	adds	r7, #12
 8102c5c:	46bd      	mov	sp, r7
 8102c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c62:	4770      	bx	lr

08102c64 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102c64:	b580      	push	{r7, lr}
 8102c66:	b084      	sub	sp, #16
 8102c68:	af00      	add	r7, sp, #0
 8102c6a:	60f8      	str	r0, [r7, #12]
 8102c6c:	60b9      	str	r1, [r7, #8]
 8102c6e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102c70:	687a      	ldr	r2, [r7, #4]
 8102c72:	4613      	mov	r3, r2
 8102c74:	005b      	lsls	r3, r3, #1
 8102c76:	4413      	add	r3, r2
 8102c78:	00db      	lsls	r3, r3, #3
 8102c7a:	4619      	mov	r1, r3
 8102c7c:	68b8      	ldr	r0, [r7, #8]
 8102c7e:	f004 fe35 	bl	81078ec <_ZdlPvj>
      }
 8102c82:	bf00      	nop
 8102c84:	3710      	adds	r7, #16
 8102c86:	46bd      	mov	sp, r7
 8102c88:	bd80      	pop	{r7, pc}

08102c8a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8102c8a:	b580      	push	{r7, lr}
 8102c8c:	b082      	sub	sp, #8
 8102c8e:	af00      	add	r7, sp, #0
 8102c90:	6078      	str	r0, [r7, #4]
 8102c92:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8102c94:	2200      	movs	r2, #0
 8102c96:	6839      	ldr	r1, [r7, #0]
 8102c98:	6878      	ldr	r0, [r7, #4]
 8102c9a:	f000 f8c7 	bl	8102e2c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 8102c9e:	4603      	mov	r3, r0
 8102ca0:	4618      	mov	r0, r3
 8102ca2:	3708      	adds	r7, #8
 8102ca4:	46bd      	mov	sp, r7
 8102ca6:	bd80      	pop	{r7, pc}

08102ca8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102ca8:	b590      	push	{r4, r7, lr}
 8102caa:	b085      	sub	sp, #20
 8102cac:	af00      	add	r7, sp, #0
 8102cae:	60f8      	str	r0, [r7, #12]
 8102cb0:	60b9      	str	r1, [r7, #8]
 8102cb2:	607a      	str	r2, [r7, #4]
 8102cb4:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102cb6:	6878      	ldr	r0, [r7, #4]
 8102cb8:	f7fe fd3b 	bl	8101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102cbc:	4604      	mov	r4, r0
 8102cbe:	6838      	ldr	r0, [r7, #0]
 8102cc0:	f7fe fd42 	bl	8101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102cc4:	4603      	mov	r3, r0
 8102cc6:	4622      	mov	r2, r4
 8102cc8:	68b9      	ldr	r1, [r7, #8]
 8102cca:	68f8      	ldr	r0, [r7, #12]
 8102ccc:	f000 f8dc 	bl	8102e88 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 8102cd0:	bf00      	nop
 8102cd2:	3714      	adds	r7, #20
 8102cd4:	46bd      	mov	sp, r7
 8102cd6:	bd90      	pop	{r4, r7, pc}

08102cd8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8102cd8:	b580      	push	{r7, lr}
 8102cda:	b082      	sub	sp, #8
 8102cdc:	af00      	add	r7, sp, #0
 8102cde:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8102ce0:	6878      	ldr	r0, [r7, #4]
 8102ce2:	f000 f8ef 	bl	8102ec4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8102ce6:	4603      	mov	r3, r0
 8102ce8:	4618      	mov	r0, r3
 8102cea:	3708      	adds	r7, #8
 8102cec:	46bd      	mov	sp, r7
 8102cee:	bd80      	pop	{r7, pc}

08102cf0 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8102cf0:	b580      	push	{r7, lr}
 8102cf2:	b082      	sub	sp, #8
 8102cf4:	af00      	add	r7, sp, #0
 8102cf6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8102cf8:	6878      	ldr	r0, [r7, #4]
 8102cfa:	f000 f8ee 	bl	8102eda <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 8102cfe:	4603      	mov	r3, r0
      }
 8102d00:	4618      	mov	r0, r3
 8102d02:	3708      	adds	r7, #8
 8102d04:	46bd      	mov	sp, r7
 8102d06:	bd80      	pop	{r7, pc}

08102d08 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8102d08:	b480      	push	{r7}
 8102d0a:	b083      	sub	sp, #12
 8102d0c:	af00      	add	r7, sp, #0
 8102d0e:	6078      	str	r0, [r7, #4]
 8102d10:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8102d12:	683b      	ldr	r3, [r7, #0]
 8102d14:	681a      	ldr	r2, [r3, #0]
 8102d16:	687b      	ldr	r3, [r7, #4]
 8102d18:	681b      	ldr	r3, [r3, #0]
 8102d1a:	429a      	cmp	r2, r3
 8102d1c:	d201      	bcs.n	8102d22 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8102d1e:	683b      	ldr	r3, [r7, #0]
 8102d20:	e000      	b.n	8102d24 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8102d22:	687b      	ldr	r3, [r7, #4]
    }
 8102d24:	4618      	mov	r0, r3
 8102d26:	370c      	adds	r7, #12
 8102d28:	46bd      	mov	sp, r7
 8102d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d2e:	4770      	bx	lr

08102d30 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102d30:	b480      	push	{r7}
 8102d32:	b083      	sub	sp, #12
 8102d34:	af00      	add	r7, sp, #0
 8102d36:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102d38:	4b03      	ldr	r3, [pc, #12]	@ (8102d48 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8102d3a:	4618      	mov	r0, r3
 8102d3c:	370c      	adds	r7, #12
 8102d3e:	46bd      	mov	sp, r7
 8102d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d44:	4770      	bx	lr
 8102d46:	bf00      	nop
 8102d48:	05555555 	.word	0x05555555

08102d4c <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8102d4c:	b480      	push	{r7}
 8102d4e:	b083      	sub	sp, #12
 8102d50:	af00      	add	r7, sp, #0
 8102d52:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	4618      	mov	r0, r3
 8102d58:	370c      	adds	r7, #12
 8102d5a:	46bd      	mov	sp, r7
 8102d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d60:	4770      	bx	lr
	...

08102d64 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8102d64:	b580      	push	{r7, lr}
 8102d66:	b086      	sub	sp, #24
 8102d68:	af00      	add	r7, sp, #0
 8102d6a:	60f8      	str	r0, [r7, #12]
 8102d6c:	60b9      	str	r1, [r7, #8]
 8102d6e:	607a      	str	r2, [r7, #4]
 8102d70:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8102d72:	68ba      	ldr	r2, [r7, #8]
 8102d74:	68fb      	ldr	r3, [r7, #12]
 8102d76:	1ad3      	subs	r3, r2, r3
 8102d78:	10db      	asrs	r3, r3, #3
 8102d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8102db4 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 8102d7c:	fb02 f303 	mul.w	r3, r2, r3
 8102d80:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8102d82:	697b      	ldr	r3, [r7, #20]
 8102d84:	2b00      	cmp	r3, #0
 8102d86:	dd09      	ble.n	8102d9c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8102d88:	697a      	ldr	r2, [r7, #20]
 8102d8a:	4613      	mov	r3, r2
 8102d8c:	005b      	lsls	r3, r3, #1
 8102d8e:	4413      	add	r3, r2
 8102d90:	00db      	lsls	r3, r3, #3
 8102d92:	461a      	mov	r2, r3
 8102d94:	68f9      	ldr	r1, [r7, #12]
 8102d96:	6878      	ldr	r0, [r7, #4]
 8102d98:	f004 ff54 	bl	8107c44 <memmove>
      return __result + __count;
 8102d9c:	697a      	ldr	r2, [r7, #20]
 8102d9e:	4613      	mov	r3, r2
 8102da0:	005b      	lsls	r3, r3, #1
 8102da2:	4413      	add	r3, r2
 8102da4:	00db      	lsls	r3, r3, #3
 8102da6:	461a      	mov	r2, r3
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	4413      	add	r3, r2
    }
 8102dac:	4618      	mov	r0, r3
 8102dae:	3718      	adds	r7, #24
 8102db0:	46bd      	mov	sp, r7
 8102db2:	bd80      	pop	{r7, pc}
 8102db4:	aaaaaaab 	.word	0xaaaaaaab

08102db8 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8102db8:	b480      	push	{r7}
 8102dba:	b083      	sub	sp, #12
 8102dbc:	af00      	add	r7, sp, #0
 8102dbe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	4618      	mov	r0, r3
 8102dc4:	370c      	adds	r7, #12
 8102dc6:	46bd      	mov	sp, r7
 8102dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dcc:	4770      	bx	lr

08102dce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8102dce:	b580      	push	{r7, lr}
 8102dd0:	b084      	sub	sp, #16
 8102dd2:	af00      	add	r7, sp, #0
 8102dd4:	60f8      	str	r0, [r7, #12]
 8102dd6:	60b9      	str	r1, [r7, #8]
 8102dd8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8102dda:	687a      	ldr	r2, [r7, #4]
 8102ddc:	68b9      	ldr	r1, [r7, #8]
 8102dde:	68f8      	ldr	r0, [r7, #12]
 8102de0:	f000 f887 	bl	8102ef2 <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8102de4:	4603      	mov	r3, r0
 8102de6:	4618      	mov	r0, r3
 8102de8:	3710      	adds	r7, #16
 8102dea:	46bd      	mov	sp, r7
 8102dec:	bd80      	pop	{r7, pc}

08102dee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102dee:	b5b0      	push	{r4, r5, r7, lr}
 8102df0:	b086      	sub	sp, #24
 8102df2:	af02      	add	r7, sp, #8
 8102df4:	60f8      	str	r0, [r7, #12]
 8102df6:	60b9      	str	r1, [r7, #8]
 8102df8:	607a      	str	r2, [r7, #4]
 8102dfa:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102dfc:	6878      	ldr	r0, [r7, #4]
 8102dfe:	f7ff fa52 	bl	81022a6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102e02:	4604      	mov	r4, r0
 8102e04:	6838      	ldr	r0, [r7, #0]
 8102e06:	f7ff fa59 	bl	81022bc <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102e0a:	4605      	mov	r5, r0
 8102e0c:	6a38      	ldr	r0, [r7, #32]
 8102e0e:	f7ff fa60 	bl	81022d2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102e12:	4603      	mov	r3, r0
 8102e14:	9300      	str	r3, [sp, #0]
 8102e16:	462b      	mov	r3, r5
 8102e18:	4622      	mov	r2, r4
 8102e1a:	68b9      	ldr	r1, [r7, #8]
 8102e1c:	68f8      	ldr	r0, [r7, #12]
 8102e1e:	f000 f890 	bl	8102f42 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 8102e22:	bf00      	nop
 8102e24:	3710      	adds	r7, #16
 8102e26:	46bd      	mov	sp, r7
 8102e28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08102e2c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102e2c:	b580      	push	{r7, lr}
 8102e2e:	b084      	sub	sp, #16
 8102e30:	af00      	add	r7, sp, #0
 8102e32:	60f8      	str	r0, [r7, #12]
 8102e34:	60b9      	str	r1, [r7, #8]
 8102e36:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102e38:	68f8      	ldr	r0, [r7, #12]
 8102e3a:	f000 f8ab 	bl	8102f94 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 8102e3e:	4602      	mov	r2, r0
 8102e40:	68bb      	ldr	r3, [r7, #8]
 8102e42:	4293      	cmp	r3, r2
 8102e44:	bf8c      	ite	hi
 8102e46:	2301      	movhi	r3, #1
 8102e48:	2300      	movls	r3, #0
 8102e4a:	b2db      	uxtb	r3, r3
 8102e4c:	2b00      	cmp	r3, #0
 8102e4e:	bf14      	ite	ne
 8102e50:	2301      	movne	r3, #1
 8102e52:	2300      	moveq	r3, #0
 8102e54:	b2db      	uxtb	r3, r3
 8102e56:	2b00      	cmp	r3, #0
 8102e58:	d007      	beq.n	8102e6a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102e5a:	68bb      	ldr	r3, [r7, #8]
 8102e5c:	4a09      	ldr	r2, [pc, #36]	@ (8102e84 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 8102e5e:	4293      	cmp	r3, r2
 8102e60:	d901      	bls.n	8102e66 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102e62:	f004 fe16 	bl	8107a92 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102e66:	f004 fe11 	bl	8107a8c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102e6a:	68ba      	ldr	r2, [r7, #8]
 8102e6c:	4613      	mov	r3, r2
 8102e6e:	005b      	lsls	r3, r3, #1
 8102e70:	4413      	add	r3, r2
 8102e72:	00db      	lsls	r3, r3, #3
 8102e74:	4618      	mov	r0, r3
 8102e76:	f004 fd3b 	bl	81078f0 <_Znwj>
 8102e7a:	4603      	mov	r3, r0
      }
 8102e7c:	4618      	mov	r0, r3
 8102e7e:	3710      	adds	r7, #16
 8102e80:	46bd      	mov	sp, r7
 8102e82:	bd80      	pop	{r7, pc}
 8102e84:	0aaaaaaa 	.word	0x0aaaaaaa

08102e88 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8102e88:	b5b0      	push	{r4, r5, r7, lr}
 8102e8a:	b084      	sub	sp, #16
 8102e8c:	af00      	add	r7, sp, #0
 8102e8e:	60f8      	str	r0, [r7, #12]
 8102e90:	60b9      	str	r1, [r7, #8]
 8102e92:	607a      	str	r2, [r7, #4]
 8102e94:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102e96:	68bb      	ldr	r3, [r7, #8]
 8102e98:	4619      	mov	r1, r3
 8102e9a:	2008      	movs	r0, #8
 8102e9c:	f7fd fd30 	bl	8100900 <_ZnwjPv>
 8102ea0:	4604      	mov	r4, r0
 8102ea2:	6878      	ldr	r0, [r7, #4]
 8102ea4:	f7fe fc45 	bl	8101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102ea8:	4605      	mov	r5, r0
 8102eaa:	6838      	ldr	r0, [r7, #0]
 8102eac:	f7fe fc4c 	bl	8101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102eb0:	4603      	mov	r3, r0
 8102eb2:	461a      	mov	r2, r3
 8102eb4:	4629      	mov	r1, r5
 8102eb6:	4620      	mov	r0, r4
 8102eb8:	f000 f87a 	bl	8102fb0 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 8102ebc:	bf00      	nop
 8102ebe:	3710      	adds	r7, #16
 8102ec0:	46bd      	mov	sp, r7
 8102ec2:	bdb0      	pop	{r4, r5, r7, pc}

08102ec4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8102ec4:	b480      	push	{r7}
 8102ec6:	b083      	sub	sp, #12
 8102ec8:	af00      	add	r7, sp, #0
 8102eca:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	4618      	mov	r0, r3
 8102ed0:	370c      	adds	r7, #12
 8102ed2:	46bd      	mov	sp, r7
 8102ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ed8:	4770      	bx	lr

08102eda <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8102eda:	b580      	push	{r7, lr}
 8102edc:	b082      	sub	sp, #8
 8102ede:	af00      	add	r7, sp, #0
 8102ee0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8102ee2:	6878      	ldr	r0, [r7, #4]
 8102ee4:	f7ff ff24 	bl	8102d30 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102ee8:	4603      	mov	r3, r0
 8102eea:	4618      	mov	r0, r3
 8102eec:	3708      	adds	r7, #8
 8102eee:	46bd      	mov	sp, r7
 8102ef0:	bd80      	pop	{r7, pc}

08102ef2 <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8102ef2:	b590      	push	{r4, r7, lr}
 8102ef4:	b085      	sub	sp, #20
 8102ef6:	af00      	add	r7, sp, #0
 8102ef8:	60f8      	str	r0, [r7, #12]
 8102efa:	60b9      	str	r1, [r7, #8]
 8102efc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8102efe:	68f8      	ldr	r0, [r7, #12]
 8102f00:	f000 f86f 	bl	8102fe2 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8102f04:	4604      	mov	r4, r0
 8102f06:	68b8      	ldr	r0, [r7, #8]
 8102f08:	f000 f86b 	bl	8102fe2 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8102f0c:	4603      	mov	r3, r0
 8102f0e:	687a      	ldr	r2, [r7, #4]
 8102f10:	4619      	mov	r1, r3
 8102f12:	4620      	mov	r0, r4
 8102f14:	f000 f876 	bl	8103004 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8102f18:	4603      	mov	r3, r0
    }
 8102f1a:	4618      	mov	r0, r3
 8102f1c:	3714      	adds	r7, #20
 8102f1e:	46bd      	mov	sp, r7
 8102f20:	bd90      	pop	{r4, r7, pc}

08102f22 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8102f22:	b580      	push	{r7, lr}
 8102f24:	b082      	sub	sp, #8
 8102f26:	af00      	add	r7, sp, #0
 8102f28:	6078      	str	r0, [r7, #4]
 8102f2a:	6039      	str	r1, [r7, #0]
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	683a      	ldr	r2, [r7, #0]
 8102f30:	4611      	mov	r1, r2
 8102f32:	4618      	mov	r0, r3
 8102f34:	f000 f889 	bl	810304a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	4618      	mov	r0, r3
 8102f3c:	3708      	adds	r7, #8
 8102f3e:	46bd      	mov	sp, r7
 8102f40:	bd80      	pop	{r7, pc}

08102f42 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8102f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102f44:	b087      	sub	sp, #28
 8102f46:	af00      	add	r7, sp, #0
 8102f48:	60f8      	str	r0, [r7, #12]
 8102f4a:	60b9      	str	r1, [r7, #8]
 8102f4c:	607a      	str	r2, [r7, #4]
 8102f4e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102f50:	68bb      	ldr	r3, [r7, #8]
 8102f52:	4619      	mov	r1, r3
 8102f54:	2008      	movs	r0, #8
 8102f56:	f7fd fcd3 	bl	8100900 <_ZnwjPv>
 8102f5a:	4604      	mov	r4, r0
 8102f5c:	6878      	ldr	r0, [r7, #4]
 8102f5e:	f7ff f9a2 	bl	81022a6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f62:	6838      	ldr	r0, [r7, #0]
 8102f64:	f7ff f9aa 	bl	81022bc <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102f68:	4602      	mov	r2, r0
 8102f6a:	f107 0314 	add.w	r3, r7, #20
 8102f6e:	4611      	mov	r1, r2
 8102f70:	4618      	mov	r0, r3
 8102f72:	f7ff ffd6 	bl	8102f22 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8102f76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102f78:	f7ff f9ab 	bl	81022d2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102f7c:	f107 0214 	add.w	r2, r7, #20
 8102f80:	4633      	mov	r3, r6
 8102f82:	4629      	mov	r1, r5
 8102f84:	4620      	mov	r0, r4
 8102f86:	f000 f870 	bl	810306a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8102f8a:	bf00      	nop
 8102f8c:	371c      	adds	r7, #28
 8102f8e:	46bd      	mov	sp, r7
 8102f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08102f94 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102f94:	b480      	push	{r7}
 8102f96:	b083      	sub	sp, #12
 8102f98:	af00      	add	r7, sp, #0
 8102f9a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102f9c:	4b03      	ldr	r3, [pc, #12]	@ (8102fac <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 8102f9e:	4618      	mov	r0, r3
 8102fa0:	370c      	adds	r7, #12
 8102fa2:	46bd      	mov	sp, r7
 8102fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fa8:	4770      	bx	lr
 8102faa:	bf00      	nop
 8102fac:	05555555 	.word	0x05555555

08102fb0 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102fb0:	b580      	push	{r7, lr}
 8102fb2:	b084      	sub	sp, #16
 8102fb4:	af00      	add	r7, sp, #0
 8102fb6:	60f8      	str	r0, [r7, #12]
 8102fb8:	60b9      	str	r1, [r7, #8]
 8102fba:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102fbc:	68b8      	ldr	r0, [r7, #8]
 8102fbe:	f7fe fbb8 	bl	8101732 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102fc2:	4603      	mov	r3, r0
 8102fc4:	781a      	ldrb	r2, [r3, #0]
 8102fc6:	68fb      	ldr	r3, [r7, #12]
 8102fc8:	701a      	strb	r2, [r3, #0]
 8102fca:	6878      	ldr	r0, [r7, #4]
 8102fcc:	f7fe fbbc 	bl	8101748 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102fd0:	4603      	mov	r3, r0
 8102fd2:	681a      	ldr	r2, [r3, #0]
 8102fd4:	68fb      	ldr	r3, [r7, #12]
 8102fd6:	605a      	str	r2, [r3, #4]
 8102fd8:	68fb      	ldr	r3, [r7, #12]
 8102fda:	4618      	mov	r0, r3
 8102fdc:	3710      	adds	r7, #16
 8102fde:	46bd      	mov	sp, r7
 8102fe0:	bd80      	pop	{r7, pc}

08102fe2 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8102fe2:	b580      	push	{r7, lr}
 8102fe4:	b082      	sub	sp, #8
 8102fe6:	af00      	add	r7, sp, #0
 8102fe8:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8102fea:	1d3b      	adds	r3, r7, #4
 8102fec:	4618      	mov	r0, r3
 8102fee:	f000 f850 	bl	8103092 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 8102ff2:	4603      	mov	r3, r0
 8102ff4:	4618      	mov	r0, r3
 8102ff6:	f000 f858 	bl	81030aa <_ZSt12__miter_baseIP8SMessageET_S2_>
 8102ffa:	4603      	mov	r3, r0
 8102ffc:	4618      	mov	r0, r3
 8102ffe:	3708      	adds	r7, #8
 8103000:	46bd      	mov	sp, r7
 8103002:	bd80      	pop	{r7, pc}

08103004 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8103004:	b5b0      	push	{r4, r5, r7, lr}
 8103006:	b084      	sub	sp, #16
 8103008:	af00      	add	r7, sp, #0
 810300a:	60f8      	str	r0, [r7, #12]
 810300c:	60b9      	str	r1, [r7, #8]
 810300e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8103010:	68f8      	ldr	r0, [r7, #12]
 8103012:	f7ff fe9b 	bl	8102d4c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103016:	4604      	mov	r4, r0
 8103018:	68b8      	ldr	r0, [r7, #8]
 810301a:	f7ff fe97 	bl	8102d4c <_ZSt12__niter_baseIP8SMessageET_S2_>
 810301e:	4605      	mov	r5, r0
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	4618      	mov	r0, r3
 8103024:	f7ff fe92 	bl	8102d4c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103028:	4603      	mov	r3, r0
 810302a:	461a      	mov	r2, r3
 810302c:	4629      	mov	r1, r5
 810302e:	4620      	mov	r0, r4
 8103030:	f000 f846 	bl	81030c0 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103034:	4602      	mov	r2, r0
 8103036:	1d3b      	adds	r3, r7, #4
 8103038:	4611      	mov	r1, r2
 810303a:	4618      	mov	r0, r3
 810303c:	f000 f850 	bl	81030e0 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 8103040:	4603      	mov	r3, r0
    }
 8103042:	4618      	mov	r0, r3
 8103044:	3710      	adds	r7, #16
 8103046:	46bd      	mov	sp, r7
 8103048:	bdb0      	pop	{r4, r5, r7, pc}

0810304a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810304a:	b480      	push	{r7}
 810304c:	b083      	sub	sp, #12
 810304e:	af00      	add	r7, sp, #0
 8103050:	6078      	str	r0, [r7, #4]
 8103052:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	683a      	ldr	r2, [r7, #0]
 8103058:	6812      	ldr	r2, [r2, #0]
 810305a:	601a      	str	r2, [r3, #0]
      { }
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	4618      	mov	r0, r3
 8103060:	370c      	adds	r7, #12
 8103062:	46bd      	mov	sp, r7
 8103064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103068:	4770      	bx	lr

0810306a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 810306a:	b5b0      	push	{r4, r5, r7, lr}
 810306c:	b086      	sub	sp, #24
 810306e:	af02      	add	r7, sp, #8
 8103070:	60f8      	str	r0, [r7, #12]
 8103072:	7239      	strb	r1, [r7, #8]
 8103074:	607a      	str	r2, [r7, #4]
 8103076:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8103078:	463a      	mov	r2, r7
 810307a:	f88d 4000 	strb.w	r4, [sp]
 810307e:	462b      	mov	r3, r5
 8103080:	6879      	ldr	r1, [r7, #4]
 8103082:	68f8      	ldr	r0, [r7, #12]
 8103084:	f000 f838 	bl	81030f8 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8103088:	68fb      	ldr	r3, [r7, #12]
 810308a:	4618      	mov	r0, r3
 810308c:	3710      	adds	r7, #16
 810308e:	46bd      	mov	sp, r7
 8103090:	bdb0      	pop	{r4, r5, r7, pc}

08103092 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 8103092:	b480      	push	{r7}
 8103094:	b083      	sub	sp, #12
 8103096:	af00      	add	r7, sp, #0
 8103098:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	4618      	mov	r0, r3
 81030a0:	370c      	adds	r7, #12
 81030a2:	46bd      	mov	sp, r7
 81030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030a8:	4770      	bx	lr

081030aa <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 81030aa:	b480      	push	{r7}
 81030ac:	b083      	sub	sp, #12
 81030ae:	af00      	add	r7, sp, #0
 81030b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	4618      	mov	r0, r3
 81030b6:	370c      	adds	r7, #12
 81030b8:	46bd      	mov	sp, r7
 81030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030be:	4770      	bx	lr

081030c0 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 81030c0:	b580      	push	{r7, lr}
 81030c2:	b084      	sub	sp, #16
 81030c4:	af00      	add	r7, sp, #0
 81030c6:	60f8      	str	r0, [r7, #12]
 81030c8:	60b9      	str	r1, [r7, #8]
 81030ca:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 81030cc:	687a      	ldr	r2, [r7, #4]
 81030ce:	68b9      	ldr	r1, [r7, #8]
 81030d0:	68f8      	ldr	r0, [r7, #12]
 81030d2:	f000 f82b 	bl	810312c <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 81030d6:	4603      	mov	r3, r0
 81030d8:	4618      	mov	r0, r3
 81030da:	3710      	adds	r7, #16
 81030dc:	46bd      	mov	sp, r7
 81030de:	bd80      	pop	{r7, pc}

081030e0 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 81030e0:	b480      	push	{r7}
 81030e2:	b083      	sub	sp, #12
 81030e4:	af00      	add	r7, sp, #0
 81030e6:	6078      	str	r0, [r7, #4]
 81030e8:	6039      	str	r1, [r7, #0]
    { return __res; }
 81030ea:	683b      	ldr	r3, [r7, #0]
 81030ec:	4618      	mov	r0, r3
 81030ee:	370c      	adds	r7, #12
 81030f0:	46bd      	mov	sp, r7
 81030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030f6:	4770      	bx	lr

081030f8 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 81030f8:	b580      	push	{r7, lr}
 81030fa:	b084      	sub	sp, #16
 81030fc:	af00      	add	r7, sp, #0
 81030fe:	60f8      	str	r0, [r7, #12]
 8103100:	60b9      	str	r1, [r7, #8]
 8103102:	607a      	str	r2, [r7, #4]
 8103104:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8103106:	68b8      	ldr	r0, [r7, #8]
 8103108:	f000 f820 	bl	810314c <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810310c:	4603      	mov	r3, r0
 810310e:	4618      	mov	r0, r3
 8103110:	f000 f829 	bl	8103166 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103114:	4603      	mov	r3, r0
 8103116:	781a      	ldrb	r2, [r3, #0]
 8103118:	68fb      	ldr	r3, [r7, #12]
 810311a:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 810311c:	68fb      	ldr	r3, [r7, #12]
 810311e:	2200      	movs	r2, #0
 8103120:	605a      	str	r2, [r3, #4]
      { }
 8103122:	68fb      	ldr	r3, [r7, #12]
 8103124:	4618      	mov	r0, r3
 8103126:	3710      	adds	r7, #16
 8103128:	46bd      	mov	sp, r7
 810312a:	bd80      	pop	{r7, pc}

0810312c <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 810312c:	b580      	push	{r7, lr}
 810312e:	b084      	sub	sp, #16
 8103130:	af00      	add	r7, sp, #0
 8103132:	60f8      	str	r0, [r7, #12]
 8103134:	60b9      	str	r1, [r7, #8]
 8103136:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8103138:	687a      	ldr	r2, [r7, #4]
 810313a:	68b9      	ldr	r1, [r7, #8]
 810313c:	68f8      	ldr	r0, [r7, #12]
 810313e:	f000 f81d 	bl	810317c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 8103142:	4603      	mov	r3, r0
    }
 8103144:	4618      	mov	r0, r3
 8103146:	3710      	adds	r7, #16
 8103148:	46bd      	mov	sp, r7
 810314a:	bd80      	pop	{r7, pc}

0810314c <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810314c:	b580      	push	{r7, lr}
 810314e:	b082      	sub	sp, #8
 8103150:	af00      	add	r7, sp, #0
 8103152:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	4618      	mov	r0, r3
 8103158:	f000 f83a 	bl	81031d0 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810315c:	4603      	mov	r3, r0
 810315e:	4618      	mov	r0, r3
 8103160:	3708      	adds	r7, #8
 8103162:	46bd      	mov	sp, r7
 8103164:	bd80      	pop	{r7, pc}

08103166 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103166:	b480      	push	{r7}
 8103168:	b083      	sub	sp, #12
 810316a:	af00      	add	r7, sp, #0
 810316c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	4618      	mov	r0, r3
 8103172:	370c      	adds	r7, #12
 8103174:	46bd      	mov	sp, r7
 8103176:	f85d 7b04 	ldr.w	r7, [sp], #4
 810317a:	4770      	bx	lr

0810317c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810317c:	b580      	push	{r7, lr}
 810317e:	b086      	sub	sp, #24
 8103180:	af00      	add	r7, sp, #0
 8103182:	60f8      	str	r0, [r7, #12]
 8103184:	60b9      	str	r1, [r7, #8]
 8103186:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8103188:	68ba      	ldr	r2, [r7, #8]
 810318a:	68fb      	ldr	r3, [r7, #12]
 810318c:	1ad3      	subs	r3, r2, r3
 810318e:	10db      	asrs	r3, r3, #3
 8103190:	4a0e      	ldr	r2, [pc, #56]	@ (81031cc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 8103192:	fb02 f303 	mul.w	r3, r2, r3
 8103196:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8103198:	697b      	ldr	r3, [r7, #20]
 810319a:	2b00      	cmp	r3, #0
 810319c:	d009      	beq.n	81031b2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810319e:	697a      	ldr	r2, [r7, #20]
 81031a0:	4613      	mov	r3, r2
 81031a2:	005b      	lsls	r3, r3, #1
 81031a4:	4413      	add	r3, r2
 81031a6:	00db      	lsls	r3, r3, #3
 81031a8:	461a      	mov	r2, r3
 81031aa:	68f9      	ldr	r1, [r7, #12]
 81031ac:	6878      	ldr	r0, [r7, #4]
 81031ae:	f004 fd49 	bl	8107c44 <memmove>
	  return __result + _Num;
 81031b2:	697a      	ldr	r2, [r7, #20]
 81031b4:	4613      	mov	r3, r2
 81031b6:	005b      	lsls	r3, r3, #1
 81031b8:	4413      	add	r3, r2
 81031ba:	00db      	lsls	r3, r3, #3
 81031bc:	461a      	mov	r2, r3
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	4413      	add	r3, r2
	}
 81031c2:	4618      	mov	r0, r3
 81031c4:	3718      	adds	r7, #24
 81031c6:	46bd      	mov	sp, r7
 81031c8:	bd80      	pop	{r7, pc}
 81031ca:	bf00      	nop
 81031cc:	aaaaaaab 	.word	0xaaaaaaab

081031d0 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 81031d0:	b580      	push	{r7, lr}
 81031d2:	b082      	sub	sp, #8
 81031d4:	af00      	add	r7, sp, #0
 81031d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 81031d8:	6878      	ldr	r0, [r7, #4]
 81031da:	f000 f805 	bl	81031e8 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 81031de:	4603      	mov	r3, r0
 81031e0:	4618      	mov	r0, r3
 81031e2:	3708      	adds	r7, #8
 81031e4:	46bd      	mov	sp, r7
 81031e6:	bd80      	pop	{r7, pc}

081031e8 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 81031e8:	b580      	push	{r7, lr}
 81031ea:	b082      	sub	sp, #8
 81031ec:	af00      	add	r7, sp, #0
 81031ee:	6078      	str	r0, [r7, #4]
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	4618      	mov	r0, r3
 81031f4:	f000 f805 	bl	8103202 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 81031f8:	4603      	mov	r3, r0
 81031fa:	4618      	mov	r0, r3
 81031fc:	3708      	adds	r7, #8
 81031fe:	46bd      	mov	sp, r7
 8103200:	bd80      	pop	{r7, pc}

08103202 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8103202:	b480      	push	{r7}
 8103204:	b083      	sub	sp, #12
 8103206:	af00      	add	r7, sp, #0
 8103208:	6078      	str	r0, [r7, #4]
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	4618      	mov	r0, r3
 8103210:	370c      	adds	r7, #12
 8103212:	46bd      	mov	sp, r7
 8103214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103218:	4770      	bx	lr
	...

0810321c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810321c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103254 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103220:	f000 f826 	bl	8103270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103224:	480c      	ldr	r0, [pc, #48]	@ (8103258 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103226:	490d      	ldr	r1, [pc, #52]	@ (810325c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103228:	4a0d      	ldr	r2, [pc, #52]	@ (8103260 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810322a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810322c:	e002      	b.n	8103234 <LoopCopyDataInit>

0810322e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810322e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103232:	3304      	adds	r3, #4

08103234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103238:	d3f9      	bcc.n	810322e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810323a:	4a0a      	ldr	r2, [pc, #40]	@ (8103264 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810323c:	4c0a      	ldr	r4, [pc, #40]	@ (8103268 <LoopFillZerobss+0x22>)
  movs r3, #0
 810323e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103240:	e001      	b.n	8103246 <LoopFillZerobss>

08103242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103244:	3204      	adds	r2, #4

08103246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103248:	d3fb      	bcc.n	8103242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810324a:	f004 fdcd 	bl	8107de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810324e:	f7fd f983 	bl	8100558 <main>
  bx  lr
 8103252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103254:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103258:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810325c:	10000064 	.word	0x10000064
  ldr r2, =_sidata
 8103260:	08107fb8 	.word	0x08107fb8
  ldr r2, =_sbss
 8103264:	10000064 	.word	0x10000064
  ldr r4, =_ebss
 8103268:	10004c1c 	.word	0x10004c1c

0810326c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810326c:	e7fe      	b.n	810326c <ADC3_IRQHandler>
	...

08103270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8103270:	b480      	push	{r7}
 8103272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8103274:	4b0b      	ldr	r3, [pc, #44]	@ (81032a4 <SystemInit+0x34>)
 8103276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810327a:	4a0a      	ldr	r2, [pc, #40]	@ (81032a4 <SystemInit+0x34>)
 810327c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8103280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8103284:	4b07      	ldr	r3, [pc, #28]	@ (81032a4 <SystemInit+0x34>)
 8103286:	691b      	ldr	r3, [r3, #16]
 8103288:	4a06      	ldr	r2, [pc, #24]	@ (81032a4 <SystemInit+0x34>)
 810328a:	f043 0310 	orr.w	r3, r3, #16
 810328e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8103290:	4b04      	ldr	r3, [pc, #16]	@ (81032a4 <SystemInit+0x34>)
 8103292:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8103296:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8103298:	bf00      	nop
 810329a:	46bd      	mov	sp, r7
 810329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032a0:	4770      	bx	lr
 81032a2:	bf00      	nop
 81032a4:	e000ed00 	.word	0xe000ed00

081032a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81032a8:	b580      	push	{r7, lr}
 81032aa:	b082      	sub	sp, #8
 81032ac:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81032ae:	4b28      	ldr	r3, [pc, #160]	@ (8103350 <HAL_Init+0xa8>)
 81032b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81032b4:	4a26      	ldr	r2, [pc, #152]	@ (8103350 <HAL_Init+0xa8>)
 81032b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81032ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81032be:	4b24      	ldr	r3, [pc, #144]	@ (8103350 <HAL_Init+0xa8>)
 81032c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81032c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81032c8:	603b      	str	r3, [r7, #0]
 81032ca:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81032cc:	4b21      	ldr	r3, [pc, #132]	@ (8103354 <HAL_Init+0xac>)
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81032d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81032d8:	4a1e      	ldr	r2, [pc, #120]	@ (8103354 <HAL_Init+0xac>)
 81032da:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81032de:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81032e0:	4b1c      	ldr	r3, [pc, #112]	@ (8103354 <HAL_Init+0xac>)
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	4a1b      	ldr	r2, [pc, #108]	@ (8103354 <HAL_Init+0xac>)
 81032e6:	f043 0301 	orr.w	r3, r3, #1
 81032ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81032ec:	2003      	movs	r0, #3
 81032ee:	f000 f8fa 	bl	81034e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81032f2:	f000 fa2b 	bl	810374c <HAL_RCC_GetSysClockFreq>
 81032f6:	4602      	mov	r2, r0
 81032f8:	4b15      	ldr	r3, [pc, #84]	@ (8103350 <HAL_Init+0xa8>)
 81032fa:	699b      	ldr	r3, [r3, #24]
 81032fc:	0a1b      	lsrs	r3, r3, #8
 81032fe:	f003 030f 	and.w	r3, r3, #15
 8103302:	4915      	ldr	r1, [pc, #84]	@ (8103358 <HAL_Init+0xb0>)
 8103304:	5ccb      	ldrb	r3, [r1, r3]
 8103306:	f003 031f 	and.w	r3, r3, #31
 810330a:	fa22 f303 	lsr.w	r3, r2, r3
 810330e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103310:	4b0f      	ldr	r3, [pc, #60]	@ (8103350 <HAL_Init+0xa8>)
 8103312:	699b      	ldr	r3, [r3, #24]
 8103314:	f003 030f 	and.w	r3, r3, #15
 8103318:	4a0f      	ldr	r2, [pc, #60]	@ (8103358 <HAL_Init+0xb0>)
 810331a:	5cd3      	ldrb	r3, [r2, r3]
 810331c:	f003 031f 	and.w	r3, r3, #31
 8103320:	687a      	ldr	r2, [r7, #4]
 8103322:	fa22 f303 	lsr.w	r3, r2, r3
 8103326:	4a0d      	ldr	r2, [pc, #52]	@ (810335c <HAL_Init+0xb4>)
 8103328:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810332a:	4b0c      	ldr	r3, [pc, #48]	@ (810335c <HAL_Init+0xb4>)
 810332c:	681b      	ldr	r3, [r3, #0]
 810332e:	4a0c      	ldr	r2, [pc, #48]	@ (8103360 <HAL_Init+0xb8>)
 8103330:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103332:	2000      	movs	r0, #0
 8103334:	f7fd f9f2 	bl	810071c <HAL_InitTick>
 8103338:	4603      	mov	r3, r0
 810333a:	2b00      	cmp	r3, #0
 810333c:	d001      	beq.n	8103342 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810333e:	2301      	movs	r3, #1
 8103340:	e002      	b.n	8103348 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103342:	f7fd f9c5 	bl	81006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103346:	2300      	movs	r3, #0
}
 8103348:	4618      	mov	r0, r3
 810334a:	3708      	adds	r7, #8
 810334c:	46bd      	mov	sp, r7
 810334e:	bd80      	pop	{r7, pc}
 8103350:	58024400 	.word	0x58024400
 8103354:	40024400 	.word	0x40024400
 8103358:	08107f9c 	.word	0x08107f9c
 810335c:	10000004 	.word	0x10000004
 8103360:	10000000 	.word	0x10000000

08103364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103364:	b480      	push	{r7}
 8103366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103368:	4b06      	ldr	r3, [pc, #24]	@ (8103384 <HAL_IncTick+0x20>)
 810336a:	781b      	ldrb	r3, [r3, #0]
 810336c:	461a      	mov	r2, r3
 810336e:	4b06      	ldr	r3, [pc, #24]	@ (8103388 <HAL_IncTick+0x24>)
 8103370:	681b      	ldr	r3, [r3, #0]
 8103372:	4413      	add	r3, r2
 8103374:	4a04      	ldr	r2, [pc, #16]	@ (8103388 <HAL_IncTick+0x24>)
 8103376:	6013      	str	r3, [r2, #0]
}
 8103378:	bf00      	nop
 810337a:	46bd      	mov	sp, r7
 810337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103380:	4770      	bx	lr
 8103382:	bf00      	nop
 8103384:	1000000c 	.word	0x1000000c
 8103388:	100000e4 	.word	0x100000e4

0810338c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810338c:	b480      	push	{r7}
 810338e:	b085      	sub	sp, #20
 8103390:	af00      	add	r7, sp, #0
 8103392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	f003 0307 	and.w	r3, r3, #7
 810339a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810339c:	4b0c      	ldr	r3, [pc, #48]	@ (81033d0 <__NVIC_SetPriorityGrouping+0x44>)
 810339e:	68db      	ldr	r3, [r3, #12]
 81033a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81033a2:	68ba      	ldr	r2, [r7, #8]
 81033a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81033a8:	4013      	ands	r3, r2
 81033aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81033ac:	68fb      	ldr	r3, [r7, #12]
 81033ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81033b0:	68bb      	ldr	r3, [r7, #8]
 81033b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81033b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81033b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81033bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81033be:	4a04      	ldr	r2, [pc, #16]	@ (81033d0 <__NVIC_SetPriorityGrouping+0x44>)
 81033c0:	68bb      	ldr	r3, [r7, #8]
 81033c2:	60d3      	str	r3, [r2, #12]
}
 81033c4:	bf00      	nop
 81033c6:	3714      	adds	r7, #20
 81033c8:	46bd      	mov	sp, r7
 81033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ce:	4770      	bx	lr
 81033d0:	e000ed00 	.word	0xe000ed00

081033d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81033d4:	b480      	push	{r7}
 81033d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81033d8:	4b04      	ldr	r3, [pc, #16]	@ (81033ec <__NVIC_GetPriorityGrouping+0x18>)
 81033da:	68db      	ldr	r3, [r3, #12]
 81033dc:	0a1b      	lsrs	r3, r3, #8
 81033de:	f003 0307 	and.w	r3, r3, #7
}
 81033e2:	4618      	mov	r0, r3
 81033e4:	46bd      	mov	sp, r7
 81033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ea:	4770      	bx	lr
 81033ec:	e000ed00 	.word	0xe000ed00

081033f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81033f0:	b480      	push	{r7}
 81033f2:	b083      	sub	sp, #12
 81033f4:	af00      	add	r7, sp, #0
 81033f6:	4603      	mov	r3, r0
 81033f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81033fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81033fe:	2b00      	cmp	r3, #0
 8103400:	db0b      	blt.n	810341a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103402:	88fb      	ldrh	r3, [r7, #6]
 8103404:	f003 021f 	and.w	r2, r3, #31
 8103408:	4907      	ldr	r1, [pc, #28]	@ (8103428 <__NVIC_EnableIRQ+0x38>)
 810340a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810340e:	095b      	lsrs	r3, r3, #5
 8103410:	2001      	movs	r0, #1
 8103412:	fa00 f202 	lsl.w	r2, r0, r2
 8103416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810341a:	bf00      	nop
 810341c:	370c      	adds	r7, #12
 810341e:	46bd      	mov	sp, r7
 8103420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103424:	4770      	bx	lr
 8103426:	bf00      	nop
 8103428:	e000e100 	.word	0xe000e100

0810342c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810342c:	b480      	push	{r7}
 810342e:	b083      	sub	sp, #12
 8103430:	af00      	add	r7, sp, #0
 8103432:	4603      	mov	r3, r0
 8103434:	6039      	str	r1, [r7, #0]
 8103436:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810343c:	2b00      	cmp	r3, #0
 810343e:	db0a      	blt.n	8103456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103440:	683b      	ldr	r3, [r7, #0]
 8103442:	b2da      	uxtb	r2, r3
 8103444:	490c      	ldr	r1, [pc, #48]	@ (8103478 <__NVIC_SetPriority+0x4c>)
 8103446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810344a:	0112      	lsls	r2, r2, #4
 810344c:	b2d2      	uxtb	r2, r2
 810344e:	440b      	add	r3, r1
 8103450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103454:	e00a      	b.n	810346c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103456:	683b      	ldr	r3, [r7, #0]
 8103458:	b2da      	uxtb	r2, r3
 810345a:	4908      	ldr	r1, [pc, #32]	@ (810347c <__NVIC_SetPriority+0x50>)
 810345c:	88fb      	ldrh	r3, [r7, #6]
 810345e:	f003 030f 	and.w	r3, r3, #15
 8103462:	3b04      	subs	r3, #4
 8103464:	0112      	lsls	r2, r2, #4
 8103466:	b2d2      	uxtb	r2, r2
 8103468:	440b      	add	r3, r1
 810346a:	761a      	strb	r2, [r3, #24]
}
 810346c:	bf00      	nop
 810346e:	370c      	adds	r7, #12
 8103470:	46bd      	mov	sp, r7
 8103472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103476:	4770      	bx	lr
 8103478:	e000e100 	.word	0xe000e100
 810347c:	e000ed00 	.word	0xe000ed00

08103480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103480:	b480      	push	{r7}
 8103482:	b089      	sub	sp, #36	@ 0x24
 8103484:	af00      	add	r7, sp, #0
 8103486:	60f8      	str	r0, [r7, #12]
 8103488:	60b9      	str	r1, [r7, #8]
 810348a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810348c:	68fb      	ldr	r3, [r7, #12]
 810348e:	f003 0307 	and.w	r3, r3, #7
 8103492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103494:	69fb      	ldr	r3, [r7, #28]
 8103496:	f1c3 0307 	rsb	r3, r3, #7
 810349a:	2b04      	cmp	r3, #4
 810349c:	bf28      	it	cs
 810349e:	2304      	movcs	r3, #4
 81034a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81034a2:	69fb      	ldr	r3, [r7, #28]
 81034a4:	3304      	adds	r3, #4
 81034a6:	2b06      	cmp	r3, #6
 81034a8:	d902      	bls.n	81034b0 <NVIC_EncodePriority+0x30>
 81034aa:	69fb      	ldr	r3, [r7, #28]
 81034ac:	3b03      	subs	r3, #3
 81034ae:	e000      	b.n	81034b2 <NVIC_EncodePriority+0x32>
 81034b0:	2300      	movs	r3, #0
 81034b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81034b4:	f04f 32ff 	mov.w	r2, #4294967295
 81034b8:	69bb      	ldr	r3, [r7, #24]
 81034ba:	fa02 f303 	lsl.w	r3, r2, r3
 81034be:	43da      	mvns	r2, r3
 81034c0:	68bb      	ldr	r3, [r7, #8]
 81034c2:	401a      	ands	r2, r3
 81034c4:	697b      	ldr	r3, [r7, #20]
 81034c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81034c8:	f04f 31ff 	mov.w	r1, #4294967295
 81034cc:	697b      	ldr	r3, [r7, #20]
 81034ce:	fa01 f303 	lsl.w	r3, r1, r3
 81034d2:	43d9      	mvns	r1, r3
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81034d8:	4313      	orrs	r3, r2
         );
}
 81034da:	4618      	mov	r0, r3
 81034dc:	3724      	adds	r7, #36	@ 0x24
 81034de:	46bd      	mov	sp, r7
 81034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034e4:	4770      	bx	lr

081034e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81034e6:	b580      	push	{r7, lr}
 81034e8:	b082      	sub	sp, #8
 81034ea:	af00      	add	r7, sp, #0
 81034ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81034ee:	6878      	ldr	r0, [r7, #4]
 81034f0:	f7ff ff4c 	bl	810338c <__NVIC_SetPriorityGrouping>
}
 81034f4:	bf00      	nop
 81034f6:	3708      	adds	r7, #8
 81034f8:	46bd      	mov	sp, r7
 81034fa:	bd80      	pop	{r7, pc}

081034fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81034fc:	b580      	push	{r7, lr}
 81034fe:	b086      	sub	sp, #24
 8103500:	af00      	add	r7, sp, #0
 8103502:	4603      	mov	r3, r0
 8103504:	60b9      	str	r1, [r7, #8]
 8103506:	607a      	str	r2, [r7, #4]
 8103508:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810350a:	f7ff ff63 	bl	81033d4 <__NVIC_GetPriorityGrouping>
 810350e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103510:	687a      	ldr	r2, [r7, #4]
 8103512:	68b9      	ldr	r1, [r7, #8]
 8103514:	6978      	ldr	r0, [r7, #20]
 8103516:	f7ff ffb3 	bl	8103480 <NVIC_EncodePriority>
 810351a:	4602      	mov	r2, r0
 810351c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103520:	4611      	mov	r1, r2
 8103522:	4618      	mov	r0, r3
 8103524:	f7ff ff82 	bl	810342c <__NVIC_SetPriority>
}
 8103528:	bf00      	nop
 810352a:	3718      	adds	r7, #24
 810352c:	46bd      	mov	sp, r7
 810352e:	bd80      	pop	{r7, pc}

08103530 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103530:	b580      	push	{r7, lr}
 8103532:	b082      	sub	sp, #8
 8103534:	af00      	add	r7, sp, #0
 8103536:	4603      	mov	r3, r0
 8103538:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810353a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810353e:	4618      	mov	r0, r3
 8103540:	f7ff ff56 	bl	81033f0 <__NVIC_EnableIRQ>
}
 8103544:	bf00      	nop
 8103546:	3708      	adds	r7, #8
 8103548:	46bd      	mov	sp, r7
 810354a:	bd80      	pop	{r7, pc}

0810354c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810354c:	b480      	push	{r7}
 810354e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103550:	4b07      	ldr	r3, [pc, #28]	@ (8103570 <HAL_GetCurrentCPUID+0x24>)
 8103552:	681b      	ldr	r3, [r3, #0]
 8103554:	091b      	lsrs	r3, r3, #4
 8103556:	f003 030f 	and.w	r3, r3, #15
 810355a:	2b07      	cmp	r3, #7
 810355c:	d101      	bne.n	8103562 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810355e:	2303      	movs	r3, #3
 8103560:	e000      	b.n	8103564 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103562:	2301      	movs	r3, #1
  }
}
 8103564:	4618      	mov	r0, r3
 8103566:	46bd      	mov	sp, r7
 8103568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810356c:	4770      	bx	lr
 810356e:	bf00      	nop
 8103570:	e000ed00 	.word	0xe000ed00

08103574 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8103574:	b480      	push	{r7}
 8103576:	b083      	sub	sp, #12
 8103578:	af00      	add	r7, sp, #0
 810357a:	6078      	str	r0, [r7, #4]
 810357c:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810357e:	490e      	ldr	r1, [pc, #56]	@ (81035b8 <HAL_HSEM_Take+0x44>)
 8103580:	683b      	ldr	r3, [r7, #0]
 8103582:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8103586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810358a:	687a      	ldr	r2, [r7, #4]
 810358c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8103590:	4a09      	ldr	r2, [pc, #36]	@ (81035b8 <HAL_HSEM_Take+0x44>)
 8103592:	687b      	ldr	r3, [r7, #4]
 8103594:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8103598:	683b      	ldr	r3, [r7, #0]
 810359a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810359e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81035a2:	429a      	cmp	r2, r3
 81035a4:	d101      	bne.n	81035aa <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 81035a6:	2300      	movs	r3, #0
 81035a8:	e000      	b.n	81035ac <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 81035aa:	2301      	movs	r3, #1
}
 81035ac:	4618      	mov	r0, r3
 81035ae:	370c      	adds	r7, #12
 81035b0:	46bd      	mov	sp, r7
 81035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035b6:	4770      	bx	lr
 81035b8:	58026400 	.word	0x58026400

081035bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81035bc:	b480      	push	{r7}
 81035be:	b083      	sub	sp, #12
 81035c0:	af00      	add	r7, sp, #0
 81035c2:	6078      	str	r0, [r7, #4]
 81035c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81035c6:	4906      	ldr	r1, [pc, #24]	@ (81035e0 <HAL_HSEM_Release+0x24>)
 81035c8:	683b      	ldr	r3, [r7, #0]
 81035ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81035d4:	bf00      	nop
 81035d6:	370c      	adds	r7, #12
 81035d8:	46bd      	mov	sp, r7
 81035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035de:	4770      	bx	lr
 81035e0:	58026400 	.word	0x58026400

081035e4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81035e4:	b480      	push	{r7}
 81035e6:	b083      	sub	sp, #12
 81035e8:	af00      	add	r7, sp, #0
 81035ea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81035ec:	4b05      	ldr	r3, [pc, #20]	@ (8103604 <HAL_HSEM_ActivateNotification+0x20>)
 81035ee:	681a      	ldr	r2, [r3, #0]
 81035f0:	4904      	ldr	r1, [pc, #16]	@ (8103604 <HAL_HSEM_ActivateNotification+0x20>)
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	4313      	orrs	r3, r2
 81035f6:	600b      	str	r3, [r1, #0]
#endif
}
 81035f8:	bf00      	nop
 81035fa:	370c      	adds	r7, #12
 81035fc:	46bd      	mov	sp, r7
 81035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103602:	4770      	bx	lr
 8103604:	58026510 	.word	0x58026510

08103608 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8103608:	b580      	push	{r7, lr}
 810360a:	b082      	sub	sp, #8
 810360c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810360e:	4b0a      	ldr	r3, [pc, #40]	@ (8103638 <HAL_HSEM_IRQHandler+0x30>)
 8103610:	68db      	ldr	r3, [r3, #12]
 8103612:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8103614:	4b08      	ldr	r3, [pc, #32]	@ (8103638 <HAL_HSEM_IRQHandler+0x30>)
 8103616:	681a      	ldr	r2, [r3, #0]
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	43db      	mvns	r3, r3
 810361c:	4906      	ldr	r1, [pc, #24]	@ (8103638 <HAL_HSEM_IRQHandler+0x30>)
 810361e:	4013      	ands	r3, r2
 8103620:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8103622:	4a05      	ldr	r2, [pc, #20]	@ (8103638 <HAL_HSEM_IRQHandler+0x30>)
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8103628:	6878      	ldr	r0, [r7, #4]
 810362a:	f7fc fe59 	bl	81002e0 <HAL_HSEM_FreeCallback>
}
 810362e:	bf00      	nop
 8103630:	3708      	adds	r7, #8
 8103632:	46bd      	mov	sp, r7
 8103634:	bd80      	pop	{r7, pc}
 8103636:	bf00      	nop
 8103638:	58026510 	.word	0x58026510

0810363c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810363c:	b580      	push	{r7, lr}
 810363e:	b084      	sub	sp, #16
 8103640:	af00      	add	r7, sp, #0
 8103642:	60f8      	str	r0, [r7, #12]
 8103644:	460b      	mov	r3, r1
 8103646:	607a      	str	r2, [r7, #4]
 8103648:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810364a:	4b37      	ldr	r3, [pc, #220]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 810364c:	681b      	ldr	r3, [r3, #0]
 810364e:	f023 0201 	bic.w	r2, r3, #1
 8103652:	4935      	ldr	r1, [pc, #212]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103654:	68fb      	ldr	r3, [r7, #12]
 8103656:	4313      	orrs	r3, r2
 8103658:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810365a:	687b      	ldr	r3, [r7, #4]
 810365c:	2b00      	cmp	r3, #0
 810365e:	d123      	bne.n	81036a8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103660:	f7ff ff74 	bl	810354c <HAL_GetCurrentCPUID>
 8103664:	4603      	mov	r3, r0
 8103666:	2b03      	cmp	r3, #3
 8103668:	d158      	bne.n	810371c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810366a:	4b2f      	ldr	r3, [pc, #188]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 810366c:	691b      	ldr	r3, [r3, #16]
 810366e:	4a2e      	ldr	r2, [pc, #184]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103670:	f023 0301 	bic.w	r3, r3, #1
 8103674:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103676:	4b2d      	ldr	r3, [pc, #180]	@ (810372c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103678:	691b      	ldr	r3, [r3, #16]
 810367a:	4a2c      	ldr	r2, [pc, #176]	@ (810372c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810367c:	f043 0304 	orr.w	r3, r3, #4
 8103680:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103682:	f3bf 8f4f 	dsb	sy
}
 8103686:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103688:	f3bf 8f6f 	isb	sy
}
 810368c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810368e:	7afb      	ldrb	r3, [r7, #11]
 8103690:	2b01      	cmp	r3, #1
 8103692:	d101      	bne.n	8103698 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103694:	bf30      	wfi
 8103696:	e000      	b.n	810369a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103698:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810369a:	4b24      	ldr	r3, [pc, #144]	@ (810372c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810369c:	691b      	ldr	r3, [r3, #16]
 810369e:	4a23      	ldr	r2, [pc, #140]	@ (810372c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036a0:	f023 0304 	bic.w	r3, r3, #4
 81036a4:	6113      	str	r3, [r2, #16]
 81036a6:	e03c      	b.n	8103722 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	2b01      	cmp	r3, #1
 81036ac:	d123      	bne.n	81036f6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81036ae:	f7ff ff4d 	bl	810354c <HAL_GetCurrentCPUID>
 81036b2:	4603      	mov	r3, r0
 81036b4:	2b01      	cmp	r3, #1
 81036b6:	d133      	bne.n	8103720 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81036b8:	4b1b      	ldr	r3, [pc, #108]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036ba:	695b      	ldr	r3, [r3, #20]
 81036bc:	4a1a      	ldr	r2, [pc, #104]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036be:	f023 0302 	bic.w	r3, r3, #2
 81036c2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036c4:	4b19      	ldr	r3, [pc, #100]	@ (810372c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036c6:	691b      	ldr	r3, [r3, #16]
 81036c8:	4a18      	ldr	r2, [pc, #96]	@ (810372c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036ca:	f043 0304 	orr.w	r3, r3, #4
 81036ce:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81036d0:	f3bf 8f4f 	dsb	sy
}
 81036d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81036d6:	f3bf 8f6f 	isb	sy
}
 81036da:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81036dc:	7afb      	ldrb	r3, [r7, #11]
 81036de:	2b01      	cmp	r3, #1
 81036e0:	d101      	bne.n	81036e6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81036e2:	bf30      	wfi
 81036e4:	e000      	b.n	81036e8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81036e6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036e8:	4b10      	ldr	r3, [pc, #64]	@ (810372c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036ea:	691b      	ldr	r3, [r3, #16]
 81036ec:	4a0f      	ldr	r2, [pc, #60]	@ (810372c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036ee:	f023 0304 	bic.w	r3, r3, #4
 81036f2:	6113      	str	r3, [r2, #16]
 81036f4:	e015      	b.n	8103722 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81036f6:	f7ff ff29 	bl	810354c <HAL_GetCurrentCPUID>
 81036fa:	4603      	mov	r3, r0
 81036fc:	2b03      	cmp	r3, #3
 81036fe:	d106      	bne.n	810370e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103700:	4b09      	ldr	r3, [pc, #36]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103702:	691b      	ldr	r3, [r3, #16]
 8103704:	4a08      	ldr	r2, [pc, #32]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103706:	f023 0304 	bic.w	r3, r3, #4
 810370a:	6113      	str	r3, [r2, #16]
 810370c:	e009      	b.n	8103722 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810370e:	4b06      	ldr	r3, [pc, #24]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103710:	695b      	ldr	r3, [r3, #20]
 8103712:	4a05      	ldr	r2, [pc, #20]	@ (8103728 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103714:	f023 0304 	bic.w	r3, r3, #4
 8103718:	6153      	str	r3, [r2, #20]
 810371a:	e002      	b.n	8103722 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810371c:	bf00      	nop
 810371e:	e000      	b.n	8103722 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103720:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103722:	3710      	adds	r7, #16
 8103724:	46bd      	mov	sp, r7
 8103726:	bd80      	pop	{r7, pc}
 8103728:	58024800 	.word	0x58024800
 810372c:	e000ed00 	.word	0xe000ed00

08103730 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103730:	b580      	push	{r7, lr}
 8103732:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103734:	f7ff ff0a 	bl	810354c <HAL_GetCurrentCPUID>
 8103738:	4603      	mov	r3, r0
 810373a:	2b03      	cmp	r3, #3
 810373c:	d101      	bne.n	8103742 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810373e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103740:	e001      	b.n	8103746 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103742:	bf40      	sev
    __WFE ();
 8103744:	bf20      	wfe
}
 8103746:	bf00      	nop
 8103748:	bd80      	pop	{r7, pc}
	...

0810374c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810374c:	b480      	push	{r7}
 810374e:	b089      	sub	sp, #36	@ 0x24
 8103750:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103752:	4bb3      	ldr	r3, [pc, #716]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103754:	691b      	ldr	r3, [r3, #16]
 8103756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810375a:	2b18      	cmp	r3, #24
 810375c:	f200 8155 	bhi.w	8103a0a <HAL_RCC_GetSysClockFreq+0x2be>
 8103760:	a201      	add	r2, pc, #4	@ (adr r2, 8103768 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103766:	bf00      	nop
 8103768:	081037cd 	.word	0x081037cd
 810376c:	08103a0b 	.word	0x08103a0b
 8103770:	08103a0b 	.word	0x08103a0b
 8103774:	08103a0b 	.word	0x08103a0b
 8103778:	08103a0b 	.word	0x08103a0b
 810377c:	08103a0b 	.word	0x08103a0b
 8103780:	08103a0b 	.word	0x08103a0b
 8103784:	08103a0b 	.word	0x08103a0b
 8103788:	081037f3 	.word	0x081037f3
 810378c:	08103a0b 	.word	0x08103a0b
 8103790:	08103a0b 	.word	0x08103a0b
 8103794:	08103a0b 	.word	0x08103a0b
 8103798:	08103a0b 	.word	0x08103a0b
 810379c:	08103a0b 	.word	0x08103a0b
 81037a0:	08103a0b 	.word	0x08103a0b
 81037a4:	08103a0b 	.word	0x08103a0b
 81037a8:	081037f9 	.word	0x081037f9
 81037ac:	08103a0b 	.word	0x08103a0b
 81037b0:	08103a0b 	.word	0x08103a0b
 81037b4:	08103a0b 	.word	0x08103a0b
 81037b8:	08103a0b 	.word	0x08103a0b
 81037bc:	08103a0b 	.word	0x08103a0b
 81037c0:	08103a0b 	.word	0x08103a0b
 81037c4:	08103a0b 	.word	0x08103a0b
 81037c8:	081037ff 	.word	0x081037ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81037cc:	4b94      	ldr	r3, [pc, #592]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	f003 0320 	and.w	r3, r3, #32
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d009      	beq.n	81037ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81037d8:	4b91      	ldr	r3, [pc, #580]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037da:	681b      	ldr	r3, [r3, #0]
 81037dc:	08db      	lsrs	r3, r3, #3
 81037de:	f003 0303 	and.w	r3, r3, #3
 81037e2:	4a90      	ldr	r2, [pc, #576]	@ (8103a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037e4:	fa22 f303 	lsr.w	r3, r2, r3
 81037e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81037ea:	e111      	b.n	8103a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81037ec:	4b8d      	ldr	r3, [pc, #564]	@ (8103a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037ee:	61bb      	str	r3, [r7, #24]
      break;
 81037f0:	e10e      	b.n	8103a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81037f2:	4b8d      	ldr	r3, [pc, #564]	@ (8103a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81037f4:	61bb      	str	r3, [r7, #24]
      break;
 81037f6:	e10b      	b.n	8103a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81037f8:	4b8c      	ldr	r3, [pc, #560]	@ (8103a2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81037fa:	61bb      	str	r3, [r7, #24]
      break;
 81037fc:	e108      	b.n	8103a10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81037fe:	4b88      	ldr	r3, [pc, #544]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103802:	f003 0303 	and.w	r3, r3, #3
 8103806:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103808:	4b85      	ldr	r3, [pc, #532]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810380c:	091b      	lsrs	r3, r3, #4
 810380e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103812:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103814:	4b82      	ldr	r3, [pc, #520]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103818:	f003 0301 	and.w	r3, r3, #1
 810381c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810381e:	4b80      	ldr	r3, [pc, #512]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103822:	08db      	lsrs	r3, r3, #3
 8103824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103828:	68fa      	ldr	r2, [r7, #12]
 810382a:	fb02 f303 	mul.w	r3, r2, r3
 810382e:	ee07 3a90 	vmov	s15, r3
 8103832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103836:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810383a:	693b      	ldr	r3, [r7, #16]
 810383c:	2b00      	cmp	r3, #0
 810383e:	f000 80e1 	beq.w	8103a04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103842:	697b      	ldr	r3, [r7, #20]
 8103844:	2b02      	cmp	r3, #2
 8103846:	f000 8083 	beq.w	8103950 <HAL_RCC_GetSysClockFreq+0x204>
 810384a:	697b      	ldr	r3, [r7, #20]
 810384c:	2b02      	cmp	r3, #2
 810384e:	f200 80a1 	bhi.w	8103994 <HAL_RCC_GetSysClockFreq+0x248>
 8103852:	697b      	ldr	r3, [r7, #20]
 8103854:	2b00      	cmp	r3, #0
 8103856:	d003      	beq.n	8103860 <HAL_RCC_GetSysClockFreq+0x114>
 8103858:	697b      	ldr	r3, [r7, #20]
 810385a:	2b01      	cmp	r3, #1
 810385c:	d056      	beq.n	810390c <HAL_RCC_GetSysClockFreq+0x1c0>
 810385e:	e099      	b.n	8103994 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103860:	4b6f      	ldr	r3, [pc, #444]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	f003 0320 	and.w	r3, r3, #32
 8103868:	2b00      	cmp	r3, #0
 810386a:	d02d      	beq.n	81038c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810386c:	4b6c      	ldr	r3, [pc, #432]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	08db      	lsrs	r3, r3, #3
 8103872:	f003 0303 	and.w	r3, r3, #3
 8103876:	4a6b      	ldr	r2, [pc, #428]	@ (8103a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103878:	fa22 f303 	lsr.w	r3, r2, r3
 810387c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	ee07 3a90 	vmov	s15, r3
 8103884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103888:	693b      	ldr	r3, [r7, #16]
 810388a:	ee07 3a90 	vmov	s15, r3
 810388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103896:	4b62      	ldr	r3, [pc, #392]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810389e:	ee07 3a90 	vmov	s15, r3
 81038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81038aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8103a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 81038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81038c6:	e087      	b.n	81039d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81038c8:	693b      	ldr	r3, [r7, #16]
 81038ca:	ee07 3a90 	vmov	s15, r3
 81038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8103a34 <HAL_RCC_GetSysClockFreq+0x2e8>
 81038d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038da:	4b51      	ldr	r3, [pc, #324]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81038de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038e2:	ee07 3a90 	vmov	s15, r3
 81038e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81038ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8103a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 81038f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81038fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810390a:	e065      	b.n	81039d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810390c:	693b      	ldr	r3, [r7, #16]
 810390e:	ee07 3a90 	vmov	s15, r3
 8103912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103916:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8103a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 810391a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810391e:	4b40      	ldr	r3, [pc, #256]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103926:	ee07 3a90 	vmov	s15, r3
 810392a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810392e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103932:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8103a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810393e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103946:	ee67 7a27 	vmul.f32	s15, s14, s15
 810394a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810394e:	e043      	b.n	81039d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103950:	693b      	ldr	r3, [r7, #16]
 8103952:	ee07 3a90 	vmov	s15, r3
 8103956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810395a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103a3c <HAL_RCC_GetSysClockFreq+0x2f0>
 810395e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103962:	4b2f      	ldr	r3, [pc, #188]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810396a:	ee07 3a90 	vmov	s15, r3
 810396e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103972:	ed97 6a02 	vldr	s12, [r7, #8]
 8103976:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8103a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 810397a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810397e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810398e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103992:	e021      	b.n	81039d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103994:	693b      	ldr	r3, [r7, #16]
 8103996:	ee07 3a90 	vmov	s15, r3
 810399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810399e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8103a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 81039a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039a6:	4b1e      	ldr	r3, [pc, #120]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81039ae:	ee07 3a90 	vmov	s15, r3
 81039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81039ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8103a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 81039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81039d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81039d8:	4b11      	ldr	r3, [pc, #68]	@ (8103a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81039dc:	0a5b      	lsrs	r3, r3, #9
 81039de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81039e2:	3301      	adds	r3, #1
 81039e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81039e6:	683b      	ldr	r3, [r7, #0]
 81039e8:	ee07 3a90 	vmov	s15, r3
 81039ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81039f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81039f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81039f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81039fc:	ee17 3a90 	vmov	r3, s15
 8103a00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103a02:	e005      	b.n	8103a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103a04:	2300      	movs	r3, #0
 8103a06:	61bb      	str	r3, [r7, #24]
      break;
 8103a08:	e002      	b.n	8103a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8103a0a:	4b07      	ldr	r3, [pc, #28]	@ (8103a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103a0c:	61bb      	str	r3, [r7, #24]
      break;
 8103a0e:	bf00      	nop
  }

  return sysclockfreq;
 8103a10:	69bb      	ldr	r3, [r7, #24]
}
 8103a12:	4618      	mov	r0, r3
 8103a14:	3724      	adds	r7, #36	@ 0x24
 8103a16:	46bd      	mov	sp, r7
 8103a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a1c:	4770      	bx	lr
 8103a1e:	bf00      	nop
 8103a20:	58024400 	.word	0x58024400
 8103a24:	03d09000 	.word	0x03d09000
 8103a28:	003d0900 	.word	0x003d0900
 8103a2c:	017d7840 	.word	0x017d7840
 8103a30:	46000000 	.word	0x46000000
 8103a34:	4c742400 	.word	0x4c742400
 8103a38:	4a742400 	.word	0x4a742400
 8103a3c:	4bbebc20 	.word	0x4bbebc20

08103a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103a40:	b580      	push	{r7, lr}
 8103a42:	b082      	sub	sp, #8
 8103a44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103a46:	f7ff fe81 	bl	810374c <HAL_RCC_GetSysClockFreq>
 8103a4a:	4602      	mov	r2, r0
 8103a4c:	4b11      	ldr	r3, [pc, #68]	@ (8103a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8103a4e:	699b      	ldr	r3, [r3, #24]
 8103a50:	0a1b      	lsrs	r3, r3, #8
 8103a52:	f003 030f 	and.w	r3, r3, #15
 8103a56:	4910      	ldr	r1, [pc, #64]	@ (8103a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a58:	5ccb      	ldrb	r3, [r1, r3]
 8103a5a:	f003 031f 	and.w	r3, r3, #31
 8103a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8103a62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103a64:	4b0b      	ldr	r3, [pc, #44]	@ (8103a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8103a66:	699b      	ldr	r3, [r3, #24]
 8103a68:	f003 030f 	and.w	r3, r3, #15
 8103a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8103a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a6e:	5cd3      	ldrb	r3, [r2, r3]
 8103a70:	f003 031f 	and.w	r3, r3, #31
 8103a74:	687a      	ldr	r2, [r7, #4]
 8103a76:	fa22 f303 	lsr.w	r3, r2, r3
 8103a7a:	4a08      	ldr	r2, [pc, #32]	@ (8103a9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a7c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103a7e:	4b07      	ldr	r3, [pc, #28]	@ (8103a9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	4a07      	ldr	r2, [pc, #28]	@ (8103aa0 <HAL_RCC_GetHCLKFreq+0x60>)
 8103a84:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103a86:	4b05      	ldr	r3, [pc, #20]	@ (8103a9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a88:	681b      	ldr	r3, [r3, #0]
}
 8103a8a:	4618      	mov	r0, r3
 8103a8c:	3708      	adds	r7, #8
 8103a8e:	46bd      	mov	sp, r7
 8103a90:	bd80      	pop	{r7, pc}
 8103a92:	bf00      	nop
 8103a94:	58024400 	.word	0x58024400
 8103a98:	08107f9c 	.word	0x08107f9c
 8103a9c:	10000004 	.word	0x10000004
 8103aa0:	10000000 	.word	0x10000000

08103aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103aa4:	b580      	push	{r7, lr}
 8103aa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103aa8:	f7ff ffca 	bl	8103a40 <HAL_RCC_GetHCLKFreq>
 8103aac:	4602      	mov	r2, r0
 8103aae:	4b06      	ldr	r3, [pc, #24]	@ (8103ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103ab0:	69db      	ldr	r3, [r3, #28]
 8103ab2:	091b      	lsrs	r3, r3, #4
 8103ab4:	f003 0307 	and.w	r3, r3, #7
 8103ab8:	4904      	ldr	r1, [pc, #16]	@ (8103acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8103aba:	5ccb      	ldrb	r3, [r1, r3]
 8103abc:	f003 031f 	and.w	r3, r3, #31
 8103ac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103ac4:	4618      	mov	r0, r3
 8103ac6:	bd80      	pop	{r7, pc}
 8103ac8:	58024400 	.word	0x58024400
 8103acc:	08107f9c 	.word	0x08107f9c

08103ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8103ad0:	b480      	push	{r7}
 8103ad2:	b083      	sub	sp, #12
 8103ad4:	af00      	add	r7, sp, #0
 8103ad6:	6078      	str	r0, [r7, #4]
 8103ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	223f      	movs	r2, #63	@ 0x3f
 8103ade:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8103ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8103b4c <HAL_RCC_GetClockConfig+0x7c>)
 8103ae2:	691b      	ldr	r3, [r3, #16]
 8103ae4:	f003 0207 	and.w	r2, r3, #7
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103aec:	4b17      	ldr	r3, [pc, #92]	@ (8103b4c <HAL_RCC_GetClockConfig+0x7c>)
 8103aee:	699b      	ldr	r3, [r3, #24]
 8103af0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8103af8:	4b14      	ldr	r3, [pc, #80]	@ (8103b4c <HAL_RCC_GetClockConfig+0x7c>)
 8103afa:	699b      	ldr	r3, [r3, #24]
 8103afc:	f003 020f 	and.w	r2, r3, #15
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8103b04:	4b11      	ldr	r3, [pc, #68]	@ (8103b4c <HAL_RCC_GetClockConfig+0x7c>)
 8103b06:	699b      	ldr	r3, [r3, #24]
 8103b08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8103b10:	4b0e      	ldr	r3, [pc, #56]	@ (8103b4c <HAL_RCC_GetClockConfig+0x7c>)
 8103b12:	69db      	ldr	r3, [r3, #28]
 8103b14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8103b4c <HAL_RCC_GetClockConfig+0x7c>)
 8103b1e:	69db      	ldr	r3, [r3, #28]
 8103b20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8103b28:	4b08      	ldr	r3, [pc, #32]	@ (8103b4c <HAL_RCC_GetClockConfig+0x7c>)
 8103b2a:	6a1b      	ldr	r3, [r3, #32]
 8103b2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103b34:	4b06      	ldr	r3, [pc, #24]	@ (8103b50 <HAL_RCC_GetClockConfig+0x80>)
 8103b36:	681b      	ldr	r3, [r3, #0]
 8103b38:	f003 020f 	and.w	r2, r3, #15
 8103b3c:	683b      	ldr	r3, [r7, #0]
 8103b3e:	601a      	str	r2, [r3, #0]
}
 8103b40:	bf00      	nop
 8103b42:	370c      	adds	r7, #12
 8103b44:	46bd      	mov	sp, r7
 8103b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b4a:	4770      	bx	lr
 8103b4c:	58024400 	.word	0x58024400
 8103b50:	52002000 	.word	0x52002000

08103b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103b54:	b580      	push	{r7, lr}
 8103b56:	b082      	sub	sp, #8
 8103b58:	af00      	add	r7, sp, #0
 8103b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	2b00      	cmp	r3, #0
 8103b60:	d101      	bne.n	8103b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103b62:	2301      	movs	r3, #1
 8103b64:	e049      	b.n	8103bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103b6c:	b2db      	uxtb	r3, r3
 8103b6e:	2b00      	cmp	r3, #0
 8103b70:	d106      	bne.n	8103b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	2200      	movs	r2, #0
 8103b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103b7a:	6878      	ldr	r0, [r7, #4]
 8103b7c:	f000 f841 	bl	8103c02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	2202      	movs	r2, #2
 8103b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681a      	ldr	r2, [r3, #0]
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	3304      	adds	r3, #4
 8103b90:	4619      	mov	r1, r3
 8103b92:	4610      	mov	r0, r2
 8103b94:	f000 f9e8 	bl	8103f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	2201      	movs	r2, #1
 8103b9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103ba0:	687b      	ldr	r3, [r7, #4]
 8103ba2:	2201      	movs	r2, #1
 8103ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	2201      	movs	r2, #1
 8103bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	2201      	movs	r2, #1
 8103bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8103bb8:	687b      	ldr	r3, [r7, #4]
 8103bba:	2201      	movs	r2, #1
 8103bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	2201      	movs	r2, #1
 8103bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	2201      	movs	r2, #1
 8103bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	2201      	movs	r2, #1
 8103bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	2201      	movs	r2, #1
 8103bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	2201      	movs	r2, #1
 8103be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	2201      	movs	r2, #1
 8103bec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	2201      	movs	r2, #1
 8103bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8103bf8:	2300      	movs	r3, #0
}
 8103bfa:	4618      	mov	r0, r3
 8103bfc:	3708      	adds	r7, #8
 8103bfe:	46bd      	mov	sp, r7
 8103c00:	bd80      	pop	{r7, pc}

08103c02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8103c02:	b480      	push	{r7}
 8103c04:	b083      	sub	sp, #12
 8103c06:	af00      	add	r7, sp, #0
 8103c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8103c0a:	bf00      	nop
 8103c0c:	370c      	adds	r7, #12
 8103c0e:	46bd      	mov	sp, r7
 8103c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c14:	4770      	bx	lr
	...

08103c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103c18:	b480      	push	{r7}
 8103c1a:	b085      	sub	sp, #20
 8103c1c:	af00      	add	r7, sp, #0
 8103c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103c26:	b2db      	uxtb	r3, r3
 8103c28:	2b01      	cmp	r3, #1
 8103c2a:	d001      	beq.n	8103c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103c2c:	2301      	movs	r3, #1
 8103c2e:	e054      	b.n	8103cda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	2202      	movs	r2, #2
 8103c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	68da      	ldr	r2, [r3, #12]
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	681b      	ldr	r3, [r3, #0]
 8103c42:	f042 0201 	orr.w	r2, r2, #1
 8103c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103c48:	687b      	ldr	r3, [r7, #4]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	4a26      	ldr	r2, [pc, #152]	@ (8103ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8103c4e:	4293      	cmp	r3, r2
 8103c50:	d022      	beq.n	8103c98 <HAL_TIM_Base_Start_IT+0x80>
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103c5a:	d01d      	beq.n	8103c98 <HAL_TIM_Base_Start_IT+0x80>
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	4a22      	ldr	r2, [pc, #136]	@ (8103cec <HAL_TIM_Base_Start_IT+0xd4>)
 8103c62:	4293      	cmp	r3, r2
 8103c64:	d018      	beq.n	8103c98 <HAL_TIM_Base_Start_IT+0x80>
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	4a21      	ldr	r2, [pc, #132]	@ (8103cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8103c6c:	4293      	cmp	r3, r2
 8103c6e:	d013      	beq.n	8103c98 <HAL_TIM_Base_Start_IT+0x80>
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	4a1f      	ldr	r2, [pc, #124]	@ (8103cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8103c76:	4293      	cmp	r3, r2
 8103c78:	d00e      	beq.n	8103c98 <HAL_TIM_Base_Start_IT+0x80>
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8103cf8 <HAL_TIM_Base_Start_IT+0xe0>)
 8103c80:	4293      	cmp	r3, r2
 8103c82:	d009      	beq.n	8103c98 <HAL_TIM_Base_Start_IT+0x80>
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	681b      	ldr	r3, [r3, #0]
 8103c88:	4a1c      	ldr	r2, [pc, #112]	@ (8103cfc <HAL_TIM_Base_Start_IT+0xe4>)
 8103c8a:	4293      	cmp	r3, r2
 8103c8c:	d004      	beq.n	8103c98 <HAL_TIM_Base_Start_IT+0x80>
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	4a1b      	ldr	r2, [pc, #108]	@ (8103d00 <HAL_TIM_Base_Start_IT+0xe8>)
 8103c94:	4293      	cmp	r3, r2
 8103c96:	d115      	bne.n	8103cc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	689a      	ldr	r2, [r3, #8]
 8103c9e:	4b19      	ldr	r3, [pc, #100]	@ (8103d04 <HAL_TIM_Base_Start_IT+0xec>)
 8103ca0:	4013      	ands	r3, r2
 8103ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103ca4:	68fb      	ldr	r3, [r7, #12]
 8103ca6:	2b06      	cmp	r3, #6
 8103ca8:	d015      	beq.n	8103cd6 <HAL_TIM_Base_Start_IT+0xbe>
 8103caa:	68fb      	ldr	r3, [r7, #12]
 8103cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103cb0:	d011      	beq.n	8103cd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	681b      	ldr	r3, [r3, #0]
 8103cb6:	681a      	ldr	r2, [r3, #0]
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	f042 0201 	orr.w	r2, r2, #1
 8103cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103cc2:	e008      	b.n	8103cd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	681a      	ldr	r2, [r3, #0]
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	f042 0201 	orr.w	r2, r2, #1
 8103cd2:	601a      	str	r2, [r3, #0]
 8103cd4:	e000      	b.n	8103cd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103cd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8103cd8:	2300      	movs	r3, #0
}
 8103cda:	4618      	mov	r0, r3
 8103cdc:	3714      	adds	r7, #20
 8103cde:	46bd      	mov	sp, r7
 8103ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ce4:	4770      	bx	lr
 8103ce6:	bf00      	nop
 8103ce8:	40010000 	.word	0x40010000
 8103cec:	40000400 	.word	0x40000400
 8103cf0:	40000800 	.word	0x40000800
 8103cf4:	40000c00 	.word	0x40000c00
 8103cf8:	40010400 	.word	0x40010400
 8103cfc:	40001800 	.word	0x40001800
 8103d00:	40014000 	.word	0x40014000
 8103d04:	00010007 	.word	0x00010007

08103d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103d08:	b580      	push	{r7, lr}
 8103d0a:	b084      	sub	sp, #16
 8103d0c:	af00      	add	r7, sp, #0
 8103d0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	68db      	ldr	r3, [r3, #12]
 8103d16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	691b      	ldr	r3, [r3, #16]
 8103d1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8103d20:	68bb      	ldr	r3, [r7, #8]
 8103d22:	f003 0302 	and.w	r3, r3, #2
 8103d26:	2b00      	cmp	r3, #0
 8103d28:	d020      	beq.n	8103d6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8103d2a:	68fb      	ldr	r3, [r7, #12]
 8103d2c:	f003 0302 	and.w	r3, r3, #2
 8103d30:	2b00      	cmp	r3, #0
 8103d32:	d01b      	beq.n	8103d6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	f06f 0202 	mvn.w	r2, #2
 8103d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	2201      	movs	r2, #1
 8103d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	699b      	ldr	r3, [r3, #24]
 8103d4a:	f003 0303 	and.w	r3, r3, #3
 8103d4e:	2b00      	cmp	r3, #0
 8103d50:	d003      	beq.n	8103d5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8103d52:	6878      	ldr	r0, [r7, #4]
 8103d54:	f000 f8e9 	bl	8103f2a <HAL_TIM_IC_CaptureCallback>
 8103d58:	e005      	b.n	8103d66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d5a:	6878      	ldr	r0, [r7, #4]
 8103d5c:	f000 f8db 	bl	8103f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d60:	6878      	ldr	r0, [r7, #4]
 8103d62:	f000 f8ec 	bl	8103f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	2200      	movs	r2, #0
 8103d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8103d6c:	68bb      	ldr	r3, [r7, #8]
 8103d6e:	f003 0304 	and.w	r3, r3, #4
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	d020      	beq.n	8103db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8103d76:	68fb      	ldr	r3, [r7, #12]
 8103d78:	f003 0304 	and.w	r3, r3, #4
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d01b      	beq.n	8103db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	f06f 0204 	mvn.w	r2, #4
 8103d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	2202      	movs	r2, #2
 8103d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	699b      	ldr	r3, [r3, #24]
 8103d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103d9a:	2b00      	cmp	r3, #0
 8103d9c:	d003      	beq.n	8103da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103d9e:	6878      	ldr	r0, [r7, #4]
 8103da0:	f000 f8c3 	bl	8103f2a <HAL_TIM_IC_CaptureCallback>
 8103da4:	e005      	b.n	8103db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103da6:	6878      	ldr	r0, [r7, #4]
 8103da8:	f000 f8b5 	bl	8103f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103dac:	6878      	ldr	r0, [r7, #4]
 8103dae:	f000 f8c6 	bl	8103f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	2200      	movs	r2, #0
 8103db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8103db8:	68bb      	ldr	r3, [r7, #8]
 8103dba:	f003 0308 	and.w	r3, r3, #8
 8103dbe:	2b00      	cmp	r3, #0
 8103dc0:	d020      	beq.n	8103e04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8103dc2:	68fb      	ldr	r3, [r7, #12]
 8103dc4:	f003 0308 	and.w	r3, r3, #8
 8103dc8:	2b00      	cmp	r3, #0
 8103dca:	d01b      	beq.n	8103e04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	f06f 0208 	mvn.w	r2, #8
 8103dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	2204      	movs	r2, #4
 8103dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	681b      	ldr	r3, [r3, #0]
 8103de0:	69db      	ldr	r3, [r3, #28]
 8103de2:	f003 0303 	and.w	r3, r3, #3
 8103de6:	2b00      	cmp	r3, #0
 8103de8:	d003      	beq.n	8103df2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103dea:	6878      	ldr	r0, [r7, #4]
 8103dec:	f000 f89d 	bl	8103f2a <HAL_TIM_IC_CaptureCallback>
 8103df0:	e005      	b.n	8103dfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103df2:	6878      	ldr	r0, [r7, #4]
 8103df4:	f000 f88f 	bl	8103f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103df8:	6878      	ldr	r0, [r7, #4]
 8103dfa:	f000 f8a0 	bl	8103f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	2200      	movs	r2, #0
 8103e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8103e04:	68bb      	ldr	r3, [r7, #8]
 8103e06:	f003 0310 	and.w	r3, r3, #16
 8103e0a:	2b00      	cmp	r3, #0
 8103e0c:	d020      	beq.n	8103e50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8103e0e:	68fb      	ldr	r3, [r7, #12]
 8103e10:	f003 0310 	and.w	r3, r3, #16
 8103e14:	2b00      	cmp	r3, #0
 8103e16:	d01b      	beq.n	8103e50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	f06f 0210 	mvn.w	r2, #16
 8103e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	2208      	movs	r2, #8
 8103e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	681b      	ldr	r3, [r3, #0]
 8103e2c:	69db      	ldr	r3, [r3, #28]
 8103e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103e32:	2b00      	cmp	r3, #0
 8103e34:	d003      	beq.n	8103e3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103e36:	6878      	ldr	r0, [r7, #4]
 8103e38:	f000 f877 	bl	8103f2a <HAL_TIM_IC_CaptureCallback>
 8103e3c:	e005      	b.n	8103e4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103e3e:	6878      	ldr	r0, [r7, #4]
 8103e40:	f000 f869 	bl	8103f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103e44:	6878      	ldr	r0, [r7, #4]
 8103e46:	f000 f87a 	bl	8103f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	2200      	movs	r2, #0
 8103e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8103e50:	68bb      	ldr	r3, [r7, #8]
 8103e52:	f003 0301 	and.w	r3, r3, #1
 8103e56:	2b00      	cmp	r3, #0
 8103e58:	d00c      	beq.n	8103e74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8103e5a:	68fb      	ldr	r3, [r7, #12]
 8103e5c:	f003 0301 	and.w	r3, r3, #1
 8103e60:	2b00      	cmp	r3, #0
 8103e62:	d007      	beq.n	8103e74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	681b      	ldr	r3, [r3, #0]
 8103e68:	f06f 0201 	mvn.w	r2, #1
 8103e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103e6e:	6878      	ldr	r0, [r7, #4]
 8103e70:	f7fc fbee 	bl	8100650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103e74:	68bb      	ldr	r3, [r7, #8]
 8103e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e7a:	2b00      	cmp	r3, #0
 8103e7c:	d104      	bne.n	8103e88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8103e7e:	68bb      	ldr	r3, [r7, #8]
 8103e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	d00c      	beq.n	8103ea2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103e88:	68fb      	ldr	r3, [r7, #12]
 8103e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e8e:	2b00      	cmp	r3, #0
 8103e90:	d007      	beq.n	8103ea2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	681b      	ldr	r3, [r3, #0]
 8103e96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8103e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103e9c:	6878      	ldr	r0, [r7, #4]
 8103e9e:	f000 f913 	bl	81040c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8103ea2:	68bb      	ldr	r3, [r7, #8]
 8103ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103ea8:	2b00      	cmp	r3, #0
 8103eaa:	d00c      	beq.n	8103ec6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103eac:	68fb      	ldr	r3, [r7, #12]
 8103eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103eb2:	2b00      	cmp	r3, #0
 8103eb4:	d007      	beq.n	8103ec6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103eb6:	687b      	ldr	r3, [r7, #4]
 8103eb8:	681b      	ldr	r3, [r3, #0]
 8103eba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8103ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103ec0:	6878      	ldr	r0, [r7, #4]
 8103ec2:	f000 f90b 	bl	81040dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8103ec6:	68bb      	ldr	r3, [r7, #8]
 8103ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103ecc:	2b00      	cmp	r3, #0
 8103ece:	d00c      	beq.n	8103eea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103ed6:	2b00      	cmp	r3, #0
 8103ed8:	d007      	beq.n	8103eea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	681b      	ldr	r3, [r3, #0]
 8103ede:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8103ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103ee4:	6878      	ldr	r0, [r7, #4]
 8103ee6:	f000 f834 	bl	8103f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8103eea:	68bb      	ldr	r3, [r7, #8]
 8103eec:	f003 0320 	and.w	r3, r3, #32
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d00c      	beq.n	8103f0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8103ef4:	68fb      	ldr	r3, [r7, #12]
 8103ef6:	f003 0320 	and.w	r3, r3, #32
 8103efa:	2b00      	cmp	r3, #0
 8103efc:	d007      	beq.n	8103f0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	681b      	ldr	r3, [r3, #0]
 8103f02:	f06f 0220 	mvn.w	r2, #32
 8103f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103f08:	6878      	ldr	r0, [r7, #4]
 8103f0a:	f000 f8d3 	bl	81040b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103f0e:	bf00      	nop
 8103f10:	3710      	adds	r7, #16
 8103f12:	46bd      	mov	sp, r7
 8103f14:	bd80      	pop	{r7, pc}

08103f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103f16:	b480      	push	{r7}
 8103f18:	b083      	sub	sp, #12
 8103f1a:	af00      	add	r7, sp, #0
 8103f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103f1e:	bf00      	nop
 8103f20:	370c      	adds	r7, #12
 8103f22:	46bd      	mov	sp, r7
 8103f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f28:	4770      	bx	lr

08103f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8103f2a:	b480      	push	{r7}
 8103f2c:	b083      	sub	sp, #12
 8103f2e:	af00      	add	r7, sp, #0
 8103f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8103f32:	bf00      	nop
 8103f34:	370c      	adds	r7, #12
 8103f36:	46bd      	mov	sp, r7
 8103f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f3c:	4770      	bx	lr

08103f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103f3e:	b480      	push	{r7}
 8103f40:	b083      	sub	sp, #12
 8103f42:	af00      	add	r7, sp, #0
 8103f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103f46:	bf00      	nop
 8103f48:	370c      	adds	r7, #12
 8103f4a:	46bd      	mov	sp, r7
 8103f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f50:	4770      	bx	lr

08103f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103f52:	b480      	push	{r7}
 8103f54:	b083      	sub	sp, #12
 8103f56:	af00      	add	r7, sp, #0
 8103f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103f5a:	bf00      	nop
 8103f5c:	370c      	adds	r7, #12
 8103f5e:	46bd      	mov	sp, r7
 8103f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f64:	4770      	bx	lr
	...

08103f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8103f68:	b480      	push	{r7}
 8103f6a:	b085      	sub	sp, #20
 8103f6c:	af00      	add	r7, sp, #0
 8103f6e:	6078      	str	r0, [r7, #4]
 8103f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	4a46      	ldr	r2, [pc, #280]	@ (8104094 <TIM_Base_SetConfig+0x12c>)
 8103f7c:	4293      	cmp	r3, r2
 8103f7e:	d013      	beq.n	8103fa8 <TIM_Base_SetConfig+0x40>
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103f86:	d00f      	beq.n	8103fa8 <TIM_Base_SetConfig+0x40>
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	4a43      	ldr	r2, [pc, #268]	@ (8104098 <TIM_Base_SetConfig+0x130>)
 8103f8c:	4293      	cmp	r3, r2
 8103f8e:	d00b      	beq.n	8103fa8 <TIM_Base_SetConfig+0x40>
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	4a42      	ldr	r2, [pc, #264]	@ (810409c <TIM_Base_SetConfig+0x134>)
 8103f94:	4293      	cmp	r3, r2
 8103f96:	d007      	beq.n	8103fa8 <TIM_Base_SetConfig+0x40>
 8103f98:	687b      	ldr	r3, [r7, #4]
 8103f9a:	4a41      	ldr	r2, [pc, #260]	@ (81040a0 <TIM_Base_SetConfig+0x138>)
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d003      	beq.n	8103fa8 <TIM_Base_SetConfig+0x40>
 8103fa0:	687b      	ldr	r3, [r7, #4]
 8103fa2:	4a40      	ldr	r2, [pc, #256]	@ (81040a4 <TIM_Base_SetConfig+0x13c>)
 8103fa4:	4293      	cmp	r3, r2
 8103fa6:	d108      	bne.n	8103fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103fa8:	68fb      	ldr	r3, [r7, #12]
 8103faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8103fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103fb0:	683b      	ldr	r3, [r7, #0]
 8103fb2:	685b      	ldr	r3, [r3, #4]
 8103fb4:	68fa      	ldr	r2, [r7, #12]
 8103fb6:	4313      	orrs	r3, r2
 8103fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	4a35      	ldr	r2, [pc, #212]	@ (8104094 <TIM_Base_SetConfig+0x12c>)
 8103fbe:	4293      	cmp	r3, r2
 8103fc0:	d01f      	beq.n	8104002 <TIM_Base_SetConfig+0x9a>
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103fc8:	d01b      	beq.n	8104002 <TIM_Base_SetConfig+0x9a>
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	4a32      	ldr	r2, [pc, #200]	@ (8104098 <TIM_Base_SetConfig+0x130>)
 8103fce:	4293      	cmp	r3, r2
 8103fd0:	d017      	beq.n	8104002 <TIM_Base_SetConfig+0x9a>
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	4a31      	ldr	r2, [pc, #196]	@ (810409c <TIM_Base_SetConfig+0x134>)
 8103fd6:	4293      	cmp	r3, r2
 8103fd8:	d013      	beq.n	8104002 <TIM_Base_SetConfig+0x9a>
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	4a30      	ldr	r2, [pc, #192]	@ (81040a0 <TIM_Base_SetConfig+0x138>)
 8103fde:	4293      	cmp	r3, r2
 8103fe0:	d00f      	beq.n	8104002 <TIM_Base_SetConfig+0x9a>
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	4a2f      	ldr	r2, [pc, #188]	@ (81040a4 <TIM_Base_SetConfig+0x13c>)
 8103fe6:	4293      	cmp	r3, r2
 8103fe8:	d00b      	beq.n	8104002 <TIM_Base_SetConfig+0x9a>
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	4a2e      	ldr	r2, [pc, #184]	@ (81040a8 <TIM_Base_SetConfig+0x140>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d007      	beq.n	8104002 <TIM_Base_SetConfig+0x9a>
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	4a2d      	ldr	r2, [pc, #180]	@ (81040ac <TIM_Base_SetConfig+0x144>)
 8103ff6:	4293      	cmp	r3, r2
 8103ff8:	d003      	beq.n	8104002 <TIM_Base_SetConfig+0x9a>
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	4a2c      	ldr	r2, [pc, #176]	@ (81040b0 <TIM_Base_SetConfig+0x148>)
 8103ffe:	4293      	cmp	r3, r2
 8104000:	d108      	bne.n	8104014 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8104002:	68fb      	ldr	r3, [r7, #12]
 8104004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8104008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810400a:	683b      	ldr	r3, [r7, #0]
 810400c:	68db      	ldr	r3, [r3, #12]
 810400e:	68fa      	ldr	r2, [r7, #12]
 8104010:	4313      	orrs	r3, r2
 8104012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104014:	68fb      	ldr	r3, [r7, #12]
 8104016:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810401a:	683b      	ldr	r3, [r7, #0]
 810401c:	695b      	ldr	r3, [r3, #20]
 810401e:	4313      	orrs	r3, r2
 8104020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	68fa      	ldr	r2, [r7, #12]
 8104026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8104028:	683b      	ldr	r3, [r7, #0]
 810402a:	689a      	ldr	r2, [r3, #8]
 810402c:	687b      	ldr	r3, [r7, #4]
 810402e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104030:	683b      	ldr	r3, [r7, #0]
 8104032:	681a      	ldr	r2, [r3, #0]
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	4a16      	ldr	r2, [pc, #88]	@ (8104094 <TIM_Base_SetConfig+0x12c>)
 810403c:	4293      	cmp	r3, r2
 810403e:	d00f      	beq.n	8104060 <TIM_Base_SetConfig+0xf8>
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	4a18      	ldr	r2, [pc, #96]	@ (81040a4 <TIM_Base_SetConfig+0x13c>)
 8104044:	4293      	cmp	r3, r2
 8104046:	d00b      	beq.n	8104060 <TIM_Base_SetConfig+0xf8>
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	4a17      	ldr	r2, [pc, #92]	@ (81040a8 <TIM_Base_SetConfig+0x140>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d007      	beq.n	8104060 <TIM_Base_SetConfig+0xf8>
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	4a16      	ldr	r2, [pc, #88]	@ (81040ac <TIM_Base_SetConfig+0x144>)
 8104054:	4293      	cmp	r3, r2
 8104056:	d003      	beq.n	8104060 <TIM_Base_SetConfig+0xf8>
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	4a15      	ldr	r2, [pc, #84]	@ (81040b0 <TIM_Base_SetConfig+0x148>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d103      	bne.n	8104068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8104060:	683b      	ldr	r3, [r7, #0]
 8104062:	691a      	ldr	r2, [r3, #16]
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	2201      	movs	r2, #1
 810406c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	691b      	ldr	r3, [r3, #16]
 8104072:	f003 0301 	and.w	r3, r3, #1
 8104076:	2b01      	cmp	r3, #1
 8104078:	d105      	bne.n	8104086 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	691b      	ldr	r3, [r3, #16]
 810407e:	f023 0201 	bic.w	r2, r3, #1
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	611a      	str	r2, [r3, #16]
  }
}
 8104086:	bf00      	nop
 8104088:	3714      	adds	r7, #20
 810408a:	46bd      	mov	sp, r7
 810408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104090:	4770      	bx	lr
 8104092:	bf00      	nop
 8104094:	40010000 	.word	0x40010000
 8104098:	40000400 	.word	0x40000400
 810409c:	40000800 	.word	0x40000800
 81040a0:	40000c00 	.word	0x40000c00
 81040a4:	40010400 	.word	0x40010400
 81040a8:	40014000 	.word	0x40014000
 81040ac:	40014400 	.word	0x40014400
 81040b0:	40014800 	.word	0x40014800

081040b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81040b4:	b480      	push	{r7}
 81040b6:	b083      	sub	sp, #12
 81040b8:	af00      	add	r7, sp, #0
 81040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81040bc:	bf00      	nop
 81040be:	370c      	adds	r7, #12
 81040c0:	46bd      	mov	sp, r7
 81040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040c6:	4770      	bx	lr

081040c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81040c8:	b480      	push	{r7}
 81040ca:	b083      	sub	sp, #12
 81040cc:	af00      	add	r7, sp, #0
 81040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81040d0:	bf00      	nop
 81040d2:	370c      	adds	r7, #12
 81040d4:	46bd      	mov	sp, r7
 81040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040da:	4770      	bx	lr

081040dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81040dc:	b480      	push	{r7}
 81040de:	b083      	sub	sp, #12
 81040e0:	af00      	add	r7, sp, #0
 81040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81040e4:	bf00      	nop
 81040e6:	370c      	adds	r7, #12
 81040e8:	46bd      	mov	sp, r7
 81040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040ee:	4770      	bx	lr

081040f0 <__NVIC_SetPriority>:
{
 81040f0:	b480      	push	{r7}
 81040f2:	b083      	sub	sp, #12
 81040f4:	af00      	add	r7, sp, #0
 81040f6:	4603      	mov	r3, r0
 81040f8:	6039      	str	r1, [r7, #0]
 81040fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81040fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104100:	2b00      	cmp	r3, #0
 8104102:	db0a      	blt.n	810411a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104104:	683b      	ldr	r3, [r7, #0]
 8104106:	b2da      	uxtb	r2, r3
 8104108:	490c      	ldr	r1, [pc, #48]	@ (810413c <__NVIC_SetPriority+0x4c>)
 810410a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810410e:	0112      	lsls	r2, r2, #4
 8104110:	b2d2      	uxtb	r2, r2
 8104112:	440b      	add	r3, r1
 8104114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8104118:	e00a      	b.n	8104130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810411a:	683b      	ldr	r3, [r7, #0]
 810411c:	b2da      	uxtb	r2, r3
 810411e:	4908      	ldr	r1, [pc, #32]	@ (8104140 <__NVIC_SetPriority+0x50>)
 8104120:	88fb      	ldrh	r3, [r7, #6]
 8104122:	f003 030f 	and.w	r3, r3, #15
 8104126:	3b04      	subs	r3, #4
 8104128:	0112      	lsls	r2, r2, #4
 810412a:	b2d2      	uxtb	r2, r2
 810412c:	440b      	add	r3, r1
 810412e:	761a      	strb	r2, [r3, #24]
}
 8104130:	bf00      	nop
 8104132:	370c      	adds	r7, #12
 8104134:	46bd      	mov	sp, r7
 8104136:	f85d 7b04 	ldr.w	r7, [sp], #4
 810413a:	4770      	bx	lr
 810413c:	e000e100 	.word	0xe000e100
 8104140:	e000ed00 	.word	0xe000ed00

08104144 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8104144:	b580      	push	{r7, lr}
 8104146:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8104148:	4b05      	ldr	r3, [pc, #20]	@ (8104160 <SysTick_Handler+0x1c>)
 810414a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810414c:	f002 fe26 	bl	8106d9c <xTaskGetSchedulerState>
 8104150:	4603      	mov	r3, r0
 8104152:	2b01      	cmp	r3, #1
 8104154:	d001      	beq.n	810415a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8104156:	f000 fd9f 	bl	8104c98 <xPortSysTickHandler>
  }
}
 810415a:	bf00      	nop
 810415c:	bd80      	pop	{r7, pc}
 810415e:	bf00      	nop
 8104160:	e000e010 	.word	0xe000e010

08104164 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8104164:	b580      	push	{r7, lr}
 8104166:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8104168:	2100      	movs	r1, #0
 810416a:	f06f 0004 	mvn.w	r0, #4
 810416e:	f7ff ffbf 	bl	81040f0 <__NVIC_SetPriority>
#endif
}
 8104172:	bf00      	nop
 8104174:	bd80      	pop	{r7, pc}
	...

08104178 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8104178:	b480      	push	{r7}
 810417a:	b083      	sub	sp, #12
 810417c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810417e:	f3ef 8305 	mrs	r3, IPSR
 8104182:	603b      	str	r3, [r7, #0]
  return(result);
 8104184:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8104186:	2b00      	cmp	r3, #0
 8104188:	d003      	beq.n	8104192 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810418a:	f06f 0305 	mvn.w	r3, #5
 810418e:	607b      	str	r3, [r7, #4]
 8104190:	e00c      	b.n	81041ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8104192:	4b0a      	ldr	r3, [pc, #40]	@ (81041bc <osKernelInitialize+0x44>)
 8104194:	681b      	ldr	r3, [r3, #0]
 8104196:	2b00      	cmp	r3, #0
 8104198:	d105      	bne.n	81041a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810419a:	4b08      	ldr	r3, [pc, #32]	@ (81041bc <osKernelInitialize+0x44>)
 810419c:	2201      	movs	r2, #1
 810419e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81041a0:	2300      	movs	r3, #0
 81041a2:	607b      	str	r3, [r7, #4]
 81041a4:	e002      	b.n	81041ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 81041a6:	f04f 33ff 	mov.w	r3, #4294967295
 81041aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81041ac:	687b      	ldr	r3, [r7, #4]
}
 81041ae:	4618      	mov	r0, r3
 81041b0:	370c      	adds	r7, #12
 81041b2:	46bd      	mov	sp, r7
 81041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041b8:	4770      	bx	lr
 81041ba:	bf00      	nop
 81041bc:	100000e8 	.word	0x100000e8

081041c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 81041c0:	b580      	push	{r7, lr}
 81041c2:	b082      	sub	sp, #8
 81041c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81041c6:	f3ef 8305 	mrs	r3, IPSR
 81041ca:	603b      	str	r3, [r7, #0]
  return(result);
 81041cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81041ce:	2b00      	cmp	r3, #0
 81041d0:	d003      	beq.n	81041da <osKernelStart+0x1a>
    stat = osErrorISR;
 81041d2:	f06f 0305 	mvn.w	r3, #5
 81041d6:	607b      	str	r3, [r7, #4]
 81041d8:	e010      	b.n	81041fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 81041da:	4b0b      	ldr	r3, [pc, #44]	@ (8104208 <osKernelStart+0x48>)
 81041dc:	681b      	ldr	r3, [r3, #0]
 81041de:	2b01      	cmp	r3, #1
 81041e0:	d109      	bne.n	81041f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 81041e2:	f7ff ffbf 	bl	8104164 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81041e6:	4b08      	ldr	r3, [pc, #32]	@ (8104208 <osKernelStart+0x48>)
 81041e8:	2202      	movs	r2, #2
 81041ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81041ec:	f002 f93a 	bl	8106464 <vTaskStartScheduler>
      stat = osOK;
 81041f0:	2300      	movs	r3, #0
 81041f2:	607b      	str	r3, [r7, #4]
 81041f4:	e002      	b.n	81041fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 81041f6:	f04f 33ff 	mov.w	r3, #4294967295
 81041fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81041fc:	687b      	ldr	r3, [r7, #4]
}
 81041fe:	4618      	mov	r0, r3
 8104200:	3708      	adds	r7, #8
 8104202:	46bd      	mov	sp, r7
 8104204:	bd80      	pop	{r7, pc}
 8104206:	bf00      	nop
 8104208:	100000e8 	.word	0x100000e8

0810420c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810420c:	b580      	push	{r7, lr}
 810420e:	b08e      	sub	sp, #56	@ 0x38
 8104210:	af04      	add	r7, sp, #16
 8104212:	60f8      	str	r0, [r7, #12]
 8104214:	60b9      	str	r1, [r7, #8]
 8104216:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8104218:	2300      	movs	r3, #0
 810421a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810421c:	f3ef 8305 	mrs	r3, IPSR
 8104220:	617b      	str	r3, [r7, #20]
  return(result);
 8104222:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8104224:	2b00      	cmp	r3, #0
 8104226:	d17e      	bne.n	8104326 <osThreadNew+0x11a>
 8104228:	68fb      	ldr	r3, [r7, #12]
 810422a:	2b00      	cmp	r3, #0
 810422c:	d07b      	beq.n	8104326 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810422e:	2380      	movs	r3, #128	@ 0x80
 8104230:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8104232:	2318      	movs	r3, #24
 8104234:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8104236:	2300      	movs	r3, #0
 8104238:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810423a:	f04f 33ff 	mov.w	r3, #4294967295
 810423e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	2b00      	cmp	r3, #0
 8104244:	d045      	beq.n	81042d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	2b00      	cmp	r3, #0
 810424c:	d002      	beq.n	8104254 <osThreadNew+0x48>
        name = attr->name;
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8104254:	687b      	ldr	r3, [r7, #4]
 8104256:	699b      	ldr	r3, [r3, #24]
 8104258:	2b00      	cmp	r3, #0
 810425a:	d002      	beq.n	8104262 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	699b      	ldr	r3, [r3, #24]
 8104260:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8104262:	69fb      	ldr	r3, [r7, #28]
 8104264:	2b00      	cmp	r3, #0
 8104266:	d008      	beq.n	810427a <osThreadNew+0x6e>
 8104268:	69fb      	ldr	r3, [r7, #28]
 810426a:	2b38      	cmp	r3, #56	@ 0x38
 810426c:	d805      	bhi.n	810427a <osThreadNew+0x6e>
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	685b      	ldr	r3, [r3, #4]
 8104272:	f003 0301 	and.w	r3, r3, #1
 8104276:	2b00      	cmp	r3, #0
 8104278:	d001      	beq.n	810427e <osThreadNew+0x72>
        return (NULL);
 810427a:	2300      	movs	r3, #0
 810427c:	e054      	b.n	8104328 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	695b      	ldr	r3, [r3, #20]
 8104282:	2b00      	cmp	r3, #0
 8104284:	d003      	beq.n	810428e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	695b      	ldr	r3, [r3, #20]
 810428a:	089b      	lsrs	r3, r3, #2
 810428c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	689b      	ldr	r3, [r3, #8]
 8104292:	2b00      	cmp	r3, #0
 8104294:	d00e      	beq.n	81042b4 <osThreadNew+0xa8>
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	68db      	ldr	r3, [r3, #12]
 810429a:	2ba7      	cmp	r3, #167	@ 0xa7
 810429c:	d90a      	bls.n	81042b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81042a2:	2b00      	cmp	r3, #0
 81042a4:	d006      	beq.n	81042b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	695b      	ldr	r3, [r3, #20]
 81042aa:	2b00      	cmp	r3, #0
 81042ac:	d002      	beq.n	81042b4 <osThreadNew+0xa8>
        mem = 1;
 81042ae:	2301      	movs	r3, #1
 81042b0:	61bb      	str	r3, [r7, #24]
 81042b2:	e010      	b.n	81042d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	689b      	ldr	r3, [r3, #8]
 81042b8:	2b00      	cmp	r3, #0
 81042ba:	d10c      	bne.n	81042d6 <osThreadNew+0xca>
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	68db      	ldr	r3, [r3, #12]
 81042c0:	2b00      	cmp	r3, #0
 81042c2:	d108      	bne.n	81042d6 <osThreadNew+0xca>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	691b      	ldr	r3, [r3, #16]
 81042c8:	2b00      	cmp	r3, #0
 81042ca:	d104      	bne.n	81042d6 <osThreadNew+0xca>
          mem = 0;
 81042cc:	2300      	movs	r3, #0
 81042ce:	61bb      	str	r3, [r7, #24]
 81042d0:	e001      	b.n	81042d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81042d2:	2300      	movs	r3, #0
 81042d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81042d6:	69bb      	ldr	r3, [r7, #24]
 81042d8:	2b01      	cmp	r3, #1
 81042da:	d110      	bne.n	81042fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81042e0:	687a      	ldr	r2, [r7, #4]
 81042e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81042e4:	9202      	str	r2, [sp, #8]
 81042e6:	9301      	str	r3, [sp, #4]
 81042e8:	69fb      	ldr	r3, [r7, #28]
 81042ea:	9300      	str	r3, [sp, #0]
 81042ec:	68bb      	ldr	r3, [r7, #8]
 81042ee:	6a3a      	ldr	r2, [r7, #32]
 81042f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81042f2:	68f8      	ldr	r0, [r7, #12]
 81042f4:	f001 fec2 	bl	810607c <xTaskCreateStatic>
 81042f8:	4603      	mov	r3, r0
 81042fa:	613b      	str	r3, [r7, #16]
 81042fc:	e013      	b.n	8104326 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81042fe:	69bb      	ldr	r3, [r7, #24]
 8104300:	2b00      	cmp	r3, #0
 8104302:	d110      	bne.n	8104326 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8104304:	6a3b      	ldr	r3, [r7, #32]
 8104306:	b29a      	uxth	r2, r3
 8104308:	f107 0310 	add.w	r3, r7, #16
 810430c:	9301      	str	r3, [sp, #4]
 810430e:	69fb      	ldr	r3, [r7, #28]
 8104310:	9300      	str	r3, [sp, #0]
 8104312:	68bb      	ldr	r3, [r7, #8]
 8104314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8104316:	68f8      	ldr	r0, [r7, #12]
 8104318:	f001 ff10 	bl	810613c <xTaskCreate>
 810431c:	4603      	mov	r3, r0
 810431e:	2b01      	cmp	r3, #1
 8104320:	d001      	beq.n	8104326 <osThreadNew+0x11a>
            hTask = NULL;
 8104322:	2300      	movs	r3, #0
 8104324:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8104326:	693b      	ldr	r3, [r7, #16]
}
 8104328:	4618      	mov	r0, r3
 810432a:	3728      	adds	r7, #40	@ 0x28
 810432c:	46bd      	mov	sp, r7
 810432e:	bd80      	pop	{r7, pc}

08104330 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8104330:	b580      	push	{r7, lr}
 8104332:	b084      	sub	sp, #16
 8104334:	af00      	add	r7, sp, #0
 8104336:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8104338:	f3ef 8305 	mrs	r3, IPSR
 810433c:	60bb      	str	r3, [r7, #8]
  return(result);
 810433e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8104340:	2b00      	cmp	r3, #0
 8104342:	d003      	beq.n	810434c <osDelay+0x1c>
    stat = osErrorISR;
 8104344:	f06f 0305 	mvn.w	r3, #5
 8104348:	60fb      	str	r3, [r7, #12]
 810434a:	e007      	b.n	810435c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810434c:	2300      	movs	r3, #0
 810434e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	2b00      	cmp	r3, #0
 8104354:	d002      	beq.n	810435c <osDelay+0x2c>
      vTaskDelay(ticks);
 8104356:	6878      	ldr	r0, [r7, #4]
 8104358:	f002 f84e 	bl	81063f8 <vTaskDelay>
    }
  }

  return (stat);
 810435c:	68fb      	ldr	r3, [r7, #12]
}
 810435e:	4618      	mov	r0, r3
 8104360:	3710      	adds	r7, #16
 8104362:	46bd      	mov	sp, r7
 8104364:	bd80      	pop	{r7, pc}
	...

08104368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8104368:	b480      	push	{r7}
 810436a:	b085      	sub	sp, #20
 810436c:	af00      	add	r7, sp, #0
 810436e:	60f8      	str	r0, [r7, #12]
 8104370:	60b9      	str	r1, [r7, #8]
 8104372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8104374:	68fb      	ldr	r3, [r7, #12]
 8104376:	4a07      	ldr	r2, [pc, #28]	@ (8104394 <vApplicationGetIdleTaskMemory+0x2c>)
 8104378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810437a:	68bb      	ldr	r3, [r7, #8]
 810437c:	4a06      	ldr	r2, [pc, #24]	@ (8104398 <vApplicationGetIdleTaskMemory+0x30>)
 810437e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	2280      	movs	r2, #128	@ 0x80
 8104384:	601a      	str	r2, [r3, #0]
}
 8104386:	bf00      	nop
 8104388:	3714      	adds	r7, #20
 810438a:	46bd      	mov	sp, r7
 810438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104390:	4770      	bx	lr
 8104392:	bf00      	nop
 8104394:	100000ec 	.word	0x100000ec
 8104398:	10000194 	.word	0x10000194

0810439c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810439c:	b480      	push	{r7}
 810439e:	b085      	sub	sp, #20
 81043a0:	af00      	add	r7, sp, #0
 81043a2:	60f8      	str	r0, [r7, #12]
 81043a4:	60b9      	str	r1, [r7, #8]
 81043a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81043a8:	68fb      	ldr	r3, [r7, #12]
 81043aa:	4a07      	ldr	r2, [pc, #28]	@ (81043c8 <vApplicationGetTimerTaskMemory+0x2c>)
 81043ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 81043ae:	68bb      	ldr	r3, [r7, #8]
 81043b0:	4a06      	ldr	r2, [pc, #24]	@ (81043cc <vApplicationGetTimerTaskMemory+0x30>)
 81043b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81043ba:	601a      	str	r2, [r3, #0]
}
 81043bc:	bf00      	nop
 81043be:	3714      	adds	r7, #20
 81043c0:	46bd      	mov	sp, r7
 81043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043c6:	4770      	bx	lr
 81043c8:	10000394 	.word	0x10000394
 81043cc:	1000043c 	.word	0x1000043c

081043d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81043d0:	b580      	push	{r7, lr}
 81043d2:	b08a      	sub	sp, #40	@ 0x28
 81043d4:	af00      	add	r7, sp, #0
 81043d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81043d8:	2300      	movs	r3, #0
 81043da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81043dc:	f002 f8b2 	bl	8106544 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81043e0:	4b5c      	ldr	r3, [pc, #368]	@ (8104554 <pvPortMalloc+0x184>)
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d101      	bne.n	81043ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81043e8:	f000 f924 	bl	8104634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81043ec:	4b5a      	ldr	r3, [pc, #360]	@ (8104558 <pvPortMalloc+0x188>)
 81043ee:	681a      	ldr	r2, [r3, #0]
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	4013      	ands	r3, r2
 81043f4:	2b00      	cmp	r3, #0
 81043f6:	f040 8095 	bne.w	8104524 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	2b00      	cmp	r3, #0
 81043fe:	d01e      	beq.n	810443e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8104400:	2208      	movs	r2, #8
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	4413      	add	r3, r2
 8104406:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	f003 0307 	and.w	r3, r3, #7
 810440e:	2b00      	cmp	r3, #0
 8104410:	d015      	beq.n	810443e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	f023 0307 	bic.w	r3, r3, #7
 8104418:	3308      	adds	r3, #8
 810441a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	f003 0307 	and.w	r3, r3, #7
 8104422:	2b00      	cmp	r3, #0
 8104424:	d00b      	beq.n	810443e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8104426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810442a:	f383 8811 	msr	BASEPRI, r3
 810442e:	f3bf 8f6f 	isb	sy
 8104432:	f3bf 8f4f 	dsb	sy
 8104436:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8104438:	bf00      	nop
 810443a:	bf00      	nop
 810443c:	e7fd      	b.n	810443a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	2b00      	cmp	r3, #0
 8104442:	d06f      	beq.n	8104524 <pvPortMalloc+0x154>
 8104444:	4b45      	ldr	r3, [pc, #276]	@ (810455c <pvPortMalloc+0x18c>)
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	687a      	ldr	r2, [r7, #4]
 810444a:	429a      	cmp	r2, r3
 810444c:	d86a      	bhi.n	8104524 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810444e:	4b44      	ldr	r3, [pc, #272]	@ (8104560 <pvPortMalloc+0x190>)
 8104450:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8104452:	4b43      	ldr	r3, [pc, #268]	@ (8104560 <pvPortMalloc+0x190>)
 8104454:	681b      	ldr	r3, [r3, #0]
 8104456:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8104458:	e004      	b.n	8104464 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810445c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8104464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104466:	685b      	ldr	r3, [r3, #4]
 8104468:	687a      	ldr	r2, [r7, #4]
 810446a:	429a      	cmp	r2, r3
 810446c:	d903      	bls.n	8104476 <pvPortMalloc+0xa6>
 810446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	2b00      	cmp	r3, #0
 8104474:	d1f1      	bne.n	810445a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8104476:	4b37      	ldr	r3, [pc, #220]	@ (8104554 <pvPortMalloc+0x184>)
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810447c:	429a      	cmp	r2, r3
 810447e:	d051      	beq.n	8104524 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8104480:	6a3b      	ldr	r3, [r7, #32]
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	2208      	movs	r2, #8
 8104486:	4413      	add	r3, r2
 8104488:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810448c:	681a      	ldr	r2, [r3, #0]
 810448e:	6a3b      	ldr	r3, [r7, #32]
 8104490:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8104492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104494:	685a      	ldr	r2, [r3, #4]
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	1ad2      	subs	r2, r2, r3
 810449a:	2308      	movs	r3, #8
 810449c:	005b      	lsls	r3, r3, #1
 810449e:	429a      	cmp	r2, r3
 81044a0:	d920      	bls.n	81044e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	4413      	add	r3, r2
 81044a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81044aa:	69bb      	ldr	r3, [r7, #24]
 81044ac:	f003 0307 	and.w	r3, r3, #7
 81044b0:	2b00      	cmp	r3, #0
 81044b2:	d00b      	beq.n	81044cc <pvPortMalloc+0xfc>
	__asm volatile
 81044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81044b8:	f383 8811 	msr	BASEPRI, r3
 81044bc:	f3bf 8f6f 	isb	sy
 81044c0:	f3bf 8f4f 	dsb	sy
 81044c4:	613b      	str	r3, [r7, #16]
}
 81044c6:	bf00      	nop
 81044c8:	bf00      	nop
 81044ca:	e7fd      	b.n	81044c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 81044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81044ce:	685a      	ldr	r2, [r3, #4]
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	1ad2      	subs	r2, r2, r3
 81044d4:	69bb      	ldr	r3, [r7, #24]
 81044d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81044da:	687a      	ldr	r2, [r7, #4]
 81044dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81044de:	69b8      	ldr	r0, [r7, #24]
 81044e0:	f000 f90a 	bl	81046f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81044e4:	4b1d      	ldr	r3, [pc, #116]	@ (810455c <pvPortMalloc+0x18c>)
 81044e6:	681a      	ldr	r2, [r3, #0]
 81044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81044ea:	685b      	ldr	r3, [r3, #4]
 81044ec:	1ad3      	subs	r3, r2, r3
 81044ee:	4a1b      	ldr	r2, [pc, #108]	@ (810455c <pvPortMalloc+0x18c>)
 81044f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81044f2:	4b1a      	ldr	r3, [pc, #104]	@ (810455c <pvPortMalloc+0x18c>)
 81044f4:	681a      	ldr	r2, [r3, #0]
 81044f6:	4b1b      	ldr	r3, [pc, #108]	@ (8104564 <pvPortMalloc+0x194>)
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	429a      	cmp	r2, r3
 81044fc:	d203      	bcs.n	8104506 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81044fe:	4b17      	ldr	r3, [pc, #92]	@ (810455c <pvPortMalloc+0x18c>)
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	4a18      	ldr	r2, [pc, #96]	@ (8104564 <pvPortMalloc+0x194>)
 8104504:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8104506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104508:	685a      	ldr	r2, [r3, #4]
 810450a:	4b13      	ldr	r3, [pc, #76]	@ (8104558 <pvPortMalloc+0x188>)
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	431a      	orrs	r2, r3
 8104510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104512:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8104514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104516:	2200      	movs	r2, #0
 8104518:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810451a:	4b13      	ldr	r3, [pc, #76]	@ (8104568 <pvPortMalloc+0x198>)
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	3301      	adds	r3, #1
 8104520:	4a11      	ldr	r2, [pc, #68]	@ (8104568 <pvPortMalloc+0x198>)
 8104522:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8104524:	f002 f81c 	bl	8106560 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8104528:	69fb      	ldr	r3, [r7, #28]
 810452a:	f003 0307 	and.w	r3, r3, #7
 810452e:	2b00      	cmp	r3, #0
 8104530:	d00b      	beq.n	810454a <pvPortMalloc+0x17a>
	__asm volatile
 8104532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104536:	f383 8811 	msr	BASEPRI, r3
 810453a:	f3bf 8f6f 	isb	sy
 810453e:	f3bf 8f4f 	dsb	sy
 8104542:	60fb      	str	r3, [r7, #12]
}
 8104544:	bf00      	nop
 8104546:	bf00      	nop
 8104548:	e7fd      	b.n	8104546 <pvPortMalloc+0x176>
	return pvReturn;
 810454a:	69fb      	ldr	r3, [r7, #28]
}
 810454c:	4618      	mov	r0, r3
 810454e:	3728      	adds	r7, #40	@ 0x28
 8104550:	46bd      	mov	sp, r7
 8104552:	bd80      	pop	{r7, pc}
 8104554:	10004444 	.word	0x10004444
 8104558:	10004458 	.word	0x10004458
 810455c:	10004448 	.word	0x10004448
 8104560:	1000443c 	.word	0x1000443c
 8104564:	1000444c 	.word	0x1000444c
 8104568:	10004450 	.word	0x10004450

0810456c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810456c:	b580      	push	{r7, lr}
 810456e:	b086      	sub	sp, #24
 8104570:	af00      	add	r7, sp, #0
 8104572:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	2b00      	cmp	r3, #0
 810457c:	d04f      	beq.n	810461e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810457e:	2308      	movs	r3, #8
 8104580:	425b      	negs	r3, r3
 8104582:	697a      	ldr	r2, [r7, #20]
 8104584:	4413      	add	r3, r2
 8104586:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8104588:	697b      	ldr	r3, [r7, #20]
 810458a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810458c:	693b      	ldr	r3, [r7, #16]
 810458e:	685a      	ldr	r2, [r3, #4]
 8104590:	4b25      	ldr	r3, [pc, #148]	@ (8104628 <vPortFree+0xbc>)
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	4013      	ands	r3, r2
 8104596:	2b00      	cmp	r3, #0
 8104598:	d10b      	bne.n	81045b2 <vPortFree+0x46>
	__asm volatile
 810459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810459e:	f383 8811 	msr	BASEPRI, r3
 81045a2:	f3bf 8f6f 	isb	sy
 81045a6:	f3bf 8f4f 	dsb	sy
 81045aa:	60fb      	str	r3, [r7, #12]
}
 81045ac:	bf00      	nop
 81045ae:	bf00      	nop
 81045b0:	e7fd      	b.n	81045ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 81045b2:	693b      	ldr	r3, [r7, #16]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	2b00      	cmp	r3, #0
 81045b8:	d00b      	beq.n	81045d2 <vPortFree+0x66>
	__asm volatile
 81045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81045be:	f383 8811 	msr	BASEPRI, r3
 81045c2:	f3bf 8f6f 	isb	sy
 81045c6:	f3bf 8f4f 	dsb	sy
 81045ca:	60bb      	str	r3, [r7, #8]
}
 81045cc:	bf00      	nop
 81045ce:	bf00      	nop
 81045d0:	e7fd      	b.n	81045ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 81045d2:	693b      	ldr	r3, [r7, #16]
 81045d4:	685a      	ldr	r2, [r3, #4]
 81045d6:	4b14      	ldr	r3, [pc, #80]	@ (8104628 <vPortFree+0xbc>)
 81045d8:	681b      	ldr	r3, [r3, #0]
 81045da:	4013      	ands	r3, r2
 81045dc:	2b00      	cmp	r3, #0
 81045de:	d01e      	beq.n	810461e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81045e0:	693b      	ldr	r3, [r7, #16]
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	2b00      	cmp	r3, #0
 81045e6:	d11a      	bne.n	810461e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81045e8:	693b      	ldr	r3, [r7, #16]
 81045ea:	685a      	ldr	r2, [r3, #4]
 81045ec:	4b0e      	ldr	r3, [pc, #56]	@ (8104628 <vPortFree+0xbc>)
 81045ee:	681b      	ldr	r3, [r3, #0]
 81045f0:	43db      	mvns	r3, r3
 81045f2:	401a      	ands	r2, r3
 81045f4:	693b      	ldr	r3, [r7, #16]
 81045f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81045f8:	f001 ffa4 	bl	8106544 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81045fc:	693b      	ldr	r3, [r7, #16]
 81045fe:	685a      	ldr	r2, [r3, #4]
 8104600:	4b0a      	ldr	r3, [pc, #40]	@ (810462c <vPortFree+0xc0>)
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	4413      	add	r3, r2
 8104606:	4a09      	ldr	r2, [pc, #36]	@ (810462c <vPortFree+0xc0>)
 8104608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810460a:	6938      	ldr	r0, [r7, #16]
 810460c:	f000 f874 	bl	81046f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8104610:	4b07      	ldr	r3, [pc, #28]	@ (8104630 <vPortFree+0xc4>)
 8104612:	681b      	ldr	r3, [r3, #0]
 8104614:	3301      	adds	r3, #1
 8104616:	4a06      	ldr	r2, [pc, #24]	@ (8104630 <vPortFree+0xc4>)
 8104618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810461a:	f001 ffa1 	bl	8106560 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810461e:	bf00      	nop
 8104620:	3718      	adds	r7, #24
 8104622:	46bd      	mov	sp, r7
 8104624:	bd80      	pop	{r7, pc}
 8104626:	bf00      	nop
 8104628:	10004458 	.word	0x10004458
 810462c:	10004448 	.word	0x10004448
 8104630:	10004454 	.word	0x10004454

08104634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8104634:	b480      	push	{r7}
 8104636:	b085      	sub	sp, #20
 8104638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810463a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810463e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8104640:	4b27      	ldr	r3, [pc, #156]	@ (81046e0 <prvHeapInit+0xac>)
 8104642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8104644:	68fb      	ldr	r3, [r7, #12]
 8104646:	f003 0307 	and.w	r3, r3, #7
 810464a:	2b00      	cmp	r3, #0
 810464c:	d00c      	beq.n	8104668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810464e:	68fb      	ldr	r3, [r7, #12]
 8104650:	3307      	adds	r3, #7
 8104652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	f023 0307 	bic.w	r3, r3, #7
 810465a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810465c:	68ba      	ldr	r2, [r7, #8]
 810465e:	68fb      	ldr	r3, [r7, #12]
 8104660:	1ad3      	subs	r3, r2, r3
 8104662:	4a1f      	ldr	r2, [pc, #124]	@ (81046e0 <prvHeapInit+0xac>)
 8104664:	4413      	add	r3, r2
 8104666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8104668:	68fb      	ldr	r3, [r7, #12]
 810466a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810466c:	4a1d      	ldr	r2, [pc, #116]	@ (81046e4 <prvHeapInit+0xb0>)
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8104672:	4b1c      	ldr	r3, [pc, #112]	@ (81046e4 <prvHeapInit+0xb0>)
 8104674:	2200      	movs	r2, #0
 8104676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	68ba      	ldr	r2, [r7, #8]
 810467c:	4413      	add	r3, r2
 810467e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8104680:	2208      	movs	r2, #8
 8104682:	68fb      	ldr	r3, [r7, #12]
 8104684:	1a9b      	subs	r3, r3, r2
 8104686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	f023 0307 	bic.w	r3, r3, #7
 810468e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8104690:	68fb      	ldr	r3, [r7, #12]
 8104692:	4a15      	ldr	r2, [pc, #84]	@ (81046e8 <prvHeapInit+0xb4>)
 8104694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8104696:	4b14      	ldr	r3, [pc, #80]	@ (81046e8 <prvHeapInit+0xb4>)
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	2200      	movs	r2, #0
 810469c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810469e:	4b12      	ldr	r3, [pc, #72]	@ (81046e8 <prvHeapInit+0xb4>)
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	2200      	movs	r2, #0
 81046a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81046aa:	683b      	ldr	r3, [r7, #0]
 81046ac:	68fa      	ldr	r2, [r7, #12]
 81046ae:	1ad2      	subs	r2, r2, r3
 81046b0:	683b      	ldr	r3, [r7, #0]
 81046b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81046b4:	4b0c      	ldr	r3, [pc, #48]	@ (81046e8 <prvHeapInit+0xb4>)
 81046b6:	681a      	ldr	r2, [r3, #0]
 81046b8:	683b      	ldr	r3, [r7, #0]
 81046ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81046bc:	683b      	ldr	r3, [r7, #0]
 81046be:	685b      	ldr	r3, [r3, #4]
 81046c0:	4a0a      	ldr	r2, [pc, #40]	@ (81046ec <prvHeapInit+0xb8>)
 81046c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81046c4:	683b      	ldr	r3, [r7, #0]
 81046c6:	685b      	ldr	r3, [r3, #4]
 81046c8:	4a09      	ldr	r2, [pc, #36]	@ (81046f0 <prvHeapInit+0xbc>)
 81046ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 81046cc:	4b09      	ldr	r3, [pc, #36]	@ (81046f4 <prvHeapInit+0xc0>)
 81046ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81046d2:	601a      	str	r2, [r3, #0]
}
 81046d4:	bf00      	nop
 81046d6:	3714      	adds	r7, #20
 81046d8:	46bd      	mov	sp, r7
 81046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046de:	4770      	bx	lr
 81046e0:	1000083c 	.word	0x1000083c
 81046e4:	1000443c 	.word	0x1000443c
 81046e8:	10004444 	.word	0x10004444
 81046ec:	1000444c 	.word	0x1000444c
 81046f0:	10004448 	.word	0x10004448
 81046f4:	10004458 	.word	0x10004458

081046f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81046f8:	b480      	push	{r7}
 81046fa:	b085      	sub	sp, #20
 81046fc:	af00      	add	r7, sp, #0
 81046fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8104700:	4b28      	ldr	r3, [pc, #160]	@ (81047a4 <prvInsertBlockIntoFreeList+0xac>)
 8104702:	60fb      	str	r3, [r7, #12]
 8104704:	e002      	b.n	810470c <prvInsertBlockIntoFreeList+0x14>
 8104706:	68fb      	ldr	r3, [r7, #12]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	60fb      	str	r3, [r7, #12]
 810470c:	68fb      	ldr	r3, [r7, #12]
 810470e:	681b      	ldr	r3, [r3, #0]
 8104710:	687a      	ldr	r2, [r7, #4]
 8104712:	429a      	cmp	r2, r3
 8104714:	d8f7      	bhi.n	8104706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8104716:	68fb      	ldr	r3, [r7, #12]
 8104718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810471a:	68fb      	ldr	r3, [r7, #12]
 810471c:	685b      	ldr	r3, [r3, #4]
 810471e:	68ba      	ldr	r2, [r7, #8]
 8104720:	4413      	add	r3, r2
 8104722:	687a      	ldr	r2, [r7, #4]
 8104724:	429a      	cmp	r2, r3
 8104726:	d108      	bne.n	810473a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8104728:	68fb      	ldr	r3, [r7, #12]
 810472a:	685a      	ldr	r2, [r3, #4]
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	685b      	ldr	r3, [r3, #4]
 8104730:	441a      	add	r2, r3
 8104732:	68fb      	ldr	r3, [r7, #12]
 8104734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8104736:	68fb      	ldr	r3, [r7, #12]
 8104738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	685b      	ldr	r3, [r3, #4]
 8104742:	68ba      	ldr	r2, [r7, #8]
 8104744:	441a      	add	r2, r3
 8104746:	68fb      	ldr	r3, [r7, #12]
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	429a      	cmp	r2, r3
 810474c:	d118      	bne.n	8104780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810474e:	68fb      	ldr	r3, [r7, #12]
 8104750:	681a      	ldr	r2, [r3, #0]
 8104752:	4b15      	ldr	r3, [pc, #84]	@ (81047a8 <prvInsertBlockIntoFreeList+0xb0>)
 8104754:	681b      	ldr	r3, [r3, #0]
 8104756:	429a      	cmp	r2, r3
 8104758:	d00d      	beq.n	8104776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	685a      	ldr	r2, [r3, #4]
 810475e:	68fb      	ldr	r3, [r7, #12]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	685b      	ldr	r3, [r3, #4]
 8104764:	441a      	add	r2, r3
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810476a:	68fb      	ldr	r3, [r7, #12]
 810476c:	681b      	ldr	r3, [r3, #0]
 810476e:	681a      	ldr	r2, [r3, #0]
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	601a      	str	r2, [r3, #0]
 8104774:	e008      	b.n	8104788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8104776:	4b0c      	ldr	r3, [pc, #48]	@ (81047a8 <prvInsertBlockIntoFreeList+0xb0>)
 8104778:	681a      	ldr	r2, [r3, #0]
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	601a      	str	r2, [r3, #0]
 810477e:	e003      	b.n	8104788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	681a      	ldr	r2, [r3, #0]
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8104788:	68fa      	ldr	r2, [r7, #12]
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	429a      	cmp	r2, r3
 810478e:	d002      	beq.n	8104796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8104790:	68fb      	ldr	r3, [r7, #12]
 8104792:	687a      	ldr	r2, [r7, #4]
 8104794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8104796:	bf00      	nop
 8104798:	3714      	adds	r7, #20
 810479a:	46bd      	mov	sp, r7
 810479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a0:	4770      	bx	lr
 81047a2:	bf00      	nop
 81047a4:	1000443c 	.word	0x1000443c
 81047a8:	10004444 	.word	0x10004444

081047ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 81047ac:	b480      	push	{r7}
 81047ae:	b083      	sub	sp, #12
 81047b0:	af00      	add	r7, sp, #0
 81047b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	f103 0208 	add.w	r2, r3, #8
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	f04f 32ff 	mov.w	r2, #4294967295
 81047c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	f103 0208 	add.w	r2, r3, #8
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	f103 0208 	add.w	r2, r3, #8
 81047d6:	687b      	ldr	r3, [r7, #4]
 81047d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	2200      	movs	r2, #0
 81047de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81047e0:	bf00      	nop
 81047e2:	370c      	adds	r7, #12
 81047e4:	46bd      	mov	sp, r7
 81047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047ea:	4770      	bx	lr

081047ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81047ec:	b480      	push	{r7}
 81047ee:	b083      	sub	sp, #12
 81047f0:	af00      	add	r7, sp, #0
 81047f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81047f4:	687b      	ldr	r3, [r7, #4]
 81047f6:	2200      	movs	r2, #0
 81047f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81047fa:	bf00      	nop
 81047fc:	370c      	adds	r7, #12
 81047fe:	46bd      	mov	sp, r7
 8104800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104804:	4770      	bx	lr

08104806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8104806:	b480      	push	{r7}
 8104808:	b085      	sub	sp, #20
 810480a:	af00      	add	r7, sp, #0
 810480c:	6078      	str	r0, [r7, #4]
 810480e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	685b      	ldr	r3, [r3, #4]
 8104814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8104816:	683b      	ldr	r3, [r7, #0]
 8104818:	68fa      	ldr	r2, [r7, #12]
 810481a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810481c:	68fb      	ldr	r3, [r7, #12]
 810481e:	689a      	ldr	r2, [r3, #8]
 8104820:	683b      	ldr	r3, [r7, #0]
 8104822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8104824:	68fb      	ldr	r3, [r7, #12]
 8104826:	689b      	ldr	r3, [r3, #8]
 8104828:	683a      	ldr	r2, [r7, #0]
 810482a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810482c:	68fb      	ldr	r3, [r7, #12]
 810482e:	683a      	ldr	r2, [r7, #0]
 8104830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8104832:	683b      	ldr	r3, [r7, #0]
 8104834:	687a      	ldr	r2, [r7, #4]
 8104836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	1c5a      	adds	r2, r3, #1
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	601a      	str	r2, [r3, #0]
}
 8104842:	bf00      	nop
 8104844:	3714      	adds	r7, #20
 8104846:	46bd      	mov	sp, r7
 8104848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810484c:	4770      	bx	lr

0810484e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810484e:	b480      	push	{r7}
 8104850:	b085      	sub	sp, #20
 8104852:	af00      	add	r7, sp, #0
 8104854:	6078      	str	r0, [r7, #4]
 8104856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8104858:	683b      	ldr	r3, [r7, #0]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810485e:	68bb      	ldr	r3, [r7, #8]
 8104860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104864:	d103      	bne.n	810486e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	691b      	ldr	r3, [r3, #16]
 810486a:	60fb      	str	r3, [r7, #12]
 810486c:	e00c      	b.n	8104888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	3308      	adds	r3, #8
 8104872:	60fb      	str	r3, [r7, #12]
 8104874:	e002      	b.n	810487c <vListInsert+0x2e>
 8104876:	68fb      	ldr	r3, [r7, #12]
 8104878:	685b      	ldr	r3, [r3, #4]
 810487a:	60fb      	str	r3, [r7, #12]
 810487c:	68fb      	ldr	r3, [r7, #12]
 810487e:	685b      	ldr	r3, [r3, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	68ba      	ldr	r2, [r7, #8]
 8104884:	429a      	cmp	r2, r3
 8104886:	d2f6      	bcs.n	8104876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8104888:	68fb      	ldr	r3, [r7, #12]
 810488a:	685a      	ldr	r2, [r3, #4]
 810488c:	683b      	ldr	r3, [r7, #0]
 810488e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8104890:	683b      	ldr	r3, [r7, #0]
 8104892:	685b      	ldr	r3, [r3, #4]
 8104894:	683a      	ldr	r2, [r7, #0]
 8104896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8104898:	683b      	ldr	r3, [r7, #0]
 810489a:	68fa      	ldr	r2, [r7, #12]
 810489c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810489e:	68fb      	ldr	r3, [r7, #12]
 81048a0:	683a      	ldr	r2, [r7, #0]
 81048a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 81048a4:	683b      	ldr	r3, [r7, #0]
 81048a6:	687a      	ldr	r2, [r7, #4]
 81048a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	1c5a      	adds	r2, r3, #1
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	601a      	str	r2, [r3, #0]
}
 81048b4:	bf00      	nop
 81048b6:	3714      	adds	r7, #20
 81048b8:	46bd      	mov	sp, r7
 81048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048be:	4770      	bx	lr

081048c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81048c0:	b480      	push	{r7}
 81048c2:	b085      	sub	sp, #20
 81048c4:	af00      	add	r7, sp, #0
 81048c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	691b      	ldr	r3, [r3, #16]
 81048cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	685b      	ldr	r3, [r3, #4]
 81048d2:	687a      	ldr	r2, [r7, #4]
 81048d4:	6892      	ldr	r2, [r2, #8]
 81048d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	689b      	ldr	r3, [r3, #8]
 81048dc:	687a      	ldr	r2, [r7, #4]
 81048de:	6852      	ldr	r2, [r2, #4]
 81048e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81048e2:	68fb      	ldr	r3, [r7, #12]
 81048e4:	685b      	ldr	r3, [r3, #4]
 81048e6:	687a      	ldr	r2, [r7, #4]
 81048e8:	429a      	cmp	r2, r3
 81048ea:	d103      	bne.n	81048f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	689a      	ldr	r2, [r3, #8]
 81048f0:	68fb      	ldr	r3, [r7, #12]
 81048f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	2200      	movs	r2, #0
 81048f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81048fa:	68fb      	ldr	r3, [r7, #12]
 81048fc:	681b      	ldr	r3, [r3, #0]
 81048fe:	1e5a      	subs	r2, r3, #1
 8104900:	68fb      	ldr	r3, [r7, #12]
 8104902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8104904:	68fb      	ldr	r3, [r7, #12]
 8104906:	681b      	ldr	r3, [r3, #0]
}
 8104908:	4618      	mov	r0, r3
 810490a:	3714      	adds	r7, #20
 810490c:	46bd      	mov	sp, r7
 810490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104912:	4770      	bx	lr

08104914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8104914:	b480      	push	{r7}
 8104916:	b085      	sub	sp, #20
 8104918:	af00      	add	r7, sp, #0
 810491a:	60f8      	str	r0, [r7, #12]
 810491c:	60b9      	str	r1, [r7, #8]
 810491e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	3b04      	subs	r3, #4
 8104924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810492c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810492e:	68fb      	ldr	r3, [r7, #12]
 8104930:	3b04      	subs	r3, #4
 8104932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8104934:	68bb      	ldr	r3, [r7, #8]
 8104936:	f023 0201 	bic.w	r2, r3, #1
 810493a:	68fb      	ldr	r3, [r7, #12]
 810493c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810493e:	68fb      	ldr	r3, [r7, #12]
 8104940:	3b04      	subs	r3, #4
 8104942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8104944:	4a0c      	ldr	r2, [pc, #48]	@ (8104978 <pxPortInitialiseStack+0x64>)
 8104946:	68fb      	ldr	r3, [r7, #12]
 8104948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810494a:	68fb      	ldr	r3, [r7, #12]
 810494c:	3b14      	subs	r3, #20
 810494e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8104950:	687a      	ldr	r2, [r7, #4]
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8104956:	68fb      	ldr	r3, [r7, #12]
 8104958:	3b04      	subs	r3, #4
 810495a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	f06f 0202 	mvn.w	r2, #2
 8104962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8104964:	68fb      	ldr	r3, [r7, #12]
 8104966:	3b20      	subs	r3, #32
 8104968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810496a:	68fb      	ldr	r3, [r7, #12]
}
 810496c:	4618      	mov	r0, r3
 810496e:	3714      	adds	r7, #20
 8104970:	46bd      	mov	sp, r7
 8104972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104976:	4770      	bx	lr
 8104978:	0810497d 	.word	0x0810497d

0810497c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810497c:	b480      	push	{r7}
 810497e:	b085      	sub	sp, #20
 8104980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8104982:	2300      	movs	r3, #0
 8104984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8104986:	4b13      	ldr	r3, [pc, #76]	@ (81049d4 <prvTaskExitError+0x58>)
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810498e:	d00b      	beq.n	81049a8 <prvTaskExitError+0x2c>
	__asm volatile
 8104990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104994:	f383 8811 	msr	BASEPRI, r3
 8104998:	f3bf 8f6f 	isb	sy
 810499c:	f3bf 8f4f 	dsb	sy
 81049a0:	60fb      	str	r3, [r7, #12]
}
 81049a2:	bf00      	nop
 81049a4:	bf00      	nop
 81049a6:	e7fd      	b.n	81049a4 <prvTaskExitError+0x28>
	__asm volatile
 81049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81049ac:	f383 8811 	msr	BASEPRI, r3
 81049b0:	f3bf 8f6f 	isb	sy
 81049b4:	f3bf 8f4f 	dsb	sy
 81049b8:	60bb      	str	r3, [r7, #8]
}
 81049ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81049bc:	bf00      	nop
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	2b00      	cmp	r3, #0
 81049c2:	d0fc      	beq.n	81049be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 81049c4:	bf00      	nop
 81049c6:	bf00      	nop
 81049c8:	3714      	adds	r7, #20
 81049ca:	46bd      	mov	sp, r7
 81049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049d0:	4770      	bx	lr
 81049d2:	bf00      	nop
 81049d4:	10000010 	.word	0x10000010
	...

081049e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81049e0:	4b07      	ldr	r3, [pc, #28]	@ (8104a00 <pxCurrentTCBConst2>)
 81049e2:	6819      	ldr	r1, [r3, #0]
 81049e4:	6808      	ldr	r0, [r1, #0]
 81049e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81049ea:	f380 8809 	msr	PSP, r0
 81049ee:	f3bf 8f6f 	isb	sy
 81049f2:	f04f 0000 	mov.w	r0, #0
 81049f6:	f380 8811 	msr	BASEPRI, r0
 81049fa:	4770      	bx	lr
 81049fc:	f3af 8000 	nop.w

08104a00 <pxCurrentTCBConst2>:
 8104a00:	100044a4 	.word	0x100044a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8104a04:	bf00      	nop
 8104a06:	bf00      	nop

08104a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8104a08:	4808      	ldr	r0, [pc, #32]	@ (8104a2c <prvPortStartFirstTask+0x24>)
 8104a0a:	6800      	ldr	r0, [r0, #0]
 8104a0c:	6800      	ldr	r0, [r0, #0]
 8104a0e:	f380 8808 	msr	MSP, r0
 8104a12:	f04f 0000 	mov.w	r0, #0
 8104a16:	f380 8814 	msr	CONTROL, r0
 8104a1a:	b662      	cpsie	i
 8104a1c:	b661      	cpsie	f
 8104a1e:	f3bf 8f4f 	dsb	sy
 8104a22:	f3bf 8f6f 	isb	sy
 8104a26:	df00      	svc	0
 8104a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8104a2a:	bf00      	nop
 8104a2c:	e000ed08 	.word	0xe000ed08

08104a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8104a30:	b580      	push	{r7, lr}
 8104a32:	b086      	sub	sp, #24
 8104a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8104a36:	4b47      	ldr	r3, [pc, #284]	@ (8104b54 <xPortStartScheduler+0x124>)
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	4a47      	ldr	r2, [pc, #284]	@ (8104b58 <xPortStartScheduler+0x128>)
 8104a3c:	4293      	cmp	r3, r2
 8104a3e:	d10b      	bne.n	8104a58 <xPortStartScheduler+0x28>
	__asm volatile
 8104a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104a44:	f383 8811 	msr	BASEPRI, r3
 8104a48:	f3bf 8f6f 	isb	sy
 8104a4c:	f3bf 8f4f 	dsb	sy
 8104a50:	613b      	str	r3, [r7, #16]
}
 8104a52:	bf00      	nop
 8104a54:	bf00      	nop
 8104a56:	e7fd      	b.n	8104a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8104a58:	4b3e      	ldr	r3, [pc, #248]	@ (8104b54 <xPortStartScheduler+0x124>)
 8104a5a:	681b      	ldr	r3, [r3, #0]
 8104a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8104b5c <xPortStartScheduler+0x12c>)
 8104a5e:	4293      	cmp	r3, r2
 8104a60:	d10b      	bne.n	8104a7a <xPortStartScheduler+0x4a>
	__asm volatile
 8104a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104a66:	f383 8811 	msr	BASEPRI, r3
 8104a6a:	f3bf 8f6f 	isb	sy
 8104a6e:	f3bf 8f4f 	dsb	sy
 8104a72:	60fb      	str	r3, [r7, #12]
}
 8104a74:	bf00      	nop
 8104a76:	bf00      	nop
 8104a78:	e7fd      	b.n	8104a76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8104a7a:	4b39      	ldr	r3, [pc, #228]	@ (8104b60 <xPortStartScheduler+0x130>)
 8104a7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8104a7e:	697b      	ldr	r3, [r7, #20]
 8104a80:	781b      	ldrb	r3, [r3, #0]
 8104a82:	b2db      	uxtb	r3, r3
 8104a84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8104a86:	697b      	ldr	r3, [r7, #20]
 8104a88:	22ff      	movs	r2, #255	@ 0xff
 8104a8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8104a8c:	697b      	ldr	r3, [r7, #20]
 8104a8e:	781b      	ldrb	r3, [r3, #0]
 8104a90:	b2db      	uxtb	r3, r3
 8104a92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8104a94:	78fb      	ldrb	r3, [r7, #3]
 8104a96:	b2db      	uxtb	r3, r3
 8104a98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8104a9c:	b2da      	uxtb	r2, r3
 8104a9e:	4b31      	ldr	r3, [pc, #196]	@ (8104b64 <xPortStartScheduler+0x134>)
 8104aa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8104aa2:	4b31      	ldr	r3, [pc, #196]	@ (8104b68 <xPortStartScheduler+0x138>)
 8104aa4:	2207      	movs	r2, #7
 8104aa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104aa8:	e009      	b.n	8104abe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8104aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8104b68 <xPortStartScheduler+0x138>)
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	3b01      	subs	r3, #1
 8104ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8104b68 <xPortStartScheduler+0x138>)
 8104ab2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8104ab4:	78fb      	ldrb	r3, [r7, #3]
 8104ab6:	b2db      	uxtb	r3, r3
 8104ab8:	005b      	lsls	r3, r3, #1
 8104aba:	b2db      	uxtb	r3, r3
 8104abc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104abe:	78fb      	ldrb	r3, [r7, #3]
 8104ac0:	b2db      	uxtb	r3, r3
 8104ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104ac6:	2b80      	cmp	r3, #128	@ 0x80
 8104ac8:	d0ef      	beq.n	8104aaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8104aca:	4b27      	ldr	r3, [pc, #156]	@ (8104b68 <xPortStartScheduler+0x138>)
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	f1c3 0307 	rsb	r3, r3, #7
 8104ad2:	2b04      	cmp	r3, #4
 8104ad4:	d00b      	beq.n	8104aee <xPortStartScheduler+0xbe>
	__asm volatile
 8104ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104ada:	f383 8811 	msr	BASEPRI, r3
 8104ade:	f3bf 8f6f 	isb	sy
 8104ae2:	f3bf 8f4f 	dsb	sy
 8104ae6:	60bb      	str	r3, [r7, #8]
}
 8104ae8:	bf00      	nop
 8104aea:	bf00      	nop
 8104aec:	e7fd      	b.n	8104aea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8104aee:	4b1e      	ldr	r3, [pc, #120]	@ (8104b68 <xPortStartScheduler+0x138>)
 8104af0:	681b      	ldr	r3, [r3, #0]
 8104af2:	021b      	lsls	r3, r3, #8
 8104af4:	4a1c      	ldr	r2, [pc, #112]	@ (8104b68 <xPortStartScheduler+0x138>)
 8104af6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8104af8:	4b1b      	ldr	r3, [pc, #108]	@ (8104b68 <xPortStartScheduler+0x138>)
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8104b00:	4a19      	ldr	r2, [pc, #100]	@ (8104b68 <xPortStartScheduler+0x138>)
 8104b02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	b2da      	uxtb	r2, r3
 8104b08:	697b      	ldr	r3, [r7, #20]
 8104b0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8104b0c:	4b17      	ldr	r3, [pc, #92]	@ (8104b6c <xPortStartScheduler+0x13c>)
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	4a16      	ldr	r2, [pc, #88]	@ (8104b6c <xPortStartScheduler+0x13c>)
 8104b12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8104b16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8104b18:	4b14      	ldr	r3, [pc, #80]	@ (8104b6c <xPortStartScheduler+0x13c>)
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	4a13      	ldr	r2, [pc, #76]	@ (8104b6c <xPortStartScheduler+0x13c>)
 8104b1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8104b22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8104b24:	f000 f8da 	bl	8104cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8104b28:	4b11      	ldr	r3, [pc, #68]	@ (8104b70 <xPortStartScheduler+0x140>)
 8104b2a:	2200      	movs	r2, #0
 8104b2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8104b2e:	f000 f8f9 	bl	8104d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8104b32:	4b10      	ldr	r3, [pc, #64]	@ (8104b74 <xPortStartScheduler+0x144>)
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	4a0f      	ldr	r2, [pc, #60]	@ (8104b74 <xPortStartScheduler+0x144>)
 8104b38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8104b3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8104b3e:	f7ff ff63 	bl	8104a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8104b42:	f001 fe75 	bl	8106830 <vTaskSwitchContext>
	prvTaskExitError();
 8104b46:	f7ff ff19 	bl	810497c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8104b4a:	2300      	movs	r3, #0
}
 8104b4c:	4618      	mov	r0, r3
 8104b4e:	3718      	adds	r7, #24
 8104b50:	46bd      	mov	sp, r7
 8104b52:	bd80      	pop	{r7, pc}
 8104b54:	e000ed00 	.word	0xe000ed00
 8104b58:	410fc271 	.word	0x410fc271
 8104b5c:	410fc270 	.word	0x410fc270
 8104b60:	e000e400 	.word	0xe000e400
 8104b64:	1000445c 	.word	0x1000445c
 8104b68:	10004460 	.word	0x10004460
 8104b6c:	e000ed20 	.word	0xe000ed20
 8104b70:	10000010 	.word	0x10000010
 8104b74:	e000ef34 	.word	0xe000ef34

08104b78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8104b78:	b480      	push	{r7}
 8104b7a:	b083      	sub	sp, #12
 8104b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8104b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104b82:	f383 8811 	msr	BASEPRI, r3
 8104b86:	f3bf 8f6f 	isb	sy
 8104b8a:	f3bf 8f4f 	dsb	sy
 8104b8e:	607b      	str	r3, [r7, #4]
}
 8104b90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8104b92:	4b10      	ldr	r3, [pc, #64]	@ (8104bd4 <vPortEnterCritical+0x5c>)
 8104b94:	681b      	ldr	r3, [r3, #0]
 8104b96:	3301      	adds	r3, #1
 8104b98:	4a0e      	ldr	r2, [pc, #56]	@ (8104bd4 <vPortEnterCritical+0x5c>)
 8104b9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8104b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8104bd4 <vPortEnterCritical+0x5c>)
 8104b9e:	681b      	ldr	r3, [r3, #0]
 8104ba0:	2b01      	cmp	r3, #1
 8104ba2:	d110      	bne.n	8104bc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8104ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8104bd8 <vPortEnterCritical+0x60>)
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	b2db      	uxtb	r3, r3
 8104baa:	2b00      	cmp	r3, #0
 8104bac:	d00b      	beq.n	8104bc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8104bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104bb2:	f383 8811 	msr	BASEPRI, r3
 8104bb6:	f3bf 8f6f 	isb	sy
 8104bba:	f3bf 8f4f 	dsb	sy
 8104bbe:	603b      	str	r3, [r7, #0]
}
 8104bc0:	bf00      	nop
 8104bc2:	bf00      	nop
 8104bc4:	e7fd      	b.n	8104bc2 <vPortEnterCritical+0x4a>
	}
}
 8104bc6:	bf00      	nop
 8104bc8:	370c      	adds	r7, #12
 8104bca:	46bd      	mov	sp, r7
 8104bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bd0:	4770      	bx	lr
 8104bd2:	bf00      	nop
 8104bd4:	10000010 	.word	0x10000010
 8104bd8:	e000ed04 	.word	0xe000ed04

08104bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8104bdc:	b480      	push	{r7}
 8104bde:	b083      	sub	sp, #12
 8104be0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8104be2:	4b12      	ldr	r3, [pc, #72]	@ (8104c2c <vPortExitCritical+0x50>)
 8104be4:	681b      	ldr	r3, [r3, #0]
 8104be6:	2b00      	cmp	r3, #0
 8104be8:	d10b      	bne.n	8104c02 <vPortExitCritical+0x26>
	__asm volatile
 8104bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104bee:	f383 8811 	msr	BASEPRI, r3
 8104bf2:	f3bf 8f6f 	isb	sy
 8104bf6:	f3bf 8f4f 	dsb	sy
 8104bfa:	607b      	str	r3, [r7, #4]
}
 8104bfc:	bf00      	nop
 8104bfe:	bf00      	nop
 8104c00:	e7fd      	b.n	8104bfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8104c02:	4b0a      	ldr	r3, [pc, #40]	@ (8104c2c <vPortExitCritical+0x50>)
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	3b01      	subs	r3, #1
 8104c08:	4a08      	ldr	r2, [pc, #32]	@ (8104c2c <vPortExitCritical+0x50>)
 8104c0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8104c0c:	4b07      	ldr	r3, [pc, #28]	@ (8104c2c <vPortExitCritical+0x50>)
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	2b00      	cmp	r3, #0
 8104c12:	d105      	bne.n	8104c20 <vPortExitCritical+0x44>
 8104c14:	2300      	movs	r3, #0
 8104c16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8104c18:	683b      	ldr	r3, [r7, #0]
 8104c1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8104c1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8104c20:	bf00      	nop
 8104c22:	370c      	adds	r7, #12
 8104c24:	46bd      	mov	sp, r7
 8104c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c2a:	4770      	bx	lr
 8104c2c:	10000010 	.word	0x10000010

08104c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8104c30:	f3ef 8009 	mrs	r0, PSP
 8104c34:	f3bf 8f6f 	isb	sy
 8104c38:	4b15      	ldr	r3, [pc, #84]	@ (8104c90 <pxCurrentTCBConst>)
 8104c3a:	681a      	ldr	r2, [r3, #0]
 8104c3c:	f01e 0f10 	tst.w	lr, #16
 8104c40:	bf08      	it	eq
 8104c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8104c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104c4a:	6010      	str	r0, [r2, #0]
 8104c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8104c50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8104c54:	f380 8811 	msr	BASEPRI, r0
 8104c58:	f3bf 8f4f 	dsb	sy
 8104c5c:	f3bf 8f6f 	isb	sy
 8104c60:	f001 fde6 	bl	8106830 <vTaskSwitchContext>
 8104c64:	f04f 0000 	mov.w	r0, #0
 8104c68:	f380 8811 	msr	BASEPRI, r0
 8104c6c:	bc09      	pop	{r0, r3}
 8104c6e:	6819      	ldr	r1, [r3, #0]
 8104c70:	6808      	ldr	r0, [r1, #0]
 8104c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104c76:	f01e 0f10 	tst.w	lr, #16
 8104c7a:	bf08      	it	eq
 8104c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8104c80:	f380 8809 	msr	PSP, r0
 8104c84:	f3bf 8f6f 	isb	sy
 8104c88:	4770      	bx	lr
 8104c8a:	bf00      	nop
 8104c8c:	f3af 8000 	nop.w

08104c90 <pxCurrentTCBConst>:
 8104c90:	100044a4 	.word	0x100044a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8104c94:	bf00      	nop
 8104c96:	bf00      	nop

08104c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8104c98:	b580      	push	{r7, lr}
 8104c9a:	b082      	sub	sp, #8
 8104c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8104c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104ca2:	f383 8811 	msr	BASEPRI, r3
 8104ca6:	f3bf 8f6f 	isb	sy
 8104caa:	f3bf 8f4f 	dsb	sy
 8104cae:	607b      	str	r3, [r7, #4]
}
 8104cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8104cb2:	f001 fd03 	bl	81066bc <xTaskIncrementTick>
 8104cb6:	4603      	mov	r3, r0
 8104cb8:	2b00      	cmp	r3, #0
 8104cba:	d003      	beq.n	8104cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8104cbc:	4b06      	ldr	r3, [pc, #24]	@ (8104cd8 <xPortSysTickHandler+0x40>)
 8104cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8104cc2:	601a      	str	r2, [r3, #0]
 8104cc4:	2300      	movs	r3, #0
 8104cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8104cc8:	683b      	ldr	r3, [r7, #0]
 8104cca:	f383 8811 	msr	BASEPRI, r3
}
 8104cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8104cd0:	bf00      	nop
 8104cd2:	3708      	adds	r7, #8
 8104cd4:	46bd      	mov	sp, r7
 8104cd6:	bd80      	pop	{r7, pc}
 8104cd8:	e000ed04 	.word	0xe000ed04

08104cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8104cdc:	b480      	push	{r7}
 8104cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8104ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8104d10 <vPortSetupTimerInterrupt+0x34>)
 8104ce2:	2200      	movs	r2, #0
 8104ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8104ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8104d14 <vPortSetupTimerInterrupt+0x38>)
 8104ce8:	2200      	movs	r2, #0
 8104cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8104cec:	4b0a      	ldr	r3, [pc, #40]	@ (8104d18 <vPortSetupTimerInterrupt+0x3c>)
 8104cee:	681b      	ldr	r3, [r3, #0]
 8104cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8104d1c <vPortSetupTimerInterrupt+0x40>)
 8104cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8104cf6:	099b      	lsrs	r3, r3, #6
 8104cf8:	4a09      	ldr	r2, [pc, #36]	@ (8104d20 <vPortSetupTimerInterrupt+0x44>)
 8104cfa:	3b01      	subs	r3, #1
 8104cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8104cfe:	4b04      	ldr	r3, [pc, #16]	@ (8104d10 <vPortSetupTimerInterrupt+0x34>)
 8104d00:	2207      	movs	r2, #7
 8104d02:	601a      	str	r2, [r3, #0]
}
 8104d04:	bf00      	nop
 8104d06:	46bd      	mov	sp, r7
 8104d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d0c:	4770      	bx	lr
 8104d0e:	bf00      	nop
 8104d10:	e000e010 	.word	0xe000e010
 8104d14:	e000e018 	.word	0xe000e018
 8104d18:	10000004 	.word	0x10000004
 8104d1c:	10624dd3 	.word	0x10624dd3
 8104d20:	e000e014 	.word	0xe000e014

08104d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8104d24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8104d34 <vPortEnableVFP+0x10>
 8104d28:	6801      	ldr	r1, [r0, #0]
 8104d2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8104d2e:	6001      	str	r1, [r0, #0]
 8104d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8104d32:	bf00      	nop
 8104d34:	e000ed88 	.word	0xe000ed88

08104d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8104d38:	b480      	push	{r7}
 8104d3a:	b085      	sub	sp, #20
 8104d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8104d3e:	f3ef 8305 	mrs	r3, IPSR
 8104d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8104d44:	68fb      	ldr	r3, [r7, #12]
 8104d46:	2b0f      	cmp	r3, #15
 8104d48:	d915      	bls.n	8104d76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8104d4a:	4a18      	ldr	r2, [pc, #96]	@ (8104dac <vPortValidateInterruptPriority+0x74>)
 8104d4c:	68fb      	ldr	r3, [r7, #12]
 8104d4e:	4413      	add	r3, r2
 8104d50:	781b      	ldrb	r3, [r3, #0]
 8104d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8104d54:	4b16      	ldr	r3, [pc, #88]	@ (8104db0 <vPortValidateInterruptPriority+0x78>)
 8104d56:	781b      	ldrb	r3, [r3, #0]
 8104d58:	7afa      	ldrb	r2, [r7, #11]
 8104d5a:	429a      	cmp	r2, r3
 8104d5c:	d20b      	bcs.n	8104d76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8104d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104d62:	f383 8811 	msr	BASEPRI, r3
 8104d66:	f3bf 8f6f 	isb	sy
 8104d6a:	f3bf 8f4f 	dsb	sy
 8104d6e:	607b      	str	r3, [r7, #4]
}
 8104d70:	bf00      	nop
 8104d72:	bf00      	nop
 8104d74:	e7fd      	b.n	8104d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8104d76:	4b0f      	ldr	r3, [pc, #60]	@ (8104db4 <vPortValidateInterruptPriority+0x7c>)
 8104d78:	681b      	ldr	r3, [r3, #0]
 8104d7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8104d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8104db8 <vPortValidateInterruptPriority+0x80>)
 8104d80:	681b      	ldr	r3, [r3, #0]
 8104d82:	429a      	cmp	r2, r3
 8104d84:	d90b      	bls.n	8104d9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8104d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104d8a:	f383 8811 	msr	BASEPRI, r3
 8104d8e:	f3bf 8f6f 	isb	sy
 8104d92:	f3bf 8f4f 	dsb	sy
 8104d96:	603b      	str	r3, [r7, #0]
}
 8104d98:	bf00      	nop
 8104d9a:	bf00      	nop
 8104d9c:	e7fd      	b.n	8104d9a <vPortValidateInterruptPriority+0x62>
	}
 8104d9e:	bf00      	nop
 8104da0:	3714      	adds	r7, #20
 8104da2:	46bd      	mov	sp, r7
 8104da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104da8:	4770      	bx	lr
 8104daa:	bf00      	nop
 8104dac:	e000e3f0 	.word	0xe000e3f0
 8104db0:	1000445c 	.word	0x1000445c
 8104db4:	e000ed0c 	.word	0xe000ed0c
 8104db8:	10004460 	.word	0x10004460

08104dbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8104dbc:	b580      	push	{r7, lr}
 8104dbe:	b084      	sub	sp, #16
 8104dc0:	af00      	add	r7, sp, #0
 8104dc2:	6078      	str	r0, [r7, #4]
 8104dc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8104dca:	68fb      	ldr	r3, [r7, #12]
 8104dcc:	2b00      	cmp	r3, #0
 8104dce:	d10b      	bne.n	8104de8 <xQueueGenericReset+0x2c>
	__asm volatile
 8104dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104dd4:	f383 8811 	msr	BASEPRI, r3
 8104dd8:	f3bf 8f6f 	isb	sy
 8104ddc:	f3bf 8f4f 	dsb	sy
 8104de0:	60bb      	str	r3, [r7, #8]
}
 8104de2:	bf00      	nop
 8104de4:	bf00      	nop
 8104de6:	e7fd      	b.n	8104de4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8104de8:	f7ff fec6 	bl	8104b78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8104dec:	68fb      	ldr	r3, [r7, #12]
 8104dee:	681a      	ldr	r2, [r3, #0]
 8104df0:	68fb      	ldr	r3, [r7, #12]
 8104df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104df4:	68f9      	ldr	r1, [r7, #12]
 8104df6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8104df8:	fb01 f303 	mul.w	r3, r1, r3
 8104dfc:	441a      	add	r2, r3
 8104dfe:	68fb      	ldr	r3, [r7, #12]
 8104e00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	2200      	movs	r2, #0
 8104e06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8104e08:	68fb      	ldr	r3, [r7, #12]
 8104e0a:	681a      	ldr	r2, [r3, #0]
 8104e0c:	68fb      	ldr	r3, [r7, #12]
 8104e0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8104e10:	68fb      	ldr	r3, [r7, #12]
 8104e12:	681a      	ldr	r2, [r3, #0]
 8104e14:	68fb      	ldr	r3, [r7, #12]
 8104e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104e18:	3b01      	subs	r3, #1
 8104e1a:	68f9      	ldr	r1, [r7, #12]
 8104e1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8104e1e:	fb01 f303 	mul.w	r3, r1, r3
 8104e22:	441a      	add	r2, r3
 8104e24:	68fb      	ldr	r3, [r7, #12]
 8104e26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8104e28:	68fb      	ldr	r3, [r7, #12]
 8104e2a:	22ff      	movs	r2, #255	@ 0xff
 8104e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8104e30:	68fb      	ldr	r3, [r7, #12]
 8104e32:	22ff      	movs	r2, #255	@ 0xff
 8104e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8104e38:	683b      	ldr	r3, [r7, #0]
 8104e3a:	2b00      	cmp	r3, #0
 8104e3c:	d114      	bne.n	8104e68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8104e3e:	68fb      	ldr	r3, [r7, #12]
 8104e40:	691b      	ldr	r3, [r3, #16]
 8104e42:	2b00      	cmp	r3, #0
 8104e44:	d01a      	beq.n	8104e7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8104e46:	68fb      	ldr	r3, [r7, #12]
 8104e48:	3310      	adds	r3, #16
 8104e4a:	4618      	mov	r0, r3
 8104e4c:	f001 fda8 	bl	81069a0 <xTaskRemoveFromEventList>
 8104e50:	4603      	mov	r3, r0
 8104e52:	2b00      	cmp	r3, #0
 8104e54:	d012      	beq.n	8104e7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8104e56:	4b0d      	ldr	r3, [pc, #52]	@ (8104e8c <xQueueGenericReset+0xd0>)
 8104e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8104e5c:	601a      	str	r2, [r3, #0]
 8104e5e:	f3bf 8f4f 	dsb	sy
 8104e62:	f3bf 8f6f 	isb	sy
 8104e66:	e009      	b.n	8104e7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8104e68:	68fb      	ldr	r3, [r7, #12]
 8104e6a:	3310      	adds	r3, #16
 8104e6c:	4618      	mov	r0, r3
 8104e6e:	f7ff fc9d 	bl	81047ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8104e72:	68fb      	ldr	r3, [r7, #12]
 8104e74:	3324      	adds	r3, #36	@ 0x24
 8104e76:	4618      	mov	r0, r3
 8104e78:	f7ff fc98 	bl	81047ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8104e7c:	f7ff feae 	bl	8104bdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8104e80:	2301      	movs	r3, #1
}
 8104e82:	4618      	mov	r0, r3
 8104e84:	3710      	adds	r7, #16
 8104e86:	46bd      	mov	sp, r7
 8104e88:	bd80      	pop	{r7, pc}
 8104e8a:	bf00      	nop
 8104e8c:	e000ed04 	.word	0xe000ed04

08104e90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8104e90:	b580      	push	{r7, lr}
 8104e92:	b08e      	sub	sp, #56	@ 0x38
 8104e94:	af02      	add	r7, sp, #8
 8104e96:	60f8      	str	r0, [r7, #12]
 8104e98:	60b9      	str	r1, [r7, #8]
 8104e9a:	607a      	str	r2, [r7, #4]
 8104e9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	2b00      	cmp	r3, #0
 8104ea2:	d10b      	bne.n	8104ebc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8104ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104ea8:	f383 8811 	msr	BASEPRI, r3
 8104eac:	f3bf 8f6f 	isb	sy
 8104eb0:	f3bf 8f4f 	dsb	sy
 8104eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8104eb6:	bf00      	nop
 8104eb8:	bf00      	nop
 8104eba:	e7fd      	b.n	8104eb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8104ebc:	683b      	ldr	r3, [r7, #0]
 8104ebe:	2b00      	cmp	r3, #0
 8104ec0:	d10b      	bne.n	8104eda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8104ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104ec6:	f383 8811 	msr	BASEPRI, r3
 8104eca:	f3bf 8f6f 	isb	sy
 8104ece:	f3bf 8f4f 	dsb	sy
 8104ed2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8104ed4:	bf00      	nop
 8104ed6:	bf00      	nop
 8104ed8:	e7fd      	b.n	8104ed6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	2b00      	cmp	r3, #0
 8104ede:	d002      	beq.n	8104ee6 <xQueueGenericCreateStatic+0x56>
 8104ee0:	68bb      	ldr	r3, [r7, #8]
 8104ee2:	2b00      	cmp	r3, #0
 8104ee4:	d001      	beq.n	8104eea <xQueueGenericCreateStatic+0x5a>
 8104ee6:	2301      	movs	r3, #1
 8104ee8:	e000      	b.n	8104eec <xQueueGenericCreateStatic+0x5c>
 8104eea:	2300      	movs	r3, #0
 8104eec:	2b00      	cmp	r3, #0
 8104eee:	d10b      	bne.n	8104f08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8104ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104ef4:	f383 8811 	msr	BASEPRI, r3
 8104ef8:	f3bf 8f6f 	isb	sy
 8104efc:	f3bf 8f4f 	dsb	sy
 8104f00:	623b      	str	r3, [r7, #32]
}
 8104f02:	bf00      	nop
 8104f04:	bf00      	nop
 8104f06:	e7fd      	b.n	8104f04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	2b00      	cmp	r3, #0
 8104f0c:	d102      	bne.n	8104f14 <xQueueGenericCreateStatic+0x84>
 8104f0e:	68bb      	ldr	r3, [r7, #8]
 8104f10:	2b00      	cmp	r3, #0
 8104f12:	d101      	bne.n	8104f18 <xQueueGenericCreateStatic+0x88>
 8104f14:	2301      	movs	r3, #1
 8104f16:	e000      	b.n	8104f1a <xQueueGenericCreateStatic+0x8a>
 8104f18:	2300      	movs	r3, #0
 8104f1a:	2b00      	cmp	r3, #0
 8104f1c:	d10b      	bne.n	8104f36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8104f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104f22:	f383 8811 	msr	BASEPRI, r3
 8104f26:	f3bf 8f6f 	isb	sy
 8104f2a:	f3bf 8f4f 	dsb	sy
 8104f2e:	61fb      	str	r3, [r7, #28]
}
 8104f30:	bf00      	nop
 8104f32:	bf00      	nop
 8104f34:	e7fd      	b.n	8104f32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8104f36:	2350      	movs	r3, #80	@ 0x50
 8104f38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8104f3a:	697b      	ldr	r3, [r7, #20]
 8104f3c:	2b50      	cmp	r3, #80	@ 0x50
 8104f3e:	d00b      	beq.n	8104f58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8104f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104f44:	f383 8811 	msr	BASEPRI, r3
 8104f48:	f3bf 8f6f 	isb	sy
 8104f4c:	f3bf 8f4f 	dsb	sy
 8104f50:	61bb      	str	r3, [r7, #24]
}
 8104f52:	bf00      	nop
 8104f54:	bf00      	nop
 8104f56:	e7fd      	b.n	8104f54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8104f58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8104f5a:	683b      	ldr	r3, [r7, #0]
 8104f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8104f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104f60:	2b00      	cmp	r3, #0
 8104f62:	d00d      	beq.n	8104f80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8104f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104f66:	2201      	movs	r2, #1
 8104f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8104f6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8104f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104f72:	9300      	str	r3, [sp, #0]
 8104f74:	4613      	mov	r3, r2
 8104f76:	687a      	ldr	r2, [r7, #4]
 8104f78:	68b9      	ldr	r1, [r7, #8]
 8104f7a:	68f8      	ldr	r0, [r7, #12]
 8104f7c:	f000 f840 	bl	8105000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8104f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8104f82:	4618      	mov	r0, r3
 8104f84:	3730      	adds	r7, #48	@ 0x30
 8104f86:	46bd      	mov	sp, r7
 8104f88:	bd80      	pop	{r7, pc}

08104f8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8104f8a:	b580      	push	{r7, lr}
 8104f8c:	b08a      	sub	sp, #40	@ 0x28
 8104f8e:	af02      	add	r7, sp, #8
 8104f90:	60f8      	str	r0, [r7, #12]
 8104f92:	60b9      	str	r1, [r7, #8]
 8104f94:	4613      	mov	r3, r2
 8104f96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8104f98:	68fb      	ldr	r3, [r7, #12]
 8104f9a:	2b00      	cmp	r3, #0
 8104f9c:	d10b      	bne.n	8104fb6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8104f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104fa2:	f383 8811 	msr	BASEPRI, r3
 8104fa6:	f3bf 8f6f 	isb	sy
 8104faa:	f3bf 8f4f 	dsb	sy
 8104fae:	613b      	str	r3, [r7, #16]
}
 8104fb0:	bf00      	nop
 8104fb2:	bf00      	nop
 8104fb4:	e7fd      	b.n	8104fb2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104fb6:	68fb      	ldr	r3, [r7, #12]
 8104fb8:	68ba      	ldr	r2, [r7, #8]
 8104fba:	fb02 f303 	mul.w	r3, r2, r3
 8104fbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8104fc0:	69fb      	ldr	r3, [r7, #28]
 8104fc2:	3350      	adds	r3, #80	@ 0x50
 8104fc4:	4618      	mov	r0, r3
 8104fc6:	f7ff fa03 	bl	81043d0 <pvPortMalloc>
 8104fca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8104fcc:	69bb      	ldr	r3, [r7, #24]
 8104fce:	2b00      	cmp	r3, #0
 8104fd0:	d011      	beq.n	8104ff6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8104fd2:	69bb      	ldr	r3, [r7, #24]
 8104fd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8104fd6:	697b      	ldr	r3, [r7, #20]
 8104fd8:	3350      	adds	r3, #80	@ 0x50
 8104fda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8104fdc:	69bb      	ldr	r3, [r7, #24]
 8104fde:	2200      	movs	r2, #0
 8104fe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8104fe4:	79fa      	ldrb	r2, [r7, #7]
 8104fe6:	69bb      	ldr	r3, [r7, #24]
 8104fe8:	9300      	str	r3, [sp, #0]
 8104fea:	4613      	mov	r3, r2
 8104fec:	697a      	ldr	r2, [r7, #20]
 8104fee:	68b9      	ldr	r1, [r7, #8]
 8104ff0:	68f8      	ldr	r0, [r7, #12]
 8104ff2:	f000 f805 	bl	8105000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8104ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8104ff8:	4618      	mov	r0, r3
 8104ffa:	3720      	adds	r7, #32
 8104ffc:	46bd      	mov	sp, r7
 8104ffe:	bd80      	pop	{r7, pc}

08105000 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8105000:	b580      	push	{r7, lr}
 8105002:	b084      	sub	sp, #16
 8105004:	af00      	add	r7, sp, #0
 8105006:	60f8      	str	r0, [r7, #12]
 8105008:	60b9      	str	r1, [r7, #8]
 810500a:	607a      	str	r2, [r7, #4]
 810500c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810500e:	68bb      	ldr	r3, [r7, #8]
 8105010:	2b00      	cmp	r3, #0
 8105012:	d103      	bne.n	810501c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8105014:	69bb      	ldr	r3, [r7, #24]
 8105016:	69ba      	ldr	r2, [r7, #24]
 8105018:	601a      	str	r2, [r3, #0]
 810501a:	e002      	b.n	8105022 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810501c:	69bb      	ldr	r3, [r7, #24]
 810501e:	687a      	ldr	r2, [r7, #4]
 8105020:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8105022:	69bb      	ldr	r3, [r7, #24]
 8105024:	68fa      	ldr	r2, [r7, #12]
 8105026:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8105028:	69bb      	ldr	r3, [r7, #24]
 810502a:	68ba      	ldr	r2, [r7, #8]
 810502c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810502e:	2101      	movs	r1, #1
 8105030:	69b8      	ldr	r0, [r7, #24]
 8105032:	f7ff fec3 	bl	8104dbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8105036:	69bb      	ldr	r3, [r7, #24]
 8105038:	78fa      	ldrb	r2, [r7, #3]
 810503a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810503e:	bf00      	nop
 8105040:	3710      	adds	r7, #16
 8105042:	46bd      	mov	sp, r7
 8105044:	bd80      	pop	{r7, pc}
	...

08105048 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8105048:	b580      	push	{r7, lr}
 810504a:	b08e      	sub	sp, #56	@ 0x38
 810504c:	af00      	add	r7, sp, #0
 810504e:	60f8      	str	r0, [r7, #12]
 8105050:	60b9      	str	r1, [r7, #8]
 8105052:	607a      	str	r2, [r7, #4]
 8105054:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8105056:	2300      	movs	r3, #0
 8105058:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810505a:	68fb      	ldr	r3, [r7, #12]
 810505c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105060:	2b00      	cmp	r3, #0
 8105062:	d10b      	bne.n	810507c <xQueueGenericSend+0x34>
	__asm volatile
 8105064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105068:	f383 8811 	msr	BASEPRI, r3
 810506c:	f3bf 8f6f 	isb	sy
 8105070:	f3bf 8f4f 	dsb	sy
 8105074:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8105076:	bf00      	nop
 8105078:	bf00      	nop
 810507a:	e7fd      	b.n	8105078 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810507c:	68bb      	ldr	r3, [r7, #8]
 810507e:	2b00      	cmp	r3, #0
 8105080:	d103      	bne.n	810508a <xQueueGenericSend+0x42>
 8105082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105086:	2b00      	cmp	r3, #0
 8105088:	d101      	bne.n	810508e <xQueueGenericSend+0x46>
 810508a:	2301      	movs	r3, #1
 810508c:	e000      	b.n	8105090 <xQueueGenericSend+0x48>
 810508e:	2300      	movs	r3, #0
 8105090:	2b00      	cmp	r3, #0
 8105092:	d10b      	bne.n	81050ac <xQueueGenericSend+0x64>
	__asm volatile
 8105094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105098:	f383 8811 	msr	BASEPRI, r3
 810509c:	f3bf 8f6f 	isb	sy
 81050a0:	f3bf 8f4f 	dsb	sy
 81050a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81050a6:	bf00      	nop
 81050a8:	bf00      	nop
 81050aa:	e7fd      	b.n	81050a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81050ac:	683b      	ldr	r3, [r7, #0]
 81050ae:	2b02      	cmp	r3, #2
 81050b0:	d103      	bne.n	81050ba <xQueueGenericSend+0x72>
 81050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81050b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81050b6:	2b01      	cmp	r3, #1
 81050b8:	d101      	bne.n	81050be <xQueueGenericSend+0x76>
 81050ba:	2301      	movs	r3, #1
 81050bc:	e000      	b.n	81050c0 <xQueueGenericSend+0x78>
 81050be:	2300      	movs	r3, #0
 81050c0:	2b00      	cmp	r3, #0
 81050c2:	d10b      	bne.n	81050dc <xQueueGenericSend+0x94>
	__asm volatile
 81050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81050c8:	f383 8811 	msr	BASEPRI, r3
 81050cc:	f3bf 8f6f 	isb	sy
 81050d0:	f3bf 8f4f 	dsb	sy
 81050d4:	623b      	str	r3, [r7, #32]
}
 81050d6:	bf00      	nop
 81050d8:	bf00      	nop
 81050da:	e7fd      	b.n	81050d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81050dc:	f001 fe5e 	bl	8106d9c <xTaskGetSchedulerState>
 81050e0:	4603      	mov	r3, r0
 81050e2:	2b00      	cmp	r3, #0
 81050e4:	d102      	bne.n	81050ec <xQueueGenericSend+0xa4>
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	d101      	bne.n	81050f0 <xQueueGenericSend+0xa8>
 81050ec:	2301      	movs	r3, #1
 81050ee:	e000      	b.n	81050f2 <xQueueGenericSend+0xaa>
 81050f0:	2300      	movs	r3, #0
 81050f2:	2b00      	cmp	r3, #0
 81050f4:	d10b      	bne.n	810510e <xQueueGenericSend+0xc6>
	__asm volatile
 81050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81050fa:	f383 8811 	msr	BASEPRI, r3
 81050fe:	f3bf 8f6f 	isb	sy
 8105102:	f3bf 8f4f 	dsb	sy
 8105106:	61fb      	str	r3, [r7, #28]
}
 8105108:	bf00      	nop
 810510a:	bf00      	nop
 810510c:	e7fd      	b.n	810510a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810510e:	f7ff fd33 	bl	8104b78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8105112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810511a:	429a      	cmp	r2, r3
 810511c:	d302      	bcc.n	8105124 <xQueueGenericSend+0xdc>
 810511e:	683b      	ldr	r3, [r7, #0]
 8105120:	2b02      	cmp	r3, #2
 8105122:	d129      	bne.n	8105178 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8105124:	683a      	ldr	r2, [r7, #0]
 8105126:	68b9      	ldr	r1, [r7, #8]
 8105128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810512a:	f000 fa0f 	bl	810554c <prvCopyDataToQueue>
 810512e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105134:	2b00      	cmp	r3, #0
 8105136:	d010      	beq.n	810515a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8105138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810513a:	3324      	adds	r3, #36	@ 0x24
 810513c:	4618      	mov	r0, r3
 810513e:	f001 fc2f 	bl	81069a0 <xTaskRemoveFromEventList>
 8105142:	4603      	mov	r3, r0
 8105144:	2b00      	cmp	r3, #0
 8105146:	d013      	beq.n	8105170 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8105148:	4b3f      	ldr	r3, [pc, #252]	@ (8105248 <xQueueGenericSend+0x200>)
 810514a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810514e:	601a      	str	r2, [r3, #0]
 8105150:	f3bf 8f4f 	dsb	sy
 8105154:	f3bf 8f6f 	isb	sy
 8105158:	e00a      	b.n	8105170 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810515a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810515c:	2b00      	cmp	r3, #0
 810515e:	d007      	beq.n	8105170 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8105160:	4b39      	ldr	r3, [pc, #228]	@ (8105248 <xQueueGenericSend+0x200>)
 8105162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105166:	601a      	str	r2, [r3, #0]
 8105168:	f3bf 8f4f 	dsb	sy
 810516c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8105170:	f7ff fd34 	bl	8104bdc <vPortExitCritical>
				return pdPASS;
 8105174:	2301      	movs	r3, #1
 8105176:	e063      	b.n	8105240 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	2b00      	cmp	r3, #0
 810517c:	d103      	bne.n	8105186 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810517e:	f7ff fd2d 	bl	8104bdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8105182:	2300      	movs	r3, #0
 8105184:	e05c      	b.n	8105240 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8105186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105188:	2b00      	cmp	r3, #0
 810518a:	d106      	bne.n	810519a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810518c:	f107 0314 	add.w	r3, r7, #20
 8105190:	4618      	mov	r0, r3
 8105192:	f001 fc91 	bl	8106ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8105196:	2301      	movs	r3, #1
 8105198:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810519a:	f7ff fd1f 	bl	8104bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810519e:	f001 f9d1 	bl	8106544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81051a2:	f7ff fce9 	bl	8104b78 <vPortEnterCritical>
 81051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81051a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81051ac:	b25b      	sxtb	r3, r3
 81051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 81051b2:	d103      	bne.n	81051bc <xQueueGenericSend+0x174>
 81051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81051b6:	2200      	movs	r2, #0
 81051b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81051be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81051c2:	b25b      	sxtb	r3, r3
 81051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81051c8:	d103      	bne.n	81051d2 <xQueueGenericSend+0x18a>
 81051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81051cc:	2200      	movs	r2, #0
 81051ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81051d2:	f7ff fd03 	bl	8104bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81051d6:	1d3a      	adds	r2, r7, #4
 81051d8:	f107 0314 	add.w	r3, r7, #20
 81051dc:	4611      	mov	r1, r2
 81051de:	4618      	mov	r0, r3
 81051e0:	f001 fc80 	bl	8106ae4 <xTaskCheckForTimeOut>
 81051e4:	4603      	mov	r3, r0
 81051e6:	2b00      	cmp	r3, #0
 81051e8:	d124      	bne.n	8105234 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81051ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81051ec:	f000 faa6 	bl	810573c <prvIsQueueFull>
 81051f0:	4603      	mov	r3, r0
 81051f2:	2b00      	cmp	r3, #0
 81051f4:	d018      	beq.n	8105228 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81051f8:	3310      	adds	r3, #16
 81051fa:	687a      	ldr	r2, [r7, #4]
 81051fc:	4611      	mov	r1, r2
 81051fe:	4618      	mov	r0, r3
 8105200:	f001 fb7c 	bl	81068fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8105204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105206:	f000 fa31 	bl	810566c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810520a:	f001 f9a9 	bl	8106560 <xTaskResumeAll>
 810520e:	4603      	mov	r3, r0
 8105210:	2b00      	cmp	r3, #0
 8105212:	f47f af7c 	bne.w	810510e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8105216:	4b0c      	ldr	r3, [pc, #48]	@ (8105248 <xQueueGenericSend+0x200>)
 8105218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810521c:	601a      	str	r2, [r3, #0]
 810521e:	f3bf 8f4f 	dsb	sy
 8105222:	f3bf 8f6f 	isb	sy
 8105226:	e772      	b.n	810510e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8105228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810522a:	f000 fa1f 	bl	810566c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810522e:	f001 f997 	bl	8106560 <xTaskResumeAll>
 8105232:	e76c      	b.n	810510e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8105234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105236:	f000 fa19 	bl	810566c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810523a:	f001 f991 	bl	8106560 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810523e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8105240:	4618      	mov	r0, r3
 8105242:	3738      	adds	r7, #56	@ 0x38
 8105244:	46bd      	mov	sp, r7
 8105246:	bd80      	pop	{r7, pc}
 8105248:	e000ed04 	.word	0xe000ed04

0810524c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810524c:	b580      	push	{r7, lr}
 810524e:	b090      	sub	sp, #64	@ 0x40
 8105250:	af00      	add	r7, sp, #0
 8105252:	60f8      	str	r0, [r7, #12]
 8105254:	60b9      	str	r1, [r7, #8]
 8105256:	607a      	str	r2, [r7, #4]
 8105258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810525a:	68fb      	ldr	r3, [r7, #12]
 810525c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810525e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105260:	2b00      	cmp	r3, #0
 8105262:	d10b      	bne.n	810527c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8105264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105268:	f383 8811 	msr	BASEPRI, r3
 810526c:	f3bf 8f6f 	isb	sy
 8105270:	f3bf 8f4f 	dsb	sy
 8105274:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8105276:	bf00      	nop
 8105278:	bf00      	nop
 810527a:	e7fd      	b.n	8105278 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810527c:	68bb      	ldr	r3, [r7, #8]
 810527e:	2b00      	cmp	r3, #0
 8105280:	d103      	bne.n	810528a <xQueueGenericSendFromISR+0x3e>
 8105282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105286:	2b00      	cmp	r3, #0
 8105288:	d101      	bne.n	810528e <xQueueGenericSendFromISR+0x42>
 810528a:	2301      	movs	r3, #1
 810528c:	e000      	b.n	8105290 <xQueueGenericSendFromISR+0x44>
 810528e:	2300      	movs	r3, #0
 8105290:	2b00      	cmp	r3, #0
 8105292:	d10b      	bne.n	81052ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8105294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105298:	f383 8811 	msr	BASEPRI, r3
 810529c:	f3bf 8f6f 	isb	sy
 81052a0:	f3bf 8f4f 	dsb	sy
 81052a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81052a6:	bf00      	nop
 81052a8:	bf00      	nop
 81052aa:	e7fd      	b.n	81052a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81052ac:	683b      	ldr	r3, [r7, #0]
 81052ae:	2b02      	cmp	r3, #2
 81052b0:	d103      	bne.n	81052ba <xQueueGenericSendFromISR+0x6e>
 81052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81052b6:	2b01      	cmp	r3, #1
 81052b8:	d101      	bne.n	81052be <xQueueGenericSendFromISR+0x72>
 81052ba:	2301      	movs	r3, #1
 81052bc:	e000      	b.n	81052c0 <xQueueGenericSendFromISR+0x74>
 81052be:	2300      	movs	r3, #0
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	d10b      	bne.n	81052dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 81052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81052c8:	f383 8811 	msr	BASEPRI, r3
 81052cc:	f3bf 8f6f 	isb	sy
 81052d0:	f3bf 8f4f 	dsb	sy
 81052d4:	623b      	str	r3, [r7, #32]
}
 81052d6:	bf00      	nop
 81052d8:	bf00      	nop
 81052da:	e7fd      	b.n	81052d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81052dc:	f7ff fd2c 	bl	8104d38 <vPortValidateInterruptPriority>
	__asm volatile
 81052e0:	f3ef 8211 	mrs	r2, BASEPRI
 81052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81052e8:	f383 8811 	msr	BASEPRI, r3
 81052ec:	f3bf 8f6f 	isb	sy
 81052f0:	f3bf 8f4f 	dsb	sy
 81052f4:	61fa      	str	r2, [r7, #28]
 81052f6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 81052f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81052fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81052fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105304:	429a      	cmp	r2, r3
 8105306:	d302      	bcc.n	810530e <xQueueGenericSendFromISR+0xc2>
 8105308:	683b      	ldr	r3, [r7, #0]
 810530a:	2b02      	cmp	r3, #2
 810530c:	d12f      	bne.n	810536e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105314:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810531a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810531e:	683a      	ldr	r2, [r7, #0]
 8105320:	68b9      	ldr	r1, [r7, #8]
 8105322:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8105324:	f000 f912 	bl	810554c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8105328:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105330:	d112      	bne.n	8105358 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105336:	2b00      	cmp	r3, #0
 8105338:	d016      	beq.n	8105368 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810533c:	3324      	adds	r3, #36	@ 0x24
 810533e:	4618      	mov	r0, r3
 8105340:	f001 fb2e 	bl	81069a0 <xTaskRemoveFromEventList>
 8105344:	4603      	mov	r3, r0
 8105346:	2b00      	cmp	r3, #0
 8105348:	d00e      	beq.n	8105368 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810534a:	687b      	ldr	r3, [r7, #4]
 810534c:	2b00      	cmp	r3, #0
 810534e:	d00b      	beq.n	8105368 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	2201      	movs	r2, #1
 8105354:	601a      	str	r2, [r3, #0]
 8105356:	e007      	b.n	8105368 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8105358:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810535c:	3301      	adds	r3, #1
 810535e:	b2db      	uxtb	r3, r3
 8105360:	b25a      	sxtb	r2, r3
 8105362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8105368:	2301      	movs	r3, #1
 810536a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810536c:	e001      	b.n	8105372 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810536e:	2300      	movs	r3, #0
 8105370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105374:	617b      	str	r3, [r7, #20]
	__asm volatile
 8105376:	697b      	ldr	r3, [r7, #20]
 8105378:	f383 8811 	msr	BASEPRI, r3
}
 810537c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810537e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8105380:	4618      	mov	r0, r3
 8105382:	3740      	adds	r7, #64	@ 0x40
 8105384:	46bd      	mov	sp, r7
 8105386:	bd80      	pop	{r7, pc}

08105388 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8105388:	b580      	push	{r7, lr}
 810538a:	b08c      	sub	sp, #48	@ 0x30
 810538c:	af00      	add	r7, sp, #0
 810538e:	60f8      	str	r0, [r7, #12]
 8105390:	60b9      	str	r1, [r7, #8]
 8105392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8105394:	2300      	movs	r3, #0
 8105396:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8105398:	68fb      	ldr	r3, [r7, #12]
 810539a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d10b      	bne.n	81053ba <xQueueReceive+0x32>
	__asm volatile
 81053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81053a6:	f383 8811 	msr	BASEPRI, r3
 81053aa:	f3bf 8f6f 	isb	sy
 81053ae:	f3bf 8f4f 	dsb	sy
 81053b2:	623b      	str	r3, [r7, #32]
}
 81053b4:	bf00      	nop
 81053b6:	bf00      	nop
 81053b8:	e7fd      	b.n	81053b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81053ba:	68bb      	ldr	r3, [r7, #8]
 81053bc:	2b00      	cmp	r3, #0
 81053be:	d103      	bne.n	81053c8 <xQueueReceive+0x40>
 81053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81053c4:	2b00      	cmp	r3, #0
 81053c6:	d101      	bne.n	81053cc <xQueueReceive+0x44>
 81053c8:	2301      	movs	r3, #1
 81053ca:	e000      	b.n	81053ce <xQueueReceive+0x46>
 81053cc:	2300      	movs	r3, #0
 81053ce:	2b00      	cmp	r3, #0
 81053d0:	d10b      	bne.n	81053ea <xQueueReceive+0x62>
	__asm volatile
 81053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81053d6:	f383 8811 	msr	BASEPRI, r3
 81053da:	f3bf 8f6f 	isb	sy
 81053de:	f3bf 8f4f 	dsb	sy
 81053e2:	61fb      	str	r3, [r7, #28]
}
 81053e4:	bf00      	nop
 81053e6:	bf00      	nop
 81053e8:	e7fd      	b.n	81053e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81053ea:	f001 fcd7 	bl	8106d9c <xTaskGetSchedulerState>
 81053ee:	4603      	mov	r3, r0
 81053f0:	2b00      	cmp	r3, #0
 81053f2:	d102      	bne.n	81053fa <xQueueReceive+0x72>
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	2b00      	cmp	r3, #0
 81053f8:	d101      	bne.n	81053fe <xQueueReceive+0x76>
 81053fa:	2301      	movs	r3, #1
 81053fc:	e000      	b.n	8105400 <xQueueReceive+0x78>
 81053fe:	2300      	movs	r3, #0
 8105400:	2b00      	cmp	r3, #0
 8105402:	d10b      	bne.n	810541c <xQueueReceive+0x94>
	__asm volatile
 8105404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105408:	f383 8811 	msr	BASEPRI, r3
 810540c:	f3bf 8f6f 	isb	sy
 8105410:	f3bf 8f4f 	dsb	sy
 8105414:	61bb      	str	r3, [r7, #24]
}
 8105416:	bf00      	nop
 8105418:	bf00      	nop
 810541a:	e7fd      	b.n	8105418 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810541c:	f7ff fbac 	bl	8104b78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105424:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8105426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105428:	2b00      	cmp	r3, #0
 810542a:	d01f      	beq.n	810546c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810542c:	68b9      	ldr	r1, [r7, #8]
 810542e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105430:	f000 f8f6 	bl	8105620 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8105434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105436:	1e5a      	subs	r2, r3, #1
 8105438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810543a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810543e:	691b      	ldr	r3, [r3, #16]
 8105440:	2b00      	cmp	r3, #0
 8105442:	d00f      	beq.n	8105464 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105446:	3310      	adds	r3, #16
 8105448:	4618      	mov	r0, r3
 810544a:	f001 faa9 	bl	81069a0 <xTaskRemoveFromEventList>
 810544e:	4603      	mov	r3, r0
 8105450:	2b00      	cmp	r3, #0
 8105452:	d007      	beq.n	8105464 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8105454:	4b3c      	ldr	r3, [pc, #240]	@ (8105548 <xQueueReceive+0x1c0>)
 8105456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810545a:	601a      	str	r2, [r3, #0]
 810545c:	f3bf 8f4f 	dsb	sy
 8105460:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8105464:	f7ff fbba 	bl	8104bdc <vPortExitCritical>
				return pdPASS;
 8105468:	2301      	movs	r3, #1
 810546a:	e069      	b.n	8105540 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	2b00      	cmp	r3, #0
 8105470:	d103      	bne.n	810547a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8105472:	f7ff fbb3 	bl	8104bdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8105476:	2300      	movs	r3, #0
 8105478:	e062      	b.n	8105540 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810547c:	2b00      	cmp	r3, #0
 810547e:	d106      	bne.n	810548e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8105480:	f107 0310 	add.w	r3, r7, #16
 8105484:	4618      	mov	r0, r3
 8105486:	f001 fb17 	bl	8106ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810548a:	2301      	movs	r3, #1
 810548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810548e:	f7ff fba5 	bl	8104bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8105492:	f001 f857 	bl	8106544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8105496:	f7ff fb6f 	bl	8104b78 <vPortEnterCritical>
 810549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810549c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81054a0:	b25b      	sxtb	r3, r3
 81054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054a6:	d103      	bne.n	81054b0 <xQueueReceive+0x128>
 81054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81054aa:	2200      	movs	r2, #0
 81054ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81054b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81054b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81054b6:	b25b      	sxtb	r3, r3
 81054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054bc:	d103      	bne.n	81054c6 <xQueueReceive+0x13e>
 81054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81054c0:	2200      	movs	r2, #0
 81054c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81054c6:	f7ff fb89 	bl	8104bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81054ca:	1d3a      	adds	r2, r7, #4
 81054cc:	f107 0310 	add.w	r3, r7, #16
 81054d0:	4611      	mov	r1, r2
 81054d2:	4618      	mov	r0, r3
 81054d4:	f001 fb06 	bl	8106ae4 <xTaskCheckForTimeOut>
 81054d8:	4603      	mov	r3, r0
 81054da:	2b00      	cmp	r3, #0
 81054dc:	d123      	bne.n	8105526 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81054de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81054e0:	f000 f916 	bl	8105710 <prvIsQueueEmpty>
 81054e4:	4603      	mov	r3, r0
 81054e6:	2b00      	cmp	r3, #0
 81054e8:	d017      	beq.n	810551a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81054ec:	3324      	adds	r3, #36	@ 0x24
 81054ee:	687a      	ldr	r2, [r7, #4]
 81054f0:	4611      	mov	r1, r2
 81054f2:	4618      	mov	r0, r3
 81054f4:	f001 fa02 	bl	81068fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81054f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81054fa:	f000 f8b7 	bl	810566c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81054fe:	f001 f82f 	bl	8106560 <xTaskResumeAll>
 8105502:	4603      	mov	r3, r0
 8105504:	2b00      	cmp	r3, #0
 8105506:	d189      	bne.n	810541c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8105508:	4b0f      	ldr	r3, [pc, #60]	@ (8105548 <xQueueReceive+0x1c0>)
 810550a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810550e:	601a      	str	r2, [r3, #0]
 8105510:	f3bf 8f4f 	dsb	sy
 8105514:	f3bf 8f6f 	isb	sy
 8105518:	e780      	b.n	810541c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810551a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810551c:	f000 f8a6 	bl	810566c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8105520:	f001 f81e 	bl	8106560 <xTaskResumeAll>
 8105524:	e77a      	b.n	810541c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8105526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105528:	f000 f8a0 	bl	810566c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810552c:	f001 f818 	bl	8106560 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8105530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105532:	f000 f8ed 	bl	8105710 <prvIsQueueEmpty>
 8105536:	4603      	mov	r3, r0
 8105538:	2b00      	cmp	r3, #0
 810553a:	f43f af6f 	beq.w	810541c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810553e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8105540:	4618      	mov	r0, r3
 8105542:	3730      	adds	r7, #48	@ 0x30
 8105544:	46bd      	mov	sp, r7
 8105546:	bd80      	pop	{r7, pc}
 8105548:	e000ed04 	.word	0xe000ed04

0810554c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810554c:	b580      	push	{r7, lr}
 810554e:	b086      	sub	sp, #24
 8105550:	af00      	add	r7, sp, #0
 8105552:	60f8      	str	r0, [r7, #12]
 8105554:	60b9      	str	r1, [r7, #8]
 8105556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8105558:	2300      	movs	r3, #0
 810555a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810555c:	68fb      	ldr	r3, [r7, #12]
 810555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105560:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8105562:	68fb      	ldr	r3, [r7, #12]
 8105564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105566:	2b00      	cmp	r3, #0
 8105568:	d10d      	bne.n	8105586 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810556a:	68fb      	ldr	r3, [r7, #12]
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	2b00      	cmp	r3, #0
 8105570:	d14d      	bne.n	810560e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8105572:	68fb      	ldr	r3, [r7, #12]
 8105574:	689b      	ldr	r3, [r3, #8]
 8105576:	4618      	mov	r0, r3
 8105578:	f001 fc2e 	bl	8106dd8 <xTaskPriorityDisinherit>
 810557c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810557e:	68fb      	ldr	r3, [r7, #12]
 8105580:	2200      	movs	r2, #0
 8105582:	609a      	str	r2, [r3, #8]
 8105584:	e043      	b.n	810560e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	2b00      	cmp	r3, #0
 810558a:	d119      	bne.n	81055c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810558c:	68fb      	ldr	r3, [r7, #12]
 810558e:	6858      	ldr	r0, [r3, #4]
 8105590:	68fb      	ldr	r3, [r7, #12]
 8105592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105594:	461a      	mov	r2, r3
 8105596:	68b9      	ldr	r1, [r7, #8]
 8105598:	f002 fc4c 	bl	8107e34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810559c:	68fb      	ldr	r3, [r7, #12]
 810559e:	685a      	ldr	r2, [r3, #4]
 81055a0:	68fb      	ldr	r3, [r7, #12]
 81055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055a4:	441a      	add	r2, r3
 81055a6:	68fb      	ldr	r3, [r7, #12]
 81055a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81055aa:	68fb      	ldr	r3, [r7, #12]
 81055ac:	685a      	ldr	r2, [r3, #4]
 81055ae:	68fb      	ldr	r3, [r7, #12]
 81055b0:	689b      	ldr	r3, [r3, #8]
 81055b2:	429a      	cmp	r2, r3
 81055b4:	d32b      	bcc.n	810560e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81055b6:	68fb      	ldr	r3, [r7, #12]
 81055b8:	681a      	ldr	r2, [r3, #0]
 81055ba:	68fb      	ldr	r3, [r7, #12]
 81055bc:	605a      	str	r2, [r3, #4]
 81055be:	e026      	b.n	810560e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81055c0:	68fb      	ldr	r3, [r7, #12]
 81055c2:	68d8      	ldr	r0, [r3, #12]
 81055c4:	68fb      	ldr	r3, [r7, #12]
 81055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055c8:	461a      	mov	r2, r3
 81055ca:	68b9      	ldr	r1, [r7, #8]
 81055cc:	f002 fc32 	bl	8107e34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81055d0:	68fb      	ldr	r3, [r7, #12]
 81055d2:	68da      	ldr	r2, [r3, #12]
 81055d4:	68fb      	ldr	r3, [r7, #12]
 81055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055d8:	425b      	negs	r3, r3
 81055da:	441a      	add	r2, r3
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81055e0:	68fb      	ldr	r3, [r7, #12]
 81055e2:	68da      	ldr	r2, [r3, #12]
 81055e4:	68fb      	ldr	r3, [r7, #12]
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	429a      	cmp	r2, r3
 81055ea:	d207      	bcs.n	81055fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81055ec:	68fb      	ldr	r3, [r7, #12]
 81055ee:	689a      	ldr	r2, [r3, #8]
 81055f0:	68fb      	ldr	r3, [r7, #12]
 81055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055f4:	425b      	negs	r3, r3
 81055f6:	441a      	add	r2, r3
 81055f8:	68fb      	ldr	r3, [r7, #12]
 81055fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	2b02      	cmp	r3, #2
 8105600:	d105      	bne.n	810560e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8105602:	693b      	ldr	r3, [r7, #16]
 8105604:	2b00      	cmp	r3, #0
 8105606:	d002      	beq.n	810560e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8105608:	693b      	ldr	r3, [r7, #16]
 810560a:	3b01      	subs	r3, #1
 810560c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810560e:	693b      	ldr	r3, [r7, #16]
 8105610:	1c5a      	adds	r2, r3, #1
 8105612:	68fb      	ldr	r3, [r7, #12]
 8105614:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8105616:	697b      	ldr	r3, [r7, #20]
}
 8105618:	4618      	mov	r0, r3
 810561a:	3718      	adds	r7, #24
 810561c:	46bd      	mov	sp, r7
 810561e:	bd80      	pop	{r7, pc}

08105620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8105620:	b580      	push	{r7, lr}
 8105622:	b082      	sub	sp, #8
 8105624:	af00      	add	r7, sp, #0
 8105626:	6078      	str	r0, [r7, #4]
 8105628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810562e:	2b00      	cmp	r3, #0
 8105630:	d018      	beq.n	8105664 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	68da      	ldr	r2, [r3, #12]
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810563a:	441a      	add	r2, r3
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	68da      	ldr	r2, [r3, #12]
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	689b      	ldr	r3, [r3, #8]
 8105648:	429a      	cmp	r2, r3
 810564a:	d303      	bcc.n	8105654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	681a      	ldr	r2, [r3, #0]
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	68d9      	ldr	r1, [r3, #12]
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810565c:	461a      	mov	r2, r3
 810565e:	6838      	ldr	r0, [r7, #0]
 8105660:	f002 fbe8 	bl	8107e34 <memcpy>
	}
}
 8105664:	bf00      	nop
 8105666:	3708      	adds	r7, #8
 8105668:	46bd      	mov	sp, r7
 810566a:	bd80      	pop	{r7, pc}

0810566c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810566c:	b580      	push	{r7, lr}
 810566e:	b084      	sub	sp, #16
 8105670:	af00      	add	r7, sp, #0
 8105672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8105674:	f7ff fa80 	bl	8104b78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810567e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8105680:	e011      	b.n	81056a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105686:	2b00      	cmp	r3, #0
 8105688:	d012      	beq.n	81056b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	3324      	adds	r3, #36	@ 0x24
 810568e:	4618      	mov	r0, r3
 8105690:	f001 f986 	bl	81069a0 <xTaskRemoveFromEventList>
 8105694:	4603      	mov	r3, r0
 8105696:	2b00      	cmp	r3, #0
 8105698:	d001      	beq.n	810569e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810569a:	f001 fa87 	bl	8106bac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810569e:	7bfb      	ldrb	r3, [r7, #15]
 81056a0:	3b01      	subs	r3, #1
 81056a2:	b2db      	uxtb	r3, r3
 81056a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81056a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81056aa:	2b00      	cmp	r3, #0
 81056ac:	dce9      	bgt.n	8105682 <prvUnlockQueue+0x16>
 81056ae:	e000      	b.n	81056b2 <prvUnlockQueue+0x46>
					break;
 81056b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	22ff      	movs	r2, #255	@ 0xff
 81056b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 81056ba:	f7ff fa8f 	bl	8104bdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81056be:	f7ff fa5b 	bl	8104b78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81056c2:	687b      	ldr	r3, [r7, #4]
 81056c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81056c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81056ca:	e011      	b.n	81056f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	691b      	ldr	r3, [r3, #16]
 81056d0:	2b00      	cmp	r3, #0
 81056d2:	d012      	beq.n	81056fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81056d4:	687b      	ldr	r3, [r7, #4]
 81056d6:	3310      	adds	r3, #16
 81056d8:	4618      	mov	r0, r3
 81056da:	f001 f961 	bl	81069a0 <xTaskRemoveFromEventList>
 81056de:	4603      	mov	r3, r0
 81056e0:	2b00      	cmp	r3, #0
 81056e2:	d001      	beq.n	81056e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81056e4:	f001 fa62 	bl	8106bac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81056e8:	7bbb      	ldrb	r3, [r7, #14]
 81056ea:	3b01      	subs	r3, #1
 81056ec:	b2db      	uxtb	r3, r3
 81056ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81056f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81056f4:	2b00      	cmp	r3, #0
 81056f6:	dce9      	bgt.n	81056cc <prvUnlockQueue+0x60>
 81056f8:	e000      	b.n	81056fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81056fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	22ff      	movs	r2, #255	@ 0xff
 8105700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8105704:	f7ff fa6a 	bl	8104bdc <vPortExitCritical>
}
 8105708:	bf00      	nop
 810570a:	3710      	adds	r7, #16
 810570c:	46bd      	mov	sp, r7
 810570e:	bd80      	pop	{r7, pc}

08105710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8105710:	b580      	push	{r7, lr}
 8105712:	b084      	sub	sp, #16
 8105714:	af00      	add	r7, sp, #0
 8105716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105718:	f7ff fa2e 	bl	8104b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105720:	2b00      	cmp	r3, #0
 8105722:	d102      	bne.n	810572a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8105724:	2301      	movs	r3, #1
 8105726:	60fb      	str	r3, [r7, #12]
 8105728:	e001      	b.n	810572e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810572a:	2300      	movs	r3, #0
 810572c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810572e:	f7ff fa55 	bl	8104bdc <vPortExitCritical>

	return xReturn;
 8105732:	68fb      	ldr	r3, [r7, #12]
}
 8105734:	4618      	mov	r0, r3
 8105736:	3710      	adds	r7, #16
 8105738:	46bd      	mov	sp, r7
 810573a:	bd80      	pop	{r7, pc}

0810573c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810573c:	b580      	push	{r7, lr}
 810573e:	b084      	sub	sp, #16
 8105740:	af00      	add	r7, sp, #0
 8105742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105744:	f7ff fa18 	bl	8104b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105750:	429a      	cmp	r2, r3
 8105752:	d102      	bne.n	810575a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8105754:	2301      	movs	r3, #1
 8105756:	60fb      	str	r3, [r7, #12]
 8105758:	e001      	b.n	810575e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810575a:	2300      	movs	r3, #0
 810575c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810575e:	f7ff fa3d 	bl	8104bdc <vPortExitCritical>

	return xReturn;
 8105762:	68fb      	ldr	r3, [r7, #12]
}
 8105764:	4618      	mov	r0, r3
 8105766:	3710      	adds	r7, #16
 8105768:	46bd      	mov	sp, r7
 810576a:	bd80      	pop	{r7, pc}

0810576c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810576c:	b480      	push	{r7}
 810576e:	b085      	sub	sp, #20
 8105770:	af00      	add	r7, sp, #0
 8105772:	6078      	str	r0, [r7, #4]
 8105774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105776:	2300      	movs	r3, #0
 8105778:	60fb      	str	r3, [r7, #12]
 810577a:	e014      	b.n	81057a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810577c:	4a0f      	ldr	r2, [pc, #60]	@ (81057bc <vQueueAddToRegistry+0x50>)
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8105784:	2b00      	cmp	r3, #0
 8105786:	d10b      	bne.n	81057a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8105788:	490c      	ldr	r1, [pc, #48]	@ (81057bc <vQueueAddToRegistry+0x50>)
 810578a:	68fb      	ldr	r3, [r7, #12]
 810578c:	683a      	ldr	r2, [r7, #0]
 810578e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8105792:	4a0a      	ldr	r2, [pc, #40]	@ (81057bc <vQueueAddToRegistry+0x50>)
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	00db      	lsls	r3, r3, #3
 8105798:	4413      	add	r3, r2
 810579a:	687a      	ldr	r2, [r7, #4]
 810579c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810579e:	e006      	b.n	81057ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81057a0:	68fb      	ldr	r3, [r7, #12]
 81057a2:	3301      	adds	r3, #1
 81057a4:	60fb      	str	r3, [r7, #12]
 81057a6:	68fb      	ldr	r3, [r7, #12]
 81057a8:	2b07      	cmp	r3, #7
 81057aa:	d9e7      	bls.n	810577c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81057ac:	bf00      	nop
 81057ae:	bf00      	nop
 81057b0:	3714      	adds	r7, #20
 81057b2:	46bd      	mov	sp, r7
 81057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057b8:	4770      	bx	lr
 81057ba:	bf00      	nop
 81057bc:	10004464 	.word	0x10004464

081057c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81057c0:	b580      	push	{r7, lr}
 81057c2:	b086      	sub	sp, #24
 81057c4:	af00      	add	r7, sp, #0
 81057c6:	60f8      	str	r0, [r7, #12]
 81057c8:	60b9      	str	r1, [r7, #8]
 81057ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81057cc:	68fb      	ldr	r3, [r7, #12]
 81057ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81057d0:	f7ff f9d2 	bl	8104b78 <vPortEnterCritical>
 81057d4:	697b      	ldr	r3, [r7, #20]
 81057d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81057da:	b25b      	sxtb	r3, r3
 81057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057e0:	d103      	bne.n	81057ea <vQueueWaitForMessageRestricted+0x2a>
 81057e2:	697b      	ldr	r3, [r7, #20]
 81057e4:	2200      	movs	r2, #0
 81057e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81057ea:	697b      	ldr	r3, [r7, #20]
 81057ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81057f0:	b25b      	sxtb	r3, r3
 81057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057f6:	d103      	bne.n	8105800 <vQueueWaitForMessageRestricted+0x40>
 81057f8:	697b      	ldr	r3, [r7, #20]
 81057fa:	2200      	movs	r2, #0
 81057fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8105800:	f7ff f9ec 	bl	8104bdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8105804:	697b      	ldr	r3, [r7, #20]
 8105806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105808:	2b00      	cmp	r3, #0
 810580a:	d106      	bne.n	810581a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810580c:	697b      	ldr	r3, [r7, #20]
 810580e:	3324      	adds	r3, #36	@ 0x24
 8105810:	687a      	ldr	r2, [r7, #4]
 8105812:	68b9      	ldr	r1, [r7, #8]
 8105814:	4618      	mov	r0, r3
 8105816:	f001 f897 	bl	8106948 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810581a:	6978      	ldr	r0, [r7, #20]
 810581c:	f7ff ff26 	bl	810566c <prvUnlockQueue>
	}
 8105820:	bf00      	nop
 8105822:	3718      	adds	r7, #24
 8105824:	46bd      	mov	sp, r7
 8105826:	bd80      	pop	{r7, pc}

08105828 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8105828:	b580      	push	{r7, lr}
 810582a:	b090      	sub	sp, #64	@ 0x40
 810582c:	af02      	add	r7, sp, #8
 810582e:	60f8      	str	r0, [r7, #12]
 8105830:	60b9      	str	r1, [r7, #8]
 8105832:	607a      	str	r2, [r7, #4]
 8105834:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8105836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105838:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 810583a:	683b      	ldr	r3, [r7, #0]
 810583c:	2b00      	cmp	r3, #0
 810583e:	d10b      	bne.n	8105858 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 8105840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105844:	f383 8811 	msr	BASEPRI, r3
 8105848:	f3bf 8f6f 	isb	sy
 810584c:	f3bf 8f4f 	dsb	sy
 8105850:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8105852:	bf00      	nop
 8105854:	bf00      	nop
 8105856:	e7fd      	b.n	8105854 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8105858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810585a:	2b00      	cmp	r3, #0
 810585c:	d10b      	bne.n	8105876 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 810585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105862:	f383 8811 	msr	BASEPRI, r3
 8105866:	f3bf 8f6f 	isb	sy
 810586a:	f3bf 8f4f 	dsb	sy
 810586e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8105870:	bf00      	nop
 8105872:	bf00      	nop
 8105874:	e7fd      	b.n	8105872 <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8105876:	68ba      	ldr	r2, [r7, #8]
 8105878:	68fb      	ldr	r3, [r7, #12]
 810587a:	429a      	cmp	r2, r3
 810587c:	d90b      	bls.n	8105896 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 810587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105882:	f383 8811 	msr	BASEPRI, r3
 8105886:	f3bf 8f6f 	isb	sy
 810588a:	f3bf 8f4f 	dsb	sy
 810588e:	623b      	str	r3, [r7, #32]
}
 8105890:	bf00      	nop
 8105892:	bf00      	nop
 8105894:	e7fd      	b.n	8105892 <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8105896:	68bb      	ldr	r3, [r7, #8]
 8105898:	2b00      	cmp	r3, #0
 810589a:	d101      	bne.n	81058a0 <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 810589c:	2301      	movs	r3, #1
 810589e:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	2b00      	cmp	r3, #0
 81058a4:	d003      	beq.n	81058ae <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 81058a6:	2303      	movs	r3, #3
 81058a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 81058ac:	e002      	b.n	81058b4 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 81058ae:	2302      	movs	r3, #2
 81058b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 81058b4:	68fb      	ldr	r3, [r7, #12]
 81058b6:	2b04      	cmp	r3, #4
 81058b8:	d80b      	bhi.n	81058d2 <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 81058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81058be:	f383 8811 	msr	BASEPRI, r3
 81058c2:	f3bf 8f6f 	isb	sy
 81058c6:	f3bf 8f4f 	dsb	sy
 81058ca:	61fb      	str	r3, [r7, #28]
}
 81058cc:	bf00      	nop
 81058ce:	bf00      	nop
 81058d0:	e7fd      	b.n	81058ce <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 81058d2:	2324      	movs	r3, #36	@ 0x24
 81058d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 81058d6:	697b      	ldr	r3, [r7, #20]
 81058d8:	2b24      	cmp	r3, #36	@ 0x24
 81058da:	d00b      	beq.n	81058f4 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 81058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81058e0:	f383 8811 	msr	BASEPRI, r3
 81058e4:	f3bf 8f6f 	isb	sy
 81058e8:	f3bf 8f4f 	dsb	sy
 81058ec:	61bb      	str	r3, [r7, #24]
}
 81058ee:	bf00      	nop
 81058f0:	bf00      	nop
 81058f2:	e7fd      	b.n	81058f0 <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 81058f4:	683b      	ldr	r3, [r7, #0]
 81058f6:	2b00      	cmp	r3, #0
 81058f8:	d015      	beq.n	8105926 <xStreamBufferGenericCreateStatic+0xfe>
 81058fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81058fc:	2b00      	cmp	r3, #0
 81058fe:	d012      	beq.n	8105926 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8105900:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8105904:	9300      	str	r3, [sp, #0]
 8105906:	68bb      	ldr	r3, [r7, #8]
 8105908:	68fa      	ldr	r2, [r7, #12]
 810590a:	6839      	ldr	r1, [r7, #0]
 810590c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810590e:	f000 fb81 	bl	8106014 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8105912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105914:	7f1b      	ldrb	r3, [r3, #28]
 8105916:	f043 0302 	orr.w	r3, r3, #2
 810591a:	b2da      	uxtb	r2, r3
 810591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810591e:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8105920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105922:	637b      	str	r3, [r7, #52]	@ 0x34
 8105924:	e001      	b.n	810592a <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 8105926:	2300      	movs	r3, #0
 8105928:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 810592a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 810592c:	4618      	mov	r0, r3
 810592e:	3738      	adds	r7, #56	@ 0x38
 8105930:	46bd      	mov	sp, r7
 8105932:	bd80      	pop	{r7, pc}

08105934 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8105934:	b480      	push	{r7}
 8105936:	b087      	sub	sp, #28
 8105938:	af00      	add	r7, sp, #0
 810593a:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8105940:	693b      	ldr	r3, [r7, #16]
 8105942:	2b00      	cmp	r3, #0
 8105944:	d10b      	bne.n	810595e <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8105946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810594a:	f383 8811 	msr	BASEPRI, r3
 810594e:	f3bf 8f6f 	isb	sy
 8105952:	f3bf 8f4f 	dsb	sy
 8105956:	60fb      	str	r3, [r7, #12]
}
 8105958:	bf00      	nop
 810595a:	bf00      	nop
 810595c:	e7fd      	b.n	810595a <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 810595e:	693b      	ldr	r3, [r7, #16]
 8105960:	689a      	ldr	r2, [r3, #8]
 8105962:	693b      	ldr	r3, [r7, #16]
 8105964:	681b      	ldr	r3, [r3, #0]
 8105966:	4413      	add	r3, r2
 8105968:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 810596a:	693b      	ldr	r3, [r7, #16]
 810596c:	685b      	ldr	r3, [r3, #4]
 810596e:	697a      	ldr	r2, [r7, #20]
 8105970:	1ad3      	subs	r3, r2, r3
 8105972:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8105974:	697b      	ldr	r3, [r7, #20]
 8105976:	3b01      	subs	r3, #1
 8105978:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 810597a:	693b      	ldr	r3, [r7, #16]
 810597c:	689b      	ldr	r3, [r3, #8]
 810597e:	697a      	ldr	r2, [r7, #20]
 8105980:	429a      	cmp	r2, r3
 8105982:	d304      	bcc.n	810598e <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8105984:	693b      	ldr	r3, [r7, #16]
 8105986:	689b      	ldr	r3, [r3, #8]
 8105988:	697a      	ldr	r2, [r7, #20]
 810598a:	1ad3      	subs	r3, r2, r3
 810598c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 810598e:	697b      	ldr	r3, [r7, #20]
}
 8105990:	4618      	mov	r0, r3
 8105992:	371c      	adds	r7, #28
 8105994:	46bd      	mov	sp, r7
 8105996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810599a:	4770      	bx	lr

0810599c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 810599c:	b580      	push	{r7, lr}
 810599e:	b090      	sub	sp, #64	@ 0x40
 81059a0:	af02      	add	r7, sp, #8
 81059a2:	60f8      	str	r0, [r7, #12]
 81059a4:	60b9      	str	r1, [r7, #8]
 81059a6:	607a      	str	r2, [r7, #4]
 81059a8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81059aa:	68fb      	ldr	r3, [r7, #12]
 81059ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 81059ae:	2300      	movs	r3, #0
 81059b0:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 81059b6:	68bb      	ldr	r3, [r7, #8]
 81059b8:	2b00      	cmp	r3, #0
 81059ba:	d10b      	bne.n	81059d4 <xStreamBufferSend+0x38>
	__asm volatile
 81059bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81059c0:	f383 8811 	msr	BASEPRI, r3
 81059c4:	f3bf 8f6f 	isb	sy
 81059c8:	f3bf 8f4f 	dsb	sy
 81059cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81059ce:	bf00      	nop
 81059d0:	bf00      	nop
 81059d2:	e7fd      	b.n	81059d0 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 81059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81059d6:	2b00      	cmp	r3, #0
 81059d8:	d10b      	bne.n	81059f2 <xStreamBufferSend+0x56>
	__asm volatile
 81059da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81059de:	f383 8811 	msr	BASEPRI, r3
 81059e2:	f3bf 8f6f 	isb	sy
 81059e6:	f3bf 8f4f 	dsb	sy
 81059ea:	623b      	str	r3, [r7, #32]
}
 81059ec:	bf00      	nop
 81059ee:	bf00      	nop
 81059f0:	e7fd      	b.n	81059ee <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 81059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81059f4:	7f1b      	ldrb	r3, [r3, #28]
 81059f6:	f003 0301 	and.w	r3, r3, #1
 81059fa:	2b00      	cmp	r3, #0
 81059fc:	d012      	beq.n	8105a24 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 81059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105a00:	3304      	adds	r3, #4
 8105a02:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8105a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	429a      	cmp	r2, r3
 8105a0a:	d80b      	bhi.n	8105a24 <xStreamBufferSend+0x88>
	__asm volatile
 8105a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105a10:	f383 8811 	msr	BASEPRI, r3
 8105a14:	f3bf 8f6f 	isb	sy
 8105a18:	f3bf 8f4f 	dsb	sy
 8105a1c:	61fb      	str	r3, [r7, #28]
}
 8105a1e:	bf00      	nop
 8105a20:	bf00      	nop
 8105a22:	e7fd      	b.n	8105a20 <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8105a24:	683b      	ldr	r3, [r7, #0]
 8105a26:	2b00      	cmp	r3, #0
 8105a28:	d03f      	beq.n	8105aaa <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8105a2a:	f107 0310 	add.w	r3, r7, #16
 8105a2e:	4618      	mov	r0, r3
 8105a30:	f001 f81a 	bl	8106a68 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8105a34:	f7ff f8a0 	bl	8104b78 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8105a38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105a3a:	f7ff ff7b 	bl	8105934 <xStreamBufferSpacesAvailable>
 8105a3e:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8105a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8105a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105a44:	429a      	cmp	r2, r3
 8105a46:	d218      	bcs.n	8105a7a <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8105a48:	2000      	movs	r0, #0
 8105a4a:	f001 fb7b 	bl	8107144 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8105a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105a50:	695b      	ldr	r3, [r3, #20]
 8105a52:	2b00      	cmp	r3, #0
 8105a54:	d00b      	beq.n	8105a6e <xStreamBufferSend+0xd2>
	__asm volatile
 8105a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105a5a:	f383 8811 	msr	BASEPRI, r3
 8105a5e:	f3bf 8f6f 	isb	sy
 8105a62:	f3bf 8f4f 	dsb	sy
 8105a66:	61bb      	str	r3, [r7, #24]
}
 8105a68:	bf00      	nop
 8105a6a:	bf00      	nop
 8105a6c:	e7fd      	b.n	8105a6a <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8105a6e:	f001 f985 	bl	8106d7c <xTaskGetCurrentTaskHandle>
 8105a72:	4602      	mov	r2, r0
 8105a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105a76:	615a      	str	r2, [r3, #20]
 8105a78:	e002      	b.n	8105a80 <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8105a7a:	f7ff f8af 	bl	8104bdc <vPortExitCritical>
					break;
 8105a7e:	e014      	b.n	8105aaa <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 8105a80:	f7ff f8ac 	bl	8104bdc <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8105a84:	683b      	ldr	r3, [r7, #0]
 8105a86:	2200      	movs	r2, #0
 8105a88:	2100      	movs	r1, #0
 8105a8a:	2000      	movs	r0, #0
 8105a8c:	f001 fa14 	bl	8106eb8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8105a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105a92:	2200      	movs	r2, #0
 8105a94:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8105a96:	463a      	mov	r2, r7
 8105a98:	f107 0310 	add.w	r3, r7, #16
 8105a9c:	4611      	mov	r1, r2
 8105a9e:	4618      	mov	r0, r3
 8105aa0:	f001 f820 	bl	8106ae4 <xTaskCheckForTimeOut>
 8105aa4:	4603      	mov	r3, r0
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	d0c4      	beq.n	8105a34 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8105aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105aac:	2b00      	cmp	r3, #0
 8105aae:	d103      	bne.n	8105ab8 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8105ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105ab2:	f7ff ff3f 	bl	8105934 <xStreamBufferSpacesAvailable>
 8105ab6:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8105ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105aba:	9300      	str	r3, [sp, #0]
 8105abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105abe:	687a      	ldr	r2, [r7, #4]
 8105ac0:	68b9      	ldr	r1, [r7, #8]
 8105ac2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105ac4:	f000 f814 	bl	8105af0 <prvWriteMessageToBuffer>
 8105ac8:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8105aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105acc:	2b00      	cmp	r3, #0
 8105ace:	d00a      	beq.n	8105ae6 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8105ad0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105ad2:	f000 fa7f 	bl	8105fd4 <prvBytesInBuffer>
 8105ad6:	4602      	mov	r2, r0
 8105ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105ada:	68db      	ldr	r3, [r3, #12]
 8105adc:	429a      	cmp	r2, r3
 8105ade:	d302      	bcc.n	8105ae6 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8105ae0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105ae2:	f7fa fcbf 	bl	8100464 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8105ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8105ae8:	4618      	mov	r0, r3
 8105aea:	3738      	adds	r7, #56	@ 0x38
 8105aec:	46bd      	mov	sp, r7
 8105aee:	bd80      	pop	{r7, pc}

08105af0 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8105af0:	b580      	push	{r7, lr}
 8105af2:	b086      	sub	sp, #24
 8105af4:	af00      	add	r7, sp, #0
 8105af6:	60f8      	str	r0, [r7, #12]
 8105af8:	60b9      	str	r1, [r7, #8]
 8105afa:	607a      	str	r2, [r7, #4]
 8105afc:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8105afe:	683b      	ldr	r3, [r7, #0]
 8105b00:	2b00      	cmp	r3, #0
 8105b02:	d102      	bne.n	8105b0a <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8105b04:	2300      	movs	r3, #0
 8105b06:	617b      	str	r3, [r7, #20]
 8105b08:	e01d      	b.n	8105b46 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8105b0a:	68fb      	ldr	r3, [r7, #12]
 8105b0c:	7f1b      	ldrb	r3, [r3, #28]
 8105b0e:	f003 0301 	and.w	r3, r3, #1
 8105b12:	2b00      	cmp	r3, #0
 8105b14:	d108      	bne.n	8105b28 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8105b16:	2301      	movs	r3, #1
 8105b18:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8105b1a:	687a      	ldr	r2, [r7, #4]
 8105b1c:	683b      	ldr	r3, [r7, #0]
 8105b1e:	4293      	cmp	r3, r2
 8105b20:	bf28      	it	cs
 8105b22:	4613      	movcs	r3, r2
 8105b24:	607b      	str	r3, [r7, #4]
 8105b26:	e00e      	b.n	8105b46 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8105b28:	683a      	ldr	r2, [r7, #0]
 8105b2a:	6a3b      	ldr	r3, [r7, #32]
 8105b2c:	429a      	cmp	r2, r3
 8105b2e:	d308      	bcc.n	8105b42 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8105b30:	2301      	movs	r3, #1
 8105b32:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8105b34:	1d3b      	adds	r3, r7, #4
 8105b36:	2204      	movs	r2, #4
 8105b38:	4619      	mov	r1, r3
 8105b3a:	68f8      	ldr	r0, [r7, #12]
 8105b3c:	f000 f958 	bl	8105df0 <prvWriteBytesToBuffer>
 8105b40:	e001      	b.n	8105b46 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8105b42:	2300      	movs	r3, #0
 8105b44:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8105b46:	697b      	ldr	r3, [r7, #20]
 8105b48:	2b00      	cmp	r3, #0
 8105b4a:	d007      	beq.n	8105b5c <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	461a      	mov	r2, r3
 8105b50:	68b9      	ldr	r1, [r7, #8]
 8105b52:	68f8      	ldr	r0, [r7, #12]
 8105b54:	f000 f94c 	bl	8105df0 <prvWriteBytesToBuffer>
 8105b58:	6138      	str	r0, [r7, #16]
 8105b5a:	e001      	b.n	8105b60 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8105b5c:	2300      	movs	r3, #0
 8105b5e:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8105b60:	693b      	ldr	r3, [r7, #16]
}
 8105b62:	4618      	mov	r0, r3
 8105b64:	3718      	adds	r7, #24
 8105b66:	46bd      	mov	sp, r7
 8105b68:	bd80      	pop	{r7, pc}

08105b6a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8105b6a:	b580      	push	{r7, lr}
 8105b6c:	b08e      	sub	sp, #56	@ 0x38
 8105b6e:	af02      	add	r7, sp, #8
 8105b70:	60f8      	str	r0, [r7, #12]
 8105b72:	60b9      	str	r1, [r7, #8]
 8105b74:	607a      	str	r2, [r7, #4]
 8105b76:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105b78:	68fb      	ldr	r3, [r7, #12]
 8105b7a:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8105b7c:	2300      	movs	r3, #0
 8105b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8105b80:	68bb      	ldr	r3, [r7, #8]
 8105b82:	2b00      	cmp	r3, #0
 8105b84:	d10b      	bne.n	8105b9e <xStreamBufferReceive+0x34>
	__asm volatile
 8105b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b8a:	f383 8811 	msr	BASEPRI, r3
 8105b8e:	f3bf 8f6f 	isb	sy
 8105b92:	f3bf 8f4f 	dsb	sy
 8105b96:	61fb      	str	r3, [r7, #28]
}
 8105b98:	bf00      	nop
 8105b9a:	bf00      	nop
 8105b9c:	e7fd      	b.n	8105b9a <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8105b9e:	6a3b      	ldr	r3, [r7, #32]
 8105ba0:	2b00      	cmp	r3, #0
 8105ba2:	d10b      	bne.n	8105bbc <xStreamBufferReceive+0x52>
	__asm volatile
 8105ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ba8:	f383 8811 	msr	BASEPRI, r3
 8105bac:	f3bf 8f6f 	isb	sy
 8105bb0:	f3bf 8f4f 	dsb	sy
 8105bb4:	61bb      	str	r3, [r7, #24]
}
 8105bb6:	bf00      	nop
 8105bb8:	bf00      	nop
 8105bba:	e7fd      	b.n	8105bb8 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8105bbc:	6a3b      	ldr	r3, [r7, #32]
 8105bbe:	7f1b      	ldrb	r3, [r3, #28]
 8105bc0:	f003 0301 	and.w	r3, r3, #1
 8105bc4:	2b00      	cmp	r3, #0
 8105bc6:	d002      	beq.n	8105bce <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8105bc8:	2304      	movs	r3, #4
 8105bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8105bcc:	e001      	b.n	8105bd2 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8105bce:	2300      	movs	r3, #0
 8105bd0:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8105bd2:	683b      	ldr	r3, [r7, #0]
 8105bd4:	2b00      	cmp	r3, #0
 8105bd6:	d035      	beq.n	8105c44 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8105bd8:	f7fe ffce 	bl	8104b78 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105bdc:	6a38      	ldr	r0, [r7, #32]
 8105bde:	f000 f9f9 	bl	8105fd4 <prvBytesInBuffer>
 8105be2:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8105be4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105be8:	429a      	cmp	r2, r3
 8105bea:	d817      	bhi.n	8105c1c <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8105bec:	2000      	movs	r0, #0
 8105bee:	f001 faa9 	bl	8107144 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8105bf2:	6a3b      	ldr	r3, [r7, #32]
 8105bf4:	691b      	ldr	r3, [r3, #16]
 8105bf6:	2b00      	cmp	r3, #0
 8105bf8:	d00b      	beq.n	8105c12 <xStreamBufferReceive+0xa8>
	__asm volatile
 8105bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105bfe:	f383 8811 	msr	BASEPRI, r3
 8105c02:	f3bf 8f6f 	isb	sy
 8105c06:	f3bf 8f4f 	dsb	sy
 8105c0a:	617b      	str	r3, [r7, #20]
}
 8105c0c:	bf00      	nop
 8105c0e:	bf00      	nop
 8105c10:	e7fd      	b.n	8105c0e <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8105c12:	f001 f8b3 	bl	8106d7c <xTaskGetCurrentTaskHandle>
 8105c16:	4602      	mov	r2, r0
 8105c18:	6a3b      	ldr	r3, [r7, #32]
 8105c1a:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8105c1c:	f7fe ffde 	bl	8104bdc <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8105c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105c24:	429a      	cmp	r2, r3
 8105c26:	d811      	bhi.n	8105c4c <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8105c28:	683b      	ldr	r3, [r7, #0]
 8105c2a:	2200      	movs	r2, #0
 8105c2c:	2100      	movs	r1, #0
 8105c2e:	2000      	movs	r0, #0
 8105c30:	f001 f942 	bl	8106eb8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8105c34:	6a3b      	ldr	r3, [r7, #32]
 8105c36:	2200      	movs	r2, #0
 8105c38:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105c3a:	6a38      	ldr	r0, [r7, #32]
 8105c3c:	f000 f9ca 	bl	8105fd4 <prvBytesInBuffer>
 8105c40:	62b8      	str	r0, [r7, #40]	@ 0x28
 8105c42:	e003      	b.n	8105c4c <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105c44:	6a38      	ldr	r0, [r7, #32]
 8105c46:	f000 f9c5 	bl	8105fd4 <prvBytesInBuffer>
 8105c4a:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8105c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105c50:	429a      	cmp	r2, r3
 8105c52:	d90e      	bls.n	8105c72 <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8105c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105c56:	9300      	str	r3, [sp, #0]
 8105c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105c5a:	687a      	ldr	r2, [r7, #4]
 8105c5c:	68b9      	ldr	r1, [r7, #8]
 8105c5e:	6a38      	ldr	r0, [r7, #32]
 8105c60:	f000 f80c 	bl	8105c7c <prvReadMessageFromBuffer>
 8105c64:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8105c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105c68:	2b00      	cmp	r3, #0
 8105c6a:	d002      	beq.n	8105c72 <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8105c6c:	6a38      	ldr	r0, [r7, #32]
 8105c6e:	f7fa fbf9 	bl	8100464 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8105c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8105c74:	4618      	mov	r0, r3
 8105c76:	3730      	adds	r7, #48	@ 0x30
 8105c78:	46bd      	mov	sp, r7
 8105c7a:	bd80      	pop	{r7, pc}

08105c7c <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8105c7c:	b580      	push	{r7, lr}
 8105c7e:	b088      	sub	sp, #32
 8105c80:	af00      	add	r7, sp, #0
 8105c82:	60f8      	str	r0, [r7, #12]
 8105c84:	60b9      	str	r1, [r7, #8]
 8105c86:	607a      	str	r2, [r7, #4]
 8105c88:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8105c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105c8c:	2b00      	cmp	r3, #0
 8105c8e:	d019      	beq.n	8105cc4 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8105c90:	68fb      	ldr	r3, [r7, #12]
 8105c92:	681b      	ldr	r3, [r3, #0]
 8105c94:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8105c96:	f107 0110 	add.w	r1, r7, #16
 8105c9a:	683b      	ldr	r3, [r7, #0]
 8105c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105c9e:	68f8      	ldr	r0, [r7, #12]
 8105ca0:	f000 f91b 	bl	8105eda <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8105ca4:	693b      	ldr	r3, [r7, #16]
 8105ca6:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8105ca8:	683a      	ldr	r2, [r7, #0]
 8105caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105cac:	1ad3      	subs	r3, r2, r3
 8105cae:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8105cb0:	69fa      	ldr	r2, [r7, #28]
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	429a      	cmp	r2, r3
 8105cb6:	d907      	bls.n	8105cc8 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8105cb8:	68fb      	ldr	r3, [r7, #12]
 8105cba:	69ba      	ldr	r2, [r7, #24]
 8105cbc:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8105cbe:	2300      	movs	r3, #0
 8105cc0:	61fb      	str	r3, [r7, #28]
 8105cc2:	e001      	b.n	8105cc8 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8105cc8:	683b      	ldr	r3, [r7, #0]
 8105cca:	69fa      	ldr	r2, [r7, #28]
 8105ccc:	68b9      	ldr	r1, [r7, #8]
 8105cce:	68f8      	ldr	r0, [r7, #12]
 8105cd0:	f000 f903 	bl	8105eda <prvReadBytesFromBuffer>
 8105cd4:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8105cd6:	697b      	ldr	r3, [r7, #20]
}
 8105cd8:	4618      	mov	r0, r3
 8105cda:	3720      	adds	r7, #32
 8105cdc:	46bd      	mov	sp, r7
 8105cde:	bd80      	pop	{r7, pc}

08105ce0 <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8105ce0:	b580      	push	{r7, lr}
 8105ce2:	b08c      	sub	sp, #48	@ 0x30
 8105ce4:	af02      	add	r7, sp, #8
 8105ce6:	6078      	str	r0, [r7, #4]
 8105ce8:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8105cee:	6a3b      	ldr	r3, [r7, #32]
 8105cf0:	2b00      	cmp	r3, #0
 8105cf2:	d10b      	bne.n	8105d0c <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 8105cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105cf8:	f383 8811 	msr	BASEPRI, r3
 8105cfc:	f3bf 8f6f 	isb	sy
 8105d00:	f3bf 8f4f 	dsb	sy
 8105d04:	61bb      	str	r3, [r7, #24]
}
 8105d06:	bf00      	nop
 8105d08:	bf00      	nop
 8105d0a:	e7fd      	b.n	8105d08 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8105d0c:	f3ef 8211 	mrs	r2, BASEPRI
 8105d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d14:	f383 8811 	msr	BASEPRI, r3
 8105d18:	f3bf 8f6f 	isb	sy
 8105d1c:	f3bf 8f4f 	dsb	sy
 8105d20:	617a      	str	r2, [r7, #20]
 8105d22:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8105d24:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8105d26:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8105d28:	6a3b      	ldr	r3, [r7, #32]
 8105d2a:	691b      	ldr	r3, [r3, #16]
 8105d2c:	2b00      	cmp	r3, #0
 8105d2e:	d00e      	beq.n	8105d4e <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8105d30:	6a3b      	ldr	r3, [r7, #32]
 8105d32:	6918      	ldr	r0, [r3, #16]
 8105d34:	683b      	ldr	r3, [r7, #0]
 8105d36:	9300      	str	r3, [sp, #0]
 8105d38:	2300      	movs	r3, #0
 8105d3a:	2200      	movs	r2, #0
 8105d3c:	2100      	movs	r1, #0
 8105d3e:	f001 f91b 	bl	8106f78 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8105d42:	6a3b      	ldr	r3, [r7, #32]
 8105d44:	2200      	movs	r2, #0
 8105d46:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8105d48:	2301      	movs	r3, #1
 8105d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8105d4c:	e001      	b.n	8105d52 <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8105d4e:	2300      	movs	r3, #0
 8105d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8105d52:	69fb      	ldr	r3, [r7, #28]
 8105d54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8105d56:	68fb      	ldr	r3, [r7, #12]
 8105d58:	f383 8811 	msr	BASEPRI, r3
}
 8105d5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8105d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8105d60:	4618      	mov	r0, r3
 8105d62:	3728      	adds	r7, #40	@ 0x28
 8105d64:	46bd      	mov	sp, r7
 8105d66:	bd80      	pop	{r7, pc}

08105d68 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8105d68:	b580      	push	{r7, lr}
 8105d6a:	b08c      	sub	sp, #48	@ 0x30
 8105d6c:	af02      	add	r7, sp, #8
 8105d6e:	6078      	str	r0, [r7, #4]
 8105d70:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8105d76:	6a3b      	ldr	r3, [r7, #32]
 8105d78:	2b00      	cmp	r3, #0
 8105d7a:	d10b      	bne.n	8105d94 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8105d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d80:	f383 8811 	msr	BASEPRI, r3
 8105d84:	f3bf 8f6f 	isb	sy
 8105d88:	f3bf 8f4f 	dsb	sy
 8105d8c:	61bb      	str	r3, [r7, #24]
}
 8105d8e:	bf00      	nop
 8105d90:	bf00      	nop
 8105d92:	e7fd      	b.n	8105d90 <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 8105d94:	f3ef 8211 	mrs	r2, BASEPRI
 8105d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d9c:	f383 8811 	msr	BASEPRI, r3
 8105da0:	f3bf 8f6f 	isb	sy
 8105da4:	f3bf 8f4f 	dsb	sy
 8105da8:	617a      	str	r2, [r7, #20]
 8105daa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8105dac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8105dae:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8105db0:	6a3b      	ldr	r3, [r7, #32]
 8105db2:	695b      	ldr	r3, [r3, #20]
 8105db4:	2b00      	cmp	r3, #0
 8105db6:	d00e      	beq.n	8105dd6 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8105db8:	6a3b      	ldr	r3, [r7, #32]
 8105dba:	6958      	ldr	r0, [r3, #20]
 8105dbc:	683b      	ldr	r3, [r7, #0]
 8105dbe:	9300      	str	r3, [sp, #0]
 8105dc0:	2300      	movs	r3, #0
 8105dc2:	2200      	movs	r2, #0
 8105dc4:	2100      	movs	r1, #0
 8105dc6:	f001 f8d7 	bl	8106f78 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8105dca:	6a3b      	ldr	r3, [r7, #32]
 8105dcc:	2200      	movs	r2, #0
 8105dce:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 8105dd0:	2301      	movs	r3, #1
 8105dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8105dd4:	e001      	b.n	8105dda <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8105dd6:	2300      	movs	r3, #0
 8105dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8105dda:	69fb      	ldr	r3, [r7, #28]
 8105ddc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8105dde:	68fb      	ldr	r3, [r7, #12]
 8105de0:	f383 8811 	msr	BASEPRI, r3
}
 8105de4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8105de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8105de8:	4618      	mov	r0, r3
 8105dea:	3728      	adds	r7, #40	@ 0x28
 8105dec:	46bd      	mov	sp, r7
 8105dee:	bd80      	pop	{r7, pc}

08105df0 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8105df0:	b580      	push	{r7, lr}
 8105df2:	b08a      	sub	sp, #40	@ 0x28
 8105df4:	af00      	add	r7, sp, #0
 8105df6:	60f8      	str	r0, [r7, #12]
 8105df8:	60b9      	str	r1, [r7, #8]
 8105dfa:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8105dfc:	687b      	ldr	r3, [r7, #4]
 8105dfe:	2b00      	cmp	r3, #0
 8105e00:	d10b      	bne.n	8105e1a <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8105e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105e06:	f383 8811 	msr	BASEPRI, r3
 8105e0a:	f3bf 8f6f 	isb	sy
 8105e0e:	f3bf 8f4f 	dsb	sy
 8105e12:	61fb      	str	r3, [r7, #28]
}
 8105e14:	bf00      	nop
 8105e16:	bf00      	nop
 8105e18:	e7fd      	b.n	8105e16 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8105e1a:	68fb      	ldr	r3, [r7, #12]
 8105e1c:	685b      	ldr	r3, [r3, #4]
 8105e1e:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8105e20:	68fb      	ldr	r3, [r7, #12]
 8105e22:	689a      	ldr	r2, [r3, #8]
 8105e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105e26:	1ad3      	subs	r3, r2, r3
 8105e28:	687a      	ldr	r2, [r7, #4]
 8105e2a:	4293      	cmp	r3, r2
 8105e2c:	bf28      	it	cs
 8105e2e:	4613      	movcs	r3, r2
 8105e30:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8105e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105e34:	6a3b      	ldr	r3, [r7, #32]
 8105e36:	441a      	add	r2, r3
 8105e38:	68fb      	ldr	r3, [r7, #12]
 8105e3a:	689b      	ldr	r3, [r3, #8]
 8105e3c:	429a      	cmp	r2, r3
 8105e3e:	d90b      	bls.n	8105e58 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8105e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105e44:	f383 8811 	msr	BASEPRI, r3
 8105e48:	f3bf 8f6f 	isb	sy
 8105e4c:	f3bf 8f4f 	dsb	sy
 8105e50:	61bb      	str	r3, [r7, #24]
}
 8105e52:	bf00      	nop
 8105e54:	bf00      	nop
 8105e56:	e7fd      	b.n	8105e54 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8105e58:	68fb      	ldr	r3, [r7, #12]
 8105e5a:	699a      	ldr	r2, [r3, #24]
 8105e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105e5e:	4413      	add	r3, r2
 8105e60:	6a3a      	ldr	r2, [r7, #32]
 8105e62:	68b9      	ldr	r1, [r7, #8]
 8105e64:	4618      	mov	r0, r3
 8105e66:	f001 ffe5 	bl	8107e34 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8105e6a:	687a      	ldr	r2, [r7, #4]
 8105e6c:	6a3b      	ldr	r3, [r7, #32]
 8105e6e:	429a      	cmp	r2, r3
 8105e70:	d91d      	bls.n	8105eae <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8105e72:	687a      	ldr	r2, [r7, #4]
 8105e74:	6a3b      	ldr	r3, [r7, #32]
 8105e76:	1ad2      	subs	r2, r2, r3
 8105e78:	68fb      	ldr	r3, [r7, #12]
 8105e7a:	689b      	ldr	r3, [r3, #8]
 8105e7c:	429a      	cmp	r2, r3
 8105e7e:	d90b      	bls.n	8105e98 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8105e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105e84:	f383 8811 	msr	BASEPRI, r3
 8105e88:	f3bf 8f6f 	isb	sy
 8105e8c:	f3bf 8f4f 	dsb	sy
 8105e90:	617b      	str	r3, [r7, #20]
}
 8105e92:	bf00      	nop
 8105e94:	bf00      	nop
 8105e96:	e7fd      	b.n	8105e94 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8105e98:	68fb      	ldr	r3, [r7, #12]
 8105e9a:	6998      	ldr	r0, [r3, #24]
 8105e9c:	68ba      	ldr	r2, [r7, #8]
 8105e9e:	6a3b      	ldr	r3, [r7, #32]
 8105ea0:	18d1      	adds	r1, r2, r3
 8105ea2:	687a      	ldr	r2, [r7, #4]
 8105ea4:	6a3b      	ldr	r3, [r7, #32]
 8105ea6:	1ad3      	subs	r3, r2, r3
 8105ea8:	461a      	mov	r2, r3
 8105eaa:	f001 ffc3 	bl	8107e34 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8105eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	4413      	add	r3, r2
 8105eb4:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8105eb6:	68fb      	ldr	r3, [r7, #12]
 8105eb8:	689b      	ldr	r3, [r3, #8]
 8105eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105ebc:	429a      	cmp	r2, r3
 8105ebe:	d304      	bcc.n	8105eca <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8105ec0:	68fb      	ldr	r3, [r7, #12]
 8105ec2:	689b      	ldr	r3, [r3, #8]
 8105ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105ec6:	1ad3      	subs	r3, r2, r3
 8105ec8:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8105eca:	68fb      	ldr	r3, [r7, #12]
 8105ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105ece:	605a      	str	r2, [r3, #4]

	return xCount;
 8105ed0:	687b      	ldr	r3, [r7, #4]
}
 8105ed2:	4618      	mov	r0, r3
 8105ed4:	3728      	adds	r7, #40	@ 0x28
 8105ed6:	46bd      	mov	sp, r7
 8105ed8:	bd80      	pop	{r7, pc}

08105eda <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8105eda:	b580      	push	{r7, lr}
 8105edc:	b08a      	sub	sp, #40	@ 0x28
 8105ede:	af00      	add	r7, sp, #0
 8105ee0:	60f8      	str	r0, [r7, #12]
 8105ee2:	60b9      	str	r1, [r7, #8]
 8105ee4:	607a      	str	r2, [r7, #4]
 8105ee6:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8105ee8:	687a      	ldr	r2, [r7, #4]
 8105eea:	683b      	ldr	r3, [r7, #0]
 8105eec:	4293      	cmp	r3, r2
 8105eee:	bf28      	it	cs
 8105ef0:	4613      	movcs	r3, r2
 8105ef2:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8105ef4:	6a3b      	ldr	r3, [r7, #32]
 8105ef6:	2b00      	cmp	r3, #0
 8105ef8:	d067      	beq.n	8105fca <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8105efa:	68fb      	ldr	r3, [r7, #12]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8105f00:	68fb      	ldr	r3, [r7, #12]
 8105f02:	689a      	ldr	r2, [r3, #8]
 8105f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f06:	1ad3      	subs	r3, r2, r3
 8105f08:	6a3a      	ldr	r2, [r7, #32]
 8105f0a:	4293      	cmp	r3, r2
 8105f0c:	bf28      	it	cs
 8105f0e:	4613      	movcs	r3, r2
 8105f10:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8105f12:	69fa      	ldr	r2, [r7, #28]
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	429a      	cmp	r2, r3
 8105f18:	d90b      	bls.n	8105f32 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8105f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f1e:	f383 8811 	msr	BASEPRI, r3
 8105f22:	f3bf 8f6f 	isb	sy
 8105f26:	f3bf 8f4f 	dsb	sy
 8105f2a:	61bb      	str	r3, [r7, #24]
}
 8105f2c:	bf00      	nop
 8105f2e:	bf00      	nop
 8105f30:	e7fd      	b.n	8105f2e <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8105f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f34:	69fb      	ldr	r3, [r7, #28]
 8105f36:	441a      	add	r2, r3
 8105f38:	68fb      	ldr	r3, [r7, #12]
 8105f3a:	689b      	ldr	r3, [r3, #8]
 8105f3c:	429a      	cmp	r2, r3
 8105f3e:	d90b      	bls.n	8105f58 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8105f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f44:	f383 8811 	msr	BASEPRI, r3
 8105f48:	f3bf 8f6f 	isb	sy
 8105f4c:	f3bf 8f4f 	dsb	sy
 8105f50:	617b      	str	r3, [r7, #20]
}
 8105f52:	bf00      	nop
 8105f54:	bf00      	nop
 8105f56:	e7fd      	b.n	8105f54 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8105f58:	68fb      	ldr	r3, [r7, #12]
 8105f5a:	699a      	ldr	r2, [r3, #24]
 8105f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f5e:	4413      	add	r3, r2
 8105f60:	69fa      	ldr	r2, [r7, #28]
 8105f62:	4619      	mov	r1, r3
 8105f64:	68b8      	ldr	r0, [r7, #8]
 8105f66:	f001 ff65 	bl	8107e34 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8105f6a:	6a3a      	ldr	r2, [r7, #32]
 8105f6c:	69fb      	ldr	r3, [r7, #28]
 8105f6e:	429a      	cmp	r2, r3
 8105f70:	d91a      	bls.n	8105fa8 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8105f72:	6a3a      	ldr	r2, [r7, #32]
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	429a      	cmp	r2, r3
 8105f78:	d90b      	bls.n	8105f92 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8105f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f7e:	f383 8811 	msr	BASEPRI, r3
 8105f82:	f3bf 8f6f 	isb	sy
 8105f86:	f3bf 8f4f 	dsb	sy
 8105f8a:	613b      	str	r3, [r7, #16]
}
 8105f8c:	bf00      	nop
 8105f8e:	bf00      	nop
 8105f90:	e7fd      	b.n	8105f8e <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8105f92:	68ba      	ldr	r2, [r7, #8]
 8105f94:	69fb      	ldr	r3, [r7, #28]
 8105f96:	18d0      	adds	r0, r2, r3
 8105f98:	68fb      	ldr	r3, [r7, #12]
 8105f9a:	6999      	ldr	r1, [r3, #24]
 8105f9c:	6a3a      	ldr	r2, [r7, #32]
 8105f9e:	69fb      	ldr	r3, [r7, #28]
 8105fa0:	1ad3      	subs	r3, r2, r3
 8105fa2:	461a      	mov	r2, r3
 8105fa4:	f001 ff46 	bl	8107e34 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8105fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105faa:	6a3b      	ldr	r3, [r7, #32]
 8105fac:	4413      	add	r3, r2
 8105fae:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8105fb0:	68fb      	ldr	r3, [r7, #12]
 8105fb2:	689b      	ldr	r3, [r3, #8]
 8105fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105fb6:	429a      	cmp	r2, r3
 8105fb8:	d304      	bcc.n	8105fc4 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8105fba:	68fb      	ldr	r3, [r7, #12]
 8105fbc:	689b      	ldr	r3, [r3, #8]
 8105fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105fc0:	1ad3      	subs	r3, r2, r3
 8105fc2:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8105fc4:	68fb      	ldr	r3, [r7, #12]
 8105fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105fc8:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8105fca:	6a3b      	ldr	r3, [r7, #32]
}
 8105fcc:	4618      	mov	r0, r3
 8105fce:	3728      	adds	r7, #40	@ 0x28
 8105fd0:	46bd      	mov	sp, r7
 8105fd2:	bd80      	pop	{r7, pc}

08105fd4 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8105fd4:	b480      	push	{r7}
 8105fd6:	b085      	sub	sp, #20
 8105fd8:	af00      	add	r7, sp, #0
 8105fda:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	689a      	ldr	r2, [r3, #8]
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	685b      	ldr	r3, [r3, #4]
 8105fe4:	4413      	add	r3, r2
 8105fe6:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	681b      	ldr	r3, [r3, #0]
 8105fec:	68fa      	ldr	r2, [r7, #12]
 8105fee:	1ad3      	subs	r3, r2, r3
 8105ff0:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8105ff2:	687b      	ldr	r3, [r7, #4]
 8105ff4:	689b      	ldr	r3, [r3, #8]
 8105ff6:	68fa      	ldr	r2, [r7, #12]
 8105ff8:	429a      	cmp	r2, r3
 8105ffa:	d304      	bcc.n	8106006 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	689b      	ldr	r3, [r3, #8]
 8106000:	68fa      	ldr	r2, [r7, #12]
 8106002:	1ad3      	subs	r3, r2, r3
 8106004:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8106006:	68fb      	ldr	r3, [r7, #12]
}
 8106008:	4618      	mov	r0, r3
 810600a:	3714      	adds	r7, #20
 810600c:	46bd      	mov	sp, r7
 810600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106012:	4770      	bx	lr

08106014 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8106014:	b580      	push	{r7, lr}
 8106016:	b086      	sub	sp, #24
 8106018:	af00      	add	r7, sp, #0
 810601a:	60f8      	str	r0, [r7, #12]
 810601c:	60b9      	str	r1, [r7, #8]
 810601e:	607a      	str	r2, [r7, #4]
 8106020:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8106022:	2355      	movs	r3, #85	@ 0x55
 8106024:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8106026:	687a      	ldr	r2, [r7, #4]
 8106028:	6979      	ldr	r1, [r7, #20]
 810602a:	68b8      	ldr	r0, [r7, #8]
 810602c:	f001 fe24 	bl	8107c78 <memset>
 8106030:	4602      	mov	r2, r0
 8106032:	68bb      	ldr	r3, [r7, #8]
 8106034:	4293      	cmp	r3, r2
 8106036:	d00b      	beq.n	8106050 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8106038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810603c:	f383 8811 	msr	BASEPRI, r3
 8106040:	f3bf 8f6f 	isb	sy
 8106044:	f3bf 8f4f 	dsb	sy
 8106048:	613b      	str	r3, [r7, #16]
}
 810604a:	bf00      	nop
 810604c:	bf00      	nop
 810604e:	e7fd      	b.n	810604c <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8106050:	2224      	movs	r2, #36	@ 0x24
 8106052:	2100      	movs	r1, #0
 8106054:	68f8      	ldr	r0, [r7, #12]
 8106056:	f001 fe0f 	bl	8107c78 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 810605a:	68fb      	ldr	r3, [r7, #12]
 810605c:	68ba      	ldr	r2, [r7, #8]
 810605e:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8106060:	68fb      	ldr	r3, [r7, #12]
 8106062:	687a      	ldr	r2, [r7, #4]
 8106064:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8106066:	68fb      	ldr	r3, [r7, #12]
 8106068:	683a      	ldr	r2, [r7, #0]
 810606a:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 810606c:	68fb      	ldr	r3, [r7, #12]
 810606e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8106072:	771a      	strb	r2, [r3, #28]
}
 8106074:	bf00      	nop
 8106076:	3718      	adds	r7, #24
 8106078:	46bd      	mov	sp, r7
 810607a:	bd80      	pop	{r7, pc}

0810607c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810607c:	b580      	push	{r7, lr}
 810607e:	b08e      	sub	sp, #56	@ 0x38
 8106080:	af04      	add	r7, sp, #16
 8106082:	60f8      	str	r0, [r7, #12]
 8106084:	60b9      	str	r1, [r7, #8]
 8106086:	607a      	str	r2, [r7, #4]
 8106088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810608a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810608c:	2b00      	cmp	r3, #0
 810608e:	d10b      	bne.n	81060a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8106090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106094:	f383 8811 	msr	BASEPRI, r3
 8106098:	f3bf 8f6f 	isb	sy
 810609c:	f3bf 8f4f 	dsb	sy
 81060a0:	623b      	str	r3, [r7, #32]
}
 81060a2:	bf00      	nop
 81060a4:	bf00      	nop
 81060a6:	e7fd      	b.n	81060a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 81060a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81060aa:	2b00      	cmp	r3, #0
 81060ac:	d10b      	bne.n	81060c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 81060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81060b2:	f383 8811 	msr	BASEPRI, r3
 81060b6:	f3bf 8f6f 	isb	sy
 81060ba:	f3bf 8f4f 	dsb	sy
 81060be:	61fb      	str	r3, [r7, #28]
}
 81060c0:	bf00      	nop
 81060c2:	bf00      	nop
 81060c4:	e7fd      	b.n	81060c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81060c6:	23a8      	movs	r3, #168	@ 0xa8
 81060c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81060ca:	693b      	ldr	r3, [r7, #16]
 81060cc:	2ba8      	cmp	r3, #168	@ 0xa8
 81060ce:	d00b      	beq.n	81060e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 81060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81060d4:	f383 8811 	msr	BASEPRI, r3
 81060d8:	f3bf 8f6f 	isb	sy
 81060dc:	f3bf 8f4f 	dsb	sy
 81060e0:	61bb      	str	r3, [r7, #24]
}
 81060e2:	bf00      	nop
 81060e4:	bf00      	nop
 81060e6:	e7fd      	b.n	81060e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81060e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81060ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81060ec:	2b00      	cmp	r3, #0
 81060ee:	d01e      	beq.n	810612e <xTaskCreateStatic+0xb2>
 81060f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81060f2:	2b00      	cmp	r3, #0
 81060f4:	d01b      	beq.n	810612e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81060f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81060f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81060fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8106100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106102:	2202      	movs	r2, #2
 8106104:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8106108:	2300      	movs	r3, #0
 810610a:	9303      	str	r3, [sp, #12]
 810610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810610e:	9302      	str	r3, [sp, #8]
 8106110:	f107 0314 	add.w	r3, r7, #20
 8106114:	9301      	str	r3, [sp, #4]
 8106116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106118:	9300      	str	r3, [sp, #0]
 810611a:	683b      	ldr	r3, [r7, #0]
 810611c:	687a      	ldr	r2, [r7, #4]
 810611e:	68b9      	ldr	r1, [r7, #8]
 8106120:	68f8      	ldr	r0, [r7, #12]
 8106122:	f000 f851 	bl	81061c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8106126:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8106128:	f000 f8f6 	bl	8106318 <prvAddNewTaskToReadyList>
 810612c:	e001      	b.n	8106132 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810612e:	2300      	movs	r3, #0
 8106130:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8106132:	697b      	ldr	r3, [r7, #20]
	}
 8106134:	4618      	mov	r0, r3
 8106136:	3728      	adds	r7, #40	@ 0x28
 8106138:	46bd      	mov	sp, r7
 810613a:	bd80      	pop	{r7, pc}

0810613c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810613c:	b580      	push	{r7, lr}
 810613e:	b08c      	sub	sp, #48	@ 0x30
 8106140:	af04      	add	r7, sp, #16
 8106142:	60f8      	str	r0, [r7, #12]
 8106144:	60b9      	str	r1, [r7, #8]
 8106146:	603b      	str	r3, [r7, #0]
 8106148:	4613      	mov	r3, r2
 810614a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810614c:	88fb      	ldrh	r3, [r7, #6]
 810614e:	009b      	lsls	r3, r3, #2
 8106150:	4618      	mov	r0, r3
 8106152:	f7fe f93d 	bl	81043d0 <pvPortMalloc>
 8106156:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8106158:	697b      	ldr	r3, [r7, #20]
 810615a:	2b00      	cmp	r3, #0
 810615c:	d00e      	beq.n	810617c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810615e:	20a8      	movs	r0, #168	@ 0xa8
 8106160:	f7fe f936 	bl	81043d0 <pvPortMalloc>
 8106164:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8106166:	69fb      	ldr	r3, [r7, #28]
 8106168:	2b00      	cmp	r3, #0
 810616a:	d003      	beq.n	8106174 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810616c:	69fb      	ldr	r3, [r7, #28]
 810616e:	697a      	ldr	r2, [r7, #20]
 8106170:	631a      	str	r2, [r3, #48]	@ 0x30
 8106172:	e005      	b.n	8106180 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8106174:	6978      	ldr	r0, [r7, #20]
 8106176:	f7fe f9f9 	bl	810456c <vPortFree>
 810617a:	e001      	b.n	8106180 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810617c:	2300      	movs	r3, #0
 810617e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8106180:	69fb      	ldr	r3, [r7, #28]
 8106182:	2b00      	cmp	r3, #0
 8106184:	d017      	beq.n	81061b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8106186:	69fb      	ldr	r3, [r7, #28]
 8106188:	2200      	movs	r2, #0
 810618a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810618e:	88fa      	ldrh	r2, [r7, #6]
 8106190:	2300      	movs	r3, #0
 8106192:	9303      	str	r3, [sp, #12]
 8106194:	69fb      	ldr	r3, [r7, #28]
 8106196:	9302      	str	r3, [sp, #8]
 8106198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810619a:	9301      	str	r3, [sp, #4]
 810619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810619e:	9300      	str	r3, [sp, #0]
 81061a0:	683b      	ldr	r3, [r7, #0]
 81061a2:	68b9      	ldr	r1, [r7, #8]
 81061a4:	68f8      	ldr	r0, [r7, #12]
 81061a6:	f000 f80f 	bl	81061c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81061aa:	69f8      	ldr	r0, [r7, #28]
 81061ac:	f000 f8b4 	bl	8106318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81061b0:	2301      	movs	r3, #1
 81061b2:	61bb      	str	r3, [r7, #24]
 81061b4:	e002      	b.n	81061bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81061b6:	f04f 33ff 	mov.w	r3, #4294967295
 81061ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81061bc:	69bb      	ldr	r3, [r7, #24]
	}
 81061be:	4618      	mov	r0, r3
 81061c0:	3720      	adds	r7, #32
 81061c2:	46bd      	mov	sp, r7
 81061c4:	bd80      	pop	{r7, pc}
	...

081061c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81061c8:	b580      	push	{r7, lr}
 81061ca:	b088      	sub	sp, #32
 81061cc:	af00      	add	r7, sp, #0
 81061ce:	60f8      	str	r0, [r7, #12]
 81061d0:	60b9      	str	r1, [r7, #8]
 81061d2:	607a      	str	r2, [r7, #4]
 81061d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	009b      	lsls	r3, r3, #2
 81061de:	461a      	mov	r2, r3
 81061e0:	21a5      	movs	r1, #165	@ 0xa5
 81061e2:	f001 fd49 	bl	8107c78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81061ea:	687b      	ldr	r3, [r7, #4]
 81061ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81061f0:	3b01      	subs	r3, #1
 81061f2:	009b      	lsls	r3, r3, #2
 81061f4:	4413      	add	r3, r2
 81061f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81061f8:	69bb      	ldr	r3, [r7, #24]
 81061fa:	f023 0307 	bic.w	r3, r3, #7
 81061fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8106200:	69bb      	ldr	r3, [r7, #24]
 8106202:	f003 0307 	and.w	r3, r3, #7
 8106206:	2b00      	cmp	r3, #0
 8106208:	d00b      	beq.n	8106222 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810620a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810620e:	f383 8811 	msr	BASEPRI, r3
 8106212:	f3bf 8f6f 	isb	sy
 8106216:	f3bf 8f4f 	dsb	sy
 810621a:	617b      	str	r3, [r7, #20]
}
 810621c:	bf00      	nop
 810621e:	bf00      	nop
 8106220:	e7fd      	b.n	810621e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8106222:	68bb      	ldr	r3, [r7, #8]
 8106224:	2b00      	cmp	r3, #0
 8106226:	d01f      	beq.n	8106268 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8106228:	2300      	movs	r3, #0
 810622a:	61fb      	str	r3, [r7, #28]
 810622c:	e012      	b.n	8106254 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810622e:	68ba      	ldr	r2, [r7, #8]
 8106230:	69fb      	ldr	r3, [r7, #28]
 8106232:	4413      	add	r3, r2
 8106234:	7819      	ldrb	r1, [r3, #0]
 8106236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106238:	69fb      	ldr	r3, [r7, #28]
 810623a:	4413      	add	r3, r2
 810623c:	3334      	adds	r3, #52	@ 0x34
 810623e:	460a      	mov	r2, r1
 8106240:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8106242:	68ba      	ldr	r2, [r7, #8]
 8106244:	69fb      	ldr	r3, [r7, #28]
 8106246:	4413      	add	r3, r2
 8106248:	781b      	ldrb	r3, [r3, #0]
 810624a:	2b00      	cmp	r3, #0
 810624c:	d006      	beq.n	810625c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810624e:	69fb      	ldr	r3, [r7, #28]
 8106250:	3301      	adds	r3, #1
 8106252:	61fb      	str	r3, [r7, #28]
 8106254:	69fb      	ldr	r3, [r7, #28]
 8106256:	2b0f      	cmp	r3, #15
 8106258:	d9e9      	bls.n	810622e <prvInitialiseNewTask+0x66>
 810625a:	e000      	b.n	810625e <prvInitialiseNewTask+0x96>
			{
				break;
 810625c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106260:	2200      	movs	r2, #0
 8106262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8106266:	e003      	b.n	8106270 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8106268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810626a:	2200      	movs	r2, #0
 810626c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8106270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106272:	2b37      	cmp	r3, #55	@ 0x37
 8106274:	d901      	bls.n	810627a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8106276:	2337      	movs	r3, #55	@ 0x37
 8106278:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810627c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810627e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8106280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8106284:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8106286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106288:	2200      	movs	r2, #0
 810628a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810628e:	3304      	adds	r3, #4
 8106290:	4618      	mov	r0, r3
 8106292:	f7fe faab 	bl	81047ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8106296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106298:	3318      	adds	r3, #24
 810629a:	4618      	mov	r0, r3
 810629c:	f7fe faa6 	bl	81047ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81062a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81062a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81062b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062b8:	2200      	movs	r2, #0
 81062ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062c0:	2200      	movs	r2, #0
 81062c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 81062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062c8:	3354      	adds	r3, #84	@ 0x54
 81062ca:	224c      	movs	r2, #76	@ 0x4c
 81062cc:	2100      	movs	r1, #0
 81062ce:	4618      	mov	r0, r3
 81062d0:	f001 fcd2 	bl	8107c78 <memset>
 81062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062d6:	4a0d      	ldr	r2, [pc, #52]	@ (810630c <prvInitialiseNewTask+0x144>)
 81062d8:	659a      	str	r2, [r3, #88]	@ 0x58
 81062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062dc:	4a0c      	ldr	r2, [pc, #48]	@ (8106310 <prvInitialiseNewTask+0x148>)
 81062de:	65da      	str	r2, [r3, #92]	@ 0x5c
 81062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062e2:	4a0c      	ldr	r2, [pc, #48]	@ (8106314 <prvInitialiseNewTask+0x14c>)
 81062e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81062e6:	683a      	ldr	r2, [r7, #0]
 81062e8:	68f9      	ldr	r1, [r7, #12]
 81062ea:	69b8      	ldr	r0, [r7, #24]
 81062ec:	f7fe fb12 	bl	8104914 <pxPortInitialiseStack>
 81062f0:	4602      	mov	r2, r0
 81062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81062f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81062f8:	2b00      	cmp	r3, #0
 81062fa:	d002      	beq.n	8106302 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81062fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8106302:	bf00      	nop
 8106304:	3720      	adds	r7, #32
 8106306:	46bd      	mov	sp, r7
 8106308:	bd80      	pop	{r7, pc}
 810630a:	bf00      	nop
 810630c:	10004adc 	.word	0x10004adc
 8106310:	10004b44 	.word	0x10004b44
 8106314:	10004bac 	.word	0x10004bac

08106318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8106318:	b580      	push	{r7, lr}
 810631a:	b082      	sub	sp, #8
 810631c:	af00      	add	r7, sp, #0
 810631e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8106320:	f7fe fc2a 	bl	8104b78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8106324:	4b2d      	ldr	r3, [pc, #180]	@ (81063dc <prvAddNewTaskToReadyList+0xc4>)
 8106326:	681b      	ldr	r3, [r3, #0]
 8106328:	3301      	adds	r3, #1
 810632a:	4a2c      	ldr	r2, [pc, #176]	@ (81063dc <prvAddNewTaskToReadyList+0xc4>)
 810632c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810632e:	4b2c      	ldr	r3, [pc, #176]	@ (81063e0 <prvAddNewTaskToReadyList+0xc8>)
 8106330:	681b      	ldr	r3, [r3, #0]
 8106332:	2b00      	cmp	r3, #0
 8106334:	d109      	bne.n	810634a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8106336:	4a2a      	ldr	r2, [pc, #168]	@ (81063e0 <prvAddNewTaskToReadyList+0xc8>)
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810633c:	4b27      	ldr	r3, [pc, #156]	@ (81063dc <prvAddNewTaskToReadyList+0xc4>)
 810633e:	681b      	ldr	r3, [r3, #0]
 8106340:	2b01      	cmp	r3, #1
 8106342:	d110      	bne.n	8106366 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8106344:	f000 fc56 	bl	8106bf4 <prvInitialiseTaskLists>
 8106348:	e00d      	b.n	8106366 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810634a:	4b26      	ldr	r3, [pc, #152]	@ (81063e4 <prvAddNewTaskToReadyList+0xcc>)
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	2b00      	cmp	r3, #0
 8106350:	d109      	bne.n	8106366 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8106352:	4b23      	ldr	r3, [pc, #140]	@ (81063e0 <prvAddNewTaskToReadyList+0xc8>)
 8106354:	681b      	ldr	r3, [r3, #0]
 8106356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810635c:	429a      	cmp	r2, r3
 810635e:	d802      	bhi.n	8106366 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8106360:	4a1f      	ldr	r2, [pc, #124]	@ (81063e0 <prvAddNewTaskToReadyList+0xc8>)
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8106366:	4b20      	ldr	r3, [pc, #128]	@ (81063e8 <prvAddNewTaskToReadyList+0xd0>)
 8106368:	681b      	ldr	r3, [r3, #0]
 810636a:	3301      	adds	r3, #1
 810636c:	4a1e      	ldr	r2, [pc, #120]	@ (81063e8 <prvAddNewTaskToReadyList+0xd0>)
 810636e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8106370:	4b1d      	ldr	r3, [pc, #116]	@ (81063e8 <prvAddNewTaskToReadyList+0xd0>)
 8106372:	681a      	ldr	r2, [r3, #0]
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810637c:	4b1b      	ldr	r3, [pc, #108]	@ (81063ec <prvAddNewTaskToReadyList+0xd4>)
 810637e:	681b      	ldr	r3, [r3, #0]
 8106380:	429a      	cmp	r2, r3
 8106382:	d903      	bls.n	810638c <prvAddNewTaskToReadyList+0x74>
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106388:	4a18      	ldr	r2, [pc, #96]	@ (81063ec <prvAddNewTaskToReadyList+0xd4>)
 810638a:	6013      	str	r3, [r2, #0]
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106390:	4613      	mov	r3, r2
 8106392:	009b      	lsls	r3, r3, #2
 8106394:	4413      	add	r3, r2
 8106396:	009b      	lsls	r3, r3, #2
 8106398:	4a15      	ldr	r2, [pc, #84]	@ (81063f0 <prvAddNewTaskToReadyList+0xd8>)
 810639a:	441a      	add	r2, r3
 810639c:	687b      	ldr	r3, [r7, #4]
 810639e:	3304      	adds	r3, #4
 81063a0:	4619      	mov	r1, r3
 81063a2:	4610      	mov	r0, r2
 81063a4:	f7fe fa2f 	bl	8104806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81063a8:	f7fe fc18 	bl	8104bdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81063ac:	4b0d      	ldr	r3, [pc, #52]	@ (81063e4 <prvAddNewTaskToReadyList+0xcc>)
 81063ae:	681b      	ldr	r3, [r3, #0]
 81063b0:	2b00      	cmp	r3, #0
 81063b2:	d00e      	beq.n	81063d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81063b4:	4b0a      	ldr	r3, [pc, #40]	@ (81063e0 <prvAddNewTaskToReadyList+0xc8>)
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81063ba:	687b      	ldr	r3, [r7, #4]
 81063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81063be:	429a      	cmp	r2, r3
 81063c0:	d207      	bcs.n	81063d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81063c2:	4b0c      	ldr	r3, [pc, #48]	@ (81063f4 <prvAddNewTaskToReadyList+0xdc>)
 81063c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81063c8:	601a      	str	r2, [r3, #0]
 81063ca:	f3bf 8f4f 	dsb	sy
 81063ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81063d2:	bf00      	nop
 81063d4:	3708      	adds	r7, #8
 81063d6:	46bd      	mov	sp, r7
 81063d8:	bd80      	pop	{r7, pc}
 81063da:	bf00      	nop
 81063dc:	10004978 	.word	0x10004978
 81063e0:	100044a4 	.word	0x100044a4
 81063e4:	10004984 	.word	0x10004984
 81063e8:	10004994 	.word	0x10004994
 81063ec:	10004980 	.word	0x10004980
 81063f0:	100044a8 	.word	0x100044a8
 81063f4:	e000ed04 	.word	0xe000ed04

081063f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81063f8:	b580      	push	{r7, lr}
 81063fa:	b084      	sub	sp, #16
 81063fc:	af00      	add	r7, sp, #0
 81063fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8106400:	2300      	movs	r3, #0
 8106402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	2b00      	cmp	r3, #0
 8106408:	d018      	beq.n	810643c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810640a:	4b14      	ldr	r3, [pc, #80]	@ (810645c <vTaskDelay+0x64>)
 810640c:	681b      	ldr	r3, [r3, #0]
 810640e:	2b00      	cmp	r3, #0
 8106410:	d00b      	beq.n	810642a <vTaskDelay+0x32>
	__asm volatile
 8106412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106416:	f383 8811 	msr	BASEPRI, r3
 810641a:	f3bf 8f6f 	isb	sy
 810641e:	f3bf 8f4f 	dsb	sy
 8106422:	60bb      	str	r3, [r7, #8]
}
 8106424:	bf00      	nop
 8106426:	bf00      	nop
 8106428:	e7fd      	b.n	8106426 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810642a:	f000 f88b 	bl	8106544 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810642e:	2100      	movs	r1, #0
 8106430:	6878      	ldr	r0, [r7, #4]
 8106432:	f000 fead 	bl	8107190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8106436:	f000 f893 	bl	8106560 <xTaskResumeAll>
 810643a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810643c:	68fb      	ldr	r3, [r7, #12]
 810643e:	2b00      	cmp	r3, #0
 8106440:	d107      	bne.n	8106452 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8106442:	4b07      	ldr	r3, [pc, #28]	@ (8106460 <vTaskDelay+0x68>)
 8106444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106448:	601a      	str	r2, [r3, #0]
 810644a:	f3bf 8f4f 	dsb	sy
 810644e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8106452:	bf00      	nop
 8106454:	3710      	adds	r7, #16
 8106456:	46bd      	mov	sp, r7
 8106458:	bd80      	pop	{r7, pc}
 810645a:	bf00      	nop
 810645c:	100049a0 	.word	0x100049a0
 8106460:	e000ed04 	.word	0xe000ed04

08106464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8106464:	b580      	push	{r7, lr}
 8106466:	b08a      	sub	sp, #40	@ 0x28
 8106468:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810646a:	2300      	movs	r3, #0
 810646c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810646e:	2300      	movs	r3, #0
 8106470:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8106472:	463a      	mov	r2, r7
 8106474:	1d39      	adds	r1, r7, #4
 8106476:	f107 0308 	add.w	r3, r7, #8
 810647a:	4618      	mov	r0, r3
 810647c:	f7fd ff74 	bl	8104368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8106480:	6839      	ldr	r1, [r7, #0]
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	68ba      	ldr	r2, [r7, #8]
 8106486:	9202      	str	r2, [sp, #8]
 8106488:	9301      	str	r3, [sp, #4]
 810648a:	2300      	movs	r3, #0
 810648c:	9300      	str	r3, [sp, #0]
 810648e:	2300      	movs	r3, #0
 8106490:	460a      	mov	r2, r1
 8106492:	4924      	ldr	r1, [pc, #144]	@ (8106524 <vTaskStartScheduler+0xc0>)
 8106494:	4824      	ldr	r0, [pc, #144]	@ (8106528 <vTaskStartScheduler+0xc4>)
 8106496:	f7ff fdf1 	bl	810607c <xTaskCreateStatic>
 810649a:	4603      	mov	r3, r0
 810649c:	4a23      	ldr	r2, [pc, #140]	@ (810652c <vTaskStartScheduler+0xc8>)
 810649e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81064a0:	4b22      	ldr	r3, [pc, #136]	@ (810652c <vTaskStartScheduler+0xc8>)
 81064a2:	681b      	ldr	r3, [r3, #0]
 81064a4:	2b00      	cmp	r3, #0
 81064a6:	d002      	beq.n	81064ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81064a8:	2301      	movs	r3, #1
 81064aa:	617b      	str	r3, [r7, #20]
 81064ac:	e001      	b.n	81064b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81064ae:	2300      	movs	r3, #0
 81064b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 81064b2:	697b      	ldr	r3, [r7, #20]
 81064b4:	2b01      	cmp	r3, #1
 81064b6:	d102      	bne.n	81064be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81064b8:	f000 febe 	bl	8107238 <xTimerCreateTimerTask>
 81064bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81064be:	697b      	ldr	r3, [r7, #20]
 81064c0:	2b01      	cmp	r3, #1
 81064c2:	d11b      	bne.n	81064fc <vTaskStartScheduler+0x98>
	__asm volatile
 81064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81064c8:	f383 8811 	msr	BASEPRI, r3
 81064cc:	f3bf 8f6f 	isb	sy
 81064d0:	f3bf 8f4f 	dsb	sy
 81064d4:	613b      	str	r3, [r7, #16]
}
 81064d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81064d8:	4b15      	ldr	r3, [pc, #84]	@ (8106530 <vTaskStartScheduler+0xcc>)
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	3354      	adds	r3, #84	@ 0x54
 81064de:	4a15      	ldr	r2, [pc, #84]	@ (8106534 <vTaskStartScheduler+0xd0>)
 81064e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81064e2:	4b15      	ldr	r3, [pc, #84]	@ (8106538 <vTaskStartScheduler+0xd4>)
 81064e4:	f04f 32ff 	mov.w	r2, #4294967295
 81064e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81064ea:	4b14      	ldr	r3, [pc, #80]	@ (810653c <vTaskStartScheduler+0xd8>)
 81064ec:	2201      	movs	r2, #1
 81064ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81064f0:	4b13      	ldr	r3, [pc, #76]	@ (8106540 <vTaskStartScheduler+0xdc>)
 81064f2:	2200      	movs	r2, #0
 81064f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81064f6:	f7fe fa9b 	bl	8104a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81064fa:	e00f      	b.n	810651c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81064fc:	697b      	ldr	r3, [r7, #20]
 81064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106502:	d10b      	bne.n	810651c <vTaskStartScheduler+0xb8>
	__asm volatile
 8106504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106508:	f383 8811 	msr	BASEPRI, r3
 810650c:	f3bf 8f6f 	isb	sy
 8106510:	f3bf 8f4f 	dsb	sy
 8106514:	60fb      	str	r3, [r7, #12]
}
 8106516:	bf00      	nop
 8106518:	bf00      	nop
 810651a:	e7fd      	b.n	8106518 <vTaskStartScheduler+0xb4>
}
 810651c:	bf00      	nop
 810651e:	3718      	adds	r7, #24
 8106520:	46bd      	mov	sp, r7
 8106522:	bd80      	pop	{r7, pc}
 8106524:	08107f38 	.word	0x08107f38
 8106528:	08106bc5 	.word	0x08106bc5
 810652c:	1000499c 	.word	0x1000499c
 8106530:	100044a4 	.word	0x100044a4
 8106534:	10000014 	.word	0x10000014
 8106538:	10004998 	.word	0x10004998
 810653c:	10004984 	.word	0x10004984
 8106540:	1000497c 	.word	0x1000497c

08106544 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8106544:	b480      	push	{r7}
 8106546:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8106548:	4b04      	ldr	r3, [pc, #16]	@ (810655c <vTaskSuspendAll+0x18>)
 810654a:	681b      	ldr	r3, [r3, #0]
 810654c:	3301      	adds	r3, #1
 810654e:	4a03      	ldr	r2, [pc, #12]	@ (810655c <vTaskSuspendAll+0x18>)
 8106550:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8106552:	bf00      	nop
 8106554:	46bd      	mov	sp, r7
 8106556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810655a:	4770      	bx	lr
 810655c:	100049a0 	.word	0x100049a0

08106560 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8106560:	b580      	push	{r7, lr}
 8106562:	b084      	sub	sp, #16
 8106564:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8106566:	2300      	movs	r3, #0
 8106568:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810656a:	2300      	movs	r3, #0
 810656c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810656e:	4b42      	ldr	r3, [pc, #264]	@ (8106678 <xTaskResumeAll+0x118>)
 8106570:	681b      	ldr	r3, [r3, #0]
 8106572:	2b00      	cmp	r3, #0
 8106574:	d10b      	bne.n	810658e <xTaskResumeAll+0x2e>
	__asm volatile
 8106576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810657a:	f383 8811 	msr	BASEPRI, r3
 810657e:	f3bf 8f6f 	isb	sy
 8106582:	f3bf 8f4f 	dsb	sy
 8106586:	603b      	str	r3, [r7, #0]
}
 8106588:	bf00      	nop
 810658a:	bf00      	nop
 810658c:	e7fd      	b.n	810658a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810658e:	f7fe faf3 	bl	8104b78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8106592:	4b39      	ldr	r3, [pc, #228]	@ (8106678 <xTaskResumeAll+0x118>)
 8106594:	681b      	ldr	r3, [r3, #0]
 8106596:	3b01      	subs	r3, #1
 8106598:	4a37      	ldr	r2, [pc, #220]	@ (8106678 <xTaskResumeAll+0x118>)
 810659a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810659c:	4b36      	ldr	r3, [pc, #216]	@ (8106678 <xTaskResumeAll+0x118>)
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	2b00      	cmp	r3, #0
 81065a2:	d162      	bne.n	810666a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81065a4:	4b35      	ldr	r3, [pc, #212]	@ (810667c <xTaskResumeAll+0x11c>)
 81065a6:	681b      	ldr	r3, [r3, #0]
 81065a8:	2b00      	cmp	r3, #0
 81065aa:	d05e      	beq.n	810666a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81065ac:	e02f      	b.n	810660e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81065ae:	4b34      	ldr	r3, [pc, #208]	@ (8106680 <xTaskResumeAll+0x120>)
 81065b0:	68db      	ldr	r3, [r3, #12]
 81065b2:	68db      	ldr	r3, [r3, #12]
 81065b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81065b6:	68fb      	ldr	r3, [r7, #12]
 81065b8:	3318      	adds	r3, #24
 81065ba:	4618      	mov	r0, r3
 81065bc:	f7fe f980 	bl	81048c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81065c0:	68fb      	ldr	r3, [r7, #12]
 81065c2:	3304      	adds	r3, #4
 81065c4:	4618      	mov	r0, r3
 81065c6:	f7fe f97b 	bl	81048c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81065ca:	68fb      	ldr	r3, [r7, #12]
 81065cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81065ce:	4b2d      	ldr	r3, [pc, #180]	@ (8106684 <xTaskResumeAll+0x124>)
 81065d0:	681b      	ldr	r3, [r3, #0]
 81065d2:	429a      	cmp	r2, r3
 81065d4:	d903      	bls.n	81065de <xTaskResumeAll+0x7e>
 81065d6:	68fb      	ldr	r3, [r7, #12]
 81065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065da:	4a2a      	ldr	r2, [pc, #168]	@ (8106684 <xTaskResumeAll+0x124>)
 81065dc:	6013      	str	r3, [r2, #0]
 81065de:	68fb      	ldr	r3, [r7, #12]
 81065e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81065e2:	4613      	mov	r3, r2
 81065e4:	009b      	lsls	r3, r3, #2
 81065e6:	4413      	add	r3, r2
 81065e8:	009b      	lsls	r3, r3, #2
 81065ea:	4a27      	ldr	r2, [pc, #156]	@ (8106688 <xTaskResumeAll+0x128>)
 81065ec:	441a      	add	r2, r3
 81065ee:	68fb      	ldr	r3, [r7, #12]
 81065f0:	3304      	adds	r3, #4
 81065f2:	4619      	mov	r1, r3
 81065f4:	4610      	mov	r0, r2
 81065f6:	f7fe f906 	bl	8104806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81065fa:	68fb      	ldr	r3, [r7, #12]
 81065fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81065fe:	4b23      	ldr	r3, [pc, #140]	@ (810668c <xTaskResumeAll+0x12c>)
 8106600:	681b      	ldr	r3, [r3, #0]
 8106602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106604:	429a      	cmp	r2, r3
 8106606:	d302      	bcc.n	810660e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8106608:	4b21      	ldr	r3, [pc, #132]	@ (8106690 <xTaskResumeAll+0x130>)
 810660a:	2201      	movs	r2, #1
 810660c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810660e:	4b1c      	ldr	r3, [pc, #112]	@ (8106680 <xTaskResumeAll+0x120>)
 8106610:	681b      	ldr	r3, [r3, #0]
 8106612:	2b00      	cmp	r3, #0
 8106614:	d1cb      	bne.n	81065ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8106616:	68fb      	ldr	r3, [r7, #12]
 8106618:	2b00      	cmp	r3, #0
 810661a:	d001      	beq.n	8106620 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810661c:	f000 fb8e 	bl	8106d3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8106620:	4b1c      	ldr	r3, [pc, #112]	@ (8106694 <xTaskResumeAll+0x134>)
 8106622:	681b      	ldr	r3, [r3, #0]
 8106624:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8106626:	687b      	ldr	r3, [r7, #4]
 8106628:	2b00      	cmp	r3, #0
 810662a:	d010      	beq.n	810664e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810662c:	f000 f846 	bl	81066bc <xTaskIncrementTick>
 8106630:	4603      	mov	r3, r0
 8106632:	2b00      	cmp	r3, #0
 8106634:	d002      	beq.n	810663c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8106636:	4b16      	ldr	r3, [pc, #88]	@ (8106690 <xTaskResumeAll+0x130>)
 8106638:	2201      	movs	r2, #1
 810663a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	3b01      	subs	r3, #1
 8106640:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	2b00      	cmp	r3, #0
 8106646:	d1f1      	bne.n	810662c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8106648:	4b12      	ldr	r3, [pc, #72]	@ (8106694 <xTaskResumeAll+0x134>)
 810664a:	2200      	movs	r2, #0
 810664c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810664e:	4b10      	ldr	r3, [pc, #64]	@ (8106690 <xTaskResumeAll+0x130>)
 8106650:	681b      	ldr	r3, [r3, #0]
 8106652:	2b00      	cmp	r3, #0
 8106654:	d009      	beq.n	810666a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8106656:	2301      	movs	r3, #1
 8106658:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810665a:	4b0f      	ldr	r3, [pc, #60]	@ (8106698 <xTaskResumeAll+0x138>)
 810665c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106660:	601a      	str	r2, [r3, #0]
 8106662:	f3bf 8f4f 	dsb	sy
 8106666:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810666a:	f7fe fab7 	bl	8104bdc <vPortExitCritical>

	return xAlreadyYielded;
 810666e:	68bb      	ldr	r3, [r7, #8]
}
 8106670:	4618      	mov	r0, r3
 8106672:	3710      	adds	r7, #16
 8106674:	46bd      	mov	sp, r7
 8106676:	bd80      	pop	{r7, pc}
 8106678:	100049a0 	.word	0x100049a0
 810667c:	10004978 	.word	0x10004978
 8106680:	10004938 	.word	0x10004938
 8106684:	10004980 	.word	0x10004980
 8106688:	100044a8 	.word	0x100044a8
 810668c:	100044a4 	.word	0x100044a4
 8106690:	1000498c 	.word	0x1000498c
 8106694:	10004988 	.word	0x10004988
 8106698:	e000ed04 	.word	0xe000ed04

0810669c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810669c:	b480      	push	{r7}
 810669e:	b083      	sub	sp, #12
 81066a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81066a2:	4b05      	ldr	r3, [pc, #20]	@ (81066b8 <xTaskGetTickCount+0x1c>)
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81066a8:	687b      	ldr	r3, [r7, #4]
}
 81066aa:	4618      	mov	r0, r3
 81066ac:	370c      	adds	r7, #12
 81066ae:	46bd      	mov	sp, r7
 81066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066b4:	4770      	bx	lr
 81066b6:	bf00      	nop
 81066b8:	1000497c 	.word	0x1000497c

081066bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81066bc:	b580      	push	{r7, lr}
 81066be:	b086      	sub	sp, #24
 81066c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81066c2:	2300      	movs	r3, #0
 81066c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81066c6:	4b4f      	ldr	r3, [pc, #316]	@ (8106804 <xTaskIncrementTick+0x148>)
 81066c8:	681b      	ldr	r3, [r3, #0]
 81066ca:	2b00      	cmp	r3, #0
 81066cc:	f040 8090 	bne.w	81067f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81066d0:	4b4d      	ldr	r3, [pc, #308]	@ (8106808 <xTaskIncrementTick+0x14c>)
 81066d2:	681b      	ldr	r3, [r3, #0]
 81066d4:	3301      	adds	r3, #1
 81066d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81066d8:	4a4b      	ldr	r2, [pc, #300]	@ (8106808 <xTaskIncrementTick+0x14c>)
 81066da:	693b      	ldr	r3, [r7, #16]
 81066dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81066de:	693b      	ldr	r3, [r7, #16]
 81066e0:	2b00      	cmp	r3, #0
 81066e2:	d121      	bne.n	8106728 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 81066e4:	4b49      	ldr	r3, [pc, #292]	@ (810680c <xTaskIncrementTick+0x150>)
 81066e6:	681b      	ldr	r3, [r3, #0]
 81066e8:	681b      	ldr	r3, [r3, #0]
 81066ea:	2b00      	cmp	r3, #0
 81066ec:	d00b      	beq.n	8106706 <xTaskIncrementTick+0x4a>
	__asm volatile
 81066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81066f2:	f383 8811 	msr	BASEPRI, r3
 81066f6:	f3bf 8f6f 	isb	sy
 81066fa:	f3bf 8f4f 	dsb	sy
 81066fe:	603b      	str	r3, [r7, #0]
}
 8106700:	bf00      	nop
 8106702:	bf00      	nop
 8106704:	e7fd      	b.n	8106702 <xTaskIncrementTick+0x46>
 8106706:	4b41      	ldr	r3, [pc, #260]	@ (810680c <xTaskIncrementTick+0x150>)
 8106708:	681b      	ldr	r3, [r3, #0]
 810670a:	60fb      	str	r3, [r7, #12]
 810670c:	4b40      	ldr	r3, [pc, #256]	@ (8106810 <xTaskIncrementTick+0x154>)
 810670e:	681b      	ldr	r3, [r3, #0]
 8106710:	4a3e      	ldr	r2, [pc, #248]	@ (810680c <xTaskIncrementTick+0x150>)
 8106712:	6013      	str	r3, [r2, #0]
 8106714:	4a3e      	ldr	r2, [pc, #248]	@ (8106810 <xTaskIncrementTick+0x154>)
 8106716:	68fb      	ldr	r3, [r7, #12]
 8106718:	6013      	str	r3, [r2, #0]
 810671a:	4b3e      	ldr	r3, [pc, #248]	@ (8106814 <xTaskIncrementTick+0x158>)
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	3301      	adds	r3, #1
 8106720:	4a3c      	ldr	r2, [pc, #240]	@ (8106814 <xTaskIncrementTick+0x158>)
 8106722:	6013      	str	r3, [r2, #0]
 8106724:	f000 fb0a 	bl	8106d3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8106728:	4b3b      	ldr	r3, [pc, #236]	@ (8106818 <xTaskIncrementTick+0x15c>)
 810672a:	681b      	ldr	r3, [r3, #0]
 810672c:	693a      	ldr	r2, [r7, #16]
 810672e:	429a      	cmp	r2, r3
 8106730:	d349      	bcc.n	81067c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106732:	4b36      	ldr	r3, [pc, #216]	@ (810680c <xTaskIncrementTick+0x150>)
 8106734:	681b      	ldr	r3, [r3, #0]
 8106736:	681b      	ldr	r3, [r3, #0]
 8106738:	2b00      	cmp	r3, #0
 810673a:	d104      	bne.n	8106746 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810673c:	4b36      	ldr	r3, [pc, #216]	@ (8106818 <xTaskIncrementTick+0x15c>)
 810673e:	f04f 32ff 	mov.w	r2, #4294967295
 8106742:	601a      	str	r2, [r3, #0]
					break;
 8106744:	e03f      	b.n	81067c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106746:	4b31      	ldr	r3, [pc, #196]	@ (810680c <xTaskIncrementTick+0x150>)
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	68db      	ldr	r3, [r3, #12]
 810674c:	68db      	ldr	r3, [r3, #12]
 810674e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8106750:	68bb      	ldr	r3, [r7, #8]
 8106752:	685b      	ldr	r3, [r3, #4]
 8106754:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8106756:	693a      	ldr	r2, [r7, #16]
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	429a      	cmp	r2, r3
 810675c:	d203      	bcs.n	8106766 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810675e:	4a2e      	ldr	r2, [pc, #184]	@ (8106818 <xTaskIncrementTick+0x15c>)
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8106764:	e02f      	b.n	81067c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106766:	68bb      	ldr	r3, [r7, #8]
 8106768:	3304      	adds	r3, #4
 810676a:	4618      	mov	r0, r3
 810676c:	f7fe f8a8 	bl	81048c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8106770:	68bb      	ldr	r3, [r7, #8]
 8106772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106774:	2b00      	cmp	r3, #0
 8106776:	d004      	beq.n	8106782 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8106778:	68bb      	ldr	r3, [r7, #8]
 810677a:	3318      	adds	r3, #24
 810677c:	4618      	mov	r0, r3
 810677e:	f7fe f89f 	bl	81048c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8106782:	68bb      	ldr	r3, [r7, #8]
 8106784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106786:	4b25      	ldr	r3, [pc, #148]	@ (810681c <xTaskIncrementTick+0x160>)
 8106788:	681b      	ldr	r3, [r3, #0]
 810678a:	429a      	cmp	r2, r3
 810678c:	d903      	bls.n	8106796 <xTaskIncrementTick+0xda>
 810678e:	68bb      	ldr	r3, [r7, #8]
 8106790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106792:	4a22      	ldr	r2, [pc, #136]	@ (810681c <xTaskIncrementTick+0x160>)
 8106794:	6013      	str	r3, [r2, #0]
 8106796:	68bb      	ldr	r3, [r7, #8]
 8106798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810679a:	4613      	mov	r3, r2
 810679c:	009b      	lsls	r3, r3, #2
 810679e:	4413      	add	r3, r2
 81067a0:	009b      	lsls	r3, r3, #2
 81067a2:	4a1f      	ldr	r2, [pc, #124]	@ (8106820 <xTaskIncrementTick+0x164>)
 81067a4:	441a      	add	r2, r3
 81067a6:	68bb      	ldr	r3, [r7, #8]
 81067a8:	3304      	adds	r3, #4
 81067aa:	4619      	mov	r1, r3
 81067ac:	4610      	mov	r0, r2
 81067ae:	f7fe f82a 	bl	8104806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81067b2:	68bb      	ldr	r3, [r7, #8]
 81067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81067b6:	4b1b      	ldr	r3, [pc, #108]	@ (8106824 <xTaskIncrementTick+0x168>)
 81067b8:	681b      	ldr	r3, [r3, #0]
 81067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81067bc:	429a      	cmp	r2, r3
 81067be:	d3b8      	bcc.n	8106732 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81067c0:	2301      	movs	r3, #1
 81067c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81067c4:	e7b5      	b.n	8106732 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81067c6:	4b17      	ldr	r3, [pc, #92]	@ (8106824 <xTaskIncrementTick+0x168>)
 81067c8:	681b      	ldr	r3, [r3, #0]
 81067ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81067cc:	4914      	ldr	r1, [pc, #80]	@ (8106820 <xTaskIncrementTick+0x164>)
 81067ce:	4613      	mov	r3, r2
 81067d0:	009b      	lsls	r3, r3, #2
 81067d2:	4413      	add	r3, r2
 81067d4:	009b      	lsls	r3, r3, #2
 81067d6:	440b      	add	r3, r1
 81067d8:	681b      	ldr	r3, [r3, #0]
 81067da:	2b01      	cmp	r3, #1
 81067dc:	d901      	bls.n	81067e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 81067de:	2301      	movs	r3, #1
 81067e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81067e2:	4b11      	ldr	r3, [pc, #68]	@ (8106828 <xTaskIncrementTick+0x16c>)
 81067e4:	681b      	ldr	r3, [r3, #0]
 81067e6:	2b00      	cmp	r3, #0
 81067e8:	d007      	beq.n	81067fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81067ea:	2301      	movs	r3, #1
 81067ec:	617b      	str	r3, [r7, #20]
 81067ee:	e004      	b.n	81067fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81067f0:	4b0e      	ldr	r3, [pc, #56]	@ (810682c <xTaskIncrementTick+0x170>)
 81067f2:	681b      	ldr	r3, [r3, #0]
 81067f4:	3301      	adds	r3, #1
 81067f6:	4a0d      	ldr	r2, [pc, #52]	@ (810682c <xTaskIncrementTick+0x170>)
 81067f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81067fa:	697b      	ldr	r3, [r7, #20]
}
 81067fc:	4618      	mov	r0, r3
 81067fe:	3718      	adds	r7, #24
 8106800:	46bd      	mov	sp, r7
 8106802:	bd80      	pop	{r7, pc}
 8106804:	100049a0 	.word	0x100049a0
 8106808:	1000497c 	.word	0x1000497c
 810680c:	10004930 	.word	0x10004930
 8106810:	10004934 	.word	0x10004934
 8106814:	10004990 	.word	0x10004990
 8106818:	10004998 	.word	0x10004998
 810681c:	10004980 	.word	0x10004980
 8106820:	100044a8 	.word	0x100044a8
 8106824:	100044a4 	.word	0x100044a4
 8106828:	1000498c 	.word	0x1000498c
 810682c:	10004988 	.word	0x10004988

08106830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8106830:	b480      	push	{r7}
 8106832:	b085      	sub	sp, #20
 8106834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8106836:	4b2b      	ldr	r3, [pc, #172]	@ (81068e4 <vTaskSwitchContext+0xb4>)
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	2b00      	cmp	r3, #0
 810683c:	d003      	beq.n	8106846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810683e:	4b2a      	ldr	r3, [pc, #168]	@ (81068e8 <vTaskSwitchContext+0xb8>)
 8106840:	2201      	movs	r2, #1
 8106842:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8106844:	e047      	b.n	81068d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8106846:	4b28      	ldr	r3, [pc, #160]	@ (81068e8 <vTaskSwitchContext+0xb8>)
 8106848:	2200      	movs	r2, #0
 810684a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810684c:	4b27      	ldr	r3, [pc, #156]	@ (81068ec <vTaskSwitchContext+0xbc>)
 810684e:	681b      	ldr	r3, [r3, #0]
 8106850:	60fb      	str	r3, [r7, #12]
 8106852:	e011      	b.n	8106878 <vTaskSwitchContext+0x48>
 8106854:	68fb      	ldr	r3, [r7, #12]
 8106856:	2b00      	cmp	r3, #0
 8106858:	d10b      	bne.n	8106872 <vTaskSwitchContext+0x42>
	__asm volatile
 810685a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810685e:	f383 8811 	msr	BASEPRI, r3
 8106862:	f3bf 8f6f 	isb	sy
 8106866:	f3bf 8f4f 	dsb	sy
 810686a:	607b      	str	r3, [r7, #4]
}
 810686c:	bf00      	nop
 810686e:	bf00      	nop
 8106870:	e7fd      	b.n	810686e <vTaskSwitchContext+0x3e>
 8106872:	68fb      	ldr	r3, [r7, #12]
 8106874:	3b01      	subs	r3, #1
 8106876:	60fb      	str	r3, [r7, #12]
 8106878:	491d      	ldr	r1, [pc, #116]	@ (81068f0 <vTaskSwitchContext+0xc0>)
 810687a:	68fa      	ldr	r2, [r7, #12]
 810687c:	4613      	mov	r3, r2
 810687e:	009b      	lsls	r3, r3, #2
 8106880:	4413      	add	r3, r2
 8106882:	009b      	lsls	r3, r3, #2
 8106884:	440b      	add	r3, r1
 8106886:	681b      	ldr	r3, [r3, #0]
 8106888:	2b00      	cmp	r3, #0
 810688a:	d0e3      	beq.n	8106854 <vTaskSwitchContext+0x24>
 810688c:	68fa      	ldr	r2, [r7, #12]
 810688e:	4613      	mov	r3, r2
 8106890:	009b      	lsls	r3, r3, #2
 8106892:	4413      	add	r3, r2
 8106894:	009b      	lsls	r3, r3, #2
 8106896:	4a16      	ldr	r2, [pc, #88]	@ (81068f0 <vTaskSwitchContext+0xc0>)
 8106898:	4413      	add	r3, r2
 810689a:	60bb      	str	r3, [r7, #8]
 810689c:	68bb      	ldr	r3, [r7, #8]
 810689e:	685b      	ldr	r3, [r3, #4]
 81068a0:	685a      	ldr	r2, [r3, #4]
 81068a2:	68bb      	ldr	r3, [r7, #8]
 81068a4:	605a      	str	r2, [r3, #4]
 81068a6:	68bb      	ldr	r3, [r7, #8]
 81068a8:	685a      	ldr	r2, [r3, #4]
 81068aa:	68bb      	ldr	r3, [r7, #8]
 81068ac:	3308      	adds	r3, #8
 81068ae:	429a      	cmp	r2, r3
 81068b0:	d104      	bne.n	81068bc <vTaskSwitchContext+0x8c>
 81068b2:	68bb      	ldr	r3, [r7, #8]
 81068b4:	685b      	ldr	r3, [r3, #4]
 81068b6:	685a      	ldr	r2, [r3, #4]
 81068b8:	68bb      	ldr	r3, [r7, #8]
 81068ba:	605a      	str	r2, [r3, #4]
 81068bc:	68bb      	ldr	r3, [r7, #8]
 81068be:	685b      	ldr	r3, [r3, #4]
 81068c0:	68db      	ldr	r3, [r3, #12]
 81068c2:	4a0c      	ldr	r2, [pc, #48]	@ (81068f4 <vTaskSwitchContext+0xc4>)
 81068c4:	6013      	str	r3, [r2, #0]
 81068c6:	4a09      	ldr	r2, [pc, #36]	@ (81068ec <vTaskSwitchContext+0xbc>)
 81068c8:	68fb      	ldr	r3, [r7, #12]
 81068ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81068cc:	4b09      	ldr	r3, [pc, #36]	@ (81068f4 <vTaskSwitchContext+0xc4>)
 81068ce:	681b      	ldr	r3, [r3, #0]
 81068d0:	3354      	adds	r3, #84	@ 0x54
 81068d2:	4a09      	ldr	r2, [pc, #36]	@ (81068f8 <vTaskSwitchContext+0xc8>)
 81068d4:	6013      	str	r3, [r2, #0]
}
 81068d6:	bf00      	nop
 81068d8:	3714      	adds	r7, #20
 81068da:	46bd      	mov	sp, r7
 81068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068e0:	4770      	bx	lr
 81068e2:	bf00      	nop
 81068e4:	100049a0 	.word	0x100049a0
 81068e8:	1000498c 	.word	0x1000498c
 81068ec:	10004980 	.word	0x10004980
 81068f0:	100044a8 	.word	0x100044a8
 81068f4:	100044a4 	.word	0x100044a4
 81068f8:	10000014 	.word	0x10000014

081068fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81068fc:	b580      	push	{r7, lr}
 81068fe:	b084      	sub	sp, #16
 8106900:	af00      	add	r7, sp, #0
 8106902:	6078      	str	r0, [r7, #4]
 8106904:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	2b00      	cmp	r3, #0
 810690a:	d10b      	bne.n	8106924 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106910:	f383 8811 	msr	BASEPRI, r3
 8106914:	f3bf 8f6f 	isb	sy
 8106918:	f3bf 8f4f 	dsb	sy
 810691c:	60fb      	str	r3, [r7, #12]
}
 810691e:	bf00      	nop
 8106920:	bf00      	nop
 8106922:	e7fd      	b.n	8106920 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106924:	4b07      	ldr	r3, [pc, #28]	@ (8106944 <vTaskPlaceOnEventList+0x48>)
 8106926:	681b      	ldr	r3, [r3, #0]
 8106928:	3318      	adds	r3, #24
 810692a:	4619      	mov	r1, r3
 810692c:	6878      	ldr	r0, [r7, #4]
 810692e:	f7fd ff8e 	bl	810484e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8106932:	2101      	movs	r1, #1
 8106934:	6838      	ldr	r0, [r7, #0]
 8106936:	f000 fc2b 	bl	8107190 <prvAddCurrentTaskToDelayedList>
}
 810693a:	bf00      	nop
 810693c:	3710      	adds	r7, #16
 810693e:	46bd      	mov	sp, r7
 8106940:	bd80      	pop	{r7, pc}
 8106942:	bf00      	nop
 8106944:	100044a4 	.word	0x100044a4

08106948 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106948:	b580      	push	{r7, lr}
 810694a:	b086      	sub	sp, #24
 810694c:	af00      	add	r7, sp, #0
 810694e:	60f8      	str	r0, [r7, #12]
 8106950:	60b9      	str	r1, [r7, #8]
 8106952:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8106954:	68fb      	ldr	r3, [r7, #12]
 8106956:	2b00      	cmp	r3, #0
 8106958:	d10b      	bne.n	8106972 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810695e:	f383 8811 	msr	BASEPRI, r3
 8106962:	f3bf 8f6f 	isb	sy
 8106966:	f3bf 8f4f 	dsb	sy
 810696a:	617b      	str	r3, [r7, #20]
}
 810696c:	bf00      	nop
 810696e:	bf00      	nop
 8106970:	e7fd      	b.n	810696e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106972:	4b0a      	ldr	r3, [pc, #40]	@ (810699c <vTaskPlaceOnEventListRestricted+0x54>)
 8106974:	681b      	ldr	r3, [r3, #0]
 8106976:	3318      	adds	r3, #24
 8106978:	4619      	mov	r1, r3
 810697a:	68f8      	ldr	r0, [r7, #12]
 810697c:	f7fd ff43 	bl	8104806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	2b00      	cmp	r3, #0
 8106984:	d002      	beq.n	810698c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8106986:	f04f 33ff 	mov.w	r3, #4294967295
 810698a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810698c:	6879      	ldr	r1, [r7, #4]
 810698e:	68b8      	ldr	r0, [r7, #8]
 8106990:	f000 fbfe 	bl	8107190 <prvAddCurrentTaskToDelayedList>
	}
 8106994:	bf00      	nop
 8106996:	3718      	adds	r7, #24
 8106998:	46bd      	mov	sp, r7
 810699a:	bd80      	pop	{r7, pc}
 810699c:	100044a4 	.word	0x100044a4

081069a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 81069a0:	b580      	push	{r7, lr}
 81069a2:	b086      	sub	sp, #24
 81069a4:	af00      	add	r7, sp, #0
 81069a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	68db      	ldr	r3, [r3, #12]
 81069ac:	68db      	ldr	r3, [r3, #12]
 81069ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 81069b0:	693b      	ldr	r3, [r7, #16]
 81069b2:	2b00      	cmp	r3, #0
 81069b4:	d10b      	bne.n	81069ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 81069b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81069ba:	f383 8811 	msr	BASEPRI, r3
 81069be:	f3bf 8f6f 	isb	sy
 81069c2:	f3bf 8f4f 	dsb	sy
 81069c6:	60fb      	str	r3, [r7, #12]
}
 81069c8:	bf00      	nop
 81069ca:	bf00      	nop
 81069cc:	e7fd      	b.n	81069ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 81069ce:	693b      	ldr	r3, [r7, #16]
 81069d0:	3318      	adds	r3, #24
 81069d2:	4618      	mov	r0, r3
 81069d4:	f7fd ff74 	bl	81048c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81069d8:	4b1d      	ldr	r3, [pc, #116]	@ (8106a50 <xTaskRemoveFromEventList+0xb0>)
 81069da:	681b      	ldr	r3, [r3, #0]
 81069dc:	2b00      	cmp	r3, #0
 81069de:	d11d      	bne.n	8106a1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81069e0:	693b      	ldr	r3, [r7, #16]
 81069e2:	3304      	adds	r3, #4
 81069e4:	4618      	mov	r0, r3
 81069e6:	f7fd ff6b 	bl	81048c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81069ea:	693b      	ldr	r3, [r7, #16]
 81069ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81069ee:	4b19      	ldr	r3, [pc, #100]	@ (8106a54 <xTaskRemoveFromEventList+0xb4>)
 81069f0:	681b      	ldr	r3, [r3, #0]
 81069f2:	429a      	cmp	r2, r3
 81069f4:	d903      	bls.n	81069fe <xTaskRemoveFromEventList+0x5e>
 81069f6:	693b      	ldr	r3, [r7, #16]
 81069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069fa:	4a16      	ldr	r2, [pc, #88]	@ (8106a54 <xTaskRemoveFromEventList+0xb4>)
 81069fc:	6013      	str	r3, [r2, #0]
 81069fe:	693b      	ldr	r3, [r7, #16]
 8106a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106a02:	4613      	mov	r3, r2
 8106a04:	009b      	lsls	r3, r3, #2
 8106a06:	4413      	add	r3, r2
 8106a08:	009b      	lsls	r3, r3, #2
 8106a0a:	4a13      	ldr	r2, [pc, #76]	@ (8106a58 <xTaskRemoveFromEventList+0xb8>)
 8106a0c:	441a      	add	r2, r3
 8106a0e:	693b      	ldr	r3, [r7, #16]
 8106a10:	3304      	adds	r3, #4
 8106a12:	4619      	mov	r1, r3
 8106a14:	4610      	mov	r0, r2
 8106a16:	f7fd fef6 	bl	8104806 <vListInsertEnd>
 8106a1a:	e005      	b.n	8106a28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8106a1c:	693b      	ldr	r3, [r7, #16]
 8106a1e:	3318      	adds	r3, #24
 8106a20:	4619      	mov	r1, r3
 8106a22:	480e      	ldr	r0, [pc, #56]	@ (8106a5c <xTaskRemoveFromEventList+0xbc>)
 8106a24:	f7fd feef 	bl	8104806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8106a28:	693b      	ldr	r3, [r7, #16]
 8106a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8106a60 <xTaskRemoveFromEventList+0xc0>)
 8106a2e:	681b      	ldr	r3, [r3, #0]
 8106a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106a32:	429a      	cmp	r2, r3
 8106a34:	d905      	bls.n	8106a42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8106a36:	2301      	movs	r3, #1
 8106a38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8106a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8106a64 <xTaskRemoveFromEventList+0xc4>)
 8106a3c:	2201      	movs	r2, #1
 8106a3e:	601a      	str	r2, [r3, #0]
 8106a40:	e001      	b.n	8106a46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8106a42:	2300      	movs	r3, #0
 8106a44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8106a46:	697b      	ldr	r3, [r7, #20]
}
 8106a48:	4618      	mov	r0, r3
 8106a4a:	3718      	adds	r7, #24
 8106a4c:	46bd      	mov	sp, r7
 8106a4e:	bd80      	pop	{r7, pc}
 8106a50:	100049a0 	.word	0x100049a0
 8106a54:	10004980 	.word	0x10004980
 8106a58:	100044a8 	.word	0x100044a8
 8106a5c:	10004938 	.word	0x10004938
 8106a60:	100044a4 	.word	0x100044a4
 8106a64:	1000498c 	.word	0x1000498c

08106a68 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8106a68:	b580      	push	{r7, lr}
 8106a6a:	b084      	sub	sp, #16
 8106a6c:	af00      	add	r7, sp, #0
 8106a6e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	2b00      	cmp	r3, #0
 8106a74:	d10b      	bne.n	8106a8e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8106a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106a7a:	f383 8811 	msr	BASEPRI, r3
 8106a7e:	f3bf 8f6f 	isb	sy
 8106a82:	f3bf 8f4f 	dsb	sy
 8106a86:	60fb      	str	r3, [r7, #12]
}
 8106a88:	bf00      	nop
 8106a8a:	bf00      	nop
 8106a8c:	e7fd      	b.n	8106a8a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8106a8e:	f7fe f873 	bl	8104b78 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8106a92:	4b07      	ldr	r3, [pc, #28]	@ (8106ab0 <vTaskSetTimeOutState+0x48>)
 8106a94:	681a      	ldr	r2, [r3, #0]
 8106a96:	687b      	ldr	r3, [r7, #4]
 8106a98:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8106a9a:	4b06      	ldr	r3, [pc, #24]	@ (8106ab4 <vTaskSetTimeOutState+0x4c>)
 8106a9c:	681a      	ldr	r2, [r3, #0]
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8106aa2:	f7fe f89b 	bl	8104bdc <vPortExitCritical>
}
 8106aa6:	bf00      	nop
 8106aa8:	3710      	adds	r7, #16
 8106aaa:	46bd      	mov	sp, r7
 8106aac:	bd80      	pop	{r7, pc}
 8106aae:	bf00      	nop
 8106ab0:	10004990 	.word	0x10004990
 8106ab4:	1000497c 	.word	0x1000497c

08106ab8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8106ab8:	b480      	push	{r7}
 8106aba:	b083      	sub	sp, #12
 8106abc:	af00      	add	r7, sp, #0
 8106abe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8106ac0:	4b06      	ldr	r3, [pc, #24]	@ (8106adc <vTaskInternalSetTimeOutState+0x24>)
 8106ac2:	681a      	ldr	r2, [r3, #0]
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8106ac8:	4b05      	ldr	r3, [pc, #20]	@ (8106ae0 <vTaskInternalSetTimeOutState+0x28>)
 8106aca:	681a      	ldr	r2, [r3, #0]
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	605a      	str	r2, [r3, #4]
}
 8106ad0:	bf00      	nop
 8106ad2:	370c      	adds	r7, #12
 8106ad4:	46bd      	mov	sp, r7
 8106ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ada:	4770      	bx	lr
 8106adc:	10004990 	.word	0x10004990
 8106ae0:	1000497c 	.word	0x1000497c

08106ae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8106ae4:	b580      	push	{r7, lr}
 8106ae6:	b088      	sub	sp, #32
 8106ae8:	af00      	add	r7, sp, #0
 8106aea:	6078      	str	r0, [r7, #4]
 8106aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8106aee:	687b      	ldr	r3, [r7, #4]
 8106af0:	2b00      	cmp	r3, #0
 8106af2:	d10b      	bne.n	8106b0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8106af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106af8:	f383 8811 	msr	BASEPRI, r3
 8106afc:	f3bf 8f6f 	isb	sy
 8106b00:	f3bf 8f4f 	dsb	sy
 8106b04:	613b      	str	r3, [r7, #16]
}
 8106b06:	bf00      	nop
 8106b08:	bf00      	nop
 8106b0a:	e7fd      	b.n	8106b08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8106b0c:	683b      	ldr	r3, [r7, #0]
 8106b0e:	2b00      	cmp	r3, #0
 8106b10:	d10b      	bne.n	8106b2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8106b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b16:	f383 8811 	msr	BASEPRI, r3
 8106b1a:	f3bf 8f6f 	isb	sy
 8106b1e:	f3bf 8f4f 	dsb	sy
 8106b22:	60fb      	str	r3, [r7, #12]
}
 8106b24:	bf00      	nop
 8106b26:	bf00      	nop
 8106b28:	e7fd      	b.n	8106b26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8106b2a:	f7fe f825 	bl	8104b78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8106b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8106ba4 <xTaskCheckForTimeOut+0xc0>)
 8106b30:	681b      	ldr	r3, [r3, #0]
 8106b32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	685b      	ldr	r3, [r3, #4]
 8106b38:	69ba      	ldr	r2, [r7, #24]
 8106b3a:	1ad3      	subs	r3, r2, r3
 8106b3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8106b3e:	683b      	ldr	r3, [r7, #0]
 8106b40:	681b      	ldr	r3, [r3, #0]
 8106b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106b46:	d102      	bne.n	8106b4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8106b48:	2300      	movs	r3, #0
 8106b4a:	61fb      	str	r3, [r7, #28]
 8106b4c:	e023      	b.n	8106b96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	681a      	ldr	r2, [r3, #0]
 8106b52:	4b15      	ldr	r3, [pc, #84]	@ (8106ba8 <xTaskCheckForTimeOut+0xc4>)
 8106b54:	681b      	ldr	r3, [r3, #0]
 8106b56:	429a      	cmp	r2, r3
 8106b58:	d007      	beq.n	8106b6a <xTaskCheckForTimeOut+0x86>
 8106b5a:	687b      	ldr	r3, [r7, #4]
 8106b5c:	685b      	ldr	r3, [r3, #4]
 8106b5e:	69ba      	ldr	r2, [r7, #24]
 8106b60:	429a      	cmp	r2, r3
 8106b62:	d302      	bcc.n	8106b6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8106b64:	2301      	movs	r3, #1
 8106b66:	61fb      	str	r3, [r7, #28]
 8106b68:	e015      	b.n	8106b96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8106b6a:	683b      	ldr	r3, [r7, #0]
 8106b6c:	681b      	ldr	r3, [r3, #0]
 8106b6e:	697a      	ldr	r2, [r7, #20]
 8106b70:	429a      	cmp	r2, r3
 8106b72:	d20b      	bcs.n	8106b8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8106b74:	683b      	ldr	r3, [r7, #0]
 8106b76:	681a      	ldr	r2, [r3, #0]
 8106b78:	697b      	ldr	r3, [r7, #20]
 8106b7a:	1ad2      	subs	r2, r2, r3
 8106b7c:	683b      	ldr	r3, [r7, #0]
 8106b7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8106b80:	6878      	ldr	r0, [r7, #4]
 8106b82:	f7ff ff99 	bl	8106ab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8106b86:	2300      	movs	r3, #0
 8106b88:	61fb      	str	r3, [r7, #28]
 8106b8a:	e004      	b.n	8106b96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8106b8c:	683b      	ldr	r3, [r7, #0]
 8106b8e:	2200      	movs	r2, #0
 8106b90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8106b92:	2301      	movs	r3, #1
 8106b94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8106b96:	f7fe f821 	bl	8104bdc <vPortExitCritical>

	return xReturn;
 8106b9a:	69fb      	ldr	r3, [r7, #28]
}
 8106b9c:	4618      	mov	r0, r3
 8106b9e:	3720      	adds	r7, #32
 8106ba0:	46bd      	mov	sp, r7
 8106ba2:	bd80      	pop	{r7, pc}
 8106ba4:	1000497c 	.word	0x1000497c
 8106ba8:	10004990 	.word	0x10004990

08106bac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8106bac:	b480      	push	{r7}
 8106bae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8106bb0:	4b03      	ldr	r3, [pc, #12]	@ (8106bc0 <vTaskMissedYield+0x14>)
 8106bb2:	2201      	movs	r2, #1
 8106bb4:	601a      	str	r2, [r3, #0]
}
 8106bb6:	bf00      	nop
 8106bb8:	46bd      	mov	sp, r7
 8106bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bbe:	4770      	bx	lr
 8106bc0:	1000498c 	.word	0x1000498c

08106bc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8106bc4:	b580      	push	{r7, lr}
 8106bc6:	b082      	sub	sp, #8
 8106bc8:	af00      	add	r7, sp, #0
 8106bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8106bcc:	f000 f852 	bl	8106c74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8106bd0:	4b06      	ldr	r3, [pc, #24]	@ (8106bec <prvIdleTask+0x28>)
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	2b01      	cmp	r3, #1
 8106bd6:	d9f9      	bls.n	8106bcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8106bd8:	4b05      	ldr	r3, [pc, #20]	@ (8106bf0 <prvIdleTask+0x2c>)
 8106bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106bde:	601a      	str	r2, [r3, #0]
 8106be0:	f3bf 8f4f 	dsb	sy
 8106be4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8106be8:	e7f0      	b.n	8106bcc <prvIdleTask+0x8>
 8106bea:	bf00      	nop
 8106bec:	100044a8 	.word	0x100044a8
 8106bf0:	e000ed04 	.word	0xe000ed04

08106bf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8106bf4:	b580      	push	{r7, lr}
 8106bf6:	b082      	sub	sp, #8
 8106bf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8106bfa:	2300      	movs	r3, #0
 8106bfc:	607b      	str	r3, [r7, #4]
 8106bfe:	e00c      	b.n	8106c1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8106c00:	687a      	ldr	r2, [r7, #4]
 8106c02:	4613      	mov	r3, r2
 8106c04:	009b      	lsls	r3, r3, #2
 8106c06:	4413      	add	r3, r2
 8106c08:	009b      	lsls	r3, r3, #2
 8106c0a:	4a12      	ldr	r2, [pc, #72]	@ (8106c54 <prvInitialiseTaskLists+0x60>)
 8106c0c:	4413      	add	r3, r2
 8106c0e:	4618      	mov	r0, r3
 8106c10:	f7fd fdcc 	bl	81047ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8106c14:	687b      	ldr	r3, [r7, #4]
 8106c16:	3301      	adds	r3, #1
 8106c18:	607b      	str	r3, [r7, #4]
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	2b37      	cmp	r3, #55	@ 0x37
 8106c1e:	d9ef      	bls.n	8106c00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8106c20:	480d      	ldr	r0, [pc, #52]	@ (8106c58 <prvInitialiseTaskLists+0x64>)
 8106c22:	f7fd fdc3 	bl	81047ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8106c26:	480d      	ldr	r0, [pc, #52]	@ (8106c5c <prvInitialiseTaskLists+0x68>)
 8106c28:	f7fd fdc0 	bl	81047ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8106c2c:	480c      	ldr	r0, [pc, #48]	@ (8106c60 <prvInitialiseTaskLists+0x6c>)
 8106c2e:	f7fd fdbd 	bl	81047ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8106c32:	480c      	ldr	r0, [pc, #48]	@ (8106c64 <prvInitialiseTaskLists+0x70>)
 8106c34:	f7fd fdba 	bl	81047ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8106c38:	480b      	ldr	r0, [pc, #44]	@ (8106c68 <prvInitialiseTaskLists+0x74>)
 8106c3a:	f7fd fdb7 	bl	81047ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8106c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8106c6c <prvInitialiseTaskLists+0x78>)
 8106c40:	4a05      	ldr	r2, [pc, #20]	@ (8106c58 <prvInitialiseTaskLists+0x64>)
 8106c42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8106c44:	4b0a      	ldr	r3, [pc, #40]	@ (8106c70 <prvInitialiseTaskLists+0x7c>)
 8106c46:	4a05      	ldr	r2, [pc, #20]	@ (8106c5c <prvInitialiseTaskLists+0x68>)
 8106c48:	601a      	str	r2, [r3, #0]
}
 8106c4a:	bf00      	nop
 8106c4c:	3708      	adds	r7, #8
 8106c4e:	46bd      	mov	sp, r7
 8106c50:	bd80      	pop	{r7, pc}
 8106c52:	bf00      	nop
 8106c54:	100044a8 	.word	0x100044a8
 8106c58:	10004908 	.word	0x10004908
 8106c5c:	1000491c 	.word	0x1000491c
 8106c60:	10004938 	.word	0x10004938
 8106c64:	1000494c 	.word	0x1000494c
 8106c68:	10004964 	.word	0x10004964
 8106c6c:	10004930 	.word	0x10004930
 8106c70:	10004934 	.word	0x10004934

08106c74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8106c74:	b580      	push	{r7, lr}
 8106c76:	b082      	sub	sp, #8
 8106c78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8106c7a:	e019      	b.n	8106cb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8106c7c:	f7fd ff7c 	bl	8104b78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106c80:	4b10      	ldr	r3, [pc, #64]	@ (8106cc4 <prvCheckTasksWaitingTermination+0x50>)
 8106c82:	68db      	ldr	r3, [r3, #12]
 8106c84:	68db      	ldr	r3, [r3, #12]
 8106c86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	3304      	adds	r3, #4
 8106c8c:	4618      	mov	r0, r3
 8106c8e:	f7fd fe17 	bl	81048c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8106c92:	4b0d      	ldr	r3, [pc, #52]	@ (8106cc8 <prvCheckTasksWaitingTermination+0x54>)
 8106c94:	681b      	ldr	r3, [r3, #0]
 8106c96:	3b01      	subs	r3, #1
 8106c98:	4a0b      	ldr	r2, [pc, #44]	@ (8106cc8 <prvCheckTasksWaitingTermination+0x54>)
 8106c9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8106c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8106ccc <prvCheckTasksWaitingTermination+0x58>)
 8106c9e:	681b      	ldr	r3, [r3, #0]
 8106ca0:	3b01      	subs	r3, #1
 8106ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8106ccc <prvCheckTasksWaitingTermination+0x58>)
 8106ca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8106ca6:	f7fd ff99 	bl	8104bdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8106caa:	6878      	ldr	r0, [r7, #4]
 8106cac:	f000 f810 	bl	8106cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8106cb0:	4b06      	ldr	r3, [pc, #24]	@ (8106ccc <prvCheckTasksWaitingTermination+0x58>)
 8106cb2:	681b      	ldr	r3, [r3, #0]
 8106cb4:	2b00      	cmp	r3, #0
 8106cb6:	d1e1      	bne.n	8106c7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8106cb8:	bf00      	nop
 8106cba:	bf00      	nop
 8106cbc:	3708      	adds	r7, #8
 8106cbe:	46bd      	mov	sp, r7
 8106cc0:	bd80      	pop	{r7, pc}
 8106cc2:	bf00      	nop
 8106cc4:	1000494c 	.word	0x1000494c
 8106cc8:	10004978 	.word	0x10004978
 8106ccc:	10004960 	.word	0x10004960

08106cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8106cd0:	b580      	push	{r7, lr}
 8106cd2:	b084      	sub	sp, #16
 8106cd4:	af00      	add	r7, sp, #0
 8106cd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8106cd8:	687b      	ldr	r3, [r7, #4]
 8106cda:	3354      	adds	r3, #84	@ 0x54
 8106cdc:	4618      	mov	r0, r3
 8106cde:	f001 f803 	bl	8107ce8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106ce8:	2b00      	cmp	r3, #0
 8106cea:	d108      	bne.n	8106cfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106cf0:	4618      	mov	r0, r3
 8106cf2:	f7fd fc3b 	bl	810456c <vPortFree>
				vPortFree( pxTCB );
 8106cf6:	6878      	ldr	r0, [r7, #4]
 8106cf8:	f7fd fc38 	bl	810456c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8106cfc:	e019      	b.n	8106d32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106d04:	2b01      	cmp	r3, #1
 8106d06:	d103      	bne.n	8106d10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8106d08:	6878      	ldr	r0, [r7, #4]
 8106d0a:	f7fd fc2f 	bl	810456c <vPortFree>
	}
 8106d0e:	e010      	b.n	8106d32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106d16:	2b02      	cmp	r3, #2
 8106d18:	d00b      	beq.n	8106d32 <prvDeleteTCB+0x62>
	__asm volatile
 8106d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106d1e:	f383 8811 	msr	BASEPRI, r3
 8106d22:	f3bf 8f6f 	isb	sy
 8106d26:	f3bf 8f4f 	dsb	sy
 8106d2a:	60fb      	str	r3, [r7, #12]
}
 8106d2c:	bf00      	nop
 8106d2e:	bf00      	nop
 8106d30:	e7fd      	b.n	8106d2e <prvDeleteTCB+0x5e>
	}
 8106d32:	bf00      	nop
 8106d34:	3710      	adds	r7, #16
 8106d36:	46bd      	mov	sp, r7
 8106d38:	bd80      	pop	{r7, pc}
	...

08106d3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8106d3c:	b480      	push	{r7}
 8106d3e:	b083      	sub	sp, #12
 8106d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106d42:	4b0c      	ldr	r3, [pc, #48]	@ (8106d74 <prvResetNextTaskUnblockTime+0x38>)
 8106d44:	681b      	ldr	r3, [r3, #0]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	2b00      	cmp	r3, #0
 8106d4a:	d104      	bne.n	8106d56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8106d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8106d78 <prvResetNextTaskUnblockTime+0x3c>)
 8106d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8106d52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8106d54:	e008      	b.n	8106d68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106d56:	4b07      	ldr	r3, [pc, #28]	@ (8106d74 <prvResetNextTaskUnblockTime+0x38>)
 8106d58:	681b      	ldr	r3, [r3, #0]
 8106d5a:	68db      	ldr	r3, [r3, #12]
 8106d5c:	68db      	ldr	r3, [r3, #12]
 8106d5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	685b      	ldr	r3, [r3, #4]
 8106d64:	4a04      	ldr	r2, [pc, #16]	@ (8106d78 <prvResetNextTaskUnblockTime+0x3c>)
 8106d66:	6013      	str	r3, [r2, #0]
}
 8106d68:	bf00      	nop
 8106d6a:	370c      	adds	r7, #12
 8106d6c:	46bd      	mov	sp, r7
 8106d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d72:	4770      	bx	lr
 8106d74:	10004930 	.word	0x10004930
 8106d78:	10004998 	.word	0x10004998

08106d7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8106d7c:	b480      	push	{r7}
 8106d7e:	b083      	sub	sp, #12
 8106d80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8106d82:	4b05      	ldr	r3, [pc, #20]	@ (8106d98 <xTaskGetCurrentTaskHandle+0x1c>)
 8106d84:	681b      	ldr	r3, [r3, #0]
 8106d86:	607b      	str	r3, [r7, #4]

		return xReturn;
 8106d88:	687b      	ldr	r3, [r7, #4]
	}
 8106d8a:	4618      	mov	r0, r3
 8106d8c:	370c      	adds	r7, #12
 8106d8e:	46bd      	mov	sp, r7
 8106d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d94:	4770      	bx	lr
 8106d96:	bf00      	nop
 8106d98:	100044a4 	.word	0x100044a4

08106d9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8106d9c:	b480      	push	{r7}
 8106d9e:	b083      	sub	sp, #12
 8106da0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8106da2:	4b0b      	ldr	r3, [pc, #44]	@ (8106dd0 <xTaskGetSchedulerState+0x34>)
 8106da4:	681b      	ldr	r3, [r3, #0]
 8106da6:	2b00      	cmp	r3, #0
 8106da8:	d102      	bne.n	8106db0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8106daa:	2301      	movs	r3, #1
 8106dac:	607b      	str	r3, [r7, #4]
 8106dae:	e008      	b.n	8106dc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8106db0:	4b08      	ldr	r3, [pc, #32]	@ (8106dd4 <xTaskGetSchedulerState+0x38>)
 8106db2:	681b      	ldr	r3, [r3, #0]
 8106db4:	2b00      	cmp	r3, #0
 8106db6:	d102      	bne.n	8106dbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8106db8:	2302      	movs	r3, #2
 8106dba:	607b      	str	r3, [r7, #4]
 8106dbc:	e001      	b.n	8106dc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8106dbe:	2300      	movs	r3, #0
 8106dc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8106dc2:	687b      	ldr	r3, [r7, #4]
	}
 8106dc4:	4618      	mov	r0, r3
 8106dc6:	370c      	adds	r7, #12
 8106dc8:	46bd      	mov	sp, r7
 8106dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dce:	4770      	bx	lr
 8106dd0:	10004984 	.word	0x10004984
 8106dd4:	100049a0 	.word	0x100049a0

08106dd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8106dd8:	b580      	push	{r7, lr}
 8106dda:	b086      	sub	sp, #24
 8106ddc:	af00      	add	r7, sp, #0
 8106dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8106de4:	2300      	movs	r3, #0
 8106de6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	2b00      	cmp	r3, #0
 8106dec:	d058      	beq.n	8106ea0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8106dee:	4b2f      	ldr	r3, [pc, #188]	@ (8106eac <xTaskPriorityDisinherit+0xd4>)
 8106df0:	681b      	ldr	r3, [r3, #0]
 8106df2:	693a      	ldr	r2, [r7, #16]
 8106df4:	429a      	cmp	r2, r3
 8106df6:	d00b      	beq.n	8106e10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8106df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106dfc:	f383 8811 	msr	BASEPRI, r3
 8106e00:	f3bf 8f6f 	isb	sy
 8106e04:	f3bf 8f4f 	dsb	sy
 8106e08:	60fb      	str	r3, [r7, #12]
}
 8106e0a:	bf00      	nop
 8106e0c:	bf00      	nop
 8106e0e:	e7fd      	b.n	8106e0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8106e10:	693b      	ldr	r3, [r7, #16]
 8106e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106e14:	2b00      	cmp	r3, #0
 8106e16:	d10b      	bne.n	8106e30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8106e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106e1c:	f383 8811 	msr	BASEPRI, r3
 8106e20:	f3bf 8f6f 	isb	sy
 8106e24:	f3bf 8f4f 	dsb	sy
 8106e28:	60bb      	str	r3, [r7, #8]
}
 8106e2a:	bf00      	nop
 8106e2c:	bf00      	nop
 8106e2e:	e7fd      	b.n	8106e2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8106e30:	693b      	ldr	r3, [r7, #16]
 8106e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106e34:	1e5a      	subs	r2, r3, #1
 8106e36:	693b      	ldr	r3, [r7, #16]
 8106e38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8106e3a:	693b      	ldr	r3, [r7, #16]
 8106e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106e3e:	693b      	ldr	r3, [r7, #16]
 8106e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106e42:	429a      	cmp	r2, r3
 8106e44:	d02c      	beq.n	8106ea0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8106e46:	693b      	ldr	r3, [r7, #16]
 8106e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106e4a:	2b00      	cmp	r3, #0
 8106e4c:	d128      	bne.n	8106ea0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8106e4e:	693b      	ldr	r3, [r7, #16]
 8106e50:	3304      	adds	r3, #4
 8106e52:	4618      	mov	r0, r3
 8106e54:	f7fd fd34 	bl	81048c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8106e58:	693b      	ldr	r3, [r7, #16]
 8106e5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8106e5c:	693b      	ldr	r3, [r7, #16]
 8106e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106e60:	693b      	ldr	r3, [r7, #16]
 8106e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8106e68:	693b      	ldr	r3, [r7, #16]
 8106e6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8106e6c:	693b      	ldr	r3, [r7, #16]
 8106e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106e70:	4b0f      	ldr	r3, [pc, #60]	@ (8106eb0 <xTaskPriorityDisinherit+0xd8>)
 8106e72:	681b      	ldr	r3, [r3, #0]
 8106e74:	429a      	cmp	r2, r3
 8106e76:	d903      	bls.n	8106e80 <xTaskPriorityDisinherit+0xa8>
 8106e78:	693b      	ldr	r3, [r7, #16]
 8106e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8106eb0 <xTaskPriorityDisinherit+0xd8>)
 8106e7e:	6013      	str	r3, [r2, #0]
 8106e80:	693b      	ldr	r3, [r7, #16]
 8106e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106e84:	4613      	mov	r3, r2
 8106e86:	009b      	lsls	r3, r3, #2
 8106e88:	4413      	add	r3, r2
 8106e8a:	009b      	lsls	r3, r3, #2
 8106e8c:	4a09      	ldr	r2, [pc, #36]	@ (8106eb4 <xTaskPriorityDisinherit+0xdc>)
 8106e8e:	441a      	add	r2, r3
 8106e90:	693b      	ldr	r3, [r7, #16]
 8106e92:	3304      	adds	r3, #4
 8106e94:	4619      	mov	r1, r3
 8106e96:	4610      	mov	r0, r2
 8106e98:	f7fd fcb5 	bl	8104806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8106e9c:	2301      	movs	r3, #1
 8106e9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8106ea0:	697b      	ldr	r3, [r7, #20]
	}
 8106ea2:	4618      	mov	r0, r3
 8106ea4:	3718      	adds	r7, #24
 8106ea6:	46bd      	mov	sp, r7
 8106ea8:	bd80      	pop	{r7, pc}
 8106eaa:	bf00      	nop
 8106eac:	100044a4 	.word	0x100044a4
 8106eb0:	10004980 	.word	0x10004980
 8106eb4:	100044a8 	.word	0x100044a8

08106eb8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8106eb8:	b580      	push	{r7, lr}
 8106eba:	b086      	sub	sp, #24
 8106ebc:	af00      	add	r7, sp, #0
 8106ebe:	60f8      	str	r0, [r7, #12]
 8106ec0:	60b9      	str	r1, [r7, #8]
 8106ec2:	607a      	str	r2, [r7, #4]
 8106ec4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8106ec6:	f7fd fe57 	bl	8104b78 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8106eca:	4b29      	ldr	r3, [pc, #164]	@ (8106f70 <xTaskNotifyWait+0xb8>)
 8106ecc:	681b      	ldr	r3, [r3, #0]
 8106ece:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8106ed2:	b2db      	uxtb	r3, r3
 8106ed4:	2b02      	cmp	r3, #2
 8106ed6:	d01c      	beq.n	8106f12 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8106ed8:	4b25      	ldr	r3, [pc, #148]	@ (8106f70 <xTaskNotifyWait+0xb8>)
 8106eda:	681b      	ldr	r3, [r3, #0]
 8106edc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8106ee0:	68fa      	ldr	r2, [r7, #12]
 8106ee2:	43d2      	mvns	r2, r2
 8106ee4:	400a      	ands	r2, r1
 8106ee6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8106eea:	4b21      	ldr	r3, [pc, #132]	@ (8106f70 <xTaskNotifyWait+0xb8>)
 8106eec:	681b      	ldr	r3, [r3, #0]
 8106eee:	2201      	movs	r2, #1
 8106ef0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8106ef4:	683b      	ldr	r3, [r7, #0]
 8106ef6:	2b00      	cmp	r3, #0
 8106ef8:	d00b      	beq.n	8106f12 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8106efa:	2101      	movs	r1, #1
 8106efc:	6838      	ldr	r0, [r7, #0]
 8106efe:	f000 f947 	bl	8107190 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8106f02:	4b1c      	ldr	r3, [pc, #112]	@ (8106f74 <xTaskNotifyWait+0xbc>)
 8106f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106f08:	601a      	str	r2, [r3, #0]
 8106f0a:	f3bf 8f4f 	dsb	sy
 8106f0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8106f12:	f7fd fe63 	bl	8104bdc <vPortExitCritical>

		taskENTER_CRITICAL();
 8106f16:	f7fd fe2f 	bl	8104b78 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	2b00      	cmp	r3, #0
 8106f1e:	d005      	beq.n	8106f2c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8106f20:	4b13      	ldr	r3, [pc, #76]	@ (8106f70 <xTaskNotifyWait+0xb8>)
 8106f22:	681b      	ldr	r3, [r3, #0]
 8106f24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8106f28:	687b      	ldr	r3, [r7, #4]
 8106f2a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8106f2c:	4b10      	ldr	r3, [pc, #64]	@ (8106f70 <xTaskNotifyWait+0xb8>)
 8106f2e:	681b      	ldr	r3, [r3, #0]
 8106f30:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8106f34:	b2db      	uxtb	r3, r3
 8106f36:	2b02      	cmp	r3, #2
 8106f38:	d002      	beq.n	8106f40 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8106f3a:	2300      	movs	r3, #0
 8106f3c:	617b      	str	r3, [r7, #20]
 8106f3e:	e00a      	b.n	8106f56 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8106f40:	4b0b      	ldr	r3, [pc, #44]	@ (8106f70 <xTaskNotifyWait+0xb8>)
 8106f42:	681b      	ldr	r3, [r3, #0]
 8106f44:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8106f48:	68ba      	ldr	r2, [r7, #8]
 8106f4a:	43d2      	mvns	r2, r2
 8106f4c:	400a      	ands	r2, r1
 8106f4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8106f52:	2301      	movs	r3, #1
 8106f54:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8106f56:	4b06      	ldr	r3, [pc, #24]	@ (8106f70 <xTaskNotifyWait+0xb8>)
 8106f58:	681b      	ldr	r3, [r3, #0]
 8106f5a:	2200      	movs	r2, #0
 8106f5c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8106f60:	f7fd fe3c 	bl	8104bdc <vPortExitCritical>

		return xReturn;
 8106f64:	697b      	ldr	r3, [r7, #20]
	}
 8106f66:	4618      	mov	r0, r3
 8106f68:	3718      	adds	r7, #24
 8106f6a:	46bd      	mov	sp, r7
 8106f6c:	bd80      	pop	{r7, pc}
 8106f6e:	bf00      	nop
 8106f70:	100044a4 	.word	0x100044a4
 8106f74:	e000ed04 	.word	0xe000ed04

08106f78 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8106f78:	b580      	push	{r7, lr}
 8106f7a:	b08e      	sub	sp, #56	@ 0x38
 8106f7c:	af00      	add	r7, sp, #0
 8106f7e:	60f8      	str	r0, [r7, #12]
 8106f80:	60b9      	str	r1, [r7, #8]
 8106f82:	603b      	str	r3, [r7, #0]
 8106f84:	4613      	mov	r3, r2
 8106f86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8106f88:	2301      	movs	r3, #1
 8106f8a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8106f8c:	68fb      	ldr	r3, [r7, #12]
 8106f8e:	2b00      	cmp	r3, #0
 8106f90:	d10b      	bne.n	8106faa <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8106f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106f96:	f383 8811 	msr	BASEPRI, r3
 8106f9a:	f3bf 8f6f 	isb	sy
 8106f9e:	f3bf 8f4f 	dsb	sy
 8106fa2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106fa4:	bf00      	nop
 8106fa6:	bf00      	nop
 8106fa8:	e7fd      	b.n	8106fa6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106faa:	f7fd fec5 	bl	8104d38 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8106fae:	68fb      	ldr	r3, [r7, #12]
 8106fb0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8106fb2:	f3ef 8211 	mrs	r2, BASEPRI
 8106fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106fba:	f383 8811 	msr	BASEPRI, r3
 8106fbe:	f3bf 8f6f 	isb	sy
 8106fc2:	f3bf 8f4f 	dsb	sy
 8106fc6:	623a      	str	r2, [r7, #32]
 8106fc8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8106fca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8106fce:	683b      	ldr	r3, [r7, #0]
 8106fd0:	2b00      	cmp	r3, #0
 8106fd2:	d004      	beq.n	8106fde <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8106fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8106fda:	683b      	ldr	r3, [r7, #0]
 8106fdc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8106fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fe0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8106fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8106fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fea:	2202      	movs	r2, #2
 8106fec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8106ff0:	79fb      	ldrb	r3, [r7, #7]
 8106ff2:	2b04      	cmp	r3, #4
 8106ff4:	d82e      	bhi.n	8107054 <xTaskGenericNotifyFromISR+0xdc>
 8106ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8106ffc <xTaskGenericNotifyFromISR+0x84>)
 8106ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ffc:	08107079 	.word	0x08107079
 8107000:	08107011 	.word	0x08107011
 8107004:	08107023 	.word	0x08107023
 8107008:	08107033 	.word	0x08107033
 810700c:	0810703d 	.word	0x0810703d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8107010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107012:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8107016:	68bb      	ldr	r3, [r7, #8]
 8107018:	431a      	orrs	r2, r3
 810701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810701c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8107020:	e02d      	b.n	810707e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8107022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107024:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107028:	1c5a      	adds	r2, r3, #1
 810702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810702c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8107030:	e025      	b.n	810707e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8107032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107034:	68ba      	ldr	r2, [r7, #8]
 8107036:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 810703a:	e020      	b.n	810707e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810703c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8107040:	2b02      	cmp	r3, #2
 8107042:	d004      	beq.n	810704e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8107044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107046:	68ba      	ldr	r2, [r7, #8]
 8107048:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810704c:	e017      	b.n	810707e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 810704e:	2300      	movs	r3, #0
 8107050:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8107052:	e014      	b.n	810707e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8107054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810705e:	d00d      	beq.n	810707c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8107060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107064:	f383 8811 	msr	BASEPRI, r3
 8107068:	f3bf 8f6f 	isb	sy
 810706c:	f3bf 8f4f 	dsb	sy
 8107070:	61bb      	str	r3, [r7, #24]
}
 8107072:	bf00      	nop
 8107074:	bf00      	nop
 8107076:	e7fd      	b.n	8107074 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8107078:	bf00      	nop
 810707a:	e000      	b.n	810707e <xTaskGenericNotifyFromISR+0x106>
					break;
 810707c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810707e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8107082:	2b01      	cmp	r3, #1
 8107084:	d147      	bne.n	8107116 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8107086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810708a:	2b00      	cmp	r3, #0
 810708c:	d00b      	beq.n	81070a6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 810708e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107092:	f383 8811 	msr	BASEPRI, r3
 8107096:	f3bf 8f6f 	isb	sy
 810709a:	f3bf 8f4f 	dsb	sy
 810709e:	617b      	str	r3, [r7, #20]
}
 81070a0:	bf00      	nop
 81070a2:	bf00      	nop
 81070a4:	e7fd      	b.n	81070a2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81070a6:	4b21      	ldr	r3, [pc, #132]	@ (810712c <xTaskGenericNotifyFromISR+0x1b4>)
 81070a8:	681b      	ldr	r3, [r3, #0]
 81070aa:	2b00      	cmp	r3, #0
 81070ac:	d11d      	bne.n	81070ea <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070b0:	3304      	adds	r3, #4
 81070b2:	4618      	mov	r0, r3
 81070b4:	f7fd fc04 	bl	81048c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81070bc:	4b1c      	ldr	r3, [pc, #112]	@ (8107130 <xTaskGenericNotifyFromISR+0x1b8>)
 81070be:	681b      	ldr	r3, [r3, #0]
 81070c0:	429a      	cmp	r2, r3
 81070c2:	d903      	bls.n	81070cc <xTaskGenericNotifyFromISR+0x154>
 81070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070c8:	4a19      	ldr	r2, [pc, #100]	@ (8107130 <xTaskGenericNotifyFromISR+0x1b8>)
 81070ca:	6013      	str	r3, [r2, #0]
 81070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81070d0:	4613      	mov	r3, r2
 81070d2:	009b      	lsls	r3, r3, #2
 81070d4:	4413      	add	r3, r2
 81070d6:	009b      	lsls	r3, r3, #2
 81070d8:	4a16      	ldr	r2, [pc, #88]	@ (8107134 <xTaskGenericNotifyFromISR+0x1bc>)
 81070da:	441a      	add	r2, r3
 81070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070de:	3304      	adds	r3, #4
 81070e0:	4619      	mov	r1, r3
 81070e2:	4610      	mov	r0, r2
 81070e4:	f7fd fb8f 	bl	8104806 <vListInsertEnd>
 81070e8:	e005      	b.n	81070f6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 81070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070ec:	3318      	adds	r3, #24
 81070ee:	4619      	mov	r1, r3
 81070f0:	4811      	ldr	r0, [pc, #68]	@ (8107138 <xTaskGenericNotifyFromISR+0x1c0>)
 81070f2:	f7fd fb88 	bl	8104806 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 81070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81070fa:	4b10      	ldr	r3, [pc, #64]	@ (810713c <xTaskGenericNotifyFromISR+0x1c4>)
 81070fc:	681b      	ldr	r3, [r3, #0]
 81070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107100:	429a      	cmp	r2, r3
 8107102:	d908      	bls.n	8107116 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8107104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107106:	2b00      	cmp	r3, #0
 8107108:	d002      	beq.n	8107110 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 810710a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810710c:	2201      	movs	r2, #1
 810710e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8107110:	4b0b      	ldr	r3, [pc, #44]	@ (8107140 <xTaskGenericNotifyFromISR+0x1c8>)
 8107112:	2201      	movs	r2, #1
 8107114:	601a      	str	r2, [r3, #0]
 8107116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107118:	613b      	str	r3, [r7, #16]
	__asm volatile
 810711a:	693b      	ldr	r3, [r7, #16]
 810711c:	f383 8811 	msr	BASEPRI, r3
}
 8107120:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8107122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8107124:	4618      	mov	r0, r3
 8107126:	3738      	adds	r7, #56	@ 0x38
 8107128:	46bd      	mov	sp, r7
 810712a:	bd80      	pop	{r7, pc}
 810712c:	100049a0 	.word	0x100049a0
 8107130:	10004980 	.word	0x10004980
 8107134:	100044a8 	.word	0x100044a8
 8107138:	10004938 	.word	0x10004938
 810713c:	100044a4 	.word	0x100044a4
 8107140:	1000498c 	.word	0x1000498c

08107144 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8107144:	b580      	push	{r7, lr}
 8107146:	b084      	sub	sp, #16
 8107148:	af00      	add	r7, sp, #0
 810714a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	2b00      	cmp	r3, #0
 8107150:	d102      	bne.n	8107158 <xTaskNotifyStateClear+0x14>
 8107152:	4b0e      	ldr	r3, [pc, #56]	@ (810718c <xTaskNotifyStateClear+0x48>)
 8107154:	681b      	ldr	r3, [r3, #0]
 8107156:	e000      	b.n	810715a <xTaskNotifyStateClear+0x16>
 8107158:	687b      	ldr	r3, [r7, #4]
 810715a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 810715c:	f7fd fd0c 	bl	8104b78 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8107160:	68bb      	ldr	r3, [r7, #8]
 8107162:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8107166:	b2db      	uxtb	r3, r3
 8107168:	2b02      	cmp	r3, #2
 810716a:	d106      	bne.n	810717a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810716c:	68bb      	ldr	r3, [r7, #8]
 810716e:	2200      	movs	r2, #0
 8107170:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8107174:	2301      	movs	r3, #1
 8107176:	60fb      	str	r3, [r7, #12]
 8107178:	e001      	b.n	810717e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 810717a:	2300      	movs	r3, #0
 810717c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 810717e:	f7fd fd2d 	bl	8104bdc <vPortExitCritical>

		return xReturn;
 8107182:	68fb      	ldr	r3, [r7, #12]
	}
 8107184:	4618      	mov	r0, r3
 8107186:	3710      	adds	r7, #16
 8107188:	46bd      	mov	sp, r7
 810718a:	bd80      	pop	{r7, pc}
 810718c:	100044a4 	.word	0x100044a4

08107190 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8107190:	b580      	push	{r7, lr}
 8107192:	b084      	sub	sp, #16
 8107194:	af00      	add	r7, sp, #0
 8107196:	6078      	str	r0, [r7, #4]
 8107198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810719a:	4b21      	ldr	r3, [pc, #132]	@ (8107220 <prvAddCurrentTaskToDelayedList+0x90>)
 810719c:	681b      	ldr	r3, [r3, #0]
 810719e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81071a0:	4b20      	ldr	r3, [pc, #128]	@ (8107224 <prvAddCurrentTaskToDelayedList+0x94>)
 81071a2:	681b      	ldr	r3, [r3, #0]
 81071a4:	3304      	adds	r3, #4
 81071a6:	4618      	mov	r0, r3
 81071a8:	f7fd fb8a 	bl	81048c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 81071b2:	d10a      	bne.n	81071ca <prvAddCurrentTaskToDelayedList+0x3a>
 81071b4:	683b      	ldr	r3, [r7, #0]
 81071b6:	2b00      	cmp	r3, #0
 81071b8:	d007      	beq.n	81071ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81071ba:	4b1a      	ldr	r3, [pc, #104]	@ (8107224 <prvAddCurrentTaskToDelayedList+0x94>)
 81071bc:	681b      	ldr	r3, [r3, #0]
 81071be:	3304      	adds	r3, #4
 81071c0:	4619      	mov	r1, r3
 81071c2:	4819      	ldr	r0, [pc, #100]	@ (8107228 <prvAddCurrentTaskToDelayedList+0x98>)
 81071c4:	f7fd fb1f 	bl	8104806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81071c8:	e026      	b.n	8107218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81071ca:	68fa      	ldr	r2, [r7, #12]
 81071cc:	687b      	ldr	r3, [r7, #4]
 81071ce:	4413      	add	r3, r2
 81071d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81071d2:	4b14      	ldr	r3, [pc, #80]	@ (8107224 <prvAddCurrentTaskToDelayedList+0x94>)
 81071d4:	681b      	ldr	r3, [r3, #0]
 81071d6:	68ba      	ldr	r2, [r7, #8]
 81071d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81071da:	68ba      	ldr	r2, [r7, #8]
 81071dc:	68fb      	ldr	r3, [r7, #12]
 81071de:	429a      	cmp	r2, r3
 81071e0:	d209      	bcs.n	81071f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81071e2:	4b12      	ldr	r3, [pc, #72]	@ (810722c <prvAddCurrentTaskToDelayedList+0x9c>)
 81071e4:	681a      	ldr	r2, [r3, #0]
 81071e6:	4b0f      	ldr	r3, [pc, #60]	@ (8107224 <prvAddCurrentTaskToDelayedList+0x94>)
 81071e8:	681b      	ldr	r3, [r3, #0]
 81071ea:	3304      	adds	r3, #4
 81071ec:	4619      	mov	r1, r3
 81071ee:	4610      	mov	r0, r2
 81071f0:	f7fd fb2d 	bl	810484e <vListInsert>
}
 81071f4:	e010      	b.n	8107218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81071f6:	4b0e      	ldr	r3, [pc, #56]	@ (8107230 <prvAddCurrentTaskToDelayedList+0xa0>)
 81071f8:	681a      	ldr	r2, [r3, #0]
 81071fa:	4b0a      	ldr	r3, [pc, #40]	@ (8107224 <prvAddCurrentTaskToDelayedList+0x94>)
 81071fc:	681b      	ldr	r3, [r3, #0]
 81071fe:	3304      	adds	r3, #4
 8107200:	4619      	mov	r1, r3
 8107202:	4610      	mov	r0, r2
 8107204:	f7fd fb23 	bl	810484e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8107208:	4b0a      	ldr	r3, [pc, #40]	@ (8107234 <prvAddCurrentTaskToDelayedList+0xa4>)
 810720a:	681b      	ldr	r3, [r3, #0]
 810720c:	68ba      	ldr	r2, [r7, #8]
 810720e:	429a      	cmp	r2, r3
 8107210:	d202      	bcs.n	8107218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8107212:	4a08      	ldr	r2, [pc, #32]	@ (8107234 <prvAddCurrentTaskToDelayedList+0xa4>)
 8107214:	68bb      	ldr	r3, [r7, #8]
 8107216:	6013      	str	r3, [r2, #0]
}
 8107218:	bf00      	nop
 810721a:	3710      	adds	r7, #16
 810721c:	46bd      	mov	sp, r7
 810721e:	bd80      	pop	{r7, pc}
 8107220:	1000497c 	.word	0x1000497c
 8107224:	100044a4 	.word	0x100044a4
 8107228:	10004964 	.word	0x10004964
 810722c:	10004934 	.word	0x10004934
 8107230:	10004930 	.word	0x10004930
 8107234:	10004998 	.word	0x10004998

08107238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8107238:	b580      	push	{r7, lr}
 810723a:	b08a      	sub	sp, #40	@ 0x28
 810723c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810723e:	2300      	movs	r3, #0
 8107240:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8107242:	f000 fb13 	bl	810786c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8107246:	4b1d      	ldr	r3, [pc, #116]	@ (81072bc <xTimerCreateTimerTask+0x84>)
 8107248:	681b      	ldr	r3, [r3, #0]
 810724a:	2b00      	cmp	r3, #0
 810724c:	d021      	beq.n	8107292 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810724e:	2300      	movs	r3, #0
 8107250:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8107252:	2300      	movs	r3, #0
 8107254:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8107256:	1d3a      	adds	r2, r7, #4
 8107258:	f107 0108 	add.w	r1, r7, #8
 810725c:	f107 030c 	add.w	r3, r7, #12
 8107260:	4618      	mov	r0, r3
 8107262:	f7fd f89b 	bl	810439c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8107266:	6879      	ldr	r1, [r7, #4]
 8107268:	68bb      	ldr	r3, [r7, #8]
 810726a:	68fa      	ldr	r2, [r7, #12]
 810726c:	9202      	str	r2, [sp, #8]
 810726e:	9301      	str	r3, [sp, #4]
 8107270:	2302      	movs	r3, #2
 8107272:	9300      	str	r3, [sp, #0]
 8107274:	2300      	movs	r3, #0
 8107276:	460a      	mov	r2, r1
 8107278:	4911      	ldr	r1, [pc, #68]	@ (81072c0 <xTimerCreateTimerTask+0x88>)
 810727a:	4812      	ldr	r0, [pc, #72]	@ (81072c4 <xTimerCreateTimerTask+0x8c>)
 810727c:	f7fe fefe 	bl	810607c <xTaskCreateStatic>
 8107280:	4603      	mov	r3, r0
 8107282:	4a11      	ldr	r2, [pc, #68]	@ (81072c8 <xTimerCreateTimerTask+0x90>)
 8107284:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8107286:	4b10      	ldr	r3, [pc, #64]	@ (81072c8 <xTimerCreateTimerTask+0x90>)
 8107288:	681b      	ldr	r3, [r3, #0]
 810728a:	2b00      	cmp	r3, #0
 810728c:	d001      	beq.n	8107292 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810728e:	2301      	movs	r3, #1
 8107290:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8107292:	697b      	ldr	r3, [r7, #20]
 8107294:	2b00      	cmp	r3, #0
 8107296:	d10b      	bne.n	81072b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8107298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810729c:	f383 8811 	msr	BASEPRI, r3
 81072a0:	f3bf 8f6f 	isb	sy
 81072a4:	f3bf 8f4f 	dsb	sy
 81072a8:	613b      	str	r3, [r7, #16]
}
 81072aa:	bf00      	nop
 81072ac:	bf00      	nop
 81072ae:	e7fd      	b.n	81072ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 81072b0:	697b      	ldr	r3, [r7, #20]
}
 81072b2:	4618      	mov	r0, r3
 81072b4:	3718      	adds	r7, #24
 81072b6:	46bd      	mov	sp, r7
 81072b8:	bd80      	pop	{r7, pc}
 81072ba:	bf00      	nop
 81072bc:	100049d4 	.word	0x100049d4
 81072c0:	08107f40 	.word	0x08107f40
 81072c4:	08107405 	.word	0x08107405
 81072c8:	100049d8 	.word	0x100049d8

081072cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81072cc:	b580      	push	{r7, lr}
 81072ce:	b08a      	sub	sp, #40	@ 0x28
 81072d0:	af00      	add	r7, sp, #0
 81072d2:	60f8      	str	r0, [r7, #12]
 81072d4:	60b9      	str	r1, [r7, #8]
 81072d6:	607a      	str	r2, [r7, #4]
 81072d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81072da:	2300      	movs	r3, #0
 81072dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81072de:	68fb      	ldr	r3, [r7, #12]
 81072e0:	2b00      	cmp	r3, #0
 81072e2:	d10b      	bne.n	81072fc <xTimerGenericCommand+0x30>
	__asm volatile
 81072e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81072e8:	f383 8811 	msr	BASEPRI, r3
 81072ec:	f3bf 8f6f 	isb	sy
 81072f0:	f3bf 8f4f 	dsb	sy
 81072f4:	623b      	str	r3, [r7, #32]
}
 81072f6:	bf00      	nop
 81072f8:	bf00      	nop
 81072fa:	e7fd      	b.n	81072f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81072fc:	4b19      	ldr	r3, [pc, #100]	@ (8107364 <xTimerGenericCommand+0x98>)
 81072fe:	681b      	ldr	r3, [r3, #0]
 8107300:	2b00      	cmp	r3, #0
 8107302:	d02a      	beq.n	810735a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8107304:	68bb      	ldr	r3, [r7, #8]
 8107306:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810730c:	68fb      	ldr	r3, [r7, #12]
 810730e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8107310:	68bb      	ldr	r3, [r7, #8]
 8107312:	2b05      	cmp	r3, #5
 8107314:	dc18      	bgt.n	8107348 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8107316:	f7ff fd41 	bl	8106d9c <xTaskGetSchedulerState>
 810731a:	4603      	mov	r3, r0
 810731c:	2b02      	cmp	r3, #2
 810731e:	d109      	bne.n	8107334 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8107320:	4b10      	ldr	r3, [pc, #64]	@ (8107364 <xTimerGenericCommand+0x98>)
 8107322:	6818      	ldr	r0, [r3, #0]
 8107324:	f107 0110 	add.w	r1, r7, #16
 8107328:	2300      	movs	r3, #0
 810732a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810732c:	f7fd fe8c 	bl	8105048 <xQueueGenericSend>
 8107330:	6278      	str	r0, [r7, #36]	@ 0x24
 8107332:	e012      	b.n	810735a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8107334:	4b0b      	ldr	r3, [pc, #44]	@ (8107364 <xTimerGenericCommand+0x98>)
 8107336:	6818      	ldr	r0, [r3, #0]
 8107338:	f107 0110 	add.w	r1, r7, #16
 810733c:	2300      	movs	r3, #0
 810733e:	2200      	movs	r2, #0
 8107340:	f7fd fe82 	bl	8105048 <xQueueGenericSend>
 8107344:	6278      	str	r0, [r7, #36]	@ 0x24
 8107346:	e008      	b.n	810735a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8107348:	4b06      	ldr	r3, [pc, #24]	@ (8107364 <xTimerGenericCommand+0x98>)
 810734a:	6818      	ldr	r0, [r3, #0]
 810734c:	f107 0110 	add.w	r1, r7, #16
 8107350:	2300      	movs	r3, #0
 8107352:	683a      	ldr	r2, [r7, #0]
 8107354:	f7fd ff7a 	bl	810524c <xQueueGenericSendFromISR>
 8107358:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810735c:	4618      	mov	r0, r3
 810735e:	3728      	adds	r7, #40	@ 0x28
 8107360:	46bd      	mov	sp, r7
 8107362:	bd80      	pop	{r7, pc}
 8107364:	100049d4 	.word	0x100049d4

08107368 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8107368:	b580      	push	{r7, lr}
 810736a:	b088      	sub	sp, #32
 810736c:	af02      	add	r7, sp, #8
 810736e:	6078      	str	r0, [r7, #4]
 8107370:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107372:	4b23      	ldr	r3, [pc, #140]	@ (8107400 <prvProcessExpiredTimer+0x98>)
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	68db      	ldr	r3, [r3, #12]
 8107378:	68db      	ldr	r3, [r3, #12]
 810737a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810737c:	697b      	ldr	r3, [r7, #20]
 810737e:	3304      	adds	r3, #4
 8107380:	4618      	mov	r0, r3
 8107382:	f7fd fa9d 	bl	81048c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8107386:	697b      	ldr	r3, [r7, #20]
 8107388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810738c:	f003 0304 	and.w	r3, r3, #4
 8107390:	2b00      	cmp	r3, #0
 8107392:	d023      	beq.n	81073dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8107394:	697b      	ldr	r3, [r7, #20]
 8107396:	699a      	ldr	r2, [r3, #24]
 8107398:	687b      	ldr	r3, [r7, #4]
 810739a:	18d1      	adds	r1, r2, r3
 810739c:	687b      	ldr	r3, [r7, #4]
 810739e:	683a      	ldr	r2, [r7, #0]
 81073a0:	6978      	ldr	r0, [r7, #20]
 81073a2:	f000 f8d5 	bl	8107550 <prvInsertTimerInActiveList>
 81073a6:	4603      	mov	r3, r0
 81073a8:	2b00      	cmp	r3, #0
 81073aa:	d020      	beq.n	81073ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81073ac:	2300      	movs	r3, #0
 81073ae:	9300      	str	r3, [sp, #0]
 81073b0:	2300      	movs	r3, #0
 81073b2:	687a      	ldr	r2, [r7, #4]
 81073b4:	2100      	movs	r1, #0
 81073b6:	6978      	ldr	r0, [r7, #20]
 81073b8:	f7ff ff88 	bl	81072cc <xTimerGenericCommand>
 81073bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81073be:	693b      	ldr	r3, [r7, #16]
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d114      	bne.n	81073ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 81073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81073c8:	f383 8811 	msr	BASEPRI, r3
 81073cc:	f3bf 8f6f 	isb	sy
 81073d0:	f3bf 8f4f 	dsb	sy
 81073d4:	60fb      	str	r3, [r7, #12]
}
 81073d6:	bf00      	nop
 81073d8:	bf00      	nop
 81073da:	e7fd      	b.n	81073d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81073dc:	697b      	ldr	r3, [r7, #20]
 81073de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81073e2:	f023 0301 	bic.w	r3, r3, #1
 81073e6:	b2da      	uxtb	r2, r3
 81073e8:	697b      	ldr	r3, [r7, #20]
 81073ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81073ee:	697b      	ldr	r3, [r7, #20]
 81073f0:	6a1b      	ldr	r3, [r3, #32]
 81073f2:	6978      	ldr	r0, [r7, #20]
 81073f4:	4798      	blx	r3
}
 81073f6:	bf00      	nop
 81073f8:	3718      	adds	r7, #24
 81073fa:	46bd      	mov	sp, r7
 81073fc:	bd80      	pop	{r7, pc}
 81073fe:	bf00      	nop
 8107400:	100049cc 	.word	0x100049cc

08107404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8107404:	b580      	push	{r7, lr}
 8107406:	b084      	sub	sp, #16
 8107408:	af00      	add	r7, sp, #0
 810740a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810740c:	f107 0308 	add.w	r3, r7, #8
 8107410:	4618      	mov	r0, r3
 8107412:	f000 f859 	bl	81074c8 <prvGetNextExpireTime>
 8107416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8107418:	68bb      	ldr	r3, [r7, #8]
 810741a:	4619      	mov	r1, r3
 810741c:	68f8      	ldr	r0, [r7, #12]
 810741e:	f000 f805 	bl	810742c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8107422:	f000 f8d7 	bl	81075d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8107426:	bf00      	nop
 8107428:	e7f0      	b.n	810740c <prvTimerTask+0x8>
	...

0810742c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810742c:	b580      	push	{r7, lr}
 810742e:	b084      	sub	sp, #16
 8107430:	af00      	add	r7, sp, #0
 8107432:	6078      	str	r0, [r7, #4]
 8107434:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8107436:	f7ff f885 	bl	8106544 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810743a:	f107 0308 	add.w	r3, r7, #8
 810743e:	4618      	mov	r0, r3
 8107440:	f000 f866 	bl	8107510 <prvSampleTimeNow>
 8107444:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8107446:	68bb      	ldr	r3, [r7, #8]
 8107448:	2b00      	cmp	r3, #0
 810744a:	d130      	bne.n	81074ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810744c:	683b      	ldr	r3, [r7, #0]
 810744e:	2b00      	cmp	r3, #0
 8107450:	d10a      	bne.n	8107468 <prvProcessTimerOrBlockTask+0x3c>
 8107452:	687a      	ldr	r2, [r7, #4]
 8107454:	68fb      	ldr	r3, [r7, #12]
 8107456:	429a      	cmp	r2, r3
 8107458:	d806      	bhi.n	8107468 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810745a:	f7ff f881 	bl	8106560 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810745e:	68f9      	ldr	r1, [r7, #12]
 8107460:	6878      	ldr	r0, [r7, #4]
 8107462:	f7ff ff81 	bl	8107368 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8107466:	e024      	b.n	81074b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8107468:	683b      	ldr	r3, [r7, #0]
 810746a:	2b00      	cmp	r3, #0
 810746c:	d008      	beq.n	8107480 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810746e:	4b13      	ldr	r3, [pc, #76]	@ (81074bc <prvProcessTimerOrBlockTask+0x90>)
 8107470:	681b      	ldr	r3, [r3, #0]
 8107472:	681b      	ldr	r3, [r3, #0]
 8107474:	2b00      	cmp	r3, #0
 8107476:	d101      	bne.n	810747c <prvProcessTimerOrBlockTask+0x50>
 8107478:	2301      	movs	r3, #1
 810747a:	e000      	b.n	810747e <prvProcessTimerOrBlockTask+0x52>
 810747c:	2300      	movs	r3, #0
 810747e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8107480:	4b0f      	ldr	r3, [pc, #60]	@ (81074c0 <prvProcessTimerOrBlockTask+0x94>)
 8107482:	6818      	ldr	r0, [r3, #0]
 8107484:	687a      	ldr	r2, [r7, #4]
 8107486:	68fb      	ldr	r3, [r7, #12]
 8107488:	1ad3      	subs	r3, r2, r3
 810748a:	683a      	ldr	r2, [r7, #0]
 810748c:	4619      	mov	r1, r3
 810748e:	f7fe f997 	bl	81057c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8107492:	f7ff f865 	bl	8106560 <xTaskResumeAll>
 8107496:	4603      	mov	r3, r0
 8107498:	2b00      	cmp	r3, #0
 810749a:	d10a      	bne.n	81074b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810749c:	4b09      	ldr	r3, [pc, #36]	@ (81074c4 <prvProcessTimerOrBlockTask+0x98>)
 810749e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81074a2:	601a      	str	r2, [r3, #0]
 81074a4:	f3bf 8f4f 	dsb	sy
 81074a8:	f3bf 8f6f 	isb	sy
}
 81074ac:	e001      	b.n	81074b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81074ae:	f7ff f857 	bl	8106560 <xTaskResumeAll>
}
 81074b2:	bf00      	nop
 81074b4:	3710      	adds	r7, #16
 81074b6:	46bd      	mov	sp, r7
 81074b8:	bd80      	pop	{r7, pc}
 81074ba:	bf00      	nop
 81074bc:	100049d0 	.word	0x100049d0
 81074c0:	100049d4 	.word	0x100049d4
 81074c4:	e000ed04 	.word	0xe000ed04

081074c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81074c8:	b480      	push	{r7}
 81074ca:	b085      	sub	sp, #20
 81074cc:	af00      	add	r7, sp, #0
 81074ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81074d0:	4b0e      	ldr	r3, [pc, #56]	@ (810750c <prvGetNextExpireTime+0x44>)
 81074d2:	681b      	ldr	r3, [r3, #0]
 81074d4:	681b      	ldr	r3, [r3, #0]
 81074d6:	2b00      	cmp	r3, #0
 81074d8:	d101      	bne.n	81074de <prvGetNextExpireTime+0x16>
 81074da:	2201      	movs	r2, #1
 81074dc:	e000      	b.n	81074e0 <prvGetNextExpireTime+0x18>
 81074de:	2200      	movs	r2, #0
 81074e0:	687b      	ldr	r3, [r7, #4]
 81074e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81074e4:	687b      	ldr	r3, [r7, #4]
 81074e6:	681b      	ldr	r3, [r3, #0]
 81074e8:	2b00      	cmp	r3, #0
 81074ea:	d105      	bne.n	81074f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81074ec:	4b07      	ldr	r3, [pc, #28]	@ (810750c <prvGetNextExpireTime+0x44>)
 81074ee:	681b      	ldr	r3, [r3, #0]
 81074f0:	68db      	ldr	r3, [r3, #12]
 81074f2:	681b      	ldr	r3, [r3, #0]
 81074f4:	60fb      	str	r3, [r7, #12]
 81074f6:	e001      	b.n	81074fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81074f8:	2300      	movs	r3, #0
 81074fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81074fc:	68fb      	ldr	r3, [r7, #12]
}
 81074fe:	4618      	mov	r0, r3
 8107500:	3714      	adds	r7, #20
 8107502:	46bd      	mov	sp, r7
 8107504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107508:	4770      	bx	lr
 810750a:	bf00      	nop
 810750c:	100049cc 	.word	0x100049cc

08107510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8107510:	b580      	push	{r7, lr}
 8107512:	b084      	sub	sp, #16
 8107514:	af00      	add	r7, sp, #0
 8107516:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8107518:	f7ff f8c0 	bl	810669c <xTaskGetTickCount>
 810751c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810751e:	4b0b      	ldr	r3, [pc, #44]	@ (810754c <prvSampleTimeNow+0x3c>)
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	68fa      	ldr	r2, [r7, #12]
 8107524:	429a      	cmp	r2, r3
 8107526:	d205      	bcs.n	8107534 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8107528:	f000 f93a 	bl	81077a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810752c:	687b      	ldr	r3, [r7, #4]
 810752e:	2201      	movs	r2, #1
 8107530:	601a      	str	r2, [r3, #0]
 8107532:	e002      	b.n	810753a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	2200      	movs	r2, #0
 8107538:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810753a:	4a04      	ldr	r2, [pc, #16]	@ (810754c <prvSampleTimeNow+0x3c>)
 810753c:	68fb      	ldr	r3, [r7, #12]
 810753e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8107540:	68fb      	ldr	r3, [r7, #12]
}
 8107542:	4618      	mov	r0, r3
 8107544:	3710      	adds	r7, #16
 8107546:	46bd      	mov	sp, r7
 8107548:	bd80      	pop	{r7, pc}
 810754a:	bf00      	nop
 810754c:	100049dc 	.word	0x100049dc

08107550 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8107550:	b580      	push	{r7, lr}
 8107552:	b086      	sub	sp, #24
 8107554:	af00      	add	r7, sp, #0
 8107556:	60f8      	str	r0, [r7, #12]
 8107558:	60b9      	str	r1, [r7, #8]
 810755a:	607a      	str	r2, [r7, #4]
 810755c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810755e:	2300      	movs	r3, #0
 8107560:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8107562:	68fb      	ldr	r3, [r7, #12]
 8107564:	68ba      	ldr	r2, [r7, #8]
 8107566:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8107568:	68fb      	ldr	r3, [r7, #12]
 810756a:	68fa      	ldr	r2, [r7, #12]
 810756c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810756e:	68ba      	ldr	r2, [r7, #8]
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	429a      	cmp	r2, r3
 8107574:	d812      	bhi.n	810759c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107576:	687a      	ldr	r2, [r7, #4]
 8107578:	683b      	ldr	r3, [r7, #0]
 810757a:	1ad2      	subs	r2, r2, r3
 810757c:	68fb      	ldr	r3, [r7, #12]
 810757e:	699b      	ldr	r3, [r3, #24]
 8107580:	429a      	cmp	r2, r3
 8107582:	d302      	bcc.n	810758a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8107584:	2301      	movs	r3, #1
 8107586:	617b      	str	r3, [r7, #20]
 8107588:	e01b      	b.n	81075c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810758a:	4b10      	ldr	r3, [pc, #64]	@ (81075cc <prvInsertTimerInActiveList+0x7c>)
 810758c:	681a      	ldr	r2, [r3, #0]
 810758e:	68fb      	ldr	r3, [r7, #12]
 8107590:	3304      	adds	r3, #4
 8107592:	4619      	mov	r1, r3
 8107594:	4610      	mov	r0, r2
 8107596:	f7fd f95a 	bl	810484e <vListInsert>
 810759a:	e012      	b.n	81075c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810759c:	687a      	ldr	r2, [r7, #4]
 810759e:	683b      	ldr	r3, [r7, #0]
 81075a0:	429a      	cmp	r2, r3
 81075a2:	d206      	bcs.n	81075b2 <prvInsertTimerInActiveList+0x62>
 81075a4:	68ba      	ldr	r2, [r7, #8]
 81075a6:	683b      	ldr	r3, [r7, #0]
 81075a8:	429a      	cmp	r2, r3
 81075aa:	d302      	bcc.n	81075b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81075ac:	2301      	movs	r3, #1
 81075ae:	617b      	str	r3, [r7, #20]
 81075b0:	e007      	b.n	81075c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81075b2:	4b07      	ldr	r3, [pc, #28]	@ (81075d0 <prvInsertTimerInActiveList+0x80>)
 81075b4:	681a      	ldr	r2, [r3, #0]
 81075b6:	68fb      	ldr	r3, [r7, #12]
 81075b8:	3304      	adds	r3, #4
 81075ba:	4619      	mov	r1, r3
 81075bc:	4610      	mov	r0, r2
 81075be:	f7fd f946 	bl	810484e <vListInsert>
		}
	}

	return xProcessTimerNow;
 81075c2:	697b      	ldr	r3, [r7, #20]
}
 81075c4:	4618      	mov	r0, r3
 81075c6:	3718      	adds	r7, #24
 81075c8:	46bd      	mov	sp, r7
 81075ca:	bd80      	pop	{r7, pc}
 81075cc:	100049d0 	.word	0x100049d0
 81075d0:	100049cc 	.word	0x100049cc

081075d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81075d4:	b580      	push	{r7, lr}
 81075d6:	b08e      	sub	sp, #56	@ 0x38
 81075d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81075da:	e0ce      	b.n	810777a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81075dc:	687b      	ldr	r3, [r7, #4]
 81075de:	2b00      	cmp	r3, #0
 81075e0:	da19      	bge.n	8107616 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81075e2:	1d3b      	adds	r3, r7, #4
 81075e4:	3304      	adds	r3, #4
 81075e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81075e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81075ea:	2b00      	cmp	r3, #0
 81075ec:	d10b      	bne.n	8107606 <prvProcessReceivedCommands+0x32>
	__asm volatile
 81075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81075f2:	f383 8811 	msr	BASEPRI, r3
 81075f6:	f3bf 8f6f 	isb	sy
 81075fa:	f3bf 8f4f 	dsb	sy
 81075fe:	61fb      	str	r3, [r7, #28]
}
 8107600:	bf00      	nop
 8107602:	bf00      	nop
 8107604:	e7fd      	b.n	8107602 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8107606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107608:	681b      	ldr	r3, [r3, #0]
 810760a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810760c:	6850      	ldr	r0, [r2, #4]
 810760e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107610:	6892      	ldr	r2, [r2, #8]
 8107612:	4611      	mov	r1, r2
 8107614:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8107616:	687b      	ldr	r3, [r7, #4]
 8107618:	2b00      	cmp	r3, #0
 810761a:	f2c0 80ae 	blt.w	810777a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810761e:	68fb      	ldr	r3, [r7, #12]
 8107620:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8107622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107624:	695b      	ldr	r3, [r3, #20]
 8107626:	2b00      	cmp	r3, #0
 8107628:	d004      	beq.n	8107634 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810762a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810762c:	3304      	adds	r3, #4
 810762e:	4618      	mov	r0, r3
 8107630:	f7fd f946 	bl	81048c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8107634:	463b      	mov	r3, r7
 8107636:	4618      	mov	r0, r3
 8107638:	f7ff ff6a 	bl	8107510 <prvSampleTimeNow>
 810763c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	2b09      	cmp	r3, #9
 8107642:	f200 8097 	bhi.w	8107774 <prvProcessReceivedCommands+0x1a0>
 8107646:	a201      	add	r2, pc, #4	@ (adr r2, 810764c <prvProcessReceivedCommands+0x78>)
 8107648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810764c:	08107675 	.word	0x08107675
 8107650:	08107675 	.word	0x08107675
 8107654:	08107675 	.word	0x08107675
 8107658:	081076eb 	.word	0x081076eb
 810765c:	081076ff 	.word	0x081076ff
 8107660:	0810774b 	.word	0x0810774b
 8107664:	08107675 	.word	0x08107675
 8107668:	08107675 	.word	0x08107675
 810766c:	081076eb 	.word	0x081076eb
 8107670:	081076ff 	.word	0x081076ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8107674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107676:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810767a:	f043 0301 	orr.w	r3, r3, #1
 810767e:	b2da      	uxtb	r2, r3
 8107680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107682:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8107686:	68ba      	ldr	r2, [r7, #8]
 8107688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810768a:	699b      	ldr	r3, [r3, #24]
 810768c:	18d1      	adds	r1, r2, r3
 810768e:	68bb      	ldr	r3, [r7, #8]
 8107690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107694:	f7ff ff5c 	bl	8107550 <prvInsertTimerInActiveList>
 8107698:	4603      	mov	r3, r0
 810769a:	2b00      	cmp	r3, #0
 810769c:	d06c      	beq.n	8107778 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810769e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81076a0:	6a1b      	ldr	r3, [r3, #32]
 81076a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81076a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81076a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81076a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81076ac:	f003 0304 	and.w	r3, r3, #4
 81076b0:	2b00      	cmp	r3, #0
 81076b2:	d061      	beq.n	8107778 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81076b4:	68ba      	ldr	r2, [r7, #8]
 81076b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81076b8:	699b      	ldr	r3, [r3, #24]
 81076ba:	441a      	add	r2, r3
 81076bc:	2300      	movs	r3, #0
 81076be:	9300      	str	r3, [sp, #0]
 81076c0:	2300      	movs	r3, #0
 81076c2:	2100      	movs	r1, #0
 81076c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81076c6:	f7ff fe01 	bl	81072cc <xTimerGenericCommand>
 81076ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81076cc:	6a3b      	ldr	r3, [r7, #32]
 81076ce:	2b00      	cmp	r3, #0
 81076d0:	d152      	bne.n	8107778 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 81076d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81076d6:	f383 8811 	msr	BASEPRI, r3
 81076da:	f3bf 8f6f 	isb	sy
 81076de:	f3bf 8f4f 	dsb	sy
 81076e2:	61bb      	str	r3, [r7, #24]
}
 81076e4:	bf00      	nop
 81076e6:	bf00      	nop
 81076e8:	e7fd      	b.n	81076e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81076ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81076ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81076f0:	f023 0301 	bic.w	r3, r3, #1
 81076f4:	b2da      	uxtb	r2, r3
 81076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81076f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81076fc:	e03d      	b.n	810777a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81076fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107704:	f043 0301 	orr.w	r3, r3, #1
 8107708:	b2da      	uxtb	r2, r3
 810770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810770c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8107710:	68ba      	ldr	r2, [r7, #8]
 8107712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107714:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8107716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107718:	699b      	ldr	r3, [r3, #24]
 810771a:	2b00      	cmp	r3, #0
 810771c:	d10b      	bne.n	8107736 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107722:	f383 8811 	msr	BASEPRI, r3
 8107726:	f3bf 8f6f 	isb	sy
 810772a:	f3bf 8f4f 	dsb	sy
 810772e:	617b      	str	r3, [r7, #20]
}
 8107730:	bf00      	nop
 8107732:	bf00      	nop
 8107734:	e7fd      	b.n	8107732 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8107736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107738:	699a      	ldr	r2, [r3, #24]
 810773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810773c:	18d1      	adds	r1, r2, r3
 810773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107744:	f7ff ff04 	bl	8107550 <prvInsertTimerInActiveList>
					break;
 8107748:	e017      	b.n	810777a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810774c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107750:	f003 0302 	and.w	r3, r3, #2
 8107754:	2b00      	cmp	r3, #0
 8107756:	d103      	bne.n	8107760 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8107758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810775a:	f7fc ff07 	bl	810456c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810775e:	e00c      	b.n	810777a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8107760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107766:	f023 0301 	bic.w	r3, r3, #1
 810776a:	b2da      	uxtb	r2, r3
 810776c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810776e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8107772:	e002      	b.n	810777a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8107774:	bf00      	nop
 8107776:	e000      	b.n	810777a <prvProcessReceivedCommands+0x1a6>
					break;
 8107778:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810777a:	4b08      	ldr	r3, [pc, #32]	@ (810779c <prvProcessReceivedCommands+0x1c8>)
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	1d39      	adds	r1, r7, #4
 8107780:	2200      	movs	r2, #0
 8107782:	4618      	mov	r0, r3
 8107784:	f7fd fe00 	bl	8105388 <xQueueReceive>
 8107788:	4603      	mov	r3, r0
 810778a:	2b00      	cmp	r3, #0
 810778c:	f47f af26 	bne.w	81075dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8107790:	bf00      	nop
 8107792:	bf00      	nop
 8107794:	3730      	adds	r7, #48	@ 0x30
 8107796:	46bd      	mov	sp, r7
 8107798:	bd80      	pop	{r7, pc}
 810779a:	bf00      	nop
 810779c:	100049d4 	.word	0x100049d4

081077a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81077a0:	b580      	push	{r7, lr}
 81077a2:	b088      	sub	sp, #32
 81077a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81077a6:	e049      	b.n	810783c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81077a8:	4b2e      	ldr	r3, [pc, #184]	@ (8107864 <prvSwitchTimerLists+0xc4>)
 81077aa:	681b      	ldr	r3, [r3, #0]
 81077ac:	68db      	ldr	r3, [r3, #12]
 81077ae:	681b      	ldr	r3, [r3, #0]
 81077b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81077b2:	4b2c      	ldr	r3, [pc, #176]	@ (8107864 <prvSwitchTimerLists+0xc4>)
 81077b4:	681b      	ldr	r3, [r3, #0]
 81077b6:	68db      	ldr	r3, [r3, #12]
 81077b8:	68db      	ldr	r3, [r3, #12]
 81077ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81077bc:	68fb      	ldr	r3, [r7, #12]
 81077be:	3304      	adds	r3, #4
 81077c0:	4618      	mov	r0, r3
 81077c2:	f7fd f87d 	bl	81048c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81077c6:	68fb      	ldr	r3, [r7, #12]
 81077c8:	6a1b      	ldr	r3, [r3, #32]
 81077ca:	68f8      	ldr	r0, [r7, #12]
 81077cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81077ce:	68fb      	ldr	r3, [r7, #12]
 81077d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81077d4:	f003 0304 	and.w	r3, r3, #4
 81077d8:	2b00      	cmp	r3, #0
 81077da:	d02f      	beq.n	810783c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81077dc:	68fb      	ldr	r3, [r7, #12]
 81077de:	699b      	ldr	r3, [r3, #24]
 81077e0:	693a      	ldr	r2, [r7, #16]
 81077e2:	4413      	add	r3, r2
 81077e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81077e6:	68ba      	ldr	r2, [r7, #8]
 81077e8:	693b      	ldr	r3, [r7, #16]
 81077ea:	429a      	cmp	r2, r3
 81077ec:	d90e      	bls.n	810780c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81077ee:	68fb      	ldr	r3, [r7, #12]
 81077f0:	68ba      	ldr	r2, [r7, #8]
 81077f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81077f4:	68fb      	ldr	r3, [r7, #12]
 81077f6:	68fa      	ldr	r2, [r7, #12]
 81077f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81077fa:	4b1a      	ldr	r3, [pc, #104]	@ (8107864 <prvSwitchTimerLists+0xc4>)
 81077fc:	681a      	ldr	r2, [r3, #0]
 81077fe:	68fb      	ldr	r3, [r7, #12]
 8107800:	3304      	adds	r3, #4
 8107802:	4619      	mov	r1, r3
 8107804:	4610      	mov	r0, r2
 8107806:	f7fd f822 	bl	810484e <vListInsert>
 810780a:	e017      	b.n	810783c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810780c:	2300      	movs	r3, #0
 810780e:	9300      	str	r3, [sp, #0]
 8107810:	2300      	movs	r3, #0
 8107812:	693a      	ldr	r2, [r7, #16]
 8107814:	2100      	movs	r1, #0
 8107816:	68f8      	ldr	r0, [r7, #12]
 8107818:	f7ff fd58 	bl	81072cc <xTimerGenericCommand>
 810781c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	2b00      	cmp	r3, #0
 8107822:	d10b      	bne.n	810783c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8107824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107828:	f383 8811 	msr	BASEPRI, r3
 810782c:	f3bf 8f6f 	isb	sy
 8107830:	f3bf 8f4f 	dsb	sy
 8107834:	603b      	str	r3, [r7, #0]
}
 8107836:	bf00      	nop
 8107838:	bf00      	nop
 810783a:	e7fd      	b.n	8107838 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810783c:	4b09      	ldr	r3, [pc, #36]	@ (8107864 <prvSwitchTimerLists+0xc4>)
 810783e:	681b      	ldr	r3, [r3, #0]
 8107840:	681b      	ldr	r3, [r3, #0]
 8107842:	2b00      	cmp	r3, #0
 8107844:	d1b0      	bne.n	81077a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8107846:	4b07      	ldr	r3, [pc, #28]	@ (8107864 <prvSwitchTimerLists+0xc4>)
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810784c:	4b06      	ldr	r3, [pc, #24]	@ (8107868 <prvSwitchTimerLists+0xc8>)
 810784e:	681b      	ldr	r3, [r3, #0]
 8107850:	4a04      	ldr	r2, [pc, #16]	@ (8107864 <prvSwitchTimerLists+0xc4>)
 8107852:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8107854:	4a04      	ldr	r2, [pc, #16]	@ (8107868 <prvSwitchTimerLists+0xc8>)
 8107856:	697b      	ldr	r3, [r7, #20]
 8107858:	6013      	str	r3, [r2, #0]
}
 810785a:	bf00      	nop
 810785c:	3718      	adds	r7, #24
 810785e:	46bd      	mov	sp, r7
 8107860:	bd80      	pop	{r7, pc}
 8107862:	bf00      	nop
 8107864:	100049cc 	.word	0x100049cc
 8107868:	100049d0 	.word	0x100049d0

0810786c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810786c:	b580      	push	{r7, lr}
 810786e:	b082      	sub	sp, #8
 8107870:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8107872:	f7fd f981 	bl	8104b78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8107876:	4b15      	ldr	r3, [pc, #84]	@ (81078cc <prvCheckForValidListAndQueue+0x60>)
 8107878:	681b      	ldr	r3, [r3, #0]
 810787a:	2b00      	cmp	r3, #0
 810787c:	d120      	bne.n	81078c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810787e:	4814      	ldr	r0, [pc, #80]	@ (81078d0 <prvCheckForValidListAndQueue+0x64>)
 8107880:	f7fc ff94 	bl	81047ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8107884:	4813      	ldr	r0, [pc, #76]	@ (81078d4 <prvCheckForValidListAndQueue+0x68>)
 8107886:	f7fc ff91 	bl	81047ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810788a:	4b13      	ldr	r3, [pc, #76]	@ (81078d8 <prvCheckForValidListAndQueue+0x6c>)
 810788c:	4a10      	ldr	r2, [pc, #64]	@ (81078d0 <prvCheckForValidListAndQueue+0x64>)
 810788e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8107890:	4b12      	ldr	r3, [pc, #72]	@ (81078dc <prvCheckForValidListAndQueue+0x70>)
 8107892:	4a10      	ldr	r2, [pc, #64]	@ (81078d4 <prvCheckForValidListAndQueue+0x68>)
 8107894:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8107896:	2300      	movs	r3, #0
 8107898:	9300      	str	r3, [sp, #0]
 810789a:	4b11      	ldr	r3, [pc, #68]	@ (81078e0 <prvCheckForValidListAndQueue+0x74>)
 810789c:	4a11      	ldr	r2, [pc, #68]	@ (81078e4 <prvCheckForValidListAndQueue+0x78>)
 810789e:	2110      	movs	r1, #16
 81078a0:	200a      	movs	r0, #10
 81078a2:	f7fd faf5 	bl	8104e90 <xQueueGenericCreateStatic>
 81078a6:	4603      	mov	r3, r0
 81078a8:	4a08      	ldr	r2, [pc, #32]	@ (81078cc <prvCheckForValidListAndQueue+0x60>)
 81078aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81078ac:	4b07      	ldr	r3, [pc, #28]	@ (81078cc <prvCheckForValidListAndQueue+0x60>)
 81078ae:	681b      	ldr	r3, [r3, #0]
 81078b0:	2b00      	cmp	r3, #0
 81078b2:	d005      	beq.n	81078c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81078b4:	4b05      	ldr	r3, [pc, #20]	@ (81078cc <prvCheckForValidListAndQueue+0x60>)
 81078b6:	681b      	ldr	r3, [r3, #0]
 81078b8:	490b      	ldr	r1, [pc, #44]	@ (81078e8 <prvCheckForValidListAndQueue+0x7c>)
 81078ba:	4618      	mov	r0, r3
 81078bc:	f7fd ff56 	bl	810576c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81078c0:	f7fd f98c 	bl	8104bdc <vPortExitCritical>
}
 81078c4:	bf00      	nop
 81078c6:	46bd      	mov	sp, r7
 81078c8:	bd80      	pop	{r7, pc}
 81078ca:	bf00      	nop
 81078cc:	100049d4 	.word	0x100049d4
 81078d0:	100049a4 	.word	0x100049a4
 81078d4:	100049b8 	.word	0x100049b8
 81078d8:	100049cc 	.word	0x100049cc
 81078dc:	100049d0 	.word	0x100049d0
 81078e0:	10004a80 	.word	0x10004a80
 81078e4:	100049e0 	.word	0x100049e0
 81078e8:	08107f48 	.word	0x08107f48

081078ec <_ZdlPvj>:
 81078ec:	f000 b8da 	b.w	8107aa4 <_ZdlPv>

081078f0 <_Znwj>:
 81078f0:	2801      	cmp	r0, #1
 81078f2:	bf38      	it	cc
 81078f4:	2001      	movcc	r0, #1
 81078f6:	b510      	push	{r4, lr}
 81078f8:	4604      	mov	r4, r0
 81078fa:	4620      	mov	r0, r4
 81078fc:	f000 f8e4 	bl	8107ac8 <malloc>
 8107900:	b100      	cbz	r0, 8107904 <_Znwj+0x14>
 8107902:	bd10      	pop	{r4, pc}
 8107904:	f000 f8d0 	bl	8107aa8 <_ZSt15get_new_handlerv>
 8107908:	b908      	cbnz	r0, 810790e <_Znwj+0x1e>
 810790a:	f000 f8d5 	bl	8107ab8 <abort>
 810790e:	4780      	blx	r0
 8107910:	e7f3      	b.n	81078fa <_Znwj+0xa>

08107912 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8107912:	68c3      	ldr	r3, [r0, #12]
 8107914:	689a      	ldr	r2, [r3, #8]
 8107916:	60c2      	str	r2, [r0, #12]
 8107918:	b510      	push	{r4, lr}
 810791a:	b102      	cbz	r2, 810791e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 810791c:	6050      	str	r0, [r2, #4]
 810791e:	6842      	ldr	r2, [r0, #4]
 8107920:	605a      	str	r2, [r3, #4]
 8107922:	680c      	ldr	r4, [r1, #0]
 8107924:	4284      	cmp	r4, r0
 8107926:	d103      	bne.n	8107930 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8107928:	600b      	str	r3, [r1, #0]
 810792a:	6098      	str	r0, [r3, #8]
 810792c:	6043      	str	r3, [r0, #4]
 810792e:	bd10      	pop	{r4, pc}
 8107930:	6891      	ldr	r1, [r2, #8]
 8107932:	4281      	cmp	r1, r0
 8107934:	bf0c      	ite	eq
 8107936:	6093      	streq	r3, [r2, #8]
 8107938:	60d3      	strne	r3, [r2, #12]
 810793a:	e7f6      	b.n	810792a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0810793c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 810793c:	6883      	ldr	r3, [r0, #8]
 810793e:	68da      	ldr	r2, [r3, #12]
 8107940:	6082      	str	r2, [r0, #8]
 8107942:	b510      	push	{r4, lr}
 8107944:	b102      	cbz	r2, 8107948 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8107946:	6050      	str	r0, [r2, #4]
 8107948:	6842      	ldr	r2, [r0, #4]
 810794a:	605a      	str	r2, [r3, #4]
 810794c:	680c      	ldr	r4, [r1, #0]
 810794e:	4284      	cmp	r4, r0
 8107950:	d103      	bne.n	810795a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8107952:	600b      	str	r3, [r1, #0]
 8107954:	60d8      	str	r0, [r3, #12]
 8107956:	6043      	str	r3, [r0, #4]
 8107958:	bd10      	pop	{r4, pc}
 810795a:	68d1      	ldr	r1, [r2, #12]
 810795c:	4281      	cmp	r1, r0
 810795e:	bf0c      	ite	eq
 8107960:	60d3      	streq	r3, [r2, #12]
 8107962:	6093      	strne	r3, [r2, #8]
 8107964:	e7f6      	b.n	8107954 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08107966 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8107966:	68c3      	ldr	r3, [r0, #12]
 8107968:	b123      	cbz	r3, 8107974 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 810796a:	4618      	mov	r0, r3
 810796c:	689b      	ldr	r3, [r3, #8]
 810796e:	2b00      	cmp	r3, #0
 8107970:	d1fb      	bne.n	810796a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8107972:	4770      	bx	lr
 8107974:	6843      	ldr	r3, [r0, #4]
 8107976:	68da      	ldr	r2, [r3, #12]
 8107978:	4282      	cmp	r2, r0
 810797a:	d004      	beq.n	8107986 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 810797c:	68c2      	ldr	r2, [r0, #12]
 810797e:	4293      	cmp	r3, r2
 8107980:	bf18      	it	ne
 8107982:	4618      	movne	r0, r3
 8107984:	4770      	bx	lr
 8107986:	4618      	mov	r0, r3
 8107988:	685b      	ldr	r3, [r3, #4]
 810798a:	e7f4      	b.n	8107976 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

0810798c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 810798c:	7802      	ldrb	r2, [r0, #0]
 810798e:	4603      	mov	r3, r0
 8107990:	b92a      	cbnz	r2, 810799e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8107992:	6842      	ldr	r2, [r0, #4]
 8107994:	6852      	ldr	r2, [r2, #4]
 8107996:	4282      	cmp	r2, r0
 8107998:	d101      	bne.n	810799e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 810799a:	68d0      	ldr	r0, [r2, #12]
 810799c:	4770      	bx	lr
 810799e:	689a      	ldr	r2, [r3, #8]
 81079a0:	b122      	cbz	r2, 81079ac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 81079a2:	4610      	mov	r0, r2
 81079a4:	68d2      	ldr	r2, [r2, #12]
 81079a6:	2a00      	cmp	r2, #0
 81079a8:	d1fb      	bne.n	81079a2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 81079aa:	4770      	bx	lr
 81079ac:	6858      	ldr	r0, [r3, #4]
 81079ae:	6882      	ldr	r2, [r0, #8]
 81079b0:	429a      	cmp	r2, r3
 81079b2:	d000      	beq.n	81079b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 81079b4:	4770      	bx	lr
 81079b6:	4603      	mov	r3, r0
 81079b8:	6840      	ldr	r0, [r0, #4]
 81079ba:	e7f8      	b.n	81079ae <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

081079bc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 81079bc:	f7ff bfd3 	b.w	8107966 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

081079c0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 81079c0:	f7ff bfe4 	b.w	810798c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

081079c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 81079c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81079c8:	461d      	mov	r5, r3
 81079ca:	1d1f      	adds	r7, r3, #4
 81079cc:	2300      	movs	r3, #0
 81079ce:	e9c1 3302 	strd	r3, r3, [r1, #8]
 81079d2:	460c      	mov	r4, r1
 81079d4:	604a      	str	r2, [r1, #4]
 81079d6:	700b      	strb	r3, [r1, #0]
 81079d8:	b1a0      	cbz	r0, 8107a04 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 81079da:	4295      	cmp	r5, r2
 81079dc:	6091      	str	r1, [r2, #8]
 81079de:	d102      	bne.n	81079e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 81079e0:	6069      	str	r1, [r5, #4]
 81079e2:	60ec      	str	r4, [r5, #12]
 81079e4:	e003      	b.n	81079ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 81079e6:	68ab      	ldr	r3, [r5, #8]
 81079e8:	4293      	cmp	r3, r2
 81079ea:	bf08      	it	eq
 81079ec:	60a9      	streq	r1, [r5, #8]
 81079ee:	f04f 0900 	mov.w	r9, #0
 81079f2:	f04f 0801 	mov.w	r8, #1
 81079f6:	686b      	ldr	r3, [r5, #4]
 81079f8:	42a3      	cmp	r3, r4
 81079fa:	d132      	bne.n	8107a62 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 81079fc:	2201      	movs	r2, #1
 81079fe:	701a      	strb	r2, [r3, #0]
 8107a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107a04:	60d1      	str	r1, [r2, #12]
 8107a06:	68eb      	ldr	r3, [r5, #12]
 8107a08:	4293      	cmp	r3, r2
 8107a0a:	d1f0      	bne.n	81079ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8107a0c:	e7e9      	b.n	81079e2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8107a0e:	68c3      	ldr	r3, [r0, #12]
 8107a10:	42a3      	cmp	r3, r4
 8107a12:	d103      	bne.n	8107a1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8107a14:	4639      	mov	r1, r7
 8107a16:	f7ff ff7c 	bl	8107912 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8107a1a:	4604      	mov	r4, r0
 8107a1c:	6863      	ldr	r3, [r4, #4]
 8107a1e:	4639      	mov	r1, r7
 8107a20:	f883 8000 	strb.w	r8, [r3]
 8107a24:	4630      	mov	r0, r6
 8107a26:	f886 9000 	strb.w	r9, [r6]
 8107a2a:	f7ff ff87 	bl	810793c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8107a2e:	e7e2      	b.n	81079f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8107a30:	b133      	cbz	r3, 8107a40 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8107a32:	781a      	ldrb	r2, [r3, #0]
 8107a34:	b922      	cbnz	r2, 8107a40 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8107a36:	f880 8000 	strb.w	r8, [r0]
 8107a3a:	f883 8000 	strb.w	r8, [r3]
 8107a3e:	e021      	b.n	8107a84 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8107a40:	6883      	ldr	r3, [r0, #8]
 8107a42:	42a3      	cmp	r3, r4
 8107a44:	d103      	bne.n	8107a4e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8107a46:	4639      	mov	r1, r7
 8107a48:	f7ff ff78 	bl	810793c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8107a4c:	4604      	mov	r4, r0
 8107a4e:	6863      	ldr	r3, [r4, #4]
 8107a50:	4639      	mov	r1, r7
 8107a52:	f883 8000 	strb.w	r8, [r3]
 8107a56:	4630      	mov	r0, r6
 8107a58:	f886 9000 	strb.w	r9, [r6]
 8107a5c:	f7ff ff59 	bl	8107912 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8107a60:	e7c9      	b.n	81079f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8107a62:	6860      	ldr	r0, [r4, #4]
 8107a64:	7802      	ldrb	r2, [r0, #0]
 8107a66:	2a00      	cmp	r2, #0
 8107a68:	d1c8      	bne.n	81079fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8107a6a:	6846      	ldr	r6, [r0, #4]
 8107a6c:	68b3      	ldr	r3, [r6, #8]
 8107a6e:	4283      	cmp	r3, r0
 8107a70:	d1de      	bne.n	8107a30 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8107a72:	68f2      	ldr	r2, [r6, #12]
 8107a74:	2a00      	cmp	r2, #0
 8107a76:	d0ca      	beq.n	8107a0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8107a78:	7811      	ldrb	r1, [r2, #0]
 8107a7a:	2900      	cmp	r1, #0
 8107a7c:	d1c7      	bne.n	8107a0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8107a7e:	2101      	movs	r1, #1
 8107a80:	7019      	strb	r1, [r3, #0]
 8107a82:	7011      	strb	r1, [r2, #0]
 8107a84:	f886 9000 	strb.w	r9, [r6]
 8107a88:	4634      	mov	r4, r6
 8107a8a:	e7b4      	b.n	81079f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08107a8c <_ZSt17__throw_bad_allocv>:
 8107a8c:	b508      	push	{r3, lr}
 8107a8e:	f000 f813 	bl	8107ab8 <abort>

08107a92 <_ZSt28__throw_bad_array_new_lengthv>:
 8107a92:	b508      	push	{r3, lr}
 8107a94:	f000 f810 	bl	8107ab8 <abort>

08107a98 <_ZSt20__throw_length_errorPKc>:
 8107a98:	b508      	push	{r3, lr}
 8107a9a:	f000 f80d 	bl	8107ab8 <abort>

08107a9e <_ZSt25__throw_bad_function_callv>:
 8107a9e:	b508      	push	{r3, lr}
 8107aa0:	f000 f80a 	bl	8107ab8 <abort>

08107aa4 <_ZdlPv>:
 8107aa4:	f000 b818 	b.w	8107ad8 <free>

08107aa8 <_ZSt15get_new_handlerv>:
 8107aa8:	4b02      	ldr	r3, [pc, #8]	@ (8107ab4 <_ZSt15get_new_handlerv+0xc>)
 8107aaa:	6818      	ldr	r0, [r3, #0]
 8107aac:	f3bf 8f5b 	dmb	ish
 8107ab0:	4770      	bx	lr
 8107ab2:	bf00      	nop
 8107ab4:	10004ad0 	.word	0x10004ad0

08107ab8 <abort>:
 8107ab8:	b508      	push	{r3, lr}
 8107aba:	2006      	movs	r0, #6
 8107abc:	f000 f90c 	bl	8107cd8 <raise>
 8107ac0:	2001      	movs	r0, #1
 8107ac2:	f7f8 fedb 	bl	810087c <_exit>
	...

08107ac8 <malloc>:
 8107ac8:	4b02      	ldr	r3, [pc, #8]	@ (8107ad4 <malloc+0xc>)
 8107aca:	4601      	mov	r1, r0
 8107acc:	6818      	ldr	r0, [r3, #0]
 8107ace:	f000 b82d 	b.w	8107b2c <_malloc_r>
 8107ad2:	bf00      	nop
 8107ad4:	10000014 	.word	0x10000014

08107ad8 <free>:
 8107ad8:	4b02      	ldr	r3, [pc, #8]	@ (8107ae4 <free+0xc>)
 8107ada:	4601      	mov	r1, r0
 8107adc:	6818      	ldr	r0, [r3, #0]
 8107ade:	f000 b9b7 	b.w	8107e50 <_free_r>
 8107ae2:	bf00      	nop
 8107ae4:	10000014 	.word	0x10000014

08107ae8 <sbrk_aligned>:
 8107ae8:	b570      	push	{r4, r5, r6, lr}
 8107aea:	4e0f      	ldr	r6, [pc, #60]	@ (8107b28 <sbrk_aligned+0x40>)
 8107aec:	460c      	mov	r4, r1
 8107aee:	6831      	ldr	r1, [r6, #0]
 8107af0:	4605      	mov	r5, r0
 8107af2:	b911      	cbnz	r1, 8107afa <sbrk_aligned+0x12>
 8107af4:	f000 f962 	bl	8107dbc <_sbrk_r>
 8107af8:	6030      	str	r0, [r6, #0]
 8107afa:	4621      	mov	r1, r4
 8107afc:	4628      	mov	r0, r5
 8107afe:	f000 f95d 	bl	8107dbc <_sbrk_r>
 8107b02:	1c43      	adds	r3, r0, #1
 8107b04:	d103      	bne.n	8107b0e <sbrk_aligned+0x26>
 8107b06:	f04f 34ff 	mov.w	r4, #4294967295
 8107b0a:	4620      	mov	r0, r4
 8107b0c:	bd70      	pop	{r4, r5, r6, pc}
 8107b0e:	1cc4      	adds	r4, r0, #3
 8107b10:	f024 0403 	bic.w	r4, r4, #3
 8107b14:	42a0      	cmp	r0, r4
 8107b16:	d0f8      	beq.n	8107b0a <sbrk_aligned+0x22>
 8107b18:	1a21      	subs	r1, r4, r0
 8107b1a:	4628      	mov	r0, r5
 8107b1c:	f000 f94e 	bl	8107dbc <_sbrk_r>
 8107b20:	3001      	adds	r0, #1
 8107b22:	d1f2      	bne.n	8107b0a <sbrk_aligned+0x22>
 8107b24:	e7ef      	b.n	8107b06 <sbrk_aligned+0x1e>
 8107b26:	bf00      	nop
 8107b28:	10004ad4 	.word	0x10004ad4

08107b2c <_malloc_r>:
 8107b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107b30:	1ccd      	adds	r5, r1, #3
 8107b32:	f025 0503 	bic.w	r5, r5, #3
 8107b36:	3508      	adds	r5, #8
 8107b38:	2d0c      	cmp	r5, #12
 8107b3a:	bf38      	it	cc
 8107b3c:	250c      	movcc	r5, #12
 8107b3e:	2d00      	cmp	r5, #0
 8107b40:	4606      	mov	r6, r0
 8107b42:	db01      	blt.n	8107b48 <_malloc_r+0x1c>
 8107b44:	42a9      	cmp	r1, r5
 8107b46:	d904      	bls.n	8107b52 <_malloc_r+0x26>
 8107b48:	230c      	movs	r3, #12
 8107b4a:	6033      	str	r3, [r6, #0]
 8107b4c:	2000      	movs	r0, #0
 8107b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107b52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8107c28 <_malloc_r+0xfc>
 8107b56:	f000 f869 	bl	8107c2c <__malloc_lock>
 8107b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8107b5e:	461c      	mov	r4, r3
 8107b60:	bb44      	cbnz	r4, 8107bb4 <_malloc_r+0x88>
 8107b62:	4629      	mov	r1, r5
 8107b64:	4630      	mov	r0, r6
 8107b66:	f7ff ffbf 	bl	8107ae8 <sbrk_aligned>
 8107b6a:	1c43      	adds	r3, r0, #1
 8107b6c:	4604      	mov	r4, r0
 8107b6e:	d158      	bne.n	8107c22 <_malloc_r+0xf6>
 8107b70:	f8d8 4000 	ldr.w	r4, [r8]
 8107b74:	4627      	mov	r7, r4
 8107b76:	2f00      	cmp	r7, #0
 8107b78:	d143      	bne.n	8107c02 <_malloc_r+0xd6>
 8107b7a:	2c00      	cmp	r4, #0
 8107b7c:	d04b      	beq.n	8107c16 <_malloc_r+0xea>
 8107b7e:	6823      	ldr	r3, [r4, #0]
 8107b80:	4639      	mov	r1, r7
 8107b82:	4630      	mov	r0, r6
 8107b84:	eb04 0903 	add.w	r9, r4, r3
 8107b88:	f000 f918 	bl	8107dbc <_sbrk_r>
 8107b8c:	4581      	cmp	r9, r0
 8107b8e:	d142      	bne.n	8107c16 <_malloc_r+0xea>
 8107b90:	6821      	ldr	r1, [r4, #0]
 8107b92:	1a6d      	subs	r5, r5, r1
 8107b94:	4629      	mov	r1, r5
 8107b96:	4630      	mov	r0, r6
 8107b98:	f7ff ffa6 	bl	8107ae8 <sbrk_aligned>
 8107b9c:	3001      	adds	r0, #1
 8107b9e:	d03a      	beq.n	8107c16 <_malloc_r+0xea>
 8107ba0:	6823      	ldr	r3, [r4, #0]
 8107ba2:	442b      	add	r3, r5
 8107ba4:	6023      	str	r3, [r4, #0]
 8107ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8107baa:	685a      	ldr	r2, [r3, #4]
 8107bac:	bb62      	cbnz	r2, 8107c08 <_malloc_r+0xdc>
 8107bae:	f8c8 7000 	str.w	r7, [r8]
 8107bb2:	e00f      	b.n	8107bd4 <_malloc_r+0xa8>
 8107bb4:	6822      	ldr	r2, [r4, #0]
 8107bb6:	1b52      	subs	r2, r2, r5
 8107bb8:	d420      	bmi.n	8107bfc <_malloc_r+0xd0>
 8107bba:	2a0b      	cmp	r2, #11
 8107bbc:	d917      	bls.n	8107bee <_malloc_r+0xc2>
 8107bbe:	1961      	adds	r1, r4, r5
 8107bc0:	42a3      	cmp	r3, r4
 8107bc2:	6025      	str	r5, [r4, #0]
 8107bc4:	bf18      	it	ne
 8107bc6:	6059      	strne	r1, [r3, #4]
 8107bc8:	6863      	ldr	r3, [r4, #4]
 8107bca:	bf08      	it	eq
 8107bcc:	f8c8 1000 	streq.w	r1, [r8]
 8107bd0:	5162      	str	r2, [r4, r5]
 8107bd2:	604b      	str	r3, [r1, #4]
 8107bd4:	4630      	mov	r0, r6
 8107bd6:	f000 f82f 	bl	8107c38 <__malloc_unlock>
 8107bda:	f104 000b 	add.w	r0, r4, #11
 8107bde:	1d23      	adds	r3, r4, #4
 8107be0:	f020 0007 	bic.w	r0, r0, #7
 8107be4:	1ac2      	subs	r2, r0, r3
 8107be6:	bf1c      	itt	ne
 8107be8:	1a1b      	subne	r3, r3, r0
 8107bea:	50a3      	strne	r3, [r4, r2]
 8107bec:	e7af      	b.n	8107b4e <_malloc_r+0x22>
 8107bee:	6862      	ldr	r2, [r4, #4]
 8107bf0:	42a3      	cmp	r3, r4
 8107bf2:	bf0c      	ite	eq
 8107bf4:	f8c8 2000 	streq.w	r2, [r8]
 8107bf8:	605a      	strne	r2, [r3, #4]
 8107bfa:	e7eb      	b.n	8107bd4 <_malloc_r+0xa8>
 8107bfc:	4623      	mov	r3, r4
 8107bfe:	6864      	ldr	r4, [r4, #4]
 8107c00:	e7ae      	b.n	8107b60 <_malloc_r+0x34>
 8107c02:	463c      	mov	r4, r7
 8107c04:	687f      	ldr	r7, [r7, #4]
 8107c06:	e7b6      	b.n	8107b76 <_malloc_r+0x4a>
 8107c08:	461a      	mov	r2, r3
 8107c0a:	685b      	ldr	r3, [r3, #4]
 8107c0c:	42a3      	cmp	r3, r4
 8107c0e:	d1fb      	bne.n	8107c08 <_malloc_r+0xdc>
 8107c10:	2300      	movs	r3, #0
 8107c12:	6053      	str	r3, [r2, #4]
 8107c14:	e7de      	b.n	8107bd4 <_malloc_r+0xa8>
 8107c16:	230c      	movs	r3, #12
 8107c18:	6033      	str	r3, [r6, #0]
 8107c1a:	4630      	mov	r0, r6
 8107c1c:	f000 f80c 	bl	8107c38 <__malloc_unlock>
 8107c20:	e794      	b.n	8107b4c <_malloc_r+0x20>
 8107c22:	6005      	str	r5, [r0, #0]
 8107c24:	e7d6      	b.n	8107bd4 <_malloc_r+0xa8>
 8107c26:	bf00      	nop
 8107c28:	10004ad8 	.word	0x10004ad8

08107c2c <__malloc_lock>:
 8107c2c:	4801      	ldr	r0, [pc, #4]	@ (8107c34 <__malloc_lock+0x8>)
 8107c2e:	f000 b8ff 	b.w	8107e30 <__retarget_lock_acquire_recursive>
 8107c32:	bf00      	nop
 8107c34:	10004c18 	.word	0x10004c18

08107c38 <__malloc_unlock>:
 8107c38:	4801      	ldr	r0, [pc, #4]	@ (8107c40 <__malloc_unlock+0x8>)
 8107c3a:	f000 b8fa 	b.w	8107e32 <__retarget_lock_release_recursive>
 8107c3e:	bf00      	nop
 8107c40:	10004c18 	.word	0x10004c18

08107c44 <memmove>:
 8107c44:	4288      	cmp	r0, r1
 8107c46:	b510      	push	{r4, lr}
 8107c48:	eb01 0402 	add.w	r4, r1, r2
 8107c4c:	d902      	bls.n	8107c54 <memmove+0x10>
 8107c4e:	4284      	cmp	r4, r0
 8107c50:	4623      	mov	r3, r4
 8107c52:	d807      	bhi.n	8107c64 <memmove+0x20>
 8107c54:	1e43      	subs	r3, r0, #1
 8107c56:	42a1      	cmp	r1, r4
 8107c58:	d008      	beq.n	8107c6c <memmove+0x28>
 8107c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8107c62:	e7f8      	b.n	8107c56 <memmove+0x12>
 8107c64:	4402      	add	r2, r0
 8107c66:	4601      	mov	r1, r0
 8107c68:	428a      	cmp	r2, r1
 8107c6a:	d100      	bne.n	8107c6e <memmove+0x2a>
 8107c6c:	bd10      	pop	{r4, pc}
 8107c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8107c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8107c76:	e7f7      	b.n	8107c68 <memmove+0x24>

08107c78 <memset>:
 8107c78:	4402      	add	r2, r0
 8107c7a:	4603      	mov	r3, r0
 8107c7c:	4293      	cmp	r3, r2
 8107c7e:	d100      	bne.n	8107c82 <memset+0xa>
 8107c80:	4770      	bx	lr
 8107c82:	f803 1b01 	strb.w	r1, [r3], #1
 8107c86:	e7f9      	b.n	8107c7c <memset+0x4>

08107c88 <_raise_r>:
 8107c88:	291f      	cmp	r1, #31
 8107c8a:	b538      	push	{r3, r4, r5, lr}
 8107c8c:	4605      	mov	r5, r0
 8107c8e:	460c      	mov	r4, r1
 8107c90:	d904      	bls.n	8107c9c <_raise_r+0x14>
 8107c92:	2316      	movs	r3, #22
 8107c94:	6003      	str	r3, [r0, #0]
 8107c96:	f04f 30ff 	mov.w	r0, #4294967295
 8107c9a:	bd38      	pop	{r3, r4, r5, pc}
 8107c9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8107c9e:	b112      	cbz	r2, 8107ca6 <_raise_r+0x1e>
 8107ca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8107ca4:	b94b      	cbnz	r3, 8107cba <_raise_r+0x32>
 8107ca6:	4628      	mov	r0, r5
 8107ca8:	f000 f886 	bl	8107db8 <_getpid_r>
 8107cac:	4622      	mov	r2, r4
 8107cae:	4601      	mov	r1, r0
 8107cb0:	4628      	mov	r0, r5
 8107cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107cb6:	f000 b86d 	b.w	8107d94 <_kill_r>
 8107cba:	2b01      	cmp	r3, #1
 8107cbc:	d00a      	beq.n	8107cd4 <_raise_r+0x4c>
 8107cbe:	1c59      	adds	r1, r3, #1
 8107cc0:	d103      	bne.n	8107cca <_raise_r+0x42>
 8107cc2:	2316      	movs	r3, #22
 8107cc4:	6003      	str	r3, [r0, #0]
 8107cc6:	2001      	movs	r0, #1
 8107cc8:	e7e7      	b.n	8107c9a <_raise_r+0x12>
 8107cca:	2100      	movs	r1, #0
 8107ccc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8107cd0:	4620      	mov	r0, r4
 8107cd2:	4798      	blx	r3
 8107cd4:	2000      	movs	r0, #0
 8107cd6:	e7e0      	b.n	8107c9a <_raise_r+0x12>

08107cd8 <raise>:
 8107cd8:	4b02      	ldr	r3, [pc, #8]	@ (8107ce4 <raise+0xc>)
 8107cda:	4601      	mov	r1, r0
 8107cdc:	6818      	ldr	r0, [r3, #0]
 8107cde:	f7ff bfd3 	b.w	8107c88 <_raise_r>
 8107ce2:	bf00      	nop
 8107ce4:	10000014 	.word	0x10000014

08107ce8 <_reclaim_reent>:
 8107ce8:	4b29      	ldr	r3, [pc, #164]	@ (8107d90 <_reclaim_reent+0xa8>)
 8107cea:	681b      	ldr	r3, [r3, #0]
 8107cec:	4283      	cmp	r3, r0
 8107cee:	b570      	push	{r4, r5, r6, lr}
 8107cf0:	4604      	mov	r4, r0
 8107cf2:	d04b      	beq.n	8107d8c <_reclaim_reent+0xa4>
 8107cf4:	69c3      	ldr	r3, [r0, #28]
 8107cf6:	b1ab      	cbz	r3, 8107d24 <_reclaim_reent+0x3c>
 8107cf8:	68db      	ldr	r3, [r3, #12]
 8107cfa:	b16b      	cbz	r3, 8107d18 <_reclaim_reent+0x30>
 8107cfc:	2500      	movs	r5, #0
 8107cfe:	69e3      	ldr	r3, [r4, #28]
 8107d00:	68db      	ldr	r3, [r3, #12]
 8107d02:	5959      	ldr	r1, [r3, r5]
 8107d04:	2900      	cmp	r1, #0
 8107d06:	d13b      	bne.n	8107d80 <_reclaim_reent+0x98>
 8107d08:	3504      	adds	r5, #4
 8107d0a:	2d80      	cmp	r5, #128	@ 0x80
 8107d0c:	d1f7      	bne.n	8107cfe <_reclaim_reent+0x16>
 8107d0e:	69e3      	ldr	r3, [r4, #28]
 8107d10:	4620      	mov	r0, r4
 8107d12:	68d9      	ldr	r1, [r3, #12]
 8107d14:	f000 f89c 	bl	8107e50 <_free_r>
 8107d18:	69e3      	ldr	r3, [r4, #28]
 8107d1a:	6819      	ldr	r1, [r3, #0]
 8107d1c:	b111      	cbz	r1, 8107d24 <_reclaim_reent+0x3c>
 8107d1e:	4620      	mov	r0, r4
 8107d20:	f000 f896 	bl	8107e50 <_free_r>
 8107d24:	6961      	ldr	r1, [r4, #20]
 8107d26:	b111      	cbz	r1, 8107d2e <_reclaim_reent+0x46>
 8107d28:	4620      	mov	r0, r4
 8107d2a:	f000 f891 	bl	8107e50 <_free_r>
 8107d2e:	69e1      	ldr	r1, [r4, #28]
 8107d30:	b111      	cbz	r1, 8107d38 <_reclaim_reent+0x50>
 8107d32:	4620      	mov	r0, r4
 8107d34:	f000 f88c 	bl	8107e50 <_free_r>
 8107d38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8107d3a:	b111      	cbz	r1, 8107d42 <_reclaim_reent+0x5a>
 8107d3c:	4620      	mov	r0, r4
 8107d3e:	f000 f887 	bl	8107e50 <_free_r>
 8107d42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107d44:	b111      	cbz	r1, 8107d4c <_reclaim_reent+0x64>
 8107d46:	4620      	mov	r0, r4
 8107d48:	f000 f882 	bl	8107e50 <_free_r>
 8107d4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8107d4e:	b111      	cbz	r1, 8107d56 <_reclaim_reent+0x6e>
 8107d50:	4620      	mov	r0, r4
 8107d52:	f000 f87d 	bl	8107e50 <_free_r>
 8107d56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8107d58:	b111      	cbz	r1, 8107d60 <_reclaim_reent+0x78>
 8107d5a:	4620      	mov	r0, r4
 8107d5c:	f000 f878 	bl	8107e50 <_free_r>
 8107d60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8107d62:	b111      	cbz	r1, 8107d6a <_reclaim_reent+0x82>
 8107d64:	4620      	mov	r0, r4
 8107d66:	f000 f873 	bl	8107e50 <_free_r>
 8107d6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8107d6c:	b111      	cbz	r1, 8107d74 <_reclaim_reent+0x8c>
 8107d6e:	4620      	mov	r0, r4
 8107d70:	f000 f86e 	bl	8107e50 <_free_r>
 8107d74:	6a23      	ldr	r3, [r4, #32]
 8107d76:	b14b      	cbz	r3, 8107d8c <_reclaim_reent+0xa4>
 8107d78:	4620      	mov	r0, r4
 8107d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8107d7e:	4718      	bx	r3
 8107d80:	680e      	ldr	r6, [r1, #0]
 8107d82:	4620      	mov	r0, r4
 8107d84:	f000 f864 	bl	8107e50 <_free_r>
 8107d88:	4631      	mov	r1, r6
 8107d8a:	e7bb      	b.n	8107d04 <_reclaim_reent+0x1c>
 8107d8c:	bd70      	pop	{r4, r5, r6, pc}
 8107d8e:	bf00      	nop
 8107d90:	10000014 	.word	0x10000014

08107d94 <_kill_r>:
 8107d94:	b538      	push	{r3, r4, r5, lr}
 8107d96:	4d07      	ldr	r5, [pc, #28]	@ (8107db4 <_kill_r+0x20>)
 8107d98:	2300      	movs	r3, #0
 8107d9a:	4604      	mov	r4, r0
 8107d9c:	4608      	mov	r0, r1
 8107d9e:	4611      	mov	r1, r2
 8107da0:	602b      	str	r3, [r5, #0]
 8107da2:	f7f8 fd5b 	bl	810085c <_kill>
 8107da6:	1c43      	adds	r3, r0, #1
 8107da8:	d102      	bne.n	8107db0 <_kill_r+0x1c>
 8107daa:	682b      	ldr	r3, [r5, #0]
 8107dac:	b103      	cbz	r3, 8107db0 <_kill_r+0x1c>
 8107dae:	6023      	str	r3, [r4, #0]
 8107db0:	bd38      	pop	{r3, r4, r5, pc}
 8107db2:	bf00      	nop
 8107db4:	10004c14 	.word	0x10004c14

08107db8 <_getpid_r>:
 8107db8:	f7f8 bd48 	b.w	810084c <_getpid>

08107dbc <_sbrk_r>:
 8107dbc:	b538      	push	{r3, r4, r5, lr}
 8107dbe:	4d06      	ldr	r5, [pc, #24]	@ (8107dd8 <_sbrk_r+0x1c>)
 8107dc0:	2300      	movs	r3, #0
 8107dc2:	4604      	mov	r4, r0
 8107dc4:	4608      	mov	r0, r1
 8107dc6:	602b      	str	r3, [r5, #0]
 8107dc8:	f7f8 fd64 	bl	8100894 <_sbrk>
 8107dcc:	1c43      	adds	r3, r0, #1
 8107dce:	d102      	bne.n	8107dd6 <_sbrk_r+0x1a>
 8107dd0:	682b      	ldr	r3, [r5, #0]
 8107dd2:	b103      	cbz	r3, 8107dd6 <_sbrk_r+0x1a>
 8107dd4:	6023      	str	r3, [r4, #0]
 8107dd6:	bd38      	pop	{r3, r4, r5, pc}
 8107dd8:	10004c14 	.word	0x10004c14

08107ddc <__errno>:
 8107ddc:	4b01      	ldr	r3, [pc, #4]	@ (8107de4 <__errno+0x8>)
 8107dde:	6818      	ldr	r0, [r3, #0]
 8107de0:	4770      	bx	lr
 8107de2:	bf00      	nop
 8107de4:	10000014 	.word	0x10000014

08107de8 <__libc_init_array>:
 8107de8:	b570      	push	{r4, r5, r6, lr}
 8107dea:	4d0d      	ldr	r5, [pc, #52]	@ (8107e20 <__libc_init_array+0x38>)
 8107dec:	4c0d      	ldr	r4, [pc, #52]	@ (8107e24 <__libc_init_array+0x3c>)
 8107dee:	1b64      	subs	r4, r4, r5
 8107df0:	10a4      	asrs	r4, r4, #2
 8107df2:	2600      	movs	r6, #0
 8107df4:	42a6      	cmp	r6, r4
 8107df6:	d109      	bne.n	8107e0c <__libc_init_array+0x24>
 8107df8:	4d0b      	ldr	r5, [pc, #44]	@ (8107e28 <__libc_init_array+0x40>)
 8107dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8107e2c <__libc_init_array+0x44>)
 8107dfc:	f000 f872 	bl	8107ee4 <_init>
 8107e00:	1b64      	subs	r4, r4, r5
 8107e02:	10a4      	asrs	r4, r4, #2
 8107e04:	2600      	movs	r6, #0
 8107e06:	42a6      	cmp	r6, r4
 8107e08:	d105      	bne.n	8107e16 <__libc_init_array+0x2e>
 8107e0a:	bd70      	pop	{r4, r5, r6, pc}
 8107e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8107e10:	4798      	blx	r3
 8107e12:	3601      	adds	r6, #1
 8107e14:	e7ee      	b.n	8107df4 <__libc_init_array+0xc>
 8107e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8107e1a:	4798      	blx	r3
 8107e1c:	3601      	adds	r6, #1
 8107e1e:	e7f2      	b.n	8107e06 <__libc_init_array+0x1e>
 8107e20:	08107fac 	.word	0x08107fac
 8107e24:	08107fac 	.word	0x08107fac
 8107e28:	08107fac 	.word	0x08107fac
 8107e2c:	08107fb4 	.word	0x08107fb4

08107e30 <__retarget_lock_acquire_recursive>:
 8107e30:	4770      	bx	lr

08107e32 <__retarget_lock_release_recursive>:
 8107e32:	4770      	bx	lr

08107e34 <memcpy>:
 8107e34:	440a      	add	r2, r1
 8107e36:	4291      	cmp	r1, r2
 8107e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8107e3c:	d100      	bne.n	8107e40 <memcpy+0xc>
 8107e3e:	4770      	bx	lr
 8107e40:	b510      	push	{r4, lr}
 8107e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107e4a:	4291      	cmp	r1, r2
 8107e4c:	d1f9      	bne.n	8107e42 <memcpy+0xe>
 8107e4e:	bd10      	pop	{r4, pc}

08107e50 <_free_r>:
 8107e50:	b538      	push	{r3, r4, r5, lr}
 8107e52:	4605      	mov	r5, r0
 8107e54:	2900      	cmp	r1, #0
 8107e56:	d041      	beq.n	8107edc <_free_r+0x8c>
 8107e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107e5c:	1f0c      	subs	r4, r1, #4
 8107e5e:	2b00      	cmp	r3, #0
 8107e60:	bfb8      	it	lt
 8107e62:	18e4      	addlt	r4, r4, r3
 8107e64:	f7ff fee2 	bl	8107c2c <__malloc_lock>
 8107e68:	4a1d      	ldr	r2, [pc, #116]	@ (8107ee0 <_free_r+0x90>)
 8107e6a:	6813      	ldr	r3, [r2, #0]
 8107e6c:	b933      	cbnz	r3, 8107e7c <_free_r+0x2c>
 8107e6e:	6063      	str	r3, [r4, #4]
 8107e70:	6014      	str	r4, [r2, #0]
 8107e72:	4628      	mov	r0, r5
 8107e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107e78:	f7ff bede 	b.w	8107c38 <__malloc_unlock>
 8107e7c:	42a3      	cmp	r3, r4
 8107e7e:	d908      	bls.n	8107e92 <_free_r+0x42>
 8107e80:	6820      	ldr	r0, [r4, #0]
 8107e82:	1821      	adds	r1, r4, r0
 8107e84:	428b      	cmp	r3, r1
 8107e86:	bf01      	itttt	eq
 8107e88:	6819      	ldreq	r1, [r3, #0]
 8107e8a:	685b      	ldreq	r3, [r3, #4]
 8107e8c:	1809      	addeq	r1, r1, r0
 8107e8e:	6021      	streq	r1, [r4, #0]
 8107e90:	e7ed      	b.n	8107e6e <_free_r+0x1e>
 8107e92:	461a      	mov	r2, r3
 8107e94:	685b      	ldr	r3, [r3, #4]
 8107e96:	b10b      	cbz	r3, 8107e9c <_free_r+0x4c>
 8107e98:	42a3      	cmp	r3, r4
 8107e9a:	d9fa      	bls.n	8107e92 <_free_r+0x42>
 8107e9c:	6811      	ldr	r1, [r2, #0]
 8107e9e:	1850      	adds	r0, r2, r1
 8107ea0:	42a0      	cmp	r0, r4
 8107ea2:	d10b      	bne.n	8107ebc <_free_r+0x6c>
 8107ea4:	6820      	ldr	r0, [r4, #0]
 8107ea6:	4401      	add	r1, r0
 8107ea8:	1850      	adds	r0, r2, r1
 8107eaa:	4283      	cmp	r3, r0
 8107eac:	6011      	str	r1, [r2, #0]
 8107eae:	d1e0      	bne.n	8107e72 <_free_r+0x22>
 8107eb0:	6818      	ldr	r0, [r3, #0]
 8107eb2:	685b      	ldr	r3, [r3, #4]
 8107eb4:	6053      	str	r3, [r2, #4]
 8107eb6:	4408      	add	r0, r1
 8107eb8:	6010      	str	r0, [r2, #0]
 8107eba:	e7da      	b.n	8107e72 <_free_r+0x22>
 8107ebc:	d902      	bls.n	8107ec4 <_free_r+0x74>
 8107ebe:	230c      	movs	r3, #12
 8107ec0:	602b      	str	r3, [r5, #0]
 8107ec2:	e7d6      	b.n	8107e72 <_free_r+0x22>
 8107ec4:	6820      	ldr	r0, [r4, #0]
 8107ec6:	1821      	adds	r1, r4, r0
 8107ec8:	428b      	cmp	r3, r1
 8107eca:	bf04      	itt	eq
 8107ecc:	6819      	ldreq	r1, [r3, #0]
 8107ece:	685b      	ldreq	r3, [r3, #4]
 8107ed0:	6063      	str	r3, [r4, #4]
 8107ed2:	bf04      	itt	eq
 8107ed4:	1809      	addeq	r1, r1, r0
 8107ed6:	6021      	streq	r1, [r4, #0]
 8107ed8:	6054      	str	r4, [r2, #4]
 8107eda:	e7ca      	b.n	8107e72 <_free_r+0x22>
 8107edc:	bd38      	pop	{r3, r4, r5, pc}
 8107ede:	bf00      	nop
 8107ee0:	10004ad8 	.word	0x10004ad8

08107ee4 <_init>:
 8107ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107ee6:	bf00      	nop
 8107ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107eea:	bc08      	pop	{r3}
 8107eec:	469e      	mov	lr, r3
 8107eee:	4770      	bx	lr

08107ef0 <_fini>:
 8107ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107ef2:	bf00      	nop
 8107ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107ef6:	bc08      	pop	{r3}
 8107ef8:	469e      	mov	lr, r3
 8107efa:	4770      	bx	lr
